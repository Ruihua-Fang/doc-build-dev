import{S as j2t,i as D2t,s as G2t,e as a,k as l,w as v,t as o,M as O2t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as V2t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as z8r}from"../../chunks/Tip-39098574.js";import{D as k}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Z}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function X2t(A){let h,F,p,m,u,d,g,vo,Ql,Qc,Yr,Wl,Hl,E0,Wc,Be,Ge,Ul,vn,C0,Tn,Mn,w0,Jl,En,A0,Yl,Hc,ba;return{c(){h=a("p"),F=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),g=o("PretrainedConfig"),vo=o(`, make sure its
`),Ql=a("code"),Qc=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),Wl=a("code"),Hl=o('"new-model"'),E0=o(")."),Wc=l(),Be=a("p"),Ge=o("Likewise, if your "),Ul=a("code"),vn=o("NewModel"),C0=o(" is a subclass of "),Tn=a("a"),Mn=o("PreTrainedModel"),w0=o(`, make sure its
`),Jl=a("code"),En=o("config_class"),A0=o(` attribute is set to the same class you use when registering the model (here
`),Yl=a("code"),Hc=o("NewModelConfig"),ba=o(")."),this.h()},l(Oe){h=n(Oe,"P",{});var Me=s(h);F=r(Me,"If your "),p=n(Me,"CODE",{});var k7=s(p);m=r(k7,"NewModelConfig"),k7.forEach(t),u=r(Me," is a subclass of "),d=n(Me,"CODE",{});var Kl=s(d);g=r(Kl,"PretrainedConfig"),Kl.forEach(t),vo=r(Me,`, make sure its
`),Ql=n(Me,"CODE",{});var S7=s(Ql);Qc=r(S7,"model_type"),S7.forEach(t),Yr=r(Me," attribute is set to the same key you use when registering the config (here "),Wl=n(Me,"CODE",{});var R7=s(Wl);Hl=r(R7,'"new-model"'),R7.forEach(t),E0=r(Me,")."),Me.forEach(t),Wc=i(Oe),Be=n(Oe,"P",{});var To=s(Be);Ge=r(To,"Likewise, if your "),Ul=n(To,"CODE",{});var Fa=s(Ul);vn=r(Fa,"NewModel"),Fa.forEach(t),C0=r(To," is a subclass of "),Tn=n(To,"A",{href:!0});var B7=s(Tn);Mn=r(B7,"PreTrainedModel"),B7.forEach(t),w0=r(To,`, make sure its
`),Jl=n(To,"CODE",{});var Uc=s(Jl);En=r(Uc,"config_class"),Uc.forEach(t),A0=r(To,` attribute is set to the same class you use when registering the model (here
`),Yl=n(To,"CODE",{});var P7=s(Yl);Hc=r(P7,"NewModelConfig"),P7.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(Tn,"href","/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel")},m(Oe,Me){b(Oe,h,Me),e(h,F),e(h,p),e(p,m),e(h,u),e(h,d),e(d,g),e(h,vo),e(h,Ql),e(Ql,Qc),e(h,Yr),e(h,Wl),e(Wl,Hl),e(h,E0),b(Oe,Wc,Me),b(Oe,Be,Me),e(Be,Ge),e(Be,Ul),e(Ul,vn),e(Be,C0),e(Be,Tn),e(Tn,Mn),e(Be,w0),e(Be,Jl),e(Jl,En),e(Be,A0),e(Be,Yl),e(Yl,Hc),e(Be,ba)},d(Oe){Oe&&t(h),Oe&&t(Wc),Oe&&t(Be)}}}function z2t(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Q2t(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function W2t(A){let h,F,p,m,u;return{c(){h=a("p"),F=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Passing "),p=n(g,"CODE",{});var vo=s(p);m=r(vo,"use_auth_token=True"),vo.forEach(t),u=r(g," is required when you want to use a private model."),g.forEach(t)},m(d,g){b(d,h,g),e(h,F),e(h,p),e(p,m),e(h,u)},d(d){d&&t(h)}}}function H2t(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function U2t(A){let h,F,p,m,u;return{c(){h=a("p"),F=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Passing "),p=n(g,"CODE",{});var vo=s(p);m=r(vo,"use_auth_token=True"),vo.forEach(t),u=r(g," is required when you want to use a private model."),g.forEach(t)},m(d,g){b(d,h,g),e(h,F),e(h,p),e(p,m),e(h,u)},d(d){d&&t(h)}}}function J2t(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Y2t(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function K2t(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Z2t(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function eFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function oFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function rFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function tFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function aFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function nFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function sFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function lFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function iFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function dFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function cFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function fFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function mFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function hFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function gFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function pFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function uFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function _Ft(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function bFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function FFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function vFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function TFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function MFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function EFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function CFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function wFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function AFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function yFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function LFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function xFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function $Ft(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function kFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function SFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function RFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function BFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function PFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function IFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function qFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function NFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function jFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function DFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function GFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function OFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function VFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function XFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function zFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function QFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function WFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function HFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function UFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function JFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function YFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function KFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function ZFt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function evt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function ovt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function rvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function tvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function avt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function nvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function svt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function lvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function ivt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function dvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function cvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function fvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function mvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function hvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function gvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function pvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function uvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function _vt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function bvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Fvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function vvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Tvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Mvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Evt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Cvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function wvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Avt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function yvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Lvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function xvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function $vt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function kvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Svt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Rvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Bvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Pvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Ivt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function qvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function Nvt(A){let h,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){h=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){h=n(d,"P",{});var g=s(h);F=r(g,"Examples:"),g.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,g){b(d,h,g),e(h,F),b(d,p,g),M(m,d,g),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(h),d&&t(p),w(m,d)}}}function jvt(A){let h,F,p,m,u,d,g,vo,Ql,Qc,Yr,Wl,Hl,E0,Wc,Be,Ge,Ul,vn,C0,Tn,Mn,w0,Jl,En,A0,Yl,Hc,ba,Oe,Me,k7,Kl,S7,R7,To,Fa,B7,Uc,P7,PBe,L9e,Zl,Jc,IJ,y0,IBe,qJ,qBe,x9e,Cn,NBe,NJ,jBe,DBe,jJ,GBe,OBe,$9e,L0,k9e,I7,VBe,S9e,Yc,R9e,ei,Kc,DJ,x0,XBe,GJ,zBe,B9e,Mo,$0,QBe,k0,WBe,q7,HBe,UBe,JBe,S0,YBe,OJ,KBe,ZBe,ePe,vr,R0,oPe,VJ,rPe,tPe,oi,aPe,XJ,nPe,sPe,zJ,lPe,iPe,dPe,y,Zc,QJ,cPe,fPe,N7,mPe,hPe,gPe,ef,WJ,pPe,uPe,j7,_Pe,bPe,FPe,of,HJ,vPe,TPe,D7,MPe,EPe,CPe,rf,UJ,wPe,APe,G7,yPe,LPe,xPe,tf,JJ,$Pe,kPe,O7,SPe,RPe,BPe,af,YJ,PPe,IPe,V7,qPe,NPe,jPe,nf,KJ,DPe,GPe,X7,OPe,VPe,XPe,sf,ZJ,zPe,QPe,z7,WPe,HPe,UPe,lf,eY,JPe,YPe,Q7,KPe,ZPe,eIe,df,oY,oIe,rIe,W7,tIe,aIe,nIe,cf,rY,sIe,lIe,H7,iIe,dIe,cIe,ff,tY,fIe,mIe,U7,hIe,gIe,pIe,mf,aY,uIe,_Ie,J7,bIe,FIe,vIe,hf,nY,TIe,MIe,Y7,EIe,CIe,wIe,gf,sY,AIe,yIe,K7,LIe,xIe,$Ie,pf,lY,kIe,SIe,Z7,RIe,BIe,PIe,uf,iY,IIe,qIe,e$,NIe,jIe,DIe,_f,dY,GIe,OIe,o$,VIe,XIe,zIe,bf,cY,QIe,WIe,r$,HIe,UIe,JIe,Ff,fY,YIe,KIe,t$,ZIe,eqe,oqe,vf,mY,rqe,tqe,a$,aqe,nqe,sqe,Tf,hY,lqe,iqe,n$,dqe,cqe,fqe,Mf,gY,mqe,hqe,s$,gqe,pqe,uqe,Ef,pY,_qe,bqe,l$,Fqe,vqe,Tqe,Cf,uY,Mqe,Eqe,i$,Cqe,wqe,Aqe,wf,_Y,yqe,Lqe,d$,xqe,$qe,kqe,Af,bY,Sqe,Rqe,c$,Bqe,Pqe,Iqe,yf,FY,qqe,Nqe,f$,jqe,Dqe,Gqe,Lf,vY,Oqe,Vqe,m$,Xqe,zqe,Qqe,xf,TY,Wqe,Hqe,h$,Uqe,Jqe,Yqe,$f,MY,Kqe,Zqe,g$,eNe,oNe,rNe,kf,EY,tNe,aNe,p$,nNe,sNe,lNe,Sf,CY,iNe,dNe,u$,cNe,fNe,mNe,Rf,wY,hNe,gNe,_$,pNe,uNe,_Ne,Bf,AY,bNe,FNe,b$,vNe,TNe,MNe,Pf,yY,ENe,CNe,F$,wNe,ANe,yNe,If,LY,LNe,xNe,v$,$Ne,kNe,SNe,qf,xY,RNe,BNe,T$,PNe,INe,qNe,Nf,$Y,NNe,jNe,M$,DNe,GNe,ONe,jf,kY,VNe,XNe,E$,zNe,QNe,WNe,Df,SY,HNe,UNe,C$,JNe,YNe,KNe,Gf,RY,ZNe,eje,w$,oje,rje,tje,Of,BY,aje,nje,A$,sje,lje,ije,Vf,PY,dje,cje,y$,fje,mje,hje,Xf,IY,gje,pje,L$,uje,_je,bje,zf,qY,Fje,vje,x$,Tje,Mje,Eje,Qf,NY,Cje,wje,$$,Aje,yje,Lje,Wf,jY,xje,$je,k$,kje,Sje,Rje,Hf,DY,Bje,Pje,S$,Ije,qje,Nje,Uf,GY,jje,Dje,R$,Gje,Oje,Vje,Jf,OY,Xje,zje,B$,Qje,Wje,Hje,Yf,VY,Uje,Jje,P$,Yje,Kje,Zje,Kf,XY,eDe,oDe,I$,rDe,tDe,aDe,Zf,zY,nDe,sDe,q$,lDe,iDe,dDe,em,QY,cDe,fDe,N$,mDe,hDe,gDe,om,WY,pDe,uDe,HY,_De,bDe,FDe,rm,UY,vDe,TDe,j$,MDe,EDe,CDe,tm,JY,wDe,ADe,D$,yDe,LDe,xDe,am,YY,$De,kDe,KY,SDe,RDe,BDe,nm,ZY,PDe,IDe,G$,qDe,NDe,jDe,sm,eK,DDe,GDe,O$,ODe,VDe,XDe,lm,oK,zDe,QDe,V$,WDe,HDe,UDe,im,rK,JDe,YDe,X$,KDe,ZDe,eGe,dm,tK,oGe,rGe,z$,tGe,aGe,nGe,cm,aK,sGe,lGe,Q$,iGe,dGe,cGe,fm,nK,fGe,mGe,W$,hGe,gGe,pGe,mm,sK,uGe,_Ge,H$,bGe,FGe,vGe,hm,lK,TGe,MGe,U$,EGe,CGe,wGe,gm,iK,AGe,yGe,J$,LGe,xGe,$Ge,pm,dK,kGe,SGe,Y$,RGe,BGe,PGe,um,cK,IGe,qGe,K$,NGe,jGe,DGe,_m,fK,GGe,OGe,Z$,VGe,XGe,zGe,bm,mK,QGe,WGe,e9,HGe,UGe,JGe,Fm,hK,YGe,KGe,o9,ZGe,eOe,oOe,vm,gK,rOe,tOe,r9,aOe,nOe,sOe,Tm,pK,lOe,iOe,t9,dOe,cOe,fOe,Mm,uK,mOe,hOe,a9,gOe,pOe,uOe,Em,_K,_Oe,bOe,n9,FOe,vOe,TOe,Cm,bK,MOe,EOe,s9,COe,wOe,AOe,wm,FK,yOe,LOe,l9,xOe,$Oe,kOe,Am,vK,SOe,ROe,i9,BOe,POe,IOe,ym,TK,qOe,NOe,d9,jOe,DOe,GOe,Lm,MK,OOe,VOe,c9,XOe,zOe,QOe,xm,EK,WOe,HOe,f9,UOe,JOe,YOe,$m,CK,KOe,ZOe,m9,eVe,oVe,rVe,km,wK,tVe,aVe,h9,nVe,sVe,lVe,Sm,AK,iVe,dVe,g9,cVe,fVe,mVe,Rm,yK,hVe,gVe,p9,pVe,uVe,_Ve,Bm,LK,bVe,FVe,u9,vVe,TVe,MVe,Pm,xK,EVe,CVe,_9,wVe,AVe,yVe,Im,$K,LVe,xVe,b9,$Ve,kVe,SVe,qm,kK,RVe,BVe,F9,PVe,IVe,qVe,Nm,SK,NVe,jVe,v9,DVe,GVe,OVe,jm,RK,VVe,XVe,T9,zVe,QVe,WVe,Dm,BK,HVe,UVe,M9,JVe,YVe,KVe,Gm,PK,ZVe,eXe,E9,oXe,rXe,tXe,Om,IK,aXe,nXe,C9,sXe,lXe,iXe,Vm,qK,dXe,cXe,w9,fXe,mXe,hXe,Xm,gXe,zm,B0,pXe,NK,uXe,P9e,ri,Qm,jK,P0,_Xe,DK,bXe,I9e,Eo,I0,FXe,q0,vXe,A9,TXe,MXe,EXe,N0,CXe,GK,wXe,AXe,yXe,Tr,j0,LXe,OK,xXe,$Xe,va,kXe,VK,SXe,RXe,XK,BXe,PXe,zK,IXe,qXe,NXe,S,wn,QK,jXe,DXe,y9,GXe,OXe,L9,VXe,XXe,zXe,An,WK,QXe,WXe,x9,HXe,UXe,$9,JXe,YXe,KXe,yn,HK,ZXe,eze,k9,oze,rze,S9,tze,aze,nze,Wm,UK,sze,lze,R9,ize,dze,cze,Ln,JK,fze,mze,B9,hze,gze,P9,pze,uze,_ze,Hm,YK,bze,Fze,I9,vze,Tze,Mze,Um,KK,Eze,Cze,q9,wze,Aze,yze,Jm,ZK,Lze,xze,N9,$ze,kze,Sze,xn,eZ,Rze,Bze,j9,Pze,Ize,D9,qze,Nze,jze,$n,oZ,Dze,Gze,G9,Oze,Vze,O9,Xze,zze,Qze,kn,rZ,Wze,Hze,V9,Uze,Jze,X9,Yze,Kze,Zze,Ym,tZ,eQe,oQe,z9,rQe,tQe,aQe,Km,aZ,nQe,sQe,Q9,lQe,iQe,dQe,Sn,nZ,cQe,fQe,W9,mQe,hQe,H9,gQe,pQe,uQe,Zm,sZ,_Qe,bQe,U9,FQe,vQe,TQe,Rn,lZ,MQe,EQe,J9,CQe,wQe,Y9,AQe,yQe,LQe,Bn,iZ,xQe,$Qe,K9,kQe,SQe,Z9,RQe,BQe,PQe,Pn,dZ,IQe,qQe,ek,NQe,jQe,cZ,DQe,GQe,OQe,eh,fZ,VQe,XQe,ok,zQe,QQe,WQe,In,mZ,HQe,UQe,rk,JQe,YQe,tk,KQe,ZQe,eWe,oh,hZ,oWe,rWe,ak,tWe,aWe,nWe,qn,gZ,sWe,lWe,nk,iWe,dWe,sk,cWe,fWe,mWe,Nn,pZ,hWe,gWe,lk,pWe,uWe,ik,_We,bWe,FWe,jn,uZ,vWe,TWe,dk,MWe,EWe,ck,CWe,wWe,AWe,rh,_Z,yWe,LWe,fk,xWe,$We,kWe,Dn,bZ,SWe,RWe,mk,BWe,PWe,hk,IWe,qWe,NWe,th,FZ,jWe,DWe,gk,GWe,OWe,VWe,Gn,vZ,XWe,zWe,pk,QWe,WWe,uk,HWe,UWe,JWe,On,TZ,YWe,KWe,_k,ZWe,eHe,bk,oHe,rHe,tHe,Vn,MZ,aHe,nHe,Fk,sHe,lHe,vk,iHe,dHe,cHe,Xn,EZ,fHe,mHe,Tk,hHe,gHe,Mk,pHe,uHe,_He,ah,CZ,bHe,FHe,Ek,vHe,THe,MHe,zn,wZ,EHe,CHe,Ck,wHe,AHe,wk,yHe,LHe,xHe,Qn,AZ,$He,kHe,Ak,SHe,RHe,yk,BHe,PHe,IHe,Wn,yZ,qHe,NHe,Lk,jHe,DHe,xk,GHe,OHe,VHe,Hn,LZ,XHe,zHe,$k,QHe,WHe,kk,HHe,UHe,JHe,Un,xZ,YHe,KHe,Sk,ZHe,eUe,Rk,oUe,rUe,tUe,Jn,$Z,aUe,nUe,Bk,sUe,lUe,Pk,iUe,dUe,cUe,nh,kZ,fUe,mUe,Ik,hUe,gUe,pUe,Yn,SZ,uUe,_Ue,qk,bUe,FUe,Nk,vUe,TUe,MUe,sh,RZ,EUe,CUe,jk,wUe,AUe,yUe,lh,BZ,LUe,xUe,Dk,$Ue,kUe,SUe,Kn,PZ,RUe,BUe,Gk,PUe,IUe,Ok,qUe,NUe,jUe,Zn,IZ,DUe,GUe,Vk,OUe,VUe,Xk,XUe,zUe,QUe,ih,qZ,WUe,HUe,zk,UUe,JUe,YUe,es,NZ,KUe,ZUe,Qk,eJe,oJe,Wk,rJe,tJe,aJe,os,jZ,nJe,sJe,Hk,lJe,iJe,Uk,dJe,cJe,fJe,rs,DZ,mJe,hJe,Jk,gJe,pJe,Yk,uJe,_Je,bJe,ts,GZ,FJe,vJe,Kk,TJe,MJe,Zk,EJe,CJe,wJe,as,OZ,AJe,yJe,eS,LJe,xJe,oS,$Je,kJe,SJe,dh,VZ,RJe,BJe,rS,PJe,IJe,qJe,ch,XZ,NJe,jJe,tS,DJe,GJe,OJe,fh,zZ,VJe,XJe,QZ,zJe,QJe,WJe,mh,WZ,HJe,UJe,aS,JJe,YJe,KJe,ns,HZ,ZJe,eYe,nS,oYe,rYe,sS,tYe,aYe,nYe,hh,UZ,sYe,lYe,lS,iYe,dYe,cYe,ss,JZ,fYe,mYe,iS,hYe,gYe,dS,pYe,uYe,_Ye,ls,YZ,bYe,FYe,cS,vYe,TYe,fS,MYe,EYe,CYe,is,KZ,wYe,AYe,mS,yYe,LYe,hS,xYe,$Ye,kYe,ds,ZZ,SYe,RYe,gS,BYe,PYe,pS,IYe,qYe,NYe,cs,eee,jYe,DYe,uS,GYe,OYe,_S,VYe,XYe,zYe,fs,oee,QYe,WYe,bS,HYe,UYe,FS,JYe,YYe,KYe,gh,ree,ZYe,eKe,vS,oKe,rKe,tKe,ph,tee,aKe,nKe,TS,sKe,lKe,iKe,ms,aee,dKe,cKe,MS,fKe,mKe,ES,hKe,gKe,pKe,hs,nee,uKe,_Ke,CS,bKe,FKe,wS,vKe,TKe,MKe,gs,see,EKe,CKe,AS,wKe,AKe,yS,yKe,LKe,xKe,uh,lee,$Ke,kKe,LS,SKe,RKe,BKe,_h,iee,PKe,IKe,xS,qKe,NKe,jKe,bh,dee,DKe,GKe,$S,OKe,VKe,XKe,Fh,cee,zKe,QKe,kS,WKe,HKe,UKe,ps,fee,JKe,YKe,SS,KKe,ZKe,RS,eZe,oZe,rZe,vh,mee,tZe,aZe,BS,nZe,sZe,lZe,Th,hee,iZe,dZe,PS,cZe,fZe,mZe,us,gee,hZe,gZe,IS,pZe,uZe,qS,_Ze,bZe,FZe,_s,pee,vZe,TZe,NS,MZe,EZe,jS,CZe,wZe,AZe,Mh,yZe,Eh,D0,LZe,uee,xZe,q9e,ti,Ch,_ee,G0,$Ze,bee,kZe,N9e,Co,O0,SZe,V0,RZe,DS,BZe,PZe,IZe,X0,qZe,Fee,NZe,jZe,DZe,Ve,z0,GZe,vee,OZe,VZe,Ta,XZe,Tee,zZe,QZe,Mee,WZe,HZe,Eee,UZe,JZe,YZe,fe,wh,Cee,KZe,ZZe,GS,eeo,oeo,reo,Ah,wee,teo,aeo,OS,neo,seo,leo,yh,Aee,ieo,deo,VS,ceo,feo,meo,Lh,yee,heo,geo,XS,peo,ueo,_eo,xh,Lee,beo,Feo,zS,veo,Teo,Meo,$h,xee,Eeo,Ceo,QS,weo,Aeo,yeo,kh,$ee,Leo,xeo,WS,$eo,keo,Seo,Sh,kee,Reo,Beo,HS,Peo,Ieo,qeo,Rh,See,Neo,jeo,US,Deo,Geo,Oeo,Bh,Ree,Veo,Xeo,JS,zeo,Qeo,Weo,Ph,Bee,Heo,Ueo,YS,Jeo,Yeo,Keo,Ih,Pee,Zeo,eoo,KS,ooo,roo,too,qh,Iee,aoo,noo,ZS,soo,loo,ioo,Nh,qee,doo,coo,eR,foo,moo,hoo,jh,Nee,goo,poo,oR,uoo,_oo,boo,Dh,jee,Foo,voo,rR,Too,Moo,Eoo,Gh,Dee,Coo,woo,tR,Aoo,yoo,Loo,Oh,Gee,xoo,$oo,aR,koo,Soo,Roo,Vh,Boo,Xh,Poo,zh,Q0,Ioo,Oee,qoo,j9e,ai,Qh,Vee,W0,Noo,Xee,joo,D9e,wo,H0,Doo,U0,Goo,nR,Ooo,Voo,Xoo,J0,zoo,zee,Qoo,Woo,Hoo,Xe,Y0,Uoo,Qee,Joo,Yoo,ni,Koo,Wee,Zoo,ero,Hee,oro,rro,tro,Pe,Wh,Uee,aro,nro,sR,sro,lro,iro,Hh,Jee,dro,cro,lR,fro,mro,hro,Uh,Yee,gro,pro,iR,uro,_ro,bro,Jh,Kee,Fro,vro,dR,Tro,Mro,Ero,Yh,Zee,Cro,wro,cR,Aro,yro,Lro,Kh,eoe,xro,$ro,fR,kro,Sro,Rro,Zh,ooe,Bro,Pro,mR,Iro,qro,Nro,eg,roe,jro,Dro,hR,Gro,Oro,Vro,og,Xro,rg,zro,tg,K0,Qro,toe,Wro,G9e,si,ag,aoe,Z0,Hro,noe,Uro,O9e,Ao,e6,Jro,li,Yro,gR,Kro,Zro,pR,eto,oto,rto,o6,tto,soe,ato,nto,sto,Kr,r6,lto,loe,ito,dto,ii,cto,ioe,fto,mto,uR,hto,gto,pto,ng,uto,ze,t6,_to,doe,bto,Fto,Ma,vto,coe,Tto,Mto,foe,Eto,Cto,moe,wto,Ato,yto,x,sg,hoe,Lto,xto,_R,$to,kto,Sto,lg,goe,Rto,Bto,bR,Pto,Ito,qto,ig,poe,Nto,jto,FR,Dto,Gto,Oto,dg,uoe,Vto,Xto,vR,zto,Qto,Wto,cg,_oe,Hto,Uto,TR,Jto,Yto,Kto,fg,boe,Zto,eao,MR,oao,rao,tao,mg,Foe,aao,nao,ER,sao,lao,iao,hg,voe,dao,cao,CR,fao,mao,hao,gg,Toe,gao,pao,wR,uao,_ao,bao,pg,Moe,Fao,vao,AR,Tao,Mao,Eao,ug,Eoe,Cao,wao,yR,Aao,yao,Lao,_g,Coe,xao,$ao,LR,kao,Sao,Rao,bg,woe,Bao,Pao,xR,Iao,qao,Nao,Fg,Aoe,jao,Dao,$R,Gao,Oao,Vao,vg,yoe,Xao,zao,kR,Qao,Wao,Hao,Tg,Loe,Uao,Jao,SR,Yao,Kao,Zao,Mg,xoe,eno,ono,RR,rno,tno,ano,Eg,$oe,nno,sno,BR,lno,ino,dno,Cg,koe,cno,fno,PR,mno,hno,gno,wg,Soe,pno,uno,IR,_no,bno,Fno,Ag,Roe,vno,Tno,qR,Mno,Eno,Cno,yg,Boe,wno,Ano,NR,yno,Lno,xno,Lg,Poe,$no,kno,jR,Sno,Rno,Bno,xg,Ioe,Pno,Ino,DR,qno,Nno,jno,$g,qoe,Dno,Gno,GR,Ono,Vno,Xno,kg,Noe,zno,Qno,OR,Wno,Hno,Uno,Sg,joe,Jno,Yno,VR,Kno,Zno,eso,Rg,Doe,oso,rso,XR,tso,aso,nso,bs,Goe,sso,lso,zR,iso,dso,QR,cso,fso,mso,Bg,Ooe,hso,gso,WR,pso,uso,_so,Pg,Voe,bso,Fso,HR,vso,Tso,Mso,Ig,Xoe,Eso,Cso,UR,wso,Aso,yso,qg,zoe,Lso,xso,JR,$so,kso,Sso,Ng,Qoe,Rso,Bso,YR,Pso,Iso,qso,jg,Woe,Nso,jso,KR,Dso,Gso,Oso,Dg,Hoe,Vso,Xso,ZR,zso,Qso,Wso,Gg,Uoe,Hso,Uso,eB,Jso,Yso,Kso,Og,Joe,Zso,elo,oB,olo,rlo,tlo,Vg,Yoe,alo,nlo,rB,slo,llo,ilo,Xg,Koe,dlo,clo,tB,flo,mlo,hlo,zg,Zoe,glo,plo,aB,ulo,_lo,blo,Qg,ere,Flo,vlo,nB,Tlo,Mlo,Elo,Wg,ore,Clo,wlo,sB,Alo,ylo,Llo,Hg,rre,xlo,$lo,lB,klo,Slo,Rlo,Ug,tre,Blo,Plo,iB,Ilo,qlo,Nlo,Jg,are,jlo,Dlo,dB,Glo,Olo,Vlo,Yg,nre,Xlo,zlo,cB,Qlo,Wlo,Hlo,Kg,sre,Ulo,Jlo,fB,Ylo,Klo,Zlo,Zg,lre,eio,oio,mB,rio,tio,aio,ep,ire,nio,sio,hB,lio,iio,dio,op,dre,cio,fio,gB,mio,hio,gio,rp,cre,pio,uio,pB,_io,bio,Fio,tp,fre,vio,Tio,uB,Mio,Eio,Cio,ap,mre,wio,Aio,_B,yio,Lio,xio,np,hre,$io,kio,gre,Sio,Rio,Bio,sp,pre,Pio,Iio,bB,qio,Nio,jio,lp,ure,Dio,Gio,FB,Oio,Vio,Xio,ip,_re,zio,Qio,bre,Wio,Hio,Uio,dp,Fre,Jio,Yio,vB,Kio,Zio,edo,cp,vre,odo,rdo,TB,tdo,ado,ndo,fp,Tre,sdo,ldo,MB,ido,ddo,cdo,mp,Mre,fdo,mdo,EB,hdo,gdo,pdo,hp,Ere,udo,_do,CB,bdo,Fdo,vdo,gp,Cre,Tdo,Mdo,wB,Edo,Cdo,wdo,pp,wre,Ado,ydo,AB,Ldo,xdo,$do,up,Are,kdo,Sdo,yB,Rdo,Bdo,Pdo,_p,yre,Ido,qdo,LB,Ndo,jdo,Ddo,bp,Lre,Gdo,Odo,xB,Vdo,Xdo,zdo,Fp,xre,Qdo,Wdo,$B,Hdo,Udo,Jdo,vp,$re,Ydo,Kdo,kB,Zdo,eco,oco,Tp,kre,rco,tco,SB,aco,nco,sco,Mp,Sre,lco,ico,RB,dco,cco,fco,Ep,Rre,mco,hco,BB,gco,pco,uco,Cp,Bre,_co,bco,PB,Fco,vco,Tco,wp,Pre,Mco,Eco,IB,Cco,wco,Aco,Ap,Ire,yco,Lco,qB,xco,$co,kco,yp,qre,Sco,Rco,NB,Bco,Pco,Ico,Lp,Nre,qco,Nco,jB,jco,Dco,Gco,xp,jre,Oco,Vco,DB,Xco,zco,Qco,$p,Dre,Wco,Hco,GB,Uco,Jco,Yco,kp,Gre,Kco,Zco,OB,efo,ofo,rfo,Sp,Ore,tfo,afo,VB,nfo,sfo,lfo,Rp,Vre,ifo,dfo,XB,cfo,ffo,mfo,Bp,Xre,hfo,gfo,zB,pfo,ufo,_fo,Pp,zre,bfo,Ffo,QB,vfo,Tfo,Mfo,Ip,Qre,Efo,Cfo,WB,wfo,Afo,yfo,qp,Wre,Lfo,xfo,HB,$fo,kfo,Sfo,Np,Hre,Rfo,Bfo,UB,Pfo,Ifo,qfo,jp,Ure,Nfo,jfo,JB,Dfo,Gfo,Ofo,Dp,Jre,Vfo,Xfo,YB,zfo,Qfo,Wfo,Gp,Yre,Hfo,Ufo,KB,Jfo,Yfo,Kfo,Op,Zfo,Kre,emo,omo,Zre,rmo,tmo,Vp,V9e,di,Xp,ete,a6,amo,ote,nmo,X9e,yo,n6,smo,ci,lmo,ZB,imo,dmo,eP,cmo,fmo,mmo,s6,hmo,rte,gmo,pmo,umo,Zr,l6,_mo,tte,bmo,Fmo,fi,vmo,ate,Tmo,Mmo,oP,Emo,Cmo,wmo,zp,Amo,Qe,i6,ymo,nte,Lmo,xmo,Ea,$mo,ste,kmo,Smo,lte,Rmo,Bmo,ite,Pmo,Imo,qmo,G,Qp,dte,Nmo,jmo,rP,Dmo,Gmo,Omo,Wp,cte,Vmo,Xmo,tP,zmo,Qmo,Wmo,Hp,fte,Hmo,Umo,aP,Jmo,Ymo,Kmo,Up,mte,Zmo,eho,nP,oho,rho,tho,Jp,hte,aho,nho,sP,sho,lho,iho,Yp,gte,dho,cho,lP,fho,mho,hho,Kp,pte,gho,pho,iP,uho,_ho,bho,Zp,ute,Fho,vho,dP,Tho,Mho,Eho,eu,_te,Cho,who,cP,Aho,yho,Lho,ou,bte,xho,$ho,fP,kho,Sho,Rho,ru,Fte,Bho,Pho,mP,Iho,qho,Nho,tu,vte,jho,Dho,hP,Gho,Oho,Vho,au,Tte,Xho,zho,gP,Qho,Who,Hho,nu,Mte,Uho,Jho,pP,Yho,Kho,Zho,su,Ete,ego,ogo,uP,rgo,tgo,ago,lu,Cte,ngo,sgo,_P,lgo,igo,dgo,iu,wte,cgo,fgo,bP,mgo,hgo,ggo,du,Ate,pgo,ugo,FP,_go,bgo,Fgo,cu,yte,vgo,Tgo,vP,Mgo,Ego,Cgo,fu,Lte,wgo,Ago,TP,ygo,Lgo,xgo,mu,xte,$go,kgo,MP,Sgo,Rgo,Bgo,hu,$te,Pgo,Igo,EP,qgo,Ngo,jgo,gu,kte,Dgo,Ggo,CP,Ogo,Vgo,Xgo,pu,Ste,zgo,Qgo,wP,Wgo,Hgo,Ugo,uu,Rte,Jgo,Ygo,AP,Kgo,Zgo,epo,_u,Bte,opo,rpo,yP,tpo,apo,npo,bu,Pte,spo,lpo,LP,ipo,dpo,cpo,Fu,Ite,fpo,mpo,xP,hpo,gpo,ppo,vu,qte,upo,_po,$P,bpo,Fpo,vpo,Tu,Nte,Tpo,Mpo,kP,Epo,Cpo,wpo,Mu,jte,Apo,ypo,SP,Lpo,xpo,$po,Eu,Dte,kpo,Spo,RP,Rpo,Bpo,Ppo,Cu,Gte,Ipo,qpo,BP,Npo,jpo,Dpo,wu,Ote,Gpo,Opo,PP,Vpo,Xpo,zpo,Au,Vte,Qpo,Wpo,IP,Hpo,Upo,Jpo,yu,Xte,Ypo,Kpo,qP,Zpo,euo,ouo,Lu,zte,ruo,tuo,NP,auo,nuo,suo,xu,Qte,luo,iuo,jP,duo,cuo,fuo,$u,Wte,muo,huo,DP,guo,puo,uuo,ku,_uo,Hte,buo,Fuo,Ute,vuo,Tuo,Su,z9e,mi,Ru,Jte,d6,Muo,Yte,Euo,Q9e,Lo,c6,Cuo,hi,wuo,GP,Auo,yuo,OP,Luo,xuo,$uo,f6,kuo,Kte,Suo,Ruo,Buo,et,m6,Puo,Zte,Iuo,quo,gi,Nuo,eae,juo,Duo,VP,Guo,Ouo,Vuo,Bu,Xuo,We,h6,zuo,oae,Quo,Wuo,Ca,Huo,rae,Uuo,Juo,tae,Yuo,Kuo,aae,Zuo,e_o,o_o,z,Pu,nae,r_o,t_o,XP,a_o,n_o,s_o,Iu,sae,l_o,i_o,zP,d_o,c_o,f_o,qu,lae,m_o,h_o,QP,g_o,p_o,u_o,Nu,iae,__o,b_o,WP,F_o,v_o,T_o,ju,dae,M_o,E_o,HP,C_o,w_o,A_o,Du,cae,y_o,L_o,UP,x_o,$_o,k_o,Gu,fae,S_o,R_o,JP,B_o,P_o,I_o,Ou,mae,q_o,N_o,YP,j_o,D_o,G_o,Vu,hae,O_o,V_o,KP,X_o,z_o,Q_o,Xu,gae,W_o,H_o,ZP,U_o,J_o,Y_o,zu,pae,K_o,Z_o,eI,ebo,obo,rbo,Qu,uae,tbo,abo,oI,nbo,sbo,lbo,Wu,_ae,ibo,dbo,rI,cbo,fbo,mbo,Hu,bae,hbo,gbo,tI,pbo,ubo,_bo,Uu,Fae,bbo,Fbo,aI,vbo,Tbo,Mbo,Ju,vae,Ebo,Cbo,nI,wbo,Abo,ybo,Yu,Tae,Lbo,xbo,sI,$bo,kbo,Sbo,Ku,Mae,Rbo,Bbo,lI,Pbo,Ibo,qbo,Zu,Eae,Nbo,jbo,iI,Dbo,Gbo,Obo,e_,Cae,Vbo,Xbo,wae,zbo,Qbo,Wbo,o_,Aae,Hbo,Ubo,dI,Jbo,Ybo,Kbo,r_,yae,Zbo,e2o,Lae,o2o,r2o,t2o,t_,xae,a2o,n2o,cI,s2o,l2o,i2o,a_,$ae,d2o,c2o,fI,f2o,m2o,h2o,n_,kae,g2o,p2o,mI,u2o,_2o,b2o,s_,Sae,F2o,v2o,hI,T2o,M2o,E2o,l_,Rae,C2o,w2o,gI,A2o,y2o,L2o,i_,Bae,x2o,$2o,pI,k2o,S2o,R2o,d_,Pae,B2o,P2o,uI,I2o,q2o,N2o,c_,Iae,j2o,D2o,_I,G2o,O2o,V2o,f_,qae,X2o,z2o,bI,Q2o,W2o,H2o,m_,Nae,U2o,J2o,FI,Y2o,K2o,Z2o,h_,jae,eFo,oFo,vI,rFo,tFo,aFo,g_,Dae,nFo,sFo,TI,lFo,iFo,dFo,p_,Gae,cFo,fFo,MI,mFo,hFo,gFo,u_,pFo,Oae,uFo,_Fo,Vae,bFo,FFo,__,W9e,pi,b_,Xae,g6,vFo,zae,TFo,H9e,xo,p6,MFo,ui,EFo,EI,CFo,wFo,CI,AFo,yFo,LFo,u6,xFo,Qae,$Fo,kFo,SFo,ot,_6,RFo,Wae,BFo,PFo,_i,IFo,Hae,qFo,NFo,wI,jFo,DFo,GFo,F_,OFo,He,b6,VFo,Uae,XFo,zFo,wa,QFo,Jae,WFo,HFo,Yae,UFo,JFo,Kae,YFo,KFo,ZFo,Q,v_,Zae,evo,ovo,AI,rvo,tvo,avo,T_,ene,nvo,svo,yI,lvo,ivo,dvo,M_,one,cvo,fvo,LI,mvo,hvo,gvo,E_,rne,pvo,uvo,xI,_vo,bvo,Fvo,C_,tne,vvo,Tvo,$I,Mvo,Evo,Cvo,w_,ane,wvo,Avo,kI,yvo,Lvo,xvo,A_,nne,$vo,kvo,SI,Svo,Rvo,Bvo,y_,sne,Pvo,Ivo,RI,qvo,Nvo,jvo,L_,lne,Dvo,Gvo,BI,Ovo,Vvo,Xvo,x_,ine,zvo,Qvo,PI,Wvo,Hvo,Uvo,$_,dne,Jvo,Yvo,II,Kvo,Zvo,e1o,k_,cne,o1o,r1o,qI,t1o,a1o,n1o,S_,fne,s1o,l1o,NI,i1o,d1o,c1o,R_,mne,f1o,m1o,jI,h1o,g1o,p1o,B_,hne,u1o,_1o,DI,b1o,F1o,v1o,P_,gne,T1o,M1o,GI,E1o,C1o,w1o,I_,pne,A1o,y1o,OI,L1o,x1o,$1o,q_,une,k1o,S1o,VI,R1o,B1o,P1o,N_,_ne,I1o,q1o,XI,N1o,j1o,D1o,j_,bne,G1o,O1o,zI,V1o,X1o,z1o,D_,Fne,Q1o,W1o,QI,H1o,U1o,J1o,G_,vne,Y1o,K1o,WI,Z1o,eTo,oTo,O_,Tne,rTo,tTo,HI,aTo,nTo,sTo,V_,Mne,lTo,iTo,Ene,dTo,cTo,fTo,X_,Cne,mTo,hTo,UI,gTo,pTo,uTo,z_,wne,_To,bTo,JI,FTo,vTo,TTo,Q_,Ane,MTo,ETo,YI,CTo,wTo,ATo,W_,yne,yTo,LTo,KI,xTo,$To,kTo,H_,Lne,STo,RTo,ZI,BTo,PTo,ITo,U_,xne,qTo,NTo,eq,jTo,DTo,GTo,J_,$ne,OTo,VTo,kne,XTo,zTo,QTo,Y_,Sne,WTo,HTo,oq,UTo,JTo,YTo,K_,Rne,KTo,ZTo,rq,eMo,oMo,rMo,Z_,Bne,tMo,aMo,tq,nMo,sMo,lMo,eb,Pne,iMo,dMo,aq,cMo,fMo,mMo,ob,hMo,Ine,gMo,pMo,qne,uMo,_Mo,rb,U9e,bi,tb,Nne,F6,bMo,jne,FMo,J9e,$o,v6,vMo,Fi,TMo,nq,MMo,EMo,sq,CMo,wMo,AMo,T6,yMo,Dne,LMo,xMo,$Mo,rt,M6,kMo,Gne,SMo,RMo,vi,BMo,One,PMo,IMo,lq,qMo,NMo,jMo,ab,DMo,Ue,E6,GMo,Vne,OMo,VMo,Aa,XMo,Xne,zMo,QMo,zne,WMo,HMo,Qne,UMo,JMo,YMo,pe,nb,Wne,KMo,ZMo,iq,e4o,o4o,r4o,sb,Hne,t4o,a4o,dq,n4o,s4o,l4o,lb,Une,i4o,d4o,cq,c4o,f4o,m4o,ib,Jne,h4o,g4o,fq,p4o,u4o,_4o,db,Yne,b4o,F4o,mq,v4o,T4o,M4o,cb,Kne,E4o,C4o,hq,w4o,A4o,y4o,fb,Zne,L4o,x4o,gq,$4o,k4o,S4o,mb,ese,R4o,B4o,pq,P4o,I4o,q4o,hb,ose,N4o,j4o,uq,D4o,G4o,O4o,gb,rse,V4o,X4o,_q,z4o,Q4o,W4o,pb,tse,H4o,U4o,bq,J4o,Y4o,K4o,ub,ase,Z4o,eEo,Fq,oEo,rEo,tEo,_b,nse,aEo,nEo,sse,sEo,lEo,iEo,bb,lse,dEo,cEo,vq,fEo,mEo,hEo,Fb,ise,gEo,pEo,Tq,uEo,_Eo,bEo,vb,dse,FEo,vEo,Mq,TEo,MEo,EEo,Tb,CEo,cse,wEo,AEo,fse,yEo,LEo,Mb,Y9e,Ti,Eb,mse,C6,xEo,hse,$Eo,K9e,ko,w6,kEo,Mi,SEo,Eq,REo,BEo,Cq,PEo,IEo,qEo,A6,NEo,gse,jEo,DEo,GEo,tt,y6,OEo,pse,VEo,XEo,Ei,zEo,use,QEo,WEo,wq,HEo,UEo,JEo,Cb,YEo,Je,L6,KEo,_se,ZEo,e5o,ya,o5o,bse,r5o,t5o,Fse,a5o,n5o,vse,s5o,l5o,i5o,q,wb,Tse,d5o,c5o,Aq,f5o,m5o,h5o,Ab,Mse,g5o,p5o,yq,u5o,_5o,b5o,yb,Ese,F5o,v5o,Lq,T5o,M5o,E5o,Lb,Cse,C5o,w5o,xq,A5o,y5o,L5o,xb,wse,x5o,$5o,$q,k5o,S5o,R5o,$b,Ase,B5o,P5o,kq,I5o,q5o,N5o,kb,yse,j5o,D5o,Sq,G5o,O5o,V5o,Sb,Lse,X5o,z5o,Rq,Q5o,W5o,H5o,Rb,xse,U5o,J5o,Bq,Y5o,K5o,Z5o,Bb,$se,eCo,oCo,Pq,rCo,tCo,aCo,Pb,kse,nCo,sCo,Iq,lCo,iCo,dCo,Ib,Sse,cCo,fCo,qq,mCo,hCo,gCo,qb,Rse,pCo,uCo,Nq,_Co,bCo,FCo,Nb,Bse,vCo,TCo,jq,MCo,ECo,CCo,jb,Pse,wCo,ACo,Dq,yCo,LCo,xCo,Db,Ise,$Co,kCo,Gq,SCo,RCo,BCo,Gb,qse,PCo,ICo,Oq,qCo,NCo,jCo,Ob,Nse,DCo,GCo,Vq,OCo,VCo,XCo,Vb,jse,zCo,QCo,Xq,WCo,HCo,UCo,Xb,Dse,JCo,YCo,zq,KCo,ZCo,e3o,zb,Gse,o3o,r3o,Qq,t3o,a3o,n3o,Qb,Ose,s3o,l3o,Wq,i3o,d3o,c3o,Wb,Vse,f3o,m3o,Hq,h3o,g3o,p3o,Hb,Xse,u3o,_3o,Uq,b3o,F3o,v3o,Ub,zse,T3o,M3o,Jq,E3o,C3o,w3o,Jb,Qse,A3o,y3o,Yq,L3o,x3o,$3o,Yb,Wse,k3o,S3o,Kq,R3o,B3o,P3o,Kb,Hse,I3o,q3o,Zq,N3o,j3o,D3o,Zb,Use,G3o,O3o,eN,V3o,X3o,z3o,e2,Jse,Q3o,W3o,oN,H3o,U3o,J3o,o2,Yse,Y3o,K3o,rN,Z3o,ewo,owo,r2,Kse,rwo,two,tN,awo,nwo,swo,t2,Zse,lwo,iwo,ele,dwo,cwo,fwo,a2,ole,mwo,hwo,rle,gwo,pwo,uwo,n2,tle,_wo,bwo,aN,Fwo,vwo,Two,s2,ale,Mwo,Ewo,nN,Cwo,wwo,Awo,l2,nle,ywo,Lwo,sN,xwo,$wo,kwo,i2,sle,Swo,Rwo,lN,Bwo,Pwo,Iwo,d2,lle,qwo,Nwo,iN,jwo,Dwo,Gwo,c2,ile,Owo,Vwo,dN,Xwo,zwo,Qwo,f2,dle,Wwo,Hwo,cN,Uwo,Jwo,Ywo,m2,cle,Kwo,Zwo,fN,eAo,oAo,rAo,h2,fle,tAo,aAo,mN,nAo,sAo,lAo,g2,mle,iAo,dAo,hN,cAo,fAo,mAo,p2,hle,hAo,gAo,gN,pAo,uAo,_Ao,u2,gle,bAo,FAo,pN,vAo,TAo,MAo,_2,EAo,ple,CAo,wAo,ule,AAo,yAo,b2,Z9e,Ci,F2,_le,x6,LAo,ble,xAo,eke,So,$6,$Ao,wi,kAo,uN,SAo,RAo,_N,BAo,PAo,IAo,k6,qAo,Fle,NAo,jAo,DAo,at,S6,GAo,vle,OAo,VAo,Ai,XAo,Tle,zAo,QAo,bN,WAo,HAo,UAo,v2,JAo,Ye,R6,YAo,Mle,KAo,ZAo,La,e0o,Ele,o0o,r0o,Cle,t0o,a0o,wle,n0o,s0o,l0o,Y,T2,Ale,i0o,d0o,FN,c0o,f0o,m0o,M2,yle,h0o,g0o,vN,p0o,u0o,_0o,E2,Lle,b0o,F0o,TN,v0o,T0o,M0o,C2,xle,E0o,C0o,MN,w0o,A0o,y0o,w2,$le,L0o,x0o,EN,$0o,k0o,S0o,A2,kle,R0o,B0o,CN,P0o,I0o,q0o,y2,Sle,N0o,j0o,wN,D0o,G0o,O0o,L2,Rle,V0o,X0o,AN,z0o,Q0o,W0o,x2,Ble,H0o,U0o,yN,J0o,Y0o,K0o,$2,Ple,Z0o,e6o,LN,o6o,r6o,t6o,k2,Ile,a6o,n6o,xN,s6o,l6o,i6o,S2,qle,d6o,c6o,$N,f6o,m6o,h6o,R2,Nle,g6o,p6o,kN,u6o,_6o,b6o,B2,jle,F6o,v6o,SN,T6o,M6o,E6o,P2,Dle,C6o,w6o,RN,A6o,y6o,L6o,I2,Gle,x6o,$6o,BN,k6o,S6o,R6o,q2,Ole,B6o,P6o,PN,I6o,q6o,N6o,N2,Vle,j6o,D6o,IN,G6o,O6o,V6o,j2,Xle,X6o,z6o,zle,Q6o,W6o,H6o,D2,Qle,U6o,J6o,qN,Y6o,K6o,Z6o,G2,Wle,eyo,oyo,NN,ryo,tyo,ayo,O2,Hle,nyo,syo,jN,lyo,iyo,dyo,V2,Ule,cyo,fyo,DN,myo,hyo,gyo,X2,Jle,pyo,uyo,GN,_yo,byo,Fyo,z2,Yle,vyo,Tyo,ON,Myo,Eyo,Cyo,Q2,Kle,wyo,Ayo,VN,yyo,Lyo,xyo,W2,Zle,$yo,kyo,XN,Syo,Ryo,Byo,H2,eie,Pyo,Iyo,zN,qyo,Nyo,jyo,U2,Dyo,oie,Gyo,Oyo,rie,Vyo,Xyo,J2,oke,yi,Y2,tie,B6,zyo,aie,Qyo,rke,Ro,P6,Wyo,Li,Hyo,QN,Uyo,Jyo,WN,Yyo,Kyo,Zyo,I6,eLo,nie,oLo,rLo,tLo,nt,q6,aLo,sie,nLo,sLo,xi,lLo,lie,iLo,dLo,HN,cLo,fLo,mLo,K2,hLo,Ke,N6,gLo,iie,pLo,uLo,xa,_Lo,die,bLo,FLo,cie,vLo,TLo,fie,MLo,ELo,CLo,Wr,Z2,mie,wLo,ALo,UN,yLo,LLo,xLo,eF,hie,$Lo,kLo,JN,SLo,RLo,BLo,oF,gie,PLo,ILo,YN,qLo,NLo,jLo,rF,pie,DLo,GLo,KN,OLo,VLo,XLo,tF,uie,zLo,QLo,_ie,WLo,HLo,ULo,aF,JLo,bie,YLo,KLo,Fie,ZLo,e8o,nF,tke,$i,sF,vie,j6,o8o,Tie,r8o,ake,Bo,D6,t8o,ki,a8o,ZN,n8o,s8o,ej,l8o,i8o,d8o,G6,c8o,Mie,f8o,m8o,h8o,st,O6,g8o,Eie,p8o,u8o,Si,_8o,Cie,b8o,F8o,oj,v8o,T8o,M8o,lF,E8o,Ze,V6,C8o,wie,w8o,A8o,$a,y8o,Aie,L8o,x8o,yie,$8o,k8o,Lie,S8o,R8o,B8o,U,iF,xie,P8o,I8o,rj,q8o,N8o,j8o,dF,$ie,D8o,G8o,tj,O8o,V8o,X8o,cF,kie,z8o,Q8o,aj,W8o,H8o,U8o,fF,Sie,J8o,Y8o,nj,K8o,Z8o,exo,mF,Rie,oxo,rxo,sj,txo,axo,nxo,hF,Bie,sxo,lxo,lj,ixo,dxo,cxo,gF,Pie,fxo,mxo,ij,hxo,gxo,pxo,pF,Iie,uxo,_xo,dj,bxo,Fxo,vxo,uF,qie,Txo,Mxo,cj,Exo,Cxo,wxo,_F,Nie,Axo,yxo,fj,Lxo,xxo,$xo,bF,jie,kxo,Sxo,mj,Rxo,Bxo,Pxo,FF,Die,Ixo,qxo,hj,Nxo,jxo,Dxo,vF,Gie,Gxo,Oxo,gj,Vxo,Xxo,zxo,TF,Oie,Qxo,Wxo,pj,Hxo,Uxo,Jxo,MF,Vie,Yxo,Kxo,uj,Zxo,e7o,o7o,EF,Xie,r7o,t7o,_j,a7o,n7o,s7o,CF,zie,l7o,i7o,bj,d7o,c7o,f7o,wF,Qie,m7o,h7o,Fj,g7o,p7o,u7o,AF,Wie,_7o,b7o,vj,F7o,v7o,T7o,yF,Hie,M7o,E7o,Tj,C7o,w7o,A7o,LF,Uie,y7o,L7o,Mj,x7o,$7o,k7o,xF,Jie,S7o,R7o,Ej,B7o,P7o,I7o,$F,Yie,q7o,N7o,Cj,j7o,D7o,G7o,kF,Kie,O7o,V7o,Zie,X7o,z7o,Q7o,SF,ede,W7o,H7o,wj,U7o,J7o,Y7o,RF,ode,K7o,Z7o,Aj,e$o,o$o,r$o,BF,rde,t$o,a$o,yj,n$o,s$o,l$o,PF,tde,i$o,d$o,Lj,c$o,f$o,m$o,IF,ade,h$o,g$o,xj,p$o,u$o,_$o,qF,nde,b$o,F$o,$j,v$o,T$o,M$o,NF,sde,E$o,C$o,kj,w$o,A$o,y$o,jF,lde,L$o,x$o,Sj,$$o,k$o,S$o,DF,ide,R$o,B$o,Rj,P$o,I$o,q$o,GF,N$o,dde,j$o,D$o,cde,G$o,O$o,OF,nke,Ri,VF,fde,X6,V$o,mde,X$o,ske,Po,z6,z$o,Bi,Q$o,Bj,W$o,H$o,Pj,U$o,J$o,Y$o,Q6,K$o,hde,Z$o,e9o,o9o,lt,W6,r9o,gde,t9o,a9o,Pi,n9o,pde,s9o,l9o,Ij,i9o,d9o,c9o,XF,f9o,eo,H6,m9o,ude,h9o,g9o,ka,p9o,_de,u9o,_9o,bde,b9o,F9o,Fde,v9o,T9o,M9o,O,zF,vde,E9o,C9o,qj,w9o,A9o,y9o,QF,Tde,L9o,x9o,Nj,$9o,k9o,S9o,WF,Mde,R9o,B9o,jj,P9o,I9o,q9o,HF,Ede,N9o,j9o,Dj,D9o,G9o,O9o,UF,Cde,V9o,X9o,Gj,z9o,Q9o,W9o,JF,wde,H9o,U9o,Oj,J9o,Y9o,K9o,YF,Ade,Z9o,eko,Vj,oko,rko,tko,KF,yde,ako,nko,Xj,sko,lko,iko,ZF,Lde,dko,cko,zj,fko,mko,hko,ev,xde,gko,pko,Qj,uko,_ko,bko,ov,$de,Fko,vko,Wj,Tko,Mko,Eko,rv,kde,Cko,wko,Hj,Ako,yko,Lko,tv,Sde,xko,$ko,Uj,kko,Sko,Rko,av,Rde,Bko,Pko,Jj,Iko,qko,Nko,nv,Bde,jko,Dko,Yj,Gko,Oko,Vko,sv,Pde,Xko,zko,Kj,Qko,Wko,Hko,lv,Ide,Uko,Jko,Zj,Yko,Kko,Zko,iv,qde,eSo,oSo,eD,rSo,tSo,aSo,dv,Nde,nSo,sSo,oD,lSo,iSo,dSo,cv,jde,cSo,fSo,rD,mSo,hSo,gSo,fv,Dde,pSo,uSo,tD,_So,bSo,FSo,mv,Gde,vSo,TSo,aD,MSo,ESo,CSo,hv,Ode,wSo,ASo,nD,ySo,LSo,xSo,gv,Vde,$So,kSo,sD,SSo,RSo,BSo,pv,Xde,PSo,ISo,lD,qSo,NSo,jSo,uv,zde,DSo,GSo,iD,OSo,VSo,XSo,_v,Qde,zSo,QSo,dD,WSo,HSo,USo,bv,Wde,JSo,YSo,Hde,KSo,ZSo,eRo,Fv,Ude,oRo,rRo,cD,tRo,aRo,nRo,vv,Jde,sRo,lRo,fD,iRo,dRo,cRo,Tv,Yde,fRo,mRo,mD,hRo,gRo,pRo,Mv,Kde,uRo,_Ro,hD,bRo,FRo,vRo,Ev,Zde,TRo,MRo,gD,ERo,CRo,wRo,Cv,ece,ARo,yRo,pD,LRo,xRo,$Ro,wv,oce,kRo,SRo,uD,RRo,BRo,PRo,Av,rce,IRo,qRo,_D,NRo,jRo,DRo,yv,tce,GRo,ORo,bD,VRo,XRo,zRo,Lv,ace,QRo,WRo,FD,HRo,URo,JRo,xv,nce,YRo,KRo,vD,ZRo,eBo,oBo,$v,rBo,sce,tBo,aBo,lce,nBo,sBo,kv,lke,Ii,Sv,ice,U6,lBo,dce,iBo,ike,Io,J6,dBo,qi,cBo,TD,fBo,mBo,MD,hBo,gBo,pBo,Y6,uBo,cce,_Bo,bBo,FBo,it,K6,vBo,fce,TBo,MBo,Ni,EBo,mce,CBo,wBo,ED,ABo,yBo,LBo,Rv,xBo,oo,Z6,$Bo,hce,kBo,SBo,Sa,RBo,gce,BBo,PBo,pce,IBo,qBo,uce,NBo,jBo,DBo,_ce,Bv,bce,GBo,OBo,CD,VBo,XBo,zBo,Pv,QBo,Fce,WBo,HBo,vce,UBo,JBo,Iv,dke,ji,qv,Tce,ey,YBo,Mce,KBo,cke,qo,oy,ZBo,Di,ePo,wD,oPo,rPo,AD,tPo,aPo,nPo,ry,sPo,Ece,lPo,iPo,dPo,dt,ty,cPo,Cce,fPo,mPo,Gi,hPo,wce,gPo,pPo,yD,uPo,_Po,bPo,Nv,FPo,ro,ay,vPo,Ace,TPo,MPo,Ra,EPo,yce,CPo,wPo,Lce,APo,yPo,xce,LPo,xPo,$Po,Fe,jv,$ce,kPo,SPo,LD,RPo,BPo,PPo,Dv,kce,IPo,qPo,xD,NPo,jPo,DPo,Fs,Sce,GPo,OPo,$D,VPo,XPo,kD,zPo,QPo,WPo,Gv,Rce,HPo,UPo,SD,JPo,YPo,KPo,ct,Bce,ZPo,eIo,RD,oIo,rIo,BD,tIo,aIo,PD,nIo,sIo,lIo,Ov,Pce,iIo,dIo,ID,cIo,fIo,mIo,Vv,Ice,hIo,gIo,qD,pIo,uIo,_Io,Xv,qce,bIo,FIo,ND,vIo,TIo,MIo,zv,Nce,EIo,CIo,jD,wIo,AIo,yIo,Qv,jce,LIo,xIo,DD,$Io,kIo,SIo,Wv,Dce,RIo,BIo,GD,PIo,IIo,qIo,Hv,NIo,Gce,jIo,DIo,Oce,GIo,OIo,Uv,fke,Oi,Jv,Vce,ny,VIo,Xce,XIo,mke,No,sy,zIo,Vi,QIo,OD,WIo,HIo,VD,UIo,JIo,YIo,ly,KIo,zce,ZIo,eqo,oqo,ft,iy,rqo,Qce,tqo,aqo,Xi,nqo,Wce,sqo,lqo,XD,iqo,dqo,cqo,Yv,fqo,to,dy,mqo,Hce,hqo,gqo,Ba,pqo,Uce,uqo,_qo,Jce,bqo,Fqo,Yce,vqo,Tqo,Mqo,Kce,Kv,Zce,Eqo,Cqo,zD,wqo,Aqo,yqo,Zv,Lqo,efe,xqo,$qo,ofe,kqo,Sqo,e1,hke,zi,o1,rfe,cy,Rqo,tfe,Bqo,gke,jo,fy,Pqo,Qi,Iqo,QD,qqo,Nqo,WD,jqo,Dqo,Gqo,my,Oqo,afe,Vqo,Xqo,zqo,mt,hy,Qqo,nfe,Wqo,Hqo,Wi,Uqo,sfe,Jqo,Yqo,HD,Kqo,Zqo,eNo,r1,oNo,ao,gy,rNo,lfe,tNo,aNo,Pa,nNo,ife,sNo,lNo,dfe,iNo,dNo,cfe,cNo,fNo,mNo,Ie,t1,ffe,hNo,gNo,UD,pNo,uNo,_No,a1,mfe,bNo,FNo,JD,vNo,TNo,MNo,n1,hfe,ENo,CNo,YD,wNo,ANo,yNo,s1,gfe,LNo,xNo,KD,$No,kNo,SNo,l1,pfe,RNo,BNo,ZD,PNo,INo,qNo,i1,ufe,NNo,jNo,eG,DNo,GNo,ONo,d1,_fe,VNo,XNo,oG,zNo,QNo,WNo,c1,bfe,HNo,UNo,rG,JNo,YNo,KNo,f1,ZNo,Ffe,ejo,ojo,vfe,rjo,tjo,m1,pke,Hi,h1,Tfe,py,ajo,Mfe,njo,uke,Do,uy,sjo,Ui,ljo,tG,ijo,djo,aG,cjo,fjo,mjo,_y,hjo,Efe,gjo,pjo,ujo,ht,by,_jo,Cfe,bjo,Fjo,Ji,vjo,wfe,Tjo,Mjo,nG,Ejo,Cjo,wjo,g1,Ajo,no,Fy,yjo,Afe,Ljo,xjo,Ia,$jo,yfe,kjo,Sjo,Lfe,Rjo,Bjo,xfe,Pjo,Ijo,qjo,qa,p1,$fe,Njo,jjo,sG,Djo,Gjo,Ojo,u1,kfe,Vjo,Xjo,lG,zjo,Qjo,Wjo,_1,Sfe,Hjo,Ujo,iG,Jjo,Yjo,Kjo,b1,Rfe,Zjo,eDo,dG,oDo,rDo,tDo,F1,aDo,Bfe,nDo,sDo,Pfe,lDo,iDo,v1,_ke,Yi,T1,Ife,vy,dDo,qfe,cDo,bke,Go,Ty,fDo,Ki,mDo,cG,hDo,gDo,fG,pDo,uDo,_Do,My,bDo,Nfe,FDo,vDo,TDo,gt,Ey,MDo,jfe,EDo,CDo,Zi,wDo,Dfe,ADo,yDo,mG,LDo,xDo,$Do,M1,kDo,so,Cy,SDo,Gfe,RDo,BDo,Na,PDo,Ofe,IDo,qDo,Vfe,NDo,jDo,Xfe,DDo,GDo,ODo,qe,E1,zfe,VDo,XDo,hG,zDo,QDo,WDo,C1,Qfe,HDo,UDo,gG,JDo,YDo,KDo,w1,Wfe,ZDo,eGo,pG,oGo,rGo,tGo,A1,Hfe,aGo,nGo,uG,sGo,lGo,iGo,y1,Ufe,dGo,cGo,_G,fGo,mGo,hGo,L1,Jfe,gGo,pGo,bG,uGo,_Go,bGo,x1,Yfe,FGo,vGo,FG,TGo,MGo,EGo,$1,Kfe,CGo,wGo,vG,AGo,yGo,LGo,k1,xGo,Zfe,$Go,kGo,eme,SGo,RGo,S1,Fke,ed,R1,ome,wy,BGo,rme,PGo,vke,Oo,Ay,IGo,od,qGo,TG,NGo,jGo,MG,DGo,GGo,OGo,yy,VGo,tme,XGo,zGo,QGo,pt,Ly,WGo,ame,HGo,UGo,rd,JGo,nme,YGo,KGo,EG,ZGo,eOo,oOo,B1,rOo,lo,xy,tOo,sme,aOo,nOo,ja,sOo,lme,lOo,iOo,ime,dOo,cOo,dme,fOo,mOo,hOo,$y,P1,cme,gOo,pOo,CG,uOo,_Oo,bOo,I1,fme,FOo,vOo,wG,TOo,MOo,EOo,q1,COo,mme,wOo,AOo,hme,yOo,LOo,N1,Tke,td,j1,gme,ky,xOo,pme,$Oo,Mke,Vo,Sy,kOo,ad,SOo,AG,ROo,BOo,yG,POo,IOo,qOo,Ry,NOo,ume,jOo,DOo,GOo,ut,By,OOo,_me,VOo,XOo,nd,zOo,bme,QOo,WOo,LG,HOo,UOo,JOo,D1,YOo,io,Py,KOo,Fme,ZOo,eVo,Da,oVo,vme,rVo,tVo,Tme,aVo,nVo,Mme,sVo,lVo,iVo,Ga,G1,Eme,dVo,cVo,xG,fVo,mVo,hVo,O1,Cme,gVo,pVo,$G,uVo,_Vo,bVo,V1,wme,FVo,vVo,kG,TVo,MVo,EVo,X1,Ame,CVo,wVo,SG,AVo,yVo,LVo,z1,xVo,yme,$Vo,kVo,Lme,SVo,RVo,Q1,Eke,sd,W1,xme,Iy,BVo,$me,PVo,Cke,Xo,qy,IVo,ld,qVo,RG,NVo,jVo,BG,DVo,GVo,OVo,Ny,VVo,kme,XVo,zVo,QVo,_t,jy,WVo,Sme,HVo,UVo,id,JVo,Rme,YVo,KVo,PG,ZVo,eXo,oXo,H1,rXo,co,Dy,tXo,Bme,aXo,nXo,Oa,sXo,Pme,lXo,iXo,Ime,dXo,cXo,qme,fXo,mXo,hXo,dd,U1,Nme,gXo,pXo,IG,uXo,_Xo,bXo,J1,jme,FXo,vXo,qG,TXo,MXo,EXo,Y1,Dme,CXo,wXo,NG,AXo,yXo,LXo,K1,xXo,Gme,$Xo,kXo,Ome,SXo,RXo,Z1,wke,cd,eT,Vme,Gy,BXo,Xme,PXo,Ake,zo,Oy,IXo,fd,qXo,jG,NXo,jXo,DG,DXo,GXo,OXo,Vy,VXo,zme,XXo,zXo,QXo,bt,Xy,WXo,Qme,HXo,UXo,md,JXo,Wme,YXo,KXo,GG,ZXo,ezo,ozo,oT,rzo,fo,zy,tzo,Hme,azo,nzo,Va,szo,Ume,lzo,izo,Jme,dzo,czo,Yme,fzo,mzo,hzo,Kme,rT,Zme,gzo,pzo,OG,uzo,_zo,bzo,tT,Fzo,ehe,vzo,Tzo,ohe,Mzo,Ezo,aT,yke,hd,nT,rhe,Qy,Czo,the,wzo,Lke,Qo,Wy,Azo,gd,yzo,VG,Lzo,xzo,XG,$zo,kzo,Szo,Hy,Rzo,ahe,Bzo,Pzo,Izo,Ft,Uy,qzo,nhe,Nzo,jzo,pd,Dzo,she,Gzo,Ozo,zG,Vzo,Xzo,zzo,sT,Qzo,mo,Jy,Wzo,lhe,Hzo,Uzo,Xa,Jzo,ihe,Yzo,Kzo,dhe,Zzo,eQo,che,oQo,rQo,tQo,fhe,lT,mhe,aQo,nQo,QG,sQo,lQo,iQo,iT,dQo,hhe,cQo,fQo,ghe,mQo,hQo,dT,xke,ud,cT,phe,Yy,gQo,uhe,pQo,$ke,Wo,Ky,uQo,_d,_Qo,WG,bQo,FQo,HG,vQo,TQo,MQo,Zy,EQo,_he,CQo,wQo,AQo,vt,eL,yQo,bhe,LQo,xQo,bd,$Qo,Fhe,kQo,SQo,UG,RQo,BQo,PQo,fT,IQo,ho,oL,qQo,vhe,NQo,jQo,za,DQo,The,GQo,OQo,Mhe,VQo,XQo,Ehe,zQo,QQo,WQo,rL,mT,Che,HQo,UQo,JG,JQo,YQo,KQo,hT,whe,ZQo,eWo,YG,oWo,rWo,tWo,gT,aWo,Ahe,nWo,sWo,yhe,lWo,iWo,pT,kke,Fd,uT,Lhe,tL,dWo,xhe,cWo,Ske,Ho,aL,fWo,vd,mWo,KG,hWo,gWo,ZG,pWo,uWo,_Wo,nL,bWo,$he,FWo,vWo,TWo,Tt,sL,MWo,khe,EWo,CWo,Td,wWo,She,AWo,yWo,eO,LWo,xWo,$Wo,_T,kWo,go,lL,SWo,Rhe,RWo,BWo,Qa,PWo,Bhe,IWo,qWo,Phe,NWo,jWo,Ihe,DWo,GWo,OWo,qhe,bT,Nhe,VWo,XWo,oO,zWo,QWo,WWo,FT,HWo,jhe,UWo,JWo,Dhe,YWo,KWo,vT,Rke,Md,TT,Ghe,iL,ZWo,Ohe,eHo,Bke,Uo,dL,oHo,Ed,rHo,rO,tHo,aHo,tO,nHo,sHo,lHo,cL,iHo,Vhe,dHo,cHo,fHo,Mt,fL,mHo,Xhe,hHo,gHo,Cd,pHo,zhe,uHo,_Ho,aO,bHo,FHo,vHo,MT,THo,Mr,mL,MHo,Qhe,EHo,CHo,Wa,wHo,Whe,AHo,yHo,Hhe,LHo,xHo,Uhe,$Ho,kHo,SHo,j,ET,Jhe,RHo,BHo,nO,PHo,IHo,qHo,CT,Yhe,NHo,jHo,sO,DHo,GHo,OHo,wT,Khe,VHo,XHo,lO,zHo,QHo,WHo,AT,Zhe,HHo,UHo,iO,JHo,YHo,KHo,yT,ege,ZHo,eUo,dO,oUo,rUo,tUo,LT,oge,aUo,nUo,cO,sUo,lUo,iUo,xT,rge,dUo,cUo,fO,fUo,mUo,hUo,$T,tge,gUo,pUo,mO,uUo,_Uo,bUo,kT,age,FUo,vUo,hO,TUo,MUo,EUo,ST,nge,CUo,wUo,gO,AUo,yUo,LUo,RT,sge,xUo,$Uo,pO,kUo,SUo,RUo,BT,lge,BUo,PUo,uO,IUo,qUo,NUo,PT,ige,jUo,DUo,_O,GUo,OUo,VUo,IT,dge,XUo,zUo,bO,QUo,WUo,HUo,qT,cge,UUo,JUo,FO,YUo,KUo,ZUo,NT,fge,eJo,oJo,vO,rJo,tJo,aJo,vs,mge,nJo,sJo,TO,lJo,iJo,MO,dJo,cJo,fJo,jT,hge,mJo,hJo,EO,gJo,pJo,uJo,DT,gge,_Jo,bJo,CO,FJo,vJo,TJo,GT,pge,MJo,EJo,wO,CJo,wJo,AJo,OT,uge,yJo,LJo,AO,xJo,$Jo,kJo,VT,_ge,SJo,RJo,yO,BJo,PJo,IJo,XT,bge,qJo,NJo,LO,jJo,DJo,GJo,zT,Fge,OJo,VJo,xO,XJo,zJo,QJo,QT,vge,WJo,HJo,$O,UJo,JJo,YJo,WT,Tge,KJo,ZJo,kO,eYo,oYo,rYo,HT,Mge,tYo,aYo,SO,nYo,sYo,lYo,UT,Ege,iYo,dYo,RO,cYo,fYo,mYo,JT,Cge,hYo,gYo,BO,pYo,uYo,_Yo,YT,wge,bYo,FYo,PO,vYo,TYo,MYo,KT,Age,EYo,CYo,IO,wYo,AYo,yYo,ZT,yge,LYo,xYo,qO,$Yo,kYo,SYo,eM,Lge,RYo,BYo,NO,PYo,IYo,qYo,oM,xge,NYo,jYo,jO,DYo,GYo,OYo,rM,$ge,VYo,XYo,DO,zYo,QYo,WYo,tM,kge,HYo,UYo,GO,JYo,YYo,KYo,aM,Sge,ZYo,eKo,OO,oKo,rKo,tKo,nM,Rge,aKo,nKo,VO,sKo,lKo,iKo,sM,Bge,dKo,cKo,XO,fKo,mKo,hKo,lM,Pge,gKo,pKo,zO,uKo,_Ko,bKo,iM,Ige,FKo,vKo,QO,TKo,MKo,EKo,dM,qge,CKo,wKo,WO,AKo,yKo,LKo,cM,Pke,wd,fM,Nge,hL,xKo,jge,$Ko,Ike,Jo,gL,kKo,Ad,SKo,HO,RKo,BKo,UO,PKo,IKo,qKo,pL,NKo,Dge,jKo,DKo,GKo,Et,uL,OKo,Gge,VKo,XKo,yd,zKo,Oge,QKo,WKo,JO,HKo,UKo,JKo,mM,YKo,Er,_L,KKo,Vge,ZKo,eZo,Ha,oZo,Xge,rZo,tZo,zge,aZo,nZo,Qge,sZo,lZo,iZo,ae,hM,Wge,dZo,cZo,YO,fZo,mZo,hZo,gM,Hge,gZo,pZo,KO,uZo,_Zo,bZo,pM,Uge,FZo,vZo,ZO,TZo,MZo,EZo,uM,Jge,CZo,wZo,eV,AZo,yZo,LZo,_M,Yge,xZo,$Zo,oV,kZo,SZo,RZo,bM,Kge,BZo,PZo,rV,IZo,qZo,NZo,FM,Zge,jZo,DZo,tV,GZo,OZo,VZo,vM,epe,XZo,zZo,aV,QZo,WZo,HZo,TM,ope,UZo,JZo,nV,YZo,KZo,ZZo,MM,rpe,eer,oer,sV,rer,ter,aer,EM,tpe,ner,ser,lV,ler,ier,der,CM,ape,cer,fer,iV,mer,her,ger,wM,npe,per,uer,dV,_er,ber,Fer,AM,spe,ver,Ter,cV,Mer,Eer,Cer,yM,lpe,wer,Aer,fV,yer,Ler,xer,LM,ipe,$er,ker,mV,Ser,Rer,Ber,xM,dpe,Per,Ier,hV,qer,Ner,jer,$M,cpe,Der,Ger,gV,Oer,Ver,Xer,kM,fpe,zer,Qer,pV,Wer,Her,Uer,SM,mpe,Jer,Yer,uV,Ker,Zer,eor,RM,hpe,oor,ror,_V,tor,aor,nor,BM,gpe,sor,lor,bV,ior,dor,cor,PM,qke,Ld,IM,ppe,bL,mor,upe,hor,Nke,Yo,FL,gor,xd,por,FV,uor,_or,vV,bor,For,vor,vL,Tor,_pe,Mor,Eor,Cor,Ct,TL,wor,bpe,Aor,yor,$d,Lor,Fpe,xor,$or,TV,kor,Sor,Ror,qM,Bor,Cr,ML,Por,vpe,Ior,qor,Ua,Nor,Tpe,jor,Dor,Mpe,Gor,Oor,Epe,Vor,Xor,zor,ve,NM,Cpe,Qor,Wor,MV,Hor,Uor,Jor,jM,wpe,Yor,Kor,EV,Zor,err,orr,DM,Ape,rrr,trr,CV,arr,nrr,srr,GM,ype,lrr,irr,wV,drr,crr,frr,OM,Lpe,mrr,hrr,AV,grr,prr,urr,VM,xpe,_rr,brr,yV,Frr,vrr,Trr,XM,$pe,Mrr,Err,LV,Crr,wrr,Arr,zM,kpe,yrr,Lrr,xV,xrr,$rr,krr,QM,Spe,Srr,Rrr,$V,Brr,Prr,Irr,WM,Rpe,qrr,Nrr,kV,jrr,Drr,Grr,HM,Bpe,Orr,Vrr,SV,Xrr,zrr,Qrr,UM,jke,kd,JM,Ppe,EL,Wrr,Ipe,Hrr,Dke,Ko,CL,Urr,Sd,Jrr,RV,Yrr,Krr,BV,Zrr,etr,otr,wL,rtr,qpe,ttr,atr,ntr,wt,AL,str,Npe,ltr,itr,Rd,dtr,jpe,ctr,ftr,PV,mtr,htr,gtr,YM,ptr,wr,yL,utr,Dpe,_tr,btr,Ja,Ftr,Gpe,vtr,Ttr,Ope,Mtr,Etr,Vpe,Ctr,wtr,Atr,LL,KM,Xpe,ytr,Ltr,IV,xtr,$tr,ktr,ZM,zpe,Str,Rtr,qV,Btr,Ptr,Itr,e4,Gke,Bd,o4,Qpe,xL,qtr,Wpe,Ntr,Oke,Zo,$L,jtr,Pd,Dtr,NV,Gtr,Otr,jV,Vtr,Xtr,ztr,kL,Qtr,Hpe,Wtr,Htr,Utr,At,SL,Jtr,Upe,Ytr,Ktr,Id,Ztr,Jpe,ear,oar,DV,rar,tar,aar,r4,nar,Ar,RL,sar,Ype,lar,iar,Ya,dar,Kpe,car,far,Zpe,mar,har,eue,gar,par,uar,se,t4,oue,_ar,bar,GV,Far,Tar,Mar,a4,rue,Ear,Car,OV,war,Aar,yar,n4,tue,Lar,xar,VV,$ar,kar,Sar,s4,aue,Rar,Bar,XV,Par,Iar,qar,l4,nue,Nar,jar,zV,Dar,Gar,Oar,i4,sue,Var,Xar,QV,zar,Qar,War,d4,lue,Har,Uar,WV,Jar,Yar,Kar,c4,iue,Zar,enr,HV,onr,rnr,tnr,f4,due,anr,nnr,UV,snr,lnr,inr,m4,cue,dnr,cnr,JV,fnr,mnr,hnr,h4,fue,gnr,pnr,YV,unr,_nr,bnr,g4,mue,Fnr,vnr,KV,Tnr,Mnr,Enr,p4,hue,Cnr,wnr,ZV,Anr,ynr,Lnr,u4,gue,xnr,$nr,eX,knr,Snr,Rnr,_4,pue,Bnr,Pnr,oX,Inr,qnr,Nnr,b4,uue,jnr,Dnr,rX,Gnr,Onr,Vnr,F4,_ue,Xnr,znr,tX,Qnr,Wnr,Hnr,v4,bue,Unr,Jnr,aX,Ynr,Knr,Znr,T4,Fue,esr,osr,nX,rsr,tsr,asr,M4,vue,nsr,ssr,sX,lsr,isr,dsr,E4,Vke,qd,C4,Tue,BL,csr,Mue,fsr,Xke,er,PL,msr,Nd,hsr,lX,gsr,psr,iX,usr,_sr,bsr,IL,Fsr,Eue,vsr,Tsr,Msr,yt,qL,Esr,Cue,Csr,wsr,jd,Asr,wue,ysr,Lsr,dX,xsr,$sr,ksr,w4,Ssr,yr,NL,Rsr,Aue,Bsr,Psr,Ka,Isr,yue,qsr,Nsr,Lue,jsr,Dsr,xue,Gsr,Osr,Vsr,Ee,A4,$ue,Xsr,zsr,cX,Qsr,Wsr,Hsr,y4,kue,Usr,Jsr,fX,Ysr,Ksr,Zsr,L4,Sue,elr,olr,mX,rlr,tlr,alr,x4,Rue,nlr,slr,hX,llr,ilr,dlr,$4,Bue,clr,flr,gX,mlr,hlr,glr,k4,Pue,plr,ulr,pX,_lr,blr,Flr,S4,Iue,vlr,Tlr,uX,Mlr,Elr,Clr,R4,que,wlr,Alr,_X,ylr,Llr,xlr,B4,Nue,$lr,klr,bX,Slr,Rlr,Blr,P4,jue,Plr,Ilr,FX,qlr,Nlr,jlr,I4,zke,Dd,q4,Due,jL,Dlr,Gue,Glr,Qke,or,DL,Olr,Gd,Vlr,vX,Xlr,zlr,TX,Qlr,Wlr,Hlr,GL,Ulr,Oue,Jlr,Ylr,Klr,Lt,OL,Zlr,Vue,eir,oir,Od,rir,Xue,tir,air,MX,nir,sir,lir,N4,iir,Lr,VL,dir,zue,cir,fir,Za,mir,Que,hir,gir,Wue,pir,uir,Hue,_ir,bir,Fir,ee,j4,Uue,vir,Tir,EX,Mir,Eir,Cir,D4,Jue,wir,Air,CX,yir,Lir,xir,G4,Yue,$ir,kir,wX,Sir,Rir,Bir,O4,Kue,Pir,Iir,AX,qir,Nir,jir,V4,Zue,Dir,Gir,yX,Oir,Vir,Xir,X4,e_e,zir,Qir,LX,Wir,Hir,Uir,z4,o_e,Jir,Yir,xX,Kir,Zir,edr,Q4,r_e,odr,rdr,$X,tdr,adr,ndr,W4,t_e,sdr,ldr,kX,idr,ddr,cdr,H4,a_e,fdr,mdr,SX,hdr,gdr,pdr,U4,n_e,udr,_dr,RX,bdr,Fdr,vdr,J4,s_e,Tdr,Mdr,BX,Edr,Cdr,wdr,Y4,l_e,Adr,ydr,PX,Ldr,xdr,$dr,K4,i_e,kdr,Sdr,IX,Rdr,Bdr,Pdr,Z4,d_e,Idr,qdr,qX,Ndr,jdr,Ddr,eE,c_e,Gdr,Odr,NX,Vdr,Xdr,zdr,oE,f_e,Qdr,Wdr,jX,Hdr,Udr,Jdr,rE,m_e,Ydr,Kdr,DX,Zdr,ecr,ocr,tE,h_e,rcr,tcr,GX,acr,ncr,scr,aE,g_e,lcr,icr,OX,dcr,ccr,fcr,nE,p_e,mcr,hcr,VX,gcr,pcr,ucr,sE,u_e,_cr,bcr,XX,Fcr,vcr,Tcr,lE,__e,Mcr,Ecr,zX,Ccr,wcr,Acr,iE,b_e,ycr,Lcr,QX,xcr,$cr,kcr,dE,F_e,Scr,Rcr,WX,Bcr,Pcr,Icr,cE,Wke,Vd,fE,v_e,XL,qcr,T_e,Ncr,Hke,rr,zL,jcr,Xd,Dcr,HX,Gcr,Ocr,UX,Vcr,Xcr,zcr,QL,Qcr,M_e,Wcr,Hcr,Ucr,xt,WL,Jcr,E_e,Ycr,Kcr,zd,Zcr,C_e,efr,ofr,JX,rfr,tfr,afr,mE,nfr,xr,HL,sfr,w_e,lfr,ifr,en,dfr,A_e,cfr,ffr,y_e,mfr,hfr,L_e,gfr,pfr,ufr,he,hE,x_e,_fr,bfr,YX,Ffr,vfr,Tfr,gE,$_e,Mfr,Efr,KX,Cfr,wfr,Afr,pE,k_e,yfr,Lfr,ZX,xfr,$fr,kfr,uE,S_e,Sfr,Rfr,ez,Bfr,Pfr,Ifr,_E,R_e,qfr,Nfr,oz,jfr,Dfr,Gfr,bE,B_e,Ofr,Vfr,rz,Xfr,zfr,Qfr,FE,P_e,Wfr,Hfr,tz,Ufr,Jfr,Yfr,vE,I_e,Kfr,Zfr,az,emr,omr,rmr,TE,q_e,tmr,amr,nz,nmr,smr,lmr,ME,N_e,imr,dmr,sz,cmr,fmr,mmr,EE,j_e,hmr,gmr,lz,pmr,umr,_mr,CE,D_e,bmr,Fmr,iz,vmr,Tmr,Mmr,wE,G_e,Emr,Cmr,dz,wmr,Amr,ymr,AE,O_e,Lmr,xmr,cz,$mr,kmr,Smr,yE,V_e,Rmr,Bmr,fz,Pmr,Imr,qmr,LE,X_e,Nmr,jmr,mz,Dmr,Gmr,Omr,xE,z_e,Vmr,Xmr,hz,zmr,Qmr,Wmr,$E,Uke,Qd,kE,Q_e,UL,Hmr,W_e,Umr,Jke,tr,JL,Jmr,Wd,Ymr,gz,Kmr,Zmr,pz,ehr,ohr,rhr,YL,thr,H_e,ahr,nhr,shr,$t,KL,lhr,U_e,ihr,dhr,Hd,chr,J_e,fhr,mhr,uz,hhr,ghr,phr,SE,uhr,$r,ZL,_hr,Y_e,bhr,Fhr,on,vhr,K_e,Thr,Mhr,Z_e,Ehr,Chr,ebe,whr,Ahr,yhr,obe,RE,rbe,Lhr,xhr,_z,$hr,khr,Shr,BE,Yke,Ud,PE,tbe,e8,Rhr,abe,Bhr,Kke,ar,o8,Phr,Jd,Ihr,bz,qhr,Nhr,Fz,jhr,Dhr,Ghr,r8,Ohr,nbe,Vhr,Xhr,zhr,kt,t8,Qhr,sbe,Whr,Hhr,Yd,Uhr,lbe,Jhr,Yhr,vz,Khr,Zhr,egr,IE,ogr,kr,a8,rgr,ibe,tgr,agr,rn,ngr,dbe,sgr,lgr,cbe,igr,dgr,fbe,cgr,fgr,mgr,le,qE,mbe,hgr,ggr,Tz,pgr,ugr,_gr,NE,hbe,bgr,Fgr,Mz,vgr,Tgr,Mgr,jE,gbe,Egr,Cgr,Ez,wgr,Agr,ygr,DE,pbe,Lgr,xgr,Cz,$gr,kgr,Sgr,GE,ube,Rgr,Bgr,wz,Pgr,Igr,qgr,OE,_be,Ngr,jgr,Az,Dgr,Ggr,Ogr,VE,bbe,Vgr,Xgr,yz,zgr,Qgr,Wgr,XE,Fbe,Hgr,Ugr,Lz,Jgr,Ygr,Kgr,zE,vbe,Zgr,epr,xz,opr,rpr,tpr,QE,Tbe,apr,npr,$z,spr,lpr,ipr,WE,Mbe,dpr,cpr,kz,fpr,mpr,hpr,HE,Ebe,gpr,ppr,Sz,upr,_pr,bpr,UE,Cbe,Fpr,vpr,Rz,Tpr,Mpr,Epr,JE,wbe,Cpr,wpr,Bz,Apr,ypr,Lpr,YE,Abe,xpr,$pr,Pz,kpr,Spr,Rpr,KE,ybe,Bpr,Ppr,Iz,Ipr,qpr,Npr,ZE,Lbe,jpr,Dpr,qz,Gpr,Opr,Vpr,e5,xbe,Xpr,zpr,Nz,Qpr,Wpr,Hpr,o5,$be,Upr,Jpr,jz,Ypr,Kpr,Zpr,r5,kbe,eur,our,Dz,rur,tur,aur,t5,Zke,Kd,a5,Sbe,n8,nur,Rbe,sur,eSe,nr,s8,lur,Zd,iur,Gz,dur,cur,Oz,fur,mur,hur,l8,gur,Bbe,pur,uur,_ur,St,i8,bur,Pbe,Fur,vur,ec,Tur,Ibe,Mur,Eur,Vz,Cur,wur,Aur,n5,yur,Sr,d8,Lur,qbe,xur,$ur,tn,kur,Nbe,Sur,Rur,jbe,Bur,Pur,Dbe,Iur,qur,Nur,ie,s5,Gbe,jur,Dur,Xz,Gur,Our,Vur,l5,Obe,Xur,zur,zz,Qur,Wur,Hur,i5,Vbe,Uur,Jur,Qz,Yur,Kur,Zur,d5,Xbe,e_r,o_r,Wz,r_r,t_r,a_r,c5,zbe,n_r,s_r,Hz,l_r,i_r,d_r,f5,Qbe,c_r,f_r,Uz,m_r,h_r,g_r,m5,Wbe,p_r,u_r,Jz,__r,b_r,F_r,h5,Hbe,v_r,T_r,Yz,M_r,E_r,C_r,g5,Ube,w_r,A_r,Kz,y_r,L_r,x_r,p5,Jbe,$_r,k_r,Zz,S_r,R_r,B_r,u5,Ybe,P_r,I_r,eQ,q_r,N_r,j_r,_5,Kbe,D_r,G_r,oQ,O_r,V_r,X_r,b5,Zbe,z_r,Q_r,rQ,W_r,H_r,U_r,F5,e2e,J_r,Y_r,tQ,K_r,Z_r,ebr,v5,o2e,obr,rbr,aQ,tbr,abr,nbr,T5,r2e,sbr,lbr,nQ,ibr,dbr,cbr,M5,t2e,fbr,mbr,sQ,hbr,gbr,pbr,E5,a2e,ubr,_br,lQ,bbr,Fbr,vbr,C5,n2e,Tbr,Mbr,iQ,Ebr,Cbr,wbr,w5,oSe,oc,A5,s2e,c8,Abr,l2e,ybr,rSe,sr,f8,Lbr,rc,xbr,dQ,$br,kbr,cQ,Sbr,Rbr,Bbr,m8,Pbr,i2e,Ibr,qbr,Nbr,Rt,h8,jbr,d2e,Dbr,Gbr,tc,Obr,c2e,Vbr,Xbr,fQ,zbr,Qbr,Wbr,y5,Hbr,Rr,g8,Ubr,f2e,Jbr,Ybr,an,Kbr,m2e,Zbr,e2r,h2e,o2r,r2r,g2e,t2r,a2r,n2r,p2e,L5,u2e,s2r,l2r,mQ,i2r,d2r,c2r,x5,tSe,ac,$5,_2e,p8,f2r,b2e,m2r,aSe,lr,u8,h2r,nc,g2r,hQ,p2r,u2r,gQ,_2r,b2r,F2r,_8,v2r,F2e,T2r,M2r,E2r,Bt,b8,C2r,v2e,w2r,A2r,sc,y2r,T2e,L2r,x2r,pQ,$2r,k2r,S2r,k5,R2r,Br,F8,B2r,M2e,P2r,I2r,nn,q2r,E2e,N2r,j2r,C2e,D2r,G2r,w2e,O2r,V2r,X2r,A2e,S5,y2e,z2r,Q2r,uQ,W2r,H2r,U2r,R5,nSe,lc,B5,L2e,v8,J2r,x2e,Y2r,sSe,ir,T8,K2r,ic,Z2r,_Q,eFr,oFr,bQ,rFr,tFr,aFr,M8,nFr,$2e,sFr,lFr,iFr,Pt,E8,dFr,k2e,cFr,fFr,dc,mFr,S2e,hFr,gFr,FQ,pFr,uFr,_Fr,P5,bFr,Pr,C8,FFr,R2e,vFr,TFr,sn,MFr,B2e,EFr,CFr,P2e,wFr,AFr,I2e,yFr,LFr,xFr,oe,I5,q2e,$Fr,kFr,vQ,SFr,RFr,BFr,q5,N2e,PFr,IFr,TQ,qFr,NFr,jFr,N5,j2e,DFr,GFr,MQ,OFr,VFr,XFr,j5,D2e,zFr,QFr,EQ,WFr,HFr,UFr,D5,G2e,JFr,YFr,CQ,KFr,ZFr,evr,G5,O2e,ovr,rvr,wQ,tvr,avr,nvr,O5,V2e,svr,lvr,AQ,ivr,dvr,cvr,V5,X2e,fvr,mvr,yQ,hvr,gvr,pvr,X5,z2e,uvr,_vr,LQ,bvr,Fvr,vvr,z5,Q2e,Tvr,Mvr,xQ,Evr,Cvr,wvr,Q5,W2e,Avr,yvr,$Q,Lvr,xvr,$vr,W5,H2e,kvr,Svr,kQ,Rvr,Bvr,Pvr,H5,U2e,Ivr,qvr,SQ,Nvr,jvr,Dvr,U5,J2e,Gvr,Ovr,RQ,Vvr,Xvr,zvr,J5,Y2e,Qvr,Wvr,BQ,Hvr,Uvr,Jvr,Y5,K2e,Yvr,Kvr,PQ,Zvr,e1r,o1r,K5,Z2e,r1r,t1r,IQ,a1r,n1r,s1r,Z5,eFe,l1r,i1r,qQ,d1r,c1r,f1r,eC,oFe,m1r,h1r,NQ,g1r,p1r,u1r,oC,rFe,_1r,b1r,jQ,F1r,v1r,T1r,rC,tFe,M1r,E1r,DQ,C1r,w1r,A1r,tC,aFe,y1r,L1r,GQ,x1r,$1r,k1r,aC,nFe,S1r,R1r,OQ,B1r,P1r,I1r,nC,sFe,q1r,N1r,VQ,j1r,D1r,G1r,sC,lFe,O1r,V1r,XQ,X1r,z1r,Q1r,lC,lSe,cc,iC,iFe,w8,W1r,dFe,H1r,iSe,dr,A8,U1r,fc,J1r,zQ,Y1r,K1r,QQ,Z1r,eTr,oTr,y8,rTr,cFe,tTr,aTr,nTr,It,L8,sTr,fFe,lTr,iTr,mc,dTr,mFe,cTr,fTr,WQ,mTr,hTr,gTr,dC,pTr,Ir,x8,uTr,hFe,_Tr,bTr,ln,FTr,gFe,vTr,TTr,pFe,MTr,ETr,uFe,CTr,wTr,ATr,Hr,cC,_Fe,yTr,LTr,HQ,xTr,$Tr,kTr,fC,bFe,STr,RTr,UQ,BTr,PTr,ITr,mC,FFe,qTr,NTr,JQ,jTr,DTr,GTr,hC,vFe,OTr,VTr,YQ,XTr,zTr,QTr,gC,TFe,WTr,HTr,KQ,UTr,JTr,YTr,pC,dSe,hc,uC,MFe,$8,KTr,EFe,ZTr,cSe,cr,k8,eMr,gc,oMr,ZQ,rMr,tMr,eW,aMr,nMr,sMr,S8,lMr,CFe,iMr,dMr,cMr,qt,R8,fMr,wFe,mMr,hMr,pc,gMr,AFe,pMr,uMr,oW,_Mr,bMr,FMr,_C,vMr,qr,B8,TMr,yFe,MMr,EMr,dn,CMr,LFe,wMr,AMr,xFe,yMr,LMr,$Fe,xMr,$Mr,kMr,be,bC,kFe,SMr,RMr,rW,BMr,PMr,IMr,FC,SFe,qMr,NMr,tW,jMr,DMr,GMr,vC,RFe,OMr,VMr,aW,XMr,zMr,QMr,TC,BFe,WMr,HMr,nW,UMr,JMr,YMr,MC,PFe,KMr,ZMr,sW,e4r,o4r,r4r,EC,IFe,t4r,a4r,lW,n4r,s4r,l4r,CC,qFe,i4r,d4r,iW,c4r,f4r,m4r,wC,NFe,h4r,g4r,dW,p4r,u4r,_4r,AC,jFe,b4r,F4r,cW,v4r,T4r,M4r,yC,DFe,E4r,C4r,fW,w4r,A4r,y4r,LC,GFe,L4r,x4r,mW,$4r,k4r,S4r,xC,OFe,R4r,B4r,hW,P4r,I4r,q4r,$C,fSe,uc,kC,VFe,P8,N4r,XFe,j4r,mSe,fr,I8,D4r,_c,G4r,gW,O4r,V4r,pW,X4r,z4r,Q4r,q8,W4r,zFe,H4r,U4r,J4r,Nt,N8,Y4r,QFe,K4r,Z4r,bc,eEr,WFe,oEr,rEr,uW,tEr,aEr,nEr,SC,sEr,Nr,j8,lEr,HFe,iEr,dEr,cn,cEr,UFe,fEr,mEr,JFe,hEr,gEr,YFe,pEr,uEr,_Er,Ce,RC,KFe,bEr,FEr,_W,vEr,TEr,MEr,BC,ZFe,EEr,CEr,bW,wEr,AEr,yEr,PC,eve,LEr,xEr,FW,$Er,kEr,SEr,IC,ove,REr,BEr,vW,PEr,IEr,qEr,qC,rve,NEr,jEr,TW,DEr,GEr,OEr,NC,tve,VEr,XEr,MW,zEr,QEr,WEr,jC,ave,HEr,UEr,EW,JEr,YEr,KEr,DC,nve,ZEr,e5r,CW,o5r,r5r,t5r,GC,sve,a5r,n5r,wW,s5r,l5r,i5r,OC,lve,d5r,c5r,AW,f5r,m5r,h5r,VC,hSe,Fc,XC,ive,D8,g5r,dve,p5r,gSe,mr,G8,u5r,vc,_5r,yW,b5r,F5r,LW,v5r,T5r,M5r,O8,E5r,cve,C5r,w5r,A5r,jt,V8,y5r,fve,L5r,x5r,Tc,$5r,mve,k5r,S5r,xW,R5r,B5r,P5r,zC,I5r,jr,X8,q5r,hve,N5r,j5r,fn,D5r,gve,G5r,O5r,pve,V5r,X5r,uve,z5r,Q5r,W5r,xe,QC,_ve,H5r,U5r,$W,J5r,Y5r,K5r,WC,bve,Z5r,eCr,kW,oCr,rCr,tCr,HC,Fve,aCr,nCr,SW,sCr,lCr,iCr,UC,vve,dCr,cCr,RW,fCr,mCr,hCr,JC,Tve,gCr,pCr,BW,uCr,_Cr,bCr,YC,Mve,FCr,vCr,PW,TCr,MCr,ECr,KC,Eve,CCr,wCr,IW,ACr,yCr,LCr,ZC,Cve,xCr,$Cr,qW,kCr,SCr,RCr,e3,wve,BCr,PCr,NW,ICr,qCr,NCr,o3,pSe,Mc,r3,Ave,z8,jCr,yve,DCr,uSe,hr,Q8,GCr,Ec,OCr,jW,VCr,XCr,DW,zCr,QCr,WCr,W8,HCr,Lve,UCr,JCr,YCr,Dt,H8,KCr,xve,ZCr,e3r,Cc,o3r,$ve,r3r,t3r,GW,a3r,n3r,s3r,t3,l3r,Dr,U8,i3r,kve,d3r,c3r,mn,f3r,Sve,m3r,h3r,Rve,g3r,p3r,Bve,u3r,_3r,b3r,we,a3,Pve,F3r,v3r,OW,T3r,M3r,E3r,n3,Ive,C3r,w3r,VW,A3r,y3r,L3r,s3,qve,x3r,$3r,XW,k3r,S3r,R3r,l3,Nve,B3r,P3r,zW,I3r,q3r,N3r,i3,jve,j3r,D3r,QW,G3r,O3r,V3r,d3,Dve,X3r,z3r,WW,Q3r,W3r,H3r,c3,Gve,U3r,J3r,HW,Y3r,K3r,Z3r,f3,Ove,ewr,owr,UW,rwr,twr,awr,m3,Vve,nwr,swr,JW,lwr,iwr,dwr,h3,Xve,cwr,fwr,YW,mwr,hwr,gwr,g3,_Se,wc,p3,zve,J8,pwr,Qve,uwr,bSe,gr,Y8,_wr,Ac,bwr,KW,Fwr,vwr,ZW,Twr,Mwr,Ewr,K8,Cwr,Wve,wwr,Awr,ywr,Gt,Z8,Lwr,Hve,xwr,$wr,yc,kwr,Uve,Swr,Rwr,eH,Bwr,Pwr,Iwr,u3,qwr,Gr,ex,Nwr,Jve,jwr,Dwr,hn,Gwr,Yve,Owr,Vwr,Kve,Xwr,zwr,Zve,Qwr,Wwr,Hwr,Ae,_3,e1e,Uwr,Jwr,oH,Ywr,Kwr,Zwr,b3,o1e,eAr,oAr,rH,rAr,tAr,aAr,F3,r1e,nAr,sAr,tH,lAr,iAr,dAr,v3,t1e,cAr,fAr,aH,mAr,hAr,gAr,T3,a1e,pAr,uAr,nH,_Ar,bAr,FAr,M3,n1e,vAr,TAr,sH,MAr,EAr,CAr,E3,s1e,wAr,AAr,lH,yAr,LAr,xAr,C3,l1e,$Ar,kAr,iH,SAr,RAr,BAr,w3,i1e,PAr,IAr,dH,qAr,NAr,jAr,A3,d1e,DAr,GAr,cH,OAr,VAr,XAr,y3,FSe,Lc,L3,c1e,ox,zAr,f1e,QAr,vSe,pr,rx,WAr,xc,HAr,fH,UAr,JAr,mH,YAr,KAr,ZAr,tx,e0r,m1e,o0r,r0r,t0r,Ot,ax,a0r,h1e,n0r,s0r,$c,l0r,g1e,i0r,d0r,hH,c0r,f0r,m0r,x3,h0r,Or,nx,g0r,p1e,p0r,u0r,gn,_0r,u1e,b0r,F0r,_1e,v0r,T0r,b1e,M0r,E0r,C0r,Ne,$3,F1e,w0r,A0r,gH,y0r,L0r,x0r,k3,v1e,$0r,k0r,pH,S0r,R0r,B0r,S3,T1e,P0r,I0r,uH,q0r,N0r,j0r,R3,M1e,D0r,G0r,_H,O0r,V0r,X0r,B3,E1e,z0r,Q0r,bH,W0r,H0r,U0r,P3,C1e,J0r,Y0r,FH,K0r,Z0r,e6r,I3,w1e,o6r,r6r,vH,t6r,a6r,n6r,q3,A1e,s6r,l6r,TH,i6r,d6r,c6r,N3,TSe,kc,j3,y1e,sx,f6r,L1e,m6r,MSe,ur,lx,h6r,Sc,g6r,MH,p6r,u6r,EH,_6r,b6r,F6r,ix,v6r,x1e,T6r,M6r,E6r,Vt,dx,C6r,$1e,w6r,A6r,Rc,y6r,k1e,L6r,x6r,CH,$6r,k6r,S6r,D3,R6r,Vr,cx,B6r,S1e,P6r,I6r,pn,q6r,R1e,N6r,j6r,B1e,D6r,G6r,P1e,O6r,V6r,X6r,je,G3,I1e,z6r,Q6r,wH,W6r,H6r,U6r,O3,q1e,J6r,Y6r,AH,K6r,Z6r,eyr,V3,N1e,oyr,ryr,yH,tyr,ayr,nyr,X3,j1e,syr,lyr,LH,iyr,dyr,cyr,z3,D1e,fyr,myr,xH,hyr,gyr,pyr,Q3,G1e,uyr,_yr,$H,byr,Fyr,vyr,W3,O1e,Tyr,Myr,kH,Eyr,Cyr,wyr,H3,V1e,Ayr,yyr,SH,Lyr,xyr,$yr,U3,ESe,Bc,J3,X1e,fx,kyr,z1e,Syr,CSe,_r,mx,Ryr,Pc,Byr,RH,Pyr,Iyr,BH,qyr,Nyr,jyr,hx,Dyr,Q1e,Gyr,Oyr,Vyr,Xt,gx,Xyr,W1e,zyr,Qyr,Ic,Wyr,H1e,Hyr,Uyr,PH,Jyr,Yyr,Kyr,Y3,Zyr,Xr,px,eLr,U1e,oLr,rLr,un,tLr,J1e,aLr,nLr,Y1e,sLr,lLr,K1e,iLr,dLr,cLr,Z1e,K3,eTe,fLr,mLr,IH,hLr,gLr,pLr,Z3,wSe,qc,ew,oTe,ux,uLr,rTe,_Lr,ASe,br,_x,bLr,Nc,FLr,qH,vLr,TLr,NH,MLr,ELr,CLr,bx,wLr,tTe,ALr,yLr,LLr,zt,Fx,xLr,aTe,$Lr,kLr,jc,SLr,nTe,RLr,BLr,jH,PLr,ILr,qLr,ow,NLr,zr,vx,jLr,sTe,DLr,GLr,_n,OLr,lTe,VLr,XLr,iTe,zLr,QLr,dTe,WLr,HLr,ULr,Tx,rw,cTe,JLr,YLr,DH,KLr,ZLr,e8r,tw,fTe,o8r,r8r,GH,t8r,a8r,n8r,aw,ySe,Dc,nw,mTe,Mx,s8r,hTe,l8r,LSe,Fr,Ex,i8r,Gc,d8r,OH,c8r,f8r,VH,m8r,h8r,g8r,Cx,p8r,gTe,u8r,_8r,b8r,Qt,wx,F8r,pTe,v8r,T8r,Oc,M8r,uTe,E8r,C8r,XH,w8r,A8r,y8r,sw,L8r,Qr,Ax,x8r,_Te,$8r,k8r,bn,S8r,bTe,R8r,B8r,FTe,P8r,I8r,vTe,q8r,N8r,j8r,TTe,lw,MTe,D8r,G8r,zH,O8r,V8r,X8r,iw,xSe;return d=new Z({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),y0=new Z({}),L0=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Yc=new z8r({props:{warning:!0,$$slots:{default:[X2t]},$$scope:{ctx:A}}}),x0=new Z({}),$0=new k({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/configuration_auto.py#L538"}}),R0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/configuration_auto.py#L561"}}),Xm=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[z2t]},$$scope:{ctx:A}}}),B0=new k({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/configuration_auto.py#L683"}}),P0=new Z({}),I0=new k({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/tokenization_auto.py#L351"}}),j0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_highlight/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/tokenization_auto.py#L365"}}),Mh=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Q2t]},$$scope:{ctx:A}}}),D0=new k({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/tokenization_auto.py#L561"}}),G0=new Z({}),O0=new k({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),z0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_highlight/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/feature_extraction_auto.py#L185"}}),Vh=new z8r({props:{$$slots:{default:[W2t]},$$scope:{ctx:A}}}),Xh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[H2t]},$$scope:{ctx:A}}}),Q0=new k({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/feature_extraction_auto.py#L312"}}),W0=new Z({}),H0=new k({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/processing_auto.py#L70"}}),Y0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/processing_auto.py#L84"}}),og=new z8r({props:{$$slots:{default:[U2t]},$$scope:{ctx:A}}}),rg=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[J2t]},$$scope:{ctx:A}}}),K0=new k({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/processing_auto.py#L237"}}),Z0=new Z({}),e6=new k({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L704"}}),r6=new k({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><code>PLBartConfig</code> configuration class: <code>PLBartModel</code> (PLBart model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertModel</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),ng=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Y2t]},$$scope:{ctx:A}}}),t6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),Vp=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[K2t]},$$scope:{ctx:A}}}),a6=new Z({}),n6=new k({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L711"}}),l6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),zp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Z2t]},$$scope:{ctx:A}}}),i6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eFt]},$$scope:{ctx:A}}}),d6=new Z({}),c6=new k({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L726"}}),m6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><code>PLBartConfig</code> configuration class: <code>PLBartForCausalLM</code> (PLBart model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertLMHeadModel</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),Bu=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[oFt]},$$scope:{ctx:A}}}),h6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),__=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rFt]},$$scope:{ctx:A}}}),g6=new Z({}),p6=new k({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L733"}}),_6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForMaskedLM</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),F_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[tFt]},$$scope:{ctx:A}}}),b6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[aFt]},$$scope:{ctx:A}}}),F6=new Z({}),v6=new k({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L740"}}),M6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><code>PLBartConfig</code> configuration class: <code>PLBartForConditionalGeneration</code> (PLBart model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[nFt]},$$scope:{ctx:A}}}),E6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),Mb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[sFt]},$$scope:{ctx:A}}}),C6=new Z({}),w6=new k({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L749"}}),y6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><code>PLBartConfig</code> configuration class: <code>PLBartForSequenceClassification</code> (PLBart model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForSequenceClassification</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),Cb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[lFt]},$$scope:{ctx:A}}}),L6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),b2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[iFt]},$$scope:{ctx:A}}}),x6=new Z({}),$6=new k({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L783"}}),S6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForMultipleChoice</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[dFt]},$$scope:{ctx:A}}}),R6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),J2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cFt]},$$scope:{ctx:A}}}),B6=new Z({}),P6=new k({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L790"}}),q6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForNextSentencePrediction</code> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),K2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fFt]},$$scope:{ctx:A}}}),N6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mFt]},$$scope:{ctx:A}}}),j6=new Z({}),D6=new k({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L776"}}),O6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForTokenClassification</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[hFt]},$$scope:{ctx:A}}}),V6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gFt]},$$scope:{ctx:A}}}),X6=new Z({}),z6=new k({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L758"}}),W6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForQuestionAnswering</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[pFt]},$$scope:{ctx:A}}}),H6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uFt]},$$scope:{ctx:A}}}),U6=new Z({}),J6=new k({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L765"}}),K6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_Ft]},$$scope:{ctx:A}}}),Z6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),Iv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bFt]},$$scope:{ctx:A}}}),ey=new Z({}),oy=new k({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L799"}}),ty=new k({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),Nv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[FFt]},$$scope:{ctx:A}}}),ay=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vFt]},$$scope:{ctx:A}}}),ny=new Z({}),sy=new k({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L838"}}),iy=new k({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[TFt]},$$scope:{ctx:A}}}),dy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),e1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[MFt]},$$scope:{ctx:A}}}),cy=new Z({}),fy=new k({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L845"}}),hy=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),r1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[EFt]},$$scope:{ctx:A}}}),gy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),m1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[CFt]},$$scope:{ctx:A}}}),py=new Z({}),uy=new k({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L868"}}),by=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),g1=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[wFt]},$$scope:{ctx:A}}}),Fy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),v1=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[AFt]},$$scope:{ctx:A}}}),vy=new Z({}),Ty=new k({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L852"}}),Ey=new k({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),M1=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[yFt]},$$scope:{ctx:A}}}),Cy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),S1=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[LFt]},$$scope:{ctx:A}}}),wy=new Z({}),Ay=new k({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L859"}}),Ly=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xFt]},$$scope:{ctx:A}}}),xy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),N1=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$Ft]},$$scope:{ctx:A}}}),ky=new Z({}),Sy=new k({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L877"}}),By=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),D1=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[kFt]},$$scope:{ctx:A}}}),Py=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[SFt]},$$scope:{ctx:A}}}),Iy=new Z({}),qy=new k({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L884"}}),jy=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[RFt]},$$scope:{ctx:A}}}),Dy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[BFt]},$$scope:{ctx:A}}}),Gy=new Z({}),Oy=new k({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L831"}}),Xy=new k({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[PFt]},$$scope:{ctx:A}}}),zy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[IFt]},$$scope:{ctx:A}}}),Qy=new Z({}),Wy=new k({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L806"}}),Uy=new k({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[qFt]},$$scope:{ctx:A}}}),Jy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[NFt]},$$scope:{ctx:A}}}),Yy=new Z({}),Ky=new k({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L813"}}),eL=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[jFt]},$$scope:{ctx:A}}}),oL=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[DFt]},$$scope:{ctx:A}}}),tL=new Z({}),aL=new k({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_auto.py#L822"}}),sL=new k({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[GFt]},$$scope:{ctx:A}}}),lL=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[OFt]},$$scope:{ctx:A}}}),iL=new Z({}),dL=new k({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),fL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[VFt]},$$scope:{ctx:A}}}),mL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[XFt]},$$scope:{ctx:A}}}),hL=new Z({}),gL=new k({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),uL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[zFt]},$$scope:{ctx:A}}}),_L=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[QFt]},$$scope:{ctx:A}}}),bL=new Z({}),FL=new k({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),TL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[WFt]},$$scope:{ctx:A}}}),ML=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[HFt]},$$scope:{ctx:A}}}),EL=new Z({}),CL=new k({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),AL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[UFt]},$$scope:{ctx:A}}}),yL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[JFt]},$$scope:{ctx:A}}}),xL=new Z({}),$L=new k({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),SL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[YFt]},$$scope:{ctx:A}}}),RL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[KFt]},$$scope:{ctx:A}}}),BL=new Z({}),PL=new k({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),qL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ZFt]},$$scope:{ctx:A}}}),NL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[evt]},$$scope:{ctx:A}}}),jL=new Z({}),DL=new k({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),OL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ovt]},$$scope:{ctx:A}}}),VL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[rvt]},$$scope:{ctx:A}}}),XL=new Z({}),zL=new k({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),WL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[tvt]},$$scope:{ctx:A}}}),HL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[avt]},$$scope:{ctx:A}}}),UL=new Z({}),JL=new k({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),KL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nvt]},$$scope:{ctx:A}}}),ZL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[svt]},$$scope:{ctx:A}}}),e8=new Z({}),o8=new k({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),t8=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[lvt]},$$scope:{ctx:A}}}),a8=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ivt]},$$scope:{ctx:A}}}),n8=new Z({}),s8=new k({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),i8=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dvt]},$$scope:{ctx:A}}}),d8=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cvt]},$$scope:{ctx:A}}}),c8=new Z({}),f8=new k({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),h8=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[fvt]},$$scope:{ctx:A}}}),g8=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mvt]},$$scope:{ctx:A}}}),p8=new Z({}),u8=new k({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),b8=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[hvt]},$$scope:{ctx:A}}}),F8=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[gvt]},$$scope:{ctx:A}}}),v8=new Z({}),T8=new k({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),E8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[pvt]},$$scope:{ctx:A}}}),C8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[uvt]},$$scope:{ctx:A}}}),w8=new Z({}),A8=new k({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),L8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[_vt]},$$scope:{ctx:A}}}),x8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bvt]},$$scope:{ctx:A}}}),$8=new Z({}),k8=new k({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),R8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Fvt]},$$scope:{ctx:A}}}),B8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vvt]},$$scope:{ctx:A}}}),P8=new Z({}),I8=new k({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),N8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Tvt]},$$scope:{ctx:A}}}),j8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Mvt]},$$scope:{ctx:A}}}),D8=new Z({}),G8=new k({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),V8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Evt]},$$scope:{ctx:A}}}),X8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Cvt]},$$scope:{ctx:A}}}),z8=new Z({}),Q8=new k({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),H8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wvt]},$$scope:{ctx:A}}}),U8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Avt]},$$scope:{ctx:A}}}),J8=new Z({}),Y8=new k({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Z8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yvt]},$$scope:{ctx:A}}}),ex=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Lvt]},$$scope:{ctx:A}}}),ox=new Z({}),rx=new k({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),ax=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[xvt]},$$scope:{ctx:A}}}),nx=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$vt]},$$scope:{ctx:A}}}),sx=new Z({}),lx=new k({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),dx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[kvt]},$$scope:{ctx:A}}}),cx=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Svt]},$$scope:{ctx:A}}}),fx=new Z({}),mx=new k({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),gx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rvt]},$$scope:{ctx:A}}}),px=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Bvt]},$$scope:{ctx:A}}}),ux=new Z({}),_x=new k({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Fx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Pvt]},$$scope:{ctx:A}}}),vx=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ivt]},$$scope:{ctx:A}}}),Mx=new Z({}),Ex=new k({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),wx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[qvt]},$$scope:{ctx:A}}}),Ax=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Nvt]},$$scope:{ctx:A}}}),{c(){h=a("meta"),F=l(),p=a("h1"),m=a("a"),u=a("span"),v(d.$$.fragment),g=l(),vo=a("span"),Ql=o("Auto Classes"),Qc=l(),Yr=a("p"),Wl=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Hl=a("code"),E0=o("from_pretrained()"),Wc=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),Ge=a("p"),Ul=o("Instantiating one of "),vn=a("a"),C0=o("AutoConfig"),Tn=o(", "),Mn=a("a"),w0=o("AutoModel"),Jl=o(`, and
`),En=a("a"),A0=o("AutoTokenizer"),Yl=o(" will directly create a class of the relevant architecture. For instance"),Hc=l(),v(ba.$$.fragment),Oe=l(),Me=a("p"),k7=o("will create a model that is an instance of "),Kl=a("a"),S7=o("BertModel"),R7=o("."),To=l(),Fa=a("p"),B7=o("There is one class of "),Uc=a("code"),P7=o("AutoModel"),PBe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),L9e=l(),Zl=a("h2"),Jc=a("a"),IJ=a("span"),v(y0.$$.fragment),IBe=l(),qJ=a("span"),qBe=o("Extending the Auto Classes"),x9e=l(),Cn=a("p"),NBe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),NJ=a("code"),jBe=o("NewModel"),DBe=o(", make sure you have a "),jJ=a("code"),GBe=o("NewModelConfig"),OBe=o(` then you can add those to the auto
classes like this:`),$9e=l(),v(L0.$$.fragment),k9e=l(),I7=a("p"),VBe=o("You will then be able to use the auto classes like you would usually do!"),S9e=l(),v(Yc.$$.fragment),R9e=l(),ei=a("h2"),Kc=a("a"),DJ=a("span"),v(x0.$$.fragment),XBe=l(),GJ=a("span"),zBe=o("AutoConfig"),B9e=l(),Mo=a("div"),v($0.$$.fragment),QBe=l(),k0=a("p"),WBe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),q7=a("a"),HBe=o("from_pretrained()"),UBe=o(" class method."),JBe=l(),S0=a("p"),YBe=o("This class cannot be instantiated directly using "),OJ=a("code"),KBe=o("__init__()"),ZBe=o(" (throws an error)."),ePe=l(),vr=a("div"),v(R0.$$.fragment),oPe=l(),VJ=a("p"),rPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),tPe=l(),oi=a("p"),aPe=o("The configuration class to instantiate is selected based on the "),XJ=a("code"),nPe=o("model_type"),sPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zJ=a("code"),lPe=o("pretrained_model_name_or_path"),iPe=o(":"),dPe=l(),y=a("ul"),Zc=a("li"),QJ=a("strong"),cPe=o("albert"),fPe=o(" \u2014 "),N7=a("a"),mPe=o("AlbertConfig"),hPe=o(" (ALBERT model)"),gPe=l(),ef=a("li"),WJ=a("strong"),pPe=o("bart"),uPe=o(" \u2014 "),j7=a("a"),_Pe=o("BartConfig"),bPe=o(" (BART model)"),FPe=l(),of=a("li"),HJ=a("strong"),vPe=o("beit"),TPe=o(" \u2014 "),D7=a("a"),MPe=o("BeitConfig"),EPe=o(" (BEiT model)"),CPe=l(),rf=a("li"),UJ=a("strong"),wPe=o("bert"),APe=o(" \u2014 "),G7=a("a"),yPe=o("BertConfig"),LPe=o(" (BERT model)"),xPe=l(),tf=a("li"),JJ=a("strong"),$Pe=o("bert-generation"),kPe=o(" \u2014 "),O7=a("a"),SPe=o("BertGenerationConfig"),RPe=o(" (Bert Generation model)"),BPe=l(),af=a("li"),YJ=a("strong"),PPe=o("big_bird"),IPe=o(" \u2014 "),V7=a("a"),qPe=o("BigBirdConfig"),NPe=o(" (BigBird model)"),jPe=l(),nf=a("li"),KJ=a("strong"),DPe=o("bigbird_pegasus"),GPe=o(" \u2014 "),X7=a("a"),OPe=o("BigBirdPegasusConfig"),VPe=o(" (BigBirdPegasus model)"),XPe=l(),sf=a("li"),ZJ=a("strong"),zPe=o("blenderbot"),QPe=o(" \u2014 "),z7=a("a"),WPe=o("BlenderbotConfig"),HPe=o(" (Blenderbot model)"),UPe=l(),lf=a("li"),eY=a("strong"),JPe=o("blenderbot-small"),YPe=o(" \u2014 "),Q7=a("a"),KPe=o("BlenderbotSmallConfig"),ZPe=o(" (BlenderbotSmall model)"),eIe=l(),df=a("li"),oY=a("strong"),oIe=o("camembert"),rIe=o(" \u2014 "),W7=a("a"),tIe=o("CamembertConfig"),aIe=o(" (CamemBERT model)"),nIe=l(),cf=a("li"),rY=a("strong"),sIe=o("canine"),lIe=o(" \u2014 "),H7=a("a"),iIe=o("CanineConfig"),dIe=o(" (Canine model)"),cIe=l(),ff=a("li"),tY=a("strong"),fIe=o("clip"),mIe=o(" \u2014 "),U7=a("a"),hIe=o("CLIPConfig"),gIe=o(" (CLIP model)"),pIe=l(),mf=a("li"),aY=a("strong"),uIe=o("convbert"),_Ie=o(" \u2014 "),J7=a("a"),bIe=o("ConvBertConfig"),FIe=o(" (ConvBERT model)"),vIe=l(),hf=a("li"),nY=a("strong"),TIe=o("convnext"),MIe=o(" \u2014 "),Y7=a("a"),EIe=o("ConvNextConfig"),CIe=o(" (ConvNext model)"),wIe=l(),gf=a("li"),sY=a("strong"),AIe=o("ctrl"),yIe=o(" \u2014 "),K7=a("a"),LIe=o("CTRLConfig"),xIe=o(" (CTRL model)"),$Ie=l(),pf=a("li"),lY=a("strong"),kIe=o("data2vec-audio"),SIe=o(" \u2014 "),Z7=a("a"),RIe=o("Data2VecAudioConfig"),BIe=o(" (Data2VecAudio model)"),PIe=l(),uf=a("li"),iY=a("strong"),IIe=o("data2vec-text"),qIe=o(" \u2014 "),e$=a("a"),NIe=o("Data2VecTextConfig"),jIe=o(" (Data2VecText model)"),DIe=l(),_f=a("li"),dY=a("strong"),GIe=o("deberta"),OIe=o(" \u2014 "),o$=a("a"),VIe=o("DebertaConfig"),XIe=o(" (DeBERTa model)"),zIe=l(),bf=a("li"),cY=a("strong"),QIe=o("deberta-v2"),WIe=o(" \u2014 "),r$=a("a"),HIe=o("DebertaV2Config"),UIe=o(" (DeBERTa-v2 model)"),JIe=l(),Ff=a("li"),fY=a("strong"),YIe=o("decision_transformer"),KIe=o(" \u2014 "),t$=a("a"),ZIe=o("DecisionTransformerConfig"),eqe=o(" (Decision Transformer model)"),oqe=l(),vf=a("li"),mY=a("strong"),rqe=o("deit"),tqe=o(" \u2014 "),a$=a("a"),aqe=o("DeiTConfig"),nqe=o(" (DeiT model)"),sqe=l(),Tf=a("li"),hY=a("strong"),lqe=o("detr"),iqe=o(" \u2014 "),n$=a("a"),dqe=o("DetrConfig"),cqe=o(" (DETR model)"),fqe=l(),Mf=a("li"),gY=a("strong"),mqe=o("distilbert"),hqe=o(" \u2014 "),s$=a("a"),gqe=o("DistilBertConfig"),pqe=o(" (DistilBERT model)"),uqe=l(),Ef=a("li"),pY=a("strong"),_qe=o("dpr"),bqe=o(" \u2014 "),l$=a("a"),Fqe=o("DPRConfig"),vqe=o(" (DPR model)"),Tqe=l(),Cf=a("li"),uY=a("strong"),Mqe=o("electra"),Eqe=o(" \u2014 "),i$=a("a"),Cqe=o("ElectraConfig"),wqe=o(" (ELECTRA model)"),Aqe=l(),wf=a("li"),_Y=a("strong"),yqe=o("encoder-decoder"),Lqe=o(" \u2014 "),d$=a("a"),xqe=o("EncoderDecoderConfig"),$qe=o(" (Encoder decoder model)"),kqe=l(),Af=a("li"),bY=a("strong"),Sqe=o("flaubert"),Rqe=o(" \u2014 "),c$=a("a"),Bqe=o("FlaubertConfig"),Pqe=o(" (FlauBERT model)"),Iqe=l(),yf=a("li"),FY=a("strong"),qqe=o("fnet"),Nqe=o(" \u2014 "),f$=a("a"),jqe=o("FNetConfig"),Dqe=o(" (FNet model)"),Gqe=l(),Lf=a("li"),vY=a("strong"),Oqe=o("fsmt"),Vqe=o(" \u2014 "),m$=a("a"),Xqe=o("FSMTConfig"),zqe=o(" (FairSeq Machine-Translation model)"),Qqe=l(),xf=a("li"),TY=a("strong"),Wqe=o("funnel"),Hqe=o(" \u2014 "),h$=a("a"),Uqe=o("FunnelConfig"),Jqe=o(" (Funnel Transformer model)"),Yqe=l(),$f=a("li"),MY=a("strong"),Kqe=o("glpn"),Zqe=o(" \u2014 "),g$=a("a"),eNe=o("GLPNConfig"),oNe=o(" (GLPN model)"),rNe=l(),kf=a("li"),EY=a("strong"),tNe=o("gpt2"),aNe=o(" \u2014 "),p$=a("a"),nNe=o("GPT2Config"),sNe=o(" (OpenAI GPT-2 model)"),lNe=l(),Sf=a("li"),CY=a("strong"),iNe=o("gpt_neo"),dNe=o(" \u2014 "),u$=a("a"),cNe=o("GPTNeoConfig"),fNe=o(" (GPT Neo model)"),mNe=l(),Rf=a("li"),wY=a("strong"),hNe=o("gptj"),gNe=o(" \u2014 "),_$=a("a"),pNe=o("GPTJConfig"),uNe=o(" (GPT-J model)"),_Ne=l(),Bf=a("li"),AY=a("strong"),bNe=o("hubert"),FNe=o(" \u2014 "),b$=a("a"),vNe=o("HubertConfig"),TNe=o(" (Hubert model)"),MNe=l(),Pf=a("li"),yY=a("strong"),ENe=o("ibert"),CNe=o(" \u2014 "),F$=a("a"),wNe=o("IBertConfig"),ANe=o(" (I-BERT model)"),yNe=l(),If=a("li"),LY=a("strong"),LNe=o("imagegpt"),xNe=o(" \u2014 "),v$=a("a"),$Ne=o("ImageGPTConfig"),kNe=o(" (ImageGPT model)"),SNe=l(),qf=a("li"),xY=a("strong"),RNe=o("layoutlm"),BNe=o(" \u2014 "),T$=a("a"),PNe=o("LayoutLMConfig"),INe=o(" (LayoutLM model)"),qNe=l(),Nf=a("li"),$Y=a("strong"),NNe=o("layoutlmv2"),jNe=o(" \u2014 "),M$=a("a"),DNe=o("LayoutLMv2Config"),GNe=o(" (LayoutLMv2 model)"),ONe=l(),jf=a("li"),kY=a("strong"),VNe=o("led"),XNe=o(" \u2014 "),E$=a("a"),zNe=o("LEDConfig"),QNe=o(" (LED model)"),WNe=l(),Df=a("li"),SY=a("strong"),HNe=o("longformer"),UNe=o(" \u2014 "),C$=a("a"),JNe=o("LongformerConfig"),YNe=o(" (Longformer model)"),KNe=l(),Gf=a("li"),RY=a("strong"),ZNe=o("luke"),eje=o(" \u2014 "),w$=a("a"),oje=o("LukeConfig"),rje=o(" (LUKE model)"),tje=l(),Of=a("li"),BY=a("strong"),aje=o("lxmert"),nje=o(" \u2014 "),A$=a("a"),sje=o("LxmertConfig"),lje=o(" (LXMERT model)"),ije=l(),Vf=a("li"),PY=a("strong"),dje=o("m2m_100"),cje=o(" \u2014 "),y$=a("a"),fje=o("M2M100Config"),mje=o(" (M2M100 model)"),hje=l(),Xf=a("li"),IY=a("strong"),gje=o("marian"),pje=o(" \u2014 "),L$=a("a"),uje=o("MarianConfig"),_je=o(" (Marian model)"),bje=l(),zf=a("li"),qY=a("strong"),Fje=o("maskformer"),vje=o(" \u2014 "),x$=a("a"),Tje=o("MaskFormerConfig"),Mje=o(" (MaskFormer model)"),Eje=l(),Qf=a("li"),NY=a("strong"),Cje=o("mbart"),wje=o(" \u2014 "),$$=a("a"),Aje=o("MBartConfig"),yje=o(" (mBART model)"),Lje=l(),Wf=a("li"),jY=a("strong"),xje=o("megatron-bert"),$je=o(" \u2014 "),k$=a("a"),kje=o("MegatronBertConfig"),Sje=o(" (MegatronBert model)"),Rje=l(),Hf=a("li"),DY=a("strong"),Bje=o("mobilebert"),Pje=o(" \u2014 "),S$=a("a"),Ije=o("MobileBertConfig"),qje=o(" (MobileBERT model)"),Nje=l(),Uf=a("li"),GY=a("strong"),jje=o("mpnet"),Dje=o(" \u2014 "),R$=a("a"),Gje=o("MPNetConfig"),Oje=o(" (MPNet model)"),Vje=l(),Jf=a("li"),OY=a("strong"),Xje=o("mt5"),zje=o(" \u2014 "),B$=a("a"),Qje=o("MT5Config"),Wje=o(" (mT5 model)"),Hje=l(),Yf=a("li"),VY=a("strong"),Uje=o("nystromformer"),Jje=o(" \u2014 "),P$=a("a"),Yje=o("NystromformerConfig"),Kje=o(" (Nystromformer model)"),Zje=l(),Kf=a("li"),XY=a("strong"),eDe=o("openai-gpt"),oDe=o(" \u2014 "),I$=a("a"),rDe=o("OpenAIGPTConfig"),tDe=o(" (OpenAI GPT model)"),aDe=l(),Zf=a("li"),zY=a("strong"),nDe=o("pegasus"),sDe=o(" \u2014 "),q$=a("a"),lDe=o("PegasusConfig"),iDe=o(" (Pegasus model)"),dDe=l(),em=a("li"),QY=a("strong"),cDe=o("perceiver"),fDe=o(" \u2014 "),N$=a("a"),mDe=o("PerceiverConfig"),hDe=o(" (Perceiver model)"),gDe=l(),om=a("li"),WY=a("strong"),pDe=o("plbart"),uDe=o(" \u2014 "),HY=a("code"),_De=o("PLBartConfig"),bDe=o(" (PLBart model)"),FDe=l(),rm=a("li"),UY=a("strong"),vDe=o("poolformer"),TDe=o(" \u2014 "),j$=a("a"),MDe=o("PoolFormerConfig"),EDe=o(" (PoolFormer model)"),CDe=l(),tm=a("li"),JY=a("strong"),wDe=o("prophetnet"),ADe=o(" \u2014 "),D$=a("a"),yDe=o("ProphetNetConfig"),LDe=o(" (ProphetNet model)"),xDe=l(),am=a("li"),YY=a("strong"),$De=o("qdqbert"),kDe=o(" \u2014 "),KY=a("code"),SDe=o("QDQBertConfig"),RDe=o(" (QDQBert model)"),BDe=l(),nm=a("li"),ZY=a("strong"),PDe=o("rag"),IDe=o(" \u2014 "),G$=a("a"),qDe=o("RagConfig"),NDe=o(" (RAG model)"),jDe=l(),sm=a("li"),eK=a("strong"),DDe=o("realm"),GDe=o(" \u2014 "),O$=a("a"),ODe=o("RealmConfig"),VDe=o(" (Realm model)"),XDe=l(),lm=a("li"),oK=a("strong"),zDe=o("reformer"),QDe=o(" \u2014 "),V$=a("a"),WDe=o("ReformerConfig"),HDe=o(" (Reformer model)"),UDe=l(),im=a("li"),rK=a("strong"),JDe=o("rembert"),YDe=o(" \u2014 "),X$=a("a"),KDe=o("RemBertConfig"),ZDe=o(" (RemBERT model)"),eGe=l(),dm=a("li"),tK=a("strong"),oGe=o("resnet"),rGe=o(" \u2014 "),z$=a("a"),tGe=o("ResNetConfig"),aGe=o(" (ResNet model)"),nGe=l(),cm=a("li"),aK=a("strong"),sGe=o("retribert"),lGe=o(" \u2014 "),Q$=a("a"),iGe=o("RetriBertConfig"),dGe=o(" (RetriBERT model)"),cGe=l(),fm=a("li"),nK=a("strong"),fGe=o("roberta"),mGe=o(" \u2014 "),W$=a("a"),hGe=o("RobertaConfig"),gGe=o(" (RoBERTa model)"),pGe=l(),mm=a("li"),sK=a("strong"),uGe=o("roformer"),_Ge=o(" \u2014 "),H$=a("a"),bGe=o("RoFormerConfig"),FGe=o(" (RoFormer model)"),vGe=l(),hm=a("li"),lK=a("strong"),TGe=o("segformer"),MGe=o(" \u2014 "),U$=a("a"),EGe=o("SegformerConfig"),CGe=o(" (SegFormer model)"),wGe=l(),gm=a("li"),iK=a("strong"),AGe=o("sew"),yGe=o(" \u2014 "),J$=a("a"),LGe=o("SEWConfig"),xGe=o(" (SEW model)"),$Ge=l(),pm=a("li"),dK=a("strong"),kGe=o("sew-d"),SGe=o(" \u2014 "),Y$=a("a"),RGe=o("SEWDConfig"),BGe=o(" (SEW-D model)"),PGe=l(),um=a("li"),cK=a("strong"),IGe=o("speech-encoder-decoder"),qGe=o(" \u2014 "),K$=a("a"),NGe=o("SpeechEncoderDecoderConfig"),jGe=o(" (Speech Encoder decoder model)"),DGe=l(),_m=a("li"),fK=a("strong"),GGe=o("speech_to_text"),OGe=o(" \u2014 "),Z$=a("a"),VGe=o("Speech2TextConfig"),XGe=o(" (Speech2Text model)"),zGe=l(),bm=a("li"),mK=a("strong"),QGe=o("speech_to_text_2"),WGe=o(" \u2014 "),e9=a("a"),HGe=o("Speech2Text2Config"),UGe=o(" (Speech2Text2 model)"),JGe=l(),Fm=a("li"),hK=a("strong"),YGe=o("splinter"),KGe=o(" \u2014 "),o9=a("a"),ZGe=o("SplinterConfig"),eOe=o(" (Splinter model)"),oOe=l(),vm=a("li"),gK=a("strong"),rOe=o("squeezebert"),tOe=o(" \u2014 "),r9=a("a"),aOe=o("SqueezeBertConfig"),nOe=o(" (SqueezeBERT model)"),sOe=l(),Tm=a("li"),pK=a("strong"),lOe=o("swin"),iOe=o(" \u2014 "),t9=a("a"),dOe=o("SwinConfig"),cOe=o(" (Swin model)"),fOe=l(),Mm=a("li"),uK=a("strong"),mOe=o("t5"),hOe=o(" \u2014 "),a9=a("a"),gOe=o("T5Config"),pOe=o(" (T5 model)"),uOe=l(),Em=a("li"),_K=a("strong"),_Oe=o("tapas"),bOe=o(" \u2014 "),n9=a("a"),FOe=o("TapasConfig"),vOe=o(" (TAPAS model)"),TOe=l(),Cm=a("li"),bK=a("strong"),MOe=o("transfo-xl"),EOe=o(" \u2014 "),s9=a("a"),COe=o("TransfoXLConfig"),wOe=o(" (Transformer-XL model)"),AOe=l(),wm=a("li"),FK=a("strong"),yOe=o("trocr"),LOe=o(" \u2014 "),l9=a("a"),xOe=o("TrOCRConfig"),$Oe=o(" (TrOCR model)"),kOe=l(),Am=a("li"),vK=a("strong"),SOe=o("unispeech"),ROe=o(" \u2014 "),i9=a("a"),BOe=o("UniSpeechConfig"),POe=o(" (UniSpeech model)"),IOe=l(),ym=a("li"),TK=a("strong"),qOe=o("unispeech-sat"),NOe=o(" \u2014 "),d9=a("a"),jOe=o("UniSpeechSatConfig"),DOe=o(" (UniSpeechSat model)"),GOe=l(),Lm=a("li"),MK=a("strong"),OOe=o("van"),VOe=o(" \u2014 "),c9=a("a"),XOe=o("VanConfig"),zOe=o(" (VAN model)"),QOe=l(),xm=a("li"),EK=a("strong"),WOe=o("vilt"),HOe=o(" \u2014 "),f9=a("a"),UOe=o("ViltConfig"),JOe=o(" (ViLT model)"),YOe=l(),$m=a("li"),CK=a("strong"),KOe=o("vision-encoder-decoder"),ZOe=o(" \u2014 "),m9=a("a"),eVe=o("VisionEncoderDecoderConfig"),oVe=o(" (Vision Encoder decoder model)"),rVe=l(),km=a("li"),wK=a("strong"),tVe=o("vision-text-dual-encoder"),aVe=o(" \u2014 "),h9=a("a"),nVe=o("VisionTextDualEncoderConfig"),sVe=o(" (VisionTextDualEncoder model)"),lVe=l(),Sm=a("li"),AK=a("strong"),iVe=o("visual_bert"),dVe=o(" \u2014 "),g9=a("a"),cVe=o("VisualBertConfig"),fVe=o(" (VisualBert model)"),mVe=l(),Rm=a("li"),yK=a("strong"),hVe=o("vit"),gVe=o(" \u2014 "),p9=a("a"),pVe=o("ViTConfig"),uVe=o(" (ViT model)"),_Ve=l(),Bm=a("li"),LK=a("strong"),bVe=o("vit_mae"),FVe=o(" \u2014 "),u9=a("a"),vVe=o("ViTMAEConfig"),TVe=o(" (ViTMAE model)"),MVe=l(),Pm=a("li"),xK=a("strong"),EVe=o("wav2vec2"),CVe=o(" \u2014 "),_9=a("a"),wVe=o("Wav2Vec2Config"),AVe=o(" (Wav2Vec2 model)"),yVe=l(),Im=a("li"),$K=a("strong"),LVe=o("wavlm"),xVe=o(" \u2014 "),b9=a("a"),$Ve=o("WavLMConfig"),kVe=o(" (WavLM model)"),SVe=l(),qm=a("li"),kK=a("strong"),RVe=o("xglm"),BVe=o(" \u2014 "),F9=a("a"),PVe=o("XGLMConfig"),IVe=o(" (XGLM model)"),qVe=l(),Nm=a("li"),SK=a("strong"),NVe=o("xlm"),jVe=o(" \u2014 "),v9=a("a"),DVe=o("XLMConfig"),GVe=o(" (XLM model)"),OVe=l(),jm=a("li"),RK=a("strong"),VVe=o("xlm-prophetnet"),XVe=o(" \u2014 "),T9=a("a"),zVe=o("XLMProphetNetConfig"),QVe=o(" (XLMProphetNet model)"),WVe=l(),Dm=a("li"),BK=a("strong"),HVe=o("xlm-roberta"),UVe=o(" \u2014 "),M9=a("a"),JVe=o("XLMRobertaConfig"),YVe=o(" (XLM-RoBERTa model)"),KVe=l(),Gm=a("li"),PK=a("strong"),ZVe=o("xlm-roberta-xl"),eXe=o(" \u2014 "),E9=a("a"),oXe=o("XLMRobertaXLConfig"),rXe=o(" (XLM-RoBERTa-XL model)"),tXe=l(),Om=a("li"),IK=a("strong"),aXe=o("xlnet"),nXe=o(" \u2014 "),C9=a("a"),sXe=o("XLNetConfig"),lXe=o(" (XLNet model)"),iXe=l(),Vm=a("li"),qK=a("strong"),dXe=o("yoso"),cXe=o(" \u2014 "),w9=a("a"),fXe=o("YosoConfig"),mXe=o(" (YOSO model)"),hXe=l(),v(Xm.$$.fragment),gXe=l(),zm=a("div"),v(B0.$$.fragment),pXe=l(),NK=a("p"),uXe=o("Register a new configuration for this class."),P9e=l(),ri=a("h2"),Qm=a("a"),jK=a("span"),v(P0.$$.fragment),_Xe=l(),DK=a("span"),bXe=o("AutoTokenizer"),I9e=l(),Eo=a("div"),v(I0.$$.fragment),FXe=l(),q0=a("p"),vXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),A9=a("a"),TXe=o("AutoTokenizer.from_pretrained()"),MXe=o(" class method."),EXe=l(),N0=a("p"),CXe=o("This class cannot be instantiated directly using "),GK=a("code"),wXe=o("__init__()"),AXe=o(" (throws an error)."),yXe=l(),Tr=a("div"),v(j0.$$.fragment),LXe=l(),OK=a("p"),xXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Xe=l(),va=a("p"),kXe=o("The tokenizer class to instantiate is selected based on the "),VK=a("code"),SXe=o("model_type"),RXe=o(` property of the config object (either
passed as an argument or loaded from `),XK=a("code"),BXe=o("pretrained_model_name_or_path"),PXe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zK=a("code"),IXe=o("pretrained_model_name_or_path"),qXe=o(":"),NXe=l(),S=a("ul"),wn=a("li"),QK=a("strong"),jXe=o("albert"),DXe=o(" \u2014 "),y9=a("a"),GXe=o("AlbertTokenizer"),OXe=o(" or "),L9=a("a"),VXe=o("AlbertTokenizerFast"),XXe=o(" (ALBERT model)"),zXe=l(),An=a("li"),WK=a("strong"),QXe=o("bart"),WXe=o(" \u2014 "),x9=a("a"),HXe=o("BartTokenizer"),UXe=o(" or "),$9=a("a"),JXe=o("BartTokenizerFast"),YXe=o(" (BART model)"),KXe=l(),yn=a("li"),HK=a("strong"),ZXe=o("barthez"),eze=o(" \u2014 "),k9=a("a"),oze=o("BarthezTokenizer"),rze=o(" or "),S9=a("a"),tze=o("BarthezTokenizerFast"),aze=o(" (BARThez model)"),nze=l(),Wm=a("li"),UK=a("strong"),sze=o("bartpho"),lze=o(" \u2014 "),R9=a("a"),ize=o("BartphoTokenizer"),dze=o(" (BARTpho model)"),cze=l(),Ln=a("li"),JK=a("strong"),fze=o("bert"),mze=o(" \u2014 "),B9=a("a"),hze=o("BertTokenizer"),gze=o(" or "),P9=a("a"),pze=o("BertTokenizerFast"),uze=o(" (BERT model)"),_ze=l(),Hm=a("li"),YK=a("strong"),bze=o("bert-generation"),Fze=o(" \u2014 "),I9=a("a"),vze=o("BertGenerationTokenizer"),Tze=o(" (Bert Generation model)"),Mze=l(),Um=a("li"),KK=a("strong"),Eze=o("bert-japanese"),Cze=o(" \u2014 "),q9=a("a"),wze=o("BertJapaneseTokenizer"),Aze=o(" (BertJapanese model)"),yze=l(),Jm=a("li"),ZK=a("strong"),Lze=o("bertweet"),xze=o(" \u2014 "),N9=a("a"),$ze=o("BertweetTokenizer"),kze=o(" (Bertweet model)"),Sze=l(),xn=a("li"),eZ=a("strong"),Rze=o("big_bird"),Bze=o(" \u2014 "),j9=a("a"),Pze=o("BigBirdTokenizer"),Ize=o(" or "),D9=a("a"),qze=o("BigBirdTokenizerFast"),Nze=o(" (BigBird model)"),jze=l(),$n=a("li"),oZ=a("strong"),Dze=o("bigbird_pegasus"),Gze=o(" \u2014 "),G9=a("a"),Oze=o("PegasusTokenizer"),Vze=o(" or "),O9=a("a"),Xze=o("PegasusTokenizerFast"),zze=o(" (BigBirdPegasus model)"),Qze=l(),kn=a("li"),rZ=a("strong"),Wze=o("blenderbot"),Hze=o(" \u2014 "),V9=a("a"),Uze=o("BlenderbotTokenizer"),Jze=o(" or "),X9=a("a"),Yze=o("BlenderbotTokenizerFast"),Kze=o(" (Blenderbot model)"),Zze=l(),Ym=a("li"),tZ=a("strong"),eQe=o("blenderbot-small"),oQe=o(" \u2014 "),z9=a("a"),rQe=o("BlenderbotSmallTokenizer"),tQe=o(" (BlenderbotSmall model)"),aQe=l(),Km=a("li"),aZ=a("strong"),nQe=o("byt5"),sQe=o(" \u2014 "),Q9=a("a"),lQe=o("ByT5Tokenizer"),iQe=o(" (ByT5 model)"),dQe=l(),Sn=a("li"),nZ=a("strong"),cQe=o("camembert"),fQe=o(" \u2014 "),W9=a("a"),mQe=o("CamembertTokenizer"),hQe=o(" or "),H9=a("a"),gQe=o("CamembertTokenizerFast"),pQe=o(" (CamemBERT model)"),uQe=l(),Zm=a("li"),sZ=a("strong"),_Qe=o("canine"),bQe=o(" \u2014 "),U9=a("a"),FQe=o("CanineTokenizer"),vQe=o(" (Canine model)"),TQe=l(),Rn=a("li"),lZ=a("strong"),MQe=o("clip"),EQe=o(" \u2014 "),J9=a("a"),CQe=o("CLIPTokenizer"),wQe=o(" or "),Y9=a("a"),AQe=o("CLIPTokenizerFast"),yQe=o(" (CLIP model)"),LQe=l(),Bn=a("li"),iZ=a("strong"),xQe=o("convbert"),$Qe=o(" \u2014 "),K9=a("a"),kQe=o("ConvBertTokenizer"),SQe=o(" or "),Z9=a("a"),RQe=o("ConvBertTokenizerFast"),BQe=o(" (ConvBERT model)"),PQe=l(),Pn=a("li"),dZ=a("strong"),IQe=o("cpm"),qQe=o(" \u2014 "),ek=a("a"),NQe=o("CpmTokenizer"),jQe=o(" or "),cZ=a("code"),DQe=o("CpmTokenizerFast"),GQe=o(" (CPM model)"),OQe=l(),eh=a("li"),fZ=a("strong"),VQe=o("ctrl"),XQe=o(" \u2014 "),ok=a("a"),zQe=o("CTRLTokenizer"),QQe=o(" (CTRL model)"),WQe=l(),In=a("li"),mZ=a("strong"),HQe=o("deberta"),UQe=o(" \u2014 "),rk=a("a"),JQe=o("DebertaTokenizer"),YQe=o(" or "),tk=a("a"),KQe=o("DebertaTokenizerFast"),ZQe=o(" (DeBERTa model)"),eWe=l(),oh=a("li"),hZ=a("strong"),oWe=o("deberta-v2"),rWe=o(" \u2014 "),ak=a("a"),tWe=o("DebertaV2Tokenizer"),aWe=o(" (DeBERTa-v2 model)"),nWe=l(),qn=a("li"),gZ=a("strong"),sWe=o("distilbert"),lWe=o(" \u2014 "),nk=a("a"),iWe=o("DistilBertTokenizer"),dWe=o(" or "),sk=a("a"),cWe=o("DistilBertTokenizerFast"),fWe=o(" (DistilBERT model)"),mWe=l(),Nn=a("li"),pZ=a("strong"),hWe=o("dpr"),gWe=o(" \u2014 "),lk=a("a"),pWe=o("DPRQuestionEncoderTokenizer"),uWe=o(" or "),ik=a("a"),_We=o("DPRQuestionEncoderTokenizerFast"),bWe=o(" (DPR model)"),FWe=l(),jn=a("li"),uZ=a("strong"),vWe=o("electra"),TWe=o(" \u2014 "),dk=a("a"),MWe=o("ElectraTokenizer"),EWe=o(" or "),ck=a("a"),CWe=o("ElectraTokenizerFast"),wWe=o(" (ELECTRA model)"),AWe=l(),rh=a("li"),_Z=a("strong"),yWe=o("flaubert"),LWe=o(" \u2014 "),fk=a("a"),xWe=o("FlaubertTokenizer"),$We=o(" (FlauBERT model)"),kWe=l(),Dn=a("li"),bZ=a("strong"),SWe=o("fnet"),RWe=o(" \u2014 "),mk=a("a"),BWe=o("FNetTokenizer"),PWe=o(" or "),hk=a("a"),IWe=o("FNetTokenizerFast"),qWe=o(" (FNet model)"),NWe=l(),th=a("li"),FZ=a("strong"),jWe=o("fsmt"),DWe=o(" \u2014 "),gk=a("a"),GWe=o("FSMTTokenizer"),OWe=o(" (FairSeq Machine-Translation model)"),VWe=l(),Gn=a("li"),vZ=a("strong"),XWe=o("funnel"),zWe=o(" \u2014 "),pk=a("a"),QWe=o("FunnelTokenizer"),WWe=o(" or "),uk=a("a"),HWe=o("FunnelTokenizerFast"),UWe=o(" (Funnel Transformer model)"),JWe=l(),On=a("li"),TZ=a("strong"),YWe=o("gpt2"),KWe=o(" \u2014 "),_k=a("a"),ZWe=o("GPT2Tokenizer"),eHe=o(" or "),bk=a("a"),oHe=o("GPT2TokenizerFast"),rHe=o(" (OpenAI GPT-2 model)"),tHe=l(),Vn=a("li"),MZ=a("strong"),aHe=o("gpt_neo"),nHe=o(" \u2014 "),Fk=a("a"),sHe=o("GPT2Tokenizer"),lHe=o(" or "),vk=a("a"),iHe=o("GPT2TokenizerFast"),dHe=o(" (GPT Neo model)"),cHe=l(),Xn=a("li"),EZ=a("strong"),fHe=o("herbert"),mHe=o(" \u2014 "),Tk=a("a"),hHe=o("HerbertTokenizer"),gHe=o(" or "),Mk=a("a"),pHe=o("HerbertTokenizerFast"),uHe=o(" (HerBERT model)"),_He=l(),ah=a("li"),CZ=a("strong"),bHe=o("hubert"),FHe=o(" \u2014 "),Ek=a("a"),vHe=o("Wav2Vec2CTCTokenizer"),THe=o(" (Hubert model)"),MHe=l(),zn=a("li"),wZ=a("strong"),EHe=o("ibert"),CHe=o(" \u2014 "),Ck=a("a"),wHe=o("RobertaTokenizer"),AHe=o(" or "),wk=a("a"),yHe=o("RobertaTokenizerFast"),LHe=o(" (I-BERT model)"),xHe=l(),Qn=a("li"),AZ=a("strong"),$He=o("layoutlm"),kHe=o(" \u2014 "),Ak=a("a"),SHe=o("LayoutLMTokenizer"),RHe=o(" or "),yk=a("a"),BHe=o("LayoutLMTokenizerFast"),PHe=o(" (LayoutLM model)"),IHe=l(),Wn=a("li"),yZ=a("strong"),qHe=o("layoutlmv2"),NHe=o(" \u2014 "),Lk=a("a"),jHe=o("LayoutLMv2Tokenizer"),DHe=o(" or "),xk=a("a"),GHe=o("LayoutLMv2TokenizerFast"),OHe=o(" (LayoutLMv2 model)"),VHe=l(),Hn=a("li"),LZ=a("strong"),XHe=o("layoutxlm"),zHe=o(" \u2014 "),$k=a("a"),QHe=o("LayoutXLMTokenizer"),WHe=o(" or "),kk=a("a"),HHe=o("LayoutXLMTokenizerFast"),UHe=o(" (LayoutXLM model)"),JHe=l(),Un=a("li"),xZ=a("strong"),YHe=o("led"),KHe=o(" \u2014 "),Sk=a("a"),ZHe=o("LEDTokenizer"),eUe=o(" or "),Rk=a("a"),oUe=o("LEDTokenizerFast"),rUe=o(" (LED model)"),tUe=l(),Jn=a("li"),$Z=a("strong"),aUe=o("longformer"),nUe=o(" \u2014 "),Bk=a("a"),sUe=o("LongformerTokenizer"),lUe=o(" or "),Pk=a("a"),iUe=o("LongformerTokenizerFast"),dUe=o(" (Longformer model)"),cUe=l(),nh=a("li"),kZ=a("strong"),fUe=o("luke"),mUe=o(" \u2014 "),Ik=a("a"),hUe=o("LukeTokenizer"),gUe=o(" (LUKE model)"),pUe=l(),Yn=a("li"),SZ=a("strong"),uUe=o("lxmert"),_Ue=o(" \u2014 "),qk=a("a"),bUe=o("LxmertTokenizer"),FUe=o(" or "),Nk=a("a"),vUe=o("LxmertTokenizerFast"),TUe=o(" (LXMERT model)"),MUe=l(),sh=a("li"),RZ=a("strong"),EUe=o("m2m_100"),CUe=o(" \u2014 "),jk=a("a"),wUe=o("M2M100Tokenizer"),AUe=o(" (M2M100 model)"),yUe=l(),lh=a("li"),BZ=a("strong"),LUe=o("marian"),xUe=o(" \u2014 "),Dk=a("a"),$Ue=o("MarianTokenizer"),kUe=o(" (Marian model)"),SUe=l(),Kn=a("li"),PZ=a("strong"),RUe=o("mbart"),BUe=o(" \u2014 "),Gk=a("a"),PUe=o("MBartTokenizer"),IUe=o(" or "),Ok=a("a"),qUe=o("MBartTokenizerFast"),NUe=o(" (mBART model)"),jUe=l(),Zn=a("li"),IZ=a("strong"),DUe=o("mbart50"),GUe=o(" \u2014 "),Vk=a("a"),OUe=o("MBart50Tokenizer"),VUe=o(" or "),Xk=a("a"),XUe=o("MBart50TokenizerFast"),zUe=o(" (mBART-50 model)"),QUe=l(),ih=a("li"),qZ=a("strong"),WUe=o("mluke"),HUe=o(" \u2014 "),zk=a("a"),UUe=o("MLukeTokenizer"),JUe=o(" (mLUKE model)"),YUe=l(),es=a("li"),NZ=a("strong"),KUe=o("mobilebert"),ZUe=o(" \u2014 "),Qk=a("a"),eJe=o("MobileBertTokenizer"),oJe=o(" or "),Wk=a("a"),rJe=o("MobileBertTokenizerFast"),tJe=o(" (MobileBERT model)"),aJe=l(),os=a("li"),jZ=a("strong"),nJe=o("mpnet"),sJe=o(" \u2014 "),Hk=a("a"),lJe=o("MPNetTokenizer"),iJe=o(" or "),Uk=a("a"),dJe=o("MPNetTokenizerFast"),cJe=o(" (MPNet model)"),fJe=l(),rs=a("li"),DZ=a("strong"),mJe=o("mt5"),hJe=o(" \u2014 "),Jk=a("a"),gJe=o("MT5Tokenizer"),pJe=o(" or "),Yk=a("a"),uJe=o("MT5TokenizerFast"),_Je=o(" (mT5 model)"),bJe=l(),ts=a("li"),GZ=a("strong"),FJe=o("openai-gpt"),vJe=o(" \u2014 "),Kk=a("a"),TJe=o("OpenAIGPTTokenizer"),MJe=o(" or "),Zk=a("a"),EJe=o("OpenAIGPTTokenizerFast"),CJe=o(" (OpenAI GPT model)"),wJe=l(),as=a("li"),OZ=a("strong"),AJe=o("pegasus"),yJe=o(" \u2014 "),eS=a("a"),LJe=o("PegasusTokenizer"),xJe=o(" or "),oS=a("a"),$Je=o("PegasusTokenizerFast"),kJe=o(" (Pegasus model)"),SJe=l(),dh=a("li"),VZ=a("strong"),RJe=o("perceiver"),BJe=o(" \u2014 "),rS=a("a"),PJe=o("PerceiverTokenizer"),IJe=o(" (Perceiver model)"),qJe=l(),ch=a("li"),XZ=a("strong"),NJe=o("phobert"),jJe=o(" \u2014 "),tS=a("a"),DJe=o("PhobertTokenizer"),GJe=o(" (PhoBERT model)"),OJe=l(),fh=a("li"),zZ=a("strong"),VJe=o("plbart"),XJe=o(" \u2014 "),QZ=a("code"),zJe=o("PLBartTokenizer"),QJe=o(" (PLBart model)"),WJe=l(),mh=a("li"),WZ=a("strong"),HJe=o("prophetnet"),UJe=o(" \u2014 "),aS=a("a"),JJe=o("ProphetNetTokenizer"),YJe=o(" (ProphetNet model)"),KJe=l(),ns=a("li"),HZ=a("strong"),ZJe=o("qdqbert"),eYe=o(" \u2014 "),nS=a("a"),oYe=o("BertTokenizer"),rYe=o(" or "),sS=a("a"),tYe=o("BertTokenizerFast"),aYe=o(" (QDQBert model)"),nYe=l(),hh=a("li"),UZ=a("strong"),sYe=o("rag"),lYe=o(" \u2014 "),lS=a("a"),iYe=o("RagTokenizer"),dYe=o(" (RAG model)"),cYe=l(),ss=a("li"),JZ=a("strong"),fYe=o("realm"),mYe=o(" \u2014 "),iS=a("a"),hYe=o("RealmTokenizer"),gYe=o(" or "),dS=a("a"),pYe=o("RealmTokenizerFast"),uYe=o(" (Realm model)"),_Ye=l(),ls=a("li"),YZ=a("strong"),bYe=o("reformer"),FYe=o(" \u2014 "),cS=a("a"),vYe=o("ReformerTokenizer"),TYe=o(" or "),fS=a("a"),MYe=o("ReformerTokenizerFast"),EYe=o(" (Reformer model)"),CYe=l(),is=a("li"),KZ=a("strong"),wYe=o("rembert"),AYe=o(" \u2014 "),mS=a("a"),yYe=o("RemBertTokenizer"),LYe=o(" or "),hS=a("a"),xYe=o("RemBertTokenizerFast"),$Ye=o(" (RemBERT model)"),kYe=l(),ds=a("li"),ZZ=a("strong"),SYe=o("retribert"),RYe=o(" \u2014 "),gS=a("a"),BYe=o("RetriBertTokenizer"),PYe=o(" or "),pS=a("a"),IYe=o("RetriBertTokenizerFast"),qYe=o(" (RetriBERT model)"),NYe=l(),cs=a("li"),eee=a("strong"),jYe=o("roberta"),DYe=o(" \u2014 "),uS=a("a"),GYe=o("RobertaTokenizer"),OYe=o(" or "),_S=a("a"),VYe=o("RobertaTokenizerFast"),XYe=o(" (RoBERTa model)"),zYe=l(),fs=a("li"),oee=a("strong"),QYe=o("roformer"),WYe=o(" \u2014 "),bS=a("a"),HYe=o("RoFormerTokenizer"),UYe=o(" or "),FS=a("a"),JYe=o("RoFormerTokenizerFast"),YYe=o(" (RoFormer model)"),KYe=l(),gh=a("li"),ree=a("strong"),ZYe=o("speech_to_text"),eKe=o(" \u2014 "),vS=a("a"),oKe=o("Speech2TextTokenizer"),rKe=o(" (Speech2Text model)"),tKe=l(),ph=a("li"),tee=a("strong"),aKe=o("speech_to_text_2"),nKe=o(" \u2014 "),TS=a("a"),sKe=o("Speech2Text2Tokenizer"),lKe=o(" (Speech2Text2 model)"),iKe=l(),ms=a("li"),aee=a("strong"),dKe=o("splinter"),cKe=o(" \u2014 "),MS=a("a"),fKe=o("SplinterTokenizer"),mKe=o(" or "),ES=a("a"),hKe=o("SplinterTokenizerFast"),gKe=o(" (Splinter model)"),pKe=l(),hs=a("li"),nee=a("strong"),uKe=o("squeezebert"),_Ke=o(" \u2014 "),CS=a("a"),bKe=o("SqueezeBertTokenizer"),FKe=o(" or "),wS=a("a"),vKe=o("SqueezeBertTokenizerFast"),TKe=o(" (SqueezeBERT model)"),MKe=l(),gs=a("li"),see=a("strong"),EKe=o("t5"),CKe=o(" \u2014 "),AS=a("a"),wKe=o("T5Tokenizer"),AKe=o(" or "),yS=a("a"),yKe=o("T5TokenizerFast"),LKe=o(" (T5 model)"),xKe=l(),uh=a("li"),lee=a("strong"),$Ke=o("tapas"),kKe=o(" \u2014 "),LS=a("a"),SKe=o("TapasTokenizer"),RKe=o(" (TAPAS model)"),BKe=l(),_h=a("li"),iee=a("strong"),PKe=o("transfo-xl"),IKe=o(" \u2014 "),xS=a("a"),qKe=o("TransfoXLTokenizer"),NKe=o(" (Transformer-XL model)"),jKe=l(),bh=a("li"),dee=a("strong"),DKe=o("wav2vec2"),GKe=o(" \u2014 "),$S=a("a"),OKe=o("Wav2Vec2CTCTokenizer"),VKe=o(" (Wav2Vec2 model)"),XKe=l(),Fh=a("li"),cee=a("strong"),zKe=o("wav2vec2_phoneme"),QKe=o(" \u2014 "),kS=a("a"),WKe=o("Wav2Vec2PhonemeCTCTokenizer"),HKe=o(" (Wav2Vec2Phoneme model)"),UKe=l(),ps=a("li"),fee=a("strong"),JKe=o("xglm"),YKe=o(" \u2014 "),SS=a("a"),KKe=o("XGLMTokenizer"),ZKe=o(" or "),RS=a("a"),eZe=o("XGLMTokenizerFast"),oZe=o(" (XGLM model)"),rZe=l(),vh=a("li"),mee=a("strong"),tZe=o("xlm"),aZe=o(" \u2014 "),BS=a("a"),nZe=o("XLMTokenizer"),sZe=o(" (XLM model)"),lZe=l(),Th=a("li"),hee=a("strong"),iZe=o("xlm-prophetnet"),dZe=o(" \u2014 "),PS=a("a"),cZe=o("XLMProphetNetTokenizer"),fZe=o(" (XLMProphetNet model)"),mZe=l(),us=a("li"),gee=a("strong"),hZe=o("xlm-roberta"),gZe=o(" \u2014 "),IS=a("a"),pZe=o("XLMRobertaTokenizer"),uZe=o(" or "),qS=a("a"),_Ze=o("XLMRobertaTokenizerFast"),bZe=o(" (XLM-RoBERTa model)"),FZe=l(),_s=a("li"),pee=a("strong"),vZe=o("xlnet"),TZe=o(" \u2014 "),NS=a("a"),MZe=o("XLNetTokenizer"),EZe=o(" or "),jS=a("a"),CZe=o("XLNetTokenizerFast"),wZe=o(" (XLNet model)"),AZe=l(),v(Mh.$$.fragment),yZe=l(),Eh=a("div"),v(D0.$$.fragment),LZe=l(),uee=a("p"),xZe=o("Register a new tokenizer in this mapping."),q9e=l(),ti=a("h2"),Ch=a("a"),_ee=a("span"),v(G0.$$.fragment),$Ze=l(),bee=a("span"),kZe=o("AutoFeatureExtractor"),N9e=l(),Co=a("div"),v(O0.$$.fragment),SZe=l(),V0=a("p"),RZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DS=a("a"),BZe=o("AutoFeatureExtractor.from_pretrained()"),PZe=o(" class method."),IZe=l(),X0=a("p"),qZe=o("This class cannot be instantiated directly using "),Fee=a("code"),NZe=o("__init__()"),jZe=o(" (throws an error)."),DZe=l(),Ve=a("div"),v(z0.$$.fragment),GZe=l(),vee=a("p"),OZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),VZe=l(),Ta=a("p"),XZe=o("The feature extractor class to instantiate is selected based on the "),Tee=a("code"),zZe=o("model_type"),QZe=o(` property of the config object
(either passed as an argument or loaded from `),Mee=a("code"),WZe=o("pretrained_model_name_or_path"),HZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Eee=a("code"),UZe=o("pretrained_model_name_or_path"),JZe=o(":"),YZe=l(),fe=a("ul"),wh=a("li"),Cee=a("strong"),KZe=o("beit"),ZZe=o(" \u2014 "),GS=a("a"),eeo=o("BeitFeatureExtractor"),oeo=o(" (BEiT model)"),reo=l(),Ah=a("li"),wee=a("strong"),teo=o("clip"),aeo=o(" \u2014 "),OS=a("a"),neo=o("CLIPFeatureExtractor"),seo=o(" (CLIP model)"),leo=l(),yh=a("li"),Aee=a("strong"),ieo=o("convnext"),deo=o(" \u2014 "),VS=a("a"),ceo=o("ConvNextFeatureExtractor"),feo=o(" (ConvNext model)"),meo=l(),Lh=a("li"),yee=a("strong"),heo=o("deit"),geo=o(" \u2014 "),XS=a("a"),peo=o("DeiTFeatureExtractor"),ueo=o(" (DeiT model)"),_eo=l(),xh=a("li"),Lee=a("strong"),beo=o("detr"),Feo=o(" \u2014 "),zS=a("a"),veo=o("DetrFeatureExtractor"),Teo=o(" (DETR model)"),Meo=l(),$h=a("li"),xee=a("strong"),Eeo=o("hubert"),Ceo=o(" \u2014 "),QS=a("a"),weo=o("Wav2Vec2FeatureExtractor"),Aeo=o(" (Hubert model)"),yeo=l(),kh=a("li"),$ee=a("strong"),Leo=o("layoutlmv2"),xeo=o(" \u2014 "),WS=a("a"),$eo=o("LayoutLMv2FeatureExtractor"),keo=o(" (LayoutLMv2 model)"),Seo=l(),Sh=a("li"),kee=a("strong"),Reo=o("maskformer"),Beo=o(" \u2014 "),HS=a("a"),Peo=o("MaskFormerFeatureExtractor"),Ieo=o(" (MaskFormer model)"),qeo=l(),Rh=a("li"),See=a("strong"),Neo=o("perceiver"),jeo=o(" \u2014 "),US=a("a"),Deo=o("PerceiverFeatureExtractor"),Geo=o(" (Perceiver model)"),Oeo=l(),Bh=a("li"),Ree=a("strong"),Veo=o("poolformer"),Xeo=o(" \u2014 "),JS=a("a"),zeo=o("PoolFormerFeatureExtractor"),Qeo=o(" (PoolFormer model)"),Weo=l(),Ph=a("li"),Bee=a("strong"),Heo=o("resnet"),Ueo=o(" \u2014 "),YS=a("a"),Jeo=o("ConvNextFeatureExtractor"),Yeo=o(" (ResNet model)"),Keo=l(),Ih=a("li"),Pee=a("strong"),Zeo=o("segformer"),eoo=o(" \u2014 "),KS=a("a"),ooo=o("SegformerFeatureExtractor"),roo=o(" (SegFormer model)"),too=l(),qh=a("li"),Iee=a("strong"),aoo=o("speech_to_text"),noo=o(" \u2014 "),ZS=a("a"),soo=o("Speech2TextFeatureExtractor"),loo=o(" (Speech2Text model)"),ioo=l(),Nh=a("li"),qee=a("strong"),doo=o("swin"),coo=o(" \u2014 "),eR=a("a"),foo=o("ViTFeatureExtractor"),moo=o(" (Swin model)"),hoo=l(),jh=a("li"),Nee=a("strong"),goo=o("van"),poo=o(" \u2014 "),oR=a("a"),uoo=o("ConvNextFeatureExtractor"),_oo=o(" (VAN model)"),boo=l(),Dh=a("li"),jee=a("strong"),Foo=o("vit"),voo=o(" \u2014 "),rR=a("a"),Too=o("ViTFeatureExtractor"),Moo=o(" (ViT model)"),Eoo=l(),Gh=a("li"),Dee=a("strong"),Coo=o("vit_mae"),woo=o(" \u2014 "),tR=a("a"),Aoo=o("ViTFeatureExtractor"),yoo=o(" (ViTMAE model)"),Loo=l(),Oh=a("li"),Gee=a("strong"),xoo=o("wav2vec2"),$oo=o(" \u2014 "),aR=a("a"),koo=o("Wav2Vec2FeatureExtractor"),Soo=o(" (Wav2Vec2 model)"),Roo=l(),v(Vh.$$.fragment),Boo=l(),v(Xh.$$.fragment),Poo=l(),zh=a("div"),v(Q0.$$.fragment),Ioo=l(),Oee=a("p"),qoo=o("Register a new feature extractor for this class."),j9e=l(),ai=a("h2"),Qh=a("a"),Vee=a("span"),v(W0.$$.fragment),Noo=l(),Xee=a("span"),joo=o("AutoProcessor"),D9e=l(),wo=a("div"),v(H0.$$.fragment),Doo=l(),U0=a("p"),Goo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),nR=a("a"),Ooo=o("AutoProcessor.from_pretrained()"),Voo=o(" class method."),Xoo=l(),J0=a("p"),zoo=o("This class cannot be instantiated directly using "),zee=a("code"),Qoo=o("__init__()"),Woo=o(" (throws an error)."),Hoo=l(),Xe=a("div"),v(Y0.$$.fragment),Uoo=l(),Qee=a("p"),Joo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Yoo=l(),ni=a("p"),Koo=o("The processor class to instantiate is selected based on the "),Wee=a("code"),Zoo=o("model_type"),ero=o(` property of the config object (either
passed as an argument or loaded from `),Hee=a("code"),oro=o("pretrained_model_name_or_path"),rro=o(" if possible):"),tro=l(),Pe=a("ul"),Wh=a("li"),Uee=a("strong"),aro=o("clip"),nro=o(" \u2014 "),sR=a("a"),sro=o("CLIPProcessor"),lro=o(" (CLIP model)"),iro=l(),Hh=a("li"),Jee=a("strong"),dro=o("layoutlmv2"),cro=o(" \u2014 "),lR=a("a"),fro=o("LayoutLMv2Processor"),mro=o(" (LayoutLMv2 model)"),hro=l(),Uh=a("li"),Yee=a("strong"),gro=o("layoutxlm"),pro=o(" \u2014 "),iR=a("a"),uro=o("LayoutXLMProcessor"),_ro=o(" (LayoutXLM model)"),bro=l(),Jh=a("li"),Kee=a("strong"),Fro=o("speech_to_text"),vro=o(" \u2014 "),dR=a("a"),Tro=o("Speech2TextProcessor"),Mro=o(" (Speech2Text model)"),Ero=l(),Yh=a("li"),Zee=a("strong"),Cro=o("speech_to_text_2"),wro=o(" \u2014 "),cR=a("a"),Aro=o("Speech2Text2Processor"),yro=o(" (Speech2Text2 model)"),Lro=l(),Kh=a("li"),eoe=a("strong"),xro=o("trocr"),$ro=o(" \u2014 "),fR=a("a"),kro=o("TrOCRProcessor"),Sro=o(" (TrOCR model)"),Rro=l(),Zh=a("li"),ooe=a("strong"),Bro=o("vision-text-dual-encoder"),Pro=o(" \u2014 "),mR=a("a"),Iro=o("VisionTextDualEncoderProcessor"),qro=o(" (VisionTextDualEncoder model)"),Nro=l(),eg=a("li"),roe=a("strong"),jro=o("wav2vec2"),Dro=o(" \u2014 "),hR=a("a"),Gro=o("Wav2Vec2Processor"),Oro=o(" (Wav2Vec2 model)"),Vro=l(),v(og.$$.fragment),Xro=l(),v(rg.$$.fragment),zro=l(),tg=a("div"),v(K0.$$.fragment),Qro=l(),toe=a("p"),Wro=o("Register a new processor for this class."),G9e=l(),si=a("h2"),ag=a("a"),aoe=a("span"),v(Z0.$$.fragment),Hro=l(),noe=a("span"),Uro=o("AutoModel"),O9e=l(),Ao=a("div"),v(e6.$$.fragment),Jro=l(),li=a("p"),Yro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gR=a("a"),Kro=o("from_pretrained()"),Zro=o(" class method or the "),pR=a("a"),eto=o("from_config()"),oto=o(` class
method.`),rto=l(),o6=a("p"),tto=o("This class cannot be instantiated directly using "),soe=a("code"),ato=o("__init__()"),nto=o(" (throws an error)."),sto=l(),Kr=a("div"),v(r6.$$.fragment),lto=l(),loe=a("p"),ito=o("Instantiates one of the base model classes of the library from a configuration."),dto=l(),ii=a("p"),cto=o(`Note:
Loading a model from its configuration file does `),ioe=a("strong"),fto=o("not"),mto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uR=a("a"),hto=o("from_pretrained()"),gto=o(" to load the model weights."),pto=l(),v(ng.$$.fragment),uto=l(),ze=a("div"),v(t6.$$.fragment),_to=l(),doe=a("p"),bto=o("Instantiate one of the base model classes of the library from a pretrained model."),Fto=l(),Ma=a("p"),vto=o("The model class to instantiate is selected based on the "),coe=a("code"),Tto=o("model_type"),Mto=o(` property of the config object (either
passed as an argument or loaded from `),foe=a("code"),Eto=o("pretrained_model_name_or_path"),Cto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),moe=a("code"),wto=o("pretrained_model_name_or_path"),Ato=o(":"),yto=l(),x=a("ul"),sg=a("li"),hoe=a("strong"),Lto=o("albert"),xto=o(" \u2014 "),_R=a("a"),$to=o("AlbertModel"),kto=o(" (ALBERT model)"),Sto=l(),lg=a("li"),goe=a("strong"),Rto=o("bart"),Bto=o(" \u2014 "),bR=a("a"),Pto=o("BartModel"),Ito=o(" (BART model)"),qto=l(),ig=a("li"),poe=a("strong"),Nto=o("beit"),jto=o(" \u2014 "),FR=a("a"),Dto=o("BeitModel"),Gto=o(" (BEiT model)"),Oto=l(),dg=a("li"),uoe=a("strong"),Vto=o("bert"),Xto=o(" \u2014 "),vR=a("a"),zto=o("BertModel"),Qto=o(" (BERT model)"),Wto=l(),cg=a("li"),_oe=a("strong"),Hto=o("bert-generation"),Uto=o(" \u2014 "),TR=a("a"),Jto=o("BertGenerationEncoder"),Yto=o(" (Bert Generation model)"),Kto=l(),fg=a("li"),boe=a("strong"),Zto=o("big_bird"),eao=o(" \u2014 "),MR=a("a"),oao=o("BigBirdModel"),rao=o(" (BigBird model)"),tao=l(),mg=a("li"),Foe=a("strong"),aao=o("bigbird_pegasus"),nao=o(" \u2014 "),ER=a("a"),sao=o("BigBirdPegasusModel"),lao=o(" (BigBirdPegasus model)"),iao=l(),hg=a("li"),voe=a("strong"),dao=o("blenderbot"),cao=o(" \u2014 "),CR=a("a"),fao=o("BlenderbotModel"),mao=o(" (Blenderbot model)"),hao=l(),gg=a("li"),Toe=a("strong"),gao=o("blenderbot-small"),pao=o(" \u2014 "),wR=a("a"),uao=o("BlenderbotSmallModel"),_ao=o(" (BlenderbotSmall model)"),bao=l(),pg=a("li"),Moe=a("strong"),Fao=o("camembert"),vao=o(" \u2014 "),AR=a("a"),Tao=o("CamembertModel"),Mao=o(" (CamemBERT model)"),Eao=l(),ug=a("li"),Eoe=a("strong"),Cao=o("canine"),wao=o(" \u2014 "),yR=a("a"),Aao=o("CanineModel"),yao=o(" (Canine model)"),Lao=l(),_g=a("li"),Coe=a("strong"),xao=o("clip"),$ao=o(" \u2014 "),LR=a("a"),kao=o("CLIPModel"),Sao=o(" (CLIP model)"),Rao=l(),bg=a("li"),woe=a("strong"),Bao=o("convbert"),Pao=o(" \u2014 "),xR=a("a"),Iao=o("ConvBertModel"),qao=o(" (ConvBERT model)"),Nao=l(),Fg=a("li"),Aoe=a("strong"),jao=o("convnext"),Dao=o(" \u2014 "),$R=a("a"),Gao=o("ConvNextModel"),Oao=o(" (ConvNext model)"),Vao=l(),vg=a("li"),yoe=a("strong"),Xao=o("ctrl"),zao=o(" \u2014 "),kR=a("a"),Qao=o("CTRLModel"),Wao=o(" (CTRL model)"),Hao=l(),Tg=a("li"),Loe=a("strong"),Uao=o("data2vec-audio"),Jao=o(" \u2014 "),SR=a("a"),Yao=o("Data2VecAudioModel"),Kao=o(" (Data2VecAudio model)"),Zao=l(),Mg=a("li"),xoe=a("strong"),eno=o("data2vec-text"),ono=o(" \u2014 "),RR=a("a"),rno=o("Data2VecTextModel"),tno=o(" (Data2VecText model)"),ano=l(),Eg=a("li"),$oe=a("strong"),nno=o("deberta"),sno=o(" \u2014 "),BR=a("a"),lno=o("DebertaModel"),ino=o(" (DeBERTa model)"),dno=l(),Cg=a("li"),koe=a("strong"),cno=o("deberta-v2"),fno=o(" \u2014 "),PR=a("a"),mno=o("DebertaV2Model"),hno=o(" (DeBERTa-v2 model)"),gno=l(),wg=a("li"),Soe=a("strong"),pno=o("decision_transformer"),uno=o(" \u2014 "),IR=a("a"),_no=o("DecisionTransformerModel"),bno=o(" (Decision Transformer model)"),Fno=l(),Ag=a("li"),Roe=a("strong"),vno=o("deit"),Tno=o(" \u2014 "),qR=a("a"),Mno=o("DeiTModel"),Eno=o(" (DeiT model)"),Cno=l(),yg=a("li"),Boe=a("strong"),wno=o("detr"),Ano=o(" \u2014 "),NR=a("a"),yno=o("DetrModel"),Lno=o(" (DETR model)"),xno=l(),Lg=a("li"),Poe=a("strong"),$no=o("distilbert"),kno=o(" \u2014 "),jR=a("a"),Sno=o("DistilBertModel"),Rno=o(" (DistilBERT model)"),Bno=l(),xg=a("li"),Ioe=a("strong"),Pno=o("dpr"),Ino=o(" \u2014 "),DR=a("a"),qno=o("DPRQuestionEncoder"),Nno=o(" (DPR model)"),jno=l(),$g=a("li"),qoe=a("strong"),Dno=o("electra"),Gno=o(" \u2014 "),GR=a("a"),Ono=o("ElectraModel"),Vno=o(" (ELECTRA model)"),Xno=l(),kg=a("li"),Noe=a("strong"),zno=o("flaubert"),Qno=o(" \u2014 "),OR=a("a"),Wno=o("FlaubertModel"),Hno=o(" (FlauBERT model)"),Uno=l(),Sg=a("li"),joe=a("strong"),Jno=o("fnet"),Yno=o(" \u2014 "),VR=a("a"),Kno=o("FNetModel"),Zno=o(" (FNet model)"),eso=l(),Rg=a("li"),Doe=a("strong"),oso=o("fsmt"),rso=o(" \u2014 "),XR=a("a"),tso=o("FSMTModel"),aso=o(" (FairSeq Machine-Translation model)"),nso=l(),bs=a("li"),Goe=a("strong"),sso=o("funnel"),lso=o(" \u2014 "),zR=a("a"),iso=o("FunnelModel"),dso=o(" or "),QR=a("a"),cso=o("FunnelBaseModel"),fso=o(" (Funnel Transformer model)"),mso=l(),Bg=a("li"),Ooe=a("strong"),hso=o("glpn"),gso=o(" \u2014 "),WR=a("a"),pso=o("GLPNModel"),uso=o(" (GLPN model)"),_so=l(),Pg=a("li"),Voe=a("strong"),bso=o("gpt2"),Fso=o(" \u2014 "),HR=a("a"),vso=o("GPT2Model"),Tso=o(" (OpenAI GPT-2 model)"),Mso=l(),Ig=a("li"),Xoe=a("strong"),Eso=o("gpt_neo"),Cso=o(" \u2014 "),UR=a("a"),wso=o("GPTNeoModel"),Aso=o(" (GPT Neo model)"),yso=l(),qg=a("li"),zoe=a("strong"),Lso=o("gptj"),xso=o(" \u2014 "),JR=a("a"),$so=o("GPTJModel"),kso=o(" (GPT-J model)"),Sso=l(),Ng=a("li"),Qoe=a("strong"),Rso=o("hubert"),Bso=o(" \u2014 "),YR=a("a"),Pso=o("HubertModel"),Iso=o(" (Hubert model)"),qso=l(),jg=a("li"),Woe=a("strong"),Nso=o("ibert"),jso=o(" \u2014 "),KR=a("a"),Dso=o("IBertModel"),Gso=o(" (I-BERT model)"),Oso=l(),Dg=a("li"),Hoe=a("strong"),Vso=o("imagegpt"),Xso=o(" \u2014 "),ZR=a("a"),zso=o("ImageGPTModel"),Qso=o(" (ImageGPT model)"),Wso=l(),Gg=a("li"),Uoe=a("strong"),Hso=o("layoutlm"),Uso=o(" \u2014 "),eB=a("a"),Jso=o("LayoutLMModel"),Yso=o(" (LayoutLM model)"),Kso=l(),Og=a("li"),Joe=a("strong"),Zso=o("layoutlmv2"),elo=o(" \u2014 "),oB=a("a"),olo=o("LayoutLMv2Model"),rlo=o(" (LayoutLMv2 model)"),tlo=l(),Vg=a("li"),Yoe=a("strong"),alo=o("led"),nlo=o(" \u2014 "),rB=a("a"),slo=o("LEDModel"),llo=o(" (LED model)"),ilo=l(),Xg=a("li"),Koe=a("strong"),dlo=o("longformer"),clo=o(" \u2014 "),tB=a("a"),flo=o("LongformerModel"),mlo=o(" (Longformer model)"),hlo=l(),zg=a("li"),Zoe=a("strong"),glo=o("luke"),plo=o(" \u2014 "),aB=a("a"),ulo=o("LukeModel"),_lo=o(" (LUKE model)"),blo=l(),Qg=a("li"),ere=a("strong"),Flo=o("lxmert"),vlo=o(" \u2014 "),nB=a("a"),Tlo=o("LxmertModel"),Mlo=o(" (LXMERT model)"),Elo=l(),Wg=a("li"),ore=a("strong"),Clo=o("m2m_100"),wlo=o(" \u2014 "),sB=a("a"),Alo=o("M2M100Model"),ylo=o(" (M2M100 model)"),Llo=l(),Hg=a("li"),rre=a("strong"),xlo=o("marian"),$lo=o(" \u2014 "),lB=a("a"),klo=o("MarianModel"),Slo=o(" (Marian model)"),Rlo=l(),Ug=a("li"),tre=a("strong"),Blo=o("maskformer"),Plo=o(" \u2014 "),iB=a("a"),Ilo=o("MaskFormerModel"),qlo=o(" (MaskFormer model)"),Nlo=l(),Jg=a("li"),are=a("strong"),jlo=o("mbart"),Dlo=o(" \u2014 "),dB=a("a"),Glo=o("MBartModel"),Olo=o(" (mBART model)"),Vlo=l(),Yg=a("li"),nre=a("strong"),Xlo=o("megatron-bert"),zlo=o(" \u2014 "),cB=a("a"),Qlo=o("MegatronBertModel"),Wlo=o(" (MegatronBert model)"),Hlo=l(),Kg=a("li"),sre=a("strong"),Ulo=o("mobilebert"),Jlo=o(" \u2014 "),fB=a("a"),Ylo=o("MobileBertModel"),Klo=o(" (MobileBERT model)"),Zlo=l(),Zg=a("li"),lre=a("strong"),eio=o("mpnet"),oio=o(" \u2014 "),mB=a("a"),rio=o("MPNetModel"),tio=o(" (MPNet model)"),aio=l(),ep=a("li"),ire=a("strong"),nio=o("mt5"),sio=o(" \u2014 "),hB=a("a"),lio=o("MT5Model"),iio=o(" (mT5 model)"),dio=l(),op=a("li"),dre=a("strong"),cio=o("nystromformer"),fio=o(" \u2014 "),gB=a("a"),mio=o("NystromformerModel"),hio=o(" (Nystromformer model)"),gio=l(),rp=a("li"),cre=a("strong"),pio=o("openai-gpt"),uio=o(" \u2014 "),pB=a("a"),_io=o("OpenAIGPTModel"),bio=o(" (OpenAI GPT model)"),Fio=l(),tp=a("li"),fre=a("strong"),vio=o("pegasus"),Tio=o(" \u2014 "),uB=a("a"),Mio=o("PegasusModel"),Eio=o(" (Pegasus model)"),Cio=l(),ap=a("li"),mre=a("strong"),wio=o("perceiver"),Aio=o(" \u2014 "),_B=a("a"),yio=o("PerceiverModel"),Lio=o(" (Perceiver model)"),xio=l(),np=a("li"),hre=a("strong"),$io=o("plbart"),kio=o(" \u2014 "),gre=a("code"),Sio=o("PLBartModel"),Rio=o(" (PLBart model)"),Bio=l(),sp=a("li"),pre=a("strong"),Pio=o("poolformer"),Iio=o(" \u2014 "),bB=a("a"),qio=o("PoolFormerModel"),Nio=o(" (PoolFormer model)"),jio=l(),lp=a("li"),ure=a("strong"),Dio=o("prophetnet"),Gio=o(" \u2014 "),FB=a("a"),Oio=o("ProphetNetModel"),Vio=o(" (ProphetNet model)"),Xio=l(),ip=a("li"),_re=a("strong"),zio=o("qdqbert"),Qio=o(" \u2014 "),bre=a("code"),Wio=o("QDQBertModel"),Hio=o(" (QDQBert model)"),Uio=l(),dp=a("li"),Fre=a("strong"),Jio=o("reformer"),Yio=o(" \u2014 "),vB=a("a"),Kio=o("ReformerModel"),Zio=o(" (Reformer model)"),edo=l(),cp=a("li"),vre=a("strong"),odo=o("rembert"),rdo=o(" \u2014 "),TB=a("a"),tdo=o("RemBertModel"),ado=o(" (RemBERT model)"),ndo=l(),fp=a("li"),Tre=a("strong"),sdo=o("resnet"),ldo=o(" \u2014 "),MB=a("a"),ido=o("ResNetModel"),ddo=o(" (ResNet model)"),cdo=l(),mp=a("li"),Mre=a("strong"),fdo=o("retribert"),mdo=o(" \u2014 "),EB=a("a"),hdo=o("RetriBertModel"),gdo=o(" (RetriBERT model)"),pdo=l(),hp=a("li"),Ere=a("strong"),udo=o("roberta"),_do=o(" \u2014 "),CB=a("a"),bdo=o("RobertaModel"),Fdo=o(" (RoBERTa model)"),vdo=l(),gp=a("li"),Cre=a("strong"),Tdo=o("roformer"),Mdo=o(" \u2014 "),wB=a("a"),Edo=o("RoFormerModel"),Cdo=o(" (RoFormer model)"),wdo=l(),pp=a("li"),wre=a("strong"),Ado=o("segformer"),ydo=o(" \u2014 "),AB=a("a"),Ldo=o("SegformerModel"),xdo=o(" (SegFormer model)"),$do=l(),up=a("li"),Are=a("strong"),kdo=o("sew"),Sdo=o(" \u2014 "),yB=a("a"),Rdo=o("SEWModel"),Bdo=o(" (SEW model)"),Pdo=l(),_p=a("li"),yre=a("strong"),Ido=o("sew-d"),qdo=o(" \u2014 "),LB=a("a"),Ndo=o("SEWDModel"),jdo=o(" (SEW-D model)"),Ddo=l(),bp=a("li"),Lre=a("strong"),Gdo=o("speech_to_text"),Odo=o(" \u2014 "),xB=a("a"),Vdo=o("Speech2TextModel"),Xdo=o(" (Speech2Text model)"),zdo=l(),Fp=a("li"),xre=a("strong"),Qdo=o("splinter"),Wdo=o(" \u2014 "),$B=a("a"),Hdo=o("SplinterModel"),Udo=o(" (Splinter model)"),Jdo=l(),vp=a("li"),$re=a("strong"),Ydo=o("squeezebert"),Kdo=o(" \u2014 "),kB=a("a"),Zdo=o("SqueezeBertModel"),eco=o(" (SqueezeBERT model)"),oco=l(),Tp=a("li"),kre=a("strong"),rco=o("swin"),tco=o(" \u2014 "),SB=a("a"),aco=o("SwinModel"),nco=o(" (Swin model)"),sco=l(),Mp=a("li"),Sre=a("strong"),lco=o("t5"),ico=o(" \u2014 "),RB=a("a"),dco=o("T5Model"),cco=o(" (T5 model)"),fco=l(),Ep=a("li"),Rre=a("strong"),mco=o("tapas"),hco=o(" \u2014 "),BB=a("a"),gco=o("TapasModel"),pco=o(" (TAPAS model)"),uco=l(),Cp=a("li"),Bre=a("strong"),_co=o("transfo-xl"),bco=o(" \u2014 "),PB=a("a"),Fco=o("TransfoXLModel"),vco=o(" (Transformer-XL model)"),Tco=l(),wp=a("li"),Pre=a("strong"),Mco=o("unispeech"),Eco=o(" \u2014 "),IB=a("a"),Cco=o("UniSpeechModel"),wco=o(" (UniSpeech model)"),Aco=l(),Ap=a("li"),Ire=a("strong"),yco=o("unispeech-sat"),Lco=o(" \u2014 "),qB=a("a"),xco=o("UniSpeechSatModel"),$co=o(" (UniSpeechSat model)"),kco=l(),yp=a("li"),qre=a("strong"),Sco=o("van"),Rco=o(" \u2014 "),NB=a("a"),Bco=o("VanModel"),Pco=o(" (VAN model)"),Ico=l(),Lp=a("li"),Nre=a("strong"),qco=o("vilt"),Nco=o(" \u2014 "),jB=a("a"),jco=o("ViltModel"),Dco=o(" (ViLT model)"),Gco=l(),xp=a("li"),jre=a("strong"),Oco=o("vision-text-dual-encoder"),Vco=o(" \u2014 "),DB=a("a"),Xco=o("VisionTextDualEncoderModel"),zco=o(" (VisionTextDualEncoder model)"),Qco=l(),$p=a("li"),Dre=a("strong"),Wco=o("visual_bert"),Hco=o(" \u2014 "),GB=a("a"),Uco=o("VisualBertModel"),Jco=o(" (VisualBert model)"),Yco=l(),kp=a("li"),Gre=a("strong"),Kco=o("vit"),Zco=o(" \u2014 "),OB=a("a"),efo=o("ViTModel"),ofo=o(" (ViT model)"),rfo=l(),Sp=a("li"),Ore=a("strong"),tfo=o("vit_mae"),afo=o(" \u2014 "),VB=a("a"),nfo=o("ViTMAEModel"),sfo=o(" (ViTMAE model)"),lfo=l(),Rp=a("li"),Vre=a("strong"),ifo=o("wav2vec2"),dfo=o(" \u2014 "),XB=a("a"),cfo=o("Wav2Vec2Model"),ffo=o(" (Wav2Vec2 model)"),mfo=l(),Bp=a("li"),Xre=a("strong"),hfo=o("wavlm"),gfo=o(" \u2014 "),zB=a("a"),pfo=o("WavLMModel"),ufo=o(" (WavLM model)"),_fo=l(),Pp=a("li"),zre=a("strong"),bfo=o("xglm"),Ffo=o(" \u2014 "),QB=a("a"),vfo=o("XGLMModel"),Tfo=o(" (XGLM model)"),Mfo=l(),Ip=a("li"),Qre=a("strong"),Efo=o("xlm"),Cfo=o(" \u2014 "),WB=a("a"),wfo=o("XLMModel"),Afo=o(" (XLM model)"),yfo=l(),qp=a("li"),Wre=a("strong"),Lfo=o("xlm-prophetnet"),xfo=o(" \u2014 "),HB=a("a"),$fo=o("XLMProphetNetModel"),kfo=o(" (XLMProphetNet model)"),Sfo=l(),Np=a("li"),Hre=a("strong"),Rfo=o("xlm-roberta"),Bfo=o(" \u2014 "),UB=a("a"),Pfo=o("XLMRobertaModel"),Ifo=o(" (XLM-RoBERTa model)"),qfo=l(),jp=a("li"),Ure=a("strong"),Nfo=o("xlm-roberta-xl"),jfo=o(" \u2014 "),JB=a("a"),Dfo=o("XLMRobertaXLModel"),Gfo=o(" (XLM-RoBERTa-XL model)"),Ofo=l(),Dp=a("li"),Jre=a("strong"),Vfo=o("xlnet"),Xfo=o(" \u2014 "),YB=a("a"),zfo=o("XLNetModel"),Qfo=o(" (XLNet model)"),Wfo=l(),Gp=a("li"),Yre=a("strong"),Hfo=o("yoso"),Ufo=o(" \u2014 "),KB=a("a"),Jfo=o("YosoModel"),Yfo=o(" (YOSO model)"),Kfo=l(),Op=a("p"),Zfo=o("The model is set in evaluation mode by default using "),Kre=a("code"),emo=o("model.eval()"),omo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zre=a("code"),rmo=o("model.train()"),tmo=l(),v(Vp.$$.fragment),V9e=l(),di=a("h2"),Xp=a("a"),ete=a("span"),v(a6.$$.fragment),amo=l(),ote=a("span"),nmo=o("AutoModelForPreTraining"),X9e=l(),yo=a("div"),v(n6.$$.fragment),smo=l(),ci=a("p"),lmo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZB=a("a"),imo=o("from_pretrained()"),dmo=o(" class method or the "),eP=a("a"),cmo=o("from_config()"),fmo=o(` class
method.`),mmo=l(),s6=a("p"),hmo=o("This class cannot be instantiated directly using "),rte=a("code"),gmo=o("__init__()"),pmo=o(" (throws an error)."),umo=l(),Zr=a("div"),v(l6.$$.fragment),_mo=l(),tte=a("p"),bmo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fmo=l(),fi=a("p"),vmo=o(`Note:
Loading a model from its configuration file does `),ate=a("strong"),Tmo=o("not"),Mmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oP=a("a"),Emo=o("from_pretrained()"),Cmo=o(" to load the model weights."),wmo=l(),v(zp.$$.fragment),Amo=l(),Qe=a("div"),v(i6.$$.fragment),ymo=l(),nte=a("p"),Lmo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xmo=l(),Ea=a("p"),$mo=o("The model class to instantiate is selected based on the "),ste=a("code"),kmo=o("model_type"),Smo=o(` property of the config object (either
passed as an argument or loaded from `),lte=a("code"),Rmo=o("pretrained_model_name_or_path"),Bmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=a("code"),Pmo=o("pretrained_model_name_or_path"),Imo=o(":"),qmo=l(),G=a("ul"),Qp=a("li"),dte=a("strong"),Nmo=o("albert"),jmo=o(" \u2014 "),rP=a("a"),Dmo=o("AlbertForPreTraining"),Gmo=o(" (ALBERT model)"),Omo=l(),Wp=a("li"),cte=a("strong"),Vmo=o("bart"),Xmo=o(" \u2014 "),tP=a("a"),zmo=o("BartForConditionalGeneration"),Qmo=o(" (BART model)"),Wmo=l(),Hp=a("li"),fte=a("strong"),Hmo=o("bert"),Umo=o(" \u2014 "),aP=a("a"),Jmo=o("BertForPreTraining"),Ymo=o(" (BERT model)"),Kmo=l(),Up=a("li"),mte=a("strong"),Zmo=o("big_bird"),eho=o(" \u2014 "),nP=a("a"),oho=o("BigBirdForPreTraining"),rho=o(" (BigBird model)"),tho=l(),Jp=a("li"),hte=a("strong"),aho=o("camembert"),nho=o(" \u2014 "),sP=a("a"),sho=o("CamembertForMaskedLM"),lho=o(" (CamemBERT model)"),iho=l(),Yp=a("li"),gte=a("strong"),dho=o("ctrl"),cho=o(" \u2014 "),lP=a("a"),fho=o("CTRLLMHeadModel"),mho=o(" (CTRL model)"),hho=l(),Kp=a("li"),pte=a("strong"),gho=o("data2vec-text"),pho=o(" \u2014 "),iP=a("a"),uho=o("Data2VecTextForMaskedLM"),_ho=o(" (Data2VecText model)"),bho=l(),Zp=a("li"),ute=a("strong"),Fho=o("deberta"),vho=o(" \u2014 "),dP=a("a"),Tho=o("DebertaForMaskedLM"),Mho=o(" (DeBERTa model)"),Eho=l(),eu=a("li"),_te=a("strong"),Cho=o("deberta-v2"),who=o(" \u2014 "),cP=a("a"),Aho=o("DebertaV2ForMaskedLM"),yho=o(" (DeBERTa-v2 model)"),Lho=l(),ou=a("li"),bte=a("strong"),xho=o("distilbert"),$ho=o(" \u2014 "),fP=a("a"),kho=o("DistilBertForMaskedLM"),Sho=o(" (DistilBERT model)"),Rho=l(),ru=a("li"),Fte=a("strong"),Bho=o("electra"),Pho=o(" \u2014 "),mP=a("a"),Iho=o("ElectraForPreTraining"),qho=o(" (ELECTRA model)"),Nho=l(),tu=a("li"),vte=a("strong"),jho=o("flaubert"),Dho=o(" \u2014 "),hP=a("a"),Gho=o("FlaubertWithLMHeadModel"),Oho=o(" (FlauBERT model)"),Vho=l(),au=a("li"),Tte=a("strong"),Xho=o("fnet"),zho=o(" \u2014 "),gP=a("a"),Qho=o("FNetForPreTraining"),Who=o(" (FNet model)"),Hho=l(),nu=a("li"),Mte=a("strong"),Uho=o("fsmt"),Jho=o(" \u2014 "),pP=a("a"),Yho=o("FSMTForConditionalGeneration"),Kho=o(" (FairSeq Machine-Translation model)"),Zho=l(),su=a("li"),Ete=a("strong"),ego=o("funnel"),ogo=o(" \u2014 "),uP=a("a"),rgo=o("FunnelForPreTraining"),tgo=o(" (Funnel Transformer model)"),ago=l(),lu=a("li"),Cte=a("strong"),ngo=o("gpt2"),sgo=o(" \u2014 "),_P=a("a"),lgo=o("GPT2LMHeadModel"),igo=o(" (OpenAI GPT-2 model)"),dgo=l(),iu=a("li"),wte=a("strong"),cgo=o("ibert"),fgo=o(" \u2014 "),bP=a("a"),mgo=o("IBertForMaskedLM"),hgo=o(" (I-BERT model)"),ggo=l(),du=a("li"),Ate=a("strong"),pgo=o("layoutlm"),ugo=o(" \u2014 "),FP=a("a"),_go=o("LayoutLMForMaskedLM"),bgo=o(" (LayoutLM model)"),Fgo=l(),cu=a("li"),yte=a("strong"),vgo=o("longformer"),Tgo=o(" \u2014 "),vP=a("a"),Mgo=o("LongformerForMaskedLM"),Ego=o(" (Longformer model)"),Cgo=l(),fu=a("li"),Lte=a("strong"),wgo=o("lxmert"),Ago=o(" \u2014 "),TP=a("a"),ygo=o("LxmertForPreTraining"),Lgo=o(" (LXMERT model)"),xgo=l(),mu=a("li"),xte=a("strong"),$go=o("megatron-bert"),kgo=o(" \u2014 "),MP=a("a"),Sgo=o("MegatronBertForPreTraining"),Rgo=o(" (MegatronBert model)"),Bgo=l(),hu=a("li"),$te=a("strong"),Pgo=o("mobilebert"),Igo=o(" \u2014 "),EP=a("a"),qgo=o("MobileBertForPreTraining"),Ngo=o(" (MobileBERT model)"),jgo=l(),gu=a("li"),kte=a("strong"),Dgo=o("mpnet"),Ggo=o(" \u2014 "),CP=a("a"),Ogo=o("MPNetForMaskedLM"),Vgo=o(" (MPNet model)"),Xgo=l(),pu=a("li"),Ste=a("strong"),zgo=o("openai-gpt"),Qgo=o(" \u2014 "),wP=a("a"),Wgo=o("OpenAIGPTLMHeadModel"),Hgo=o(" (OpenAI GPT model)"),Ugo=l(),uu=a("li"),Rte=a("strong"),Jgo=o("retribert"),Ygo=o(" \u2014 "),AP=a("a"),Kgo=o("RetriBertModel"),Zgo=o(" (RetriBERT model)"),epo=l(),_u=a("li"),Bte=a("strong"),opo=o("roberta"),rpo=o(" \u2014 "),yP=a("a"),tpo=o("RobertaForMaskedLM"),apo=o(" (RoBERTa model)"),npo=l(),bu=a("li"),Pte=a("strong"),spo=o("squeezebert"),lpo=o(" \u2014 "),LP=a("a"),ipo=o("SqueezeBertForMaskedLM"),dpo=o(" (SqueezeBERT model)"),cpo=l(),Fu=a("li"),Ite=a("strong"),fpo=o("t5"),mpo=o(" \u2014 "),xP=a("a"),hpo=o("T5ForConditionalGeneration"),gpo=o(" (T5 model)"),ppo=l(),vu=a("li"),qte=a("strong"),upo=o("tapas"),_po=o(" \u2014 "),$P=a("a"),bpo=o("TapasForMaskedLM"),Fpo=o(" (TAPAS model)"),vpo=l(),Tu=a("li"),Nte=a("strong"),Tpo=o("transfo-xl"),Mpo=o(" \u2014 "),kP=a("a"),Epo=o("TransfoXLLMHeadModel"),Cpo=o(" (Transformer-XL model)"),wpo=l(),Mu=a("li"),jte=a("strong"),Apo=o("unispeech"),ypo=o(" \u2014 "),SP=a("a"),Lpo=o("UniSpeechForPreTraining"),xpo=o(" (UniSpeech model)"),$po=l(),Eu=a("li"),Dte=a("strong"),kpo=o("unispeech-sat"),Spo=o(" \u2014 "),RP=a("a"),Rpo=o("UniSpeechSatForPreTraining"),Bpo=o(" (UniSpeechSat model)"),Ppo=l(),Cu=a("li"),Gte=a("strong"),Ipo=o("visual_bert"),qpo=o(" \u2014 "),BP=a("a"),Npo=o("VisualBertForPreTraining"),jpo=o(" (VisualBert model)"),Dpo=l(),wu=a("li"),Ote=a("strong"),Gpo=o("vit_mae"),Opo=o(" \u2014 "),PP=a("a"),Vpo=o("ViTMAEForPreTraining"),Xpo=o(" (ViTMAE model)"),zpo=l(),Au=a("li"),Vte=a("strong"),Qpo=o("wav2vec2"),Wpo=o(" \u2014 "),IP=a("a"),Hpo=o("Wav2Vec2ForPreTraining"),Upo=o(" (Wav2Vec2 model)"),Jpo=l(),yu=a("li"),Xte=a("strong"),Ypo=o("xlm"),Kpo=o(" \u2014 "),qP=a("a"),Zpo=o("XLMWithLMHeadModel"),euo=o(" (XLM model)"),ouo=l(),Lu=a("li"),zte=a("strong"),ruo=o("xlm-roberta"),tuo=o(" \u2014 "),NP=a("a"),auo=o("XLMRobertaForMaskedLM"),nuo=o(" (XLM-RoBERTa model)"),suo=l(),xu=a("li"),Qte=a("strong"),luo=o("xlm-roberta-xl"),iuo=o(" \u2014 "),jP=a("a"),duo=o("XLMRobertaXLForMaskedLM"),cuo=o(" (XLM-RoBERTa-XL model)"),fuo=l(),$u=a("li"),Wte=a("strong"),muo=o("xlnet"),huo=o(" \u2014 "),DP=a("a"),guo=o("XLNetLMHeadModel"),puo=o(" (XLNet model)"),uuo=l(),ku=a("p"),_uo=o("The model is set in evaluation mode by default using "),Hte=a("code"),buo=o("model.eval()"),Fuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=a("code"),vuo=o("model.train()"),Tuo=l(),v(Su.$$.fragment),z9e=l(),mi=a("h2"),Ru=a("a"),Jte=a("span"),v(d6.$$.fragment),Muo=l(),Yte=a("span"),Euo=o("AutoModelForCausalLM"),Q9e=l(),Lo=a("div"),v(c6.$$.fragment),Cuo=l(),hi=a("p"),wuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GP=a("a"),Auo=o("from_pretrained()"),yuo=o(" class method or the "),OP=a("a"),Luo=o("from_config()"),xuo=o(` class
method.`),$uo=l(),f6=a("p"),kuo=o("This class cannot be instantiated directly using "),Kte=a("code"),Suo=o("__init__()"),Ruo=o(" (throws an error)."),Buo=l(),et=a("div"),v(m6.$$.fragment),Puo=l(),Zte=a("p"),Iuo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),quo=l(),gi=a("p"),Nuo=o(`Note:
Loading a model from its configuration file does `),eae=a("strong"),juo=o("not"),Duo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VP=a("a"),Guo=o("from_pretrained()"),Ouo=o(" to load the model weights."),Vuo=l(),v(Bu.$$.fragment),Xuo=l(),We=a("div"),v(h6.$$.fragment),zuo=l(),oae=a("p"),Quo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wuo=l(),Ca=a("p"),Huo=o("The model class to instantiate is selected based on the "),rae=a("code"),Uuo=o("model_type"),Juo=o(` property of the config object (either
passed as an argument or loaded from `),tae=a("code"),Yuo=o("pretrained_model_name_or_path"),Kuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aae=a("code"),Zuo=o("pretrained_model_name_or_path"),e_o=o(":"),o_o=l(),z=a("ul"),Pu=a("li"),nae=a("strong"),r_o=o("bart"),t_o=o(" \u2014 "),XP=a("a"),a_o=o("BartForCausalLM"),n_o=o(" (BART model)"),s_o=l(),Iu=a("li"),sae=a("strong"),l_o=o("bert"),i_o=o(" \u2014 "),zP=a("a"),d_o=o("BertLMHeadModel"),c_o=o(" (BERT model)"),f_o=l(),qu=a("li"),lae=a("strong"),m_o=o("bert-generation"),h_o=o(" \u2014 "),QP=a("a"),g_o=o("BertGenerationDecoder"),p_o=o(" (Bert Generation model)"),u_o=l(),Nu=a("li"),iae=a("strong"),__o=o("big_bird"),b_o=o(" \u2014 "),WP=a("a"),F_o=o("BigBirdForCausalLM"),v_o=o(" (BigBird model)"),T_o=l(),ju=a("li"),dae=a("strong"),M_o=o("bigbird_pegasus"),E_o=o(" \u2014 "),HP=a("a"),C_o=o("BigBirdPegasusForCausalLM"),w_o=o(" (BigBirdPegasus model)"),A_o=l(),Du=a("li"),cae=a("strong"),y_o=o("blenderbot"),L_o=o(" \u2014 "),UP=a("a"),x_o=o("BlenderbotForCausalLM"),$_o=o(" (Blenderbot model)"),k_o=l(),Gu=a("li"),fae=a("strong"),S_o=o("blenderbot-small"),R_o=o(" \u2014 "),JP=a("a"),B_o=o("BlenderbotSmallForCausalLM"),P_o=o(" (BlenderbotSmall model)"),I_o=l(),Ou=a("li"),mae=a("strong"),q_o=o("camembert"),N_o=o(" \u2014 "),YP=a("a"),j_o=o("CamembertForCausalLM"),D_o=o(" (CamemBERT model)"),G_o=l(),Vu=a("li"),hae=a("strong"),O_o=o("ctrl"),V_o=o(" \u2014 "),KP=a("a"),X_o=o("CTRLLMHeadModel"),z_o=o(" (CTRL model)"),Q_o=l(),Xu=a("li"),gae=a("strong"),W_o=o("data2vec-text"),H_o=o(" \u2014 "),ZP=a("a"),U_o=o("Data2VecTextForCausalLM"),J_o=o(" (Data2VecText model)"),Y_o=l(),zu=a("li"),pae=a("strong"),K_o=o("electra"),Z_o=o(" \u2014 "),eI=a("a"),ebo=o("ElectraForCausalLM"),obo=o(" (ELECTRA model)"),rbo=l(),Qu=a("li"),uae=a("strong"),tbo=o("gpt2"),abo=o(" \u2014 "),oI=a("a"),nbo=o("GPT2LMHeadModel"),sbo=o(" (OpenAI GPT-2 model)"),lbo=l(),Wu=a("li"),_ae=a("strong"),ibo=o("gpt_neo"),dbo=o(" \u2014 "),rI=a("a"),cbo=o("GPTNeoForCausalLM"),fbo=o(" (GPT Neo model)"),mbo=l(),Hu=a("li"),bae=a("strong"),hbo=o("gptj"),gbo=o(" \u2014 "),tI=a("a"),pbo=o("GPTJForCausalLM"),ubo=o(" (GPT-J model)"),_bo=l(),Uu=a("li"),Fae=a("strong"),bbo=o("marian"),Fbo=o(" \u2014 "),aI=a("a"),vbo=o("MarianForCausalLM"),Tbo=o(" (Marian model)"),Mbo=l(),Ju=a("li"),vae=a("strong"),Ebo=o("mbart"),Cbo=o(" \u2014 "),nI=a("a"),wbo=o("MBartForCausalLM"),Abo=o(" (mBART model)"),ybo=l(),Yu=a("li"),Tae=a("strong"),Lbo=o("megatron-bert"),xbo=o(" \u2014 "),sI=a("a"),$bo=o("MegatronBertForCausalLM"),kbo=o(" (MegatronBert model)"),Sbo=l(),Ku=a("li"),Mae=a("strong"),Rbo=o("openai-gpt"),Bbo=o(" \u2014 "),lI=a("a"),Pbo=o("OpenAIGPTLMHeadModel"),Ibo=o(" (OpenAI GPT model)"),qbo=l(),Zu=a("li"),Eae=a("strong"),Nbo=o("pegasus"),jbo=o(" \u2014 "),iI=a("a"),Dbo=o("PegasusForCausalLM"),Gbo=o(" (Pegasus model)"),Obo=l(),e_=a("li"),Cae=a("strong"),Vbo=o("plbart"),Xbo=o(" \u2014 "),wae=a("code"),zbo=o("PLBartForCausalLM"),Qbo=o(" (PLBart model)"),Wbo=l(),o_=a("li"),Aae=a("strong"),Hbo=o("prophetnet"),Ubo=o(" \u2014 "),dI=a("a"),Jbo=o("ProphetNetForCausalLM"),Ybo=o(" (ProphetNet model)"),Kbo=l(),r_=a("li"),yae=a("strong"),Zbo=o("qdqbert"),e2o=o(" \u2014 "),Lae=a("code"),o2o=o("QDQBertLMHeadModel"),r2o=o(" (QDQBert model)"),t2o=l(),t_=a("li"),xae=a("strong"),a2o=o("reformer"),n2o=o(" \u2014 "),cI=a("a"),s2o=o("ReformerModelWithLMHead"),l2o=o(" (Reformer model)"),i2o=l(),a_=a("li"),$ae=a("strong"),d2o=o("rembert"),c2o=o(" \u2014 "),fI=a("a"),f2o=o("RemBertForCausalLM"),m2o=o(" (RemBERT model)"),h2o=l(),n_=a("li"),kae=a("strong"),g2o=o("roberta"),p2o=o(" \u2014 "),mI=a("a"),u2o=o("RobertaForCausalLM"),_2o=o(" (RoBERTa model)"),b2o=l(),s_=a("li"),Sae=a("strong"),F2o=o("roformer"),v2o=o(" \u2014 "),hI=a("a"),T2o=o("RoFormerForCausalLM"),M2o=o(" (RoFormer model)"),E2o=l(),l_=a("li"),Rae=a("strong"),C2o=o("speech_to_text_2"),w2o=o(" \u2014 "),gI=a("a"),A2o=o("Speech2Text2ForCausalLM"),y2o=o(" (Speech2Text2 model)"),L2o=l(),i_=a("li"),Bae=a("strong"),x2o=o("transfo-xl"),$2o=o(" \u2014 "),pI=a("a"),k2o=o("TransfoXLLMHeadModel"),S2o=o(" (Transformer-XL model)"),R2o=l(),d_=a("li"),Pae=a("strong"),B2o=o("trocr"),P2o=o(" \u2014 "),uI=a("a"),I2o=o("TrOCRForCausalLM"),q2o=o(" (TrOCR model)"),N2o=l(),c_=a("li"),Iae=a("strong"),j2o=o("xglm"),D2o=o(" \u2014 "),_I=a("a"),G2o=o("XGLMForCausalLM"),O2o=o(" (XGLM model)"),V2o=l(),f_=a("li"),qae=a("strong"),X2o=o("xlm"),z2o=o(" \u2014 "),bI=a("a"),Q2o=o("XLMWithLMHeadModel"),W2o=o(" (XLM model)"),H2o=l(),m_=a("li"),Nae=a("strong"),U2o=o("xlm-prophetnet"),J2o=o(" \u2014 "),FI=a("a"),Y2o=o("XLMProphetNetForCausalLM"),K2o=o(" (XLMProphetNet model)"),Z2o=l(),h_=a("li"),jae=a("strong"),eFo=o("xlm-roberta"),oFo=o(" \u2014 "),vI=a("a"),rFo=o("XLMRobertaForCausalLM"),tFo=o(" (XLM-RoBERTa model)"),aFo=l(),g_=a("li"),Dae=a("strong"),nFo=o("xlm-roberta-xl"),sFo=o(" \u2014 "),TI=a("a"),lFo=o("XLMRobertaXLForCausalLM"),iFo=o(" (XLM-RoBERTa-XL model)"),dFo=l(),p_=a("li"),Gae=a("strong"),cFo=o("xlnet"),fFo=o(" \u2014 "),MI=a("a"),mFo=o("XLNetLMHeadModel"),hFo=o(" (XLNet model)"),gFo=l(),u_=a("p"),pFo=o("The model is set in evaluation mode by default using "),Oae=a("code"),uFo=o("model.eval()"),_Fo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vae=a("code"),bFo=o("model.train()"),FFo=l(),v(__.$$.fragment),W9e=l(),pi=a("h2"),b_=a("a"),Xae=a("span"),v(g6.$$.fragment),vFo=l(),zae=a("span"),TFo=o("AutoModelForMaskedLM"),H9e=l(),xo=a("div"),v(p6.$$.fragment),MFo=l(),ui=a("p"),EFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EI=a("a"),CFo=o("from_pretrained()"),wFo=o(" class method or the "),CI=a("a"),AFo=o("from_config()"),yFo=o(` class
method.`),LFo=l(),u6=a("p"),xFo=o("This class cannot be instantiated directly using "),Qae=a("code"),$Fo=o("__init__()"),kFo=o(" (throws an error)."),SFo=l(),ot=a("div"),v(_6.$$.fragment),RFo=l(),Wae=a("p"),BFo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PFo=l(),_i=a("p"),IFo=o(`Note:
Loading a model from its configuration file does `),Hae=a("strong"),qFo=o("not"),NFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=a("a"),jFo=o("from_pretrained()"),DFo=o(" to load the model weights."),GFo=l(),v(F_.$$.fragment),OFo=l(),He=a("div"),v(b6.$$.fragment),VFo=l(),Uae=a("p"),XFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zFo=l(),wa=a("p"),QFo=o("The model class to instantiate is selected based on the "),Jae=a("code"),WFo=o("model_type"),HFo=o(` property of the config object (either
passed as an argument or loaded from `),Yae=a("code"),UFo=o("pretrained_model_name_or_path"),JFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kae=a("code"),YFo=o("pretrained_model_name_or_path"),KFo=o(":"),ZFo=l(),Q=a("ul"),v_=a("li"),Zae=a("strong"),evo=o("albert"),ovo=o(" \u2014 "),AI=a("a"),rvo=o("AlbertForMaskedLM"),tvo=o(" (ALBERT model)"),avo=l(),T_=a("li"),ene=a("strong"),nvo=o("bart"),svo=o(" \u2014 "),yI=a("a"),lvo=o("BartForConditionalGeneration"),ivo=o(" (BART model)"),dvo=l(),M_=a("li"),one=a("strong"),cvo=o("bert"),fvo=o(" \u2014 "),LI=a("a"),mvo=o("BertForMaskedLM"),hvo=o(" (BERT model)"),gvo=l(),E_=a("li"),rne=a("strong"),pvo=o("big_bird"),uvo=o(" \u2014 "),xI=a("a"),_vo=o("BigBirdForMaskedLM"),bvo=o(" (BigBird model)"),Fvo=l(),C_=a("li"),tne=a("strong"),vvo=o("camembert"),Tvo=o(" \u2014 "),$I=a("a"),Mvo=o("CamembertForMaskedLM"),Evo=o(" (CamemBERT model)"),Cvo=l(),w_=a("li"),ane=a("strong"),wvo=o("convbert"),Avo=o(" \u2014 "),kI=a("a"),yvo=o("ConvBertForMaskedLM"),Lvo=o(" (ConvBERT model)"),xvo=l(),A_=a("li"),nne=a("strong"),$vo=o("data2vec-text"),kvo=o(" \u2014 "),SI=a("a"),Svo=o("Data2VecTextForMaskedLM"),Rvo=o(" (Data2VecText model)"),Bvo=l(),y_=a("li"),sne=a("strong"),Pvo=o("deberta"),Ivo=o(" \u2014 "),RI=a("a"),qvo=o("DebertaForMaskedLM"),Nvo=o(" (DeBERTa model)"),jvo=l(),L_=a("li"),lne=a("strong"),Dvo=o("deberta-v2"),Gvo=o(" \u2014 "),BI=a("a"),Ovo=o("DebertaV2ForMaskedLM"),Vvo=o(" (DeBERTa-v2 model)"),Xvo=l(),x_=a("li"),ine=a("strong"),zvo=o("distilbert"),Qvo=o(" \u2014 "),PI=a("a"),Wvo=o("DistilBertForMaskedLM"),Hvo=o(" (DistilBERT model)"),Uvo=l(),$_=a("li"),dne=a("strong"),Jvo=o("electra"),Yvo=o(" \u2014 "),II=a("a"),Kvo=o("ElectraForMaskedLM"),Zvo=o(" (ELECTRA model)"),e1o=l(),k_=a("li"),cne=a("strong"),o1o=o("flaubert"),r1o=o(" \u2014 "),qI=a("a"),t1o=o("FlaubertWithLMHeadModel"),a1o=o(" (FlauBERT model)"),n1o=l(),S_=a("li"),fne=a("strong"),s1o=o("fnet"),l1o=o(" \u2014 "),NI=a("a"),i1o=o("FNetForMaskedLM"),d1o=o(" (FNet model)"),c1o=l(),R_=a("li"),mne=a("strong"),f1o=o("funnel"),m1o=o(" \u2014 "),jI=a("a"),h1o=o("FunnelForMaskedLM"),g1o=o(" (Funnel Transformer model)"),p1o=l(),B_=a("li"),hne=a("strong"),u1o=o("ibert"),_1o=o(" \u2014 "),DI=a("a"),b1o=o("IBertForMaskedLM"),F1o=o(" (I-BERT model)"),v1o=l(),P_=a("li"),gne=a("strong"),T1o=o("layoutlm"),M1o=o(" \u2014 "),GI=a("a"),E1o=o("LayoutLMForMaskedLM"),C1o=o(" (LayoutLM model)"),w1o=l(),I_=a("li"),pne=a("strong"),A1o=o("longformer"),y1o=o(" \u2014 "),OI=a("a"),L1o=o("LongformerForMaskedLM"),x1o=o(" (Longformer model)"),$1o=l(),q_=a("li"),une=a("strong"),k1o=o("mbart"),S1o=o(" \u2014 "),VI=a("a"),R1o=o("MBartForConditionalGeneration"),B1o=o(" (mBART model)"),P1o=l(),N_=a("li"),_ne=a("strong"),I1o=o("megatron-bert"),q1o=o(" \u2014 "),XI=a("a"),N1o=o("MegatronBertForMaskedLM"),j1o=o(" (MegatronBert model)"),D1o=l(),j_=a("li"),bne=a("strong"),G1o=o("mobilebert"),O1o=o(" \u2014 "),zI=a("a"),V1o=o("MobileBertForMaskedLM"),X1o=o(" (MobileBERT model)"),z1o=l(),D_=a("li"),Fne=a("strong"),Q1o=o("mpnet"),W1o=o(" \u2014 "),QI=a("a"),H1o=o("MPNetForMaskedLM"),U1o=o(" (MPNet model)"),J1o=l(),G_=a("li"),vne=a("strong"),Y1o=o("nystromformer"),K1o=o(" \u2014 "),WI=a("a"),Z1o=o("NystromformerForMaskedLM"),eTo=o(" (Nystromformer model)"),oTo=l(),O_=a("li"),Tne=a("strong"),rTo=o("perceiver"),tTo=o(" \u2014 "),HI=a("a"),aTo=o("PerceiverForMaskedLM"),nTo=o(" (Perceiver model)"),sTo=l(),V_=a("li"),Mne=a("strong"),lTo=o("qdqbert"),iTo=o(" \u2014 "),Ene=a("code"),dTo=o("QDQBertForMaskedLM"),cTo=o(" (QDQBert model)"),fTo=l(),X_=a("li"),Cne=a("strong"),mTo=o("reformer"),hTo=o(" \u2014 "),UI=a("a"),gTo=o("ReformerForMaskedLM"),pTo=o(" (Reformer model)"),uTo=l(),z_=a("li"),wne=a("strong"),_To=o("rembert"),bTo=o(" \u2014 "),JI=a("a"),FTo=o("RemBertForMaskedLM"),vTo=o(" (RemBERT model)"),TTo=l(),Q_=a("li"),Ane=a("strong"),MTo=o("roberta"),ETo=o(" \u2014 "),YI=a("a"),CTo=o("RobertaForMaskedLM"),wTo=o(" (RoBERTa model)"),ATo=l(),W_=a("li"),yne=a("strong"),yTo=o("roformer"),LTo=o(" \u2014 "),KI=a("a"),xTo=o("RoFormerForMaskedLM"),$To=o(" (RoFormer model)"),kTo=l(),H_=a("li"),Lne=a("strong"),STo=o("squeezebert"),RTo=o(" \u2014 "),ZI=a("a"),BTo=o("SqueezeBertForMaskedLM"),PTo=o(" (SqueezeBERT model)"),ITo=l(),U_=a("li"),xne=a("strong"),qTo=o("tapas"),NTo=o(" \u2014 "),eq=a("a"),jTo=o("TapasForMaskedLM"),DTo=o(" (TAPAS model)"),GTo=l(),J_=a("li"),$ne=a("strong"),OTo=o("wav2vec2"),VTo=o(" \u2014 "),kne=a("code"),XTo=o("Wav2Vec2ForMaskedLM"),zTo=o(" (Wav2Vec2 model)"),QTo=l(),Y_=a("li"),Sne=a("strong"),WTo=o("xlm"),HTo=o(" \u2014 "),oq=a("a"),UTo=o("XLMWithLMHeadModel"),JTo=o(" (XLM model)"),YTo=l(),K_=a("li"),Rne=a("strong"),KTo=o("xlm-roberta"),ZTo=o(" \u2014 "),rq=a("a"),eMo=o("XLMRobertaForMaskedLM"),oMo=o(" (XLM-RoBERTa model)"),rMo=l(),Z_=a("li"),Bne=a("strong"),tMo=o("xlm-roberta-xl"),aMo=o(" \u2014 "),tq=a("a"),nMo=o("XLMRobertaXLForMaskedLM"),sMo=o(" (XLM-RoBERTa-XL model)"),lMo=l(),eb=a("li"),Pne=a("strong"),iMo=o("yoso"),dMo=o(" \u2014 "),aq=a("a"),cMo=o("YosoForMaskedLM"),fMo=o(" (YOSO model)"),mMo=l(),ob=a("p"),hMo=o("The model is set in evaluation mode by default using "),Ine=a("code"),gMo=o("model.eval()"),pMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qne=a("code"),uMo=o("model.train()"),_Mo=l(),v(rb.$$.fragment),U9e=l(),bi=a("h2"),tb=a("a"),Nne=a("span"),v(F6.$$.fragment),bMo=l(),jne=a("span"),FMo=o("AutoModelForSeq2SeqLM"),J9e=l(),$o=a("div"),v(v6.$$.fragment),vMo=l(),Fi=a("p"),TMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nq=a("a"),MMo=o("from_pretrained()"),EMo=o(" class method or the "),sq=a("a"),CMo=o("from_config()"),wMo=o(` class
method.`),AMo=l(),T6=a("p"),yMo=o("This class cannot be instantiated directly using "),Dne=a("code"),LMo=o("__init__()"),xMo=o(" (throws an error)."),$Mo=l(),rt=a("div"),v(M6.$$.fragment),kMo=l(),Gne=a("p"),SMo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RMo=l(),vi=a("p"),BMo=o(`Note:
Loading a model from its configuration file does `),One=a("strong"),PMo=o("not"),IMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lq=a("a"),qMo=o("from_pretrained()"),NMo=o(" to load the model weights."),jMo=l(),v(ab.$$.fragment),DMo=l(),Ue=a("div"),v(E6.$$.fragment),GMo=l(),Vne=a("p"),OMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VMo=l(),Aa=a("p"),XMo=o("The model class to instantiate is selected based on the "),Xne=a("code"),zMo=o("model_type"),QMo=o(` property of the config object (either
passed as an argument or loaded from `),zne=a("code"),WMo=o("pretrained_model_name_or_path"),HMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=a("code"),UMo=o("pretrained_model_name_or_path"),JMo=o(":"),YMo=l(),pe=a("ul"),nb=a("li"),Wne=a("strong"),KMo=o("bart"),ZMo=o(" \u2014 "),iq=a("a"),e4o=o("BartForConditionalGeneration"),o4o=o(" (BART model)"),r4o=l(),sb=a("li"),Hne=a("strong"),t4o=o("bigbird_pegasus"),a4o=o(" \u2014 "),dq=a("a"),n4o=o("BigBirdPegasusForConditionalGeneration"),s4o=o(" (BigBirdPegasus model)"),l4o=l(),lb=a("li"),Une=a("strong"),i4o=o("blenderbot"),d4o=o(" \u2014 "),cq=a("a"),c4o=o("BlenderbotForConditionalGeneration"),f4o=o(" (Blenderbot model)"),m4o=l(),ib=a("li"),Jne=a("strong"),h4o=o("blenderbot-small"),g4o=o(" \u2014 "),fq=a("a"),p4o=o("BlenderbotSmallForConditionalGeneration"),u4o=o(" (BlenderbotSmall model)"),_4o=l(),db=a("li"),Yne=a("strong"),b4o=o("encoder-decoder"),F4o=o(" \u2014 "),mq=a("a"),v4o=o("EncoderDecoderModel"),T4o=o(" (Encoder decoder model)"),M4o=l(),cb=a("li"),Kne=a("strong"),E4o=o("fsmt"),C4o=o(" \u2014 "),hq=a("a"),w4o=o("FSMTForConditionalGeneration"),A4o=o(" (FairSeq Machine-Translation model)"),y4o=l(),fb=a("li"),Zne=a("strong"),L4o=o("led"),x4o=o(" \u2014 "),gq=a("a"),$4o=o("LEDForConditionalGeneration"),k4o=o(" (LED model)"),S4o=l(),mb=a("li"),ese=a("strong"),R4o=o("m2m_100"),B4o=o(" \u2014 "),pq=a("a"),P4o=o("M2M100ForConditionalGeneration"),I4o=o(" (M2M100 model)"),q4o=l(),hb=a("li"),ose=a("strong"),N4o=o("marian"),j4o=o(" \u2014 "),uq=a("a"),D4o=o("MarianMTModel"),G4o=o(" (Marian model)"),O4o=l(),gb=a("li"),rse=a("strong"),V4o=o("mbart"),X4o=o(" \u2014 "),_q=a("a"),z4o=o("MBartForConditionalGeneration"),Q4o=o(" (mBART model)"),W4o=l(),pb=a("li"),tse=a("strong"),H4o=o("mt5"),U4o=o(" \u2014 "),bq=a("a"),J4o=o("MT5ForConditionalGeneration"),Y4o=o(" (mT5 model)"),K4o=l(),ub=a("li"),ase=a("strong"),Z4o=o("pegasus"),eEo=o(" \u2014 "),Fq=a("a"),oEo=o("PegasusForConditionalGeneration"),rEo=o(" (Pegasus model)"),tEo=l(),_b=a("li"),nse=a("strong"),aEo=o("plbart"),nEo=o(" \u2014 "),sse=a("code"),sEo=o("PLBartForConditionalGeneration"),lEo=o(" (PLBart model)"),iEo=l(),bb=a("li"),lse=a("strong"),dEo=o("prophetnet"),cEo=o(" \u2014 "),vq=a("a"),fEo=o("ProphetNetForConditionalGeneration"),mEo=o(" (ProphetNet model)"),hEo=l(),Fb=a("li"),ise=a("strong"),gEo=o("t5"),pEo=o(" \u2014 "),Tq=a("a"),uEo=o("T5ForConditionalGeneration"),_Eo=o(" (T5 model)"),bEo=l(),vb=a("li"),dse=a("strong"),FEo=o("xlm-prophetnet"),vEo=o(" \u2014 "),Mq=a("a"),TEo=o("XLMProphetNetForConditionalGeneration"),MEo=o(" (XLMProphetNet model)"),EEo=l(),Tb=a("p"),CEo=o("The model is set in evaluation mode by default using "),cse=a("code"),wEo=o("model.eval()"),AEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fse=a("code"),yEo=o("model.train()"),LEo=l(),v(Mb.$$.fragment),Y9e=l(),Ti=a("h2"),Eb=a("a"),mse=a("span"),v(C6.$$.fragment),xEo=l(),hse=a("span"),$Eo=o("AutoModelForSequenceClassification"),K9e=l(),ko=a("div"),v(w6.$$.fragment),kEo=l(),Mi=a("p"),SEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eq=a("a"),REo=o("from_pretrained()"),BEo=o(" class method or the "),Cq=a("a"),PEo=o("from_config()"),IEo=o(` class
method.`),qEo=l(),A6=a("p"),NEo=o("This class cannot be instantiated directly using "),gse=a("code"),jEo=o("__init__()"),DEo=o(" (throws an error)."),GEo=l(),tt=a("div"),v(y6.$$.fragment),OEo=l(),pse=a("p"),VEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XEo=l(),Ei=a("p"),zEo=o(`Note:
Loading a model from its configuration file does `),use=a("strong"),QEo=o("not"),WEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wq=a("a"),HEo=o("from_pretrained()"),UEo=o(" to load the model weights."),JEo=l(),v(Cb.$$.fragment),YEo=l(),Je=a("div"),v(L6.$$.fragment),KEo=l(),_se=a("p"),ZEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e5o=l(),ya=a("p"),o5o=o("The model class to instantiate is selected based on the "),bse=a("code"),r5o=o("model_type"),t5o=o(` property of the config object (either
passed as an argument or loaded from `),Fse=a("code"),a5o=o("pretrained_model_name_or_path"),n5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=a("code"),s5o=o("pretrained_model_name_or_path"),l5o=o(":"),i5o=l(),q=a("ul"),wb=a("li"),Tse=a("strong"),d5o=o("albert"),c5o=o(" \u2014 "),Aq=a("a"),f5o=o("AlbertForSequenceClassification"),m5o=o(" (ALBERT model)"),h5o=l(),Ab=a("li"),Mse=a("strong"),g5o=o("bart"),p5o=o(" \u2014 "),yq=a("a"),u5o=o("BartForSequenceClassification"),_5o=o(" (BART model)"),b5o=l(),yb=a("li"),Ese=a("strong"),F5o=o("bert"),v5o=o(" \u2014 "),Lq=a("a"),T5o=o("BertForSequenceClassification"),M5o=o(" (BERT model)"),E5o=l(),Lb=a("li"),Cse=a("strong"),C5o=o("big_bird"),w5o=o(" \u2014 "),xq=a("a"),A5o=o("BigBirdForSequenceClassification"),y5o=o(" (BigBird model)"),L5o=l(),xb=a("li"),wse=a("strong"),x5o=o("bigbird_pegasus"),$5o=o(" \u2014 "),$q=a("a"),k5o=o("BigBirdPegasusForSequenceClassification"),S5o=o(" (BigBirdPegasus model)"),R5o=l(),$b=a("li"),Ase=a("strong"),B5o=o("camembert"),P5o=o(" \u2014 "),kq=a("a"),I5o=o("CamembertForSequenceClassification"),q5o=o(" (CamemBERT model)"),N5o=l(),kb=a("li"),yse=a("strong"),j5o=o("canine"),D5o=o(" \u2014 "),Sq=a("a"),G5o=o("CanineForSequenceClassification"),O5o=o(" (Canine model)"),V5o=l(),Sb=a("li"),Lse=a("strong"),X5o=o("convbert"),z5o=o(" \u2014 "),Rq=a("a"),Q5o=o("ConvBertForSequenceClassification"),W5o=o(" (ConvBERT model)"),H5o=l(),Rb=a("li"),xse=a("strong"),U5o=o("ctrl"),J5o=o(" \u2014 "),Bq=a("a"),Y5o=o("CTRLForSequenceClassification"),K5o=o(" (CTRL model)"),Z5o=l(),Bb=a("li"),$se=a("strong"),eCo=o("data2vec-text"),oCo=o(" \u2014 "),Pq=a("a"),rCo=o("Data2VecTextForSequenceClassification"),tCo=o(" (Data2VecText model)"),aCo=l(),Pb=a("li"),kse=a("strong"),nCo=o("deberta"),sCo=o(" \u2014 "),Iq=a("a"),lCo=o("DebertaForSequenceClassification"),iCo=o(" (DeBERTa model)"),dCo=l(),Ib=a("li"),Sse=a("strong"),cCo=o("deberta-v2"),fCo=o(" \u2014 "),qq=a("a"),mCo=o("DebertaV2ForSequenceClassification"),hCo=o(" (DeBERTa-v2 model)"),gCo=l(),qb=a("li"),Rse=a("strong"),pCo=o("distilbert"),uCo=o(" \u2014 "),Nq=a("a"),_Co=o("DistilBertForSequenceClassification"),bCo=o(" (DistilBERT model)"),FCo=l(),Nb=a("li"),Bse=a("strong"),vCo=o("electra"),TCo=o(" \u2014 "),jq=a("a"),MCo=o("ElectraForSequenceClassification"),ECo=o(" (ELECTRA model)"),CCo=l(),jb=a("li"),Pse=a("strong"),wCo=o("flaubert"),ACo=o(" \u2014 "),Dq=a("a"),yCo=o("FlaubertForSequenceClassification"),LCo=o(" (FlauBERT model)"),xCo=l(),Db=a("li"),Ise=a("strong"),$Co=o("fnet"),kCo=o(" \u2014 "),Gq=a("a"),SCo=o("FNetForSequenceClassification"),RCo=o(" (FNet model)"),BCo=l(),Gb=a("li"),qse=a("strong"),PCo=o("funnel"),ICo=o(" \u2014 "),Oq=a("a"),qCo=o("FunnelForSequenceClassification"),NCo=o(" (Funnel Transformer model)"),jCo=l(),Ob=a("li"),Nse=a("strong"),DCo=o("gpt2"),GCo=o(" \u2014 "),Vq=a("a"),OCo=o("GPT2ForSequenceClassification"),VCo=o(" (OpenAI GPT-2 model)"),XCo=l(),Vb=a("li"),jse=a("strong"),zCo=o("gpt_neo"),QCo=o(" \u2014 "),Xq=a("a"),WCo=o("GPTNeoForSequenceClassification"),HCo=o(" (GPT Neo model)"),UCo=l(),Xb=a("li"),Dse=a("strong"),JCo=o("gptj"),YCo=o(" \u2014 "),zq=a("a"),KCo=o("GPTJForSequenceClassification"),ZCo=o(" (GPT-J model)"),e3o=l(),zb=a("li"),Gse=a("strong"),o3o=o("ibert"),r3o=o(" \u2014 "),Qq=a("a"),t3o=o("IBertForSequenceClassification"),a3o=o(" (I-BERT model)"),n3o=l(),Qb=a("li"),Ose=a("strong"),s3o=o("layoutlm"),l3o=o(" \u2014 "),Wq=a("a"),i3o=o("LayoutLMForSequenceClassification"),d3o=o(" (LayoutLM model)"),c3o=l(),Wb=a("li"),Vse=a("strong"),f3o=o("layoutlmv2"),m3o=o(" \u2014 "),Hq=a("a"),h3o=o("LayoutLMv2ForSequenceClassification"),g3o=o(" (LayoutLMv2 model)"),p3o=l(),Hb=a("li"),Xse=a("strong"),u3o=o("led"),_3o=o(" \u2014 "),Uq=a("a"),b3o=o("LEDForSequenceClassification"),F3o=o(" (LED model)"),v3o=l(),Ub=a("li"),zse=a("strong"),T3o=o("longformer"),M3o=o(" \u2014 "),Jq=a("a"),E3o=o("LongformerForSequenceClassification"),C3o=o(" (Longformer model)"),w3o=l(),Jb=a("li"),Qse=a("strong"),A3o=o("mbart"),y3o=o(" \u2014 "),Yq=a("a"),L3o=o("MBartForSequenceClassification"),x3o=o(" (mBART model)"),$3o=l(),Yb=a("li"),Wse=a("strong"),k3o=o("megatron-bert"),S3o=o(" \u2014 "),Kq=a("a"),R3o=o("MegatronBertForSequenceClassification"),B3o=o(" (MegatronBert model)"),P3o=l(),Kb=a("li"),Hse=a("strong"),I3o=o("mobilebert"),q3o=o(" \u2014 "),Zq=a("a"),N3o=o("MobileBertForSequenceClassification"),j3o=o(" (MobileBERT model)"),D3o=l(),Zb=a("li"),Use=a("strong"),G3o=o("mpnet"),O3o=o(" \u2014 "),eN=a("a"),V3o=o("MPNetForSequenceClassification"),X3o=o(" (MPNet model)"),z3o=l(),e2=a("li"),Jse=a("strong"),Q3o=o("nystromformer"),W3o=o(" \u2014 "),oN=a("a"),H3o=o("NystromformerForSequenceClassification"),U3o=o(" (Nystromformer model)"),J3o=l(),o2=a("li"),Yse=a("strong"),Y3o=o("openai-gpt"),K3o=o(" \u2014 "),rN=a("a"),Z3o=o("OpenAIGPTForSequenceClassification"),ewo=o(" (OpenAI GPT model)"),owo=l(),r2=a("li"),Kse=a("strong"),rwo=o("perceiver"),two=o(" \u2014 "),tN=a("a"),awo=o("PerceiverForSequenceClassification"),nwo=o(" (Perceiver model)"),swo=l(),t2=a("li"),Zse=a("strong"),lwo=o("plbart"),iwo=o(" \u2014 "),ele=a("code"),dwo=o("PLBartForSequenceClassification"),cwo=o(" (PLBart model)"),fwo=l(),a2=a("li"),ole=a("strong"),mwo=o("qdqbert"),hwo=o(" \u2014 "),rle=a("code"),gwo=o("QDQBertForSequenceClassification"),pwo=o(" (QDQBert model)"),uwo=l(),n2=a("li"),tle=a("strong"),_wo=o("reformer"),bwo=o(" \u2014 "),aN=a("a"),Fwo=o("ReformerForSequenceClassification"),vwo=o(" (Reformer model)"),Two=l(),s2=a("li"),ale=a("strong"),Mwo=o("rembert"),Ewo=o(" \u2014 "),nN=a("a"),Cwo=o("RemBertForSequenceClassification"),wwo=o(" (RemBERT model)"),Awo=l(),l2=a("li"),nle=a("strong"),ywo=o("roberta"),Lwo=o(" \u2014 "),sN=a("a"),xwo=o("RobertaForSequenceClassification"),$wo=o(" (RoBERTa model)"),kwo=l(),i2=a("li"),sle=a("strong"),Swo=o("roformer"),Rwo=o(" \u2014 "),lN=a("a"),Bwo=o("RoFormerForSequenceClassification"),Pwo=o(" (RoFormer model)"),Iwo=l(),d2=a("li"),lle=a("strong"),qwo=o("squeezebert"),Nwo=o(" \u2014 "),iN=a("a"),jwo=o("SqueezeBertForSequenceClassification"),Dwo=o(" (SqueezeBERT model)"),Gwo=l(),c2=a("li"),ile=a("strong"),Owo=o("tapas"),Vwo=o(" \u2014 "),dN=a("a"),Xwo=o("TapasForSequenceClassification"),zwo=o(" (TAPAS model)"),Qwo=l(),f2=a("li"),dle=a("strong"),Wwo=o("transfo-xl"),Hwo=o(" \u2014 "),cN=a("a"),Uwo=o("TransfoXLForSequenceClassification"),Jwo=o(" (Transformer-XL model)"),Ywo=l(),m2=a("li"),cle=a("strong"),Kwo=o("xlm"),Zwo=o(" \u2014 "),fN=a("a"),eAo=o("XLMForSequenceClassification"),oAo=o(" (XLM model)"),rAo=l(),h2=a("li"),fle=a("strong"),tAo=o("xlm-roberta"),aAo=o(" \u2014 "),mN=a("a"),nAo=o("XLMRobertaForSequenceClassification"),sAo=o(" (XLM-RoBERTa model)"),lAo=l(),g2=a("li"),mle=a("strong"),iAo=o("xlm-roberta-xl"),dAo=o(" \u2014 "),hN=a("a"),cAo=o("XLMRobertaXLForSequenceClassification"),fAo=o(" (XLM-RoBERTa-XL model)"),mAo=l(),p2=a("li"),hle=a("strong"),hAo=o("xlnet"),gAo=o(" \u2014 "),gN=a("a"),pAo=o("XLNetForSequenceClassification"),uAo=o(" (XLNet model)"),_Ao=l(),u2=a("li"),gle=a("strong"),bAo=o("yoso"),FAo=o(" \u2014 "),pN=a("a"),vAo=o("YosoForSequenceClassification"),TAo=o(" (YOSO model)"),MAo=l(),_2=a("p"),EAo=o("The model is set in evaluation mode by default using "),ple=a("code"),CAo=o("model.eval()"),wAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=a("code"),AAo=o("model.train()"),yAo=l(),v(b2.$$.fragment),Z9e=l(),Ci=a("h2"),F2=a("a"),_le=a("span"),v(x6.$$.fragment),LAo=l(),ble=a("span"),xAo=o("AutoModelForMultipleChoice"),eke=l(),So=a("div"),v($6.$$.fragment),$Ao=l(),wi=a("p"),kAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uN=a("a"),SAo=o("from_pretrained()"),RAo=o(" class method or the "),_N=a("a"),BAo=o("from_config()"),PAo=o(` class
method.`),IAo=l(),k6=a("p"),qAo=o("This class cannot be instantiated directly using "),Fle=a("code"),NAo=o("__init__()"),jAo=o(" (throws an error)."),DAo=l(),at=a("div"),v(S6.$$.fragment),GAo=l(),vle=a("p"),OAo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VAo=l(),Ai=a("p"),XAo=o(`Note:
Loading a model from its configuration file does `),Tle=a("strong"),zAo=o("not"),QAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=a("a"),WAo=o("from_pretrained()"),HAo=o(" to load the model weights."),UAo=l(),v(v2.$$.fragment),JAo=l(),Ye=a("div"),v(R6.$$.fragment),YAo=l(),Mle=a("p"),KAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZAo=l(),La=a("p"),e0o=o("The model class to instantiate is selected based on the "),Ele=a("code"),o0o=o("model_type"),r0o=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),t0o=o("pretrained_model_name_or_path"),a0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),n0o=o("pretrained_model_name_or_path"),s0o=o(":"),l0o=l(),Y=a("ul"),T2=a("li"),Ale=a("strong"),i0o=o("albert"),d0o=o(" \u2014 "),FN=a("a"),c0o=o("AlbertForMultipleChoice"),f0o=o(" (ALBERT model)"),m0o=l(),M2=a("li"),yle=a("strong"),h0o=o("bert"),g0o=o(" \u2014 "),vN=a("a"),p0o=o("BertForMultipleChoice"),u0o=o(" (BERT model)"),_0o=l(),E2=a("li"),Lle=a("strong"),b0o=o("big_bird"),F0o=o(" \u2014 "),TN=a("a"),v0o=o("BigBirdForMultipleChoice"),T0o=o(" (BigBird model)"),M0o=l(),C2=a("li"),xle=a("strong"),E0o=o("camembert"),C0o=o(" \u2014 "),MN=a("a"),w0o=o("CamembertForMultipleChoice"),A0o=o(" (CamemBERT model)"),y0o=l(),w2=a("li"),$le=a("strong"),L0o=o("canine"),x0o=o(" \u2014 "),EN=a("a"),$0o=o("CanineForMultipleChoice"),k0o=o(" (Canine model)"),S0o=l(),A2=a("li"),kle=a("strong"),R0o=o("convbert"),B0o=o(" \u2014 "),CN=a("a"),P0o=o("ConvBertForMultipleChoice"),I0o=o(" (ConvBERT model)"),q0o=l(),y2=a("li"),Sle=a("strong"),N0o=o("data2vec-text"),j0o=o(" \u2014 "),wN=a("a"),D0o=o("Data2VecTextForMultipleChoice"),G0o=o(" (Data2VecText model)"),O0o=l(),L2=a("li"),Rle=a("strong"),V0o=o("distilbert"),X0o=o(" \u2014 "),AN=a("a"),z0o=o("DistilBertForMultipleChoice"),Q0o=o(" (DistilBERT model)"),W0o=l(),x2=a("li"),Ble=a("strong"),H0o=o("electra"),U0o=o(" \u2014 "),yN=a("a"),J0o=o("ElectraForMultipleChoice"),Y0o=o(" (ELECTRA model)"),K0o=l(),$2=a("li"),Ple=a("strong"),Z0o=o("flaubert"),e6o=o(" \u2014 "),LN=a("a"),o6o=o("FlaubertForMultipleChoice"),r6o=o(" (FlauBERT model)"),t6o=l(),k2=a("li"),Ile=a("strong"),a6o=o("fnet"),n6o=o(" \u2014 "),xN=a("a"),s6o=o("FNetForMultipleChoice"),l6o=o(" (FNet model)"),i6o=l(),S2=a("li"),qle=a("strong"),d6o=o("funnel"),c6o=o(" \u2014 "),$N=a("a"),f6o=o("FunnelForMultipleChoice"),m6o=o(" (Funnel Transformer model)"),h6o=l(),R2=a("li"),Nle=a("strong"),g6o=o("ibert"),p6o=o(" \u2014 "),kN=a("a"),u6o=o("IBertForMultipleChoice"),_6o=o(" (I-BERT model)"),b6o=l(),B2=a("li"),jle=a("strong"),F6o=o("longformer"),v6o=o(" \u2014 "),SN=a("a"),T6o=o("LongformerForMultipleChoice"),M6o=o(" (Longformer model)"),E6o=l(),P2=a("li"),Dle=a("strong"),C6o=o("megatron-bert"),w6o=o(" \u2014 "),RN=a("a"),A6o=o("MegatronBertForMultipleChoice"),y6o=o(" (MegatronBert model)"),L6o=l(),I2=a("li"),Gle=a("strong"),x6o=o("mobilebert"),$6o=o(" \u2014 "),BN=a("a"),k6o=o("MobileBertForMultipleChoice"),S6o=o(" (MobileBERT model)"),R6o=l(),q2=a("li"),Ole=a("strong"),B6o=o("mpnet"),P6o=o(" \u2014 "),PN=a("a"),I6o=o("MPNetForMultipleChoice"),q6o=o(" (MPNet model)"),N6o=l(),N2=a("li"),Vle=a("strong"),j6o=o("nystromformer"),D6o=o(" \u2014 "),IN=a("a"),G6o=o("NystromformerForMultipleChoice"),O6o=o(" (Nystromformer model)"),V6o=l(),j2=a("li"),Xle=a("strong"),X6o=o("qdqbert"),z6o=o(" \u2014 "),zle=a("code"),Q6o=o("QDQBertForMultipleChoice"),W6o=o(" (QDQBert model)"),H6o=l(),D2=a("li"),Qle=a("strong"),U6o=o("rembert"),J6o=o(" \u2014 "),qN=a("a"),Y6o=o("RemBertForMultipleChoice"),K6o=o(" (RemBERT model)"),Z6o=l(),G2=a("li"),Wle=a("strong"),eyo=o("roberta"),oyo=o(" \u2014 "),NN=a("a"),ryo=o("RobertaForMultipleChoice"),tyo=o(" (RoBERTa model)"),ayo=l(),O2=a("li"),Hle=a("strong"),nyo=o("roformer"),syo=o(" \u2014 "),jN=a("a"),lyo=o("RoFormerForMultipleChoice"),iyo=o(" (RoFormer model)"),dyo=l(),V2=a("li"),Ule=a("strong"),cyo=o("squeezebert"),fyo=o(" \u2014 "),DN=a("a"),myo=o("SqueezeBertForMultipleChoice"),hyo=o(" (SqueezeBERT model)"),gyo=l(),X2=a("li"),Jle=a("strong"),pyo=o("xlm"),uyo=o(" \u2014 "),GN=a("a"),_yo=o("XLMForMultipleChoice"),byo=o(" (XLM model)"),Fyo=l(),z2=a("li"),Yle=a("strong"),vyo=o("xlm-roberta"),Tyo=o(" \u2014 "),ON=a("a"),Myo=o("XLMRobertaForMultipleChoice"),Eyo=o(" (XLM-RoBERTa model)"),Cyo=l(),Q2=a("li"),Kle=a("strong"),wyo=o("xlm-roberta-xl"),Ayo=o(" \u2014 "),VN=a("a"),yyo=o("XLMRobertaXLForMultipleChoice"),Lyo=o(" (XLM-RoBERTa-XL model)"),xyo=l(),W2=a("li"),Zle=a("strong"),$yo=o("xlnet"),kyo=o(" \u2014 "),XN=a("a"),Syo=o("XLNetForMultipleChoice"),Ryo=o(" (XLNet model)"),Byo=l(),H2=a("li"),eie=a("strong"),Pyo=o("yoso"),Iyo=o(" \u2014 "),zN=a("a"),qyo=o("YosoForMultipleChoice"),Nyo=o(" (YOSO model)"),jyo=l(),U2=a("p"),Dyo=o("The model is set in evaluation mode by default using "),oie=a("code"),Gyo=o("model.eval()"),Oyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),Vyo=o("model.train()"),Xyo=l(),v(J2.$$.fragment),oke=l(),yi=a("h2"),Y2=a("a"),tie=a("span"),v(B6.$$.fragment),zyo=l(),aie=a("span"),Qyo=o("AutoModelForNextSentencePrediction"),rke=l(),Ro=a("div"),v(P6.$$.fragment),Wyo=l(),Li=a("p"),Hyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QN=a("a"),Uyo=o("from_pretrained()"),Jyo=o(" class method or the "),WN=a("a"),Yyo=o("from_config()"),Kyo=o(` class
method.`),Zyo=l(),I6=a("p"),eLo=o("This class cannot be instantiated directly using "),nie=a("code"),oLo=o("__init__()"),rLo=o(" (throws an error)."),tLo=l(),nt=a("div"),v(q6.$$.fragment),aLo=l(),sie=a("p"),nLo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sLo=l(),xi=a("p"),lLo=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),iLo=o("not"),dLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=a("a"),cLo=o("from_pretrained()"),fLo=o(" to load the model weights."),mLo=l(),v(K2.$$.fragment),hLo=l(),Ke=a("div"),v(N6.$$.fragment),gLo=l(),iie=a("p"),pLo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uLo=l(),xa=a("p"),_Lo=o("The model class to instantiate is selected based on the "),die=a("code"),bLo=o("model_type"),FLo=o(` property of the config object (either
passed as an argument or loaded from `),cie=a("code"),vLo=o("pretrained_model_name_or_path"),TLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),MLo=o("pretrained_model_name_or_path"),ELo=o(":"),CLo=l(),Wr=a("ul"),Z2=a("li"),mie=a("strong"),wLo=o("bert"),ALo=o(" \u2014 "),UN=a("a"),yLo=o("BertForNextSentencePrediction"),LLo=o(" (BERT model)"),xLo=l(),eF=a("li"),hie=a("strong"),$Lo=o("fnet"),kLo=o(" \u2014 "),JN=a("a"),SLo=o("FNetForNextSentencePrediction"),RLo=o(" (FNet model)"),BLo=l(),oF=a("li"),gie=a("strong"),PLo=o("megatron-bert"),ILo=o(" \u2014 "),YN=a("a"),qLo=o("MegatronBertForNextSentencePrediction"),NLo=o(" (MegatronBert model)"),jLo=l(),rF=a("li"),pie=a("strong"),DLo=o("mobilebert"),GLo=o(" \u2014 "),KN=a("a"),OLo=o("MobileBertForNextSentencePrediction"),VLo=o(" (MobileBERT model)"),XLo=l(),tF=a("li"),uie=a("strong"),zLo=o("qdqbert"),QLo=o(" \u2014 "),_ie=a("code"),WLo=o("QDQBertForNextSentencePrediction"),HLo=o(" (QDQBert model)"),ULo=l(),aF=a("p"),JLo=o("The model is set in evaluation mode by default using "),bie=a("code"),YLo=o("model.eval()"),KLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=a("code"),ZLo=o("model.train()"),e8o=l(),v(nF.$$.fragment),tke=l(),$i=a("h2"),sF=a("a"),vie=a("span"),v(j6.$$.fragment),o8o=l(),Tie=a("span"),r8o=o("AutoModelForTokenClassification"),ake=l(),Bo=a("div"),v(D6.$$.fragment),t8o=l(),ki=a("p"),a8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZN=a("a"),n8o=o("from_pretrained()"),s8o=o(" class method or the "),ej=a("a"),l8o=o("from_config()"),i8o=o(` class
method.`),d8o=l(),G6=a("p"),c8o=o("This class cannot be instantiated directly using "),Mie=a("code"),f8o=o("__init__()"),m8o=o(" (throws an error)."),h8o=l(),st=a("div"),v(O6.$$.fragment),g8o=l(),Eie=a("p"),p8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),u8o=l(),Si=a("p"),_8o=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),b8o=o("not"),F8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=a("a"),v8o=o("from_pretrained()"),T8o=o(" to load the model weights."),M8o=l(),v(lF.$$.fragment),E8o=l(),Ze=a("div"),v(V6.$$.fragment),C8o=l(),wie=a("p"),w8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),A8o=l(),$a=a("p"),y8o=o("The model class to instantiate is selected based on the "),Aie=a("code"),L8o=o("model_type"),x8o=o(` property of the config object (either
passed as an argument or loaded from `),yie=a("code"),$8o=o("pretrained_model_name_or_path"),k8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),S8o=o("pretrained_model_name_or_path"),R8o=o(":"),B8o=l(),U=a("ul"),iF=a("li"),xie=a("strong"),P8o=o("albert"),I8o=o(" \u2014 "),rj=a("a"),q8o=o("AlbertForTokenClassification"),N8o=o(" (ALBERT model)"),j8o=l(),dF=a("li"),$ie=a("strong"),D8o=o("bert"),G8o=o(" \u2014 "),tj=a("a"),O8o=o("BertForTokenClassification"),V8o=o(" (BERT model)"),X8o=l(),cF=a("li"),kie=a("strong"),z8o=o("big_bird"),Q8o=o(" \u2014 "),aj=a("a"),W8o=o("BigBirdForTokenClassification"),H8o=o(" (BigBird model)"),U8o=l(),fF=a("li"),Sie=a("strong"),J8o=o("camembert"),Y8o=o(" \u2014 "),nj=a("a"),K8o=o("CamembertForTokenClassification"),Z8o=o(" (CamemBERT model)"),exo=l(),mF=a("li"),Rie=a("strong"),oxo=o("canine"),rxo=o(" \u2014 "),sj=a("a"),txo=o("CanineForTokenClassification"),axo=o(" (Canine model)"),nxo=l(),hF=a("li"),Bie=a("strong"),sxo=o("convbert"),lxo=o(" \u2014 "),lj=a("a"),ixo=o("ConvBertForTokenClassification"),dxo=o(" (ConvBERT model)"),cxo=l(),gF=a("li"),Pie=a("strong"),fxo=o("data2vec-text"),mxo=o(" \u2014 "),ij=a("a"),hxo=o("Data2VecTextForTokenClassification"),gxo=o(" (Data2VecText model)"),pxo=l(),pF=a("li"),Iie=a("strong"),uxo=o("deberta"),_xo=o(" \u2014 "),dj=a("a"),bxo=o("DebertaForTokenClassification"),Fxo=o(" (DeBERTa model)"),vxo=l(),uF=a("li"),qie=a("strong"),Txo=o("deberta-v2"),Mxo=o(" \u2014 "),cj=a("a"),Exo=o("DebertaV2ForTokenClassification"),Cxo=o(" (DeBERTa-v2 model)"),wxo=l(),_F=a("li"),Nie=a("strong"),Axo=o("distilbert"),yxo=o(" \u2014 "),fj=a("a"),Lxo=o("DistilBertForTokenClassification"),xxo=o(" (DistilBERT model)"),$xo=l(),bF=a("li"),jie=a("strong"),kxo=o("electra"),Sxo=o(" \u2014 "),mj=a("a"),Rxo=o("ElectraForTokenClassification"),Bxo=o(" (ELECTRA model)"),Pxo=l(),FF=a("li"),Die=a("strong"),Ixo=o("flaubert"),qxo=o(" \u2014 "),hj=a("a"),Nxo=o("FlaubertForTokenClassification"),jxo=o(" (FlauBERT model)"),Dxo=l(),vF=a("li"),Gie=a("strong"),Gxo=o("fnet"),Oxo=o(" \u2014 "),gj=a("a"),Vxo=o("FNetForTokenClassification"),Xxo=o(" (FNet model)"),zxo=l(),TF=a("li"),Oie=a("strong"),Qxo=o("funnel"),Wxo=o(" \u2014 "),pj=a("a"),Hxo=o("FunnelForTokenClassification"),Uxo=o(" (Funnel Transformer model)"),Jxo=l(),MF=a("li"),Vie=a("strong"),Yxo=o("gpt2"),Kxo=o(" \u2014 "),uj=a("a"),Zxo=o("GPT2ForTokenClassification"),e7o=o(" (OpenAI GPT-2 model)"),o7o=l(),EF=a("li"),Xie=a("strong"),r7o=o("ibert"),t7o=o(" \u2014 "),_j=a("a"),a7o=o("IBertForTokenClassification"),n7o=o(" (I-BERT model)"),s7o=l(),CF=a("li"),zie=a("strong"),l7o=o("layoutlm"),i7o=o(" \u2014 "),bj=a("a"),d7o=o("LayoutLMForTokenClassification"),c7o=o(" (LayoutLM model)"),f7o=l(),wF=a("li"),Qie=a("strong"),m7o=o("layoutlmv2"),h7o=o(" \u2014 "),Fj=a("a"),g7o=o("LayoutLMv2ForTokenClassification"),p7o=o(" (LayoutLMv2 model)"),u7o=l(),AF=a("li"),Wie=a("strong"),_7o=o("longformer"),b7o=o(" \u2014 "),vj=a("a"),F7o=o("LongformerForTokenClassification"),v7o=o(" (Longformer model)"),T7o=l(),yF=a("li"),Hie=a("strong"),M7o=o("megatron-bert"),E7o=o(" \u2014 "),Tj=a("a"),C7o=o("MegatronBertForTokenClassification"),w7o=o(" (MegatronBert model)"),A7o=l(),LF=a("li"),Uie=a("strong"),y7o=o("mobilebert"),L7o=o(" \u2014 "),Mj=a("a"),x7o=o("MobileBertForTokenClassification"),$7o=o(" (MobileBERT model)"),k7o=l(),xF=a("li"),Jie=a("strong"),S7o=o("mpnet"),R7o=o(" \u2014 "),Ej=a("a"),B7o=o("MPNetForTokenClassification"),P7o=o(" (MPNet model)"),I7o=l(),$F=a("li"),Yie=a("strong"),q7o=o("nystromformer"),N7o=o(" \u2014 "),Cj=a("a"),j7o=o("NystromformerForTokenClassification"),D7o=o(" (Nystromformer model)"),G7o=l(),kF=a("li"),Kie=a("strong"),O7o=o("qdqbert"),V7o=o(" \u2014 "),Zie=a("code"),X7o=o("QDQBertForTokenClassification"),z7o=o(" (QDQBert model)"),Q7o=l(),SF=a("li"),ede=a("strong"),W7o=o("rembert"),H7o=o(" \u2014 "),wj=a("a"),U7o=o("RemBertForTokenClassification"),J7o=o(" (RemBERT model)"),Y7o=l(),RF=a("li"),ode=a("strong"),K7o=o("roberta"),Z7o=o(" \u2014 "),Aj=a("a"),e$o=o("RobertaForTokenClassification"),o$o=o(" (RoBERTa model)"),r$o=l(),BF=a("li"),rde=a("strong"),t$o=o("roformer"),a$o=o(" \u2014 "),yj=a("a"),n$o=o("RoFormerForTokenClassification"),s$o=o(" (RoFormer model)"),l$o=l(),PF=a("li"),tde=a("strong"),i$o=o("squeezebert"),d$o=o(" \u2014 "),Lj=a("a"),c$o=o("SqueezeBertForTokenClassification"),f$o=o(" (SqueezeBERT model)"),m$o=l(),IF=a("li"),ade=a("strong"),h$o=o("xlm"),g$o=o(" \u2014 "),xj=a("a"),p$o=o("XLMForTokenClassification"),u$o=o(" (XLM model)"),_$o=l(),qF=a("li"),nde=a("strong"),b$o=o("xlm-roberta"),F$o=o(" \u2014 "),$j=a("a"),v$o=o("XLMRobertaForTokenClassification"),T$o=o(" (XLM-RoBERTa model)"),M$o=l(),NF=a("li"),sde=a("strong"),E$o=o("xlm-roberta-xl"),C$o=o(" \u2014 "),kj=a("a"),w$o=o("XLMRobertaXLForTokenClassification"),A$o=o(" (XLM-RoBERTa-XL model)"),y$o=l(),jF=a("li"),lde=a("strong"),L$o=o("xlnet"),x$o=o(" \u2014 "),Sj=a("a"),$$o=o("XLNetForTokenClassification"),k$o=o(" (XLNet model)"),S$o=l(),DF=a("li"),ide=a("strong"),R$o=o("yoso"),B$o=o(" \u2014 "),Rj=a("a"),P$o=o("YosoForTokenClassification"),I$o=o(" (YOSO model)"),q$o=l(),GF=a("p"),N$o=o("The model is set in evaluation mode by default using "),dde=a("code"),j$o=o("model.eval()"),D$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),G$o=o("model.train()"),O$o=l(),v(OF.$$.fragment),nke=l(),Ri=a("h2"),VF=a("a"),fde=a("span"),v(X6.$$.fragment),V$o=l(),mde=a("span"),X$o=o("AutoModelForQuestionAnswering"),ske=l(),Po=a("div"),v(z6.$$.fragment),z$o=l(),Bi=a("p"),Q$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Bj=a("a"),W$o=o("from_pretrained()"),H$o=o(" class method or the "),Pj=a("a"),U$o=o("from_config()"),J$o=o(` class
method.`),Y$o=l(),Q6=a("p"),K$o=o("This class cannot be instantiated directly using "),hde=a("code"),Z$o=o("__init__()"),e9o=o(" (throws an error)."),o9o=l(),lt=a("div"),v(W6.$$.fragment),r9o=l(),gde=a("p"),t9o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a9o=l(),Pi=a("p"),n9o=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),s9o=o("not"),l9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=a("a"),i9o=o("from_pretrained()"),d9o=o(" to load the model weights."),c9o=l(),v(XF.$$.fragment),f9o=l(),eo=a("div"),v(H6.$$.fragment),m9o=l(),ude=a("p"),h9o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),g9o=l(),ka=a("p"),p9o=o("The model class to instantiate is selected based on the "),_de=a("code"),u9o=o("model_type"),_9o=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),b9o=o("pretrained_model_name_or_path"),F9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),v9o=o("pretrained_model_name_or_path"),T9o=o(":"),M9o=l(),O=a("ul"),zF=a("li"),vde=a("strong"),E9o=o("albert"),C9o=o(" \u2014 "),qj=a("a"),w9o=o("AlbertForQuestionAnswering"),A9o=o(" (ALBERT model)"),y9o=l(),QF=a("li"),Tde=a("strong"),L9o=o("bart"),x9o=o(" \u2014 "),Nj=a("a"),$9o=o("BartForQuestionAnswering"),k9o=o(" (BART model)"),S9o=l(),WF=a("li"),Mde=a("strong"),R9o=o("bert"),B9o=o(" \u2014 "),jj=a("a"),P9o=o("BertForQuestionAnswering"),I9o=o(" (BERT model)"),q9o=l(),HF=a("li"),Ede=a("strong"),N9o=o("big_bird"),j9o=o(" \u2014 "),Dj=a("a"),D9o=o("BigBirdForQuestionAnswering"),G9o=o(" (BigBird model)"),O9o=l(),UF=a("li"),Cde=a("strong"),V9o=o("bigbird_pegasus"),X9o=o(" \u2014 "),Gj=a("a"),z9o=o("BigBirdPegasusForQuestionAnswering"),Q9o=o(" (BigBirdPegasus model)"),W9o=l(),JF=a("li"),wde=a("strong"),H9o=o("camembert"),U9o=o(" \u2014 "),Oj=a("a"),J9o=o("CamembertForQuestionAnswering"),Y9o=o(" (CamemBERT model)"),K9o=l(),YF=a("li"),Ade=a("strong"),Z9o=o("canine"),eko=o(" \u2014 "),Vj=a("a"),oko=o("CanineForQuestionAnswering"),rko=o(" (Canine model)"),tko=l(),KF=a("li"),yde=a("strong"),ako=o("convbert"),nko=o(" \u2014 "),Xj=a("a"),sko=o("ConvBertForQuestionAnswering"),lko=o(" (ConvBERT model)"),iko=l(),ZF=a("li"),Lde=a("strong"),dko=o("data2vec-text"),cko=o(" \u2014 "),zj=a("a"),fko=o("Data2VecTextForQuestionAnswering"),mko=o(" (Data2VecText model)"),hko=l(),ev=a("li"),xde=a("strong"),gko=o("deberta"),pko=o(" \u2014 "),Qj=a("a"),uko=o("DebertaForQuestionAnswering"),_ko=o(" (DeBERTa model)"),bko=l(),ov=a("li"),$de=a("strong"),Fko=o("deberta-v2"),vko=o(" \u2014 "),Wj=a("a"),Tko=o("DebertaV2ForQuestionAnswering"),Mko=o(" (DeBERTa-v2 model)"),Eko=l(),rv=a("li"),kde=a("strong"),Cko=o("distilbert"),wko=o(" \u2014 "),Hj=a("a"),Ako=o("DistilBertForQuestionAnswering"),yko=o(" (DistilBERT model)"),Lko=l(),tv=a("li"),Sde=a("strong"),xko=o("electra"),$ko=o(" \u2014 "),Uj=a("a"),kko=o("ElectraForQuestionAnswering"),Sko=o(" (ELECTRA model)"),Rko=l(),av=a("li"),Rde=a("strong"),Bko=o("flaubert"),Pko=o(" \u2014 "),Jj=a("a"),Iko=o("FlaubertForQuestionAnsweringSimple"),qko=o(" (FlauBERT model)"),Nko=l(),nv=a("li"),Bde=a("strong"),jko=o("fnet"),Dko=o(" \u2014 "),Yj=a("a"),Gko=o("FNetForQuestionAnswering"),Oko=o(" (FNet model)"),Vko=l(),sv=a("li"),Pde=a("strong"),Xko=o("funnel"),zko=o(" \u2014 "),Kj=a("a"),Qko=o("FunnelForQuestionAnswering"),Wko=o(" (Funnel Transformer model)"),Hko=l(),lv=a("li"),Ide=a("strong"),Uko=o("gptj"),Jko=o(" \u2014 "),Zj=a("a"),Yko=o("GPTJForQuestionAnswering"),Kko=o(" (GPT-J model)"),Zko=l(),iv=a("li"),qde=a("strong"),eSo=o("ibert"),oSo=o(" \u2014 "),eD=a("a"),rSo=o("IBertForQuestionAnswering"),tSo=o(" (I-BERT model)"),aSo=l(),dv=a("li"),Nde=a("strong"),nSo=o("layoutlmv2"),sSo=o(" \u2014 "),oD=a("a"),lSo=o("LayoutLMv2ForQuestionAnswering"),iSo=o(" (LayoutLMv2 model)"),dSo=l(),cv=a("li"),jde=a("strong"),cSo=o("led"),fSo=o(" \u2014 "),rD=a("a"),mSo=o("LEDForQuestionAnswering"),hSo=o(" (LED model)"),gSo=l(),fv=a("li"),Dde=a("strong"),pSo=o("longformer"),uSo=o(" \u2014 "),tD=a("a"),_So=o("LongformerForQuestionAnswering"),bSo=o(" (Longformer model)"),FSo=l(),mv=a("li"),Gde=a("strong"),vSo=o("lxmert"),TSo=o(" \u2014 "),aD=a("a"),MSo=o("LxmertForQuestionAnswering"),ESo=o(" (LXMERT model)"),CSo=l(),hv=a("li"),Ode=a("strong"),wSo=o("mbart"),ASo=o(" \u2014 "),nD=a("a"),ySo=o("MBartForQuestionAnswering"),LSo=o(" (mBART model)"),xSo=l(),gv=a("li"),Vde=a("strong"),$So=o("megatron-bert"),kSo=o(" \u2014 "),sD=a("a"),SSo=o("MegatronBertForQuestionAnswering"),RSo=o(" (MegatronBert model)"),BSo=l(),pv=a("li"),Xde=a("strong"),PSo=o("mobilebert"),ISo=o(" \u2014 "),lD=a("a"),qSo=o("MobileBertForQuestionAnswering"),NSo=o(" (MobileBERT model)"),jSo=l(),uv=a("li"),zde=a("strong"),DSo=o("mpnet"),GSo=o(" \u2014 "),iD=a("a"),OSo=o("MPNetForQuestionAnswering"),VSo=o(" (MPNet model)"),XSo=l(),_v=a("li"),Qde=a("strong"),zSo=o("nystromformer"),QSo=o(" \u2014 "),dD=a("a"),WSo=o("NystromformerForQuestionAnswering"),HSo=o(" (Nystromformer model)"),USo=l(),bv=a("li"),Wde=a("strong"),JSo=o("qdqbert"),YSo=o(" \u2014 "),Hde=a("code"),KSo=o("QDQBertForQuestionAnswering"),ZSo=o(" (QDQBert model)"),eRo=l(),Fv=a("li"),Ude=a("strong"),oRo=o("reformer"),rRo=o(" \u2014 "),cD=a("a"),tRo=o("ReformerForQuestionAnswering"),aRo=o(" (Reformer model)"),nRo=l(),vv=a("li"),Jde=a("strong"),sRo=o("rembert"),lRo=o(" \u2014 "),fD=a("a"),iRo=o("RemBertForQuestionAnswering"),dRo=o(" (RemBERT model)"),cRo=l(),Tv=a("li"),Yde=a("strong"),fRo=o("roberta"),mRo=o(" \u2014 "),mD=a("a"),hRo=o("RobertaForQuestionAnswering"),gRo=o(" (RoBERTa model)"),pRo=l(),Mv=a("li"),Kde=a("strong"),uRo=o("roformer"),_Ro=o(" \u2014 "),hD=a("a"),bRo=o("RoFormerForQuestionAnswering"),FRo=o(" (RoFormer model)"),vRo=l(),Ev=a("li"),Zde=a("strong"),TRo=o("splinter"),MRo=o(" \u2014 "),gD=a("a"),ERo=o("SplinterForQuestionAnswering"),CRo=o(" (Splinter model)"),wRo=l(),Cv=a("li"),ece=a("strong"),ARo=o("squeezebert"),yRo=o(" \u2014 "),pD=a("a"),LRo=o("SqueezeBertForQuestionAnswering"),xRo=o(" (SqueezeBERT model)"),$Ro=l(),wv=a("li"),oce=a("strong"),kRo=o("xlm"),SRo=o(" \u2014 "),uD=a("a"),RRo=o("XLMForQuestionAnsweringSimple"),BRo=o(" (XLM model)"),PRo=l(),Av=a("li"),rce=a("strong"),IRo=o("xlm-roberta"),qRo=o(" \u2014 "),_D=a("a"),NRo=o("XLMRobertaForQuestionAnswering"),jRo=o(" (XLM-RoBERTa model)"),DRo=l(),yv=a("li"),tce=a("strong"),GRo=o("xlm-roberta-xl"),ORo=o(" \u2014 "),bD=a("a"),VRo=o("XLMRobertaXLForQuestionAnswering"),XRo=o(" (XLM-RoBERTa-XL model)"),zRo=l(),Lv=a("li"),ace=a("strong"),QRo=o("xlnet"),WRo=o(" \u2014 "),FD=a("a"),HRo=o("XLNetForQuestionAnsweringSimple"),URo=o(" (XLNet model)"),JRo=l(),xv=a("li"),nce=a("strong"),YRo=o("yoso"),KRo=o(" \u2014 "),vD=a("a"),ZRo=o("YosoForQuestionAnswering"),eBo=o(" (YOSO model)"),oBo=l(),$v=a("p"),rBo=o("The model is set in evaluation mode by default using "),sce=a("code"),tBo=o("model.eval()"),aBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lce=a("code"),nBo=o("model.train()"),sBo=l(),v(kv.$$.fragment),lke=l(),Ii=a("h2"),Sv=a("a"),ice=a("span"),v(U6.$$.fragment),lBo=l(),dce=a("span"),iBo=o("AutoModelForTableQuestionAnswering"),ike=l(),Io=a("div"),v(J6.$$.fragment),dBo=l(),qi=a("p"),cBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TD=a("a"),fBo=o("from_pretrained()"),mBo=o(" class method or the "),MD=a("a"),hBo=o("from_config()"),gBo=o(` class
method.`),pBo=l(),Y6=a("p"),uBo=o("This class cannot be instantiated directly using "),cce=a("code"),_Bo=o("__init__()"),bBo=o(" (throws an error)."),FBo=l(),it=a("div"),v(K6.$$.fragment),vBo=l(),fce=a("p"),TBo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MBo=l(),Ni=a("p"),EBo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),CBo=o("not"),wBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=a("a"),ABo=o("from_pretrained()"),yBo=o(" to load the model weights."),LBo=l(),v(Rv.$$.fragment),xBo=l(),oo=a("div"),v(Z6.$$.fragment),$Bo=l(),hce=a("p"),kBo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SBo=l(),Sa=a("p"),RBo=o("The model class to instantiate is selected based on the "),gce=a("code"),BBo=o("model_type"),PBo=o(` property of the config object (either
passed as an argument or loaded from `),pce=a("code"),IBo=o("pretrained_model_name_or_path"),qBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=a("code"),NBo=o("pretrained_model_name_or_path"),jBo=o(":"),DBo=l(),_ce=a("ul"),Bv=a("li"),bce=a("strong"),GBo=o("tapas"),OBo=o(" \u2014 "),CD=a("a"),VBo=o("TapasForQuestionAnswering"),XBo=o(" (TAPAS model)"),zBo=l(),Pv=a("p"),QBo=o("The model is set in evaluation mode by default using "),Fce=a("code"),WBo=o("model.eval()"),HBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),UBo=o("model.train()"),JBo=l(),v(Iv.$$.fragment),dke=l(),ji=a("h2"),qv=a("a"),Tce=a("span"),v(ey.$$.fragment),YBo=l(),Mce=a("span"),KBo=o("AutoModelForImageClassification"),cke=l(),qo=a("div"),v(oy.$$.fragment),ZBo=l(),Di=a("p"),ePo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wD=a("a"),oPo=o("from_pretrained()"),rPo=o(" class method or the "),AD=a("a"),tPo=o("from_config()"),aPo=o(` class
method.`),nPo=l(),ry=a("p"),sPo=o("This class cannot be instantiated directly using "),Ece=a("code"),lPo=o("__init__()"),iPo=o(" (throws an error)."),dPo=l(),dt=a("div"),v(ty.$$.fragment),cPo=l(),Cce=a("p"),fPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mPo=l(),Gi=a("p"),hPo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),gPo=o("not"),pPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yD=a("a"),uPo=o("from_pretrained()"),_Po=o(" to load the model weights."),bPo=l(),v(Nv.$$.fragment),FPo=l(),ro=a("div"),v(ay.$$.fragment),vPo=l(),Ace=a("p"),TPo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MPo=l(),Ra=a("p"),EPo=o("The model class to instantiate is selected based on the "),yce=a("code"),CPo=o("model_type"),wPo=o(` property of the config object (either
passed as an argument or loaded from `),Lce=a("code"),APo=o("pretrained_model_name_or_path"),yPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),LPo=o("pretrained_model_name_or_path"),xPo=o(":"),$Po=l(),Fe=a("ul"),jv=a("li"),$ce=a("strong"),kPo=o("beit"),SPo=o(" \u2014 "),LD=a("a"),RPo=o("BeitForImageClassification"),BPo=o(" (BEiT model)"),PPo=l(),Dv=a("li"),kce=a("strong"),IPo=o("convnext"),qPo=o(" \u2014 "),xD=a("a"),NPo=o("ConvNextForImageClassification"),jPo=o(" (ConvNext model)"),DPo=l(),Fs=a("li"),Sce=a("strong"),GPo=o("deit"),OPo=o(" \u2014 "),$D=a("a"),VPo=o("DeiTForImageClassification"),XPo=o(" or "),kD=a("a"),zPo=o("DeiTForImageClassificationWithTeacher"),QPo=o(" (DeiT model)"),WPo=l(),Gv=a("li"),Rce=a("strong"),HPo=o("imagegpt"),UPo=o(" \u2014 "),SD=a("a"),JPo=o("ImageGPTForImageClassification"),YPo=o(" (ImageGPT model)"),KPo=l(),ct=a("li"),Bce=a("strong"),ZPo=o("perceiver"),eIo=o(" \u2014 "),RD=a("a"),oIo=o("PerceiverForImageClassificationLearned"),rIo=o(" or "),BD=a("a"),tIo=o("PerceiverForImageClassificationFourier"),aIo=o(" or "),PD=a("a"),nIo=o("PerceiverForImageClassificationConvProcessing"),sIo=o(" (Perceiver model)"),lIo=l(),Ov=a("li"),Pce=a("strong"),iIo=o("poolformer"),dIo=o(" \u2014 "),ID=a("a"),cIo=o("PoolFormerForImageClassification"),fIo=o(" (PoolFormer model)"),mIo=l(),Vv=a("li"),Ice=a("strong"),hIo=o("resnet"),gIo=o(" \u2014 "),qD=a("a"),pIo=o("ResNetForImageClassification"),uIo=o(" (ResNet model)"),_Io=l(),Xv=a("li"),qce=a("strong"),bIo=o("segformer"),FIo=o(" \u2014 "),ND=a("a"),vIo=o("SegformerForImageClassification"),TIo=o(" (SegFormer model)"),MIo=l(),zv=a("li"),Nce=a("strong"),EIo=o("swin"),CIo=o(" \u2014 "),jD=a("a"),wIo=o("SwinForImageClassification"),AIo=o(" (Swin model)"),yIo=l(),Qv=a("li"),jce=a("strong"),LIo=o("van"),xIo=o(" \u2014 "),DD=a("a"),$Io=o("VanForImageClassification"),kIo=o(" (VAN model)"),SIo=l(),Wv=a("li"),Dce=a("strong"),RIo=o("vit"),BIo=o(" \u2014 "),GD=a("a"),PIo=o("ViTForImageClassification"),IIo=o(" (ViT model)"),qIo=l(),Hv=a("p"),NIo=o("The model is set in evaluation mode by default using "),Gce=a("code"),jIo=o("model.eval()"),DIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=a("code"),GIo=o("model.train()"),OIo=l(),v(Uv.$$.fragment),fke=l(),Oi=a("h2"),Jv=a("a"),Vce=a("span"),v(ny.$$.fragment),VIo=l(),Xce=a("span"),XIo=o("AutoModelForVision2Seq"),mke=l(),No=a("div"),v(sy.$$.fragment),zIo=l(),Vi=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OD=a("a"),WIo=o("from_pretrained()"),HIo=o(" class method or the "),VD=a("a"),UIo=o("from_config()"),JIo=o(` class
method.`),YIo=l(),ly=a("p"),KIo=o("This class cannot be instantiated directly using "),zce=a("code"),ZIo=o("__init__()"),eqo=o(" (throws an error)."),oqo=l(),ft=a("div"),v(iy.$$.fragment),rqo=l(),Qce=a("p"),tqo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aqo=l(),Xi=a("p"),nqo=o(`Note:
Loading a model from its configuration file does `),Wce=a("strong"),sqo=o("not"),lqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),iqo=o("from_pretrained()"),dqo=o(" to load the model weights."),cqo=l(),v(Yv.$$.fragment),fqo=l(),to=a("div"),v(dy.$$.fragment),mqo=l(),Hce=a("p"),hqo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gqo=l(),Ba=a("p"),pqo=o("The model class to instantiate is selected based on the "),Uce=a("code"),uqo=o("model_type"),_qo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),bqo=o("pretrained_model_name_or_path"),Fqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),vqo=o("pretrained_model_name_or_path"),Tqo=o(":"),Mqo=l(),Kce=a("ul"),Kv=a("li"),Zce=a("strong"),Eqo=o("vision-encoder-decoder"),Cqo=o(" \u2014 "),zD=a("a"),wqo=o("VisionEncoderDecoderModel"),Aqo=o(" (Vision Encoder decoder model)"),yqo=l(),Zv=a("p"),Lqo=o("The model is set in evaluation mode by default using "),efe=a("code"),xqo=o("model.eval()"),$qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),kqo=o("model.train()"),Sqo=l(),v(e1.$$.fragment),hke=l(),zi=a("h2"),o1=a("a"),rfe=a("span"),v(cy.$$.fragment),Rqo=l(),tfe=a("span"),Bqo=o("AutoModelForAudioClassification"),gke=l(),jo=a("div"),v(fy.$$.fragment),Pqo=l(),Qi=a("p"),Iqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QD=a("a"),qqo=o("from_pretrained()"),Nqo=o(" class method or the "),WD=a("a"),jqo=o("from_config()"),Dqo=o(` class
method.`),Gqo=l(),my=a("p"),Oqo=o("This class cannot be instantiated directly using "),afe=a("code"),Vqo=o("__init__()"),Xqo=o(" (throws an error)."),zqo=l(),mt=a("div"),v(hy.$$.fragment),Qqo=l(),nfe=a("p"),Wqo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Hqo=l(),Wi=a("p"),Uqo=o(`Note:
Loading a model from its configuration file does `),sfe=a("strong"),Jqo=o("not"),Yqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),Kqo=o("from_pretrained()"),Zqo=o(" to load the model weights."),eNo=l(),v(r1.$$.fragment),oNo=l(),ao=a("div"),v(gy.$$.fragment),rNo=l(),lfe=a("p"),tNo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),aNo=l(),Pa=a("p"),nNo=o("The model class to instantiate is selected based on the "),ife=a("code"),sNo=o("model_type"),lNo=o(` property of the config object (either
passed as an argument or loaded from `),dfe=a("code"),iNo=o("pretrained_model_name_or_path"),dNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=a("code"),cNo=o("pretrained_model_name_or_path"),fNo=o(":"),mNo=l(),Ie=a("ul"),t1=a("li"),ffe=a("strong"),hNo=o("data2vec-audio"),gNo=o(" \u2014 "),UD=a("a"),pNo=o("Data2VecAudioForSequenceClassification"),uNo=o(" (Data2VecAudio model)"),_No=l(),a1=a("li"),mfe=a("strong"),bNo=o("hubert"),FNo=o(" \u2014 "),JD=a("a"),vNo=o("HubertForSequenceClassification"),TNo=o(" (Hubert model)"),MNo=l(),n1=a("li"),hfe=a("strong"),ENo=o("sew"),CNo=o(" \u2014 "),YD=a("a"),wNo=o("SEWForSequenceClassification"),ANo=o(" (SEW model)"),yNo=l(),s1=a("li"),gfe=a("strong"),LNo=o("sew-d"),xNo=o(" \u2014 "),KD=a("a"),$No=o("SEWDForSequenceClassification"),kNo=o(" (SEW-D model)"),SNo=l(),l1=a("li"),pfe=a("strong"),RNo=o("unispeech"),BNo=o(" \u2014 "),ZD=a("a"),PNo=o("UniSpeechForSequenceClassification"),INo=o(" (UniSpeech model)"),qNo=l(),i1=a("li"),ufe=a("strong"),NNo=o("unispeech-sat"),jNo=o(" \u2014 "),eG=a("a"),DNo=o("UniSpeechSatForSequenceClassification"),GNo=o(" (UniSpeechSat model)"),ONo=l(),d1=a("li"),_fe=a("strong"),VNo=o("wav2vec2"),XNo=o(" \u2014 "),oG=a("a"),zNo=o("Wav2Vec2ForSequenceClassification"),QNo=o(" (Wav2Vec2 model)"),WNo=l(),c1=a("li"),bfe=a("strong"),HNo=o("wavlm"),UNo=o(" \u2014 "),rG=a("a"),JNo=o("WavLMForSequenceClassification"),YNo=o(" (WavLM model)"),KNo=l(),f1=a("p"),ZNo=o("The model is set in evaluation mode by default using "),Ffe=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),rjo=o("model.train()"),tjo=l(),v(m1.$$.fragment),pke=l(),Hi=a("h2"),h1=a("a"),Tfe=a("span"),v(py.$$.fragment),ajo=l(),Mfe=a("span"),njo=o("AutoModelForAudioFrameClassification"),uke=l(),Do=a("div"),v(uy.$$.fragment),sjo=l(),Ui=a("p"),ljo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tG=a("a"),ijo=o("from_pretrained()"),djo=o(" class method or the "),aG=a("a"),cjo=o("from_config()"),fjo=o(` class
method.`),mjo=l(),_y=a("p"),hjo=o("This class cannot be instantiated directly using "),Efe=a("code"),gjo=o("__init__()"),pjo=o(" (throws an error)."),ujo=l(),ht=a("div"),v(by.$$.fragment),_jo=l(),Cfe=a("p"),bjo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Fjo=l(),Ji=a("p"),vjo=o(`Note:
Loading a model from its configuration file does `),wfe=a("strong"),Tjo=o("not"),Mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),Ejo=o("from_pretrained()"),Cjo=o(" to load the model weights."),wjo=l(),v(g1.$$.fragment),Ajo=l(),no=a("div"),v(Fy.$$.fragment),yjo=l(),Afe=a("p"),Ljo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xjo=l(),Ia=a("p"),$jo=o("The model class to instantiate is selected based on the "),yfe=a("code"),kjo=o("model_type"),Sjo=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),Rjo=o("pretrained_model_name_or_path"),Bjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=a("code"),Pjo=o("pretrained_model_name_or_path"),Ijo=o(":"),qjo=l(),qa=a("ul"),p1=a("li"),$fe=a("strong"),Njo=o("data2vec-audio"),jjo=o(" \u2014 "),sG=a("a"),Djo=o("Data2VecAudioForAudioFrameClassification"),Gjo=o(" (Data2VecAudio model)"),Ojo=l(),u1=a("li"),kfe=a("strong"),Vjo=o("unispeech-sat"),Xjo=o(" \u2014 "),lG=a("a"),zjo=o("UniSpeechSatForAudioFrameClassification"),Qjo=o(" (UniSpeechSat model)"),Wjo=l(),_1=a("li"),Sfe=a("strong"),Hjo=o("wav2vec2"),Ujo=o(" \u2014 "),iG=a("a"),Jjo=o("Wav2Vec2ForAudioFrameClassification"),Yjo=o(" (Wav2Vec2 model)"),Kjo=l(),b1=a("li"),Rfe=a("strong"),Zjo=o("wavlm"),eDo=o(" \u2014 "),dG=a("a"),oDo=o("WavLMForAudioFrameClassification"),rDo=o(" (WavLM model)"),tDo=l(),F1=a("p"),aDo=o("The model is set in evaluation mode by default using "),Bfe=a("code"),nDo=o("model.eval()"),sDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=a("code"),lDo=o("model.train()"),iDo=l(),v(v1.$$.fragment),_ke=l(),Yi=a("h2"),T1=a("a"),Ife=a("span"),v(vy.$$.fragment),dDo=l(),qfe=a("span"),cDo=o("AutoModelForCTC"),bke=l(),Go=a("div"),v(Ty.$$.fragment),fDo=l(),Ki=a("p"),mDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cG=a("a"),hDo=o("from_pretrained()"),gDo=o(" class method or the "),fG=a("a"),pDo=o("from_config()"),uDo=o(` class
method.`),_Do=l(),My=a("p"),bDo=o("This class cannot be instantiated directly using "),Nfe=a("code"),FDo=o("__init__()"),vDo=o(" (throws an error)."),TDo=l(),gt=a("div"),v(Ey.$$.fragment),MDo=l(),jfe=a("p"),EDo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),CDo=l(),Zi=a("p"),wDo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),ADo=o("not"),yDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),LDo=o("from_pretrained()"),xDo=o(" to load the model weights."),$Do=l(),v(M1.$$.fragment),kDo=l(),so=a("div"),v(Cy.$$.fragment),SDo=l(),Gfe=a("p"),RDo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),BDo=l(),Na=a("p"),PDo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),IDo=o("model_type"),qDo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),NDo=o("pretrained_model_name_or_path"),jDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),DDo=o("pretrained_model_name_or_path"),GDo=o(":"),ODo=l(),qe=a("ul"),E1=a("li"),zfe=a("strong"),VDo=o("data2vec-audio"),XDo=o(" \u2014 "),hG=a("a"),zDo=o("Data2VecAudioForCTC"),QDo=o(" (Data2VecAudio model)"),WDo=l(),C1=a("li"),Qfe=a("strong"),HDo=o("hubert"),UDo=o(" \u2014 "),gG=a("a"),JDo=o("HubertForCTC"),YDo=o(" (Hubert model)"),KDo=l(),w1=a("li"),Wfe=a("strong"),ZDo=o("sew"),eGo=o(" \u2014 "),pG=a("a"),oGo=o("SEWForCTC"),rGo=o(" (SEW model)"),tGo=l(),A1=a("li"),Hfe=a("strong"),aGo=o("sew-d"),nGo=o(" \u2014 "),uG=a("a"),sGo=o("SEWDForCTC"),lGo=o(" (SEW-D model)"),iGo=l(),y1=a("li"),Ufe=a("strong"),dGo=o("unispeech"),cGo=o(" \u2014 "),_G=a("a"),fGo=o("UniSpeechForCTC"),mGo=o(" (UniSpeech model)"),hGo=l(),L1=a("li"),Jfe=a("strong"),gGo=o("unispeech-sat"),pGo=o(" \u2014 "),bG=a("a"),uGo=o("UniSpeechSatForCTC"),_Go=o(" (UniSpeechSat model)"),bGo=l(),x1=a("li"),Yfe=a("strong"),FGo=o("wav2vec2"),vGo=o(" \u2014 "),FG=a("a"),TGo=o("Wav2Vec2ForCTC"),MGo=o(" (Wav2Vec2 model)"),EGo=l(),$1=a("li"),Kfe=a("strong"),CGo=o("wavlm"),wGo=o(" \u2014 "),vG=a("a"),AGo=o("WavLMForCTC"),yGo=o(" (WavLM model)"),LGo=l(),k1=a("p"),xGo=o("The model is set in evaluation mode by default using "),Zfe=a("code"),$Go=o("model.eval()"),kGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),SGo=o("model.train()"),RGo=l(),v(S1.$$.fragment),Fke=l(),ed=a("h2"),R1=a("a"),ome=a("span"),v(wy.$$.fragment),BGo=l(),rme=a("span"),PGo=o("AutoModelForSpeechSeq2Seq"),vke=l(),Oo=a("div"),v(Ay.$$.fragment),IGo=l(),od=a("p"),qGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TG=a("a"),NGo=o("from_pretrained()"),jGo=o(" class method or the "),MG=a("a"),DGo=o("from_config()"),GGo=o(` class
method.`),OGo=l(),yy=a("p"),VGo=o("This class cannot be instantiated directly using "),tme=a("code"),XGo=o("__init__()"),zGo=o(" (throws an error)."),QGo=l(),pt=a("div"),v(Ly.$$.fragment),WGo=l(),ame=a("p"),HGo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UGo=l(),rd=a("p"),JGo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),YGo=o("not"),KGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),ZGo=o("from_pretrained()"),eOo=o(" to load the model weights."),oOo=l(),v(B1.$$.fragment),rOo=l(),lo=a("div"),v(xy.$$.fragment),tOo=l(),sme=a("p"),aOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nOo=l(),ja=a("p"),sOo=o("The model class to instantiate is selected based on the "),lme=a("code"),lOo=o("model_type"),iOo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),dOo=o("pretrained_model_name_or_path"),cOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),fOo=o("pretrained_model_name_or_path"),mOo=o(":"),hOo=l(),$y=a("ul"),P1=a("li"),cme=a("strong"),gOo=o("speech-encoder-decoder"),pOo=o(" \u2014 "),CG=a("a"),uOo=o("SpeechEncoderDecoderModel"),_Oo=o(" (Speech Encoder decoder model)"),bOo=l(),I1=a("li"),fme=a("strong"),FOo=o("speech_to_text"),vOo=o(" \u2014 "),wG=a("a"),TOo=o("Speech2TextForConditionalGeneration"),MOo=o(" (Speech2Text model)"),EOo=l(),q1=a("p"),COo=o("The model is set in evaluation mode by default using "),mme=a("code"),wOo=o("model.eval()"),AOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=a("code"),yOo=o("model.train()"),LOo=l(),v(N1.$$.fragment),Tke=l(),td=a("h2"),j1=a("a"),gme=a("span"),v(ky.$$.fragment),xOo=l(),pme=a("span"),$Oo=o("AutoModelForAudioXVector"),Mke=l(),Vo=a("div"),v(Sy.$$.fragment),kOo=l(),ad=a("p"),SOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AG=a("a"),ROo=o("from_pretrained()"),BOo=o(" class method or the "),yG=a("a"),POo=o("from_config()"),IOo=o(` class
method.`),qOo=l(),Ry=a("p"),NOo=o("This class cannot be instantiated directly using "),ume=a("code"),jOo=o("__init__()"),DOo=o(" (throws an error)."),GOo=l(),ut=a("div"),v(By.$$.fragment),OOo=l(),_me=a("p"),VOo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),XOo=l(),nd=a("p"),zOo=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),QOo=o("not"),WOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),HOo=o("from_pretrained()"),UOo=o(" to load the model weights."),JOo=l(),v(D1.$$.fragment),YOo=l(),io=a("div"),v(Py.$$.fragment),KOo=l(),Fme=a("p"),ZOo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eVo=l(),Da=a("p"),oVo=o("The model class to instantiate is selected based on the "),vme=a("code"),rVo=o("model_type"),tVo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),aVo=o("pretrained_model_name_or_path"),nVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),sVo=o("pretrained_model_name_or_path"),lVo=o(":"),iVo=l(),Ga=a("ul"),G1=a("li"),Eme=a("strong"),dVo=o("data2vec-audio"),cVo=o(" \u2014 "),xG=a("a"),fVo=o("Data2VecAudioForXVector"),mVo=o(" (Data2VecAudio model)"),hVo=l(),O1=a("li"),Cme=a("strong"),gVo=o("unispeech-sat"),pVo=o(" \u2014 "),$G=a("a"),uVo=o("UniSpeechSatForXVector"),_Vo=o(" (UniSpeechSat model)"),bVo=l(),V1=a("li"),wme=a("strong"),FVo=o("wav2vec2"),vVo=o(" \u2014 "),kG=a("a"),TVo=o("Wav2Vec2ForXVector"),MVo=o(" (Wav2Vec2 model)"),EVo=l(),X1=a("li"),Ame=a("strong"),CVo=o("wavlm"),wVo=o(" \u2014 "),SG=a("a"),AVo=o("WavLMForXVector"),yVo=o(" (WavLM model)"),LVo=l(),z1=a("p"),xVo=o("The model is set in evaluation mode by default using "),yme=a("code"),$Vo=o("model.eval()"),kVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),SVo=o("model.train()"),RVo=l(),v(Q1.$$.fragment),Eke=l(),sd=a("h2"),W1=a("a"),xme=a("span"),v(Iy.$$.fragment),BVo=l(),$me=a("span"),PVo=o("AutoModelForMaskedImageModeling"),Cke=l(),Xo=a("div"),v(qy.$$.fragment),IVo=l(),ld=a("p"),qVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RG=a("a"),NVo=o("from_pretrained()"),jVo=o(" class method or the "),BG=a("a"),DVo=o("from_config()"),GVo=o(` class
method.`),OVo=l(),Ny=a("p"),VVo=o("This class cannot be instantiated directly using "),kme=a("code"),XVo=o("__init__()"),zVo=o(" (throws an error)."),QVo=l(),_t=a("div"),v(jy.$$.fragment),WVo=l(),Sme=a("p"),HVo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),UVo=l(),id=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),ZVo=o("from_pretrained()"),eXo=o(" to load the model weights."),oXo=l(),v(H1.$$.fragment),rXo=l(),co=a("div"),v(Dy.$$.fragment),tXo=l(),Bme=a("p"),aXo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nXo=l(),Oa=a("p"),sXo=o("The model class to instantiate is selected based on the "),Pme=a("code"),lXo=o("model_type"),iXo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),fXo=o("pretrained_model_name_or_path"),mXo=o(":"),hXo=l(),dd=a("ul"),U1=a("li"),Nme=a("strong"),gXo=o("deit"),pXo=o(" \u2014 "),IG=a("a"),uXo=o("DeiTForMaskedImageModeling"),_Xo=o(" (DeiT model)"),bXo=l(),J1=a("li"),jme=a("strong"),FXo=o("swin"),vXo=o(" \u2014 "),qG=a("a"),TXo=o("SwinForMaskedImageModeling"),MXo=o(" (Swin model)"),EXo=l(),Y1=a("li"),Dme=a("strong"),CXo=o("vit"),wXo=o(" \u2014 "),NG=a("a"),AXo=o("ViTForMaskedImageModeling"),yXo=o(" (ViT model)"),LXo=l(),K1=a("p"),xXo=o("The model is set in evaluation mode by default using "),Gme=a("code"),$Xo=o("model.eval()"),kXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),SXo=o("model.train()"),RXo=l(),v(Z1.$$.fragment),wke=l(),cd=a("h2"),eT=a("a"),Vme=a("span"),v(Gy.$$.fragment),BXo=l(),Xme=a("span"),PXo=o("AutoModelForObjectDetection"),Ake=l(),zo=a("div"),v(Oy.$$.fragment),IXo=l(),fd=a("p"),qXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jG=a("a"),NXo=o("from_pretrained()"),jXo=o(" class method or the "),DG=a("a"),DXo=o("from_config()"),GXo=o(` class
method.`),OXo=l(),Vy=a("p"),VXo=o("This class cannot be instantiated directly using "),zme=a("code"),XXo=o("__init__()"),zXo=o(" (throws an error)."),QXo=l(),bt=a("div"),v(Xy.$$.fragment),WXo=l(),Qme=a("p"),HXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),UXo=l(),md=a("p"),JXo=o(`Note:
Loading a model from its configuration file does `),Wme=a("strong"),YXo=o("not"),KXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),ZXo=o("from_pretrained()"),ezo=o(" to load the model weights."),ozo=l(),v(oT.$$.fragment),rzo=l(),fo=a("div"),v(zy.$$.fragment),tzo=l(),Hme=a("p"),azo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nzo=l(),Va=a("p"),szo=o("The model class to instantiate is selected based on the "),Ume=a("code"),lzo=o("model_type"),izo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),dzo=o("pretrained_model_name_or_path"),czo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(":"),hzo=l(),Kme=a("ul"),rT=a("li"),Zme=a("strong"),gzo=o("detr"),pzo=o(" \u2014 "),OG=a("a"),uzo=o("DetrForObjectDetection"),_zo=o(" (DETR model)"),bzo=l(),tT=a("p"),Fzo=o("The model is set in evaluation mode by default using "),ehe=a("code"),vzo=o("model.eval()"),Tzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),Mzo=o("model.train()"),Ezo=l(),v(aT.$$.fragment),yke=l(),hd=a("h2"),nT=a("a"),rhe=a("span"),v(Qy.$$.fragment),Czo=l(),the=a("span"),wzo=o("AutoModelForImageSegmentation"),Lke=l(),Qo=a("div"),v(Wy.$$.fragment),Azo=l(),gd=a("p"),yzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),VG=a("a"),Lzo=o("from_pretrained()"),xzo=o(" class method or the "),XG=a("a"),$zo=o("from_config()"),kzo=o(` class
method.`),Szo=l(),Hy=a("p"),Rzo=o("This class cannot be instantiated directly using "),ahe=a("code"),Bzo=o("__init__()"),Pzo=o(" (throws an error)."),Izo=l(),Ft=a("div"),v(Uy.$$.fragment),qzo=l(),nhe=a("p"),Nzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jzo=l(),pd=a("p"),Dzo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),Gzo=o("not"),Ozo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),Vzo=o("from_pretrained()"),Xzo=o(" to load the model weights."),zzo=l(),v(sT.$$.fragment),Qzo=l(),mo=a("div"),v(Jy.$$.fragment),Wzo=l(),lhe=a("p"),Hzo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Uzo=l(),Xa=a("p"),Jzo=o("The model class to instantiate is selected based on the "),ihe=a("code"),Yzo=o("model_type"),Kzo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),oQo=o("pretrained_model_name_or_path"),rQo=o(":"),tQo=l(),fhe=a("ul"),lT=a("li"),mhe=a("strong"),aQo=o("detr"),nQo=o(" \u2014 "),QG=a("a"),sQo=o("DetrForSegmentation"),lQo=o(" (DETR model)"),iQo=l(),iT=a("p"),dQo=o("The model is set in evaluation mode by default using "),hhe=a("code"),cQo=o("model.eval()"),fQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),mQo=o("model.train()"),hQo=l(),v(dT.$$.fragment),xke=l(),ud=a("h2"),cT=a("a"),phe=a("span"),v(Yy.$$.fragment),gQo=l(),uhe=a("span"),pQo=o("AutoModelForSemanticSegmentation"),$ke=l(),Wo=a("div"),v(Ky.$$.fragment),uQo=l(),_d=a("p"),_Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),WG=a("a"),bQo=o("from_pretrained()"),FQo=o(" class method or the "),HG=a("a"),vQo=o("from_config()"),TQo=o(` class
method.`),MQo=l(),Zy=a("p"),EQo=o("This class cannot be instantiated directly using "),_he=a("code"),CQo=o("__init__()"),wQo=o(" (throws an error)."),AQo=l(),vt=a("div"),v(eL.$$.fragment),yQo=l(),bhe=a("p"),LQo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xQo=l(),bd=a("p"),$Qo=o(`Note:
Loading a model from its configuration file does `),Fhe=a("strong"),kQo=o("not"),SQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=a("a"),RQo=o("from_pretrained()"),BQo=o(" to load the model weights."),PQo=l(),v(fT.$$.fragment),IQo=l(),ho=a("div"),v(oL.$$.fragment),qQo=l(),vhe=a("p"),NQo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jQo=l(),za=a("p"),DQo=o("The model class to instantiate is selected based on the "),The=a("code"),GQo=o("model_type"),OQo=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),VQo=o("pretrained_model_name_or_path"),XQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(":"),WQo=l(),rL=a("ul"),mT=a("li"),Che=a("strong"),HQo=o("beit"),UQo=o(" \u2014 "),JG=a("a"),JQo=o("BeitForSemanticSegmentation"),YQo=o(" (BEiT model)"),KQo=l(),hT=a("li"),whe=a("strong"),ZQo=o("segformer"),eWo=o(" \u2014 "),YG=a("a"),oWo=o("SegformerForSemanticSegmentation"),rWo=o(" (SegFormer model)"),tWo=l(),gT=a("p"),aWo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),nWo=o("model.eval()"),sWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),lWo=o("model.train()"),iWo=l(),v(pT.$$.fragment),kke=l(),Fd=a("h2"),uT=a("a"),Lhe=a("span"),v(tL.$$.fragment),dWo=l(),xhe=a("span"),cWo=o("AutoModelForInstanceSegmentation"),Ske=l(),Ho=a("div"),v(aL.$$.fragment),fWo=l(),vd=a("p"),mWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),KG=a("a"),hWo=o("from_pretrained()"),gWo=o(" class method or the "),ZG=a("a"),pWo=o("from_config()"),uWo=o(` class
method.`),_Wo=l(),nL=a("p"),bWo=o("This class cannot be instantiated directly using "),$he=a("code"),FWo=o("__init__()"),vWo=o(" (throws an error)."),TWo=l(),Tt=a("div"),v(sL.$$.fragment),MWo=l(),khe=a("p"),EWo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),CWo=l(),Td=a("p"),wWo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),AWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),LWo=o("from_pretrained()"),xWo=o(" to load the model weights."),$Wo=l(),v(_T.$$.fragment),kWo=l(),go=a("div"),v(lL.$$.fragment),SWo=l(),Rhe=a("p"),RWo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),BWo=l(),Qa=a("p"),PWo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),IWo=o("model_type"),qWo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),NWo=o("pretrained_model_name_or_path"),jWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),DWo=o("pretrained_model_name_or_path"),GWo=o(":"),OWo=l(),qhe=a("ul"),bT=a("li"),Nhe=a("strong"),VWo=o("maskformer"),XWo=o(" \u2014 "),oO=a("a"),zWo=o("MaskFormerForInstanceSegmentation"),QWo=o(" (MaskFormer model)"),WWo=l(),FT=a("p"),HWo=o("The model is set in evaluation mode by default using "),jhe=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),YWo=o("model.train()"),KWo=l(),v(vT.$$.fragment),Rke=l(),Md=a("h2"),TT=a("a"),Ghe=a("span"),v(iL.$$.fragment),ZWo=l(),Ohe=a("span"),eHo=o("TFAutoModel"),Bke=l(),Uo=a("div"),v(dL.$$.fragment),oHo=l(),Ed=a("p"),rHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rO=a("a"),tHo=o("from_pretrained()"),aHo=o(" class method or the "),tO=a("a"),nHo=o("from_config()"),sHo=o(` class
method.`),lHo=l(),cL=a("p"),iHo=o("This class cannot be instantiated directly using "),Vhe=a("code"),dHo=o("__init__()"),cHo=o(" (throws an error)."),fHo=l(),Mt=a("div"),v(fL.$$.fragment),mHo=l(),Xhe=a("p"),hHo=o("Instantiates one of the base model classes of the library from a configuration."),gHo=l(),Cd=a("p"),pHo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),uHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),bHo=o("from_pretrained()"),FHo=o(" to load the model weights."),vHo=l(),v(MT.$$.fragment),THo=l(),Mr=a("div"),v(mL.$$.fragment),MHo=l(),Qhe=a("p"),EHo=o("Instantiate one of the base model classes of the library from a pretrained model."),CHo=l(),Wa=a("p"),wHo=o("The model class to instantiate is selected based on the "),Whe=a("code"),AHo=o("model_type"),yHo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),LHo=o("pretrained_model_name_or_path"),xHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),$Ho=o("pretrained_model_name_or_path"),kHo=o(":"),SHo=l(),j=a("ul"),ET=a("li"),Jhe=a("strong"),RHo=o("albert"),BHo=o(" \u2014 "),nO=a("a"),PHo=o("TFAlbertModel"),IHo=o(" (ALBERT model)"),qHo=l(),CT=a("li"),Yhe=a("strong"),NHo=o("bart"),jHo=o(" \u2014 "),sO=a("a"),DHo=o("TFBartModel"),GHo=o(" (BART model)"),OHo=l(),wT=a("li"),Khe=a("strong"),VHo=o("bert"),XHo=o(" \u2014 "),lO=a("a"),zHo=o("TFBertModel"),QHo=o(" (BERT model)"),WHo=l(),AT=a("li"),Zhe=a("strong"),HHo=o("blenderbot"),UHo=o(" \u2014 "),iO=a("a"),JHo=o("TFBlenderbotModel"),YHo=o(" (Blenderbot model)"),KHo=l(),yT=a("li"),ege=a("strong"),ZHo=o("blenderbot-small"),eUo=o(" \u2014 "),dO=a("a"),oUo=o("TFBlenderbotSmallModel"),rUo=o(" (BlenderbotSmall model)"),tUo=l(),LT=a("li"),oge=a("strong"),aUo=o("camembert"),nUo=o(" \u2014 "),cO=a("a"),sUo=o("TFCamembertModel"),lUo=o(" (CamemBERT model)"),iUo=l(),xT=a("li"),rge=a("strong"),dUo=o("clip"),cUo=o(" \u2014 "),fO=a("a"),fUo=o("TFCLIPModel"),mUo=o(" (CLIP model)"),hUo=l(),$T=a("li"),tge=a("strong"),gUo=o("convbert"),pUo=o(" \u2014 "),mO=a("a"),uUo=o("TFConvBertModel"),_Uo=o(" (ConvBERT model)"),bUo=l(),kT=a("li"),age=a("strong"),FUo=o("convnext"),vUo=o(" \u2014 "),hO=a("a"),TUo=o("TFConvNextModel"),MUo=o(" (ConvNext model)"),EUo=l(),ST=a("li"),nge=a("strong"),CUo=o("ctrl"),wUo=o(" \u2014 "),gO=a("a"),AUo=o("TFCTRLModel"),yUo=o(" (CTRL model)"),LUo=l(),RT=a("li"),sge=a("strong"),xUo=o("deberta"),$Uo=o(" \u2014 "),pO=a("a"),kUo=o("TFDebertaModel"),SUo=o(" (DeBERTa model)"),RUo=l(),BT=a("li"),lge=a("strong"),BUo=o("deberta-v2"),PUo=o(" \u2014 "),uO=a("a"),IUo=o("TFDebertaV2Model"),qUo=o(" (DeBERTa-v2 model)"),NUo=l(),PT=a("li"),ige=a("strong"),jUo=o("distilbert"),DUo=o(" \u2014 "),_O=a("a"),GUo=o("TFDistilBertModel"),OUo=o(" (DistilBERT model)"),VUo=l(),IT=a("li"),dge=a("strong"),XUo=o("dpr"),zUo=o(" \u2014 "),bO=a("a"),QUo=o("TFDPRQuestionEncoder"),WUo=o(" (DPR model)"),HUo=l(),qT=a("li"),cge=a("strong"),UUo=o("electra"),JUo=o(" \u2014 "),FO=a("a"),YUo=o("TFElectraModel"),KUo=o(" (ELECTRA model)"),ZUo=l(),NT=a("li"),fge=a("strong"),eJo=o("flaubert"),oJo=o(" \u2014 "),vO=a("a"),rJo=o("TFFlaubertModel"),tJo=o(" (FlauBERT model)"),aJo=l(),vs=a("li"),mge=a("strong"),nJo=o("funnel"),sJo=o(" \u2014 "),TO=a("a"),lJo=o("TFFunnelModel"),iJo=o(" or "),MO=a("a"),dJo=o("TFFunnelBaseModel"),cJo=o(" (Funnel Transformer model)"),fJo=l(),jT=a("li"),hge=a("strong"),mJo=o("gpt2"),hJo=o(" \u2014 "),EO=a("a"),gJo=o("TFGPT2Model"),pJo=o(" (OpenAI GPT-2 model)"),uJo=l(),DT=a("li"),gge=a("strong"),_Jo=o("hubert"),bJo=o(" \u2014 "),CO=a("a"),FJo=o("TFHubertModel"),vJo=o(" (Hubert model)"),TJo=l(),GT=a("li"),pge=a("strong"),MJo=o("layoutlm"),EJo=o(" \u2014 "),wO=a("a"),CJo=o("TFLayoutLMModel"),wJo=o(" (LayoutLM model)"),AJo=l(),OT=a("li"),uge=a("strong"),yJo=o("led"),LJo=o(" \u2014 "),AO=a("a"),xJo=o("TFLEDModel"),$Jo=o(" (LED model)"),kJo=l(),VT=a("li"),_ge=a("strong"),SJo=o("longformer"),RJo=o(" \u2014 "),yO=a("a"),BJo=o("TFLongformerModel"),PJo=o(" (Longformer model)"),IJo=l(),XT=a("li"),bge=a("strong"),qJo=o("lxmert"),NJo=o(" \u2014 "),LO=a("a"),jJo=o("TFLxmertModel"),DJo=o(" (LXMERT model)"),GJo=l(),zT=a("li"),Fge=a("strong"),OJo=o("marian"),VJo=o(" \u2014 "),xO=a("a"),XJo=o("TFMarianModel"),zJo=o(" (Marian model)"),QJo=l(),QT=a("li"),vge=a("strong"),WJo=o("mbart"),HJo=o(" \u2014 "),$O=a("a"),UJo=o("TFMBartModel"),JJo=o(" (mBART model)"),YJo=l(),WT=a("li"),Tge=a("strong"),KJo=o("mobilebert"),ZJo=o(" \u2014 "),kO=a("a"),eYo=o("TFMobileBertModel"),oYo=o(" (MobileBERT model)"),rYo=l(),HT=a("li"),Mge=a("strong"),tYo=o("mpnet"),aYo=o(" \u2014 "),SO=a("a"),nYo=o("TFMPNetModel"),sYo=o(" (MPNet model)"),lYo=l(),UT=a("li"),Ege=a("strong"),iYo=o("mt5"),dYo=o(" \u2014 "),RO=a("a"),cYo=o("TFMT5Model"),fYo=o(" (mT5 model)"),mYo=l(),JT=a("li"),Cge=a("strong"),hYo=o("openai-gpt"),gYo=o(" \u2014 "),BO=a("a"),pYo=o("TFOpenAIGPTModel"),uYo=o(" (OpenAI GPT model)"),_Yo=l(),YT=a("li"),wge=a("strong"),bYo=o("pegasus"),FYo=o(" \u2014 "),PO=a("a"),vYo=o("TFPegasusModel"),TYo=o(" (Pegasus model)"),MYo=l(),KT=a("li"),Age=a("strong"),EYo=o("rembert"),CYo=o(" \u2014 "),IO=a("a"),wYo=o("TFRemBertModel"),AYo=o(" (RemBERT model)"),yYo=l(),ZT=a("li"),yge=a("strong"),LYo=o("roberta"),xYo=o(" \u2014 "),qO=a("a"),$Yo=o("TFRobertaModel"),kYo=o(" (RoBERTa model)"),SYo=l(),eM=a("li"),Lge=a("strong"),RYo=o("roformer"),BYo=o(" \u2014 "),NO=a("a"),PYo=o("TFRoFormerModel"),IYo=o(" (RoFormer model)"),qYo=l(),oM=a("li"),xge=a("strong"),NYo=o("speech_to_text"),jYo=o(" \u2014 "),jO=a("a"),DYo=o("TFSpeech2TextModel"),GYo=o(" (Speech2Text model)"),OYo=l(),rM=a("li"),$ge=a("strong"),VYo=o("t5"),XYo=o(" \u2014 "),DO=a("a"),zYo=o("TFT5Model"),QYo=o(" (T5 model)"),WYo=l(),tM=a("li"),kge=a("strong"),HYo=o("tapas"),UYo=o(" \u2014 "),GO=a("a"),JYo=o("TFTapasModel"),YYo=o(" (TAPAS model)"),KYo=l(),aM=a("li"),Sge=a("strong"),ZYo=o("transfo-xl"),eKo=o(" \u2014 "),OO=a("a"),oKo=o("TFTransfoXLModel"),rKo=o(" (Transformer-XL model)"),tKo=l(),nM=a("li"),Rge=a("strong"),aKo=o("vit"),nKo=o(" \u2014 "),VO=a("a"),sKo=o("TFViTModel"),lKo=o(" (ViT model)"),iKo=l(),sM=a("li"),Bge=a("strong"),dKo=o("wav2vec2"),cKo=o(" \u2014 "),XO=a("a"),fKo=o("TFWav2Vec2Model"),mKo=o(" (Wav2Vec2 model)"),hKo=l(),lM=a("li"),Pge=a("strong"),gKo=o("xlm"),pKo=o(" \u2014 "),zO=a("a"),uKo=o("TFXLMModel"),_Ko=o(" (XLM model)"),bKo=l(),iM=a("li"),Ige=a("strong"),FKo=o("xlm-roberta"),vKo=o(" \u2014 "),QO=a("a"),TKo=o("TFXLMRobertaModel"),MKo=o(" (XLM-RoBERTa model)"),EKo=l(),dM=a("li"),qge=a("strong"),CKo=o("xlnet"),wKo=o(" \u2014 "),WO=a("a"),AKo=o("TFXLNetModel"),yKo=o(" (XLNet model)"),LKo=l(),v(cM.$$.fragment),Pke=l(),wd=a("h2"),fM=a("a"),Nge=a("span"),v(hL.$$.fragment),xKo=l(),jge=a("span"),$Ko=o("TFAutoModelForPreTraining"),Ike=l(),Jo=a("div"),v(gL.$$.fragment),kKo=l(),Ad=a("p"),SKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),HO=a("a"),RKo=o("from_pretrained()"),BKo=o(" class method or the "),UO=a("a"),PKo=o("from_config()"),IKo=o(` class
method.`),qKo=l(),pL=a("p"),NKo=o("This class cannot be instantiated directly using "),Dge=a("code"),jKo=o("__init__()"),DKo=o(" (throws an error)."),GKo=l(),Et=a("div"),v(uL.$$.fragment),OKo=l(),Gge=a("p"),VKo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XKo=l(),yd=a("p"),zKo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),QKo=o("not"),WKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),HKo=o("from_pretrained()"),UKo=o(" to load the model weights."),JKo=l(),v(mM.$$.fragment),YKo=l(),Er=a("div"),v(_L.$$.fragment),KKo=l(),Vge=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eZo=l(),Ha=a("p"),oZo=o("The model class to instantiate is selected based on the "),Xge=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),ae=a("ul"),hM=a("li"),Wge=a("strong"),dZo=o("albert"),cZo=o(" \u2014 "),YO=a("a"),fZo=o("TFAlbertForPreTraining"),mZo=o(" (ALBERT model)"),hZo=l(),gM=a("li"),Hge=a("strong"),gZo=o("bart"),pZo=o(" \u2014 "),KO=a("a"),uZo=o("TFBartForConditionalGeneration"),_Zo=o(" (BART model)"),bZo=l(),pM=a("li"),Uge=a("strong"),FZo=o("bert"),vZo=o(" \u2014 "),ZO=a("a"),TZo=o("TFBertForPreTraining"),MZo=o(" (BERT model)"),EZo=l(),uM=a("li"),Jge=a("strong"),CZo=o("camembert"),wZo=o(" \u2014 "),eV=a("a"),AZo=o("TFCamembertForMaskedLM"),yZo=o(" (CamemBERT model)"),LZo=l(),_M=a("li"),Yge=a("strong"),xZo=o("ctrl"),$Zo=o(" \u2014 "),oV=a("a"),kZo=o("TFCTRLLMHeadModel"),SZo=o(" (CTRL model)"),RZo=l(),bM=a("li"),Kge=a("strong"),BZo=o("distilbert"),PZo=o(" \u2014 "),rV=a("a"),IZo=o("TFDistilBertForMaskedLM"),qZo=o(" (DistilBERT model)"),NZo=l(),FM=a("li"),Zge=a("strong"),jZo=o("electra"),DZo=o(" \u2014 "),tV=a("a"),GZo=o("TFElectraForPreTraining"),OZo=o(" (ELECTRA model)"),VZo=l(),vM=a("li"),epe=a("strong"),XZo=o("flaubert"),zZo=o(" \u2014 "),aV=a("a"),QZo=o("TFFlaubertWithLMHeadModel"),WZo=o(" (FlauBERT model)"),HZo=l(),TM=a("li"),ope=a("strong"),UZo=o("funnel"),JZo=o(" \u2014 "),nV=a("a"),YZo=o("TFFunnelForPreTraining"),KZo=o(" (Funnel Transformer model)"),ZZo=l(),MM=a("li"),rpe=a("strong"),eer=o("gpt2"),oer=o(" \u2014 "),sV=a("a"),rer=o("TFGPT2LMHeadModel"),ter=o(" (OpenAI GPT-2 model)"),aer=l(),EM=a("li"),tpe=a("strong"),ner=o("layoutlm"),ser=o(" \u2014 "),lV=a("a"),ler=o("TFLayoutLMForMaskedLM"),ier=o(" (LayoutLM model)"),der=l(),CM=a("li"),ape=a("strong"),cer=o("lxmert"),fer=o(" \u2014 "),iV=a("a"),mer=o("TFLxmertForPreTraining"),her=o(" (LXMERT model)"),ger=l(),wM=a("li"),npe=a("strong"),per=o("mobilebert"),uer=o(" \u2014 "),dV=a("a"),_er=o("TFMobileBertForPreTraining"),ber=o(" (MobileBERT model)"),Fer=l(),AM=a("li"),spe=a("strong"),ver=o("mpnet"),Ter=o(" \u2014 "),cV=a("a"),Mer=o("TFMPNetForMaskedLM"),Eer=o(" (MPNet model)"),Cer=l(),yM=a("li"),lpe=a("strong"),wer=o("openai-gpt"),Aer=o(" \u2014 "),fV=a("a"),yer=o("TFOpenAIGPTLMHeadModel"),Ler=o(" (OpenAI GPT model)"),xer=l(),LM=a("li"),ipe=a("strong"),$er=o("roberta"),ker=o(" \u2014 "),mV=a("a"),Ser=o("TFRobertaForMaskedLM"),Rer=o(" (RoBERTa model)"),Ber=l(),xM=a("li"),dpe=a("strong"),Per=o("t5"),Ier=o(" \u2014 "),hV=a("a"),qer=o("TFT5ForConditionalGeneration"),Ner=o(" (T5 model)"),jer=l(),$M=a("li"),cpe=a("strong"),Der=o("tapas"),Ger=o(" \u2014 "),gV=a("a"),Oer=o("TFTapasForMaskedLM"),Ver=o(" (TAPAS model)"),Xer=l(),kM=a("li"),fpe=a("strong"),zer=o("transfo-xl"),Qer=o(" \u2014 "),pV=a("a"),Wer=o("TFTransfoXLLMHeadModel"),Her=o(" (Transformer-XL model)"),Uer=l(),SM=a("li"),mpe=a("strong"),Jer=o("xlm"),Yer=o(" \u2014 "),uV=a("a"),Ker=o("TFXLMWithLMHeadModel"),Zer=o(" (XLM model)"),eor=l(),RM=a("li"),hpe=a("strong"),oor=o("xlm-roberta"),ror=o(" \u2014 "),_V=a("a"),tor=o("TFXLMRobertaForMaskedLM"),aor=o(" (XLM-RoBERTa model)"),nor=l(),BM=a("li"),gpe=a("strong"),sor=o("xlnet"),lor=o(" \u2014 "),bV=a("a"),ior=o("TFXLNetLMHeadModel"),dor=o(" (XLNet model)"),cor=l(),v(PM.$$.fragment),qke=l(),Ld=a("h2"),IM=a("a"),ppe=a("span"),v(bL.$$.fragment),mor=l(),upe=a("span"),hor=o("TFAutoModelForCausalLM"),Nke=l(),Yo=a("div"),v(FL.$$.fragment),gor=l(),xd=a("p"),por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FV=a("a"),uor=o("from_pretrained()"),_or=o(" class method or the "),vV=a("a"),bor=o("from_config()"),For=o(` class
method.`),vor=l(),vL=a("p"),Tor=o("This class cannot be instantiated directly using "),_pe=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),Cor=l(),Ct=a("div"),v(TL.$$.fragment),wor=l(),bpe=a("p"),Aor=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yor=l(),$d=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),xor=o("not"),$or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),kor=o("from_pretrained()"),Sor=o(" to load the model weights."),Ror=l(),v(qM.$$.fragment),Bor=l(),Cr=a("div"),v(ML.$$.fragment),Por=l(),vpe=a("p"),Ior=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qor=l(),Ua=a("p"),Nor=o("The model class to instantiate is selected based on the "),Tpe=a("code"),jor=o("model_type"),Dor=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(":"),zor=l(),ve=a("ul"),NM=a("li"),Cpe=a("strong"),Qor=o("bert"),Wor=o(" \u2014 "),MV=a("a"),Hor=o("TFBertLMHeadModel"),Uor=o(" (BERT model)"),Jor=l(),jM=a("li"),wpe=a("strong"),Yor=o("camembert"),Kor=o(" \u2014 "),EV=a("a"),Zor=o("TFCamembertForCausalLM"),err=o(" (CamemBERT model)"),orr=l(),DM=a("li"),Ape=a("strong"),rrr=o("ctrl"),trr=o(" \u2014 "),CV=a("a"),arr=o("TFCTRLLMHeadModel"),nrr=o(" (CTRL model)"),srr=l(),GM=a("li"),ype=a("strong"),lrr=o("gpt2"),irr=o(" \u2014 "),wV=a("a"),drr=o("TFGPT2LMHeadModel"),crr=o(" (OpenAI GPT-2 model)"),frr=l(),OM=a("li"),Lpe=a("strong"),mrr=o("openai-gpt"),hrr=o(" \u2014 "),AV=a("a"),grr=o("TFOpenAIGPTLMHeadModel"),prr=o(" (OpenAI GPT model)"),urr=l(),VM=a("li"),xpe=a("strong"),_rr=o("rembert"),brr=o(" \u2014 "),yV=a("a"),Frr=o("TFRemBertForCausalLM"),vrr=o(" (RemBERT model)"),Trr=l(),XM=a("li"),$pe=a("strong"),Mrr=o("roberta"),Err=o(" \u2014 "),LV=a("a"),Crr=o("TFRobertaForCausalLM"),wrr=o(" (RoBERTa model)"),Arr=l(),zM=a("li"),kpe=a("strong"),yrr=o("roformer"),Lrr=o(" \u2014 "),xV=a("a"),xrr=o("TFRoFormerForCausalLM"),$rr=o(" (RoFormer model)"),krr=l(),QM=a("li"),Spe=a("strong"),Srr=o("transfo-xl"),Rrr=o(" \u2014 "),$V=a("a"),Brr=o("TFTransfoXLLMHeadModel"),Prr=o(" (Transformer-XL model)"),Irr=l(),WM=a("li"),Rpe=a("strong"),qrr=o("xlm"),Nrr=o(" \u2014 "),kV=a("a"),jrr=o("TFXLMWithLMHeadModel"),Drr=o(" (XLM model)"),Grr=l(),HM=a("li"),Bpe=a("strong"),Orr=o("xlnet"),Vrr=o(" \u2014 "),SV=a("a"),Xrr=o("TFXLNetLMHeadModel"),zrr=o(" (XLNet model)"),Qrr=l(),v(UM.$$.fragment),jke=l(),kd=a("h2"),JM=a("a"),Ppe=a("span"),v(EL.$$.fragment),Wrr=l(),Ipe=a("span"),Hrr=o("TFAutoModelForImageClassification"),Dke=l(),Ko=a("div"),v(CL.$$.fragment),Urr=l(),Sd=a("p"),Jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=a("a"),Yrr=o("from_pretrained()"),Krr=o(" class method or the "),BV=a("a"),Zrr=o("from_config()"),etr=o(` class
method.`),otr=l(),wL=a("p"),rtr=o("This class cannot be instantiated directly using "),qpe=a("code"),ttr=o("__init__()"),atr=o(" (throws an error)."),ntr=l(),wt=a("div"),v(AL.$$.fragment),str=l(),Npe=a("p"),ltr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),itr=l(),Rd=a("p"),dtr=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),ctr=o("not"),ftr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),mtr=o("from_pretrained()"),htr=o(" to load the model weights."),gtr=l(),v(YM.$$.fragment),ptr=l(),wr=a("div"),v(yL.$$.fragment),utr=l(),Dpe=a("p"),_tr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),btr=l(),Ja=a("p"),Ftr=o("The model class to instantiate is selected based on the "),Gpe=a("code"),vtr=o("model_type"),Ttr=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),Mtr=o("pretrained_model_name_or_path"),Etr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),Ctr=o("pretrained_model_name_or_path"),wtr=o(":"),Atr=l(),LL=a("ul"),KM=a("li"),Xpe=a("strong"),ytr=o("convnext"),Ltr=o(" \u2014 "),IV=a("a"),xtr=o("TFConvNextForImageClassification"),$tr=o(" (ConvNext model)"),ktr=l(),ZM=a("li"),zpe=a("strong"),Str=o("vit"),Rtr=o(" \u2014 "),qV=a("a"),Btr=o("TFViTForImageClassification"),Ptr=o(" (ViT model)"),Itr=l(),v(e4.$$.fragment),Gke=l(),Bd=a("h2"),o4=a("a"),Qpe=a("span"),v(xL.$$.fragment),qtr=l(),Wpe=a("span"),Ntr=o("TFAutoModelForMaskedLM"),Oke=l(),Zo=a("div"),v($L.$$.fragment),jtr=l(),Pd=a("p"),Dtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NV=a("a"),Gtr=o("from_pretrained()"),Otr=o(" class method or the "),jV=a("a"),Vtr=o("from_config()"),Xtr=o(` class
method.`),ztr=l(),kL=a("p"),Qtr=o("This class cannot be instantiated directly using "),Hpe=a("code"),Wtr=o("__init__()"),Htr=o(" (throws an error)."),Utr=l(),At=a("div"),v(SL.$$.fragment),Jtr=l(),Upe=a("p"),Ytr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ktr=l(),Id=a("p"),Ztr=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),ear=o("not"),oar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),rar=o("from_pretrained()"),tar=o(" to load the model weights."),aar=l(),v(r4.$$.fragment),nar=l(),Ar=a("div"),v(RL.$$.fragment),sar=l(),Ype=a("p"),lar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iar=l(),Ya=a("p"),dar=o("The model class to instantiate is selected based on the "),Kpe=a("code"),car=o("model_type"),far=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),mar=o("pretrained_model_name_or_path"),har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),gar=o("pretrained_model_name_or_path"),par=o(":"),uar=l(),se=a("ul"),t4=a("li"),oue=a("strong"),_ar=o("albert"),bar=o(" \u2014 "),GV=a("a"),Far=o("TFAlbertForMaskedLM"),Tar=o(" (ALBERT model)"),Mar=l(),a4=a("li"),rue=a("strong"),Ear=o("bert"),Car=o(" \u2014 "),OV=a("a"),war=o("TFBertForMaskedLM"),Aar=o(" (BERT model)"),yar=l(),n4=a("li"),tue=a("strong"),Lar=o("camembert"),xar=o(" \u2014 "),VV=a("a"),$ar=o("TFCamembertForMaskedLM"),kar=o(" (CamemBERT model)"),Sar=l(),s4=a("li"),aue=a("strong"),Rar=o("convbert"),Bar=o(" \u2014 "),XV=a("a"),Par=o("TFConvBertForMaskedLM"),Iar=o(" (ConvBERT model)"),qar=l(),l4=a("li"),nue=a("strong"),Nar=o("deberta"),jar=o(" \u2014 "),zV=a("a"),Dar=o("TFDebertaForMaskedLM"),Gar=o(" (DeBERTa model)"),Oar=l(),i4=a("li"),sue=a("strong"),Var=o("deberta-v2"),Xar=o(" \u2014 "),QV=a("a"),zar=o("TFDebertaV2ForMaskedLM"),Qar=o(" (DeBERTa-v2 model)"),War=l(),d4=a("li"),lue=a("strong"),Har=o("distilbert"),Uar=o(" \u2014 "),WV=a("a"),Jar=o("TFDistilBertForMaskedLM"),Yar=o(" (DistilBERT model)"),Kar=l(),c4=a("li"),iue=a("strong"),Zar=o("electra"),enr=o(" \u2014 "),HV=a("a"),onr=o("TFElectraForMaskedLM"),rnr=o(" (ELECTRA model)"),tnr=l(),f4=a("li"),due=a("strong"),anr=o("flaubert"),nnr=o(" \u2014 "),UV=a("a"),snr=o("TFFlaubertWithLMHeadModel"),lnr=o(" (FlauBERT model)"),inr=l(),m4=a("li"),cue=a("strong"),dnr=o("funnel"),cnr=o(" \u2014 "),JV=a("a"),fnr=o("TFFunnelForMaskedLM"),mnr=o(" (Funnel Transformer model)"),hnr=l(),h4=a("li"),fue=a("strong"),gnr=o("layoutlm"),pnr=o(" \u2014 "),YV=a("a"),unr=o("TFLayoutLMForMaskedLM"),_nr=o(" (LayoutLM model)"),bnr=l(),g4=a("li"),mue=a("strong"),Fnr=o("longformer"),vnr=o(" \u2014 "),KV=a("a"),Tnr=o("TFLongformerForMaskedLM"),Mnr=o(" (Longformer model)"),Enr=l(),p4=a("li"),hue=a("strong"),Cnr=o("mobilebert"),wnr=o(" \u2014 "),ZV=a("a"),Anr=o("TFMobileBertForMaskedLM"),ynr=o(" (MobileBERT model)"),Lnr=l(),u4=a("li"),gue=a("strong"),xnr=o("mpnet"),$nr=o(" \u2014 "),eX=a("a"),knr=o("TFMPNetForMaskedLM"),Snr=o(" (MPNet model)"),Rnr=l(),_4=a("li"),pue=a("strong"),Bnr=o("rembert"),Pnr=o(" \u2014 "),oX=a("a"),Inr=o("TFRemBertForMaskedLM"),qnr=o(" (RemBERT model)"),Nnr=l(),b4=a("li"),uue=a("strong"),jnr=o("roberta"),Dnr=o(" \u2014 "),rX=a("a"),Gnr=o("TFRobertaForMaskedLM"),Onr=o(" (RoBERTa model)"),Vnr=l(),F4=a("li"),_ue=a("strong"),Xnr=o("roformer"),znr=o(" \u2014 "),tX=a("a"),Qnr=o("TFRoFormerForMaskedLM"),Wnr=o(" (RoFormer model)"),Hnr=l(),v4=a("li"),bue=a("strong"),Unr=o("tapas"),Jnr=o(" \u2014 "),aX=a("a"),Ynr=o("TFTapasForMaskedLM"),Knr=o(" (TAPAS model)"),Znr=l(),T4=a("li"),Fue=a("strong"),esr=o("xlm"),osr=o(" \u2014 "),nX=a("a"),rsr=o("TFXLMWithLMHeadModel"),tsr=o(" (XLM model)"),asr=l(),M4=a("li"),vue=a("strong"),nsr=o("xlm-roberta"),ssr=o(" \u2014 "),sX=a("a"),lsr=o("TFXLMRobertaForMaskedLM"),isr=o(" (XLM-RoBERTa model)"),dsr=l(),v(E4.$$.fragment),Vke=l(),qd=a("h2"),C4=a("a"),Tue=a("span"),v(BL.$$.fragment),csr=l(),Mue=a("span"),fsr=o("TFAutoModelForSeq2SeqLM"),Xke=l(),er=a("div"),v(PL.$$.fragment),msr=l(),Nd=a("p"),hsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lX=a("a"),gsr=o("from_pretrained()"),psr=o(" class method or the "),iX=a("a"),usr=o("from_config()"),_sr=o(` class
method.`),bsr=l(),IL=a("p"),Fsr=o("This class cannot be instantiated directly using "),Eue=a("code"),vsr=o("__init__()"),Tsr=o(" (throws an error)."),Msr=l(),yt=a("div"),v(qL.$$.fragment),Esr=l(),Cue=a("p"),Csr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wsr=l(),jd=a("p"),Asr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),ysr=o("not"),Lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),xsr=o("from_pretrained()"),$sr=o(" to load the model weights."),ksr=l(),v(w4.$$.fragment),Ssr=l(),yr=a("div"),v(NL.$$.fragment),Rsr=l(),Aue=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Psr=l(),Ka=a("p"),Isr=o("The model class to instantiate is selected based on the "),yue=a("code"),qsr=o("model_type"),Nsr=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(":"),Vsr=l(),Ee=a("ul"),A4=a("li"),$ue=a("strong"),Xsr=o("bart"),zsr=o(" \u2014 "),cX=a("a"),Qsr=o("TFBartForConditionalGeneration"),Wsr=o(" (BART model)"),Hsr=l(),y4=a("li"),kue=a("strong"),Usr=o("blenderbot"),Jsr=o(" \u2014 "),fX=a("a"),Ysr=o("TFBlenderbotForConditionalGeneration"),Ksr=o(" (Blenderbot model)"),Zsr=l(),L4=a("li"),Sue=a("strong"),elr=o("blenderbot-small"),olr=o(" \u2014 "),mX=a("a"),rlr=o("TFBlenderbotSmallForConditionalGeneration"),tlr=o(" (BlenderbotSmall model)"),alr=l(),x4=a("li"),Rue=a("strong"),nlr=o("encoder-decoder"),slr=o(" \u2014 "),hX=a("a"),llr=o("TFEncoderDecoderModel"),ilr=o(" (Encoder decoder model)"),dlr=l(),$4=a("li"),Bue=a("strong"),clr=o("led"),flr=o(" \u2014 "),gX=a("a"),mlr=o("TFLEDForConditionalGeneration"),hlr=o(" (LED model)"),glr=l(),k4=a("li"),Pue=a("strong"),plr=o("marian"),ulr=o(" \u2014 "),pX=a("a"),_lr=o("TFMarianMTModel"),blr=o(" (Marian model)"),Flr=l(),S4=a("li"),Iue=a("strong"),vlr=o("mbart"),Tlr=o(" \u2014 "),uX=a("a"),Mlr=o("TFMBartForConditionalGeneration"),Elr=o(" (mBART model)"),Clr=l(),R4=a("li"),que=a("strong"),wlr=o("mt5"),Alr=o(" \u2014 "),_X=a("a"),ylr=o("TFMT5ForConditionalGeneration"),Llr=o(" (mT5 model)"),xlr=l(),B4=a("li"),Nue=a("strong"),$lr=o("pegasus"),klr=o(" \u2014 "),bX=a("a"),Slr=o("TFPegasusForConditionalGeneration"),Rlr=o(" (Pegasus model)"),Blr=l(),P4=a("li"),jue=a("strong"),Plr=o("t5"),Ilr=o(" \u2014 "),FX=a("a"),qlr=o("TFT5ForConditionalGeneration"),Nlr=o(" (T5 model)"),jlr=l(),v(I4.$$.fragment),zke=l(),Dd=a("h2"),q4=a("a"),Due=a("span"),v(jL.$$.fragment),Dlr=l(),Gue=a("span"),Glr=o("TFAutoModelForSequenceClassification"),Qke=l(),or=a("div"),v(DL.$$.fragment),Olr=l(),Gd=a("p"),Vlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vX=a("a"),Xlr=o("from_pretrained()"),zlr=o(" class method or the "),TX=a("a"),Qlr=o("from_config()"),Wlr=o(` class
method.`),Hlr=l(),GL=a("p"),Ulr=o("This class cannot be instantiated directly using "),Oue=a("code"),Jlr=o("__init__()"),Ylr=o(" (throws an error)."),Klr=l(),Lt=a("div"),v(OL.$$.fragment),Zlr=l(),Vue=a("p"),eir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oir=l(),Od=a("p"),rir=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),tir=o("not"),air=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),nir=o("from_pretrained()"),sir=o(" to load the model weights."),lir=l(),v(N4.$$.fragment),iir=l(),Lr=a("div"),v(VL.$$.fragment),dir=l(),zue=a("p"),cir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fir=l(),Za=a("p"),mir=o("The model class to instantiate is selected based on the "),Que=a("code"),hir=o("model_type"),gir=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),pir=o("pretrained_model_name_or_path"),uir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),_ir=o("pretrained_model_name_or_path"),bir=o(":"),Fir=l(),ee=a("ul"),j4=a("li"),Uue=a("strong"),vir=o("albert"),Tir=o(" \u2014 "),EX=a("a"),Mir=o("TFAlbertForSequenceClassification"),Eir=o(" (ALBERT model)"),Cir=l(),D4=a("li"),Jue=a("strong"),wir=o("bert"),Air=o(" \u2014 "),CX=a("a"),yir=o("TFBertForSequenceClassification"),Lir=o(" (BERT model)"),xir=l(),G4=a("li"),Yue=a("strong"),$ir=o("camembert"),kir=o(" \u2014 "),wX=a("a"),Sir=o("TFCamembertForSequenceClassification"),Rir=o(" (CamemBERT model)"),Bir=l(),O4=a("li"),Kue=a("strong"),Pir=o("convbert"),Iir=o(" \u2014 "),AX=a("a"),qir=o("TFConvBertForSequenceClassification"),Nir=o(" (ConvBERT model)"),jir=l(),V4=a("li"),Zue=a("strong"),Dir=o("ctrl"),Gir=o(" \u2014 "),yX=a("a"),Oir=o("TFCTRLForSequenceClassification"),Vir=o(" (CTRL model)"),Xir=l(),X4=a("li"),e_e=a("strong"),zir=o("deberta"),Qir=o(" \u2014 "),LX=a("a"),Wir=o("TFDebertaForSequenceClassification"),Hir=o(" (DeBERTa model)"),Uir=l(),z4=a("li"),o_e=a("strong"),Jir=o("deberta-v2"),Yir=o(" \u2014 "),xX=a("a"),Kir=o("TFDebertaV2ForSequenceClassification"),Zir=o(" (DeBERTa-v2 model)"),edr=l(),Q4=a("li"),r_e=a("strong"),odr=o("distilbert"),rdr=o(" \u2014 "),$X=a("a"),tdr=o("TFDistilBertForSequenceClassification"),adr=o(" (DistilBERT model)"),ndr=l(),W4=a("li"),t_e=a("strong"),sdr=o("electra"),ldr=o(" \u2014 "),kX=a("a"),idr=o("TFElectraForSequenceClassification"),ddr=o(" (ELECTRA model)"),cdr=l(),H4=a("li"),a_e=a("strong"),fdr=o("flaubert"),mdr=o(" \u2014 "),SX=a("a"),hdr=o("TFFlaubertForSequenceClassification"),gdr=o(" (FlauBERT model)"),pdr=l(),U4=a("li"),n_e=a("strong"),udr=o("funnel"),_dr=o(" \u2014 "),RX=a("a"),bdr=o("TFFunnelForSequenceClassification"),Fdr=o(" (Funnel Transformer model)"),vdr=l(),J4=a("li"),s_e=a("strong"),Tdr=o("gpt2"),Mdr=o(" \u2014 "),BX=a("a"),Edr=o("TFGPT2ForSequenceClassification"),Cdr=o(" (OpenAI GPT-2 model)"),wdr=l(),Y4=a("li"),l_e=a("strong"),Adr=o("layoutlm"),ydr=o(" \u2014 "),PX=a("a"),Ldr=o("TFLayoutLMForSequenceClassification"),xdr=o(" (LayoutLM model)"),$dr=l(),K4=a("li"),i_e=a("strong"),kdr=o("longformer"),Sdr=o(" \u2014 "),IX=a("a"),Rdr=o("TFLongformerForSequenceClassification"),Bdr=o(" (Longformer model)"),Pdr=l(),Z4=a("li"),d_e=a("strong"),Idr=o("mobilebert"),qdr=o(" \u2014 "),qX=a("a"),Ndr=o("TFMobileBertForSequenceClassification"),jdr=o(" (MobileBERT model)"),Ddr=l(),eE=a("li"),c_e=a("strong"),Gdr=o("mpnet"),Odr=o(" \u2014 "),NX=a("a"),Vdr=o("TFMPNetForSequenceClassification"),Xdr=o(" (MPNet model)"),zdr=l(),oE=a("li"),f_e=a("strong"),Qdr=o("openai-gpt"),Wdr=o(" \u2014 "),jX=a("a"),Hdr=o("TFOpenAIGPTForSequenceClassification"),Udr=o(" (OpenAI GPT model)"),Jdr=l(),rE=a("li"),m_e=a("strong"),Ydr=o("rembert"),Kdr=o(" \u2014 "),DX=a("a"),Zdr=o("TFRemBertForSequenceClassification"),ecr=o(" (RemBERT model)"),ocr=l(),tE=a("li"),h_e=a("strong"),rcr=o("roberta"),tcr=o(" \u2014 "),GX=a("a"),acr=o("TFRobertaForSequenceClassification"),ncr=o(" (RoBERTa model)"),scr=l(),aE=a("li"),g_e=a("strong"),lcr=o("roformer"),icr=o(" \u2014 "),OX=a("a"),dcr=o("TFRoFormerForSequenceClassification"),ccr=o(" (RoFormer model)"),fcr=l(),nE=a("li"),p_e=a("strong"),mcr=o("tapas"),hcr=o(" \u2014 "),VX=a("a"),gcr=o("TFTapasForSequenceClassification"),pcr=o(" (TAPAS model)"),ucr=l(),sE=a("li"),u_e=a("strong"),_cr=o("transfo-xl"),bcr=o(" \u2014 "),XX=a("a"),Fcr=o("TFTransfoXLForSequenceClassification"),vcr=o(" (Transformer-XL model)"),Tcr=l(),lE=a("li"),__e=a("strong"),Mcr=o("xlm"),Ecr=o(" \u2014 "),zX=a("a"),Ccr=o("TFXLMForSequenceClassification"),wcr=o(" (XLM model)"),Acr=l(),iE=a("li"),b_e=a("strong"),ycr=o("xlm-roberta"),Lcr=o(" \u2014 "),QX=a("a"),xcr=o("TFXLMRobertaForSequenceClassification"),$cr=o(" (XLM-RoBERTa model)"),kcr=l(),dE=a("li"),F_e=a("strong"),Scr=o("xlnet"),Rcr=o(" \u2014 "),WX=a("a"),Bcr=o("TFXLNetForSequenceClassification"),Pcr=o(" (XLNet model)"),Icr=l(),v(cE.$$.fragment),Wke=l(),Vd=a("h2"),fE=a("a"),v_e=a("span"),v(XL.$$.fragment),qcr=l(),T_e=a("span"),Ncr=o("TFAutoModelForMultipleChoice"),Hke=l(),rr=a("div"),v(zL.$$.fragment),jcr=l(),Xd=a("p"),Dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HX=a("a"),Gcr=o("from_pretrained()"),Ocr=o(" class method or the "),UX=a("a"),Vcr=o("from_config()"),Xcr=o(` class
method.`),zcr=l(),QL=a("p"),Qcr=o("This class cannot be instantiated directly using "),M_e=a("code"),Wcr=o("__init__()"),Hcr=o(" (throws an error)."),Ucr=l(),xt=a("div"),v(WL.$$.fragment),Jcr=l(),E_e=a("p"),Ycr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kcr=l(),zd=a("p"),Zcr=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),efr=o("not"),ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),rfr=o("from_pretrained()"),tfr=o(" to load the model weights."),afr=l(),v(mE.$$.fragment),nfr=l(),xr=a("div"),v(HL.$$.fragment),sfr=l(),w_e=a("p"),lfr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ifr=l(),en=a("p"),dfr=o("The model class to instantiate is selected based on the "),A_e=a("code"),cfr=o("model_type"),ffr=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),mfr=o("pretrained_model_name_or_path"),hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=a("code"),gfr=o("pretrained_model_name_or_path"),pfr=o(":"),ufr=l(),he=a("ul"),hE=a("li"),x_e=a("strong"),_fr=o("albert"),bfr=o(" \u2014 "),YX=a("a"),Ffr=o("TFAlbertForMultipleChoice"),vfr=o(" (ALBERT model)"),Tfr=l(),gE=a("li"),$_e=a("strong"),Mfr=o("bert"),Efr=o(" \u2014 "),KX=a("a"),Cfr=o("TFBertForMultipleChoice"),wfr=o(" (BERT model)"),Afr=l(),pE=a("li"),k_e=a("strong"),yfr=o("camembert"),Lfr=o(" \u2014 "),ZX=a("a"),xfr=o("TFCamembertForMultipleChoice"),$fr=o(" (CamemBERT model)"),kfr=l(),uE=a("li"),S_e=a("strong"),Sfr=o("convbert"),Rfr=o(" \u2014 "),ez=a("a"),Bfr=o("TFConvBertForMultipleChoice"),Pfr=o(" (ConvBERT model)"),Ifr=l(),_E=a("li"),R_e=a("strong"),qfr=o("distilbert"),Nfr=o(" \u2014 "),oz=a("a"),jfr=o("TFDistilBertForMultipleChoice"),Dfr=o(" (DistilBERT model)"),Gfr=l(),bE=a("li"),B_e=a("strong"),Ofr=o("electra"),Vfr=o(" \u2014 "),rz=a("a"),Xfr=o("TFElectraForMultipleChoice"),zfr=o(" (ELECTRA model)"),Qfr=l(),FE=a("li"),P_e=a("strong"),Wfr=o("flaubert"),Hfr=o(" \u2014 "),tz=a("a"),Ufr=o("TFFlaubertForMultipleChoice"),Jfr=o(" (FlauBERT model)"),Yfr=l(),vE=a("li"),I_e=a("strong"),Kfr=o("funnel"),Zfr=o(" \u2014 "),az=a("a"),emr=o("TFFunnelForMultipleChoice"),omr=o(" (Funnel Transformer model)"),rmr=l(),TE=a("li"),q_e=a("strong"),tmr=o("longformer"),amr=o(" \u2014 "),nz=a("a"),nmr=o("TFLongformerForMultipleChoice"),smr=o(" (Longformer model)"),lmr=l(),ME=a("li"),N_e=a("strong"),imr=o("mobilebert"),dmr=o(" \u2014 "),sz=a("a"),cmr=o("TFMobileBertForMultipleChoice"),fmr=o(" (MobileBERT model)"),mmr=l(),EE=a("li"),j_e=a("strong"),hmr=o("mpnet"),gmr=o(" \u2014 "),lz=a("a"),pmr=o("TFMPNetForMultipleChoice"),umr=o(" (MPNet model)"),_mr=l(),CE=a("li"),D_e=a("strong"),bmr=o("rembert"),Fmr=o(" \u2014 "),iz=a("a"),vmr=o("TFRemBertForMultipleChoice"),Tmr=o(" (RemBERT model)"),Mmr=l(),wE=a("li"),G_e=a("strong"),Emr=o("roberta"),Cmr=o(" \u2014 "),dz=a("a"),wmr=o("TFRobertaForMultipleChoice"),Amr=o(" (RoBERTa model)"),ymr=l(),AE=a("li"),O_e=a("strong"),Lmr=o("roformer"),xmr=o(" \u2014 "),cz=a("a"),$mr=o("TFRoFormerForMultipleChoice"),kmr=o(" (RoFormer model)"),Smr=l(),yE=a("li"),V_e=a("strong"),Rmr=o("xlm"),Bmr=o(" \u2014 "),fz=a("a"),Pmr=o("TFXLMForMultipleChoice"),Imr=o(" (XLM model)"),qmr=l(),LE=a("li"),X_e=a("strong"),Nmr=o("xlm-roberta"),jmr=o(" \u2014 "),mz=a("a"),Dmr=o("TFXLMRobertaForMultipleChoice"),Gmr=o(" (XLM-RoBERTa model)"),Omr=l(),xE=a("li"),z_e=a("strong"),Vmr=o("xlnet"),Xmr=o(" \u2014 "),hz=a("a"),zmr=o("TFXLNetForMultipleChoice"),Qmr=o(" (XLNet model)"),Wmr=l(),v($E.$$.fragment),Uke=l(),Qd=a("h2"),kE=a("a"),Q_e=a("span"),v(UL.$$.fragment),Hmr=l(),W_e=a("span"),Umr=o("TFAutoModelForTableQuestionAnswering"),Jke=l(),tr=a("div"),v(JL.$$.fragment),Jmr=l(),Wd=a("p"),Ymr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gz=a("a"),Kmr=o("from_pretrained()"),Zmr=o(" class method or the "),pz=a("a"),ehr=o("from_config()"),ohr=o(` class
method.`),rhr=l(),YL=a("p"),thr=o("This class cannot be instantiated directly using "),H_e=a("code"),ahr=o("__init__()"),nhr=o(" (throws an error)."),shr=l(),$t=a("div"),v(KL.$$.fragment),lhr=l(),U_e=a("p"),ihr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dhr=l(),Hd=a("p"),chr=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),fhr=o("not"),mhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),hhr=o("from_pretrained()"),ghr=o(" to load the model weights."),phr=l(),v(SE.$$.fragment),uhr=l(),$r=a("div"),v(ZL.$$.fragment),_hr=l(),Y_e=a("p"),bhr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fhr=l(),on=a("p"),vhr=o("The model class to instantiate is selected based on the "),K_e=a("code"),Thr=o("model_type"),Mhr=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(":"),yhr=l(),obe=a("ul"),RE=a("li"),rbe=a("strong"),Lhr=o("tapas"),xhr=o(" \u2014 "),_z=a("a"),$hr=o("TFTapasForQuestionAnswering"),khr=o(" (TAPAS model)"),Shr=l(),v(BE.$$.fragment),Yke=l(),Ud=a("h2"),PE=a("a"),tbe=a("span"),v(e8.$$.fragment),Rhr=l(),abe=a("span"),Bhr=o("TFAutoModelForTokenClassification"),Kke=l(),ar=a("div"),v(o8.$$.fragment),Phr=l(),Jd=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bz=a("a"),qhr=o("from_pretrained()"),Nhr=o(" class method or the "),Fz=a("a"),jhr=o("from_config()"),Dhr=o(` class
method.`),Ghr=l(),r8=a("p"),Ohr=o("This class cannot be instantiated directly using "),nbe=a("code"),Vhr=o("__init__()"),Xhr=o(" (throws an error)."),zhr=l(),kt=a("div"),v(t8.$$.fragment),Qhr=l(),sbe=a("p"),Whr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hhr=l(),Yd=a("p"),Uhr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),Khr=o("from_pretrained()"),Zhr=o(" to load the model weights."),egr=l(),v(IE.$$.fragment),ogr=l(),kr=a("div"),v(a8.$$.fragment),rgr=l(),ibe=a("p"),tgr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),agr=l(),rn=a("p"),ngr=o("The model class to instantiate is selected based on the "),dbe=a("code"),sgr=o("model_type"),lgr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),igr=o("pretrained_model_name_or_path"),dgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(":"),mgr=l(),le=a("ul"),qE=a("li"),mbe=a("strong"),hgr=o("albert"),ggr=o(" \u2014 "),Tz=a("a"),pgr=o("TFAlbertForTokenClassification"),ugr=o(" (ALBERT model)"),_gr=l(),NE=a("li"),hbe=a("strong"),bgr=o("bert"),Fgr=o(" \u2014 "),Mz=a("a"),vgr=o("TFBertForTokenClassification"),Tgr=o(" (BERT model)"),Mgr=l(),jE=a("li"),gbe=a("strong"),Egr=o("camembert"),Cgr=o(" \u2014 "),Ez=a("a"),wgr=o("TFCamembertForTokenClassification"),Agr=o(" (CamemBERT model)"),ygr=l(),DE=a("li"),pbe=a("strong"),Lgr=o("convbert"),xgr=o(" \u2014 "),Cz=a("a"),$gr=o("TFConvBertForTokenClassification"),kgr=o(" (ConvBERT model)"),Sgr=l(),GE=a("li"),ube=a("strong"),Rgr=o("deberta"),Bgr=o(" \u2014 "),wz=a("a"),Pgr=o("TFDebertaForTokenClassification"),Igr=o(" (DeBERTa model)"),qgr=l(),OE=a("li"),_be=a("strong"),Ngr=o("deberta-v2"),jgr=o(" \u2014 "),Az=a("a"),Dgr=o("TFDebertaV2ForTokenClassification"),Ggr=o(" (DeBERTa-v2 model)"),Ogr=l(),VE=a("li"),bbe=a("strong"),Vgr=o("distilbert"),Xgr=o(" \u2014 "),yz=a("a"),zgr=o("TFDistilBertForTokenClassification"),Qgr=o(" (DistilBERT model)"),Wgr=l(),XE=a("li"),Fbe=a("strong"),Hgr=o("electra"),Ugr=o(" \u2014 "),Lz=a("a"),Jgr=o("TFElectraForTokenClassification"),Ygr=o(" (ELECTRA model)"),Kgr=l(),zE=a("li"),vbe=a("strong"),Zgr=o("flaubert"),epr=o(" \u2014 "),xz=a("a"),opr=o("TFFlaubertForTokenClassification"),rpr=o(" (FlauBERT model)"),tpr=l(),QE=a("li"),Tbe=a("strong"),apr=o("funnel"),npr=o(" \u2014 "),$z=a("a"),spr=o("TFFunnelForTokenClassification"),lpr=o(" (Funnel Transformer model)"),ipr=l(),WE=a("li"),Mbe=a("strong"),dpr=o("layoutlm"),cpr=o(" \u2014 "),kz=a("a"),fpr=o("TFLayoutLMForTokenClassification"),mpr=o(" (LayoutLM model)"),hpr=l(),HE=a("li"),Ebe=a("strong"),gpr=o("longformer"),ppr=o(" \u2014 "),Sz=a("a"),upr=o("TFLongformerForTokenClassification"),_pr=o(" (Longformer model)"),bpr=l(),UE=a("li"),Cbe=a("strong"),Fpr=o("mobilebert"),vpr=o(" \u2014 "),Rz=a("a"),Tpr=o("TFMobileBertForTokenClassification"),Mpr=o(" (MobileBERT model)"),Epr=l(),JE=a("li"),wbe=a("strong"),Cpr=o("mpnet"),wpr=o(" \u2014 "),Bz=a("a"),Apr=o("TFMPNetForTokenClassification"),ypr=o(" (MPNet model)"),Lpr=l(),YE=a("li"),Abe=a("strong"),xpr=o("rembert"),$pr=o(" \u2014 "),Pz=a("a"),kpr=o("TFRemBertForTokenClassification"),Spr=o(" (RemBERT model)"),Rpr=l(),KE=a("li"),ybe=a("strong"),Bpr=o("roberta"),Ppr=o(" \u2014 "),Iz=a("a"),Ipr=o("TFRobertaForTokenClassification"),qpr=o(" (RoBERTa model)"),Npr=l(),ZE=a("li"),Lbe=a("strong"),jpr=o("roformer"),Dpr=o(" \u2014 "),qz=a("a"),Gpr=o("TFRoFormerForTokenClassification"),Opr=o(" (RoFormer model)"),Vpr=l(),e5=a("li"),xbe=a("strong"),Xpr=o("xlm"),zpr=o(" \u2014 "),Nz=a("a"),Qpr=o("TFXLMForTokenClassification"),Wpr=o(" (XLM model)"),Hpr=l(),o5=a("li"),$be=a("strong"),Upr=o("xlm-roberta"),Jpr=o(" \u2014 "),jz=a("a"),Ypr=o("TFXLMRobertaForTokenClassification"),Kpr=o(" (XLM-RoBERTa model)"),Zpr=l(),r5=a("li"),kbe=a("strong"),eur=o("xlnet"),our=o(" \u2014 "),Dz=a("a"),rur=o("TFXLNetForTokenClassification"),tur=o(" (XLNet model)"),aur=l(),v(t5.$$.fragment),Zke=l(),Kd=a("h2"),a5=a("a"),Sbe=a("span"),v(n8.$$.fragment),nur=l(),Rbe=a("span"),sur=o("TFAutoModelForQuestionAnswering"),eSe=l(),nr=a("div"),v(s8.$$.fragment),lur=l(),Zd=a("p"),iur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gz=a("a"),dur=o("from_pretrained()"),cur=o(" class method or the "),Oz=a("a"),fur=o("from_config()"),mur=o(` class
method.`),hur=l(),l8=a("p"),gur=o("This class cannot be instantiated directly using "),Bbe=a("code"),pur=o("__init__()"),uur=o(" (throws an error)."),_ur=l(),St=a("div"),v(i8.$$.fragment),bur=l(),Pbe=a("p"),Fur=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vur=l(),ec=a("p"),Tur=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),Mur=o("not"),Eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Cur=o("from_pretrained()"),wur=o(" to load the model weights."),Aur=l(),v(n5.$$.fragment),yur=l(),Sr=a("div"),v(d8.$$.fragment),Lur=l(),qbe=a("p"),xur=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$ur=l(),tn=a("p"),kur=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Sur=o("model_type"),Rur=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),Bur=o("pretrained_model_name_or_path"),Pur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),Iur=o("pretrained_model_name_or_path"),qur=o(":"),Nur=l(),ie=a("ul"),s5=a("li"),Gbe=a("strong"),jur=o("albert"),Dur=o(" \u2014 "),Xz=a("a"),Gur=o("TFAlbertForQuestionAnswering"),Our=o(" (ALBERT model)"),Vur=l(),l5=a("li"),Obe=a("strong"),Xur=o("bert"),zur=o(" \u2014 "),zz=a("a"),Qur=o("TFBertForQuestionAnswering"),Wur=o(" (BERT model)"),Hur=l(),i5=a("li"),Vbe=a("strong"),Uur=o("camembert"),Jur=o(" \u2014 "),Qz=a("a"),Yur=o("TFCamembertForQuestionAnswering"),Kur=o(" (CamemBERT model)"),Zur=l(),d5=a("li"),Xbe=a("strong"),e_r=o("convbert"),o_r=o(" \u2014 "),Wz=a("a"),r_r=o("TFConvBertForQuestionAnswering"),t_r=o(" (ConvBERT model)"),a_r=l(),c5=a("li"),zbe=a("strong"),n_r=o("deberta"),s_r=o(" \u2014 "),Hz=a("a"),l_r=o("TFDebertaForQuestionAnswering"),i_r=o(" (DeBERTa model)"),d_r=l(),f5=a("li"),Qbe=a("strong"),c_r=o("deberta-v2"),f_r=o(" \u2014 "),Uz=a("a"),m_r=o("TFDebertaV2ForQuestionAnswering"),h_r=o(" (DeBERTa-v2 model)"),g_r=l(),m5=a("li"),Wbe=a("strong"),p_r=o("distilbert"),u_r=o(" \u2014 "),Jz=a("a"),__r=o("TFDistilBertForQuestionAnswering"),b_r=o(" (DistilBERT model)"),F_r=l(),h5=a("li"),Hbe=a("strong"),v_r=o("electra"),T_r=o(" \u2014 "),Yz=a("a"),M_r=o("TFElectraForQuestionAnswering"),E_r=o(" (ELECTRA model)"),C_r=l(),g5=a("li"),Ube=a("strong"),w_r=o("flaubert"),A_r=o(" \u2014 "),Kz=a("a"),y_r=o("TFFlaubertForQuestionAnsweringSimple"),L_r=o(" (FlauBERT model)"),x_r=l(),p5=a("li"),Jbe=a("strong"),$_r=o("funnel"),k_r=o(" \u2014 "),Zz=a("a"),S_r=o("TFFunnelForQuestionAnswering"),R_r=o(" (Funnel Transformer model)"),B_r=l(),u5=a("li"),Ybe=a("strong"),P_r=o("longformer"),I_r=o(" \u2014 "),eQ=a("a"),q_r=o("TFLongformerForQuestionAnswering"),N_r=o(" (Longformer model)"),j_r=l(),_5=a("li"),Kbe=a("strong"),D_r=o("mobilebert"),G_r=o(" \u2014 "),oQ=a("a"),O_r=o("TFMobileBertForQuestionAnswering"),V_r=o(" (MobileBERT model)"),X_r=l(),b5=a("li"),Zbe=a("strong"),z_r=o("mpnet"),Q_r=o(" \u2014 "),rQ=a("a"),W_r=o("TFMPNetForQuestionAnswering"),H_r=o(" (MPNet model)"),U_r=l(),F5=a("li"),e2e=a("strong"),J_r=o("rembert"),Y_r=o(" \u2014 "),tQ=a("a"),K_r=o("TFRemBertForQuestionAnswering"),Z_r=o(" (RemBERT model)"),ebr=l(),v5=a("li"),o2e=a("strong"),obr=o("roberta"),rbr=o(" \u2014 "),aQ=a("a"),tbr=o("TFRobertaForQuestionAnswering"),abr=o(" (RoBERTa model)"),nbr=l(),T5=a("li"),r2e=a("strong"),sbr=o("roformer"),lbr=o(" \u2014 "),nQ=a("a"),ibr=o("TFRoFormerForQuestionAnswering"),dbr=o(" (RoFormer model)"),cbr=l(),M5=a("li"),t2e=a("strong"),fbr=o("xlm"),mbr=o(" \u2014 "),sQ=a("a"),hbr=o("TFXLMForQuestionAnsweringSimple"),gbr=o(" (XLM model)"),pbr=l(),E5=a("li"),a2e=a("strong"),ubr=o("xlm-roberta"),_br=o(" \u2014 "),lQ=a("a"),bbr=o("TFXLMRobertaForQuestionAnswering"),Fbr=o(" (XLM-RoBERTa model)"),vbr=l(),C5=a("li"),n2e=a("strong"),Tbr=o("xlnet"),Mbr=o(" \u2014 "),iQ=a("a"),Ebr=o("TFXLNetForQuestionAnsweringSimple"),Cbr=o(" (XLNet model)"),wbr=l(),v(w5.$$.fragment),oSe=l(),oc=a("h2"),A5=a("a"),s2e=a("span"),v(c8.$$.fragment),Abr=l(),l2e=a("span"),ybr=o("TFAutoModelForVision2Seq"),rSe=l(),sr=a("div"),v(f8.$$.fragment),Lbr=l(),rc=a("p"),xbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dQ=a("a"),$br=o("from_pretrained()"),kbr=o(" class method or the "),cQ=a("a"),Sbr=o("from_config()"),Rbr=o(` class
method.`),Bbr=l(),m8=a("p"),Pbr=o("This class cannot be instantiated directly using "),i2e=a("code"),Ibr=o("__init__()"),qbr=o(" (throws an error)."),Nbr=l(),Rt=a("div"),v(h8.$$.fragment),jbr=l(),d2e=a("p"),Dbr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gbr=l(),tc=a("p"),Obr=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),Vbr=o("not"),Xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),zbr=o("from_pretrained()"),Qbr=o(" to load the model weights."),Wbr=l(),v(y5.$$.fragment),Hbr=l(),Rr=a("div"),v(g8.$$.fragment),Ubr=l(),f2e=a("p"),Jbr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ybr=l(),an=a("p"),Kbr=o("The model class to instantiate is selected based on the "),m2e=a("code"),Zbr=o("model_type"),e2r=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),o2r=o("pretrained_model_name_or_path"),r2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),t2r=o("pretrained_model_name_or_path"),a2r=o(":"),n2r=l(),p2e=a("ul"),L5=a("li"),u2e=a("strong"),s2r=o("vision-encoder-decoder"),l2r=o(" \u2014 "),mQ=a("a"),i2r=o("TFVisionEncoderDecoderModel"),d2r=o(" (Vision Encoder decoder model)"),c2r=l(),v(x5.$$.fragment),tSe=l(),ac=a("h2"),$5=a("a"),_2e=a("span"),v(p8.$$.fragment),f2r=l(),b2e=a("span"),m2r=o("TFAutoModelForSpeechSeq2Seq"),aSe=l(),lr=a("div"),v(u8.$$.fragment),h2r=l(),nc=a("p"),g2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hQ=a("a"),p2r=o("from_pretrained()"),u2r=o(" class method or the "),gQ=a("a"),_2r=o("from_config()"),b2r=o(` class
method.`),F2r=l(),_8=a("p"),v2r=o("This class cannot be instantiated directly using "),F2e=a("code"),T2r=o("__init__()"),M2r=o(" (throws an error)."),E2r=l(),Bt=a("div"),v(b8.$$.fragment),C2r=l(),v2e=a("p"),w2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A2r=l(),sc=a("p"),y2r=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),L2r=o("not"),x2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),$2r=o("from_pretrained()"),k2r=o(" to load the model weights."),S2r=l(),v(k5.$$.fragment),R2r=l(),Br=a("div"),v(F8.$$.fragment),B2r=l(),M2e=a("p"),P2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),I2r=l(),nn=a("p"),q2r=o("The model class to instantiate is selected based on the "),E2e=a("code"),N2r=o("model_type"),j2r=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),D2r=o("pretrained_model_name_or_path"),G2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),O2r=o("pretrained_model_name_or_path"),V2r=o(":"),X2r=l(),A2e=a("ul"),S5=a("li"),y2e=a("strong"),z2r=o("speech_to_text"),Q2r=o(" \u2014 "),uQ=a("a"),W2r=o("TFSpeech2TextForConditionalGeneration"),H2r=o(" (Speech2Text model)"),U2r=l(),v(R5.$$.fragment),nSe=l(),lc=a("h2"),B5=a("a"),L2e=a("span"),v(v8.$$.fragment),J2r=l(),x2e=a("span"),Y2r=o("FlaxAutoModel"),sSe=l(),ir=a("div"),v(T8.$$.fragment),K2r=l(),ic=a("p"),Z2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Q=a("a"),eFr=o("from_pretrained()"),oFr=o(" class method or the "),bQ=a("a"),rFr=o("from_config()"),tFr=o(` class
method.`),aFr=l(),M8=a("p"),nFr=o("This class cannot be instantiated directly using "),$2e=a("code"),sFr=o("__init__()"),lFr=o(" (throws an error)."),iFr=l(),Pt=a("div"),v(E8.$$.fragment),dFr=l(),k2e=a("p"),cFr=o("Instantiates one of the base model classes of the library from a configuration."),fFr=l(),dc=a("p"),mFr=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),hFr=o("not"),gFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),pFr=o("from_pretrained()"),uFr=o(" to load the model weights."),_Fr=l(),v(P5.$$.fragment),bFr=l(),Pr=a("div"),v(C8.$$.fragment),FFr=l(),R2e=a("p"),vFr=o("Instantiate one of the base model classes of the library from a pretrained model."),TFr=l(),sn=a("p"),MFr=o("The model class to instantiate is selected based on the "),B2e=a("code"),EFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),wFr=o("pretrained_model_name_or_path"),AFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),yFr=o("pretrained_model_name_or_path"),LFr=o(":"),xFr=l(),oe=a("ul"),I5=a("li"),q2e=a("strong"),$Fr=o("albert"),kFr=o(" \u2014 "),vQ=a("a"),SFr=o("FlaxAlbertModel"),RFr=o(" (ALBERT model)"),BFr=l(),q5=a("li"),N2e=a("strong"),PFr=o("bart"),IFr=o(" \u2014 "),TQ=a("a"),qFr=o("FlaxBartModel"),NFr=o(" (BART model)"),jFr=l(),N5=a("li"),j2e=a("strong"),DFr=o("beit"),GFr=o(" \u2014 "),MQ=a("a"),OFr=o("FlaxBeitModel"),VFr=o(" (BEiT model)"),XFr=l(),j5=a("li"),D2e=a("strong"),zFr=o("bert"),QFr=o(" \u2014 "),EQ=a("a"),WFr=o("FlaxBertModel"),HFr=o(" (BERT model)"),UFr=l(),D5=a("li"),G2e=a("strong"),JFr=o("big_bird"),YFr=o(" \u2014 "),CQ=a("a"),KFr=o("FlaxBigBirdModel"),ZFr=o(" (BigBird model)"),evr=l(),G5=a("li"),O2e=a("strong"),ovr=o("blenderbot"),rvr=o(" \u2014 "),wQ=a("a"),tvr=o("FlaxBlenderbotModel"),avr=o(" (Blenderbot model)"),nvr=l(),O5=a("li"),V2e=a("strong"),svr=o("blenderbot-small"),lvr=o(" \u2014 "),AQ=a("a"),ivr=o("FlaxBlenderbotSmallModel"),dvr=o(" (BlenderbotSmall model)"),cvr=l(),V5=a("li"),X2e=a("strong"),fvr=o("clip"),mvr=o(" \u2014 "),yQ=a("a"),hvr=o("FlaxCLIPModel"),gvr=o(" (CLIP model)"),pvr=l(),X5=a("li"),z2e=a("strong"),uvr=o("distilbert"),_vr=o(" \u2014 "),LQ=a("a"),bvr=o("FlaxDistilBertModel"),Fvr=o(" (DistilBERT model)"),vvr=l(),z5=a("li"),Q2e=a("strong"),Tvr=o("electra"),Mvr=o(" \u2014 "),xQ=a("a"),Evr=o("FlaxElectraModel"),Cvr=o(" (ELECTRA model)"),wvr=l(),Q5=a("li"),W2e=a("strong"),Avr=o("gpt2"),yvr=o(" \u2014 "),$Q=a("a"),Lvr=o("FlaxGPT2Model"),xvr=o(" (OpenAI GPT-2 model)"),$vr=l(),W5=a("li"),H2e=a("strong"),kvr=o("gpt_neo"),Svr=o(" \u2014 "),kQ=a("a"),Rvr=o("FlaxGPTNeoModel"),Bvr=o(" (GPT Neo model)"),Pvr=l(),H5=a("li"),U2e=a("strong"),Ivr=o("gptj"),qvr=o(" \u2014 "),SQ=a("a"),Nvr=o("FlaxGPTJModel"),jvr=o(" (GPT-J model)"),Dvr=l(),U5=a("li"),J2e=a("strong"),Gvr=o("marian"),Ovr=o(" \u2014 "),RQ=a("a"),Vvr=o("FlaxMarianModel"),Xvr=o(" (Marian model)"),zvr=l(),J5=a("li"),Y2e=a("strong"),Qvr=o("mbart"),Wvr=o(" \u2014 "),BQ=a("a"),Hvr=o("FlaxMBartModel"),Uvr=o(" (mBART model)"),Jvr=l(),Y5=a("li"),K2e=a("strong"),Yvr=o("mt5"),Kvr=o(" \u2014 "),PQ=a("a"),Zvr=o("FlaxMT5Model"),e1r=o(" (mT5 model)"),o1r=l(),K5=a("li"),Z2e=a("strong"),r1r=o("pegasus"),t1r=o(" \u2014 "),IQ=a("a"),a1r=o("FlaxPegasusModel"),n1r=o(" (Pegasus model)"),s1r=l(),Z5=a("li"),eFe=a("strong"),l1r=o("roberta"),i1r=o(" \u2014 "),qQ=a("a"),d1r=o("FlaxRobertaModel"),c1r=o(" (RoBERTa model)"),f1r=l(),eC=a("li"),oFe=a("strong"),m1r=o("roformer"),h1r=o(" \u2014 "),NQ=a("a"),g1r=o("FlaxRoFormerModel"),p1r=o(" (RoFormer model)"),u1r=l(),oC=a("li"),rFe=a("strong"),_1r=o("t5"),b1r=o(" \u2014 "),jQ=a("a"),F1r=o("FlaxT5Model"),v1r=o(" (T5 model)"),T1r=l(),rC=a("li"),tFe=a("strong"),M1r=o("vision-text-dual-encoder"),E1r=o(" \u2014 "),DQ=a("a"),C1r=o("FlaxVisionTextDualEncoderModel"),w1r=o(" (VisionTextDualEncoder model)"),A1r=l(),tC=a("li"),aFe=a("strong"),y1r=o("vit"),L1r=o(" \u2014 "),GQ=a("a"),x1r=o("FlaxViTModel"),$1r=o(" (ViT model)"),k1r=l(),aC=a("li"),nFe=a("strong"),S1r=o("wav2vec2"),R1r=o(" \u2014 "),OQ=a("a"),B1r=o("FlaxWav2Vec2Model"),P1r=o(" (Wav2Vec2 model)"),I1r=l(),nC=a("li"),sFe=a("strong"),q1r=o("xglm"),N1r=o(" \u2014 "),VQ=a("a"),j1r=o("FlaxXGLMModel"),D1r=o(" (XGLM model)"),G1r=l(),sC=a("li"),lFe=a("strong"),O1r=o("xlm-roberta"),V1r=o(" \u2014 "),XQ=a("a"),X1r=o("FlaxXLMRobertaModel"),z1r=o(" (XLM-RoBERTa model)"),Q1r=l(),v(lC.$$.fragment),lSe=l(),cc=a("h2"),iC=a("a"),iFe=a("span"),v(w8.$$.fragment),W1r=l(),dFe=a("span"),H1r=o("FlaxAutoModelForCausalLM"),iSe=l(),dr=a("div"),v(A8.$$.fragment),U1r=l(),fc=a("p"),J1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zQ=a("a"),Y1r=o("from_pretrained()"),K1r=o(" class method or the "),QQ=a("a"),Z1r=o("from_config()"),eTr=o(` class
method.`),oTr=l(),y8=a("p"),rTr=o("This class cannot be instantiated directly using "),cFe=a("code"),tTr=o("__init__()"),aTr=o(" (throws an error)."),nTr=l(),It=a("div"),v(L8.$$.fragment),sTr=l(),fFe=a("p"),lTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iTr=l(),mc=a("p"),dTr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),cTr=o("not"),fTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),mTr=o("from_pretrained()"),hTr=o(" to load the model weights."),gTr=l(),v(dC.$$.fragment),pTr=l(),Ir=a("div"),v(x8.$$.fragment),uTr=l(),hFe=a("p"),_Tr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bTr=l(),ln=a("p"),FTr=o("The model class to instantiate is selected based on the "),gFe=a("code"),vTr=o("model_type"),TTr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),MTr=o("pretrained_model_name_or_path"),ETr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),CTr=o("pretrained_model_name_or_path"),wTr=o(":"),ATr=l(),Hr=a("ul"),cC=a("li"),_Fe=a("strong"),yTr=o("bart"),LTr=o(" \u2014 "),HQ=a("a"),xTr=o("FlaxBartForCausalLM"),$Tr=o(" (BART model)"),kTr=l(),fC=a("li"),bFe=a("strong"),STr=o("gpt2"),RTr=o(" \u2014 "),UQ=a("a"),BTr=o("FlaxGPT2LMHeadModel"),PTr=o(" (OpenAI GPT-2 model)"),ITr=l(),mC=a("li"),FFe=a("strong"),qTr=o("gpt_neo"),NTr=o(" \u2014 "),JQ=a("a"),jTr=o("FlaxGPTNeoForCausalLM"),DTr=o(" (GPT Neo model)"),GTr=l(),hC=a("li"),vFe=a("strong"),OTr=o("gptj"),VTr=o(" \u2014 "),YQ=a("a"),XTr=o("FlaxGPTJForCausalLM"),zTr=o(" (GPT-J model)"),QTr=l(),gC=a("li"),TFe=a("strong"),WTr=o("xglm"),HTr=o(" \u2014 "),KQ=a("a"),UTr=o("FlaxXGLMForCausalLM"),JTr=o(" (XGLM model)"),YTr=l(),v(pC.$$.fragment),dSe=l(),hc=a("h2"),uC=a("a"),MFe=a("span"),v($8.$$.fragment),KTr=l(),EFe=a("span"),ZTr=o("FlaxAutoModelForPreTraining"),cSe=l(),cr=a("div"),v(k8.$$.fragment),eMr=l(),gc=a("p"),oMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZQ=a("a"),rMr=o("from_pretrained()"),tMr=o(" class method or the "),eW=a("a"),aMr=o("from_config()"),nMr=o(` class
method.`),sMr=l(),S8=a("p"),lMr=o("This class cannot be instantiated directly using "),CFe=a("code"),iMr=o("__init__()"),dMr=o(" (throws an error)."),cMr=l(),qt=a("div"),v(R8.$$.fragment),fMr=l(),wFe=a("p"),mMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hMr=l(),pc=a("p"),gMr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),pMr=o("not"),uMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),_Mr=o("from_pretrained()"),bMr=o(" to load the model weights."),FMr=l(),v(_C.$$.fragment),vMr=l(),qr=a("div"),v(B8.$$.fragment),TMr=l(),yFe=a("p"),MMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EMr=l(),dn=a("p"),CMr=o("The model class to instantiate is selected based on the "),LFe=a("code"),wMr=o("model_type"),AMr=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),yMr=o("pretrained_model_name_or_path"),LMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),xMr=o("pretrained_model_name_or_path"),$Mr=o(":"),kMr=l(),be=a("ul"),bC=a("li"),kFe=a("strong"),SMr=o("albert"),RMr=o(" \u2014 "),rW=a("a"),BMr=o("FlaxAlbertForPreTraining"),PMr=o(" (ALBERT model)"),IMr=l(),FC=a("li"),SFe=a("strong"),qMr=o("bart"),NMr=o(" \u2014 "),tW=a("a"),jMr=o("FlaxBartForConditionalGeneration"),DMr=o(" (BART model)"),GMr=l(),vC=a("li"),RFe=a("strong"),OMr=o("bert"),VMr=o(" \u2014 "),aW=a("a"),XMr=o("FlaxBertForPreTraining"),zMr=o(" (BERT model)"),QMr=l(),TC=a("li"),BFe=a("strong"),WMr=o("big_bird"),HMr=o(" \u2014 "),nW=a("a"),UMr=o("FlaxBigBirdForPreTraining"),JMr=o(" (BigBird model)"),YMr=l(),MC=a("li"),PFe=a("strong"),KMr=o("electra"),ZMr=o(" \u2014 "),sW=a("a"),e4r=o("FlaxElectraForPreTraining"),o4r=o(" (ELECTRA model)"),r4r=l(),EC=a("li"),IFe=a("strong"),t4r=o("mbart"),a4r=o(" \u2014 "),lW=a("a"),n4r=o("FlaxMBartForConditionalGeneration"),s4r=o(" (mBART model)"),l4r=l(),CC=a("li"),qFe=a("strong"),i4r=o("mt5"),d4r=o(" \u2014 "),iW=a("a"),c4r=o("FlaxMT5ForConditionalGeneration"),f4r=o(" (mT5 model)"),m4r=l(),wC=a("li"),NFe=a("strong"),h4r=o("roberta"),g4r=o(" \u2014 "),dW=a("a"),p4r=o("FlaxRobertaForMaskedLM"),u4r=o(" (RoBERTa model)"),_4r=l(),AC=a("li"),jFe=a("strong"),b4r=o("roformer"),F4r=o(" \u2014 "),cW=a("a"),v4r=o("FlaxRoFormerForMaskedLM"),T4r=o(" (RoFormer model)"),M4r=l(),yC=a("li"),DFe=a("strong"),E4r=o("t5"),C4r=o(" \u2014 "),fW=a("a"),w4r=o("FlaxT5ForConditionalGeneration"),A4r=o(" (T5 model)"),y4r=l(),LC=a("li"),GFe=a("strong"),L4r=o("wav2vec2"),x4r=o(" \u2014 "),mW=a("a"),$4r=o("FlaxWav2Vec2ForPreTraining"),k4r=o(" (Wav2Vec2 model)"),S4r=l(),xC=a("li"),OFe=a("strong"),R4r=o("xlm-roberta"),B4r=o(" \u2014 "),hW=a("a"),P4r=o("FlaxXLMRobertaForMaskedLM"),I4r=o(" (XLM-RoBERTa model)"),q4r=l(),v($C.$$.fragment),fSe=l(),uc=a("h2"),kC=a("a"),VFe=a("span"),v(P8.$$.fragment),N4r=l(),XFe=a("span"),j4r=o("FlaxAutoModelForMaskedLM"),mSe=l(),fr=a("div"),v(I8.$$.fragment),D4r=l(),_c=a("p"),G4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gW=a("a"),O4r=o("from_pretrained()"),V4r=o(" class method or the "),pW=a("a"),X4r=o("from_config()"),z4r=o(` class
method.`),Q4r=l(),q8=a("p"),W4r=o("This class cannot be instantiated directly using "),zFe=a("code"),H4r=o("__init__()"),U4r=o(" (throws an error)."),J4r=l(),Nt=a("div"),v(N8.$$.fragment),Y4r=l(),QFe=a("p"),K4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z4r=l(),bc=a("p"),eEr=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),oEr=o("not"),rEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),tEr=o("from_pretrained()"),aEr=o(" to load the model weights."),nEr=l(),v(SC.$$.fragment),sEr=l(),Nr=a("div"),v(j8.$$.fragment),lEr=l(),HFe=a("p"),iEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dEr=l(),cn=a("p"),cEr=o("The model class to instantiate is selected based on the "),UFe=a("code"),fEr=o("model_type"),mEr=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),hEr=o("pretrained_model_name_or_path"),gEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),pEr=o("pretrained_model_name_or_path"),uEr=o(":"),_Er=l(),Ce=a("ul"),RC=a("li"),KFe=a("strong"),bEr=o("albert"),FEr=o(" \u2014 "),_W=a("a"),vEr=o("FlaxAlbertForMaskedLM"),TEr=o(" (ALBERT model)"),MEr=l(),BC=a("li"),ZFe=a("strong"),EEr=o("bart"),CEr=o(" \u2014 "),bW=a("a"),wEr=o("FlaxBartForConditionalGeneration"),AEr=o(" (BART model)"),yEr=l(),PC=a("li"),eve=a("strong"),LEr=o("bert"),xEr=o(" \u2014 "),FW=a("a"),$Er=o("FlaxBertForMaskedLM"),kEr=o(" (BERT model)"),SEr=l(),IC=a("li"),ove=a("strong"),REr=o("big_bird"),BEr=o(" \u2014 "),vW=a("a"),PEr=o("FlaxBigBirdForMaskedLM"),IEr=o(" (BigBird model)"),qEr=l(),qC=a("li"),rve=a("strong"),NEr=o("distilbert"),jEr=o(" \u2014 "),TW=a("a"),DEr=o("FlaxDistilBertForMaskedLM"),GEr=o(" (DistilBERT model)"),OEr=l(),NC=a("li"),tve=a("strong"),VEr=o("electra"),XEr=o(" \u2014 "),MW=a("a"),zEr=o("FlaxElectraForMaskedLM"),QEr=o(" (ELECTRA model)"),WEr=l(),jC=a("li"),ave=a("strong"),HEr=o("mbart"),UEr=o(" \u2014 "),EW=a("a"),JEr=o("FlaxMBartForConditionalGeneration"),YEr=o(" (mBART model)"),KEr=l(),DC=a("li"),nve=a("strong"),ZEr=o("roberta"),e5r=o(" \u2014 "),CW=a("a"),o5r=o("FlaxRobertaForMaskedLM"),r5r=o(" (RoBERTa model)"),t5r=l(),GC=a("li"),sve=a("strong"),a5r=o("roformer"),n5r=o(" \u2014 "),wW=a("a"),s5r=o("FlaxRoFormerForMaskedLM"),l5r=o(" (RoFormer model)"),i5r=l(),OC=a("li"),lve=a("strong"),d5r=o("xlm-roberta"),c5r=o(" \u2014 "),AW=a("a"),f5r=o("FlaxXLMRobertaForMaskedLM"),m5r=o(" (XLM-RoBERTa model)"),h5r=l(),v(VC.$$.fragment),hSe=l(),Fc=a("h2"),XC=a("a"),ive=a("span"),v(D8.$$.fragment),g5r=l(),dve=a("span"),p5r=o("FlaxAutoModelForSeq2SeqLM"),gSe=l(),mr=a("div"),v(G8.$$.fragment),u5r=l(),vc=a("p"),_5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yW=a("a"),b5r=o("from_pretrained()"),F5r=o(" class method or the "),LW=a("a"),v5r=o("from_config()"),T5r=o(` class
method.`),M5r=l(),O8=a("p"),E5r=o("This class cannot be instantiated directly using "),cve=a("code"),C5r=o("__init__()"),w5r=o(" (throws an error)."),A5r=l(),jt=a("div"),v(V8.$$.fragment),y5r=l(),fve=a("p"),L5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x5r=l(),Tc=a("p"),$5r=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),k5r=o("not"),S5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),R5r=o("from_pretrained()"),B5r=o(" to load the model weights."),P5r=l(),v(zC.$$.fragment),I5r=l(),jr=a("div"),v(X8.$$.fragment),q5r=l(),hve=a("p"),N5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j5r=l(),fn=a("p"),D5r=o("The model class to instantiate is selected based on the "),gve=a("code"),G5r=o("model_type"),O5r=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),V5r=o("pretrained_model_name_or_path"),X5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),z5r=o("pretrained_model_name_or_path"),Q5r=o(":"),W5r=l(),xe=a("ul"),QC=a("li"),_ve=a("strong"),H5r=o("bart"),U5r=o(" \u2014 "),$W=a("a"),J5r=o("FlaxBartForConditionalGeneration"),Y5r=o(" (BART model)"),K5r=l(),WC=a("li"),bve=a("strong"),Z5r=o("blenderbot"),eCr=o(" \u2014 "),kW=a("a"),oCr=o("FlaxBlenderbotForConditionalGeneration"),rCr=o(" (Blenderbot model)"),tCr=l(),HC=a("li"),Fve=a("strong"),aCr=o("blenderbot-small"),nCr=o(" \u2014 "),SW=a("a"),sCr=o("FlaxBlenderbotSmallForConditionalGeneration"),lCr=o(" (BlenderbotSmall model)"),iCr=l(),UC=a("li"),vve=a("strong"),dCr=o("encoder-decoder"),cCr=o(" \u2014 "),RW=a("a"),fCr=o("FlaxEncoderDecoderModel"),mCr=o(" (Encoder decoder model)"),hCr=l(),JC=a("li"),Tve=a("strong"),gCr=o("marian"),pCr=o(" \u2014 "),BW=a("a"),uCr=o("FlaxMarianMTModel"),_Cr=o(" (Marian model)"),bCr=l(),YC=a("li"),Mve=a("strong"),FCr=o("mbart"),vCr=o(" \u2014 "),PW=a("a"),TCr=o("FlaxMBartForConditionalGeneration"),MCr=o(" (mBART model)"),ECr=l(),KC=a("li"),Eve=a("strong"),CCr=o("mt5"),wCr=o(" \u2014 "),IW=a("a"),ACr=o("FlaxMT5ForConditionalGeneration"),yCr=o(" (mT5 model)"),LCr=l(),ZC=a("li"),Cve=a("strong"),xCr=o("pegasus"),$Cr=o(" \u2014 "),qW=a("a"),kCr=o("FlaxPegasusForConditionalGeneration"),SCr=o(" (Pegasus model)"),RCr=l(),e3=a("li"),wve=a("strong"),BCr=o("t5"),PCr=o(" \u2014 "),NW=a("a"),ICr=o("FlaxT5ForConditionalGeneration"),qCr=o(" (T5 model)"),NCr=l(),v(o3.$$.fragment),pSe=l(),Mc=a("h2"),r3=a("a"),Ave=a("span"),v(z8.$$.fragment),jCr=l(),yve=a("span"),DCr=o("FlaxAutoModelForSequenceClassification"),uSe=l(),hr=a("div"),v(Q8.$$.fragment),GCr=l(),Ec=a("p"),OCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jW=a("a"),VCr=o("from_pretrained()"),XCr=o(" class method or the "),DW=a("a"),zCr=o("from_config()"),QCr=o(` class
method.`),WCr=l(),W8=a("p"),HCr=o("This class cannot be instantiated directly using "),Lve=a("code"),UCr=o("__init__()"),JCr=o(" (throws an error)."),YCr=l(),Dt=a("div"),v(H8.$$.fragment),KCr=l(),xve=a("p"),ZCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e3r=l(),Cc=a("p"),o3r=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),r3r=o("not"),t3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),a3r=o("from_pretrained()"),n3r=o(" to load the model weights."),s3r=l(),v(t3.$$.fragment),l3r=l(),Dr=a("div"),v(U8.$$.fragment),i3r=l(),kve=a("p"),d3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c3r=l(),mn=a("p"),f3r=o("The model class to instantiate is selected based on the "),Sve=a("code"),m3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),g3r=o("pretrained_model_name_or_path"),p3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),u3r=o("pretrained_model_name_or_path"),_3r=o(":"),b3r=l(),we=a("ul"),a3=a("li"),Pve=a("strong"),F3r=o("albert"),v3r=o(" \u2014 "),OW=a("a"),T3r=o("FlaxAlbertForSequenceClassification"),M3r=o(" (ALBERT model)"),E3r=l(),n3=a("li"),Ive=a("strong"),C3r=o("bart"),w3r=o(" \u2014 "),VW=a("a"),A3r=o("FlaxBartForSequenceClassification"),y3r=o(" (BART model)"),L3r=l(),s3=a("li"),qve=a("strong"),x3r=o("bert"),$3r=o(" \u2014 "),XW=a("a"),k3r=o("FlaxBertForSequenceClassification"),S3r=o(" (BERT model)"),R3r=l(),l3=a("li"),Nve=a("strong"),B3r=o("big_bird"),P3r=o(" \u2014 "),zW=a("a"),I3r=o("FlaxBigBirdForSequenceClassification"),q3r=o(" (BigBird model)"),N3r=l(),i3=a("li"),jve=a("strong"),j3r=o("distilbert"),D3r=o(" \u2014 "),QW=a("a"),G3r=o("FlaxDistilBertForSequenceClassification"),O3r=o(" (DistilBERT model)"),V3r=l(),d3=a("li"),Dve=a("strong"),X3r=o("electra"),z3r=o(" \u2014 "),WW=a("a"),Q3r=o("FlaxElectraForSequenceClassification"),W3r=o(" (ELECTRA model)"),H3r=l(),c3=a("li"),Gve=a("strong"),U3r=o("mbart"),J3r=o(" \u2014 "),HW=a("a"),Y3r=o("FlaxMBartForSequenceClassification"),K3r=o(" (mBART model)"),Z3r=l(),f3=a("li"),Ove=a("strong"),ewr=o("roberta"),owr=o(" \u2014 "),UW=a("a"),rwr=o("FlaxRobertaForSequenceClassification"),twr=o(" (RoBERTa model)"),awr=l(),m3=a("li"),Vve=a("strong"),nwr=o("roformer"),swr=o(" \u2014 "),JW=a("a"),lwr=o("FlaxRoFormerForSequenceClassification"),iwr=o(" (RoFormer model)"),dwr=l(),h3=a("li"),Xve=a("strong"),cwr=o("xlm-roberta"),fwr=o(" \u2014 "),YW=a("a"),mwr=o("FlaxXLMRobertaForSequenceClassification"),hwr=o(" (XLM-RoBERTa model)"),gwr=l(),v(g3.$$.fragment),_Se=l(),wc=a("h2"),p3=a("a"),zve=a("span"),v(J8.$$.fragment),pwr=l(),Qve=a("span"),uwr=o("FlaxAutoModelForQuestionAnswering"),bSe=l(),gr=a("div"),v(Y8.$$.fragment),_wr=l(),Ac=a("p"),bwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KW=a("a"),Fwr=o("from_pretrained()"),vwr=o(" class method or the "),ZW=a("a"),Twr=o("from_config()"),Mwr=o(` class
method.`),Ewr=l(),K8=a("p"),Cwr=o("This class cannot be instantiated directly using "),Wve=a("code"),wwr=o("__init__()"),Awr=o(" (throws an error)."),ywr=l(),Gt=a("div"),v(Z8.$$.fragment),Lwr=l(),Hve=a("p"),xwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$wr=l(),yc=a("p"),kwr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),Swr=o("not"),Rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),Bwr=o("from_pretrained()"),Pwr=o(" to load the model weights."),Iwr=l(),v(u3.$$.fragment),qwr=l(),Gr=a("div"),v(ex.$$.fragment),Nwr=l(),Jve=a("p"),jwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dwr=l(),hn=a("p"),Gwr=o("The model class to instantiate is selected based on the "),Yve=a("code"),Owr=o("model_type"),Vwr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),Xwr=o("pretrained_model_name_or_path"),zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),Qwr=o("pretrained_model_name_or_path"),Wwr=o(":"),Hwr=l(),Ae=a("ul"),_3=a("li"),e1e=a("strong"),Uwr=o("albert"),Jwr=o(" \u2014 "),oH=a("a"),Ywr=o("FlaxAlbertForQuestionAnswering"),Kwr=o(" (ALBERT model)"),Zwr=l(),b3=a("li"),o1e=a("strong"),eAr=o("bart"),oAr=o(" \u2014 "),rH=a("a"),rAr=o("FlaxBartForQuestionAnswering"),tAr=o(" (BART model)"),aAr=l(),F3=a("li"),r1e=a("strong"),nAr=o("bert"),sAr=o(" \u2014 "),tH=a("a"),lAr=o("FlaxBertForQuestionAnswering"),iAr=o(" (BERT model)"),dAr=l(),v3=a("li"),t1e=a("strong"),cAr=o("big_bird"),fAr=o(" \u2014 "),aH=a("a"),mAr=o("FlaxBigBirdForQuestionAnswering"),hAr=o(" (BigBird model)"),gAr=l(),T3=a("li"),a1e=a("strong"),pAr=o("distilbert"),uAr=o(" \u2014 "),nH=a("a"),_Ar=o("FlaxDistilBertForQuestionAnswering"),bAr=o(" (DistilBERT model)"),FAr=l(),M3=a("li"),n1e=a("strong"),vAr=o("electra"),TAr=o(" \u2014 "),sH=a("a"),MAr=o("FlaxElectraForQuestionAnswering"),EAr=o(" (ELECTRA model)"),CAr=l(),E3=a("li"),s1e=a("strong"),wAr=o("mbart"),AAr=o(" \u2014 "),lH=a("a"),yAr=o("FlaxMBartForQuestionAnswering"),LAr=o(" (mBART model)"),xAr=l(),C3=a("li"),l1e=a("strong"),$Ar=o("roberta"),kAr=o(" \u2014 "),iH=a("a"),SAr=o("FlaxRobertaForQuestionAnswering"),RAr=o(" (RoBERTa model)"),BAr=l(),w3=a("li"),i1e=a("strong"),PAr=o("roformer"),IAr=o(" \u2014 "),dH=a("a"),qAr=o("FlaxRoFormerForQuestionAnswering"),NAr=o(" (RoFormer model)"),jAr=l(),A3=a("li"),d1e=a("strong"),DAr=o("xlm-roberta"),GAr=o(" \u2014 "),cH=a("a"),OAr=o("FlaxXLMRobertaForQuestionAnswering"),VAr=o(" (XLM-RoBERTa model)"),XAr=l(),v(y3.$$.fragment),FSe=l(),Lc=a("h2"),L3=a("a"),c1e=a("span"),v(ox.$$.fragment),zAr=l(),f1e=a("span"),QAr=o("FlaxAutoModelForTokenClassification"),vSe=l(),pr=a("div"),v(rx.$$.fragment),WAr=l(),xc=a("p"),HAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=a("a"),UAr=o("from_pretrained()"),JAr=o(" class method or the "),mH=a("a"),YAr=o("from_config()"),KAr=o(` class
method.`),ZAr=l(),tx=a("p"),e0r=o("This class cannot be instantiated directly using "),m1e=a("code"),o0r=o("__init__()"),r0r=o(" (throws an error)."),t0r=l(),Ot=a("div"),v(ax.$$.fragment),a0r=l(),h1e=a("p"),n0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),s0r=l(),$c=a("p"),l0r=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),i0r=o("not"),d0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),c0r=o("from_pretrained()"),f0r=o(" to load the model weights."),m0r=l(),v(x3.$$.fragment),h0r=l(),Or=a("div"),v(nx.$$.fragment),g0r=l(),p1e=a("p"),p0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u0r=l(),gn=a("p"),_0r=o("The model class to instantiate is selected based on the "),u1e=a("code"),b0r=o("model_type"),F0r=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),v0r=o("pretrained_model_name_or_path"),T0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),M0r=o("pretrained_model_name_or_path"),E0r=o(":"),C0r=l(),Ne=a("ul"),$3=a("li"),F1e=a("strong"),w0r=o("albert"),A0r=o(" \u2014 "),gH=a("a"),y0r=o("FlaxAlbertForTokenClassification"),L0r=o(" (ALBERT model)"),x0r=l(),k3=a("li"),v1e=a("strong"),$0r=o("bert"),k0r=o(" \u2014 "),pH=a("a"),S0r=o("FlaxBertForTokenClassification"),R0r=o(" (BERT model)"),B0r=l(),S3=a("li"),T1e=a("strong"),P0r=o("big_bird"),I0r=o(" \u2014 "),uH=a("a"),q0r=o("FlaxBigBirdForTokenClassification"),N0r=o(" (BigBird model)"),j0r=l(),R3=a("li"),M1e=a("strong"),D0r=o("distilbert"),G0r=o(" \u2014 "),_H=a("a"),O0r=o("FlaxDistilBertForTokenClassification"),V0r=o(" (DistilBERT model)"),X0r=l(),B3=a("li"),E1e=a("strong"),z0r=o("electra"),Q0r=o(" \u2014 "),bH=a("a"),W0r=o("FlaxElectraForTokenClassification"),H0r=o(" (ELECTRA model)"),U0r=l(),P3=a("li"),C1e=a("strong"),J0r=o("roberta"),Y0r=o(" \u2014 "),FH=a("a"),K0r=o("FlaxRobertaForTokenClassification"),Z0r=o(" (RoBERTa model)"),e6r=l(),I3=a("li"),w1e=a("strong"),o6r=o("roformer"),r6r=o(" \u2014 "),vH=a("a"),t6r=o("FlaxRoFormerForTokenClassification"),a6r=o(" (RoFormer model)"),n6r=l(),q3=a("li"),A1e=a("strong"),s6r=o("xlm-roberta"),l6r=o(" \u2014 "),TH=a("a"),i6r=o("FlaxXLMRobertaForTokenClassification"),d6r=o(" (XLM-RoBERTa model)"),c6r=l(),v(N3.$$.fragment),TSe=l(),kc=a("h2"),j3=a("a"),y1e=a("span"),v(sx.$$.fragment),f6r=l(),L1e=a("span"),m6r=o("FlaxAutoModelForMultipleChoice"),MSe=l(),ur=a("div"),v(lx.$$.fragment),h6r=l(),Sc=a("p"),g6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MH=a("a"),p6r=o("from_pretrained()"),u6r=o(" class method or the "),EH=a("a"),_6r=o("from_config()"),b6r=o(` class
method.`),F6r=l(),ix=a("p"),v6r=o("This class cannot be instantiated directly using "),x1e=a("code"),T6r=o("__init__()"),M6r=o(" (throws an error)."),E6r=l(),Vt=a("div"),v(dx.$$.fragment),C6r=l(),$1e=a("p"),w6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A6r=l(),Rc=a("p"),y6r=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),L6r=o("not"),x6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),$6r=o("from_pretrained()"),k6r=o(" to load the model weights."),S6r=l(),v(D3.$$.fragment),R6r=l(),Vr=a("div"),v(cx.$$.fragment),B6r=l(),S1e=a("p"),P6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I6r=l(),pn=a("p"),q6r=o("The model class to instantiate is selected based on the "),R1e=a("code"),N6r=o("model_type"),j6r=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),O6r=o("pretrained_model_name_or_path"),V6r=o(":"),X6r=l(),je=a("ul"),G3=a("li"),I1e=a("strong"),z6r=o("albert"),Q6r=o(" \u2014 "),wH=a("a"),W6r=o("FlaxAlbertForMultipleChoice"),H6r=o(" (ALBERT model)"),U6r=l(),O3=a("li"),q1e=a("strong"),J6r=o("bert"),Y6r=o(" \u2014 "),AH=a("a"),K6r=o("FlaxBertForMultipleChoice"),Z6r=o(" (BERT model)"),eyr=l(),V3=a("li"),N1e=a("strong"),oyr=o("big_bird"),ryr=o(" \u2014 "),yH=a("a"),tyr=o("FlaxBigBirdForMultipleChoice"),ayr=o(" (BigBird model)"),nyr=l(),X3=a("li"),j1e=a("strong"),syr=o("distilbert"),lyr=o(" \u2014 "),LH=a("a"),iyr=o("FlaxDistilBertForMultipleChoice"),dyr=o(" (DistilBERT model)"),cyr=l(),z3=a("li"),D1e=a("strong"),fyr=o("electra"),myr=o(" \u2014 "),xH=a("a"),hyr=o("FlaxElectraForMultipleChoice"),gyr=o(" (ELECTRA model)"),pyr=l(),Q3=a("li"),G1e=a("strong"),uyr=o("roberta"),_yr=o(" \u2014 "),$H=a("a"),byr=o("FlaxRobertaForMultipleChoice"),Fyr=o(" (RoBERTa model)"),vyr=l(),W3=a("li"),O1e=a("strong"),Tyr=o("roformer"),Myr=o(" \u2014 "),kH=a("a"),Eyr=o("FlaxRoFormerForMultipleChoice"),Cyr=o(" (RoFormer model)"),wyr=l(),H3=a("li"),V1e=a("strong"),Ayr=o("xlm-roberta"),yyr=o(" \u2014 "),SH=a("a"),Lyr=o("FlaxXLMRobertaForMultipleChoice"),xyr=o(" (XLM-RoBERTa model)"),$yr=l(),v(U3.$$.fragment),ESe=l(),Bc=a("h2"),J3=a("a"),X1e=a("span"),v(fx.$$.fragment),kyr=l(),z1e=a("span"),Syr=o("FlaxAutoModelForNextSentencePrediction"),CSe=l(),_r=a("div"),v(mx.$$.fragment),Ryr=l(),Pc=a("p"),Byr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RH=a("a"),Pyr=o("from_pretrained()"),Iyr=o(" class method or the "),BH=a("a"),qyr=o("from_config()"),Nyr=o(` class
method.`),jyr=l(),hx=a("p"),Dyr=o("This class cannot be instantiated directly using "),Q1e=a("code"),Gyr=o("__init__()"),Oyr=o(" (throws an error)."),Vyr=l(),Xt=a("div"),v(gx.$$.fragment),Xyr=l(),W1e=a("p"),zyr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qyr=l(),Ic=a("p"),Wyr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),Hyr=o("not"),Uyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),Jyr=o("from_pretrained()"),Yyr=o(" to load the model weights."),Kyr=l(),v(Y3.$$.fragment),Zyr=l(),Xr=a("div"),v(px.$$.fragment),eLr=l(),U1e=a("p"),oLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rLr=l(),un=a("p"),tLr=o("The model class to instantiate is selected based on the "),J1e=a("code"),aLr=o("model_type"),nLr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),sLr=o("pretrained_model_name_or_path"),lLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),iLr=o("pretrained_model_name_or_path"),dLr=o(":"),cLr=l(),Z1e=a("ul"),K3=a("li"),eTe=a("strong"),fLr=o("bert"),mLr=o(" \u2014 "),IH=a("a"),hLr=o("FlaxBertForNextSentencePrediction"),gLr=o(" (BERT model)"),pLr=l(),v(Z3.$$.fragment),wSe=l(),qc=a("h2"),ew=a("a"),oTe=a("span"),v(ux.$$.fragment),uLr=l(),rTe=a("span"),_Lr=o("FlaxAutoModelForImageClassification"),ASe=l(),br=a("div"),v(_x.$$.fragment),bLr=l(),Nc=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=a("a"),vLr=o("from_pretrained()"),TLr=o(" class method or the "),NH=a("a"),MLr=o("from_config()"),ELr=o(` class
method.`),CLr=l(),bx=a("p"),wLr=o("This class cannot be instantiated directly using "),tTe=a("code"),ALr=o("__init__()"),yLr=o(" (throws an error)."),LLr=l(),zt=a("div"),v(Fx.$$.fragment),xLr=l(),aTe=a("p"),$Lr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kLr=l(),jc=a("p"),SLr=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),RLr=o("not"),BLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),PLr=o("from_pretrained()"),ILr=o(" to load the model weights."),qLr=l(),v(ow.$$.fragment),NLr=l(),zr=a("div"),v(vx.$$.fragment),jLr=l(),sTe=a("p"),DLr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GLr=l(),_n=a("p"),OLr=o("The model class to instantiate is selected based on the "),lTe=a("code"),VLr=o("model_type"),XLr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),zLr=o("pretrained_model_name_or_path"),QLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),WLr=o("pretrained_model_name_or_path"),HLr=o(":"),ULr=l(),Tx=a("ul"),rw=a("li"),cTe=a("strong"),JLr=o("beit"),YLr=o(" \u2014 "),DH=a("a"),KLr=o("FlaxBeitForImageClassification"),ZLr=o(" (BEiT model)"),e8r=l(),tw=a("li"),fTe=a("strong"),o8r=o("vit"),r8r=o(" \u2014 "),GH=a("a"),t8r=o("FlaxViTForImageClassification"),a8r=o(" (ViT model)"),n8r=l(),v(aw.$$.fragment),ySe=l(),Dc=a("h2"),nw=a("a"),mTe=a("span"),v(Mx.$$.fragment),s8r=l(),hTe=a("span"),l8r=o("FlaxAutoModelForVision2Seq"),LSe=l(),Fr=a("div"),v(Ex.$$.fragment),i8r=l(),Gc=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OH=a("a"),c8r=o("from_pretrained()"),f8r=o(" class method or the "),VH=a("a"),m8r=o("from_config()"),h8r=o(` class
method.`),g8r=l(),Cx=a("p"),p8r=o("This class cannot be instantiated directly using "),gTe=a("code"),u8r=o("__init__()"),_8r=o(" (throws an error)."),b8r=l(),Qt=a("div"),v(wx.$$.fragment),F8r=l(),pTe=a("p"),v8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T8r=l(),Oc=a("p"),M8r=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),E8r=o("not"),C8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),w8r=o("from_pretrained()"),A8r=o(" to load the model weights."),y8r=l(),v(sw.$$.fragment),L8r=l(),Qr=a("div"),v(Ax.$$.fragment),x8r=l(),_Te=a("p"),$8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k8r=l(),bn=a("p"),S8r=o("The model class to instantiate is selected based on the "),bTe=a("code"),R8r=o("model_type"),B8r=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),P8r=o("pretrained_model_name_or_path"),I8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),q8r=o("pretrained_model_name_or_path"),N8r=o(":"),j8r=l(),TTe=a("ul"),lw=a("li"),MTe=a("strong"),D8r=o("vision-encoder-decoder"),G8r=o(" \u2014 "),zH=a("a"),O8r=o("FlaxVisionEncoderDecoderModel"),V8r=o(" (Vision Encoder decoder model)"),X8r=l(),v(iw.$$.fragment),this.h()},l(f){const _=O2t('[data-svelte="svelte-1phssyn"]',document.head);h=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(f),p=n(f,"H1",{class:!0});var yx=s(p);m=n(yx,"A",{id:!0,class:!0,href:!0});var ETe=s(m);u=n(ETe,"SPAN",{});var CTe=s(u);T(d.$$.fragment,CTe),CTe.forEach(t),ETe.forEach(t),g=i(yx),vo=n(yx,"SPAN",{});var wTe=s(vo);Ql=r(wTe,"Auto Classes"),wTe.forEach(t),yx.forEach(t),Qc=i(f),Yr=n(f,"P",{});var Lx=s(Yr);Wl=r(Lx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Hl=n(Lx,"CODE",{});var ATe=s(Hl);E0=r(ATe,"from_pretrained()"),ATe.forEach(t),Wc=r(Lx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Lx.forEach(t),Be=i(f),Ge=n(f,"P",{});var Fn=s(Ge);Ul=r(Fn,"Instantiating one of "),vn=n(Fn,"A",{href:!0});var yTe=s(vn);C0=r(yTe,"AutoConfig"),yTe.forEach(t),Tn=r(Fn,", "),Mn=n(Fn,"A",{href:!0});var LTe=s(Mn);w0=r(LTe,"AutoModel"),LTe.forEach(t),Jl=r(Fn,`, and
`),En=n(Fn,"A",{href:!0});var xTe=s(En);A0=r(xTe,"AutoTokenizer"),xTe.forEach(t),Yl=r(Fn," will directly create a class of the relevant architecture. For instance"),Fn.forEach(t),Hc=i(f),T(ba.$$.fragment,f),Oe=i(f),Me=n(f,"P",{});var xx=s(Me);k7=r(xx,"will create a model that is an instance of "),Kl=n(xx,"A",{href:!0});var $Te=s(Kl);S7=r($Te,"BertModel"),$Te.forEach(t),R7=r(xx,"."),xx.forEach(t),To=i(f),Fa=n(f,"P",{});var $x=s(Fa);B7=r($x,"There is one class of "),Uc=n($x,"CODE",{});var kTe=s(Uc);P7=r(kTe,"AutoModel"),kTe.forEach(t),PBe=r($x," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$x.forEach(t),L9e=i(f),Zl=n(f,"H2",{class:!0});var kx=s(Zl);Jc=n(kx,"A",{id:!0,class:!0,href:!0});var STe=s(Jc);IJ=n(STe,"SPAN",{});var RTe=s(IJ);T(y0.$$.fragment,RTe),RTe.forEach(t),STe.forEach(t),IBe=i(kx),qJ=n(kx,"SPAN",{});var BTe=s(qJ);qBe=r(BTe,"Extending the Auto Classes"),BTe.forEach(t),kx.forEach(t),x9e=i(f),Cn=n(f,"P",{});var Vc=s(Cn);NBe=r(Vc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),NJ=n(Vc,"CODE",{});var PTe=s(NJ);jBe=r(PTe,"NewModel"),PTe.forEach(t),DBe=r(Vc,", make sure you have a "),jJ=n(Vc,"CODE",{});var ITe=s(jJ);GBe=r(ITe,"NewModelConfig"),ITe.forEach(t),OBe=r(Vc,` then you can add those to the auto
classes like this:`),Vc.forEach(t),$9e=i(f),T(L0.$$.fragment,f),k9e=i(f),I7=n(f,"P",{});var qTe=s(I7);VBe=r(qTe,"You will then be able to use the auto classes like you would usually do!"),qTe.forEach(t),S9e=i(f),T(Yc.$$.fragment,f),R9e=i(f),ei=n(f,"H2",{class:!0});var Sx=s(ei);Kc=n(Sx,"A",{id:!0,class:!0,href:!0});var NTe=s(Kc);DJ=n(NTe,"SPAN",{});var jTe=s(DJ);T(x0.$$.fragment,jTe),jTe.forEach(t),NTe.forEach(t),XBe=i(Sx),GJ=n(Sx,"SPAN",{});var DTe=s(GJ);zBe=r(DTe,"AutoConfig"),DTe.forEach(t),Sx.forEach(t),B9e=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T($0.$$.fragment,Ur),QBe=i(Ur),k0=n(Ur,"P",{});var Rx=s(k0);WBe=r(Rx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),q7=n(Rx,"A",{href:!0});var GTe=s(q7);HBe=r(GTe,"from_pretrained()"),GTe.forEach(t),UBe=r(Rx," class method."),Rx.forEach(t),JBe=i(Ur),S0=n(Ur,"P",{});var Bx=s(S0);YBe=r(Bx,"This class cannot be instantiated directly using "),OJ=n(Bx,"CODE",{});var OTe=s(OJ);KBe=r(OTe,"__init__()"),OTe.forEach(t),ZBe=r(Bx," (throws an error)."),Bx.forEach(t),ePe=i(Ur),vr=n(Ur,"DIV",{class:!0});var Jr=s(vr);T(R0.$$.fragment,Jr),oPe=i(Jr),VJ=n(Jr,"P",{});var VTe=s(VJ);rPe=r(VTe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),VTe.forEach(t),tPe=i(Jr),oi=n(Jr,"P",{});var Xc=s(oi);aPe=r(Xc,"The configuration class to instantiate is selected based on the "),XJ=n(Xc,"CODE",{});var XTe=s(XJ);nPe=r(XTe,"model_type"),XTe.forEach(t),sPe=r(Xc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zJ=n(Xc,"CODE",{});var zTe=s(zJ);lPe=r(zTe,"pretrained_model_name_or_path"),zTe.forEach(t),iPe=r(Xc,":"),Xc.forEach(t),dPe=i(Jr),y=n(Jr,"UL",{});var L=s(y);Zc=n(L,"LI",{});var dw=s(Zc);QJ=n(dw,"STRONG",{});var QTe=s(QJ);cPe=r(QTe,"albert"),QTe.forEach(t),fPe=r(dw," \u2014 "),N7=n(dw,"A",{href:!0});var WTe=s(N7);mPe=r(WTe,"AlbertConfig"),WTe.forEach(t),hPe=r(dw," (ALBERT model)"),dw.forEach(t),gPe=i(L),ef=n(L,"LI",{});var cw=s(ef);WJ=n(cw,"STRONG",{});var HTe=s(WJ);pPe=r(HTe,"bart"),HTe.forEach(t),uPe=r(cw," \u2014 "),j7=n(cw,"A",{href:!0});var UTe=s(j7);_Pe=r(UTe,"BartConfig"),UTe.forEach(t),bPe=r(cw," (BART model)"),cw.forEach(t),FPe=i(L),of=n(L,"LI",{});var fw=s(of);HJ=n(fw,"STRONG",{});var JTe=s(HJ);vPe=r(JTe,"beit"),JTe.forEach(t),TPe=r(fw," \u2014 "),D7=n(fw,"A",{href:!0});var YTe=s(D7);MPe=r(YTe,"BeitConfig"),YTe.forEach(t),EPe=r(fw," (BEiT model)"),fw.forEach(t),CPe=i(L),rf=n(L,"LI",{});var mw=s(rf);UJ=n(mw,"STRONG",{});var KTe=s(UJ);wPe=r(KTe,"bert"),KTe.forEach(t),APe=r(mw," \u2014 "),G7=n(mw,"A",{href:!0});var ZTe=s(G7);yPe=r(ZTe,"BertConfig"),ZTe.forEach(t),LPe=r(mw," (BERT model)"),mw.forEach(t),xPe=i(L),tf=n(L,"LI",{});var hw=s(tf);JJ=n(hw,"STRONG",{});var eMe=s(JJ);$Pe=r(eMe,"bert-generation"),eMe.forEach(t),kPe=r(hw," \u2014 "),O7=n(hw,"A",{href:!0});var oMe=s(O7);SPe=r(oMe,"BertGenerationConfig"),oMe.forEach(t),RPe=r(hw," (Bert Generation model)"),hw.forEach(t),BPe=i(L),af=n(L,"LI",{});var gw=s(af);YJ=n(gw,"STRONG",{});var rMe=s(YJ);PPe=r(rMe,"big_bird"),rMe.forEach(t),IPe=r(gw," \u2014 "),V7=n(gw,"A",{href:!0});var tMe=s(V7);qPe=r(tMe,"BigBirdConfig"),tMe.forEach(t),NPe=r(gw," (BigBird model)"),gw.forEach(t),jPe=i(L),nf=n(L,"LI",{});var pw=s(nf);KJ=n(pw,"STRONG",{});var aMe=s(KJ);DPe=r(aMe,"bigbird_pegasus"),aMe.forEach(t),GPe=r(pw," \u2014 "),X7=n(pw,"A",{href:!0});var nMe=s(X7);OPe=r(nMe,"BigBirdPegasusConfig"),nMe.forEach(t),VPe=r(pw," (BigBirdPegasus model)"),pw.forEach(t),XPe=i(L),sf=n(L,"LI",{});var uw=s(sf);ZJ=n(uw,"STRONG",{});var sMe=s(ZJ);zPe=r(sMe,"blenderbot"),sMe.forEach(t),QPe=r(uw," \u2014 "),z7=n(uw,"A",{href:!0});var lMe=s(z7);WPe=r(lMe,"BlenderbotConfig"),lMe.forEach(t),HPe=r(uw," (Blenderbot model)"),uw.forEach(t),UPe=i(L),lf=n(L,"LI",{});var _w=s(lf);eY=n(_w,"STRONG",{});var iMe=s(eY);JPe=r(iMe,"blenderbot-small"),iMe.forEach(t),YPe=r(_w," \u2014 "),Q7=n(_w,"A",{href:!0});var dMe=s(Q7);KPe=r(dMe,"BlenderbotSmallConfig"),dMe.forEach(t),ZPe=r(_w," (BlenderbotSmall model)"),_w.forEach(t),eIe=i(L),df=n(L,"LI",{});var bw=s(df);oY=n(bw,"STRONG",{});var cMe=s(oY);oIe=r(cMe,"camembert"),cMe.forEach(t),rIe=r(bw," \u2014 "),W7=n(bw,"A",{href:!0});var fMe=s(W7);tIe=r(fMe,"CamembertConfig"),fMe.forEach(t),aIe=r(bw," (CamemBERT model)"),bw.forEach(t),nIe=i(L),cf=n(L,"LI",{});var Fw=s(cf);rY=n(Fw,"STRONG",{});var mMe=s(rY);sIe=r(mMe,"canine"),mMe.forEach(t),lIe=r(Fw," \u2014 "),H7=n(Fw,"A",{href:!0});var hMe=s(H7);iIe=r(hMe,"CanineConfig"),hMe.forEach(t),dIe=r(Fw," (Canine model)"),Fw.forEach(t),cIe=i(L),ff=n(L,"LI",{});var vw=s(ff);tY=n(vw,"STRONG",{});var gMe=s(tY);fIe=r(gMe,"clip"),gMe.forEach(t),mIe=r(vw," \u2014 "),U7=n(vw,"A",{href:!0});var pMe=s(U7);hIe=r(pMe,"CLIPConfig"),pMe.forEach(t),gIe=r(vw," (CLIP model)"),vw.forEach(t),pIe=i(L),mf=n(L,"LI",{});var Tw=s(mf);aY=n(Tw,"STRONG",{});var uMe=s(aY);uIe=r(uMe,"convbert"),uMe.forEach(t),_Ie=r(Tw," \u2014 "),J7=n(Tw,"A",{href:!0});var _Me=s(J7);bIe=r(_Me,"ConvBertConfig"),_Me.forEach(t),FIe=r(Tw," (ConvBERT model)"),Tw.forEach(t),vIe=i(L),hf=n(L,"LI",{});var Mw=s(hf);nY=n(Mw,"STRONG",{});var bMe=s(nY);TIe=r(bMe,"convnext"),bMe.forEach(t),MIe=r(Mw," \u2014 "),Y7=n(Mw,"A",{href:!0});var FMe=s(Y7);EIe=r(FMe,"ConvNextConfig"),FMe.forEach(t),CIe=r(Mw," (ConvNext model)"),Mw.forEach(t),wIe=i(L),gf=n(L,"LI",{});var Ew=s(gf);sY=n(Ew,"STRONG",{});var vMe=s(sY);AIe=r(vMe,"ctrl"),vMe.forEach(t),yIe=r(Ew," \u2014 "),K7=n(Ew,"A",{href:!0});var TMe=s(K7);LIe=r(TMe,"CTRLConfig"),TMe.forEach(t),xIe=r(Ew," (CTRL model)"),Ew.forEach(t),$Ie=i(L),pf=n(L,"LI",{});var Cw=s(pf);lY=n(Cw,"STRONG",{});var MMe=s(lY);kIe=r(MMe,"data2vec-audio"),MMe.forEach(t),SIe=r(Cw," \u2014 "),Z7=n(Cw,"A",{href:!0});var EMe=s(Z7);RIe=r(EMe,"Data2VecAudioConfig"),EMe.forEach(t),BIe=r(Cw," (Data2VecAudio model)"),Cw.forEach(t),PIe=i(L),uf=n(L,"LI",{});var ww=s(uf);iY=n(ww,"STRONG",{});var CMe=s(iY);IIe=r(CMe,"data2vec-text"),CMe.forEach(t),qIe=r(ww," \u2014 "),e$=n(ww,"A",{href:!0});var wMe=s(e$);NIe=r(wMe,"Data2VecTextConfig"),wMe.forEach(t),jIe=r(ww," (Data2VecText model)"),ww.forEach(t),DIe=i(L),_f=n(L,"LI",{});var Aw=s(_f);dY=n(Aw,"STRONG",{});var AMe=s(dY);GIe=r(AMe,"deberta"),AMe.forEach(t),OIe=r(Aw," \u2014 "),o$=n(Aw,"A",{href:!0});var yMe=s(o$);VIe=r(yMe,"DebertaConfig"),yMe.forEach(t),XIe=r(Aw," (DeBERTa model)"),Aw.forEach(t),zIe=i(L),bf=n(L,"LI",{});var yw=s(bf);cY=n(yw,"STRONG",{});var LMe=s(cY);QIe=r(LMe,"deberta-v2"),LMe.forEach(t),WIe=r(yw," \u2014 "),r$=n(yw,"A",{href:!0});var xMe=s(r$);HIe=r(xMe,"DebertaV2Config"),xMe.forEach(t),UIe=r(yw," (DeBERTa-v2 model)"),yw.forEach(t),JIe=i(L),Ff=n(L,"LI",{});var Lw=s(Ff);fY=n(Lw,"STRONG",{});var $Me=s(fY);YIe=r($Me,"decision_transformer"),$Me.forEach(t),KIe=r(Lw," \u2014 "),t$=n(Lw,"A",{href:!0});var kMe=s(t$);ZIe=r(kMe,"DecisionTransformerConfig"),kMe.forEach(t),eqe=r(Lw," (Decision Transformer model)"),Lw.forEach(t),oqe=i(L),vf=n(L,"LI",{});var xw=s(vf);mY=n(xw,"STRONG",{});var SMe=s(mY);rqe=r(SMe,"deit"),SMe.forEach(t),tqe=r(xw," \u2014 "),a$=n(xw,"A",{href:!0});var RMe=s(a$);aqe=r(RMe,"DeiTConfig"),RMe.forEach(t),nqe=r(xw," (DeiT model)"),xw.forEach(t),sqe=i(L),Tf=n(L,"LI",{});var $w=s(Tf);hY=n($w,"STRONG",{});var BMe=s(hY);lqe=r(BMe,"detr"),BMe.forEach(t),iqe=r($w," \u2014 "),n$=n($w,"A",{href:!0});var PMe=s(n$);dqe=r(PMe,"DetrConfig"),PMe.forEach(t),cqe=r($w," (DETR model)"),$w.forEach(t),fqe=i(L),Mf=n(L,"LI",{});var IMe=s(Mf);gY=n(IMe,"STRONG",{});var Q8r=s(gY);mqe=r(Q8r,"distilbert"),Q8r.forEach(t),hqe=r(IMe," \u2014 "),s$=n(IMe,"A",{href:!0});var W8r=s(s$);gqe=r(W8r,"DistilBertConfig"),W8r.forEach(t),pqe=r(IMe," (DistilBERT model)"),IMe.forEach(t),uqe=i(L),Ef=n(L,"LI",{});var qMe=s(Ef);pY=n(qMe,"STRONG",{});var H8r=s(pY);_qe=r(H8r,"dpr"),H8r.forEach(t),bqe=r(qMe," \u2014 "),l$=n(qMe,"A",{href:!0});var U8r=s(l$);Fqe=r(U8r,"DPRConfig"),U8r.forEach(t),vqe=r(qMe," (DPR model)"),qMe.forEach(t),Tqe=i(L),Cf=n(L,"LI",{});var NMe=s(Cf);uY=n(NMe,"STRONG",{});var J8r=s(uY);Mqe=r(J8r,"electra"),J8r.forEach(t),Eqe=r(NMe," \u2014 "),i$=n(NMe,"A",{href:!0});var Y8r=s(i$);Cqe=r(Y8r,"ElectraConfig"),Y8r.forEach(t),wqe=r(NMe," (ELECTRA model)"),NMe.forEach(t),Aqe=i(L),wf=n(L,"LI",{});var jMe=s(wf);_Y=n(jMe,"STRONG",{});var K8r=s(_Y);yqe=r(K8r,"encoder-decoder"),K8r.forEach(t),Lqe=r(jMe," \u2014 "),d$=n(jMe,"A",{href:!0});var Z8r=s(d$);xqe=r(Z8r,"EncoderDecoderConfig"),Z8r.forEach(t),$qe=r(jMe," (Encoder decoder model)"),jMe.forEach(t),kqe=i(L),Af=n(L,"LI",{});var DMe=s(Af);bY=n(DMe,"STRONG",{});var exr=s(bY);Sqe=r(exr,"flaubert"),exr.forEach(t),Rqe=r(DMe," \u2014 "),c$=n(DMe,"A",{href:!0});var oxr=s(c$);Bqe=r(oxr,"FlaubertConfig"),oxr.forEach(t),Pqe=r(DMe," (FlauBERT model)"),DMe.forEach(t),Iqe=i(L),yf=n(L,"LI",{});var GMe=s(yf);FY=n(GMe,"STRONG",{});var rxr=s(FY);qqe=r(rxr,"fnet"),rxr.forEach(t),Nqe=r(GMe," \u2014 "),f$=n(GMe,"A",{href:!0});var txr=s(f$);jqe=r(txr,"FNetConfig"),txr.forEach(t),Dqe=r(GMe," (FNet model)"),GMe.forEach(t),Gqe=i(L),Lf=n(L,"LI",{});var OMe=s(Lf);vY=n(OMe,"STRONG",{});var axr=s(vY);Oqe=r(axr,"fsmt"),axr.forEach(t),Vqe=r(OMe," \u2014 "),m$=n(OMe,"A",{href:!0});var nxr=s(m$);Xqe=r(nxr,"FSMTConfig"),nxr.forEach(t),zqe=r(OMe," (FairSeq Machine-Translation model)"),OMe.forEach(t),Qqe=i(L),xf=n(L,"LI",{});var VMe=s(xf);TY=n(VMe,"STRONG",{});var sxr=s(TY);Wqe=r(sxr,"funnel"),sxr.forEach(t),Hqe=r(VMe," \u2014 "),h$=n(VMe,"A",{href:!0});var lxr=s(h$);Uqe=r(lxr,"FunnelConfig"),lxr.forEach(t),Jqe=r(VMe," (Funnel Transformer model)"),VMe.forEach(t),Yqe=i(L),$f=n(L,"LI",{});var XMe=s($f);MY=n(XMe,"STRONG",{});var ixr=s(MY);Kqe=r(ixr,"glpn"),ixr.forEach(t),Zqe=r(XMe," \u2014 "),g$=n(XMe,"A",{href:!0});var dxr=s(g$);eNe=r(dxr,"GLPNConfig"),dxr.forEach(t),oNe=r(XMe," (GLPN model)"),XMe.forEach(t),rNe=i(L),kf=n(L,"LI",{});var zMe=s(kf);EY=n(zMe,"STRONG",{});var cxr=s(EY);tNe=r(cxr,"gpt2"),cxr.forEach(t),aNe=r(zMe," \u2014 "),p$=n(zMe,"A",{href:!0});var fxr=s(p$);nNe=r(fxr,"GPT2Config"),fxr.forEach(t),sNe=r(zMe," (OpenAI GPT-2 model)"),zMe.forEach(t),lNe=i(L),Sf=n(L,"LI",{});var QMe=s(Sf);CY=n(QMe,"STRONG",{});var mxr=s(CY);iNe=r(mxr,"gpt_neo"),mxr.forEach(t),dNe=r(QMe," \u2014 "),u$=n(QMe,"A",{href:!0});var hxr=s(u$);cNe=r(hxr,"GPTNeoConfig"),hxr.forEach(t),fNe=r(QMe," (GPT Neo model)"),QMe.forEach(t),mNe=i(L),Rf=n(L,"LI",{});var WMe=s(Rf);wY=n(WMe,"STRONG",{});var gxr=s(wY);hNe=r(gxr,"gptj"),gxr.forEach(t),gNe=r(WMe," \u2014 "),_$=n(WMe,"A",{href:!0});var pxr=s(_$);pNe=r(pxr,"GPTJConfig"),pxr.forEach(t),uNe=r(WMe," (GPT-J model)"),WMe.forEach(t),_Ne=i(L),Bf=n(L,"LI",{});var HMe=s(Bf);AY=n(HMe,"STRONG",{});var uxr=s(AY);bNe=r(uxr,"hubert"),uxr.forEach(t),FNe=r(HMe," \u2014 "),b$=n(HMe,"A",{href:!0});var _xr=s(b$);vNe=r(_xr,"HubertConfig"),_xr.forEach(t),TNe=r(HMe," (Hubert model)"),HMe.forEach(t),MNe=i(L),Pf=n(L,"LI",{});var UMe=s(Pf);yY=n(UMe,"STRONG",{});var bxr=s(yY);ENe=r(bxr,"ibert"),bxr.forEach(t),CNe=r(UMe," \u2014 "),F$=n(UMe,"A",{href:!0});var Fxr=s(F$);wNe=r(Fxr,"IBertConfig"),Fxr.forEach(t),ANe=r(UMe," (I-BERT model)"),UMe.forEach(t),yNe=i(L),If=n(L,"LI",{});var JMe=s(If);LY=n(JMe,"STRONG",{});var vxr=s(LY);LNe=r(vxr,"imagegpt"),vxr.forEach(t),xNe=r(JMe," \u2014 "),v$=n(JMe,"A",{href:!0});var Txr=s(v$);$Ne=r(Txr,"ImageGPTConfig"),Txr.forEach(t),kNe=r(JMe," (ImageGPT model)"),JMe.forEach(t),SNe=i(L),qf=n(L,"LI",{});var YMe=s(qf);xY=n(YMe,"STRONG",{});var Mxr=s(xY);RNe=r(Mxr,"layoutlm"),Mxr.forEach(t),BNe=r(YMe," \u2014 "),T$=n(YMe,"A",{href:!0});var Exr=s(T$);PNe=r(Exr,"LayoutLMConfig"),Exr.forEach(t),INe=r(YMe," (LayoutLM model)"),YMe.forEach(t),qNe=i(L),Nf=n(L,"LI",{});var KMe=s(Nf);$Y=n(KMe,"STRONG",{});var Cxr=s($Y);NNe=r(Cxr,"layoutlmv2"),Cxr.forEach(t),jNe=r(KMe," \u2014 "),M$=n(KMe,"A",{href:!0});var wxr=s(M$);DNe=r(wxr,"LayoutLMv2Config"),wxr.forEach(t),GNe=r(KMe," (LayoutLMv2 model)"),KMe.forEach(t),ONe=i(L),jf=n(L,"LI",{});var ZMe=s(jf);kY=n(ZMe,"STRONG",{});var Axr=s(kY);VNe=r(Axr,"led"),Axr.forEach(t),XNe=r(ZMe," \u2014 "),E$=n(ZMe,"A",{href:!0});var yxr=s(E$);zNe=r(yxr,"LEDConfig"),yxr.forEach(t),QNe=r(ZMe," (LED model)"),ZMe.forEach(t),WNe=i(L),Df=n(L,"LI",{});var e4e=s(Df);SY=n(e4e,"STRONG",{});var Lxr=s(SY);HNe=r(Lxr,"longformer"),Lxr.forEach(t),UNe=r(e4e," \u2014 "),C$=n(e4e,"A",{href:!0});var xxr=s(C$);JNe=r(xxr,"LongformerConfig"),xxr.forEach(t),YNe=r(e4e," (Longformer model)"),e4e.forEach(t),KNe=i(L),Gf=n(L,"LI",{});var o4e=s(Gf);RY=n(o4e,"STRONG",{});var $xr=s(RY);ZNe=r($xr,"luke"),$xr.forEach(t),eje=r(o4e," \u2014 "),w$=n(o4e,"A",{href:!0});var kxr=s(w$);oje=r(kxr,"LukeConfig"),kxr.forEach(t),rje=r(o4e," (LUKE model)"),o4e.forEach(t),tje=i(L),Of=n(L,"LI",{});var r4e=s(Of);BY=n(r4e,"STRONG",{});var Sxr=s(BY);aje=r(Sxr,"lxmert"),Sxr.forEach(t),nje=r(r4e," \u2014 "),A$=n(r4e,"A",{href:!0});var Rxr=s(A$);sje=r(Rxr,"LxmertConfig"),Rxr.forEach(t),lje=r(r4e," (LXMERT model)"),r4e.forEach(t),ije=i(L),Vf=n(L,"LI",{});var t4e=s(Vf);PY=n(t4e,"STRONG",{});var Bxr=s(PY);dje=r(Bxr,"m2m_100"),Bxr.forEach(t),cje=r(t4e," \u2014 "),y$=n(t4e,"A",{href:!0});var Pxr=s(y$);fje=r(Pxr,"M2M100Config"),Pxr.forEach(t),mje=r(t4e," (M2M100 model)"),t4e.forEach(t),hje=i(L),Xf=n(L,"LI",{});var a4e=s(Xf);IY=n(a4e,"STRONG",{});var Ixr=s(IY);gje=r(Ixr,"marian"),Ixr.forEach(t),pje=r(a4e," \u2014 "),L$=n(a4e,"A",{href:!0});var qxr=s(L$);uje=r(qxr,"MarianConfig"),qxr.forEach(t),_je=r(a4e," (Marian model)"),a4e.forEach(t),bje=i(L),zf=n(L,"LI",{});var n4e=s(zf);qY=n(n4e,"STRONG",{});var Nxr=s(qY);Fje=r(Nxr,"maskformer"),Nxr.forEach(t),vje=r(n4e," \u2014 "),x$=n(n4e,"A",{href:!0});var jxr=s(x$);Tje=r(jxr,"MaskFormerConfig"),jxr.forEach(t),Mje=r(n4e," (MaskFormer model)"),n4e.forEach(t),Eje=i(L),Qf=n(L,"LI",{});var s4e=s(Qf);NY=n(s4e,"STRONG",{});var Dxr=s(NY);Cje=r(Dxr,"mbart"),Dxr.forEach(t),wje=r(s4e," \u2014 "),$$=n(s4e,"A",{href:!0});var Gxr=s($$);Aje=r(Gxr,"MBartConfig"),Gxr.forEach(t),yje=r(s4e," (mBART model)"),s4e.forEach(t),Lje=i(L),Wf=n(L,"LI",{});var l4e=s(Wf);jY=n(l4e,"STRONG",{});var Oxr=s(jY);xje=r(Oxr,"megatron-bert"),Oxr.forEach(t),$je=r(l4e," \u2014 "),k$=n(l4e,"A",{href:!0});var Vxr=s(k$);kje=r(Vxr,"MegatronBertConfig"),Vxr.forEach(t),Sje=r(l4e," (MegatronBert model)"),l4e.forEach(t),Rje=i(L),Hf=n(L,"LI",{});var i4e=s(Hf);DY=n(i4e,"STRONG",{});var Xxr=s(DY);Bje=r(Xxr,"mobilebert"),Xxr.forEach(t),Pje=r(i4e," \u2014 "),S$=n(i4e,"A",{href:!0});var zxr=s(S$);Ije=r(zxr,"MobileBertConfig"),zxr.forEach(t),qje=r(i4e," (MobileBERT model)"),i4e.forEach(t),Nje=i(L),Uf=n(L,"LI",{});var d4e=s(Uf);GY=n(d4e,"STRONG",{});var Qxr=s(GY);jje=r(Qxr,"mpnet"),Qxr.forEach(t),Dje=r(d4e," \u2014 "),R$=n(d4e,"A",{href:!0});var Wxr=s(R$);Gje=r(Wxr,"MPNetConfig"),Wxr.forEach(t),Oje=r(d4e," (MPNet model)"),d4e.forEach(t),Vje=i(L),Jf=n(L,"LI",{});var c4e=s(Jf);OY=n(c4e,"STRONG",{});var Hxr=s(OY);Xje=r(Hxr,"mt5"),Hxr.forEach(t),zje=r(c4e," \u2014 "),B$=n(c4e,"A",{href:!0});var Uxr=s(B$);Qje=r(Uxr,"MT5Config"),Uxr.forEach(t),Wje=r(c4e," (mT5 model)"),c4e.forEach(t),Hje=i(L),Yf=n(L,"LI",{});var f4e=s(Yf);VY=n(f4e,"STRONG",{});var Jxr=s(VY);Uje=r(Jxr,"nystromformer"),Jxr.forEach(t),Jje=r(f4e," \u2014 "),P$=n(f4e,"A",{href:!0});var Yxr=s(P$);Yje=r(Yxr,"NystromformerConfig"),Yxr.forEach(t),Kje=r(f4e," (Nystromformer model)"),f4e.forEach(t),Zje=i(L),Kf=n(L,"LI",{});var m4e=s(Kf);XY=n(m4e,"STRONG",{});var Kxr=s(XY);eDe=r(Kxr,"openai-gpt"),Kxr.forEach(t),oDe=r(m4e," \u2014 "),I$=n(m4e,"A",{href:!0});var Zxr=s(I$);rDe=r(Zxr,"OpenAIGPTConfig"),Zxr.forEach(t),tDe=r(m4e," (OpenAI GPT model)"),m4e.forEach(t),aDe=i(L),Zf=n(L,"LI",{});var h4e=s(Zf);zY=n(h4e,"STRONG",{});var e7r=s(zY);nDe=r(e7r,"pegasus"),e7r.forEach(t),sDe=r(h4e," \u2014 "),q$=n(h4e,"A",{href:!0});var o7r=s(q$);lDe=r(o7r,"PegasusConfig"),o7r.forEach(t),iDe=r(h4e," (Pegasus model)"),h4e.forEach(t),dDe=i(L),em=n(L,"LI",{});var g4e=s(em);QY=n(g4e,"STRONG",{});var r7r=s(QY);cDe=r(r7r,"perceiver"),r7r.forEach(t),fDe=r(g4e," \u2014 "),N$=n(g4e,"A",{href:!0});var t7r=s(N$);mDe=r(t7r,"PerceiverConfig"),t7r.forEach(t),hDe=r(g4e," (Perceiver model)"),g4e.forEach(t),gDe=i(L),om=n(L,"LI",{});var p4e=s(om);WY=n(p4e,"STRONG",{});var a7r=s(WY);pDe=r(a7r,"plbart"),a7r.forEach(t),uDe=r(p4e," \u2014 "),HY=n(p4e,"CODE",{});var n7r=s(HY);_De=r(n7r,"PLBartConfig"),n7r.forEach(t),bDe=r(p4e," (PLBart model)"),p4e.forEach(t),FDe=i(L),rm=n(L,"LI",{});var u4e=s(rm);UY=n(u4e,"STRONG",{});var s7r=s(UY);vDe=r(s7r,"poolformer"),s7r.forEach(t),TDe=r(u4e," \u2014 "),j$=n(u4e,"A",{href:!0});var l7r=s(j$);MDe=r(l7r,"PoolFormerConfig"),l7r.forEach(t),EDe=r(u4e," (PoolFormer model)"),u4e.forEach(t),CDe=i(L),tm=n(L,"LI",{});var _4e=s(tm);JY=n(_4e,"STRONG",{});var i7r=s(JY);wDe=r(i7r,"prophetnet"),i7r.forEach(t),ADe=r(_4e," \u2014 "),D$=n(_4e,"A",{href:!0});var d7r=s(D$);yDe=r(d7r,"ProphetNetConfig"),d7r.forEach(t),LDe=r(_4e," (ProphetNet model)"),_4e.forEach(t),xDe=i(L),am=n(L,"LI",{});var b4e=s(am);YY=n(b4e,"STRONG",{});var c7r=s(YY);$De=r(c7r,"qdqbert"),c7r.forEach(t),kDe=r(b4e," \u2014 "),KY=n(b4e,"CODE",{});var f7r=s(KY);SDe=r(f7r,"QDQBertConfig"),f7r.forEach(t),RDe=r(b4e," (QDQBert model)"),b4e.forEach(t),BDe=i(L),nm=n(L,"LI",{});var F4e=s(nm);ZY=n(F4e,"STRONG",{});var m7r=s(ZY);PDe=r(m7r,"rag"),m7r.forEach(t),IDe=r(F4e," \u2014 "),G$=n(F4e,"A",{href:!0});var h7r=s(G$);qDe=r(h7r,"RagConfig"),h7r.forEach(t),NDe=r(F4e," (RAG model)"),F4e.forEach(t),jDe=i(L),sm=n(L,"LI",{});var v4e=s(sm);eK=n(v4e,"STRONG",{});var g7r=s(eK);DDe=r(g7r,"realm"),g7r.forEach(t),GDe=r(v4e," \u2014 "),O$=n(v4e,"A",{href:!0});var p7r=s(O$);ODe=r(p7r,"RealmConfig"),p7r.forEach(t),VDe=r(v4e," (Realm model)"),v4e.forEach(t),XDe=i(L),lm=n(L,"LI",{});var T4e=s(lm);oK=n(T4e,"STRONG",{});var u7r=s(oK);zDe=r(u7r,"reformer"),u7r.forEach(t),QDe=r(T4e," \u2014 "),V$=n(T4e,"A",{href:!0});var _7r=s(V$);WDe=r(_7r,"ReformerConfig"),_7r.forEach(t),HDe=r(T4e," (Reformer model)"),T4e.forEach(t),UDe=i(L),im=n(L,"LI",{});var M4e=s(im);rK=n(M4e,"STRONG",{});var b7r=s(rK);JDe=r(b7r,"rembert"),b7r.forEach(t),YDe=r(M4e," \u2014 "),X$=n(M4e,"A",{href:!0});var F7r=s(X$);KDe=r(F7r,"RemBertConfig"),F7r.forEach(t),ZDe=r(M4e," (RemBERT model)"),M4e.forEach(t),eGe=i(L),dm=n(L,"LI",{});var E4e=s(dm);tK=n(E4e,"STRONG",{});var v7r=s(tK);oGe=r(v7r,"resnet"),v7r.forEach(t),rGe=r(E4e," \u2014 "),z$=n(E4e,"A",{href:!0});var T7r=s(z$);tGe=r(T7r,"ResNetConfig"),T7r.forEach(t),aGe=r(E4e," (ResNet model)"),E4e.forEach(t),nGe=i(L),cm=n(L,"LI",{});var C4e=s(cm);aK=n(C4e,"STRONG",{});var M7r=s(aK);sGe=r(M7r,"retribert"),M7r.forEach(t),lGe=r(C4e," \u2014 "),Q$=n(C4e,"A",{href:!0});var E7r=s(Q$);iGe=r(E7r,"RetriBertConfig"),E7r.forEach(t),dGe=r(C4e," (RetriBERT model)"),C4e.forEach(t),cGe=i(L),fm=n(L,"LI",{});var w4e=s(fm);nK=n(w4e,"STRONG",{});var C7r=s(nK);fGe=r(C7r,"roberta"),C7r.forEach(t),mGe=r(w4e," \u2014 "),W$=n(w4e,"A",{href:!0});var w7r=s(W$);hGe=r(w7r,"RobertaConfig"),w7r.forEach(t),gGe=r(w4e," (RoBERTa model)"),w4e.forEach(t),pGe=i(L),mm=n(L,"LI",{});var A4e=s(mm);sK=n(A4e,"STRONG",{});var A7r=s(sK);uGe=r(A7r,"roformer"),A7r.forEach(t),_Ge=r(A4e," \u2014 "),H$=n(A4e,"A",{href:!0});var y7r=s(H$);bGe=r(y7r,"RoFormerConfig"),y7r.forEach(t),FGe=r(A4e," (RoFormer model)"),A4e.forEach(t),vGe=i(L),hm=n(L,"LI",{});var y4e=s(hm);lK=n(y4e,"STRONG",{});var L7r=s(lK);TGe=r(L7r,"segformer"),L7r.forEach(t),MGe=r(y4e," \u2014 "),U$=n(y4e,"A",{href:!0});var x7r=s(U$);EGe=r(x7r,"SegformerConfig"),x7r.forEach(t),CGe=r(y4e," (SegFormer model)"),y4e.forEach(t),wGe=i(L),gm=n(L,"LI",{});var L4e=s(gm);iK=n(L4e,"STRONG",{});var $7r=s(iK);AGe=r($7r,"sew"),$7r.forEach(t),yGe=r(L4e," \u2014 "),J$=n(L4e,"A",{href:!0});var k7r=s(J$);LGe=r(k7r,"SEWConfig"),k7r.forEach(t),xGe=r(L4e," (SEW model)"),L4e.forEach(t),$Ge=i(L),pm=n(L,"LI",{});var x4e=s(pm);dK=n(x4e,"STRONG",{});var S7r=s(dK);kGe=r(S7r,"sew-d"),S7r.forEach(t),SGe=r(x4e," \u2014 "),Y$=n(x4e,"A",{href:!0});var R7r=s(Y$);RGe=r(R7r,"SEWDConfig"),R7r.forEach(t),BGe=r(x4e," (SEW-D model)"),x4e.forEach(t),PGe=i(L),um=n(L,"LI",{});var $4e=s(um);cK=n($4e,"STRONG",{});var B7r=s(cK);IGe=r(B7r,"speech-encoder-decoder"),B7r.forEach(t),qGe=r($4e," \u2014 "),K$=n($4e,"A",{href:!0});var P7r=s(K$);NGe=r(P7r,"SpeechEncoderDecoderConfig"),P7r.forEach(t),jGe=r($4e," (Speech Encoder decoder model)"),$4e.forEach(t),DGe=i(L),_m=n(L,"LI",{});var k4e=s(_m);fK=n(k4e,"STRONG",{});var I7r=s(fK);GGe=r(I7r,"speech_to_text"),I7r.forEach(t),OGe=r(k4e," \u2014 "),Z$=n(k4e,"A",{href:!0});var q7r=s(Z$);VGe=r(q7r,"Speech2TextConfig"),q7r.forEach(t),XGe=r(k4e," (Speech2Text model)"),k4e.forEach(t),zGe=i(L),bm=n(L,"LI",{});var S4e=s(bm);mK=n(S4e,"STRONG",{});var N7r=s(mK);QGe=r(N7r,"speech_to_text_2"),N7r.forEach(t),WGe=r(S4e," \u2014 "),e9=n(S4e,"A",{href:!0});var j7r=s(e9);HGe=r(j7r,"Speech2Text2Config"),j7r.forEach(t),UGe=r(S4e," (Speech2Text2 model)"),S4e.forEach(t),JGe=i(L),Fm=n(L,"LI",{});var R4e=s(Fm);hK=n(R4e,"STRONG",{});var D7r=s(hK);YGe=r(D7r,"splinter"),D7r.forEach(t),KGe=r(R4e," \u2014 "),o9=n(R4e,"A",{href:!0});var G7r=s(o9);ZGe=r(G7r,"SplinterConfig"),G7r.forEach(t),eOe=r(R4e," (Splinter model)"),R4e.forEach(t),oOe=i(L),vm=n(L,"LI",{});var B4e=s(vm);gK=n(B4e,"STRONG",{});var O7r=s(gK);rOe=r(O7r,"squeezebert"),O7r.forEach(t),tOe=r(B4e," \u2014 "),r9=n(B4e,"A",{href:!0});var V7r=s(r9);aOe=r(V7r,"SqueezeBertConfig"),V7r.forEach(t),nOe=r(B4e," (SqueezeBERT model)"),B4e.forEach(t),sOe=i(L),Tm=n(L,"LI",{});var P4e=s(Tm);pK=n(P4e,"STRONG",{});var X7r=s(pK);lOe=r(X7r,"swin"),X7r.forEach(t),iOe=r(P4e," \u2014 "),t9=n(P4e,"A",{href:!0});var z7r=s(t9);dOe=r(z7r,"SwinConfig"),z7r.forEach(t),cOe=r(P4e," (Swin model)"),P4e.forEach(t),fOe=i(L),Mm=n(L,"LI",{});var I4e=s(Mm);uK=n(I4e,"STRONG",{});var Q7r=s(uK);mOe=r(Q7r,"t5"),Q7r.forEach(t),hOe=r(I4e," \u2014 "),a9=n(I4e,"A",{href:!0});var W7r=s(a9);gOe=r(W7r,"T5Config"),W7r.forEach(t),pOe=r(I4e," (T5 model)"),I4e.forEach(t),uOe=i(L),Em=n(L,"LI",{});var q4e=s(Em);_K=n(q4e,"STRONG",{});var H7r=s(_K);_Oe=r(H7r,"tapas"),H7r.forEach(t),bOe=r(q4e," \u2014 "),n9=n(q4e,"A",{href:!0});var U7r=s(n9);FOe=r(U7r,"TapasConfig"),U7r.forEach(t),vOe=r(q4e," (TAPAS model)"),q4e.forEach(t),TOe=i(L),Cm=n(L,"LI",{});var N4e=s(Cm);bK=n(N4e,"STRONG",{});var J7r=s(bK);MOe=r(J7r,"transfo-xl"),J7r.forEach(t),EOe=r(N4e," \u2014 "),s9=n(N4e,"A",{href:!0});var Y7r=s(s9);COe=r(Y7r,"TransfoXLConfig"),Y7r.forEach(t),wOe=r(N4e," (Transformer-XL model)"),N4e.forEach(t),AOe=i(L),wm=n(L,"LI",{});var j4e=s(wm);FK=n(j4e,"STRONG",{});var K7r=s(FK);yOe=r(K7r,"trocr"),K7r.forEach(t),LOe=r(j4e," \u2014 "),l9=n(j4e,"A",{href:!0});var Z7r=s(l9);xOe=r(Z7r,"TrOCRConfig"),Z7r.forEach(t),$Oe=r(j4e," (TrOCR model)"),j4e.forEach(t),kOe=i(L),Am=n(L,"LI",{});var D4e=s(Am);vK=n(D4e,"STRONG",{});var e$r=s(vK);SOe=r(e$r,"unispeech"),e$r.forEach(t),ROe=r(D4e," \u2014 "),i9=n(D4e,"A",{href:!0});var o$r=s(i9);BOe=r(o$r,"UniSpeechConfig"),o$r.forEach(t),POe=r(D4e," (UniSpeech model)"),D4e.forEach(t),IOe=i(L),ym=n(L,"LI",{});var G4e=s(ym);TK=n(G4e,"STRONG",{});var r$r=s(TK);qOe=r(r$r,"unispeech-sat"),r$r.forEach(t),NOe=r(G4e," \u2014 "),d9=n(G4e,"A",{href:!0});var t$r=s(d9);jOe=r(t$r,"UniSpeechSatConfig"),t$r.forEach(t),DOe=r(G4e," (UniSpeechSat model)"),G4e.forEach(t),GOe=i(L),Lm=n(L,"LI",{});var O4e=s(Lm);MK=n(O4e,"STRONG",{});var a$r=s(MK);OOe=r(a$r,"van"),a$r.forEach(t),VOe=r(O4e," \u2014 "),c9=n(O4e,"A",{href:!0});var n$r=s(c9);XOe=r(n$r,"VanConfig"),n$r.forEach(t),zOe=r(O4e," (VAN model)"),O4e.forEach(t),QOe=i(L),xm=n(L,"LI",{});var V4e=s(xm);EK=n(V4e,"STRONG",{});var s$r=s(EK);WOe=r(s$r,"vilt"),s$r.forEach(t),HOe=r(V4e," \u2014 "),f9=n(V4e,"A",{href:!0});var l$r=s(f9);UOe=r(l$r,"ViltConfig"),l$r.forEach(t),JOe=r(V4e," (ViLT model)"),V4e.forEach(t),YOe=i(L),$m=n(L,"LI",{});var X4e=s($m);CK=n(X4e,"STRONG",{});var i$r=s(CK);KOe=r(i$r,"vision-encoder-decoder"),i$r.forEach(t),ZOe=r(X4e," \u2014 "),m9=n(X4e,"A",{href:!0});var d$r=s(m9);eVe=r(d$r,"VisionEncoderDecoderConfig"),d$r.forEach(t),oVe=r(X4e," (Vision Encoder decoder model)"),X4e.forEach(t),rVe=i(L),km=n(L,"LI",{});var z4e=s(km);wK=n(z4e,"STRONG",{});var c$r=s(wK);tVe=r(c$r,"vision-text-dual-encoder"),c$r.forEach(t),aVe=r(z4e," \u2014 "),h9=n(z4e,"A",{href:!0});var f$r=s(h9);nVe=r(f$r,"VisionTextDualEncoderConfig"),f$r.forEach(t),sVe=r(z4e," (VisionTextDualEncoder model)"),z4e.forEach(t),lVe=i(L),Sm=n(L,"LI",{});var Q4e=s(Sm);AK=n(Q4e,"STRONG",{});var m$r=s(AK);iVe=r(m$r,"visual_bert"),m$r.forEach(t),dVe=r(Q4e," \u2014 "),g9=n(Q4e,"A",{href:!0});var h$r=s(g9);cVe=r(h$r,"VisualBertConfig"),h$r.forEach(t),fVe=r(Q4e," (VisualBert model)"),Q4e.forEach(t),mVe=i(L),Rm=n(L,"LI",{});var W4e=s(Rm);yK=n(W4e,"STRONG",{});var g$r=s(yK);hVe=r(g$r,"vit"),g$r.forEach(t),gVe=r(W4e," \u2014 "),p9=n(W4e,"A",{href:!0});var p$r=s(p9);pVe=r(p$r,"ViTConfig"),p$r.forEach(t),uVe=r(W4e," (ViT model)"),W4e.forEach(t),_Ve=i(L),Bm=n(L,"LI",{});var H4e=s(Bm);LK=n(H4e,"STRONG",{});var u$r=s(LK);bVe=r(u$r,"vit_mae"),u$r.forEach(t),FVe=r(H4e," \u2014 "),u9=n(H4e,"A",{href:!0});var _$r=s(u9);vVe=r(_$r,"ViTMAEConfig"),_$r.forEach(t),TVe=r(H4e," (ViTMAE model)"),H4e.forEach(t),MVe=i(L),Pm=n(L,"LI",{});var U4e=s(Pm);xK=n(U4e,"STRONG",{});var b$r=s(xK);EVe=r(b$r,"wav2vec2"),b$r.forEach(t),CVe=r(U4e," \u2014 "),_9=n(U4e,"A",{href:!0});var F$r=s(_9);wVe=r(F$r,"Wav2Vec2Config"),F$r.forEach(t),AVe=r(U4e," (Wav2Vec2 model)"),U4e.forEach(t),yVe=i(L),Im=n(L,"LI",{});var J4e=s(Im);$K=n(J4e,"STRONG",{});var v$r=s($K);LVe=r(v$r,"wavlm"),v$r.forEach(t),xVe=r(J4e," \u2014 "),b9=n(J4e,"A",{href:!0});var T$r=s(b9);$Ve=r(T$r,"WavLMConfig"),T$r.forEach(t),kVe=r(J4e," (WavLM model)"),J4e.forEach(t),SVe=i(L),qm=n(L,"LI",{});var Y4e=s(qm);kK=n(Y4e,"STRONG",{});var M$r=s(kK);RVe=r(M$r,"xglm"),M$r.forEach(t),BVe=r(Y4e," \u2014 "),F9=n(Y4e,"A",{href:!0});var E$r=s(F9);PVe=r(E$r,"XGLMConfig"),E$r.forEach(t),IVe=r(Y4e," (XGLM model)"),Y4e.forEach(t),qVe=i(L),Nm=n(L,"LI",{});var K4e=s(Nm);SK=n(K4e,"STRONG",{});var C$r=s(SK);NVe=r(C$r,"xlm"),C$r.forEach(t),jVe=r(K4e," \u2014 "),v9=n(K4e,"A",{href:!0});var w$r=s(v9);DVe=r(w$r,"XLMConfig"),w$r.forEach(t),GVe=r(K4e," (XLM model)"),K4e.forEach(t),OVe=i(L),jm=n(L,"LI",{});var Z4e=s(jm);RK=n(Z4e,"STRONG",{});var A$r=s(RK);VVe=r(A$r,"xlm-prophetnet"),A$r.forEach(t),XVe=r(Z4e," \u2014 "),T9=n(Z4e,"A",{href:!0});var y$r=s(T9);zVe=r(y$r,"XLMProphetNetConfig"),y$r.forEach(t),QVe=r(Z4e," (XLMProphetNet model)"),Z4e.forEach(t),WVe=i(L),Dm=n(L,"LI",{});var eEe=s(Dm);BK=n(eEe,"STRONG",{});var L$r=s(BK);HVe=r(L$r,"xlm-roberta"),L$r.forEach(t),UVe=r(eEe," \u2014 "),M9=n(eEe,"A",{href:!0});var x$r=s(M9);JVe=r(x$r,"XLMRobertaConfig"),x$r.forEach(t),YVe=r(eEe," (XLM-RoBERTa model)"),eEe.forEach(t),KVe=i(L),Gm=n(L,"LI",{});var oEe=s(Gm);PK=n(oEe,"STRONG",{});var $$r=s(PK);ZVe=r($$r,"xlm-roberta-xl"),$$r.forEach(t),eXe=r(oEe," \u2014 "),E9=n(oEe,"A",{href:!0});var k$r=s(E9);oXe=r(k$r,"XLMRobertaXLConfig"),k$r.forEach(t),rXe=r(oEe," (XLM-RoBERTa-XL model)"),oEe.forEach(t),tXe=i(L),Om=n(L,"LI",{});var rEe=s(Om);IK=n(rEe,"STRONG",{});var S$r=s(IK);aXe=r(S$r,"xlnet"),S$r.forEach(t),nXe=r(rEe," \u2014 "),C9=n(rEe,"A",{href:!0});var R$r=s(C9);sXe=r(R$r,"XLNetConfig"),R$r.forEach(t),lXe=r(rEe," (XLNet model)"),rEe.forEach(t),iXe=i(L),Vm=n(L,"LI",{});var tEe=s(Vm);qK=n(tEe,"STRONG",{});var B$r=s(qK);dXe=r(B$r,"yoso"),B$r.forEach(t),cXe=r(tEe," \u2014 "),w9=n(tEe,"A",{href:!0});var P$r=s(w9);fXe=r(P$r,"YosoConfig"),P$r.forEach(t),mXe=r(tEe," (YOSO model)"),tEe.forEach(t),L.forEach(t),hXe=i(Jr),T(Xm.$$.fragment,Jr),Jr.forEach(t),gXe=i(Ur),zm=n(Ur,"DIV",{class:!0});var $Se=s(zm);T(B0.$$.fragment,$Se),pXe=i($Se),NK=n($Se,"P",{});var I$r=s(NK);uXe=r(I$r,"Register a new configuration for this class."),I$r.forEach(t),$Se.forEach(t),Ur.forEach(t),P9e=i(f),ri=n(f,"H2",{class:!0});var kSe=s(ri);Qm=n(kSe,"A",{id:!0,class:!0,href:!0});var q$r=s(Qm);jK=n(q$r,"SPAN",{});var N$r=s(jK);T(P0.$$.fragment,N$r),N$r.forEach(t),q$r.forEach(t),_Xe=i(kSe),DK=n(kSe,"SPAN",{});var j$r=s(DK);bXe=r(j$r,"AutoTokenizer"),j$r.forEach(t),kSe.forEach(t),I9e=i(f),Eo=n(f,"DIV",{class:!0});var Ts=s(Eo);T(I0.$$.fragment,Ts),FXe=i(Ts),q0=n(Ts,"P",{});var SSe=s(q0);vXe=r(SSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),A9=n(SSe,"A",{href:!0});var D$r=s(A9);TXe=r(D$r,"AutoTokenizer.from_pretrained()"),D$r.forEach(t),MXe=r(SSe," class method."),SSe.forEach(t),EXe=i(Ts),N0=n(Ts,"P",{});var RSe=s(N0);CXe=r(RSe,"This class cannot be instantiated directly using "),GK=n(RSe,"CODE",{});var G$r=s(GK);wXe=r(G$r,"__init__()"),G$r.forEach(t),AXe=r(RSe," (throws an error)."),RSe.forEach(t),yXe=i(Ts),Tr=n(Ts,"DIV",{class:!0});var Ms=s(Tr);T(j0.$$.fragment,Ms),LXe=i(Ms),OK=n(Ms,"P",{});var O$r=s(OK);xXe=r(O$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),O$r.forEach(t),$Xe=i(Ms),va=n(Ms,"P",{});var kw=s(va);kXe=r(kw,"The tokenizer class to instantiate is selected based on the "),VK=n(kw,"CODE",{});var V$r=s(VK);SXe=r(V$r,"model_type"),V$r.forEach(t),RXe=r(kw,` property of the config object (either
passed as an argument or loaded from `),XK=n(kw,"CODE",{});var X$r=s(XK);BXe=r(X$r,"pretrained_model_name_or_path"),X$r.forEach(t),PXe=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zK=n(kw,"CODE",{});var z$r=s(zK);IXe=r(z$r,"pretrained_model_name_or_path"),z$r.forEach(t),qXe=r(kw,":"),kw.forEach(t),NXe=i(Ms),S=n(Ms,"UL",{});var R=s(S);wn=n(R,"LI",{});var Px=s(wn);QK=n(Px,"STRONG",{});var Q$r=s(QK);jXe=r(Q$r,"albert"),Q$r.forEach(t),DXe=r(Px," \u2014 "),y9=n(Px,"A",{href:!0});var W$r=s(y9);GXe=r(W$r,"AlbertTokenizer"),W$r.forEach(t),OXe=r(Px," or "),L9=n(Px,"A",{href:!0});var H$r=s(L9);VXe=r(H$r,"AlbertTokenizerFast"),H$r.forEach(t),XXe=r(Px," (ALBERT model)"),Px.forEach(t),zXe=i(R),An=n(R,"LI",{});var Ix=s(An);WK=n(Ix,"STRONG",{});var U$r=s(WK);QXe=r(U$r,"bart"),U$r.forEach(t),WXe=r(Ix," \u2014 "),x9=n(Ix,"A",{href:!0});var J$r=s(x9);HXe=r(J$r,"BartTokenizer"),J$r.forEach(t),UXe=r(Ix," or "),$9=n(Ix,"A",{href:!0});var Y$r=s($9);JXe=r(Y$r,"BartTokenizerFast"),Y$r.forEach(t),YXe=r(Ix," (BART model)"),Ix.forEach(t),KXe=i(R),yn=n(R,"LI",{});var qx=s(yn);HK=n(qx,"STRONG",{});var K$r=s(HK);ZXe=r(K$r,"barthez"),K$r.forEach(t),eze=r(qx," \u2014 "),k9=n(qx,"A",{href:!0});var Z$r=s(k9);oze=r(Z$r,"BarthezTokenizer"),Z$r.forEach(t),rze=r(qx," or "),S9=n(qx,"A",{href:!0});var e9r=s(S9);tze=r(e9r,"BarthezTokenizerFast"),e9r.forEach(t),aze=r(qx," (BARThez model)"),qx.forEach(t),nze=i(R),Wm=n(R,"LI",{});var aEe=s(Wm);UK=n(aEe,"STRONG",{});var o9r=s(UK);sze=r(o9r,"bartpho"),o9r.forEach(t),lze=r(aEe," \u2014 "),R9=n(aEe,"A",{href:!0});var r9r=s(R9);ize=r(r9r,"BartphoTokenizer"),r9r.forEach(t),dze=r(aEe," (BARTpho model)"),aEe.forEach(t),cze=i(R),Ln=n(R,"LI",{});var Nx=s(Ln);JK=n(Nx,"STRONG",{});var t9r=s(JK);fze=r(t9r,"bert"),t9r.forEach(t),mze=r(Nx," \u2014 "),B9=n(Nx,"A",{href:!0});var a9r=s(B9);hze=r(a9r,"BertTokenizer"),a9r.forEach(t),gze=r(Nx," or "),P9=n(Nx,"A",{href:!0});var n9r=s(P9);pze=r(n9r,"BertTokenizerFast"),n9r.forEach(t),uze=r(Nx," (BERT model)"),Nx.forEach(t),_ze=i(R),Hm=n(R,"LI",{});var nEe=s(Hm);YK=n(nEe,"STRONG",{});var s9r=s(YK);bze=r(s9r,"bert-generation"),s9r.forEach(t),Fze=r(nEe," \u2014 "),I9=n(nEe,"A",{href:!0});var l9r=s(I9);vze=r(l9r,"BertGenerationTokenizer"),l9r.forEach(t),Tze=r(nEe," (Bert Generation model)"),nEe.forEach(t),Mze=i(R),Um=n(R,"LI",{});var sEe=s(Um);KK=n(sEe,"STRONG",{});var i9r=s(KK);Eze=r(i9r,"bert-japanese"),i9r.forEach(t),Cze=r(sEe," \u2014 "),q9=n(sEe,"A",{href:!0});var d9r=s(q9);wze=r(d9r,"BertJapaneseTokenizer"),d9r.forEach(t),Aze=r(sEe," (BertJapanese model)"),sEe.forEach(t),yze=i(R),Jm=n(R,"LI",{});var lEe=s(Jm);ZK=n(lEe,"STRONG",{});var c9r=s(ZK);Lze=r(c9r,"bertweet"),c9r.forEach(t),xze=r(lEe," \u2014 "),N9=n(lEe,"A",{href:!0});var f9r=s(N9);$ze=r(f9r,"BertweetTokenizer"),f9r.forEach(t),kze=r(lEe," (Bertweet model)"),lEe.forEach(t),Sze=i(R),xn=n(R,"LI",{});var jx=s(xn);eZ=n(jx,"STRONG",{});var m9r=s(eZ);Rze=r(m9r,"big_bird"),m9r.forEach(t),Bze=r(jx," \u2014 "),j9=n(jx,"A",{href:!0});var h9r=s(j9);Pze=r(h9r,"BigBirdTokenizer"),h9r.forEach(t),Ize=r(jx," or "),D9=n(jx,"A",{href:!0});var g9r=s(D9);qze=r(g9r,"BigBirdTokenizerFast"),g9r.forEach(t),Nze=r(jx," (BigBird model)"),jx.forEach(t),jze=i(R),$n=n(R,"LI",{});var Dx=s($n);oZ=n(Dx,"STRONG",{});var p9r=s(oZ);Dze=r(p9r,"bigbird_pegasus"),p9r.forEach(t),Gze=r(Dx," \u2014 "),G9=n(Dx,"A",{href:!0});var u9r=s(G9);Oze=r(u9r,"PegasusTokenizer"),u9r.forEach(t),Vze=r(Dx," or "),O9=n(Dx,"A",{href:!0});var _9r=s(O9);Xze=r(_9r,"PegasusTokenizerFast"),_9r.forEach(t),zze=r(Dx," (BigBirdPegasus model)"),Dx.forEach(t),Qze=i(R),kn=n(R,"LI",{});var Gx=s(kn);rZ=n(Gx,"STRONG",{});var b9r=s(rZ);Wze=r(b9r,"blenderbot"),b9r.forEach(t),Hze=r(Gx," \u2014 "),V9=n(Gx,"A",{href:!0});var F9r=s(V9);Uze=r(F9r,"BlenderbotTokenizer"),F9r.forEach(t),Jze=r(Gx," or "),X9=n(Gx,"A",{href:!0});var v9r=s(X9);Yze=r(v9r,"BlenderbotTokenizerFast"),v9r.forEach(t),Kze=r(Gx," (Blenderbot model)"),Gx.forEach(t),Zze=i(R),Ym=n(R,"LI",{});var iEe=s(Ym);tZ=n(iEe,"STRONG",{});var T9r=s(tZ);eQe=r(T9r,"blenderbot-small"),T9r.forEach(t),oQe=r(iEe," \u2014 "),z9=n(iEe,"A",{href:!0});var M9r=s(z9);rQe=r(M9r,"BlenderbotSmallTokenizer"),M9r.forEach(t),tQe=r(iEe," (BlenderbotSmall model)"),iEe.forEach(t),aQe=i(R),Km=n(R,"LI",{});var dEe=s(Km);aZ=n(dEe,"STRONG",{});var E9r=s(aZ);nQe=r(E9r,"byt5"),E9r.forEach(t),sQe=r(dEe," \u2014 "),Q9=n(dEe,"A",{href:!0});var C9r=s(Q9);lQe=r(C9r,"ByT5Tokenizer"),C9r.forEach(t),iQe=r(dEe," (ByT5 model)"),dEe.forEach(t),dQe=i(R),Sn=n(R,"LI",{});var Ox=s(Sn);nZ=n(Ox,"STRONG",{});var w9r=s(nZ);cQe=r(w9r,"camembert"),w9r.forEach(t),fQe=r(Ox," \u2014 "),W9=n(Ox,"A",{href:!0});var A9r=s(W9);mQe=r(A9r,"CamembertTokenizer"),A9r.forEach(t),hQe=r(Ox," or "),H9=n(Ox,"A",{href:!0});var y9r=s(H9);gQe=r(y9r,"CamembertTokenizerFast"),y9r.forEach(t),pQe=r(Ox," (CamemBERT model)"),Ox.forEach(t),uQe=i(R),Zm=n(R,"LI",{});var cEe=s(Zm);sZ=n(cEe,"STRONG",{});var L9r=s(sZ);_Qe=r(L9r,"canine"),L9r.forEach(t),bQe=r(cEe," \u2014 "),U9=n(cEe,"A",{href:!0});var x9r=s(U9);FQe=r(x9r,"CanineTokenizer"),x9r.forEach(t),vQe=r(cEe," (Canine model)"),cEe.forEach(t),TQe=i(R),Rn=n(R,"LI",{});var Vx=s(Rn);lZ=n(Vx,"STRONG",{});var $9r=s(lZ);MQe=r($9r,"clip"),$9r.forEach(t),EQe=r(Vx," \u2014 "),J9=n(Vx,"A",{href:!0});var k9r=s(J9);CQe=r(k9r,"CLIPTokenizer"),k9r.forEach(t),wQe=r(Vx," or "),Y9=n(Vx,"A",{href:!0});var S9r=s(Y9);AQe=r(S9r,"CLIPTokenizerFast"),S9r.forEach(t),yQe=r(Vx," (CLIP model)"),Vx.forEach(t),LQe=i(R),Bn=n(R,"LI",{});var Xx=s(Bn);iZ=n(Xx,"STRONG",{});var R9r=s(iZ);xQe=r(R9r,"convbert"),R9r.forEach(t),$Qe=r(Xx," \u2014 "),K9=n(Xx,"A",{href:!0});var B9r=s(K9);kQe=r(B9r,"ConvBertTokenizer"),B9r.forEach(t),SQe=r(Xx," or "),Z9=n(Xx,"A",{href:!0});var P9r=s(Z9);RQe=r(P9r,"ConvBertTokenizerFast"),P9r.forEach(t),BQe=r(Xx," (ConvBERT model)"),Xx.forEach(t),PQe=i(R),Pn=n(R,"LI",{});var zx=s(Pn);dZ=n(zx,"STRONG",{});var I9r=s(dZ);IQe=r(I9r,"cpm"),I9r.forEach(t),qQe=r(zx," \u2014 "),ek=n(zx,"A",{href:!0});var q9r=s(ek);NQe=r(q9r,"CpmTokenizer"),q9r.forEach(t),jQe=r(zx," or "),cZ=n(zx,"CODE",{});var N9r=s(cZ);DQe=r(N9r,"CpmTokenizerFast"),N9r.forEach(t),GQe=r(zx," (CPM model)"),zx.forEach(t),OQe=i(R),eh=n(R,"LI",{});var fEe=s(eh);fZ=n(fEe,"STRONG",{});var j9r=s(fZ);VQe=r(j9r,"ctrl"),j9r.forEach(t),XQe=r(fEe," \u2014 "),ok=n(fEe,"A",{href:!0});var D9r=s(ok);zQe=r(D9r,"CTRLTokenizer"),D9r.forEach(t),QQe=r(fEe," (CTRL model)"),fEe.forEach(t),WQe=i(R),In=n(R,"LI",{});var Qx=s(In);mZ=n(Qx,"STRONG",{});var G9r=s(mZ);HQe=r(G9r,"deberta"),G9r.forEach(t),UQe=r(Qx," \u2014 "),rk=n(Qx,"A",{href:!0});var O9r=s(rk);JQe=r(O9r,"DebertaTokenizer"),O9r.forEach(t),YQe=r(Qx," or "),tk=n(Qx,"A",{href:!0});var V9r=s(tk);KQe=r(V9r,"DebertaTokenizerFast"),V9r.forEach(t),ZQe=r(Qx," (DeBERTa model)"),Qx.forEach(t),eWe=i(R),oh=n(R,"LI",{});var mEe=s(oh);hZ=n(mEe,"STRONG",{});var X9r=s(hZ);oWe=r(X9r,"deberta-v2"),X9r.forEach(t),rWe=r(mEe," \u2014 "),ak=n(mEe,"A",{href:!0});var z9r=s(ak);tWe=r(z9r,"DebertaV2Tokenizer"),z9r.forEach(t),aWe=r(mEe," (DeBERTa-v2 model)"),mEe.forEach(t),nWe=i(R),qn=n(R,"LI",{});var Wx=s(qn);gZ=n(Wx,"STRONG",{});var Q9r=s(gZ);sWe=r(Q9r,"distilbert"),Q9r.forEach(t),lWe=r(Wx," \u2014 "),nk=n(Wx,"A",{href:!0});var W9r=s(nk);iWe=r(W9r,"DistilBertTokenizer"),W9r.forEach(t),dWe=r(Wx," or "),sk=n(Wx,"A",{href:!0});var H9r=s(sk);cWe=r(H9r,"DistilBertTokenizerFast"),H9r.forEach(t),fWe=r(Wx," (DistilBERT model)"),Wx.forEach(t),mWe=i(R),Nn=n(R,"LI",{});var Hx=s(Nn);pZ=n(Hx,"STRONG",{});var U9r=s(pZ);hWe=r(U9r,"dpr"),U9r.forEach(t),gWe=r(Hx," \u2014 "),lk=n(Hx,"A",{href:!0});var J9r=s(lk);pWe=r(J9r,"DPRQuestionEncoderTokenizer"),J9r.forEach(t),uWe=r(Hx," or "),ik=n(Hx,"A",{href:!0});var Y9r=s(ik);_We=r(Y9r,"DPRQuestionEncoderTokenizerFast"),Y9r.forEach(t),bWe=r(Hx," (DPR model)"),Hx.forEach(t),FWe=i(R),jn=n(R,"LI",{});var Ux=s(jn);uZ=n(Ux,"STRONG",{});var K9r=s(uZ);vWe=r(K9r,"electra"),K9r.forEach(t),TWe=r(Ux," \u2014 "),dk=n(Ux,"A",{href:!0});var Z9r=s(dk);MWe=r(Z9r,"ElectraTokenizer"),Z9r.forEach(t),EWe=r(Ux," or "),ck=n(Ux,"A",{href:!0});var ekr=s(ck);CWe=r(ekr,"ElectraTokenizerFast"),ekr.forEach(t),wWe=r(Ux," (ELECTRA model)"),Ux.forEach(t),AWe=i(R),rh=n(R,"LI",{});var hEe=s(rh);_Z=n(hEe,"STRONG",{});var okr=s(_Z);yWe=r(okr,"flaubert"),okr.forEach(t),LWe=r(hEe," \u2014 "),fk=n(hEe,"A",{href:!0});var rkr=s(fk);xWe=r(rkr,"FlaubertTokenizer"),rkr.forEach(t),$We=r(hEe," (FlauBERT model)"),hEe.forEach(t),kWe=i(R),Dn=n(R,"LI",{});var Jx=s(Dn);bZ=n(Jx,"STRONG",{});var tkr=s(bZ);SWe=r(tkr,"fnet"),tkr.forEach(t),RWe=r(Jx," \u2014 "),mk=n(Jx,"A",{href:!0});var akr=s(mk);BWe=r(akr,"FNetTokenizer"),akr.forEach(t),PWe=r(Jx," or "),hk=n(Jx,"A",{href:!0});var nkr=s(hk);IWe=r(nkr,"FNetTokenizerFast"),nkr.forEach(t),qWe=r(Jx," (FNet model)"),Jx.forEach(t),NWe=i(R),th=n(R,"LI",{});var gEe=s(th);FZ=n(gEe,"STRONG",{});var skr=s(FZ);jWe=r(skr,"fsmt"),skr.forEach(t),DWe=r(gEe," \u2014 "),gk=n(gEe,"A",{href:!0});var lkr=s(gk);GWe=r(lkr,"FSMTTokenizer"),lkr.forEach(t),OWe=r(gEe," (FairSeq Machine-Translation model)"),gEe.forEach(t),VWe=i(R),Gn=n(R,"LI",{});var Yx=s(Gn);vZ=n(Yx,"STRONG",{});var ikr=s(vZ);XWe=r(ikr,"funnel"),ikr.forEach(t),zWe=r(Yx," \u2014 "),pk=n(Yx,"A",{href:!0});var dkr=s(pk);QWe=r(dkr,"FunnelTokenizer"),dkr.forEach(t),WWe=r(Yx," or "),uk=n(Yx,"A",{href:!0});var ckr=s(uk);HWe=r(ckr,"FunnelTokenizerFast"),ckr.forEach(t),UWe=r(Yx," (Funnel Transformer model)"),Yx.forEach(t),JWe=i(R),On=n(R,"LI",{});var Kx=s(On);TZ=n(Kx,"STRONG",{});var fkr=s(TZ);YWe=r(fkr,"gpt2"),fkr.forEach(t),KWe=r(Kx," \u2014 "),_k=n(Kx,"A",{href:!0});var mkr=s(_k);ZWe=r(mkr,"GPT2Tokenizer"),mkr.forEach(t),eHe=r(Kx," or "),bk=n(Kx,"A",{href:!0});var hkr=s(bk);oHe=r(hkr,"GPT2TokenizerFast"),hkr.forEach(t),rHe=r(Kx," (OpenAI GPT-2 model)"),Kx.forEach(t),tHe=i(R),Vn=n(R,"LI",{});var Zx=s(Vn);MZ=n(Zx,"STRONG",{});var gkr=s(MZ);aHe=r(gkr,"gpt_neo"),gkr.forEach(t),nHe=r(Zx," \u2014 "),Fk=n(Zx,"A",{href:!0});var pkr=s(Fk);sHe=r(pkr,"GPT2Tokenizer"),pkr.forEach(t),lHe=r(Zx," or "),vk=n(Zx,"A",{href:!0});var ukr=s(vk);iHe=r(ukr,"GPT2TokenizerFast"),ukr.forEach(t),dHe=r(Zx," (GPT Neo model)"),Zx.forEach(t),cHe=i(R),Xn=n(R,"LI",{});var e7=s(Xn);EZ=n(e7,"STRONG",{});var _kr=s(EZ);fHe=r(_kr,"herbert"),_kr.forEach(t),mHe=r(e7," \u2014 "),Tk=n(e7,"A",{href:!0});var bkr=s(Tk);hHe=r(bkr,"HerbertTokenizer"),bkr.forEach(t),gHe=r(e7," or "),Mk=n(e7,"A",{href:!0});var Fkr=s(Mk);pHe=r(Fkr,"HerbertTokenizerFast"),Fkr.forEach(t),uHe=r(e7," (HerBERT model)"),e7.forEach(t),_He=i(R),ah=n(R,"LI",{});var pEe=s(ah);CZ=n(pEe,"STRONG",{});var vkr=s(CZ);bHe=r(vkr,"hubert"),vkr.forEach(t),FHe=r(pEe," \u2014 "),Ek=n(pEe,"A",{href:!0});var Tkr=s(Ek);vHe=r(Tkr,"Wav2Vec2CTCTokenizer"),Tkr.forEach(t),THe=r(pEe," (Hubert model)"),pEe.forEach(t),MHe=i(R),zn=n(R,"LI",{});var o7=s(zn);wZ=n(o7,"STRONG",{});var Mkr=s(wZ);EHe=r(Mkr,"ibert"),Mkr.forEach(t),CHe=r(o7," \u2014 "),Ck=n(o7,"A",{href:!0});var Ekr=s(Ck);wHe=r(Ekr,"RobertaTokenizer"),Ekr.forEach(t),AHe=r(o7," or "),wk=n(o7,"A",{href:!0});var Ckr=s(wk);yHe=r(Ckr,"RobertaTokenizerFast"),Ckr.forEach(t),LHe=r(o7," (I-BERT model)"),o7.forEach(t),xHe=i(R),Qn=n(R,"LI",{});var r7=s(Qn);AZ=n(r7,"STRONG",{});var wkr=s(AZ);$He=r(wkr,"layoutlm"),wkr.forEach(t),kHe=r(r7," \u2014 "),Ak=n(r7,"A",{href:!0});var Akr=s(Ak);SHe=r(Akr,"LayoutLMTokenizer"),Akr.forEach(t),RHe=r(r7," or "),yk=n(r7,"A",{href:!0});var ykr=s(yk);BHe=r(ykr,"LayoutLMTokenizerFast"),ykr.forEach(t),PHe=r(r7," (LayoutLM model)"),r7.forEach(t),IHe=i(R),Wn=n(R,"LI",{});var t7=s(Wn);yZ=n(t7,"STRONG",{});var Lkr=s(yZ);qHe=r(Lkr,"layoutlmv2"),Lkr.forEach(t),NHe=r(t7," \u2014 "),Lk=n(t7,"A",{href:!0});var xkr=s(Lk);jHe=r(xkr,"LayoutLMv2Tokenizer"),xkr.forEach(t),DHe=r(t7," or "),xk=n(t7,"A",{href:!0});var $kr=s(xk);GHe=r($kr,"LayoutLMv2TokenizerFast"),$kr.forEach(t),OHe=r(t7," (LayoutLMv2 model)"),t7.forEach(t),VHe=i(R),Hn=n(R,"LI",{});var a7=s(Hn);LZ=n(a7,"STRONG",{});var kkr=s(LZ);XHe=r(kkr,"layoutxlm"),kkr.forEach(t),zHe=r(a7," \u2014 "),$k=n(a7,"A",{href:!0});var Skr=s($k);QHe=r(Skr,"LayoutXLMTokenizer"),Skr.forEach(t),WHe=r(a7," or "),kk=n(a7,"A",{href:!0});var Rkr=s(kk);HHe=r(Rkr,"LayoutXLMTokenizerFast"),Rkr.forEach(t),UHe=r(a7," (LayoutXLM model)"),a7.forEach(t),JHe=i(R),Un=n(R,"LI",{});var n7=s(Un);xZ=n(n7,"STRONG",{});var Bkr=s(xZ);YHe=r(Bkr,"led"),Bkr.forEach(t),KHe=r(n7," \u2014 "),Sk=n(n7,"A",{href:!0});var Pkr=s(Sk);ZHe=r(Pkr,"LEDTokenizer"),Pkr.forEach(t),eUe=r(n7," or "),Rk=n(n7,"A",{href:!0});var Ikr=s(Rk);oUe=r(Ikr,"LEDTokenizerFast"),Ikr.forEach(t),rUe=r(n7," (LED model)"),n7.forEach(t),tUe=i(R),Jn=n(R,"LI",{});var s7=s(Jn);$Z=n(s7,"STRONG",{});var qkr=s($Z);aUe=r(qkr,"longformer"),qkr.forEach(t),nUe=r(s7," \u2014 "),Bk=n(s7,"A",{href:!0});var Nkr=s(Bk);sUe=r(Nkr,"LongformerTokenizer"),Nkr.forEach(t),lUe=r(s7," or "),Pk=n(s7,"A",{href:!0});var jkr=s(Pk);iUe=r(jkr,"LongformerTokenizerFast"),jkr.forEach(t),dUe=r(s7," (Longformer model)"),s7.forEach(t),cUe=i(R),nh=n(R,"LI",{});var uEe=s(nh);kZ=n(uEe,"STRONG",{});var Dkr=s(kZ);fUe=r(Dkr,"luke"),Dkr.forEach(t),mUe=r(uEe," \u2014 "),Ik=n(uEe,"A",{href:!0});var Gkr=s(Ik);hUe=r(Gkr,"LukeTokenizer"),Gkr.forEach(t),gUe=r(uEe," (LUKE model)"),uEe.forEach(t),pUe=i(R),Yn=n(R,"LI",{});var l7=s(Yn);SZ=n(l7,"STRONG",{});var Okr=s(SZ);uUe=r(Okr,"lxmert"),Okr.forEach(t),_Ue=r(l7," \u2014 "),qk=n(l7,"A",{href:!0});var Vkr=s(qk);bUe=r(Vkr,"LxmertTokenizer"),Vkr.forEach(t),FUe=r(l7," or "),Nk=n(l7,"A",{href:!0});var Xkr=s(Nk);vUe=r(Xkr,"LxmertTokenizerFast"),Xkr.forEach(t),TUe=r(l7," (LXMERT model)"),l7.forEach(t),MUe=i(R),sh=n(R,"LI",{});var _Ee=s(sh);RZ=n(_Ee,"STRONG",{});var zkr=s(RZ);EUe=r(zkr,"m2m_100"),zkr.forEach(t),CUe=r(_Ee," \u2014 "),jk=n(_Ee,"A",{href:!0});var Qkr=s(jk);wUe=r(Qkr,"M2M100Tokenizer"),Qkr.forEach(t),AUe=r(_Ee," (M2M100 model)"),_Ee.forEach(t),yUe=i(R),lh=n(R,"LI",{});var bEe=s(lh);BZ=n(bEe,"STRONG",{});var Wkr=s(BZ);LUe=r(Wkr,"marian"),Wkr.forEach(t),xUe=r(bEe," \u2014 "),Dk=n(bEe,"A",{href:!0});var Hkr=s(Dk);$Ue=r(Hkr,"MarianTokenizer"),Hkr.forEach(t),kUe=r(bEe," (Marian model)"),bEe.forEach(t),SUe=i(R),Kn=n(R,"LI",{});var i7=s(Kn);PZ=n(i7,"STRONG",{});var Ukr=s(PZ);RUe=r(Ukr,"mbart"),Ukr.forEach(t),BUe=r(i7," \u2014 "),Gk=n(i7,"A",{href:!0});var Jkr=s(Gk);PUe=r(Jkr,"MBartTokenizer"),Jkr.forEach(t),IUe=r(i7," or "),Ok=n(i7,"A",{href:!0});var Ykr=s(Ok);qUe=r(Ykr,"MBartTokenizerFast"),Ykr.forEach(t),NUe=r(i7," (mBART model)"),i7.forEach(t),jUe=i(R),Zn=n(R,"LI",{});var d7=s(Zn);IZ=n(d7,"STRONG",{});var Kkr=s(IZ);DUe=r(Kkr,"mbart50"),Kkr.forEach(t),GUe=r(d7," \u2014 "),Vk=n(d7,"A",{href:!0});var Zkr=s(Vk);OUe=r(Zkr,"MBart50Tokenizer"),Zkr.forEach(t),VUe=r(d7," or "),Xk=n(d7,"A",{href:!0});var eSr=s(Xk);XUe=r(eSr,"MBart50TokenizerFast"),eSr.forEach(t),zUe=r(d7," (mBART-50 model)"),d7.forEach(t),QUe=i(R),ih=n(R,"LI",{});var FEe=s(ih);qZ=n(FEe,"STRONG",{});var oSr=s(qZ);WUe=r(oSr,"mluke"),oSr.forEach(t),HUe=r(FEe," \u2014 "),zk=n(FEe,"A",{href:!0});var rSr=s(zk);UUe=r(rSr,"MLukeTokenizer"),rSr.forEach(t),JUe=r(FEe," (mLUKE model)"),FEe.forEach(t),YUe=i(R),es=n(R,"LI",{});var c7=s(es);NZ=n(c7,"STRONG",{});var tSr=s(NZ);KUe=r(tSr,"mobilebert"),tSr.forEach(t),ZUe=r(c7," \u2014 "),Qk=n(c7,"A",{href:!0});var aSr=s(Qk);eJe=r(aSr,"MobileBertTokenizer"),aSr.forEach(t),oJe=r(c7," or "),Wk=n(c7,"A",{href:!0});var nSr=s(Wk);rJe=r(nSr,"MobileBertTokenizerFast"),nSr.forEach(t),tJe=r(c7," (MobileBERT model)"),c7.forEach(t),aJe=i(R),os=n(R,"LI",{});var f7=s(os);jZ=n(f7,"STRONG",{});var sSr=s(jZ);nJe=r(sSr,"mpnet"),sSr.forEach(t),sJe=r(f7," \u2014 "),Hk=n(f7,"A",{href:!0});var lSr=s(Hk);lJe=r(lSr,"MPNetTokenizer"),lSr.forEach(t),iJe=r(f7," or "),Uk=n(f7,"A",{href:!0});var iSr=s(Uk);dJe=r(iSr,"MPNetTokenizerFast"),iSr.forEach(t),cJe=r(f7," (MPNet model)"),f7.forEach(t),fJe=i(R),rs=n(R,"LI",{});var m7=s(rs);DZ=n(m7,"STRONG",{});var dSr=s(DZ);mJe=r(dSr,"mt5"),dSr.forEach(t),hJe=r(m7," \u2014 "),Jk=n(m7,"A",{href:!0});var cSr=s(Jk);gJe=r(cSr,"MT5Tokenizer"),cSr.forEach(t),pJe=r(m7," or "),Yk=n(m7,"A",{href:!0});var fSr=s(Yk);uJe=r(fSr,"MT5TokenizerFast"),fSr.forEach(t),_Je=r(m7," (mT5 model)"),m7.forEach(t),bJe=i(R),ts=n(R,"LI",{});var h7=s(ts);GZ=n(h7,"STRONG",{});var mSr=s(GZ);FJe=r(mSr,"openai-gpt"),mSr.forEach(t),vJe=r(h7," \u2014 "),Kk=n(h7,"A",{href:!0});var hSr=s(Kk);TJe=r(hSr,"OpenAIGPTTokenizer"),hSr.forEach(t),MJe=r(h7," or "),Zk=n(h7,"A",{href:!0});var gSr=s(Zk);EJe=r(gSr,"OpenAIGPTTokenizerFast"),gSr.forEach(t),CJe=r(h7," (OpenAI GPT model)"),h7.forEach(t),wJe=i(R),as=n(R,"LI",{});var g7=s(as);OZ=n(g7,"STRONG",{});var pSr=s(OZ);AJe=r(pSr,"pegasus"),pSr.forEach(t),yJe=r(g7," \u2014 "),eS=n(g7,"A",{href:!0});var uSr=s(eS);LJe=r(uSr,"PegasusTokenizer"),uSr.forEach(t),xJe=r(g7," or "),oS=n(g7,"A",{href:!0});var _Sr=s(oS);$Je=r(_Sr,"PegasusTokenizerFast"),_Sr.forEach(t),kJe=r(g7," (Pegasus model)"),g7.forEach(t),SJe=i(R),dh=n(R,"LI",{});var vEe=s(dh);VZ=n(vEe,"STRONG",{});var bSr=s(VZ);RJe=r(bSr,"perceiver"),bSr.forEach(t),BJe=r(vEe," \u2014 "),rS=n(vEe,"A",{href:!0});var FSr=s(rS);PJe=r(FSr,"PerceiverTokenizer"),FSr.forEach(t),IJe=r(vEe," (Perceiver model)"),vEe.forEach(t),qJe=i(R),ch=n(R,"LI",{});var TEe=s(ch);XZ=n(TEe,"STRONG",{});var vSr=s(XZ);NJe=r(vSr,"phobert"),vSr.forEach(t),jJe=r(TEe," \u2014 "),tS=n(TEe,"A",{href:!0});var TSr=s(tS);DJe=r(TSr,"PhobertTokenizer"),TSr.forEach(t),GJe=r(TEe," (PhoBERT model)"),TEe.forEach(t),OJe=i(R),fh=n(R,"LI",{});var MEe=s(fh);zZ=n(MEe,"STRONG",{});var MSr=s(zZ);VJe=r(MSr,"plbart"),MSr.forEach(t),XJe=r(MEe," \u2014 "),QZ=n(MEe,"CODE",{});var ESr=s(QZ);zJe=r(ESr,"PLBartTokenizer"),ESr.forEach(t),QJe=r(MEe," (PLBart model)"),MEe.forEach(t),WJe=i(R),mh=n(R,"LI",{});var EEe=s(mh);WZ=n(EEe,"STRONG",{});var CSr=s(WZ);HJe=r(CSr,"prophetnet"),CSr.forEach(t),UJe=r(EEe," \u2014 "),aS=n(EEe,"A",{href:!0});var wSr=s(aS);JJe=r(wSr,"ProphetNetTokenizer"),wSr.forEach(t),YJe=r(EEe," (ProphetNet model)"),EEe.forEach(t),KJe=i(R),ns=n(R,"LI",{});var p7=s(ns);HZ=n(p7,"STRONG",{});var ASr=s(HZ);ZJe=r(ASr,"qdqbert"),ASr.forEach(t),eYe=r(p7," \u2014 "),nS=n(p7,"A",{href:!0});var ySr=s(nS);oYe=r(ySr,"BertTokenizer"),ySr.forEach(t),rYe=r(p7," or "),sS=n(p7,"A",{href:!0});var LSr=s(sS);tYe=r(LSr,"BertTokenizerFast"),LSr.forEach(t),aYe=r(p7," (QDQBert model)"),p7.forEach(t),nYe=i(R),hh=n(R,"LI",{});var CEe=s(hh);UZ=n(CEe,"STRONG",{});var xSr=s(UZ);sYe=r(xSr,"rag"),xSr.forEach(t),lYe=r(CEe," \u2014 "),lS=n(CEe,"A",{href:!0});var $Sr=s(lS);iYe=r($Sr,"RagTokenizer"),$Sr.forEach(t),dYe=r(CEe," (RAG model)"),CEe.forEach(t),cYe=i(R),ss=n(R,"LI",{});var u7=s(ss);JZ=n(u7,"STRONG",{});var kSr=s(JZ);fYe=r(kSr,"realm"),kSr.forEach(t),mYe=r(u7," \u2014 "),iS=n(u7,"A",{href:!0});var SSr=s(iS);hYe=r(SSr,"RealmTokenizer"),SSr.forEach(t),gYe=r(u7," or "),dS=n(u7,"A",{href:!0});var RSr=s(dS);pYe=r(RSr,"RealmTokenizerFast"),RSr.forEach(t),uYe=r(u7," (Realm model)"),u7.forEach(t),_Ye=i(R),ls=n(R,"LI",{});var _7=s(ls);YZ=n(_7,"STRONG",{});var BSr=s(YZ);bYe=r(BSr,"reformer"),BSr.forEach(t),FYe=r(_7," \u2014 "),cS=n(_7,"A",{href:!0});var PSr=s(cS);vYe=r(PSr,"ReformerTokenizer"),PSr.forEach(t),TYe=r(_7," or "),fS=n(_7,"A",{href:!0});var ISr=s(fS);MYe=r(ISr,"ReformerTokenizerFast"),ISr.forEach(t),EYe=r(_7," (Reformer model)"),_7.forEach(t),CYe=i(R),is=n(R,"LI",{});var b7=s(is);KZ=n(b7,"STRONG",{});var qSr=s(KZ);wYe=r(qSr,"rembert"),qSr.forEach(t),AYe=r(b7," \u2014 "),mS=n(b7,"A",{href:!0});var NSr=s(mS);yYe=r(NSr,"RemBertTokenizer"),NSr.forEach(t),LYe=r(b7," or "),hS=n(b7,"A",{href:!0});var jSr=s(hS);xYe=r(jSr,"RemBertTokenizerFast"),jSr.forEach(t),$Ye=r(b7," (RemBERT model)"),b7.forEach(t),kYe=i(R),ds=n(R,"LI",{});var F7=s(ds);ZZ=n(F7,"STRONG",{});var DSr=s(ZZ);SYe=r(DSr,"retribert"),DSr.forEach(t),RYe=r(F7," \u2014 "),gS=n(F7,"A",{href:!0});var GSr=s(gS);BYe=r(GSr,"RetriBertTokenizer"),GSr.forEach(t),PYe=r(F7," or "),pS=n(F7,"A",{href:!0});var OSr=s(pS);IYe=r(OSr,"RetriBertTokenizerFast"),OSr.forEach(t),qYe=r(F7," (RetriBERT model)"),F7.forEach(t),NYe=i(R),cs=n(R,"LI",{});var v7=s(cs);eee=n(v7,"STRONG",{});var VSr=s(eee);jYe=r(VSr,"roberta"),VSr.forEach(t),DYe=r(v7," \u2014 "),uS=n(v7,"A",{href:!0});var XSr=s(uS);GYe=r(XSr,"RobertaTokenizer"),XSr.forEach(t),OYe=r(v7," or "),_S=n(v7,"A",{href:!0});var zSr=s(_S);VYe=r(zSr,"RobertaTokenizerFast"),zSr.forEach(t),XYe=r(v7," (RoBERTa model)"),v7.forEach(t),zYe=i(R),fs=n(R,"LI",{});var T7=s(fs);oee=n(T7,"STRONG",{});var QSr=s(oee);QYe=r(QSr,"roformer"),QSr.forEach(t),WYe=r(T7," \u2014 "),bS=n(T7,"A",{href:!0});var WSr=s(bS);HYe=r(WSr,"RoFormerTokenizer"),WSr.forEach(t),UYe=r(T7," or "),FS=n(T7,"A",{href:!0});var HSr=s(FS);JYe=r(HSr,"RoFormerTokenizerFast"),HSr.forEach(t),YYe=r(T7," (RoFormer model)"),T7.forEach(t),KYe=i(R),gh=n(R,"LI",{});var wEe=s(gh);ree=n(wEe,"STRONG",{});var USr=s(ree);ZYe=r(USr,"speech_to_text"),USr.forEach(t),eKe=r(wEe," \u2014 "),vS=n(wEe,"A",{href:!0});var JSr=s(vS);oKe=r(JSr,"Speech2TextTokenizer"),JSr.forEach(t),rKe=r(wEe," (Speech2Text model)"),wEe.forEach(t),tKe=i(R),ph=n(R,"LI",{});var AEe=s(ph);tee=n(AEe,"STRONG",{});var YSr=s(tee);aKe=r(YSr,"speech_to_text_2"),YSr.forEach(t),nKe=r(AEe," \u2014 "),TS=n(AEe,"A",{href:!0});var KSr=s(TS);sKe=r(KSr,"Speech2Text2Tokenizer"),KSr.forEach(t),lKe=r(AEe," (Speech2Text2 model)"),AEe.forEach(t),iKe=i(R),ms=n(R,"LI",{});var M7=s(ms);aee=n(M7,"STRONG",{});var ZSr=s(aee);dKe=r(ZSr,"splinter"),ZSr.forEach(t),cKe=r(M7," \u2014 "),MS=n(M7,"A",{href:!0});var eRr=s(MS);fKe=r(eRr,"SplinterTokenizer"),eRr.forEach(t),mKe=r(M7," or "),ES=n(M7,"A",{href:!0});var oRr=s(ES);hKe=r(oRr,"SplinterTokenizerFast"),oRr.forEach(t),gKe=r(M7," (Splinter model)"),M7.forEach(t),pKe=i(R),hs=n(R,"LI",{});var E7=s(hs);nee=n(E7,"STRONG",{});var rRr=s(nee);uKe=r(rRr,"squeezebert"),rRr.forEach(t),_Ke=r(E7," \u2014 "),CS=n(E7,"A",{href:!0});var tRr=s(CS);bKe=r(tRr,"SqueezeBertTokenizer"),tRr.forEach(t),FKe=r(E7," or "),wS=n(E7,"A",{href:!0});var aRr=s(wS);vKe=r(aRr,"SqueezeBertTokenizerFast"),aRr.forEach(t),TKe=r(E7," (SqueezeBERT model)"),E7.forEach(t),MKe=i(R),gs=n(R,"LI",{});var C7=s(gs);see=n(C7,"STRONG",{});var nRr=s(see);EKe=r(nRr,"t5"),nRr.forEach(t),CKe=r(C7," \u2014 "),AS=n(C7,"A",{href:!0});var sRr=s(AS);wKe=r(sRr,"T5Tokenizer"),sRr.forEach(t),AKe=r(C7," or "),yS=n(C7,"A",{href:!0});var lRr=s(yS);yKe=r(lRr,"T5TokenizerFast"),lRr.forEach(t),LKe=r(C7," (T5 model)"),C7.forEach(t),xKe=i(R),uh=n(R,"LI",{});var yEe=s(uh);lee=n(yEe,"STRONG",{});var iRr=s(lee);$Ke=r(iRr,"tapas"),iRr.forEach(t),kKe=r(yEe," \u2014 "),LS=n(yEe,"A",{href:!0});var dRr=s(LS);SKe=r(dRr,"TapasTokenizer"),dRr.forEach(t),RKe=r(yEe," (TAPAS model)"),yEe.forEach(t),BKe=i(R),_h=n(R,"LI",{});var LEe=s(_h);iee=n(LEe,"STRONG",{});var cRr=s(iee);PKe=r(cRr,"transfo-xl"),cRr.forEach(t),IKe=r(LEe," \u2014 "),xS=n(LEe,"A",{href:!0});var fRr=s(xS);qKe=r(fRr,"TransfoXLTokenizer"),fRr.forEach(t),NKe=r(LEe," (Transformer-XL model)"),LEe.forEach(t),jKe=i(R),bh=n(R,"LI",{});var xEe=s(bh);dee=n(xEe,"STRONG",{});var mRr=s(dee);DKe=r(mRr,"wav2vec2"),mRr.forEach(t),GKe=r(xEe," \u2014 "),$S=n(xEe,"A",{href:!0});var hRr=s($S);OKe=r(hRr,"Wav2Vec2CTCTokenizer"),hRr.forEach(t),VKe=r(xEe," (Wav2Vec2 model)"),xEe.forEach(t),XKe=i(R),Fh=n(R,"LI",{});var $Ee=s(Fh);cee=n($Ee,"STRONG",{});var gRr=s(cee);zKe=r(gRr,"wav2vec2_phoneme"),gRr.forEach(t),QKe=r($Ee," \u2014 "),kS=n($Ee,"A",{href:!0});var pRr=s(kS);WKe=r(pRr,"Wav2Vec2PhonemeCTCTokenizer"),pRr.forEach(t),HKe=r($Ee," (Wav2Vec2Phoneme model)"),$Ee.forEach(t),UKe=i(R),ps=n(R,"LI",{});var w7=s(ps);fee=n(w7,"STRONG",{});var uRr=s(fee);JKe=r(uRr,"xglm"),uRr.forEach(t),YKe=r(w7," \u2014 "),SS=n(w7,"A",{href:!0});var _Rr=s(SS);KKe=r(_Rr,"XGLMTokenizer"),_Rr.forEach(t),ZKe=r(w7," or "),RS=n(w7,"A",{href:!0});var bRr=s(RS);eZe=r(bRr,"XGLMTokenizerFast"),bRr.forEach(t),oZe=r(w7," (XGLM model)"),w7.forEach(t),rZe=i(R),vh=n(R,"LI",{});var kEe=s(vh);mee=n(kEe,"STRONG",{});var FRr=s(mee);tZe=r(FRr,"xlm"),FRr.forEach(t),aZe=r(kEe," \u2014 "),BS=n(kEe,"A",{href:!0});var vRr=s(BS);nZe=r(vRr,"XLMTokenizer"),vRr.forEach(t),sZe=r(kEe," (XLM model)"),kEe.forEach(t),lZe=i(R),Th=n(R,"LI",{});var SEe=s(Th);hee=n(SEe,"STRONG",{});var TRr=s(hee);iZe=r(TRr,"xlm-prophetnet"),TRr.forEach(t),dZe=r(SEe," \u2014 "),PS=n(SEe,"A",{href:!0});var MRr=s(PS);cZe=r(MRr,"XLMProphetNetTokenizer"),MRr.forEach(t),fZe=r(SEe," (XLMProphetNet model)"),SEe.forEach(t),mZe=i(R),us=n(R,"LI",{});var A7=s(us);gee=n(A7,"STRONG",{});var ERr=s(gee);hZe=r(ERr,"xlm-roberta"),ERr.forEach(t),gZe=r(A7," \u2014 "),IS=n(A7,"A",{href:!0});var CRr=s(IS);pZe=r(CRr,"XLMRobertaTokenizer"),CRr.forEach(t),uZe=r(A7," or "),qS=n(A7,"A",{href:!0});var wRr=s(qS);_Ze=r(wRr,"XLMRobertaTokenizerFast"),wRr.forEach(t),bZe=r(A7," (XLM-RoBERTa model)"),A7.forEach(t),FZe=i(R),_s=n(R,"LI",{});var y7=s(_s);pee=n(y7,"STRONG",{});var ARr=s(pee);vZe=r(ARr,"xlnet"),ARr.forEach(t),TZe=r(y7," \u2014 "),NS=n(y7,"A",{href:!0});var yRr=s(NS);MZe=r(yRr,"XLNetTokenizer"),yRr.forEach(t),EZe=r(y7," or "),jS=n(y7,"A",{href:!0});var LRr=s(jS);CZe=r(LRr,"XLNetTokenizerFast"),LRr.forEach(t),wZe=r(y7," (XLNet model)"),y7.forEach(t),R.forEach(t),AZe=i(Ms),T(Mh.$$.fragment,Ms),Ms.forEach(t),yZe=i(Ts),Eh=n(Ts,"DIV",{class:!0});var BSe=s(Eh);T(D0.$$.fragment,BSe),LZe=i(BSe),uee=n(BSe,"P",{});var xRr=s(uee);xZe=r(xRr,"Register a new tokenizer in this mapping."),xRr.forEach(t),BSe.forEach(t),Ts.forEach(t),q9e=i(f),ti=n(f,"H2",{class:!0});var PSe=s(ti);Ch=n(PSe,"A",{id:!0,class:!0,href:!0});var $Rr=s(Ch);_ee=n($Rr,"SPAN",{});var kRr=s(_ee);T(G0.$$.fragment,kRr),kRr.forEach(t),$Rr.forEach(t),$Ze=i(PSe),bee=n(PSe,"SPAN",{});var SRr=s(bee);kZe=r(SRr,"AutoFeatureExtractor"),SRr.forEach(t),PSe.forEach(t),N9e=i(f),Co=n(f,"DIV",{class:!0});var Es=s(Co);T(O0.$$.fragment,Es),SZe=i(Es),V0=n(Es,"P",{});var ISe=s(V0);RZe=r(ISe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DS=n(ISe,"A",{href:!0});var RRr=s(DS);BZe=r(RRr,"AutoFeatureExtractor.from_pretrained()"),RRr.forEach(t),PZe=r(ISe," class method."),ISe.forEach(t),IZe=i(Es),X0=n(Es,"P",{});var qSe=s(X0);qZe=r(qSe,"This class cannot be instantiated directly using "),Fee=n(qSe,"CODE",{});var BRr=s(Fee);NZe=r(BRr,"__init__()"),BRr.forEach(t),jZe=r(qSe," (throws an error)."),qSe.forEach(t),DZe=i(Es),Ve=n(Es,"DIV",{class:!0});var Wt=s(Ve);T(z0.$$.fragment,Wt),GZe=i(Wt),vee=n(Wt,"P",{});var PRr=s(vee);OZe=r(PRr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),PRr.forEach(t),VZe=i(Wt),Ta=n(Wt,"P",{});var Sw=s(Ta);XZe=r(Sw,"The feature extractor class to instantiate is selected based on the "),Tee=n(Sw,"CODE",{});var IRr=s(Tee);zZe=r(IRr,"model_type"),IRr.forEach(t),QZe=r(Sw,` property of the config object
(either passed as an argument or loaded from `),Mee=n(Sw,"CODE",{});var qRr=s(Mee);WZe=r(qRr,"pretrained_model_name_or_path"),qRr.forEach(t),HZe=r(Sw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Eee=n(Sw,"CODE",{});var NRr=s(Eee);UZe=r(NRr,"pretrained_model_name_or_path"),NRr.forEach(t),JZe=r(Sw,":"),Sw.forEach(t),YZe=i(Wt),fe=n(Wt,"UL",{});var ge=s(fe);wh=n(ge,"LI",{});var REe=s(wh);Cee=n(REe,"STRONG",{});var jRr=s(Cee);KZe=r(jRr,"beit"),jRr.forEach(t),ZZe=r(REe," \u2014 "),GS=n(REe,"A",{href:!0});var DRr=s(GS);eeo=r(DRr,"BeitFeatureExtractor"),DRr.forEach(t),oeo=r(REe," (BEiT model)"),REe.forEach(t),reo=i(ge),Ah=n(ge,"LI",{});var BEe=s(Ah);wee=n(BEe,"STRONG",{});var GRr=s(wee);teo=r(GRr,"clip"),GRr.forEach(t),aeo=r(BEe," \u2014 "),OS=n(BEe,"A",{href:!0});var ORr=s(OS);neo=r(ORr,"CLIPFeatureExtractor"),ORr.forEach(t),seo=r(BEe," (CLIP model)"),BEe.forEach(t),leo=i(ge),yh=n(ge,"LI",{});var PEe=s(yh);Aee=n(PEe,"STRONG",{});var VRr=s(Aee);ieo=r(VRr,"convnext"),VRr.forEach(t),deo=r(PEe," \u2014 "),VS=n(PEe,"A",{href:!0});var XRr=s(VS);ceo=r(XRr,"ConvNextFeatureExtractor"),XRr.forEach(t),feo=r(PEe," (ConvNext model)"),PEe.forEach(t),meo=i(ge),Lh=n(ge,"LI",{});var IEe=s(Lh);yee=n(IEe,"STRONG",{});var zRr=s(yee);heo=r(zRr,"deit"),zRr.forEach(t),geo=r(IEe," \u2014 "),XS=n(IEe,"A",{href:!0});var QRr=s(XS);peo=r(QRr,"DeiTFeatureExtractor"),QRr.forEach(t),ueo=r(IEe," (DeiT model)"),IEe.forEach(t),_eo=i(ge),xh=n(ge,"LI",{});var qEe=s(xh);Lee=n(qEe,"STRONG",{});var WRr=s(Lee);beo=r(WRr,"detr"),WRr.forEach(t),Feo=r(qEe," \u2014 "),zS=n(qEe,"A",{href:!0});var HRr=s(zS);veo=r(HRr,"DetrFeatureExtractor"),HRr.forEach(t),Teo=r(qEe," (DETR model)"),qEe.forEach(t),Meo=i(ge),$h=n(ge,"LI",{});var NEe=s($h);xee=n(NEe,"STRONG",{});var URr=s(xee);Eeo=r(URr,"hubert"),URr.forEach(t),Ceo=r(NEe," \u2014 "),QS=n(NEe,"A",{href:!0});var JRr=s(QS);weo=r(JRr,"Wav2Vec2FeatureExtractor"),JRr.forEach(t),Aeo=r(NEe," (Hubert model)"),NEe.forEach(t),yeo=i(ge),kh=n(ge,"LI",{});var jEe=s(kh);$ee=n(jEe,"STRONG",{});var YRr=s($ee);Leo=r(YRr,"layoutlmv2"),YRr.forEach(t),xeo=r(jEe," \u2014 "),WS=n(jEe,"A",{href:!0});var KRr=s(WS);$eo=r(KRr,"LayoutLMv2FeatureExtractor"),KRr.forEach(t),keo=r(jEe," (LayoutLMv2 model)"),jEe.forEach(t),Seo=i(ge),Sh=n(ge,"LI",{});var DEe=s(Sh);kee=n(DEe,"STRONG",{});var ZRr=s(kee);Reo=r(ZRr,"maskformer"),ZRr.forEach(t),Beo=r(DEe," \u2014 "),HS=n(DEe,"A",{href:!0});var eBr=s(HS);Peo=r(eBr,"MaskFormerFeatureExtractor"),eBr.forEach(t),Ieo=r(DEe," (MaskFormer model)"),DEe.forEach(t),qeo=i(ge),Rh=n(ge,"LI",{});var GEe=s(Rh);See=n(GEe,"STRONG",{});var oBr=s(See);Neo=r(oBr,"perceiver"),oBr.forEach(t),jeo=r(GEe," \u2014 "),US=n(GEe,"A",{href:!0});var rBr=s(US);Deo=r(rBr,"PerceiverFeatureExtractor"),rBr.forEach(t),Geo=r(GEe," (Perceiver model)"),GEe.forEach(t),Oeo=i(ge),Bh=n(ge,"LI",{});var OEe=s(Bh);Ree=n(OEe,"STRONG",{});var tBr=s(Ree);Veo=r(tBr,"poolformer"),tBr.forEach(t),Xeo=r(OEe," \u2014 "),JS=n(OEe,"A",{href:!0});var aBr=s(JS);zeo=r(aBr,"PoolFormerFeatureExtractor"),aBr.forEach(t),Qeo=r(OEe," (PoolFormer model)"),OEe.forEach(t),Weo=i(ge),Ph=n(ge,"LI",{});var VEe=s(Ph);Bee=n(VEe,"STRONG",{});var nBr=s(Bee);Heo=r(nBr,"resnet"),nBr.forEach(t),Ueo=r(VEe," \u2014 "),YS=n(VEe,"A",{href:!0});var sBr=s(YS);Jeo=r(sBr,"ConvNextFeatureExtractor"),sBr.forEach(t),Yeo=r(VEe," (ResNet model)"),VEe.forEach(t),Keo=i(ge),Ih=n(ge,"LI",{});var XEe=s(Ih);Pee=n(XEe,"STRONG",{});var lBr=s(Pee);Zeo=r(lBr,"segformer"),lBr.forEach(t),eoo=r(XEe," \u2014 "),KS=n(XEe,"A",{href:!0});var iBr=s(KS);ooo=r(iBr,"SegformerFeatureExtractor"),iBr.forEach(t),roo=r(XEe," (SegFormer model)"),XEe.forEach(t),too=i(ge),qh=n(ge,"LI",{});var zEe=s(qh);Iee=n(zEe,"STRONG",{});var dBr=s(Iee);aoo=r(dBr,"speech_to_text"),dBr.forEach(t),noo=r(zEe," \u2014 "),ZS=n(zEe,"A",{href:!0});var cBr=s(ZS);soo=r(cBr,"Speech2TextFeatureExtractor"),cBr.forEach(t),loo=r(zEe," (Speech2Text model)"),zEe.forEach(t),ioo=i(ge),Nh=n(ge,"LI",{});var QEe=s(Nh);qee=n(QEe,"STRONG",{});var fBr=s(qee);doo=r(fBr,"swin"),fBr.forEach(t),coo=r(QEe," \u2014 "),eR=n(QEe,"A",{href:!0});var mBr=s(eR);foo=r(mBr,"ViTFeatureExtractor"),mBr.forEach(t),moo=r(QEe," (Swin model)"),QEe.forEach(t),hoo=i(ge),jh=n(ge,"LI",{});var WEe=s(jh);Nee=n(WEe,"STRONG",{});var hBr=s(Nee);goo=r(hBr,"van"),hBr.forEach(t),poo=r(WEe," \u2014 "),oR=n(WEe,"A",{href:!0});var gBr=s(oR);uoo=r(gBr,"ConvNextFeatureExtractor"),gBr.forEach(t),_oo=r(WEe," (VAN model)"),WEe.forEach(t),boo=i(ge),Dh=n(ge,"LI",{});var HEe=s(Dh);jee=n(HEe,"STRONG",{});var pBr=s(jee);Foo=r(pBr,"vit"),pBr.forEach(t),voo=r(HEe," \u2014 "),rR=n(HEe,"A",{href:!0});var uBr=s(rR);Too=r(uBr,"ViTFeatureExtractor"),uBr.forEach(t),Moo=r(HEe," (ViT model)"),HEe.forEach(t),Eoo=i(ge),Gh=n(ge,"LI",{});var UEe=s(Gh);Dee=n(UEe,"STRONG",{});var _Br=s(Dee);Coo=r(_Br,"vit_mae"),_Br.forEach(t),woo=r(UEe," \u2014 "),tR=n(UEe,"A",{href:!0});var bBr=s(tR);Aoo=r(bBr,"ViTFeatureExtractor"),bBr.forEach(t),yoo=r(UEe," (ViTMAE model)"),UEe.forEach(t),Loo=i(ge),Oh=n(ge,"LI",{});var JEe=s(Oh);Gee=n(JEe,"STRONG",{});var FBr=s(Gee);xoo=r(FBr,"wav2vec2"),FBr.forEach(t),$oo=r(JEe," \u2014 "),aR=n(JEe,"A",{href:!0});var vBr=s(aR);koo=r(vBr,"Wav2Vec2FeatureExtractor"),vBr.forEach(t),Soo=r(JEe," (Wav2Vec2 model)"),JEe.forEach(t),ge.forEach(t),Roo=i(Wt),T(Vh.$$.fragment,Wt),Boo=i(Wt),T(Xh.$$.fragment,Wt),Wt.forEach(t),Poo=i(Es),zh=n(Es,"DIV",{class:!0});var NSe=s(zh);T(Q0.$$.fragment,NSe),Ioo=i(NSe),Oee=n(NSe,"P",{});var TBr=s(Oee);qoo=r(TBr,"Register a new feature extractor for this class."),TBr.forEach(t),NSe.forEach(t),Es.forEach(t),j9e=i(f),ai=n(f,"H2",{class:!0});var jSe=s(ai);Qh=n(jSe,"A",{id:!0,class:!0,href:!0});var MBr=s(Qh);Vee=n(MBr,"SPAN",{});var EBr=s(Vee);T(W0.$$.fragment,EBr),EBr.forEach(t),MBr.forEach(t),Noo=i(jSe),Xee=n(jSe,"SPAN",{});var CBr=s(Xee);joo=r(CBr,"AutoProcessor"),CBr.forEach(t),jSe.forEach(t),D9e=i(f),wo=n(f,"DIV",{class:!0});var Cs=s(wo);T(H0.$$.fragment,Cs),Doo=i(Cs),U0=n(Cs,"P",{});var DSe=s(U0);Goo=r(DSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),nR=n(DSe,"A",{href:!0});var wBr=s(nR);Ooo=r(wBr,"AutoProcessor.from_pretrained()"),wBr.forEach(t),Voo=r(DSe," class method."),DSe.forEach(t),Xoo=i(Cs),J0=n(Cs,"P",{});var GSe=s(J0);zoo=r(GSe,"This class cannot be instantiated directly using "),zee=n(GSe,"CODE",{});var ABr=s(zee);Qoo=r(ABr,"__init__()"),ABr.forEach(t),Woo=r(GSe," (throws an error)."),GSe.forEach(t),Hoo=i(Cs),Xe=n(Cs,"DIV",{class:!0});var Ht=s(Xe);T(Y0.$$.fragment,Ht),Uoo=i(Ht),Qee=n(Ht,"P",{});var yBr=s(Qee);Joo=r(yBr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yBr.forEach(t),Yoo=i(Ht),ni=n(Ht,"P",{});var QH=s(ni);Koo=r(QH,"The processor class to instantiate is selected based on the "),Wee=n(QH,"CODE",{});var LBr=s(Wee);Zoo=r(LBr,"model_type"),LBr.forEach(t),ero=r(QH,` property of the config object (either
passed as an argument or loaded from `),Hee=n(QH,"CODE",{});var xBr=s(Hee);oro=r(xBr,"pretrained_model_name_or_path"),xBr.forEach(t),rro=r(QH," if possible):"),QH.forEach(t),tro=i(Ht),Pe=n(Ht,"UL",{});var po=s(Pe);Wh=n(po,"LI",{});var YEe=s(Wh);Uee=n(YEe,"STRONG",{});var $Br=s(Uee);aro=r($Br,"clip"),$Br.forEach(t),nro=r(YEe," \u2014 "),sR=n(YEe,"A",{href:!0});var kBr=s(sR);sro=r(kBr,"CLIPProcessor"),kBr.forEach(t),lro=r(YEe," (CLIP model)"),YEe.forEach(t),iro=i(po),Hh=n(po,"LI",{});var KEe=s(Hh);Jee=n(KEe,"STRONG",{});var SBr=s(Jee);dro=r(SBr,"layoutlmv2"),SBr.forEach(t),cro=r(KEe," \u2014 "),lR=n(KEe,"A",{href:!0});var RBr=s(lR);fro=r(RBr,"LayoutLMv2Processor"),RBr.forEach(t),mro=r(KEe," (LayoutLMv2 model)"),KEe.forEach(t),hro=i(po),Uh=n(po,"LI",{});var ZEe=s(Uh);Yee=n(ZEe,"STRONG",{});var BBr=s(Yee);gro=r(BBr,"layoutxlm"),BBr.forEach(t),pro=r(ZEe," \u2014 "),iR=n(ZEe,"A",{href:!0});var PBr=s(iR);uro=r(PBr,"LayoutXLMProcessor"),PBr.forEach(t),_ro=r(ZEe," (LayoutXLM model)"),ZEe.forEach(t),bro=i(po),Jh=n(po,"LI",{});var e5e=s(Jh);Kee=n(e5e,"STRONG",{});var IBr=s(Kee);Fro=r(IBr,"speech_to_text"),IBr.forEach(t),vro=r(e5e," \u2014 "),dR=n(e5e,"A",{href:!0});var qBr=s(dR);Tro=r(qBr,"Speech2TextProcessor"),qBr.forEach(t),Mro=r(e5e," (Speech2Text model)"),e5e.forEach(t),Ero=i(po),Yh=n(po,"LI",{});var o5e=s(Yh);Zee=n(o5e,"STRONG",{});var NBr=s(Zee);Cro=r(NBr,"speech_to_text_2"),NBr.forEach(t),wro=r(o5e," \u2014 "),cR=n(o5e,"A",{href:!0});var jBr=s(cR);Aro=r(jBr,"Speech2Text2Processor"),jBr.forEach(t),yro=r(o5e," (Speech2Text2 model)"),o5e.forEach(t),Lro=i(po),Kh=n(po,"LI",{});var r5e=s(Kh);eoe=n(r5e,"STRONG",{});var DBr=s(eoe);xro=r(DBr,"trocr"),DBr.forEach(t),$ro=r(r5e," \u2014 "),fR=n(r5e,"A",{href:!0});var GBr=s(fR);kro=r(GBr,"TrOCRProcessor"),GBr.forEach(t),Sro=r(r5e," (TrOCR model)"),r5e.forEach(t),Rro=i(po),Zh=n(po,"LI",{});var t5e=s(Zh);ooe=n(t5e,"STRONG",{});var OBr=s(ooe);Bro=r(OBr,"vision-text-dual-encoder"),OBr.forEach(t),Pro=r(t5e," \u2014 "),mR=n(t5e,"A",{href:!0});var VBr=s(mR);Iro=r(VBr,"VisionTextDualEncoderProcessor"),VBr.forEach(t),qro=r(t5e," (VisionTextDualEncoder model)"),t5e.forEach(t),Nro=i(po),eg=n(po,"LI",{});var a5e=s(eg);roe=n(a5e,"STRONG",{});var XBr=s(roe);jro=r(XBr,"wav2vec2"),XBr.forEach(t),Dro=r(a5e," \u2014 "),hR=n(a5e,"A",{href:!0});var zBr=s(hR);Gro=r(zBr,"Wav2Vec2Processor"),zBr.forEach(t),Oro=r(a5e," (Wav2Vec2 model)"),a5e.forEach(t),po.forEach(t),Vro=i(Ht),T(og.$$.fragment,Ht),Xro=i(Ht),T(rg.$$.fragment,Ht),Ht.forEach(t),zro=i(Cs),tg=n(Cs,"DIV",{class:!0});var OSe=s(tg);T(K0.$$.fragment,OSe),Qro=i(OSe),toe=n(OSe,"P",{});var QBr=s(toe);Wro=r(QBr,"Register a new processor for this class."),QBr.forEach(t),OSe.forEach(t),Cs.forEach(t),G9e=i(f),si=n(f,"H2",{class:!0});var VSe=s(si);ag=n(VSe,"A",{id:!0,class:!0,href:!0});var WBr=s(ag);aoe=n(WBr,"SPAN",{});var HBr=s(aoe);T(Z0.$$.fragment,HBr),HBr.forEach(t),WBr.forEach(t),Hro=i(VSe),noe=n(VSe,"SPAN",{});var UBr=s(noe);Uro=r(UBr,"AutoModel"),UBr.forEach(t),VSe.forEach(t),O9e=i(f),Ao=n(f,"DIV",{class:!0});var ws=s(Ao);T(e6.$$.fragment,ws),Jro=i(ws),li=n(ws,"P",{});var WH=s(li);Yro=r(WH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gR=n(WH,"A",{href:!0});var JBr=s(gR);Kro=r(JBr,"from_pretrained()"),JBr.forEach(t),Zro=r(WH," class method or the "),pR=n(WH,"A",{href:!0});var YBr=s(pR);eto=r(YBr,"from_config()"),YBr.forEach(t),oto=r(WH,` class
method.`),WH.forEach(t),rto=i(ws),o6=n(ws,"P",{});var XSe=s(o6);tto=r(XSe,"This class cannot be instantiated directly using "),soe=n(XSe,"CODE",{});var KBr=s(soe);ato=r(KBr,"__init__()"),KBr.forEach(t),nto=r(XSe," (throws an error)."),XSe.forEach(t),sto=i(ws),Kr=n(ws,"DIV",{class:!0});var Rw=s(Kr);T(r6.$$.fragment,Rw),lto=i(Rw),loe=n(Rw,"P",{});var ZBr=s(loe);ito=r(ZBr,"Instantiates one of the base model classes of the library from a configuration."),ZBr.forEach(t),dto=i(Rw),ii=n(Rw,"P",{});var HH=s(ii);cto=r(HH,`Note:
Loading a model from its configuration file does `),ioe=n(HH,"STRONG",{});var ePr=s(ioe);fto=r(ePr,"not"),ePr.forEach(t),mto=r(HH,` load the model weights. It only affects the
model\u2019s configuration. Use `),uR=n(HH,"A",{href:!0});var oPr=s(uR);hto=r(oPr,"from_pretrained()"),oPr.forEach(t),gto=r(HH," to load the model weights."),HH.forEach(t),pto=i(Rw),T(ng.$$.fragment,Rw),Rw.forEach(t),uto=i(ws),ze=n(ws,"DIV",{class:!0});var Ut=s(ze);T(t6.$$.fragment,Ut),_to=i(Ut),doe=n(Ut,"P",{});var rPr=s(doe);bto=r(rPr,"Instantiate one of the base model classes of the library from a pretrained model."),rPr.forEach(t),Fto=i(Ut),Ma=n(Ut,"P",{});var Bw=s(Ma);vto=r(Bw,"The model class to instantiate is selected based on the "),coe=n(Bw,"CODE",{});var tPr=s(coe);Tto=r(tPr,"model_type"),tPr.forEach(t),Mto=r(Bw,` property of the config object (either
passed as an argument or loaded from `),foe=n(Bw,"CODE",{});var aPr=s(foe);Eto=r(aPr,"pretrained_model_name_or_path"),aPr.forEach(t),Cto=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),moe=n(Bw,"CODE",{});var nPr=s(moe);wto=r(nPr,"pretrained_model_name_or_path"),nPr.forEach(t),Ato=r(Bw,":"),Bw.forEach(t),yto=i(Ut),x=n(Ut,"UL",{});var $=s(x);sg=n($,"LI",{});var n5e=s(sg);hoe=n(n5e,"STRONG",{});var sPr=s(hoe);Lto=r(sPr,"albert"),sPr.forEach(t),xto=r(n5e," \u2014 "),_R=n(n5e,"A",{href:!0});var lPr=s(_R);$to=r(lPr,"AlbertModel"),lPr.forEach(t),kto=r(n5e," (ALBERT model)"),n5e.forEach(t),Sto=i($),lg=n($,"LI",{});var s5e=s(lg);goe=n(s5e,"STRONG",{});var iPr=s(goe);Rto=r(iPr,"bart"),iPr.forEach(t),Bto=r(s5e," \u2014 "),bR=n(s5e,"A",{href:!0});var dPr=s(bR);Pto=r(dPr,"BartModel"),dPr.forEach(t),Ito=r(s5e," (BART model)"),s5e.forEach(t),qto=i($),ig=n($,"LI",{});var l5e=s(ig);poe=n(l5e,"STRONG",{});var cPr=s(poe);Nto=r(cPr,"beit"),cPr.forEach(t),jto=r(l5e," \u2014 "),FR=n(l5e,"A",{href:!0});var fPr=s(FR);Dto=r(fPr,"BeitModel"),fPr.forEach(t),Gto=r(l5e," (BEiT model)"),l5e.forEach(t),Oto=i($),dg=n($,"LI",{});var i5e=s(dg);uoe=n(i5e,"STRONG",{});var mPr=s(uoe);Vto=r(mPr,"bert"),mPr.forEach(t),Xto=r(i5e," \u2014 "),vR=n(i5e,"A",{href:!0});var hPr=s(vR);zto=r(hPr,"BertModel"),hPr.forEach(t),Qto=r(i5e," (BERT model)"),i5e.forEach(t),Wto=i($),cg=n($,"LI",{});var d5e=s(cg);_oe=n(d5e,"STRONG",{});var gPr=s(_oe);Hto=r(gPr,"bert-generation"),gPr.forEach(t),Uto=r(d5e," \u2014 "),TR=n(d5e,"A",{href:!0});var pPr=s(TR);Jto=r(pPr,"BertGenerationEncoder"),pPr.forEach(t),Yto=r(d5e," (Bert Generation model)"),d5e.forEach(t),Kto=i($),fg=n($,"LI",{});var c5e=s(fg);boe=n(c5e,"STRONG",{});var uPr=s(boe);Zto=r(uPr,"big_bird"),uPr.forEach(t),eao=r(c5e," \u2014 "),MR=n(c5e,"A",{href:!0});var _Pr=s(MR);oao=r(_Pr,"BigBirdModel"),_Pr.forEach(t),rao=r(c5e," (BigBird model)"),c5e.forEach(t),tao=i($),mg=n($,"LI",{});var f5e=s(mg);Foe=n(f5e,"STRONG",{});var bPr=s(Foe);aao=r(bPr,"bigbird_pegasus"),bPr.forEach(t),nao=r(f5e," \u2014 "),ER=n(f5e,"A",{href:!0});var FPr=s(ER);sao=r(FPr,"BigBirdPegasusModel"),FPr.forEach(t),lao=r(f5e," (BigBirdPegasus model)"),f5e.forEach(t),iao=i($),hg=n($,"LI",{});var m5e=s(hg);voe=n(m5e,"STRONG",{});var vPr=s(voe);dao=r(vPr,"blenderbot"),vPr.forEach(t),cao=r(m5e," \u2014 "),CR=n(m5e,"A",{href:!0});var TPr=s(CR);fao=r(TPr,"BlenderbotModel"),TPr.forEach(t),mao=r(m5e," (Blenderbot model)"),m5e.forEach(t),hao=i($),gg=n($,"LI",{});var h5e=s(gg);Toe=n(h5e,"STRONG",{});var MPr=s(Toe);gao=r(MPr,"blenderbot-small"),MPr.forEach(t),pao=r(h5e," \u2014 "),wR=n(h5e,"A",{href:!0});var EPr=s(wR);uao=r(EPr,"BlenderbotSmallModel"),EPr.forEach(t),_ao=r(h5e," (BlenderbotSmall model)"),h5e.forEach(t),bao=i($),pg=n($,"LI",{});var g5e=s(pg);Moe=n(g5e,"STRONG",{});var CPr=s(Moe);Fao=r(CPr,"camembert"),CPr.forEach(t),vao=r(g5e," \u2014 "),AR=n(g5e,"A",{href:!0});var wPr=s(AR);Tao=r(wPr,"CamembertModel"),wPr.forEach(t),Mao=r(g5e," (CamemBERT model)"),g5e.forEach(t),Eao=i($),ug=n($,"LI",{});var p5e=s(ug);Eoe=n(p5e,"STRONG",{});var APr=s(Eoe);Cao=r(APr,"canine"),APr.forEach(t),wao=r(p5e," \u2014 "),yR=n(p5e,"A",{href:!0});var yPr=s(yR);Aao=r(yPr,"CanineModel"),yPr.forEach(t),yao=r(p5e," (Canine model)"),p5e.forEach(t),Lao=i($),_g=n($,"LI",{});var u5e=s(_g);Coe=n(u5e,"STRONG",{});var LPr=s(Coe);xao=r(LPr,"clip"),LPr.forEach(t),$ao=r(u5e," \u2014 "),LR=n(u5e,"A",{href:!0});var xPr=s(LR);kao=r(xPr,"CLIPModel"),xPr.forEach(t),Sao=r(u5e," (CLIP model)"),u5e.forEach(t),Rao=i($),bg=n($,"LI",{});var _5e=s(bg);woe=n(_5e,"STRONG",{});var $Pr=s(woe);Bao=r($Pr,"convbert"),$Pr.forEach(t),Pao=r(_5e," \u2014 "),xR=n(_5e,"A",{href:!0});var kPr=s(xR);Iao=r(kPr,"ConvBertModel"),kPr.forEach(t),qao=r(_5e," (ConvBERT model)"),_5e.forEach(t),Nao=i($),Fg=n($,"LI",{});var b5e=s(Fg);Aoe=n(b5e,"STRONG",{});var SPr=s(Aoe);jao=r(SPr,"convnext"),SPr.forEach(t),Dao=r(b5e," \u2014 "),$R=n(b5e,"A",{href:!0});var RPr=s($R);Gao=r(RPr,"ConvNextModel"),RPr.forEach(t),Oao=r(b5e," (ConvNext model)"),b5e.forEach(t),Vao=i($),vg=n($,"LI",{});var F5e=s(vg);yoe=n(F5e,"STRONG",{});var BPr=s(yoe);Xao=r(BPr,"ctrl"),BPr.forEach(t),zao=r(F5e," \u2014 "),kR=n(F5e,"A",{href:!0});var PPr=s(kR);Qao=r(PPr,"CTRLModel"),PPr.forEach(t),Wao=r(F5e," (CTRL model)"),F5e.forEach(t),Hao=i($),Tg=n($,"LI",{});var v5e=s(Tg);Loe=n(v5e,"STRONG",{});var IPr=s(Loe);Uao=r(IPr,"data2vec-audio"),IPr.forEach(t),Jao=r(v5e," \u2014 "),SR=n(v5e,"A",{href:!0});var qPr=s(SR);Yao=r(qPr,"Data2VecAudioModel"),qPr.forEach(t),Kao=r(v5e," (Data2VecAudio model)"),v5e.forEach(t),Zao=i($),Mg=n($,"LI",{});var T5e=s(Mg);xoe=n(T5e,"STRONG",{});var NPr=s(xoe);eno=r(NPr,"data2vec-text"),NPr.forEach(t),ono=r(T5e," \u2014 "),RR=n(T5e,"A",{href:!0});var jPr=s(RR);rno=r(jPr,"Data2VecTextModel"),jPr.forEach(t),tno=r(T5e," (Data2VecText model)"),T5e.forEach(t),ano=i($),Eg=n($,"LI",{});var M5e=s(Eg);$oe=n(M5e,"STRONG",{});var DPr=s($oe);nno=r(DPr,"deberta"),DPr.forEach(t),sno=r(M5e," \u2014 "),BR=n(M5e,"A",{href:!0});var GPr=s(BR);lno=r(GPr,"DebertaModel"),GPr.forEach(t),ino=r(M5e," (DeBERTa model)"),M5e.forEach(t),dno=i($),Cg=n($,"LI",{});var E5e=s(Cg);koe=n(E5e,"STRONG",{});var OPr=s(koe);cno=r(OPr,"deberta-v2"),OPr.forEach(t),fno=r(E5e," \u2014 "),PR=n(E5e,"A",{href:!0});var VPr=s(PR);mno=r(VPr,"DebertaV2Model"),VPr.forEach(t),hno=r(E5e," (DeBERTa-v2 model)"),E5e.forEach(t),gno=i($),wg=n($,"LI",{});var C5e=s(wg);Soe=n(C5e,"STRONG",{});var XPr=s(Soe);pno=r(XPr,"decision_transformer"),XPr.forEach(t),uno=r(C5e," \u2014 "),IR=n(C5e,"A",{href:!0});var zPr=s(IR);_no=r(zPr,"DecisionTransformerModel"),zPr.forEach(t),bno=r(C5e," (Decision Transformer model)"),C5e.forEach(t),Fno=i($),Ag=n($,"LI",{});var w5e=s(Ag);Roe=n(w5e,"STRONG",{});var QPr=s(Roe);vno=r(QPr,"deit"),QPr.forEach(t),Tno=r(w5e," \u2014 "),qR=n(w5e,"A",{href:!0});var WPr=s(qR);Mno=r(WPr,"DeiTModel"),WPr.forEach(t),Eno=r(w5e," (DeiT model)"),w5e.forEach(t),Cno=i($),yg=n($,"LI",{});var A5e=s(yg);Boe=n(A5e,"STRONG",{});var HPr=s(Boe);wno=r(HPr,"detr"),HPr.forEach(t),Ano=r(A5e," \u2014 "),NR=n(A5e,"A",{href:!0});var UPr=s(NR);yno=r(UPr,"DetrModel"),UPr.forEach(t),Lno=r(A5e," (DETR model)"),A5e.forEach(t),xno=i($),Lg=n($,"LI",{});var y5e=s(Lg);Poe=n(y5e,"STRONG",{});var JPr=s(Poe);$no=r(JPr,"distilbert"),JPr.forEach(t),kno=r(y5e," \u2014 "),jR=n(y5e,"A",{href:!0});var YPr=s(jR);Sno=r(YPr,"DistilBertModel"),YPr.forEach(t),Rno=r(y5e," (DistilBERT model)"),y5e.forEach(t),Bno=i($),xg=n($,"LI",{});var L5e=s(xg);Ioe=n(L5e,"STRONG",{});var KPr=s(Ioe);Pno=r(KPr,"dpr"),KPr.forEach(t),Ino=r(L5e," \u2014 "),DR=n(L5e,"A",{href:!0});var ZPr=s(DR);qno=r(ZPr,"DPRQuestionEncoder"),ZPr.forEach(t),Nno=r(L5e," (DPR model)"),L5e.forEach(t),jno=i($),$g=n($,"LI",{});var x5e=s($g);qoe=n(x5e,"STRONG",{});var eIr=s(qoe);Dno=r(eIr,"electra"),eIr.forEach(t),Gno=r(x5e," \u2014 "),GR=n(x5e,"A",{href:!0});var oIr=s(GR);Ono=r(oIr,"ElectraModel"),oIr.forEach(t),Vno=r(x5e," (ELECTRA model)"),x5e.forEach(t),Xno=i($),kg=n($,"LI",{});var $5e=s(kg);Noe=n($5e,"STRONG",{});var rIr=s(Noe);zno=r(rIr,"flaubert"),rIr.forEach(t),Qno=r($5e," \u2014 "),OR=n($5e,"A",{href:!0});var tIr=s(OR);Wno=r(tIr,"FlaubertModel"),tIr.forEach(t),Hno=r($5e," (FlauBERT model)"),$5e.forEach(t),Uno=i($),Sg=n($,"LI",{});var k5e=s(Sg);joe=n(k5e,"STRONG",{});var aIr=s(joe);Jno=r(aIr,"fnet"),aIr.forEach(t),Yno=r(k5e," \u2014 "),VR=n(k5e,"A",{href:!0});var nIr=s(VR);Kno=r(nIr,"FNetModel"),nIr.forEach(t),Zno=r(k5e," (FNet model)"),k5e.forEach(t),eso=i($),Rg=n($,"LI",{});var S5e=s(Rg);Doe=n(S5e,"STRONG",{});var sIr=s(Doe);oso=r(sIr,"fsmt"),sIr.forEach(t),rso=r(S5e," \u2014 "),XR=n(S5e,"A",{href:!0});var lIr=s(XR);tso=r(lIr,"FSMTModel"),lIr.forEach(t),aso=r(S5e," (FairSeq Machine-Translation model)"),S5e.forEach(t),nso=i($),bs=n($,"LI",{});var L7=s(bs);Goe=n(L7,"STRONG",{});var iIr=s(Goe);sso=r(iIr,"funnel"),iIr.forEach(t),lso=r(L7," \u2014 "),zR=n(L7,"A",{href:!0});var dIr=s(zR);iso=r(dIr,"FunnelModel"),dIr.forEach(t),dso=r(L7," or "),QR=n(L7,"A",{href:!0});var cIr=s(QR);cso=r(cIr,"FunnelBaseModel"),cIr.forEach(t),fso=r(L7," (Funnel Transformer model)"),L7.forEach(t),mso=i($),Bg=n($,"LI",{});var R5e=s(Bg);Ooe=n(R5e,"STRONG",{});var fIr=s(Ooe);hso=r(fIr,"glpn"),fIr.forEach(t),gso=r(R5e," \u2014 "),WR=n(R5e,"A",{href:!0});var mIr=s(WR);pso=r(mIr,"GLPNModel"),mIr.forEach(t),uso=r(R5e," (GLPN model)"),R5e.forEach(t),_so=i($),Pg=n($,"LI",{});var B5e=s(Pg);Voe=n(B5e,"STRONG",{});var hIr=s(Voe);bso=r(hIr,"gpt2"),hIr.forEach(t),Fso=r(B5e," \u2014 "),HR=n(B5e,"A",{href:!0});var gIr=s(HR);vso=r(gIr,"GPT2Model"),gIr.forEach(t),Tso=r(B5e," (OpenAI GPT-2 model)"),B5e.forEach(t),Mso=i($),Ig=n($,"LI",{});var P5e=s(Ig);Xoe=n(P5e,"STRONG",{});var pIr=s(Xoe);Eso=r(pIr,"gpt_neo"),pIr.forEach(t),Cso=r(P5e," \u2014 "),UR=n(P5e,"A",{href:!0});var uIr=s(UR);wso=r(uIr,"GPTNeoModel"),uIr.forEach(t),Aso=r(P5e," (GPT Neo model)"),P5e.forEach(t),yso=i($),qg=n($,"LI",{});var I5e=s(qg);zoe=n(I5e,"STRONG",{});var _Ir=s(zoe);Lso=r(_Ir,"gptj"),_Ir.forEach(t),xso=r(I5e," \u2014 "),JR=n(I5e,"A",{href:!0});var bIr=s(JR);$so=r(bIr,"GPTJModel"),bIr.forEach(t),kso=r(I5e," (GPT-J model)"),I5e.forEach(t),Sso=i($),Ng=n($,"LI",{});var q5e=s(Ng);Qoe=n(q5e,"STRONG",{});var FIr=s(Qoe);Rso=r(FIr,"hubert"),FIr.forEach(t),Bso=r(q5e," \u2014 "),YR=n(q5e,"A",{href:!0});var vIr=s(YR);Pso=r(vIr,"HubertModel"),vIr.forEach(t),Iso=r(q5e," (Hubert model)"),q5e.forEach(t),qso=i($),jg=n($,"LI",{});var N5e=s(jg);Woe=n(N5e,"STRONG",{});var TIr=s(Woe);Nso=r(TIr,"ibert"),TIr.forEach(t),jso=r(N5e," \u2014 "),KR=n(N5e,"A",{href:!0});var MIr=s(KR);Dso=r(MIr,"IBertModel"),MIr.forEach(t),Gso=r(N5e," (I-BERT model)"),N5e.forEach(t),Oso=i($),Dg=n($,"LI",{});var j5e=s(Dg);Hoe=n(j5e,"STRONG",{});var EIr=s(Hoe);Vso=r(EIr,"imagegpt"),EIr.forEach(t),Xso=r(j5e," \u2014 "),ZR=n(j5e,"A",{href:!0});var CIr=s(ZR);zso=r(CIr,"ImageGPTModel"),CIr.forEach(t),Qso=r(j5e," (ImageGPT model)"),j5e.forEach(t),Wso=i($),Gg=n($,"LI",{});var D5e=s(Gg);Uoe=n(D5e,"STRONG",{});var wIr=s(Uoe);Hso=r(wIr,"layoutlm"),wIr.forEach(t),Uso=r(D5e," \u2014 "),eB=n(D5e,"A",{href:!0});var AIr=s(eB);Jso=r(AIr,"LayoutLMModel"),AIr.forEach(t),Yso=r(D5e," (LayoutLM model)"),D5e.forEach(t),Kso=i($),Og=n($,"LI",{});var G5e=s(Og);Joe=n(G5e,"STRONG",{});var yIr=s(Joe);Zso=r(yIr,"layoutlmv2"),yIr.forEach(t),elo=r(G5e," \u2014 "),oB=n(G5e,"A",{href:!0});var LIr=s(oB);olo=r(LIr,"LayoutLMv2Model"),LIr.forEach(t),rlo=r(G5e," (LayoutLMv2 model)"),G5e.forEach(t),tlo=i($),Vg=n($,"LI",{});var O5e=s(Vg);Yoe=n(O5e,"STRONG",{});var xIr=s(Yoe);alo=r(xIr,"led"),xIr.forEach(t),nlo=r(O5e," \u2014 "),rB=n(O5e,"A",{href:!0});var $Ir=s(rB);slo=r($Ir,"LEDModel"),$Ir.forEach(t),llo=r(O5e," (LED model)"),O5e.forEach(t),ilo=i($),Xg=n($,"LI",{});var V5e=s(Xg);Koe=n(V5e,"STRONG",{});var kIr=s(Koe);dlo=r(kIr,"longformer"),kIr.forEach(t),clo=r(V5e," \u2014 "),tB=n(V5e,"A",{href:!0});var SIr=s(tB);flo=r(SIr,"LongformerModel"),SIr.forEach(t),mlo=r(V5e," (Longformer model)"),V5e.forEach(t),hlo=i($),zg=n($,"LI",{});var X5e=s(zg);Zoe=n(X5e,"STRONG",{});var RIr=s(Zoe);glo=r(RIr,"luke"),RIr.forEach(t),plo=r(X5e," \u2014 "),aB=n(X5e,"A",{href:!0});var BIr=s(aB);ulo=r(BIr,"LukeModel"),BIr.forEach(t),_lo=r(X5e," (LUKE model)"),X5e.forEach(t),blo=i($),Qg=n($,"LI",{});var z5e=s(Qg);ere=n(z5e,"STRONG",{});var PIr=s(ere);Flo=r(PIr,"lxmert"),PIr.forEach(t),vlo=r(z5e," \u2014 "),nB=n(z5e,"A",{href:!0});var IIr=s(nB);Tlo=r(IIr,"LxmertModel"),IIr.forEach(t),Mlo=r(z5e," (LXMERT model)"),z5e.forEach(t),Elo=i($),Wg=n($,"LI",{});var Q5e=s(Wg);ore=n(Q5e,"STRONG",{});var qIr=s(ore);Clo=r(qIr,"m2m_100"),qIr.forEach(t),wlo=r(Q5e," \u2014 "),sB=n(Q5e,"A",{href:!0});var NIr=s(sB);Alo=r(NIr,"M2M100Model"),NIr.forEach(t),ylo=r(Q5e," (M2M100 model)"),Q5e.forEach(t),Llo=i($),Hg=n($,"LI",{});var W5e=s(Hg);rre=n(W5e,"STRONG",{});var jIr=s(rre);xlo=r(jIr,"marian"),jIr.forEach(t),$lo=r(W5e," \u2014 "),lB=n(W5e,"A",{href:!0});var DIr=s(lB);klo=r(DIr,"MarianModel"),DIr.forEach(t),Slo=r(W5e," (Marian model)"),W5e.forEach(t),Rlo=i($),Ug=n($,"LI",{});var H5e=s(Ug);tre=n(H5e,"STRONG",{});var GIr=s(tre);Blo=r(GIr,"maskformer"),GIr.forEach(t),Plo=r(H5e," \u2014 "),iB=n(H5e,"A",{href:!0});var OIr=s(iB);Ilo=r(OIr,"MaskFormerModel"),OIr.forEach(t),qlo=r(H5e," (MaskFormer model)"),H5e.forEach(t),Nlo=i($),Jg=n($,"LI",{});var U5e=s(Jg);are=n(U5e,"STRONG",{});var VIr=s(are);jlo=r(VIr,"mbart"),VIr.forEach(t),Dlo=r(U5e," \u2014 "),dB=n(U5e,"A",{href:!0});var XIr=s(dB);Glo=r(XIr,"MBartModel"),XIr.forEach(t),Olo=r(U5e," (mBART model)"),U5e.forEach(t),Vlo=i($),Yg=n($,"LI",{});var J5e=s(Yg);nre=n(J5e,"STRONG",{});var zIr=s(nre);Xlo=r(zIr,"megatron-bert"),zIr.forEach(t),zlo=r(J5e," \u2014 "),cB=n(J5e,"A",{href:!0});var QIr=s(cB);Qlo=r(QIr,"MegatronBertModel"),QIr.forEach(t),Wlo=r(J5e," (MegatronBert model)"),J5e.forEach(t),Hlo=i($),Kg=n($,"LI",{});var Y5e=s(Kg);sre=n(Y5e,"STRONG",{});var WIr=s(sre);Ulo=r(WIr,"mobilebert"),WIr.forEach(t),Jlo=r(Y5e," \u2014 "),fB=n(Y5e,"A",{href:!0});var HIr=s(fB);Ylo=r(HIr,"MobileBertModel"),HIr.forEach(t),Klo=r(Y5e," (MobileBERT model)"),Y5e.forEach(t),Zlo=i($),Zg=n($,"LI",{});var K5e=s(Zg);lre=n(K5e,"STRONG",{});var UIr=s(lre);eio=r(UIr,"mpnet"),UIr.forEach(t),oio=r(K5e," \u2014 "),mB=n(K5e,"A",{href:!0});var JIr=s(mB);rio=r(JIr,"MPNetModel"),JIr.forEach(t),tio=r(K5e," (MPNet model)"),K5e.forEach(t),aio=i($),ep=n($,"LI",{});var Z5e=s(ep);ire=n(Z5e,"STRONG",{});var YIr=s(ire);nio=r(YIr,"mt5"),YIr.forEach(t),sio=r(Z5e," \u2014 "),hB=n(Z5e,"A",{href:!0});var KIr=s(hB);lio=r(KIr,"MT5Model"),KIr.forEach(t),iio=r(Z5e," (mT5 model)"),Z5e.forEach(t),dio=i($),op=n($,"LI",{});var eCe=s(op);dre=n(eCe,"STRONG",{});var ZIr=s(dre);cio=r(ZIr,"nystromformer"),ZIr.forEach(t),fio=r(eCe," \u2014 "),gB=n(eCe,"A",{href:!0});var eqr=s(gB);mio=r(eqr,"NystromformerModel"),eqr.forEach(t),hio=r(eCe," (Nystromformer model)"),eCe.forEach(t),gio=i($),rp=n($,"LI",{});var oCe=s(rp);cre=n(oCe,"STRONG",{});var oqr=s(cre);pio=r(oqr,"openai-gpt"),oqr.forEach(t),uio=r(oCe," \u2014 "),pB=n(oCe,"A",{href:!0});var rqr=s(pB);_io=r(rqr,"OpenAIGPTModel"),rqr.forEach(t),bio=r(oCe," (OpenAI GPT model)"),oCe.forEach(t),Fio=i($),tp=n($,"LI",{});var rCe=s(tp);fre=n(rCe,"STRONG",{});var tqr=s(fre);vio=r(tqr,"pegasus"),tqr.forEach(t),Tio=r(rCe," \u2014 "),uB=n(rCe,"A",{href:!0});var aqr=s(uB);Mio=r(aqr,"PegasusModel"),aqr.forEach(t),Eio=r(rCe," (Pegasus model)"),rCe.forEach(t),Cio=i($),ap=n($,"LI",{});var tCe=s(ap);mre=n(tCe,"STRONG",{});var nqr=s(mre);wio=r(nqr,"perceiver"),nqr.forEach(t),Aio=r(tCe," \u2014 "),_B=n(tCe,"A",{href:!0});var sqr=s(_B);yio=r(sqr,"PerceiverModel"),sqr.forEach(t),Lio=r(tCe," (Perceiver model)"),tCe.forEach(t),xio=i($),np=n($,"LI",{});var aCe=s(np);hre=n(aCe,"STRONG",{});var lqr=s(hre);$io=r(lqr,"plbart"),lqr.forEach(t),kio=r(aCe," \u2014 "),gre=n(aCe,"CODE",{});var iqr=s(gre);Sio=r(iqr,"PLBartModel"),iqr.forEach(t),Rio=r(aCe," (PLBart model)"),aCe.forEach(t),Bio=i($),sp=n($,"LI",{});var nCe=s(sp);pre=n(nCe,"STRONG",{});var dqr=s(pre);Pio=r(dqr,"poolformer"),dqr.forEach(t),Iio=r(nCe," \u2014 "),bB=n(nCe,"A",{href:!0});var cqr=s(bB);qio=r(cqr,"PoolFormerModel"),cqr.forEach(t),Nio=r(nCe," (PoolFormer model)"),nCe.forEach(t),jio=i($),lp=n($,"LI",{});var sCe=s(lp);ure=n(sCe,"STRONG",{});var fqr=s(ure);Dio=r(fqr,"prophetnet"),fqr.forEach(t),Gio=r(sCe," \u2014 "),FB=n(sCe,"A",{href:!0});var mqr=s(FB);Oio=r(mqr,"ProphetNetModel"),mqr.forEach(t),Vio=r(sCe," (ProphetNet model)"),sCe.forEach(t),Xio=i($),ip=n($,"LI",{});var lCe=s(ip);_re=n(lCe,"STRONG",{});var hqr=s(_re);zio=r(hqr,"qdqbert"),hqr.forEach(t),Qio=r(lCe," \u2014 "),bre=n(lCe,"CODE",{});var gqr=s(bre);Wio=r(gqr,"QDQBertModel"),gqr.forEach(t),Hio=r(lCe," (QDQBert model)"),lCe.forEach(t),Uio=i($),dp=n($,"LI",{});var iCe=s(dp);Fre=n(iCe,"STRONG",{});var pqr=s(Fre);Jio=r(pqr,"reformer"),pqr.forEach(t),Yio=r(iCe," \u2014 "),vB=n(iCe,"A",{href:!0});var uqr=s(vB);Kio=r(uqr,"ReformerModel"),uqr.forEach(t),Zio=r(iCe," (Reformer model)"),iCe.forEach(t),edo=i($),cp=n($,"LI",{});var dCe=s(cp);vre=n(dCe,"STRONG",{});var _qr=s(vre);odo=r(_qr,"rembert"),_qr.forEach(t),rdo=r(dCe," \u2014 "),TB=n(dCe,"A",{href:!0});var bqr=s(TB);tdo=r(bqr,"RemBertModel"),bqr.forEach(t),ado=r(dCe," (RemBERT model)"),dCe.forEach(t),ndo=i($),fp=n($,"LI",{});var cCe=s(fp);Tre=n(cCe,"STRONG",{});var Fqr=s(Tre);sdo=r(Fqr,"resnet"),Fqr.forEach(t),ldo=r(cCe," \u2014 "),MB=n(cCe,"A",{href:!0});var vqr=s(MB);ido=r(vqr,"ResNetModel"),vqr.forEach(t),ddo=r(cCe," (ResNet model)"),cCe.forEach(t),cdo=i($),mp=n($,"LI",{});var fCe=s(mp);Mre=n(fCe,"STRONG",{});var Tqr=s(Mre);fdo=r(Tqr,"retribert"),Tqr.forEach(t),mdo=r(fCe," \u2014 "),EB=n(fCe,"A",{href:!0});var Mqr=s(EB);hdo=r(Mqr,"RetriBertModel"),Mqr.forEach(t),gdo=r(fCe," (RetriBERT model)"),fCe.forEach(t),pdo=i($),hp=n($,"LI",{});var mCe=s(hp);Ere=n(mCe,"STRONG",{});var Eqr=s(Ere);udo=r(Eqr,"roberta"),Eqr.forEach(t),_do=r(mCe," \u2014 "),CB=n(mCe,"A",{href:!0});var Cqr=s(CB);bdo=r(Cqr,"RobertaModel"),Cqr.forEach(t),Fdo=r(mCe," (RoBERTa model)"),mCe.forEach(t),vdo=i($),gp=n($,"LI",{});var hCe=s(gp);Cre=n(hCe,"STRONG",{});var wqr=s(Cre);Tdo=r(wqr,"roformer"),wqr.forEach(t),Mdo=r(hCe," \u2014 "),wB=n(hCe,"A",{href:!0});var Aqr=s(wB);Edo=r(Aqr,"RoFormerModel"),Aqr.forEach(t),Cdo=r(hCe," (RoFormer model)"),hCe.forEach(t),wdo=i($),pp=n($,"LI",{});var gCe=s(pp);wre=n(gCe,"STRONG",{});var yqr=s(wre);Ado=r(yqr,"segformer"),yqr.forEach(t),ydo=r(gCe," \u2014 "),AB=n(gCe,"A",{href:!0});var Lqr=s(AB);Ldo=r(Lqr,"SegformerModel"),Lqr.forEach(t),xdo=r(gCe," (SegFormer model)"),gCe.forEach(t),$do=i($),up=n($,"LI",{});var pCe=s(up);Are=n(pCe,"STRONG",{});var xqr=s(Are);kdo=r(xqr,"sew"),xqr.forEach(t),Sdo=r(pCe," \u2014 "),yB=n(pCe,"A",{href:!0});var $qr=s(yB);Rdo=r($qr,"SEWModel"),$qr.forEach(t),Bdo=r(pCe," (SEW model)"),pCe.forEach(t),Pdo=i($),_p=n($,"LI",{});var uCe=s(_p);yre=n(uCe,"STRONG",{});var kqr=s(yre);Ido=r(kqr,"sew-d"),kqr.forEach(t),qdo=r(uCe," \u2014 "),LB=n(uCe,"A",{href:!0});var Sqr=s(LB);Ndo=r(Sqr,"SEWDModel"),Sqr.forEach(t),jdo=r(uCe," (SEW-D model)"),uCe.forEach(t),Ddo=i($),bp=n($,"LI",{});var _Ce=s(bp);Lre=n(_Ce,"STRONG",{});var Rqr=s(Lre);Gdo=r(Rqr,"speech_to_text"),Rqr.forEach(t),Odo=r(_Ce," \u2014 "),xB=n(_Ce,"A",{href:!0});var Bqr=s(xB);Vdo=r(Bqr,"Speech2TextModel"),Bqr.forEach(t),Xdo=r(_Ce," (Speech2Text model)"),_Ce.forEach(t),zdo=i($),Fp=n($,"LI",{});var bCe=s(Fp);xre=n(bCe,"STRONG",{});var Pqr=s(xre);Qdo=r(Pqr,"splinter"),Pqr.forEach(t),Wdo=r(bCe," \u2014 "),$B=n(bCe,"A",{href:!0});var Iqr=s($B);Hdo=r(Iqr,"SplinterModel"),Iqr.forEach(t),Udo=r(bCe," (Splinter model)"),bCe.forEach(t),Jdo=i($),vp=n($,"LI",{});var FCe=s(vp);$re=n(FCe,"STRONG",{});var qqr=s($re);Ydo=r(qqr,"squeezebert"),qqr.forEach(t),Kdo=r(FCe," \u2014 "),kB=n(FCe,"A",{href:!0});var Nqr=s(kB);Zdo=r(Nqr,"SqueezeBertModel"),Nqr.forEach(t),eco=r(FCe," (SqueezeBERT model)"),FCe.forEach(t),oco=i($),Tp=n($,"LI",{});var vCe=s(Tp);kre=n(vCe,"STRONG",{});var jqr=s(kre);rco=r(jqr,"swin"),jqr.forEach(t),tco=r(vCe," \u2014 "),SB=n(vCe,"A",{href:!0});var Dqr=s(SB);aco=r(Dqr,"SwinModel"),Dqr.forEach(t),nco=r(vCe," (Swin model)"),vCe.forEach(t),sco=i($),Mp=n($,"LI",{});var TCe=s(Mp);Sre=n(TCe,"STRONG",{});var Gqr=s(Sre);lco=r(Gqr,"t5"),Gqr.forEach(t),ico=r(TCe," \u2014 "),RB=n(TCe,"A",{href:!0});var Oqr=s(RB);dco=r(Oqr,"T5Model"),Oqr.forEach(t),cco=r(TCe," (T5 model)"),TCe.forEach(t),fco=i($),Ep=n($,"LI",{});var MCe=s(Ep);Rre=n(MCe,"STRONG",{});var Vqr=s(Rre);mco=r(Vqr,"tapas"),Vqr.forEach(t),hco=r(MCe," \u2014 "),BB=n(MCe,"A",{href:!0});var Xqr=s(BB);gco=r(Xqr,"TapasModel"),Xqr.forEach(t),pco=r(MCe," (TAPAS model)"),MCe.forEach(t),uco=i($),Cp=n($,"LI",{});var ECe=s(Cp);Bre=n(ECe,"STRONG",{});var zqr=s(Bre);_co=r(zqr,"transfo-xl"),zqr.forEach(t),bco=r(ECe," \u2014 "),PB=n(ECe,"A",{href:!0});var Qqr=s(PB);Fco=r(Qqr,"TransfoXLModel"),Qqr.forEach(t),vco=r(ECe," (Transformer-XL model)"),ECe.forEach(t),Tco=i($),wp=n($,"LI",{});var CCe=s(wp);Pre=n(CCe,"STRONG",{});var Wqr=s(Pre);Mco=r(Wqr,"unispeech"),Wqr.forEach(t),Eco=r(CCe," \u2014 "),IB=n(CCe,"A",{href:!0});var Hqr=s(IB);Cco=r(Hqr,"UniSpeechModel"),Hqr.forEach(t),wco=r(CCe," (UniSpeech model)"),CCe.forEach(t),Aco=i($),Ap=n($,"LI",{});var wCe=s(Ap);Ire=n(wCe,"STRONG",{});var Uqr=s(Ire);yco=r(Uqr,"unispeech-sat"),Uqr.forEach(t),Lco=r(wCe," \u2014 "),qB=n(wCe,"A",{href:!0});var Jqr=s(qB);xco=r(Jqr,"UniSpeechSatModel"),Jqr.forEach(t),$co=r(wCe," (UniSpeechSat model)"),wCe.forEach(t),kco=i($),yp=n($,"LI",{});var ACe=s(yp);qre=n(ACe,"STRONG",{});var Yqr=s(qre);Sco=r(Yqr,"van"),Yqr.forEach(t),Rco=r(ACe," \u2014 "),NB=n(ACe,"A",{href:!0});var Kqr=s(NB);Bco=r(Kqr,"VanModel"),Kqr.forEach(t),Pco=r(ACe," (VAN model)"),ACe.forEach(t),Ico=i($),Lp=n($,"LI",{});var yCe=s(Lp);Nre=n(yCe,"STRONG",{});var Zqr=s(Nre);qco=r(Zqr,"vilt"),Zqr.forEach(t),Nco=r(yCe," \u2014 "),jB=n(yCe,"A",{href:!0});var eNr=s(jB);jco=r(eNr,"ViltModel"),eNr.forEach(t),Dco=r(yCe," (ViLT model)"),yCe.forEach(t),Gco=i($),xp=n($,"LI",{});var LCe=s(xp);jre=n(LCe,"STRONG",{});var oNr=s(jre);Oco=r(oNr,"vision-text-dual-encoder"),oNr.forEach(t),Vco=r(LCe," \u2014 "),DB=n(LCe,"A",{href:!0});var rNr=s(DB);Xco=r(rNr,"VisionTextDualEncoderModel"),rNr.forEach(t),zco=r(LCe," (VisionTextDualEncoder model)"),LCe.forEach(t),Qco=i($),$p=n($,"LI",{});var xCe=s($p);Dre=n(xCe,"STRONG",{});var tNr=s(Dre);Wco=r(tNr,"visual_bert"),tNr.forEach(t),Hco=r(xCe," \u2014 "),GB=n(xCe,"A",{href:!0});var aNr=s(GB);Uco=r(aNr,"VisualBertModel"),aNr.forEach(t),Jco=r(xCe," (VisualBert model)"),xCe.forEach(t),Yco=i($),kp=n($,"LI",{});var $Ce=s(kp);Gre=n($Ce,"STRONG",{});var nNr=s(Gre);Kco=r(nNr,"vit"),nNr.forEach(t),Zco=r($Ce," \u2014 "),OB=n($Ce,"A",{href:!0});var sNr=s(OB);efo=r(sNr,"ViTModel"),sNr.forEach(t),ofo=r($Ce," (ViT model)"),$Ce.forEach(t),rfo=i($),Sp=n($,"LI",{});var kCe=s(Sp);Ore=n(kCe,"STRONG",{});var lNr=s(Ore);tfo=r(lNr,"vit_mae"),lNr.forEach(t),afo=r(kCe," \u2014 "),VB=n(kCe,"A",{href:!0});var iNr=s(VB);nfo=r(iNr,"ViTMAEModel"),iNr.forEach(t),sfo=r(kCe," (ViTMAE model)"),kCe.forEach(t),lfo=i($),Rp=n($,"LI",{});var SCe=s(Rp);Vre=n(SCe,"STRONG",{});var dNr=s(Vre);ifo=r(dNr,"wav2vec2"),dNr.forEach(t),dfo=r(SCe," \u2014 "),XB=n(SCe,"A",{href:!0});var cNr=s(XB);cfo=r(cNr,"Wav2Vec2Model"),cNr.forEach(t),ffo=r(SCe," (Wav2Vec2 model)"),SCe.forEach(t),mfo=i($),Bp=n($,"LI",{});var RCe=s(Bp);Xre=n(RCe,"STRONG",{});var fNr=s(Xre);hfo=r(fNr,"wavlm"),fNr.forEach(t),gfo=r(RCe," \u2014 "),zB=n(RCe,"A",{href:!0});var mNr=s(zB);pfo=r(mNr,"WavLMModel"),mNr.forEach(t),ufo=r(RCe," (WavLM model)"),RCe.forEach(t),_fo=i($),Pp=n($,"LI",{});var BCe=s(Pp);zre=n(BCe,"STRONG",{});var hNr=s(zre);bfo=r(hNr,"xglm"),hNr.forEach(t),Ffo=r(BCe," \u2014 "),QB=n(BCe,"A",{href:!0});var gNr=s(QB);vfo=r(gNr,"XGLMModel"),gNr.forEach(t),Tfo=r(BCe," (XGLM model)"),BCe.forEach(t),Mfo=i($),Ip=n($,"LI",{});var PCe=s(Ip);Qre=n(PCe,"STRONG",{});var pNr=s(Qre);Efo=r(pNr,"xlm"),pNr.forEach(t),Cfo=r(PCe," \u2014 "),WB=n(PCe,"A",{href:!0});var uNr=s(WB);wfo=r(uNr,"XLMModel"),uNr.forEach(t),Afo=r(PCe," (XLM model)"),PCe.forEach(t),yfo=i($),qp=n($,"LI",{});var ICe=s(qp);Wre=n(ICe,"STRONG",{});var _Nr=s(Wre);Lfo=r(_Nr,"xlm-prophetnet"),_Nr.forEach(t),xfo=r(ICe," \u2014 "),HB=n(ICe,"A",{href:!0});var bNr=s(HB);$fo=r(bNr,"XLMProphetNetModel"),bNr.forEach(t),kfo=r(ICe," (XLMProphetNet model)"),ICe.forEach(t),Sfo=i($),Np=n($,"LI",{});var qCe=s(Np);Hre=n(qCe,"STRONG",{});var FNr=s(Hre);Rfo=r(FNr,"xlm-roberta"),FNr.forEach(t),Bfo=r(qCe," \u2014 "),UB=n(qCe,"A",{href:!0});var vNr=s(UB);Pfo=r(vNr,"XLMRobertaModel"),vNr.forEach(t),Ifo=r(qCe," (XLM-RoBERTa model)"),qCe.forEach(t),qfo=i($),jp=n($,"LI",{});var NCe=s(jp);Ure=n(NCe,"STRONG",{});var TNr=s(Ure);Nfo=r(TNr,"xlm-roberta-xl"),TNr.forEach(t),jfo=r(NCe," \u2014 "),JB=n(NCe,"A",{href:!0});var MNr=s(JB);Dfo=r(MNr,"XLMRobertaXLModel"),MNr.forEach(t),Gfo=r(NCe," (XLM-RoBERTa-XL model)"),NCe.forEach(t),Ofo=i($),Dp=n($,"LI",{});var jCe=s(Dp);Jre=n(jCe,"STRONG",{});var ENr=s(Jre);Vfo=r(ENr,"xlnet"),ENr.forEach(t),Xfo=r(jCe," \u2014 "),YB=n(jCe,"A",{href:!0});var CNr=s(YB);zfo=r(CNr,"XLNetModel"),CNr.forEach(t),Qfo=r(jCe," (XLNet model)"),jCe.forEach(t),Wfo=i($),Gp=n($,"LI",{});var DCe=s(Gp);Yre=n(DCe,"STRONG",{});var wNr=s(Yre);Hfo=r(wNr,"yoso"),wNr.forEach(t),Ufo=r(DCe," \u2014 "),KB=n(DCe,"A",{href:!0});var ANr=s(KB);Jfo=r(ANr,"YosoModel"),ANr.forEach(t),Yfo=r(DCe," (YOSO model)"),DCe.forEach(t),$.forEach(t),Kfo=i(Ut),Op=n(Ut,"P",{});var GCe=s(Op);Zfo=r(GCe,"The model is set in evaluation mode by default using "),Kre=n(GCe,"CODE",{});var yNr=s(Kre);emo=r(yNr,"model.eval()"),yNr.forEach(t),omo=r(GCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zre=n(GCe,"CODE",{});var LNr=s(Zre);rmo=r(LNr,"model.train()"),LNr.forEach(t),GCe.forEach(t),tmo=i(Ut),T(Vp.$$.fragment,Ut),Ut.forEach(t),ws.forEach(t),V9e=i(f),di=n(f,"H2",{class:!0});var zSe=s(di);Xp=n(zSe,"A",{id:!0,class:!0,href:!0});var xNr=s(Xp);ete=n(xNr,"SPAN",{});var $Nr=s(ete);T(a6.$$.fragment,$Nr),$Nr.forEach(t),xNr.forEach(t),amo=i(zSe),ote=n(zSe,"SPAN",{});var kNr=s(ote);nmo=r(kNr,"AutoModelForPreTraining"),kNr.forEach(t),zSe.forEach(t),X9e=i(f),yo=n(f,"DIV",{class:!0});var As=s(yo);T(n6.$$.fragment,As),smo=i(As),ci=n(As,"P",{});var UH=s(ci);lmo=r(UH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZB=n(UH,"A",{href:!0});var SNr=s(ZB);imo=r(SNr,"from_pretrained()"),SNr.forEach(t),dmo=r(UH," class method or the "),eP=n(UH,"A",{href:!0});var RNr=s(eP);cmo=r(RNr,"from_config()"),RNr.forEach(t),fmo=r(UH,` class
method.`),UH.forEach(t),mmo=i(As),s6=n(As,"P",{});var QSe=s(s6);hmo=r(QSe,"This class cannot be instantiated directly using "),rte=n(QSe,"CODE",{});var BNr=s(rte);gmo=r(BNr,"__init__()"),BNr.forEach(t),pmo=r(QSe," (throws an error)."),QSe.forEach(t),umo=i(As),Zr=n(As,"DIV",{class:!0});var Pw=s(Zr);T(l6.$$.fragment,Pw),_mo=i(Pw),tte=n(Pw,"P",{});var PNr=s(tte);bmo=r(PNr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PNr.forEach(t),Fmo=i(Pw),fi=n(Pw,"P",{});var JH=s(fi);vmo=r(JH,`Note:
Loading a model from its configuration file does `),ate=n(JH,"STRONG",{});var INr=s(ate);Tmo=r(INr,"not"),INr.forEach(t),Mmo=r(JH,` load the model weights. It only affects the
model\u2019s configuration. Use `),oP=n(JH,"A",{href:!0});var qNr=s(oP);Emo=r(qNr,"from_pretrained()"),qNr.forEach(t),Cmo=r(JH," to load the model weights."),JH.forEach(t),wmo=i(Pw),T(zp.$$.fragment,Pw),Pw.forEach(t),Amo=i(As),Qe=n(As,"DIV",{class:!0});var Jt=s(Qe);T(i6.$$.fragment,Jt),ymo=i(Jt),nte=n(Jt,"P",{});var NNr=s(nte);Lmo=r(NNr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NNr.forEach(t),xmo=i(Jt),Ea=n(Jt,"P",{});var Iw=s(Ea);$mo=r(Iw,"The model class to instantiate is selected based on the "),ste=n(Iw,"CODE",{});var jNr=s(ste);kmo=r(jNr,"model_type"),jNr.forEach(t),Smo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),lte=n(Iw,"CODE",{});var DNr=s(lte);Rmo=r(DNr,"pretrained_model_name_or_path"),DNr.forEach(t),Bmo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=n(Iw,"CODE",{});var GNr=s(ite);Pmo=r(GNr,"pretrained_model_name_or_path"),GNr.forEach(t),Imo=r(Iw,":"),Iw.forEach(t),qmo=i(Jt),G=n(Jt,"UL",{});var V=s(G);Qp=n(V,"LI",{});var OCe=s(Qp);dte=n(OCe,"STRONG",{});var ONr=s(dte);Nmo=r(ONr,"albert"),ONr.forEach(t),jmo=r(OCe," \u2014 "),rP=n(OCe,"A",{href:!0});var VNr=s(rP);Dmo=r(VNr,"AlbertForPreTraining"),VNr.forEach(t),Gmo=r(OCe," (ALBERT model)"),OCe.forEach(t),Omo=i(V),Wp=n(V,"LI",{});var VCe=s(Wp);cte=n(VCe,"STRONG",{});var XNr=s(cte);Vmo=r(XNr,"bart"),XNr.forEach(t),Xmo=r(VCe," \u2014 "),tP=n(VCe,"A",{href:!0});var zNr=s(tP);zmo=r(zNr,"BartForConditionalGeneration"),zNr.forEach(t),Qmo=r(VCe," (BART model)"),VCe.forEach(t),Wmo=i(V),Hp=n(V,"LI",{});var XCe=s(Hp);fte=n(XCe,"STRONG",{});var QNr=s(fte);Hmo=r(QNr,"bert"),QNr.forEach(t),Umo=r(XCe," \u2014 "),aP=n(XCe,"A",{href:!0});var WNr=s(aP);Jmo=r(WNr,"BertForPreTraining"),WNr.forEach(t),Ymo=r(XCe," (BERT model)"),XCe.forEach(t),Kmo=i(V),Up=n(V,"LI",{});var zCe=s(Up);mte=n(zCe,"STRONG",{});var HNr=s(mte);Zmo=r(HNr,"big_bird"),HNr.forEach(t),eho=r(zCe," \u2014 "),nP=n(zCe,"A",{href:!0});var UNr=s(nP);oho=r(UNr,"BigBirdForPreTraining"),UNr.forEach(t),rho=r(zCe," (BigBird model)"),zCe.forEach(t),tho=i(V),Jp=n(V,"LI",{});var QCe=s(Jp);hte=n(QCe,"STRONG",{});var JNr=s(hte);aho=r(JNr,"camembert"),JNr.forEach(t),nho=r(QCe," \u2014 "),sP=n(QCe,"A",{href:!0});var YNr=s(sP);sho=r(YNr,"CamembertForMaskedLM"),YNr.forEach(t),lho=r(QCe," (CamemBERT model)"),QCe.forEach(t),iho=i(V),Yp=n(V,"LI",{});var WCe=s(Yp);gte=n(WCe,"STRONG",{});var KNr=s(gte);dho=r(KNr,"ctrl"),KNr.forEach(t),cho=r(WCe," \u2014 "),lP=n(WCe,"A",{href:!0});var ZNr=s(lP);fho=r(ZNr,"CTRLLMHeadModel"),ZNr.forEach(t),mho=r(WCe," (CTRL model)"),WCe.forEach(t),hho=i(V),Kp=n(V,"LI",{});var HCe=s(Kp);pte=n(HCe,"STRONG",{});var ejr=s(pte);gho=r(ejr,"data2vec-text"),ejr.forEach(t),pho=r(HCe," \u2014 "),iP=n(HCe,"A",{href:!0});var ojr=s(iP);uho=r(ojr,"Data2VecTextForMaskedLM"),ojr.forEach(t),_ho=r(HCe," (Data2VecText model)"),HCe.forEach(t),bho=i(V),Zp=n(V,"LI",{});var UCe=s(Zp);ute=n(UCe,"STRONG",{});var rjr=s(ute);Fho=r(rjr,"deberta"),rjr.forEach(t),vho=r(UCe," \u2014 "),dP=n(UCe,"A",{href:!0});var tjr=s(dP);Tho=r(tjr,"DebertaForMaskedLM"),tjr.forEach(t),Mho=r(UCe," (DeBERTa model)"),UCe.forEach(t),Eho=i(V),eu=n(V,"LI",{});var JCe=s(eu);_te=n(JCe,"STRONG",{});var ajr=s(_te);Cho=r(ajr,"deberta-v2"),ajr.forEach(t),who=r(JCe," \u2014 "),cP=n(JCe,"A",{href:!0});var njr=s(cP);Aho=r(njr,"DebertaV2ForMaskedLM"),njr.forEach(t),yho=r(JCe," (DeBERTa-v2 model)"),JCe.forEach(t),Lho=i(V),ou=n(V,"LI",{});var YCe=s(ou);bte=n(YCe,"STRONG",{});var sjr=s(bte);xho=r(sjr,"distilbert"),sjr.forEach(t),$ho=r(YCe," \u2014 "),fP=n(YCe,"A",{href:!0});var ljr=s(fP);kho=r(ljr,"DistilBertForMaskedLM"),ljr.forEach(t),Sho=r(YCe," (DistilBERT model)"),YCe.forEach(t),Rho=i(V),ru=n(V,"LI",{});var KCe=s(ru);Fte=n(KCe,"STRONG",{});var ijr=s(Fte);Bho=r(ijr,"electra"),ijr.forEach(t),Pho=r(KCe," \u2014 "),mP=n(KCe,"A",{href:!0});var djr=s(mP);Iho=r(djr,"ElectraForPreTraining"),djr.forEach(t),qho=r(KCe," (ELECTRA model)"),KCe.forEach(t),Nho=i(V),tu=n(V,"LI",{});var ZCe=s(tu);vte=n(ZCe,"STRONG",{});var cjr=s(vte);jho=r(cjr,"flaubert"),cjr.forEach(t),Dho=r(ZCe," \u2014 "),hP=n(ZCe,"A",{href:!0});var fjr=s(hP);Gho=r(fjr,"FlaubertWithLMHeadModel"),fjr.forEach(t),Oho=r(ZCe," (FlauBERT model)"),ZCe.forEach(t),Vho=i(V),au=n(V,"LI",{});var e3e=s(au);Tte=n(e3e,"STRONG",{});var mjr=s(Tte);Xho=r(mjr,"fnet"),mjr.forEach(t),zho=r(e3e," \u2014 "),gP=n(e3e,"A",{href:!0});var hjr=s(gP);Qho=r(hjr,"FNetForPreTraining"),hjr.forEach(t),Who=r(e3e," (FNet model)"),e3e.forEach(t),Hho=i(V),nu=n(V,"LI",{});var o3e=s(nu);Mte=n(o3e,"STRONG",{});var gjr=s(Mte);Uho=r(gjr,"fsmt"),gjr.forEach(t),Jho=r(o3e," \u2014 "),pP=n(o3e,"A",{href:!0});var pjr=s(pP);Yho=r(pjr,"FSMTForConditionalGeneration"),pjr.forEach(t),Kho=r(o3e," (FairSeq Machine-Translation model)"),o3e.forEach(t),Zho=i(V),su=n(V,"LI",{});var r3e=s(su);Ete=n(r3e,"STRONG",{});var ujr=s(Ete);ego=r(ujr,"funnel"),ujr.forEach(t),ogo=r(r3e," \u2014 "),uP=n(r3e,"A",{href:!0});var _jr=s(uP);rgo=r(_jr,"FunnelForPreTraining"),_jr.forEach(t),tgo=r(r3e," (Funnel Transformer model)"),r3e.forEach(t),ago=i(V),lu=n(V,"LI",{});var t3e=s(lu);Cte=n(t3e,"STRONG",{});var bjr=s(Cte);ngo=r(bjr,"gpt2"),bjr.forEach(t),sgo=r(t3e," \u2014 "),_P=n(t3e,"A",{href:!0});var Fjr=s(_P);lgo=r(Fjr,"GPT2LMHeadModel"),Fjr.forEach(t),igo=r(t3e," (OpenAI GPT-2 model)"),t3e.forEach(t),dgo=i(V),iu=n(V,"LI",{});var a3e=s(iu);wte=n(a3e,"STRONG",{});var vjr=s(wte);cgo=r(vjr,"ibert"),vjr.forEach(t),fgo=r(a3e," \u2014 "),bP=n(a3e,"A",{href:!0});var Tjr=s(bP);mgo=r(Tjr,"IBertForMaskedLM"),Tjr.forEach(t),hgo=r(a3e," (I-BERT model)"),a3e.forEach(t),ggo=i(V),du=n(V,"LI",{});var n3e=s(du);Ate=n(n3e,"STRONG",{});var Mjr=s(Ate);pgo=r(Mjr,"layoutlm"),Mjr.forEach(t),ugo=r(n3e," \u2014 "),FP=n(n3e,"A",{href:!0});var Ejr=s(FP);_go=r(Ejr,"LayoutLMForMaskedLM"),Ejr.forEach(t),bgo=r(n3e," (LayoutLM model)"),n3e.forEach(t),Fgo=i(V),cu=n(V,"LI",{});var s3e=s(cu);yte=n(s3e,"STRONG",{});var Cjr=s(yte);vgo=r(Cjr,"longformer"),Cjr.forEach(t),Tgo=r(s3e," \u2014 "),vP=n(s3e,"A",{href:!0});var wjr=s(vP);Mgo=r(wjr,"LongformerForMaskedLM"),wjr.forEach(t),Ego=r(s3e," (Longformer model)"),s3e.forEach(t),Cgo=i(V),fu=n(V,"LI",{});var l3e=s(fu);Lte=n(l3e,"STRONG",{});var Ajr=s(Lte);wgo=r(Ajr,"lxmert"),Ajr.forEach(t),Ago=r(l3e," \u2014 "),TP=n(l3e,"A",{href:!0});var yjr=s(TP);ygo=r(yjr,"LxmertForPreTraining"),yjr.forEach(t),Lgo=r(l3e," (LXMERT model)"),l3e.forEach(t),xgo=i(V),mu=n(V,"LI",{});var i3e=s(mu);xte=n(i3e,"STRONG",{});var Ljr=s(xte);$go=r(Ljr,"megatron-bert"),Ljr.forEach(t),kgo=r(i3e," \u2014 "),MP=n(i3e,"A",{href:!0});var xjr=s(MP);Sgo=r(xjr,"MegatronBertForPreTraining"),xjr.forEach(t),Rgo=r(i3e," (MegatronBert model)"),i3e.forEach(t),Bgo=i(V),hu=n(V,"LI",{});var d3e=s(hu);$te=n(d3e,"STRONG",{});var $jr=s($te);Pgo=r($jr,"mobilebert"),$jr.forEach(t),Igo=r(d3e," \u2014 "),EP=n(d3e,"A",{href:!0});var kjr=s(EP);qgo=r(kjr,"MobileBertForPreTraining"),kjr.forEach(t),Ngo=r(d3e," (MobileBERT model)"),d3e.forEach(t),jgo=i(V),gu=n(V,"LI",{});var c3e=s(gu);kte=n(c3e,"STRONG",{});var Sjr=s(kte);Dgo=r(Sjr,"mpnet"),Sjr.forEach(t),Ggo=r(c3e," \u2014 "),CP=n(c3e,"A",{href:!0});var Rjr=s(CP);Ogo=r(Rjr,"MPNetForMaskedLM"),Rjr.forEach(t),Vgo=r(c3e," (MPNet model)"),c3e.forEach(t),Xgo=i(V),pu=n(V,"LI",{});var f3e=s(pu);Ste=n(f3e,"STRONG",{});var Bjr=s(Ste);zgo=r(Bjr,"openai-gpt"),Bjr.forEach(t),Qgo=r(f3e," \u2014 "),wP=n(f3e,"A",{href:!0});var Pjr=s(wP);Wgo=r(Pjr,"OpenAIGPTLMHeadModel"),Pjr.forEach(t),Hgo=r(f3e," (OpenAI GPT model)"),f3e.forEach(t),Ugo=i(V),uu=n(V,"LI",{});var m3e=s(uu);Rte=n(m3e,"STRONG",{});var Ijr=s(Rte);Jgo=r(Ijr,"retribert"),Ijr.forEach(t),Ygo=r(m3e," \u2014 "),AP=n(m3e,"A",{href:!0});var qjr=s(AP);Kgo=r(qjr,"RetriBertModel"),qjr.forEach(t),Zgo=r(m3e," (RetriBERT model)"),m3e.forEach(t),epo=i(V),_u=n(V,"LI",{});var h3e=s(_u);Bte=n(h3e,"STRONG",{});var Njr=s(Bte);opo=r(Njr,"roberta"),Njr.forEach(t),rpo=r(h3e," \u2014 "),yP=n(h3e,"A",{href:!0});var jjr=s(yP);tpo=r(jjr,"RobertaForMaskedLM"),jjr.forEach(t),apo=r(h3e," (RoBERTa model)"),h3e.forEach(t),npo=i(V),bu=n(V,"LI",{});var g3e=s(bu);Pte=n(g3e,"STRONG",{});var Djr=s(Pte);spo=r(Djr,"squeezebert"),Djr.forEach(t),lpo=r(g3e," \u2014 "),LP=n(g3e,"A",{href:!0});var Gjr=s(LP);ipo=r(Gjr,"SqueezeBertForMaskedLM"),Gjr.forEach(t),dpo=r(g3e," (SqueezeBERT model)"),g3e.forEach(t),cpo=i(V),Fu=n(V,"LI",{});var p3e=s(Fu);Ite=n(p3e,"STRONG",{});var Ojr=s(Ite);fpo=r(Ojr,"t5"),Ojr.forEach(t),mpo=r(p3e," \u2014 "),xP=n(p3e,"A",{href:!0});var Vjr=s(xP);hpo=r(Vjr,"T5ForConditionalGeneration"),Vjr.forEach(t),gpo=r(p3e," (T5 model)"),p3e.forEach(t),ppo=i(V),vu=n(V,"LI",{});var u3e=s(vu);qte=n(u3e,"STRONG",{});var Xjr=s(qte);upo=r(Xjr,"tapas"),Xjr.forEach(t),_po=r(u3e," \u2014 "),$P=n(u3e,"A",{href:!0});var zjr=s($P);bpo=r(zjr,"TapasForMaskedLM"),zjr.forEach(t),Fpo=r(u3e," (TAPAS model)"),u3e.forEach(t),vpo=i(V),Tu=n(V,"LI",{});var _3e=s(Tu);Nte=n(_3e,"STRONG",{});var Qjr=s(Nte);Tpo=r(Qjr,"transfo-xl"),Qjr.forEach(t),Mpo=r(_3e," \u2014 "),kP=n(_3e,"A",{href:!0});var Wjr=s(kP);Epo=r(Wjr,"TransfoXLLMHeadModel"),Wjr.forEach(t),Cpo=r(_3e," (Transformer-XL model)"),_3e.forEach(t),wpo=i(V),Mu=n(V,"LI",{});var b3e=s(Mu);jte=n(b3e,"STRONG",{});var Hjr=s(jte);Apo=r(Hjr,"unispeech"),Hjr.forEach(t),ypo=r(b3e," \u2014 "),SP=n(b3e,"A",{href:!0});var Ujr=s(SP);Lpo=r(Ujr,"UniSpeechForPreTraining"),Ujr.forEach(t),xpo=r(b3e," (UniSpeech model)"),b3e.forEach(t),$po=i(V),Eu=n(V,"LI",{});var F3e=s(Eu);Dte=n(F3e,"STRONG",{});var Jjr=s(Dte);kpo=r(Jjr,"unispeech-sat"),Jjr.forEach(t),Spo=r(F3e," \u2014 "),RP=n(F3e,"A",{href:!0});var Yjr=s(RP);Rpo=r(Yjr,"UniSpeechSatForPreTraining"),Yjr.forEach(t),Bpo=r(F3e," (UniSpeechSat model)"),F3e.forEach(t),Ppo=i(V),Cu=n(V,"LI",{});var v3e=s(Cu);Gte=n(v3e,"STRONG",{});var Kjr=s(Gte);Ipo=r(Kjr,"visual_bert"),Kjr.forEach(t),qpo=r(v3e," \u2014 "),BP=n(v3e,"A",{href:!0});var Zjr=s(BP);Npo=r(Zjr,"VisualBertForPreTraining"),Zjr.forEach(t),jpo=r(v3e," (VisualBert model)"),v3e.forEach(t),Dpo=i(V),wu=n(V,"LI",{});var T3e=s(wu);Ote=n(T3e,"STRONG",{});var eDr=s(Ote);Gpo=r(eDr,"vit_mae"),eDr.forEach(t),Opo=r(T3e," \u2014 "),PP=n(T3e,"A",{href:!0});var oDr=s(PP);Vpo=r(oDr,"ViTMAEForPreTraining"),oDr.forEach(t),Xpo=r(T3e," (ViTMAE model)"),T3e.forEach(t),zpo=i(V),Au=n(V,"LI",{});var M3e=s(Au);Vte=n(M3e,"STRONG",{});var rDr=s(Vte);Qpo=r(rDr,"wav2vec2"),rDr.forEach(t),Wpo=r(M3e," \u2014 "),IP=n(M3e,"A",{href:!0});var tDr=s(IP);Hpo=r(tDr,"Wav2Vec2ForPreTraining"),tDr.forEach(t),Upo=r(M3e," (Wav2Vec2 model)"),M3e.forEach(t),Jpo=i(V),yu=n(V,"LI",{});var E3e=s(yu);Xte=n(E3e,"STRONG",{});var aDr=s(Xte);Ypo=r(aDr,"xlm"),aDr.forEach(t),Kpo=r(E3e," \u2014 "),qP=n(E3e,"A",{href:!0});var nDr=s(qP);Zpo=r(nDr,"XLMWithLMHeadModel"),nDr.forEach(t),euo=r(E3e," (XLM model)"),E3e.forEach(t),ouo=i(V),Lu=n(V,"LI",{});var C3e=s(Lu);zte=n(C3e,"STRONG",{});var sDr=s(zte);ruo=r(sDr,"xlm-roberta"),sDr.forEach(t),tuo=r(C3e," \u2014 "),NP=n(C3e,"A",{href:!0});var lDr=s(NP);auo=r(lDr,"XLMRobertaForMaskedLM"),lDr.forEach(t),nuo=r(C3e," (XLM-RoBERTa model)"),C3e.forEach(t),suo=i(V),xu=n(V,"LI",{});var w3e=s(xu);Qte=n(w3e,"STRONG",{});var iDr=s(Qte);luo=r(iDr,"xlm-roberta-xl"),iDr.forEach(t),iuo=r(w3e," \u2014 "),jP=n(w3e,"A",{href:!0});var dDr=s(jP);duo=r(dDr,"XLMRobertaXLForMaskedLM"),dDr.forEach(t),cuo=r(w3e," (XLM-RoBERTa-XL model)"),w3e.forEach(t),fuo=i(V),$u=n(V,"LI",{});var A3e=s($u);Wte=n(A3e,"STRONG",{});var cDr=s(Wte);muo=r(cDr,"xlnet"),cDr.forEach(t),huo=r(A3e," \u2014 "),DP=n(A3e,"A",{href:!0});var fDr=s(DP);guo=r(fDr,"XLNetLMHeadModel"),fDr.forEach(t),puo=r(A3e," (XLNet model)"),A3e.forEach(t),V.forEach(t),uuo=i(Jt),ku=n(Jt,"P",{});var y3e=s(ku);_uo=r(y3e,"The model is set in evaluation mode by default using "),Hte=n(y3e,"CODE",{});var mDr=s(Hte);buo=r(mDr,"model.eval()"),mDr.forEach(t),Fuo=r(y3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=n(y3e,"CODE",{});var hDr=s(Ute);vuo=r(hDr,"model.train()"),hDr.forEach(t),y3e.forEach(t),Tuo=i(Jt),T(Su.$$.fragment,Jt),Jt.forEach(t),As.forEach(t),z9e=i(f),mi=n(f,"H2",{class:!0});var WSe=s(mi);Ru=n(WSe,"A",{id:!0,class:!0,href:!0});var gDr=s(Ru);Jte=n(gDr,"SPAN",{});var pDr=s(Jte);T(d6.$$.fragment,pDr),pDr.forEach(t),gDr.forEach(t),Muo=i(WSe),Yte=n(WSe,"SPAN",{});var uDr=s(Yte);Euo=r(uDr,"AutoModelForCausalLM"),uDr.forEach(t),WSe.forEach(t),Q9e=i(f),Lo=n(f,"DIV",{class:!0});var ys=s(Lo);T(c6.$$.fragment,ys),Cuo=i(ys),hi=n(ys,"P",{});var YH=s(hi);wuo=r(YH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GP=n(YH,"A",{href:!0});var _Dr=s(GP);Auo=r(_Dr,"from_pretrained()"),_Dr.forEach(t),yuo=r(YH," class method or the "),OP=n(YH,"A",{href:!0});var bDr=s(OP);Luo=r(bDr,"from_config()"),bDr.forEach(t),xuo=r(YH,` class
method.`),YH.forEach(t),$uo=i(ys),f6=n(ys,"P",{});var HSe=s(f6);kuo=r(HSe,"This class cannot be instantiated directly using "),Kte=n(HSe,"CODE",{});var FDr=s(Kte);Suo=r(FDr,"__init__()"),FDr.forEach(t),Ruo=r(HSe," (throws an error)."),HSe.forEach(t),Buo=i(ys),et=n(ys,"DIV",{class:!0});var qw=s(et);T(m6.$$.fragment,qw),Puo=i(qw),Zte=n(qw,"P",{});var vDr=s(Zte);Iuo=r(vDr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vDr.forEach(t),quo=i(qw),gi=n(qw,"P",{});var KH=s(gi);Nuo=r(KH,`Note:
Loading a model from its configuration file does `),eae=n(KH,"STRONG",{});var TDr=s(eae);juo=r(TDr,"not"),TDr.forEach(t),Duo=r(KH,` load the model weights. It only affects the
model\u2019s configuration. Use `),VP=n(KH,"A",{href:!0});var MDr=s(VP);Guo=r(MDr,"from_pretrained()"),MDr.forEach(t),Ouo=r(KH," to load the model weights."),KH.forEach(t),Vuo=i(qw),T(Bu.$$.fragment,qw),qw.forEach(t),Xuo=i(ys),We=n(ys,"DIV",{class:!0});var Yt=s(We);T(h6.$$.fragment,Yt),zuo=i(Yt),oae=n(Yt,"P",{});var EDr=s(oae);Quo=r(EDr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EDr.forEach(t),Wuo=i(Yt),Ca=n(Yt,"P",{});var Nw=s(Ca);Huo=r(Nw,"The model class to instantiate is selected based on the "),rae=n(Nw,"CODE",{});var CDr=s(rae);Uuo=r(CDr,"model_type"),CDr.forEach(t),Juo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),tae=n(Nw,"CODE",{});var wDr=s(tae);Yuo=r(wDr,"pretrained_model_name_or_path"),wDr.forEach(t),Kuo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aae=n(Nw,"CODE",{});var ADr=s(aae);Zuo=r(ADr,"pretrained_model_name_or_path"),ADr.forEach(t),e_o=r(Nw,":"),Nw.forEach(t),o_o=i(Yt),z=n(Yt,"UL",{});var W=s(z);Pu=n(W,"LI",{});var L3e=s(Pu);nae=n(L3e,"STRONG",{});var yDr=s(nae);r_o=r(yDr,"bart"),yDr.forEach(t),t_o=r(L3e," \u2014 "),XP=n(L3e,"A",{href:!0});var LDr=s(XP);a_o=r(LDr,"BartForCausalLM"),LDr.forEach(t),n_o=r(L3e," (BART model)"),L3e.forEach(t),s_o=i(W),Iu=n(W,"LI",{});var x3e=s(Iu);sae=n(x3e,"STRONG",{});var xDr=s(sae);l_o=r(xDr,"bert"),xDr.forEach(t),i_o=r(x3e," \u2014 "),zP=n(x3e,"A",{href:!0});var $Dr=s(zP);d_o=r($Dr,"BertLMHeadModel"),$Dr.forEach(t),c_o=r(x3e," (BERT model)"),x3e.forEach(t),f_o=i(W),qu=n(W,"LI",{});var $3e=s(qu);lae=n($3e,"STRONG",{});var kDr=s(lae);m_o=r(kDr,"bert-generation"),kDr.forEach(t),h_o=r($3e," \u2014 "),QP=n($3e,"A",{href:!0});var SDr=s(QP);g_o=r(SDr,"BertGenerationDecoder"),SDr.forEach(t),p_o=r($3e," (Bert Generation model)"),$3e.forEach(t),u_o=i(W),Nu=n(W,"LI",{});var k3e=s(Nu);iae=n(k3e,"STRONG",{});var RDr=s(iae);__o=r(RDr,"big_bird"),RDr.forEach(t),b_o=r(k3e," \u2014 "),WP=n(k3e,"A",{href:!0});var BDr=s(WP);F_o=r(BDr,"BigBirdForCausalLM"),BDr.forEach(t),v_o=r(k3e," (BigBird model)"),k3e.forEach(t),T_o=i(W),ju=n(W,"LI",{});var S3e=s(ju);dae=n(S3e,"STRONG",{});var PDr=s(dae);M_o=r(PDr,"bigbird_pegasus"),PDr.forEach(t),E_o=r(S3e," \u2014 "),HP=n(S3e,"A",{href:!0});var IDr=s(HP);C_o=r(IDr,"BigBirdPegasusForCausalLM"),IDr.forEach(t),w_o=r(S3e," (BigBirdPegasus model)"),S3e.forEach(t),A_o=i(W),Du=n(W,"LI",{});var R3e=s(Du);cae=n(R3e,"STRONG",{});var qDr=s(cae);y_o=r(qDr,"blenderbot"),qDr.forEach(t),L_o=r(R3e," \u2014 "),UP=n(R3e,"A",{href:!0});var NDr=s(UP);x_o=r(NDr,"BlenderbotForCausalLM"),NDr.forEach(t),$_o=r(R3e," (Blenderbot model)"),R3e.forEach(t),k_o=i(W),Gu=n(W,"LI",{});var B3e=s(Gu);fae=n(B3e,"STRONG",{});var jDr=s(fae);S_o=r(jDr,"blenderbot-small"),jDr.forEach(t),R_o=r(B3e," \u2014 "),JP=n(B3e,"A",{href:!0});var DDr=s(JP);B_o=r(DDr,"BlenderbotSmallForCausalLM"),DDr.forEach(t),P_o=r(B3e," (BlenderbotSmall model)"),B3e.forEach(t),I_o=i(W),Ou=n(W,"LI",{});var P3e=s(Ou);mae=n(P3e,"STRONG",{});var GDr=s(mae);q_o=r(GDr,"camembert"),GDr.forEach(t),N_o=r(P3e," \u2014 "),YP=n(P3e,"A",{href:!0});var ODr=s(YP);j_o=r(ODr,"CamembertForCausalLM"),ODr.forEach(t),D_o=r(P3e," (CamemBERT model)"),P3e.forEach(t),G_o=i(W),Vu=n(W,"LI",{});var I3e=s(Vu);hae=n(I3e,"STRONG",{});var VDr=s(hae);O_o=r(VDr,"ctrl"),VDr.forEach(t),V_o=r(I3e," \u2014 "),KP=n(I3e,"A",{href:!0});var XDr=s(KP);X_o=r(XDr,"CTRLLMHeadModel"),XDr.forEach(t),z_o=r(I3e," (CTRL model)"),I3e.forEach(t),Q_o=i(W),Xu=n(W,"LI",{});var q3e=s(Xu);gae=n(q3e,"STRONG",{});var zDr=s(gae);W_o=r(zDr,"data2vec-text"),zDr.forEach(t),H_o=r(q3e," \u2014 "),ZP=n(q3e,"A",{href:!0});var QDr=s(ZP);U_o=r(QDr,"Data2VecTextForCausalLM"),QDr.forEach(t),J_o=r(q3e," (Data2VecText model)"),q3e.forEach(t),Y_o=i(W),zu=n(W,"LI",{});var N3e=s(zu);pae=n(N3e,"STRONG",{});var WDr=s(pae);K_o=r(WDr,"electra"),WDr.forEach(t),Z_o=r(N3e," \u2014 "),eI=n(N3e,"A",{href:!0});var HDr=s(eI);ebo=r(HDr,"ElectraForCausalLM"),HDr.forEach(t),obo=r(N3e," (ELECTRA model)"),N3e.forEach(t),rbo=i(W),Qu=n(W,"LI",{});var j3e=s(Qu);uae=n(j3e,"STRONG",{});var UDr=s(uae);tbo=r(UDr,"gpt2"),UDr.forEach(t),abo=r(j3e," \u2014 "),oI=n(j3e,"A",{href:!0});var JDr=s(oI);nbo=r(JDr,"GPT2LMHeadModel"),JDr.forEach(t),sbo=r(j3e," (OpenAI GPT-2 model)"),j3e.forEach(t),lbo=i(W),Wu=n(W,"LI",{});var D3e=s(Wu);_ae=n(D3e,"STRONG",{});var YDr=s(_ae);ibo=r(YDr,"gpt_neo"),YDr.forEach(t),dbo=r(D3e," \u2014 "),rI=n(D3e,"A",{href:!0});var KDr=s(rI);cbo=r(KDr,"GPTNeoForCausalLM"),KDr.forEach(t),fbo=r(D3e," (GPT Neo model)"),D3e.forEach(t),mbo=i(W),Hu=n(W,"LI",{});var G3e=s(Hu);bae=n(G3e,"STRONG",{});var ZDr=s(bae);hbo=r(ZDr,"gptj"),ZDr.forEach(t),gbo=r(G3e," \u2014 "),tI=n(G3e,"A",{href:!0});var eGr=s(tI);pbo=r(eGr,"GPTJForCausalLM"),eGr.forEach(t),ubo=r(G3e," (GPT-J model)"),G3e.forEach(t),_bo=i(W),Uu=n(W,"LI",{});var O3e=s(Uu);Fae=n(O3e,"STRONG",{});var oGr=s(Fae);bbo=r(oGr,"marian"),oGr.forEach(t),Fbo=r(O3e," \u2014 "),aI=n(O3e,"A",{href:!0});var rGr=s(aI);vbo=r(rGr,"MarianForCausalLM"),rGr.forEach(t),Tbo=r(O3e," (Marian model)"),O3e.forEach(t),Mbo=i(W),Ju=n(W,"LI",{});var V3e=s(Ju);vae=n(V3e,"STRONG",{});var tGr=s(vae);Ebo=r(tGr,"mbart"),tGr.forEach(t),Cbo=r(V3e," \u2014 "),nI=n(V3e,"A",{href:!0});var aGr=s(nI);wbo=r(aGr,"MBartForCausalLM"),aGr.forEach(t),Abo=r(V3e," (mBART model)"),V3e.forEach(t),ybo=i(W),Yu=n(W,"LI",{});var X3e=s(Yu);Tae=n(X3e,"STRONG",{});var nGr=s(Tae);Lbo=r(nGr,"megatron-bert"),nGr.forEach(t),xbo=r(X3e," \u2014 "),sI=n(X3e,"A",{href:!0});var sGr=s(sI);$bo=r(sGr,"MegatronBertForCausalLM"),sGr.forEach(t),kbo=r(X3e," (MegatronBert model)"),X3e.forEach(t),Sbo=i(W),Ku=n(W,"LI",{});var z3e=s(Ku);Mae=n(z3e,"STRONG",{});var lGr=s(Mae);Rbo=r(lGr,"openai-gpt"),lGr.forEach(t),Bbo=r(z3e," \u2014 "),lI=n(z3e,"A",{href:!0});var iGr=s(lI);Pbo=r(iGr,"OpenAIGPTLMHeadModel"),iGr.forEach(t),Ibo=r(z3e," (OpenAI GPT model)"),z3e.forEach(t),qbo=i(W),Zu=n(W,"LI",{});var Q3e=s(Zu);Eae=n(Q3e,"STRONG",{});var dGr=s(Eae);Nbo=r(dGr,"pegasus"),dGr.forEach(t),jbo=r(Q3e," \u2014 "),iI=n(Q3e,"A",{href:!0});var cGr=s(iI);Dbo=r(cGr,"PegasusForCausalLM"),cGr.forEach(t),Gbo=r(Q3e," (Pegasus model)"),Q3e.forEach(t),Obo=i(W),e_=n(W,"LI",{});var W3e=s(e_);Cae=n(W3e,"STRONG",{});var fGr=s(Cae);Vbo=r(fGr,"plbart"),fGr.forEach(t),Xbo=r(W3e," \u2014 "),wae=n(W3e,"CODE",{});var mGr=s(wae);zbo=r(mGr,"PLBartForCausalLM"),mGr.forEach(t),Qbo=r(W3e," (PLBart model)"),W3e.forEach(t),Wbo=i(W),o_=n(W,"LI",{});var H3e=s(o_);Aae=n(H3e,"STRONG",{});var hGr=s(Aae);Hbo=r(hGr,"prophetnet"),hGr.forEach(t),Ubo=r(H3e," \u2014 "),dI=n(H3e,"A",{href:!0});var gGr=s(dI);Jbo=r(gGr,"ProphetNetForCausalLM"),gGr.forEach(t),Ybo=r(H3e," (ProphetNet model)"),H3e.forEach(t),Kbo=i(W),r_=n(W,"LI",{});var U3e=s(r_);yae=n(U3e,"STRONG",{});var pGr=s(yae);Zbo=r(pGr,"qdqbert"),pGr.forEach(t),e2o=r(U3e," \u2014 "),Lae=n(U3e,"CODE",{});var uGr=s(Lae);o2o=r(uGr,"QDQBertLMHeadModel"),uGr.forEach(t),r2o=r(U3e," (QDQBert model)"),U3e.forEach(t),t2o=i(W),t_=n(W,"LI",{});var J3e=s(t_);xae=n(J3e,"STRONG",{});var _Gr=s(xae);a2o=r(_Gr,"reformer"),_Gr.forEach(t),n2o=r(J3e," \u2014 "),cI=n(J3e,"A",{href:!0});var bGr=s(cI);s2o=r(bGr,"ReformerModelWithLMHead"),bGr.forEach(t),l2o=r(J3e," (Reformer model)"),J3e.forEach(t),i2o=i(W),a_=n(W,"LI",{});var Y3e=s(a_);$ae=n(Y3e,"STRONG",{});var FGr=s($ae);d2o=r(FGr,"rembert"),FGr.forEach(t),c2o=r(Y3e," \u2014 "),fI=n(Y3e,"A",{href:!0});var vGr=s(fI);f2o=r(vGr,"RemBertForCausalLM"),vGr.forEach(t),m2o=r(Y3e," (RemBERT model)"),Y3e.forEach(t),h2o=i(W),n_=n(W,"LI",{});var K3e=s(n_);kae=n(K3e,"STRONG",{});var TGr=s(kae);g2o=r(TGr,"roberta"),TGr.forEach(t),p2o=r(K3e," \u2014 "),mI=n(K3e,"A",{href:!0});var MGr=s(mI);u2o=r(MGr,"RobertaForCausalLM"),MGr.forEach(t),_2o=r(K3e," (RoBERTa model)"),K3e.forEach(t),b2o=i(W),s_=n(W,"LI",{});var Z3e=s(s_);Sae=n(Z3e,"STRONG",{});var EGr=s(Sae);F2o=r(EGr,"roformer"),EGr.forEach(t),v2o=r(Z3e," \u2014 "),hI=n(Z3e,"A",{href:!0});var CGr=s(hI);T2o=r(CGr,"RoFormerForCausalLM"),CGr.forEach(t),M2o=r(Z3e," (RoFormer model)"),Z3e.forEach(t),E2o=i(W),l_=n(W,"LI",{});var ewe=s(l_);Rae=n(ewe,"STRONG",{});var wGr=s(Rae);C2o=r(wGr,"speech_to_text_2"),wGr.forEach(t),w2o=r(ewe," \u2014 "),gI=n(ewe,"A",{href:!0});var AGr=s(gI);A2o=r(AGr,"Speech2Text2ForCausalLM"),AGr.forEach(t),y2o=r(ewe," (Speech2Text2 model)"),ewe.forEach(t),L2o=i(W),i_=n(W,"LI",{});var owe=s(i_);Bae=n(owe,"STRONG",{});var yGr=s(Bae);x2o=r(yGr,"transfo-xl"),yGr.forEach(t),$2o=r(owe," \u2014 "),pI=n(owe,"A",{href:!0});var LGr=s(pI);k2o=r(LGr,"TransfoXLLMHeadModel"),LGr.forEach(t),S2o=r(owe," (Transformer-XL model)"),owe.forEach(t),R2o=i(W),d_=n(W,"LI",{});var rwe=s(d_);Pae=n(rwe,"STRONG",{});var xGr=s(Pae);B2o=r(xGr,"trocr"),xGr.forEach(t),P2o=r(rwe," \u2014 "),uI=n(rwe,"A",{href:!0});var $Gr=s(uI);I2o=r($Gr,"TrOCRForCausalLM"),$Gr.forEach(t),q2o=r(rwe," (TrOCR model)"),rwe.forEach(t),N2o=i(W),c_=n(W,"LI",{});var twe=s(c_);Iae=n(twe,"STRONG",{});var kGr=s(Iae);j2o=r(kGr,"xglm"),kGr.forEach(t),D2o=r(twe," \u2014 "),_I=n(twe,"A",{href:!0});var SGr=s(_I);G2o=r(SGr,"XGLMForCausalLM"),SGr.forEach(t),O2o=r(twe," (XGLM model)"),twe.forEach(t),V2o=i(W),f_=n(W,"LI",{});var awe=s(f_);qae=n(awe,"STRONG",{});var RGr=s(qae);X2o=r(RGr,"xlm"),RGr.forEach(t),z2o=r(awe," \u2014 "),bI=n(awe,"A",{href:!0});var BGr=s(bI);Q2o=r(BGr,"XLMWithLMHeadModel"),BGr.forEach(t),W2o=r(awe," (XLM model)"),awe.forEach(t),H2o=i(W),m_=n(W,"LI",{});var nwe=s(m_);Nae=n(nwe,"STRONG",{});var PGr=s(Nae);U2o=r(PGr,"xlm-prophetnet"),PGr.forEach(t),J2o=r(nwe," \u2014 "),FI=n(nwe,"A",{href:!0});var IGr=s(FI);Y2o=r(IGr,"XLMProphetNetForCausalLM"),IGr.forEach(t),K2o=r(nwe," (XLMProphetNet model)"),nwe.forEach(t),Z2o=i(W),h_=n(W,"LI",{});var swe=s(h_);jae=n(swe,"STRONG",{});var qGr=s(jae);eFo=r(qGr,"xlm-roberta"),qGr.forEach(t),oFo=r(swe," \u2014 "),vI=n(swe,"A",{href:!0});var NGr=s(vI);rFo=r(NGr,"XLMRobertaForCausalLM"),NGr.forEach(t),tFo=r(swe," (XLM-RoBERTa model)"),swe.forEach(t),aFo=i(W),g_=n(W,"LI",{});var lwe=s(g_);Dae=n(lwe,"STRONG",{});var jGr=s(Dae);nFo=r(jGr,"xlm-roberta-xl"),jGr.forEach(t),sFo=r(lwe," \u2014 "),TI=n(lwe,"A",{href:!0});var DGr=s(TI);lFo=r(DGr,"XLMRobertaXLForCausalLM"),DGr.forEach(t),iFo=r(lwe," (XLM-RoBERTa-XL model)"),lwe.forEach(t),dFo=i(W),p_=n(W,"LI",{});var iwe=s(p_);Gae=n(iwe,"STRONG",{});var GGr=s(Gae);cFo=r(GGr,"xlnet"),GGr.forEach(t),fFo=r(iwe," \u2014 "),MI=n(iwe,"A",{href:!0});var OGr=s(MI);mFo=r(OGr,"XLNetLMHeadModel"),OGr.forEach(t),hFo=r(iwe," (XLNet model)"),iwe.forEach(t),W.forEach(t),gFo=i(Yt),u_=n(Yt,"P",{});var dwe=s(u_);pFo=r(dwe,"The model is set in evaluation mode by default using "),Oae=n(dwe,"CODE",{});var VGr=s(Oae);uFo=r(VGr,"model.eval()"),VGr.forEach(t),_Fo=r(dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vae=n(dwe,"CODE",{});var XGr=s(Vae);bFo=r(XGr,"model.train()"),XGr.forEach(t),dwe.forEach(t),FFo=i(Yt),T(__.$$.fragment,Yt),Yt.forEach(t),ys.forEach(t),W9e=i(f),pi=n(f,"H2",{class:!0});var USe=s(pi);b_=n(USe,"A",{id:!0,class:!0,href:!0});var zGr=s(b_);Xae=n(zGr,"SPAN",{});var QGr=s(Xae);T(g6.$$.fragment,QGr),QGr.forEach(t),zGr.forEach(t),vFo=i(USe),zae=n(USe,"SPAN",{});var WGr=s(zae);TFo=r(WGr,"AutoModelForMaskedLM"),WGr.forEach(t),USe.forEach(t),H9e=i(f),xo=n(f,"DIV",{class:!0});var Ls=s(xo);T(p6.$$.fragment,Ls),MFo=i(Ls),ui=n(Ls,"P",{});var ZH=s(ui);EFo=r(ZH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EI=n(ZH,"A",{href:!0});var HGr=s(EI);CFo=r(HGr,"from_pretrained()"),HGr.forEach(t),wFo=r(ZH," class method or the "),CI=n(ZH,"A",{href:!0});var UGr=s(CI);AFo=r(UGr,"from_config()"),UGr.forEach(t),yFo=r(ZH,` class
method.`),ZH.forEach(t),LFo=i(Ls),u6=n(Ls,"P",{});var JSe=s(u6);xFo=r(JSe,"This class cannot be instantiated directly using "),Qae=n(JSe,"CODE",{});var JGr=s(Qae);$Fo=r(JGr,"__init__()"),JGr.forEach(t),kFo=r(JSe," (throws an error)."),JSe.forEach(t),SFo=i(Ls),ot=n(Ls,"DIV",{class:!0});var jw=s(ot);T(_6.$$.fragment,jw),RFo=i(jw),Wae=n(jw,"P",{});var YGr=s(Wae);BFo=r(YGr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YGr.forEach(t),PFo=i(jw),_i=n(jw,"P",{});var eU=s(_i);IFo=r(eU,`Note:
Loading a model from its configuration file does `),Hae=n(eU,"STRONG",{});var KGr=s(Hae);qFo=r(KGr,"not"),KGr.forEach(t),NFo=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=n(eU,"A",{href:!0});var ZGr=s(wI);jFo=r(ZGr,"from_pretrained()"),ZGr.forEach(t),DFo=r(eU," to load the model weights."),eU.forEach(t),GFo=i(jw),T(F_.$$.fragment,jw),jw.forEach(t),OFo=i(Ls),He=n(Ls,"DIV",{class:!0});var Kt=s(He);T(b6.$$.fragment,Kt),VFo=i(Kt),Uae=n(Kt,"P",{});var eOr=s(Uae);XFo=r(eOr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eOr.forEach(t),zFo=i(Kt),wa=n(Kt,"P",{});var Dw=s(wa);QFo=r(Dw,"The model class to instantiate is selected based on the "),Jae=n(Dw,"CODE",{});var oOr=s(Jae);WFo=r(oOr,"model_type"),oOr.forEach(t),HFo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Yae=n(Dw,"CODE",{});var rOr=s(Yae);UFo=r(rOr,"pretrained_model_name_or_path"),rOr.forEach(t),JFo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kae=n(Dw,"CODE",{});var tOr=s(Kae);YFo=r(tOr,"pretrained_model_name_or_path"),tOr.forEach(t),KFo=r(Dw,":"),Dw.forEach(t),ZFo=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);v_=n(H,"LI",{});var cwe=s(v_);Zae=n(cwe,"STRONG",{});var aOr=s(Zae);evo=r(aOr,"albert"),aOr.forEach(t),ovo=r(cwe," \u2014 "),AI=n(cwe,"A",{href:!0});var nOr=s(AI);rvo=r(nOr,"AlbertForMaskedLM"),nOr.forEach(t),tvo=r(cwe," (ALBERT model)"),cwe.forEach(t),avo=i(H),T_=n(H,"LI",{});var fwe=s(T_);ene=n(fwe,"STRONG",{});var sOr=s(ene);nvo=r(sOr,"bart"),sOr.forEach(t),svo=r(fwe," \u2014 "),yI=n(fwe,"A",{href:!0});var lOr=s(yI);lvo=r(lOr,"BartForConditionalGeneration"),lOr.forEach(t),ivo=r(fwe," (BART model)"),fwe.forEach(t),dvo=i(H),M_=n(H,"LI",{});var mwe=s(M_);one=n(mwe,"STRONG",{});var iOr=s(one);cvo=r(iOr,"bert"),iOr.forEach(t),fvo=r(mwe," \u2014 "),LI=n(mwe,"A",{href:!0});var dOr=s(LI);mvo=r(dOr,"BertForMaskedLM"),dOr.forEach(t),hvo=r(mwe," (BERT model)"),mwe.forEach(t),gvo=i(H),E_=n(H,"LI",{});var hwe=s(E_);rne=n(hwe,"STRONG",{});var cOr=s(rne);pvo=r(cOr,"big_bird"),cOr.forEach(t),uvo=r(hwe," \u2014 "),xI=n(hwe,"A",{href:!0});var fOr=s(xI);_vo=r(fOr,"BigBirdForMaskedLM"),fOr.forEach(t),bvo=r(hwe," (BigBird model)"),hwe.forEach(t),Fvo=i(H),C_=n(H,"LI",{});var gwe=s(C_);tne=n(gwe,"STRONG",{});var mOr=s(tne);vvo=r(mOr,"camembert"),mOr.forEach(t),Tvo=r(gwe," \u2014 "),$I=n(gwe,"A",{href:!0});var hOr=s($I);Mvo=r(hOr,"CamembertForMaskedLM"),hOr.forEach(t),Evo=r(gwe," (CamemBERT model)"),gwe.forEach(t),Cvo=i(H),w_=n(H,"LI",{});var pwe=s(w_);ane=n(pwe,"STRONG",{});var gOr=s(ane);wvo=r(gOr,"convbert"),gOr.forEach(t),Avo=r(pwe," \u2014 "),kI=n(pwe,"A",{href:!0});var pOr=s(kI);yvo=r(pOr,"ConvBertForMaskedLM"),pOr.forEach(t),Lvo=r(pwe," (ConvBERT model)"),pwe.forEach(t),xvo=i(H),A_=n(H,"LI",{});var uwe=s(A_);nne=n(uwe,"STRONG",{});var uOr=s(nne);$vo=r(uOr,"data2vec-text"),uOr.forEach(t),kvo=r(uwe," \u2014 "),SI=n(uwe,"A",{href:!0});var _Or=s(SI);Svo=r(_Or,"Data2VecTextForMaskedLM"),_Or.forEach(t),Rvo=r(uwe," (Data2VecText model)"),uwe.forEach(t),Bvo=i(H),y_=n(H,"LI",{});var _we=s(y_);sne=n(_we,"STRONG",{});var bOr=s(sne);Pvo=r(bOr,"deberta"),bOr.forEach(t),Ivo=r(_we," \u2014 "),RI=n(_we,"A",{href:!0});var FOr=s(RI);qvo=r(FOr,"DebertaForMaskedLM"),FOr.forEach(t),Nvo=r(_we," (DeBERTa model)"),_we.forEach(t),jvo=i(H),L_=n(H,"LI",{});var bwe=s(L_);lne=n(bwe,"STRONG",{});var vOr=s(lne);Dvo=r(vOr,"deberta-v2"),vOr.forEach(t),Gvo=r(bwe," \u2014 "),BI=n(bwe,"A",{href:!0});var TOr=s(BI);Ovo=r(TOr,"DebertaV2ForMaskedLM"),TOr.forEach(t),Vvo=r(bwe," (DeBERTa-v2 model)"),bwe.forEach(t),Xvo=i(H),x_=n(H,"LI",{});var Fwe=s(x_);ine=n(Fwe,"STRONG",{});var MOr=s(ine);zvo=r(MOr,"distilbert"),MOr.forEach(t),Qvo=r(Fwe," \u2014 "),PI=n(Fwe,"A",{href:!0});var EOr=s(PI);Wvo=r(EOr,"DistilBertForMaskedLM"),EOr.forEach(t),Hvo=r(Fwe," (DistilBERT model)"),Fwe.forEach(t),Uvo=i(H),$_=n(H,"LI",{});var vwe=s($_);dne=n(vwe,"STRONG",{});var COr=s(dne);Jvo=r(COr,"electra"),COr.forEach(t),Yvo=r(vwe," \u2014 "),II=n(vwe,"A",{href:!0});var wOr=s(II);Kvo=r(wOr,"ElectraForMaskedLM"),wOr.forEach(t),Zvo=r(vwe," (ELECTRA model)"),vwe.forEach(t),e1o=i(H),k_=n(H,"LI",{});var Twe=s(k_);cne=n(Twe,"STRONG",{});var AOr=s(cne);o1o=r(AOr,"flaubert"),AOr.forEach(t),r1o=r(Twe," \u2014 "),qI=n(Twe,"A",{href:!0});var yOr=s(qI);t1o=r(yOr,"FlaubertWithLMHeadModel"),yOr.forEach(t),a1o=r(Twe," (FlauBERT model)"),Twe.forEach(t),n1o=i(H),S_=n(H,"LI",{});var Mwe=s(S_);fne=n(Mwe,"STRONG",{});var LOr=s(fne);s1o=r(LOr,"fnet"),LOr.forEach(t),l1o=r(Mwe," \u2014 "),NI=n(Mwe,"A",{href:!0});var xOr=s(NI);i1o=r(xOr,"FNetForMaskedLM"),xOr.forEach(t),d1o=r(Mwe," (FNet model)"),Mwe.forEach(t),c1o=i(H),R_=n(H,"LI",{});var Ewe=s(R_);mne=n(Ewe,"STRONG",{});var $Or=s(mne);f1o=r($Or,"funnel"),$Or.forEach(t),m1o=r(Ewe," \u2014 "),jI=n(Ewe,"A",{href:!0});var kOr=s(jI);h1o=r(kOr,"FunnelForMaskedLM"),kOr.forEach(t),g1o=r(Ewe," (Funnel Transformer model)"),Ewe.forEach(t),p1o=i(H),B_=n(H,"LI",{});var Cwe=s(B_);hne=n(Cwe,"STRONG",{});var SOr=s(hne);u1o=r(SOr,"ibert"),SOr.forEach(t),_1o=r(Cwe," \u2014 "),DI=n(Cwe,"A",{href:!0});var ROr=s(DI);b1o=r(ROr,"IBertForMaskedLM"),ROr.forEach(t),F1o=r(Cwe," (I-BERT model)"),Cwe.forEach(t),v1o=i(H),P_=n(H,"LI",{});var wwe=s(P_);gne=n(wwe,"STRONG",{});var BOr=s(gne);T1o=r(BOr,"layoutlm"),BOr.forEach(t),M1o=r(wwe," \u2014 "),GI=n(wwe,"A",{href:!0});var POr=s(GI);E1o=r(POr,"LayoutLMForMaskedLM"),POr.forEach(t),C1o=r(wwe," (LayoutLM model)"),wwe.forEach(t),w1o=i(H),I_=n(H,"LI",{});var Awe=s(I_);pne=n(Awe,"STRONG",{});var IOr=s(pne);A1o=r(IOr,"longformer"),IOr.forEach(t),y1o=r(Awe," \u2014 "),OI=n(Awe,"A",{href:!0});var qOr=s(OI);L1o=r(qOr,"LongformerForMaskedLM"),qOr.forEach(t),x1o=r(Awe," (Longformer model)"),Awe.forEach(t),$1o=i(H),q_=n(H,"LI",{});var ywe=s(q_);une=n(ywe,"STRONG",{});var NOr=s(une);k1o=r(NOr,"mbart"),NOr.forEach(t),S1o=r(ywe," \u2014 "),VI=n(ywe,"A",{href:!0});var jOr=s(VI);R1o=r(jOr,"MBartForConditionalGeneration"),jOr.forEach(t),B1o=r(ywe," (mBART model)"),ywe.forEach(t),P1o=i(H),N_=n(H,"LI",{});var Lwe=s(N_);_ne=n(Lwe,"STRONG",{});var DOr=s(_ne);I1o=r(DOr,"megatron-bert"),DOr.forEach(t),q1o=r(Lwe," \u2014 "),XI=n(Lwe,"A",{href:!0});var GOr=s(XI);N1o=r(GOr,"MegatronBertForMaskedLM"),GOr.forEach(t),j1o=r(Lwe," (MegatronBert model)"),Lwe.forEach(t),D1o=i(H),j_=n(H,"LI",{});var xwe=s(j_);bne=n(xwe,"STRONG",{});var OOr=s(bne);G1o=r(OOr,"mobilebert"),OOr.forEach(t),O1o=r(xwe," \u2014 "),zI=n(xwe,"A",{href:!0});var VOr=s(zI);V1o=r(VOr,"MobileBertForMaskedLM"),VOr.forEach(t),X1o=r(xwe," (MobileBERT model)"),xwe.forEach(t),z1o=i(H),D_=n(H,"LI",{});var $we=s(D_);Fne=n($we,"STRONG",{});var XOr=s(Fne);Q1o=r(XOr,"mpnet"),XOr.forEach(t),W1o=r($we," \u2014 "),QI=n($we,"A",{href:!0});var zOr=s(QI);H1o=r(zOr,"MPNetForMaskedLM"),zOr.forEach(t),U1o=r($we," (MPNet model)"),$we.forEach(t),J1o=i(H),G_=n(H,"LI",{});var kwe=s(G_);vne=n(kwe,"STRONG",{});var QOr=s(vne);Y1o=r(QOr,"nystromformer"),QOr.forEach(t),K1o=r(kwe," \u2014 "),WI=n(kwe,"A",{href:!0});var WOr=s(WI);Z1o=r(WOr,"NystromformerForMaskedLM"),WOr.forEach(t),eTo=r(kwe," (Nystromformer model)"),kwe.forEach(t),oTo=i(H),O_=n(H,"LI",{});var Swe=s(O_);Tne=n(Swe,"STRONG",{});var HOr=s(Tne);rTo=r(HOr,"perceiver"),HOr.forEach(t),tTo=r(Swe," \u2014 "),HI=n(Swe,"A",{href:!0});var UOr=s(HI);aTo=r(UOr,"PerceiverForMaskedLM"),UOr.forEach(t),nTo=r(Swe," (Perceiver model)"),Swe.forEach(t),sTo=i(H),V_=n(H,"LI",{});var Rwe=s(V_);Mne=n(Rwe,"STRONG",{});var JOr=s(Mne);lTo=r(JOr,"qdqbert"),JOr.forEach(t),iTo=r(Rwe," \u2014 "),Ene=n(Rwe,"CODE",{});var YOr=s(Ene);dTo=r(YOr,"QDQBertForMaskedLM"),YOr.forEach(t),cTo=r(Rwe," (QDQBert model)"),Rwe.forEach(t),fTo=i(H),X_=n(H,"LI",{});var Bwe=s(X_);Cne=n(Bwe,"STRONG",{});var KOr=s(Cne);mTo=r(KOr,"reformer"),KOr.forEach(t),hTo=r(Bwe," \u2014 "),UI=n(Bwe,"A",{href:!0});var ZOr=s(UI);gTo=r(ZOr,"ReformerForMaskedLM"),ZOr.forEach(t),pTo=r(Bwe," (Reformer model)"),Bwe.forEach(t),uTo=i(H),z_=n(H,"LI",{});var Pwe=s(z_);wne=n(Pwe,"STRONG",{});var eVr=s(wne);_To=r(eVr,"rembert"),eVr.forEach(t),bTo=r(Pwe," \u2014 "),JI=n(Pwe,"A",{href:!0});var oVr=s(JI);FTo=r(oVr,"RemBertForMaskedLM"),oVr.forEach(t),vTo=r(Pwe," (RemBERT model)"),Pwe.forEach(t),TTo=i(H),Q_=n(H,"LI",{});var Iwe=s(Q_);Ane=n(Iwe,"STRONG",{});var rVr=s(Ane);MTo=r(rVr,"roberta"),rVr.forEach(t),ETo=r(Iwe," \u2014 "),YI=n(Iwe,"A",{href:!0});var tVr=s(YI);CTo=r(tVr,"RobertaForMaskedLM"),tVr.forEach(t),wTo=r(Iwe," (RoBERTa model)"),Iwe.forEach(t),ATo=i(H),W_=n(H,"LI",{});var qwe=s(W_);yne=n(qwe,"STRONG",{});var aVr=s(yne);yTo=r(aVr,"roformer"),aVr.forEach(t),LTo=r(qwe," \u2014 "),KI=n(qwe,"A",{href:!0});var nVr=s(KI);xTo=r(nVr,"RoFormerForMaskedLM"),nVr.forEach(t),$To=r(qwe," (RoFormer model)"),qwe.forEach(t),kTo=i(H),H_=n(H,"LI",{});var Nwe=s(H_);Lne=n(Nwe,"STRONG",{});var sVr=s(Lne);STo=r(sVr,"squeezebert"),sVr.forEach(t),RTo=r(Nwe," \u2014 "),ZI=n(Nwe,"A",{href:!0});var lVr=s(ZI);BTo=r(lVr,"SqueezeBertForMaskedLM"),lVr.forEach(t),PTo=r(Nwe," (SqueezeBERT model)"),Nwe.forEach(t),ITo=i(H),U_=n(H,"LI",{});var jwe=s(U_);xne=n(jwe,"STRONG",{});var iVr=s(xne);qTo=r(iVr,"tapas"),iVr.forEach(t),NTo=r(jwe," \u2014 "),eq=n(jwe,"A",{href:!0});var dVr=s(eq);jTo=r(dVr,"TapasForMaskedLM"),dVr.forEach(t),DTo=r(jwe," (TAPAS model)"),jwe.forEach(t),GTo=i(H),J_=n(H,"LI",{});var Dwe=s(J_);$ne=n(Dwe,"STRONG",{});var cVr=s($ne);OTo=r(cVr,"wav2vec2"),cVr.forEach(t),VTo=r(Dwe," \u2014 "),kne=n(Dwe,"CODE",{});var fVr=s(kne);XTo=r(fVr,"Wav2Vec2ForMaskedLM"),fVr.forEach(t),zTo=r(Dwe," (Wav2Vec2 model)"),Dwe.forEach(t),QTo=i(H),Y_=n(H,"LI",{});var Gwe=s(Y_);Sne=n(Gwe,"STRONG",{});var mVr=s(Sne);WTo=r(mVr,"xlm"),mVr.forEach(t),HTo=r(Gwe," \u2014 "),oq=n(Gwe,"A",{href:!0});var hVr=s(oq);UTo=r(hVr,"XLMWithLMHeadModel"),hVr.forEach(t),JTo=r(Gwe," (XLM model)"),Gwe.forEach(t),YTo=i(H),K_=n(H,"LI",{});var Owe=s(K_);Rne=n(Owe,"STRONG",{});var gVr=s(Rne);KTo=r(gVr,"xlm-roberta"),gVr.forEach(t),ZTo=r(Owe," \u2014 "),rq=n(Owe,"A",{href:!0});var pVr=s(rq);eMo=r(pVr,"XLMRobertaForMaskedLM"),pVr.forEach(t),oMo=r(Owe," (XLM-RoBERTa model)"),Owe.forEach(t),rMo=i(H),Z_=n(H,"LI",{});var Vwe=s(Z_);Bne=n(Vwe,"STRONG",{});var uVr=s(Bne);tMo=r(uVr,"xlm-roberta-xl"),uVr.forEach(t),aMo=r(Vwe," \u2014 "),tq=n(Vwe,"A",{href:!0});var _Vr=s(tq);nMo=r(_Vr,"XLMRobertaXLForMaskedLM"),_Vr.forEach(t),sMo=r(Vwe," (XLM-RoBERTa-XL model)"),Vwe.forEach(t),lMo=i(H),eb=n(H,"LI",{});var Xwe=s(eb);Pne=n(Xwe,"STRONG",{});var bVr=s(Pne);iMo=r(bVr,"yoso"),bVr.forEach(t),dMo=r(Xwe," \u2014 "),aq=n(Xwe,"A",{href:!0});var FVr=s(aq);cMo=r(FVr,"YosoForMaskedLM"),FVr.forEach(t),fMo=r(Xwe," (YOSO model)"),Xwe.forEach(t),H.forEach(t),mMo=i(Kt),ob=n(Kt,"P",{});var zwe=s(ob);hMo=r(zwe,"The model is set in evaluation mode by default using "),Ine=n(zwe,"CODE",{});var vVr=s(Ine);gMo=r(vVr,"model.eval()"),vVr.forEach(t),pMo=r(zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qne=n(zwe,"CODE",{});var TVr=s(qne);uMo=r(TVr,"model.train()"),TVr.forEach(t),zwe.forEach(t),_Mo=i(Kt),T(rb.$$.fragment,Kt),Kt.forEach(t),Ls.forEach(t),U9e=i(f),bi=n(f,"H2",{class:!0});var YSe=s(bi);tb=n(YSe,"A",{id:!0,class:!0,href:!0});var MVr=s(tb);Nne=n(MVr,"SPAN",{});var EVr=s(Nne);T(F6.$$.fragment,EVr),EVr.forEach(t),MVr.forEach(t),bMo=i(YSe),jne=n(YSe,"SPAN",{});var CVr=s(jne);FMo=r(CVr,"AutoModelForSeq2SeqLM"),CVr.forEach(t),YSe.forEach(t),J9e=i(f),$o=n(f,"DIV",{class:!0});var xs=s($o);T(v6.$$.fragment,xs),vMo=i(xs),Fi=n(xs,"P",{});var oU=s(Fi);TMo=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nq=n(oU,"A",{href:!0});var wVr=s(nq);MMo=r(wVr,"from_pretrained()"),wVr.forEach(t),EMo=r(oU," class method or the "),sq=n(oU,"A",{href:!0});var AVr=s(sq);CMo=r(AVr,"from_config()"),AVr.forEach(t),wMo=r(oU,` class
method.`),oU.forEach(t),AMo=i(xs),T6=n(xs,"P",{});var KSe=s(T6);yMo=r(KSe,"This class cannot be instantiated directly using "),Dne=n(KSe,"CODE",{});var yVr=s(Dne);LMo=r(yVr,"__init__()"),yVr.forEach(t),xMo=r(KSe," (throws an error)."),KSe.forEach(t),$Mo=i(xs),rt=n(xs,"DIV",{class:!0});var Gw=s(rt);T(M6.$$.fragment,Gw),kMo=i(Gw),Gne=n(Gw,"P",{});var LVr=s(Gne);SMo=r(LVr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LVr.forEach(t),RMo=i(Gw),vi=n(Gw,"P",{});var rU=s(vi);BMo=r(rU,`Note:
Loading a model from its configuration file does `),One=n(rU,"STRONG",{});var xVr=s(One);PMo=r(xVr,"not"),xVr.forEach(t),IMo=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lq=n(rU,"A",{href:!0});var $Vr=s(lq);qMo=r($Vr,"from_pretrained()"),$Vr.forEach(t),NMo=r(rU," to load the model weights."),rU.forEach(t),jMo=i(Gw),T(ab.$$.fragment,Gw),Gw.forEach(t),DMo=i(xs),Ue=n(xs,"DIV",{class:!0});var Zt=s(Ue);T(E6.$$.fragment,Zt),GMo=i(Zt),Vne=n(Zt,"P",{});var kVr=s(Vne);OMo=r(kVr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kVr.forEach(t),VMo=i(Zt),Aa=n(Zt,"P",{});var Ow=s(Aa);XMo=r(Ow,"The model class to instantiate is selected based on the "),Xne=n(Ow,"CODE",{});var SVr=s(Xne);zMo=r(SVr,"model_type"),SVr.forEach(t),QMo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),zne=n(Ow,"CODE",{});var RVr=s(zne);WMo=r(RVr,"pretrained_model_name_or_path"),RVr.forEach(t),HMo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=n(Ow,"CODE",{});var BVr=s(Qne);UMo=r(BVr,"pretrained_model_name_or_path"),BVr.forEach(t),JMo=r(Ow,":"),Ow.forEach(t),YMo=i(Zt),pe=n(Zt,"UL",{});var _e=s(pe);nb=n(_e,"LI",{});var Qwe=s(nb);Wne=n(Qwe,"STRONG",{});var PVr=s(Wne);KMo=r(PVr,"bart"),PVr.forEach(t),ZMo=r(Qwe," \u2014 "),iq=n(Qwe,"A",{href:!0});var IVr=s(iq);e4o=r(IVr,"BartForConditionalGeneration"),IVr.forEach(t),o4o=r(Qwe," (BART model)"),Qwe.forEach(t),r4o=i(_e),sb=n(_e,"LI",{});var Wwe=s(sb);Hne=n(Wwe,"STRONG",{});var qVr=s(Hne);t4o=r(qVr,"bigbird_pegasus"),qVr.forEach(t),a4o=r(Wwe," \u2014 "),dq=n(Wwe,"A",{href:!0});var NVr=s(dq);n4o=r(NVr,"BigBirdPegasusForConditionalGeneration"),NVr.forEach(t),s4o=r(Wwe," (BigBirdPegasus model)"),Wwe.forEach(t),l4o=i(_e),lb=n(_e,"LI",{});var Hwe=s(lb);Une=n(Hwe,"STRONG",{});var jVr=s(Une);i4o=r(jVr,"blenderbot"),jVr.forEach(t),d4o=r(Hwe," \u2014 "),cq=n(Hwe,"A",{href:!0});var DVr=s(cq);c4o=r(DVr,"BlenderbotForConditionalGeneration"),DVr.forEach(t),f4o=r(Hwe," (Blenderbot model)"),Hwe.forEach(t),m4o=i(_e),ib=n(_e,"LI",{});var Uwe=s(ib);Jne=n(Uwe,"STRONG",{});var GVr=s(Jne);h4o=r(GVr,"blenderbot-small"),GVr.forEach(t),g4o=r(Uwe," \u2014 "),fq=n(Uwe,"A",{href:!0});var OVr=s(fq);p4o=r(OVr,"BlenderbotSmallForConditionalGeneration"),OVr.forEach(t),u4o=r(Uwe," (BlenderbotSmall model)"),Uwe.forEach(t),_4o=i(_e),db=n(_e,"LI",{});var Jwe=s(db);Yne=n(Jwe,"STRONG",{});var VVr=s(Yne);b4o=r(VVr,"encoder-decoder"),VVr.forEach(t),F4o=r(Jwe," \u2014 "),mq=n(Jwe,"A",{href:!0});var XVr=s(mq);v4o=r(XVr,"EncoderDecoderModel"),XVr.forEach(t),T4o=r(Jwe," (Encoder decoder model)"),Jwe.forEach(t),M4o=i(_e),cb=n(_e,"LI",{});var Ywe=s(cb);Kne=n(Ywe,"STRONG",{});var zVr=s(Kne);E4o=r(zVr,"fsmt"),zVr.forEach(t),C4o=r(Ywe," \u2014 "),hq=n(Ywe,"A",{href:!0});var QVr=s(hq);w4o=r(QVr,"FSMTForConditionalGeneration"),QVr.forEach(t),A4o=r(Ywe," (FairSeq Machine-Translation model)"),Ywe.forEach(t),y4o=i(_e),fb=n(_e,"LI",{});var Kwe=s(fb);Zne=n(Kwe,"STRONG",{});var WVr=s(Zne);L4o=r(WVr,"led"),WVr.forEach(t),x4o=r(Kwe," \u2014 "),gq=n(Kwe,"A",{href:!0});var HVr=s(gq);$4o=r(HVr,"LEDForConditionalGeneration"),HVr.forEach(t),k4o=r(Kwe," (LED model)"),Kwe.forEach(t),S4o=i(_e),mb=n(_e,"LI",{});var Zwe=s(mb);ese=n(Zwe,"STRONG",{});var UVr=s(ese);R4o=r(UVr,"m2m_100"),UVr.forEach(t),B4o=r(Zwe," \u2014 "),pq=n(Zwe,"A",{href:!0});var JVr=s(pq);P4o=r(JVr,"M2M100ForConditionalGeneration"),JVr.forEach(t),I4o=r(Zwe," (M2M100 model)"),Zwe.forEach(t),q4o=i(_e),hb=n(_e,"LI",{});var eAe=s(hb);ose=n(eAe,"STRONG",{});var YVr=s(ose);N4o=r(YVr,"marian"),YVr.forEach(t),j4o=r(eAe," \u2014 "),uq=n(eAe,"A",{href:!0});var KVr=s(uq);D4o=r(KVr,"MarianMTModel"),KVr.forEach(t),G4o=r(eAe," (Marian model)"),eAe.forEach(t),O4o=i(_e),gb=n(_e,"LI",{});var oAe=s(gb);rse=n(oAe,"STRONG",{});var ZVr=s(rse);V4o=r(ZVr,"mbart"),ZVr.forEach(t),X4o=r(oAe," \u2014 "),_q=n(oAe,"A",{href:!0});var eXr=s(_q);z4o=r(eXr,"MBartForConditionalGeneration"),eXr.forEach(t),Q4o=r(oAe," (mBART model)"),oAe.forEach(t),W4o=i(_e),pb=n(_e,"LI",{});var rAe=s(pb);tse=n(rAe,"STRONG",{});var oXr=s(tse);H4o=r(oXr,"mt5"),oXr.forEach(t),U4o=r(rAe," \u2014 "),bq=n(rAe,"A",{href:!0});var rXr=s(bq);J4o=r(rXr,"MT5ForConditionalGeneration"),rXr.forEach(t),Y4o=r(rAe," (mT5 model)"),rAe.forEach(t),K4o=i(_e),ub=n(_e,"LI",{});var tAe=s(ub);ase=n(tAe,"STRONG",{});var tXr=s(ase);Z4o=r(tXr,"pegasus"),tXr.forEach(t),eEo=r(tAe," \u2014 "),Fq=n(tAe,"A",{href:!0});var aXr=s(Fq);oEo=r(aXr,"PegasusForConditionalGeneration"),aXr.forEach(t),rEo=r(tAe," (Pegasus model)"),tAe.forEach(t),tEo=i(_e),_b=n(_e,"LI",{});var aAe=s(_b);nse=n(aAe,"STRONG",{});var nXr=s(nse);aEo=r(nXr,"plbart"),nXr.forEach(t),nEo=r(aAe," \u2014 "),sse=n(aAe,"CODE",{});var sXr=s(sse);sEo=r(sXr,"PLBartForConditionalGeneration"),sXr.forEach(t),lEo=r(aAe," (PLBart model)"),aAe.forEach(t),iEo=i(_e),bb=n(_e,"LI",{});var nAe=s(bb);lse=n(nAe,"STRONG",{});var lXr=s(lse);dEo=r(lXr,"prophetnet"),lXr.forEach(t),cEo=r(nAe," \u2014 "),vq=n(nAe,"A",{href:!0});var iXr=s(vq);fEo=r(iXr,"ProphetNetForConditionalGeneration"),iXr.forEach(t),mEo=r(nAe," (ProphetNet model)"),nAe.forEach(t),hEo=i(_e),Fb=n(_e,"LI",{});var sAe=s(Fb);ise=n(sAe,"STRONG",{});var dXr=s(ise);gEo=r(dXr,"t5"),dXr.forEach(t),pEo=r(sAe," \u2014 "),Tq=n(sAe,"A",{href:!0});var cXr=s(Tq);uEo=r(cXr,"T5ForConditionalGeneration"),cXr.forEach(t),_Eo=r(sAe," (T5 model)"),sAe.forEach(t),bEo=i(_e),vb=n(_e,"LI",{});var lAe=s(vb);dse=n(lAe,"STRONG",{});var fXr=s(dse);FEo=r(fXr,"xlm-prophetnet"),fXr.forEach(t),vEo=r(lAe," \u2014 "),Mq=n(lAe,"A",{href:!0});var mXr=s(Mq);TEo=r(mXr,"XLMProphetNetForConditionalGeneration"),mXr.forEach(t),MEo=r(lAe," (XLMProphetNet model)"),lAe.forEach(t),_e.forEach(t),EEo=i(Zt),Tb=n(Zt,"P",{});var iAe=s(Tb);CEo=r(iAe,"The model is set in evaluation mode by default using "),cse=n(iAe,"CODE",{});var hXr=s(cse);wEo=r(hXr,"model.eval()"),hXr.forEach(t),AEo=r(iAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fse=n(iAe,"CODE",{});var gXr=s(fse);yEo=r(gXr,"model.train()"),gXr.forEach(t),iAe.forEach(t),LEo=i(Zt),T(Mb.$$.fragment,Zt),Zt.forEach(t),xs.forEach(t),Y9e=i(f),Ti=n(f,"H2",{class:!0});var ZSe=s(Ti);Eb=n(ZSe,"A",{id:!0,class:!0,href:!0});var pXr=s(Eb);mse=n(pXr,"SPAN",{});var uXr=s(mse);T(C6.$$.fragment,uXr),uXr.forEach(t),pXr.forEach(t),xEo=i(ZSe),hse=n(ZSe,"SPAN",{});var _Xr=s(hse);$Eo=r(_Xr,"AutoModelForSequenceClassification"),_Xr.forEach(t),ZSe.forEach(t),K9e=i(f),ko=n(f,"DIV",{class:!0});var $s=s(ko);T(w6.$$.fragment,$s),kEo=i($s),Mi=n($s,"P",{});var tU=s(Mi);SEo=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eq=n(tU,"A",{href:!0});var bXr=s(Eq);REo=r(bXr,"from_pretrained()"),bXr.forEach(t),BEo=r(tU," class method or the "),Cq=n(tU,"A",{href:!0});var FXr=s(Cq);PEo=r(FXr,"from_config()"),FXr.forEach(t),IEo=r(tU,` class
method.`),tU.forEach(t),qEo=i($s),A6=n($s,"P",{});var eRe=s(A6);NEo=r(eRe,"This class cannot be instantiated directly using "),gse=n(eRe,"CODE",{});var vXr=s(gse);jEo=r(vXr,"__init__()"),vXr.forEach(t),DEo=r(eRe," (throws an error)."),eRe.forEach(t),GEo=i($s),tt=n($s,"DIV",{class:!0});var Vw=s(tt);T(y6.$$.fragment,Vw),OEo=i(Vw),pse=n(Vw,"P",{});var TXr=s(pse);VEo=r(TXr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TXr.forEach(t),XEo=i(Vw),Ei=n(Vw,"P",{});var aU=s(Ei);zEo=r(aU,`Note:
Loading a model from its configuration file does `),use=n(aU,"STRONG",{});var MXr=s(use);QEo=r(MXr,"not"),MXr.forEach(t),WEo=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wq=n(aU,"A",{href:!0});var EXr=s(wq);HEo=r(EXr,"from_pretrained()"),EXr.forEach(t),UEo=r(aU," to load the model weights."),aU.forEach(t),JEo=i(Vw),T(Cb.$$.fragment,Vw),Vw.forEach(t),YEo=i($s),Je=n($s,"DIV",{class:!0});var ea=s(Je);T(L6.$$.fragment,ea),KEo=i(ea),_se=n(ea,"P",{});var CXr=s(_se);ZEo=r(CXr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CXr.forEach(t),e5o=i(ea),ya=n(ea,"P",{});var Xw=s(ya);o5o=r(Xw,"The model class to instantiate is selected based on the "),bse=n(Xw,"CODE",{});var wXr=s(bse);r5o=r(wXr,"model_type"),wXr.forEach(t),t5o=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Fse=n(Xw,"CODE",{});var AXr=s(Fse);a5o=r(AXr,"pretrained_model_name_or_path"),AXr.forEach(t),n5o=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=n(Xw,"CODE",{});var yXr=s(vse);s5o=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),l5o=r(Xw,":"),Xw.forEach(t),i5o=i(ea),q=n(ea,"UL",{});var N=s(q);wb=n(N,"LI",{});var dAe=s(wb);Tse=n(dAe,"STRONG",{});var LXr=s(Tse);d5o=r(LXr,"albert"),LXr.forEach(t),c5o=r(dAe," \u2014 "),Aq=n(dAe,"A",{href:!0});var xXr=s(Aq);f5o=r(xXr,"AlbertForSequenceClassification"),xXr.forEach(t),m5o=r(dAe," (ALBERT model)"),dAe.forEach(t),h5o=i(N),Ab=n(N,"LI",{});var cAe=s(Ab);Mse=n(cAe,"STRONG",{});var $Xr=s(Mse);g5o=r($Xr,"bart"),$Xr.forEach(t),p5o=r(cAe," \u2014 "),yq=n(cAe,"A",{href:!0});var kXr=s(yq);u5o=r(kXr,"BartForSequenceClassification"),kXr.forEach(t),_5o=r(cAe," (BART model)"),cAe.forEach(t),b5o=i(N),yb=n(N,"LI",{});var fAe=s(yb);Ese=n(fAe,"STRONG",{});var SXr=s(Ese);F5o=r(SXr,"bert"),SXr.forEach(t),v5o=r(fAe," \u2014 "),Lq=n(fAe,"A",{href:!0});var RXr=s(Lq);T5o=r(RXr,"BertForSequenceClassification"),RXr.forEach(t),M5o=r(fAe," (BERT model)"),fAe.forEach(t),E5o=i(N),Lb=n(N,"LI",{});var mAe=s(Lb);Cse=n(mAe,"STRONG",{});var BXr=s(Cse);C5o=r(BXr,"big_bird"),BXr.forEach(t),w5o=r(mAe," \u2014 "),xq=n(mAe,"A",{href:!0});var PXr=s(xq);A5o=r(PXr,"BigBirdForSequenceClassification"),PXr.forEach(t),y5o=r(mAe," (BigBird model)"),mAe.forEach(t),L5o=i(N),xb=n(N,"LI",{});var hAe=s(xb);wse=n(hAe,"STRONG",{});var IXr=s(wse);x5o=r(IXr,"bigbird_pegasus"),IXr.forEach(t),$5o=r(hAe," \u2014 "),$q=n(hAe,"A",{href:!0});var qXr=s($q);k5o=r(qXr,"BigBirdPegasusForSequenceClassification"),qXr.forEach(t),S5o=r(hAe," (BigBirdPegasus model)"),hAe.forEach(t),R5o=i(N),$b=n(N,"LI",{});var gAe=s($b);Ase=n(gAe,"STRONG",{});var NXr=s(Ase);B5o=r(NXr,"camembert"),NXr.forEach(t),P5o=r(gAe," \u2014 "),kq=n(gAe,"A",{href:!0});var jXr=s(kq);I5o=r(jXr,"CamembertForSequenceClassification"),jXr.forEach(t),q5o=r(gAe," (CamemBERT model)"),gAe.forEach(t),N5o=i(N),kb=n(N,"LI",{});var pAe=s(kb);yse=n(pAe,"STRONG",{});var DXr=s(yse);j5o=r(DXr,"canine"),DXr.forEach(t),D5o=r(pAe," \u2014 "),Sq=n(pAe,"A",{href:!0});var GXr=s(Sq);G5o=r(GXr,"CanineForSequenceClassification"),GXr.forEach(t),O5o=r(pAe," (Canine model)"),pAe.forEach(t),V5o=i(N),Sb=n(N,"LI",{});var uAe=s(Sb);Lse=n(uAe,"STRONG",{});var OXr=s(Lse);X5o=r(OXr,"convbert"),OXr.forEach(t),z5o=r(uAe," \u2014 "),Rq=n(uAe,"A",{href:!0});var VXr=s(Rq);Q5o=r(VXr,"ConvBertForSequenceClassification"),VXr.forEach(t),W5o=r(uAe," (ConvBERT model)"),uAe.forEach(t),H5o=i(N),Rb=n(N,"LI",{});var _Ae=s(Rb);xse=n(_Ae,"STRONG",{});var XXr=s(xse);U5o=r(XXr,"ctrl"),XXr.forEach(t),J5o=r(_Ae," \u2014 "),Bq=n(_Ae,"A",{href:!0});var zXr=s(Bq);Y5o=r(zXr,"CTRLForSequenceClassification"),zXr.forEach(t),K5o=r(_Ae," (CTRL model)"),_Ae.forEach(t),Z5o=i(N),Bb=n(N,"LI",{});var bAe=s(Bb);$se=n(bAe,"STRONG",{});var QXr=s($se);eCo=r(QXr,"data2vec-text"),QXr.forEach(t),oCo=r(bAe," \u2014 "),Pq=n(bAe,"A",{href:!0});var WXr=s(Pq);rCo=r(WXr,"Data2VecTextForSequenceClassification"),WXr.forEach(t),tCo=r(bAe," (Data2VecText model)"),bAe.forEach(t),aCo=i(N),Pb=n(N,"LI",{});var FAe=s(Pb);kse=n(FAe,"STRONG",{});var HXr=s(kse);nCo=r(HXr,"deberta"),HXr.forEach(t),sCo=r(FAe," \u2014 "),Iq=n(FAe,"A",{href:!0});var UXr=s(Iq);lCo=r(UXr,"DebertaForSequenceClassification"),UXr.forEach(t),iCo=r(FAe," (DeBERTa model)"),FAe.forEach(t),dCo=i(N),Ib=n(N,"LI",{});var vAe=s(Ib);Sse=n(vAe,"STRONG",{});var JXr=s(Sse);cCo=r(JXr,"deberta-v2"),JXr.forEach(t),fCo=r(vAe," \u2014 "),qq=n(vAe,"A",{href:!0});var YXr=s(qq);mCo=r(YXr,"DebertaV2ForSequenceClassification"),YXr.forEach(t),hCo=r(vAe," (DeBERTa-v2 model)"),vAe.forEach(t),gCo=i(N),qb=n(N,"LI",{});var TAe=s(qb);Rse=n(TAe,"STRONG",{});var KXr=s(Rse);pCo=r(KXr,"distilbert"),KXr.forEach(t),uCo=r(TAe," \u2014 "),Nq=n(TAe,"A",{href:!0});var ZXr=s(Nq);_Co=r(ZXr,"DistilBertForSequenceClassification"),ZXr.forEach(t),bCo=r(TAe," (DistilBERT model)"),TAe.forEach(t),FCo=i(N),Nb=n(N,"LI",{});var MAe=s(Nb);Bse=n(MAe,"STRONG",{});var ezr=s(Bse);vCo=r(ezr,"electra"),ezr.forEach(t),TCo=r(MAe," \u2014 "),jq=n(MAe,"A",{href:!0});var ozr=s(jq);MCo=r(ozr,"ElectraForSequenceClassification"),ozr.forEach(t),ECo=r(MAe," (ELECTRA model)"),MAe.forEach(t),CCo=i(N),jb=n(N,"LI",{});var EAe=s(jb);Pse=n(EAe,"STRONG",{});var rzr=s(Pse);wCo=r(rzr,"flaubert"),rzr.forEach(t),ACo=r(EAe," \u2014 "),Dq=n(EAe,"A",{href:!0});var tzr=s(Dq);yCo=r(tzr,"FlaubertForSequenceClassification"),tzr.forEach(t),LCo=r(EAe," (FlauBERT model)"),EAe.forEach(t),xCo=i(N),Db=n(N,"LI",{});var CAe=s(Db);Ise=n(CAe,"STRONG",{});var azr=s(Ise);$Co=r(azr,"fnet"),azr.forEach(t),kCo=r(CAe," \u2014 "),Gq=n(CAe,"A",{href:!0});var nzr=s(Gq);SCo=r(nzr,"FNetForSequenceClassification"),nzr.forEach(t),RCo=r(CAe," (FNet model)"),CAe.forEach(t),BCo=i(N),Gb=n(N,"LI",{});var wAe=s(Gb);qse=n(wAe,"STRONG",{});var szr=s(qse);PCo=r(szr,"funnel"),szr.forEach(t),ICo=r(wAe," \u2014 "),Oq=n(wAe,"A",{href:!0});var lzr=s(Oq);qCo=r(lzr,"FunnelForSequenceClassification"),lzr.forEach(t),NCo=r(wAe," (Funnel Transformer model)"),wAe.forEach(t),jCo=i(N),Ob=n(N,"LI",{});var AAe=s(Ob);Nse=n(AAe,"STRONG",{});var izr=s(Nse);DCo=r(izr,"gpt2"),izr.forEach(t),GCo=r(AAe," \u2014 "),Vq=n(AAe,"A",{href:!0});var dzr=s(Vq);OCo=r(dzr,"GPT2ForSequenceClassification"),dzr.forEach(t),VCo=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),XCo=i(N),Vb=n(N,"LI",{});var yAe=s(Vb);jse=n(yAe,"STRONG",{});var czr=s(jse);zCo=r(czr,"gpt_neo"),czr.forEach(t),QCo=r(yAe," \u2014 "),Xq=n(yAe,"A",{href:!0});var fzr=s(Xq);WCo=r(fzr,"GPTNeoForSequenceClassification"),fzr.forEach(t),HCo=r(yAe," (GPT Neo model)"),yAe.forEach(t),UCo=i(N),Xb=n(N,"LI",{});var LAe=s(Xb);Dse=n(LAe,"STRONG",{});var mzr=s(Dse);JCo=r(mzr,"gptj"),mzr.forEach(t),YCo=r(LAe," \u2014 "),zq=n(LAe,"A",{href:!0});var hzr=s(zq);KCo=r(hzr,"GPTJForSequenceClassification"),hzr.forEach(t),ZCo=r(LAe," (GPT-J model)"),LAe.forEach(t),e3o=i(N),zb=n(N,"LI",{});var xAe=s(zb);Gse=n(xAe,"STRONG",{});var gzr=s(Gse);o3o=r(gzr,"ibert"),gzr.forEach(t),r3o=r(xAe," \u2014 "),Qq=n(xAe,"A",{href:!0});var pzr=s(Qq);t3o=r(pzr,"IBertForSequenceClassification"),pzr.forEach(t),a3o=r(xAe," (I-BERT model)"),xAe.forEach(t),n3o=i(N),Qb=n(N,"LI",{});var $Ae=s(Qb);Ose=n($Ae,"STRONG",{});var uzr=s(Ose);s3o=r(uzr,"layoutlm"),uzr.forEach(t),l3o=r($Ae," \u2014 "),Wq=n($Ae,"A",{href:!0});var _zr=s(Wq);i3o=r(_zr,"LayoutLMForSequenceClassification"),_zr.forEach(t),d3o=r($Ae," (LayoutLM model)"),$Ae.forEach(t),c3o=i(N),Wb=n(N,"LI",{});var kAe=s(Wb);Vse=n(kAe,"STRONG",{});var bzr=s(Vse);f3o=r(bzr,"layoutlmv2"),bzr.forEach(t),m3o=r(kAe," \u2014 "),Hq=n(kAe,"A",{href:!0});var Fzr=s(Hq);h3o=r(Fzr,"LayoutLMv2ForSequenceClassification"),Fzr.forEach(t),g3o=r(kAe," (LayoutLMv2 model)"),kAe.forEach(t),p3o=i(N),Hb=n(N,"LI",{});var SAe=s(Hb);Xse=n(SAe,"STRONG",{});var vzr=s(Xse);u3o=r(vzr,"led"),vzr.forEach(t),_3o=r(SAe," \u2014 "),Uq=n(SAe,"A",{href:!0});var Tzr=s(Uq);b3o=r(Tzr,"LEDForSequenceClassification"),Tzr.forEach(t),F3o=r(SAe," (LED model)"),SAe.forEach(t),v3o=i(N),Ub=n(N,"LI",{});var RAe=s(Ub);zse=n(RAe,"STRONG",{});var Mzr=s(zse);T3o=r(Mzr,"longformer"),Mzr.forEach(t),M3o=r(RAe," \u2014 "),Jq=n(RAe,"A",{href:!0});var Ezr=s(Jq);E3o=r(Ezr,"LongformerForSequenceClassification"),Ezr.forEach(t),C3o=r(RAe," (Longformer model)"),RAe.forEach(t),w3o=i(N),Jb=n(N,"LI",{});var BAe=s(Jb);Qse=n(BAe,"STRONG",{});var Czr=s(Qse);A3o=r(Czr,"mbart"),Czr.forEach(t),y3o=r(BAe," \u2014 "),Yq=n(BAe,"A",{href:!0});var wzr=s(Yq);L3o=r(wzr,"MBartForSequenceClassification"),wzr.forEach(t),x3o=r(BAe," (mBART model)"),BAe.forEach(t),$3o=i(N),Yb=n(N,"LI",{});var PAe=s(Yb);Wse=n(PAe,"STRONG",{});var Azr=s(Wse);k3o=r(Azr,"megatron-bert"),Azr.forEach(t),S3o=r(PAe," \u2014 "),Kq=n(PAe,"A",{href:!0});var yzr=s(Kq);R3o=r(yzr,"MegatronBertForSequenceClassification"),yzr.forEach(t),B3o=r(PAe," (MegatronBert model)"),PAe.forEach(t),P3o=i(N),Kb=n(N,"LI",{});var IAe=s(Kb);Hse=n(IAe,"STRONG",{});var Lzr=s(Hse);I3o=r(Lzr,"mobilebert"),Lzr.forEach(t),q3o=r(IAe," \u2014 "),Zq=n(IAe,"A",{href:!0});var xzr=s(Zq);N3o=r(xzr,"MobileBertForSequenceClassification"),xzr.forEach(t),j3o=r(IAe," (MobileBERT model)"),IAe.forEach(t),D3o=i(N),Zb=n(N,"LI",{});var qAe=s(Zb);Use=n(qAe,"STRONG",{});var $zr=s(Use);G3o=r($zr,"mpnet"),$zr.forEach(t),O3o=r(qAe," \u2014 "),eN=n(qAe,"A",{href:!0});var kzr=s(eN);V3o=r(kzr,"MPNetForSequenceClassification"),kzr.forEach(t),X3o=r(qAe," (MPNet model)"),qAe.forEach(t),z3o=i(N),e2=n(N,"LI",{});var NAe=s(e2);Jse=n(NAe,"STRONG",{});var Szr=s(Jse);Q3o=r(Szr,"nystromformer"),Szr.forEach(t),W3o=r(NAe," \u2014 "),oN=n(NAe,"A",{href:!0});var Rzr=s(oN);H3o=r(Rzr,"NystromformerForSequenceClassification"),Rzr.forEach(t),U3o=r(NAe," (Nystromformer model)"),NAe.forEach(t),J3o=i(N),o2=n(N,"LI",{});var jAe=s(o2);Yse=n(jAe,"STRONG",{});var Bzr=s(Yse);Y3o=r(Bzr,"openai-gpt"),Bzr.forEach(t),K3o=r(jAe," \u2014 "),rN=n(jAe,"A",{href:!0});var Pzr=s(rN);Z3o=r(Pzr,"OpenAIGPTForSequenceClassification"),Pzr.forEach(t),ewo=r(jAe," (OpenAI GPT model)"),jAe.forEach(t),owo=i(N),r2=n(N,"LI",{});var DAe=s(r2);Kse=n(DAe,"STRONG",{});var Izr=s(Kse);rwo=r(Izr,"perceiver"),Izr.forEach(t),two=r(DAe," \u2014 "),tN=n(DAe,"A",{href:!0});var qzr=s(tN);awo=r(qzr,"PerceiverForSequenceClassification"),qzr.forEach(t),nwo=r(DAe," (Perceiver model)"),DAe.forEach(t),swo=i(N),t2=n(N,"LI",{});var GAe=s(t2);Zse=n(GAe,"STRONG",{});var Nzr=s(Zse);lwo=r(Nzr,"plbart"),Nzr.forEach(t),iwo=r(GAe," \u2014 "),ele=n(GAe,"CODE",{});var jzr=s(ele);dwo=r(jzr,"PLBartForSequenceClassification"),jzr.forEach(t),cwo=r(GAe," (PLBart model)"),GAe.forEach(t),fwo=i(N),a2=n(N,"LI",{});var OAe=s(a2);ole=n(OAe,"STRONG",{});var Dzr=s(ole);mwo=r(Dzr,"qdqbert"),Dzr.forEach(t),hwo=r(OAe," \u2014 "),rle=n(OAe,"CODE",{});var Gzr=s(rle);gwo=r(Gzr,"QDQBertForSequenceClassification"),Gzr.forEach(t),pwo=r(OAe," (QDQBert model)"),OAe.forEach(t),uwo=i(N),n2=n(N,"LI",{});var VAe=s(n2);tle=n(VAe,"STRONG",{});var Ozr=s(tle);_wo=r(Ozr,"reformer"),Ozr.forEach(t),bwo=r(VAe," \u2014 "),aN=n(VAe,"A",{href:!0});var Vzr=s(aN);Fwo=r(Vzr,"ReformerForSequenceClassification"),Vzr.forEach(t),vwo=r(VAe," (Reformer model)"),VAe.forEach(t),Two=i(N),s2=n(N,"LI",{});var XAe=s(s2);ale=n(XAe,"STRONG",{});var Xzr=s(ale);Mwo=r(Xzr,"rembert"),Xzr.forEach(t),Ewo=r(XAe," \u2014 "),nN=n(XAe,"A",{href:!0});var zzr=s(nN);Cwo=r(zzr,"RemBertForSequenceClassification"),zzr.forEach(t),wwo=r(XAe," (RemBERT model)"),XAe.forEach(t),Awo=i(N),l2=n(N,"LI",{});var zAe=s(l2);nle=n(zAe,"STRONG",{});var Qzr=s(nle);ywo=r(Qzr,"roberta"),Qzr.forEach(t),Lwo=r(zAe," \u2014 "),sN=n(zAe,"A",{href:!0});var Wzr=s(sN);xwo=r(Wzr,"RobertaForSequenceClassification"),Wzr.forEach(t),$wo=r(zAe," (RoBERTa model)"),zAe.forEach(t),kwo=i(N),i2=n(N,"LI",{});var QAe=s(i2);sle=n(QAe,"STRONG",{});var Hzr=s(sle);Swo=r(Hzr,"roformer"),Hzr.forEach(t),Rwo=r(QAe," \u2014 "),lN=n(QAe,"A",{href:!0});var Uzr=s(lN);Bwo=r(Uzr,"RoFormerForSequenceClassification"),Uzr.forEach(t),Pwo=r(QAe," (RoFormer model)"),QAe.forEach(t),Iwo=i(N),d2=n(N,"LI",{});var WAe=s(d2);lle=n(WAe,"STRONG",{});var Jzr=s(lle);qwo=r(Jzr,"squeezebert"),Jzr.forEach(t),Nwo=r(WAe," \u2014 "),iN=n(WAe,"A",{href:!0});var Yzr=s(iN);jwo=r(Yzr,"SqueezeBertForSequenceClassification"),Yzr.forEach(t),Dwo=r(WAe," (SqueezeBERT model)"),WAe.forEach(t),Gwo=i(N),c2=n(N,"LI",{});var HAe=s(c2);ile=n(HAe,"STRONG",{});var Kzr=s(ile);Owo=r(Kzr,"tapas"),Kzr.forEach(t),Vwo=r(HAe," \u2014 "),dN=n(HAe,"A",{href:!0});var Zzr=s(dN);Xwo=r(Zzr,"TapasForSequenceClassification"),Zzr.forEach(t),zwo=r(HAe," (TAPAS model)"),HAe.forEach(t),Qwo=i(N),f2=n(N,"LI",{});var UAe=s(f2);dle=n(UAe,"STRONG",{});var eQr=s(dle);Wwo=r(eQr,"transfo-xl"),eQr.forEach(t),Hwo=r(UAe," \u2014 "),cN=n(UAe,"A",{href:!0});var oQr=s(cN);Uwo=r(oQr,"TransfoXLForSequenceClassification"),oQr.forEach(t),Jwo=r(UAe," (Transformer-XL model)"),UAe.forEach(t),Ywo=i(N),m2=n(N,"LI",{});var JAe=s(m2);cle=n(JAe,"STRONG",{});var rQr=s(cle);Kwo=r(rQr,"xlm"),rQr.forEach(t),Zwo=r(JAe," \u2014 "),fN=n(JAe,"A",{href:!0});var tQr=s(fN);eAo=r(tQr,"XLMForSequenceClassification"),tQr.forEach(t),oAo=r(JAe," (XLM model)"),JAe.forEach(t),rAo=i(N),h2=n(N,"LI",{});var YAe=s(h2);fle=n(YAe,"STRONG",{});var aQr=s(fle);tAo=r(aQr,"xlm-roberta"),aQr.forEach(t),aAo=r(YAe," \u2014 "),mN=n(YAe,"A",{href:!0});var nQr=s(mN);nAo=r(nQr,"XLMRobertaForSequenceClassification"),nQr.forEach(t),sAo=r(YAe," (XLM-RoBERTa model)"),YAe.forEach(t),lAo=i(N),g2=n(N,"LI",{});var KAe=s(g2);mle=n(KAe,"STRONG",{});var sQr=s(mle);iAo=r(sQr,"xlm-roberta-xl"),sQr.forEach(t),dAo=r(KAe," \u2014 "),hN=n(KAe,"A",{href:!0});var lQr=s(hN);cAo=r(lQr,"XLMRobertaXLForSequenceClassification"),lQr.forEach(t),fAo=r(KAe," (XLM-RoBERTa-XL model)"),KAe.forEach(t),mAo=i(N),p2=n(N,"LI",{});var ZAe=s(p2);hle=n(ZAe,"STRONG",{});var iQr=s(hle);hAo=r(iQr,"xlnet"),iQr.forEach(t),gAo=r(ZAe," \u2014 "),gN=n(ZAe,"A",{href:!0});var dQr=s(gN);pAo=r(dQr,"XLNetForSequenceClassification"),dQr.forEach(t),uAo=r(ZAe," (XLNet model)"),ZAe.forEach(t),_Ao=i(N),u2=n(N,"LI",{});var e0e=s(u2);gle=n(e0e,"STRONG",{});var cQr=s(gle);bAo=r(cQr,"yoso"),cQr.forEach(t),FAo=r(e0e," \u2014 "),pN=n(e0e,"A",{href:!0});var fQr=s(pN);vAo=r(fQr,"YosoForSequenceClassification"),fQr.forEach(t),TAo=r(e0e," (YOSO model)"),e0e.forEach(t),N.forEach(t),MAo=i(ea),_2=n(ea,"P",{});var o0e=s(_2);EAo=r(o0e,"The model is set in evaluation mode by default using "),ple=n(o0e,"CODE",{});var mQr=s(ple);CAo=r(mQr,"model.eval()"),mQr.forEach(t),wAo=r(o0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=n(o0e,"CODE",{});var hQr=s(ule);AAo=r(hQr,"model.train()"),hQr.forEach(t),o0e.forEach(t),yAo=i(ea),T(b2.$$.fragment,ea),ea.forEach(t),$s.forEach(t),Z9e=i(f),Ci=n(f,"H2",{class:!0});var oRe=s(Ci);F2=n(oRe,"A",{id:!0,class:!0,href:!0});var gQr=s(F2);_le=n(gQr,"SPAN",{});var pQr=s(_le);T(x6.$$.fragment,pQr),pQr.forEach(t),gQr.forEach(t),LAo=i(oRe),ble=n(oRe,"SPAN",{});var uQr=s(ble);xAo=r(uQr,"AutoModelForMultipleChoice"),uQr.forEach(t),oRe.forEach(t),eke=i(f),So=n(f,"DIV",{class:!0});var ks=s(So);T($6.$$.fragment,ks),$Ao=i(ks),wi=n(ks,"P",{});var nU=s(wi);kAo=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uN=n(nU,"A",{href:!0});var _Qr=s(uN);SAo=r(_Qr,"from_pretrained()"),_Qr.forEach(t),RAo=r(nU," class method or the "),_N=n(nU,"A",{href:!0});var bQr=s(_N);BAo=r(bQr,"from_config()"),bQr.forEach(t),PAo=r(nU,` class
method.`),nU.forEach(t),IAo=i(ks),k6=n(ks,"P",{});var rRe=s(k6);qAo=r(rRe,"This class cannot be instantiated directly using "),Fle=n(rRe,"CODE",{});var FQr=s(Fle);NAo=r(FQr,"__init__()"),FQr.forEach(t),jAo=r(rRe," (throws an error)."),rRe.forEach(t),DAo=i(ks),at=n(ks,"DIV",{class:!0});var zw=s(at);T(S6.$$.fragment,zw),GAo=i(zw),vle=n(zw,"P",{});var vQr=s(vle);OAo=r(vQr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vQr.forEach(t),VAo=i(zw),Ai=n(zw,"P",{});var sU=s(Ai);XAo=r(sU,`Note:
Loading a model from its configuration file does `),Tle=n(sU,"STRONG",{});var TQr=s(Tle);zAo=r(TQr,"not"),TQr.forEach(t),QAo=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=n(sU,"A",{href:!0});var MQr=s(bN);WAo=r(MQr,"from_pretrained()"),MQr.forEach(t),HAo=r(sU," to load the model weights."),sU.forEach(t),UAo=i(zw),T(v2.$$.fragment,zw),zw.forEach(t),JAo=i(ks),Ye=n(ks,"DIV",{class:!0});var oa=s(Ye);T(R6.$$.fragment,oa),YAo=i(oa),Mle=n(oa,"P",{});var EQr=s(Mle);KAo=r(EQr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),EQr.forEach(t),ZAo=i(oa),La=n(oa,"P",{});var Qw=s(La);e0o=r(Qw,"The model class to instantiate is selected based on the "),Ele=n(Qw,"CODE",{});var CQr=s(Ele);o0o=r(CQr,"model_type"),CQr.forEach(t),r0o=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Cle=n(Qw,"CODE",{});var wQr=s(Cle);t0o=r(wQr,"pretrained_model_name_or_path"),wQr.forEach(t),a0o=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(Qw,"CODE",{});var AQr=s(wle);n0o=r(AQr,"pretrained_model_name_or_path"),AQr.forEach(t),s0o=r(Qw,":"),Qw.forEach(t),l0o=i(oa),Y=n(oa,"UL",{});var K=s(Y);T2=n(K,"LI",{});var r0e=s(T2);Ale=n(r0e,"STRONG",{});var yQr=s(Ale);i0o=r(yQr,"albert"),yQr.forEach(t),d0o=r(r0e," \u2014 "),FN=n(r0e,"A",{href:!0});var LQr=s(FN);c0o=r(LQr,"AlbertForMultipleChoice"),LQr.forEach(t),f0o=r(r0e," (ALBERT model)"),r0e.forEach(t),m0o=i(K),M2=n(K,"LI",{});var t0e=s(M2);yle=n(t0e,"STRONG",{});var xQr=s(yle);h0o=r(xQr,"bert"),xQr.forEach(t),g0o=r(t0e," \u2014 "),vN=n(t0e,"A",{href:!0});var $Qr=s(vN);p0o=r($Qr,"BertForMultipleChoice"),$Qr.forEach(t),u0o=r(t0e," (BERT model)"),t0e.forEach(t),_0o=i(K),E2=n(K,"LI",{});var a0e=s(E2);Lle=n(a0e,"STRONG",{});var kQr=s(Lle);b0o=r(kQr,"big_bird"),kQr.forEach(t),F0o=r(a0e," \u2014 "),TN=n(a0e,"A",{href:!0});var SQr=s(TN);v0o=r(SQr,"BigBirdForMultipleChoice"),SQr.forEach(t),T0o=r(a0e," (BigBird model)"),a0e.forEach(t),M0o=i(K),C2=n(K,"LI",{});var n0e=s(C2);xle=n(n0e,"STRONG",{});var RQr=s(xle);E0o=r(RQr,"camembert"),RQr.forEach(t),C0o=r(n0e," \u2014 "),MN=n(n0e,"A",{href:!0});var BQr=s(MN);w0o=r(BQr,"CamembertForMultipleChoice"),BQr.forEach(t),A0o=r(n0e," (CamemBERT model)"),n0e.forEach(t),y0o=i(K),w2=n(K,"LI",{});var s0e=s(w2);$le=n(s0e,"STRONG",{});var PQr=s($le);L0o=r(PQr,"canine"),PQr.forEach(t),x0o=r(s0e," \u2014 "),EN=n(s0e,"A",{href:!0});var IQr=s(EN);$0o=r(IQr,"CanineForMultipleChoice"),IQr.forEach(t),k0o=r(s0e," (Canine model)"),s0e.forEach(t),S0o=i(K),A2=n(K,"LI",{});var l0e=s(A2);kle=n(l0e,"STRONG",{});var qQr=s(kle);R0o=r(qQr,"convbert"),qQr.forEach(t),B0o=r(l0e," \u2014 "),CN=n(l0e,"A",{href:!0});var NQr=s(CN);P0o=r(NQr,"ConvBertForMultipleChoice"),NQr.forEach(t),I0o=r(l0e," (ConvBERT model)"),l0e.forEach(t),q0o=i(K),y2=n(K,"LI",{});var i0e=s(y2);Sle=n(i0e,"STRONG",{});var jQr=s(Sle);N0o=r(jQr,"data2vec-text"),jQr.forEach(t),j0o=r(i0e," \u2014 "),wN=n(i0e,"A",{href:!0});var DQr=s(wN);D0o=r(DQr,"Data2VecTextForMultipleChoice"),DQr.forEach(t),G0o=r(i0e," (Data2VecText model)"),i0e.forEach(t),O0o=i(K),L2=n(K,"LI",{});var d0e=s(L2);Rle=n(d0e,"STRONG",{});var GQr=s(Rle);V0o=r(GQr,"distilbert"),GQr.forEach(t),X0o=r(d0e," \u2014 "),AN=n(d0e,"A",{href:!0});var OQr=s(AN);z0o=r(OQr,"DistilBertForMultipleChoice"),OQr.forEach(t),Q0o=r(d0e," (DistilBERT model)"),d0e.forEach(t),W0o=i(K),x2=n(K,"LI",{});var c0e=s(x2);Ble=n(c0e,"STRONG",{});var VQr=s(Ble);H0o=r(VQr,"electra"),VQr.forEach(t),U0o=r(c0e," \u2014 "),yN=n(c0e,"A",{href:!0});var XQr=s(yN);J0o=r(XQr,"ElectraForMultipleChoice"),XQr.forEach(t),Y0o=r(c0e," (ELECTRA model)"),c0e.forEach(t),K0o=i(K),$2=n(K,"LI",{});var f0e=s($2);Ple=n(f0e,"STRONG",{});var zQr=s(Ple);Z0o=r(zQr,"flaubert"),zQr.forEach(t),e6o=r(f0e," \u2014 "),LN=n(f0e,"A",{href:!0});var QQr=s(LN);o6o=r(QQr,"FlaubertForMultipleChoice"),QQr.forEach(t),r6o=r(f0e," (FlauBERT model)"),f0e.forEach(t),t6o=i(K),k2=n(K,"LI",{});var m0e=s(k2);Ile=n(m0e,"STRONG",{});var WQr=s(Ile);a6o=r(WQr,"fnet"),WQr.forEach(t),n6o=r(m0e," \u2014 "),xN=n(m0e,"A",{href:!0});var HQr=s(xN);s6o=r(HQr,"FNetForMultipleChoice"),HQr.forEach(t),l6o=r(m0e," (FNet model)"),m0e.forEach(t),i6o=i(K),S2=n(K,"LI",{});var h0e=s(S2);qle=n(h0e,"STRONG",{});var UQr=s(qle);d6o=r(UQr,"funnel"),UQr.forEach(t),c6o=r(h0e," \u2014 "),$N=n(h0e,"A",{href:!0});var JQr=s($N);f6o=r(JQr,"FunnelForMultipleChoice"),JQr.forEach(t),m6o=r(h0e," (Funnel Transformer model)"),h0e.forEach(t),h6o=i(K),R2=n(K,"LI",{});var g0e=s(R2);Nle=n(g0e,"STRONG",{});var YQr=s(Nle);g6o=r(YQr,"ibert"),YQr.forEach(t),p6o=r(g0e," \u2014 "),kN=n(g0e,"A",{href:!0});var KQr=s(kN);u6o=r(KQr,"IBertForMultipleChoice"),KQr.forEach(t),_6o=r(g0e," (I-BERT model)"),g0e.forEach(t),b6o=i(K),B2=n(K,"LI",{});var p0e=s(B2);jle=n(p0e,"STRONG",{});var ZQr=s(jle);F6o=r(ZQr,"longformer"),ZQr.forEach(t),v6o=r(p0e," \u2014 "),SN=n(p0e,"A",{href:!0});var eWr=s(SN);T6o=r(eWr,"LongformerForMultipleChoice"),eWr.forEach(t),M6o=r(p0e," (Longformer model)"),p0e.forEach(t),E6o=i(K),P2=n(K,"LI",{});var u0e=s(P2);Dle=n(u0e,"STRONG",{});var oWr=s(Dle);C6o=r(oWr,"megatron-bert"),oWr.forEach(t),w6o=r(u0e," \u2014 "),RN=n(u0e,"A",{href:!0});var rWr=s(RN);A6o=r(rWr,"MegatronBertForMultipleChoice"),rWr.forEach(t),y6o=r(u0e," (MegatronBert model)"),u0e.forEach(t),L6o=i(K),I2=n(K,"LI",{});var _0e=s(I2);Gle=n(_0e,"STRONG",{});var tWr=s(Gle);x6o=r(tWr,"mobilebert"),tWr.forEach(t),$6o=r(_0e," \u2014 "),BN=n(_0e,"A",{href:!0});var aWr=s(BN);k6o=r(aWr,"MobileBertForMultipleChoice"),aWr.forEach(t),S6o=r(_0e," (MobileBERT model)"),_0e.forEach(t),R6o=i(K),q2=n(K,"LI",{});var b0e=s(q2);Ole=n(b0e,"STRONG",{});var nWr=s(Ole);B6o=r(nWr,"mpnet"),nWr.forEach(t),P6o=r(b0e," \u2014 "),PN=n(b0e,"A",{href:!0});var sWr=s(PN);I6o=r(sWr,"MPNetForMultipleChoice"),sWr.forEach(t),q6o=r(b0e," (MPNet model)"),b0e.forEach(t),N6o=i(K),N2=n(K,"LI",{});var F0e=s(N2);Vle=n(F0e,"STRONG",{});var lWr=s(Vle);j6o=r(lWr,"nystromformer"),lWr.forEach(t),D6o=r(F0e," \u2014 "),IN=n(F0e,"A",{href:!0});var iWr=s(IN);G6o=r(iWr,"NystromformerForMultipleChoice"),iWr.forEach(t),O6o=r(F0e," (Nystromformer model)"),F0e.forEach(t),V6o=i(K),j2=n(K,"LI",{});var v0e=s(j2);Xle=n(v0e,"STRONG",{});var dWr=s(Xle);X6o=r(dWr,"qdqbert"),dWr.forEach(t),z6o=r(v0e," \u2014 "),zle=n(v0e,"CODE",{});var cWr=s(zle);Q6o=r(cWr,"QDQBertForMultipleChoice"),cWr.forEach(t),W6o=r(v0e," (QDQBert model)"),v0e.forEach(t),H6o=i(K),D2=n(K,"LI",{});var T0e=s(D2);Qle=n(T0e,"STRONG",{});var fWr=s(Qle);U6o=r(fWr,"rembert"),fWr.forEach(t),J6o=r(T0e," \u2014 "),qN=n(T0e,"A",{href:!0});var mWr=s(qN);Y6o=r(mWr,"RemBertForMultipleChoice"),mWr.forEach(t),K6o=r(T0e," (RemBERT model)"),T0e.forEach(t),Z6o=i(K),G2=n(K,"LI",{});var M0e=s(G2);Wle=n(M0e,"STRONG",{});var hWr=s(Wle);eyo=r(hWr,"roberta"),hWr.forEach(t),oyo=r(M0e," \u2014 "),NN=n(M0e,"A",{href:!0});var gWr=s(NN);ryo=r(gWr,"RobertaForMultipleChoice"),gWr.forEach(t),tyo=r(M0e," (RoBERTa model)"),M0e.forEach(t),ayo=i(K),O2=n(K,"LI",{});var E0e=s(O2);Hle=n(E0e,"STRONG",{});var pWr=s(Hle);nyo=r(pWr,"roformer"),pWr.forEach(t),syo=r(E0e," \u2014 "),jN=n(E0e,"A",{href:!0});var uWr=s(jN);lyo=r(uWr,"RoFormerForMultipleChoice"),uWr.forEach(t),iyo=r(E0e," (RoFormer model)"),E0e.forEach(t),dyo=i(K),V2=n(K,"LI",{});var C0e=s(V2);Ule=n(C0e,"STRONG",{});var _Wr=s(Ule);cyo=r(_Wr,"squeezebert"),_Wr.forEach(t),fyo=r(C0e," \u2014 "),DN=n(C0e,"A",{href:!0});var bWr=s(DN);myo=r(bWr,"SqueezeBertForMultipleChoice"),bWr.forEach(t),hyo=r(C0e," (SqueezeBERT model)"),C0e.forEach(t),gyo=i(K),X2=n(K,"LI",{});var w0e=s(X2);Jle=n(w0e,"STRONG",{});var FWr=s(Jle);pyo=r(FWr,"xlm"),FWr.forEach(t),uyo=r(w0e," \u2014 "),GN=n(w0e,"A",{href:!0});var vWr=s(GN);_yo=r(vWr,"XLMForMultipleChoice"),vWr.forEach(t),byo=r(w0e," (XLM model)"),w0e.forEach(t),Fyo=i(K),z2=n(K,"LI",{});var A0e=s(z2);Yle=n(A0e,"STRONG",{});var TWr=s(Yle);vyo=r(TWr,"xlm-roberta"),TWr.forEach(t),Tyo=r(A0e," \u2014 "),ON=n(A0e,"A",{href:!0});var MWr=s(ON);Myo=r(MWr,"XLMRobertaForMultipleChoice"),MWr.forEach(t),Eyo=r(A0e," (XLM-RoBERTa model)"),A0e.forEach(t),Cyo=i(K),Q2=n(K,"LI",{});var y0e=s(Q2);Kle=n(y0e,"STRONG",{});var EWr=s(Kle);wyo=r(EWr,"xlm-roberta-xl"),EWr.forEach(t),Ayo=r(y0e," \u2014 "),VN=n(y0e,"A",{href:!0});var CWr=s(VN);yyo=r(CWr,"XLMRobertaXLForMultipleChoice"),CWr.forEach(t),Lyo=r(y0e," (XLM-RoBERTa-XL model)"),y0e.forEach(t),xyo=i(K),W2=n(K,"LI",{});var L0e=s(W2);Zle=n(L0e,"STRONG",{});var wWr=s(Zle);$yo=r(wWr,"xlnet"),wWr.forEach(t),kyo=r(L0e," \u2014 "),XN=n(L0e,"A",{href:!0});var AWr=s(XN);Syo=r(AWr,"XLNetForMultipleChoice"),AWr.forEach(t),Ryo=r(L0e," (XLNet model)"),L0e.forEach(t),Byo=i(K),H2=n(K,"LI",{});var x0e=s(H2);eie=n(x0e,"STRONG",{});var yWr=s(eie);Pyo=r(yWr,"yoso"),yWr.forEach(t),Iyo=r(x0e," \u2014 "),zN=n(x0e,"A",{href:!0});var LWr=s(zN);qyo=r(LWr,"YosoForMultipleChoice"),LWr.forEach(t),Nyo=r(x0e," (YOSO model)"),x0e.forEach(t),K.forEach(t),jyo=i(oa),U2=n(oa,"P",{});var $0e=s(U2);Dyo=r($0e,"The model is set in evaluation mode by default using "),oie=n($0e,"CODE",{});var xWr=s(oie);Gyo=r(xWr,"model.eval()"),xWr.forEach(t),Oyo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n($0e,"CODE",{});var $Wr=s(rie);Vyo=r($Wr,"model.train()"),$Wr.forEach(t),$0e.forEach(t),Xyo=i(oa),T(J2.$$.fragment,oa),oa.forEach(t),ks.forEach(t),oke=i(f),yi=n(f,"H2",{class:!0});var tRe=s(yi);Y2=n(tRe,"A",{id:!0,class:!0,href:!0});var kWr=s(Y2);tie=n(kWr,"SPAN",{});var SWr=s(tie);T(B6.$$.fragment,SWr),SWr.forEach(t),kWr.forEach(t),zyo=i(tRe),aie=n(tRe,"SPAN",{});var RWr=s(aie);Qyo=r(RWr,"AutoModelForNextSentencePrediction"),RWr.forEach(t),tRe.forEach(t),rke=i(f),Ro=n(f,"DIV",{class:!0});var Ss=s(Ro);T(P6.$$.fragment,Ss),Wyo=i(Ss),Li=n(Ss,"P",{});var lU=s(Li);Hyo=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QN=n(lU,"A",{href:!0});var BWr=s(QN);Uyo=r(BWr,"from_pretrained()"),BWr.forEach(t),Jyo=r(lU," class method or the "),WN=n(lU,"A",{href:!0});var PWr=s(WN);Yyo=r(PWr,"from_config()"),PWr.forEach(t),Kyo=r(lU,` class
method.`),lU.forEach(t),Zyo=i(Ss),I6=n(Ss,"P",{});var aRe=s(I6);eLo=r(aRe,"This class cannot be instantiated directly using "),nie=n(aRe,"CODE",{});var IWr=s(nie);oLo=r(IWr,"__init__()"),IWr.forEach(t),rLo=r(aRe," (throws an error)."),aRe.forEach(t),tLo=i(Ss),nt=n(Ss,"DIV",{class:!0});var Ww=s(nt);T(q6.$$.fragment,Ww),aLo=i(Ww),sie=n(Ww,"P",{});var qWr=s(sie);nLo=r(qWr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qWr.forEach(t),sLo=i(Ww),xi=n(Ww,"P",{});var iU=s(xi);lLo=r(iU,`Note:
Loading a model from its configuration file does `),lie=n(iU,"STRONG",{});var NWr=s(lie);iLo=r(NWr,"not"),NWr.forEach(t),dLo=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=n(iU,"A",{href:!0});var jWr=s(HN);cLo=r(jWr,"from_pretrained()"),jWr.forEach(t),fLo=r(iU," to load the model weights."),iU.forEach(t),mLo=i(Ww),T(K2.$$.fragment,Ww),Ww.forEach(t),hLo=i(Ss),Ke=n(Ss,"DIV",{class:!0});var ra=s(Ke);T(N6.$$.fragment,ra),gLo=i(ra),iie=n(ra,"P",{});var DWr=s(iie);pLo=r(DWr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DWr.forEach(t),uLo=i(ra),xa=n(ra,"P",{});var Hw=s(xa);_Lo=r(Hw,"The model class to instantiate is selected based on the "),die=n(Hw,"CODE",{});var GWr=s(die);bLo=r(GWr,"model_type"),GWr.forEach(t),FLo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),cie=n(Hw,"CODE",{});var OWr=s(cie);vLo=r(OWr,"pretrained_model_name_or_path"),OWr.forEach(t),TLo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=n(Hw,"CODE",{});var VWr=s(fie);MLo=r(VWr,"pretrained_model_name_or_path"),VWr.forEach(t),ELo=r(Hw,":"),Hw.forEach(t),CLo=i(ra),Wr=n(ra,"UL",{});var Rs=s(Wr);Z2=n(Rs,"LI",{});var k0e=s(Z2);mie=n(k0e,"STRONG",{});var XWr=s(mie);wLo=r(XWr,"bert"),XWr.forEach(t),ALo=r(k0e," \u2014 "),UN=n(k0e,"A",{href:!0});var zWr=s(UN);yLo=r(zWr,"BertForNextSentencePrediction"),zWr.forEach(t),LLo=r(k0e," (BERT model)"),k0e.forEach(t),xLo=i(Rs),eF=n(Rs,"LI",{});var S0e=s(eF);hie=n(S0e,"STRONG",{});var QWr=s(hie);$Lo=r(QWr,"fnet"),QWr.forEach(t),kLo=r(S0e," \u2014 "),JN=n(S0e,"A",{href:!0});var WWr=s(JN);SLo=r(WWr,"FNetForNextSentencePrediction"),WWr.forEach(t),RLo=r(S0e," (FNet model)"),S0e.forEach(t),BLo=i(Rs),oF=n(Rs,"LI",{});var R0e=s(oF);gie=n(R0e,"STRONG",{});var HWr=s(gie);PLo=r(HWr,"megatron-bert"),HWr.forEach(t),ILo=r(R0e," \u2014 "),YN=n(R0e,"A",{href:!0});var UWr=s(YN);qLo=r(UWr,"MegatronBertForNextSentencePrediction"),UWr.forEach(t),NLo=r(R0e," (MegatronBert model)"),R0e.forEach(t),jLo=i(Rs),rF=n(Rs,"LI",{});var B0e=s(rF);pie=n(B0e,"STRONG",{});var JWr=s(pie);DLo=r(JWr,"mobilebert"),JWr.forEach(t),GLo=r(B0e," \u2014 "),KN=n(B0e,"A",{href:!0});var YWr=s(KN);OLo=r(YWr,"MobileBertForNextSentencePrediction"),YWr.forEach(t),VLo=r(B0e," (MobileBERT model)"),B0e.forEach(t),XLo=i(Rs),tF=n(Rs,"LI",{});var P0e=s(tF);uie=n(P0e,"STRONG",{});var KWr=s(uie);zLo=r(KWr,"qdqbert"),KWr.forEach(t),QLo=r(P0e," \u2014 "),_ie=n(P0e,"CODE",{});var ZWr=s(_ie);WLo=r(ZWr,"QDQBertForNextSentencePrediction"),ZWr.forEach(t),HLo=r(P0e," (QDQBert model)"),P0e.forEach(t),Rs.forEach(t),ULo=i(ra),aF=n(ra,"P",{});var I0e=s(aF);JLo=r(I0e,"The model is set in evaluation mode by default using "),bie=n(I0e,"CODE",{});var eHr=s(bie);YLo=r(eHr,"model.eval()"),eHr.forEach(t),KLo=r(I0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=n(I0e,"CODE",{});var oHr=s(Fie);ZLo=r(oHr,"model.train()"),oHr.forEach(t),I0e.forEach(t),e8o=i(ra),T(nF.$$.fragment,ra),ra.forEach(t),Ss.forEach(t),tke=i(f),$i=n(f,"H2",{class:!0});var nRe=s($i);sF=n(nRe,"A",{id:!0,class:!0,href:!0});var rHr=s(sF);vie=n(rHr,"SPAN",{});var tHr=s(vie);T(j6.$$.fragment,tHr),tHr.forEach(t),rHr.forEach(t),o8o=i(nRe),Tie=n(nRe,"SPAN",{});var aHr=s(Tie);r8o=r(aHr,"AutoModelForTokenClassification"),aHr.forEach(t),nRe.forEach(t),ake=i(f),Bo=n(f,"DIV",{class:!0});var Bs=s(Bo);T(D6.$$.fragment,Bs),t8o=i(Bs),ki=n(Bs,"P",{});var dU=s(ki);a8o=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZN=n(dU,"A",{href:!0});var nHr=s(ZN);n8o=r(nHr,"from_pretrained()"),nHr.forEach(t),s8o=r(dU," class method or the "),ej=n(dU,"A",{href:!0});var sHr=s(ej);l8o=r(sHr,"from_config()"),sHr.forEach(t),i8o=r(dU,` class
method.`),dU.forEach(t),d8o=i(Bs),G6=n(Bs,"P",{});var sRe=s(G6);c8o=r(sRe,"This class cannot be instantiated directly using "),Mie=n(sRe,"CODE",{});var lHr=s(Mie);f8o=r(lHr,"__init__()"),lHr.forEach(t),m8o=r(sRe," (throws an error)."),sRe.forEach(t),h8o=i(Bs),st=n(Bs,"DIV",{class:!0});var Uw=s(st);T(O6.$$.fragment,Uw),g8o=i(Uw),Eie=n(Uw,"P",{});var iHr=s(Eie);p8o=r(iHr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iHr.forEach(t),u8o=i(Uw),Si=n(Uw,"P",{});var cU=s(Si);_8o=r(cU,`Note:
Loading a model from its configuration file does `),Cie=n(cU,"STRONG",{});var dHr=s(Cie);b8o=r(dHr,"not"),dHr.forEach(t),F8o=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=n(cU,"A",{href:!0});var cHr=s(oj);v8o=r(cHr,"from_pretrained()"),cHr.forEach(t),T8o=r(cU," to load the model weights."),cU.forEach(t),M8o=i(Uw),T(lF.$$.fragment,Uw),Uw.forEach(t),E8o=i(Bs),Ze=n(Bs,"DIV",{class:!0});var ta=s(Ze);T(V6.$$.fragment,ta),C8o=i(ta),wie=n(ta,"P",{});var fHr=s(wie);w8o=r(fHr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fHr.forEach(t),A8o=i(ta),$a=n(ta,"P",{});var Jw=s($a);y8o=r(Jw,"The model class to instantiate is selected based on the "),Aie=n(Jw,"CODE",{});var mHr=s(Aie);L8o=r(mHr,"model_type"),mHr.forEach(t),x8o=r(Jw,` property of the config object (either
passed as an argument or loaded from `),yie=n(Jw,"CODE",{});var hHr=s(yie);$8o=r(hHr,"pretrained_model_name_or_path"),hHr.forEach(t),k8o=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=n(Jw,"CODE",{});var gHr=s(Lie);S8o=r(gHr,"pretrained_model_name_or_path"),gHr.forEach(t),R8o=r(Jw,":"),Jw.forEach(t),B8o=i(ta),U=n(ta,"UL",{});var J=s(U);iF=n(J,"LI",{});var q0e=s(iF);xie=n(q0e,"STRONG",{});var pHr=s(xie);P8o=r(pHr,"albert"),pHr.forEach(t),I8o=r(q0e," \u2014 "),rj=n(q0e,"A",{href:!0});var uHr=s(rj);q8o=r(uHr,"AlbertForTokenClassification"),uHr.forEach(t),N8o=r(q0e," (ALBERT model)"),q0e.forEach(t),j8o=i(J),dF=n(J,"LI",{});var N0e=s(dF);$ie=n(N0e,"STRONG",{});var _Hr=s($ie);D8o=r(_Hr,"bert"),_Hr.forEach(t),G8o=r(N0e," \u2014 "),tj=n(N0e,"A",{href:!0});var bHr=s(tj);O8o=r(bHr,"BertForTokenClassification"),bHr.forEach(t),V8o=r(N0e," (BERT model)"),N0e.forEach(t),X8o=i(J),cF=n(J,"LI",{});var j0e=s(cF);kie=n(j0e,"STRONG",{});var FHr=s(kie);z8o=r(FHr,"big_bird"),FHr.forEach(t),Q8o=r(j0e," \u2014 "),aj=n(j0e,"A",{href:!0});var vHr=s(aj);W8o=r(vHr,"BigBirdForTokenClassification"),vHr.forEach(t),H8o=r(j0e," (BigBird model)"),j0e.forEach(t),U8o=i(J),fF=n(J,"LI",{});var D0e=s(fF);Sie=n(D0e,"STRONG",{});var THr=s(Sie);J8o=r(THr,"camembert"),THr.forEach(t),Y8o=r(D0e," \u2014 "),nj=n(D0e,"A",{href:!0});var MHr=s(nj);K8o=r(MHr,"CamembertForTokenClassification"),MHr.forEach(t),Z8o=r(D0e," (CamemBERT model)"),D0e.forEach(t),exo=i(J),mF=n(J,"LI",{});var G0e=s(mF);Rie=n(G0e,"STRONG",{});var EHr=s(Rie);oxo=r(EHr,"canine"),EHr.forEach(t),rxo=r(G0e," \u2014 "),sj=n(G0e,"A",{href:!0});var CHr=s(sj);txo=r(CHr,"CanineForTokenClassification"),CHr.forEach(t),axo=r(G0e," (Canine model)"),G0e.forEach(t),nxo=i(J),hF=n(J,"LI",{});var O0e=s(hF);Bie=n(O0e,"STRONG",{});var wHr=s(Bie);sxo=r(wHr,"convbert"),wHr.forEach(t),lxo=r(O0e," \u2014 "),lj=n(O0e,"A",{href:!0});var AHr=s(lj);ixo=r(AHr,"ConvBertForTokenClassification"),AHr.forEach(t),dxo=r(O0e," (ConvBERT model)"),O0e.forEach(t),cxo=i(J),gF=n(J,"LI",{});var V0e=s(gF);Pie=n(V0e,"STRONG",{});var yHr=s(Pie);fxo=r(yHr,"data2vec-text"),yHr.forEach(t),mxo=r(V0e," \u2014 "),ij=n(V0e,"A",{href:!0});var LHr=s(ij);hxo=r(LHr,"Data2VecTextForTokenClassification"),LHr.forEach(t),gxo=r(V0e," (Data2VecText model)"),V0e.forEach(t),pxo=i(J),pF=n(J,"LI",{});var X0e=s(pF);Iie=n(X0e,"STRONG",{});var xHr=s(Iie);uxo=r(xHr,"deberta"),xHr.forEach(t),_xo=r(X0e," \u2014 "),dj=n(X0e,"A",{href:!0});var $Hr=s(dj);bxo=r($Hr,"DebertaForTokenClassification"),$Hr.forEach(t),Fxo=r(X0e," (DeBERTa model)"),X0e.forEach(t),vxo=i(J),uF=n(J,"LI",{});var z0e=s(uF);qie=n(z0e,"STRONG",{});var kHr=s(qie);Txo=r(kHr,"deberta-v2"),kHr.forEach(t),Mxo=r(z0e," \u2014 "),cj=n(z0e,"A",{href:!0});var SHr=s(cj);Exo=r(SHr,"DebertaV2ForTokenClassification"),SHr.forEach(t),Cxo=r(z0e," (DeBERTa-v2 model)"),z0e.forEach(t),wxo=i(J),_F=n(J,"LI",{});var Q0e=s(_F);Nie=n(Q0e,"STRONG",{});var RHr=s(Nie);Axo=r(RHr,"distilbert"),RHr.forEach(t),yxo=r(Q0e," \u2014 "),fj=n(Q0e,"A",{href:!0});var BHr=s(fj);Lxo=r(BHr,"DistilBertForTokenClassification"),BHr.forEach(t),xxo=r(Q0e," (DistilBERT model)"),Q0e.forEach(t),$xo=i(J),bF=n(J,"LI",{});var W0e=s(bF);jie=n(W0e,"STRONG",{});var PHr=s(jie);kxo=r(PHr,"electra"),PHr.forEach(t),Sxo=r(W0e," \u2014 "),mj=n(W0e,"A",{href:!0});var IHr=s(mj);Rxo=r(IHr,"ElectraForTokenClassification"),IHr.forEach(t),Bxo=r(W0e," (ELECTRA model)"),W0e.forEach(t),Pxo=i(J),FF=n(J,"LI",{});var H0e=s(FF);Die=n(H0e,"STRONG",{});var qHr=s(Die);Ixo=r(qHr,"flaubert"),qHr.forEach(t),qxo=r(H0e," \u2014 "),hj=n(H0e,"A",{href:!0});var NHr=s(hj);Nxo=r(NHr,"FlaubertForTokenClassification"),NHr.forEach(t),jxo=r(H0e," (FlauBERT model)"),H0e.forEach(t),Dxo=i(J),vF=n(J,"LI",{});var U0e=s(vF);Gie=n(U0e,"STRONG",{});var jHr=s(Gie);Gxo=r(jHr,"fnet"),jHr.forEach(t),Oxo=r(U0e," \u2014 "),gj=n(U0e,"A",{href:!0});var DHr=s(gj);Vxo=r(DHr,"FNetForTokenClassification"),DHr.forEach(t),Xxo=r(U0e," (FNet model)"),U0e.forEach(t),zxo=i(J),TF=n(J,"LI",{});var J0e=s(TF);Oie=n(J0e,"STRONG",{});var GHr=s(Oie);Qxo=r(GHr,"funnel"),GHr.forEach(t),Wxo=r(J0e," \u2014 "),pj=n(J0e,"A",{href:!0});var OHr=s(pj);Hxo=r(OHr,"FunnelForTokenClassification"),OHr.forEach(t),Uxo=r(J0e," (Funnel Transformer model)"),J0e.forEach(t),Jxo=i(J),MF=n(J,"LI",{});var Y0e=s(MF);Vie=n(Y0e,"STRONG",{});var VHr=s(Vie);Yxo=r(VHr,"gpt2"),VHr.forEach(t),Kxo=r(Y0e," \u2014 "),uj=n(Y0e,"A",{href:!0});var XHr=s(uj);Zxo=r(XHr,"GPT2ForTokenClassification"),XHr.forEach(t),e7o=r(Y0e," (OpenAI GPT-2 model)"),Y0e.forEach(t),o7o=i(J),EF=n(J,"LI",{});var K0e=s(EF);Xie=n(K0e,"STRONG",{});var zHr=s(Xie);r7o=r(zHr,"ibert"),zHr.forEach(t),t7o=r(K0e," \u2014 "),_j=n(K0e,"A",{href:!0});var QHr=s(_j);a7o=r(QHr,"IBertForTokenClassification"),QHr.forEach(t),n7o=r(K0e," (I-BERT model)"),K0e.forEach(t),s7o=i(J),CF=n(J,"LI",{});var Z0e=s(CF);zie=n(Z0e,"STRONG",{});var WHr=s(zie);l7o=r(WHr,"layoutlm"),WHr.forEach(t),i7o=r(Z0e," \u2014 "),bj=n(Z0e,"A",{href:!0});var HHr=s(bj);d7o=r(HHr,"LayoutLMForTokenClassification"),HHr.forEach(t),c7o=r(Z0e," (LayoutLM model)"),Z0e.forEach(t),f7o=i(J),wF=n(J,"LI",{});var e6e=s(wF);Qie=n(e6e,"STRONG",{});var UHr=s(Qie);m7o=r(UHr,"layoutlmv2"),UHr.forEach(t),h7o=r(e6e," \u2014 "),Fj=n(e6e,"A",{href:!0});var JHr=s(Fj);g7o=r(JHr,"LayoutLMv2ForTokenClassification"),JHr.forEach(t),p7o=r(e6e," (LayoutLMv2 model)"),e6e.forEach(t),u7o=i(J),AF=n(J,"LI",{});var o6e=s(AF);Wie=n(o6e,"STRONG",{});var YHr=s(Wie);_7o=r(YHr,"longformer"),YHr.forEach(t),b7o=r(o6e," \u2014 "),vj=n(o6e,"A",{href:!0});var KHr=s(vj);F7o=r(KHr,"LongformerForTokenClassification"),KHr.forEach(t),v7o=r(o6e," (Longformer model)"),o6e.forEach(t),T7o=i(J),yF=n(J,"LI",{});var r6e=s(yF);Hie=n(r6e,"STRONG",{});var ZHr=s(Hie);M7o=r(ZHr,"megatron-bert"),ZHr.forEach(t),E7o=r(r6e," \u2014 "),Tj=n(r6e,"A",{href:!0});var eUr=s(Tj);C7o=r(eUr,"MegatronBertForTokenClassification"),eUr.forEach(t),w7o=r(r6e," (MegatronBert model)"),r6e.forEach(t),A7o=i(J),LF=n(J,"LI",{});var t6e=s(LF);Uie=n(t6e,"STRONG",{});var oUr=s(Uie);y7o=r(oUr,"mobilebert"),oUr.forEach(t),L7o=r(t6e," \u2014 "),Mj=n(t6e,"A",{href:!0});var rUr=s(Mj);x7o=r(rUr,"MobileBertForTokenClassification"),rUr.forEach(t),$7o=r(t6e," (MobileBERT model)"),t6e.forEach(t),k7o=i(J),xF=n(J,"LI",{});var a6e=s(xF);Jie=n(a6e,"STRONG",{});var tUr=s(Jie);S7o=r(tUr,"mpnet"),tUr.forEach(t),R7o=r(a6e," \u2014 "),Ej=n(a6e,"A",{href:!0});var aUr=s(Ej);B7o=r(aUr,"MPNetForTokenClassification"),aUr.forEach(t),P7o=r(a6e," (MPNet model)"),a6e.forEach(t),I7o=i(J),$F=n(J,"LI",{});var n6e=s($F);Yie=n(n6e,"STRONG",{});var nUr=s(Yie);q7o=r(nUr,"nystromformer"),nUr.forEach(t),N7o=r(n6e," \u2014 "),Cj=n(n6e,"A",{href:!0});var sUr=s(Cj);j7o=r(sUr,"NystromformerForTokenClassification"),sUr.forEach(t),D7o=r(n6e," (Nystromformer model)"),n6e.forEach(t),G7o=i(J),kF=n(J,"LI",{});var s6e=s(kF);Kie=n(s6e,"STRONG",{});var lUr=s(Kie);O7o=r(lUr,"qdqbert"),lUr.forEach(t),V7o=r(s6e," \u2014 "),Zie=n(s6e,"CODE",{});var iUr=s(Zie);X7o=r(iUr,"QDQBertForTokenClassification"),iUr.forEach(t),z7o=r(s6e," (QDQBert model)"),s6e.forEach(t),Q7o=i(J),SF=n(J,"LI",{});var l6e=s(SF);ede=n(l6e,"STRONG",{});var dUr=s(ede);W7o=r(dUr,"rembert"),dUr.forEach(t),H7o=r(l6e," \u2014 "),wj=n(l6e,"A",{href:!0});var cUr=s(wj);U7o=r(cUr,"RemBertForTokenClassification"),cUr.forEach(t),J7o=r(l6e," (RemBERT model)"),l6e.forEach(t),Y7o=i(J),RF=n(J,"LI",{});var i6e=s(RF);ode=n(i6e,"STRONG",{});var fUr=s(ode);K7o=r(fUr,"roberta"),fUr.forEach(t),Z7o=r(i6e," \u2014 "),Aj=n(i6e,"A",{href:!0});var mUr=s(Aj);e$o=r(mUr,"RobertaForTokenClassification"),mUr.forEach(t),o$o=r(i6e," (RoBERTa model)"),i6e.forEach(t),r$o=i(J),BF=n(J,"LI",{});var d6e=s(BF);rde=n(d6e,"STRONG",{});var hUr=s(rde);t$o=r(hUr,"roformer"),hUr.forEach(t),a$o=r(d6e," \u2014 "),yj=n(d6e,"A",{href:!0});var gUr=s(yj);n$o=r(gUr,"RoFormerForTokenClassification"),gUr.forEach(t),s$o=r(d6e," (RoFormer model)"),d6e.forEach(t),l$o=i(J),PF=n(J,"LI",{});var c6e=s(PF);tde=n(c6e,"STRONG",{});var pUr=s(tde);i$o=r(pUr,"squeezebert"),pUr.forEach(t),d$o=r(c6e," \u2014 "),Lj=n(c6e,"A",{href:!0});var uUr=s(Lj);c$o=r(uUr,"SqueezeBertForTokenClassification"),uUr.forEach(t),f$o=r(c6e," (SqueezeBERT model)"),c6e.forEach(t),m$o=i(J),IF=n(J,"LI",{});var f6e=s(IF);ade=n(f6e,"STRONG",{});var _Ur=s(ade);h$o=r(_Ur,"xlm"),_Ur.forEach(t),g$o=r(f6e," \u2014 "),xj=n(f6e,"A",{href:!0});var bUr=s(xj);p$o=r(bUr,"XLMForTokenClassification"),bUr.forEach(t),u$o=r(f6e," (XLM model)"),f6e.forEach(t),_$o=i(J),qF=n(J,"LI",{});var m6e=s(qF);nde=n(m6e,"STRONG",{});var FUr=s(nde);b$o=r(FUr,"xlm-roberta"),FUr.forEach(t),F$o=r(m6e," \u2014 "),$j=n(m6e,"A",{href:!0});var vUr=s($j);v$o=r(vUr,"XLMRobertaForTokenClassification"),vUr.forEach(t),T$o=r(m6e," (XLM-RoBERTa model)"),m6e.forEach(t),M$o=i(J),NF=n(J,"LI",{});var h6e=s(NF);sde=n(h6e,"STRONG",{});var TUr=s(sde);E$o=r(TUr,"xlm-roberta-xl"),TUr.forEach(t),C$o=r(h6e," \u2014 "),kj=n(h6e,"A",{href:!0});var MUr=s(kj);w$o=r(MUr,"XLMRobertaXLForTokenClassification"),MUr.forEach(t),A$o=r(h6e," (XLM-RoBERTa-XL model)"),h6e.forEach(t),y$o=i(J),jF=n(J,"LI",{});var g6e=s(jF);lde=n(g6e,"STRONG",{});var EUr=s(lde);L$o=r(EUr,"xlnet"),EUr.forEach(t),x$o=r(g6e," \u2014 "),Sj=n(g6e,"A",{href:!0});var CUr=s(Sj);$$o=r(CUr,"XLNetForTokenClassification"),CUr.forEach(t),k$o=r(g6e," (XLNet model)"),g6e.forEach(t),S$o=i(J),DF=n(J,"LI",{});var p6e=s(DF);ide=n(p6e,"STRONG",{});var wUr=s(ide);R$o=r(wUr,"yoso"),wUr.forEach(t),B$o=r(p6e," \u2014 "),Rj=n(p6e,"A",{href:!0});var AUr=s(Rj);P$o=r(AUr,"YosoForTokenClassification"),AUr.forEach(t),I$o=r(p6e," (YOSO model)"),p6e.forEach(t),J.forEach(t),q$o=i(ta),GF=n(ta,"P",{});var u6e=s(GF);N$o=r(u6e,"The model is set in evaluation mode by default using "),dde=n(u6e,"CODE",{});var yUr=s(dde);j$o=r(yUr,"model.eval()"),yUr.forEach(t),D$o=r(u6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(u6e,"CODE",{});var LUr=s(cde);G$o=r(LUr,"model.train()"),LUr.forEach(t),u6e.forEach(t),O$o=i(ta),T(OF.$$.fragment,ta),ta.forEach(t),Bs.forEach(t),nke=i(f),Ri=n(f,"H2",{class:!0});var lRe=s(Ri);VF=n(lRe,"A",{id:!0,class:!0,href:!0});var xUr=s(VF);fde=n(xUr,"SPAN",{});var $Ur=s(fde);T(X6.$$.fragment,$Ur),$Ur.forEach(t),xUr.forEach(t),V$o=i(lRe),mde=n(lRe,"SPAN",{});var kUr=s(mde);X$o=r(kUr,"AutoModelForQuestionAnswering"),kUr.forEach(t),lRe.forEach(t),ske=i(f),Po=n(f,"DIV",{class:!0});var Ps=s(Po);T(z6.$$.fragment,Ps),z$o=i(Ps),Bi=n(Ps,"P",{});var fU=s(Bi);Q$o=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Bj=n(fU,"A",{href:!0});var SUr=s(Bj);W$o=r(SUr,"from_pretrained()"),SUr.forEach(t),H$o=r(fU," class method or the "),Pj=n(fU,"A",{href:!0});var RUr=s(Pj);U$o=r(RUr,"from_config()"),RUr.forEach(t),J$o=r(fU,` class
method.`),fU.forEach(t),Y$o=i(Ps),Q6=n(Ps,"P",{});var iRe=s(Q6);K$o=r(iRe,"This class cannot be instantiated directly using "),hde=n(iRe,"CODE",{});var BUr=s(hde);Z$o=r(BUr,"__init__()"),BUr.forEach(t),e9o=r(iRe," (throws an error)."),iRe.forEach(t),o9o=i(Ps),lt=n(Ps,"DIV",{class:!0});var Yw=s(lt);T(W6.$$.fragment,Yw),r9o=i(Yw),gde=n(Yw,"P",{});var PUr=s(gde);t9o=r(PUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PUr.forEach(t),a9o=i(Yw),Pi=n(Yw,"P",{});var mU=s(Pi);n9o=r(mU,`Note:
Loading a model from its configuration file does `),pde=n(mU,"STRONG",{});var IUr=s(pde);s9o=r(IUr,"not"),IUr.forEach(t),l9o=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=n(mU,"A",{href:!0});var qUr=s(Ij);i9o=r(qUr,"from_pretrained()"),qUr.forEach(t),d9o=r(mU," to load the model weights."),mU.forEach(t),c9o=i(Yw),T(XF.$$.fragment,Yw),Yw.forEach(t),f9o=i(Ps),eo=n(Ps,"DIV",{class:!0});var aa=s(eo);T(H6.$$.fragment,aa),m9o=i(aa),ude=n(aa,"P",{});var NUr=s(ude);h9o=r(NUr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NUr.forEach(t),g9o=i(aa),ka=n(aa,"P",{});var Kw=s(ka);p9o=r(Kw,"The model class to instantiate is selected based on the "),_de=n(Kw,"CODE",{});var jUr=s(_de);u9o=r(jUr,"model_type"),jUr.forEach(t),_9o=r(Kw,` property of the config object (either
passed as an argument or loaded from `),bde=n(Kw,"CODE",{});var DUr=s(bde);b9o=r(DUr,"pretrained_model_name_or_path"),DUr.forEach(t),F9o=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(Kw,"CODE",{});var GUr=s(Fde);v9o=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),T9o=r(Kw,":"),Kw.forEach(t),M9o=i(aa),O=n(aa,"UL",{});var X=s(O);zF=n(X,"LI",{});var _6e=s(zF);vde=n(_6e,"STRONG",{});var OUr=s(vde);E9o=r(OUr,"albert"),OUr.forEach(t),C9o=r(_6e," \u2014 "),qj=n(_6e,"A",{href:!0});var VUr=s(qj);w9o=r(VUr,"AlbertForQuestionAnswering"),VUr.forEach(t),A9o=r(_6e," (ALBERT model)"),_6e.forEach(t),y9o=i(X),QF=n(X,"LI",{});var b6e=s(QF);Tde=n(b6e,"STRONG",{});var XUr=s(Tde);L9o=r(XUr,"bart"),XUr.forEach(t),x9o=r(b6e," \u2014 "),Nj=n(b6e,"A",{href:!0});var zUr=s(Nj);$9o=r(zUr,"BartForQuestionAnswering"),zUr.forEach(t),k9o=r(b6e," (BART model)"),b6e.forEach(t),S9o=i(X),WF=n(X,"LI",{});var F6e=s(WF);Mde=n(F6e,"STRONG",{});var QUr=s(Mde);R9o=r(QUr,"bert"),QUr.forEach(t),B9o=r(F6e," \u2014 "),jj=n(F6e,"A",{href:!0});var WUr=s(jj);P9o=r(WUr,"BertForQuestionAnswering"),WUr.forEach(t),I9o=r(F6e," (BERT model)"),F6e.forEach(t),q9o=i(X),HF=n(X,"LI",{});var v6e=s(HF);Ede=n(v6e,"STRONG",{});var HUr=s(Ede);N9o=r(HUr,"big_bird"),HUr.forEach(t),j9o=r(v6e," \u2014 "),Dj=n(v6e,"A",{href:!0});var UUr=s(Dj);D9o=r(UUr,"BigBirdForQuestionAnswering"),UUr.forEach(t),G9o=r(v6e," (BigBird model)"),v6e.forEach(t),O9o=i(X),UF=n(X,"LI",{});var T6e=s(UF);Cde=n(T6e,"STRONG",{});var JUr=s(Cde);V9o=r(JUr,"bigbird_pegasus"),JUr.forEach(t),X9o=r(T6e," \u2014 "),Gj=n(T6e,"A",{href:!0});var YUr=s(Gj);z9o=r(YUr,"BigBirdPegasusForQuestionAnswering"),YUr.forEach(t),Q9o=r(T6e," (BigBirdPegasus model)"),T6e.forEach(t),W9o=i(X),JF=n(X,"LI",{});var M6e=s(JF);wde=n(M6e,"STRONG",{});var KUr=s(wde);H9o=r(KUr,"camembert"),KUr.forEach(t),U9o=r(M6e," \u2014 "),Oj=n(M6e,"A",{href:!0});var ZUr=s(Oj);J9o=r(ZUr,"CamembertForQuestionAnswering"),ZUr.forEach(t),Y9o=r(M6e," (CamemBERT model)"),M6e.forEach(t),K9o=i(X),YF=n(X,"LI",{});var E6e=s(YF);Ade=n(E6e,"STRONG",{});var eJr=s(Ade);Z9o=r(eJr,"canine"),eJr.forEach(t),eko=r(E6e," \u2014 "),Vj=n(E6e,"A",{href:!0});var oJr=s(Vj);oko=r(oJr,"CanineForQuestionAnswering"),oJr.forEach(t),rko=r(E6e," (Canine model)"),E6e.forEach(t),tko=i(X),KF=n(X,"LI",{});var C6e=s(KF);yde=n(C6e,"STRONG",{});var rJr=s(yde);ako=r(rJr,"convbert"),rJr.forEach(t),nko=r(C6e," \u2014 "),Xj=n(C6e,"A",{href:!0});var tJr=s(Xj);sko=r(tJr,"ConvBertForQuestionAnswering"),tJr.forEach(t),lko=r(C6e," (ConvBERT model)"),C6e.forEach(t),iko=i(X),ZF=n(X,"LI",{});var w6e=s(ZF);Lde=n(w6e,"STRONG",{});var aJr=s(Lde);dko=r(aJr,"data2vec-text"),aJr.forEach(t),cko=r(w6e," \u2014 "),zj=n(w6e,"A",{href:!0});var nJr=s(zj);fko=r(nJr,"Data2VecTextForQuestionAnswering"),nJr.forEach(t),mko=r(w6e," (Data2VecText model)"),w6e.forEach(t),hko=i(X),ev=n(X,"LI",{});var A6e=s(ev);xde=n(A6e,"STRONG",{});var sJr=s(xde);gko=r(sJr,"deberta"),sJr.forEach(t),pko=r(A6e," \u2014 "),Qj=n(A6e,"A",{href:!0});var lJr=s(Qj);uko=r(lJr,"DebertaForQuestionAnswering"),lJr.forEach(t),_ko=r(A6e," (DeBERTa model)"),A6e.forEach(t),bko=i(X),ov=n(X,"LI",{});var y6e=s(ov);$de=n(y6e,"STRONG",{});var iJr=s($de);Fko=r(iJr,"deberta-v2"),iJr.forEach(t),vko=r(y6e," \u2014 "),Wj=n(y6e,"A",{href:!0});var dJr=s(Wj);Tko=r(dJr,"DebertaV2ForQuestionAnswering"),dJr.forEach(t),Mko=r(y6e," (DeBERTa-v2 model)"),y6e.forEach(t),Eko=i(X),rv=n(X,"LI",{});var L6e=s(rv);kde=n(L6e,"STRONG",{});var cJr=s(kde);Cko=r(cJr,"distilbert"),cJr.forEach(t),wko=r(L6e," \u2014 "),Hj=n(L6e,"A",{href:!0});var fJr=s(Hj);Ako=r(fJr,"DistilBertForQuestionAnswering"),fJr.forEach(t),yko=r(L6e," (DistilBERT model)"),L6e.forEach(t),Lko=i(X),tv=n(X,"LI",{});var x6e=s(tv);Sde=n(x6e,"STRONG",{});var mJr=s(Sde);xko=r(mJr,"electra"),mJr.forEach(t),$ko=r(x6e," \u2014 "),Uj=n(x6e,"A",{href:!0});var hJr=s(Uj);kko=r(hJr,"ElectraForQuestionAnswering"),hJr.forEach(t),Sko=r(x6e," (ELECTRA model)"),x6e.forEach(t),Rko=i(X),av=n(X,"LI",{});var $6e=s(av);Rde=n($6e,"STRONG",{});var gJr=s(Rde);Bko=r(gJr,"flaubert"),gJr.forEach(t),Pko=r($6e," \u2014 "),Jj=n($6e,"A",{href:!0});var pJr=s(Jj);Iko=r(pJr,"FlaubertForQuestionAnsweringSimple"),pJr.forEach(t),qko=r($6e," (FlauBERT model)"),$6e.forEach(t),Nko=i(X),nv=n(X,"LI",{});var k6e=s(nv);Bde=n(k6e,"STRONG",{});var uJr=s(Bde);jko=r(uJr,"fnet"),uJr.forEach(t),Dko=r(k6e," \u2014 "),Yj=n(k6e,"A",{href:!0});var _Jr=s(Yj);Gko=r(_Jr,"FNetForQuestionAnswering"),_Jr.forEach(t),Oko=r(k6e," (FNet model)"),k6e.forEach(t),Vko=i(X),sv=n(X,"LI",{});var S6e=s(sv);Pde=n(S6e,"STRONG",{});var bJr=s(Pde);Xko=r(bJr,"funnel"),bJr.forEach(t),zko=r(S6e," \u2014 "),Kj=n(S6e,"A",{href:!0});var FJr=s(Kj);Qko=r(FJr,"FunnelForQuestionAnswering"),FJr.forEach(t),Wko=r(S6e," (Funnel Transformer model)"),S6e.forEach(t),Hko=i(X),lv=n(X,"LI",{});var R6e=s(lv);Ide=n(R6e,"STRONG",{});var vJr=s(Ide);Uko=r(vJr,"gptj"),vJr.forEach(t),Jko=r(R6e," \u2014 "),Zj=n(R6e,"A",{href:!0});var TJr=s(Zj);Yko=r(TJr,"GPTJForQuestionAnswering"),TJr.forEach(t),Kko=r(R6e," (GPT-J model)"),R6e.forEach(t),Zko=i(X),iv=n(X,"LI",{});var B6e=s(iv);qde=n(B6e,"STRONG",{});var MJr=s(qde);eSo=r(MJr,"ibert"),MJr.forEach(t),oSo=r(B6e," \u2014 "),eD=n(B6e,"A",{href:!0});var EJr=s(eD);rSo=r(EJr,"IBertForQuestionAnswering"),EJr.forEach(t),tSo=r(B6e," (I-BERT model)"),B6e.forEach(t),aSo=i(X),dv=n(X,"LI",{});var P6e=s(dv);Nde=n(P6e,"STRONG",{});var CJr=s(Nde);nSo=r(CJr,"layoutlmv2"),CJr.forEach(t),sSo=r(P6e," \u2014 "),oD=n(P6e,"A",{href:!0});var wJr=s(oD);lSo=r(wJr,"LayoutLMv2ForQuestionAnswering"),wJr.forEach(t),iSo=r(P6e," (LayoutLMv2 model)"),P6e.forEach(t),dSo=i(X),cv=n(X,"LI",{});var I6e=s(cv);jde=n(I6e,"STRONG",{});var AJr=s(jde);cSo=r(AJr,"led"),AJr.forEach(t),fSo=r(I6e," \u2014 "),rD=n(I6e,"A",{href:!0});var yJr=s(rD);mSo=r(yJr,"LEDForQuestionAnswering"),yJr.forEach(t),hSo=r(I6e," (LED model)"),I6e.forEach(t),gSo=i(X),fv=n(X,"LI",{});var q6e=s(fv);Dde=n(q6e,"STRONG",{});var LJr=s(Dde);pSo=r(LJr,"longformer"),LJr.forEach(t),uSo=r(q6e," \u2014 "),tD=n(q6e,"A",{href:!0});var xJr=s(tD);_So=r(xJr,"LongformerForQuestionAnswering"),xJr.forEach(t),bSo=r(q6e," (Longformer model)"),q6e.forEach(t),FSo=i(X),mv=n(X,"LI",{});var N6e=s(mv);Gde=n(N6e,"STRONG",{});var $Jr=s(Gde);vSo=r($Jr,"lxmert"),$Jr.forEach(t),TSo=r(N6e," \u2014 "),aD=n(N6e,"A",{href:!0});var kJr=s(aD);MSo=r(kJr,"LxmertForQuestionAnswering"),kJr.forEach(t),ESo=r(N6e," (LXMERT model)"),N6e.forEach(t),CSo=i(X),hv=n(X,"LI",{});var j6e=s(hv);Ode=n(j6e,"STRONG",{});var SJr=s(Ode);wSo=r(SJr,"mbart"),SJr.forEach(t),ASo=r(j6e," \u2014 "),nD=n(j6e,"A",{href:!0});var RJr=s(nD);ySo=r(RJr,"MBartForQuestionAnswering"),RJr.forEach(t),LSo=r(j6e," (mBART model)"),j6e.forEach(t),xSo=i(X),gv=n(X,"LI",{});var D6e=s(gv);Vde=n(D6e,"STRONG",{});var BJr=s(Vde);$So=r(BJr,"megatron-bert"),BJr.forEach(t),kSo=r(D6e," \u2014 "),sD=n(D6e,"A",{href:!0});var PJr=s(sD);SSo=r(PJr,"MegatronBertForQuestionAnswering"),PJr.forEach(t),RSo=r(D6e," (MegatronBert model)"),D6e.forEach(t),BSo=i(X),pv=n(X,"LI",{});var G6e=s(pv);Xde=n(G6e,"STRONG",{});var IJr=s(Xde);PSo=r(IJr,"mobilebert"),IJr.forEach(t),ISo=r(G6e," \u2014 "),lD=n(G6e,"A",{href:!0});var qJr=s(lD);qSo=r(qJr,"MobileBertForQuestionAnswering"),qJr.forEach(t),NSo=r(G6e," (MobileBERT model)"),G6e.forEach(t),jSo=i(X),uv=n(X,"LI",{});var O6e=s(uv);zde=n(O6e,"STRONG",{});var NJr=s(zde);DSo=r(NJr,"mpnet"),NJr.forEach(t),GSo=r(O6e," \u2014 "),iD=n(O6e,"A",{href:!0});var jJr=s(iD);OSo=r(jJr,"MPNetForQuestionAnswering"),jJr.forEach(t),VSo=r(O6e," (MPNet model)"),O6e.forEach(t),XSo=i(X),_v=n(X,"LI",{});var V6e=s(_v);Qde=n(V6e,"STRONG",{});var DJr=s(Qde);zSo=r(DJr,"nystromformer"),DJr.forEach(t),QSo=r(V6e," \u2014 "),dD=n(V6e,"A",{href:!0});var GJr=s(dD);WSo=r(GJr,"NystromformerForQuestionAnswering"),GJr.forEach(t),HSo=r(V6e," (Nystromformer model)"),V6e.forEach(t),USo=i(X),bv=n(X,"LI",{});var X6e=s(bv);Wde=n(X6e,"STRONG",{});var OJr=s(Wde);JSo=r(OJr,"qdqbert"),OJr.forEach(t),YSo=r(X6e," \u2014 "),Hde=n(X6e,"CODE",{});var VJr=s(Hde);KSo=r(VJr,"QDQBertForQuestionAnswering"),VJr.forEach(t),ZSo=r(X6e," (QDQBert model)"),X6e.forEach(t),eRo=i(X),Fv=n(X,"LI",{});var z6e=s(Fv);Ude=n(z6e,"STRONG",{});var XJr=s(Ude);oRo=r(XJr,"reformer"),XJr.forEach(t),rRo=r(z6e," \u2014 "),cD=n(z6e,"A",{href:!0});var zJr=s(cD);tRo=r(zJr,"ReformerForQuestionAnswering"),zJr.forEach(t),aRo=r(z6e," (Reformer model)"),z6e.forEach(t),nRo=i(X),vv=n(X,"LI",{});var Q6e=s(vv);Jde=n(Q6e,"STRONG",{});var QJr=s(Jde);sRo=r(QJr,"rembert"),QJr.forEach(t),lRo=r(Q6e," \u2014 "),fD=n(Q6e,"A",{href:!0});var WJr=s(fD);iRo=r(WJr,"RemBertForQuestionAnswering"),WJr.forEach(t),dRo=r(Q6e," (RemBERT model)"),Q6e.forEach(t),cRo=i(X),Tv=n(X,"LI",{});var W6e=s(Tv);Yde=n(W6e,"STRONG",{});var HJr=s(Yde);fRo=r(HJr,"roberta"),HJr.forEach(t),mRo=r(W6e," \u2014 "),mD=n(W6e,"A",{href:!0});var UJr=s(mD);hRo=r(UJr,"RobertaForQuestionAnswering"),UJr.forEach(t),gRo=r(W6e," (RoBERTa model)"),W6e.forEach(t),pRo=i(X),Mv=n(X,"LI",{});var H6e=s(Mv);Kde=n(H6e,"STRONG",{});var JJr=s(Kde);uRo=r(JJr,"roformer"),JJr.forEach(t),_Ro=r(H6e," \u2014 "),hD=n(H6e,"A",{href:!0});var YJr=s(hD);bRo=r(YJr,"RoFormerForQuestionAnswering"),YJr.forEach(t),FRo=r(H6e," (RoFormer model)"),H6e.forEach(t),vRo=i(X),Ev=n(X,"LI",{});var U6e=s(Ev);Zde=n(U6e,"STRONG",{});var KJr=s(Zde);TRo=r(KJr,"splinter"),KJr.forEach(t),MRo=r(U6e," \u2014 "),gD=n(U6e,"A",{href:!0});var ZJr=s(gD);ERo=r(ZJr,"SplinterForQuestionAnswering"),ZJr.forEach(t),CRo=r(U6e," (Splinter model)"),U6e.forEach(t),wRo=i(X),Cv=n(X,"LI",{});var J6e=s(Cv);ece=n(J6e,"STRONG",{});var eYr=s(ece);ARo=r(eYr,"squeezebert"),eYr.forEach(t),yRo=r(J6e," \u2014 "),pD=n(J6e,"A",{href:!0});var oYr=s(pD);LRo=r(oYr,"SqueezeBertForQuestionAnswering"),oYr.forEach(t),xRo=r(J6e," (SqueezeBERT model)"),J6e.forEach(t),$Ro=i(X),wv=n(X,"LI",{});var Y6e=s(wv);oce=n(Y6e,"STRONG",{});var rYr=s(oce);kRo=r(rYr,"xlm"),rYr.forEach(t),SRo=r(Y6e," \u2014 "),uD=n(Y6e,"A",{href:!0});var tYr=s(uD);RRo=r(tYr,"XLMForQuestionAnsweringSimple"),tYr.forEach(t),BRo=r(Y6e," (XLM model)"),Y6e.forEach(t),PRo=i(X),Av=n(X,"LI",{});var K6e=s(Av);rce=n(K6e,"STRONG",{});var aYr=s(rce);IRo=r(aYr,"xlm-roberta"),aYr.forEach(t),qRo=r(K6e," \u2014 "),_D=n(K6e,"A",{href:!0});var nYr=s(_D);NRo=r(nYr,"XLMRobertaForQuestionAnswering"),nYr.forEach(t),jRo=r(K6e," (XLM-RoBERTa model)"),K6e.forEach(t),DRo=i(X),yv=n(X,"LI",{});var Z6e=s(yv);tce=n(Z6e,"STRONG",{});var sYr=s(tce);GRo=r(sYr,"xlm-roberta-xl"),sYr.forEach(t),ORo=r(Z6e," \u2014 "),bD=n(Z6e,"A",{href:!0});var lYr=s(bD);VRo=r(lYr,"XLMRobertaXLForQuestionAnswering"),lYr.forEach(t),XRo=r(Z6e," (XLM-RoBERTa-XL model)"),Z6e.forEach(t),zRo=i(X),Lv=n(X,"LI",{});var eye=s(Lv);ace=n(eye,"STRONG",{});var iYr=s(ace);QRo=r(iYr,"xlnet"),iYr.forEach(t),WRo=r(eye," \u2014 "),FD=n(eye,"A",{href:!0});var dYr=s(FD);HRo=r(dYr,"XLNetForQuestionAnsweringSimple"),dYr.forEach(t),URo=r(eye," (XLNet model)"),eye.forEach(t),JRo=i(X),xv=n(X,"LI",{});var oye=s(xv);nce=n(oye,"STRONG",{});var cYr=s(nce);YRo=r(cYr,"yoso"),cYr.forEach(t),KRo=r(oye," \u2014 "),vD=n(oye,"A",{href:!0});var fYr=s(vD);ZRo=r(fYr,"YosoForQuestionAnswering"),fYr.forEach(t),eBo=r(oye," (YOSO model)"),oye.forEach(t),X.forEach(t),oBo=i(aa),$v=n(aa,"P",{});var rye=s($v);rBo=r(rye,"The model is set in evaluation mode by default using "),sce=n(rye,"CODE",{});var mYr=s(sce);tBo=r(mYr,"model.eval()"),mYr.forEach(t),aBo=r(rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lce=n(rye,"CODE",{});var hYr=s(lce);nBo=r(hYr,"model.train()"),hYr.forEach(t),rye.forEach(t),sBo=i(aa),T(kv.$$.fragment,aa),aa.forEach(t),Ps.forEach(t),lke=i(f),Ii=n(f,"H2",{class:!0});var dRe=s(Ii);Sv=n(dRe,"A",{id:!0,class:!0,href:!0});var gYr=s(Sv);ice=n(gYr,"SPAN",{});var pYr=s(ice);T(U6.$$.fragment,pYr),pYr.forEach(t),gYr.forEach(t),lBo=i(dRe),dce=n(dRe,"SPAN",{});var uYr=s(dce);iBo=r(uYr,"AutoModelForTableQuestionAnswering"),uYr.forEach(t),dRe.forEach(t),ike=i(f),Io=n(f,"DIV",{class:!0});var Is=s(Io);T(J6.$$.fragment,Is),dBo=i(Is),qi=n(Is,"P",{});var hU=s(qi);cBo=r(hU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TD=n(hU,"A",{href:!0});var _Yr=s(TD);fBo=r(_Yr,"from_pretrained()"),_Yr.forEach(t),mBo=r(hU," class method or the "),MD=n(hU,"A",{href:!0});var bYr=s(MD);hBo=r(bYr,"from_config()"),bYr.forEach(t),gBo=r(hU,` class
method.`),hU.forEach(t),pBo=i(Is),Y6=n(Is,"P",{});var cRe=s(Y6);uBo=r(cRe,"This class cannot be instantiated directly using "),cce=n(cRe,"CODE",{});var FYr=s(cce);_Bo=r(FYr,"__init__()"),FYr.forEach(t),bBo=r(cRe," (throws an error)."),cRe.forEach(t),FBo=i(Is),it=n(Is,"DIV",{class:!0});var Zw=s(it);T(K6.$$.fragment,Zw),vBo=i(Zw),fce=n(Zw,"P",{});var vYr=s(fce);TBo=r(vYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vYr.forEach(t),MBo=i(Zw),Ni=n(Zw,"P",{});var gU=s(Ni);EBo=r(gU,`Note:
Loading a model from its configuration file does `),mce=n(gU,"STRONG",{});var TYr=s(mce);CBo=r(TYr,"not"),TYr.forEach(t),wBo=r(gU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=n(gU,"A",{href:!0});var MYr=s(ED);ABo=r(MYr,"from_pretrained()"),MYr.forEach(t),yBo=r(gU," to load the model weights."),gU.forEach(t),LBo=i(Zw),T(Rv.$$.fragment,Zw),Zw.forEach(t),xBo=i(Is),oo=n(Is,"DIV",{class:!0});var na=s(oo);T(Z6.$$.fragment,na),$Bo=i(na),hce=n(na,"P",{});var EYr=s(hce);kBo=r(EYr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),EYr.forEach(t),SBo=i(na),Sa=n(na,"P",{});var eA=s(Sa);RBo=r(eA,"The model class to instantiate is selected based on the "),gce=n(eA,"CODE",{});var CYr=s(gce);BBo=r(CYr,"model_type"),CYr.forEach(t),PBo=r(eA,` property of the config object (either
passed as an argument or loaded from `),pce=n(eA,"CODE",{});var wYr=s(pce);IBo=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),qBo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=n(eA,"CODE",{});var AYr=s(uce);NBo=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),jBo=r(eA,":"),eA.forEach(t),DBo=i(na),_ce=n(na,"UL",{});var yYr=s(_ce);Bv=n(yYr,"LI",{});var tye=s(Bv);bce=n(tye,"STRONG",{});var LYr=s(bce);GBo=r(LYr,"tapas"),LYr.forEach(t),OBo=r(tye," \u2014 "),CD=n(tye,"A",{href:!0});var xYr=s(CD);VBo=r(xYr,"TapasForQuestionAnswering"),xYr.forEach(t),XBo=r(tye," (TAPAS model)"),tye.forEach(t),yYr.forEach(t),zBo=i(na),Pv=n(na,"P",{});var aye=s(Pv);QBo=r(aye,"The model is set in evaluation mode by default using "),Fce=n(aye,"CODE",{});var $Yr=s(Fce);WBo=r($Yr,"model.eval()"),$Yr.forEach(t),HBo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(aye,"CODE",{});var kYr=s(vce);UBo=r(kYr,"model.train()"),kYr.forEach(t),aye.forEach(t),JBo=i(na),T(Iv.$$.fragment,na),na.forEach(t),Is.forEach(t),dke=i(f),ji=n(f,"H2",{class:!0});var fRe=s(ji);qv=n(fRe,"A",{id:!0,class:!0,href:!0});var SYr=s(qv);Tce=n(SYr,"SPAN",{});var RYr=s(Tce);T(ey.$$.fragment,RYr),RYr.forEach(t),SYr.forEach(t),YBo=i(fRe),Mce=n(fRe,"SPAN",{});var BYr=s(Mce);KBo=r(BYr,"AutoModelForImageClassification"),BYr.forEach(t),fRe.forEach(t),cke=i(f),qo=n(f,"DIV",{class:!0});var qs=s(qo);T(oy.$$.fragment,qs),ZBo=i(qs),Di=n(qs,"P",{});var pU=s(Di);ePo=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wD=n(pU,"A",{href:!0});var PYr=s(wD);oPo=r(PYr,"from_pretrained()"),PYr.forEach(t),rPo=r(pU," class method or the "),AD=n(pU,"A",{href:!0});var IYr=s(AD);tPo=r(IYr,"from_config()"),IYr.forEach(t),aPo=r(pU,` class
method.`),pU.forEach(t),nPo=i(qs),ry=n(qs,"P",{});var mRe=s(ry);sPo=r(mRe,"This class cannot be instantiated directly using "),Ece=n(mRe,"CODE",{});var qYr=s(Ece);lPo=r(qYr,"__init__()"),qYr.forEach(t),iPo=r(mRe," (throws an error)."),mRe.forEach(t),dPo=i(qs),dt=n(qs,"DIV",{class:!0});var oA=s(dt);T(ty.$$.fragment,oA),cPo=i(oA),Cce=n(oA,"P",{});var NYr=s(Cce);fPo=r(NYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NYr.forEach(t),mPo=i(oA),Gi=n(oA,"P",{});var uU=s(Gi);hPo=r(uU,`Note:
Loading a model from its configuration file does `),wce=n(uU,"STRONG",{});var jYr=s(wce);gPo=r(jYr,"not"),jYr.forEach(t),pPo=r(uU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yD=n(uU,"A",{href:!0});var DYr=s(yD);uPo=r(DYr,"from_pretrained()"),DYr.forEach(t),_Po=r(uU," to load the model weights."),uU.forEach(t),bPo=i(oA),T(Nv.$$.fragment,oA),oA.forEach(t),FPo=i(qs),ro=n(qs,"DIV",{class:!0});var sa=s(ro);T(ay.$$.fragment,sa),vPo=i(sa),Ace=n(sa,"P",{});var GYr=s(Ace);TPo=r(GYr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GYr.forEach(t),MPo=i(sa),Ra=n(sa,"P",{});var rA=s(Ra);EPo=r(rA,"The model class to instantiate is selected based on the "),yce=n(rA,"CODE",{});var OYr=s(yce);CPo=r(OYr,"model_type"),OYr.forEach(t),wPo=r(rA,` property of the config object (either
passed as an argument or loaded from `),Lce=n(rA,"CODE",{});var VYr=s(Lce);APo=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),yPo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(rA,"CODE",{});var XYr=s(xce);LPo=r(XYr,"pretrained_model_name_or_path"),XYr.forEach(t),xPo=r(rA,":"),rA.forEach(t),$Po=i(sa),Fe=n(sa,"UL",{});var ye=s(Fe);jv=n(ye,"LI",{});var nye=s(jv);$ce=n(nye,"STRONG",{});var zYr=s($ce);kPo=r(zYr,"beit"),zYr.forEach(t),SPo=r(nye," \u2014 "),LD=n(nye,"A",{href:!0});var QYr=s(LD);RPo=r(QYr,"BeitForImageClassification"),QYr.forEach(t),BPo=r(nye," (BEiT model)"),nye.forEach(t),PPo=i(ye),Dv=n(ye,"LI",{});var sye=s(Dv);kce=n(sye,"STRONG",{});var WYr=s(kce);IPo=r(WYr,"convnext"),WYr.forEach(t),qPo=r(sye," \u2014 "),xD=n(sye,"A",{href:!0});var HYr=s(xD);NPo=r(HYr,"ConvNextForImageClassification"),HYr.forEach(t),jPo=r(sye," (ConvNext model)"),sye.forEach(t),DPo=i(ye),Fs=n(ye,"LI",{});var x7=s(Fs);Sce=n(x7,"STRONG",{});var UYr=s(Sce);GPo=r(UYr,"deit"),UYr.forEach(t),OPo=r(x7," \u2014 "),$D=n(x7,"A",{href:!0});var JYr=s($D);VPo=r(JYr,"DeiTForImageClassification"),JYr.forEach(t),XPo=r(x7," or "),kD=n(x7,"A",{href:!0});var YYr=s(kD);zPo=r(YYr,"DeiTForImageClassificationWithTeacher"),YYr.forEach(t),QPo=r(x7," (DeiT model)"),x7.forEach(t),WPo=i(ye),Gv=n(ye,"LI",{});var lye=s(Gv);Rce=n(lye,"STRONG",{});var KYr=s(Rce);HPo=r(KYr,"imagegpt"),KYr.forEach(t),UPo=r(lye," \u2014 "),SD=n(lye,"A",{href:!0});var ZYr=s(SD);JPo=r(ZYr,"ImageGPTForImageClassification"),ZYr.forEach(t),YPo=r(lye," (ImageGPT model)"),lye.forEach(t),KPo=i(ye),ct=n(ye,"LI",{});var zc=s(ct);Bce=n(zc,"STRONG",{});var eKr=s(Bce);ZPo=r(eKr,"perceiver"),eKr.forEach(t),eIo=r(zc," \u2014 "),RD=n(zc,"A",{href:!0});var oKr=s(RD);oIo=r(oKr,"PerceiverForImageClassificationLearned"),oKr.forEach(t),rIo=r(zc," or "),BD=n(zc,"A",{href:!0});var rKr=s(BD);tIo=r(rKr,"PerceiverForImageClassificationFourier"),rKr.forEach(t),aIo=r(zc," or "),PD=n(zc,"A",{href:!0});var tKr=s(PD);nIo=r(tKr,"PerceiverForImageClassificationConvProcessing"),tKr.forEach(t),sIo=r(zc," (Perceiver model)"),zc.forEach(t),lIo=i(ye),Ov=n(ye,"LI",{});var iye=s(Ov);Pce=n(iye,"STRONG",{});var aKr=s(Pce);iIo=r(aKr,"poolformer"),aKr.forEach(t),dIo=r(iye," \u2014 "),ID=n(iye,"A",{href:!0});var nKr=s(ID);cIo=r(nKr,"PoolFormerForImageClassification"),nKr.forEach(t),fIo=r(iye," (PoolFormer model)"),iye.forEach(t),mIo=i(ye),Vv=n(ye,"LI",{});var dye=s(Vv);Ice=n(dye,"STRONG",{});var sKr=s(Ice);hIo=r(sKr,"resnet"),sKr.forEach(t),gIo=r(dye," \u2014 "),qD=n(dye,"A",{href:!0});var lKr=s(qD);pIo=r(lKr,"ResNetForImageClassification"),lKr.forEach(t),uIo=r(dye," (ResNet model)"),dye.forEach(t),_Io=i(ye),Xv=n(ye,"LI",{});var cye=s(Xv);qce=n(cye,"STRONG",{});var iKr=s(qce);bIo=r(iKr,"segformer"),iKr.forEach(t),FIo=r(cye," \u2014 "),ND=n(cye,"A",{href:!0});var dKr=s(ND);vIo=r(dKr,"SegformerForImageClassification"),dKr.forEach(t),TIo=r(cye," (SegFormer model)"),cye.forEach(t),MIo=i(ye),zv=n(ye,"LI",{});var fye=s(zv);Nce=n(fye,"STRONG",{});var cKr=s(Nce);EIo=r(cKr,"swin"),cKr.forEach(t),CIo=r(fye," \u2014 "),jD=n(fye,"A",{href:!0});var fKr=s(jD);wIo=r(fKr,"SwinForImageClassification"),fKr.forEach(t),AIo=r(fye," (Swin model)"),fye.forEach(t),yIo=i(ye),Qv=n(ye,"LI",{});var mye=s(Qv);jce=n(mye,"STRONG",{});var mKr=s(jce);LIo=r(mKr,"van"),mKr.forEach(t),xIo=r(mye," \u2014 "),DD=n(mye,"A",{href:!0});var hKr=s(DD);$Io=r(hKr,"VanForImageClassification"),hKr.forEach(t),kIo=r(mye," (VAN model)"),mye.forEach(t),SIo=i(ye),Wv=n(ye,"LI",{});var hye=s(Wv);Dce=n(hye,"STRONG",{});var gKr=s(Dce);RIo=r(gKr,"vit"),gKr.forEach(t),BIo=r(hye," \u2014 "),GD=n(hye,"A",{href:!0});var pKr=s(GD);PIo=r(pKr,"ViTForImageClassification"),pKr.forEach(t),IIo=r(hye," (ViT model)"),hye.forEach(t),ye.forEach(t),qIo=i(sa),Hv=n(sa,"P",{});var gye=s(Hv);NIo=r(gye,"The model is set in evaluation mode by default using "),Gce=n(gye,"CODE",{});var uKr=s(Gce);jIo=r(uKr,"model.eval()"),uKr.forEach(t),DIo=r(gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=n(gye,"CODE",{});var _Kr=s(Oce);GIo=r(_Kr,"model.train()"),_Kr.forEach(t),gye.forEach(t),OIo=i(sa),T(Uv.$$.fragment,sa),sa.forEach(t),qs.forEach(t),fke=i(f),Oi=n(f,"H2",{class:!0});var hRe=s(Oi);Jv=n(hRe,"A",{id:!0,class:!0,href:!0});var bKr=s(Jv);Vce=n(bKr,"SPAN",{});var FKr=s(Vce);T(ny.$$.fragment,FKr),FKr.forEach(t),bKr.forEach(t),VIo=i(hRe),Xce=n(hRe,"SPAN",{});var vKr=s(Xce);XIo=r(vKr,"AutoModelForVision2Seq"),vKr.forEach(t),hRe.forEach(t),mke=i(f),No=n(f,"DIV",{class:!0});var Ns=s(No);T(sy.$$.fragment,Ns),zIo=i(Ns),Vi=n(Ns,"P",{});var _U=s(Vi);QIo=r(_U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OD=n(_U,"A",{href:!0});var TKr=s(OD);WIo=r(TKr,"from_pretrained()"),TKr.forEach(t),HIo=r(_U," class method or the "),VD=n(_U,"A",{href:!0});var MKr=s(VD);UIo=r(MKr,"from_config()"),MKr.forEach(t),JIo=r(_U,` class
method.`),_U.forEach(t),YIo=i(Ns),ly=n(Ns,"P",{});var gRe=s(ly);KIo=r(gRe,"This class cannot be instantiated directly using "),zce=n(gRe,"CODE",{});var EKr=s(zce);ZIo=r(EKr,"__init__()"),EKr.forEach(t),eqo=r(gRe," (throws an error)."),gRe.forEach(t),oqo=i(Ns),ft=n(Ns,"DIV",{class:!0});var tA=s(ft);T(iy.$$.fragment,tA),rqo=i(tA),Qce=n(tA,"P",{});var CKr=s(Qce);tqo=r(CKr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CKr.forEach(t),aqo=i(tA),Xi=n(tA,"P",{});var bU=s(Xi);nqo=r(bU,`Note:
Loading a model from its configuration file does `),Wce=n(bU,"STRONG",{});var wKr=s(Wce);sqo=r(wKr,"not"),wKr.forEach(t),lqo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(bU,"A",{href:!0});var AKr=s(XD);iqo=r(AKr,"from_pretrained()"),AKr.forEach(t),dqo=r(bU," to load the model weights."),bU.forEach(t),cqo=i(tA),T(Yv.$$.fragment,tA),tA.forEach(t),fqo=i(Ns),to=n(Ns,"DIV",{class:!0});var la=s(to);T(dy.$$.fragment,la),mqo=i(la),Hce=n(la,"P",{});var yKr=s(Hce);hqo=r(yKr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yKr.forEach(t),gqo=i(la),Ba=n(la,"P",{});var aA=s(Ba);pqo=r(aA,"The model class to instantiate is selected based on the "),Uce=n(aA,"CODE",{});var LKr=s(Uce);uqo=r(LKr,"model_type"),LKr.forEach(t),_qo=r(aA,` property of the config object (either
passed as an argument or loaded from `),Jce=n(aA,"CODE",{});var xKr=s(Jce);bqo=r(xKr,"pretrained_model_name_or_path"),xKr.forEach(t),Fqo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(aA,"CODE",{});var $Kr=s(Yce);vqo=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),Tqo=r(aA,":"),aA.forEach(t),Mqo=i(la),Kce=n(la,"UL",{});var kKr=s(Kce);Kv=n(kKr,"LI",{});var pye=s(Kv);Zce=n(pye,"STRONG",{});var SKr=s(Zce);Eqo=r(SKr,"vision-encoder-decoder"),SKr.forEach(t),Cqo=r(pye," \u2014 "),zD=n(pye,"A",{href:!0});var RKr=s(zD);wqo=r(RKr,"VisionEncoderDecoderModel"),RKr.forEach(t),Aqo=r(pye," (Vision Encoder decoder model)"),pye.forEach(t),kKr.forEach(t),yqo=i(la),Zv=n(la,"P",{});var uye=s(Zv);Lqo=r(uye,"The model is set in evaluation mode by default using "),efe=n(uye,"CODE",{});var BKr=s(efe);xqo=r(BKr,"model.eval()"),BKr.forEach(t),$qo=r(uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(uye,"CODE",{});var PKr=s(ofe);kqo=r(PKr,"model.train()"),PKr.forEach(t),uye.forEach(t),Sqo=i(la),T(e1.$$.fragment,la),la.forEach(t),Ns.forEach(t),hke=i(f),zi=n(f,"H2",{class:!0});var pRe=s(zi);o1=n(pRe,"A",{id:!0,class:!0,href:!0});var IKr=s(o1);rfe=n(IKr,"SPAN",{});var qKr=s(rfe);T(cy.$$.fragment,qKr),qKr.forEach(t),IKr.forEach(t),Rqo=i(pRe),tfe=n(pRe,"SPAN",{});var NKr=s(tfe);Bqo=r(NKr,"AutoModelForAudioClassification"),NKr.forEach(t),pRe.forEach(t),gke=i(f),jo=n(f,"DIV",{class:!0});var js=s(jo);T(fy.$$.fragment,js),Pqo=i(js),Qi=n(js,"P",{});var FU=s(Qi);Iqo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QD=n(FU,"A",{href:!0});var jKr=s(QD);qqo=r(jKr,"from_pretrained()"),jKr.forEach(t),Nqo=r(FU," class method or the "),WD=n(FU,"A",{href:!0});var DKr=s(WD);jqo=r(DKr,"from_config()"),DKr.forEach(t),Dqo=r(FU,` class
method.`),FU.forEach(t),Gqo=i(js),my=n(js,"P",{});var uRe=s(my);Oqo=r(uRe,"This class cannot be instantiated directly using "),afe=n(uRe,"CODE",{});var GKr=s(afe);Vqo=r(GKr,"__init__()"),GKr.forEach(t),Xqo=r(uRe," (throws an error)."),uRe.forEach(t),zqo=i(js),mt=n(js,"DIV",{class:!0});var nA=s(mt);T(hy.$$.fragment,nA),Qqo=i(nA),nfe=n(nA,"P",{});var OKr=s(nfe);Wqo=r(OKr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),OKr.forEach(t),Hqo=i(nA),Wi=n(nA,"P",{});var vU=s(Wi);Uqo=r(vU,`Note:
Loading a model from its configuration file does `),sfe=n(vU,"STRONG",{});var VKr=s(sfe);Jqo=r(VKr,"not"),VKr.forEach(t),Yqo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(vU,"A",{href:!0});var XKr=s(HD);Kqo=r(XKr,"from_pretrained()"),XKr.forEach(t),Zqo=r(vU," to load the model weights."),vU.forEach(t),eNo=i(nA),T(r1.$$.fragment,nA),nA.forEach(t),oNo=i(js),ao=n(js,"DIV",{class:!0});var ia=s(ao);T(gy.$$.fragment,ia),rNo=i(ia),lfe=n(ia,"P",{});var zKr=s(lfe);tNo=r(zKr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zKr.forEach(t),aNo=i(ia),Pa=n(ia,"P",{});var sA=s(Pa);nNo=r(sA,"The model class to instantiate is selected based on the "),ife=n(sA,"CODE",{});var QKr=s(ife);sNo=r(QKr,"model_type"),QKr.forEach(t),lNo=r(sA,` property of the config object (either
passed as an argument or loaded from `),dfe=n(sA,"CODE",{});var WKr=s(dfe);iNo=r(WKr,"pretrained_model_name_or_path"),WKr.forEach(t),dNo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=n(sA,"CODE",{});var HKr=s(cfe);cNo=r(HKr,"pretrained_model_name_or_path"),HKr.forEach(t),fNo=r(sA,":"),sA.forEach(t),mNo=i(ia),Ie=n(ia,"UL",{});var uo=s(Ie);t1=n(uo,"LI",{});var _ye=s(t1);ffe=n(_ye,"STRONG",{});var UKr=s(ffe);hNo=r(UKr,"data2vec-audio"),UKr.forEach(t),gNo=r(_ye," \u2014 "),UD=n(_ye,"A",{href:!0});var JKr=s(UD);pNo=r(JKr,"Data2VecAudioForSequenceClassification"),JKr.forEach(t),uNo=r(_ye," (Data2VecAudio model)"),_ye.forEach(t),_No=i(uo),a1=n(uo,"LI",{});var bye=s(a1);mfe=n(bye,"STRONG",{});var YKr=s(mfe);bNo=r(YKr,"hubert"),YKr.forEach(t),FNo=r(bye," \u2014 "),JD=n(bye,"A",{href:!0});var KKr=s(JD);vNo=r(KKr,"HubertForSequenceClassification"),KKr.forEach(t),TNo=r(bye," (Hubert model)"),bye.forEach(t),MNo=i(uo),n1=n(uo,"LI",{});var Fye=s(n1);hfe=n(Fye,"STRONG",{});var ZKr=s(hfe);ENo=r(ZKr,"sew"),ZKr.forEach(t),CNo=r(Fye," \u2014 "),YD=n(Fye,"A",{href:!0});var eZr=s(YD);wNo=r(eZr,"SEWForSequenceClassification"),eZr.forEach(t),ANo=r(Fye," (SEW model)"),Fye.forEach(t),yNo=i(uo),s1=n(uo,"LI",{});var vye=s(s1);gfe=n(vye,"STRONG",{});var oZr=s(gfe);LNo=r(oZr,"sew-d"),oZr.forEach(t),xNo=r(vye," \u2014 "),KD=n(vye,"A",{href:!0});var rZr=s(KD);$No=r(rZr,"SEWDForSequenceClassification"),rZr.forEach(t),kNo=r(vye," (SEW-D model)"),vye.forEach(t),SNo=i(uo),l1=n(uo,"LI",{});var Tye=s(l1);pfe=n(Tye,"STRONG",{});var tZr=s(pfe);RNo=r(tZr,"unispeech"),tZr.forEach(t),BNo=r(Tye," \u2014 "),ZD=n(Tye,"A",{href:!0});var aZr=s(ZD);PNo=r(aZr,"UniSpeechForSequenceClassification"),aZr.forEach(t),INo=r(Tye," (UniSpeech model)"),Tye.forEach(t),qNo=i(uo),i1=n(uo,"LI",{});var Mye=s(i1);ufe=n(Mye,"STRONG",{});var nZr=s(ufe);NNo=r(nZr,"unispeech-sat"),nZr.forEach(t),jNo=r(Mye," \u2014 "),eG=n(Mye,"A",{href:!0});var sZr=s(eG);DNo=r(sZr,"UniSpeechSatForSequenceClassification"),sZr.forEach(t),GNo=r(Mye," (UniSpeechSat model)"),Mye.forEach(t),ONo=i(uo),d1=n(uo,"LI",{});var Eye=s(d1);_fe=n(Eye,"STRONG",{});var lZr=s(_fe);VNo=r(lZr,"wav2vec2"),lZr.forEach(t),XNo=r(Eye," \u2014 "),oG=n(Eye,"A",{href:!0});var iZr=s(oG);zNo=r(iZr,"Wav2Vec2ForSequenceClassification"),iZr.forEach(t),QNo=r(Eye," (Wav2Vec2 model)"),Eye.forEach(t),WNo=i(uo),c1=n(uo,"LI",{});var Cye=s(c1);bfe=n(Cye,"STRONG",{});var dZr=s(bfe);HNo=r(dZr,"wavlm"),dZr.forEach(t),UNo=r(Cye," \u2014 "),rG=n(Cye,"A",{href:!0});var cZr=s(rG);JNo=r(cZr,"WavLMForSequenceClassification"),cZr.forEach(t),YNo=r(Cye," (WavLM model)"),Cye.forEach(t),uo.forEach(t),KNo=i(ia),f1=n(ia,"P",{});var wye=s(f1);ZNo=r(wye,"The model is set in evaluation mode by default using "),Ffe=n(wye,"CODE",{});var fZr=s(Ffe);ejo=r(fZr,"model.eval()"),fZr.forEach(t),ojo=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(wye,"CODE",{});var mZr=s(vfe);rjo=r(mZr,"model.train()"),mZr.forEach(t),wye.forEach(t),tjo=i(ia),T(m1.$$.fragment,ia),ia.forEach(t),js.forEach(t),pke=i(f),Hi=n(f,"H2",{class:!0});var _Re=s(Hi);h1=n(_Re,"A",{id:!0,class:!0,href:!0});var hZr=s(h1);Tfe=n(hZr,"SPAN",{});var gZr=s(Tfe);T(py.$$.fragment,gZr),gZr.forEach(t),hZr.forEach(t),ajo=i(_Re),Mfe=n(_Re,"SPAN",{});var pZr=s(Mfe);njo=r(pZr,"AutoModelForAudioFrameClassification"),pZr.forEach(t),_Re.forEach(t),uke=i(f),Do=n(f,"DIV",{class:!0});var Ds=s(Do);T(uy.$$.fragment,Ds),sjo=i(Ds),Ui=n(Ds,"P",{});var TU=s(Ui);ljo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tG=n(TU,"A",{href:!0});var uZr=s(tG);ijo=r(uZr,"from_pretrained()"),uZr.forEach(t),djo=r(TU," class method or the "),aG=n(TU,"A",{href:!0});var _Zr=s(aG);cjo=r(_Zr,"from_config()"),_Zr.forEach(t),fjo=r(TU,` class
method.`),TU.forEach(t),mjo=i(Ds),_y=n(Ds,"P",{});var bRe=s(_y);hjo=r(bRe,"This class cannot be instantiated directly using "),Efe=n(bRe,"CODE",{});var bZr=s(Efe);gjo=r(bZr,"__init__()"),bZr.forEach(t),pjo=r(bRe," (throws an error)."),bRe.forEach(t),ujo=i(Ds),ht=n(Ds,"DIV",{class:!0});var lA=s(ht);T(by.$$.fragment,lA),_jo=i(lA),Cfe=n(lA,"P",{});var FZr=s(Cfe);bjo=r(FZr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),FZr.forEach(t),Fjo=i(lA),Ji=n(lA,"P",{});var MU=s(Ji);vjo=r(MU,`Note:
Loading a model from its configuration file does `),wfe=n(MU,"STRONG",{});var vZr=s(wfe);Tjo=r(vZr,"not"),vZr.forEach(t),Mjo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(MU,"A",{href:!0});var TZr=s(nG);Ejo=r(TZr,"from_pretrained()"),TZr.forEach(t),Cjo=r(MU," to load the model weights."),MU.forEach(t),wjo=i(lA),T(g1.$$.fragment,lA),lA.forEach(t),Ajo=i(Ds),no=n(Ds,"DIV",{class:!0});var da=s(no);T(Fy.$$.fragment,da),yjo=i(da),Afe=n(da,"P",{});var MZr=s(Afe);Ljo=r(MZr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MZr.forEach(t),xjo=i(da),Ia=n(da,"P",{});var iA=s(Ia);$jo=r(iA,"The model class to instantiate is selected based on the "),yfe=n(iA,"CODE",{});var EZr=s(yfe);kjo=r(EZr,"model_type"),EZr.forEach(t),Sjo=r(iA,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(iA,"CODE",{});var CZr=s(Lfe);Rjo=r(CZr,"pretrained_model_name_or_path"),CZr.forEach(t),Bjo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=n(iA,"CODE",{});var wZr=s(xfe);Pjo=r(wZr,"pretrained_model_name_or_path"),wZr.forEach(t),Ijo=r(iA,":"),iA.forEach(t),qjo=i(da),qa=n(da,"UL",{});var dA=s(qa);p1=n(dA,"LI",{});var Aye=s(p1);$fe=n(Aye,"STRONG",{});var AZr=s($fe);Njo=r(AZr,"data2vec-audio"),AZr.forEach(t),jjo=r(Aye," \u2014 "),sG=n(Aye,"A",{href:!0});var yZr=s(sG);Djo=r(yZr,"Data2VecAudioForAudioFrameClassification"),yZr.forEach(t),Gjo=r(Aye," (Data2VecAudio model)"),Aye.forEach(t),Ojo=i(dA),u1=n(dA,"LI",{});var yye=s(u1);kfe=n(yye,"STRONG",{});var LZr=s(kfe);Vjo=r(LZr,"unispeech-sat"),LZr.forEach(t),Xjo=r(yye," \u2014 "),lG=n(yye,"A",{href:!0});var xZr=s(lG);zjo=r(xZr,"UniSpeechSatForAudioFrameClassification"),xZr.forEach(t),Qjo=r(yye," (UniSpeechSat model)"),yye.forEach(t),Wjo=i(dA),_1=n(dA,"LI",{});var Lye=s(_1);Sfe=n(Lye,"STRONG",{});var $Zr=s(Sfe);Hjo=r($Zr,"wav2vec2"),$Zr.forEach(t),Ujo=r(Lye," \u2014 "),iG=n(Lye,"A",{href:!0});var kZr=s(iG);Jjo=r(kZr,"Wav2Vec2ForAudioFrameClassification"),kZr.forEach(t),Yjo=r(Lye," (Wav2Vec2 model)"),Lye.forEach(t),Kjo=i(dA),b1=n(dA,"LI",{});var xye=s(b1);Rfe=n(xye,"STRONG",{});var SZr=s(Rfe);Zjo=r(SZr,"wavlm"),SZr.forEach(t),eDo=r(xye," \u2014 "),dG=n(xye,"A",{href:!0});var RZr=s(dG);oDo=r(RZr,"WavLMForAudioFrameClassification"),RZr.forEach(t),rDo=r(xye," (WavLM model)"),xye.forEach(t),dA.forEach(t),tDo=i(da),F1=n(da,"P",{});var $ye=s(F1);aDo=r($ye,"The model is set in evaluation mode by default using "),Bfe=n($ye,"CODE",{});var BZr=s(Bfe);nDo=r(BZr,"model.eval()"),BZr.forEach(t),sDo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=n($ye,"CODE",{});var PZr=s(Pfe);lDo=r(PZr,"model.train()"),PZr.forEach(t),$ye.forEach(t),iDo=i(da),T(v1.$$.fragment,da),da.forEach(t),Ds.forEach(t),_ke=i(f),Yi=n(f,"H2",{class:!0});var FRe=s(Yi);T1=n(FRe,"A",{id:!0,class:!0,href:!0});var IZr=s(T1);Ife=n(IZr,"SPAN",{});var qZr=s(Ife);T(vy.$$.fragment,qZr),qZr.forEach(t),IZr.forEach(t),dDo=i(FRe),qfe=n(FRe,"SPAN",{});var NZr=s(qfe);cDo=r(NZr,"AutoModelForCTC"),NZr.forEach(t),FRe.forEach(t),bke=i(f),Go=n(f,"DIV",{class:!0});var Gs=s(Go);T(Ty.$$.fragment,Gs),fDo=i(Gs),Ki=n(Gs,"P",{});var EU=s(Ki);mDo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cG=n(EU,"A",{href:!0});var jZr=s(cG);hDo=r(jZr,"from_pretrained()"),jZr.forEach(t),gDo=r(EU," class method or the "),fG=n(EU,"A",{href:!0});var DZr=s(fG);pDo=r(DZr,"from_config()"),DZr.forEach(t),uDo=r(EU,` class
method.`),EU.forEach(t),_Do=i(Gs),My=n(Gs,"P",{});var vRe=s(My);bDo=r(vRe,"This class cannot be instantiated directly using "),Nfe=n(vRe,"CODE",{});var GZr=s(Nfe);FDo=r(GZr,"__init__()"),GZr.forEach(t),vDo=r(vRe," (throws an error)."),vRe.forEach(t),TDo=i(Gs),gt=n(Gs,"DIV",{class:!0});var cA=s(gt);T(Ey.$$.fragment,cA),MDo=i(cA),jfe=n(cA,"P",{});var OZr=s(jfe);EDo=r(OZr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),OZr.forEach(t),CDo=i(cA),Zi=n(cA,"P",{});var CU=s(Zi);wDo=r(CU,`Note:
Loading a model from its configuration file does `),Dfe=n(CU,"STRONG",{});var VZr=s(Dfe);ADo=r(VZr,"not"),VZr.forEach(t),yDo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n(CU,"A",{href:!0});var XZr=s(mG);LDo=r(XZr,"from_pretrained()"),XZr.forEach(t),xDo=r(CU," to load the model weights."),CU.forEach(t),$Do=i(cA),T(M1.$$.fragment,cA),cA.forEach(t),kDo=i(Gs),so=n(Gs,"DIV",{class:!0});var ca=s(so);T(Cy.$$.fragment,ca),SDo=i(ca),Gfe=n(ca,"P",{});var zZr=s(Gfe);RDo=r(zZr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zZr.forEach(t),BDo=i(ca),Na=n(ca,"P",{});var fA=s(Na);PDo=r(fA,"The model class to instantiate is selected based on the "),Ofe=n(fA,"CODE",{});var QZr=s(Ofe);IDo=r(QZr,"model_type"),QZr.forEach(t),qDo=r(fA,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(fA,"CODE",{});var WZr=s(Vfe);NDo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),jDo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(fA,"CODE",{});var HZr=s(Xfe);DDo=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),GDo=r(fA,":"),fA.forEach(t),ODo=i(ca),qe=n(ca,"UL",{});var _o=s(qe);E1=n(_o,"LI",{});var kye=s(E1);zfe=n(kye,"STRONG",{});var UZr=s(zfe);VDo=r(UZr,"data2vec-audio"),UZr.forEach(t),XDo=r(kye," \u2014 "),hG=n(kye,"A",{href:!0});var JZr=s(hG);zDo=r(JZr,"Data2VecAudioForCTC"),JZr.forEach(t),QDo=r(kye," (Data2VecAudio model)"),kye.forEach(t),WDo=i(_o),C1=n(_o,"LI",{});var Sye=s(C1);Qfe=n(Sye,"STRONG",{});var YZr=s(Qfe);HDo=r(YZr,"hubert"),YZr.forEach(t),UDo=r(Sye," \u2014 "),gG=n(Sye,"A",{href:!0});var KZr=s(gG);JDo=r(KZr,"HubertForCTC"),KZr.forEach(t),YDo=r(Sye," (Hubert model)"),Sye.forEach(t),KDo=i(_o),w1=n(_o,"LI",{});var Rye=s(w1);Wfe=n(Rye,"STRONG",{});var ZZr=s(Wfe);ZDo=r(ZZr,"sew"),ZZr.forEach(t),eGo=r(Rye," \u2014 "),pG=n(Rye,"A",{href:!0});var eet=s(pG);oGo=r(eet,"SEWForCTC"),eet.forEach(t),rGo=r(Rye," (SEW model)"),Rye.forEach(t),tGo=i(_o),A1=n(_o,"LI",{});var Bye=s(A1);Hfe=n(Bye,"STRONG",{});var oet=s(Hfe);aGo=r(oet,"sew-d"),oet.forEach(t),nGo=r(Bye," \u2014 "),uG=n(Bye,"A",{href:!0});var ret=s(uG);sGo=r(ret,"SEWDForCTC"),ret.forEach(t),lGo=r(Bye," (SEW-D model)"),Bye.forEach(t),iGo=i(_o),y1=n(_o,"LI",{});var Pye=s(y1);Ufe=n(Pye,"STRONG",{});var tet=s(Ufe);dGo=r(tet,"unispeech"),tet.forEach(t),cGo=r(Pye," \u2014 "),_G=n(Pye,"A",{href:!0});var aet=s(_G);fGo=r(aet,"UniSpeechForCTC"),aet.forEach(t),mGo=r(Pye," (UniSpeech model)"),Pye.forEach(t),hGo=i(_o),L1=n(_o,"LI",{});var Iye=s(L1);Jfe=n(Iye,"STRONG",{});var net=s(Jfe);gGo=r(net,"unispeech-sat"),net.forEach(t),pGo=r(Iye," \u2014 "),bG=n(Iye,"A",{href:!0});var set=s(bG);uGo=r(set,"UniSpeechSatForCTC"),set.forEach(t),_Go=r(Iye," (UniSpeechSat model)"),Iye.forEach(t),bGo=i(_o),x1=n(_o,"LI",{});var qye=s(x1);Yfe=n(qye,"STRONG",{});var iet=s(Yfe);FGo=r(iet,"wav2vec2"),iet.forEach(t),vGo=r(qye," \u2014 "),FG=n(qye,"A",{href:!0});var det=s(FG);TGo=r(det,"Wav2Vec2ForCTC"),det.forEach(t),MGo=r(qye," (Wav2Vec2 model)"),qye.forEach(t),EGo=i(_o),$1=n(_o,"LI",{});var Nye=s($1);Kfe=n(Nye,"STRONG",{});var cet=s(Kfe);CGo=r(cet,"wavlm"),cet.forEach(t),wGo=r(Nye," \u2014 "),vG=n(Nye,"A",{href:!0});var fet=s(vG);AGo=r(fet,"WavLMForCTC"),fet.forEach(t),yGo=r(Nye," (WavLM model)"),Nye.forEach(t),_o.forEach(t),LGo=i(ca),k1=n(ca,"P",{});var jye=s(k1);xGo=r(jye,"The model is set in evaluation mode by default using "),Zfe=n(jye,"CODE",{});var met=s(Zfe);$Go=r(met,"model.eval()"),met.forEach(t),kGo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(jye,"CODE",{});var het=s(eme);SGo=r(het,"model.train()"),het.forEach(t),jye.forEach(t),RGo=i(ca),T(S1.$$.fragment,ca),ca.forEach(t),Gs.forEach(t),Fke=i(f),ed=n(f,"H2",{class:!0});var TRe=s(ed);R1=n(TRe,"A",{id:!0,class:!0,href:!0});var get=s(R1);ome=n(get,"SPAN",{});var pet=s(ome);T(wy.$$.fragment,pet),pet.forEach(t),get.forEach(t),BGo=i(TRe),rme=n(TRe,"SPAN",{});var uet=s(rme);PGo=r(uet,"AutoModelForSpeechSeq2Seq"),uet.forEach(t),TRe.forEach(t),vke=i(f),Oo=n(f,"DIV",{class:!0});var Os=s(Oo);T(Ay.$$.fragment,Os),IGo=i(Os),od=n(Os,"P",{});var wU=s(od);qGo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TG=n(wU,"A",{href:!0});var _et=s(TG);NGo=r(_et,"from_pretrained()"),_et.forEach(t),jGo=r(wU," class method or the "),MG=n(wU,"A",{href:!0});var bet=s(MG);DGo=r(bet,"from_config()"),bet.forEach(t),GGo=r(wU,` class
method.`),wU.forEach(t),OGo=i(Os),yy=n(Os,"P",{});var MRe=s(yy);VGo=r(MRe,"This class cannot be instantiated directly using "),tme=n(MRe,"CODE",{});var Fet=s(tme);XGo=r(Fet,"__init__()"),Fet.forEach(t),zGo=r(MRe," (throws an error)."),MRe.forEach(t),QGo=i(Os),pt=n(Os,"DIV",{class:!0});var mA=s(pt);T(Ly.$$.fragment,mA),WGo=i(mA),ame=n(mA,"P",{});var vet=s(ame);HGo=r(vet,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vet.forEach(t),UGo=i(mA),rd=n(mA,"P",{});var AU=s(rd);JGo=r(AU,`Note:
Loading a model from its configuration file does `),nme=n(AU,"STRONG",{});var Tet=s(nme);YGo=r(Tet,"not"),Tet.forEach(t),KGo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(AU,"A",{href:!0});var Met=s(EG);ZGo=r(Met,"from_pretrained()"),Met.forEach(t),eOo=r(AU," to load the model weights."),AU.forEach(t),oOo=i(mA),T(B1.$$.fragment,mA),mA.forEach(t),rOo=i(Os),lo=n(Os,"DIV",{class:!0});var fa=s(lo);T(xy.$$.fragment,fa),tOo=i(fa),sme=n(fa,"P",{});var Eet=s(sme);aOo=r(Eet,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Eet.forEach(t),nOo=i(fa),ja=n(fa,"P",{});var hA=s(ja);sOo=r(hA,"The model class to instantiate is selected based on the "),lme=n(hA,"CODE",{});var Cet=s(lme);lOo=r(Cet,"model_type"),Cet.forEach(t),iOo=r(hA,` property of the config object (either
passed as an argument or loaded from `),ime=n(hA,"CODE",{});var wet=s(ime);dOo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),cOo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(hA,"CODE",{});var Aet=s(dme);fOo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),mOo=r(hA,":"),hA.forEach(t),hOo=i(fa),$y=n(fa,"UL",{});var ERe=s($y);P1=n(ERe,"LI",{});var Dye=s(P1);cme=n(Dye,"STRONG",{});var yet=s(cme);gOo=r(yet,"speech-encoder-decoder"),yet.forEach(t),pOo=r(Dye," \u2014 "),CG=n(Dye,"A",{href:!0});var Let=s(CG);uOo=r(Let,"SpeechEncoderDecoderModel"),Let.forEach(t),_Oo=r(Dye," (Speech Encoder decoder model)"),Dye.forEach(t),bOo=i(ERe),I1=n(ERe,"LI",{});var Gye=s(I1);fme=n(Gye,"STRONG",{});var xet=s(fme);FOo=r(xet,"speech_to_text"),xet.forEach(t),vOo=r(Gye," \u2014 "),wG=n(Gye,"A",{href:!0});var $et=s(wG);TOo=r($et,"Speech2TextForConditionalGeneration"),$et.forEach(t),MOo=r(Gye," (Speech2Text model)"),Gye.forEach(t),ERe.forEach(t),EOo=i(fa),q1=n(fa,"P",{});var Oye=s(q1);COo=r(Oye,"The model is set in evaluation mode by default using "),mme=n(Oye,"CODE",{});var ket=s(mme);wOo=r(ket,"model.eval()"),ket.forEach(t),AOo=r(Oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=n(Oye,"CODE",{});var Set=s(hme);yOo=r(Set,"model.train()"),Set.forEach(t),Oye.forEach(t),LOo=i(fa),T(N1.$$.fragment,fa),fa.forEach(t),Os.forEach(t),Tke=i(f),td=n(f,"H2",{class:!0});var CRe=s(td);j1=n(CRe,"A",{id:!0,class:!0,href:!0});var Ret=s(j1);gme=n(Ret,"SPAN",{});var Bet=s(gme);T(ky.$$.fragment,Bet),Bet.forEach(t),Ret.forEach(t),xOo=i(CRe),pme=n(CRe,"SPAN",{});var Pet=s(pme);$Oo=r(Pet,"AutoModelForAudioXVector"),Pet.forEach(t),CRe.forEach(t),Mke=i(f),Vo=n(f,"DIV",{class:!0});var Vs=s(Vo);T(Sy.$$.fragment,Vs),kOo=i(Vs),ad=n(Vs,"P",{});var yU=s(ad);SOo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AG=n(yU,"A",{href:!0});var Iet=s(AG);ROo=r(Iet,"from_pretrained()"),Iet.forEach(t),BOo=r(yU," class method or the "),yG=n(yU,"A",{href:!0});var qet=s(yG);POo=r(qet,"from_config()"),qet.forEach(t),IOo=r(yU,` class
method.`),yU.forEach(t),qOo=i(Vs),Ry=n(Vs,"P",{});var wRe=s(Ry);NOo=r(wRe,"This class cannot be instantiated directly using "),ume=n(wRe,"CODE",{});var Net=s(ume);jOo=r(Net,"__init__()"),Net.forEach(t),DOo=r(wRe," (throws an error)."),wRe.forEach(t),GOo=i(Vs),ut=n(Vs,"DIV",{class:!0});var gA=s(ut);T(By.$$.fragment,gA),OOo=i(gA),_me=n(gA,"P",{});var jet=s(_me);VOo=r(jet,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jet.forEach(t),XOo=i(gA),nd=n(gA,"P",{});var LU=s(nd);zOo=r(LU,`Note:
Loading a model from its configuration file does `),bme=n(LU,"STRONG",{});var Det=s(bme);QOo=r(Det,"not"),Det.forEach(t),WOo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(LU,"A",{href:!0});var Get=s(LG);HOo=r(Get,"from_pretrained()"),Get.forEach(t),UOo=r(LU," to load the model weights."),LU.forEach(t),JOo=i(gA),T(D1.$$.fragment,gA),gA.forEach(t),YOo=i(Vs),io=n(Vs,"DIV",{class:!0});var ma=s(io);T(Py.$$.fragment,ma),KOo=i(ma),Fme=n(ma,"P",{});var Oet=s(Fme);ZOo=r(Oet,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Oet.forEach(t),eVo=i(ma),Da=n(ma,"P",{});var pA=s(Da);oVo=r(pA,"The model class to instantiate is selected based on the "),vme=n(pA,"CODE",{});var Vet=s(vme);rVo=r(Vet,"model_type"),Vet.forEach(t),tVo=r(pA,` property of the config object (either
passed as an argument or loaded from `),Tme=n(pA,"CODE",{});var Xet=s(Tme);aVo=r(Xet,"pretrained_model_name_or_path"),Xet.forEach(t),nVo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(pA,"CODE",{});var zet=s(Mme);sVo=r(zet,"pretrained_model_name_or_path"),zet.forEach(t),lVo=r(pA,":"),pA.forEach(t),iVo=i(ma),Ga=n(ma,"UL",{});var uA=s(Ga);G1=n(uA,"LI",{});var Vye=s(G1);Eme=n(Vye,"STRONG",{});var Qet=s(Eme);dVo=r(Qet,"data2vec-audio"),Qet.forEach(t),cVo=r(Vye," \u2014 "),xG=n(Vye,"A",{href:!0});var Wet=s(xG);fVo=r(Wet,"Data2VecAudioForXVector"),Wet.forEach(t),mVo=r(Vye," (Data2VecAudio model)"),Vye.forEach(t),hVo=i(uA),O1=n(uA,"LI",{});var Xye=s(O1);Cme=n(Xye,"STRONG",{});var Het=s(Cme);gVo=r(Het,"unispeech-sat"),Het.forEach(t),pVo=r(Xye," \u2014 "),$G=n(Xye,"A",{href:!0});var Uet=s($G);uVo=r(Uet,"UniSpeechSatForXVector"),Uet.forEach(t),_Vo=r(Xye," (UniSpeechSat model)"),Xye.forEach(t),bVo=i(uA),V1=n(uA,"LI",{});var zye=s(V1);wme=n(zye,"STRONG",{});var Jet=s(wme);FVo=r(Jet,"wav2vec2"),Jet.forEach(t),vVo=r(zye," \u2014 "),kG=n(zye,"A",{href:!0});var Yet=s(kG);TVo=r(Yet,"Wav2Vec2ForXVector"),Yet.forEach(t),MVo=r(zye," (Wav2Vec2 model)"),zye.forEach(t),EVo=i(uA),X1=n(uA,"LI",{});var Qye=s(X1);Ame=n(Qye,"STRONG",{});var Ket=s(Ame);CVo=r(Ket,"wavlm"),Ket.forEach(t),wVo=r(Qye," \u2014 "),SG=n(Qye,"A",{href:!0});var Zet=s(SG);AVo=r(Zet,"WavLMForXVector"),Zet.forEach(t),yVo=r(Qye," (WavLM model)"),Qye.forEach(t),uA.forEach(t),LVo=i(ma),z1=n(ma,"P",{});var Wye=s(z1);xVo=r(Wye,"The model is set in evaluation mode by default using "),yme=n(Wye,"CODE",{});var eot=s(yme);$Vo=r(eot,"model.eval()"),eot.forEach(t),kVo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(Wye,"CODE",{});var oot=s(Lme);SVo=r(oot,"model.train()"),oot.forEach(t),Wye.forEach(t),RVo=i(ma),T(Q1.$$.fragment,ma),ma.forEach(t),Vs.forEach(t),Eke=i(f),sd=n(f,"H2",{class:!0});var ARe=s(sd);W1=n(ARe,"A",{id:!0,class:!0,href:!0});var rot=s(W1);xme=n(rot,"SPAN",{});var tot=s(xme);T(Iy.$$.fragment,tot),tot.forEach(t),rot.forEach(t),BVo=i(ARe),$me=n(ARe,"SPAN",{});var aot=s($me);PVo=r(aot,"AutoModelForMaskedImageModeling"),aot.forEach(t),ARe.forEach(t),Cke=i(f),Xo=n(f,"DIV",{class:!0});var Xs=s(Xo);T(qy.$$.fragment,Xs),IVo=i(Xs),ld=n(Xs,"P",{});var xU=s(ld);qVo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RG=n(xU,"A",{href:!0});var not=s(RG);NVo=r(not,"from_pretrained()"),not.forEach(t),jVo=r(xU," class method or the "),BG=n(xU,"A",{href:!0});var sot=s(BG);DVo=r(sot,"from_config()"),sot.forEach(t),GVo=r(xU,` class
method.`),xU.forEach(t),OVo=i(Xs),Ny=n(Xs,"P",{});var yRe=s(Ny);VVo=r(yRe,"This class cannot be instantiated directly using "),kme=n(yRe,"CODE",{});var lot=s(kme);XVo=r(lot,"__init__()"),lot.forEach(t),zVo=r(yRe," (throws an error)."),yRe.forEach(t),QVo=i(Xs),_t=n(Xs,"DIV",{class:!0});var _A=s(_t);T(jy.$$.fragment,_A),WVo=i(_A),Sme=n(_A,"P",{});var iot=s(Sme);HVo=r(iot,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),iot.forEach(t),UVo=i(_A),id=n(_A,"P",{});var $U=s(id);JVo=r($U,`Note:
Loading a model from its configuration file does `),Rme=n($U,"STRONG",{});var dot=s(Rme);YVo=r(dot,"not"),dot.forEach(t),KVo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n($U,"A",{href:!0});var cot=s(PG);ZVo=r(cot,"from_pretrained()"),cot.forEach(t),eXo=r($U," to load the model weights."),$U.forEach(t),oXo=i(_A),T(H1.$$.fragment,_A),_A.forEach(t),rXo=i(Xs),co=n(Xs,"DIV",{class:!0});var ha=s(co);T(Dy.$$.fragment,ha),tXo=i(ha),Bme=n(ha,"P",{});var fot=s(Bme);aXo=r(fot,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fot.forEach(t),nXo=i(ha),Oa=n(ha,"P",{});var bA=s(Oa);sXo=r(bA,"The model class to instantiate is selected based on the "),Pme=n(bA,"CODE",{});var mot=s(Pme);lXo=r(mot,"model_type"),mot.forEach(t),iXo=r(bA,` property of the config object (either
passed as an argument or loaded from `),Ime=n(bA,"CODE",{});var hot=s(Ime);dXo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),cXo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(bA,"CODE",{});var got=s(qme);fXo=r(got,"pretrained_model_name_or_path"),got.forEach(t),mXo=r(bA,":"),bA.forEach(t),hXo=i(ha),dd=n(ha,"UL",{});var kU=s(dd);U1=n(kU,"LI",{});var Hye=s(U1);Nme=n(Hye,"STRONG",{});var pot=s(Nme);gXo=r(pot,"deit"),pot.forEach(t),pXo=r(Hye," \u2014 "),IG=n(Hye,"A",{href:!0});var uot=s(IG);uXo=r(uot,"DeiTForMaskedImageModeling"),uot.forEach(t),_Xo=r(Hye," (DeiT model)"),Hye.forEach(t),bXo=i(kU),J1=n(kU,"LI",{});var Uye=s(J1);jme=n(Uye,"STRONG",{});var _ot=s(jme);FXo=r(_ot,"swin"),_ot.forEach(t),vXo=r(Uye," \u2014 "),qG=n(Uye,"A",{href:!0});var bot=s(qG);TXo=r(bot,"SwinForMaskedImageModeling"),bot.forEach(t),MXo=r(Uye," (Swin model)"),Uye.forEach(t),EXo=i(kU),Y1=n(kU,"LI",{});var Jye=s(Y1);Dme=n(Jye,"STRONG",{});var Fot=s(Dme);CXo=r(Fot,"vit"),Fot.forEach(t),wXo=r(Jye," \u2014 "),NG=n(Jye,"A",{href:!0});var vot=s(NG);AXo=r(vot,"ViTForMaskedImageModeling"),vot.forEach(t),yXo=r(Jye," (ViT model)"),Jye.forEach(t),kU.forEach(t),LXo=i(ha),K1=n(ha,"P",{});var Yye=s(K1);xXo=r(Yye,"The model is set in evaluation mode by default using "),Gme=n(Yye,"CODE",{});var Tot=s(Gme);$Xo=r(Tot,"model.eval()"),Tot.forEach(t),kXo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(Yye,"CODE",{});var Mot=s(Ome);SXo=r(Mot,"model.train()"),Mot.forEach(t),Yye.forEach(t),RXo=i(ha),T(Z1.$$.fragment,ha),ha.forEach(t),Xs.forEach(t),wke=i(f),cd=n(f,"H2",{class:!0});var LRe=s(cd);eT=n(LRe,"A",{id:!0,class:!0,href:!0});var Eot=s(eT);Vme=n(Eot,"SPAN",{});var Cot=s(Vme);T(Gy.$$.fragment,Cot),Cot.forEach(t),Eot.forEach(t),BXo=i(LRe),Xme=n(LRe,"SPAN",{});var wot=s(Xme);PXo=r(wot,"AutoModelForObjectDetection"),wot.forEach(t),LRe.forEach(t),Ake=i(f),zo=n(f,"DIV",{class:!0});var zs=s(zo);T(Oy.$$.fragment,zs),IXo=i(zs),fd=n(zs,"P",{});var SU=s(fd);qXo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jG=n(SU,"A",{href:!0});var Aot=s(jG);NXo=r(Aot,"from_pretrained()"),Aot.forEach(t),jXo=r(SU," class method or the "),DG=n(SU,"A",{href:!0});var yot=s(DG);DXo=r(yot,"from_config()"),yot.forEach(t),GXo=r(SU,` class
method.`),SU.forEach(t),OXo=i(zs),Vy=n(zs,"P",{});var xRe=s(Vy);VXo=r(xRe,"This class cannot be instantiated directly using "),zme=n(xRe,"CODE",{});var Lot=s(zme);XXo=r(Lot,"__init__()"),Lot.forEach(t),zXo=r(xRe," (throws an error)."),xRe.forEach(t),QXo=i(zs),bt=n(zs,"DIV",{class:!0});var FA=s(bt);T(Xy.$$.fragment,FA),WXo=i(FA),Qme=n(FA,"P",{});var xot=s(Qme);HXo=r(xot,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xot.forEach(t),UXo=i(FA),md=n(FA,"P",{});var RU=s(md);JXo=r(RU,`Note:
Loading a model from its configuration file does `),Wme=n(RU,"STRONG",{});var $ot=s(Wme);YXo=r($ot,"not"),$ot.forEach(t),KXo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(RU,"A",{href:!0});var kot=s(GG);ZXo=r(kot,"from_pretrained()"),kot.forEach(t),ezo=r(RU," to load the model weights."),RU.forEach(t),ozo=i(FA),T(oT.$$.fragment,FA),FA.forEach(t),rzo=i(zs),fo=n(zs,"DIV",{class:!0});var ga=s(fo);T(zy.$$.fragment,ga),tzo=i(ga),Hme=n(ga,"P",{});var Sot=s(Hme);azo=r(Sot,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Sot.forEach(t),nzo=i(ga),Va=n(ga,"P",{});var vA=s(Va);szo=r(vA,"The model class to instantiate is selected based on the "),Ume=n(vA,"CODE",{});var Rot=s(Ume);lzo=r(Rot,"model_type"),Rot.forEach(t),izo=r(vA,` property of the config object (either
passed as an argument or loaded from `),Jme=n(vA,"CODE",{});var Bot=s(Jme);dzo=r(Bot,"pretrained_model_name_or_path"),Bot.forEach(t),czo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(vA,"CODE",{});var Pot=s(Yme);fzo=r(Pot,"pretrained_model_name_or_path"),Pot.forEach(t),mzo=r(vA,":"),vA.forEach(t),hzo=i(ga),Kme=n(ga,"UL",{});var Iot=s(Kme);rT=n(Iot,"LI",{});var Kye=s(rT);Zme=n(Kye,"STRONG",{});var qot=s(Zme);gzo=r(qot,"detr"),qot.forEach(t),pzo=r(Kye," \u2014 "),OG=n(Kye,"A",{href:!0});var Not=s(OG);uzo=r(Not,"DetrForObjectDetection"),Not.forEach(t),_zo=r(Kye," (DETR model)"),Kye.forEach(t),Iot.forEach(t),bzo=i(ga),tT=n(ga,"P",{});var Zye=s(tT);Fzo=r(Zye,"The model is set in evaluation mode by default using "),ehe=n(Zye,"CODE",{});var jot=s(ehe);vzo=r(jot,"model.eval()"),jot.forEach(t),Tzo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(Zye,"CODE",{});var Dot=s(ohe);Mzo=r(Dot,"model.train()"),Dot.forEach(t),Zye.forEach(t),Ezo=i(ga),T(aT.$$.fragment,ga),ga.forEach(t),zs.forEach(t),yke=i(f),hd=n(f,"H2",{class:!0});var $Re=s(hd);nT=n($Re,"A",{id:!0,class:!0,href:!0});var Got=s(nT);rhe=n(Got,"SPAN",{});var Oot=s(rhe);T(Qy.$$.fragment,Oot),Oot.forEach(t),Got.forEach(t),Czo=i($Re),the=n($Re,"SPAN",{});var Vot=s(the);wzo=r(Vot,"AutoModelForImageSegmentation"),Vot.forEach(t),$Re.forEach(t),Lke=i(f),Qo=n(f,"DIV",{class:!0});var Qs=s(Qo);T(Wy.$$.fragment,Qs),Azo=i(Qs),gd=n(Qs,"P",{});var BU=s(gd);yzo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),VG=n(BU,"A",{href:!0});var Xot=s(VG);Lzo=r(Xot,"from_pretrained()"),Xot.forEach(t),xzo=r(BU," class method or the "),XG=n(BU,"A",{href:!0});var zot=s(XG);$zo=r(zot,"from_config()"),zot.forEach(t),kzo=r(BU,` class
method.`),BU.forEach(t),Szo=i(Qs),Hy=n(Qs,"P",{});var kRe=s(Hy);Rzo=r(kRe,"This class cannot be instantiated directly using "),ahe=n(kRe,"CODE",{});var Qot=s(ahe);Bzo=r(Qot,"__init__()"),Qot.forEach(t),Pzo=r(kRe," (throws an error)."),kRe.forEach(t),Izo=i(Qs),Ft=n(Qs,"DIV",{class:!0});var TA=s(Ft);T(Uy.$$.fragment,TA),qzo=i(TA),nhe=n(TA,"P",{});var Wot=s(nhe);Nzo=r(Wot,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Wot.forEach(t),jzo=i(TA),pd=n(TA,"P",{});var PU=s(pd);Dzo=r(PU,`Note:
Loading a model from its configuration file does `),she=n(PU,"STRONG",{});var Hot=s(she);Gzo=r(Hot,"not"),Hot.forEach(t),Ozo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(PU,"A",{href:!0});var Uot=s(zG);Vzo=r(Uot,"from_pretrained()"),Uot.forEach(t),Xzo=r(PU," to load the model weights."),PU.forEach(t),zzo=i(TA),T(sT.$$.fragment,TA),TA.forEach(t),Qzo=i(Qs),mo=n(Qs,"DIV",{class:!0});var pa=s(mo);T(Jy.$$.fragment,pa),Wzo=i(pa),lhe=n(pa,"P",{});var Jot=s(lhe);Hzo=r(Jot,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Jot.forEach(t),Uzo=i(pa),Xa=n(pa,"P",{});var MA=s(Xa);Jzo=r(MA,"The model class to instantiate is selected based on the "),ihe=n(MA,"CODE",{});var Yot=s(ihe);Yzo=r(Yot,"model_type"),Yot.forEach(t),Kzo=r(MA,` property of the config object (either
passed as an argument or loaded from `),dhe=n(MA,"CODE",{});var Kot=s(dhe);Zzo=r(Kot,"pretrained_model_name_or_path"),Kot.forEach(t),eQo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(MA,"CODE",{});var Zot=s(che);oQo=r(Zot,"pretrained_model_name_or_path"),Zot.forEach(t),rQo=r(MA,":"),MA.forEach(t),tQo=i(pa),fhe=n(pa,"UL",{});var ert=s(fhe);lT=n(ert,"LI",{});var eLe=s(lT);mhe=n(eLe,"STRONG",{});var ort=s(mhe);aQo=r(ort,"detr"),ort.forEach(t),nQo=r(eLe," \u2014 "),QG=n(eLe,"A",{href:!0});var rrt=s(QG);sQo=r(rrt,"DetrForSegmentation"),rrt.forEach(t),lQo=r(eLe," (DETR model)"),eLe.forEach(t),ert.forEach(t),iQo=i(pa),iT=n(pa,"P",{});var oLe=s(iT);dQo=r(oLe,"The model is set in evaluation mode by default using "),hhe=n(oLe,"CODE",{});var trt=s(hhe);cQo=r(trt,"model.eval()"),trt.forEach(t),fQo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(oLe,"CODE",{});var art=s(ghe);mQo=r(art,"model.train()"),art.forEach(t),oLe.forEach(t),hQo=i(pa),T(dT.$$.fragment,pa),pa.forEach(t),Qs.forEach(t),xke=i(f),ud=n(f,"H2",{class:!0});var SRe=s(ud);cT=n(SRe,"A",{id:!0,class:!0,href:!0});var nrt=s(cT);phe=n(nrt,"SPAN",{});var srt=s(phe);T(Yy.$$.fragment,srt),srt.forEach(t),nrt.forEach(t),gQo=i(SRe),uhe=n(SRe,"SPAN",{});var lrt=s(uhe);pQo=r(lrt,"AutoModelForSemanticSegmentation"),lrt.forEach(t),SRe.forEach(t),$ke=i(f),Wo=n(f,"DIV",{class:!0});var Ws=s(Wo);T(Ky.$$.fragment,Ws),uQo=i(Ws),_d=n(Ws,"P",{});var IU=s(_d);_Qo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),WG=n(IU,"A",{href:!0});var irt=s(WG);bQo=r(irt,"from_pretrained()"),irt.forEach(t),FQo=r(IU," class method or the "),HG=n(IU,"A",{href:!0});var drt=s(HG);vQo=r(drt,"from_config()"),drt.forEach(t),TQo=r(IU,` class
method.`),IU.forEach(t),MQo=i(Ws),Zy=n(Ws,"P",{});var RRe=s(Zy);EQo=r(RRe,"This class cannot be instantiated directly using "),_he=n(RRe,"CODE",{});var crt=s(_he);CQo=r(crt,"__init__()"),crt.forEach(t),wQo=r(RRe," (throws an error)."),RRe.forEach(t),AQo=i(Ws),vt=n(Ws,"DIV",{class:!0});var EA=s(vt);T(eL.$$.fragment,EA),yQo=i(EA),bhe=n(EA,"P",{});var frt=s(bhe);LQo=r(frt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),frt.forEach(t),xQo=i(EA),bd=n(EA,"P",{});var qU=s(bd);$Qo=r(qU,`Note:
Loading a model from its configuration file does `),Fhe=n(qU,"STRONG",{});var mrt=s(Fhe);kQo=r(mrt,"not"),mrt.forEach(t),SQo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=n(qU,"A",{href:!0});var hrt=s(UG);RQo=r(hrt,"from_pretrained()"),hrt.forEach(t),BQo=r(qU," to load the model weights."),qU.forEach(t),PQo=i(EA),T(fT.$$.fragment,EA),EA.forEach(t),IQo=i(Ws),ho=n(Ws,"DIV",{class:!0});var ua=s(ho);T(oL.$$.fragment,ua),qQo=i(ua),vhe=n(ua,"P",{});var grt=s(vhe);NQo=r(grt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),grt.forEach(t),jQo=i(ua),za=n(ua,"P",{});var CA=s(za);DQo=r(CA,"The model class to instantiate is selected based on the "),The=n(CA,"CODE",{});var prt=s(The);GQo=r(prt,"model_type"),prt.forEach(t),OQo=r(CA,` property of the config object (either
passed as an argument or loaded from `),Mhe=n(CA,"CODE",{});var urt=s(Mhe);VQo=r(urt,"pretrained_model_name_or_path"),urt.forEach(t),XQo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n(CA,"CODE",{});var _rt=s(Ehe);zQo=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),QQo=r(CA,":"),CA.forEach(t),WQo=i(ua),rL=n(ua,"UL",{});var BRe=s(rL);mT=n(BRe,"LI",{});var rLe=s(mT);Che=n(rLe,"STRONG",{});var brt=s(Che);HQo=r(brt,"beit"),brt.forEach(t),UQo=r(rLe," \u2014 "),JG=n(rLe,"A",{href:!0});var Frt=s(JG);JQo=r(Frt,"BeitForSemanticSegmentation"),Frt.forEach(t),YQo=r(rLe," (BEiT model)"),rLe.forEach(t),KQo=i(BRe),hT=n(BRe,"LI",{});var tLe=s(hT);whe=n(tLe,"STRONG",{});var vrt=s(whe);ZQo=r(vrt,"segformer"),vrt.forEach(t),eWo=r(tLe," \u2014 "),YG=n(tLe,"A",{href:!0});var Trt=s(YG);oWo=r(Trt,"SegformerForSemanticSegmentation"),Trt.forEach(t),rWo=r(tLe," (SegFormer model)"),tLe.forEach(t),BRe.forEach(t),tWo=i(ua),gT=n(ua,"P",{});var aLe=s(gT);aWo=r(aLe,"The model is set in evaluation mode by default using "),Ahe=n(aLe,"CODE",{});var Mrt=s(Ahe);nWo=r(Mrt,"model.eval()"),Mrt.forEach(t),sWo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(aLe,"CODE",{});var Ert=s(yhe);lWo=r(Ert,"model.train()"),Ert.forEach(t),aLe.forEach(t),iWo=i(ua),T(pT.$$.fragment,ua),ua.forEach(t),Ws.forEach(t),kke=i(f),Fd=n(f,"H2",{class:!0});var PRe=s(Fd);uT=n(PRe,"A",{id:!0,class:!0,href:!0});var Crt=s(uT);Lhe=n(Crt,"SPAN",{});var wrt=s(Lhe);T(tL.$$.fragment,wrt),wrt.forEach(t),Crt.forEach(t),dWo=i(PRe),xhe=n(PRe,"SPAN",{});var Art=s(xhe);cWo=r(Art,"AutoModelForInstanceSegmentation"),Art.forEach(t),PRe.forEach(t),Ske=i(f),Ho=n(f,"DIV",{class:!0});var Hs=s(Ho);T(aL.$$.fragment,Hs),fWo=i(Hs),vd=n(Hs,"P",{});var NU=s(vd);mWo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),KG=n(NU,"A",{href:!0});var yrt=s(KG);hWo=r(yrt,"from_pretrained()"),yrt.forEach(t),gWo=r(NU," class method or the "),ZG=n(NU,"A",{href:!0});var Lrt=s(ZG);pWo=r(Lrt,"from_config()"),Lrt.forEach(t),uWo=r(NU,` class
method.`),NU.forEach(t),_Wo=i(Hs),nL=n(Hs,"P",{});var IRe=s(nL);bWo=r(IRe,"This class cannot be instantiated directly using "),$he=n(IRe,"CODE",{});var xrt=s($he);FWo=r(xrt,"__init__()"),xrt.forEach(t),vWo=r(IRe," (throws an error)."),IRe.forEach(t),TWo=i(Hs),Tt=n(Hs,"DIV",{class:!0});var wA=s(Tt);T(sL.$$.fragment,wA),MWo=i(wA),khe=n(wA,"P",{});var $rt=s(khe);EWo=r($rt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$rt.forEach(t),CWo=i(wA),Td=n(wA,"P",{});var jU=s(Td);wWo=r(jU,`Note:
Loading a model from its configuration file does `),She=n(jU,"STRONG",{});var krt=s(She);AWo=r(krt,"not"),krt.forEach(t),yWo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(jU,"A",{href:!0});var Srt=s(eO);LWo=r(Srt,"from_pretrained()"),Srt.forEach(t),xWo=r(jU," to load the model weights."),jU.forEach(t),$Wo=i(wA),T(_T.$$.fragment,wA),wA.forEach(t),kWo=i(Hs),go=n(Hs,"DIV",{class:!0});var _a=s(go);T(lL.$$.fragment,_a),SWo=i(_a),Rhe=n(_a,"P",{});var Rrt=s(Rhe);RWo=r(Rrt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rrt.forEach(t),BWo=i(_a),Qa=n(_a,"P",{});var AA=s(Qa);PWo=r(AA,"The model class to instantiate is selected based on the "),Bhe=n(AA,"CODE",{});var Brt=s(Bhe);IWo=r(Brt,"model_type"),Brt.forEach(t),qWo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Phe=n(AA,"CODE",{});var Prt=s(Phe);NWo=r(Prt,"pretrained_model_name_or_path"),Prt.forEach(t),jWo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(AA,"CODE",{});var Irt=s(Ihe);DWo=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),GWo=r(AA,":"),AA.forEach(t),OWo=i(_a),qhe=n(_a,"UL",{});var qrt=s(qhe);bT=n(qrt,"LI",{});var nLe=s(bT);Nhe=n(nLe,"STRONG",{});var Nrt=s(Nhe);VWo=r(Nrt,"maskformer"),Nrt.forEach(t),XWo=r(nLe," \u2014 "),oO=n(nLe,"A",{href:!0});var jrt=s(oO);zWo=r(jrt,"MaskFormerForInstanceSegmentation"),jrt.forEach(t),QWo=r(nLe," (MaskFormer model)"),nLe.forEach(t),qrt.forEach(t),WWo=i(_a),FT=n(_a,"P",{});var sLe=s(FT);HWo=r(sLe,"The model is set in evaluation mode by default using "),jhe=n(sLe,"CODE",{});var Drt=s(jhe);UWo=r(Drt,"model.eval()"),Drt.forEach(t),JWo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(sLe,"CODE",{});var Grt=s(Dhe);YWo=r(Grt,"model.train()"),Grt.forEach(t),sLe.forEach(t),KWo=i(_a),T(vT.$$.fragment,_a),_a.forEach(t),Hs.forEach(t),Rke=i(f),Md=n(f,"H2",{class:!0});var qRe=s(Md);TT=n(qRe,"A",{id:!0,class:!0,href:!0});var Ort=s(TT);Ghe=n(Ort,"SPAN",{});var Vrt=s(Ghe);T(iL.$$.fragment,Vrt),Vrt.forEach(t),Ort.forEach(t),ZWo=i(qRe),Ohe=n(qRe,"SPAN",{});var Xrt=s(Ohe);eHo=r(Xrt,"TFAutoModel"),Xrt.forEach(t),qRe.forEach(t),Bke=i(f),Uo=n(f,"DIV",{class:!0});var Us=s(Uo);T(dL.$$.fragment,Us),oHo=i(Us),Ed=n(Us,"P",{});var DU=s(Ed);rHo=r(DU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rO=n(DU,"A",{href:!0});var zrt=s(rO);tHo=r(zrt,"from_pretrained()"),zrt.forEach(t),aHo=r(DU," class method or the "),tO=n(DU,"A",{href:!0});var Qrt=s(tO);nHo=r(Qrt,"from_config()"),Qrt.forEach(t),sHo=r(DU,` class
method.`),DU.forEach(t),lHo=i(Us),cL=n(Us,"P",{});var NRe=s(cL);iHo=r(NRe,"This class cannot be instantiated directly using "),Vhe=n(NRe,"CODE",{});var Wrt=s(Vhe);dHo=r(Wrt,"__init__()"),Wrt.forEach(t),cHo=r(NRe," (throws an error)."),NRe.forEach(t),fHo=i(Us),Mt=n(Us,"DIV",{class:!0});var yA=s(Mt);T(fL.$$.fragment,yA),mHo=i(yA),Xhe=n(yA,"P",{});var Hrt=s(Xhe);hHo=r(Hrt,"Instantiates one of the base model classes of the library from a configuration."),Hrt.forEach(t),gHo=i(yA),Cd=n(yA,"P",{});var GU=s(Cd);pHo=r(GU,`Note:
Loading a model from its configuration file does `),zhe=n(GU,"STRONG",{});var Urt=s(zhe);uHo=r(Urt,"not"),Urt.forEach(t),_Ho=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(GU,"A",{href:!0});var Jrt=s(aO);bHo=r(Jrt,"from_pretrained()"),Jrt.forEach(t),FHo=r(GU," to load the model weights."),GU.forEach(t),vHo=i(yA),T(MT.$$.fragment,yA),yA.forEach(t),THo=i(Us),Mr=n(Us,"DIV",{class:!0});var Js=s(Mr);T(mL.$$.fragment,Js),MHo=i(Js),Qhe=n(Js,"P",{});var Yrt=s(Qhe);EHo=r(Yrt,"Instantiate one of the base model classes of the library from a pretrained model."),Yrt.forEach(t),CHo=i(Js),Wa=n(Js,"P",{});var LA=s(Wa);wHo=r(LA,"The model class to instantiate is selected based on the "),Whe=n(LA,"CODE",{});var Krt=s(Whe);AHo=r(Krt,"model_type"),Krt.forEach(t),yHo=r(LA,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(LA,"CODE",{});var Zrt=s(Hhe);LHo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),xHo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(LA,"CODE",{});var ett=s(Uhe);$Ho=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),kHo=r(LA,":"),LA.forEach(t),SHo=i(Js),j=n(Js,"UL",{});var D=s(j);ET=n(D,"LI",{});var lLe=s(ET);Jhe=n(lLe,"STRONG",{});var ott=s(Jhe);RHo=r(ott,"albert"),ott.forEach(t),BHo=r(lLe," \u2014 "),nO=n(lLe,"A",{href:!0});var rtt=s(nO);PHo=r(rtt,"TFAlbertModel"),rtt.forEach(t),IHo=r(lLe," (ALBERT model)"),lLe.forEach(t),qHo=i(D),CT=n(D,"LI",{});var iLe=s(CT);Yhe=n(iLe,"STRONG",{});var ttt=s(Yhe);NHo=r(ttt,"bart"),ttt.forEach(t),jHo=r(iLe," \u2014 "),sO=n(iLe,"A",{href:!0});var att=s(sO);DHo=r(att,"TFBartModel"),att.forEach(t),GHo=r(iLe," (BART model)"),iLe.forEach(t),OHo=i(D),wT=n(D,"LI",{});var dLe=s(wT);Khe=n(dLe,"STRONG",{});var ntt=s(Khe);VHo=r(ntt,"bert"),ntt.forEach(t),XHo=r(dLe," \u2014 "),lO=n(dLe,"A",{href:!0});var stt=s(lO);zHo=r(stt,"TFBertModel"),stt.forEach(t),QHo=r(dLe," (BERT model)"),dLe.forEach(t),WHo=i(D),AT=n(D,"LI",{});var cLe=s(AT);Zhe=n(cLe,"STRONG",{});var ltt=s(Zhe);HHo=r(ltt,"blenderbot"),ltt.forEach(t),UHo=r(cLe," \u2014 "),iO=n(cLe,"A",{href:!0});var itt=s(iO);JHo=r(itt,"TFBlenderbotModel"),itt.forEach(t),YHo=r(cLe," (Blenderbot model)"),cLe.forEach(t),KHo=i(D),yT=n(D,"LI",{});var fLe=s(yT);ege=n(fLe,"STRONG",{});var dtt=s(ege);ZHo=r(dtt,"blenderbot-small"),dtt.forEach(t),eUo=r(fLe," \u2014 "),dO=n(fLe,"A",{href:!0});var ctt=s(dO);oUo=r(ctt,"TFBlenderbotSmallModel"),ctt.forEach(t),rUo=r(fLe," (BlenderbotSmall model)"),fLe.forEach(t),tUo=i(D),LT=n(D,"LI",{});var mLe=s(LT);oge=n(mLe,"STRONG",{});var ftt=s(oge);aUo=r(ftt,"camembert"),ftt.forEach(t),nUo=r(mLe," \u2014 "),cO=n(mLe,"A",{href:!0});var mtt=s(cO);sUo=r(mtt,"TFCamembertModel"),mtt.forEach(t),lUo=r(mLe," (CamemBERT model)"),mLe.forEach(t),iUo=i(D),xT=n(D,"LI",{});var hLe=s(xT);rge=n(hLe,"STRONG",{});var htt=s(rge);dUo=r(htt,"clip"),htt.forEach(t),cUo=r(hLe," \u2014 "),fO=n(hLe,"A",{href:!0});var gtt=s(fO);fUo=r(gtt,"TFCLIPModel"),gtt.forEach(t),mUo=r(hLe," (CLIP model)"),hLe.forEach(t),hUo=i(D),$T=n(D,"LI",{});var gLe=s($T);tge=n(gLe,"STRONG",{});var ptt=s(tge);gUo=r(ptt,"convbert"),ptt.forEach(t),pUo=r(gLe," \u2014 "),mO=n(gLe,"A",{href:!0});var utt=s(mO);uUo=r(utt,"TFConvBertModel"),utt.forEach(t),_Uo=r(gLe," (ConvBERT model)"),gLe.forEach(t),bUo=i(D),kT=n(D,"LI",{});var pLe=s(kT);age=n(pLe,"STRONG",{});var _tt=s(age);FUo=r(_tt,"convnext"),_tt.forEach(t),vUo=r(pLe," \u2014 "),hO=n(pLe,"A",{href:!0});var btt=s(hO);TUo=r(btt,"TFConvNextModel"),btt.forEach(t),MUo=r(pLe," (ConvNext model)"),pLe.forEach(t),EUo=i(D),ST=n(D,"LI",{});var uLe=s(ST);nge=n(uLe,"STRONG",{});var Ftt=s(nge);CUo=r(Ftt,"ctrl"),Ftt.forEach(t),wUo=r(uLe," \u2014 "),gO=n(uLe,"A",{href:!0});var vtt=s(gO);AUo=r(vtt,"TFCTRLModel"),vtt.forEach(t),yUo=r(uLe," (CTRL model)"),uLe.forEach(t),LUo=i(D),RT=n(D,"LI",{});var _Le=s(RT);sge=n(_Le,"STRONG",{});var Ttt=s(sge);xUo=r(Ttt,"deberta"),Ttt.forEach(t),$Uo=r(_Le," \u2014 "),pO=n(_Le,"A",{href:!0});var Mtt=s(pO);kUo=r(Mtt,"TFDebertaModel"),Mtt.forEach(t),SUo=r(_Le," (DeBERTa model)"),_Le.forEach(t),RUo=i(D),BT=n(D,"LI",{});var bLe=s(BT);lge=n(bLe,"STRONG",{});var Ett=s(lge);BUo=r(Ett,"deberta-v2"),Ett.forEach(t),PUo=r(bLe," \u2014 "),uO=n(bLe,"A",{href:!0});var Ctt=s(uO);IUo=r(Ctt,"TFDebertaV2Model"),Ctt.forEach(t),qUo=r(bLe," (DeBERTa-v2 model)"),bLe.forEach(t),NUo=i(D),PT=n(D,"LI",{});var FLe=s(PT);ige=n(FLe,"STRONG",{});var wtt=s(ige);jUo=r(wtt,"distilbert"),wtt.forEach(t),DUo=r(FLe," \u2014 "),_O=n(FLe,"A",{href:!0});var Att=s(_O);GUo=r(Att,"TFDistilBertModel"),Att.forEach(t),OUo=r(FLe," (DistilBERT model)"),FLe.forEach(t),VUo=i(D),IT=n(D,"LI",{});var vLe=s(IT);dge=n(vLe,"STRONG",{});var ytt=s(dge);XUo=r(ytt,"dpr"),ytt.forEach(t),zUo=r(vLe," \u2014 "),bO=n(vLe,"A",{href:!0});var Ltt=s(bO);QUo=r(Ltt,"TFDPRQuestionEncoder"),Ltt.forEach(t),WUo=r(vLe," (DPR model)"),vLe.forEach(t),HUo=i(D),qT=n(D,"LI",{});var TLe=s(qT);cge=n(TLe,"STRONG",{});var xtt=s(cge);UUo=r(xtt,"electra"),xtt.forEach(t),JUo=r(TLe," \u2014 "),FO=n(TLe,"A",{href:!0});var $tt=s(FO);YUo=r($tt,"TFElectraModel"),$tt.forEach(t),KUo=r(TLe," (ELECTRA model)"),TLe.forEach(t),ZUo=i(D),NT=n(D,"LI",{});var MLe=s(NT);fge=n(MLe,"STRONG",{});var ktt=s(fge);eJo=r(ktt,"flaubert"),ktt.forEach(t),oJo=r(MLe," \u2014 "),vO=n(MLe,"A",{href:!0});var Stt=s(vO);rJo=r(Stt,"TFFlaubertModel"),Stt.forEach(t),tJo=r(MLe," (FlauBERT model)"),MLe.forEach(t),aJo=i(D),vs=n(D,"LI",{});var $7=s(vs);mge=n($7,"STRONG",{});var Rtt=s(mge);nJo=r(Rtt,"funnel"),Rtt.forEach(t),sJo=r($7," \u2014 "),TO=n($7,"A",{href:!0});var Btt=s(TO);lJo=r(Btt,"TFFunnelModel"),Btt.forEach(t),iJo=r($7," or "),MO=n($7,"A",{href:!0});var Ptt=s(MO);dJo=r(Ptt,"TFFunnelBaseModel"),Ptt.forEach(t),cJo=r($7," (Funnel Transformer model)"),$7.forEach(t),fJo=i(D),jT=n(D,"LI",{});var ELe=s(jT);hge=n(ELe,"STRONG",{});var Itt=s(hge);mJo=r(Itt,"gpt2"),Itt.forEach(t),hJo=r(ELe," \u2014 "),EO=n(ELe,"A",{href:!0});var qtt=s(EO);gJo=r(qtt,"TFGPT2Model"),qtt.forEach(t),pJo=r(ELe," (OpenAI GPT-2 model)"),ELe.forEach(t),uJo=i(D),DT=n(D,"LI",{});var CLe=s(DT);gge=n(CLe,"STRONG",{});var Ntt=s(gge);_Jo=r(Ntt,"hubert"),Ntt.forEach(t),bJo=r(CLe," \u2014 "),CO=n(CLe,"A",{href:!0});var jtt=s(CO);FJo=r(jtt,"TFHubertModel"),jtt.forEach(t),vJo=r(CLe," (Hubert model)"),CLe.forEach(t),TJo=i(D),GT=n(D,"LI",{});var wLe=s(GT);pge=n(wLe,"STRONG",{});var Dtt=s(pge);MJo=r(Dtt,"layoutlm"),Dtt.forEach(t),EJo=r(wLe," \u2014 "),wO=n(wLe,"A",{href:!0});var Gtt=s(wO);CJo=r(Gtt,"TFLayoutLMModel"),Gtt.forEach(t),wJo=r(wLe," (LayoutLM model)"),wLe.forEach(t),AJo=i(D),OT=n(D,"LI",{});var ALe=s(OT);uge=n(ALe,"STRONG",{});var Ott=s(uge);yJo=r(Ott,"led"),Ott.forEach(t),LJo=r(ALe," \u2014 "),AO=n(ALe,"A",{href:!0});var Vtt=s(AO);xJo=r(Vtt,"TFLEDModel"),Vtt.forEach(t),$Jo=r(ALe," (LED model)"),ALe.forEach(t),kJo=i(D),VT=n(D,"LI",{});var yLe=s(VT);_ge=n(yLe,"STRONG",{});var Xtt=s(_ge);SJo=r(Xtt,"longformer"),Xtt.forEach(t),RJo=r(yLe," \u2014 "),yO=n(yLe,"A",{href:!0});var ztt=s(yO);BJo=r(ztt,"TFLongformerModel"),ztt.forEach(t),PJo=r(yLe," (Longformer model)"),yLe.forEach(t),IJo=i(D),XT=n(D,"LI",{});var LLe=s(XT);bge=n(LLe,"STRONG",{});var Qtt=s(bge);qJo=r(Qtt,"lxmert"),Qtt.forEach(t),NJo=r(LLe," \u2014 "),LO=n(LLe,"A",{href:!0});var Wtt=s(LO);jJo=r(Wtt,"TFLxmertModel"),Wtt.forEach(t),DJo=r(LLe," (LXMERT model)"),LLe.forEach(t),GJo=i(D),zT=n(D,"LI",{});var xLe=s(zT);Fge=n(xLe,"STRONG",{});var Htt=s(Fge);OJo=r(Htt,"marian"),Htt.forEach(t),VJo=r(xLe," \u2014 "),xO=n(xLe,"A",{href:!0});var Utt=s(xO);XJo=r(Utt,"TFMarianModel"),Utt.forEach(t),zJo=r(xLe," (Marian model)"),xLe.forEach(t),QJo=i(D),QT=n(D,"LI",{});var $Le=s(QT);vge=n($Le,"STRONG",{});var Jtt=s(vge);WJo=r(Jtt,"mbart"),Jtt.forEach(t),HJo=r($Le," \u2014 "),$O=n($Le,"A",{href:!0});var Ytt=s($O);UJo=r(Ytt,"TFMBartModel"),Ytt.forEach(t),JJo=r($Le," (mBART model)"),$Le.forEach(t),YJo=i(D),WT=n(D,"LI",{});var kLe=s(WT);Tge=n(kLe,"STRONG",{});var Ktt=s(Tge);KJo=r(Ktt,"mobilebert"),Ktt.forEach(t),ZJo=r(kLe," \u2014 "),kO=n(kLe,"A",{href:!0});var Ztt=s(kO);eYo=r(Ztt,"TFMobileBertModel"),Ztt.forEach(t),oYo=r(kLe," (MobileBERT model)"),kLe.forEach(t),rYo=i(D),HT=n(D,"LI",{});var SLe=s(HT);Mge=n(SLe,"STRONG",{});var eat=s(Mge);tYo=r(eat,"mpnet"),eat.forEach(t),aYo=r(SLe," \u2014 "),SO=n(SLe,"A",{href:!0});var oat=s(SO);nYo=r(oat,"TFMPNetModel"),oat.forEach(t),sYo=r(SLe," (MPNet model)"),SLe.forEach(t),lYo=i(D),UT=n(D,"LI",{});var RLe=s(UT);Ege=n(RLe,"STRONG",{});var rat=s(Ege);iYo=r(rat,"mt5"),rat.forEach(t),dYo=r(RLe," \u2014 "),RO=n(RLe,"A",{href:!0});var tat=s(RO);cYo=r(tat,"TFMT5Model"),tat.forEach(t),fYo=r(RLe," (mT5 model)"),RLe.forEach(t),mYo=i(D),JT=n(D,"LI",{});var BLe=s(JT);Cge=n(BLe,"STRONG",{});var aat=s(Cge);hYo=r(aat,"openai-gpt"),aat.forEach(t),gYo=r(BLe," \u2014 "),BO=n(BLe,"A",{href:!0});var nat=s(BO);pYo=r(nat,"TFOpenAIGPTModel"),nat.forEach(t),uYo=r(BLe," (OpenAI GPT model)"),BLe.forEach(t),_Yo=i(D),YT=n(D,"LI",{});var PLe=s(YT);wge=n(PLe,"STRONG",{});var sat=s(wge);bYo=r(sat,"pegasus"),sat.forEach(t),FYo=r(PLe," \u2014 "),PO=n(PLe,"A",{href:!0});var lat=s(PO);vYo=r(lat,"TFPegasusModel"),lat.forEach(t),TYo=r(PLe," (Pegasus model)"),PLe.forEach(t),MYo=i(D),KT=n(D,"LI",{});var ILe=s(KT);Age=n(ILe,"STRONG",{});var iat=s(Age);EYo=r(iat,"rembert"),iat.forEach(t),CYo=r(ILe," \u2014 "),IO=n(ILe,"A",{href:!0});var dat=s(IO);wYo=r(dat,"TFRemBertModel"),dat.forEach(t),AYo=r(ILe," (RemBERT model)"),ILe.forEach(t),yYo=i(D),ZT=n(D,"LI",{});var qLe=s(ZT);yge=n(qLe,"STRONG",{});var cat=s(yge);LYo=r(cat,"roberta"),cat.forEach(t),xYo=r(qLe," \u2014 "),qO=n(qLe,"A",{href:!0});var fat=s(qO);$Yo=r(fat,"TFRobertaModel"),fat.forEach(t),kYo=r(qLe," (RoBERTa model)"),qLe.forEach(t),SYo=i(D),eM=n(D,"LI",{});var NLe=s(eM);Lge=n(NLe,"STRONG",{});var mat=s(Lge);RYo=r(mat,"roformer"),mat.forEach(t),BYo=r(NLe," \u2014 "),NO=n(NLe,"A",{href:!0});var hat=s(NO);PYo=r(hat,"TFRoFormerModel"),hat.forEach(t),IYo=r(NLe," (RoFormer model)"),NLe.forEach(t),qYo=i(D),oM=n(D,"LI",{});var jLe=s(oM);xge=n(jLe,"STRONG",{});var gat=s(xge);NYo=r(gat,"speech_to_text"),gat.forEach(t),jYo=r(jLe," \u2014 "),jO=n(jLe,"A",{href:!0});var pat=s(jO);DYo=r(pat,"TFSpeech2TextModel"),pat.forEach(t),GYo=r(jLe," (Speech2Text model)"),jLe.forEach(t),OYo=i(D),rM=n(D,"LI",{});var DLe=s(rM);$ge=n(DLe,"STRONG",{});var uat=s($ge);VYo=r(uat,"t5"),uat.forEach(t),XYo=r(DLe," \u2014 "),DO=n(DLe,"A",{href:!0});var _at=s(DO);zYo=r(_at,"TFT5Model"),_at.forEach(t),QYo=r(DLe," (T5 model)"),DLe.forEach(t),WYo=i(D),tM=n(D,"LI",{});var GLe=s(tM);kge=n(GLe,"STRONG",{});var bat=s(kge);HYo=r(bat,"tapas"),bat.forEach(t),UYo=r(GLe," \u2014 "),GO=n(GLe,"A",{href:!0});var Fat=s(GO);JYo=r(Fat,"TFTapasModel"),Fat.forEach(t),YYo=r(GLe," (TAPAS model)"),GLe.forEach(t),KYo=i(D),aM=n(D,"LI",{});var OLe=s(aM);Sge=n(OLe,"STRONG",{});var vat=s(Sge);ZYo=r(vat,"transfo-xl"),vat.forEach(t),eKo=r(OLe," \u2014 "),OO=n(OLe,"A",{href:!0});var Tat=s(OO);oKo=r(Tat,"TFTransfoXLModel"),Tat.forEach(t),rKo=r(OLe," (Transformer-XL model)"),OLe.forEach(t),tKo=i(D),nM=n(D,"LI",{});var VLe=s(nM);Rge=n(VLe,"STRONG",{});var Mat=s(Rge);aKo=r(Mat,"vit"),Mat.forEach(t),nKo=r(VLe," \u2014 "),VO=n(VLe,"A",{href:!0});var Eat=s(VO);sKo=r(Eat,"TFViTModel"),Eat.forEach(t),lKo=r(VLe," (ViT model)"),VLe.forEach(t),iKo=i(D),sM=n(D,"LI",{});var XLe=s(sM);Bge=n(XLe,"STRONG",{});var Cat=s(Bge);dKo=r(Cat,"wav2vec2"),Cat.forEach(t),cKo=r(XLe," \u2014 "),XO=n(XLe,"A",{href:!0});var wat=s(XO);fKo=r(wat,"TFWav2Vec2Model"),wat.forEach(t),mKo=r(XLe," (Wav2Vec2 model)"),XLe.forEach(t),hKo=i(D),lM=n(D,"LI",{});var zLe=s(lM);Pge=n(zLe,"STRONG",{});var Aat=s(Pge);gKo=r(Aat,"xlm"),Aat.forEach(t),pKo=r(zLe," \u2014 "),zO=n(zLe,"A",{href:!0});var yat=s(zO);uKo=r(yat,"TFXLMModel"),yat.forEach(t),_Ko=r(zLe," (XLM model)"),zLe.forEach(t),bKo=i(D),iM=n(D,"LI",{});var QLe=s(iM);Ige=n(QLe,"STRONG",{});var Lat=s(Ige);FKo=r(Lat,"xlm-roberta"),Lat.forEach(t),vKo=r(QLe," \u2014 "),QO=n(QLe,"A",{href:!0});var xat=s(QO);TKo=r(xat,"TFXLMRobertaModel"),xat.forEach(t),MKo=r(QLe," (XLM-RoBERTa model)"),QLe.forEach(t),EKo=i(D),dM=n(D,"LI",{});var WLe=s(dM);qge=n(WLe,"STRONG",{});var $at=s(qge);CKo=r($at,"xlnet"),$at.forEach(t),wKo=r(WLe," \u2014 "),WO=n(WLe,"A",{href:!0});var kat=s(WO);AKo=r(kat,"TFXLNetModel"),kat.forEach(t),yKo=r(WLe," (XLNet model)"),WLe.forEach(t),D.forEach(t),LKo=i(Js),T(cM.$$.fragment,Js),Js.forEach(t),Us.forEach(t),Pke=i(f),wd=n(f,"H2",{class:!0});var jRe=s(wd);fM=n(jRe,"A",{id:!0,class:!0,href:!0});var Sat=s(fM);Nge=n(Sat,"SPAN",{});var Rat=s(Nge);T(hL.$$.fragment,Rat),Rat.forEach(t),Sat.forEach(t),xKo=i(jRe),jge=n(jRe,"SPAN",{});var Bat=s(jge);$Ko=r(Bat,"TFAutoModelForPreTraining"),Bat.forEach(t),jRe.forEach(t),Ike=i(f),Jo=n(f,"DIV",{class:!0});var Ys=s(Jo);T(gL.$$.fragment,Ys),kKo=i(Ys),Ad=n(Ys,"P",{});var OU=s(Ad);SKo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),HO=n(OU,"A",{href:!0});var Pat=s(HO);RKo=r(Pat,"from_pretrained()"),Pat.forEach(t),BKo=r(OU," class method or the "),UO=n(OU,"A",{href:!0});var Iat=s(UO);PKo=r(Iat,"from_config()"),Iat.forEach(t),IKo=r(OU,` class
method.`),OU.forEach(t),qKo=i(Ys),pL=n(Ys,"P",{});var DRe=s(pL);NKo=r(DRe,"This class cannot be instantiated directly using "),Dge=n(DRe,"CODE",{});var qat=s(Dge);jKo=r(qat,"__init__()"),qat.forEach(t),DKo=r(DRe," (throws an error)."),DRe.forEach(t),GKo=i(Ys),Et=n(Ys,"DIV",{class:!0});var xA=s(Et);T(uL.$$.fragment,xA),OKo=i(xA),Gge=n(xA,"P",{});var Nat=s(Gge);VKo=r(Nat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nat.forEach(t),XKo=i(xA),yd=n(xA,"P",{});var VU=s(yd);zKo=r(VU,`Note:
Loading a model from its configuration file does `),Oge=n(VU,"STRONG",{});var jat=s(Oge);QKo=r(jat,"not"),jat.forEach(t),WKo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(VU,"A",{href:!0});var Dat=s(JO);HKo=r(Dat,"from_pretrained()"),Dat.forEach(t),UKo=r(VU," to load the model weights."),VU.forEach(t),JKo=i(xA),T(mM.$$.fragment,xA),xA.forEach(t),YKo=i(Ys),Er=n(Ys,"DIV",{class:!0});var Ks=s(Er);T(_L.$$.fragment,Ks),KKo=i(Ks),Vge=n(Ks,"P",{});var Gat=s(Vge);ZKo=r(Gat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gat.forEach(t),eZo=i(Ks),Ha=n(Ks,"P",{});var $A=s(Ha);oZo=r($A,"The model class to instantiate is selected based on the "),Xge=n($A,"CODE",{});var Oat=s(Xge);rZo=r(Oat,"model_type"),Oat.forEach(t),tZo=r($A,` property of the config object (either
passed as an argument or loaded from `),zge=n($A,"CODE",{});var Vat=s(zge);aZo=r(Vat,"pretrained_model_name_or_path"),Vat.forEach(t),nZo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n($A,"CODE",{});var Xat=s(Qge);sZo=r(Xat,"pretrained_model_name_or_path"),Xat.forEach(t),lZo=r($A,":"),$A.forEach(t),iZo=i(Ks),ae=n(Ks,"UL",{});var ne=s(ae);hM=n(ne,"LI",{});var HLe=s(hM);Wge=n(HLe,"STRONG",{});var zat=s(Wge);dZo=r(zat,"albert"),zat.forEach(t),cZo=r(HLe," \u2014 "),YO=n(HLe,"A",{href:!0});var Qat=s(YO);fZo=r(Qat,"TFAlbertForPreTraining"),Qat.forEach(t),mZo=r(HLe," (ALBERT model)"),HLe.forEach(t),hZo=i(ne),gM=n(ne,"LI",{});var ULe=s(gM);Hge=n(ULe,"STRONG",{});var Wat=s(Hge);gZo=r(Wat,"bart"),Wat.forEach(t),pZo=r(ULe," \u2014 "),KO=n(ULe,"A",{href:!0});var Hat=s(KO);uZo=r(Hat,"TFBartForConditionalGeneration"),Hat.forEach(t),_Zo=r(ULe," (BART model)"),ULe.forEach(t),bZo=i(ne),pM=n(ne,"LI",{});var JLe=s(pM);Uge=n(JLe,"STRONG",{});var Uat=s(Uge);FZo=r(Uat,"bert"),Uat.forEach(t),vZo=r(JLe," \u2014 "),ZO=n(JLe,"A",{href:!0});var Jat=s(ZO);TZo=r(Jat,"TFBertForPreTraining"),Jat.forEach(t),MZo=r(JLe," (BERT model)"),JLe.forEach(t),EZo=i(ne),uM=n(ne,"LI",{});var YLe=s(uM);Jge=n(YLe,"STRONG",{});var Yat=s(Jge);CZo=r(Yat,"camembert"),Yat.forEach(t),wZo=r(YLe," \u2014 "),eV=n(YLe,"A",{href:!0});var Kat=s(eV);AZo=r(Kat,"TFCamembertForMaskedLM"),Kat.forEach(t),yZo=r(YLe," (CamemBERT model)"),YLe.forEach(t),LZo=i(ne),_M=n(ne,"LI",{});var KLe=s(_M);Yge=n(KLe,"STRONG",{});var Zat=s(Yge);xZo=r(Zat,"ctrl"),Zat.forEach(t),$Zo=r(KLe," \u2014 "),oV=n(KLe,"A",{href:!0});var ent=s(oV);kZo=r(ent,"TFCTRLLMHeadModel"),ent.forEach(t),SZo=r(KLe," (CTRL model)"),KLe.forEach(t),RZo=i(ne),bM=n(ne,"LI",{});var ZLe=s(bM);Kge=n(ZLe,"STRONG",{});var ont=s(Kge);BZo=r(ont,"distilbert"),ont.forEach(t),PZo=r(ZLe," \u2014 "),rV=n(ZLe,"A",{href:!0});var rnt=s(rV);IZo=r(rnt,"TFDistilBertForMaskedLM"),rnt.forEach(t),qZo=r(ZLe," (DistilBERT model)"),ZLe.forEach(t),NZo=i(ne),FM=n(ne,"LI",{});var e8e=s(FM);Zge=n(e8e,"STRONG",{});var tnt=s(Zge);jZo=r(tnt,"electra"),tnt.forEach(t),DZo=r(e8e," \u2014 "),tV=n(e8e,"A",{href:!0});var ant=s(tV);GZo=r(ant,"TFElectraForPreTraining"),ant.forEach(t),OZo=r(e8e," (ELECTRA model)"),e8e.forEach(t),VZo=i(ne),vM=n(ne,"LI",{});var o8e=s(vM);epe=n(o8e,"STRONG",{});var nnt=s(epe);XZo=r(nnt,"flaubert"),nnt.forEach(t),zZo=r(o8e," \u2014 "),aV=n(o8e,"A",{href:!0});var snt=s(aV);QZo=r(snt,"TFFlaubertWithLMHeadModel"),snt.forEach(t),WZo=r(o8e," (FlauBERT model)"),o8e.forEach(t),HZo=i(ne),TM=n(ne,"LI",{});var r8e=s(TM);ope=n(r8e,"STRONG",{});var lnt=s(ope);UZo=r(lnt,"funnel"),lnt.forEach(t),JZo=r(r8e," \u2014 "),nV=n(r8e,"A",{href:!0});var int=s(nV);YZo=r(int,"TFFunnelForPreTraining"),int.forEach(t),KZo=r(r8e," (Funnel Transformer model)"),r8e.forEach(t),ZZo=i(ne),MM=n(ne,"LI",{});var t8e=s(MM);rpe=n(t8e,"STRONG",{});var dnt=s(rpe);eer=r(dnt,"gpt2"),dnt.forEach(t),oer=r(t8e," \u2014 "),sV=n(t8e,"A",{href:!0});var cnt=s(sV);rer=r(cnt,"TFGPT2LMHeadModel"),cnt.forEach(t),ter=r(t8e," (OpenAI GPT-2 model)"),t8e.forEach(t),aer=i(ne),EM=n(ne,"LI",{});var a8e=s(EM);tpe=n(a8e,"STRONG",{});var fnt=s(tpe);ner=r(fnt,"layoutlm"),fnt.forEach(t),ser=r(a8e," \u2014 "),lV=n(a8e,"A",{href:!0});var mnt=s(lV);ler=r(mnt,"TFLayoutLMForMaskedLM"),mnt.forEach(t),ier=r(a8e," (LayoutLM model)"),a8e.forEach(t),der=i(ne),CM=n(ne,"LI",{});var n8e=s(CM);ape=n(n8e,"STRONG",{});var hnt=s(ape);cer=r(hnt,"lxmert"),hnt.forEach(t),fer=r(n8e," \u2014 "),iV=n(n8e,"A",{href:!0});var gnt=s(iV);mer=r(gnt,"TFLxmertForPreTraining"),gnt.forEach(t),her=r(n8e," (LXMERT model)"),n8e.forEach(t),ger=i(ne),wM=n(ne,"LI",{});var s8e=s(wM);npe=n(s8e,"STRONG",{});var pnt=s(npe);per=r(pnt,"mobilebert"),pnt.forEach(t),uer=r(s8e," \u2014 "),dV=n(s8e,"A",{href:!0});var unt=s(dV);_er=r(unt,"TFMobileBertForPreTraining"),unt.forEach(t),ber=r(s8e," (MobileBERT model)"),s8e.forEach(t),Fer=i(ne),AM=n(ne,"LI",{});var l8e=s(AM);spe=n(l8e,"STRONG",{});var _nt=s(spe);ver=r(_nt,"mpnet"),_nt.forEach(t),Ter=r(l8e," \u2014 "),cV=n(l8e,"A",{href:!0});var bnt=s(cV);Mer=r(bnt,"TFMPNetForMaskedLM"),bnt.forEach(t),Eer=r(l8e," (MPNet model)"),l8e.forEach(t),Cer=i(ne),yM=n(ne,"LI",{});var i8e=s(yM);lpe=n(i8e,"STRONG",{});var Fnt=s(lpe);wer=r(Fnt,"openai-gpt"),Fnt.forEach(t),Aer=r(i8e," \u2014 "),fV=n(i8e,"A",{href:!0});var vnt=s(fV);yer=r(vnt,"TFOpenAIGPTLMHeadModel"),vnt.forEach(t),Ler=r(i8e," (OpenAI GPT model)"),i8e.forEach(t),xer=i(ne),LM=n(ne,"LI",{});var d8e=s(LM);ipe=n(d8e,"STRONG",{});var Tnt=s(ipe);$er=r(Tnt,"roberta"),Tnt.forEach(t),ker=r(d8e," \u2014 "),mV=n(d8e,"A",{href:!0});var Mnt=s(mV);Ser=r(Mnt,"TFRobertaForMaskedLM"),Mnt.forEach(t),Rer=r(d8e," (RoBERTa model)"),d8e.forEach(t),Ber=i(ne),xM=n(ne,"LI",{});var c8e=s(xM);dpe=n(c8e,"STRONG",{});var Ent=s(dpe);Per=r(Ent,"t5"),Ent.forEach(t),Ier=r(c8e," \u2014 "),hV=n(c8e,"A",{href:!0});var Cnt=s(hV);qer=r(Cnt,"TFT5ForConditionalGeneration"),Cnt.forEach(t),Ner=r(c8e," (T5 model)"),c8e.forEach(t),jer=i(ne),$M=n(ne,"LI",{});var f8e=s($M);cpe=n(f8e,"STRONG",{});var wnt=s(cpe);Der=r(wnt,"tapas"),wnt.forEach(t),Ger=r(f8e," \u2014 "),gV=n(f8e,"A",{href:!0});var Ant=s(gV);Oer=r(Ant,"TFTapasForMaskedLM"),Ant.forEach(t),Ver=r(f8e," (TAPAS model)"),f8e.forEach(t),Xer=i(ne),kM=n(ne,"LI",{});var m8e=s(kM);fpe=n(m8e,"STRONG",{});var ynt=s(fpe);zer=r(ynt,"transfo-xl"),ynt.forEach(t),Qer=r(m8e," \u2014 "),pV=n(m8e,"A",{href:!0});var Lnt=s(pV);Wer=r(Lnt,"TFTransfoXLLMHeadModel"),Lnt.forEach(t),Her=r(m8e," (Transformer-XL model)"),m8e.forEach(t),Uer=i(ne),SM=n(ne,"LI",{});var h8e=s(SM);mpe=n(h8e,"STRONG",{});var xnt=s(mpe);Jer=r(xnt,"xlm"),xnt.forEach(t),Yer=r(h8e," \u2014 "),uV=n(h8e,"A",{href:!0});var $nt=s(uV);Ker=r($nt,"TFXLMWithLMHeadModel"),$nt.forEach(t),Zer=r(h8e," (XLM model)"),h8e.forEach(t),eor=i(ne),RM=n(ne,"LI",{});var g8e=s(RM);hpe=n(g8e,"STRONG",{});var knt=s(hpe);oor=r(knt,"xlm-roberta"),knt.forEach(t),ror=r(g8e," \u2014 "),_V=n(g8e,"A",{href:!0});var Snt=s(_V);tor=r(Snt,"TFXLMRobertaForMaskedLM"),Snt.forEach(t),aor=r(g8e," (XLM-RoBERTa model)"),g8e.forEach(t),nor=i(ne),BM=n(ne,"LI",{});var p8e=s(BM);gpe=n(p8e,"STRONG",{});var Rnt=s(gpe);sor=r(Rnt,"xlnet"),Rnt.forEach(t),lor=r(p8e," \u2014 "),bV=n(p8e,"A",{href:!0});var Bnt=s(bV);ior=r(Bnt,"TFXLNetLMHeadModel"),Bnt.forEach(t),dor=r(p8e," (XLNet model)"),p8e.forEach(t),ne.forEach(t),cor=i(Ks),T(PM.$$.fragment,Ks),Ks.forEach(t),Ys.forEach(t),qke=i(f),Ld=n(f,"H2",{class:!0});var GRe=s(Ld);IM=n(GRe,"A",{id:!0,class:!0,href:!0});var Pnt=s(IM);ppe=n(Pnt,"SPAN",{});var Int=s(ppe);T(bL.$$.fragment,Int),Int.forEach(t),Pnt.forEach(t),mor=i(GRe),upe=n(GRe,"SPAN",{});var qnt=s(upe);hor=r(qnt,"TFAutoModelForCausalLM"),qnt.forEach(t),GRe.forEach(t),Nke=i(f),Yo=n(f,"DIV",{class:!0});var Zs=s(Yo);T(FL.$$.fragment,Zs),gor=i(Zs),xd=n(Zs,"P",{});var XU=s(xd);por=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FV=n(XU,"A",{href:!0});var Nnt=s(FV);uor=r(Nnt,"from_pretrained()"),Nnt.forEach(t),_or=r(XU," class method or the "),vV=n(XU,"A",{href:!0});var jnt=s(vV);bor=r(jnt,"from_config()"),jnt.forEach(t),For=r(XU,` class
method.`),XU.forEach(t),vor=i(Zs),vL=n(Zs,"P",{});var ORe=s(vL);Tor=r(ORe,"This class cannot be instantiated directly using "),_pe=n(ORe,"CODE",{});var Dnt=s(_pe);Mor=r(Dnt,"__init__()"),Dnt.forEach(t),Eor=r(ORe," (throws an error)."),ORe.forEach(t),Cor=i(Zs),Ct=n(Zs,"DIV",{class:!0});var kA=s(Ct);T(TL.$$.fragment,kA),wor=i(kA),bpe=n(kA,"P",{});var Gnt=s(bpe);Aor=r(Gnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gnt.forEach(t),yor=i(kA),$d=n(kA,"P",{});var zU=s($d);Lor=r(zU,`Note:
Loading a model from its configuration file does `),Fpe=n(zU,"STRONG",{});var Ont=s(Fpe);xor=r(Ont,"not"),Ont.forEach(t),$or=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(zU,"A",{href:!0});var Vnt=s(TV);kor=r(Vnt,"from_pretrained()"),Vnt.forEach(t),Sor=r(zU," to load the model weights."),zU.forEach(t),Ror=i(kA),T(qM.$$.fragment,kA),kA.forEach(t),Bor=i(Zs),Cr=n(Zs,"DIV",{class:!0});var el=s(Cr);T(ML.$$.fragment,el),Por=i(el),vpe=n(el,"P",{});var Xnt=s(vpe);Ior=r(Xnt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xnt.forEach(t),qor=i(el),Ua=n(el,"P",{});var SA=s(Ua);Nor=r(SA,"The model class to instantiate is selected based on the "),Tpe=n(SA,"CODE",{});var znt=s(Tpe);jor=r(znt,"model_type"),znt.forEach(t),Dor=r(SA,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(SA,"CODE",{});var Qnt=s(Mpe);Gor=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),Oor=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(SA,"CODE",{});var Wnt=s(Epe);Vor=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),Xor=r(SA,":"),SA.forEach(t),zor=i(el),ve=n(el,"UL",{});var Le=s(ve);NM=n(Le,"LI",{});var u8e=s(NM);Cpe=n(u8e,"STRONG",{});var Hnt=s(Cpe);Qor=r(Hnt,"bert"),Hnt.forEach(t),Wor=r(u8e," \u2014 "),MV=n(u8e,"A",{href:!0});var Unt=s(MV);Hor=r(Unt,"TFBertLMHeadModel"),Unt.forEach(t),Uor=r(u8e," (BERT model)"),u8e.forEach(t),Jor=i(Le),jM=n(Le,"LI",{});var _8e=s(jM);wpe=n(_8e,"STRONG",{});var Jnt=s(wpe);Yor=r(Jnt,"camembert"),Jnt.forEach(t),Kor=r(_8e," \u2014 "),EV=n(_8e,"A",{href:!0});var Ynt=s(EV);Zor=r(Ynt,"TFCamembertForCausalLM"),Ynt.forEach(t),err=r(_8e," (CamemBERT model)"),_8e.forEach(t),orr=i(Le),DM=n(Le,"LI",{});var b8e=s(DM);Ape=n(b8e,"STRONG",{});var Knt=s(Ape);rrr=r(Knt,"ctrl"),Knt.forEach(t),trr=r(b8e," \u2014 "),CV=n(b8e,"A",{href:!0});var Znt=s(CV);arr=r(Znt,"TFCTRLLMHeadModel"),Znt.forEach(t),nrr=r(b8e," (CTRL model)"),b8e.forEach(t),srr=i(Le),GM=n(Le,"LI",{});var F8e=s(GM);ype=n(F8e,"STRONG",{});var est=s(ype);lrr=r(est,"gpt2"),est.forEach(t),irr=r(F8e," \u2014 "),wV=n(F8e,"A",{href:!0});var ost=s(wV);drr=r(ost,"TFGPT2LMHeadModel"),ost.forEach(t),crr=r(F8e," (OpenAI GPT-2 model)"),F8e.forEach(t),frr=i(Le),OM=n(Le,"LI",{});var v8e=s(OM);Lpe=n(v8e,"STRONG",{});var rst=s(Lpe);mrr=r(rst,"openai-gpt"),rst.forEach(t),hrr=r(v8e," \u2014 "),AV=n(v8e,"A",{href:!0});var tst=s(AV);grr=r(tst,"TFOpenAIGPTLMHeadModel"),tst.forEach(t),prr=r(v8e," (OpenAI GPT model)"),v8e.forEach(t),urr=i(Le),VM=n(Le,"LI",{});var T8e=s(VM);xpe=n(T8e,"STRONG",{});var ast=s(xpe);_rr=r(ast,"rembert"),ast.forEach(t),brr=r(T8e," \u2014 "),yV=n(T8e,"A",{href:!0});var nst=s(yV);Frr=r(nst,"TFRemBertForCausalLM"),nst.forEach(t),vrr=r(T8e," (RemBERT model)"),T8e.forEach(t),Trr=i(Le),XM=n(Le,"LI",{});var M8e=s(XM);$pe=n(M8e,"STRONG",{});var sst=s($pe);Mrr=r(sst,"roberta"),sst.forEach(t),Err=r(M8e," \u2014 "),LV=n(M8e,"A",{href:!0});var lst=s(LV);Crr=r(lst,"TFRobertaForCausalLM"),lst.forEach(t),wrr=r(M8e," (RoBERTa model)"),M8e.forEach(t),Arr=i(Le),zM=n(Le,"LI",{});var E8e=s(zM);kpe=n(E8e,"STRONG",{});var ist=s(kpe);yrr=r(ist,"roformer"),ist.forEach(t),Lrr=r(E8e," \u2014 "),xV=n(E8e,"A",{href:!0});var dst=s(xV);xrr=r(dst,"TFRoFormerForCausalLM"),dst.forEach(t),$rr=r(E8e," (RoFormer model)"),E8e.forEach(t),krr=i(Le),QM=n(Le,"LI",{});var C8e=s(QM);Spe=n(C8e,"STRONG",{});var cst=s(Spe);Srr=r(cst,"transfo-xl"),cst.forEach(t),Rrr=r(C8e," \u2014 "),$V=n(C8e,"A",{href:!0});var fst=s($V);Brr=r(fst,"TFTransfoXLLMHeadModel"),fst.forEach(t),Prr=r(C8e," (Transformer-XL model)"),C8e.forEach(t),Irr=i(Le),WM=n(Le,"LI",{});var w8e=s(WM);Rpe=n(w8e,"STRONG",{});var mst=s(Rpe);qrr=r(mst,"xlm"),mst.forEach(t),Nrr=r(w8e," \u2014 "),kV=n(w8e,"A",{href:!0});var hst=s(kV);jrr=r(hst,"TFXLMWithLMHeadModel"),hst.forEach(t),Drr=r(w8e," (XLM model)"),w8e.forEach(t),Grr=i(Le),HM=n(Le,"LI",{});var A8e=s(HM);Bpe=n(A8e,"STRONG",{});var gst=s(Bpe);Orr=r(gst,"xlnet"),gst.forEach(t),Vrr=r(A8e," \u2014 "),SV=n(A8e,"A",{href:!0});var pst=s(SV);Xrr=r(pst,"TFXLNetLMHeadModel"),pst.forEach(t),zrr=r(A8e," (XLNet model)"),A8e.forEach(t),Le.forEach(t),Qrr=i(el),T(UM.$$.fragment,el),el.forEach(t),Zs.forEach(t),jke=i(f),kd=n(f,"H2",{class:!0});var VRe=s(kd);JM=n(VRe,"A",{id:!0,class:!0,href:!0});var ust=s(JM);Ppe=n(ust,"SPAN",{});var _st=s(Ppe);T(EL.$$.fragment,_st),_st.forEach(t),ust.forEach(t),Wrr=i(VRe),Ipe=n(VRe,"SPAN",{});var bst=s(Ipe);Hrr=r(bst,"TFAutoModelForImageClassification"),bst.forEach(t),VRe.forEach(t),Dke=i(f),Ko=n(f,"DIV",{class:!0});var ol=s(Ko);T(CL.$$.fragment,ol),Urr=i(ol),Sd=n(ol,"P",{});var QU=s(Sd);Jrr=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=n(QU,"A",{href:!0});var Fst=s(RV);Yrr=r(Fst,"from_pretrained()"),Fst.forEach(t),Krr=r(QU," class method or the "),BV=n(QU,"A",{href:!0});var vst=s(BV);Zrr=r(vst,"from_config()"),vst.forEach(t),etr=r(QU,` class
method.`),QU.forEach(t),otr=i(ol),wL=n(ol,"P",{});var XRe=s(wL);rtr=r(XRe,"This class cannot be instantiated directly using "),qpe=n(XRe,"CODE",{});var Tst=s(qpe);ttr=r(Tst,"__init__()"),Tst.forEach(t),atr=r(XRe," (throws an error)."),XRe.forEach(t),ntr=i(ol),wt=n(ol,"DIV",{class:!0});var RA=s(wt);T(AL.$$.fragment,RA),str=i(RA),Npe=n(RA,"P",{});var Mst=s(Npe);ltr=r(Mst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mst.forEach(t),itr=i(RA),Rd=n(RA,"P",{});var WU=s(Rd);dtr=r(WU,`Note:
Loading a model from its configuration file does `),jpe=n(WU,"STRONG",{});var Est=s(jpe);ctr=r(Est,"not"),Est.forEach(t),ftr=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(WU,"A",{href:!0});var Cst=s(PV);mtr=r(Cst,"from_pretrained()"),Cst.forEach(t),htr=r(WU," to load the model weights."),WU.forEach(t),gtr=i(RA),T(YM.$$.fragment,RA),RA.forEach(t),ptr=i(ol),wr=n(ol,"DIV",{class:!0});var rl=s(wr);T(yL.$$.fragment,rl),utr=i(rl),Dpe=n(rl,"P",{});var wst=s(Dpe);_tr=r(wst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wst.forEach(t),btr=i(rl),Ja=n(rl,"P",{});var BA=s(Ja);Ftr=r(BA,"The model class to instantiate is selected based on the "),Gpe=n(BA,"CODE",{});var Ast=s(Gpe);vtr=r(Ast,"model_type"),Ast.forEach(t),Ttr=r(BA,` property of the config object (either
passed as an argument or loaded from `),Ope=n(BA,"CODE",{});var yst=s(Ope);Mtr=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),Etr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(BA,"CODE",{});var Lst=s(Vpe);Ctr=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),wtr=r(BA,":"),BA.forEach(t),Atr=i(rl),LL=n(rl,"UL",{});var zRe=s(LL);KM=n(zRe,"LI",{});var y8e=s(KM);Xpe=n(y8e,"STRONG",{});var xst=s(Xpe);ytr=r(xst,"convnext"),xst.forEach(t),Ltr=r(y8e," \u2014 "),IV=n(y8e,"A",{href:!0});var $st=s(IV);xtr=r($st,"TFConvNextForImageClassification"),$st.forEach(t),$tr=r(y8e," (ConvNext model)"),y8e.forEach(t),ktr=i(zRe),ZM=n(zRe,"LI",{});var L8e=s(ZM);zpe=n(L8e,"STRONG",{});var kst=s(zpe);Str=r(kst,"vit"),kst.forEach(t),Rtr=r(L8e," \u2014 "),qV=n(L8e,"A",{href:!0});var Sst=s(qV);Btr=r(Sst,"TFViTForImageClassification"),Sst.forEach(t),Ptr=r(L8e," (ViT model)"),L8e.forEach(t),zRe.forEach(t),Itr=i(rl),T(e4.$$.fragment,rl),rl.forEach(t),ol.forEach(t),Gke=i(f),Bd=n(f,"H2",{class:!0});var QRe=s(Bd);o4=n(QRe,"A",{id:!0,class:!0,href:!0});var Rst=s(o4);Qpe=n(Rst,"SPAN",{});var Bst=s(Qpe);T(xL.$$.fragment,Bst),Bst.forEach(t),Rst.forEach(t),qtr=i(QRe),Wpe=n(QRe,"SPAN",{});var Pst=s(Wpe);Ntr=r(Pst,"TFAutoModelForMaskedLM"),Pst.forEach(t),QRe.forEach(t),Oke=i(f),Zo=n(f,"DIV",{class:!0});var tl=s(Zo);T($L.$$.fragment,tl),jtr=i(tl),Pd=n(tl,"P",{});var HU=s(Pd);Dtr=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NV=n(HU,"A",{href:!0});var Ist=s(NV);Gtr=r(Ist,"from_pretrained()"),Ist.forEach(t),Otr=r(HU," class method or the "),jV=n(HU,"A",{href:!0});var qst=s(jV);Vtr=r(qst,"from_config()"),qst.forEach(t),Xtr=r(HU,` class
method.`),HU.forEach(t),ztr=i(tl),kL=n(tl,"P",{});var WRe=s(kL);Qtr=r(WRe,"This class cannot be instantiated directly using "),Hpe=n(WRe,"CODE",{});var Nst=s(Hpe);Wtr=r(Nst,"__init__()"),Nst.forEach(t),Htr=r(WRe," (throws an error)."),WRe.forEach(t),Utr=i(tl),At=n(tl,"DIV",{class:!0});var PA=s(At);T(SL.$$.fragment,PA),Jtr=i(PA),Upe=n(PA,"P",{});var jst=s(Upe);Ytr=r(jst,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jst.forEach(t),Ktr=i(PA),Id=n(PA,"P",{});var UU=s(Id);Ztr=r(UU,`Note:
Loading a model from its configuration file does `),Jpe=n(UU,"STRONG",{});var Dst=s(Jpe);ear=r(Dst,"not"),Dst.forEach(t),oar=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(UU,"A",{href:!0});var Gst=s(DV);rar=r(Gst,"from_pretrained()"),Gst.forEach(t),tar=r(UU," to load the model weights."),UU.forEach(t),aar=i(PA),T(r4.$$.fragment,PA),PA.forEach(t),nar=i(tl),Ar=n(tl,"DIV",{class:!0});var al=s(Ar);T(RL.$$.fragment,al),sar=i(al),Ype=n(al,"P",{});var Ost=s(Ype);lar=r(Ost,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ost.forEach(t),iar=i(al),Ya=n(al,"P",{});var IA=s(Ya);dar=r(IA,"The model class to instantiate is selected based on the "),Kpe=n(IA,"CODE",{});var Vst=s(Kpe);car=r(Vst,"model_type"),Vst.forEach(t),far=r(IA,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(IA,"CODE",{});var Xst=s(Zpe);mar=r(Xst,"pretrained_model_name_or_path"),Xst.forEach(t),har=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(IA,"CODE",{});var zst=s(eue);gar=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),par=r(IA,":"),IA.forEach(t),uar=i(al),se=n(al,"UL",{});var de=s(se);t4=n(de,"LI",{});var x8e=s(t4);oue=n(x8e,"STRONG",{});var Qst=s(oue);_ar=r(Qst,"albert"),Qst.forEach(t),bar=r(x8e," \u2014 "),GV=n(x8e,"A",{href:!0});var Wst=s(GV);Far=r(Wst,"TFAlbertForMaskedLM"),Wst.forEach(t),Tar=r(x8e," (ALBERT model)"),x8e.forEach(t),Mar=i(de),a4=n(de,"LI",{});var $8e=s(a4);rue=n($8e,"STRONG",{});var Hst=s(rue);Ear=r(Hst,"bert"),Hst.forEach(t),Car=r($8e," \u2014 "),OV=n($8e,"A",{href:!0});var Ust=s(OV);war=r(Ust,"TFBertForMaskedLM"),Ust.forEach(t),Aar=r($8e," (BERT model)"),$8e.forEach(t),yar=i(de),n4=n(de,"LI",{});var k8e=s(n4);tue=n(k8e,"STRONG",{});var Jst=s(tue);Lar=r(Jst,"camembert"),Jst.forEach(t),xar=r(k8e," \u2014 "),VV=n(k8e,"A",{href:!0});var Yst=s(VV);$ar=r(Yst,"TFCamembertForMaskedLM"),Yst.forEach(t),kar=r(k8e," (CamemBERT model)"),k8e.forEach(t),Sar=i(de),s4=n(de,"LI",{});var S8e=s(s4);aue=n(S8e,"STRONG",{});var Kst=s(aue);Rar=r(Kst,"convbert"),Kst.forEach(t),Bar=r(S8e," \u2014 "),XV=n(S8e,"A",{href:!0});var Zst=s(XV);Par=r(Zst,"TFConvBertForMaskedLM"),Zst.forEach(t),Iar=r(S8e," (ConvBERT model)"),S8e.forEach(t),qar=i(de),l4=n(de,"LI",{});var R8e=s(l4);nue=n(R8e,"STRONG",{});var elt=s(nue);Nar=r(elt,"deberta"),elt.forEach(t),jar=r(R8e," \u2014 "),zV=n(R8e,"A",{href:!0});var olt=s(zV);Dar=r(olt,"TFDebertaForMaskedLM"),olt.forEach(t),Gar=r(R8e," (DeBERTa model)"),R8e.forEach(t),Oar=i(de),i4=n(de,"LI",{});var B8e=s(i4);sue=n(B8e,"STRONG",{});var rlt=s(sue);Var=r(rlt,"deberta-v2"),rlt.forEach(t),Xar=r(B8e," \u2014 "),QV=n(B8e,"A",{href:!0});var tlt=s(QV);zar=r(tlt,"TFDebertaV2ForMaskedLM"),tlt.forEach(t),Qar=r(B8e," (DeBERTa-v2 model)"),B8e.forEach(t),War=i(de),d4=n(de,"LI",{});var P8e=s(d4);lue=n(P8e,"STRONG",{});var alt=s(lue);Har=r(alt,"distilbert"),alt.forEach(t),Uar=r(P8e," \u2014 "),WV=n(P8e,"A",{href:!0});var nlt=s(WV);Jar=r(nlt,"TFDistilBertForMaskedLM"),nlt.forEach(t),Yar=r(P8e," (DistilBERT model)"),P8e.forEach(t),Kar=i(de),c4=n(de,"LI",{});var I8e=s(c4);iue=n(I8e,"STRONG",{});var slt=s(iue);Zar=r(slt,"electra"),slt.forEach(t),enr=r(I8e," \u2014 "),HV=n(I8e,"A",{href:!0});var llt=s(HV);onr=r(llt,"TFElectraForMaskedLM"),llt.forEach(t),rnr=r(I8e," (ELECTRA model)"),I8e.forEach(t),tnr=i(de),f4=n(de,"LI",{});var q8e=s(f4);due=n(q8e,"STRONG",{});var ilt=s(due);anr=r(ilt,"flaubert"),ilt.forEach(t),nnr=r(q8e," \u2014 "),UV=n(q8e,"A",{href:!0});var dlt=s(UV);snr=r(dlt,"TFFlaubertWithLMHeadModel"),dlt.forEach(t),lnr=r(q8e," (FlauBERT model)"),q8e.forEach(t),inr=i(de),m4=n(de,"LI",{});var N8e=s(m4);cue=n(N8e,"STRONG",{});var clt=s(cue);dnr=r(clt,"funnel"),clt.forEach(t),cnr=r(N8e," \u2014 "),JV=n(N8e,"A",{href:!0});var flt=s(JV);fnr=r(flt,"TFFunnelForMaskedLM"),flt.forEach(t),mnr=r(N8e," (Funnel Transformer model)"),N8e.forEach(t),hnr=i(de),h4=n(de,"LI",{});var j8e=s(h4);fue=n(j8e,"STRONG",{});var mlt=s(fue);gnr=r(mlt,"layoutlm"),mlt.forEach(t),pnr=r(j8e," \u2014 "),YV=n(j8e,"A",{href:!0});var hlt=s(YV);unr=r(hlt,"TFLayoutLMForMaskedLM"),hlt.forEach(t),_nr=r(j8e," (LayoutLM model)"),j8e.forEach(t),bnr=i(de),g4=n(de,"LI",{});var D8e=s(g4);mue=n(D8e,"STRONG",{});var glt=s(mue);Fnr=r(glt,"longformer"),glt.forEach(t),vnr=r(D8e," \u2014 "),KV=n(D8e,"A",{href:!0});var plt=s(KV);Tnr=r(plt,"TFLongformerForMaskedLM"),plt.forEach(t),Mnr=r(D8e," (Longformer model)"),D8e.forEach(t),Enr=i(de),p4=n(de,"LI",{});var G8e=s(p4);hue=n(G8e,"STRONG",{});var ult=s(hue);Cnr=r(ult,"mobilebert"),ult.forEach(t),wnr=r(G8e," \u2014 "),ZV=n(G8e,"A",{href:!0});var _lt=s(ZV);Anr=r(_lt,"TFMobileBertForMaskedLM"),_lt.forEach(t),ynr=r(G8e," (MobileBERT model)"),G8e.forEach(t),Lnr=i(de),u4=n(de,"LI",{});var O8e=s(u4);gue=n(O8e,"STRONG",{});var blt=s(gue);xnr=r(blt,"mpnet"),blt.forEach(t),$nr=r(O8e," \u2014 "),eX=n(O8e,"A",{href:!0});var Flt=s(eX);knr=r(Flt,"TFMPNetForMaskedLM"),Flt.forEach(t),Snr=r(O8e," (MPNet model)"),O8e.forEach(t),Rnr=i(de),_4=n(de,"LI",{});var V8e=s(_4);pue=n(V8e,"STRONG",{});var vlt=s(pue);Bnr=r(vlt,"rembert"),vlt.forEach(t),Pnr=r(V8e," \u2014 "),oX=n(V8e,"A",{href:!0});var Tlt=s(oX);Inr=r(Tlt,"TFRemBertForMaskedLM"),Tlt.forEach(t),qnr=r(V8e," (RemBERT model)"),V8e.forEach(t),Nnr=i(de),b4=n(de,"LI",{});var X8e=s(b4);uue=n(X8e,"STRONG",{});var Mlt=s(uue);jnr=r(Mlt,"roberta"),Mlt.forEach(t),Dnr=r(X8e," \u2014 "),rX=n(X8e,"A",{href:!0});var Elt=s(rX);Gnr=r(Elt,"TFRobertaForMaskedLM"),Elt.forEach(t),Onr=r(X8e," (RoBERTa model)"),X8e.forEach(t),Vnr=i(de),F4=n(de,"LI",{});var z8e=s(F4);_ue=n(z8e,"STRONG",{});var Clt=s(_ue);Xnr=r(Clt,"roformer"),Clt.forEach(t),znr=r(z8e," \u2014 "),tX=n(z8e,"A",{href:!0});var wlt=s(tX);Qnr=r(wlt,"TFRoFormerForMaskedLM"),wlt.forEach(t),Wnr=r(z8e," (RoFormer model)"),z8e.forEach(t),Hnr=i(de),v4=n(de,"LI",{});var Q8e=s(v4);bue=n(Q8e,"STRONG",{});var Alt=s(bue);Unr=r(Alt,"tapas"),Alt.forEach(t),Jnr=r(Q8e," \u2014 "),aX=n(Q8e,"A",{href:!0});var ylt=s(aX);Ynr=r(ylt,"TFTapasForMaskedLM"),ylt.forEach(t),Knr=r(Q8e," (TAPAS model)"),Q8e.forEach(t),Znr=i(de),T4=n(de,"LI",{});var W8e=s(T4);Fue=n(W8e,"STRONG",{});var Llt=s(Fue);esr=r(Llt,"xlm"),Llt.forEach(t),osr=r(W8e," \u2014 "),nX=n(W8e,"A",{href:!0});var xlt=s(nX);rsr=r(xlt,"TFXLMWithLMHeadModel"),xlt.forEach(t),tsr=r(W8e," (XLM model)"),W8e.forEach(t),asr=i(de),M4=n(de,"LI",{});var H8e=s(M4);vue=n(H8e,"STRONG",{});var $lt=s(vue);nsr=r($lt,"xlm-roberta"),$lt.forEach(t),ssr=r(H8e," \u2014 "),sX=n(H8e,"A",{href:!0});var klt=s(sX);lsr=r(klt,"TFXLMRobertaForMaskedLM"),klt.forEach(t),isr=r(H8e," (XLM-RoBERTa model)"),H8e.forEach(t),de.forEach(t),dsr=i(al),T(E4.$$.fragment,al),al.forEach(t),tl.forEach(t),Vke=i(f),qd=n(f,"H2",{class:!0});var HRe=s(qd);C4=n(HRe,"A",{id:!0,class:!0,href:!0});var Slt=s(C4);Tue=n(Slt,"SPAN",{});var Rlt=s(Tue);T(BL.$$.fragment,Rlt),Rlt.forEach(t),Slt.forEach(t),csr=i(HRe),Mue=n(HRe,"SPAN",{});var Blt=s(Mue);fsr=r(Blt,"TFAutoModelForSeq2SeqLM"),Blt.forEach(t),HRe.forEach(t),Xke=i(f),er=n(f,"DIV",{class:!0});var nl=s(er);T(PL.$$.fragment,nl),msr=i(nl),Nd=n(nl,"P",{});var JU=s(Nd);hsr=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lX=n(JU,"A",{href:!0});var Plt=s(lX);gsr=r(Plt,"from_pretrained()"),Plt.forEach(t),psr=r(JU," class method or the "),iX=n(JU,"A",{href:!0});var Ilt=s(iX);usr=r(Ilt,"from_config()"),Ilt.forEach(t),_sr=r(JU,` class
method.`),JU.forEach(t),bsr=i(nl),IL=n(nl,"P",{});var URe=s(IL);Fsr=r(URe,"This class cannot be instantiated directly using "),Eue=n(URe,"CODE",{});var qlt=s(Eue);vsr=r(qlt,"__init__()"),qlt.forEach(t),Tsr=r(URe," (throws an error)."),URe.forEach(t),Msr=i(nl),yt=n(nl,"DIV",{class:!0});var qA=s(yt);T(qL.$$.fragment,qA),Esr=i(qA),Cue=n(qA,"P",{});var Nlt=s(Cue);Csr=r(Nlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nlt.forEach(t),wsr=i(qA),jd=n(qA,"P",{});var YU=s(jd);Asr=r(YU,`Note:
Loading a model from its configuration file does `),wue=n(YU,"STRONG",{});var jlt=s(wue);ysr=r(jlt,"not"),jlt.forEach(t),Lsr=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(YU,"A",{href:!0});var Dlt=s(dX);xsr=r(Dlt,"from_pretrained()"),Dlt.forEach(t),$sr=r(YU," to load the model weights."),YU.forEach(t),ksr=i(qA),T(w4.$$.fragment,qA),qA.forEach(t),Ssr=i(nl),yr=n(nl,"DIV",{class:!0});var sl=s(yr);T(NL.$$.fragment,sl),Rsr=i(sl),Aue=n(sl,"P",{});var Glt=s(Aue);Bsr=r(Glt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Glt.forEach(t),Psr=i(sl),Ka=n(sl,"P",{});var NA=s(Ka);Isr=r(NA,"The model class to instantiate is selected based on the "),yue=n(NA,"CODE",{});var Olt=s(yue);qsr=r(Olt,"model_type"),Olt.forEach(t),Nsr=r(NA,` property of the config object (either
passed as an argument or loaded from `),Lue=n(NA,"CODE",{});var Vlt=s(Lue);jsr=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),Dsr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(NA,"CODE",{});var Xlt=s(xue);Gsr=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),Osr=r(NA,":"),NA.forEach(t),Vsr=i(sl),Ee=n(sl,"UL",{});var $e=s(Ee);A4=n($e,"LI",{});var U8e=s(A4);$ue=n(U8e,"STRONG",{});var zlt=s($ue);Xsr=r(zlt,"bart"),zlt.forEach(t),zsr=r(U8e," \u2014 "),cX=n(U8e,"A",{href:!0});var Qlt=s(cX);Qsr=r(Qlt,"TFBartForConditionalGeneration"),Qlt.forEach(t),Wsr=r(U8e," (BART model)"),U8e.forEach(t),Hsr=i($e),y4=n($e,"LI",{});var J8e=s(y4);kue=n(J8e,"STRONG",{});var Wlt=s(kue);Usr=r(Wlt,"blenderbot"),Wlt.forEach(t),Jsr=r(J8e," \u2014 "),fX=n(J8e,"A",{href:!0});var Hlt=s(fX);Ysr=r(Hlt,"TFBlenderbotForConditionalGeneration"),Hlt.forEach(t),Ksr=r(J8e," (Blenderbot model)"),J8e.forEach(t),Zsr=i($e),L4=n($e,"LI",{});var Y8e=s(L4);Sue=n(Y8e,"STRONG",{});var Ult=s(Sue);elr=r(Ult,"blenderbot-small"),Ult.forEach(t),olr=r(Y8e," \u2014 "),mX=n(Y8e,"A",{href:!0});var Jlt=s(mX);rlr=r(Jlt,"TFBlenderbotSmallForConditionalGeneration"),Jlt.forEach(t),tlr=r(Y8e," (BlenderbotSmall model)"),Y8e.forEach(t),alr=i($e),x4=n($e,"LI",{});var K8e=s(x4);Rue=n(K8e,"STRONG",{});var Ylt=s(Rue);nlr=r(Ylt,"encoder-decoder"),Ylt.forEach(t),slr=r(K8e," \u2014 "),hX=n(K8e,"A",{href:!0});var Klt=s(hX);llr=r(Klt,"TFEncoderDecoderModel"),Klt.forEach(t),ilr=r(K8e," (Encoder decoder model)"),K8e.forEach(t),dlr=i($e),$4=n($e,"LI",{});var Z8e=s($4);Bue=n(Z8e,"STRONG",{});var Zlt=s(Bue);clr=r(Zlt,"led"),Zlt.forEach(t),flr=r(Z8e," \u2014 "),gX=n(Z8e,"A",{href:!0});var eit=s(gX);mlr=r(eit,"TFLEDForConditionalGeneration"),eit.forEach(t),hlr=r(Z8e," (LED model)"),Z8e.forEach(t),glr=i($e),k4=n($e,"LI",{});var exe=s(k4);Pue=n(exe,"STRONG",{});var oit=s(Pue);plr=r(oit,"marian"),oit.forEach(t),ulr=r(exe," \u2014 "),pX=n(exe,"A",{href:!0});var rit=s(pX);_lr=r(rit,"TFMarianMTModel"),rit.forEach(t),blr=r(exe," (Marian model)"),exe.forEach(t),Flr=i($e),S4=n($e,"LI",{});var oxe=s(S4);Iue=n(oxe,"STRONG",{});var tit=s(Iue);vlr=r(tit,"mbart"),tit.forEach(t),Tlr=r(oxe," \u2014 "),uX=n(oxe,"A",{href:!0});var ait=s(uX);Mlr=r(ait,"TFMBartForConditionalGeneration"),ait.forEach(t),Elr=r(oxe," (mBART model)"),oxe.forEach(t),Clr=i($e),R4=n($e,"LI",{});var rxe=s(R4);que=n(rxe,"STRONG",{});var nit=s(que);wlr=r(nit,"mt5"),nit.forEach(t),Alr=r(rxe," \u2014 "),_X=n(rxe,"A",{href:!0});var sit=s(_X);ylr=r(sit,"TFMT5ForConditionalGeneration"),sit.forEach(t),Llr=r(rxe," (mT5 model)"),rxe.forEach(t),xlr=i($e),B4=n($e,"LI",{});var txe=s(B4);Nue=n(txe,"STRONG",{});var lit=s(Nue);$lr=r(lit,"pegasus"),lit.forEach(t),klr=r(txe," \u2014 "),bX=n(txe,"A",{href:!0});var iit=s(bX);Slr=r(iit,"TFPegasusForConditionalGeneration"),iit.forEach(t),Rlr=r(txe," (Pegasus model)"),txe.forEach(t),Blr=i($e),P4=n($e,"LI",{});var axe=s(P4);jue=n(axe,"STRONG",{});var dit=s(jue);Plr=r(dit,"t5"),dit.forEach(t),Ilr=r(axe," \u2014 "),FX=n(axe,"A",{href:!0});var cit=s(FX);qlr=r(cit,"TFT5ForConditionalGeneration"),cit.forEach(t),Nlr=r(axe," (T5 model)"),axe.forEach(t),$e.forEach(t),jlr=i(sl),T(I4.$$.fragment,sl),sl.forEach(t),nl.forEach(t),zke=i(f),Dd=n(f,"H2",{class:!0});var JRe=s(Dd);q4=n(JRe,"A",{id:!0,class:!0,href:!0});var fit=s(q4);Due=n(fit,"SPAN",{});var mit=s(Due);T(jL.$$.fragment,mit),mit.forEach(t),fit.forEach(t),Dlr=i(JRe),Gue=n(JRe,"SPAN",{});var hit=s(Gue);Glr=r(hit,"TFAutoModelForSequenceClassification"),hit.forEach(t),JRe.forEach(t),Qke=i(f),or=n(f,"DIV",{class:!0});var ll=s(or);T(DL.$$.fragment,ll),Olr=i(ll),Gd=n(ll,"P",{});var KU=s(Gd);Vlr=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vX=n(KU,"A",{href:!0});var git=s(vX);Xlr=r(git,"from_pretrained()"),git.forEach(t),zlr=r(KU," class method or the "),TX=n(KU,"A",{href:!0});var pit=s(TX);Qlr=r(pit,"from_config()"),pit.forEach(t),Wlr=r(KU,` class
method.`),KU.forEach(t),Hlr=i(ll),GL=n(ll,"P",{});var YRe=s(GL);Ulr=r(YRe,"This class cannot be instantiated directly using "),Oue=n(YRe,"CODE",{});var uit=s(Oue);Jlr=r(uit,"__init__()"),uit.forEach(t),Ylr=r(YRe," (throws an error)."),YRe.forEach(t),Klr=i(ll),Lt=n(ll,"DIV",{class:!0});var jA=s(Lt);T(OL.$$.fragment,jA),Zlr=i(jA),Vue=n(jA,"P",{});var _it=s(Vue);eir=r(_it,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_it.forEach(t),oir=i(jA),Od=n(jA,"P",{});var ZU=s(Od);rir=r(ZU,`Note:
Loading a model from its configuration file does `),Xue=n(ZU,"STRONG",{});var bit=s(Xue);tir=r(bit,"not"),bit.forEach(t),air=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(ZU,"A",{href:!0});var Fit=s(MX);nir=r(Fit,"from_pretrained()"),Fit.forEach(t),sir=r(ZU," to load the model weights."),ZU.forEach(t),lir=i(jA),T(N4.$$.fragment,jA),jA.forEach(t),iir=i(ll),Lr=n(ll,"DIV",{class:!0});var il=s(Lr);T(VL.$$.fragment,il),dir=i(il),zue=n(il,"P",{});var vit=s(zue);cir=r(vit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vit.forEach(t),fir=i(il),Za=n(il,"P",{});var DA=s(Za);mir=r(DA,"The model class to instantiate is selected based on the "),Que=n(DA,"CODE",{});var Tit=s(Que);hir=r(Tit,"model_type"),Tit.forEach(t),gir=r(DA,` property of the config object (either
passed as an argument or loaded from `),Wue=n(DA,"CODE",{});var Mit=s(Wue);pir=r(Mit,"pretrained_model_name_or_path"),Mit.forEach(t),uir=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(DA,"CODE",{});var Eit=s(Hue);_ir=r(Eit,"pretrained_model_name_or_path"),Eit.forEach(t),bir=r(DA,":"),DA.forEach(t),Fir=i(il),ee=n(il,"UL",{});var re=s(ee);j4=n(re,"LI",{});var nxe=s(j4);Uue=n(nxe,"STRONG",{});var Cit=s(Uue);vir=r(Cit,"albert"),Cit.forEach(t),Tir=r(nxe," \u2014 "),EX=n(nxe,"A",{href:!0});var wit=s(EX);Mir=r(wit,"TFAlbertForSequenceClassification"),wit.forEach(t),Eir=r(nxe," (ALBERT model)"),nxe.forEach(t),Cir=i(re),D4=n(re,"LI",{});var sxe=s(D4);Jue=n(sxe,"STRONG",{});var Ait=s(Jue);wir=r(Ait,"bert"),Ait.forEach(t),Air=r(sxe," \u2014 "),CX=n(sxe,"A",{href:!0});var yit=s(CX);yir=r(yit,"TFBertForSequenceClassification"),yit.forEach(t),Lir=r(sxe," (BERT model)"),sxe.forEach(t),xir=i(re),G4=n(re,"LI",{});var lxe=s(G4);Yue=n(lxe,"STRONG",{});var Lit=s(Yue);$ir=r(Lit,"camembert"),Lit.forEach(t),kir=r(lxe," \u2014 "),wX=n(lxe,"A",{href:!0});var xit=s(wX);Sir=r(xit,"TFCamembertForSequenceClassification"),xit.forEach(t),Rir=r(lxe," (CamemBERT model)"),lxe.forEach(t),Bir=i(re),O4=n(re,"LI",{});var ixe=s(O4);Kue=n(ixe,"STRONG",{});var $it=s(Kue);Pir=r($it,"convbert"),$it.forEach(t),Iir=r(ixe," \u2014 "),AX=n(ixe,"A",{href:!0});var kit=s(AX);qir=r(kit,"TFConvBertForSequenceClassification"),kit.forEach(t),Nir=r(ixe," (ConvBERT model)"),ixe.forEach(t),jir=i(re),V4=n(re,"LI",{});var dxe=s(V4);Zue=n(dxe,"STRONG",{});var Sit=s(Zue);Dir=r(Sit,"ctrl"),Sit.forEach(t),Gir=r(dxe," \u2014 "),yX=n(dxe,"A",{href:!0});var Rit=s(yX);Oir=r(Rit,"TFCTRLForSequenceClassification"),Rit.forEach(t),Vir=r(dxe," (CTRL model)"),dxe.forEach(t),Xir=i(re),X4=n(re,"LI",{});var cxe=s(X4);e_e=n(cxe,"STRONG",{});var Bit=s(e_e);zir=r(Bit,"deberta"),Bit.forEach(t),Qir=r(cxe," \u2014 "),LX=n(cxe,"A",{href:!0});var Pit=s(LX);Wir=r(Pit,"TFDebertaForSequenceClassification"),Pit.forEach(t),Hir=r(cxe," (DeBERTa model)"),cxe.forEach(t),Uir=i(re),z4=n(re,"LI",{});var fxe=s(z4);o_e=n(fxe,"STRONG",{});var Iit=s(o_e);Jir=r(Iit,"deberta-v2"),Iit.forEach(t),Yir=r(fxe," \u2014 "),xX=n(fxe,"A",{href:!0});var qit=s(xX);Kir=r(qit,"TFDebertaV2ForSequenceClassification"),qit.forEach(t),Zir=r(fxe," (DeBERTa-v2 model)"),fxe.forEach(t),edr=i(re),Q4=n(re,"LI",{});var mxe=s(Q4);r_e=n(mxe,"STRONG",{});var Nit=s(r_e);odr=r(Nit,"distilbert"),Nit.forEach(t),rdr=r(mxe," \u2014 "),$X=n(mxe,"A",{href:!0});var jit=s($X);tdr=r(jit,"TFDistilBertForSequenceClassification"),jit.forEach(t),adr=r(mxe," (DistilBERT model)"),mxe.forEach(t),ndr=i(re),W4=n(re,"LI",{});var hxe=s(W4);t_e=n(hxe,"STRONG",{});var Dit=s(t_e);sdr=r(Dit,"electra"),Dit.forEach(t),ldr=r(hxe," \u2014 "),kX=n(hxe,"A",{href:!0});var Git=s(kX);idr=r(Git,"TFElectraForSequenceClassification"),Git.forEach(t),ddr=r(hxe," (ELECTRA model)"),hxe.forEach(t),cdr=i(re),H4=n(re,"LI",{});var gxe=s(H4);a_e=n(gxe,"STRONG",{});var Oit=s(a_e);fdr=r(Oit,"flaubert"),Oit.forEach(t),mdr=r(gxe," \u2014 "),SX=n(gxe,"A",{href:!0});var Vit=s(SX);hdr=r(Vit,"TFFlaubertForSequenceClassification"),Vit.forEach(t),gdr=r(gxe," (FlauBERT model)"),gxe.forEach(t),pdr=i(re),U4=n(re,"LI",{});var pxe=s(U4);n_e=n(pxe,"STRONG",{});var Xit=s(n_e);udr=r(Xit,"funnel"),Xit.forEach(t),_dr=r(pxe," \u2014 "),RX=n(pxe,"A",{href:!0});var zit=s(RX);bdr=r(zit,"TFFunnelForSequenceClassification"),zit.forEach(t),Fdr=r(pxe," (Funnel Transformer model)"),pxe.forEach(t),vdr=i(re),J4=n(re,"LI",{});var uxe=s(J4);s_e=n(uxe,"STRONG",{});var Qit=s(s_e);Tdr=r(Qit,"gpt2"),Qit.forEach(t),Mdr=r(uxe," \u2014 "),BX=n(uxe,"A",{href:!0});var Wit=s(BX);Edr=r(Wit,"TFGPT2ForSequenceClassification"),Wit.forEach(t),Cdr=r(uxe," (OpenAI GPT-2 model)"),uxe.forEach(t),wdr=i(re),Y4=n(re,"LI",{});var _xe=s(Y4);l_e=n(_xe,"STRONG",{});var Hit=s(l_e);Adr=r(Hit,"layoutlm"),Hit.forEach(t),ydr=r(_xe," \u2014 "),PX=n(_xe,"A",{href:!0});var Uit=s(PX);Ldr=r(Uit,"TFLayoutLMForSequenceClassification"),Uit.forEach(t),xdr=r(_xe," (LayoutLM model)"),_xe.forEach(t),$dr=i(re),K4=n(re,"LI",{});var bxe=s(K4);i_e=n(bxe,"STRONG",{});var Jit=s(i_e);kdr=r(Jit,"longformer"),Jit.forEach(t),Sdr=r(bxe," \u2014 "),IX=n(bxe,"A",{href:!0});var Yit=s(IX);Rdr=r(Yit,"TFLongformerForSequenceClassification"),Yit.forEach(t),Bdr=r(bxe," (Longformer model)"),bxe.forEach(t),Pdr=i(re),Z4=n(re,"LI",{});var Fxe=s(Z4);d_e=n(Fxe,"STRONG",{});var Kit=s(d_e);Idr=r(Kit,"mobilebert"),Kit.forEach(t),qdr=r(Fxe," \u2014 "),qX=n(Fxe,"A",{href:!0});var Zit=s(qX);Ndr=r(Zit,"TFMobileBertForSequenceClassification"),Zit.forEach(t),jdr=r(Fxe," (MobileBERT model)"),Fxe.forEach(t),Ddr=i(re),eE=n(re,"LI",{});var vxe=s(eE);c_e=n(vxe,"STRONG",{});var edt=s(c_e);Gdr=r(edt,"mpnet"),edt.forEach(t),Odr=r(vxe," \u2014 "),NX=n(vxe,"A",{href:!0});var odt=s(NX);Vdr=r(odt,"TFMPNetForSequenceClassification"),odt.forEach(t),Xdr=r(vxe," (MPNet model)"),vxe.forEach(t),zdr=i(re),oE=n(re,"LI",{});var Txe=s(oE);f_e=n(Txe,"STRONG",{});var rdt=s(f_e);Qdr=r(rdt,"openai-gpt"),rdt.forEach(t),Wdr=r(Txe," \u2014 "),jX=n(Txe,"A",{href:!0});var tdt=s(jX);Hdr=r(tdt,"TFOpenAIGPTForSequenceClassification"),tdt.forEach(t),Udr=r(Txe," (OpenAI GPT model)"),Txe.forEach(t),Jdr=i(re),rE=n(re,"LI",{});var Mxe=s(rE);m_e=n(Mxe,"STRONG",{});var adt=s(m_e);Ydr=r(adt,"rembert"),adt.forEach(t),Kdr=r(Mxe," \u2014 "),DX=n(Mxe,"A",{href:!0});var ndt=s(DX);Zdr=r(ndt,"TFRemBertForSequenceClassification"),ndt.forEach(t),ecr=r(Mxe," (RemBERT model)"),Mxe.forEach(t),ocr=i(re),tE=n(re,"LI",{});var Exe=s(tE);h_e=n(Exe,"STRONG",{});var sdt=s(h_e);rcr=r(sdt,"roberta"),sdt.forEach(t),tcr=r(Exe," \u2014 "),GX=n(Exe,"A",{href:!0});var ldt=s(GX);acr=r(ldt,"TFRobertaForSequenceClassification"),ldt.forEach(t),ncr=r(Exe," (RoBERTa model)"),Exe.forEach(t),scr=i(re),aE=n(re,"LI",{});var Cxe=s(aE);g_e=n(Cxe,"STRONG",{});var idt=s(g_e);lcr=r(idt,"roformer"),idt.forEach(t),icr=r(Cxe," \u2014 "),OX=n(Cxe,"A",{href:!0});var ddt=s(OX);dcr=r(ddt,"TFRoFormerForSequenceClassification"),ddt.forEach(t),ccr=r(Cxe," (RoFormer model)"),Cxe.forEach(t),fcr=i(re),nE=n(re,"LI",{});var wxe=s(nE);p_e=n(wxe,"STRONG",{});var cdt=s(p_e);mcr=r(cdt,"tapas"),cdt.forEach(t),hcr=r(wxe," \u2014 "),VX=n(wxe,"A",{href:!0});var fdt=s(VX);gcr=r(fdt,"TFTapasForSequenceClassification"),fdt.forEach(t),pcr=r(wxe," (TAPAS model)"),wxe.forEach(t),ucr=i(re),sE=n(re,"LI",{});var Axe=s(sE);u_e=n(Axe,"STRONG",{});var mdt=s(u_e);_cr=r(mdt,"transfo-xl"),mdt.forEach(t),bcr=r(Axe," \u2014 "),XX=n(Axe,"A",{href:!0});var hdt=s(XX);Fcr=r(hdt,"TFTransfoXLForSequenceClassification"),hdt.forEach(t),vcr=r(Axe," (Transformer-XL model)"),Axe.forEach(t),Tcr=i(re),lE=n(re,"LI",{});var yxe=s(lE);__e=n(yxe,"STRONG",{});var gdt=s(__e);Mcr=r(gdt,"xlm"),gdt.forEach(t),Ecr=r(yxe," \u2014 "),zX=n(yxe,"A",{href:!0});var pdt=s(zX);Ccr=r(pdt,"TFXLMForSequenceClassification"),pdt.forEach(t),wcr=r(yxe," (XLM model)"),yxe.forEach(t),Acr=i(re),iE=n(re,"LI",{});var Lxe=s(iE);b_e=n(Lxe,"STRONG",{});var udt=s(b_e);ycr=r(udt,"xlm-roberta"),udt.forEach(t),Lcr=r(Lxe," \u2014 "),QX=n(Lxe,"A",{href:!0});var _dt=s(QX);xcr=r(_dt,"TFXLMRobertaForSequenceClassification"),_dt.forEach(t),$cr=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),kcr=i(re),dE=n(re,"LI",{});var xxe=s(dE);F_e=n(xxe,"STRONG",{});var bdt=s(F_e);Scr=r(bdt,"xlnet"),bdt.forEach(t),Rcr=r(xxe," \u2014 "),WX=n(xxe,"A",{href:!0});var Fdt=s(WX);Bcr=r(Fdt,"TFXLNetForSequenceClassification"),Fdt.forEach(t),Pcr=r(xxe," (XLNet model)"),xxe.forEach(t),re.forEach(t),Icr=i(il),T(cE.$$.fragment,il),il.forEach(t),ll.forEach(t),Wke=i(f),Vd=n(f,"H2",{class:!0});var KRe=s(Vd);fE=n(KRe,"A",{id:!0,class:!0,href:!0});var vdt=s(fE);v_e=n(vdt,"SPAN",{});var Tdt=s(v_e);T(XL.$$.fragment,Tdt),Tdt.forEach(t),vdt.forEach(t),qcr=i(KRe),T_e=n(KRe,"SPAN",{});var Mdt=s(T_e);Ncr=r(Mdt,"TFAutoModelForMultipleChoice"),Mdt.forEach(t),KRe.forEach(t),Hke=i(f),rr=n(f,"DIV",{class:!0});var dl=s(rr);T(zL.$$.fragment,dl),jcr=i(dl),Xd=n(dl,"P",{});var eJ=s(Xd);Dcr=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HX=n(eJ,"A",{href:!0});var Edt=s(HX);Gcr=r(Edt,"from_pretrained()"),Edt.forEach(t),Ocr=r(eJ," class method or the "),UX=n(eJ,"A",{href:!0});var Cdt=s(UX);Vcr=r(Cdt,"from_config()"),Cdt.forEach(t),Xcr=r(eJ,` class
method.`),eJ.forEach(t),zcr=i(dl),QL=n(dl,"P",{});var ZRe=s(QL);Qcr=r(ZRe,"This class cannot be instantiated directly using "),M_e=n(ZRe,"CODE",{});var wdt=s(M_e);Wcr=r(wdt,"__init__()"),wdt.forEach(t),Hcr=r(ZRe," (throws an error)."),ZRe.forEach(t),Ucr=i(dl),xt=n(dl,"DIV",{class:!0});var GA=s(xt);T(WL.$$.fragment,GA),Jcr=i(GA),E_e=n(GA,"P",{});var Adt=s(E_e);Ycr=r(Adt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Adt.forEach(t),Kcr=i(GA),zd=n(GA,"P",{});var oJ=s(zd);Zcr=r(oJ,`Note:
Loading a model from its configuration file does `),C_e=n(oJ,"STRONG",{});var ydt=s(C_e);efr=r(ydt,"not"),ydt.forEach(t),ofr=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(oJ,"A",{href:!0});var Ldt=s(JX);rfr=r(Ldt,"from_pretrained()"),Ldt.forEach(t),tfr=r(oJ," to load the model weights."),oJ.forEach(t),afr=i(GA),T(mE.$$.fragment,GA),GA.forEach(t),nfr=i(dl),xr=n(dl,"DIV",{class:!0});var cl=s(xr);T(HL.$$.fragment,cl),sfr=i(cl),w_e=n(cl,"P",{});var xdt=s(w_e);lfr=r(xdt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xdt.forEach(t),ifr=i(cl),en=n(cl,"P",{});var OA=s(en);dfr=r(OA,"The model class to instantiate is selected based on the "),A_e=n(OA,"CODE",{});var $dt=s(A_e);cfr=r($dt,"model_type"),$dt.forEach(t),ffr=r(OA,` property of the config object (either
passed as an argument or loaded from `),y_e=n(OA,"CODE",{});var kdt=s(y_e);mfr=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),hfr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=n(OA,"CODE",{});var Sdt=s(L_e);gfr=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),pfr=r(OA,":"),OA.forEach(t),ufr=i(cl),he=n(cl,"UL",{});var ue=s(he);hE=n(ue,"LI",{});var $xe=s(hE);x_e=n($xe,"STRONG",{});var Rdt=s(x_e);_fr=r(Rdt,"albert"),Rdt.forEach(t),bfr=r($xe," \u2014 "),YX=n($xe,"A",{href:!0});var Bdt=s(YX);Ffr=r(Bdt,"TFAlbertForMultipleChoice"),Bdt.forEach(t),vfr=r($xe," (ALBERT model)"),$xe.forEach(t),Tfr=i(ue),gE=n(ue,"LI",{});var kxe=s(gE);$_e=n(kxe,"STRONG",{});var Pdt=s($_e);Mfr=r(Pdt,"bert"),Pdt.forEach(t),Efr=r(kxe," \u2014 "),KX=n(kxe,"A",{href:!0});var Idt=s(KX);Cfr=r(Idt,"TFBertForMultipleChoice"),Idt.forEach(t),wfr=r(kxe," (BERT model)"),kxe.forEach(t),Afr=i(ue),pE=n(ue,"LI",{});var Sxe=s(pE);k_e=n(Sxe,"STRONG",{});var qdt=s(k_e);yfr=r(qdt,"camembert"),qdt.forEach(t),Lfr=r(Sxe," \u2014 "),ZX=n(Sxe,"A",{href:!0});var Ndt=s(ZX);xfr=r(Ndt,"TFCamembertForMultipleChoice"),Ndt.forEach(t),$fr=r(Sxe," (CamemBERT model)"),Sxe.forEach(t),kfr=i(ue),uE=n(ue,"LI",{});var Rxe=s(uE);S_e=n(Rxe,"STRONG",{});var jdt=s(S_e);Sfr=r(jdt,"convbert"),jdt.forEach(t),Rfr=r(Rxe," \u2014 "),ez=n(Rxe,"A",{href:!0});var Ddt=s(ez);Bfr=r(Ddt,"TFConvBertForMultipleChoice"),Ddt.forEach(t),Pfr=r(Rxe," (ConvBERT model)"),Rxe.forEach(t),Ifr=i(ue),_E=n(ue,"LI",{});var Bxe=s(_E);R_e=n(Bxe,"STRONG",{});var Gdt=s(R_e);qfr=r(Gdt,"distilbert"),Gdt.forEach(t),Nfr=r(Bxe," \u2014 "),oz=n(Bxe,"A",{href:!0});var Odt=s(oz);jfr=r(Odt,"TFDistilBertForMultipleChoice"),Odt.forEach(t),Dfr=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),Gfr=i(ue),bE=n(ue,"LI",{});var Pxe=s(bE);B_e=n(Pxe,"STRONG",{});var Vdt=s(B_e);Ofr=r(Vdt,"electra"),Vdt.forEach(t),Vfr=r(Pxe," \u2014 "),rz=n(Pxe,"A",{href:!0});var Xdt=s(rz);Xfr=r(Xdt,"TFElectraForMultipleChoice"),Xdt.forEach(t),zfr=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),Qfr=i(ue),FE=n(ue,"LI",{});var Ixe=s(FE);P_e=n(Ixe,"STRONG",{});var zdt=s(P_e);Wfr=r(zdt,"flaubert"),zdt.forEach(t),Hfr=r(Ixe," \u2014 "),tz=n(Ixe,"A",{href:!0});var Qdt=s(tz);Ufr=r(Qdt,"TFFlaubertForMultipleChoice"),Qdt.forEach(t),Jfr=r(Ixe," (FlauBERT model)"),Ixe.forEach(t),Yfr=i(ue),vE=n(ue,"LI",{});var qxe=s(vE);I_e=n(qxe,"STRONG",{});var Wdt=s(I_e);Kfr=r(Wdt,"funnel"),Wdt.forEach(t),Zfr=r(qxe," \u2014 "),az=n(qxe,"A",{href:!0});var Hdt=s(az);emr=r(Hdt,"TFFunnelForMultipleChoice"),Hdt.forEach(t),omr=r(qxe," (Funnel Transformer model)"),qxe.forEach(t),rmr=i(ue),TE=n(ue,"LI",{});var Nxe=s(TE);q_e=n(Nxe,"STRONG",{});var Udt=s(q_e);tmr=r(Udt,"longformer"),Udt.forEach(t),amr=r(Nxe," \u2014 "),nz=n(Nxe,"A",{href:!0});var Jdt=s(nz);nmr=r(Jdt,"TFLongformerForMultipleChoice"),Jdt.forEach(t),smr=r(Nxe," (Longformer model)"),Nxe.forEach(t),lmr=i(ue),ME=n(ue,"LI",{});var jxe=s(ME);N_e=n(jxe,"STRONG",{});var Ydt=s(N_e);imr=r(Ydt,"mobilebert"),Ydt.forEach(t),dmr=r(jxe," \u2014 "),sz=n(jxe,"A",{href:!0});var Kdt=s(sz);cmr=r(Kdt,"TFMobileBertForMultipleChoice"),Kdt.forEach(t),fmr=r(jxe," (MobileBERT model)"),jxe.forEach(t),mmr=i(ue),EE=n(ue,"LI",{});var Dxe=s(EE);j_e=n(Dxe,"STRONG",{});var Zdt=s(j_e);hmr=r(Zdt,"mpnet"),Zdt.forEach(t),gmr=r(Dxe," \u2014 "),lz=n(Dxe,"A",{href:!0});var ect=s(lz);pmr=r(ect,"TFMPNetForMultipleChoice"),ect.forEach(t),umr=r(Dxe," (MPNet model)"),Dxe.forEach(t),_mr=i(ue),CE=n(ue,"LI",{});var Gxe=s(CE);D_e=n(Gxe,"STRONG",{});var oct=s(D_e);bmr=r(oct,"rembert"),oct.forEach(t),Fmr=r(Gxe," \u2014 "),iz=n(Gxe,"A",{href:!0});var rct=s(iz);vmr=r(rct,"TFRemBertForMultipleChoice"),rct.forEach(t),Tmr=r(Gxe," (RemBERT model)"),Gxe.forEach(t),Mmr=i(ue),wE=n(ue,"LI",{});var Oxe=s(wE);G_e=n(Oxe,"STRONG",{});var tct=s(G_e);Emr=r(tct,"roberta"),tct.forEach(t),Cmr=r(Oxe," \u2014 "),dz=n(Oxe,"A",{href:!0});var act=s(dz);wmr=r(act,"TFRobertaForMultipleChoice"),act.forEach(t),Amr=r(Oxe," (RoBERTa model)"),Oxe.forEach(t),ymr=i(ue),AE=n(ue,"LI",{});var Vxe=s(AE);O_e=n(Vxe,"STRONG",{});var nct=s(O_e);Lmr=r(nct,"roformer"),nct.forEach(t),xmr=r(Vxe," \u2014 "),cz=n(Vxe,"A",{href:!0});var sct=s(cz);$mr=r(sct,"TFRoFormerForMultipleChoice"),sct.forEach(t),kmr=r(Vxe," (RoFormer model)"),Vxe.forEach(t),Smr=i(ue),yE=n(ue,"LI",{});var Xxe=s(yE);V_e=n(Xxe,"STRONG",{});var lct=s(V_e);Rmr=r(lct,"xlm"),lct.forEach(t),Bmr=r(Xxe," \u2014 "),fz=n(Xxe,"A",{href:!0});var ict=s(fz);Pmr=r(ict,"TFXLMForMultipleChoice"),ict.forEach(t),Imr=r(Xxe," (XLM model)"),Xxe.forEach(t),qmr=i(ue),LE=n(ue,"LI",{});var zxe=s(LE);X_e=n(zxe,"STRONG",{});var dct=s(X_e);Nmr=r(dct,"xlm-roberta"),dct.forEach(t),jmr=r(zxe," \u2014 "),mz=n(zxe,"A",{href:!0});var cct=s(mz);Dmr=r(cct,"TFXLMRobertaForMultipleChoice"),cct.forEach(t),Gmr=r(zxe," (XLM-RoBERTa model)"),zxe.forEach(t),Omr=i(ue),xE=n(ue,"LI",{});var Qxe=s(xE);z_e=n(Qxe,"STRONG",{});var fct=s(z_e);Vmr=r(fct,"xlnet"),fct.forEach(t),Xmr=r(Qxe," \u2014 "),hz=n(Qxe,"A",{href:!0});var mct=s(hz);zmr=r(mct,"TFXLNetForMultipleChoice"),mct.forEach(t),Qmr=r(Qxe," (XLNet model)"),Qxe.forEach(t),ue.forEach(t),Wmr=i(cl),T($E.$$.fragment,cl),cl.forEach(t),dl.forEach(t),Uke=i(f),Qd=n(f,"H2",{class:!0});var eBe=s(Qd);kE=n(eBe,"A",{id:!0,class:!0,href:!0});var hct=s(kE);Q_e=n(hct,"SPAN",{});var gct=s(Q_e);T(UL.$$.fragment,gct),gct.forEach(t),hct.forEach(t),Hmr=i(eBe),W_e=n(eBe,"SPAN",{});var pct=s(W_e);Umr=r(pct,"TFAutoModelForTableQuestionAnswering"),pct.forEach(t),eBe.forEach(t),Jke=i(f),tr=n(f,"DIV",{class:!0});var fl=s(tr);T(JL.$$.fragment,fl),Jmr=i(fl),Wd=n(fl,"P",{});var rJ=s(Wd);Ymr=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gz=n(rJ,"A",{href:!0});var uct=s(gz);Kmr=r(uct,"from_pretrained()"),uct.forEach(t),Zmr=r(rJ," class method or the "),pz=n(rJ,"A",{href:!0});var _ct=s(pz);ehr=r(_ct,"from_config()"),_ct.forEach(t),ohr=r(rJ,` class
method.`),rJ.forEach(t),rhr=i(fl),YL=n(fl,"P",{});var oBe=s(YL);thr=r(oBe,"This class cannot be instantiated directly using "),H_e=n(oBe,"CODE",{});var bct=s(H_e);ahr=r(bct,"__init__()"),bct.forEach(t),nhr=r(oBe," (throws an error)."),oBe.forEach(t),shr=i(fl),$t=n(fl,"DIV",{class:!0});var VA=s($t);T(KL.$$.fragment,VA),lhr=i(VA),U_e=n(VA,"P",{});var Fct=s(U_e);ihr=r(Fct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fct.forEach(t),dhr=i(VA),Hd=n(VA,"P",{});var tJ=s(Hd);chr=r(tJ,`Note:
Loading a model from its configuration file does `),J_e=n(tJ,"STRONG",{});var vct=s(J_e);fhr=r(vct,"not"),vct.forEach(t),mhr=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(tJ,"A",{href:!0});var Tct=s(uz);hhr=r(Tct,"from_pretrained()"),Tct.forEach(t),ghr=r(tJ," to load the model weights."),tJ.forEach(t),phr=i(VA),T(SE.$$.fragment,VA),VA.forEach(t),uhr=i(fl),$r=n(fl,"DIV",{class:!0});var ml=s($r);T(ZL.$$.fragment,ml),_hr=i(ml),Y_e=n(ml,"P",{});var Mct=s(Y_e);bhr=r(Mct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mct.forEach(t),Fhr=i(ml),on=n(ml,"P",{});var XA=s(on);vhr=r(XA,"The model class to instantiate is selected based on the "),K_e=n(XA,"CODE",{});var Ect=s(K_e);Thr=r(Ect,"model_type"),Ect.forEach(t),Mhr=r(XA,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(XA,"CODE",{});var Cct=s(Z_e);Ehr=r(Cct,"pretrained_model_name_or_path"),Cct.forEach(t),Chr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(XA,"CODE",{});var wct=s(ebe);whr=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),Ahr=r(XA,":"),XA.forEach(t),yhr=i(ml),obe=n(ml,"UL",{});var Act=s(obe);RE=n(Act,"LI",{});var Wxe=s(RE);rbe=n(Wxe,"STRONG",{});var yct=s(rbe);Lhr=r(yct,"tapas"),yct.forEach(t),xhr=r(Wxe," \u2014 "),_z=n(Wxe,"A",{href:!0});var Lct=s(_z);$hr=r(Lct,"TFTapasForQuestionAnswering"),Lct.forEach(t),khr=r(Wxe," (TAPAS model)"),Wxe.forEach(t),Act.forEach(t),Shr=i(ml),T(BE.$$.fragment,ml),ml.forEach(t),fl.forEach(t),Yke=i(f),Ud=n(f,"H2",{class:!0});var rBe=s(Ud);PE=n(rBe,"A",{id:!0,class:!0,href:!0});var xct=s(PE);tbe=n(xct,"SPAN",{});var $ct=s(tbe);T(e8.$$.fragment,$ct),$ct.forEach(t),xct.forEach(t),Rhr=i(rBe),abe=n(rBe,"SPAN",{});var kct=s(abe);Bhr=r(kct,"TFAutoModelForTokenClassification"),kct.forEach(t),rBe.forEach(t),Kke=i(f),ar=n(f,"DIV",{class:!0});var hl=s(ar);T(o8.$$.fragment,hl),Phr=i(hl),Jd=n(hl,"P",{});var aJ=s(Jd);Ihr=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bz=n(aJ,"A",{href:!0});var Sct=s(bz);qhr=r(Sct,"from_pretrained()"),Sct.forEach(t),Nhr=r(aJ," class method or the "),Fz=n(aJ,"A",{href:!0});var Rct=s(Fz);jhr=r(Rct,"from_config()"),Rct.forEach(t),Dhr=r(aJ,` class
method.`),aJ.forEach(t),Ghr=i(hl),r8=n(hl,"P",{});var tBe=s(r8);Ohr=r(tBe,"This class cannot be instantiated directly using "),nbe=n(tBe,"CODE",{});var Bct=s(nbe);Vhr=r(Bct,"__init__()"),Bct.forEach(t),Xhr=r(tBe," (throws an error)."),tBe.forEach(t),zhr=i(hl),kt=n(hl,"DIV",{class:!0});var zA=s(kt);T(t8.$$.fragment,zA),Qhr=i(zA),sbe=n(zA,"P",{});var Pct=s(sbe);Whr=r(Pct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pct.forEach(t),Hhr=i(zA),Yd=n(zA,"P",{});var nJ=s(Yd);Uhr=r(nJ,`Note:
Loading a model from its configuration file does `),lbe=n(nJ,"STRONG",{});var Ict=s(lbe);Jhr=r(Ict,"not"),Ict.forEach(t),Yhr=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(nJ,"A",{href:!0});var qct=s(vz);Khr=r(qct,"from_pretrained()"),qct.forEach(t),Zhr=r(nJ," to load the model weights."),nJ.forEach(t),egr=i(zA),T(IE.$$.fragment,zA),zA.forEach(t),ogr=i(hl),kr=n(hl,"DIV",{class:!0});var gl=s(kr);T(a8.$$.fragment,gl),rgr=i(gl),ibe=n(gl,"P",{});var Nct=s(ibe);tgr=r(Nct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nct.forEach(t),agr=i(gl),rn=n(gl,"P",{});var QA=s(rn);ngr=r(QA,"The model class to instantiate is selected based on the "),dbe=n(QA,"CODE",{});var jct=s(dbe);sgr=r(jct,"model_type"),jct.forEach(t),lgr=r(QA,` property of the config object (either
passed as an argument or loaded from `),cbe=n(QA,"CODE",{});var Dct=s(cbe);igr=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),dgr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(QA,"CODE",{});var Gct=s(fbe);cgr=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),fgr=r(QA,":"),QA.forEach(t),mgr=i(gl),le=n(gl,"UL",{});var ce=s(le);qE=n(ce,"LI",{});var Hxe=s(qE);mbe=n(Hxe,"STRONG",{});var Oct=s(mbe);hgr=r(Oct,"albert"),Oct.forEach(t),ggr=r(Hxe," \u2014 "),Tz=n(Hxe,"A",{href:!0});var Vct=s(Tz);pgr=r(Vct,"TFAlbertForTokenClassification"),Vct.forEach(t),ugr=r(Hxe," (ALBERT model)"),Hxe.forEach(t),_gr=i(ce),NE=n(ce,"LI",{});var Uxe=s(NE);hbe=n(Uxe,"STRONG",{});var Xct=s(hbe);bgr=r(Xct,"bert"),Xct.forEach(t),Fgr=r(Uxe," \u2014 "),Mz=n(Uxe,"A",{href:!0});var zct=s(Mz);vgr=r(zct,"TFBertForTokenClassification"),zct.forEach(t),Tgr=r(Uxe," (BERT model)"),Uxe.forEach(t),Mgr=i(ce),jE=n(ce,"LI",{});var Jxe=s(jE);gbe=n(Jxe,"STRONG",{});var Qct=s(gbe);Egr=r(Qct,"camembert"),Qct.forEach(t),Cgr=r(Jxe," \u2014 "),Ez=n(Jxe,"A",{href:!0});var Wct=s(Ez);wgr=r(Wct,"TFCamembertForTokenClassification"),Wct.forEach(t),Agr=r(Jxe," (CamemBERT model)"),Jxe.forEach(t),ygr=i(ce),DE=n(ce,"LI",{});var Yxe=s(DE);pbe=n(Yxe,"STRONG",{});var Hct=s(pbe);Lgr=r(Hct,"convbert"),Hct.forEach(t),xgr=r(Yxe," \u2014 "),Cz=n(Yxe,"A",{href:!0});var Uct=s(Cz);$gr=r(Uct,"TFConvBertForTokenClassification"),Uct.forEach(t),kgr=r(Yxe," (ConvBERT model)"),Yxe.forEach(t),Sgr=i(ce),GE=n(ce,"LI",{});var Kxe=s(GE);ube=n(Kxe,"STRONG",{});var Jct=s(ube);Rgr=r(Jct,"deberta"),Jct.forEach(t),Bgr=r(Kxe," \u2014 "),wz=n(Kxe,"A",{href:!0});var Yct=s(wz);Pgr=r(Yct,"TFDebertaForTokenClassification"),Yct.forEach(t),Igr=r(Kxe," (DeBERTa model)"),Kxe.forEach(t),qgr=i(ce),OE=n(ce,"LI",{});var Zxe=s(OE);_be=n(Zxe,"STRONG",{});var Kct=s(_be);Ngr=r(Kct,"deberta-v2"),Kct.forEach(t),jgr=r(Zxe," \u2014 "),Az=n(Zxe,"A",{href:!0});var Zct=s(Az);Dgr=r(Zct,"TFDebertaV2ForTokenClassification"),Zct.forEach(t),Ggr=r(Zxe," (DeBERTa-v2 model)"),Zxe.forEach(t),Ogr=i(ce),VE=n(ce,"LI",{});var e7e=s(VE);bbe=n(e7e,"STRONG",{});var eft=s(bbe);Vgr=r(eft,"distilbert"),eft.forEach(t),Xgr=r(e7e," \u2014 "),yz=n(e7e,"A",{href:!0});var oft=s(yz);zgr=r(oft,"TFDistilBertForTokenClassification"),oft.forEach(t),Qgr=r(e7e," (DistilBERT model)"),e7e.forEach(t),Wgr=i(ce),XE=n(ce,"LI",{});var o7e=s(XE);Fbe=n(o7e,"STRONG",{});var rft=s(Fbe);Hgr=r(rft,"electra"),rft.forEach(t),Ugr=r(o7e," \u2014 "),Lz=n(o7e,"A",{href:!0});var tft=s(Lz);Jgr=r(tft,"TFElectraForTokenClassification"),tft.forEach(t),Ygr=r(o7e," (ELECTRA model)"),o7e.forEach(t),Kgr=i(ce),zE=n(ce,"LI",{});var r7e=s(zE);vbe=n(r7e,"STRONG",{});var aft=s(vbe);Zgr=r(aft,"flaubert"),aft.forEach(t),epr=r(r7e," \u2014 "),xz=n(r7e,"A",{href:!0});var nft=s(xz);opr=r(nft,"TFFlaubertForTokenClassification"),nft.forEach(t),rpr=r(r7e," (FlauBERT model)"),r7e.forEach(t),tpr=i(ce),QE=n(ce,"LI",{});var t7e=s(QE);Tbe=n(t7e,"STRONG",{});var sft=s(Tbe);apr=r(sft,"funnel"),sft.forEach(t),npr=r(t7e," \u2014 "),$z=n(t7e,"A",{href:!0});var lft=s($z);spr=r(lft,"TFFunnelForTokenClassification"),lft.forEach(t),lpr=r(t7e," (Funnel Transformer model)"),t7e.forEach(t),ipr=i(ce),WE=n(ce,"LI",{});var a7e=s(WE);Mbe=n(a7e,"STRONG",{});var ift=s(Mbe);dpr=r(ift,"layoutlm"),ift.forEach(t),cpr=r(a7e," \u2014 "),kz=n(a7e,"A",{href:!0});var dft=s(kz);fpr=r(dft,"TFLayoutLMForTokenClassification"),dft.forEach(t),mpr=r(a7e," (LayoutLM model)"),a7e.forEach(t),hpr=i(ce),HE=n(ce,"LI",{});var n7e=s(HE);Ebe=n(n7e,"STRONG",{});var cft=s(Ebe);gpr=r(cft,"longformer"),cft.forEach(t),ppr=r(n7e," \u2014 "),Sz=n(n7e,"A",{href:!0});var fft=s(Sz);upr=r(fft,"TFLongformerForTokenClassification"),fft.forEach(t),_pr=r(n7e," (Longformer model)"),n7e.forEach(t),bpr=i(ce),UE=n(ce,"LI",{});var s7e=s(UE);Cbe=n(s7e,"STRONG",{});var mft=s(Cbe);Fpr=r(mft,"mobilebert"),mft.forEach(t),vpr=r(s7e," \u2014 "),Rz=n(s7e,"A",{href:!0});var hft=s(Rz);Tpr=r(hft,"TFMobileBertForTokenClassification"),hft.forEach(t),Mpr=r(s7e," (MobileBERT model)"),s7e.forEach(t),Epr=i(ce),JE=n(ce,"LI",{});var l7e=s(JE);wbe=n(l7e,"STRONG",{});var gft=s(wbe);Cpr=r(gft,"mpnet"),gft.forEach(t),wpr=r(l7e," \u2014 "),Bz=n(l7e,"A",{href:!0});var pft=s(Bz);Apr=r(pft,"TFMPNetForTokenClassification"),pft.forEach(t),ypr=r(l7e," (MPNet model)"),l7e.forEach(t),Lpr=i(ce),YE=n(ce,"LI",{});var i7e=s(YE);Abe=n(i7e,"STRONG",{});var uft=s(Abe);xpr=r(uft,"rembert"),uft.forEach(t),$pr=r(i7e," \u2014 "),Pz=n(i7e,"A",{href:!0});var _ft=s(Pz);kpr=r(_ft,"TFRemBertForTokenClassification"),_ft.forEach(t),Spr=r(i7e," (RemBERT model)"),i7e.forEach(t),Rpr=i(ce),KE=n(ce,"LI",{});var d7e=s(KE);ybe=n(d7e,"STRONG",{});var bft=s(ybe);Bpr=r(bft,"roberta"),bft.forEach(t),Ppr=r(d7e," \u2014 "),Iz=n(d7e,"A",{href:!0});var Fft=s(Iz);Ipr=r(Fft,"TFRobertaForTokenClassification"),Fft.forEach(t),qpr=r(d7e," (RoBERTa model)"),d7e.forEach(t),Npr=i(ce),ZE=n(ce,"LI",{});var c7e=s(ZE);Lbe=n(c7e,"STRONG",{});var vft=s(Lbe);jpr=r(vft,"roformer"),vft.forEach(t),Dpr=r(c7e," \u2014 "),qz=n(c7e,"A",{href:!0});var Tft=s(qz);Gpr=r(Tft,"TFRoFormerForTokenClassification"),Tft.forEach(t),Opr=r(c7e," (RoFormer model)"),c7e.forEach(t),Vpr=i(ce),e5=n(ce,"LI",{});var f7e=s(e5);xbe=n(f7e,"STRONG",{});var Mft=s(xbe);Xpr=r(Mft,"xlm"),Mft.forEach(t),zpr=r(f7e," \u2014 "),Nz=n(f7e,"A",{href:!0});var Eft=s(Nz);Qpr=r(Eft,"TFXLMForTokenClassification"),Eft.forEach(t),Wpr=r(f7e," (XLM model)"),f7e.forEach(t),Hpr=i(ce),o5=n(ce,"LI",{});var m7e=s(o5);$be=n(m7e,"STRONG",{});var Cft=s($be);Upr=r(Cft,"xlm-roberta"),Cft.forEach(t),Jpr=r(m7e," \u2014 "),jz=n(m7e,"A",{href:!0});var wft=s(jz);Ypr=r(wft,"TFXLMRobertaForTokenClassification"),wft.forEach(t),Kpr=r(m7e," (XLM-RoBERTa model)"),m7e.forEach(t),Zpr=i(ce),r5=n(ce,"LI",{});var h7e=s(r5);kbe=n(h7e,"STRONG",{});var Aft=s(kbe);eur=r(Aft,"xlnet"),Aft.forEach(t),our=r(h7e," \u2014 "),Dz=n(h7e,"A",{href:!0});var yft=s(Dz);rur=r(yft,"TFXLNetForTokenClassification"),yft.forEach(t),tur=r(h7e," (XLNet model)"),h7e.forEach(t),ce.forEach(t),aur=i(gl),T(t5.$$.fragment,gl),gl.forEach(t),hl.forEach(t),Zke=i(f),Kd=n(f,"H2",{class:!0});var aBe=s(Kd);a5=n(aBe,"A",{id:!0,class:!0,href:!0});var Lft=s(a5);Sbe=n(Lft,"SPAN",{});var xft=s(Sbe);T(n8.$$.fragment,xft),xft.forEach(t),Lft.forEach(t),nur=i(aBe),Rbe=n(aBe,"SPAN",{});var $ft=s(Rbe);sur=r($ft,"TFAutoModelForQuestionAnswering"),$ft.forEach(t),aBe.forEach(t),eSe=i(f),nr=n(f,"DIV",{class:!0});var pl=s(nr);T(s8.$$.fragment,pl),lur=i(pl),Zd=n(pl,"P",{});var sJ=s(Zd);iur=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gz=n(sJ,"A",{href:!0});var kft=s(Gz);dur=r(kft,"from_pretrained()"),kft.forEach(t),cur=r(sJ," class method or the "),Oz=n(sJ,"A",{href:!0});var Sft=s(Oz);fur=r(Sft,"from_config()"),Sft.forEach(t),mur=r(sJ,` class
method.`),sJ.forEach(t),hur=i(pl),l8=n(pl,"P",{});var nBe=s(l8);gur=r(nBe,"This class cannot be instantiated directly using "),Bbe=n(nBe,"CODE",{});var Rft=s(Bbe);pur=r(Rft,"__init__()"),Rft.forEach(t),uur=r(nBe," (throws an error)."),nBe.forEach(t),_ur=i(pl),St=n(pl,"DIV",{class:!0});var WA=s(St);T(i8.$$.fragment,WA),bur=i(WA),Pbe=n(WA,"P",{});var Bft=s(Pbe);Fur=r(Bft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Bft.forEach(t),vur=i(WA),ec=n(WA,"P",{});var lJ=s(ec);Tur=r(lJ,`Note:
Loading a model from its configuration file does `),Ibe=n(lJ,"STRONG",{});var Pft=s(Ibe);Mur=r(Pft,"not"),Pft.forEach(t),Eur=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(lJ,"A",{href:!0});var Ift=s(Vz);Cur=r(Ift,"from_pretrained()"),Ift.forEach(t),wur=r(lJ," to load the model weights."),lJ.forEach(t),Aur=i(WA),T(n5.$$.fragment,WA),WA.forEach(t),yur=i(pl),Sr=n(pl,"DIV",{class:!0});var ul=s(Sr);T(d8.$$.fragment,ul),Lur=i(ul),qbe=n(ul,"P",{});var qft=s(qbe);xur=r(qft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qft.forEach(t),$ur=i(ul),tn=n(ul,"P",{});var HA=s(tn);kur=r(HA,"The model class to instantiate is selected based on the "),Nbe=n(HA,"CODE",{});var Nft=s(Nbe);Sur=r(Nft,"model_type"),Nft.forEach(t),Rur=r(HA,` property of the config object (either
passed as an argument or loaded from `),jbe=n(HA,"CODE",{});var jft=s(jbe);Bur=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),Pur=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(HA,"CODE",{});var Dft=s(Dbe);Iur=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),qur=r(HA,":"),HA.forEach(t),Nur=i(ul),ie=n(ul,"UL",{});var me=s(ie);s5=n(me,"LI",{});var g7e=s(s5);Gbe=n(g7e,"STRONG",{});var Gft=s(Gbe);jur=r(Gft,"albert"),Gft.forEach(t),Dur=r(g7e," \u2014 "),Xz=n(g7e,"A",{href:!0});var Oft=s(Xz);Gur=r(Oft,"TFAlbertForQuestionAnswering"),Oft.forEach(t),Our=r(g7e," (ALBERT model)"),g7e.forEach(t),Vur=i(me),l5=n(me,"LI",{});var p7e=s(l5);Obe=n(p7e,"STRONG",{});var Vft=s(Obe);Xur=r(Vft,"bert"),Vft.forEach(t),zur=r(p7e," \u2014 "),zz=n(p7e,"A",{href:!0});var Xft=s(zz);Qur=r(Xft,"TFBertForQuestionAnswering"),Xft.forEach(t),Wur=r(p7e," (BERT model)"),p7e.forEach(t),Hur=i(me),i5=n(me,"LI",{});var u7e=s(i5);Vbe=n(u7e,"STRONG",{});var zft=s(Vbe);Uur=r(zft,"camembert"),zft.forEach(t),Jur=r(u7e," \u2014 "),Qz=n(u7e,"A",{href:!0});var Qft=s(Qz);Yur=r(Qft,"TFCamembertForQuestionAnswering"),Qft.forEach(t),Kur=r(u7e," (CamemBERT model)"),u7e.forEach(t),Zur=i(me),d5=n(me,"LI",{});var _7e=s(d5);Xbe=n(_7e,"STRONG",{});var Wft=s(Xbe);e_r=r(Wft,"convbert"),Wft.forEach(t),o_r=r(_7e," \u2014 "),Wz=n(_7e,"A",{href:!0});var Hft=s(Wz);r_r=r(Hft,"TFConvBertForQuestionAnswering"),Hft.forEach(t),t_r=r(_7e," (ConvBERT model)"),_7e.forEach(t),a_r=i(me),c5=n(me,"LI",{});var b7e=s(c5);zbe=n(b7e,"STRONG",{});var Uft=s(zbe);n_r=r(Uft,"deberta"),Uft.forEach(t),s_r=r(b7e," \u2014 "),Hz=n(b7e,"A",{href:!0});var Jft=s(Hz);l_r=r(Jft,"TFDebertaForQuestionAnswering"),Jft.forEach(t),i_r=r(b7e," (DeBERTa model)"),b7e.forEach(t),d_r=i(me),f5=n(me,"LI",{});var F7e=s(f5);Qbe=n(F7e,"STRONG",{});var Yft=s(Qbe);c_r=r(Yft,"deberta-v2"),Yft.forEach(t),f_r=r(F7e," \u2014 "),Uz=n(F7e,"A",{href:!0});var Kft=s(Uz);m_r=r(Kft,"TFDebertaV2ForQuestionAnswering"),Kft.forEach(t),h_r=r(F7e," (DeBERTa-v2 model)"),F7e.forEach(t),g_r=i(me),m5=n(me,"LI",{});var v7e=s(m5);Wbe=n(v7e,"STRONG",{});var Zft=s(Wbe);p_r=r(Zft,"distilbert"),Zft.forEach(t),u_r=r(v7e," \u2014 "),Jz=n(v7e,"A",{href:!0});var emt=s(Jz);__r=r(emt,"TFDistilBertForQuestionAnswering"),emt.forEach(t),b_r=r(v7e," (DistilBERT model)"),v7e.forEach(t),F_r=i(me),h5=n(me,"LI",{});var T7e=s(h5);Hbe=n(T7e,"STRONG",{});var omt=s(Hbe);v_r=r(omt,"electra"),omt.forEach(t),T_r=r(T7e," \u2014 "),Yz=n(T7e,"A",{href:!0});var rmt=s(Yz);M_r=r(rmt,"TFElectraForQuestionAnswering"),rmt.forEach(t),E_r=r(T7e," (ELECTRA model)"),T7e.forEach(t),C_r=i(me),g5=n(me,"LI",{});var M7e=s(g5);Ube=n(M7e,"STRONG",{});var tmt=s(Ube);w_r=r(tmt,"flaubert"),tmt.forEach(t),A_r=r(M7e," \u2014 "),Kz=n(M7e,"A",{href:!0});var amt=s(Kz);y_r=r(amt,"TFFlaubertForQuestionAnsweringSimple"),amt.forEach(t),L_r=r(M7e," (FlauBERT model)"),M7e.forEach(t),x_r=i(me),p5=n(me,"LI",{});var E7e=s(p5);Jbe=n(E7e,"STRONG",{});var nmt=s(Jbe);$_r=r(nmt,"funnel"),nmt.forEach(t),k_r=r(E7e," \u2014 "),Zz=n(E7e,"A",{href:!0});var smt=s(Zz);S_r=r(smt,"TFFunnelForQuestionAnswering"),smt.forEach(t),R_r=r(E7e," (Funnel Transformer model)"),E7e.forEach(t),B_r=i(me),u5=n(me,"LI",{});var C7e=s(u5);Ybe=n(C7e,"STRONG",{});var lmt=s(Ybe);P_r=r(lmt,"longformer"),lmt.forEach(t),I_r=r(C7e," \u2014 "),eQ=n(C7e,"A",{href:!0});var imt=s(eQ);q_r=r(imt,"TFLongformerForQuestionAnswering"),imt.forEach(t),N_r=r(C7e," (Longformer model)"),C7e.forEach(t),j_r=i(me),_5=n(me,"LI",{});var w7e=s(_5);Kbe=n(w7e,"STRONG",{});var dmt=s(Kbe);D_r=r(dmt,"mobilebert"),dmt.forEach(t),G_r=r(w7e," \u2014 "),oQ=n(w7e,"A",{href:!0});var cmt=s(oQ);O_r=r(cmt,"TFMobileBertForQuestionAnswering"),cmt.forEach(t),V_r=r(w7e," (MobileBERT model)"),w7e.forEach(t),X_r=i(me),b5=n(me,"LI",{});var A7e=s(b5);Zbe=n(A7e,"STRONG",{});var fmt=s(Zbe);z_r=r(fmt,"mpnet"),fmt.forEach(t),Q_r=r(A7e," \u2014 "),rQ=n(A7e,"A",{href:!0});var mmt=s(rQ);W_r=r(mmt,"TFMPNetForQuestionAnswering"),mmt.forEach(t),H_r=r(A7e," (MPNet model)"),A7e.forEach(t),U_r=i(me),F5=n(me,"LI",{});var y7e=s(F5);e2e=n(y7e,"STRONG",{});var hmt=s(e2e);J_r=r(hmt,"rembert"),hmt.forEach(t),Y_r=r(y7e," \u2014 "),tQ=n(y7e,"A",{href:!0});var gmt=s(tQ);K_r=r(gmt,"TFRemBertForQuestionAnswering"),gmt.forEach(t),Z_r=r(y7e," (RemBERT model)"),y7e.forEach(t),ebr=i(me),v5=n(me,"LI",{});var L7e=s(v5);o2e=n(L7e,"STRONG",{});var pmt=s(o2e);obr=r(pmt,"roberta"),pmt.forEach(t),rbr=r(L7e," \u2014 "),aQ=n(L7e,"A",{href:!0});var umt=s(aQ);tbr=r(umt,"TFRobertaForQuestionAnswering"),umt.forEach(t),abr=r(L7e," (RoBERTa model)"),L7e.forEach(t),nbr=i(me),T5=n(me,"LI",{});var x7e=s(T5);r2e=n(x7e,"STRONG",{});var _mt=s(r2e);sbr=r(_mt,"roformer"),_mt.forEach(t),lbr=r(x7e," \u2014 "),nQ=n(x7e,"A",{href:!0});var bmt=s(nQ);ibr=r(bmt,"TFRoFormerForQuestionAnswering"),bmt.forEach(t),dbr=r(x7e," (RoFormer model)"),x7e.forEach(t),cbr=i(me),M5=n(me,"LI",{});var $7e=s(M5);t2e=n($7e,"STRONG",{});var Fmt=s(t2e);fbr=r(Fmt,"xlm"),Fmt.forEach(t),mbr=r($7e," \u2014 "),sQ=n($7e,"A",{href:!0});var vmt=s(sQ);hbr=r(vmt,"TFXLMForQuestionAnsweringSimple"),vmt.forEach(t),gbr=r($7e," (XLM model)"),$7e.forEach(t),pbr=i(me),E5=n(me,"LI",{});var k7e=s(E5);a2e=n(k7e,"STRONG",{});var Tmt=s(a2e);ubr=r(Tmt,"xlm-roberta"),Tmt.forEach(t),_br=r(k7e," \u2014 "),lQ=n(k7e,"A",{href:!0});var Mmt=s(lQ);bbr=r(Mmt,"TFXLMRobertaForQuestionAnswering"),Mmt.forEach(t),Fbr=r(k7e," (XLM-RoBERTa model)"),k7e.forEach(t),vbr=i(me),C5=n(me,"LI",{});var S7e=s(C5);n2e=n(S7e,"STRONG",{});var Emt=s(n2e);Tbr=r(Emt,"xlnet"),Emt.forEach(t),Mbr=r(S7e," \u2014 "),iQ=n(S7e,"A",{href:!0});var Cmt=s(iQ);Ebr=r(Cmt,"TFXLNetForQuestionAnsweringSimple"),Cmt.forEach(t),Cbr=r(S7e," (XLNet model)"),S7e.forEach(t),me.forEach(t),wbr=i(ul),T(w5.$$.fragment,ul),ul.forEach(t),pl.forEach(t),oSe=i(f),oc=n(f,"H2",{class:!0});var sBe=s(oc);A5=n(sBe,"A",{id:!0,class:!0,href:!0});var wmt=s(A5);s2e=n(wmt,"SPAN",{});var Amt=s(s2e);T(c8.$$.fragment,Amt),Amt.forEach(t),wmt.forEach(t),Abr=i(sBe),l2e=n(sBe,"SPAN",{});var ymt=s(l2e);ybr=r(ymt,"TFAutoModelForVision2Seq"),ymt.forEach(t),sBe.forEach(t),rSe=i(f),sr=n(f,"DIV",{class:!0});var _l=s(sr);T(f8.$$.fragment,_l),Lbr=i(_l),rc=n(_l,"P",{});var iJ=s(rc);xbr=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dQ=n(iJ,"A",{href:!0});var Lmt=s(dQ);$br=r(Lmt,"from_pretrained()"),Lmt.forEach(t),kbr=r(iJ," class method or the "),cQ=n(iJ,"A",{href:!0});var xmt=s(cQ);Sbr=r(xmt,"from_config()"),xmt.forEach(t),Rbr=r(iJ,` class
method.`),iJ.forEach(t),Bbr=i(_l),m8=n(_l,"P",{});var lBe=s(m8);Pbr=r(lBe,"This class cannot be instantiated directly using "),i2e=n(lBe,"CODE",{});var $mt=s(i2e);Ibr=r($mt,"__init__()"),$mt.forEach(t),qbr=r(lBe," (throws an error)."),lBe.forEach(t),Nbr=i(_l),Rt=n(_l,"DIV",{class:!0});var UA=s(Rt);T(h8.$$.fragment,UA),jbr=i(UA),d2e=n(UA,"P",{});var kmt=s(d2e);Dbr=r(kmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kmt.forEach(t),Gbr=i(UA),tc=n(UA,"P",{});var dJ=s(tc);Obr=r(dJ,`Note:
Loading a model from its configuration file does `),c2e=n(dJ,"STRONG",{});var Smt=s(c2e);Vbr=r(Smt,"not"),Smt.forEach(t),Xbr=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(dJ,"A",{href:!0});var Rmt=s(fQ);zbr=r(Rmt,"from_pretrained()"),Rmt.forEach(t),Qbr=r(dJ," to load the model weights."),dJ.forEach(t),Wbr=i(UA),T(y5.$$.fragment,UA),UA.forEach(t),Hbr=i(_l),Rr=n(_l,"DIV",{class:!0});var bl=s(Rr);T(g8.$$.fragment,bl),Ubr=i(bl),f2e=n(bl,"P",{});var Bmt=s(f2e);Jbr=r(Bmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bmt.forEach(t),Ybr=i(bl),an=n(bl,"P",{});var JA=s(an);Kbr=r(JA,"The model class to instantiate is selected based on the "),m2e=n(JA,"CODE",{});var Pmt=s(m2e);Zbr=r(Pmt,"model_type"),Pmt.forEach(t),e2r=r(JA,` property of the config object (either
passed as an argument or loaded from `),h2e=n(JA,"CODE",{});var Imt=s(h2e);o2r=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),r2r=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(JA,"CODE",{});var qmt=s(g2e);t2r=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),a2r=r(JA,":"),JA.forEach(t),n2r=i(bl),p2e=n(bl,"UL",{});var Nmt=s(p2e);L5=n(Nmt,"LI",{});var R7e=s(L5);u2e=n(R7e,"STRONG",{});var jmt=s(u2e);s2r=r(jmt,"vision-encoder-decoder"),jmt.forEach(t),l2r=r(R7e," \u2014 "),mQ=n(R7e,"A",{href:!0});var Dmt=s(mQ);i2r=r(Dmt,"TFVisionEncoderDecoderModel"),Dmt.forEach(t),d2r=r(R7e," (Vision Encoder decoder model)"),R7e.forEach(t),Nmt.forEach(t),c2r=i(bl),T(x5.$$.fragment,bl),bl.forEach(t),_l.forEach(t),tSe=i(f),ac=n(f,"H2",{class:!0});var iBe=s(ac);$5=n(iBe,"A",{id:!0,class:!0,href:!0});var Gmt=s($5);_2e=n(Gmt,"SPAN",{});var Omt=s(_2e);T(p8.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),f2r=i(iBe),b2e=n(iBe,"SPAN",{});var Vmt=s(b2e);m2r=r(Vmt,"TFAutoModelForSpeechSeq2Seq"),Vmt.forEach(t),iBe.forEach(t),aSe=i(f),lr=n(f,"DIV",{class:!0});var Fl=s(lr);T(u8.$$.fragment,Fl),h2r=i(Fl),nc=n(Fl,"P",{});var cJ=s(nc);g2r=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hQ=n(cJ,"A",{href:!0});var Xmt=s(hQ);p2r=r(Xmt,"from_pretrained()"),Xmt.forEach(t),u2r=r(cJ," class method or the "),gQ=n(cJ,"A",{href:!0});var zmt=s(gQ);_2r=r(zmt,"from_config()"),zmt.forEach(t),b2r=r(cJ,` class
method.`),cJ.forEach(t),F2r=i(Fl),_8=n(Fl,"P",{});var dBe=s(_8);v2r=r(dBe,"This class cannot be instantiated directly using "),F2e=n(dBe,"CODE",{});var Qmt=s(F2e);T2r=r(Qmt,"__init__()"),Qmt.forEach(t),M2r=r(dBe," (throws an error)."),dBe.forEach(t),E2r=i(Fl),Bt=n(Fl,"DIV",{class:!0});var YA=s(Bt);T(b8.$$.fragment,YA),C2r=i(YA),v2e=n(YA,"P",{});var Wmt=s(v2e);w2r=r(Wmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Wmt.forEach(t),A2r=i(YA),sc=n(YA,"P",{});var fJ=s(sc);y2r=r(fJ,`Note:
Loading a model from its configuration file does `),T2e=n(fJ,"STRONG",{});var Hmt=s(T2e);L2r=r(Hmt,"not"),Hmt.forEach(t),x2r=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(fJ,"A",{href:!0});var Umt=s(pQ);$2r=r(Umt,"from_pretrained()"),Umt.forEach(t),k2r=r(fJ," to load the model weights."),fJ.forEach(t),S2r=i(YA),T(k5.$$.fragment,YA),YA.forEach(t),R2r=i(Fl),Br=n(Fl,"DIV",{class:!0});var vl=s(Br);T(F8.$$.fragment,vl),B2r=i(vl),M2e=n(vl,"P",{});var Jmt=s(M2e);P2r=r(Jmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jmt.forEach(t),I2r=i(vl),nn=n(vl,"P",{});var KA=s(nn);q2r=r(KA,"The model class to instantiate is selected based on the "),E2e=n(KA,"CODE",{});var Ymt=s(E2e);N2r=r(Ymt,"model_type"),Ymt.forEach(t),j2r=r(KA,` property of the config object (either
passed as an argument or loaded from `),C2e=n(KA,"CODE",{});var Kmt=s(C2e);D2r=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),G2r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(KA,"CODE",{});var Zmt=s(w2e);O2r=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),V2r=r(KA,":"),KA.forEach(t),X2r=i(vl),A2e=n(vl,"UL",{});var eht=s(A2e);S5=n(eht,"LI",{});var B7e=s(S5);y2e=n(B7e,"STRONG",{});var oht=s(y2e);z2r=r(oht,"speech_to_text"),oht.forEach(t),Q2r=r(B7e," \u2014 "),uQ=n(B7e,"A",{href:!0});var rht=s(uQ);W2r=r(rht,"TFSpeech2TextForConditionalGeneration"),rht.forEach(t),H2r=r(B7e," (Speech2Text model)"),B7e.forEach(t),eht.forEach(t),U2r=i(vl),T(R5.$$.fragment,vl),vl.forEach(t),Fl.forEach(t),nSe=i(f),lc=n(f,"H2",{class:!0});var cBe=s(lc);B5=n(cBe,"A",{id:!0,class:!0,href:!0});var tht=s(B5);L2e=n(tht,"SPAN",{});var aht=s(L2e);T(v8.$$.fragment,aht),aht.forEach(t),tht.forEach(t),J2r=i(cBe),x2e=n(cBe,"SPAN",{});var nht=s(x2e);Y2r=r(nht,"FlaxAutoModel"),nht.forEach(t),cBe.forEach(t),sSe=i(f),ir=n(f,"DIV",{class:!0});var Tl=s(ir);T(T8.$$.fragment,Tl),K2r=i(Tl),ic=n(Tl,"P",{});var mJ=s(ic);Z2r=r(mJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Q=n(mJ,"A",{href:!0});var sht=s(_Q);eFr=r(sht,"from_pretrained()"),sht.forEach(t),oFr=r(mJ," class method or the "),bQ=n(mJ,"A",{href:!0});var lht=s(bQ);rFr=r(lht,"from_config()"),lht.forEach(t),tFr=r(mJ,` class
method.`),mJ.forEach(t),aFr=i(Tl),M8=n(Tl,"P",{});var fBe=s(M8);nFr=r(fBe,"This class cannot be instantiated directly using "),$2e=n(fBe,"CODE",{});var iht=s($2e);sFr=r(iht,"__init__()"),iht.forEach(t),lFr=r(fBe," (throws an error)."),fBe.forEach(t),iFr=i(Tl),Pt=n(Tl,"DIV",{class:!0});var ZA=s(Pt);T(E8.$$.fragment,ZA),dFr=i(ZA),k2e=n(ZA,"P",{});var dht=s(k2e);cFr=r(dht,"Instantiates one of the base model classes of the library from a configuration."),dht.forEach(t),fFr=i(ZA),dc=n(ZA,"P",{});var hJ=s(dc);mFr=r(hJ,`Note:
Loading a model from its configuration file does `),S2e=n(hJ,"STRONG",{});var cht=s(S2e);hFr=r(cht,"not"),cht.forEach(t),gFr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(hJ,"A",{href:!0});var fht=s(FQ);pFr=r(fht,"from_pretrained()"),fht.forEach(t),uFr=r(hJ," to load the model weights."),hJ.forEach(t),_Fr=i(ZA),T(P5.$$.fragment,ZA),ZA.forEach(t),bFr=i(Tl),Pr=n(Tl,"DIV",{class:!0});var Ml=s(Pr);T(C8.$$.fragment,Ml),FFr=i(Ml),R2e=n(Ml,"P",{});var mht=s(R2e);vFr=r(mht,"Instantiate one of the base model classes of the library from a pretrained model."),mht.forEach(t),TFr=i(Ml),sn=n(Ml,"P",{});var e0=s(sn);MFr=r(e0,"The model class to instantiate is selected based on the "),B2e=n(e0,"CODE",{});var hht=s(B2e);EFr=r(hht,"model_type"),hht.forEach(t),CFr=r(e0,` property of the config object (either
passed as an argument or loaded from `),P2e=n(e0,"CODE",{});var ght=s(P2e);wFr=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),AFr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(e0,"CODE",{});var pht=s(I2e);yFr=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),LFr=r(e0,":"),e0.forEach(t),xFr=i(Ml),oe=n(Ml,"UL",{});var te=s(oe);I5=n(te,"LI",{});var P7e=s(I5);q2e=n(P7e,"STRONG",{});var uht=s(q2e);$Fr=r(uht,"albert"),uht.forEach(t),kFr=r(P7e," \u2014 "),vQ=n(P7e,"A",{href:!0});var _ht=s(vQ);SFr=r(_ht,"FlaxAlbertModel"),_ht.forEach(t),RFr=r(P7e," (ALBERT model)"),P7e.forEach(t),BFr=i(te),q5=n(te,"LI",{});var I7e=s(q5);N2e=n(I7e,"STRONG",{});var bht=s(N2e);PFr=r(bht,"bart"),bht.forEach(t),IFr=r(I7e," \u2014 "),TQ=n(I7e,"A",{href:!0});var Fht=s(TQ);qFr=r(Fht,"FlaxBartModel"),Fht.forEach(t),NFr=r(I7e," (BART model)"),I7e.forEach(t),jFr=i(te),N5=n(te,"LI",{});var q7e=s(N5);j2e=n(q7e,"STRONG",{});var vht=s(j2e);DFr=r(vht,"beit"),vht.forEach(t),GFr=r(q7e," \u2014 "),MQ=n(q7e,"A",{href:!0});var Tht=s(MQ);OFr=r(Tht,"FlaxBeitModel"),Tht.forEach(t),VFr=r(q7e," (BEiT model)"),q7e.forEach(t),XFr=i(te),j5=n(te,"LI",{});var N7e=s(j5);D2e=n(N7e,"STRONG",{});var Mht=s(D2e);zFr=r(Mht,"bert"),Mht.forEach(t),QFr=r(N7e," \u2014 "),EQ=n(N7e,"A",{href:!0});var Eht=s(EQ);WFr=r(Eht,"FlaxBertModel"),Eht.forEach(t),HFr=r(N7e," (BERT model)"),N7e.forEach(t),UFr=i(te),D5=n(te,"LI",{});var j7e=s(D5);G2e=n(j7e,"STRONG",{});var Cht=s(G2e);JFr=r(Cht,"big_bird"),Cht.forEach(t),YFr=r(j7e," \u2014 "),CQ=n(j7e,"A",{href:!0});var wht=s(CQ);KFr=r(wht,"FlaxBigBirdModel"),wht.forEach(t),ZFr=r(j7e," (BigBird model)"),j7e.forEach(t),evr=i(te),G5=n(te,"LI",{});var D7e=s(G5);O2e=n(D7e,"STRONG",{});var Aht=s(O2e);ovr=r(Aht,"blenderbot"),Aht.forEach(t),rvr=r(D7e," \u2014 "),wQ=n(D7e,"A",{href:!0});var yht=s(wQ);tvr=r(yht,"FlaxBlenderbotModel"),yht.forEach(t),avr=r(D7e," (Blenderbot model)"),D7e.forEach(t),nvr=i(te),O5=n(te,"LI",{});var G7e=s(O5);V2e=n(G7e,"STRONG",{});var Lht=s(V2e);svr=r(Lht,"blenderbot-small"),Lht.forEach(t),lvr=r(G7e," \u2014 "),AQ=n(G7e,"A",{href:!0});var xht=s(AQ);ivr=r(xht,"FlaxBlenderbotSmallModel"),xht.forEach(t),dvr=r(G7e," (BlenderbotSmall model)"),G7e.forEach(t),cvr=i(te),V5=n(te,"LI",{});var O7e=s(V5);X2e=n(O7e,"STRONG",{});var $ht=s(X2e);fvr=r($ht,"clip"),$ht.forEach(t),mvr=r(O7e," \u2014 "),yQ=n(O7e,"A",{href:!0});var kht=s(yQ);hvr=r(kht,"FlaxCLIPModel"),kht.forEach(t),gvr=r(O7e," (CLIP model)"),O7e.forEach(t),pvr=i(te),X5=n(te,"LI",{});var V7e=s(X5);z2e=n(V7e,"STRONG",{});var Sht=s(z2e);uvr=r(Sht,"distilbert"),Sht.forEach(t),_vr=r(V7e," \u2014 "),LQ=n(V7e,"A",{href:!0});var Rht=s(LQ);bvr=r(Rht,"FlaxDistilBertModel"),Rht.forEach(t),Fvr=r(V7e," (DistilBERT model)"),V7e.forEach(t),vvr=i(te),z5=n(te,"LI",{});var X7e=s(z5);Q2e=n(X7e,"STRONG",{});var Bht=s(Q2e);Tvr=r(Bht,"electra"),Bht.forEach(t),Mvr=r(X7e," \u2014 "),xQ=n(X7e,"A",{href:!0});var Pht=s(xQ);Evr=r(Pht,"FlaxElectraModel"),Pht.forEach(t),Cvr=r(X7e," (ELECTRA model)"),X7e.forEach(t),wvr=i(te),Q5=n(te,"LI",{});var z7e=s(Q5);W2e=n(z7e,"STRONG",{});var Iht=s(W2e);Avr=r(Iht,"gpt2"),Iht.forEach(t),yvr=r(z7e," \u2014 "),$Q=n(z7e,"A",{href:!0});var qht=s($Q);Lvr=r(qht,"FlaxGPT2Model"),qht.forEach(t),xvr=r(z7e," (OpenAI GPT-2 model)"),z7e.forEach(t),$vr=i(te),W5=n(te,"LI",{});var Q7e=s(W5);H2e=n(Q7e,"STRONG",{});var Nht=s(H2e);kvr=r(Nht,"gpt_neo"),Nht.forEach(t),Svr=r(Q7e," \u2014 "),kQ=n(Q7e,"A",{href:!0});var jht=s(kQ);Rvr=r(jht,"FlaxGPTNeoModel"),jht.forEach(t),Bvr=r(Q7e," (GPT Neo model)"),Q7e.forEach(t),Pvr=i(te),H5=n(te,"LI",{});var W7e=s(H5);U2e=n(W7e,"STRONG",{});var Dht=s(U2e);Ivr=r(Dht,"gptj"),Dht.forEach(t),qvr=r(W7e," \u2014 "),SQ=n(W7e,"A",{href:!0});var Ght=s(SQ);Nvr=r(Ght,"FlaxGPTJModel"),Ght.forEach(t),jvr=r(W7e," (GPT-J model)"),W7e.forEach(t),Dvr=i(te),U5=n(te,"LI",{});var H7e=s(U5);J2e=n(H7e,"STRONG",{});var Oht=s(J2e);Gvr=r(Oht,"marian"),Oht.forEach(t),Ovr=r(H7e," \u2014 "),RQ=n(H7e,"A",{href:!0});var Vht=s(RQ);Vvr=r(Vht,"FlaxMarianModel"),Vht.forEach(t),Xvr=r(H7e," (Marian model)"),H7e.forEach(t),zvr=i(te),J5=n(te,"LI",{});var U7e=s(J5);Y2e=n(U7e,"STRONG",{});var Xht=s(Y2e);Qvr=r(Xht,"mbart"),Xht.forEach(t),Wvr=r(U7e," \u2014 "),BQ=n(U7e,"A",{href:!0});var zht=s(BQ);Hvr=r(zht,"FlaxMBartModel"),zht.forEach(t),Uvr=r(U7e," (mBART model)"),U7e.forEach(t),Jvr=i(te),Y5=n(te,"LI",{});var J7e=s(Y5);K2e=n(J7e,"STRONG",{});var Qht=s(K2e);Yvr=r(Qht,"mt5"),Qht.forEach(t),Kvr=r(J7e," \u2014 "),PQ=n(J7e,"A",{href:!0});var Wht=s(PQ);Zvr=r(Wht,"FlaxMT5Model"),Wht.forEach(t),e1r=r(J7e," (mT5 model)"),J7e.forEach(t),o1r=i(te),K5=n(te,"LI",{});var Y7e=s(K5);Z2e=n(Y7e,"STRONG",{});var Hht=s(Z2e);r1r=r(Hht,"pegasus"),Hht.forEach(t),t1r=r(Y7e," \u2014 "),IQ=n(Y7e,"A",{href:!0});var Uht=s(IQ);a1r=r(Uht,"FlaxPegasusModel"),Uht.forEach(t),n1r=r(Y7e," (Pegasus model)"),Y7e.forEach(t),s1r=i(te),Z5=n(te,"LI",{});var K7e=s(Z5);eFe=n(K7e,"STRONG",{});var Jht=s(eFe);l1r=r(Jht,"roberta"),Jht.forEach(t),i1r=r(K7e," \u2014 "),qQ=n(K7e,"A",{href:!0});var Yht=s(qQ);d1r=r(Yht,"FlaxRobertaModel"),Yht.forEach(t),c1r=r(K7e," (RoBERTa model)"),K7e.forEach(t),f1r=i(te),eC=n(te,"LI",{});var Z7e=s(eC);oFe=n(Z7e,"STRONG",{});var Kht=s(oFe);m1r=r(Kht,"roformer"),Kht.forEach(t),h1r=r(Z7e," \u2014 "),NQ=n(Z7e,"A",{href:!0});var Zht=s(NQ);g1r=r(Zht,"FlaxRoFormerModel"),Zht.forEach(t),p1r=r(Z7e," (RoFormer model)"),Z7e.forEach(t),u1r=i(te),oC=n(te,"LI",{});var e$e=s(oC);rFe=n(e$e,"STRONG",{});var egt=s(rFe);_1r=r(egt,"t5"),egt.forEach(t),b1r=r(e$e," \u2014 "),jQ=n(e$e,"A",{href:!0});var ogt=s(jQ);F1r=r(ogt,"FlaxT5Model"),ogt.forEach(t),v1r=r(e$e," (T5 model)"),e$e.forEach(t),T1r=i(te),rC=n(te,"LI",{});var o$e=s(rC);tFe=n(o$e,"STRONG",{});var rgt=s(tFe);M1r=r(rgt,"vision-text-dual-encoder"),rgt.forEach(t),E1r=r(o$e," \u2014 "),DQ=n(o$e,"A",{href:!0});var tgt=s(DQ);C1r=r(tgt,"FlaxVisionTextDualEncoderModel"),tgt.forEach(t),w1r=r(o$e," (VisionTextDualEncoder model)"),o$e.forEach(t),A1r=i(te),tC=n(te,"LI",{});var r$e=s(tC);aFe=n(r$e,"STRONG",{});var agt=s(aFe);y1r=r(agt,"vit"),agt.forEach(t),L1r=r(r$e," \u2014 "),GQ=n(r$e,"A",{href:!0});var ngt=s(GQ);x1r=r(ngt,"FlaxViTModel"),ngt.forEach(t),$1r=r(r$e," (ViT model)"),r$e.forEach(t),k1r=i(te),aC=n(te,"LI",{});var t$e=s(aC);nFe=n(t$e,"STRONG",{});var sgt=s(nFe);S1r=r(sgt,"wav2vec2"),sgt.forEach(t),R1r=r(t$e," \u2014 "),OQ=n(t$e,"A",{href:!0});var lgt=s(OQ);B1r=r(lgt,"FlaxWav2Vec2Model"),lgt.forEach(t),P1r=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),I1r=i(te),nC=n(te,"LI",{});var a$e=s(nC);sFe=n(a$e,"STRONG",{});var igt=s(sFe);q1r=r(igt,"xglm"),igt.forEach(t),N1r=r(a$e," \u2014 "),VQ=n(a$e,"A",{href:!0});var dgt=s(VQ);j1r=r(dgt,"FlaxXGLMModel"),dgt.forEach(t),D1r=r(a$e," (XGLM model)"),a$e.forEach(t),G1r=i(te),sC=n(te,"LI",{});var n$e=s(sC);lFe=n(n$e,"STRONG",{});var cgt=s(lFe);O1r=r(cgt,"xlm-roberta"),cgt.forEach(t),V1r=r(n$e," \u2014 "),XQ=n(n$e,"A",{href:!0});var fgt=s(XQ);X1r=r(fgt,"FlaxXLMRobertaModel"),fgt.forEach(t),z1r=r(n$e," (XLM-RoBERTa model)"),n$e.forEach(t),te.forEach(t),Q1r=i(Ml),T(lC.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),lSe=i(f),cc=n(f,"H2",{class:!0});var mBe=s(cc);iC=n(mBe,"A",{id:!0,class:!0,href:!0});var mgt=s(iC);iFe=n(mgt,"SPAN",{});var hgt=s(iFe);T(w8.$$.fragment,hgt),hgt.forEach(t),mgt.forEach(t),W1r=i(mBe),dFe=n(mBe,"SPAN",{});var ggt=s(dFe);H1r=r(ggt,"FlaxAutoModelForCausalLM"),ggt.forEach(t),mBe.forEach(t),iSe=i(f),dr=n(f,"DIV",{class:!0});var El=s(dr);T(A8.$$.fragment,El),U1r=i(El),fc=n(El,"P",{});var gJ=s(fc);J1r=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zQ=n(gJ,"A",{href:!0});var pgt=s(zQ);Y1r=r(pgt,"from_pretrained()"),pgt.forEach(t),K1r=r(gJ," class method or the "),QQ=n(gJ,"A",{href:!0});var ugt=s(QQ);Z1r=r(ugt,"from_config()"),ugt.forEach(t),eTr=r(gJ,` class
method.`),gJ.forEach(t),oTr=i(El),y8=n(El,"P",{});var hBe=s(y8);rTr=r(hBe,"This class cannot be instantiated directly using "),cFe=n(hBe,"CODE",{});var _gt=s(cFe);tTr=r(_gt,"__init__()"),_gt.forEach(t),aTr=r(hBe," (throws an error)."),hBe.forEach(t),nTr=i(El),It=n(El,"DIV",{class:!0});var o0=s(It);T(L8.$$.fragment,o0),sTr=i(o0),fFe=n(o0,"P",{});var bgt=s(fFe);lTr=r(bgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bgt.forEach(t),iTr=i(o0),mc=n(o0,"P",{});var pJ=s(mc);dTr=r(pJ,`Note:
Loading a model from its configuration file does `),mFe=n(pJ,"STRONG",{});var Fgt=s(mFe);cTr=r(Fgt,"not"),Fgt.forEach(t),fTr=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(pJ,"A",{href:!0});var vgt=s(WQ);mTr=r(vgt,"from_pretrained()"),vgt.forEach(t),hTr=r(pJ," to load the model weights."),pJ.forEach(t),gTr=i(o0),T(dC.$$.fragment,o0),o0.forEach(t),pTr=i(El),Ir=n(El,"DIV",{class:!0});var Cl=s(Ir);T(x8.$$.fragment,Cl),uTr=i(Cl),hFe=n(Cl,"P",{});var Tgt=s(hFe);_Tr=r(Tgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tgt.forEach(t),bTr=i(Cl),ln=n(Cl,"P",{});var r0=s(ln);FTr=r(r0,"The model class to instantiate is selected based on the "),gFe=n(r0,"CODE",{});var Mgt=s(gFe);vTr=r(Mgt,"model_type"),Mgt.forEach(t),TTr=r(r0,` property of the config object (either
passed as an argument or loaded from `),pFe=n(r0,"CODE",{});var Egt=s(pFe);MTr=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),ETr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(r0,"CODE",{});var Cgt=s(uFe);CTr=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),wTr=r(r0,":"),r0.forEach(t),ATr=i(Cl),Hr=n(Cl,"UL",{});var wl=s(Hr);cC=n(wl,"LI",{});var s$e=s(cC);_Fe=n(s$e,"STRONG",{});var wgt=s(_Fe);yTr=r(wgt,"bart"),wgt.forEach(t),LTr=r(s$e," \u2014 "),HQ=n(s$e,"A",{href:!0});var Agt=s(HQ);xTr=r(Agt,"FlaxBartForCausalLM"),Agt.forEach(t),$Tr=r(s$e," (BART model)"),s$e.forEach(t),kTr=i(wl),fC=n(wl,"LI",{});var l$e=s(fC);bFe=n(l$e,"STRONG",{});var ygt=s(bFe);STr=r(ygt,"gpt2"),ygt.forEach(t),RTr=r(l$e," \u2014 "),UQ=n(l$e,"A",{href:!0});var Lgt=s(UQ);BTr=r(Lgt,"FlaxGPT2LMHeadModel"),Lgt.forEach(t),PTr=r(l$e," (OpenAI GPT-2 model)"),l$e.forEach(t),ITr=i(wl),mC=n(wl,"LI",{});var i$e=s(mC);FFe=n(i$e,"STRONG",{});var xgt=s(FFe);qTr=r(xgt,"gpt_neo"),xgt.forEach(t),NTr=r(i$e," \u2014 "),JQ=n(i$e,"A",{href:!0});var $gt=s(JQ);jTr=r($gt,"FlaxGPTNeoForCausalLM"),$gt.forEach(t),DTr=r(i$e," (GPT Neo model)"),i$e.forEach(t),GTr=i(wl),hC=n(wl,"LI",{});var d$e=s(hC);vFe=n(d$e,"STRONG",{});var kgt=s(vFe);OTr=r(kgt,"gptj"),kgt.forEach(t),VTr=r(d$e," \u2014 "),YQ=n(d$e,"A",{href:!0});var Sgt=s(YQ);XTr=r(Sgt,"FlaxGPTJForCausalLM"),Sgt.forEach(t),zTr=r(d$e," (GPT-J model)"),d$e.forEach(t),QTr=i(wl),gC=n(wl,"LI",{});var c$e=s(gC);TFe=n(c$e,"STRONG",{});var Rgt=s(TFe);WTr=r(Rgt,"xglm"),Rgt.forEach(t),HTr=r(c$e," \u2014 "),KQ=n(c$e,"A",{href:!0});var Bgt=s(KQ);UTr=r(Bgt,"FlaxXGLMForCausalLM"),Bgt.forEach(t),JTr=r(c$e," (XGLM model)"),c$e.forEach(t),wl.forEach(t),YTr=i(Cl),T(pC.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),dSe=i(f),hc=n(f,"H2",{class:!0});var gBe=s(hc);uC=n(gBe,"A",{id:!0,class:!0,href:!0});var Pgt=s(uC);MFe=n(Pgt,"SPAN",{});var Igt=s(MFe);T($8.$$.fragment,Igt),Igt.forEach(t),Pgt.forEach(t),KTr=i(gBe),EFe=n(gBe,"SPAN",{});var qgt=s(EFe);ZTr=r(qgt,"FlaxAutoModelForPreTraining"),qgt.forEach(t),gBe.forEach(t),cSe=i(f),cr=n(f,"DIV",{class:!0});var Al=s(cr);T(k8.$$.fragment,Al),eMr=i(Al),gc=n(Al,"P",{});var uJ=s(gc);oMr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZQ=n(uJ,"A",{href:!0});var Ngt=s(ZQ);rMr=r(Ngt,"from_pretrained()"),Ngt.forEach(t),tMr=r(uJ," class method or the "),eW=n(uJ,"A",{href:!0});var jgt=s(eW);aMr=r(jgt,"from_config()"),jgt.forEach(t),nMr=r(uJ,` class
method.`),uJ.forEach(t),sMr=i(Al),S8=n(Al,"P",{});var pBe=s(S8);lMr=r(pBe,"This class cannot be instantiated directly using "),CFe=n(pBe,"CODE",{});var Dgt=s(CFe);iMr=r(Dgt,"__init__()"),Dgt.forEach(t),dMr=r(pBe," (throws an error)."),pBe.forEach(t),cMr=i(Al),qt=n(Al,"DIV",{class:!0});var t0=s(qt);T(R8.$$.fragment,t0),fMr=i(t0),wFe=n(t0,"P",{});var Ggt=s(wFe);mMr=r(Ggt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ggt.forEach(t),hMr=i(t0),pc=n(t0,"P",{});var _J=s(pc);gMr=r(_J,`Note:
Loading a model from its configuration file does `),AFe=n(_J,"STRONG",{});var Ogt=s(AFe);pMr=r(Ogt,"not"),Ogt.forEach(t),uMr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(_J,"A",{href:!0});var Vgt=s(oW);_Mr=r(Vgt,"from_pretrained()"),Vgt.forEach(t),bMr=r(_J," to load the model weights."),_J.forEach(t),FMr=i(t0),T(_C.$$.fragment,t0),t0.forEach(t),vMr=i(Al),qr=n(Al,"DIV",{class:!0});var yl=s(qr);T(B8.$$.fragment,yl),TMr=i(yl),yFe=n(yl,"P",{});var Xgt=s(yFe);MMr=r(Xgt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xgt.forEach(t),EMr=i(yl),dn=n(yl,"P",{});var a0=s(dn);CMr=r(a0,"The model class to instantiate is selected based on the "),LFe=n(a0,"CODE",{});var zgt=s(LFe);wMr=r(zgt,"model_type"),zgt.forEach(t),AMr=r(a0,` property of the config object (either
passed as an argument or loaded from `),xFe=n(a0,"CODE",{});var Qgt=s(xFe);yMr=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),LMr=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(a0,"CODE",{});var Wgt=s($Fe);xMr=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),$Mr=r(a0,":"),a0.forEach(t),kMr=i(yl),be=n(yl,"UL",{});var Te=s(be);bC=n(Te,"LI",{});var f$e=s(bC);kFe=n(f$e,"STRONG",{});var Hgt=s(kFe);SMr=r(Hgt,"albert"),Hgt.forEach(t),RMr=r(f$e," \u2014 "),rW=n(f$e,"A",{href:!0});var Ugt=s(rW);BMr=r(Ugt,"FlaxAlbertForPreTraining"),Ugt.forEach(t),PMr=r(f$e," (ALBERT model)"),f$e.forEach(t),IMr=i(Te),FC=n(Te,"LI",{});var m$e=s(FC);SFe=n(m$e,"STRONG",{});var Jgt=s(SFe);qMr=r(Jgt,"bart"),Jgt.forEach(t),NMr=r(m$e," \u2014 "),tW=n(m$e,"A",{href:!0});var Ygt=s(tW);jMr=r(Ygt,"FlaxBartForConditionalGeneration"),Ygt.forEach(t),DMr=r(m$e," (BART model)"),m$e.forEach(t),GMr=i(Te),vC=n(Te,"LI",{});var h$e=s(vC);RFe=n(h$e,"STRONG",{});var Kgt=s(RFe);OMr=r(Kgt,"bert"),Kgt.forEach(t),VMr=r(h$e," \u2014 "),aW=n(h$e,"A",{href:!0});var Zgt=s(aW);XMr=r(Zgt,"FlaxBertForPreTraining"),Zgt.forEach(t),zMr=r(h$e," (BERT model)"),h$e.forEach(t),QMr=i(Te),TC=n(Te,"LI",{});var g$e=s(TC);BFe=n(g$e,"STRONG",{});var ept=s(BFe);WMr=r(ept,"big_bird"),ept.forEach(t),HMr=r(g$e," \u2014 "),nW=n(g$e,"A",{href:!0});var opt=s(nW);UMr=r(opt,"FlaxBigBirdForPreTraining"),opt.forEach(t),JMr=r(g$e," (BigBird model)"),g$e.forEach(t),YMr=i(Te),MC=n(Te,"LI",{});var p$e=s(MC);PFe=n(p$e,"STRONG",{});var rpt=s(PFe);KMr=r(rpt,"electra"),rpt.forEach(t),ZMr=r(p$e," \u2014 "),sW=n(p$e,"A",{href:!0});var tpt=s(sW);e4r=r(tpt,"FlaxElectraForPreTraining"),tpt.forEach(t),o4r=r(p$e," (ELECTRA model)"),p$e.forEach(t),r4r=i(Te),EC=n(Te,"LI",{});var u$e=s(EC);IFe=n(u$e,"STRONG",{});var apt=s(IFe);t4r=r(apt,"mbart"),apt.forEach(t),a4r=r(u$e," \u2014 "),lW=n(u$e,"A",{href:!0});var npt=s(lW);n4r=r(npt,"FlaxMBartForConditionalGeneration"),npt.forEach(t),s4r=r(u$e," (mBART model)"),u$e.forEach(t),l4r=i(Te),CC=n(Te,"LI",{});var _$e=s(CC);qFe=n(_$e,"STRONG",{});var spt=s(qFe);i4r=r(spt,"mt5"),spt.forEach(t),d4r=r(_$e," \u2014 "),iW=n(_$e,"A",{href:!0});var lpt=s(iW);c4r=r(lpt,"FlaxMT5ForConditionalGeneration"),lpt.forEach(t),f4r=r(_$e," (mT5 model)"),_$e.forEach(t),m4r=i(Te),wC=n(Te,"LI",{});var b$e=s(wC);NFe=n(b$e,"STRONG",{});var ipt=s(NFe);h4r=r(ipt,"roberta"),ipt.forEach(t),g4r=r(b$e," \u2014 "),dW=n(b$e,"A",{href:!0});var dpt=s(dW);p4r=r(dpt,"FlaxRobertaForMaskedLM"),dpt.forEach(t),u4r=r(b$e," (RoBERTa model)"),b$e.forEach(t),_4r=i(Te),AC=n(Te,"LI",{});var F$e=s(AC);jFe=n(F$e,"STRONG",{});var cpt=s(jFe);b4r=r(cpt,"roformer"),cpt.forEach(t),F4r=r(F$e," \u2014 "),cW=n(F$e,"A",{href:!0});var fpt=s(cW);v4r=r(fpt,"FlaxRoFormerForMaskedLM"),fpt.forEach(t),T4r=r(F$e," (RoFormer model)"),F$e.forEach(t),M4r=i(Te),yC=n(Te,"LI",{});var v$e=s(yC);DFe=n(v$e,"STRONG",{});var mpt=s(DFe);E4r=r(mpt,"t5"),mpt.forEach(t),C4r=r(v$e," \u2014 "),fW=n(v$e,"A",{href:!0});var hpt=s(fW);w4r=r(hpt,"FlaxT5ForConditionalGeneration"),hpt.forEach(t),A4r=r(v$e," (T5 model)"),v$e.forEach(t),y4r=i(Te),LC=n(Te,"LI",{});var T$e=s(LC);GFe=n(T$e,"STRONG",{});var gpt=s(GFe);L4r=r(gpt,"wav2vec2"),gpt.forEach(t),x4r=r(T$e," \u2014 "),mW=n(T$e,"A",{href:!0});var ppt=s(mW);$4r=r(ppt,"FlaxWav2Vec2ForPreTraining"),ppt.forEach(t),k4r=r(T$e," (Wav2Vec2 model)"),T$e.forEach(t),S4r=i(Te),xC=n(Te,"LI",{});var M$e=s(xC);OFe=n(M$e,"STRONG",{});var upt=s(OFe);R4r=r(upt,"xlm-roberta"),upt.forEach(t),B4r=r(M$e," \u2014 "),hW=n(M$e,"A",{href:!0});var _pt=s(hW);P4r=r(_pt,"FlaxXLMRobertaForMaskedLM"),_pt.forEach(t),I4r=r(M$e," (XLM-RoBERTa model)"),M$e.forEach(t),Te.forEach(t),q4r=i(yl),T($C.$$.fragment,yl),yl.forEach(t),Al.forEach(t),fSe=i(f),uc=n(f,"H2",{class:!0});var uBe=s(uc);kC=n(uBe,"A",{id:!0,class:!0,href:!0});var bpt=s(kC);VFe=n(bpt,"SPAN",{});var Fpt=s(VFe);T(P8.$$.fragment,Fpt),Fpt.forEach(t),bpt.forEach(t),N4r=i(uBe),XFe=n(uBe,"SPAN",{});var vpt=s(XFe);j4r=r(vpt,"FlaxAutoModelForMaskedLM"),vpt.forEach(t),uBe.forEach(t),mSe=i(f),fr=n(f,"DIV",{class:!0});var Ll=s(fr);T(I8.$$.fragment,Ll),D4r=i(Ll),_c=n(Ll,"P",{});var bJ=s(_c);G4r=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gW=n(bJ,"A",{href:!0});var Tpt=s(gW);O4r=r(Tpt,"from_pretrained()"),Tpt.forEach(t),V4r=r(bJ," class method or the "),pW=n(bJ,"A",{href:!0});var Mpt=s(pW);X4r=r(Mpt,"from_config()"),Mpt.forEach(t),z4r=r(bJ,` class
method.`),bJ.forEach(t),Q4r=i(Ll),q8=n(Ll,"P",{});var _Be=s(q8);W4r=r(_Be,"This class cannot be instantiated directly using "),zFe=n(_Be,"CODE",{});var Ept=s(zFe);H4r=r(Ept,"__init__()"),Ept.forEach(t),U4r=r(_Be," (throws an error)."),_Be.forEach(t),J4r=i(Ll),Nt=n(Ll,"DIV",{class:!0});var n0=s(Nt);T(N8.$$.fragment,n0),Y4r=i(n0),QFe=n(n0,"P",{});var Cpt=s(QFe);K4r=r(Cpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cpt.forEach(t),Z4r=i(n0),bc=n(n0,"P",{});var FJ=s(bc);eEr=r(FJ,`Note:
Loading a model from its configuration file does `),WFe=n(FJ,"STRONG",{});var wpt=s(WFe);oEr=r(wpt,"not"),wpt.forEach(t),rEr=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(FJ,"A",{href:!0});var Apt=s(uW);tEr=r(Apt,"from_pretrained()"),Apt.forEach(t),aEr=r(FJ," to load the model weights."),FJ.forEach(t),nEr=i(n0),T(SC.$$.fragment,n0),n0.forEach(t),sEr=i(Ll),Nr=n(Ll,"DIV",{class:!0});var xl=s(Nr);T(j8.$$.fragment,xl),lEr=i(xl),HFe=n(xl,"P",{});var ypt=s(HFe);iEr=r(ypt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ypt.forEach(t),dEr=i(xl),cn=n(xl,"P",{});var s0=s(cn);cEr=r(s0,"The model class to instantiate is selected based on the "),UFe=n(s0,"CODE",{});var Lpt=s(UFe);fEr=r(Lpt,"model_type"),Lpt.forEach(t),mEr=r(s0,` property of the config object (either
passed as an argument or loaded from `),JFe=n(s0,"CODE",{});var xpt=s(JFe);hEr=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),gEr=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(s0,"CODE",{});var $pt=s(YFe);pEr=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),uEr=r(s0,":"),s0.forEach(t),_Er=i(xl),Ce=n(xl,"UL",{});var ke=s(Ce);RC=n(ke,"LI",{});var E$e=s(RC);KFe=n(E$e,"STRONG",{});var kpt=s(KFe);bEr=r(kpt,"albert"),kpt.forEach(t),FEr=r(E$e," \u2014 "),_W=n(E$e,"A",{href:!0});var Spt=s(_W);vEr=r(Spt,"FlaxAlbertForMaskedLM"),Spt.forEach(t),TEr=r(E$e," (ALBERT model)"),E$e.forEach(t),MEr=i(ke),BC=n(ke,"LI",{});var C$e=s(BC);ZFe=n(C$e,"STRONG",{});var Rpt=s(ZFe);EEr=r(Rpt,"bart"),Rpt.forEach(t),CEr=r(C$e," \u2014 "),bW=n(C$e,"A",{href:!0});var Bpt=s(bW);wEr=r(Bpt,"FlaxBartForConditionalGeneration"),Bpt.forEach(t),AEr=r(C$e," (BART model)"),C$e.forEach(t),yEr=i(ke),PC=n(ke,"LI",{});var w$e=s(PC);eve=n(w$e,"STRONG",{});var Ppt=s(eve);LEr=r(Ppt,"bert"),Ppt.forEach(t),xEr=r(w$e," \u2014 "),FW=n(w$e,"A",{href:!0});var Ipt=s(FW);$Er=r(Ipt,"FlaxBertForMaskedLM"),Ipt.forEach(t),kEr=r(w$e," (BERT model)"),w$e.forEach(t),SEr=i(ke),IC=n(ke,"LI",{});var A$e=s(IC);ove=n(A$e,"STRONG",{});var qpt=s(ove);REr=r(qpt,"big_bird"),qpt.forEach(t),BEr=r(A$e," \u2014 "),vW=n(A$e,"A",{href:!0});var Npt=s(vW);PEr=r(Npt,"FlaxBigBirdForMaskedLM"),Npt.forEach(t),IEr=r(A$e," (BigBird model)"),A$e.forEach(t),qEr=i(ke),qC=n(ke,"LI",{});var y$e=s(qC);rve=n(y$e,"STRONG",{});var jpt=s(rve);NEr=r(jpt,"distilbert"),jpt.forEach(t),jEr=r(y$e," \u2014 "),TW=n(y$e,"A",{href:!0});var Dpt=s(TW);DEr=r(Dpt,"FlaxDistilBertForMaskedLM"),Dpt.forEach(t),GEr=r(y$e," (DistilBERT model)"),y$e.forEach(t),OEr=i(ke),NC=n(ke,"LI",{});var L$e=s(NC);tve=n(L$e,"STRONG",{});var Gpt=s(tve);VEr=r(Gpt,"electra"),Gpt.forEach(t),XEr=r(L$e," \u2014 "),MW=n(L$e,"A",{href:!0});var Opt=s(MW);zEr=r(Opt,"FlaxElectraForMaskedLM"),Opt.forEach(t),QEr=r(L$e," (ELECTRA model)"),L$e.forEach(t),WEr=i(ke),jC=n(ke,"LI",{});var x$e=s(jC);ave=n(x$e,"STRONG",{});var Vpt=s(ave);HEr=r(Vpt,"mbart"),Vpt.forEach(t),UEr=r(x$e," \u2014 "),EW=n(x$e,"A",{href:!0});var Xpt=s(EW);JEr=r(Xpt,"FlaxMBartForConditionalGeneration"),Xpt.forEach(t),YEr=r(x$e," (mBART model)"),x$e.forEach(t),KEr=i(ke),DC=n(ke,"LI",{});var $$e=s(DC);nve=n($$e,"STRONG",{});var zpt=s(nve);ZEr=r(zpt,"roberta"),zpt.forEach(t),e5r=r($$e," \u2014 "),CW=n($$e,"A",{href:!0});var Qpt=s(CW);o5r=r(Qpt,"FlaxRobertaForMaskedLM"),Qpt.forEach(t),r5r=r($$e," (RoBERTa model)"),$$e.forEach(t),t5r=i(ke),GC=n(ke,"LI",{});var k$e=s(GC);sve=n(k$e,"STRONG",{});var Wpt=s(sve);a5r=r(Wpt,"roformer"),Wpt.forEach(t),n5r=r(k$e," \u2014 "),wW=n(k$e,"A",{href:!0});var Hpt=s(wW);s5r=r(Hpt,"FlaxRoFormerForMaskedLM"),Hpt.forEach(t),l5r=r(k$e," (RoFormer model)"),k$e.forEach(t),i5r=i(ke),OC=n(ke,"LI",{});var S$e=s(OC);lve=n(S$e,"STRONG",{});var Upt=s(lve);d5r=r(Upt,"xlm-roberta"),Upt.forEach(t),c5r=r(S$e," \u2014 "),AW=n(S$e,"A",{href:!0});var Jpt=s(AW);f5r=r(Jpt,"FlaxXLMRobertaForMaskedLM"),Jpt.forEach(t),m5r=r(S$e," (XLM-RoBERTa model)"),S$e.forEach(t),ke.forEach(t),h5r=i(xl),T(VC.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),hSe=i(f),Fc=n(f,"H2",{class:!0});var bBe=s(Fc);XC=n(bBe,"A",{id:!0,class:!0,href:!0});var Ypt=s(XC);ive=n(Ypt,"SPAN",{});var Kpt=s(ive);T(D8.$$.fragment,Kpt),Kpt.forEach(t),Ypt.forEach(t),g5r=i(bBe),dve=n(bBe,"SPAN",{});var Zpt=s(dve);p5r=r(Zpt,"FlaxAutoModelForSeq2SeqLM"),Zpt.forEach(t),bBe.forEach(t),gSe=i(f),mr=n(f,"DIV",{class:!0});var $l=s(mr);T(G8.$$.fragment,$l),u5r=i($l),vc=n($l,"P",{});var vJ=s(vc);_5r=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yW=n(vJ,"A",{href:!0});var eut=s(yW);b5r=r(eut,"from_pretrained()"),eut.forEach(t),F5r=r(vJ," class method or the "),LW=n(vJ,"A",{href:!0});var out=s(LW);v5r=r(out,"from_config()"),out.forEach(t),T5r=r(vJ,` class
method.`),vJ.forEach(t),M5r=i($l),O8=n($l,"P",{});var FBe=s(O8);E5r=r(FBe,"This class cannot be instantiated directly using "),cve=n(FBe,"CODE",{});var rut=s(cve);C5r=r(rut,"__init__()"),rut.forEach(t),w5r=r(FBe," (throws an error)."),FBe.forEach(t),A5r=i($l),jt=n($l,"DIV",{class:!0});var l0=s(jt);T(V8.$$.fragment,l0),y5r=i(l0),fve=n(l0,"P",{});var tut=s(fve);L5r=r(tut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tut.forEach(t),x5r=i(l0),Tc=n(l0,"P",{});var TJ=s(Tc);$5r=r(TJ,`Note:
Loading a model from its configuration file does `),mve=n(TJ,"STRONG",{});var aut=s(mve);k5r=r(aut,"not"),aut.forEach(t),S5r=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(TJ,"A",{href:!0});var nut=s(xW);R5r=r(nut,"from_pretrained()"),nut.forEach(t),B5r=r(TJ," to load the model weights."),TJ.forEach(t),P5r=i(l0),T(zC.$$.fragment,l0),l0.forEach(t),I5r=i($l),jr=n($l,"DIV",{class:!0});var kl=s(jr);T(X8.$$.fragment,kl),q5r=i(kl),hve=n(kl,"P",{});var sut=s(hve);N5r=r(sut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sut.forEach(t),j5r=i(kl),fn=n(kl,"P",{});var i0=s(fn);D5r=r(i0,"The model class to instantiate is selected based on the "),gve=n(i0,"CODE",{});var lut=s(gve);G5r=r(lut,"model_type"),lut.forEach(t),O5r=r(i0,` property of the config object (either
passed as an argument or loaded from `),pve=n(i0,"CODE",{});var iut=s(pve);V5r=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),X5r=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(i0,"CODE",{});var dut=s(uve);z5r=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),Q5r=r(i0,":"),i0.forEach(t),W5r=i(kl),xe=n(kl,"UL",{});var De=s(xe);QC=n(De,"LI",{});var R$e=s(QC);_ve=n(R$e,"STRONG",{});var cut=s(_ve);H5r=r(cut,"bart"),cut.forEach(t),U5r=r(R$e," \u2014 "),$W=n(R$e,"A",{href:!0});var fut=s($W);J5r=r(fut,"FlaxBartForConditionalGeneration"),fut.forEach(t),Y5r=r(R$e," (BART model)"),R$e.forEach(t),K5r=i(De),WC=n(De,"LI",{});var B$e=s(WC);bve=n(B$e,"STRONG",{});var mut=s(bve);Z5r=r(mut,"blenderbot"),mut.forEach(t),eCr=r(B$e," \u2014 "),kW=n(B$e,"A",{href:!0});var hut=s(kW);oCr=r(hut,"FlaxBlenderbotForConditionalGeneration"),hut.forEach(t),rCr=r(B$e," (Blenderbot model)"),B$e.forEach(t),tCr=i(De),HC=n(De,"LI",{});var P$e=s(HC);Fve=n(P$e,"STRONG",{});var gut=s(Fve);aCr=r(gut,"blenderbot-small"),gut.forEach(t),nCr=r(P$e," \u2014 "),SW=n(P$e,"A",{href:!0});var put=s(SW);sCr=r(put,"FlaxBlenderbotSmallForConditionalGeneration"),put.forEach(t),lCr=r(P$e," (BlenderbotSmall model)"),P$e.forEach(t),iCr=i(De),UC=n(De,"LI",{});var I$e=s(UC);vve=n(I$e,"STRONG",{});var uut=s(vve);dCr=r(uut,"encoder-decoder"),uut.forEach(t),cCr=r(I$e," \u2014 "),RW=n(I$e,"A",{href:!0});var _ut=s(RW);fCr=r(_ut,"FlaxEncoderDecoderModel"),_ut.forEach(t),mCr=r(I$e," (Encoder decoder model)"),I$e.forEach(t),hCr=i(De),JC=n(De,"LI",{});var q$e=s(JC);Tve=n(q$e,"STRONG",{});var but=s(Tve);gCr=r(but,"marian"),but.forEach(t),pCr=r(q$e," \u2014 "),BW=n(q$e,"A",{href:!0});var Fut=s(BW);uCr=r(Fut,"FlaxMarianMTModel"),Fut.forEach(t),_Cr=r(q$e," (Marian model)"),q$e.forEach(t),bCr=i(De),YC=n(De,"LI",{});var N$e=s(YC);Mve=n(N$e,"STRONG",{});var vut=s(Mve);FCr=r(vut,"mbart"),vut.forEach(t),vCr=r(N$e," \u2014 "),PW=n(N$e,"A",{href:!0});var Tut=s(PW);TCr=r(Tut,"FlaxMBartForConditionalGeneration"),Tut.forEach(t),MCr=r(N$e," (mBART model)"),N$e.forEach(t),ECr=i(De),KC=n(De,"LI",{});var j$e=s(KC);Eve=n(j$e,"STRONG",{});var Mut=s(Eve);CCr=r(Mut,"mt5"),Mut.forEach(t),wCr=r(j$e," \u2014 "),IW=n(j$e,"A",{href:!0});var Eut=s(IW);ACr=r(Eut,"FlaxMT5ForConditionalGeneration"),Eut.forEach(t),yCr=r(j$e," (mT5 model)"),j$e.forEach(t),LCr=i(De),ZC=n(De,"LI",{});var D$e=s(ZC);Cve=n(D$e,"STRONG",{});var Cut=s(Cve);xCr=r(Cut,"pegasus"),Cut.forEach(t),$Cr=r(D$e," \u2014 "),qW=n(D$e,"A",{href:!0});var wut=s(qW);kCr=r(wut,"FlaxPegasusForConditionalGeneration"),wut.forEach(t),SCr=r(D$e," (Pegasus model)"),D$e.forEach(t),RCr=i(De),e3=n(De,"LI",{});var G$e=s(e3);wve=n(G$e,"STRONG",{});var Aut=s(wve);BCr=r(Aut,"t5"),Aut.forEach(t),PCr=r(G$e," \u2014 "),NW=n(G$e,"A",{href:!0});var yut=s(NW);ICr=r(yut,"FlaxT5ForConditionalGeneration"),yut.forEach(t),qCr=r(G$e," (T5 model)"),G$e.forEach(t),De.forEach(t),NCr=i(kl),T(o3.$$.fragment,kl),kl.forEach(t),$l.forEach(t),pSe=i(f),Mc=n(f,"H2",{class:!0});var vBe=s(Mc);r3=n(vBe,"A",{id:!0,class:!0,href:!0});var Lut=s(r3);Ave=n(Lut,"SPAN",{});var xut=s(Ave);T(z8.$$.fragment,xut),xut.forEach(t),Lut.forEach(t),jCr=i(vBe),yve=n(vBe,"SPAN",{});var $ut=s(yve);DCr=r($ut,"FlaxAutoModelForSequenceClassification"),$ut.forEach(t),vBe.forEach(t),uSe=i(f),hr=n(f,"DIV",{class:!0});var Sl=s(hr);T(Q8.$$.fragment,Sl),GCr=i(Sl),Ec=n(Sl,"P",{});var MJ=s(Ec);OCr=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jW=n(MJ,"A",{href:!0});var kut=s(jW);VCr=r(kut,"from_pretrained()"),kut.forEach(t),XCr=r(MJ," class method or the "),DW=n(MJ,"A",{href:!0});var Sut=s(DW);zCr=r(Sut,"from_config()"),Sut.forEach(t),QCr=r(MJ,` class
method.`),MJ.forEach(t),WCr=i(Sl),W8=n(Sl,"P",{});var TBe=s(W8);HCr=r(TBe,"This class cannot be instantiated directly using "),Lve=n(TBe,"CODE",{});var Rut=s(Lve);UCr=r(Rut,"__init__()"),Rut.forEach(t),JCr=r(TBe," (throws an error)."),TBe.forEach(t),YCr=i(Sl),Dt=n(Sl,"DIV",{class:!0});var d0=s(Dt);T(H8.$$.fragment,d0),KCr=i(d0),xve=n(d0,"P",{});var But=s(xve);ZCr=r(But,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),But.forEach(t),e3r=i(d0),Cc=n(d0,"P",{});var EJ=s(Cc);o3r=r(EJ,`Note:
Loading a model from its configuration file does `),$ve=n(EJ,"STRONG",{});var Put=s($ve);r3r=r(Put,"not"),Put.forEach(t),t3r=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(EJ,"A",{href:!0});var Iut=s(GW);a3r=r(Iut,"from_pretrained()"),Iut.forEach(t),n3r=r(EJ," to load the model weights."),EJ.forEach(t),s3r=i(d0),T(t3.$$.fragment,d0),d0.forEach(t),l3r=i(Sl),Dr=n(Sl,"DIV",{class:!0});var Rl=s(Dr);T(U8.$$.fragment,Rl),i3r=i(Rl),kve=n(Rl,"P",{});var qut=s(kve);d3r=r(qut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qut.forEach(t),c3r=i(Rl),mn=n(Rl,"P",{});var c0=s(mn);f3r=r(c0,"The model class to instantiate is selected based on the "),Sve=n(c0,"CODE",{});var Nut=s(Sve);m3r=r(Nut,"model_type"),Nut.forEach(t),h3r=r(c0,` property of the config object (either
passed as an argument or loaded from `),Rve=n(c0,"CODE",{});var jut=s(Rve);g3r=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),p3r=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(c0,"CODE",{});var Dut=s(Bve);u3r=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),_3r=r(c0,":"),c0.forEach(t),b3r=i(Rl),we=n(Rl,"UL",{});var Se=s(we);a3=n(Se,"LI",{});var O$e=s(a3);Pve=n(O$e,"STRONG",{});var Gut=s(Pve);F3r=r(Gut,"albert"),Gut.forEach(t),v3r=r(O$e," \u2014 "),OW=n(O$e,"A",{href:!0});var Out=s(OW);T3r=r(Out,"FlaxAlbertForSequenceClassification"),Out.forEach(t),M3r=r(O$e," (ALBERT model)"),O$e.forEach(t),E3r=i(Se),n3=n(Se,"LI",{});var V$e=s(n3);Ive=n(V$e,"STRONG",{});var Vut=s(Ive);C3r=r(Vut,"bart"),Vut.forEach(t),w3r=r(V$e," \u2014 "),VW=n(V$e,"A",{href:!0});var Xut=s(VW);A3r=r(Xut,"FlaxBartForSequenceClassification"),Xut.forEach(t),y3r=r(V$e," (BART model)"),V$e.forEach(t),L3r=i(Se),s3=n(Se,"LI",{});var X$e=s(s3);qve=n(X$e,"STRONG",{});var zut=s(qve);x3r=r(zut,"bert"),zut.forEach(t),$3r=r(X$e," \u2014 "),XW=n(X$e,"A",{href:!0});var Qut=s(XW);k3r=r(Qut,"FlaxBertForSequenceClassification"),Qut.forEach(t),S3r=r(X$e," (BERT model)"),X$e.forEach(t),R3r=i(Se),l3=n(Se,"LI",{});var z$e=s(l3);Nve=n(z$e,"STRONG",{});var Wut=s(Nve);B3r=r(Wut,"big_bird"),Wut.forEach(t),P3r=r(z$e," \u2014 "),zW=n(z$e,"A",{href:!0});var Hut=s(zW);I3r=r(Hut,"FlaxBigBirdForSequenceClassification"),Hut.forEach(t),q3r=r(z$e," (BigBird model)"),z$e.forEach(t),N3r=i(Se),i3=n(Se,"LI",{});var Q$e=s(i3);jve=n(Q$e,"STRONG",{});var Uut=s(jve);j3r=r(Uut,"distilbert"),Uut.forEach(t),D3r=r(Q$e," \u2014 "),QW=n(Q$e,"A",{href:!0});var Jut=s(QW);G3r=r(Jut,"FlaxDistilBertForSequenceClassification"),Jut.forEach(t),O3r=r(Q$e," (DistilBERT model)"),Q$e.forEach(t),V3r=i(Se),d3=n(Se,"LI",{});var W$e=s(d3);Dve=n(W$e,"STRONG",{});var Yut=s(Dve);X3r=r(Yut,"electra"),Yut.forEach(t),z3r=r(W$e," \u2014 "),WW=n(W$e,"A",{href:!0});var Kut=s(WW);Q3r=r(Kut,"FlaxElectraForSequenceClassification"),Kut.forEach(t),W3r=r(W$e," (ELECTRA model)"),W$e.forEach(t),H3r=i(Se),c3=n(Se,"LI",{});var H$e=s(c3);Gve=n(H$e,"STRONG",{});var Zut=s(Gve);U3r=r(Zut,"mbart"),Zut.forEach(t),J3r=r(H$e," \u2014 "),HW=n(H$e,"A",{href:!0});var e_t=s(HW);Y3r=r(e_t,"FlaxMBartForSequenceClassification"),e_t.forEach(t),K3r=r(H$e," (mBART model)"),H$e.forEach(t),Z3r=i(Se),f3=n(Se,"LI",{});var U$e=s(f3);Ove=n(U$e,"STRONG",{});var o_t=s(Ove);ewr=r(o_t,"roberta"),o_t.forEach(t),owr=r(U$e," \u2014 "),UW=n(U$e,"A",{href:!0});var r_t=s(UW);rwr=r(r_t,"FlaxRobertaForSequenceClassification"),r_t.forEach(t),twr=r(U$e," (RoBERTa model)"),U$e.forEach(t),awr=i(Se),m3=n(Se,"LI",{});var J$e=s(m3);Vve=n(J$e,"STRONG",{});var t_t=s(Vve);nwr=r(t_t,"roformer"),t_t.forEach(t),swr=r(J$e," \u2014 "),JW=n(J$e,"A",{href:!0});var a_t=s(JW);lwr=r(a_t,"FlaxRoFormerForSequenceClassification"),a_t.forEach(t),iwr=r(J$e," (RoFormer model)"),J$e.forEach(t),dwr=i(Se),h3=n(Se,"LI",{});var Y$e=s(h3);Xve=n(Y$e,"STRONG",{});var n_t=s(Xve);cwr=r(n_t,"xlm-roberta"),n_t.forEach(t),fwr=r(Y$e," \u2014 "),YW=n(Y$e,"A",{href:!0});var s_t=s(YW);mwr=r(s_t,"FlaxXLMRobertaForSequenceClassification"),s_t.forEach(t),hwr=r(Y$e," (XLM-RoBERTa model)"),Y$e.forEach(t),Se.forEach(t),gwr=i(Rl),T(g3.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),_Se=i(f),wc=n(f,"H2",{class:!0});var MBe=s(wc);p3=n(MBe,"A",{id:!0,class:!0,href:!0});var l_t=s(p3);zve=n(l_t,"SPAN",{});var i_t=s(zve);T(J8.$$.fragment,i_t),i_t.forEach(t),l_t.forEach(t),pwr=i(MBe),Qve=n(MBe,"SPAN",{});var d_t=s(Qve);uwr=r(d_t,"FlaxAutoModelForQuestionAnswering"),d_t.forEach(t),MBe.forEach(t),bSe=i(f),gr=n(f,"DIV",{class:!0});var Bl=s(gr);T(Y8.$$.fragment,Bl),_wr=i(Bl),Ac=n(Bl,"P",{});var CJ=s(Ac);bwr=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KW=n(CJ,"A",{href:!0});var c_t=s(KW);Fwr=r(c_t,"from_pretrained()"),c_t.forEach(t),vwr=r(CJ," class method or the "),ZW=n(CJ,"A",{href:!0});var f_t=s(ZW);Twr=r(f_t,"from_config()"),f_t.forEach(t),Mwr=r(CJ,` class
method.`),CJ.forEach(t),Ewr=i(Bl),K8=n(Bl,"P",{});var EBe=s(K8);Cwr=r(EBe,"This class cannot be instantiated directly using "),Wve=n(EBe,"CODE",{});var m_t=s(Wve);wwr=r(m_t,"__init__()"),m_t.forEach(t),Awr=r(EBe," (throws an error)."),EBe.forEach(t),ywr=i(Bl),Gt=n(Bl,"DIV",{class:!0});var f0=s(Gt);T(Z8.$$.fragment,f0),Lwr=i(f0),Hve=n(f0,"P",{});var h_t=s(Hve);xwr=r(h_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h_t.forEach(t),$wr=i(f0),yc=n(f0,"P",{});var wJ=s(yc);kwr=r(wJ,`Note:
Loading a model from its configuration file does `),Uve=n(wJ,"STRONG",{});var g_t=s(Uve);Swr=r(g_t,"not"),g_t.forEach(t),Rwr=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(wJ,"A",{href:!0});var p_t=s(eH);Bwr=r(p_t,"from_pretrained()"),p_t.forEach(t),Pwr=r(wJ," to load the model weights."),wJ.forEach(t),Iwr=i(f0),T(u3.$$.fragment,f0),f0.forEach(t),qwr=i(Bl),Gr=n(Bl,"DIV",{class:!0});var Pl=s(Gr);T(ex.$$.fragment,Pl),Nwr=i(Pl),Jve=n(Pl,"P",{});var u_t=s(Jve);jwr=r(u_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),u_t.forEach(t),Dwr=i(Pl),hn=n(Pl,"P",{});var m0=s(hn);Gwr=r(m0,"The model class to instantiate is selected based on the "),Yve=n(m0,"CODE",{});var __t=s(Yve);Owr=r(__t,"model_type"),__t.forEach(t),Vwr=r(m0,` property of the config object (either
passed as an argument or loaded from `),Kve=n(m0,"CODE",{});var b_t=s(Kve);Xwr=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),zwr=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(m0,"CODE",{});var F_t=s(Zve);Qwr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),Wwr=r(m0,":"),m0.forEach(t),Hwr=i(Pl),Ae=n(Pl,"UL",{});var Re=s(Ae);_3=n(Re,"LI",{});var K$e=s(_3);e1e=n(K$e,"STRONG",{});var v_t=s(e1e);Uwr=r(v_t,"albert"),v_t.forEach(t),Jwr=r(K$e," \u2014 "),oH=n(K$e,"A",{href:!0});var T_t=s(oH);Ywr=r(T_t,"FlaxAlbertForQuestionAnswering"),T_t.forEach(t),Kwr=r(K$e," (ALBERT model)"),K$e.forEach(t),Zwr=i(Re),b3=n(Re,"LI",{});var Z$e=s(b3);o1e=n(Z$e,"STRONG",{});var M_t=s(o1e);eAr=r(M_t,"bart"),M_t.forEach(t),oAr=r(Z$e," \u2014 "),rH=n(Z$e,"A",{href:!0});var E_t=s(rH);rAr=r(E_t,"FlaxBartForQuestionAnswering"),E_t.forEach(t),tAr=r(Z$e," (BART model)"),Z$e.forEach(t),aAr=i(Re),F3=n(Re,"LI",{});var e9e=s(F3);r1e=n(e9e,"STRONG",{});var C_t=s(r1e);nAr=r(C_t,"bert"),C_t.forEach(t),sAr=r(e9e," \u2014 "),tH=n(e9e,"A",{href:!0});var w_t=s(tH);lAr=r(w_t,"FlaxBertForQuestionAnswering"),w_t.forEach(t),iAr=r(e9e," (BERT model)"),e9e.forEach(t),dAr=i(Re),v3=n(Re,"LI",{});var o9e=s(v3);t1e=n(o9e,"STRONG",{});var A_t=s(t1e);cAr=r(A_t,"big_bird"),A_t.forEach(t),fAr=r(o9e," \u2014 "),aH=n(o9e,"A",{href:!0});var y_t=s(aH);mAr=r(y_t,"FlaxBigBirdForQuestionAnswering"),y_t.forEach(t),hAr=r(o9e," (BigBird model)"),o9e.forEach(t),gAr=i(Re),T3=n(Re,"LI",{});var r9e=s(T3);a1e=n(r9e,"STRONG",{});var L_t=s(a1e);pAr=r(L_t,"distilbert"),L_t.forEach(t),uAr=r(r9e," \u2014 "),nH=n(r9e,"A",{href:!0});var x_t=s(nH);_Ar=r(x_t,"FlaxDistilBertForQuestionAnswering"),x_t.forEach(t),bAr=r(r9e," (DistilBERT model)"),r9e.forEach(t),FAr=i(Re),M3=n(Re,"LI",{});var t9e=s(M3);n1e=n(t9e,"STRONG",{});var $_t=s(n1e);vAr=r($_t,"electra"),$_t.forEach(t),TAr=r(t9e," \u2014 "),sH=n(t9e,"A",{href:!0});var k_t=s(sH);MAr=r(k_t,"FlaxElectraForQuestionAnswering"),k_t.forEach(t),EAr=r(t9e," (ELECTRA model)"),t9e.forEach(t),CAr=i(Re),E3=n(Re,"LI",{});var a9e=s(E3);s1e=n(a9e,"STRONG",{});var S_t=s(s1e);wAr=r(S_t,"mbart"),S_t.forEach(t),AAr=r(a9e," \u2014 "),lH=n(a9e,"A",{href:!0});var R_t=s(lH);yAr=r(R_t,"FlaxMBartForQuestionAnswering"),R_t.forEach(t),LAr=r(a9e," (mBART model)"),a9e.forEach(t),xAr=i(Re),C3=n(Re,"LI",{});var n9e=s(C3);l1e=n(n9e,"STRONG",{});var B_t=s(l1e);$Ar=r(B_t,"roberta"),B_t.forEach(t),kAr=r(n9e," \u2014 "),iH=n(n9e,"A",{href:!0});var P_t=s(iH);SAr=r(P_t,"FlaxRobertaForQuestionAnswering"),P_t.forEach(t),RAr=r(n9e," (RoBERTa model)"),n9e.forEach(t),BAr=i(Re),w3=n(Re,"LI",{});var s9e=s(w3);i1e=n(s9e,"STRONG",{});var I_t=s(i1e);PAr=r(I_t,"roformer"),I_t.forEach(t),IAr=r(s9e," \u2014 "),dH=n(s9e,"A",{href:!0});var q_t=s(dH);qAr=r(q_t,"FlaxRoFormerForQuestionAnswering"),q_t.forEach(t),NAr=r(s9e," (RoFormer model)"),s9e.forEach(t),jAr=i(Re),A3=n(Re,"LI",{});var l9e=s(A3);d1e=n(l9e,"STRONG",{});var N_t=s(d1e);DAr=r(N_t,"xlm-roberta"),N_t.forEach(t),GAr=r(l9e," \u2014 "),cH=n(l9e,"A",{href:!0});var j_t=s(cH);OAr=r(j_t,"FlaxXLMRobertaForQuestionAnswering"),j_t.forEach(t),VAr=r(l9e," (XLM-RoBERTa model)"),l9e.forEach(t),Re.forEach(t),XAr=i(Pl),T(y3.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),FSe=i(f),Lc=n(f,"H2",{class:!0});var CBe=s(Lc);L3=n(CBe,"A",{id:!0,class:!0,href:!0});var D_t=s(L3);c1e=n(D_t,"SPAN",{});var G_t=s(c1e);T(ox.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),zAr=i(CBe),f1e=n(CBe,"SPAN",{});var O_t=s(f1e);QAr=r(O_t,"FlaxAutoModelForTokenClassification"),O_t.forEach(t),CBe.forEach(t),vSe=i(f),pr=n(f,"DIV",{class:!0});var Il=s(pr);T(rx.$$.fragment,Il),WAr=i(Il),xc=n(Il,"P",{});var AJ=s(xc);HAr=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=n(AJ,"A",{href:!0});var V_t=s(fH);UAr=r(V_t,"from_pretrained()"),V_t.forEach(t),JAr=r(AJ," class method or the "),mH=n(AJ,"A",{href:!0});var X_t=s(mH);YAr=r(X_t,"from_config()"),X_t.forEach(t),KAr=r(AJ,` class
method.`),AJ.forEach(t),ZAr=i(Il),tx=n(Il,"P",{});var wBe=s(tx);e0r=r(wBe,"This class cannot be instantiated directly using "),m1e=n(wBe,"CODE",{});var z_t=s(m1e);o0r=r(z_t,"__init__()"),z_t.forEach(t),r0r=r(wBe," (throws an error)."),wBe.forEach(t),t0r=i(Il),Ot=n(Il,"DIV",{class:!0});var h0=s(Ot);T(ax.$$.fragment,h0),a0r=i(h0),h1e=n(h0,"P",{});var Q_t=s(h1e);n0r=r(Q_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Q_t.forEach(t),s0r=i(h0),$c=n(h0,"P",{});var yJ=s($c);l0r=r(yJ,`Note:
Loading a model from its configuration file does `),g1e=n(yJ,"STRONG",{});var W_t=s(g1e);i0r=r(W_t,"not"),W_t.forEach(t),d0r=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(yJ,"A",{href:!0});var H_t=s(hH);c0r=r(H_t,"from_pretrained()"),H_t.forEach(t),f0r=r(yJ," to load the model weights."),yJ.forEach(t),m0r=i(h0),T(x3.$$.fragment,h0),h0.forEach(t),h0r=i(Il),Or=n(Il,"DIV",{class:!0});var ql=s(Or);T(nx.$$.fragment,ql),g0r=i(ql),p1e=n(ql,"P",{});var U_t=s(p1e);p0r=r(U_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U_t.forEach(t),u0r=i(ql),gn=n(ql,"P",{});var g0=s(gn);_0r=r(g0,"The model class to instantiate is selected based on the "),u1e=n(g0,"CODE",{});var J_t=s(u1e);b0r=r(J_t,"model_type"),J_t.forEach(t),F0r=r(g0,` property of the config object (either
passed as an argument or loaded from `),_1e=n(g0,"CODE",{});var Y_t=s(_1e);v0r=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),T0r=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(g0,"CODE",{});var K_t=s(b1e);M0r=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),E0r=r(g0,":"),g0.forEach(t),C0r=i(ql),Ne=n(ql,"UL",{});var bo=s(Ne);$3=n(bo,"LI",{});var i9e=s($3);F1e=n(i9e,"STRONG",{});var Z_t=s(F1e);w0r=r(Z_t,"albert"),Z_t.forEach(t),A0r=r(i9e," \u2014 "),gH=n(i9e,"A",{href:!0});var ebt=s(gH);y0r=r(ebt,"FlaxAlbertForTokenClassification"),ebt.forEach(t),L0r=r(i9e," (ALBERT model)"),i9e.forEach(t),x0r=i(bo),k3=n(bo,"LI",{});var d9e=s(k3);v1e=n(d9e,"STRONG",{});var obt=s(v1e);$0r=r(obt,"bert"),obt.forEach(t),k0r=r(d9e," \u2014 "),pH=n(d9e,"A",{href:!0});var rbt=s(pH);S0r=r(rbt,"FlaxBertForTokenClassification"),rbt.forEach(t),R0r=r(d9e," (BERT model)"),d9e.forEach(t),B0r=i(bo),S3=n(bo,"LI",{});var c9e=s(S3);T1e=n(c9e,"STRONG",{});var tbt=s(T1e);P0r=r(tbt,"big_bird"),tbt.forEach(t),I0r=r(c9e," \u2014 "),uH=n(c9e,"A",{href:!0});var abt=s(uH);q0r=r(abt,"FlaxBigBirdForTokenClassification"),abt.forEach(t),N0r=r(c9e," (BigBird model)"),c9e.forEach(t),j0r=i(bo),R3=n(bo,"LI",{});var f9e=s(R3);M1e=n(f9e,"STRONG",{});var nbt=s(M1e);D0r=r(nbt,"distilbert"),nbt.forEach(t),G0r=r(f9e," \u2014 "),_H=n(f9e,"A",{href:!0});var sbt=s(_H);O0r=r(sbt,"FlaxDistilBertForTokenClassification"),sbt.forEach(t),V0r=r(f9e," (DistilBERT model)"),f9e.forEach(t),X0r=i(bo),B3=n(bo,"LI",{});var m9e=s(B3);E1e=n(m9e,"STRONG",{});var lbt=s(E1e);z0r=r(lbt,"electra"),lbt.forEach(t),Q0r=r(m9e," \u2014 "),bH=n(m9e,"A",{href:!0});var ibt=s(bH);W0r=r(ibt,"FlaxElectraForTokenClassification"),ibt.forEach(t),H0r=r(m9e," (ELECTRA model)"),m9e.forEach(t),U0r=i(bo),P3=n(bo,"LI",{});var h9e=s(P3);C1e=n(h9e,"STRONG",{});var dbt=s(C1e);J0r=r(dbt,"roberta"),dbt.forEach(t),Y0r=r(h9e," \u2014 "),FH=n(h9e,"A",{href:!0});var cbt=s(FH);K0r=r(cbt,"FlaxRobertaForTokenClassification"),cbt.forEach(t),Z0r=r(h9e," (RoBERTa model)"),h9e.forEach(t),e6r=i(bo),I3=n(bo,"LI",{});var g9e=s(I3);w1e=n(g9e,"STRONG",{});var fbt=s(w1e);o6r=r(fbt,"roformer"),fbt.forEach(t),r6r=r(g9e," \u2014 "),vH=n(g9e,"A",{href:!0});var mbt=s(vH);t6r=r(mbt,"FlaxRoFormerForTokenClassification"),mbt.forEach(t),a6r=r(g9e," (RoFormer model)"),g9e.forEach(t),n6r=i(bo),q3=n(bo,"LI",{});var p9e=s(q3);A1e=n(p9e,"STRONG",{});var hbt=s(A1e);s6r=r(hbt,"xlm-roberta"),hbt.forEach(t),l6r=r(p9e," \u2014 "),TH=n(p9e,"A",{href:!0});var gbt=s(TH);i6r=r(gbt,"FlaxXLMRobertaForTokenClassification"),gbt.forEach(t),d6r=r(p9e," (XLM-RoBERTa model)"),p9e.forEach(t),bo.forEach(t),c6r=i(ql),T(N3.$$.fragment,ql),ql.forEach(t),Il.forEach(t),TSe=i(f),kc=n(f,"H2",{class:!0});var ABe=s(kc);j3=n(ABe,"A",{id:!0,class:!0,href:!0});var pbt=s(j3);y1e=n(pbt,"SPAN",{});var ubt=s(y1e);T(sx.$$.fragment,ubt),ubt.forEach(t),pbt.forEach(t),f6r=i(ABe),L1e=n(ABe,"SPAN",{});var _bt=s(L1e);m6r=r(_bt,"FlaxAutoModelForMultipleChoice"),_bt.forEach(t),ABe.forEach(t),MSe=i(f),ur=n(f,"DIV",{class:!0});var Nl=s(ur);T(lx.$$.fragment,Nl),h6r=i(Nl),Sc=n(Nl,"P",{});var LJ=s(Sc);g6r=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MH=n(LJ,"A",{href:!0});var bbt=s(MH);p6r=r(bbt,"from_pretrained()"),bbt.forEach(t),u6r=r(LJ," class method or the "),EH=n(LJ,"A",{href:!0});var Fbt=s(EH);_6r=r(Fbt,"from_config()"),Fbt.forEach(t),b6r=r(LJ,` class
method.`),LJ.forEach(t),F6r=i(Nl),ix=n(Nl,"P",{});var yBe=s(ix);v6r=r(yBe,"This class cannot be instantiated directly using "),x1e=n(yBe,"CODE",{});var vbt=s(x1e);T6r=r(vbt,"__init__()"),vbt.forEach(t),M6r=r(yBe," (throws an error)."),yBe.forEach(t),E6r=i(Nl),Vt=n(Nl,"DIV",{class:!0});var p0=s(Vt);T(dx.$$.fragment,p0),C6r=i(p0),$1e=n(p0,"P",{});var Tbt=s($1e);w6r=r(Tbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tbt.forEach(t),A6r=i(p0),Rc=n(p0,"P",{});var xJ=s(Rc);y6r=r(xJ,`Note:
Loading a model from its configuration file does `),k1e=n(xJ,"STRONG",{});var Mbt=s(k1e);L6r=r(Mbt,"not"),Mbt.forEach(t),x6r=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(xJ,"A",{href:!0});var Ebt=s(CH);$6r=r(Ebt,"from_pretrained()"),Ebt.forEach(t),k6r=r(xJ," to load the model weights."),xJ.forEach(t),S6r=i(p0),T(D3.$$.fragment,p0),p0.forEach(t),R6r=i(Nl),Vr=n(Nl,"DIV",{class:!0});var jl=s(Vr);T(cx.$$.fragment,jl),B6r=i(jl),S1e=n(jl,"P",{});var Cbt=s(S1e);P6r=r(Cbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cbt.forEach(t),I6r=i(jl),pn=n(jl,"P",{});var u0=s(pn);q6r=r(u0,"The model class to instantiate is selected based on the "),R1e=n(u0,"CODE",{});var wbt=s(R1e);N6r=r(wbt,"model_type"),wbt.forEach(t),j6r=r(u0,` property of the config object (either
passed as an argument or loaded from `),B1e=n(u0,"CODE",{});var Abt=s(B1e);D6r=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),G6r=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(u0,"CODE",{});var ybt=s(P1e);O6r=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),V6r=r(u0,":"),u0.forEach(t),X6r=i(jl),je=n(jl,"UL",{});var Fo=s(je);G3=n(Fo,"LI",{});var u9e=s(G3);I1e=n(u9e,"STRONG",{});var Lbt=s(I1e);z6r=r(Lbt,"albert"),Lbt.forEach(t),Q6r=r(u9e," \u2014 "),wH=n(u9e,"A",{href:!0});var xbt=s(wH);W6r=r(xbt,"FlaxAlbertForMultipleChoice"),xbt.forEach(t),H6r=r(u9e," (ALBERT model)"),u9e.forEach(t),U6r=i(Fo),O3=n(Fo,"LI",{});var _9e=s(O3);q1e=n(_9e,"STRONG",{});var $bt=s(q1e);J6r=r($bt,"bert"),$bt.forEach(t),Y6r=r(_9e," \u2014 "),AH=n(_9e,"A",{href:!0});var kbt=s(AH);K6r=r(kbt,"FlaxBertForMultipleChoice"),kbt.forEach(t),Z6r=r(_9e," (BERT model)"),_9e.forEach(t),eyr=i(Fo),V3=n(Fo,"LI",{});var b9e=s(V3);N1e=n(b9e,"STRONG",{});var Sbt=s(N1e);oyr=r(Sbt,"big_bird"),Sbt.forEach(t),ryr=r(b9e," \u2014 "),yH=n(b9e,"A",{href:!0});var Rbt=s(yH);tyr=r(Rbt,"FlaxBigBirdForMultipleChoice"),Rbt.forEach(t),ayr=r(b9e," (BigBird model)"),b9e.forEach(t),nyr=i(Fo),X3=n(Fo,"LI",{});var F9e=s(X3);j1e=n(F9e,"STRONG",{});var Bbt=s(j1e);syr=r(Bbt,"distilbert"),Bbt.forEach(t),lyr=r(F9e," \u2014 "),LH=n(F9e,"A",{href:!0});var Pbt=s(LH);iyr=r(Pbt,"FlaxDistilBertForMultipleChoice"),Pbt.forEach(t),dyr=r(F9e," (DistilBERT model)"),F9e.forEach(t),cyr=i(Fo),z3=n(Fo,"LI",{});var v9e=s(z3);D1e=n(v9e,"STRONG",{});var Ibt=s(D1e);fyr=r(Ibt,"electra"),Ibt.forEach(t),myr=r(v9e," \u2014 "),xH=n(v9e,"A",{href:!0});var qbt=s(xH);hyr=r(qbt,"FlaxElectraForMultipleChoice"),qbt.forEach(t),gyr=r(v9e," (ELECTRA model)"),v9e.forEach(t),pyr=i(Fo),Q3=n(Fo,"LI",{});var T9e=s(Q3);G1e=n(T9e,"STRONG",{});var Nbt=s(G1e);uyr=r(Nbt,"roberta"),Nbt.forEach(t),_yr=r(T9e," \u2014 "),$H=n(T9e,"A",{href:!0});var jbt=s($H);byr=r(jbt,"FlaxRobertaForMultipleChoice"),jbt.forEach(t),Fyr=r(T9e," (RoBERTa model)"),T9e.forEach(t),vyr=i(Fo),W3=n(Fo,"LI",{});var M9e=s(W3);O1e=n(M9e,"STRONG",{});var Dbt=s(O1e);Tyr=r(Dbt,"roformer"),Dbt.forEach(t),Myr=r(M9e," \u2014 "),kH=n(M9e,"A",{href:!0});var Gbt=s(kH);Eyr=r(Gbt,"FlaxRoFormerForMultipleChoice"),Gbt.forEach(t),Cyr=r(M9e," (RoFormer model)"),M9e.forEach(t),wyr=i(Fo),H3=n(Fo,"LI",{});var E9e=s(H3);V1e=n(E9e,"STRONG",{});var Obt=s(V1e);Ayr=r(Obt,"xlm-roberta"),Obt.forEach(t),yyr=r(E9e," \u2014 "),SH=n(E9e,"A",{href:!0});var Vbt=s(SH);Lyr=r(Vbt,"FlaxXLMRobertaForMultipleChoice"),Vbt.forEach(t),xyr=r(E9e," (XLM-RoBERTa model)"),E9e.forEach(t),Fo.forEach(t),$yr=i(jl),T(U3.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),ESe=i(f),Bc=n(f,"H2",{class:!0});var LBe=s(Bc);J3=n(LBe,"A",{id:!0,class:!0,href:!0});var Xbt=s(J3);X1e=n(Xbt,"SPAN",{});var zbt=s(X1e);T(fx.$$.fragment,zbt),zbt.forEach(t),Xbt.forEach(t),kyr=i(LBe),z1e=n(LBe,"SPAN",{});var Qbt=s(z1e);Syr=r(Qbt,"FlaxAutoModelForNextSentencePrediction"),Qbt.forEach(t),LBe.forEach(t),CSe=i(f),_r=n(f,"DIV",{class:!0});var Dl=s(_r);T(mx.$$.fragment,Dl),Ryr=i(Dl),Pc=n(Dl,"P",{});var $J=s(Pc);Byr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RH=n($J,"A",{href:!0});var Wbt=s(RH);Pyr=r(Wbt,"from_pretrained()"),Wbt.forEach(t),Iyr=r($J," class method or the "),BH=n($J,"A",{href:!0});var Hbt=s(BH);qyr=r(Hbt,"from_config()"),Hbt.forEach(t),Nyr=r($J,` class
method.`),$J.forEach(t),jyr=i(Dl),hx=n(Dl,"P",{});var xBe=s(hx);Dyr=r(xBe,"This class cannot be instantiated directly using "),Q1e=n(xBe,"CODE",{});var Ubt=s(Q1e);Gyr=r(Ubt,"__init__()"),Ubt.forEach(t),Oyr=r(xBe," (throws an error)."),xBe.forEach(t),Vyr=i(Dl),Xt=n(Dl,"DIV",{class:!0});var _0=s(Xt);T(gx.$$.fragment,_0),Xyr=i(_0),W1e=n(_0,"P",{});var Jbt=s(W1e);zyr=r(Jbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Jbt.forEach(t),Qyr=i(_0),Ic=n(_0,"P",{});var kJ=s(Ic);Wyr=r(kJ,`Note:
Loading a model from its configuration file does `),H1e=n(kJ,"STRONG",{});var Ybt=s(H1e);Hyr=r(Ybt,"not"),Ybt.forEach(t),Uyr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(kJ,"A",{href:!0});var Kbt=s(PH);Jyr=r(Kbt,"from_pretrained()"),Kbt.forEach(t),Yyr=r(kJ," to load the model weights."),kJ.forEach(t),Kyr=i(_0),T(Y3.$$.fragment,_0),_0.forEach(t),Zyr=i(Dl),Xr=n(Dl,"DIV",{class:!0});var Gl=s(Xr);T(px.$$.fragment,Gl),eLr=i(Gl),U1e=n(Gl,"P",{});var Zbt=s(U1e);oLr=r(Zbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Zbt.forEach(t),rLr=i(Gl),un=n(Gl,"P",{});var b0=s(un);tLr=r(b0,"The model class to instantiate is selected based on the "),J1e=n(b0,"CODE",{});var e2t=s(J1e);aLr=r(e2t,"model_type"),e2t.forEach(t),nLr=r(b0,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(b0,"CODE",{});var o2t=s(Y1e);sLr=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),lLr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(b0,"CODE",{});var r2t=s(K1e);iLr=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),dLr=r(b0,":"),b0.forEach(t),cLr=i(Gl),Z1e=n(Gl,"UL",{});var t2t=s(Z1e);K3=n(t2t,"LI",{});var C9e=s(K3);eTe=n(C9e,"STRONG",{});var a2t=s(eTe);fLr=r(a2t,"bert"),a2t.forEach(t),mLr=r(C9e," \u2014 "),IH=n(C9e,"A",{href:!0});var n2t=s(IH);hLr=r(n2t,"FlaxBertForNextSentencePrediction"),n2t.forEach(t),gLr=r(C9e," (BERT model)"),C9e.forEach(t),t2t.forEach(t),pLr=i(Gl),T(Z3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),wSe=i(f),qc=n(f,"H2",{class:!0});var $Be=s(qc);ew=n($Be,"A",{id:!0,class:!0,href:!0});var s2t=s(ew);oTe=n(s2t,"SPAN",{});var l2t=s(oTe);T(ux.$$.fragment,l2t),l2t.forEach(t),s2t.forEach(t),uLr=i($Be),rTe=n($Be,"SPAN",{});var i2t=s(rTe);_Lr=r(i2t,"FlaxAutoModelForImageClassification"),i2t.forEach(t),$Be.forEach(t),ASe=i(f),br=n(f,"DIV",{class:!0});var Ol=s(br);T(_x.$$.fragment,Ol),bLr=i(Ol),Nc=n(Ol,"P",{});var SJ=s(Nc);FLr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=n(SJ,"A",{href:!0});var d2t=s(qH);vLr=r(d2t,"from_pretrained()"),d2t.forEach(t),TLr=r(SJ," class method or the "),NH=n(SJ,"A",{href:!0});var c2t=s(NH);MLr=r(c2t,"from_config()"),c2t.forEach(t),ELr=r(SJ,` class
method.`),SJ.forEach(t),CLr=i(Ol),bx=n(Ol,"P",{});var kBe=s(bx);wLr=r(kBe,"This class cannot be instantiated directly using "),tTe=n(kBe,"CODE",{});var f2t=s(tTe);ALr=r(f2t,"__init__()"),f2t.forEach(t),yLr=r(kBe," (throws an error)."),kBe.forEach(t),LLr=i(Ol),zt=n(Ol,"DIV",{class:!0});var F0=s(zt);T(Fx.$$.fragment,F0),xLr=i(F0),aTe=n(F0,"P",{});var m2t=s(aTe);$Lr=r(m2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m2t.forEach(t),kLr=i(F0),jc=n(F0,"P",{});var RJ=s(jc);SLr=r(RJ,`Note:
Loading a model from its configuration file does `),nTe=n(RJ,"STRONG",{});var h2t=s(nTe);RLr=r(h2t,"not"),h2t.forEach(t),BLr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(RJ,"A",{href:!0});var g2t=s(jH);PLr=r(g2t,"from_pretrained()"),g2t.forEach(t),ILr=r(RJ," to load the model weights."),RJ.forEach(t),qLr=i(F0),T(ow.$$.fragment,F0),F0.forEach(t),NLr=i(Ol),zr=n(Ol,"DIV",{class:!0});var Vl=s(zr);T(vx.$$.fragment,Vl),jLr=i(Vl),sTe=n(Vl,"P",{});var p2t=s(sTe);DLr=r(p2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p2t.forEach(t),GLr=i(Vl),_n=n(Vl,"P",{});var v0=s(_n);OLr=r(v0,"The model class to instantiate is selected based on the "),lTe=n(v0,"CODE",{});var u2t=s(lTe);VLr=r(u2t,"model_type"),u2t.forEach(t),XLr=r(v0,` property of the config object (either
passed as an argument or loaded from `),iTe=n(v0,"CODE",{});var _2t=s(iTe);zLr=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),QLr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(v0,"CODE",{});var b2t=s(dTe);WLr=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),HLr=r(v0,":"),v0.forEach(t),ULr=i(Vl),Tx=n(Vl,"UL",{});var SBe=s(Tx);rw=n(SBe,"LI",{});var w9e=s(rw);cTe=n(w9e,"STRONG",{});var F2t=s(cTe);JLr=r(F2t,"beit"),F2t.forEach(t),YLr=r(w9e," \u2014 "),DH=n(w9e,"A",{href:!0});var v2t=s(DH);KLr=r(v2t,"FlaxBeitForImageClassification"),v2t.forEach(t),ZLr=r(w9e," (BEiT model)"),w9e.forEach(t),e8r=i(SBe),tw=n(SBe,"LI",{});var A9e=s(tw);fTe=n(A9e,"STRONG",{});var T2t=s(fTe);o8r=r(T2t,"vit"),T2t.forEach(t),r8r=r(A9e," \u2014 "),GH=n(A9e,"A",{href:!0});var M2t=s(GH);t8r=r(M2t,"FlaxViTForImageClassification"),M2t.forEach(t),a8r=r(A9e," (ViT model)"),A9e.forEach(t),SBe.forEach(t),n8r=i(Vl),T(aw.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),ySe=i(f),Dc=n(f,"H2",{class:!0});var RBe=s(Dc);nw=n(RBe,"A",{id:!0,class:!0,href:!0});var E2t=s(nw);mTe=n(E2t,"SPAN",{});var C2t=s(mTe);T(Mx.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),s8r=i(RBe),hTe=n(RBe,"SPAN",{});var w2t=s(hTe);l8r=r(w2t,"FlaxAutoModelForVision2Seq"),w2t.forEach(t),RBe.forEach(t),LSe=i(f),Fr=n(f,"DIV",{class:!0});var Xl=s(Fr);T(Ex.$$.fragment,Xl),i8r=i(Xl),Gc=n(Xl,"P",{});var BJ=s(Gc);d8r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OH=n(BJ,"A",{href:!0});var A2t=s(OH);c8r=r(A2t,"from_pretrained()"),A2t.forEach(t),f8r=r(BJ," class method or the "),VH=n(BJ,"A",{href:!0});var y2t=s(VH);m8r=r(y2t,"from_config()"),y2t.forEach(t),h8r=r(BJ,` class
method.`),BJ.forEach(t),g8r=i(Xl),Cx=n(Xl,"P",{});var BBe=s(Cx);p8r=r(BBe,"This class cannot be instantiated directly using "),gTe=n(BBe,"CODE",{});var L2t=s(gTe);u8r=r(L2t,"__init__()"),L2t.forEach(t),_8r=r(BBe," (throws an error)."),BBe.forEach(t),b8r=i(Xl),Qt=n(Xl,"DIV",{class:!0});var T0=s(Qt);T(wx.$$.fragment,T0),F8r=i(T0),pTe=n(T0,"P",{});var x2t=s(pTe);v8r=r(x2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x2t.forEach(t),T8r=i(T0),Oc=n(T0,"P",{});var PJ=s(Oc);M8r=r(PJ,`Note:
Loading a model from its configuration file does `),uTe=n(PJ,"STRONG",{});var $2t=s(uTe);E8r=r($2t,"not"),$2t.forEach(t),C8r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(PJ,"A",{href:!0});var k2t=s(XH);w8r=r(k2t,"from_pretrained()"),k2t.forEach(t),A8r=r(PJ," to load the model weights."),PJ.forEach(t),y8r=i(T0),T(sw.$$.fragment,T0),T0.forEach(t),L8r=i(Xl),Qr=n(Xl,"DIV",{class:!0});var zl=s(Qr);T(Ax.$$.fragment,zl),x8r=i(zl),_Te=n(zl,"P",{});var S2t=s(_Te);$8r=r(S2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S2t.forEach(t),k8r=i(zl),bn=n(zl,"P",{});var M0=s(bn);S8r=r(M0,"The model class to instantiate is selected based on the "),bTe=n(M0,"CODE",{});var R2t=s(bTe);R8r=r(R2t,"model_type"),R2t.forEach(t),B8r=r(M0,` property of the config object (either
passed as an argument or loaded from `),FTe=n(M0,"CODE",{});var B2t=s(FTe);P8r=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),I8r=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(M0,"CODE",{});var P2t=s(vTe);q8r=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),N8r=r(M0,":"),M0.forEach(t),j8r=i(zl),TTe=n(zl,"UL",{});var I2t=s(TTe);lw=n(I2t,"LI",{});var y9e=s(lw);MTe=n(y9e,"STRONG",{});var q2t=s(MTe);D8r=r(q2t,"vision-encoder-decoder"),q2t.forEach(t),G8r=r(y9e," \u2014 "),zH=n(y9e,"A",{href:!0});var N2t=s(zH);O8r=r(N2t,"FlaxVisionEncoderDecoderModel"),N2t.forEach(t),V8r=r(y9e," (Vision Encoder decoder model)"),y9e.forEach(t),I2t.forEach(t),X8r=i(zl),T(iw.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),this.h()},h(){c(h,"name","hf:doc:metadata"),c(h,"content",JSON.stringify(Dvt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(vn,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoConfig"),c(Mn,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoModel"),c(En,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoTokenizer"),c(Kl,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertModel"),c(Jc,"id","extending-the-auto-classes"),c(Jc,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jc,"href","#extending-the-auto-classes"),c(Zl,"class","relative group"),c(Kc,"id","transformers.AutoConfig"),c(Kc,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kc,"href","#transformers.AutoConfig"),c(ei,"class","relative group"),c(q7,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(N7,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertConfig"),c(j7,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartConfig"),c(D7,"href","/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitConfig"),c(G7,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertConfig"),c(O7,"href","/docs/transformers/pr_highlight/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(V7,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdConfig"),c(X7,"href","/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(z7,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Q7,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(W7,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertConfig"),c(H7,"href","/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineConfig"),c(U7,"href","/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPConfig"),c(J7,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertConfig"),c(Y7,"href","/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextConfig"),c(K7,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLConfig"),c(Z7,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(e$,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(o$,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaConfig"),c(r$,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(t$,"href","/docs/transformers/pr_highlight/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(a$,"href","/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTConfig"),c(n$,"href","/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrConfig"),c(s$,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertConfig"),c(l$,"href","/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.DPRConfig"),c(i$,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraConfig"),c(d$,"href","/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(c$,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertConfig"),c(f$,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetConfig"),c(m$,"href","/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTConfig"),c(h$,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelConfig"),c(g$,"href","/docs/transformers/pr_highlight/en/model_doc/glpn#transformers.GLPNConfig"),c(p$,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Config"),c(u$,"href","/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(_$,"href","/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJConfig"),c(b$,"href","/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertConfig"),c(F$,"href","/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertConfig"),c(v$,"href","/docs/transformers/pr_highlight/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(T$,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(M$,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(E$,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDConfig"),c(C$,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerConfig"),c(w$,"href","/docs/transformers/pr_highlight/en/model_doc/luke#transformers.LukeConfig"),c(A$,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig"),c(y$,"href","/docs/transformers/pr_highlight/en/model_doc/m2m_100#transformers.M2M100Config"),c(L$,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianConfig"),c(x$,"href","/docs/transformers/pr_highlight/en/model_doc/maskformer#transformers.MaskFormerConfig"),c($$,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartConfig"),c(k$,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(S$,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(R$,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetConfig"),c(B$,"href","/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Config"),c(P$,"href","/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(I$,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(q$,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusConfig"),c(N$,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverConfig"),c(j$,"href","/docs/transformers/pr_highlight/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(D$,"href","/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(G$,"href","/docs/transformers/pr_highlight/en/model_doc/rag#transformers.RagConfig"),c(O$,"href","/docs/transformers/pr_highlight/en/model_doc/realm#transformers.RealmConfig"),c(V$,"href","/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerConfig"),c(X$,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertConfig"),c(z$,"href","/docs/transformers/pr_highlight/en/model_doc/resnet#transformers.ResNetConfig"),c(Q$,"href","/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertConfig"),c(W$,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaConfig"),c(H$,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerConfig"),c(U$,"href","/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerConfig"),c(J$,"href","/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWConfig"),c(Y$,"href","/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDConfig"),c(K$,"href","/docs/transformers/pr_highlight/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Z$,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(e9,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(o9,"href","/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterConfig"),c(r9,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(t9,"href","/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinConfig"),c(a9,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Config"),c(n9,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasConfig"),c(s9,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(l9,"href","/docs/transformers/pr_highlight/en/model_doc/trocr#transformers.TrOCRConfig"),c(i9,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(d9,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(c9,"href","/docs/transformers/pr_highlight/en/model_doc/van#transformers.VanConfig"),c(f9,"href","/docs/transformers/pr_highlight/en/model_doc/vilt#transformers.ViltConfig"),c(m9,"href","/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(h9,"href","/docs/transformers/pr_highlight/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(g9,"href","/docs/transformers/pr_highlight/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(p9,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTConfig"),c(u9,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_9,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(b9,"href","/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMConfig"),c(F9,"href","/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMConfig"),c(v9,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMConfig"),c(T9,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(M9,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(E9,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(C9,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetConfig"),c(w9,"href","/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoConfig"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zm,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qm,"id","transformers.AutoTokenizer"),c(Qm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qm,"href","#transformers.AutoTokenizer"),c(ri,"class","relative group"),c(A9,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(y9,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertTokenizer"),c(L9,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(x9,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartTokenizer"),c($9,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartTokenizerFast"),c(k9,"href","/docs/transformers/pr_highlight/en/model_doc/barthez#transformers.BarthezTokenizer"),c(S9,"href","/docs/transformers/pr_highlight/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(R9,"href","/docs/transformers/pr_highlight/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(B9,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizer"),c(P9,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizerFast"),c(I9,"href","/docs/transformers/pr_highlight/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(q9,"href","/docs/transformers/pr_highlight/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(N9,"href","/docs/transformers/pr_highlight/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(j9,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(D9,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(G9,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(O9,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(V9,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(X9,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(z9,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Q9,"href","/docs/transformers/pr_highlight/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(W9,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertTokenizer"),c(H9,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(U9,"href","/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineTokenizer"),c(J9,"href","/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPTokenizer"),c(Y9,"href","/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(K9,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Z9,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(ek,"href","/docs/transformers/pr_highlight/en/model_doc/cpm#transformers.CpmTokenizer"),c(ok,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(rk,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaTokenizer"),c(tk,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ak,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(nk,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(sk,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(lk,"href","/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ik,"href","/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(dk,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraTokenizer"),c(ck,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(fk,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(mk,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetTokenizer"),c(hk,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(gk,"href","/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(pk,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelTokenizer"),c(uk,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(_k,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bk,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Fk,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vk,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Tk,"href","/docs/transformers/pr_highlight/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Mk,"href","/docs/transformers/pr_highlight/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Ek,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Ck,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wk,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Ak,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(yk,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Lk,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(xk,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($k,"href","/docs/transformers/pr_highlight/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(kk,"href","/docs/transformers/pr_highlight/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Sk,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDTokenizer"),c(Rk,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDTokenizerFast"),c(Bk,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Pk,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Ik,"href","/docs/transformers/pr_highlight/en/model_doc/luke#transformers.LukeTokenizer"),c(qk,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Nk,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(jk,"href","/docs/transformers/pr_highlight/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Dk,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianTokenizer"),c(Gk,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartTokenizer"),c(Ok,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Vk,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Xk,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(zk,"href","/docs/transformers/pr_highlight/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Qk,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Wk,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Hk,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Uk,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Jk,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Tokenizer"),c(Yk,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5TokenizerFast"),c(Kk,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Zk,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(eS,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(oS,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(rS,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(tS,"href","/docs/transformers/pr_highlight/en/model_doc/phobert#transformers.PhobertTokenizer"),c(aS,"href","/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nS,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizer"),c(sS,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizerFast"),c(lS,"href","/docs/transformers/pr_highlight/en/model_doc/rag#transformers.RagTokenizer"),c(iS,"href","/docs/transformers/pr_highlight/en/model_doc/realm#transformers.RealmTokenizer"),c(dS,"href","/docs/transformers/pr_highlight/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cS,"href","/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fS,"href","/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mS,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertTokenizer"),c(hS,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gS,"href","/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pS,"href","/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(uS,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_S,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bS,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(FS,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vS,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TS,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MS,"href","/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterTokenizer"),c(ES,"href","/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CS,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wS,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AS,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Tokenizer"),c(yS,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5TokenizerFast"),c(LS,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasTokenizer"),c(xS,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($S,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kS,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(SS,"href","/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMTokenizer"),c(RS,"href","/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BS,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMTokenizer"),c(PS,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(IS,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qS,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(NS,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(jS,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoFeatureExtractor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoFeatureExtractor"),c(ti,"class","relative group"),c(DS,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(GS,"href","/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(OS,"href","/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(VS,"href","/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XS,"href","/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(zS,"href","/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QS,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WS,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(HS,"href","/docs/transformers/pr_highlight/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(US,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(JS,"href","/docs/transformers/pr_highlight/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(YS,"href","/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KS,"href","/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(ZS,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(eR,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oR,"href","/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rR,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tR,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aR,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"id","transformers.AutoProcessor"),c(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qh,"href","#transformers.AutoProcessor"),c(ai,"class","relative group"),c(nR,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(sR,"href","/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPProcessor"),c(lR,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(iR,"href","/docs/transformers/pr_highlight/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(dR,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(cR,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(fR,"href","/docs/transformers/pr_highlight/en/model_doc/trocr#transformers.TrOCRProcessor"),c(mR,"href","/docs/transformers/pr_highlight/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(hR,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ag,"id","transformers.AutoModel"),c(ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ag,"href","#transformers.AutoModel"),c(si,"class","relative group"),c(gR,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pR,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uR,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_R,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertModel"),c(bR,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartModel"),c(FR,"href","/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitModel"),c(vR,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertModel"),c(TR,"href","/docs/transformers/pr_highlight/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(MR,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdModel"),c(ER,"href","/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(CR,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(wR,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(AR,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertModel"),c(yR,"href","/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineModel"),c(LR,"href","/docs/transformers/pr_highlight/en/model_doc/clip#transformers.CLIPModel"),c(xR,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertModel"),c($R,"href","/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextModel"),c(kR,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLModel"),c(SR,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(RR,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(BR,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaModel"),c(PR,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(IR,"href","/docs/transformers/pr_highlight/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(qR,"href","/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTModel"),c(NR,"href","/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrModel"),c(jR,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertModel"),c(DR,"href","/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(GR,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraModel"),c(OR,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertModel"),c(VR,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetModel"),c(XR,"href","/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTModel"),c(zR,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelModel"),c(QR,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelBaseModel"),c(WR,"href","/docs/transformers/pr_highlight/en/model_doc/glpn#transformers.GLPNModel"),c(HR,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2Model"),c(UR,"href","/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(JR,"href","/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJModel"),c(YR,"href","/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertModel"),c(KR,"href","/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertModel"),c(ZR,"href","/docs/transformers/pr_highlight/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(eB,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(oB,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(rB,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDModel"),c(tB,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerModel"),c(aB,"href","/docs/transformers/pr_highlight/en/model_doc/luke#transformers.LukeModel"),c(nB,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertModel"),c(sB,"href","/docs/transformers/pr_highlight/en/model_doc/m2m_100#transformers.M2M100Model"),c(lB,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianModel"),c(iB,"href","/docs/transformers/pr_highlight/en/model_doc/maskformer#transformers.MaskFormerModel"),c(dB,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartModel"),c(cB,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(fB,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertModel"),c(mB,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetModel"),c(hB,"href","/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5Model"),c(gB,"href","/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerModel"),c(pB,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uB,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusModel"),c(_B,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverModel"),c(bB,"href","/docs/transformers/pr_highlight/en/model_doc/poolformer#transformers.PoolFormerModel"),c(FB,"href","/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(vB,"href","/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerModel"),c(TB,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertModel"),c(MB,"href","/docs/transformers/pr_highlight/en/model_doc/resnet#transformers.ResNetModel"),c(EB,"href","/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertModel"),c(CB,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaModel"),c(wB,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerModel"),c(AB,"href","/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerModel"),c(yB,"href","/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWModel"),c(LB,"href","/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDModel"),c(xB,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c($B,"href","/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterModel"),c(kB,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(SB,"href","/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinModel"),c(RB,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5Model"),c(BB,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasModel"),c(PB,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(IB,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechModel"),c(qB,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(NB,"href","/docs/transformers/pr_highlight/en/model_doc/van#transformers.VanModel"),c(jB,"href","/docs/transformers/pr_highlight/en/model_doc/vilt#transformers.ViltModel"),c(DB,"href","/docs/transformers/pr_highlight/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(GB,"href","/docs/transformers/pr_highlight/en/model_doc/visual_bert#transformers.VisualBertModel"),c(OB,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTModel"),c(VB,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(XB,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(zB,"href","/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMModel"),c(QB,"href","/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMModel"),c(WB,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMModel"),c(HB,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(UB,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(JB,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(YB,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetModel"),c(KB,"href","/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoModel"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoModelForPreTraining"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoModelForPreTraining"),c(di,"class","relative group"),c(ZB,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eP,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oP,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rP,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForPreTraining"),c(tP,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aP,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForPreTraining"),c(nP,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(sP,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(lP,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iP,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(dP,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(cP,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(fP,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(mP,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForPreTraining"),c(hP,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gP,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pP,"href","/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(uP,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_P,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bP,"href","/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(FP,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(vP,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TP,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MP,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(EP,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CP,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wP,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AP,"href","/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertModel"),c(yP,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LP,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xP,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c($P,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kP,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SP,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(RP,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(BP,"href","/docs/transformers/pr_highlight/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(PP,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(IP,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qP,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NP,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jP,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DP,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForCausalLM"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForCausalLM"),c(mi,"class","relative group"),c(GP,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OP,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VP,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XP,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForCausalLM"),c(zP,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertLMHeadModel"),c(QP,"href","/docs/transformers/pr_highlight/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(WP,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(HP,"href","/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(UP,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(JP,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(YP,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(KP,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZP,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(eI,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForCausalLM"),c(oI,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rI,"href","/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(tI,"href","/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(aI,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianForCausalLM"),c(nI,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForCausalLM"),c(sI,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(lI,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(iI,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(dI,"href","/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(cI,"href","/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(fI,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(mI,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(hI,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(gI,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(pI,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uI,"href","/docs/transformers/pr_highlight/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(_I,"href","/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(bI,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FI,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(vI,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(TI,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(MI,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b_,"id","transformers.AutoModelForMaskedLM"),c(b_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b_,"href","#transformers.AutoModelForMaskedLM"),c(pi,"class","relative group"),c(EI,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CI,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wI,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AI,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(yI,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LI,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForMaskedLM"),c(xI,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c($I,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(kI,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(SI,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(RI,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(BI,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(PI,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(II,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(qI,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(NI,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(jI,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(DI,"href","/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(GI,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(OI,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(VI,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XI,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(zI,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(QI,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(WI,"href","/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(HI,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(UI,"href","/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(JI,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(YI,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(KI,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ZI,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(eq,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oq,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rq,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tq,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aq,"href","/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForSeq2SeqLM"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(bi,"class","relative group"),c(nq,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sq,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lq,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iq,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dq,"href","/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(cq,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(fq,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(mq,"href","/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(hq,"href","/docs/transformers/pr_highlight/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gq,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(pq,"href","/docs/transformers/pr_highlight/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(uq,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.MarianMTModel"),c(_q,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bq,"href","/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Fq,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(vq,"href","/docs/transformers/pr_highlight/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Tq,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Mq,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eb,"id","transformers.AutoModelForSequenceClassification"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForSequenceClassification"),c(Ti,"class","relative group"),c(Eq,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cq,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wq,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aq,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(yq,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Lq,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForSequenceClassification"),c(xq,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c($q,"href","/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(kq,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Sq,"href","/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Rq,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Bq,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Pq,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Iq,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(qq,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Nq,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(jq,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Dq,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Gq,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Oq,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Vq,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Xq,"href","/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(zq,"href","/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Qq,"href","/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Wq,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Hq,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Uq,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Jq,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Yq,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Kq,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Zq,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(eN,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(oN,"href","/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(rN,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(tN,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(aN,"href","/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nN,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sN,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lN,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iN,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dN,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cN,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fN,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mN,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(hN,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(gN,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pN,"href","/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForMultipleChoice"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForMultipleChoice"),c(Ci,"class","relative group"),c(uN,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_N,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bN,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FN,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(vN,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TN,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MN,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EN,"href","/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CN,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wN,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AN,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(yN,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(LN,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(xN,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c($N,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(kN,"href","/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(SN,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(RN,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BN,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(PN,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(IN,"href","/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(qN,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(NN,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(jN,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(DN,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(GN,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(ON,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(VN,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(XN,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(zN,"href","/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y2,"id","transformers.AutoModelForNextSentencePrediction"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForNextSentencePrediction"),c(yi,"class","relative group"),c(QN,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WN,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HN,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UN,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(JN,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(YN,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(KN,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForTokenClassification"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForTokenClassification"),c($i,"class","relative group"),c(ZN,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ej,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oj,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rj,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(tj,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForTokenClassification"),c(aj,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(nj,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(sj,"href","/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineForTokenClassification"),c(lj,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ij,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(dj,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(cj,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(fj,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(mj,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hj,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(gj,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(pj,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(uj,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(_j,"href","/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(bj,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Fj,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(vj,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Tj,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Mj,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Ej,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Cj,"href","/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(wj,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Aj,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(yj,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Lj,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(xj,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMForTokenClassification"),c($j,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(kj,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Sj,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Rj,"href","/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForQuestionAnswering"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForQuestionAnswering"),c(Ri,"class","relative group"),c(Bj,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pj,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ij,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qj,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Nj,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(jj,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Dj,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Gj,"href","/docs/transformers/pr_highlight/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Oj,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Vj,"href","/docs/transformers/pr_highlight/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Xj,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(zj,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Qj,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Wj,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Hj,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Uj,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Jj,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Yj,"href","/docs/transformers/pr_highlight/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Kj,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Zj,"href","/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(eD,"href","/docs/transformers/pr_highlight/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(oD,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(rD,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(tD,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(aD,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(nD,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(sD,"href","/docs/transformers/pr_highlight/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(lD,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(iD,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(dD,"href","/docs/transformers/pr_highlight/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(cD,"href","/docs/transformers/pr_highlight/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(fD,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mD,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(hD,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(gD,"href","/docs/transformers/pr_highlight/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(pD,"href","/docs/transformers/pr_highlight/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(uD,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(_D,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(bD,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(FD,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(vD,"href","/docs/transformers/pr_highlight/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ii,"class","relative group"),c(TD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ED,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CD,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qv,"id","transformers.AutoModelForImageClassification"),c(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qv,"href","#transformers.AutoModelForImageClassification"),c(ji,"class","relative group"),c(wD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LD,"href","/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitForImageClassification"),c(xD,"href","/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c($D,"href","/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTForImageClassification"),c(kD,"href","/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(SD,"href","/docs/transformers/pr_highlight/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(RD,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BD,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PD,"href","/docs/transformers/pr_highlight/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(ID,"href","/docs/transformers/pr_highlight/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qD,"href","/docs/transformers/pr_highlight/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(ND,"href","/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jD,"href","/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinForImageClassification"),c(DD,"href","/docs/transformers/pr_highlight/en/model_doc/van#transformers.VanForImageClassification"),c(GD,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTForImageClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForVision2Seq"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForVision2Seq"),c(Oi,"class","relative group"),c(OD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zD,"href","/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o1,"id","transformers.AutoModelForAudioClassification"),c(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o1,"href","#transformers.AutoModelForAudioClassification"),c(zi,"class","relative group"),c(QD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HD,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UD,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JD,"href","/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KD,"href","/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(eG,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oG,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rG,"href","/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h1,"id","transformers.AutoModelForAudioFrameClassification"),c(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h1,"href","#transformers.AutoModelForAudioFrameClassification"),c(Hi,"class","relative group"),c(tG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sG,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(lG,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(iG,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(dG,"href","/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T1,"id","transformers.AutoModelForCTC"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForCTC"),c(Yi,"class","relative group"),c(cG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hG,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(gG,"href","/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.HubertForCTC"),c(pG,"href","/docs/transformers/pr_highlight/en/model_doc/sew#transformers.SEWForCTC"),c(uG,"href","/docs/transformers/pr_highlight/en/model_doc/sew-d#transformers.SEWDForCTC"),c(_G,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bG,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(FG,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(vG,"href","/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMForCTC"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R1,"id","transformers.AutoModelForSpeechSeq2Seq"),c(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R1,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ed,"class","relative group"),c(TG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CG,"href","/docs/transformers/pr_highlight/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(wG,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j1,"id","transformers.AutoModelForAudioXVector"),c(j1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j1,"href","#transformers.AutoModelForAudioXVector"),c(td,"class","relative group"),c(AG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xG,"href","/docs/transformers/pr_highlight/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c($G,"href","/docs/transformers/pr_highlight/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(kG,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(SG,"href","/docs/transformers/pr_highlight/en/model_doc/wavlm#transformers.WavLMForXVector"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForMaskedImageModeling"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForMaskedImageModeling"),c(sd,"class","relative group"),c(RG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IG,"href","/docs/transformers/pr_highlight/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qG,"href","/docs/transformers/pr_highlight/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(NG,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForObjectDetection"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForObjectDetection"),c(cd,"class","relative group"),c(jG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OG,"href","/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrForObjectDetection"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForImageSegmentation"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForImageSegmentation"),c(hd,"class","relative group"),c(VG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QG,"href","/docs/transformers/pr_highlight/en/model_doc/detr#transformers.DetrForSegmentation"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForSemanticSegmentation"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForSemanticSegmentation"),c(ud,"class","relative group"),c(WG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JG,"href","/docs/transformers/pr_highlight/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(YG,"href","/docs/transformers/pr_highlight/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForInstanceSegmentation"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fd,"class","relative group"),c(KG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZG,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eO,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oO,"href","/docs/transformers/pr_highlight/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.TFAutoModel"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.TFAutoModel"),c(Md,"class","relative group"),c(rO,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertModel"),c(sO,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.TFBartModel"),c(lO,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertModel"),c(iO,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(dO,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(cO,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertModel"),c(fO,"href","/docs/transformers/pr_highlight/en/model_doc/clip#transformers.TFCLIPModel"),c(mO,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertModel"),c(hO,"href","/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.TFConvNextModel"),c(gO,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.TFCTRLModel"),c(pO,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaModel"),c(uO,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(_O,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(bO,"href","/docs/transformers/pr_highlight/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(FO,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraModel"),c(vO,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(TO,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelModel"),c(MO,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(EO,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.TFGPT2Model"),c(CO,"href","/docs/transformers/pr_highlight/en/model_doc/hubert#transformers.TFHubertModel"),c(wO,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(AO,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.TFLEDModel"),c(yO,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerModel"),c(LO,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.TFLxmertModel"),c(xO,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.TFMarianModel"),c($O,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.TFMBartModel"),c(kO,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(SO,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetModel"),c(RO,"href","/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.TFMT5Model"),c(BO,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(PO,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.TFPegasusModel"),c(IO,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertModel"),c(qO,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaModel"),c(NO,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerModel"),c(jO,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(DO,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.TFT5Model"),c(GO,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasModel"),c(OO,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(VO,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.TFViTModel"),c(XO,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(zO,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMModel"),c(QO,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(WO,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForPreTraining"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForPreTraining"),c(wd,"class","relative group"),c(HO,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(KO,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForPreTraining"),c(eV,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(oV,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(rV,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(aV,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(nV,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(sV,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(lV,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(iV,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(dV,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(cV,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(fV,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mV,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hV,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(pV,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uV,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_V,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bV,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForCausalLM"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForCausalLM"),c(Ld,"class","relative group"),c(FV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(EV,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(CV,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wV,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AV,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yV,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(LV,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(xV,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c($V,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kV,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SV,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForImageClassification"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForImageClassification"),c(kd,"class","relative group"),c(RV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_highlight/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(qV,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.TFAutoModelForMaskedLM"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.TFAutoModelForMaskedLM"),c(Bd,"class","relative group"),c(NV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(OV,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(VV,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(XV,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(zV,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(QV,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(WV,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(HV,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(UV,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(JV,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(YV,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(KV,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(ZV,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(eX,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(oX,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(rX,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(tX,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(aX,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(nX,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sX,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(qd,"class","relative group"),c(lX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cX,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(fX,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(mX,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(hX,"href","/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(gX,"href","/docs/transformers/pr_highlight/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(pX,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.TFMarianMTModel"),c(uX,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(_X,"href","/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(bX,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(FX,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForSequenceClassification"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Dd,"class","relative group"),c(vX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(CX,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(wX,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(AX,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(yX,"href","/docs/transformers/pr_highlight/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(LX,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(xX,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c($X,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(SX,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(BX,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(PX,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(IX,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(qX,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(NX,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(jX,"href","/docs/transformers/pr_highlight/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(DX,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(GX,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(OX,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(VX,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(XX,"href","/docs/transformers/pr_highlight/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(zX,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(QX,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(WX,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForMultipleChoice"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Vd,"class","relative group"),c(HX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(oz,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(tz,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(az,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(nz,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(sz,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(iz,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(cz,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(fz,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(mz,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(hz,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Qd,"class","relative group"),c(gz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_highlight/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForTokenClassification"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForTokenClassification"),c(Ud,"class","relative group"),c(bz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Mz,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Ez,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Cz,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wz,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Az,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(yz,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Lz,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xz,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c($z,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(kz,"href","/docs/transformers/pr_highlight/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Sz,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Rz,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Bz,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Pz,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Iz,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(qz,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Nz,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(jz,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Dz,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.TFAutoModelForQuestionAnswering"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Kd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_highlight/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_highlight/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_highlight/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_highlight/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_highlight/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Zz,"href","/docs/transformers/pr_highlight/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_highlight/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_highlight/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_highlight/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_highlight/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_highlight/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lQ,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.TFAutoModelForVision2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.TFAutoModelForVision2Seq"),c(oc,"class","relative group"),c(dQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(ac,"class","relative group"),c(hQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_highlight/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModel"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModel"),c(lc,"class","relative group"),c(_Q,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TQ,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartModel"),c(MQ,"href","/docs/transformers/pr_highlight/en/model_doc/beit#transformers.FlaxBeitModel"),c(EQ,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertModel"),c(CQ,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(wQ,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(AQ,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(yQ,"href","/docs/transformers/pr_highlight/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LQ,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(xQ,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraModel"),c($Q,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(kQ,"href","/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(SQ,"href","/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RQ,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.FlaxMarianModel"),c(BQ,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartModel"),c(PQ,"href","/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IQ,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qQ,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(NQ,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(jQ,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.FlaxT5Model"),c(DQ,"href","/docs/transformers/pr_highlight/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(GQ,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.FlaxViTModel"),c(OQ,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(VQ,"href","/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(XQ,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.FlaxAutoModelForCausalLM"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.FlaxAutoModelForCausalLM"),c(cc,"class","relative group"),c(zQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(UQ,"href","/docs/transformers/pr_highlight/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JQ,"href","/docs/transformers/pr_highlight/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YQ,"href","/docs/transformers/pr_highlight/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KQ,"href","/docs/transformers/pr_highlight/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForPreTraining"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForPreTraining"),c(hc,"class","relative group"),c(ZQ,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(tW,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aW,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(nW,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(sW,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(lW,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iW,"href","/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dW,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cW,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fW,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(mW,"href","/docs/transformers/pr_highlight/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(hW,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModelForMaskedLM"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(uc,"class","relative group"),c(gW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(bW,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(vW,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(TW,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(MW,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(EW,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CW,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wW,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(AW,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(yW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kW,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(SW,"href","/docs/transformers/pr_highlight/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_highlight/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(BW,"href","/docs/transformers/pr_highlight/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(PW,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IW,"href","/docs/transformers/pr_highlight/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(qW,"href","/docs/transformers/pr_highlight/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(NW,"href","/docs/transformers/pr_highlight/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Mc,"class","relative group"),c(jW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(VW,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(XW,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(QW,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(WW,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(HW,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(UW,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(JW,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(YW,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(wc,"class","relative group"),c(KW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForTokenClassification"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(fH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(pH,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(uH,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_H,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(bH,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(FH,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(vH,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(TH,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(kc,"class","relative group"),c(MH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_highlight/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(yH,"href","/docs/transformers/pr_highlight/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(LH,"href","/docs/transformers/pr_highlight/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(xH,"href","/docs/transformers/pr_highlight/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c($H,"href","/docs/transformers/pr_highlight/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(kH,"href","/docs/transformers/pr_highlight/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(SH,"href","/docs/transformers/pr_highlight/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Bc,"class","relative group"),c(RH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForImageClassification"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForImageClassification"),c(qc,"class","relative group"),c(qH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_highlight/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(GH,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForVision2Seq"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Dc,"class","relative group"),c(OH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_highlight/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,h),b(f,F,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,g),e(p,vo),e(vo,Ql),b(f,Qc,_),b(f,Yr,_),e(Yr,Wl),e(Yr,Hl),e(Hl,E0),e(Yr,Wc),b(f,Be,_),b(f,Ge,_),e(Ge,Ul),e(Ge,vn),e(vn,C0),e(Ge,Tn),e(Ge,Mn),e(Mn,w0),e(Ge,Jl),e(Ge,En),e(En,A0),e(Ge,Yl),b(f,Hc,_),M(ba,f,_),b(f,Oe,_),b(f,Me,_),e(Me,k7),e(Me,Kl),e(Kl,S7),e(Me,R7),b(f,To,_),b(f,Fa,_),e(Fa,B7),e(Fa,Uc),e(Uc,P7),e(Fa,PBe),b(f,L9e,_),b(f,Zl,_),e(Zl,Jc),e(Jc,IJ),M(y0,IJ,null),e(Zl,IBe),e(Zl,qJ),e(qJ,qBe),b(f,x9e,_),b(f,Cn,_),e(Cn,NBe),e(Cn,NJ),e(NJ,jBe),e(Cn,DBe),e(Cn,jJ),e(jJ,GBe),e(Cn,OBe),b(f,$9e,_),M(L0,f,_),b(f,k9e,_),b(f,I7,_),e(I7,VBe),b(f,S9e,_),M(Yc,f,_),b(f,R9e,_),b(f,ei,_),e(ei,Kc),e(Kc,DJ),M(x0,DJ,null),e(ei,XBe),e(ei,GJ),e(GJ,zBe),b(f,B9e,_),b(f,Mo,_),M($0,Mo,null),e(Mo,QBe),e(Mo,k0),e(k0,WBe),e(k0,q7),e(q7,HBe),e(k0,UBe),e(Mo,JBe),e(Mo,S0),e(S0,YBe),e(S0,OJ),e(OJ,KBe),e(S0,ZBe),e(Mo,ePe),e(Mo,vr),M(R0,vr,null),e(vr,oPe),e(vr,VJ),e(VJ,rPe),e(vr,tPe),e(vr,oi),e(oi,aPe),e(oi,XJ),e(XJ,nPe),e(oi,sPe),e(oi,zJ),e(zJ,lPe),e(oi,iPe),e(vr,dPe),e(vr,y),e(y,Zc),e(Zc,QJ),e(QJ,cPe),e(Zc,fPe),e(Zc,N7),e(N7,mPe),e(Zc,hPe),e(y,gPe),e(y,ef),e(ef,WJ),e(WJ,pPe),e(ef,uPe),e(ef,j7),e(j7,_Pe),e(ef,bPe),e(y,FPe),e(y,of),e(of,HJ),e(HJ,vPe),e(of,TPe),e(of,D7),e(D7,MPe),e(of,EPe),e(y,CPe),e(y,rf),e(rf,UJ),e(UJ,wPe),e(rf,APe),e(rf,G7),e(G7,yPe),e(rf,LPe),e(y,xPe),e(y,tf),e(tf,JJ),e(JJ,$Pe),e(tf,kPe),e(tf,O7),e(O7,SPe),e(tf,RPe),e(y,BPe),e(y,af),e(af,YJ),e(YJ,PPe),e(af,IPe),e(af,V7),e(V7,qPe),e(af,NPe),e(y,jPe),e(y,nf),e(nf,KJ),e(KJ,DPe),e(nf,GPe),e(nf,X7),e(X7,OPe),e(nf,VPe),e(y,XPe),e(y,sf),e(sf,ZJ),e(ZJ,zPe),e(sf,QPe),e(sf,z7),e(z7,WPe),e(sf,HPe),e(y,UPe),e(y,lf),e(lf,eY),e(eY,JPe),e(lf,YPe),e(lf,Q7),e(Q7,KPe),e(lf,ZPe),e(y,eIe),e(y,df),e(df,oY),e(oY,oIe),e(df,rIe),e(df,W7),e(W7,tIe),e(df,aIe),e(y,nIe),e(y,cf),e(cf,rY),e(rY,sIe),e(cf,lIe),e(cf,H7),e(H7,iIe),e(cf,dIe),e(y,cIe),e(y,ff),e(ff,tY),e(tY,fIe),e(ff,mIe),e(ff,U7),e(U7,hIe),e(ff,gIe),e(y,pIe),e(y,mf),e(mf,aY),e(aY,uIe),e(mf,_Ie),e(mf,J7),e(J7,bIe),e(mf,FIe),e(y,vIe),e(y,hf),e(hf,nY),e(nY,TIe),e(hf,MIe),e(hf,Y7),e(Y7,EIe),e(hf,CIe),e(y,wIe),e(y,gf),e(gf,sY),e(sY,AIe),e(gf,yIe),e(gf,K7),e(K7,LIe),e(gf,xIe),e(y,$Ie),e(y,pf),e(pf,lY),e(lY,kIe),e(pf,SIe),e(pf,Z7),e(Z7,RIe),e(pf,BIe),e(y,PIe),e(y,uf),e(uf,iY),e(iY,IIe),e(uf,qIe),e(uf,e$),e(e$,NIe),e(uf,jIe),e(y,DIe),e(y,_f),e(_f,dY),e(dY,GIe),e(_f,OIe),e(_f,o$),e(o$,VIe),e(_f,XIe),e(y,zIe),e(y,bf),e(bf,cY),e(cY,QIe),e(bf,WIe),e(bf,r$),e(r$,HIe),e(bf,UIe),e(y,JIe),e(y,Ff),e(Ff,fY),e(fY,YIe),e(Ff,KIe),e(Ff,t$),e(t$,ZIe),e(Ff,eqe),e(y,oqe),e(y,vf),e(vf,mY),e(mY,rqe),e(vf,tqe),e(vf,a$),e(a$,aqe),e(vf,nqe),e(y,sqe),e(y,Tf),e(Tf,hY),e(hY,lqe),e(Tf,iqe),e(Tf,n$),e(n$,dqe),e(Tf,cqe),e(y,fqe),e(y,Mf),e(Mf,gY),e(gY,mqe),e(Mf,hqe),e(Mf,s$),e(s$,gqe),e(Mf,pqe),e(y,uqe),e(y,Ef),e(Ef,pY),e(pY,_qe),e(Ef,bqe),e(Ef,l$),e(l$,Fqe),e(Ef,vqe),e(y,Tqe),e(y,Cf),e(Cf,uY),e(uY,Mqe),e(Cf,Eqe),e(Cf,i$),e(i$,Cqe),e(Cf,wqe),e(y,Aqe),e(y,wf),e(wf,_Y),e(_Y,yqe),e(wf,Lqe),e(wf,d$),e(d$,xqe),e(wf,$qe),e(y,kqe),e(y,Af),e(Af,bY),e(bY,Sqe),e(Af,Rqe),e(Af,c$),e(c$,Bqe),e(Af,Pqe),e(y,Iqe),e(y,yf),e(yf,FY),e(FY,qqe),e(yf,Nqe),e(yf,f$),e(f$,jqe),e(yf,Dqe),e(y,Gqe),e(y,Lf),e(Lf,vY),e(vY,Oqe),e(Lf,Vqe),e(Lf,m$),e(m$,Xqe),e(Lf,zqe),e(y,Qqe),e(y,xf),e(xf,TY),e(TY,Wqe),e(xf,Hqe),e(xf,h$),e(h$,Uqe),e(xf,Jqe),e(y,Yqe),e(y,$f),e($f,MY),e(MY,Kqe),e($f,Zqe),e($f,g$),e(g$,eNe),e($f,oNe),e(y,rNe),e(y,kf),e(kf,EY),e(EY,tNe),e(kf,aNe),e(kf,p$),e(p$,nNe),e(kf,sNe),e(y,lNe),e(y,Sf),e(Sf,CY),e(CY,iNe),e(Sf,dNe),e(Sf,u$),e(u$,cNe),e(Sf,fNe),e(y,mNe),e(y,Rf),e(Rf,wY),e(wY,hNe),e(Rf,gNe),e(Rf,_$),e(_$,pNe),e(Rf,uNe),e(y,_Ne),e(y,Bf),e(Bf,AY),e(AY,bNe),e(Bf,FNe),e(Bf,b$),e(b$,vNe),e(Bf,TNe),e(y,MNe),e(y,Pf),e(Pf,yY),e(yY,ENe),e(Pf,CNe),e(Pf,F$),e(F$,wNe),e(Pf,ANe),e(y,yNe),e(y,If),e(If,LY),e(LY,LNe),e(If,xNe),e(If,v$),e(v$,$Ne),e(If,kNe),e(y,SNe),e(y,qf),e(qf,xY),e(xY,RNe),e(qf,BNe),e(qf,T$),e(T$,PNe),e(qf,INe),e(y,qNe),e(y,Nf),e(Nf,$Y),e($Y,NNe),e(Nf,jNe),e(Nf,M$),e(M$,DNe),e(Nf,GNe),e(y,ONe),e(y,jf),e(jf,kY),e(kY,VNe),e(jf,XNe),e(jf,E$),e(E$,zNe),e(jf,QNe),e(y,WNe),e(y,Df),e(Df,SY),e(SY,HNe),e(Df,UNe),e(Df,C$),e(C$,JNe),e(Df,YNe),e(y,KNe),e(y,Gf),e(Gf,RY),e(RY,ZNe),e(Gf,eje),e(Gf,w$),e(w$,oje),e(Gf,rje),e(y,tje),e(y,Of),e(Of,BY),e(BY,aje),e(Of,nje),e(Of,A$),e(A$,sje),e(Of,lje),e(y,ije),e(y,Vf),e(Vf,PY),e(PY,dje),e(Vf,cje),e(Vf,y$),e(y$,fje),e(Vf,mje),e(y,hje),e(y,Xf),e(Xf,IY),e(IY,gje),e(Xf,pje),e(Xf,L$),e(L$,uje),e(Xf,_je),e(y,bje),e(y,zf),e(zf,qY),e(qY,Fje),e(zf,vje),e(zf,x$),e(x$,Tje),e(zf,Mje),e(y,Eje),e(y,Qf),e(Qf,NY),e(NY,Cje),e(Qf,wje),e(Qf,$$),e($$,Aje),e(Qf,yje),e(y,Lje),e(y,Wf),e(Wf,jY),e(jY,xje),e(Wf,$je),e(Wf,k$),e(k$,kje),e(Wf,Sje),e(y,Rje),e(y,Hf),e(Hf,DY),e(DY,Bje),e(Hf,Pje),e(Hf,S$),e(S$,Ije),e(Hf,qje),e(y,Nje),e(y,Uf),e(Uf,GY),e(GY,jje),e(Uf,Dje),e(Uf,R$),e(R$,Gje),e(Uf,Oje),e(y,Vje),e(y,Jf),e(Jf,OY),e(OY,Xje),e(Jf,zje),e(Jf,B$),e(B$,Qje),e(Jf,Wje),e(y,Hje),e(y,Yf),e(Yf,VY),e(VY,Uje),e(Yf,Jje),e(Yf,P$),e(P$,Yje),e(Yf,Kje),e(y,Zje),e(y,Kf),e(Kf,XY),e(XY,eDe),e(Kf,oDe),e(Kf,I$),e(I$,rDe),e(Kf,tDe),e(y,aDe),e(y,Zf),e(Zf,zY),e(zY,nDe),e(Zf,sDe),e(Zf,q$),e(q$,lDe),e(Zf,iDe),e(y,dDe),e(y,em),e(em,QY),e(QY,cDe),e(em,fDe),e(em,N$),e(N$,mDe),e(em,hDe),e(y,gDe),e(y,om),e(om,WY),e(WY,pDe),e(om,uDe),e(om,HY),e(HY,_De),e(om,bDe),e(y,FDe),e(y,rm),e(rm,UY),e(UY,vDe),e(rm,TDe),e(rm,j$),e(j$,MDe),e(rm,EDe),e(y,CDe),e(y,tm),e(tm,JY),e(JY,wDe),e(tm,ADe),e(tm,D$),e(D$,yDe),e(tm,LDe),e(y,xDe),e(y,am),e(am,YY),e(YY,$De),e(am,kDe),e(am,KY),e(KY,SDe),e(am,RDe),e(y,BDe),e(y,nm),e(nm,ZY),e(ZY,PDe),e(nm,IDe),e(nm,G$),e(G$,qDe),e(nm,NDe),e(y,jDe),e(y,sm),e(sm,eK),e(eK,DDe),e(sm,GDe),e(sm,O$),e(O$,ODe),e(sm,VDe),e(y,XDe),e(y,lm),e(lm,oK),e(oK,zDe),e(lm,QDe),e(lm,V$),e(V$,WDe),e(lm,HDe),e(y,UDe),e(y,im),e(im,rK),e(rK,JDe),e(im,YDe),e(im,X$),e(X$,KDe),e(im,ZDe),e(y,eGe),e(y,dm),e(dm,tK),e(tK,oGe),e(dm,rGe),e(dm,z$),e(z$,tGe),e(dm,aGe),e(y,nGe),e(y,cm),e(cm,aK),e(aK,sGe),e(cm,lGe),e(cm,Q$),e(Q$,iGe),e(cm,dGe),e(y,cGe),e(y,fm),e(fm,nK),e(nK,fGe),e(fm,mGe),e(fm,W$),e(W$,hGe),e(fm,gGe),e(y,pGe),e(y,mm),e(mm,sK),e(sK,uGe),e(mm,_Ge),e(mm,H$),e(H$,bGe),e(mm,FGe),e(y,vGe),e(y,hm),e(hm,lK),e(lK,TGe),e(hm,MGe),e(hm,U$),e(U$,EGe),e(hm,CGe),e(y,wGe),e(y,gm),e(gm,iK),e(iK,AGe),e(gm,yGe),e(gm,J$),e(J$,LGe),e(gm,xGe),e(y,$Ge),e(y,pm),e(pm,dK),e(dK,kGe),e(pm,SGe),e(pm,Y$),e(Y$,RGe),e(pm,BGe),e(y,PGe),e(y,um),e(um,cK),e(cK,IGe),e(um,qGe),e(um,K$),e(K$,NGe),e(um,jGe),e(y,DGe),e(y,_m),e(_m,fK),e(fK,GGe),e(_m,OGe),e(_m,Z$),e(Z$,VGe),e(_m,XGe),e(y,zGe),e(y,bm),e(bm,mK),e(mK,QGe),e(bm,WGe),e(bm,e9),e(e9,HGe),e(bm,UGe),e(y,JGe),e(y,Fm),e(Fm,hK),e(hK,YGe),e(Fm,KGe),e(Fm,o9),e(o9,ZGe),e(Fm,eOe),e(y,oOe),e(y,vm),e(vm,gK),e(gK,rOe),e(vm,tOe),e(vm,r9),e(r9,aOe),e(vm,nOe),e(y,sOe),e(y,Tm),e(Tm,pK),e(pK,lOe),e(Tm,iOe),e(Tm,t9),e(t9,dOe),e(Tm,cOe),e(y,fOe),e(y,Mm),e(Mm,uK),e(uK,mOe),e(Mm,hOe),e(Mm,a9),e(a9,gOe),e(Mm,pOe),e(y,uOe),e(y,Em),e(Em,_K),e(_K,_Oe),e(Em,bOe),e(Em,n9),e(n9,FOe),e(Em,vOe),e(y,TOe),e(y,Cm),e(Cm,bK),e(bK,MOe),e(Cm,EOe),e(Cm,s9),e(s9,COe),e(Cm,wOe),e(y,AOe),e(y,wm),e(wm,FK),e(FK,yOe),e(wm,LOe),e(wm,l9),e(l9,xOe),e(wm,$Oe),e(y,kOe),e(y,Am),e(Am,vK),e(vK,SOe),e(Am,ROe),e(Am,i9),e(i9,BOe),e(Am,POe),e(y,IOe),e(y,ym),e(ym,TK),e(TK,qOe),e(ym,NOe),e(ym,d9),e(d9,jOe),e(ym,DOe),e(y,GOe),e(y,Lm),e(Lm,MK),e(MK,OOe),e(Lm,VOe),e(Lm,c9),e(c9,XOe),e(Lm,zOe),e(y,QOe),e(y,xm),e(xm,EK),e(EK,WOe),e(xm,HOe),e(xm,f9),e(f9,UOe),e(xm,JOe),e(y,YOe),e(y,$m),e($m,CK),e(CK,KOe),e($m,ZOe),e($m,m9),e(m9,eVe),e($m,oVe),e(y,rVe),e(y,km),e(km,wK),e(wK,tVe),e(km,aVe),e(km,h9),e(h9,nVe),e(km,sVe),e(y,lVe),e(y,Sm),e(Sm,AK),e(AK,iVe),e(Sm,dVe),e(Sm,g9),e(g9,cVe),e(Sm,fVe),e(y,mVe),e(y,Rm),e(Rm,yK),e(yK,hVe),e(Rm,gVe),e(Rm,p9),e(p9,pVe),e(Rm,uVe),e(y,_Ve),e(y,Bm),e(Bm,LK),e(LK,bVe),e(Bm,FVe),e(Bm,u9),e(u9,vVe),e(Bm,TVe),e(y,MVe),e(y,Pm),e(Pm,xK),e(xK,EVe),e(Pm,CVe),e(Pm,_9),e(_9,wVe),e(Pm,AVe),e(y,yVe),e(y,Im),e(Im,$K),e($K,LVe),e(Im,xVe),e(Im,b9),e(b9,$Ve),e(Im,kVe),e(y,SVe),e(y,qm),e(qm,kK),e(kK,RVe),e(qm,BVe),e(qm,F9),e(F9,PVe),e(qm,IVe),e(y,qVe),e(y,Nm),e(Nm,SK),e(SK,NVe),e(Nm,jVe),e(Nm,v9),e(v9,DVe),e(Nm,GVe),e(y,OVe),e(y,jm),e(jm,RK),e(RK,VVe),e(jm,XVe),e(jm,T9),e(T9,zVe),e(jm,QVe),e(y,WVe),e(y,Dm),e(Dm,BK),e(BK,HVe),e(Dm,UVe),e(Dm,M9),e(M9,JVe),e(Dm,YVe),e(y,KVe),e(y,Gm),e(Gm,PK),e(PK,ZVe),e(Gm,eXe),e(Gm,E9),e(E9,oXe),e(Gm,rXe),e(y,tXe),e(y,Om),e(Om,IK),e(IK,aXe),e(Om,nXe),e(Om,C9),e(C9,sXe),e(Om,lXe),e(y,iXe),e(y,Vm),e(Vm,qK),e(qK,dXe),e(Vm,cXe),e(Vm,w9),e(w9,fXe),e(Vm,mXe),e(vr,hXe),M(Xm,vr,null),e(Mo,gXe),e(Mo,zm),M(B0,zm,null),e(zm,pXe),e(zm,NK),e(NK,uXe),b(f,P9e,_),b(f,ri,_),e(ri,Qm),e(Qm,jK),M(P0,jK,null),e(ri,_Xe),e(ri,DK),e(DK,bXe),b(f,I9e,_),b(f,Eo,_),M(I0,Eo,null),e(Eo,FXe),e(Eo,q0),e(q0,vXe),e(q0,A9),e(A9,TXe),e(q0,MXe),e(Eo,EXe),e(Eo,N0),e(N0,CXe),e(N0,GK),e(GK,wXe),e(N0,AXe),e(Eo,yXe),e(Eo,Tr),M(j0,Tr,null),e(Tr,LXe),e(Tr,OK),e(OK,xXe),e(Tr,$Xe),e(Tr,va),e(va,kXe),e(va,VK),e(VK,SXe),e(va,RXe),e(va,XK),e(XK,BXe),e(va,PXe),e(va,zK),e(zK,IXe),e(va,qXe),e(Tr,NXe),e(Tr,S),e(S,wn),e(wn,QK),e(QK,jXe),e(wn,DXe),e(wn,y9),e(y9,GXe),e(wn,OXe),e(wn,L9),e(L9,VXe),e(wn,XXe),e(S,zXe),e(S,An),e(An,WK),e(WK,QXe),e(An,WXe),e(An,x9),e(x9,HXe),e(An,UXe),e(An,$9),e($9,JXe),e(An,YXe),e(S,KXe),e(S,yn),e(yn,HK),e(HK,ZXe),e(yn,eze),e(yn,k9),e(k9,oze),e(yn,rze),e(yn,S9),e(S9,tze),e(yn,aze),e(S,nze),e(S,Wm),e(Wm,UK),e(UK,sze),e(Wm,lze),e(Wm,R9),e(R9,ize),e(Wm,dze),e(S,cze),e(S,Ln),e(Ln,JK),e(JK,fze),e(Ln,mze),e(Ln,B9),e(B9,hze),e(Ln,gze),e(Ln,P9),e(P9,pze),e(Ln,uze),e(S,_ze),e(S,Hm),e(Hm,YK),e(YK,bze),e(Hm,Fze),e(Hm,I9),e(I9,vze),e(Hm,Tze),e(S,Mze),e(S,Um),e(Um,KK),e(KK,Eze),e(Um,Cze),e(Um,q9),e(q9,wze),e(Um,Aze),e(S,yze),e(S,Jm),e(Jm,ZK),e(ZK,Lze),e(Jm,xze),e(Jm,N9),e(N9,$ze),e(Jm,kze),e(S,Sze),e(S,xn),e(xn,eZ),e(eZ,Rze),e(xn,Bze),e(xn,j9),e(j9,Pze),e(xn,Ize),e(xn,D9),e(D9,qze),e(xn,Nze),e(S,jze),e(S,$n),e($n,oZ),e(oZ,Dze),e($n,Gze),e($n,G9),e(G9,Oze),e($n,Vze),e($n,O9),e(O9,Xze),e($n,zze),e(S,Qze),e(S,kn),e(kn,rZ),e(rZ,Wze),e(kn,Hze),e(kn,V9),e(V9,Uze),e(kn,Jze),e(kn,X9),e(X9,Yze),e(kn,Kze),e(S,Zze),e(S,Ym),e(Ym,tZ),e(tZ,eQe),e(Ym,oQe),e(Ym,z9),e(z9,rQe),e(Ym,tQe),e(S,aQe),e(S,Km),e(Km,aZ),e(aZ,nQe),e(Km,sQe),e(Km,Q9),e(Q9,lQe),e(Km,iQe),e(S,dQe),e(S,Sn),e(Sn,nZ),e(nZ,cQe),e(Sn,fQe),e(Sn,W9),e(W9,mQe),e(Sn,hQe),e(Sn,H9),e(H9,gQe),e(Sn,pQe),e(S,uQe),e(S,Zm),e(Zm,sZ),e(sZ,_Qe),e(Zm,bQe),e(Zm,U9),e(U9,FQe),e(Zm,vQe),e(S,TQe),e(S,Rn),e(Rn,lZ),e(lZ,MQe),e(Rn,EQe),e(Rn,J9),e(J9,CQe),e(Rn,wQe),e(Rn,Y9),e(Y9,AQe),e(Rn,yQe),e(S,LQe),e(S,Bn),e(Bn,iZ),e(iZ,xQe),e(Bn,$Qe),e(Bn,K9),e(K9,kQe),e(Bn,SQe),e(Bn,Z9),e(Z9,RQe),e(Bn,BQe),e(S,PQe),e(S,Pn),e(Pn,dZ),e(dZ,IQe),e(Pn,qQe),e(Pn,ek),e(ek,NQe),e(Pn,jQe),e(Pn,cZ),e(cZ,DQe),e(Pn,GQe),e(S,OQe),e(S,eh),e(eh,fZ),e(fZ,VQe),e(eh,XQe),e(eh,ok),e(ok,zQe),e(eh,QQe),e(S,WQe),e(S,In),e(In,mZ),e(mZ,HQe),e(In,UQe),e(In,rk),e(rk,JQe),e(In,YQe),e(In,tk),e(tk,KQe),e(In,ZQe),e(S,eWe),e(S,oh),e(oh,hZ),e(hZ,oWe),e(oh,rWe),e(oh,ak),e(ak,tWe),e(oh,aWe),e(S,nWe),e(S,qn),e(qn,gZ),e(gZ,sWe),e(qn,lWe),e(qn,nk),e(nk,iWe),e(qn,dWe),e(qn,sk),e(sk,cWe),e(qn,fWe),e(S,mWe),e(S,Nn),e(Nn,pZ),e(pZ,hWe),e(Nn,gWe),e(Nn,lk),e(lk,pWe),e(Nn,uWe),e(Nn,ik),e(ik,_We),e(Nn,bWe),e(S,FWe),e(S,jn),e(jn,uZ),e(uZ,vWe),e(jn,TWe),e(jn,dk),e(dk,MWe),e(jn,EWe),e(jn,ck),e(ck,CWe),e(jn,wWe),e(S,AWe),e(S,rh),e(rh,_Z),e(_Z,yWe),e(rh,LWe),e(rh,fk),e(fk,xWe),e(rh,$We),e(S,kWe),e(S,Dn),e(Dn,bZ),e(bZ,SWe),e(Dn,RWe),e(Dn,mk),e(mk,BWe),e(Dn,PWe),e(Dn,hk),e(hk,IWe),e(Dn,qWe),e(S,NWe),e(S,th),e(th,FZ),e(FZ,jWe),e(th,DWe),e(th,gk),e(gk,GWe),e(th,OWe),e(S,VWe),e(S,Gn),e(Gn,vZ),e(vZ,XWe),e(Gn,zWe),e(Gn,pk),e(pk,QWe),e(Gn,WWe),e(Gn,uk),e(uk,HWe),e(Gn,UWe),e(S,JWe),e(S,On),e(On,TZ),e(TZ,YWe),e(On,KWe),e(On,_k),e(_k,ZWe),e(On,eHe),e(On,bk),e(bk,oHe),e(On,rHe),e(S,tHe),e(S,Vn),e(Vn,MZ),e(MZ,aHe),e(Vn,nHe),e(Vn,Fk),e(Fk,sHe),e(Vn,lHe),e(Vn,vk),e(vk,iHe),e(Vn,dHe),e(S,cHe),e(S,Xn),e(Xn,EZ),e(EZ,fHe),e(Xn,mHe),e(Xn,Tk),e(Tk,hHe),e(Xn,gHe),e(Xn,Mk),e(Mk,pHe),e(Xn,uHe),e(S,_He),e(S,ah),e(ah,CZ),e(CZ,bHe),e(ah,FHe),e(ah,Ek),e(Ek,vHe),e(ah,THe),e(S,MHe),e(S,zn),e(zn,wZ),e(wZ,EHe),e(zn,CHe),e(zn,Ck),e(Ck,wHe),e(zn,AHe),e(zn,wk),e(wk,yHe),e(zn,LHe),e(S,xHe),e(S,Qn),e(Qn,AZ),e(AZ,$He),e(Qn,kHe),e(Qn,Ak),e(Ak,SHe),e(Qn,RHe),e(Qn,yk),e(yk,BHe),e(Qn,PHe),e(S,IHe),e(S,Wn),e(Wn,yZ),e(yZ,qHe),e(Wn,NHe),e(Wn,Lk),e(Lk,jHe),e(Wn,DHe),e(Wn,xk),e(xk,GHe),e(Wn,OHe),e(S,VHe),e(S,Hn),e(Hn,LZ),e(LZ,XHe),e(Hn,zHe),e(Hn,$k),e($k,QHe),e(Hn,WHe),e(Hn,kk),e(kk,HHe),e(Hn,UHe),e(S,JHe),e(S,Un),e(Un,xZ),e(xZ,YHe),e(Un,KHe),e(Un,Sk),e(Sk,ZHe),e(Un,eUe),e(Un,Rk),e(Rk,oUe),e(Un,rUe),e(S,tUe),e(S,Jn),e(Jn,$Z),e($Z,aUe),e(Jn,nUe),e(Jn,Bk),e(Bk,sUe),e(Jn,lUe),e(Jn,Pk),e(Pk,iUe),e(Jn,dUe),e(S,cUe),e(S,nh),e(nh,kZ),e(kZ,fUe),e(nh,mUe),e(nh,Ik),e(Ik,hUe),e(nh,gUe),e(S,pUe),e(S,Yn),e(Yn,SZ),e(SZ,uUe),e(Yn,_Ue),e(Yn,qk),e(qk,bUe),e(Yn,FUe),e(Yn,Nk),e(Nk,vUe),e(Yn,TUe),e(S,MUe),e(S,sh),e(sh,RZ),e(RZ,EUe),e(sh,CUe),e(sh,jk),e(jk,wUe),e(sh,AUe),e(S,yUe),e(S,lh),e(lh,BZ),e(BZ,LUe),e(lh,xUe),e(lh,Dk),e(Dk,$Ue),e(lh,kUe),e(S,SUe),e(S,Kn),e(Kn,PZ),e(PZ,RUe),e(Kn,BUe),e(Kn,Gk),e(Gk,PUe),e(Kn,IUe),e(Kn,Ok),e(Ok,qUe),e(Kn,NUe),e(S,jUe),e(S,Zn),e(Zn,IZ),e(IZ,DUe),e(Zn,GUe),e(Zn,Vk),e(Vk,OUe),e(Zn,VUe),e(Zn,Xk),e(Xk,XUe),e(Zn,zUe),e(S,QUe),e(S,ih),e(ih,qZ),e(qZ,WUe),e(ih,HUe),e(ih,zk),e(zk,UUe),e(ih,JUe),e(S,YUe),e(S,es),e(es,NZ),e(NZ,KUe),e(es,ZUe),e(es,Qk),e(Qk,eJe),e(es,oJe),e(es,Wk),e(Wk,rJe),e(es,tJe),e(S,aJe),e(S,os),e(os,jZ),e(jZ,nJe),e(os,sJe),e(os,Hk),e(Hk,lJe),e(os,iJe),e(os,Uk),e(Uk,dJe),e(os,cJe),e(S,fJe),e(S,rs),e(rs,DZ),e(DZ,mJe),e(rs,hJe),e(rs,Jk),e(Jk,gJe),e(rs,pJe),e(rs,Yk),e(Yk,uJe),e(rs,_Je),e(S,bJe),e(S,ts),e(ts,GZ),e(GZ,FJe),e(ts,vJe),e(ts,Kk),e(Kk,TJe),e(ts,MJe),e(ts,Zk),e(Zk,EJe),e(ts,CJe),e(S,wJe),e(S,as),e(as,OZ),e(OZ,AJe),e(as,yJe),e(as,eS),e(eS,LJe),e(as,xJe),e(as,oS),e(oS,$Je),e(as,kJe),e(S,SJe),e(S,dh),e(dh,VZ),e(VZ,RJe),e(dh,BJe),e(dh,rS),e(rS,PJe),e(dh,IJe),e(S,qJe),e(S,ch),e(ch,XZ),e(XZ,NJe),e(ch,jJe),e(ch,tS),e(tS,DJe),e(ch,GJe),e(S,OJe),e(S,fh),e(fh,zZ),e(zZ,VJe),e(fh,XJe),e(fh,QZ),e(QZ,zJe),e(fh,QJe),e(S,WJe),e(S,mh),e(mh,WZ),e(WZ,HJe),e(mh,UJe),e(mh,aS),e(aS,JJe),e(mh,YJe),e(S,KJe),e(S,ns),e(ns,HZ),e(HZ,ZJe),e(ns,eYe),e(ns,nS),e(nS,oYe),e(ns,rYe),e(ns,sS),e(sS,tYe),e(ns,aYe),e(S,nYe),e(S,hh),e(hh,UZ),e(UZ,sYe),e(hh,lYe),e(hh,lS),e(lS,iYe),e(hh,dYe),e(S,cYe),e(S,ss),e(ss,JZ),e(JZ,fYe),e(ss,mYe),e(ss,iS),e(iS,hYe),e(ss,gYe),e(ss,dS),e(dS,pYe),e(ss,uYe),e(S,_Ye),e(S,ls),e(ls,YZ),e(YZ,bYe),e(ls,FYe),e(ls,cS),e(cS,vYe),e(ls,TYe),e(ls,fS),e(fS,MYe),e(ls,EYe),e(S,CYe),e(S,is),e(is,KZ),e(KZ,wYe),e(is,AYe),e(is,mS),e(mS,yYe),e(is,LYe),e(is,hS),e(hS,xYe),e(is,$Ye),e(S,kYe),e(S,ds),e(ds,ZZ),e(ZZ,SYe),e(ds,RYe),e(ds,gS),e(gS,BYe),e(ds,PYe),e(ds,pS),e(pS,IYe),e(ds,qYe),e(S,NYe),e(S,cs),e(cs,eee),e(eee,jYe),e(cs,DYe),e(cs,uS),e(uS,GYe),e(cs,OYe),e(cs,_S),e(_S,VYe),e(cs,XYe),e(S,zYe),e(S,fs),e(fs,oee),e(oee,QYe),e(fs,WYe),e(fs,bS),e(bS,HYe),e(fs,UYe),e(fs,FS),e(FS,JYe),e(fs,YYe),e(S,KYe),e(S,gh),e(gh,ree),e(ree,ZYe),e(gh,eKe),e(gh,vS),e(vS,oKe),e(gh,rKe),e(S,tKe),e(S,ph),e(ph,tee),e(tee,aKe),e(ph,nKe),e(ph,TS),e(TS,sKe),e(ph,lKe),e(S,iKe),e(S,ms),e(ms,aee),e(aee,dKe),e(ms,cKe),e(ms,MS),e(MS,fKe),e(ms,mKe),e(ms,ES),e(ES,hKe),e(ms,gKe),e(S,pKe),e(S,hs),e(hs,nee),e(nee,uKe),e(hs,_Ke),e(hs,CS),e(CS,bKe),e(hs,FKe),e(hs,wS),e(wS,vKe),e(hs,TKe),e(S,MKe),e(S,gs),e(gs,see),e(see,EKe),e(gs,CKe),e(gs,AS),e(AS,wKe),e(gs,AKe),e(gs,yS),e(yS,yKe),e(gs,LKe),e(S,xKe),e(S,uh),e(uh,lee),e(lee,$Ke),e(uh,kKe),e(uh,LS),e(LS,SKe),e(uh,RKe),e(S,BKe),e(S,_h),e(_h,iee),e(iee,PKe),e(_h,IKe),e(_h,xS),e(xS,qKe),e(_h,NKe),e(S,jKe),e(S,bh),e(bh,dee),e(dee,DKe),e(bh,GKe),e(bh,$S),e($S,OKe),e(bh,VKe),e(S,XKe),e(S,Fh),e(Fh,cee),e(cee,zKe),e(Fh,QKe),e(Fh,kS),e(kS,WKe),e(Fh,HKe),e(S,UKe),e(S,ps),e(ps,fee),e(fee,JKe),e(ps,YKe),e(ps,SS),e(SS,KKe),e(ps,ZKe),e(ps,RS),e(RS,eZe),e(ps,oZe),e(S,rZe),e(S,vh),e(vh,mee),e(mee,tZe),e(vh,aZe),e(vh,BS),e(BS,nZe),e(vh,sZe),e(S,lZe),e(S,Th),e(Th,hee),e(hee,iZe),e(Th,dZe),e(Th,PS),e(PS,cZe),e(Th,fZe),e(S,mZe),e(S,us),e(us,gee),e(gee,hZe),e(us,gZe),e(us,IS),e(IS,pZe),e(us,uZe),e(us,qS),e(qS,_Ze),e(us,bZe),e(S,FZe),e(S,_s),e(_s,pee),e(pee,vZe),e(_s,TZe),e(_s,NS),e(NS,MZe),e(_s,EZe),e(_s,jS),e(jS,CZe),e(_s,wZe),e(Tr,AZe),M(Mh,Tr,null),e(Eo,yZe),e(Eo,Eh),M(D0,Eh,null),e(Eh,LZe),e(Eh,uee),e(uee,xZe),b(f,q9e,_),b(f,ti,_),e(ti,Ch),e(Ch,_ee),M(G0,_ee,null),e(ti,$Ze),e(ti,bee),e(bee,kZe),b(f,N9e,_),b(f,Co,_),M(O0,Co,null),e(Co,SZe),e(Co,V0),e(V0,RZe),e(V0,DS),e(DS,BZe),e(V0,PZe),e(Co,IZe),e(Co,X0),e(X0,qZe),e(X0,Fee),e(Fee,NZe),e(X0,jZe),e(Co,DZe),e(Co,Ve),M(z0,Ve,null),e(Ve,GZe),e(Ve,vee),e(vee,OZe),e(Ve,VZe),e(Ve,Ta),e(Ta,XZe),e(Ta,Tee),e(Tee,zZe),e(Ta,QZe),e(Ta,Mee),e(Mee,WZe),e(Ta,HZe),e(Ta,Eee),e(Eee,UZe),e(Ta,JZe),e(Ve,YZe),e(Ve,fe),e(fe,wh),e(wh,Cee),e(Cee,KZe),e(wh,ZZe),e(wh,GS),e(GS,eeo),e(wh,oeo),e(fe,reo),e(fe,Ah),e(Ah,wee),e(wee,teo),e(Ah,aeo),e(Ah,OS),e(OS,neo),e(Ah,seo),e(fe,leo),e(fe,yh),e(yh,Aee),e(Aee,ieo),e(yh,deo),e(yh,VS),e(VS,ceo),e(yh,feo),e(fe,meo),e(fe,Lh),e(Lh,yee),e(yee,heo),e(Lh,geo),e(Lh,XS),e(XS,peo),e(Lh,ueo),e(fe,_eo),e(fe,xh),e(xh,Lee),e(Lee,beo),e(xh,Feo),e(xh,zS),e(zS,veo),e(xh,Teo),e(fe,Meo),e(fe,$h),e($h,xee),e(xee,Eeo),e($h,Ceo),e($h,QS),e(QS,weo),e($h,Aeo),e(fe,yeo),e(fe,kh),e(kh,$ee),e($ee,Leo),e(kh,xeo),e(kh,WS),e(WS,$eo),e(kh,keo),e(fe,Seo),e(fe,Sh),e(Sh,kee),e(kee,Reo),e(Sh,Beo),e(Sh,HS),e(HS,Peo),e(Sh,Ieo),e(fe,qeo),e(fe,Rh),e(Rh,See),e(See,Neo),e(Rh,jeo),e(Rh,US),e(US,Deo),e(Rh,Geo),e(fe,Oeo),e(fe,Bh),e(Bh,Ree),e(Ree,Veo),e(Bh,Xeo),e(Bh,JS),e(JS,zeo),e(Bh,Qeo),e(fe,Weo),e(fe,Ph),e(Ph,Bee),e(Bee,Heo),e(Ph,Ueo),e(Ph,YS),e(YS,Jeo),e(Ph,Yeo),e(fe,Keo),e(fe,Ih),e(Ih,Pee),e(Pee,Zeo),e(Ih,eoo),e(Ih,KS),e(KS,ooo),e(Ih,roo),e(fe,too),e(fe,qh),e(qh,Iee),e(Iee,aoo),e(qh,noo),e(qh,ZS),e(ZS,soo),e(qh,loo),e(fe,ioo),e(fe,Nh),e(Nh,qee),e(qee,doo),e(Nh,coo),e(Nh,eR),e(eR,foo),e(Nh,moo),e(fe,hoo),e(fe,jh),e(jh,Nee),e(Nee,goo),e(jh,poo),e(jh,oR),e(oR,uoo),e(jh,_oo),e(fe,boo),e(fe,Dh),e(Dh,jee),e(jee,Foo),e(Dh,voo),e(Dh,rR),e(rR,Too),e(Dh,Moo),e(fe,Eoo),e(fe,Gh),e(Gh,Dee),e(Dee,Coo),e(Gh,woo),e(Gh,tR),e(tR,Aoo),e(Gh,yoo),e(fe,Loo),e(fe,Oh),e(Oh,Gee),e(Gee,xoo),e(Oh,$oo),e(Oh,aR),e(aR,koo),e(Oh,Soo),e(Ve,Roo),M(Vh,Ve,null),e(Ve,Boo),M(Xh,Ve,null),e(Co,Poo),e(Co,zh),M(Q0,zh,null),e(zh,Ioo),e(zh,Oee),e(Oee,qoo),b(f,j9e,_),b(f,ai,_),e(ai,Qh),e(Qh,Vee),M(W0,Vee,null),e(ai,Noo),e(ai,Xee),e(Xee,joo),b(f,D9e,_),b(f,wo,_),M(H0,wo,null),e(wo,Doo),e(wo,U0),e(U0,Goo),e(U0,nR),e(nR,Ooo),e(U0,Voo),e(wo,Xoo),e(wo,J0),e(J0,zoo),e(J0,zee),e(zee,Qoo),e(J0,Woo),e(wo,Hoo),e(wo,Xe),M(Y0,Xe,null),e(Xe,Uoo),e(Xe,Qee),e(Qee,Joo),e(Xe,Yoo),e(Xe,ni),e(ni,Koo),e(ni,Wee),e(Wee,Zoo),e(ni,ero),e(ni,Hee),e(Hee,oro),e(ni,rro),e(Xe,tro),e(Xe,Pe),e(Pe,Wh),e(Wh,Uee),e(Uee,aro),e(Wh,nro),e(Wh,sR),e(sR,sro),e(Wh,lro),e(Pe,iro),e(Pe,Hh),e(Hh,Jee),e(Jee,dro),e(Hh,cro),e(Hh,lR),e(lR,fro),e(Hh,mro),e(Pe,hro),e(Pe,Uh),e(Uh,Yee),e(Yee,gro),e(Uh,pro),e(Uh,iR),e(iR,uro),e(Uh,_ro),e(Pe,bro),e(Pe,Jh),e(Jh,Kee),e(Kee,Fro),e(Jh,vro),e(Jh,dR),e(dR,Tro),e(Jh,Mro),e(Pe,Ero),e(Pe,Yh),e(Yh,Zee),e(Zee,Cro),e(Yh,wro),e(Yh,cR),e(cR,Aro),e(Yh,yro),e(Pe,Lro),e(Pe,Kh),e(Kh,eoe),e(eoe,xro),e(Kh,$ro),e(Kh,fR),e(fR,kro),e(Kh,Sro),e(Pe,Rro),e(Pe,Zh),e(Zh,ooe),e(ooe,Bro),e(Zh,Pro),e(Zh,mR),e(mR,Iro),e(Zh,qro),e(Pe,Nro),e(Pe,eg),e(eg,roe),e(roe,jro),e(eg,Dro),e(eg,hR),e(hR,Gro),e(eg,Oro),e(Xe,Vro),M(og,Xe,null),e(Xe,Xro),M(rg,Xe,null),e(wo,zro),e(wo,tg),M(K0,tg,null),e(tg,Qro),e(tg,toe),e(toe,Wro),b(f,G9e,_),b(f,si,_),e(si,ag),e(ag,aoe),M(Z0,aoe,null),e(si,Hro),e(si,noe),e(noe,Uro),b(f,O9e,_),b(f,Ao,_),M(e6,Ao,null),e(Ao,Jro),e(Ao,li),e(li,Yro),e(li,gR),e(gR,Kro),e(li,Zro),e(li,pR),e(pR,eto),e(li,oto),e(Ao,rto),e(Ao,o6),e(o6,tto),e(o6,soe),e(soe,ato),e(o6,nto),e(Ao,sto),e(Ao,Kr),M(r6,Kr,null),e(Kr,lto),e(Kr,loe),e(loe,ito),e(Kr,dto),e(Kr,ii),e(ii,cto),e(ii,ioe),e(ioe,fto),e(ii,mto),e(ii,uR),e(uR,hto),e(ii,gto),e(Kr,pto),M(ng,Kr,null),e(Ao,uto),e(Ao,ze),M(t6,ze,null),e(ze,_to),e(ze,doe),e(doe,bto),e(ze,Fto),e(ze,Ma),e(Ma,vto),e(Ma,coe),e(coe,Tto),e(Ma,Mto),e(Ma,foe),e(foe,Eto),e(Ma,Cto),e(Ma,moe),e(moe,wto),e(Ma,Ato),e(ze,yto),e(ze,x),e(x,sg),e(sg,hoe),e(hoe,Lto),e(sg,xto),e(sg,_R),e(_R,$to),e(sg,kto),e(x,Sto),e(x,lg),e(lg,goe),e(goe,Rto),e(lg,Bto),e(lg,bR),e(bR,Pto),e(lg,Ito),e(x,qto),e(x,ig),e(ig,poe),e(poe,Nto),e(ig,jto),e(ig,FR),e(FR,Dto),e(ig,Gto),e(x,Oto),e(x,dg),e(dg,uoe),e(uoe,Vto),e(dg,Xto),e(dg,vR),e(vR,zto),e(dg,Qto),e(x,Wto),e(x,cg),e(cg,_oe),e(_oe,Hto),e(cg,Uto),e(cg,TR),e(TR,Jto),e(cg,Yto),e(x,Kto),e(x,fg),e(fg,boe),e(boe,Zto),e(fg,eao),e(fg,MR),e(MR,oao),e(fg,rao),e(x,tao),e(x,mg),e(mg,Foe),e(Foe,aao),e(mg,nao),e(mg,ER),e(ER,sao),e(mg,lao),e(x,iao),e(x,hg),e(hg,voe),e(voe,dao),e(hg,cao),e(hg,CR),e(CR,fao),e(hg,mao),e(x,hao),e(x,gg),e(gg,Toe),e(Toe,gao),e(gg,pao),e(gg,wR),e(wR,uao),e(gg,_ao),e(x,bao),e(x,pg),e(pg,Moe),e(Moe,Fao),e(pg,vao),e(pg,AR),e(AR,Tao),e(pg,Mao),e(x,Eao),e(x,ug),e(ug,Eoe),e(Eoe,Cao),e(ug,wao),e(ug,yR),e(yR,Aao),e(ug,yao),e(x,Lao),e(x,_g),e(_g,Coe),e(Coe,xao),e(_g,$ao),e(_g,LR),e(LR,kao),e(_g,Sao),e(x,Rao),e(x,bg),e(bg,woe),e(woe,Bao),e(bg,Pao),e(bg,xR),e(xR,Iao),e(bg,qao),e(x,Nao),e(x,Fg),e(Fg,Aoe),e(Aoe,jao),e(Fg,Dao),e(Fg,$R),e($R,Gao),e(Fg,Oao),e(x,Vao),e(x,vg),e(vg,yoe),e(yoe,Xao),e(vg,zao),e(vg,kR),e(kR,Qao),e(vg,Wao),e(x,Hao),e(x,Tg),e(Tg,Loe),e(Loe,Uao),e(Tg,Jao),e(Tg,SR),e(SR,Yao),e(Tg,Kao),e(x,Zao),e(x,Mg),e(Mg,xoe),e(xoe,eno),e(Mg,ono),e(Mg,RR),e(RR,rno),e(Mg,tno),e(x,ano),e(x,Eg),e(Eg,$oe),e($oe,nno),e(Eg,sno),e(Eg,BR),e(BR,lno),e(Eg,ino),e(x,dno),e(x,Cg),e(Cg,koe),e(koe,cno),e(Cg,fno),e(Cg,PR),e(PR,mno),e(Cg,hno),e(x,gno),e(x,wg),e(wg,Soe),e(Soe,pno),e(wg,uno),e(wg,IR),e(IR,_no),e(wg,bno),e(x,Fno),e(x,Ag),e(Ag,Roe),e(Roe,vno),e(Ag,Tno),e(Ag,qR),e(qR,Mno),e(Ag,Eno),e(x,Cno),e(x,yg),e(yg,Boe),e(Boe,wno),e(yg,Ano),e(yg,NR),e(NR,yno),e(yg,Lno),e(x,xno),e(x,Lg),e(Lg,Poe),e(Poe,$no),e(Lg,kno),e(Lg,jR),e(jR,Sno),e(Lg,Rno),e(x,Bno),e(x,xg),e(xg,Ioe),e(Ioe,Pno),e(xg,Ino),e(xg,DR),e(DR,qno),e(xg,Nno),e(x,jno),e(x,$g),e($g,qoe),e(qoe,Dno),e($g,Gno),e($g,GR),e(GR,Ono),e($g,Vno),e(x,Xno),e(x,kg),e(kg,Noe),e(Noe,zno),e(kg,Qno),e(kg,OR),e(OR,Wno),e(kg,Hno),e(x,Uno),e(x,Sg),e(Sg,joe),e(joe,Jno),e(Sg,Yno),e(Sg,VR),e(VR,Kno),e(Sg,Zno),e(x,eso),e(x,Rg),e(Rg,Doe),e(Doe,oso),e(Rg,rso),e(Rg,XR),e(XR,tso),e(Rg,aso),e(x,nso),e(x,bs),e(bs,Goe),e(Goe,sso),e(bs,lso),e(bs,zR),e(zR,iso),e(bs,dso),e(bs,QR),e(QR,cso),e(bs,fso),e(x,mso),e(x,Bg),e(Bg,Ooe),e(Ooe,hso),e(Bg,gso),e(Bg,WR),e(WR,pso),e(Bg,uso),e(x,_so),e(x,Pg),e(Pg,Voe),e(Voe,bso),e(Pg,Fso),e(Pg,HR),e(HR,vso),e(Pg,Tso),e(x,Mso),e(x,Ig),e(Ig,Xoe),e(Xoe,Eso),e(Ig,Cso),e(Ig,UR),e(UR,wso),e(Ig,Aso),e(x,yso),e(x,qg),e(qg,zoe),e(zoe,Lso),e(qg,xso),e(qg,JR),e(JR,$so),e(qg,kso),e(x,Sso),e(x,Ng),e(Ng,Qoe),e(Qoe,Rso),e(Ng,Bso),e(Ng,YR),e(YR,Pso),e(Ng,Iso),e(x,qso),e(x,jg),e(jg,Woe),e(Woe,Nso),e(jg,jso),e(jg,KR),e(KR,Dso),e(jg,Gso),e(x,Oso),e(x,Dg),e(Dg,Hoe),e(Hoe,Vso),e(Dg,Xso),e(Dg,ZR),e(ZR,zso),e(Dg,Qso),e(x,Wso),e(x,Gg),e(Gg,Uoe),e(Uoe,Hso),e(Gg,Uso),e(Gg,eB),e(eB,Jso),e(Gg,Yso),e(x,Kso),e(x,Og),e(Og,Joe),e(Joe,Zso),e(Og,elo),e(Og,oB),e(oB,olo),e(Og,rlo),e(x,tlo),e(x,Vg),e(Vg,Yoe),e(Yoe,alo),e(Vg,nlo),e(Vg,rB),e(rB,slo),e(Vg,llo),e(x,ilo),e(x,Xg),e(Xg,Koe),e(Koe,dlo),e(Xg,clo),e(Xg,tB),e(tB,flo),e(Xg,mlo),e(x,hlo),e(x,zg),e(zg,Zoe),e(Zoe,glo),e(zg,plo),e(zg,aB),e(aB,ulo),e(zg,_lo),e(x,blo),e(x,Qg),e(Qg,ere),e(ere,Flo),e(Qg,vlo),e(Qg,nB),e(nB,Tlo),e(Qg,Mlo),e(x,Elo),e(x,Wg),e(Wg,ore),e(ore,Clo),e(Wg,wlo),e(Wg,sB),e(sB,Alo),e(Wg,ylo),e(x,Llo),e(x,Hg),e(Hg,rre),e(rre,xlo),e(Hg,$lo),e(Hg,lB),e(lB,klo),e(Hg,Slo),e(x,Rlo),e(x,Ug),e(Ug,tre),e(tre,Blo),e(Ug,Plo),e(Ug,iB),e(iB,Ilo),e(Ug,qlo),e(x,Nlo),e(x,Jg),e(Jg,are),e(are,jlo),e(Jg,Dlo),e(Jg,dB),e(dB,Glo),e(Jg,Olo),e(x,Vlo),e(x,Yg),e(Yg,nre),e(nre,Xlo),e(Yg,zlo),e(Yg,cB),e(cB,Qlo),e(Yg,Wlo),e(x,Hlo),e(x,Kg),e(Kg,sre),e(sre,Ulo),e(Kg,Jlo),e(Kg,fB),e(fB,Ylo),e(Kg,Klo),e(x,Zlo),e(x,Zg),e(Zg,lre),e(lre,eio),e(Zg,oio),e(Zg,mB),e(mB,rio),e(Zg,tio),e(x,aio),e(x,ep),e(ep,ire),e(ire,nio),e(ep,sio),e(ep,hB),e(hB,lio),e(ep,iio),e(x,dio),e(x,op),e(op,dre),e(dre,cio),e(op,fio),e(op,gB),e(gB,mio),e(op,hio),e(x,gio),e(x,rp),e(rp,cre),e(cre,pio),e(rp,uio),e(rp,pB),e(pB,_io),e(rp,bio),e(x,Fio),e(x,tp),e(tp,fre),e(fre,vio),e(tp,Tio),e(tp,uB),e(uB,Mio),e(tp,Eio),e(x,Cio),e(x,ap),e(ap,mre),e(mre,wio),e(ap,Aio),e(ap,_B),e(_B,yio),e(ap,Lio),e(x,xio),e(x,np),e(np,hre),e(hre,$io),e(np,kio),e(np,gre),e(gre,Sio),e(np,Rio),e(x,Bio),e(x,sp),e(sp,pre),e(pre,Pio),e(sp,Iio),e(sp,bB),e(bB,qio),e(sp,Nio),e(x,jio),e(x,lp),e(lp,ure),e(ure,Dio),e(lp,Gio),e(lp,FB),e(FB,Oio),e(lp,Vio),e(x,Xio),e(x,ip),e(ip,_re),e(_re,zio),e(ip,Qio),e(ip,bre),e(bre,Wio),e(ip,Hio),e(x,Uio),e(x,dp),e(dp,Fre),e(Fre,Jio),e(dp,Yio),e(dp,vB),e(vB,Kio),e(dp,Zio),e(x,edo),e(x,cp),e(cp,vre),e(vre,odo),e(cp,rdo),e(cp,TB),e(TB,tdo),e(cp,ado),e(x,ndo),e(x,fp),e(fp,Tre),e(Tre,sdo),e(fp,ldo),e(fp,MB),e(MB,ido),e(fp,ddo),e(x,cdo),e(x,mp),e(mp,Mre),e(Mre,fdo),e(mp,mdo),e(mp,EB),e(EB,hdo),e(mp,gdo),e(x,pdo),e(x,hp),e(hp,Ere),e(Ere,udo),e(hp,_do),e(hp,CB),e(CB,bdo),e(hp,Fdo),e(x,vdo),e(x,gp),e(gp,Cre),e(Cre,Tdo),e(gp,Mdo),e(gp,wB),e(wB,Edo),e(gp,Cdo),e(x,wdo),e(x,pp),e(pp,wre),e(wre,Ado),e(pp,ydo),e(pp,AB),e(AB,Ldo),e(pp,xdo),e(x,$do),e(x,up),e(up,Are),e(Are,kdo),e(up,Sdo),e(up,yB),e(yB,Rdo),e(up,Bdo),e(x,Pdo),e(x,_p),e(_p,yre),e(yre,Ido),e(_p,qdo),e(_p,LB),e(LB,Ndo),e(_p,jdo),e(x,Ddo),e(x,bp),e(bp,Lre),e(Lre,Gdo),e(bp,Odo),e(bp,xB),e(xB,Vdo),e(bp,Xdo),e(x,zdo),e(x,Fp),e(Fp,xre),e(xre,Qdo),e(Fp,Wdo),e(Fp,$B),e($B,Hdo),e(Fp,Udo),e(x,Jdo),e(x,vp),e(vp,$re),e($re,Ydo),e(vp,Kdo),e(vp,kB),e(kB,Zdo),e(vp,eco),e(x,oco),e(x,Tp),e(Tp,kre),e(kre,rco),e(Tp,tco),e(Tp,SB),e(SB,aco),e(Tp,nco),e(x,sco),e(x,Mp),e(Mp,Sre),e(Sre,lco),e(Mp,ico),e(Mp,RB),e(RB,dco),e(Mp,cco),e(x,fco),e(x,Ep),e(Ep,Rre),e(Rre,mco),e(Ep,hco),e(Ep,BB),e(BB,gco),e(Ep,pco),e(x,uco),e(x,Cp),e(Cp,Bre),e(Bre,_co),e(Cp,bco),e(Cp,PB),e(PB,Fco),e(Cp,vco),e(x,Tco),e(x,wp),e(wp,Pre),e(Pre,Mco),e(wp,Eco),e(wp,IB),e(IB,Cco),e(wp,wco),e(x,Aco),e(x,Ap),e(Ap,Ire),e(Ire,yco),e(Ap,Lco),e(Ap,qB),e(qB,xco),e(Ap,$co),e(x,kco),e(x,yp),e(yp,qre),e(qre,Sco),e(yp,Rco),e(yp,NB),e(NB,Bco),e(yp,Pco),e(x,Ico),e(x,Lp),e(Lp,Nre),e(Nre,qco),e(Lp,Nco),e(Lp,jB),e(jB,jco),e(Lp,Dco),e(x,Gco),e(x,xp),e(xp,jre),e(jre,Oco),e(xp,Vco),e(xp,DB),e(DB,Xco),e(xp,zco),e(x,Qco),e(x,$p),e($p,Dre),e(Dre,Wco),e($p,Hco),e($p,GB),e(GB,Uco),e($p,Jco),e(x,Yco),e(x,kp),e(kp,Gre),e(Gre,Kco),e(kp,Zco),e(kp,OB),e(OB,efo),e(kp,ofo),e(x,rfo),e(x,Sp),e(Sp,Ore),e(Ore,tfo),e(Sp,afo),e(Sp,VB),e(VB,nfo),e(Sp,sfo),e(x,lfo),e(x,Rp),e(Rp,Vre),e(Vre,ifo),e(Rp,dfo),e(Rp,XB),e(XB,cfo),e(Rp,ffo),e(x,mfo),e(x,Bp),e(Bp,Xre),e(Xre,hfo),e(Bp,gfo),e(Bp,zB),e(zB,pfo),e(Bp,ufo),e(x,_fo),e(x,Pp),e(Pp,zre),e(zre,bfo),e(Pp,Ffo),e(Pp,QB),e(QB,vfo),e(Pp,Tfo),e(x,Mfo),e(x,Ip),e(Ip,Qre),e(Qre,Efo),e(Ip,Cfo),e(Ip,WB),e(WB,wfo),e(Ip,Afo),e(x,yfo),e(x,qp),e(qp,Wre),e(Wre,Lfo),e(qp,xfo),e(qp,HB),e(HB,$fo),e(qp,kfo),e(x,Sfo),e(x,Np),e(Np,Hre),e(Hre,Rfo),e(Np,Bfo),e(Np,UB),e(UB,Pfo),e(Np,Ifo),e(x,qfo),e(x,jp),e(jp,Ure),e(Ure,Nfo),e(jp,jfo),e(jp,JB),e(JB,Dfo),e(jp,Gfo),e(x,Ofo),e(x,Dp),e(Dp,Jre),e(Jre,Vfo),e(Dp,Xfo),e(Dp,YB),e(YB,zfo),e(Dp,Qfo),e(x,Wfo),e(x,Gp),e(Gp,Yre),e(Yre,Hfo),e(Gp,Ufo),e(Gp,KB),e(KB,Jfo),e(Gp,Yfo),e(ze,Kfo),e(ze,Op),e(Op,Zfo),e(Op,Kre),e(Kre,emo),e(Op,omo),e(Op,Zre),e(Zre,rmo),e(ze,tmo),M(Vp,ze,null),b(f,V9e,_),b(f,di,_),e(di,Xp),e(Xp,ete),M(a6,ete,null),e(di,amo),e(di,ote),e(ote,nmo),b(f,X9e,_),b(f,yo,_),M(n6,yo,null),e(yo,smo),e(yo,ci),e(ci,lmo),e(ci,ZB),e(ZB,imo),e(ci,dmo),e(ci,eP),e(eP,cmo),e(ci,fmo),e(yo,mmo),e(yo,s6),e(s6,hmo),e(s6,rte),e(rte,gmo),e(s6,pmo),e(yo,umo),e(yo,Zr),M(l6,Zr,null),e(Zr,_mo),e(Zr,tte),e(tte,bmo),e(Zr,Fmo),e(Zr,fi),e(fi,vmo),e(fi,ate),e(ate,Tmo),e(fi,Mmo),e(fi,oP),e(oP,Emo),e(fi,Cmo),e(Zr,wmo),M(zp,Zr,null),e(yo,Amo),e(yo,Qe),M(i6,Qe,null),e(Qe,ymo),e(Qe,nte),e(nte,Lmo),e(Qe,xmo),e(Qe,Ea),e(Ea,$mo),e(Ea,ste),e(ste,kmo),e(Ea,Smo),e(Ea,lte),e(lte,Rmo),e(Ea,Bmo),e(Ea,ite),e(ite,Pmo),e(Ea,Imo),e(Qe,qmo),e(Qe,G),e(G,Qp),e(Qp,dte),e(dte,Nmo),e(Qp,jmo),e(Qp,rP),e(rP,Dmo),e(Qp,Gmo),e(G,Omo),e(G,Wp),e(Wp,cte),e(cte,Vmo),e(Wp,Xmo),e(Wp,tP),e(tP,zmo),e(Wp,Qmo),e(G,Wmo),e(G,Hp),e(Hp,fte),e(fte,Hmo),e(Hp,Umo),e(Hp,aP),e(aP,Jmo),e(Hp,Ymo),e(G,Kmo),e(G,Up),e(Up,mte),e(mte,Zmo),e(Up,eho),e(Up,nP),e(nP,oho),e(Up,rho),e(G,tho),e(G,Jp),e(Jp,hte),e(hte,aho),e(Jp,nho),e(Jp,sP),e(sP,sho),e(Jp,lho),e(G,iho),e(G,Yp),e(Yp,gte),e(gte,dho),e(Yp,cho),e(Yp,lP),e(lP,fho),e(Yp,mho),e(G,hho),e(G,Kp),e(Kp,pte),e(pte,gho),e(Kp,pho),e(Kp,iP),e(iP,uho),e(Kp,_ho),e(G,bho),e(G,Zp),e(Zp,ute),e(ute,Fho),e(Zp,vho),e(Zp,dP),e(dP,Tho),e(Zp,Mho),e(G,Eho),e(G,eu),e(eu,_te),e(_te,Cho),e(eu,who),e(eu,cP),e(cP,Aho),e(eu,yho),e(G,Lho),e(G,ou),e(ou,bte),e(bte,xho),e(ou,$ho),e(ou,fP),e(fP,kho),e(ou,Sho),e(G,Rho),e(G,ru),e(ru,Fte),e(Fte,Bho),e(ru,Pho),e(ru,mP),e(mP,Iho),e(ru,qho),e(G,Nho),e(G,tu),e(tu,vte),e(vte,jho),e(tu,Dho),e(tu,hP),e(hP,Gho),e(tu,Oho),e(G,Vho),e(G,au),e(au,Tte),e(Tte,Xho),e(au,zho),e(au,gP),e(gP,Qho),e(au,Who),e(G,Hho),e(G,nu),e(nu,Mte),e(Mte,Uho),e(nu,Jho),e(nu,pP),e(pP,Yho),e(nu,Kho),e(G,Zho),e(G,su),e(su,Ete),e(Ete,ego),e(su,ogo),e(su,uP),e(uP,rgo),e(su,tgo),e(G,ago),e(G,lu),e(lu,Cte),e(Cte,ngo),e(lu,sgo),e(lu,_P),e(_P,lgo),e(lu,igo),e(G,dgo),e(G,iu),e(iu,wte),e(wte,cgo),e(iu,fgo),e(iu,bP),e(bP,mgo),e(iu,hgo),e(G,ggo),e(G,du),e(du,Ate),e(Ate,pgo),e(du,ugo),e(du,FP),e(FP,_go),e(du,bgo),e(G,Fgo),e(G,cu),e(cu,yte),e(yte,vgo),e(cu,Tgo),e(cu,vP),e(vP,Mgo),e(cu,Ego),e(G,Cgo),e(G,fu),e(fu,Lte),e(Lte,wgo),e(fu,Ago),e(fu,TP),e(TP,ygo),e(fu,Lgo),e(G,xgo),e(G,mu),e(mu,xte),e(xte,$go),e(mu,kgo),e(mu,MP),e(MP,Sgo),e(mu,Rgo),e(G,Bgo),e(G,hu),e(hu,$te),e($te,Pgo),e(hu,Igo),e(hu,EP),e(EP,qgo),e(hu,Ngo),e(G,jgo),e(G,gu),e(gu,kte),e(kte,Dgo),e(gu,Ggo),e(gu,CP),e(CP,Ogo),e(gu,Vgo),e(G,Xgo),e(G,pu),e(pu,Ste),e(Ste,zgo),e(pu,Qgo),e(pu,wP),e(wP,Wgo),e(pu,Hgo),e(G,Ugo),e(G,uu),e(uu,Rte),e(Rte,Jgo),e(uu,Ygo),e(uu,AP),e(AP,Kgo),e(uu,Zgo),e(G,epo),e(G,_u),e(_u,Bte),e(Bte,opo),e(_u,rpo),e(_u,yP),e(yP,tpo),e(_u,apo),e(G,npo),e(G,bu),e(bu,Pte),e(Pte,spo),e(bu,lpo),e(bu,LP),e(LP,ipo),e(bu,dpo),e(G,cpo),e(G,Fu),e(Fu,Ite),e(Ite,fpo),e(Fu,mpo),e(Fu,xP),e(xP,hpo),e(Fu,gpo),e(G,ppo),e(G,vu),e(vu,qte),e(qte,upo),e(vu,_po),e(vu,$P),e($P,bpo),e(vu,Fpo),e(G,vpo),e(G,Tu),e(Tu,Nte),e(Nte,Tpo),e(Tu,Mpo),e(Tu,kP),e(kP,Epo),e(Tu,Cpo),e(G,wpo),e(G,Mu),e(Mu,jte),e(jte,Apo),e(Mu,ypo),e(Mu,SP),e(SP,Lpo),e(Mu,xpo),e(G,$po),e(G,Eu),e(Eu,Dte),e(Dte,kpo),e(Eu,Spo),e(Eu,RP),e(RP,Rpo),e(Eu,Bpo),e(G,Ppo),e(G,Cu),e(Cu,Gte),e(Gte,Ipo),e(Cu,qpo),e(Cu,BP),e(BP,Npo),e(Cu,jpo),e(G,Dpo),e(G,wu),e(wu,Ote),e(Ote,Gpo),e(wu,Opo),e(wu,PP),e(PP,Vpo),e(wu,Xpo),e(G,zpo),e(G,Au),e(Au,Vte),e(Vte,Qpo),e(Au,Wpo),e(Au,IP),e(IP,Hpo),e(Au,Upo),e(G,Jpo),e(G,yu),e(yu,Xte),e(Xte,Ypo),e(yu,Kpo),e(yu,qP),e(qP,Zpo),e(yu,euo),e(G,ouo),e(G,Lu),e(Lu,zte),e(zte,ruo),e(Lu,tuo),e(Lu,NP),e(NP,auo),e(Lu,nuo),e(G,suo),e(G,xu),e(xu,Qte),e(Qte,luo),e(xu,iuo),e(xu,jP),e(jP,duo),e(xu,cuo),e(G,fuo),e(G,$u),e($u,Wte),e(Wte,muo),e($u,huo),e($u,DP),e(DP,guo),e($u,puo),e(Qe,uuo),e(Qe,ku),e(ku,_uo),e(ku,Hte),e(Hte,buo),e(ku,Fuo),e(ku,Ute),e(Ute,vuo),e(Qe,Tuo),M(Su,Qe,null),b(f,z9e,_),b(f,mi,_),e(mi,Ru),e(Ru,Jte),M(d6,Jte,null),e(mi,Muo),e(mi,Yte),e(Yte,Euo),b(f,Q9e,_),b(f,Lo,_),M(c6,Lo,null),e(Lo,Cuo),e(Lo,hi),e(hi,wuo),e(hi,GP),e(GP,Auo),e(hi,yuo),e(hi,OP),e(OP,Luo),e(hi,xuo),e(Lo,$uo),e(Lo,f6),e(f6,kuo),e(f6,Kte),e(Kte,Suo),e(f6,Ruo),e(Lo,Buo),e(Lo,et),M(m6,et,null),e(et,Puo),e(et,Zte),e(Zte,Iuo),e(et,quo),e(et,gi),e(gi,Nuo),e(gi,eae),e(eae,juo),e(gi,Duo),e(gi,VP),e(VP,Guo),e(gi,Ouo),e(et,Vuo),M(Bu,et,null),e(Lo,Xuo),e(Lo,We),M(h6,We,null),e(We,zuo),e(We,oae),e(oae,Quo),e(We,Wuo),e(We,Ca),e(Ca,Huo),e(Ca,rae),e(rae,Uuo),e(Ca,Juo),e(Ca,tae),e(tae,Yuo),e(Ca,Kuo),e(Ca,aae),e(aae,Zuo),e(Ca,e_o),e(We,o_o),e(We,z),e(z,Pu),e(Pu,nae),e(nae,r_o),e(Pu,t_o),e(Pu,XP),e(XP,a_o),e(Pu,n_o),e(z,s_o),e(z,Iu),e(Iu,sae),e(sae,l_o),e(Iu,i_o),e(Iu,zP),e(zP,d_o),e(Iu,c_o),e(z,f_o),e(z,qu),e(qu,lae),e(lae,m_o),e(qu,h_o),e(qu,QP),e(QP,g_o),e(qu,p_o),e(z,u_o),e(z,Nu),e(Nu,iae),e(iae,__o),e(Nu,b_o),e(Nu,WP),e(WP,F_o),e(Nu,v_o),e(z,T_o),e(z,ju),e(ju,dae),e(dae,M_o),e(ju,E_o),e(ju,HP),e(HP,C_o),e(ju,w_o),e(z,A_o),e(z,Du),e(Du,cae),e(cae,y_o),e(Du,L_o),e(Du,UP),e(UP,x_o),e(Du,$_o),e(z,k_o),e(z,Gu),e(Gu,fae),e(fae,S_o),e(Gu,R_o),e(Gu,JP),e(JP,B_o),e(Gu,P_o),e(z,I_o),e(z,Ou),e(Ou,mae),e(mae,q_o),e(Ou,N_o),e(Ou,YP),e(YP,j_o),e(Ou,D_o),e(z,G_o),e(z,Vu),e(Vu,hae),e(hae,O_o),e(Vu,V_o),e(Vu,KP),e(KP,X_o),e(Vu,z_o),e(z,Q_o),e(z,Xu),e(Xu,gae),e(gae,W_o),e(Xu,H_o),e(Xu,ZP),e(ZP,U_o),e(Xu,J_o),e(z,Y_o),e(z,zu),e(zu,pae),e(pae,K_o),e(zu,Z_o),e(zu,eI),e(eI,ebo),e(zu,obo),e(z,rbo),e(z,Qu),e(Qu,uae),e(uae,tbo),e(Qu,abo),e(Qu,oI),e(oI,nbo),e(Qu,sbo),e(z,lbo),e(z,Wu),e(Wu,_ae),e(_ae,ibo),e(Wu,dbo),e(Wu,rI),e(rI,cbo),e(Wu,fbo),e(z,mbo),e(z,Hu),e(Hu,bae),e(bae,hbo),e(Hu,gbo),e(Hu,tI),e(tI,pbo),e(Hu,ubo),e(z,_bo),e(z,Uu),e(Uu,Fae),e(Fae,bbo),e(Uu,Fbo),e(Uu,aI),e(aI,vbo),e(Uu,Tbo),e(z,Mbo),e(z,Ju),e(Ju,vae),e(vae,Ebo),e(Ju,Cbo),e(Ju,nI),e(nI,wbo),e(Ju,Abo),e(z,ybo),e(z,Yu),e(Yu,Tae),e(Tae,Lbo),e(Yu,xbo),e(Yu,sI),e(sI,$bo),e(Yu,kbo),e(z,Sbo),e(z,Ku),e(Ku,Mae),e(Mae,Rbo),e(Ku,Bbo),e(Ku,lI),e(lI,Pbo),e(Ku,Ibo),e(z,qbo),e(z,Zu),e(Zu,Eae),e(Eae,Nbo),e(Zu,jbo),e(Zu,iI),e(iI,Dbo),e(Zu,Gbo),e(z,Obo),e(z,e_),e(e_,Cae),e(Cae,Vbo),e(e_,Xbo),e(e_,wae),e(wae,zbo),e(e_,Qbo),e(z,Wbo),e(z,o_),e(o_,Aae),e(Aae,Hbo),e(o_,Ubo),e(o_,dI),e(dI,Jbo),e(o_,Ybo),e(z,Kbo),e(z,r_),e(r_,yae),e(yae,Zbo),e(r_,e2o),e(r_,Lae),e(Lae,o2o),e(r_,r2o),e(z,t2o),e(z,t_),e(t_,xae),e(xae,a2o),e(t_,n2o),e(t_,cI),e(cI,s2o),e(t_,l2o),e(z,i2o),e(z,a_),e(a_,$ae),e($ae,d2o),e(a_,c2o),e(a_,fI),e(fI,f2o),e(a_,m2o),e(z,h2o),e(z,n_),e(n_,kae),e(kae,g2o),e(n_,p2o),e(n_,mI),e(mI,u2o),e(n_,_2o),e(z,b2o),e(z,s_),e(s_,Sae),e(Sae,F2o),e(s_,v2o),e(s_,hI),e(hI,T2o),e(s_,M2o),e(z,E2o),e(z,l_),e(l_,Rae),e(Rae,C2o),e(l_,w2o),e(l_,gI),e(gI,A2o),e(l_,y2o),e(z,L2o),e(z,i_),e(i_,Bae),e(Bae,x2o),e(i_,$2o),e(i_,pI),e(pI,k2o),e(i_,S2o),e(z,R2o),e(z,d_),e(d_,Pae),e(Pae,B2o),e(d_,P2o),e(d_,uI),e(uI,I2o),e(d_,q2o),e(z,N2o),e(z,c_),e(c_,Iae),e(Iae,j2o),e(c_,D2o),e(c_,_I),e(_I,G2o),e(c_,O2o),e(z,V2o),e(z,f_),e(f_,qae),e(qae,X2o),e(f_,z2o),e(f_,bI),e(bI,Q2o),e(f_,W2o),e(z,H2o),e(z,m_),e(m_,Nae),e(Nae,U2o),e(m_,J2o),e(m_,FI),e(FI,Y2o),e(m_,K2o),e(z,Z2o),e(z,h_),e(h_,jae),e(jae,eFo),e(h_,oFo),e(h_,vI),e(vI,rFo),e(h_,tFo),e(z,aFo),e(z,g_),e(g_,Dae),e(Dae,nFo),e(g_,sFo),e(g_,TI),e(TI,lFo),e(g_,iFo),e(z,dFo),e(z,p_),e(p_,Gae),e(Gae,cFo),e(p_,fFo),e(p_,MI),e(MI,mFo),e(p_,hFo),e(We,gFo),e(We,u_),e(u_,pFo),e(u_,Oae),e(Oae,uFo),e(u_,_Fo),e(u_,Vae),e(Vae,bFo),e(We,FFo),M(__,We,null),b(f,W9e,_),b(f,pi,_),e(pi,b_),e(b_,Xae),M(g6,Xae,null),e(pi,vFo),e(pi,zae),e(zae,TFo),b(f,H9e,_),b(f,xo,_),M(p6,xo,null),e(xo,MFo),e(xo,ui),e(ui,EFo),e(ui,EI),e(EI,CFo),e(ui,wFo),e(ui,CI),e(CI,AFo),e(ui,yFo),e(xo,LFo),e(xo,u6),e(u6,xFo),e(u6,Qae),e(Qae,$Fo),e(u6,kFo),e(xo,SFo),e(xo,ot),M(_6,ot,null),e(ot,RFo),e(ot,Wae),e(Wae,BFo),e(ot,PFo),e(ot,_i),e(_i,IFo),e(_i,Hae),e(Hae,qFo),e(_i,NFo),e(_i,wI),e(wI,jFo),e(_i,DFo),e(ot,GFo),M(F_,ot,null),e(xo,OFo),e(xo,He),M(b6,He,null),e(He,VFo),e(He,Uae),e(Uae,XFo),e(He,zFo),e(He,wa),e(wa,QFo),e(wa,Jae),e(Jae,WFo),e(wa,HFo),e(wa,Yae),e(Yae,UFo),e(wa,JFo),e(wa,Kae),e(Kae,YFo),e(wa,KFo),e(He,ZFo),e(He,Q),e(Q,v_),e(v_,Zae),e(Zae,evo),e(v_,ovo),e(v_,AI),e(AI,rvo),e(v_,tvo),e(Q,avo),e(Q,T_),e(T_,ene),e(ene,nvo),e(T_,svo),e(T_,yI),e(yI,lvo),e(T_,ivo),e(Q,dvo),e(Q,M_),e(M_,one),e(one,cvo),e(M_,fvo),e(M_,LI),e(LI,mvo),e(M_,hvo),e(Q,gvo),e(Q,E_),e(E_,rne),e(rne,pvo),e(E_,uvo),e(E_,xI),e(xI,_vo),e(E_,bvo),e(Q,Fvo),e(Q,C_),e(C_,tne),e(tne,vvo),e(C_,Tvo),e(C_,$I),e($I,Mvo),e(C_,Evo),e(Q,Cvo),e(Q,w_),e(w_,ane),e(ane,wvo),e(w_,Avo),e(w_,kI),e(kI,yvo),e(w_,Lvo),e(Q,xvo),e(Q,A_),e(A_,nne),e(nne,$vo),e(A_,kvo),e(A_,SI),e(SI,Svo),e(A_,Rvo),e(Q,Bvo),e(Q,y_),e(y_,sne),e(sne,Pvo),e(y_,Ivo),e(y_,RI),e(RI,qvo),e(y_,Nvo),e(Q,jvo),e(Q,L_),e(L_,lne),e(lne,Dvo),e(L_,Gvo),e(L_,BI),e(BI,Ovo),e(L_,Vvo),e(Q,Xvo),e(Q,x_),e(x_,ine),e(ine,zvo),e(x_,Qvo),e(x_,PI),e(PI,Wvo),e(x_,Hvo),e(Q,Uvo),e(Q,$_),e($_,dne),e(dne,Jvo),e($_,Yvo),e($_,II),e(II,Kvo),e($_,Zvo),e(Q,e1o),e(Q,k_),e(k_,cne),e(cne,o1o),e(k_,r1o),e(k_,qI),e(qI,t1o),e(k_,a1o),e(Q,n1o),e(Q,S_),e(S_,fne),e(fne,s1o),e(S_,l1o),e(S_,NI),e(NI,i1o),e(S_,d1o),e(Q,c1o),e(Q,R_),e(R_,mne),e(mne,f1o),e(R_,m1o),e(R_,jI),e(jI,h1o),e(R_,g1o),e(Q,p1o),e(Q,B_),e(B_,hne),e(hne,u1o),e(B_,_1o),e(B_,DI),e(DI,b1o),e(B_,F1o),e(Q,v1o),e(Q,P_),e(P_,gne),e(gne,T1o),e(P_,M1o),e(P_,GI),e(GI,E1o),e(P_,C1o),e(Q,w1o),e(Q,I_),e(I_,pne),e(pne,A1o),e(I_,y1o),e(I_,OI),e(OI,L1o),e(I_,x1o),e(Q,$1o),e(Q,q_),e(q_,une),e(une,k1o),e(q_,S1o),e(q_,VI),e(VI,R1o),e(q_,B1o),e(Q,P1o),e(Q,N_),e(N_,_ne),e(_ne,I1o),e(N_,q1o),e(N_,XI),e(XI,N1o),e(N_,j1o),e(Q,D1o),e(Q,j_),e(j_,bne),e(bne,G1o),e(j_,O1o),e(j_,zI),e(zI,V1o),e(j_,X1o),e(Q,z1o),e(Q,D_),e(D_,Fne),e(Fne,Q1o),e(D_,W1o),e(D_,QI),e(QI,H1o),e(D_,U1o),e(Q,J1o),e(Q,G_),e(G_,vne),e(vne,Y1o),e(G_,K1o),e(G_,WI),e(WI,Z1o),e(G_,eTo),e(Q,oTo),e(Q,O_),e(O_,Tne),e(Tne,rTo),e(O_,tTo),e(O_,HI),e(HI,aTo),e(O_,nTo),e(Q,sTo),e(Q,V_),e(V_,Mne),e(Mne,lTo),e(V_,iTo),e(V_,Ene),e(Ene,dTo),e(V_,cTo),e(Q,fTo),e(Q,X_),e(X_,Cne),e(Cne,mTo),e(X_,hTo),e(X_,UI),e(UI,gTo),e(X_,pTo),e(Q,uTo),e(Q,z_),e(z_,wne),e(wne,_To),e(z_,bTo),e(z_,JI),e(JI,FTo),e(z_,vTo),e(Q,TTo),e(Q,Q_),e(Q_,Ane),e(Ane,MTo),e(Q_,ETo),e(Q_,YI),e(YI,CTo),e(Q_,wTo),e(Q,ATo),e(Q,W_),e(W_,yne),e(yne,yTo),e(W_,LTo),e(W_,KI),e(KI,xTo),e(W_,$To),e(Q,kTo),e(Q,H_),e(H_,Lne),e(Lne,STo),e(H_,RTo),e(H_,ZI),e(ZI,BTo),e(H_,PTo),e(Q,ITo),e(Q,U_),e(U_,xne),e(xne,qTo),e(U_,NTo),e(U_,eq),e(eq,jTo),e(U_,DTo),e(Q,GTo),e(Q,J_),e(J_,$ne),e($ne,OTo),e(J_,VTo),e(J_,kne),e(kne,XTo),e(J_,zTo),e(Q,QTo),e(Q,Y_),e(Y_,Sne),e(Sne,WTo),e(Y_,HTo),e(Y_,oq),e(oq,UTo),e(Y_,JTo),e(Q,YTo),e(Q,K_),e(K_,Rne),e(Rne,KTo),e(K_,ZTo),e(K_,rq),e(rq,eMo),e(K_,oMo),e(Q,rMo),e(Q,Z_),e(Z_,Bne),e(Bne,tMo),e(Z_,aMo),e(Z_,tq),e(tq,nMo),e(Z_,sMo),e(Q,lMo),e(Q,eb),e(eb,Pne),e(Pne,iMo),e(eb,dMo),e(eb,aq),e(aq,cMo),e(eb,fMo),e(He,mMo),e(He,ob),e(ob,hMo),e(ob,Ine),e(Ine,gMo),e(ob,pMo),e(ob,qne),e(qne,uMo),e(He,_Mo),M(rb,He,null),b(f,U9e,_),b(f,bi,_),e(bi,tb),e(tb,Nne),M(F6,Nne,null),e(bi,bMo),e(bi,jne),e(jne,FMo),b(f,J9e,_),b(f,$o,_),M(v6,$o,null),e($o,vMo),e($o,Fi),e(Fi,TMo),e(Fi,nq),e(nq,MMo),e(Fi,EMo),e(Fi,sq),e(sq,CMo),e(Fi,wMo),e($o,AMo),e($o,T6),e(T6,yMo),e(T6,Dne),e(Dne,LMo),e(T6,xMo),e($o,$Mo),e($o,rt),M(M6,rt,null),e(rt,kMo),e(rt,Gne),e(Gne,SMo),e(rt,RMo),e(rt,vi),e(vi,BMo),e(vi,One),e(One,PMo),e(vi,IMo),e(vi,lq),e(lq,qMo),e(vi,NMo),e(rt,jMo),M(ab,rt,null),e($o,DMo),e($o,Ue),M(E6,Ue,null),e(Ue,GMo),e(Ue,Vne),e(Vne,OMo),e(Ue,VMo),e(Ue,Aa),e(Aa,XMo),e(Aa,Xne),e(Xne,zMo),e(Aa,QMo),e(Aa,zne),e(zne,WMo),e(Aa,HMo),e(Aa,Qne),e(Qne,UMo),e(Aa,JMo),e(Ue,YMo),e(Ue,pe),e(pe,nb),e(nb,Wne),e(Wne,KMo),e(nb,ZMo),e(nb,iq),e(iq,e4o),e(nb,o4o),e(pe,r4o),e(pe,sb),e(sb,Hne),e(Hne,t4o),e(sb,a4o),e(sb,dq),e(dq,n4o),e(sb,s4o),e(pe,l4o),e(pe,lb),e(lb,Une),e(Une,i4o),e(lb,d4o),e(lb,cq),e(cq,c4o),e(lb,f4o),e(pe,m4o),e(pe,ib),e(ib,Jne),e(Jne,h4o),e(ib,g4o),e(ib,fq),e(fq,p4o),e(ib,u4o),e(pe,_4o),e(pe,db),e(db,Yne),e(Yne,b4o),e(db,F4o),e(db,mq),e(mq,v4o),e(db,T4o),e(pe,M4o),e(pe,cb),e(cb,Kne),e(Kne,E4o),e(cb,C4o),e(cb,hq),e(hq,w4o),e(cb,A4o),e(pe,y4o),e(pe,fb),e(fb,Zne),e(Zne,L4o),e(fb,x4o),e(fb,gq),e(gq,$4o),e(fb,k4o),e(pe,S4o),e(pe,mb),e(mb,ese),e(ese,R4o),e(mb,B4o),e(mb,pq),e(pq,P4o),e(mb,I4o),e(pe,q4o),e(pe,hb),e(hb,ose),e(ose,N4o),e(hb,j4o),e(hb,uq),e(uq,D4o),e(hb,G4o),e(pe,O4o),e(pe,gb),e(gb,rse),e(rse,V4o),e(gb,X4o),e(gb,_q),e(_q,z4o),e(gb,Q4o),e(pe,W4o),e(pe,pb),e(pb,tse),e(tse,H4o),e(pb,U4o),e(pb,bq),e(bq,J4o),e(pb,Y4o),e(pe,K4o),e(pe,ub),e(ub,ase),e(ase,Z4o),e(ub,eEo),e(ub,Fq),e(Fq,oEo),e(ub,rEo),e(pe,tEo),e(pe,_b),e(_b,nse),e(nse,aEo),e(_b,nEo),e(_b,sse),e(sse,sEo),e(_b,lEo),e(pe,iEo),e(pe,bb),e(bb,lse),e(lse,dEo),e(bb,cEo),e(bb,vq),e(vq,fEo),e(bb,mEo),e(pe,hEo),e(pe,Fb),e(Fb,ise),e(ise,gEo),e(Fb,pEo),e(Fb,Tq),e(Tq,uEo),e(Fb,_Eo),e(pe,bEo),e(pe,vb),e(vb,dse),e(dse,FEo),e(vb,vEo),e(vb,Mq),e(Mq,TEo),e(vb,MEo),e(Ue,EEo),e(Ue,Tb),e(Tb,CEo),e(Tb,cse),e(cse,wEo),e(Tb,AEo),e(Tb,fse),e(fse,yEo),e(Ue,LEo),M(Mb,Ue,null),b(f,Y9e,_),b(f,Ti,_),e(Ti,Eb),e(Eb,mse),M(C6,mse,null),e(Ti,xEo),e(Ti,hse),e(hse,$Eo),b(f,K9e,_),b(f,ko,_),M(w6,ko,null),e(ko,kEo),e(ko,Mi),e(Mi,SEo),e(Mi,Eq),e(Eq,REo),e(Mi,BEo),e(Mi,Cq),e(Cq,PEo),e(Mi,IEo),e(ko,qEo),e(ko,A6),e(A6,NEo),e(A6,gse),e(gse,jEo),e(A6,DEo),e(ko,GEo),e(ko,tt),M(y6,tt,null),e(tt,OEo),e(tt,pse),e(pse,VEo),e(tt,XEo),e(tt,Ei),e(Ei,zEo),e(Ei,use),e(use,QEo),e(Ei,WEo),e(Ei,wq),e(wq,HEo),e(Ei,UEo),e(tt,JEo),M(Cb,tt,null),e(ko,YEo),e(ko,Je),M(L6,Je,null),e(Je,KEo),e(Je,_se),e(_se,ZEo),e(Je,e5o),e(Je,ya),e(ya,o5o),e(ya,bse),e(bse,r5o),e(ya,t5o),e(ya,Fse),e(Fse,a5o),e(ya,n5o),e(ya,vse),e(vse,s5o),e(ya,l5o),e(Je,i5o),e(Je,q),e(q,wb),e(wb,Tse),e(Tse,d5o),e(wb,c5o),e(wb,Aq),e(Aq,f5o),e(wb,m5o),e(q,h5o),e(q,Ab),e(Ab,Mse),e(Mse,g5o),e(Ab,p5o),e(Ab,yq),e(yq,u5o),e(Ab,_5o),e(q,b5o),e(q,yb),e(yb,Ese),e(Ese,F5o),e(yb,v5o),e(yb,Lq),e(Lq,T5o),e(yb,M5o),e(q,E5o),e(q,Lb),e(Lb,Cse),e(Cse,C5o),e(Lb,w5o),e(Lb,xq),e(xq,A5o),e(Lb,y5o),e(q,L5o),e(q,xb),e(xb,wse),e(wse,x5o),e(xb,$5o),e(xb,$q),e($q,k5o),e(xb,S5o),e(q,R5o),e(q,$b),e($b,Ase),e(Ase,B5o),e($b,P5o),e($b,kq),e(kq,I5o),e($b,q5o),e(q,N5o),e(q,kb),e(kb,yse),e(yse,j5o),e(kb,D5o),e(kb,Sq),e(Sq,G5o),e(kb,O5o),e(q,V5o),e(q,Sb),e(Sb,Lse),e(Lse,X5o),e(Sb,z5o),e(Sb,Rq),e(Rq,Q5o),e(Sb,W5o),e(q,H5o),e(q,Rb),e(Rb,xse),e(xse,U5o),e(Rb,J5o),e(Rb,Bq),e(Bq,Y5o),e(Rb,K5o),e(q,Z5o),e(q,Bb),e(Bb,$se),e($se,eCo),e(Bb,oCo),e(Bb,Pq),e(Pq,rCo),e(Bb,tCo),e(q,aCo),e(q,Pb),e(Pb,kse),e(kse,nCo),e(Pb,sCo),e(Pb,Iq),e(Iq,lCo),e(Pb,iCo),e(q,dCo),e(q,Ib),e(Ib,Sse),e(Sse,cCo),e(Ib,fCo),e(Ib,qq),e(qq,mCo),e(Ib,hCo),e(q,gCo),e(q,qb),e(qb,Rse),e(Rse,pCo),e(qb,uCo),e(qb,Nq),e(Nq,_Co),e(qb,bCo),e(q,FCo),e(q,Nb),e(Nb,Bse),e(Bse,vCo),e(Nb,TCo),e(Nb,jq),e(jq,MCo),e(Nb,ECo),e(q,CCo),e(q,jb),e(jb,Pse),e(Pse,wCo),e(jb,ACo),e(jb,Dq),e(Dq,yCo),e(jb,LCo),e(q,xCo),e(q,Db),e(Db,Ise),e(Ise,$Co),e(Db,kCo),e(Db,Gq),e(Gq,SCo),e(Db,RCo),e(q,BCo),e(q,Gb),e(Gb,qse),e(qse,PCo),e(Gb,ICo),e(Gb,Oq),e(Oq,qCo),e(Gb,NCo),e(q,jCo),e(q,Ob),e(Ob,Nse),e(Nse,DCo),e(Ob,GCo),e(Ob,Vq),e(Vq,OCo),e(Ob,VCo),e(q,XCo),e(q,Vb),e(Vb,jse),e(jse,zCo),e(Vb,QCo),e(Vb,Xq),e(Xq,WCo),e(Vb,HCo),e(q,UCo),e(q,Xb),e(Xb,Dse),e(Dse,JCo),e(Xb,YCo),e(Xb,zq),e(zq,KCo),e(Xb,ZCo),e(q,e3o),e(q,zb),e(zb,Gse),e(Gse,o3o),e(zb,r3o),e(zb,Qq),e(Qq,t3o),e(zb,a3o),e(q,n3o),e(q,Qb),e(Qb,Ose),e(Ose,s3o),e(Qb,l3o),e(Qb,Wq),e(Wq,i3o),e(Qb,d3o),e(q,c3o),e(q,Wb),e(Wb,Vse),e(Vse,f3o),e(Wb,m3o),e(Wb,Hq),e(Hq,h3o),e(Wb,g3o),e(q,p3o),e(q,Hb),e(Hb,Xse),e(Xse,u3o),e(Hb,_3o),e(Hb,Uq),e(Uq,b3o),e(Hb,F3o),e(q,v3o),e(q,Ub),e(Ub,zse),e(zse,T3o),e(Ub,M3o),e(Ub,Jq),e(Jq,E3o),e(Ub,C3o),e(q,w3o),e(q,Jb),e(Jb,Qse),e(Qse,A3o),e(Jb,y3o),e(Jb,Yq),e(Yq,L3o),e(Jb,x3o),e(q,$3o),e(q,Yb),e(Yb,Wse),e(Wse,k3o),e(Yb,S3o),e(Yb,Kq),e(Kq,R3o),e(Yb,B3o),e(q,P3o),e(q,Kb),e(Kb,Hse),e(Hse,I3o),e(Kb,q3o),e(Kb,Zq),e(Zq,N3o),e(Kb,j3o),e(q,D3o),e(q,Zb),e(Zb,Use),e(Use,G3o),e(Zb,O3o),e(Zb,eN),e(eN,V3o),e(Zb,X3o),e(q,z3o),e(q,e2),e(e2,Jse),e(Jse,Q3o),e(e2,W3o),e(e2,oN),e(oN,H3o),e(e2,U3o),e(q,J3o),e(q,o2),e(o2,Yse),e(Yse,Y3o),e(o2,K3o),e(o2,rN),e(rN,Z3o),e(o2,ewo),e(q,owo),e(q,r2),e(r2,Kse),e(Kse,rwo),e(r2,two),e(r2,tN),e(tN,awo),e(r2,nwo),e(q,swo),e(q,t2),e(t2,Zse),e(Zse,lwo),e(t2,iwo),e(t2,ele),e(ele,dwo),e(t2,cwo),e(q,fwo),e(q,a2),e(a2,ole),e(ole,mwo),e(a2,hwo),e(a2,rle),e(rle,gwo),e(a2,pwo),e(q,uwo),e(q,n2),e(n2,tle),e(tle,_wo),e(n2,bwo),e(n2,aN),e(aN,Fwo),e(n2,vwo),e(q,Two),e(q,s2),e(s2,ale),e(ale,Mwo),e(s2,Ewo),e(s2,nN),e(nN,Cwo),e(s2,wwo),e(q,Awo),e(q,l2),e(l2,nle),e(nle,ywo),e(l2,Lwo),e(l2,sN),e(sN,xwo),e(l2,$wo),e(q,kwo),e(q,i2),e(i2,sle),e(sle,Swo),e(i2,Rwo),e(i2,lN),e(lN,Bwo),e(i2,Pwo),e(q,Iwo),e(q,d2),e(d2,lle),e(lle,qwo),e(d2,Nwo),e(d2,iN),e(iN,jwo),e(d2,Dwo),e(q,Gwo),e(q,c2),e(c2,ile),e(ile,Owo),e(c2,Vwo),e(c2,dN),e(dN,Xwo),e(c2,zwo),e(q,Qwo),e(q,f2),e(f2,dle),e(dle,Wwo),e(f2,Hwo),e(f2,cN),e(cN,Uwo),e(f2,Jwo),e(q,Ywo),e(q,m2),e(m2,cle),e(cle,Kwo),e(m2,Zwo),e(m2,fN),e(fN,eAo),e(m2,oAo),e(q,rAo),e(q,h2),e(h2,fle),e(fle,tAo),e(h2,aAo),e(h2,mN),e(mN,nAo),e(h2,sAo),e(q,lAo),e(q,g2),e(g2,mle),e(mle,iAo),e(g2,dAo),e(g2,hN),e(hN,cAo),e(g2,fAo),e(q,mAo),e(q,p2),e(p2,hle),e(hle,hAo),e(p2,gAo),e(p2,gN),e(gN,pAo),e(p2,uAo),e(q,_Ao),e(q,u2),e(u2,gle),e(gle,bAo),e(u2,FAo),e(u2,pN),e(pN,vAo),e(u2,TAo),e(Je,MAo),e(Je,_2),e(_2,EAo),e(_2,ple),e(ple,CAo),e(_2,wAo),e(_2,ule),e(ule,AAo),e(Je,yAo),M(b2,Je,null),b(f,Z9e,_),b(f,Ci,_),e(Ci,F2),e(F2,_le),M(x6,_le,null),e(Ci,LAo),e(Ci,ble),e(ble,xAo),b(f,eke,_),b(f,So,_),M($6,So,null),e(So,$Ao),e(So,wi),e(wi,kAo),e(wi,uN),e(uN,SAo),e(wi,RAo),e(wi,_N),e(_N,BAo),e(wi,PAo),e(So,IAo),e(So,k6),e(k6,qAo),e(k6,Fle),e(Fle,NAo),e(k6,jAo),e(So,DAo),e(So,at),M(S6,at,null),e(at,GAo),e(at,vle),e(vle,OAo),e(at,VAo),e(at,Ai),e(Ai,XAo),e(Ai,Tle),e(Tle,zAo),e(Ai,QAo),e(Ai,bN),e(bN,WAo),e(Ai,HAo),e(at,UAo),M(v2,at,null),e(So,JAo),e(So,Ye),M(R6,Ye,null),e(Ye,YAo),e(Ye,Mle),e(Mle,KAo),e(Ye,ZAo),e(Ye,La),e(La,e0o),e(La,Ele),e(Ele,o0o),e(La,r0o),e(La,Cle),e(Cle,t0o),e(La,a0o),e(La,wle),e(wle,n0o),e(La,s0o),e(Ye,l0o),e(Ye,Y),e(Y,T2),e(T2,Ale),e(Ale,i0o),e(T2,d0o),e(T2,FN),e(FN,c0o),e(T2,f0o),e(Y,m0o),e(Y,M2),e(M2,yle),e(yle,h0o),e(M2,g0o),e(M2,vN),e(vN,p0o),e(M2,u0o),e(Y,_0o),e(Y,E2),e(E2,Lle),e(Lle,b0o),e(E2,F0o),e(E2,TN),e(TN,v0o),e(E2,T0o),e(Y,M0o),e(Y,C2),e(C2,xle),e(xle,E0o),e(C2,C0o),e(C2,MN),e(MN,w0o),e(C2,A0o),e(Y,y0o),e(Y,w2),e(w2,$le),e($le,L0o),e(w2,x0o),e(w2,EN),e(EN,$0o),e(w2,k0o),e(Y,S0o),e(Y,A2),e(A2,kle),e(kle,R0o),e(A2,B0o),e(A2,CN),e(CN,P0o),e(A2,I0o),e(Y,q0o),e(Y,y2),e(y2,Sle),e(Sle,N0o),e(y2,j0o),e(y2,wN),e(wN,D0o),e(y2,G0o),e(Y,O0o),e(Y,L2),e(L2,Rle),e(Rle,V0o),e(L2,X0o),e(L2,AN),e(AN,z0o),e(L2,Q0o),e(Y,W0o),e(Y,x2),e(x2,Ble),e(Ble,H0o),e(x2,U0o),e(x2,yN),e(yN,J0o),e(x2,Y0o),e(Y,K0o),e(Y,$2),e($2,Ple),e(Ple,Z0o),e($2,e6o),e($2,LN),e(LN,o6o),e($2,r6o),e(Y,t6o),e(Y,k2),e(k2,Ile),e(Ile,a6o),e(k2,n6o),e(k2,xN),e(xN,s6o),e(k2,l6o),e(Y,i6o),e(Y,S2),e(S2,qle),e(qle,d6o),e(S2,c6o),e(S2,$N),e($N,f6o),e(S2,m6o),e(Y,h6o),e(Y,R2),e(R2,Nle),e(Nle,g6o),e(R2,p6o),e(R2,kN),e(kN,u6o),e(R2,_6o),e(Y,b6o),e(Y,B2),e(B2,jle),e(jle,F6o),e(B2,v6o),e(B2,SN),e(SN,T6o),e(B2,M6o),e(Y,E6o),e(Y,P2),e(P2,Dle),e(Dle,C6o),e(P2,w6o),e(P2,RN),e(RN,A6o),e(P2,y6o),e(Y,L6o),e(Y,I2),e(I2,Gle),e(Gle,x6o),e(I2,$6o),e(I2,BN),e(BN,k6o),e(I2,S6o),e(Y,R6o),e(Y,q2),e(q2,Ole),e(Ole,B6o),e(q2,P6o),e(q2,PN),e(PN,I6o),e(q2,q6o),e(Y,N6o),e(Y,N2),e(N2,Vle),e(Vle,j6o),e(N2,D6o),e(N2,IN),e(IN,G6o),e(N2,O6o),e(Y,V6o),e(Y,j2),e(j2,Xle),e(Xle,X6o),e(j2,z6o),e(j2,zle),e(zle,Q6o),e(j2,W6o),e(Y,H6o),e(Y,D2),e(D2,Qle),e(Qle,U6o),e(D2,J6o),e(D2,qN),e(qN,Y6o),e(D2,K6o),e(Y,Z6o),e(Y,G2),e(G2,Wle),e(Wle,eyo),e(G2,oyo),e(G2,NN),e(NN,ryo),e(G2,tyo),e(Y,ayo),e(Y,O2),e(O2,Hle),e(Hle,nyo),e(O2,syo),e(O2,jN),e(jN,lyo),e(O2,iyo),e(Y,dyo),e(Y,V2),e(V2,Ule),e(Ule,cyo),e(V2,fyo),e(V2,DN),e(DN,myo),e(V2,hyo),e(Y,gyo),e(Y,X2),e(X2,Jle),e(Jle,pyo),e(X2,uyo),e(X2,GN),e(GN,_yo),e(X2,byo),e(Y,Fyo),e(Y,z2),e(z2,Yle),e(Yle,vyo),e(z2,Tyo),e(z2,ON),e(ON,Myo),e(z2,Eyo),e(Y,Cyo),e(Y,Q2),e(Q2,Kle),e(Kle,wyo),e(Q2,Ayo),e(Q2,VN),e(VN,yyo),e(Q2,Lyo),e(Y,xyo),e(Y,W2),e(W2,Zle),e(Zle,$yo),e(W2,kyo),e(W2,XN),e(XN,Syo),e(W2,Ryo),e(Y,Byo),e(Y,H2),e(H2,eie),e(eie,Pyo),e(H2,Iyo),e(H2,zN),e(zN,qyo),e(H2,Nyo),e(Ye,jyo),e(Ye,U2),e(U2,Dyo),e(U2,oie),e(oie,Gyo),e(U2,Oyo),e(U2,rie),e(rie,Vyo),e(Ye,Xyo),M(J2,Ye,null),b(f,oke,_),b(f,yi,_),e(yi,Y2),e(Y2,tie),M(B6,tie,null),e(yi,zyo),e(yi,aie),e(aie,Qyo),b(f,rke,_),b(f,Ro,_),M(P6,Ro,null),e(Ro,Wyo),e(Ro,Li),e(Li,Hyo),e(Li,QN),e(QN,Uyo),e(Li,Jyo),e(Li,WN),e(WN,Yyo),e(Li,Kyo),e(Ro,Zyo),e(Ro,I6),e(I6,eLo),e(I6,nie),e(nie,oLo),e(I6,rLo),e(Ro,tLo),e(Ro,nt),M(q6,nt,null),e(nt,aLo),e(nt,sie),e(sie,nLo),e(nt,sLo),e(nt,xi),e(xi,lLo),e(xi,lie),e(lie,iLo),e(xi,dLo),e(xi,HN),e(HN,cLo),e(xi,fLo),e(nt,mLo),M(K2,nt,null),e(Ro,hLo),e(Ro,Ke),M(N6,Ke,null),e(Ke,gLo),e(Ke,iie),e(iie,pLo),e(Ke,uLo),e(Ke,xa),e(xa,_Lo),e(xa,die),e(die,bLo),e(xa,FLo),e(xa,cie),e(cie,vLo),e(xa,TLo),e(xa,fie),e(fie,MLo),e(xa,ELo),e(Ke,CLo),e(Ke,Wr),e(Wr,Z2),e(Z2,mie),e(mie,wLo),e(Z2,ALo),e(Z2,UN),e(UN,yLo),e(Z2,LLo),e(Wr,xLo),e(Wr,eF),e(eF,hie),e(hie,$Lo),e(eF,kLo),e(eF,JN),e(JN,SLo),e(eF,RLo),e(Wr,BLo),e(Wr,oF),e(oF,gie),e(gie,PLo),e(oF,ILo),e(oF,YN),e(YN,qLo),e(oF,NLo),e(Wr,jLo),e(Wr,rF),e(rF,pie),e(pie,DLo),e(rF,GLo),e(rF,KN),e(KN,OLo),e(rF,VLo),e(Wr,XLo),e(Wr,tF),e(tF,uie),e(uie,zLo),e(tF,QLo),e(tF,_ie),e(_ie,WLo),e(tF,HLo),e(Ke,ULo),e(Ke,aF),e(aF,JLo),e(aF,bie),e(bie,YLo),e(aF,KLo),e(aF,Fie),e(Fie,ZLo),e(Ke,e8o),M(nF,Ke,null),b(f,tke,_),b(f,$i,_),e($i,sF),e(sF,vie),M(j6,vie,null),e($i,o8o),e($i,Tie),e(Tie,r8o),b(f,ake,_),b(f,Bo,_),M(D6,Bo,null),e(Bo,t8o),e(Bo,ki),e(ki,a8o),e(ki,ZN),e(ZN,n8o),e(ki,s8o),e(ki,ej),e(ej,l8o),e(ki,i8o),e(Bo,d8o),e(Bo,G6),e(G6,c8o),e(G6,Mie),e(Mie,f8o),e(G6,m8o),e(Bo,h8o),e(Bo,st),M(O6,st,null),e(st,g8o),e(st,Eie),e(Eie,p8o),e(st,u8o),e(st,Si),e(Si,_8o),e(Si,Cie),e(Cie,b8o),e(Si,F8o),e(Si,oj),e(oj,v8o),e(Si,T8o),e(st,M8o),M(lF,st,null),e(Bo,E8o),e(Bo,Ze),M(V6,Ze,null),e(Ze,C8o),e(Ze,wie),e(wie,w8o),e(Ze,A8o),e(Ze,$a),e($a,y8o),e($a,Aie),e(Aie,L8o),e($a,x8o),e($a,yie),e(yie,$8o),e($a,k8o),e($a,Lie),e(Lie,S8o),e($a,R8o),e(Ze,B8o),e(Ze,U),e(U,iF),e(iF,xie),e(xie,P8o),e(iF,I8o),e(iF,rj),e(rj,q8o),e(iF,N8o),e(U,j8o),e(U,dF),e(dF,$ie),e($ie,D8o),e(dF,G8o),e(dF,tj),e(tj,O8o),e(dF,V8o),e(U,X8o),e(U,cF),e(cF,kie),e(kie,z8o),e(cF,Q8o),e(cF,aj),e(aj,W8o),e(cF,H8o),e(U,U8o),e(U,fF),e(fF,Sie),e(Sie,J8o),e(fF,Y8o),e(fF,nj),e(nj,K8o),e(fF,Z8o),e(U,exo),e(U,mF),e(mF,Rie),e(Rie,oxo),e(mF,rxo),e(mF,sj),e(sj,txo),e(mF,axo),e(U,nxo),e(U,hF),e(hF,Bie),e(Bie,sxo),e(hF,lxo),e(hF,lj),e(lj,ixo),e(hF,dxo),e(U,cxo),e(U,gF),e(gF,Pie),e(Pie,fxo),e(gF,mxo),e(gF,ij),e(ij,hxo),e(gF,gxo),e(U,pxo),e(U,pF),e(pF,Iie),e(Iie,uxo),e(pF,_xo),e(pF,dj),e(dj,bxo),e(pF,Fxo),e(U,vxo),e(U,uF),e(uF,qie),e(qie,Txo),e(uF,Mxo),e(uF,cj),e(cj,Exo),e(uF,Cxo),e(U,wxo),e(U,_F),e(_F,Nie),e(Nie,Axo),e(_F,yxo),e(_F,fj),e(fj,Lxo),e(_F,xxo),e(U,$xo),e(U,bF),e(bF,jie),e(jie,kxo),e(bF,Sxo),e(bF,mj),e(mj,Rxo),e(bF,Bxo),e(U,Pxo),e(U,FF),e(FF,Die),e(Die,Ixo),e(FF,qxo),e(FF,hj),e(hj,Nxo),e(FF,jxo),e(U,Dxo),e(U,vF),e(vF,Gie),e(Gie,Gxo),e(vF,Oxo),e(vF,gj),e(gj,Vxo),e(vF,Xxo),e(U,zxo),e(U,TF),e(TF,Oie),e(Oie,Qxo),e(TF,Wxo),e(TF,pj),e(pj,Hxo),e(TF,Uxo),e(U,Jxo),e(U,MF),e(MF,Vie),e(Vie,Yxo),e(MF,Kxo),e(MF,uj),e(uj,Zxo),e(MF,e7o),e(U,o7o),e(U,EF),e(EF,Xie),e(Xie,r7o),e(EF,t7o),e(EF,_j),e(_j,a7o),e(EF,n7o),e(U,s7o),e(U,CF),e(CF,zie),e(zie,l7o),e(CF,i7o),e(CF,bj),e(bj,d7o),e(CF,c7o),e(U,f7o),e(U,wF),e(wF,Qie),e(Qie,m7o),e(wF,h7o),e(wF,Fj),e(Fj,g7o),e(wF,p7o),e(U,u7o),e(U,AF),e(AF,Wie),e(Wie,_7o),e(AF,b7o),e(AF,vj),e(vj,F7o),e(AF,v7o),e(U,T7o),e(U,yF),e(yF,Hie),e(Hie,M7o),e(yF,E7o),e(yF,Tj),e(Tj,C7o),e(yF,w7o),e(U,A7o),e(U,LF),e(LF,Uie),e(Uie,y7o),e(LF,L7o),e(LF,Mj),e(Mj,x7o),e(LF,$7o),e(U,k7o),e(U,xF),e(xF,Jie),e(Jie,S7o),e(xF,R7o),e(xF,Ej),e(Ej,B7o),e(xF,P7o),e(U,I7o),e(U,$F),e($F,Yie),e(Yie,q7o),e($F,N7o),e($F,Cj),e(Cj,j7o),e($F,D7o),e(U,G7o),e(U,kF),e(kF,Kie),e(Kie,O7o),e(kF,V7o),e(kF,Zie),e(Zie,X7o),e(kF,z7o),e(U,Q7o),e(U,SF),e(SF,ede),e(ede,W7o),e(SF,H7o),e(SF,wj),e(wj,U7o),e(SF,J7o),e(U,Y7o),e(U,RF),e(RF,ode),e(ode,K7o),e(RF,Z7o),e(RF,Aj),e(Aj,e$o),e(RF,o$o),e(U,r$o),e(U,BF),e(BF,rde),e(rde,t$o),e(BF,a$o),e(BF,yj),e(yj,n$o),e(BF,s$o),e(U,l$o),e(U,PF),e(PF,tde),e(tde,i$o),e(PF,d$o),e(PF,Lj),e(Lj,c$o),e(PF,f$o),e(U,m$o),e(U,IF),e(IF,ade),e(ade,h$o),e(IF,g$o),e(IF,xj),e(xj,p$o),e(IF,u$o),e(U,_$o),e(U,qF),e(qF,nde),e(nde,b$o),e(qF,F$o),e(qF,$j),e($j,v$o),e(qF,T$o),e(U,M$o),e(U,NF),e(NF,sde),e(sde,E$o),e(NF,C$o),e(NF,kj),e(kj,w$o),e(NF,A$o),e(U,y$o),e(U,jF),e(jF,lde),e(lde,L$o),e(jF,x$o),e(jF,Sj),e(Sj,$$o),e(jF,k$o),e(U,S$o),e(U,DF),e(DF,ide),e(ide,R$o),e(DF,B$o),e(DF,Rj),e(Rj,P$o),e(DF,I$o),e(Ze,q$o),e(Ze,GF),e(GF,N$o),e(GF,dde),e(dde,j$o),e(GF,D$o),e(GF,cde),e(cde,G$o),e(Ze,O$o),M(OF,Ze,null),b(f,nke,_),b(f,Ri,_),e(Ri,VF),e(VF,fde),M(X6,fde,null),e(Ri,V$o),e(Ri,mde),e(mde,X$o),b(f,ske,_),b(f,Po,_),M(z6,Po,null),e(Po,z$o),e(Po,Bi),e(Bi,Q$o),e(Bi,Bj),e(Bj,W$o),e(Bi,H$o),e(Bi,Pj),e(Pj,U$o),e(Bi,J$o),e(Po,Y$o),e(Po,Q6),e(Q6,K$o),e(Q6,hde),e(hde,Z$o),e(Q6,e9o),e(Po,o9o),e(Po,lt),M(W6,lt,null),e(lt,r9o),e(lt,gde),e(gde,t9o),e(lt,a9o),e(lt,Pi),e(Pi,n9o),e(Pi,pde),e(pde,s9o),e(Pi,l9o),e(Pi,Ij),e(Ij,i9o),e(Pi,d9o),e(lt,c9o),M(XF,lt,null),e(Po,f9o),e(Po,eo),M(H6,eo,null),e(eo,m9o),e(eo,ude),e(ude,h9o),e(eo,g9o),e(eo,ka),e(ka,p9o),e(ka,_de),e(_de,u9o),e(ka,_9o),e(ka,bde),e(bde,b9o),e(ka,F9o),e(ka,Fde),e(Fde,v9o),e(ka,T9o),e(eo,M9o),e(eo,O),e(O,zF),e(zF,vde),e(vde,E9o),e(zF,C9o),e(zF,qj),e(qj,w9o),e(zF,A9o),e(O,y9o),e(O,QF),e(QF,Tde),e(Tde,L9o),e(QF,x9o),e(QF,Nj),e(Nj,$9o),e(QF,k9o),e(O,S9o),e(O,WF),e(WF,Mde),e(Mde,R9o),e(WF,B9o),e(WF,jj),e(jj,P9o),e(WF,I9o),e(O,q9o),e(O,HF),e(HF,Ede),e(Ede,N9o),e(HF,j9o),e(HF,Dj),e(Dj,D9o),e(HF,G9o),e(O,O9o),e(O,UF),e(UF,Cde),e(Cde,V9o),e(UF,X9o),e(UF,Gj),e(Gj,z9o),e(UF,Q9o),e(O,W9o),e(O,JF),e(JF,wde),e(wde,H9o),e(JF,U9o),e(JF,Oj),e(Oj,J9o),e(JF,Y9o),e(O,K9o),e(O,YF),e(YF,Ade),e(Ade,Z9o),e(YF,eko),e(YF,Vj),e(Vj,oko),e(YF,rko),e(O,tko),e(O,KF),e(KF,yde),e(yde,ako),e(KF,nko),e(KF,Xj),e(Xj,sko),e(KF,lko),e(O,iko),e(O,ZF),e(ZF,Lde),e(Lde,dko),e(ZF,cko),e(ZF,zj),e(zj,fko),e(ZF,mko),e(O,hko),e(O,ev),e(ev,xde),e(xde,gko),e(ev,pko),e(ev,Qj),e(Qj,uko),e(ev,_ko),e(O,bko),e(O,ov),e(ov,$de),e($de,Fko),e(ov,vko),e(ov,Wj),e(Wj,Tko),e(ov,Mko),e(O,Eko),e(O,rv),e(rv,kde),e(kde,Cko),e(rv,wko),e(rv,Hj),e(Hj,Ako),e(rv,yko),e(O,Lko),e(O,tv),e(tv,Sde),e(Sde,xko),e(tv,$ko),e(tv,Uj),e(Uj,kko),e(tv,Sko),e(O,Rko),e(O,av),e(av,Rde),e(Rde,Bko),e(av,Pko),e(av,Jj),e(Jj,Iko),e(av,qko),e(O,Nko),e(O,nv),e(nv,Bde),e(Bde,jko),e(nv,Dko),e(nv,Yj),e(Yj,Gko),e(nv,Oko),e(O,Vko),e(O,sv),e(sv,Pde),e(Pde,Xko),e(sv,zko),e(sv,Kj),e(Kj,Qko),e(sv,Wko),e(O,Hko),e(O,lv),e(lv,Ide),e(Ide,Uko),e(lv,Jko),e(lv,Zj),e(Zj,Yko),e(lv,Kko),e(O,Zko),e(O,iv),e(iv,qde),e(qde,eSo),e(iv,oSo),e(iv,eD),e(eD,rSo),e(iv,tSo),e(O,aSo),e(O,dv),e(dv,Nde),e(Nde,nSo),e(dv,sSo),e(dv,oD),e(oD,lSo),e(dv,iSo),e(O,dSo),e(O,cv),e(cv,jde),e(jde,cSo),e(cv,fSo),e(cv,rD),e(rD,mSo),e(cv,hSo),e(O,gSo),e(O,fv),e(fv,Dde),e(Dde,pSo),e(fv,uSo),e(fv,tD),e(tD,_So),e(fv,bSo),e(O,FSo),e(O,mv),e(mv,Gde),e(Gde,vSo),e(mv,TSo),e(mv,aD),e(aD,MSo),e(mv,ESo),e(O,CSo),e(O,hv),e(hv,Ode),e(Ode,wSo),e(hv,ASo),e(hv,nD),e(nD,ySo),e(hv,LSo),e(O,xSo),e(O,gv),e(gv,Vde),e(Vde,$So),e(gv,kSo),e(gv,sD),e(sD,SSo),e(gv,RSo),e(O,BSo),e(O,pv),e(pv,Xde),e(Xde,PSo),e(pv,ISo),e(pv,lD),e(lD,qSo),e(pv,NSo),e(O,jSo),e(O,uv),e(uv,zde),e(zde,DSo),e(uv,GSo),e(uv,iD),e(iD,OSo),e(uv,VSo),e(O,XSo),e(O,_v),e(_v,Qde),e(Qde,zSo),e(_v,QSo),e(_v,dD),e(dD,WSo),e(_v,HSo),e(O,USo),e(O,bv),e(bv,Wde),e(Wde,JSo),e(bv,YSo),e(bv,Hde),e(Hde,KSo),e(bv,ZSo),e(O,eRo),e(O,Fv),e(Fv,Ude),e(Ude,oRo),e(Fv,rRo),e(Fv,cD),e(cD,tRo),e(Fv,aRo),e(O,nRo),e(O,vv),e(vv,Jde),e(Jde,sRo),e(vv,lRo),e(vv,fD),e(fD,iRo),e(vv,dRo),e(O,cRo),e(O,Tv),e(Tv,Yde),e(Yde,fRo),e(Tv,mRo),e(Tv,mD),e(mD,hRo),e(Tv,gRo),e(O,pRo),e(O,Mv),e(Mv,Kde),e(Kde,uRo),e(Mv,_Ro),e(Mv,hD),e(hD,bRo),e(Mv,FRo),e(O,vRo),e(O,Ev),e(Ev,Zde),e(Zde,TRo),e(Ev,MRo),e(Ev,gD),e(gD,ERo),e(Ev,CRo),e(O,wRo),e(O,Cv),e(Cv,ece),e(ece,ARo),e(Cv,yRo),e(Cv,pD),e(pD,LRo),e(Cv,xRo),e(O,$Ro),e(O,wv),e(wv,oce),e(oce,kRo),e(wv,SRo),e(wv,uD),e(uD,RRo),e(wv,BRo),e(O,PRo),e(O,Av),e(Av,rce),e(rce,IRo),e(Av,qRo),e(Av,_D),e(_D,NRo),e(Av,jRo),e(O,DRo),e(O,yv),e(yv,tce),e(tce,GRo),e(yv,ORo),e(yv,bD),e(bD,VRo),e(yv,XRo),e(O,zRo),e(O,Lv),e(Lv,ace),e(ace,QRo),e(Lv,WRo),e(Lv,FD),e(FD,HRo),e(Lv,URo),e(O,JRo),e(O,xv),e(xv,nce),e(nce,YRo),e(xv,KRo),e(xv,vD),e(vD,ZRo),e(xv,eBo),e(eo,oBo),e(eo,$v),e($v,rBo),e($v,sce),e(sce,tBo),e($v,aBo),e($v,lce),e(lce,nBo),e(eo,sBo),M(kv,eo,null),b(f,lke,_),b(f,Ii,_),e(Ii,Sv),e(Sv,ice),M(U6,ice,null),e(Ii,lBo),e(Ii,dce),e(dce,iBo),b(f,ike,_),b(f,Io,_),M(J6,Io,null),e(Io,dBo),e(Io,qi),e(qi,cBo),e(qi,TD),e(TD,fBo),e(qi,mBo),e(qi,MD),e(MD,hBo),e(qi,gBo),e(Io,pBo),e(Io,Y6),e(Y6,uBo),e(Y6,cce),e(cce,_Bo),e(Y6,bBo),e(Io,FBo),e(Io,it),M(K6,it,null),e(it,vBo),e(it,fce),e(fce,TBo),e(it,MBo),e(it,Ni),e(Ni,EBo),e(Ni,mce),e(mce,CBo),e(Ni,wBo),e(Ni,ED),e(ED,ABo),e(Ni,yBo),e(it,LBo),M(Rv,it,null),e(Io,xBo),e(Io,oo),M(Z6,oo,null),e(oo,$Bo),e(oo,hce),e(hce,kBo),e(oo,SBo),e(oo,Sa),e(Sa,RBo),e(Sa,gce),e(gce,BBo),e(Sa,PBo),e(Sa,pce),e(pce,IBo),e(Sa,qBo),e(Sa,uce),e(uce,NBo),e(Sa,jBo),e(oo,DBo),e(oo,_ce),e(_ce,Bv),e(Bv,bce),e(bce,GBo),e(Bv,OBo),e(Bv,CD),e(CD,VBo),e(Bv,XBo),e(oo,zBo),e(oo,Pv),e(Pv,QBo),e(Pv,Fce),e(Fce,WBo),e(Pv,HBo),e(Pv,vce),e(vce,UBo),e(oo,JBo),M(Iv,oo,null),b(f,dke,_),b(f,ji,_),e(ji,qv),e(qv,Tce),M(ey,Tce,null),e(ji,YBo),e(ji,Mce),e(Mce,KBo),b(f,cke,_),b(f,qo,_),M(oy,qo,null),e(qo,ZBo),e(qo,Di),e(Di,ePo),e(Di,wD),e(wD,oPo),e(Di,rPo),e(Di,AD),e(AD,tPo),e(Di,aPo),e(qo,nPo),e(qo,ry),e(ry,sPo),e(ry,Ece),e(Ece,lPo),e(ry,iPo),e(qo,dPo),e(qo,dt),M(ty,dt,null),e(dt,cPo),e(dt,Cce),e(Cce,fPo),e(dt,mPo),e(dt,Gi),e(Gi,hPo),e(Gi,wce),e(wce,gPo),e(Gi,pPo),e(Gi,yD),e(yD,uPo),e(Gi,_Po),e(dt,bPo),M(Nv,dt,null),e(qo,FPo),e(qo,ro),M(ay,ro,null),e(ro,vPo),e(ro,Ace),e(Ace,TPo),e(ro,MPo),e(ro,Ra),e(Ra,EPo),e(Ra,yce),e(yce,CPo),e(Ra,wPo),e(Ra,Lce),e(Lce,APo),e(Ra,yPo),e(Ra,xce),e(xce,LPo),e(Ra,xPo),e(ro,$Po),e(ro,Fe),e(Fe,jv),e(jv,$ce),e($ce,kPo),e(jv,SPo),e(jv,LD),e(LD,RPo),e(jv,BPo),e(Fe,PPo),e(Fe,Dv),e(Dv,kce),e(kce,IPo),e(Dv,qPo),e(Dv,xD),e(xD,NPo),e(Dv,jPo),e(Fe,DPo),e(Fe,Fs),e(Fs,Sce),e(Sce,GPo),e(Fs,OPo),e(Fs,$D),e($D,VPo),e(Fs,XPo),e(Fs,kD),e(kD,zPo),e(Fs,QPo),e(Fe,WPo),e(Fe,Gv),e(Gv,Rce),e(Rce,HPo),e(Gv,UPo),e(Gv,SD),e(SD,JPo),e(Gv,YPo),e(Fe,KPo),e(Fe,ct),e(ct,Bce),e(Bce,ZPo),e(ct,eIo),e(ct,RD),e(RD,oIo),e(ct,rIo),e(ct,BD),e(BD,tIo),e(ct,aIo),e(ct,PD),e(PD,nIo),e(ct,sIo),e(Fe,lIo),e(Fe,Ov),e(Ov,Pce),e(Pce,iIo),e(Ov,dIo),e(Ov,ID),e(ID,cIo),e(Ov,fIo),e(Fe,mIo),e(Fe,Vv),e(Vv,Ice),e(Ice,hIo),e(Vv,gIo),e(Vv,qD),e(qD,pIo),e(Vv,uIo),e(Fe,_Io),e(Fe,Xv),e(Xv,qce),e(qce,bIo),e(Xv,FIo),e(Xv,ND),e(ND,vIo),e(Xv,TIo),e(Fe,MIo),e(Fe,zv),e(zv,Nce),e(Nce,EIo),e(zv,CIo),e(zv,jD),e(jD,wIo),e(zv,AIo),e(Fe,yIo),e(Fe,Qv),e(Qv,jce),e(jce,LIo),e(Qv,xIo),e(Qv,DD),e(DD,$Io),e(Qv,kIo),e(Fe,SIo),e(Fe,Wv),e(Wv,Dce),e(Dce,RIo),e(Wv,BIo),e(Wv,GD),e(GD,PIo),e(Wv,IIo),e(ro,qIo),e(ro,Hv),e(Hv,NIo),e(Hv,Gce),e(Gce,jIo),e(Hv,DIo),e(Hv,Oce),e(Oce,GIo),e(ro,OIo),M(Uv,ro,null),b(f,fke,_),b(f,Oi,_),e(Oi,Jv),e(Jv,Vce),M(ny,Vce,null),e(Oi,VIo),e(Oi,Xce),e(Xce,XIo),b(f,mke,_),b(f,No,_),M(sy,No,null),e(No,zIo),e(No,Vi),e(Vi,QIo),e(Vi,OD),e(OD,WIo),e(Vi,HIo),e(Vi,VD),e(VD,UIo),e(Vi,JIo),e(No,YIo),e(No,ly),e(ly,KIo),e(ly,zce),e(zce,ZIo),e(ly,eqo),e(No,oqo),e(No,ft),M(iy,ft,null),e(ft,rqo),e(ft,Qce),e(Qce,tqo),e(ft,aqo),e(ft,Xi),e(Xi,nqo),e(Xi,Wce),e(Wce,sqo),e(Xi,lqo),e(Xi,XD),e(XD,iqo),e(Xi,dqo),e(ft,cqo),M(Yv,ft,null),e(No,fqo),e(No,to),M(dy,to,null),e(to,mqo),e(to,Hce),e(Hce,hqo),e(to,gqo),e(to,Ba),e(Ba,pqo),e(Ba,Uce),e(Uce,uqo),e(Ba,_qo),e(Ba,Jce),e(Jce,bqo),e(Ba,Fqo),e(Ba,Yce),e(Yce,vqo),e(Ba,Tqo),e(to,Mqo),e(to,Kce),e(Kce,Kv),e(Kv,Zce),e(Zce,Eqo),e(Kv,Cqo),e(Kv,zD),e(zD,wqo),e(Kv,Aqo),e(to,yqo),e(to,Zv),e(Zv,Lqo),e(Zv,efe),e(efe,xqo),e(Zv,$qo),e(Zv,ofe),e(ofe,kqo),e(to,Sqo),M(e1,to,null),b(f,hke,_),b(f,zi,_),e(zi,o1),e(o1,rfe),M(cy,rfe,null),e(zi,Rqo),e(zi,tfe),e(tfe,Bqo),b(f,gke,_),b(f,jo,_),M(fy,jo,null),e(jo,Pqo),e(jo,Qi),e(Qi,Iqo),e(Qi,QD),e(QD,qqo),e(Qi,Nqo),e(Qi,WD),e(WD,jqo),e(Qi,Dqo),e(jo,Gqo),e(jo,my),e(my,Oqo),e(my,afe),e(afe,Vqo),e(my,Xqo),e(jo,zqo),e(jo,mt),M(hy,mt,null),e(mt,Qqo),e(mt,nfe),e(nfe,Wqo),e(mt,Hqo),e(mt,Wi),e(Wi,Uqo),e(Wi,sfe),e(sfe,Jqo),e(Wi,Yqo),e(Wi,HD),e(HD,Kqo),e(Wi,Zqo),e(mt,eNo),M(r1,mt,null),e(jo,oNo),e(jo,ao),M(gy,ao,null),e(ao,rNo),e(ao,lfe),e(lfe,tNo),e(ao,aNo),e(ao,Pa),e(Pa,nNo),e(Pa,ife),e(ife,sNo),e(Pa,lNo),e(Pa,dfe),e(dfe,iNo),e(Pa,dNo),e(Pa,cfe),e(cfe,cNo),e(Pa,fNo),e(ao,mNo),e(ao,Ie),e(Ie,t1),e(t1,ffe),e(ffe,hNo),e(t1,gNo),e(t1,UD),e(UD,pNo),e(t1,uNo),e(Ie,_No),e(Ie,a1),e(a1,mfe),e(mfe,bNo),e(a1,FNo),e(a1,JD),e(JD,vNo),e(a1,TNo),e(Ie,MNo),e(Ie,n1),e(n1,hfe),e(hfe,ENo),e(n1,CNo),e(n1,YD),e(YD,wNo),e(n1,ANo),e(Ie,yNo),e(Ie,s1),e(s1,gfe),e(gfe,LNo),e(s1,xNo),e(s1,KD),e(KD,$No),e(s1,kNo),e(Ie,SNo),e(Ie,l1),e(l1,pfe),e(pfe,RNo),e(l1,BNo),e(l1,ZD),e(ZD,PNo),e(l1,INo),e(Ie,qNo),e(Ie,i1),e(i1,ufe),e(ufe,NNo),e(i1,jNo),e(i1,eG),e(eG,DNo),e(i1,GNo),e(Ie,ONo),e(Ie,d1),e(d1,_fe),e(_fe,VNo),e(d1,XNo),e(d1,oG),e(oG,zNo),e(d1,QNo),e(Ie,WNo),e(Ie,c1),e(c1,bfe),e(bfe,HNo),e(c1,UNo),e(c1,rG),e(rG,JNo),e(c1,YNo),e(ao,KNo),e(ao,f1),e(f1,ZNo),e(f1,Ffe),e(Ffe,ejo),e(f1,ojo),e(f1,vfe),e(vfe,rjo),e(ao,tjo),M(m1,ao,null),b(f,pke,_),b(f,Hi,_),e(Hi,h1),e(h1,Tfe),M(py,Tfe,null),e(Hi,ajo),e(Hi,Mfe),e(Mfe,njo),b(f,uke,_),b(f,Do,_),M(uy,Do,null),e(Do,sjo),e(Do,Ui),e(Ui,ljo),e(Ui,tG),e(tG,ijo),e(Ui,djo),e(Ui,aG),e(aG,cjo),e(Ui,fjo),e(Do,mjo),e(Do,_y),e(_y,hjo),e(_y,Efe),e(Efe,gjo),e(_y,pjo),e(Do,ujo),e(Do,ht),M(by,ht,null),e(ht,_jo),e(ht,Cfe),e(Cfe,bjo),e(ht,Fjo),e(ht,Ji),e(Ji,vjo),e(Ji,wfe),e(wfe,Tjo),e(Ji,Mjo),e(Ji,nG),e(nG,Ejo),e(Ji,Cjo),e(ht,wjo),M(g1,ht,null),e(Do,Ajo),e(Do,no),M(Fy,no,null),e(no,yjo),e(no,Afe),e(Afe,Ljo),e(no,xjo),e(no,Ia),e(Ia,$jo),e(Ia,yfe),e(yfe,kjo),e(Ia,Sjo),e(Ia,Lfe),e(Lfe,Rjo),e(Ia,Bjo),e(Ia,xfe),e(xfe,Pjo),e(Ia,Ijo),e(no,qjo),e(no,qa),e(qa,p1),e(p1,$fe),e($fe,Njo),e(p1,jjo),e(p1,sG),e(sG,Djo),e(p1,Gjo),e(qa,Ojo),e(qa,u1),e(u1,kfe),e(kfe,Vjo),e(u1,Xjo),e(u1,lG),e(lG,zjo),e(u1,Qjo),e(qa,Wjo),e(qa,_1),e(_1,Sfe),e(Sfe,Hjo),e(_1,Ujo),e(_1,iG),e(iG,Jjo),e(_1,Yjo),e(qa,Kjo),e(qa,b1),e(b1,Rfe),e(Rfe,Zjo),e(b1,eDo),e(b1,dG),e(dG,oDo),e(b1,rDo),e(no,tDo),e(no,F1),e(F1,aDo),e(F1,Bfe),e(Bfe,nDo),e(F1,sDo),e(F1,Pfe),e(Pfe,lDo),e(no,iDo),M(v1,no,null),b(f,_ke,_),b(f,Yi,_),e(Yi,T1),e(T1,Ife),M(vy,Ife,null),e(Yi,dDo),e(Yi,qfe),e(qfe,cDo),b(f,bke,_),b(f,Go,_),M(Ty,Go,null),e(Go,fDo),e(Go,Ki),e(Ki,mDo),e(Ki,cG),e(cG,hDo),e(Ki,gDo),e(Ki,fG),e(fG,pDo),e(Ki,uDo),e(Go,_Do),e(Go,My),e(My,bDo),e(My,Nfe),e(Nfe,FDo),e(My,vDo),e(Go,TDo),e(Go,gt),M(Ey,gt,null),e(gt,MDo),e(gt,jfe),e(jfe,EDo),e(gt,CDo),e(gt,Zi),e(Zi,wDo),e(Zi,Dfe),e(Dfe,ADo),e(Zi,yDo),e(Zi,mG),e(mG,LDo),e(Zi,xDo),e(gt,$Do),M(M1,gt,null),e(Go,kDo),e(Go,so),M(Cy,so,null),e(so,SDo),e(so,Gfe),e(Gfe,RDo),e(so,BDo),e(so,Na),e(Na,PDo),e(Na,Ofe),e(Ofe,IDo),e(Na,qDo),e(Na,Vfe),e(Vfe,NDo),e(Na,jDo),e(Na,Xfe),e(Xfe,DDo),e(Na,GDo),e(so,ODo),e(so,qe),e(qe,E1),e(E1,zfe),e(zfe,VDo),e(E1,XDo),e(E1,hG),e(hG,zDo),e(E1,QDo),e(qe,WDo),e(qe,C1),e(C1,Qfe),e(Qfe,HDo),e(C1,UDo),e(C1,gG),e(gG,JDo),e(C1,YDo),e(qe,KDo),e(qe,w1),e(w1,Wfe),e(Wfe,ZDo),e(w1,eGo),e(w1,pG),e(pG,oGo),e(w1,rGo),e(qe,tGo),e(qe,A1),e(A1,Hfe),e(Hfe,aGo),e(A1,nGo),e(A1,uG),e(uG,sGo),e(A1,lGo),e(qe,iGo),e(qe,y1),e(y1,Ufe),e(Ufe,dGo),e(y1,cGo),e(y1,_G),e(_G,fGo),e(y1,mGo),e(qe,hGo),e(qe,L1),e(L1,Jfe),e(Jfe,gGo),e(L1,pGo),e(L1,bG),e(bG,uGo),e(L1,_Go),e(qe,bGo),e(qe,x1),e(x1,Yfe),e(Yfe,FGo),e(x1,vGo),e(x1,FG),e(FG,TGo),e(x1,MGo),e(qe,EGo),e(qe,$1),e($1,Kfe),e(Kfe,CGo),e($1,wGo),e($1,vG),e(vG,AGo),e($1,yGo),e(so,LGo),e(so,k1),e(k1,xGo),e(k1,Zfe),e(Zfe,$Go),e(k1,kGo),e(k1,eme),e(eme,SGo),e(so,RGo),M(S1,so,null),b(f,Fke,_),b(f,ed,_),e(ed,R1),e(R1,ome),M(wy,ome,null),e(ed,BGo),e(ed,rme),e(rme,PGo),b(f,vke,_),b(f,Oo,_),M(Ay,Oo,null),e(Oo,IGo),e(Oo,od),e(od,qGo),e(od,TG),e(TG,NGo),e(od,jGo),e(od,MG),e(MG,DGo),e(od,GGo),e(Oo,OGo),e(Oo,yy),e(yy,VGo),e(yy,tme),e(tme,XGo),e(yy,zGo),e(Oo,QGo),e(Oo,pt),M(Ly,pt,null),e(pt,WGo),e(pt,ame),e(ame,HGo),e(pt,UGo),e(pt,rd),e(rd,JGo),e(rd,nme),e(nme,YGo),e(rd,KGo),e(rd,EG),e(EG,ZGo),e(rd,eOo),e(pt,oOo),M(B1,pt,null),e(Oo,rOo),e(Oo,lo),M(xy,lo,null),e(lo,tOo),e(lo,sme),e(sme,aOo),e(lo,nOo),e(lo,ja),e(ja,sOo),e(ja,lme),e(lme,lOo),e(ja,iOo),e(ja,ime),e(ime,dOo),e(ja,cOo),e(ja,dme),e(dme,fOo),e(ja,mOo),e(lo,hOo),e(lo,$y),e($y,P1),e(P1,cme),e(cme,gOo),e(P1,pOo),e(P1,CG),e(CG,uOo),e(P1,_Oo),e($y,bOo),e($y,I1),e(I1,fme),e(fme,FOo),e(I1,vOo),e(I1,wG),e(wG,TOo),e(I1,MOo),e(lo,EOo),e(lo,q1),e(q1,COo),e(q1,mme),e(mme,wOo),e(q1,AOo),e(q1,hme),e(hme,yOo),e(lo,LOo),M(N1,lo,null),b(f,Tke,_),b(f,td,_),e(td,j1),e(j1,gme),M(ky,gme,null),e(td,xOo),e(td,pme),e(pme,$Oo),b(f,Mke,_),b(f,Vo,_),M(Sy,Vo,null),e(Vo,kOo),e(Vo,ad),e(ad,SOo),e(ad,AG),e(AG,ROo),e(ad,BOo),e(ad,yG),e(yG,POo),e(ad,IOo),e(Vo,qOo),e(Vo,Ry),e(Ry,NOo),e(Ry,ume),e(ume,jOo),e(Ry,DOo),e(Vo,GOo),e(Vo,ut),M(By,ut,null),e(ut,OOo),e(ut,_me),e(_me,VOo),e(ut,XOo),e(ut,nd),e(nd,zOo),e(nd,bme),e(bme,QOo),e(nd,WOo),e(nd,LG),e(LG,HOo),e(nd,UOo),e(ut,JOo),M(D1,ut,null),e(Vo,YOo),e(Vo,io),M(Py,io,null),e(io,KOo),e(io,Fme),e(Fme,ZOo),e(io,eVo),e(io,Da),e(Da,oVo),e(Da,vme),e(vme,rVo),e(Da,tVo),e(Da,Tme),e(Tme,aVo),e(Da,nVo),e(Da,Mme),e(Mme,sVo),e(Da,lVo),e(io,iVo),e(io,Ga),e(Ga,G1),e(G1,Eme),e(Eme,dVo),e(G1,cVo),e(G1,xG),e(xG,fVo),e(G1,mVo),e(Ga,hVo),e(Ga,O1),e(O1,Cme),e(Cme,gVo),e(O1,pVo),e(O1,$G),e($G,uVo),e(O1,_Vo),e(Ga,bVo),e(Ga,V1),e(V1,wme),e(wme,FVo),e(V1,vVo),e(V1,kG),e(kG,TVo),e(V1,MVo),e(Ga,EVo),e(Ga,X1),e(X1,Ame),e(Ame,CVo),e(X1,wVo),e(X1,SG),e(SG,AVo),e(X1,yVo),e(io,LVo),e(io,z1),e(z1,xVo),e(z1,yme),e(yme,$Vo),e(z1,kVo),e(z1,Lme),e(Lme,SVo),e(io,RVo),M(Q1,io,null),b(f,Eke,_),b(f,sd,_),e(sd,W1),e(W1,xme),M(Iy,xme,null),e(sd,BVo),e(sd,$me),e($me,PVo),b(f,Cke,_),b(f,Xo,_),M(qy,Xo,null),e(Xo,IVo),e(Xo,ld),e(ld,qVo),e(ld,RG),e(RG,NVo),e(ld,jVo),e(ld,BG),e(BG,DVo),e(ld,GVo),e(Xo,OVo),e(Xo,Ny),e(Ny,VVo),e(Ny,kme),e(kme,XVo),e(Ny,zVo),e(Xo,QVo),e(Xo,_t),M(jy,_t,null),e(_t,WVo),e(_t,Sme),e(Sme,HVo),e(_t,UVo),e(_t,id),e(id,JVo),e(id,Rme),e(Rme,YVo),e(id,KVo),e(id,PG),e(PG,ZVo),e(id,eXo),e(_t,oXo),M(H1,_t,null),e(Xo,rXo),e(Xo,co),M(Dy,co,null),e(co,tXo),e(co,Bme),e(Bme,aXo),e(co,nXo),e(co,Oa),e(Oa,sXo),e(Oa,Pme),e(Pme,lXo),e(Oa,iXo),e(Oa,Ime),e(Ime,dXo),e(Oa,cXo),e(Oa,qme),e(qme,fXo),e(Oa,mXo),e(co,hXo),e(co,dd),e(dd,U1),e(U1,Nme),e(Nme,gXo),e(U1,pXo),e(U1,IG),e(IG,uXo),e(U1,_Xo),e(dd,bXo),e(dd,J1),e(J1,jme),e(jme,FXo),e(J1,vXo),e(J1,qG),e(qG,TXo),e(J1,MXo),e(dd,EXo),e(dd,Y1),e(Y1,Dme),e(Dme,CXo),e(Y1,wXo),e(Y1,NG),e(NG,AXo),e(Y1,yXo),e(co,LXo),e(co,K1),e(K1,xXo),e(K1,Gme),e(Gme,$Xo),e(K1,kXo),e(K1,Ome),e(Ome,SXo),e(co,RXo),M(Z1,co,null),b(f,wke,_),b(f,cd,_),e(cd,eT),e(eT,Vme),M(Gy,Vme,null),e(cd,BXo),e(cd,Xme),e(Xme,PXo),b(f,Ake,_),b(f,zo,_),M(Oy,zo,null),e(zo,IXo),e(zo,fd),e(fd,qXo),e(fd,jG),e(jG,NXo),e(fd,jXo),e(fd,DG),e(DG,DXo),e(fd,GXo),e(zo,OXo),e(zo,Vy),e(Vy,VXo),e(Vy,zme),e(zme,XXo),e(Vy,zXo),e(zo,QXo),e(zo,bt),M(Xy,bt,null),e(bt,WXo),e(bt,Qme),e(Qme,HXo),e(bt,UXo),e(bt,md),e(md,JXo),e(md,Wme),e(Wme,YXo),e(md,KXo),e(md,GG),e(GG,ZXo),e(md,ezo),e(bt,ozo),M(oT,bt,null),e(zo,rzo),e(zo,fo),M(zy,fo,null),e(fo,tzo),e(fo,Hme),e(Hme,azo),e(fo,nzo),e(fo,Va),e(Va,szo),e(Va,Ume),e(Ume,lzo),e(Va,izo),e(Va,Jme),e(Jme,dzo),e(Va,czo),e(Va,Yme),e(Yme,fzo),e(Va,mzo),e(fo,hzo),e(fo,Kme),e(Kme,rT),e(rT,Zme),e(Zme,gzo),e(rT,pzo),e(rT,OG),e(OG,uzo),e(rT,_zo),e(fo,bzo),e(fo,tT),e(tT,Fzo),e(tT,ehe),e(ehe,vzo),e(tT,Tzo),e(tT,ohe),e(ohe,Mzo),e(fo,Ezo),M(aT,fo,null),b(f,yke,_),b(f,hd,_),e(hd,nT),e(nT,rhe),M(Qy,rhe,null),e(hd,Czo),e(hd,the),e(the,wzo),b(f,Lke,_),b(f,Qo,_),M(Wy,Qo,null),e(Qo,Azo),e(Qo,gd),e(gd,yzo),e(gd,VG),e(VG,Lzo),e(gd,xzo),e(gd,XG),e(XG,$zo),e(gd,kzo),e(Qo,Szo),e(Qo,Hy),e(Hy,Rzo),e(Hy,ahe),e(ahe,Bzo),e(Hy,Pzo),e(Qo,Izo),e(Qo,Ft),M(Uy,Ft,null),e(Ft,qzo),e(Ft,nhe),e(nhe,Nzo),e(Ft,jzo),e(Ft,pd),e(pd,Dzo),e(pd,she),e(she,Gzo),e(pd,Ozo),e(pd,zG),e(zG,Vzo),e(pd,Xzo),e(Ft,zzo),M(sT,Ft,null),e(Qo,Qzo),e(Qo,mo),M(Jy,mo,null),e(mo,Wzo),e(mo,lhe),e(lhe,Hzo),e(mo,Uzo),e(mo,Xa),e(Xa,Jzo),e(Xa,ihe),e(ihe,Yzo),e(Xa,Kzo),e(Xa,dhe),e(dhe,Zzo),e(Xa,eQo),e(Xa,che),e(che,oQo),e(Xa,rQo),e(mo,tQo),e(mo,fhe),e(fhe,lT),e(lT,mhe),e(mhe,aQo),e(lT,nQo),e(lT,QG),e(QG,sQo),e(lT,lQo),e(mo,iQo),e(mo,iT),e(iT,dQo),e(iT,hhe),e(hhe,cQo),e(iT,fQo),e(iT,ghe),e(ghe,mQo),e(mo,hQo),M(dT,mo,null),b(f,xke,_),b(f,ud,_),e(ud,cT),e(cT,phe),M(Yy,phe,null),e(ud,gQo),e(ud,uhe),e(uhe,pQo),b(f,$ke,_),b(f,Wo,_),M(Ky,Wo,null),e(Wo,uQo),e(Wo,_d),e(_d,_Qo),e(_d,WG),e(WG,bQo),e(_d,FQo),e(_d,HG),e(HG,vQo),e(_d,TQo),e(Wo,MQo),e(Wo,Zy),e(Zy,EQo),e(Zy,_he),e(_he,CQo),e(Zy,wQo),e(Wo,AQo),e(Wo,vt),M(eL,vt,null),e(vt,yQo),e(vt,bhe),e(bhe,LQo),e(vt,xQo),e(vt,bd),e(bd,$Qo),e(bd,Fhe),e(Fhe,kQo),e(bd,SQo),e(bd,UG),e(UG,RQo),e(bd,BQo),e(vt,PQo),M(fT,vt,null),e(Wo,IQo),e(Wo,ho),M(oL,ho,null),e(ho,qQo),e(ho,vhe),e(vhe,NQo),e(ho,jQo),e(ho,za),e(za,DQo),e(za,The),e(The,GQo),e(za,OQo),e(za,Mhe),e(Mhe,VQo),e(za,XQo),e(za,Ehe),e(Ehe,zQo),e(za,QQo),e(ho,WQo),e(ho,rL),e(rL,mT),e(mT,Che),e(Che,HQo),e(mT,UQo),e(mT,JG),e(JG,JQo),e(mT,YQo),e(rL,KQo),e(rL,hT),e(hT,whe),e(whe,ZQo),e(hT,eWo),e(hT,YG),e(YG,oWo),e(hT,rWo),e(ho,tWo),e(ho,gT),e(gT,aWo),e(gT,Ahe),e(Ahe,nWo),e(gT,sWo),e(gT,yhe),e(yhe,lWo),e(ho,iWo),M(pT,ho,null),b(f,kke,_),b(f,Fd,_),e(Fd,uT),e(uT,Lhe),M(tL,Lhe,null),e(Fd,dWo),e(Fd,xhe),e(xhe,cWo),b(f,Ske,_),b(f,Ho,_),M(aL,Ho,null),e(Ho,fWo),e(Ho,vd),e(vd,mWo),e(vd,KG),e(KG,hWo),e(vd,gWo),e(vd,ZG),e(ZG,pWo),e(vd,uWo),e(Ho,_Wo),e(Ho,nL),e(nL,bWo),e(nL,$he),e($he,FWo),e(nL,vWo),e(Ho,TWo),e(Ho,Tt),M(sL,Tt,null),e(Tt,MWo),e(Tt,khe),e(khe,EWo),e(Tt,CWo),e(Tt,Td),e(Td,wWo),e(Td,She),e(She,AWo),e(Td,yWo),e(Td,eO),e(eO,LWo),e(Td,xWo),e(Tt,$Wo),M(_T,Tt,null),e(Ho,kWo),e(Ho,go),M(lL,go,null),e(go,SWo),e(go,Rhe),e(Rhe,RWo),e(go,BWo),e(go,Qa),e(Qa,PWo),e(Qa,Bhe),e(Bhe,IWo),e(Qa,qWo),e(Qa,Phe),e(Phe,NWo),e(Qa,jWo),e(Qa,Ihe),e(Ihe,DWo),e(Qa,GWo),e(go,OWo),e(go,qhe),e(qhe,bT),e(bT,Nhe),e(Nhe,VWo),e(bT,XWo),e(bT,oO),e(oO,zWo),e(bT,QWo),e(go,WWo),e(go,FT),e(FT,HWo),e(FT,jhe),e(jhe,UWo),e(FT,JWo),e(FT,Dhe),e(Dhe,YWo),e(go,KWo),M(vT,go,null),b(f,Rke,_),b(f,Md,_),e(Md,TT),e(TT,Ghe),M(iL,Ghe,null),e(Md,ZWo),e(Md,Ohe),e(Ohe,eHo),b(f,Bke,_),b(f,Uo,_),M(dL,Uo,null),e(Uo,oHo),e(Uo,Ed),e(Ed,rHo),e(Ed,rO),e(rO,tHo),e(Ed,aHo),e(Ed,tO),e(tO,nHo),e(Ed,sHo),e(Uo,lHo),e(Uo,cL),e(cL,iHo),e(cL,Vhe),e(Vhe,dHo),e(cL,cHo),e(Uo,fHo),e(Uo,Mt),M(fL,Mt,null),e(Mt,mHo),e(Mt,Xhe),e(Xhe,hHo),e(Mt,gHo),e(Mt,Cd),e(Cd,pHo),e(Cd,zhe),e(zhe,uHo),e(Cd,_Ho),e(Cd,aO),e(aO,bHo),e(Cd,FHo),e(Mt,vHo),M(MT,Mt,null),e(Uo,THo),e(Uo,Mr),M(mL,Mr,null),e(Mr,MHo),e(Mr,Qhe),e(Qhe,EHo),e(Mr,CHo),e(Mr,Wa),e(Wa,wHo),e(Wa,Whe),e(Whe,AHo),e(Wa,yHo),e(Wa,Hhe),e(Hhe,LHo),e(Wa,xHo),e(Wa,Uhe),e(Uhe,$Ho),e(Wa,kHo),e(Mr,SHo),e(Mr,j),e(j,ET),e(ET,Jhe),e(Jhe,RHo),e(ET,BHo),e(ET,nO),e(nO,PHo),e(ET,IHo),e(j,qHo),e(j,CT),e(CT,Yhe),e(Yhe,NHo),e(CT,jHo),e(CT,sO),e(sO,DHo),e(CT,GHo),e(j,OHo),e(j,wT),e(wT,Khe),e(Khe,VHo),e(wT,XHo),e(wT,lO),e(lO,zHo),e(wT,QHo),e(j,WHo),e(j,AT),e(AT,Zhe),e(Zhe,HHo),e(AT,UHo),e(AT,iO),e(iO,JHo),e(AT,YHo),e(j,KHo),e(j,yT),e(yT,ege),e(ege,ZHo),e(yT,eUo),e(yT,dO),e(dO,oUo),e(yT,rUo),e(j,tUo),e(j,LT),e(LT,oge),e(oge,aUo),e(LT,nUo),e(LT,cO),e(cO,sUo),e(LT,lUo),e(j,iUo),e(j,xT),e(xT,rge),e(rge,dUo),e(xT,cUo),e(xT,fO),e(fO,fUo),e(xT,mUo),e(j,hUo),e(j,$T),e($T,tge),e(tge,gUo),e($T,pUo),e($T,mO),e(mO,uUo),e($T,_Uo),e(j,bUo),e(j,kT),e(kT,age),e(age,FUo),e(kT,vUo),e(kT,hO),e(hO,TUo),e(kT,MUo),e(j,EUo),e(j,ST),e(ST,nge),e(nge,CUo),e(ST,wUo),e(ST,gO),e(gO,AUo),e(ST,yUo),e(j,LUo),e(j,RT),e(RT,sge),e(sge,xUo),e(RT,$Uo),e(RT,pO),e(pO,kUo),e(RT,SUo),e(j,RUo),e(j,BT),e(BT,lge),e(lge,BUo),e(BT,PUo),e(BT,uO),e(uO,IUo),e(BT,qUo),e(j,NUo),e(j,PT),e(PT,ige),e(ige,jUo),e(PT,DUo),e(PT,_O),e(_O,GUo),e(PT,OUo),e(j,VUo),e(j,IT),e(IT,dge),e(dge,XUo),e(IT,zUo),e(IT,bO),e(bO,QUo),e(IT,WUo),e(j,HUo),e(j,qT),e(qT,cge),e(cge,UUo),e(qT,JUo),e(qT,FO),e(FO,YUo),e(qT,KUo),e(j,ZUo),e(j,NT),e(NT,fge),e(fge,eJo),e(NT,oJo),e(NT,vO),e(vO,rJo),e(NT,tJo),e(j,aJo),e(j,vs),e(vs,mge),e(mge,nJo),e(vs,sJo),e(vs,TO),e(TO,lJo),e(vs,iJo),e(vs,MO),e(MO,dJo),e(vs,cJo),e(j,fJo),e(j,jT),e(jT,hge),e(hge,mJo),e(jT,hJo),e(jT,EO),e(EO,gJo),e(jT,pJo),e(j,uJo),e(j,DT),e(DT,gge),e(gge,_Jo),e(DT,bJo),e(DT,CO),e(CO,FJo),e(DT,vJo),e(j,TJo),e(j,GT),e(GT,pge),e(pge,MJo),e(GT,EJo),e(GT,wO),e(wO,CJo),e(GT,wJo),e(j,AJo),e(j,OT),e(OT,uge),e(uge,yJo),e(OT,LJo),e(OT,AO),e(AO,xJo),e(OT,$Jo),e(j,kJo),e(j,VT),e(VT,_ge),e(_ge,SJo),e(VT,RJo),e(VT,yO),e(yO,BJo),e(VT,PJo),e(j,IJo),e(j,XT),e(XT,bge),e(bge,qJo),e(XT,NJo),e(XT,LO),e(LO,jJo),e(XT,DJo),e(j,GJo),e(j,zT),e(zT,Fge),e(Fge,OJo),e(zT,VJo),e(zT,xO),e(xO,XJo),e(zT,zJo),e(j,QJo),e(j,QT),e(QT,vge),e(vge,WJo),e(QT,HJo),e(QT,$O),e($O,UJo),e(QT,JJo),e(j,YJo),e(j,WT),e(WT,Tge),e(Tge,KJo),e(WT,ZJo),e(WT,kO),e(kO,eYo),e(WT,oYo),e(j,rYo),e(j,HT),e(HT,Mge),e(Mge,tYo),e(HT,aYo),e(HT,SO),e(SO,nYo),e(HT,sYo),e(j,lYo),e(j,UT),e(UT,Ege),e(Ege,iYo),e(UT,dYo),e(UT,RO),e(RO,cYo),e(UT,fYo),e(j,mYo),e(j,JT),e(JT,Cge),e(Cge,hYo),e(JT,gYo),e(JT,BO),e(BO,pYo),e(JT,uYo),e(j,_Yo),e(j,YT),e(YT,wge),e(wge,bYo),e(YT,FYo),e(YT,PO),e(PO,vYo),e(YT,TYo),e(j,MYo),e(j,KT),e(KT,Age),e(Age,EYo),e(KT,CYo),e(KT,IO),e(IO,wYo),e(KT,AYo),e(j,yYo),e(j,ZT),e(ZT,yge),e(yge,LYo),e(ZT,xYo),e(ZT,qO),e(qO,$Yo),e(ZT,kYo),e(j,SYo),e(j,eM),e(eM,Lge),e(Lge,RYo),e(eM,BYo),e(eM,NO),e(NO,PYo),e(eM,IYo),e(j,qYo),e(j,oM),e(oM,xge),e(xge,NYo),e(oM,jYo),e(oM,jO),e(jO,DYo),e(oM,GYo),e(j,OYo),e(j,rM),e(rM,$ge),e($ge,VYo),e(rM,XYo),e(rM,DO),e(DO,zYo),e(rM,QYo),e(j,WYo),e(j,tM),e(tM,kge),e(kge,HYo),e(tM,UYo),e(tM,GO),e(GO,JYo),e(tM,YYo),e(j,KYo),e(j,aM),e(aM,Sge),e(Sge,ZYo),e(aM,eKo),e(aM,OO),e(OO,oKo),e(aM,rKo),e(j,tKo),e(j,nM),e(nM,Rge),e(Rge,aKo),e(nM,nKo),e(nM,VO),e(VO,sKo),e(nM,lKo),e(j,iKo),e(j,sM),e(sM,Bge),e(Bge,dKo),e(sM,cKo),e(sM,XO),e(XO,fKo),e(sM,mKo),e(j,hKo),e(j,lM),e(lM,Pge),e(Pge,gKo),e(lM,pKo),e(lM,zO),e(zO,uKo),e(lM,_Ko),e(j,bKo),e(j,iM),e(iM,Ige),e(Ige,FKo),e(iM,vKo),e(iM,QO),e(QO,TKo),e(iM,MKo),e(j,EKo),e(j,dM),e(dM,qge),e(qge,CKo),e(dM,wKo),e(dM,WO),e(WO,AKo),e(dM,yKo),e(Mr,LKo),M(cM,Mr,null),b(f,Pke,_),b(f,wd,_),e(wd,fM),e(fM,Nge),M(hL,Nge,null),e(wd,xKo),e(wd,jge),e(jge,$Ko),b(f,Ike,_),b(f,Jo,_),M(gL,Jo,null),e(Jo,kKo),e(Jo,Ad),e(Ad,SKo),e(Ad,HO),e(HO,RKo),e(Ad,BKo),e(Ad,UO),e(UO,PKo),e(Ad,IKo),e(Jo,qKo),e(Jo,pL),e(pL,NKo),e(pL,Dge),e(Dge,jKo),e(pL,DKo),e(Jo,GKo),e(Jo,Et),M(uL,Et,null),e(Et,OKo),e(Et,Gge),e(Gge,VKo),e(Et,XKo),e(Et,yd),e(yd,zKo),e(yd,Oge),e(Oge,QKo),e(yd,WKo),e(yd,JO),e(JO,HKo),e(yd,UKo),e(Et,JKo),M(mM,Et,null),e(Jo,YKo),e(Jo,Er),M(_L,Er,null),e(Er,KKo),e(Er,Vge),e(Vge,ZKo),e(Er,eZo),e(Er,Ha),e(Ha,oZo),e(Ha,Xge),e(Xge,rZo),e(Ha,tZo),e(Ha,zge),e(zge,aZo),e(Ha,nZo),e(Ha,Qge),e(Qge,sZo),e(Ha,lZo),e(Er,iZo),e(Er,ae),e(ae,hM),e(hM,Wge),e(Wge,dZo),e(hM,cZo),e(hM,YO),e(YO,fZo),e(hM,mZo),e(ae,hZo),e(ae,gM),e(gM,Hge),e(Hge,gZo),e(gM,pZo),e(gM,KO),e(KO,uZo),e(gM,_Zo),e(ae,bZo),e(ae,pM),e(pM,Uge),e(Uge,FZo),e(pM,vZo),e(pM,ZO),e(ZO,TZo),e(pM,MZo),e(ae,EZo),e(ae,uM),e(uM,Jge),e(Jge,CZo),e(uM,wZo),e(uM,eV),e(eV,AZo),e(uM,yZo),e(ae,LZo),e(ae,_M),e(_M,Yge),e(Yge,xZo),e(_M,$Zo),e(_M,oV),e(oV,kZo),e(_M,SZo),e(ae,RZo),e(ae,bM),e(bM,Kge),e(Kge,BZo),e(bM,PZo),e(bM,rV),e(rV,IZo),e(bM,qZo),e(ae,NZo),e(ae,FM),e(FM,Zge),e(Zge,jZo),e(FM,DZo),e(FM,tV),e(tV,GZo),e(FM,OZo),e(ae,VZo),e(ae,vM),e(vM,epe),e(epe,XZo),e(vM,zZo),e(vM,aV),e(aV,QZo),e(vM,WZo),e(ae,HZo),e(ae,TM),e(TM,ope),e(ope,UZo),e(TM,JZo),e(TM,nV),e(nV,YZo),e(TM,KZo),e(ae,ZZo),e(ae,MM),e(MM,rpe),e(rpe,eer),e(MM,oer),e(MM,sV),e(sV,rer),e(MM,ter),e(ae,aer),e(ae,EM),e(EM,tpe),e(tpe,ner),e(EM,ser),e(EM,lV),e(lV,ler),e(EM,ier),e(ae,der),e(ae,CM),e(CM,ape),e(ape,cer),e(CM,fer),e(CM,iV),e(iV,mer),e(CM,her),e(ae,ger),e(ae,wM),e(wM,npe),e(npe,per),e(wM,uer),e(wM,dV),e(dV,_er),e(wM,ber),e(ae,Fer),e(ae,AM),e(AM,spe),e(spe,ver),e(AM,Ter),e(AM,cV),e(cV,Mer),e(AM,Eer),e(ae,Cer),e(ae,yM),e(yM,lpe),e(lpe,wer),e(yM,Aer),e(yM,fV),e(fV,yer),e(yM,Ler),e(ae,xer),e(ae,LM),e(LM,ipe),e(ipe,$er),e(LM,ker),e(LM,mV),e(mV,Ser),e(LM,Rer),e(ae,Ber),e(ae,xM),e(xM,dpe),e(dpe,Per),e(xM,Ier),e(xM,hV),e(hV,qer),e(xM,Ner),e(ae,jer),e(ae,$M),e($M,cpe),e(cpe,Der),e($M,Ger),e($M,gV),e(gV,Oer),e($M,Ver),e(ae,Xer),e(ae,kM),e(kM,fpe),e(fpe,zer),e(kM,Qer),e(kM,pV),e(pV,Wer),e(kM,Her),e(ae,Uer),e(ae,SM),e(SM,mpe),e(mpe,Jer),e(SM,Yer),e(SM,uV),e(uV,Ker),e(SM,Zer),e(ae,eor),e(ae,RM),e(RM,hpe),e(hpe,oor),e(RM,ror),e(RM,_V),e(_V,tor),e(RM,aor),e(ae,nor),e(ae,BM),e(BM,gpe),e(gpe,sor),e(BM,lor),e(BM,bV),e(bV,ior),e(BM,dor),e(Er,cor),M(PM,Er,null),b(f,qke,_),b(f,Ld,_),e(Ld,IM),e(IM,ppe),M(bL,ppe,null),e(Ld,mor),e(Ld,upe),e(upe,hor),b(f,Nke,_),b(f,Yo,_),M(FL,Yo,null),e(Yo,gor),e(Yo,xd),e(xd,por),e(xd,FV),e(FV,uor),e(xd,_or),e(xd,vV),e(vV,bor),e(xd,For),e(Yo,vor),e(Yo,vL),e(vL,Tor),e(vL,_pe),e(_pe,Mor),e(vL,Eor),e(Yo,Cor),e(Yo,Ct),M(TL,Ct,null),e(Ct,wor),e(Ct,bpe),e(bpe,Aor),e(Ct,yor),e(Ct,$d),e($d,Lor),e($d,Fpe),e(Fpe,xor),e($d,$or),e($d,TV),e(TV,kor),e($d,Sor),e(Ct,Ror),M(qM,Ct,null),e(Yo,Bor),e(Yo,Cr),M(ML,Cr,null),e(Cr,Por),e(Cr,vpe),e(vpe,Ior),e(Cr,qor),e(Cr,Ua),e(Ua,Nor),e(Ua,Tpe),e(Tpe,jor),e(Ua,Dor),e(Ua,Mpe),e(Mpe,Gor),e(Ua,Oor),e(Ua,Epe),e(Epe,Vor),e(Ua,Xor),e(Cr,zor),e(Cr,ve),e(ve,NM),e(NM,Cpe),e(Cpe,Qor),e(NM,Wor),e(NM,MV),e(MV,Hor),e(NM,Uor),e(ve,Jor),e(ve,jM),e(jM,wpe),e(wpe,Yor),e(jM,Kor),e(jM,EV),e(EV,Zor),e(jM,err),e(ve,orr),e(ve,DM),e(DM,Ape),e(Ape,rrr),e(DM,trr),e(DM,CV),e(CV,arr),e(DM,nrr),e(ve,srr),e(ve,GM),e(GM,ype),e(ype,lrr),e(GM,irr),e(GM,wV),e(wV,drr),e(GM,crr),e(ve,frr),e(ve,OM),e(OM,Lpe),e(Lpe,mrr),e(OM,hrr),e(OM,AV),e(AV,grr),e(OM,prr),e(ve,urr),e(ve,VM),e(VM,xpe),e(xpe,_rr),e(VM,brr),e(VM,yV),e(yV,Frr),e(VM,vrr),e(ve,Trr),e(ve,XM),e(XM,$pe),e($pe,Mrr),e(XM,Err),e(XM,LV),e(LV,Crr),e(XM,wrr),e(ve,Arr),e(ve,zM),e(zM,kpe),e(kpe,yrr),e(zM,Lrr),e(zM,xV),e(xV,xrr),e(zM,$rr),e(ve,krr),e(ve,QM),e(QM,Spe),e(Spe,Srr),e(QM,Rrr),e(QM,$V),e($V,Brr),e(QM,Prr),e(ve,Irr),e(ve,WM),e(WM,Rpe),e(Rpe,qrr),e(WM,Nrr),e(WM,kV),e(kV,jrr),e(WM,Drr),e(ve,Grr),e(ve,HM),e(HM,Bpe),e(Bpe,Orr),e(HM,Vrr),e(HM,SV),e(SV,Xrr),e(HM,zrr),e(Cr,Qrr),M(UM,Cr,null),b(f,jke,_),b(f,kd,_),e(kd,JM),e(JM,Ppe),M(EL,Ppe,null),e(kd,Wrr),e(kd,Ipe),e(Ipe,Hrr),b(f,Dke,_),b(f,Ko,_),M(CL,Ko,null),e(Ko,Urr),e(Ko,Sd),e(Sd,Jrr),e(Sd,RV),e(RV,Yrr),e(Sd,Krr),e(Sd,BV),e(BV,Zrr),e(Sd,etr),e(Ko,otr),e(Ko,wL),e(wL,rtr),e(wL,qpe),e(qpe,ttr),e(wL,atr),e(Ko,ntr),e(Ko,wt),M(AL,wt,null),e(wt,str),e(wt,Npe),e(Npe,ltr),e(wt,itr),e(wt,Rd),e(Rd,dtr),e(Rd,jpe),e(jpe,ctr),e(Rd,ftr),e(Rd,PV),e(PV,mtr),e(Rd,htr),e(wt,gtr),M(YM,wt,null),e(Ko,ptr),e(Ko,wr),M(yL,wr,null),e(wr,utr),e(wr,Dpe),e(Dpe,_tr),e(wr,btr),e(wr,Ja),e(Ja,Ftr),e(Ja,Gpe),e(Gpe,vtr),e(Ja,Ttr),e(Ja,Ope),e(Ope,Mtr),e(Ja,Etr),e(Ja,Vpe),e(Vpe,Ctr),e(Ja,wtr),e(wr,Atr),e(wr,LL),e(LL,KM),e(KM,Xpe),e(Xpe,ytr),e(KM,Ltr),e(KM,IV),e(IV,xtr),e(KM,$tr),e(LL,ktr),e(LL,ZM),e(ZM,zpe),e(zpe,Str),e(ZM,Rtr),e(ZM,qV),e(qV,Btr),e(ZM,Ptr),e(wr,Itr),M(e4,wr,null),b(f,Gke,_),b(f,Bd,_),e(Bd,o4),e(o4,Qpe),M(xL,Qpe,null),e(Bd,qtr),e(Bd,Wpe),e(Wpe,Ntr),b(f,Oke,_),b(f,Zo,_),M($L,Zo,null),e(Zo,jtr),e(Zo,Pd),e(Pd,Dtr),e(Pd,NV),e(NV,Gtr),e(Pd,Otr),e(Pd,jV),e(jV,Vtr),e(Pd,Xtr),e(Zo,ztr),e(Zo,kL),e(kL,Qtr),e(kL,Hpe),e(Hpe,Wtr),e(kL,Htr),e(Zo,Utr),e(Zo,At),M(SL,At,null),e(At,Jtr),e(At,Upe),e(Upe,Ytr),e(At,Ktr),e(At,Id),e(Id,Ztr),e(Id,Jpe),e(Jpe,ear),e(Id,oar),e(Id,DV),e(DV,rar),e(Id,tar),e(At,aar),M(r4,At,null),e(Zo,nar),e(Zo,Ar),M(RL,Ar,null),e(Ar,sar),e(Ar,Ype),e(Ype,lar),e(Ar,iar),e(Ar,Ya),e(Ya,dar),e(Ya,Kpe),e(Kpe,car),e(Ya,far),e(Ya,Zpe),e(Zpe,mar),e(Ya,har),e(Ya,eue),e(eue,gar),e(Ya,par),e(Ar,uar),e(Ar,se),e(se,t4),e(t4,oue),e(oue,_ar),e(t4,bar),e(t4,GV),e(GV,Far),e(t4,Tar),e(se,Mar),e(se,a4),e(a4,rue),e(rue,Ear),e(a4,Car),e(a4,OV),e(OV,war),e(a4,Aar),e(se,yar),e(se,n4),e(n4,tue),e(tue,Lar),e(n4,xar),e(n4,VV),e(VV,$ar),e(n4,kar),e(se,Sar),e(se,s4),e(s4,aue),e(aue,Rar),e(s4,Bar),e(s4,XV),e(XV,Par),e(s4,Iar),e(se,qar),e(se,l4),e(l4,nue),e(nue,Nar),e(l4,jar),e(l4,zV),e(zV,Dar),e(l4,Gar),e(se,Oar),e(se,i4),e(i4,sue),e(sue,Var),e(i4,Xar),e(i4,QV),e(QV,zar),e(i4,Qar),e(se,War),e(se,d4),e(d4,lue),e(lue,Har),e(d4,Uar),e(d4,WV),e(WV,Jar),e(d4,Yar),e(se,Kar),e(se,c4),e(c4,iue),e(iue,Zar),e(c4,enr),e(c4,HV),e(HV,onr),e(c4,rnr),e(se,tnr),e(se,f4),e(f4,due),e(due,anr),e(f4,nnr),e(f4,UV),e(UV,snr),e(f4,lnr),e(se,inr),e(se,m4),e(m4,cue),e(cue,dnr),e(m4,cnr),e(m4,JV),e(JV,fnr),e(m4,mnr),e(se,hnr),e(se,h4),e(h4,fue),e(fue,gnr),e(h4,pnr),e(h4,YV),e(YV,unr),e(h4,_nr),e(se,bnr),e(se,g4),e(g4,mue),e(mue,Fnr),e(g4,vnr),e(g4,KV),e(KV,Tnr),e(g4,Mnr),e(se,Enr),e(se,p4),e(p4,hue),e(hue,Cnr),e(p4,wnr),e(p4,ZV),e(ZV,Anr),e(p4,ynr),e(se,Lnr),e(se,u4),e(u4,gue),e(gue,xnr),e(u4,$nr),e(u4,eX),e(eX,knr),e(u4,Snr),e(se,Rnr),e(se,_4),e(_4,pue),e(pue,Bnr),e(_4,Pnr),e(_4,oX),e(oX,Inr),e(_4,qnr),e(se,Nnr),e(se,b4),e(b4,uue),e(uue,jnr),e(b4,Dnr),e(b4,rX),e(rX,Gnr),e(b4,Onr),e(se,Vnr),e(se,F4),e(F4,_ue),e(_ue,Xnr),e(F4,znr),e(F4,tX),e(tX,Qnr),e(F4,Wnr),e(se,Hnr),e(se,v4),e(v4,bue),e(bue,Unr),e(v4,Jnr),e(v4,aX),e(aX,Ynr),e(v4,Knr),e(se,Znr),e(se,T4),e(T4,Fue),e(Fue,esr),e(T4,osr),e(T4,nX),e(nX,rsr),e(T4,tsr),e(se,asr),e(se,M4),e(M4,vue),e(vue,nsr),e(M4,ssr),e(M4,sX),e(sX,lsr),e(M4,isr),e(Ar,dsr),M(E4,Ar,null),b(f,Vke,_),b(f,qd,_),e(qd,C4),e(C4,Tue),M(BL,Tue,null),e(qd,csr),e(qd,Mue),e(Mue,fsr),b(f,Xke,_),b(f,er,_),M(PL,er,null),e(er,msr),e(er,Nd),e(Nd,hsr),e(Nd,lX),e(lX,gsr),e(Nd,psr),e(Nd,iX),e(iX,usr),e(Nd,_sr),e(er,bsr),e(er,IL),e(IL,Fsr),e(IL,Eue),e(Eue,vsr),e(IL,Tsr),e(er,Msr),e(er,yt),M(qL,yt,null),e(yt,Esr),e(yt,Cue),e(Cue,Csr),e(yt,wsr),e(yt,jd),e(jd,Asr),e(jd,wue),e(wue,ysr),e(jd,Lsr),e(jd,dX),e(dX,xsr),e(jd,$sr),e(yt,ksr),M(w4,yt,null),e(er,Ssr),e(er,yr),M(NL,yr,null),e(yr,Rsr),e(yr,Aue),e(Aue,Bsr),e(yr,Psr),e(yr,Ka),e(Ka,Isr),e(Ka,yue),e(yue,qsr),e(Ka,Nsr),e(Ka,Lue),e(Lue,jsr),e(Ka,Dsr),e(Ka,xue),e(xue,Gsr),e(Ka,Osr),e(yr,Vsr),e(yr,Ee),e(Ee,A4),e(A4,$ue),e($ue,Xsr),e(A4,zsr),e(A4,cX),e(cX,Qsr),e(A4,Wsr),e(Ee,Hsr),e(Ee,y4),e(y4,kue),e(kue,Usr),e(y4,Jsr),e(y4,fX),e(fX,Ysr),e(y4,Ksr),e(Ee,Zsr),e(Ee,L4),e(L4,Sue),e(Sue,elr),e(L4,olr),e(L4,mX),e(mX,rlr),e(L4,tlr),e(Ee,alr),e(Ee,x4),e(x4,Rue),e(Rue,nlr),e(x4,slr),e(x4,hX),e(hX,llr),e(x4,ilr),e(Ee,dlr),e(Ee,$4),e($4,Bue),e(Bue,clr),e($4,flr),e($4,gX),e(gX,mlr),e($4,hlr),e(Ee,glr),e(Ee,k4),e(k4,Pue),e(Pue,plr),e(k4,ulr),e(k4,pX),e(pX,_lr),e(k4,blr),e(Ee,Flr),e(Ee,S4),e(S4,Iue),e(Iue,vlr),e(S4,Tlr),e(S4,uX),e(uX,Mlr),e(S4,Elr),e(Ee,Clr),e(Ee,R4),e(R4,que),e(que,wlr),e(R4,Alr),e(R4,_X),e(_X,ylr),e(R4,Llr),e(Ee,xlr),e(Ee,B4),e(B4,Nue),e(Nue,$lr),e(B4,klr),e(B4,bX),e(bX,Slr),e(B4,Rlr),e(Ee,Blr),e(Ee,P4),e(P4,jue),e(jue,Plr),e(P4,Ilr),e(P4,FX),e(FX,qlr),e(P4,Nlr),e(yr,jlr),M(I4,yr,null),b(f,zke,_),b(f,Dd,_),e(Dd,q4),e(q4,Due),M(jL,Due,null),e(Dd,Dlr),e(Dd,Gue),e(Gue,Glr),b(f,Qke,_),b(f,or,_),M(DL,or,null),e(or,Olr),e(or,Gd),e(Gd,Vlr),e(Gd,vX),e(vX,Xlr),e(Gd,zlr),e(Gd,TX),e(TX,Qlr),e(Gd,Wlr),e(or,Hlr),e(or,GL),e(GL,Ulr),e(GL,Oue),e(Oue,Jlr),e(GL,Ylr),e(or,Klr),e(or,Lt),M(OL,Lt,null),e(Lt,Zlr),e(Lt,Vue),e(Vue,eir),e(Lt,oir),e(Lt,Od),e(Od,rir),e(Od,Xue),e(Xue,tir),e(Od,air),e(Od,MX),e(MX,nir),e(Od,sir),e(Lt,lir),M(N4,Lt,null),e(or,iir),e(or,Lr),M(VL,Lr,null),e(Lr,dir),e(Lr,zue),e(zue,cir),e(Lr,fir),e(Lr,Za),e(Za,mir),e(Za,Que),e(Que,hir),e(Za,gir),e(Za,Wue),e(Wue,pir),e(Za,uir),e(Za,Hue),e(Hue,_ir),e(Za,bir),e(Lr,Fir),e(Lr,ee),e(ee,j4),e(j4,Uue),e(Uue,vir),e(j4,Tir),e(j4,EX),e(EX,Mir),e(j4,Eir),e(ee,Cir),e(ee,D4),e(D4,Jue),e(Jue,wir),e(D4,Air),e(D4,CX),e(CX,yir),e(D4,Lir),e(ee,xir),e(ee,G4),e(G4,Yue),e(Yue,$ir),e(G4,kir),e(G4,wX),e(wX,Sir),e(G4,Rir),e(ee,Bir),e(ee,O4),e(O4,Kue),e(Kue,Pir),e(O4,Iir),e(O4,AX),e(AX,qir),e(O4,Nir),e(ee,jir),e(ee,V4),e(V4,Zue),e(Zue,Dir),e(V4,Gir),e(V4,yX),e(yX,Oir),e(V4,Vir),e(ee,Xir),e(ee,X4),e(X4,e_e),e(e_e,zir),e(X4,Qir),e(X4,LX),e(LX,Wir),e(X4,Hir),e(ee,Uir),e(ee,z4),e(z4,o_e),e(o_e,Jir),e(z4,Yir),e(z4,xX),e(xX,Kir),e(z4,Zir),e(ee,edr),e(ee,Q4),e(Q4,r_e),e(r_e,odr),e(Q4,rdr),e(Q4,$X),e($X,tdr),e(Q4,adr),e(ee,ndr),e(ee,W4),e(W4,t_e),e(t_e,sdr),e(W4,ldr),e(W4,kX),e(kX,idr),e(W4,ddr),e(ee,cdr),e(ee,H4),e(H4,a_e),e(a_e,fdr),e(H4,mdr),e(H4,SX),e(SX,hdr),e(H4,gdr),e(ee,pdr),e(ee,U4),e(U4,n_e),e(n_e,udr),e(U4,_dr),e(U4,RX),e(RX,bdr),e(U4,Fdr),e(ee,vdr),e(ee,J4),e(J4,s_e),e(s_e,Tdr),e(J4,Mdr),e(J4,BX),e(BX,Edr),e(J4,Cdr),e(ee,wdr),e(ee,Y4),e(Y4,l_e),e(l_e,Adr),e(Y4,ydr),e(Y4,PX),e(PX,Ldr),e(Y4,xdr),e(ee,$dr),e(ee,K4),e(K4,i_e),e(i_e,kdr),e(K4,Sdr),e(K4,IX),e(IX,Rdr),e(K4,Bdr),e(ee,Pdr),e(ee,Z4),e(Z4,d_e),e(d_e,Idr),e(Z4,qdr),e(Z4,qX),e(qX,Ndr),e(Z4,jdr),e(ee,Ddr),e(ee,eE),e(eE,c_e),e(c_e,Gdr),e(eE,Odr),e(eE,NX),e(NX,Vdr),e(eE,Xdr),e(ee,zdr),e(ee,oE),e(oE,f_e),e(f_e,Qdr),e(oE,Wdr),e(oE,jX),e(jX,Hdr),e(oE,Udr),e(ee,Jdr),e(ee,rE),e(rE,m_e),e(m_e,Ydr),e(rE,Kdr),e(rE,DX),e(DX,Zdr),e(rE,ecr),e(ee,ocr),e(ee,tE),e(tE,h_e),e(h_e,rcr),e(tE,tcr),e(tE,GX),e(GX,acr),e(tE,ncr),e(ee,scr),e(ee,aE),e(aE,g_e),e(g_e,lcr),e(aE,icr),e(aE,OX),e(OX,dcr),e(aE,ccr),e(ee,fcr),e(ee,nE),e(nE,p_e),e(p_e,mcr),e(nE,hcr),e(nE,VX),e(VX,gcr),e(nE,pcr),e(ee,ucr),e(ee,sE),e(sE,u_e),e(u_e,_cr),e(sE,bcr),e(sE,XX),e(XX,Fcr),e(sE,vcr),e(ee,Tcr),e(ee,lE),e(lE,__e),e(__e,Mcr),e(lE,Ecr),e(lE,zX),e(zX,Ccr),e(lE,wcr),e(ee,Acr),e(ee,iE),e(iE,b_e),e(b_e,ycr),e(iE,Lcr),e(iE,QX),e(QX,xcr),e(iE,$cr),e(ee,kcr),e(ee,dE),e(dE,F_e),e(F_e,Scr),e(dE,Rcr),e(dE,WX),e(WX,Bcr),e(dE,Pcr),e(Lr,Icr),M(cE,Lr,null),b(f,Wke,_),b(f,Vd,_),e(Vd,fE),e(fE,v_e),M(XL,v_e,null),e(Vd,qcr),e(Vd,T_e),e(T_e,Ncr),b(f,Hke,_),b(f,rr,_),M(zL,rr,null),e(rr,jcr),e(rr,Xd),e(Xd,Dcr),e(Xd,HX),e(HX,Gcr),e(Xd,Ocr),e(Xd,UX),e(UX,Vcr),e(Xd,Xcr),e(rr,zcr),e(rr,QL),e(QL,Qcr),e(QL,M_e),e(M_e,Wcr),e(QL,Hcr),e(rr,Ucr),e(rr,xt),M(WL,xt,null),e(xt,Jcr),e(xt,E_e),e(E_e,Ycr),e(xt,Kcr),e(xt,zd),e(zd,Zcr),e(zd,C_e),e(C_e,efr),e(zd,ofr),e(zd,JX),e(JX,rfr),e(zd,tfr),e(xt,afr),M(mE,xt,null),e(rr,nfr),e(rr,xr),M(HL,xr,null),e(xr,sfr),e(xr,w_e),e(w_e,lfr),e(xr,ifr),e(xr,en),e(en,dfr),e(en,A_e),e(A_e,cfr),e(en,ffr),e(en,y_e),e(y_e,mfr),e(en,hfr),e(en,L_e),e(L_e,gfr),e(en,pfr),e(xr,ufr),e(xr,he),e(he,hE),e(hE,x_e),e(x_e,_fr),e(hE,bfr),e(hE,YX),e(YX,Ffr),e(hE,vfr),e(he,Tfr),e(he,gE),e(gE,$_e),e($_e,Mfr),e(gE,Efr),e(gE,KX),e(KX,Cfr),e(gE,wfr),e(he,Afr),e(he,pE),e(pE,k_e),e(k_e,yfr),e(pE,Lfr),e(pE,ZX),e(ZX,xfr),e(pE,$fr),e(he,kfr),e(he,uE),e(uE,S_e),e(S_e,Sfr),e(uE,Rfr),e(uE,ez),e(ez,Bfr),e(uE,Pfr),e(he,Ifr),e(he,_E),e(_E,R_e),e(R_e,qfr),e(_E,Nfr),e(_E,oz),e(oz,jfr),e(_E,Dfr),e(he,Gfr),e(he,bE),e(bE,B_e),e(B_e,Ofr),e(bE,Vfr),e(bE,rz),e(rz,Xfr),e(bE,zfr),e(he,Qfr),e(he,FE),e(FE,P_e),e(P_e,Wfr),e(FE,Hfr),e(FE,tz),e(tz,Ufr),e(FE,Jfr),e(he,Yfr),e(he,vE),e(vE,I_e),e(I_e,Kfr),e(vE,Zfr),e(vE,az),e(az,emr),e(vE,omr),e(he,rmr),e(he,TE),e(TE,q_e),e(q_e,tmr),e(TE,amr),e(TE,nz),e(nz,nmr),e(TE,smr),e(he,lmr),e(he,ME),e(ME,N_e),e(N_e,imr),e(ME,dmr),e(ME,sz),e(sz,cmr),e(ME,fmr),e(he,mmr),e(he,EE),e(EE,j_e),e(j_e,hmr),e(EE,gmr),e(EE,lz),e(lz,pmr),e(EE,umr),e(he,_mr),e(he,CE),e(CE,D_e),e(D_e,bmr),e(CE,Fmr),e(CE,iz),e(iz,vmr),e(CE,Tmr),e(he,Mmr),e(he,wE),e(wE,G_e),e(G_e,Emr),e(wE,Cmr),e(wE,dz),e(dz,wmr),e(wE,Amr),e(he,ymr),e(he,AE),e(AE,O_e),e(O_e,Lmr),e(AE,xmr),e(AE,cz),e(cz,$mr),e(AE,kmr),e(he,Smr),e(he,yE),e(yE,V_e),e(V_e,Rmr),e(yE,Bmr),e(yE,fz),e(fz,Pmr),e(yE,Imr),e(he,qmr),e(he,LE),e(LE,X_e),e(X_e,Nmr),e(LE,jmr),e(LE,mz),e(mz,Dmr),e(LE,Gmr),e(he,Omr),e(he,xE),e(xE,z_e),e(z_e,Vmr),e(xE,Xmr),e(xE,hz),e(hz,zmr),e(xE,Qmr),e(xr,Wmr),M($E,xr,null),b(f,Uke,_),b(f,Qd,_),e(Qd,kE),e(kE,Q_e),M(UL,Q_e,null),e(Qd,Hmr),e(Qd,W_e),e(W_e,Umr),b(f,Jke,_),b(f,tr,_),M(JL,tr,null),e(tr,Jmr),e(tr,Wd),e(Wd,Ymr),e(Wd,gz),e(gz,Kmr),e(Wd,Zmr),e(Wd,pz),e(pz,ehr),e(Wd,ohr),e(tr,rhr),e(tr,YL),e(YL,thr),e(YL,H_e),e(H_e,ahr),e(YL,nhr),e(tr,shr),e(tr,$t),M(KL,$t,null),e($t,lhr),e($t,U_e),e(U_e,ihr),e($t,dhr),e($t,Hd),e(Hd,chr),e(Hd,J_e),e(J_e,fhr),e(Hd,mhr),e(Hd,uz),e(uz,hhr),e(Hd,ghr),e($t,phr),M(SE,$t,null),e(tr,uhr),e(tr,$r),M(ZL,$r,null),e($r,_hr),e($r,Y_e),e(Y_e,bhr),e($r,Fhr),e($r,on),e(on,vhr),e(on,K_e),e(K_e,Thr),e(on,Mhr),e(on,Z_e),e(Z_e,Ehr),e(on,Chr),e(on,ebe),e(ebe,whr),e(on,Ahr),e($r,yhr),e($r,obe),e(obe,RE),e(RE,rbe),e(rbe,Lhr),e(RE,xhr),e(RE,_z),e(_z,$hr),e(RE,khr),e($r,Shr),M(BE,$r,null),b(f,Yke,_),b(f,Ud,_),e(Ud,PE),e(PE,tbe),M(e8,tbe,null),e(Ud,Rhr),e(Ud,abe),e(abe,Bhr),b(f,Kke,_),b(f,ar,_),M(o8,ar,null),e(ar,Phr),e(ar,Jd),e(Jd,Ihr),e(Jd,bz),e(bz,qhr),e(Jd,Nhr),e(Jd,Fz),e(Fz,jhr),e(Jd,Dhr),e(ar,Ghr),e(ar,r8),e(r8,Ohr),e(r8,nbe),e(nbe,Vhr),e(r8,Xhr),e(ar,zhr),e(ar,kt),M(t8,kt,null),e(kt,Qhr),e(kt,sbe),e(sbe,Whr),e(kt,Hhr),e(kt,Yd),e(Yd,Uhr),e(Yd,lbe),e(lbe,Jhr),e(Yd,Yhr),e(Yd,vz),e(vz,Khr),e(Yd,Zhr),e(kt,egr),M(IE,kt,null),e(ar,ogr),e(ar,kr),M(a8,kr,null),e(kr,rgr),e(kr,ibe),e(ibe,tgr),e(kr,agr),e(kr,rn),e(rn,ngr),e(rn,dbe),e(dbe,sgr),e(rn,lgr),e(rn,cbe),e(cbe,igr),e(rn,dgr),e(rn,fbe),e(fbe,cgr),e(rn,fgr),e(kr,mgr),e(kr,le),e(le,qE),e(qE,mbe),e(mbe,hgr),e(qE,ggr),e(qE,Tz),e(Tz,pgr),e(qE,ugr),e(le,_gr),e(le,NE),e(NE,hbe),e(hbe,bgr),e(NE,Fgr),e(NE,Mz),e(Mz,vgr),e(NE,Tgr),e(le,Mgr),e(le,jE),e(jE,gbe),e(gbe,Egr),e(jE,Cgr),e(jE,Ez),e(Ez,wgr),e(jE,Agr),e(le,ygr),e(le,DE),e(DE,pbe),e(pbe,Lgr),e(DE,xgr),e(DE,Cz),e(Cz,$gr),e(DE,kgr),e(le,Sgr),e(le,GE),e(GE,ube),e(ube,Rgr),e(GE,Bgr),e(GE,wz),e(wz,Pgr),e(GE,Igr),e(le,qgr),e(le,OE),e(OE,_be),e(_be,Ngr),e(OE,jgr),e(OE,Az),e(Az,Dgr),e(OE,Ggr),e(le,Ogr),e(le,VE),e(VE,bbe),e(bbe,Vgr),e(VE,Xgr),e(VE,yz),e(yz,zgr),e(VE,Qgr),e(le,Wgr),e(le,XE),e(XE,Fbe),e(Fbe,Hgr),e(XE,Ugr),e(XE,Lz),e(Lz,Jgr),e(XE,Ygr),e(le,Kgr),e(le,zE),e(zE,vbe),e(vbe,Zgr),e(zE,epr),e(zE,xz),e(xz,opr),e(zE,rpr),e(le,tpr),e(le,QE),e(QE,Tbe),e(Tbe,apr),e(QE,npr),e(QE,$z),e($z,spr),e(QE,lpr),e(le,ipr),e(le,WE),e(WE,Mbe),e(Mbe,dpr),e(WE,cpr),e(WE,kz),e(kz,fpr),e(WE,mpr),e(le,hpr),e(le,HE),e(HE,Ebe),e(Ebe,gpr),e(HE,ppr),e(HE,Sz),e(Sz,upr),e(HE,_pr),e(le,bpr),e(le,UE),e(UE,Cbe),e(Cbe,Fpr),e(UE,vpr),e(UE,Rz),e(Rz,Tpr),e(UE,Mpr),e(le,Epr),e(le,JE),e(JE,wbe),e(wbe,Cpr),e(JE,wpr),e(JE,Bz),e(Bz,Apr),e(JE,ypr),e(le,Lpr),e(le,YE),e(YE,Abe),e(Abe,xpr),e(YE,$pr),e(YE,Pz),e(Pz,kpr),e(YE,Spr),e(le,Rpr),e(le,KE),e(KE,ybe),e(ybe,Bpr),e(KE,Ppr),e(KE,Iz),e(Iz,Ipr),e(KE,qpr),e(le,Npr),e(le,ZE),e(ZE,Lbe),e(Lbe,jpr),e(ZE,Dpr),e(ZE,qz),e(qz,Gpr),e(ZE,Opr),e(le,Vpr),e(le,e5),e(e5,xbe),e(xbe,Xpr),e(e5,zpr),e(e5,Nz),e(Nz,Qpr),e(e5,Wpr),e(le,Hpr),e(le,o5),e(o5,$be),e($be,Upr),e(o5,Jpr),e(o5,jz),e(jz,Ypr),e(o5,Kpr),e(le,Zpr),e(le,r5),e(r5,kbe),e(kbe,eur),e(r5,our),e(r5,Dz),e(Dz,rur),e(r5,tur),e(kr,aur),M(t5,kr,null),b(f,Zke,_),b(f,Kd,_),e(Kd,a5),e(a5,Sbe),M(n8,Sbe,null),e(Kd,nur),e(Kd,Rbe),e(Rbe,sur),b(f,eSe,_),b(f,nr,_),M(s8,nr,null),e(nr,lur),e(nr,Zd),e(Zd,iur),e(Zd,Gz),e(Gz,dur),e(Zd,cur),e(Zd,Oz),e(Oz,fur),e(Zd,mur),e(nr,hur),e(nr,l8),e(l8,gur),e(l8,Bbe),e(Bbe,pur),e(l8,uur),e(nr,_ur),e(nr,St),M(i8,St,null),e(St,bur),e(St,Pbe),e(Pbe,Fur),e(St,vur),e(St,ec),e(ec,Tur),e(ec,Ibe),e(Ibe,Mur),e(ec,Eur),e(ec,Vz),e(Vz,Cur),e(ec,wur),e(St,Aur),M(n5,St,null),e(nr,yur),e(nr,Sr),M(d8,Sr,null),e(Sr,Lur),e(Sr,qbe),e(qbe,xur),e(Sr,$ur),e(Sr,tn),e(tn,kur),e(tn,Nbe),e(Nbe,Sur),e(tn,Rur),e(tn,jbe),e(jbe,Bur),e(tn,Pur),e(tn,Dbe),e(Dbe,Iur),e(tn,qur),e(Sr,Nur),e(Sr,ie),e(ie,s5),e(s5,Gbe),e(Gbe,jur),e(s5,Dur),e(s5,Xz),e(Xz,Gur),e(s5,Our),e(ie,Vur),e(ie,l5),e(l5,Obe),e(Obe,Xur),e(l5,zur),e(l5,zz),e(zz,Qur),e(l5,Wur),e(ie,Hur),e(ie,i5),e(i5,Vbe),e(Vbe,Uur),e(i5,Jur),e(i5,Qz),e(Qz,Yur),e(i5,Kur),e(ie,Zur),e(ie,d5),e(d5,Xbe),e(Xbe,e_r),e(d5,o_r),e(d5,Wz),e(Wz,r_r),e(d5,t_r),e(ie,a_r),e(ie,c5),e(c5,zbe),e(zbe,n_r),e(c5,s_r),e(c5,Hz),e(Hz,l_r),e(c5,i_r),e(ie,d_r),e(ie,f5),e(f5,Qbe),e(Qbe,c_r),e(f5,f_r),e(f5,Uz),e(Uz,m_r),e(f5,h_r),e(ie,g_r),e(ie,m5),e(m5,Wbe),e(Wbe,p_r),e(m5,u_r),e(m5,Jz),e(Jz,__r),e(m5,b_r),e(ie,F_r),e(ie,h5),e(h5,Hbe),e(Hbe,v_r),e(h5,T_r),e(h5,Yz),e(Yz,M_r),e(h5,E_r),e(ie,C_r),e(ie,g5),e(g5,Ube),e(Ube,w_r),e(g5,A_r),e(g5,Kz),e(Kz,y_r),e(g5,L_r),e(ie,x_r),e(ie,p5),e(p5,Jbe),e(Jbe,$_r),e(p5,k_r),e(p5,Zz),e(Zz,S_r),e(p5,R_r),e(ie,B_r),e(ie,u5),e(u5,Ybe),e(Ybe,P_r),e(u5,I_r),e(u5,eQ),e(eQ,q_r),e(u5,N_r),e(ie,j_r),e(ie,_5),e(_5,Kbe),e(Kbe,D_r),e(_5,G_r),e(_5,oQ),e(oQ,O_r),e(_5,V_r),e(ie,X_r),e(ie,b5),e(b5,Zbe),e(Zbe,z_r),e(b5,Q_r),e(b5,rQ),e(rQ,W_r),e(b5,H_r),e(ie,U_r),e(ie,F5),e(F5,e2e),e(e2e,J_r),e(F5,Y_r),e(F5,tQ),e(tQ,K_r),e(F5,Z_r),e(ie,ebr),e(ie,v5),e(v5,o2e),e(o2e,obr),e(v5,rbr),e(v5,aQ),e(aQ,tbr),e(v5,abr),e(ie,nbr),e(ie,T5),e(T5,r2e),e(r2e,sbr),e(T5,lbr),e(T5,nQ),e(nQ,ibr),e(T5,dbr),e(ie,cbr),e(ie,M5),e(M5,t2e),e(t2e,fbr),e(M5,mbr),e(M5,sQ),e(sQ,hbr),e(M5,gbr),e(ie,pbr),e(ie,E5),e(E5,a2e),e(a2e,ubr),e(E5,_br),e(E5,lQ),e(lQ,bbr),e(E5,Fbr),e(ie,vbr),e(ie,C5),e(C5,n2e),e(n2e,Tbr),e(C5,Mbr),e(C5,iQ),e(iQ,Ebr),e(C5,Cbr),e(Sr,wbr),M(w5,Sr,null),b(f,oSe,_),b(f,oc,_),e(oc,A5),e(A5,s2e),M(c8,s2e,null),e(oc,Abr),e(oc,l2e),e(l2e,ybr),b(f,rSe,_),b(f,sr,_),M(f8,sr,null),e(sr,Lbr),e(sr,rc),e(rc,xbr),e(rc,dQ),e(dQ,$br),e(rc,kbr),e(rc,cQ),e(cQ,Sbr),e(rc,Rbr),e(sr,Bbr),e(sr,m8),e(m8,Pbr),e(m8,i2e),e(i2e,Ibr),e(m8,qbr),e(sr,Nbr),e(sr,Rt),M(h8,Rt,null),e(Rt,jbr),e(Rt,d2e),e(d2e,Dbr),e(Rt,Gbr),e(Rt,tc),e(tc,Obr),e(tc,c2e),e(c2e,Vbr),e(tc,Xbr),e(tc,fQ),e(fQ,zbr),e(tc,Qbr),e(Rt,Wbr),M(y5,Rt,null),e(sr,Hbr),e(sr,Rr),M(g8,Rr,null),e(Rr,Ubr),e(Rr,f2e),e(f2e,Jbr),e(Rr,Ybr),e(Rr,an),e(an,Kbr),e(an,m2e),e(m2e,Zbr),e(an,e2r),e(an,h2e),e(h2e,o2r),e(an,r2r),e(an,g2e),e(g2e,t2r),e(an,a2r),e(Rr,n2r),e(Rr,p2e),e(p2e,L5),e(L5,u2e),e(u2e,s2r),e(L5,l2r),e(L5,mQ),e(mQ,i2r),e(L5,d2r),e(Rr,c2r),M(x5,Rr,null),b(f,tSe,_),b(f,ac,_),e(ac,$5),e($5,_2e),M(p8,_2e,null),e(ac,f2r),e(ac,b2e),e(b2e,m2r),b(f,aSe,_),b(f,lr,_),M(u8,lr,null),e(lr,h2r),e(lr,nc),e(nc,g2r),e(nc,hQ),e(hQ,p2r),e(nc,u2r),e(nc,gQ),e(gQ,_2r),e(nc,b2r),e(lr,F2r),e(lr,_8),e(_8,v2r),e(_8,F2e),e(F2e,T2r),e(_8,M2r),e(lr,E2r),e(lr,Bt),M(b8,Bt,null),e(Bt,C2r),e(Bt,v2e),e(v2e,w2r),e(Bt,A2r),e(Bt,sc),e(sc,y2r),e(sc,T2e),e(T2e,L2r),e(sc,x2r),e(sc,pQ),e(pQ,$2r),e(sc,k2r),e(Bt,S2r),M(k5,Bt,null),e(lr,R2r),e(lr,Br),M(F8,Br,null),e(Br,B2r),e(Br,M2e),e(M2e,P2r),e(Br,I2r),e(Br,nn),e(nn,q2r),e(nn,E2e),e(E2e,N2r),e(nn,j2r),e(nn,C2e),e(C2e,D2r),e(nn,G2r),e(nn,w2e),e(w2e,O2r),e(nn,V2r),e(Br,X2r),e(Br,A2e),e(A2e,S5),e(S5,y2e),e(y2e,z2r),e(S5,Q2r),e(S5,uQ),e(uQ,W2r),e(S5,H2r),e(Br,U2r),M(R5,Br,null),b(f,nSe,_),b(f,lc,_),e(lc,B5),e(B5,L2e),M(v8,L2e,null),e(lc,J2r),e(lc,x2e),e(x2e,Y2r),b(f,sSe,_),b(f,ir,_),M(T8,ir,null),e(ir,K2r),e(ir,ic),e(ic,Z2r),e(ic,_Q),e(_Q,eFr),e(ic,oFr),e(ic,bQ),e(bQ,rFr),e(ic,tFr),e(ir,aFr),e(ir,M8),e(M8,nFr),e(M8,$2e),e($2e,sFr),e(M8,lFr),e(ir,iFr),e(ir,Pt),M(E8,Pt,null),e(Pt,dFr),e(Pt,k2e),e(k2e,cFr),e(Pt,fFr),e(Pt,dc),e(dc,mFr),e(dc,S2e),e(S2e,hFr),e(dc,gFr),e(dc,FQ),e(FQ,pFr),e(dc,uFr),e(Pt,_Fr),M(P5,Pt,null),e(ir,bFr),e(ir,Pr),M(C8,Pr,null),e(Pr,FFr),e(Pr,R2e),e(R2e,vFr),e(Pr,TFr),e(Pr,sn),e(sn,MFr),e(sn,B2e),e(B2e,EFr),e(sn,CFr),e(sn,P2e),e(P2e,wFr),e(sn,AFr),e(sn,I2e),e(I2e,yFr),e(sn,LFr),e(Pr,xFr),e(Pr,oe),e(oe,I5),e(I5,q2e),e(q2e,$Fr),e(I5,kFr),e(I5,vQ),e(vQ,SFr),e(I5,RFr),e(oe,BFr),e(oe,q5),e(q5,N2e),e(N2e,PFr),e(q5,IFr),e(q5,TQ),e(TQ,qFr),e(q5,NFr),e(oe,jFr),e(oe,N5),e(N5,j2e),e(j2e,DFr),e(N5,GFr),e(N5,MQ),e(MQ,OFr),e(N5,VFr),e(oe,XFr),e(oe,j5),e(j5,D2e),e(D2e,zFr),e(j5,QFr),e(j5,EQ),e(EQ,WFr),e(j5,HFr),e(oe,UFr),e(oe,D5),e(D5,G2e),e(G2e,JFr),e(D5,YFr),e(D5,CQ),e(CQ,KFr),e(D5,ZFr),e(oe,evr),e(oe,G5),e(G5,O2e),e(O2e,ovr),e(G5,rvr),e(G5,wQ),e(wQ,tvr),e(G5,avr),e(oe,nvr),e(oe,O5),e(O5,V2e),e(V2e,svr),e(O5,lvr),e(O5,AQ),e(AQ,ivr),e(O5,dvr),e(oe,cvr),e(oe,V5),e(V5,X2e),e(X2e,fvr),e(V5,mvr),e(V5,yQ),e(yQ,hvr),e(V5,gvr),e(oe,pvr),e(oe,X5),e(X5,z2e),e(z2e,uvr),e(X5,_vr),e(X5,LQ),e(LQ,bvr),e(X5,Fvr),e(oe,vvr),e(oe,z5),e(z5,Q2e),e(Q2e,Tvr),e(z5,Mvr),e(z5,xQ),e(xQ,Evr),e(z5,Cvr),e(oe,wvr),e(oe,Q5),e(Q5,W2e),e(W2e,Avr),e(Q5,yvr),e(Q5,$Q),e($Q,Lvr),e(Q5,xvr),e(oe,$vr),e(oe,W5),e(W5,H2e),e(H2e,kvr),e(W5,Svr),e(W5,kQ),e(kQ,Rvr),e(W5,Bvr),e(oe,Pvr),e(oe,H5),e(H5,U2e),e(U2e,Ivr),e(H5,qvr),e(H5,SQ),e(SQ,Nvr),e(H5,jvr),e(oe,Dvr),e(oe,U5),e(U5,J2e),e(J2e,Gvr),e(U5,Ovr),e(U5,RQ),e(RQ,Vvr),e(U5,Xvr),e(oe,zvr),e(oe,J5),e(J5,Y2e),e(Y2e,Qvr),e(J5,Wvr),e(J5,BQ),e(BQ,Hvr),e(J5,Uvr),e(oe,Jvr),e(oe,Y5),e(Y5,K2e),e(K2e,Yvr),e(Y5,Kvr),e(Y5,PQ),e(PQ,Zvr),e(Y5,e1r),e(oe,o1r),e(oe,K5),e(K5,Z2e),e(Z2e,r1r),e(K5,t1r),e(K5,IQ),e(IQ,a1r),e(K5,n1r),e(oe,s1r),e(oe,Z5),e(Z5,eFe),e(eFe,l1r),e(Z5,i1r),e(Z5,qQ),e(qQ,d1r),e(Z5,c1r),e(oe,f1r),e(oe,eC),e(eC,oFe),e(oFe,m1r),e(eC,h1r),e(eC,NQ),e(NQ,g1r),e(eC,p1r),e(oe,u1r),e(oe,oC),e(oC,rFe),e(rFe,_1r),e(oC,b1r),e(oC,jQ),e(jQ,F1r),e(oC,v1r),e(oe,T1r),e(oe,rC),e(rC,tFe),e(tFe,M1r),e(rC,E1r),e(rC,DQ),e(DQ,C1r),e(rC,w1r),e(oe,A1r),e(oe,tC),e(tC,aFe),e(aFe,y1r),e(tC,L1r),e(tC,GQ),e(GQ,x1r),e(tC,$1r),e(oe,k1r),e(oe,aC),e(aC,nFe),e(nFe,S1r),e(aC,R1r),e(aC,OQ),e(OQ,B1r),e(aC,P1r),e(oe,I1r),e(oe,nC),e(nC,sFe),e(sFe,q1r),e(nC,N1r),e(nC,VQ),e(VQ,j1r),e(nC,D1r),e(oe,G1r),e(oe,sC),e(sC,lFe),e(lFe,O1r),e(sC,V1r),e(sC,XQ),e(XQ,X1r),e(sC,z1r),e(Pr,Q1r),M(lC,Pr,null),b(f,lSe,_),b(f,cc,_),e(cc,iC),e(iC,iFe),M(w8,iFe,null),e(cc,W1r),e(cc,dFe),e(dFe,H1r),b(f,iSe,_),b(f,dr,_),M(A8,dr,null),e(dr,U1r),e(dr,fc),e(fc,J1r),e(fc,zQ),e(zQ,Y1r),e(fc,K1r),e(fc,QQ),e(QQ,Z1r),e(fc,eTr),e(dr,oTr),e(dr,y8),e(y8,rTr),e(y8,cFe),e(cFe,tTr),e(y8,aTr),e(dr,nTr),e(dr,It),M(L8,It,null),e(It,sTr),e(It,fFe),e(fFe,lTr),e(It,iTr),e(It,mc),e(mc,dTr),e(mc,mFe),e(mFe,cTr),e(mc,fTr),e(mc,WQ),e(WQ,mTr),e(mc,hTr),e(It,gTr),M(dC,It,null),e(dr,pTr),e(dr,Ir),M(x8,Ir,null),e(Ir,uTr),e(Ir,hFe),e(hFe,_Tr),e(Ir,bTr),e(Ir,ln),e(ln,FTr),e(ln,gFe),e(gFe,vTr),e(ln,TTr),e(ln,pFe),e(pFe,MTr),e(ln,ETr),e(ln,uFe),e(uFe,CTr),e(ln,wTr),e(Ir,ATr),e(Ir,Hr),e(Hr,cC),e(cC,_Fe),e(_Fe,yTr),e(cC,LTr),e(cC,HQ),e(HQ,xTr),e(cC,$Tr),e(Hr,kTr),e(Hr,fC),e(fC,bFe),e(bFe,STr),e(fC,RTr),e(fC,UQ),e(UQ,BTr),e(fC,PTr),e(Hr,ITr),e(Hr,mC),e(mC,FFe),e(FFe,qTr),e(mC,NTr),e(mC,JQ),e(JQ,jTr),e(mC,DTr),e(Hr,GTr),e(Hr,hC),e(hC,vFe),e(vFe,OTr),e(hC,VTr),e(hC,YQ),e(YQ,XTr),e(hC,zTr),e(Hr,QTr),e(Hr,gC),e(gC,TFe),e(TFe,WTr),e(gC,HTr),e(gC,KQ),e(KQ,UTr),e(gC,JTr),e(Ir,YTr),M(pC,Ir,null),b(f,dSe,_),b(f,hc,_),e(hc,uC),e(uC,MFe),M($8,MFe,null),e(hc,KTr),e(hc,EFe),e(EFe,ZTr),b(f,cSe,_),b(f,cr,_),M(k8,cr,null),e(cr,eMr),e(cr,gc),e(gc,oMr),e(gc,ZQ),e(ZQ,rMr),e(gc,tMr),e(gc,eW),e(eW,aMr),e(gc,nMr),e(cr,sMr),e(cr,S8),e(S8,lMr),e(S8,CFe),e(CFe,iMr),e(S8,dMr),e(cr,cMr),e(cr,qt),M(R8,qt,null),e(qt,fMr),e(qt,wFe),e(wFe,mMr),e(qt,hMr),e(qt,pc),e(pc,gMr),e(pc,AFe),e(AFe,pMr),e(pc,uMr),e(pc,oW),e(oW,_Mr),e(pc,bMr),e(qt,FMr),M(_C,qt,null),e(cr,vMr),e(cr,qr),M(B8,qr,null),e(qr,TMr),e(qr,yFe),e(yFe,MMr),e(qr,EMr),e(qr,dn),e(dn,CMr),e(dn,LFe),e(LFe,wMr),e(dn,AMr),e(dn,xFe),e(xFe,yMr),e(dn,LMr),e(dn,$Fe),e($Fe,xMr),e(dn,$Mr),e(qr,kMr),e(qr,be),e(be,bC),e(bC,kFe),e(kFe,SMr),e(bC,RMr),e(bC,rW),e(rW,BMr),e(bC,PMr),e(be,IMr),e(be,FC),e(FC,SFe),e(SFe,qMr),e(FC,NMr),e(FC,tW),e(tW,jMr),e(FC,DMr),e(be,GMr),e(be,vC),e(vC,RFe),e(RFe,OMr),e(vC,VMr),e(vC,aW),e(aW,XMr),e(vC,zMr),e(be,QMr),e(be,TC),e(TC,BFe),e(BFe,WMr),e(TC,HMr),e(TC,nW),e(nW,UMr),e(TC,JMr),e(be,YMr),e(be,MC),e(MC,PFe),e(PFe,KMr),e(MC,ZMr),e(MC,sW),e(sW,e4r),e(MC,o4r),e(be,r4r),e(be,EC),e(EC,IFe),e(IFe,t4r),e(EC,a4r),e(EC,lW),e(lW,n4r),e(EC,s4r),e(be,l4r),e(be,CC),e(CC,qFe),e(qFe,i4r),e(CC,d4r),e(CC,iW),e(iW,c4r),e(CC,f4r),e(be,m4r),e(be,wC),e(wC,NFe),e(NFe,h4r),e(wC,g4r),e(wC,dW),e(dW,p4r),e(wC,u4r),e(be,_4r),e(be,AC),e(AC,jFe),e(jFe,b4r),e(AC,F4r),e(AC,cW),e(cW,v4r),e(AC,T4r),e(be,M4r),e(be,yC),e(yC,DFe),e(DFe,E4r),e(yC,C4r),e(yC,fW),e(fW,w4r),e(yC,A4r),e(be,y4r),e(be,LC),e(LC,GFe),e(GFe,L4r),e(LC,x4r),e(LC,mW),e(mW,$4r),e(LC,k4r),e(be,S4r),e(be,xC),e(xC,OFe),e(OFe,R4r),e(xC,B4r),e(xC,hW),e(hW,P4r),e(xC,I4r),e(qr,q4r),M($C,qr,null),b(f,fSe,_),b(f,uc,_),e(uc,kC),e(kC,VFe),M(P8,VFe,null),e(uc,N4r),e(uc,XFe),e(XFe,j4r),b(f,mSe,_),b(f,fr,_),M(I8,fr,null),e(fr,D4r),e(fr,_c),e(_c,G4r),e(_c,gW),e(gW,O4r),e(_c,V4r),e(_c,pW),e(pW,X4r),e(_c,z4r),e(fr,Q4r),e(fr,q8),e(q8,W4r),e(q8,zFe),e(zFe,H4r),e(q8,U4r),e(fr,J4r),e(fr,Nt),M(N8,Nt,null),e(Nt,Y4r),e(Nt,QFe),e(QFe,K4r),e(Nt,Z4r),e(Nt,bc),e(bc,eEr),e(bc,WFe),e(WFe,oEr),e(bc,rEr),e(bc,uW),e(uW,tEr),e(bc,aEr),e(Nt,nEr),M(SC,Nt,null),e(fr,sEr),e(fr,Nr),M(j8,Nr,null),e(Nr,lEr),e(Nr,HFe),e(HFe,iEr),e(Nr,dEr),e(Nr,cn),e(cn,cEr),e(cn,UFe),e(UFe,fEr),e(cn,mEr),e(cn,JFe),e(JFe,hEr),e(cn,gEr),e(cn,YFe),e(YFe,pEr),e(cn,uEr),e(Nr,_Er),e(Nr,Ce),e(Ce,RC),e(RC,KFe),e(KFe,bEr),e(RC,FEr),e(RC,_W),e(_W,vEr),e(RC,TEr),e(Ce,MEr),e(Ce,BC),e(BC,ZFe),e(ZFe,EEr),e(BC,CEr),e(BC,bW),e(bW,wEr),e(BC,AEr),e(Ce,yEr),e(Ce,PC),e(PC,eve),e(eve,LEr),e(PC,xEr),e(PC,FW),e(FW,$Er),e(PC,kEr),e(Ce,SEr),e(Ce,IC),e(IC,ove),e(ove,REr),e(IC,BEr),e(IC,vW),e(vW,PEr),e(IC,IEr),e(Ce,qEr),e(Ce,qC),e(qC,rve),e(rve,NEr),e(qC,jEr),e(qC,TW),e(TW,DEr),e(qC,GEr),e(Ce,OEr),e(Ce,NC),e(NC,tve),e(tve,VEr),e(NC,XEr),e(NC,MW),e(MW,zEr),e(NC,QEr),e(Ce,WEr),e(Ce,jC),e(jC,ave),e(ave,HEr),e(jC,UEr),e(jC,EW),e(EW,JEr),e(jC,YEr),e(Ce,KEr),e(Ce,DC),e(DC,nve),e(nve,ZEr),e(DC,e5r),e(DC,CW),e(CW,o5r),e(DC,r5r),e(Ce,t5r),e(Ce,GC),e(GC,sve),e(sve,a5r),e(GC,n5r),e(GC,wW),e(wW,s5r),e(GC,l5r),e(Ce,i5r),e(Ce,OC),e(OC,lve),e(lve,d5r),e(OC,c5r),e(OC,AW),e(AW,f5r),e(OC,m5r),e(Nr,h5r),M(VC,Nr,null),b(f,hSe,_),b(f,Fc,_),e(Fc,XC),e(XC,ive),M(D8,ive,null),e(Fc,g5r),e(Fc,dve),e(dve,p5r),b(f,gSe,_),b(f,mr,_),M(G8,mr,null),e(mr,u5r),e(mr,vc),e(vc,_5r),e(vc,yW),e(yW,b5r),e(vc,F5r),e(vc,LW),e(LW,v5r),e(vc,T5r),e(mr,M5r),e(mr,O8),e(O8,E5r),e(O8,cve),e(cve,C5r),e(O8,w5r),e(mr,A5r),e(mr,jt),M(V8,jt,null),e(jt,y5r),e(jt,fve),e(fve,L5r),e(jt,x5r),e(jt,Tc),e(Tc,$5r),e(Tc,mve),e(mve,k5r),e(Tc,S5r),e(Tc,xW),e(xW,R5r),e(Tc,B5r),e(jt,P5r),M(zC,jt,null),e(mr,I5r),e(mr,jr),M(X8,jr,null),e(jr,q5r),e(jr,hve),e(hve,N5r),e(jr,j5r),e(jr,fn),e(fn,D5r),e(fn,gve),e(gve,G5r),e(fn,O5r),e(fn,pve),e(pve,V5r),e(fn,X5r),e(fn,uve),e(uve,z5r),e(fn,Q5r),e(jr,W5r),e(jr,xe),e(xe,QC),e(QC,_ve),e(_ve,H5r),e(QC,U5r),e(QC,$W),e($W,J5r),e(QC,Y5r),e(xe,K5r),e(xe,WC),e(WC,bve),e(bve,Z5r),e(WC,eCr),e(WC,kW),e(kW,oCr),e(WC,rCr),e(xe,tCr),e(xe,HC),e(HC,Fve),e(Fve,aCr),e(HC,nCr),e(HC,SW),e(SW,sCr),e(HC,lCr),e(xe,iCr),e(xe,UC),e(UC,vve),e(vve,dCr),e(UC,cCr),e(UC,RW),e(RW,fCr),e(UC,mCr),e(xe,hCr),e(xe,JC),e(JC,Tve),e(Tve,gCr),e(JC,pCr),e(JC,BW),e(BW,uCr),e(JC,_Cr),e(xe,bCr),e(xe,YC),e(YC,Mve),e(Mve,FCr),e(YC,vCr),e(YC,PW),e(PW,TCr),e(YC,MCr),e(xe,ECr),e(xe,KC),e(KC,Eve),e(Eve,CCr),e(KC,wCr),e(KC,IW),e(IW,ACr),e(KC,yCr),e(xe,LCr),e(xe,ZC),e(ZC,Cve),e(Cve,xCr),e(ZC,$Cr),e(ZC,qW),e(qW,kCr),e(ZC,SCr),e(xe,RCr),e(xe,e3),e(e3,wve),e(wve,BCr),e(e3,PCr),e(e3,NW),e(NW,ICr),e(e3,qCr),e(jr,NCr),M(o3,jr,null),b(f,pSe,_),b(f,Mc,_),e(Mc,r3),e(r3,Ave),M(z8,Ave,null),e(Mc,jCr),e(Mc,yve),e(yve,DCr),b(f,uSe,_),b(f,hr,_),M(Q8,hr,null),e(hr,GCr),e(hr,Ec),e(Ec,OCr),e(Ec,jW),e(jW,VCr),e(Ec,XCr),e(Ec,DW),e(DW,zCr),e(Ec,QCr),e(hr,WCr),e(hr,W8),e(W8,HCr),e(W8,Lve),e(Lve,UCr),e(W8,JCr),e(hr,YCr),e(hr,Dt),M(H8,Dt,null),e(Dt,KCr),e(Dt,xve),e(xve,ZCr),e(Dt,e3r),e(Dt,Cc),e(Cc,o3r),e(Cc,$ve),e($ve,r3r),e(Cc,t3r),e(Cc,GW),e(GW,a3r),e(Cc,n3r),e(Dt,s3r),M(t3,Dt,null),e(hr,l3r),e(hr,Dr),M(U8,Dr,null),e(Dr,i3r),e(Dr,kve),e(kve,d3r),e(Dr,c3r),e(Dr,mn),e(mn,f3r),e(mn,Sve),e(Sve,m3r),e(mn,h3r),e(mn,Rve),e(Rve,g3r),e(mn,p3r),e(mn,Bve),e(Bve,u3r),e(mn,_3r),e(Dr,b3r),e(Dr,we),e(we,a3),e(a3,Pve),e(Pve,F3r),e(a3,v3r),e(a3,OW),e(OW,T3r),e(a3,M3r),e(we,E3r),e(we,n3),e(n3,Ive),e(Ive,C3r),e(n3,w3r),e(n3,VW),e(VW,A3r),e(n3,y3r),e(we,L3r),e(we,s3),e(s3,qve),e(qve,x3r),e(s3,$3r),e(s3,XW),e(XW,k3r),e(s3,S3r),e(we,R3r),e(we,l3),e(l3,Nve),e(Nve,B3r),e(l3,P3r),e(l3,zW),e(zW,I3r),e(l3,q3r),e(we,N3r),e(we,i3),e(i3,jve),e(jve,j3r),e(i3,D3r),e(i3,QW),e(QW,G3r),e(i3,O3r),e(we,V3r),e(we,d3),e(d3,Dve),e(Dve,X3r),e(d3,z3r),e(d3,WW),e(WW,Q3r),e(d3,W3r),e(we,H3r),e(we,c3),e(c3,Gve),e(Gve,U3r),e(c3,J3r),e(c3,HW),e(HW,Y3r),e(c3,K3r),e(we,Z3r),e(we,f3),e(f3,Ove),e(Ove,ewr),e(f3,owr),e(f3,UW),e(UW,rwr),e(f3,twr),e(we,awr),e(we,m3),e(m3,Vve),e(Vve,nwr),e(m3,swr),e(m3,JW),e(JW,lwr),e(m3,iwr),e(we,dwr),e(we,h3),e(h3,Xve),e(Xve,cwr),e(h3,fwr),e(h3,YW),e(YW,mwr),e(h3,hwr),e(Dr,gwr),M(g3,Dr,null),b(f,_Se,_),b(f,wc,_),e(wc,p3),e(p3,zve),M(J8,zve,null),e(wc,pwr),e(wc,Qve),e(Qve,uwr),b(f,bSe,_),b(f,gr,_),M(Y8,gr,null),e(gr,_wr),e(gr,Ac),e(Ac,bwr),e(Ac,KW),e(KW,Fwr),e(Ac,vwr),e(Ac,ZW),e(ZW,Twr),e(Ac,Mwr),e(gr,Ewr),e(gr,K8),e(K8,Cwr),e(K8,Wve),e(Wve,wwr),e(K8,Awr),e(gr,ywr),e(gr,Gt),M(Z8,Gt,null),e(Gt,Lwr),e(Gt,Hve),e(Hve,xwr),e(Gt,$wr),e(Gt,yc),e(yc,kwr),e(yc,Uve),e(Uve,Swr),e(yc,Rwr),e(yc,eH),e(eH,Bwr),e(yc,Pwr),e(Gt,Iwr),M(u3,Gt,null),e(gr,qwr),e(gr,Gr),M(ex,Gr,null),e(Gr,Nwr),e(Gr,Jve),e(Jve,jwr),e(Gr,Dwr),e(Gr,hn),e(hn,Gwr),e(hn,Yve),e(Yve,Owr),e(hn,Vwr),e(hn,Kve),e(Kve,Xwr),e(hn,zwr),e(hn,Zve),e(Zve,Qwr),e(hn,Wwr),e(Gr,Hwr),e(Gr,Ae),e(Ae,_3),e(_3,e1e),e(e1e,Uwr),e(_3,Jwr),e(_3,oH),e(oH,Ywr),e(_3,Kwr),e(Ae,Zwr),e(Ae,b3),e(b3,o1e),e(o1e,eAr),e(b3,oAr),e(b3,rH),e(rH,rAr),e(b3,tAr),e(Ae,aAr),e(Ae,F3),e(F3,r1e),e(r1e,nAr),e(F3,sAr),e(F3,tH),e(tH,lAr),e(F3,iAr),e(Ae,dAr),e(Ae,v3),e(v3,t1e),e(t1e,cAr),e(v3,fAr),e(v3,aH),e(aH,mAr),e(v3,hAr),e(Ae,gAr),e(Ae,T3),e(T3,a1e),e(a1e,pAr),e(T3,uAr),e(T3,nH),e(nH,_Ar),e(T3,bAr),e(Ae,FAr),e(Ae,M3),e(M3,n1e),e(n1e,vAr),e(M3,TAr),e(M3,sH),e(sH,MAr),e(M3,EAr),e(Ae,CAr),e(Ae,E3),e(E3,s1e),e(s1e,wAr),e(E3,AAr),e(E3,lH),e(lH,yAr),e(E3,LAr),e(Ae,xAr),e(Ae,C3),e(C3,l1e),e(l1e,$Ar),e(C3,kAr),e(C3,iH),e(iH,SAr),e(C3,RAr),e(Ae,BAr),e(Ae,w3),e(w3,i1e),e(i1e,PAr),e(w3,IAr),e(w3,dH),e(dH,qAr),e(w3,NAr),e(Ae,jAr),e(Ae,A3),e(A3,d1e),e(d1e,DAr),e(A3,GAr),e(A3,cH),e(cH,OAr),e(A3,VAr),e(Gr,XAr),M(y3,Gr,null),b(f,FSe,_),b(f,Lc,_),e(Lc,L3),e(L3,c1e),M(ox,c1e,null),e(Lc,zAr),e(Lc,f1e),e(f1e,QAr),b(f,vSe,_),b(f,pr,_),M(rx,pr,null),e(pr,WAr),e(pr,xc),e(xc,HAr),e(xc,fH),e(fH,UAr),e(xc,JAr),e(xc,mH),e(mH,YAr),e(xc,KAr),e(pr,ZAr),e(pr,tx),e(tx,e0r),e(tx,m1e),e(m1e,o0r),e(tx,r0r),e(pr,t0r),e(pr,Ot),M(ax,Ot,null),e(Ot,a0r),e(Ot,h1e),e(h1e,n0r),e(Ot,s0r),e(Ot,$c),e($c,l0r),e($c,g1e),e(g1e,i0r),e($c,d0r),e($c,hH),e(hH,c0r),e($c,f0r),e(Ot,m0r),M(x3,Ot,null),e(pr,h0r),e(pr,Or),M(nx,Or,null),e(Or,g0r),e(Or,p1e),e(p1e,p0r),e(Or,u0r),e(Or,gn),e(gn,_0r),e(gn,u1e),e(u1e,b0r),e(gn,F0r),e(gn,_1e),e(_1e,v0r),e(gn,T0r),e(gn,b1e),e(b1e,M0r),e(gn,E0r),e(Or,C0r),e(Or,Ne),e(Ne,$3),e($3,F1e),e(F1e,w0r),e($3,A0r),e($3,gH),e(gH,y0r),e($3,L0r),e(Ne,x0r),e(Ne,k3),e(k3,v1e),e(v1e,$0r),e(k3,k0r),e(k3,pH),e(pH,S0r),e(k3,R0r),e(Ne,B0r),e(Ne,S3),e(S3,T1e),e(T1e,P0r),e(S3,I0r),e(S3,uH),e(uH,q0r),e(S3,N0r),e(Ne,j0r),e(Ne,R3),e(R3,M1e),e(M1e,D0r),e(R3,G0r),e(R3,_H),e(_H,O0r),e(R3,V0r),e(Ne,X0r),e(Ne,B3),e(B3,E1e),e(E1e,z0r),e(B3,Q0r),e(B3,bH),e(bH,W0r),e(B3,H0r),e(Ne,U0r),e(Ne,P3),e(P3,C1e),e(C1e,J0r),e(P3,Y0r),e(P3,FH),e(FH,K0r),e(P3,Z0r),e(Ne,e6r),e(Ne,I3),e(I3,w1e),e(w1e,o6r),e(I3,r6r),e(I3,vH),e(vH,t6r),e(I3,a6r),e(Ne,n6r),e(Ne,q3),e(q3,A1e),e(A1e,s6r),e(q3,l6r),e(q3,TH),e(TH,i6r),e(q3,d6r),e(Or,c6r),M(N3,Or,null),b(f,TSe,_),b(f,kc,_),e(kc,j3),e(j3,y1e),M(sx,y1e,null),e(kc,f6r),e(kc,L1e),e(L1e,m6r),b(f,MSe,_),b(f,ur,_),M(lx,ur,null),e(ur,h6r),e(ur,Sc),e(Sc,g6r),e(Sc,MH),e(MH,p6r),e(Sc,u6r),e(Sc,EH),e(EH,_6r),e(Sc,b6r),e(ur,F6r),e(ur,ix),e(ix,v6r),e(ix,x1e),e(x1e,T6r),e(ix,M6r),e(ur,E6r),e(ur,Vt),M(dx,Vt,null),e(Vt,C6r),e(Vt,$1e),e($1e,w6r),e(Vt,A6r),e(Vt,Rc),e(Rc,y6r),e(Rc,k1e),e(k1e,L6r),e(Rc,x6r),e(Rc,CH),e(CH,$6r),e(Rc,k6r),e(Vt,S6r),M(D3,Vt,null),e(ur,R6r),e(ur,Vr),M(cx,Vr,null),e(Vr,B6r),e(Vr,S1e),e(S1e,P6r),e(Vr,I6r),e(Vr,pn),e(pn,q6r),e(pn,R1e),e(R1e,N6r),e(pn,j6r),e(pn,B1e),e(B1e,D6r),e(pn,G6r),e(pn,P1e),e(P1e,O6r),e(pn,V6r),e(Vr,X6r),e(Vr,je),e(je,G3),e(G3,I1e),e(I1e,z6r),e(G3,Q6r),e(G3,wH),e(wH,W6r),e(G3,H6r),e(je,U6r),e(je,O3),e(O3,q1e),e(q1e,J6r),e(O3,Y6r),e(O3,AH),e(AH,K6r),e(O3,Z6r),e(je,eyr),e(je,V3),e(V3,N1e),e(N1e,oyr),e(V3,ryr),e(V3,yH),e(yH,tyr),e(V3,ayr),e(je,nyr),e(je,X3),e(X3,j1e),e(j1e,syr),e(X3,lyr),e(X3,LH),e(LH,iyr),e(X3,dyr),e(je,cyr),e(je,z3),e(z3,D1e),e(D1e,fyr),e(z3,myr),e(z3,xH),e(xH,hyr),e(z3,gyr),e(je,pyr),e(je,Q3),e(Q3,G1e),e(G1e,uyr),e(Q3,_yr),e(Q3,$H),e($H,byr),e(Q3,Fyr),e(je,vyr),e(je,W3),e(W3,O1e),e(O1e,Tyr),e(W3,Myr),e(W3,kH),e(kH,Eyr),e(W3,Cyr),e(je,wyr),e(je,H3),e(H3,V1e),e(V1e,Ayr),e(H3,yyr),e(H3,SH),e(SH,Lyr),e(H3,xyr),e(Vr,$yr),M(U3,Vr,null),b(f,ESe,_),b(f,Bc,_),e(Bc,J3),e(J3,X1e),M(fx,X1e,null),e(Bc,kyr),e(Bc,z1e),e(z1e,Syr),b(f,CSe,_),b(f,_r,_),M(mx,_r,null),e(_r,Ryr),e(_r,Pc),e(Pc,Byr),e(Pc,RH),e(RH,Pyr),e(Pc,Iyr),e(Pc,BH),e(BH,qyr),e(Pc,Nyr),e(_r,jyr),e(_r,hx),e(hx,Dyr),e(hx,Q1e),e(Q1e,Gyr),e(hx,Oyr),e(_r,Vyr),e(_r,Xt),M(gx,Xt,null),e(Xt,Xyr),e(Xt,W1e),e(W1e,zyr),e(Xt,Qyr),e(Xt,Ic),e(Ic,Wyr),e(Ic,H1e),e(H1e,Hyr),e(Ic,Uyr),e(Ic,PH),e(PH,Jyr),e(Ic,Yyr),e(Xt,Kyr),M(Y3,Xt,null),e(_r,Zyr),e(_r,Xr),M(px,Xr,null),e(Xr,eLr),e(Xr,U1e),e(U1e,oLr),e(Xr,rLr),e(Xr,un),e(un,tLr),e(un,J1e),e(J1e,aLr),e(un,nLr),e(un,Y1e),e(Y1e,sLr),e(un,lLr),e(un,K1e),e(K1e,iLr),e(un,dLr),e(Xr,cLr),e(Xr,Z1e),e(Z1e,K3),e(K3,eTe),e(eTe,fLr),e(K3,mLr),e(K3,IH),e(IH,hLr),e(K3,gLr),e(Xr,pLr),M(Z3,Xr,null),b(f,wSe,_),b(f,qc,_),e(qc,ew),e(ew,oTe),M(ux,oTe,null),e(qc,uLr),e(qc,rTe),e(rTe,_Lr),b(f,ASe,_),b(f,br,_),M(_x,br,null),e(br,bLr),e(br,Nc),e(Nc,FLr),e(Nc,qH),e(qH,vLr),e(Nc,TLr),e(Nc,NH),e(NH,MLr),e(Nc,ELr),e(br,CLr),e(br,bx),e(bx,wLr),e(bx,tTe),e(tTe,ALr),e(bx,yLr),e(br,LLr),e(br,zt),M(Fx,zt,null),e(zt,xLr),e(zt,aTe),e(aTe,$Lr),e(zt,kLr),e(zt,jc),e(jc,SLr),e(jc,nTe),e(nTe,RLr),e(jc,BLr),e(jc,jH),e(jH,PLr),e(jc,ILr),e(zt,qLr),M(ow,zt,null),e(br,NLr),e(br,zr),M(vx,zr,null),e(zr,jLr),e(zr,sTe),e(sTe,DLr),e(zr,GLr),e(zr,_n),e(_n,OLr),e(_n,lTe),e(lTe,VLr),e(_n,XLr),e(_n,iTe),e(iTe,zLr),e(_n,QLr),e(_n,dTe),e(dTe,WLr),e(_n,HLr),e(zr,ULr),e(zr,Tx),e(Tx,rw),e(rw,cTe),e(cTe,JLr),e(rw,YLr),e(rw,DH),e(DH,KLr),e(rw,ZLr),e(Tx,e8r),e(Tx,tw),e(tw,fTe),e(fTe,o8r),e(tw,r8r),e(tw,GH),e(GH,t8r),e(tw,a8r),e(zr,n8r),M(aw,zr,null),b(f,ySe,_),b(f,Dc,_),e(Dc,nw),e(nw,mTe),M(Mx,mTe,null),e(Dc,s8r),e(Dc,hTe),e(hTe,l8r),b(f,LSe,_),b(f,Fr,_),M(Ex,Fr,null),e(Fr,i8r),e(Fr,Gc),e(Gc,d8r),e(Gc,OH),e(OH,c8r),e(Gc,f8r),e(Gc,VH),e(VH,m8r),e(Gc,h8r),e(Fr,g8r),e(Fr,Cx),e(Cx,p8r),e(Cx,gTe),e(gTe,u8r),e(Cx,_8r),e(Fr,b8r),e(Fr,Qt),M(wx,Qt,null),e(Qt,F8r),e(Qt,pTe),e(pTe,v8r),e(Qt,T8r),e(Qt,Oc),e(Oc,M8r),e(Oc,uTe),e(uTe,E8r),e(Oc,C8r),e(Oc,XH),e(XH,w8r),e(Oc,A8r),e(Qt,y8r),M(sw,Qt,null),e(Fr,L8r),e(Fr,Qr),M(Ax,Qr,null),e(Qr,x8r),e(Qr,_Te),e(_Te,$8r),e(Qr,k8r),e(Qr,bn),e(bn,S8r),e(bn,bTe),e(bTe,R8r),e(bn,B8r),e(bn,FTe),e(FTe,P8r),e(bn,I8r),e(bn,vTe),e(vTe,q8r),e(bn,N8r),e(Qr,j8r),e(Qr,TTe),e(TTe,lw),e(lw,MTe),e(MTe,D8r),e(lw,G8r),e(lw,zH),e(zH,O8r),e(lw,V8r),e(Qr,X8r),M(iw,Qr,null),xSe=!0},p(f,[_]){const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),Yc.$set(yx);const ETe={};_&2&&(ETe.$$scope={dirty:_,ctx:f}),Xm.$set(ETe);const CTe={};_&2&&(CTe.$$scope={dirty:_,ctx:f}),Mh.$set(CTe);const wTe={};_&2&&(wTe.$$scope={dirty:_,ctx:f}),Vh.$set(wTe);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),Xh.$set(Lx);const ATe={};_&2&&(ATe.$$scope={dirty:_,ctx:f}),og.$set(ATe);const Fn={};_&2&&(Fn.$$scope={dirty:_,ctx:f}),rg.$set(Fn);const yTe={};_&2&&(yTe.$$scope={dirty:_,ctx:f}),ng.$set(yTe);const LTe={};_&2&&(LTe.$$scope={dirty:_,ctx:f}),Vp.$set(LTe);const xTe={};_&2&&(xTe.$$scope={dirty:_,ctx:f}),zp.$set(xTe);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),Su.$set(xx);const $Te={};_&2&&($Te.$$scope={dirty:_,ctx:f}),Bu.$set($Te);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),__.$set($x);const kTe={};_&2&&(kTe.$$scope={dirty:_,ctx:f}),F_.$set(kTe);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),rb.$set(kx);const STe={};_&2&&(STe.$$scope={dirty:_,ctx:f}),ab.$set(STe);const RTe={};_&2&&(RTe.$$scope={dirty:_,ctx:f}),Mb.$set(RTe);const BTe={};_&2&&(BTe.$$scope={dirty:_,ctx:f}),Cb.$set(BTe);const Vc={};_&2&&(Vc.$$scope={dirty:_,ctx:f}),b2.$set(Vc);const PTe={};_&2&&(PTe.$$scope={dirty:_,ctx:f}),v2.$set(PTe);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:f}),J2.$set(ITe);const qTe={};_&2&&(qTe.$$scope={dirty:_,ctx:f}),K2.$set(qTe);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),nF.$set(Sx);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),lF.$set(NTe);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),OF.$set(jTe);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),XF.$set(DTe);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),kv.$set(Ur);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),Rv.$set(Rx);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),Iv.$set(GTe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),Nv.$set(Bx);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),Uv.$set(OTe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),Yv.$set(Jr);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),e1.$set(VTe);const Xc={};_&2&&(Xc.$$scope={dirty:_,ctx:f}),r1.$set(Xc);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),m1.$set(XTe);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),g1.$set(zTe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),v1.$set(L);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),M1.$set(dw);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),S1.$set(QTe);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),B1.$set(WTe);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),N1.$set(cw);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),D1.$set(HTe);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),Q1.$set(UTe);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),H1.$set(fw);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),Z1.$set(JTe);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),oT.$set(YTe);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),aT.$set(mw);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),sT.$set(KTe);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),dT.$set(ZTe);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),fT.$set(hw);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),pT.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),_T.$set(oMe);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),vT.$set(gw);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),MT.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),cM.$set(tMe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),mM.$set(pw);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),PM.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),qM.$set(nMe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),UM.$set(uw);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),YM.$set(sMe);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),e4.$set(lMe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),r4.$set(_w);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),E4.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),w4.$set(dMe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),I4.$set(bw);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),N4.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),cE.$set(fMe);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),mE.$set(Fw);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),$E.$set(mMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),SE.$set(hMe);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),BE.$set(vw);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),IE.$set(gMe);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),t5.$set(pMe);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),n5.$set(Tw);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),w5.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),y5.$set(_Me);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),x5.$set(Mw);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),k5.$set(bMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),R5.$set(FMe);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),P5.$set(Ew);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),lC.$set(vMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),dC.$set(TMe);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),pC.$set(Cw);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),_C.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),$C.$set(EMe);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),SC.$set(ww);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),VC.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),zC.$set(wMe);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),o3.$set(Aw);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),t3.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),g3.$set(yMe);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),u3.$set(yw);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),y3.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),x3.$set(xMe);const Lw={};_&2&&(Lw.$$scope={dirty:_,ctx:f}),N3.$set(Lw);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),D3.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),U3.$set(kMe);const xw={};_&2&&(xw.$$scope={dirty:_,ctx:f}),Y3.$set(xw);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),Z3.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),ow.$set(RMe);const $w={};_&2&&($w.$$scope={dirty:_,ctx:f}),aw.$set($w);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),sw.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),iw.$set(PMe)},i(f){xSe||(E(d.$$.fragment,f),E(ba.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E(Yc.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(R0.$$.fragment,f),E(Xm.$$.fragment,f),E(B0.$$.fragment,f),E(P0.$$.fragment,f),E(I0.$$.fragment,f),E(j0.$$.fragment,f),E(Mh.$$.fragment,f),E(D0.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(z0.$$.fragment,f),E(Vh.$$.fragment,f),E(Xh.$$.fragment,f),E(Q0.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(Y0.$$.fragment,f),E(og.$$.fragment,f),E(rg.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(e6.$$.fragment,f),E(r6.$$.fragment,f),E(ng.$$.fragment,f),E(t6.$$.fragment,f),E(Vp.$$.fragment,f),E(a6.$$.fragment,f),E(n6.$$.fragment,f),E(l6.$$.fragment,f),E(zp.$$.fragment,f),E(i6.$$.fragment,f),E(Su.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(m6.$$.fragment,f),E(Bu.$$.fragment,f),E(h6.$$.fragment,f),E(__.$$.fragment,f),E(g6.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(F_.$$.fragment,f),E(b6.$$.fragment,f),E(rb.$$.fragment,f),E(F6.$$.fragment,f),E(v6.$$.fragment,f),E(M6.$$.fragment,f),E(ab.$$.fragment,f),E(E6.$$.fragment,f),E(Mb.$$.fragment,f),E(C6.$$.fragment,f),E(w6.$$.fragment,f),E(y6.$$.fragment,f),E(Cb.$$.fragment,f),E(L6.$$.fragment,f),E(b2.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(S6.$$.fragment,f),E(v2.$$.fragment,f),E(R6.$$.fragment,f),E(J2.$$.fragment,f),E(B6.$$.fragment,f),E(P6.$$.fragment,f),E(q6.$$.fragment,f),E(K2.$$.fragment,f),E(N6.$$.fragment,f),E(nF.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(O6.$$.fragment,f),E(lF.$$.fragment,f),E(V6.$$.fragment,f),E(OF.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(XF.$$.fragment,f),E(H6.$$.fragment,f),E(kv.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(K6.$$.fragment,f),E(Rv.$$.fragment,f),E(Z6.$$.fragment,f),E(Iv.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Nv.$$.fragment,f),E(ay.$$.fragment,f),E(Uv.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(Yv.$$.fragment,f),E(dy.$$.fragment,f),E(e1.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(hy.$$.fragment,f),E(r1.$$.fragment,f),E(gy.$$.fragment,f),E(m1.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(g1.$$.fragment,f),E(Fy.$$.fragment,f),E(v1.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(M1.$$.fragment,f),E(Cy.$$.fragment,f),E(S1.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(B1.$$.fragment,f),E(xy.$$.fragment,f),E(N1.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(D1.$$.fragment,f),E(Py.$$.fragment,f),E(Q1.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(H1.$$.fragment,f),E(Dy.$$.fragment,f),E(Z1.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(oT.$$.fragment,f),E(zy.$$.fragment,f),E(aT.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(sT.$$.fragment,f),E(Jy.$$.fragment,f),E(dT.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(fT.$$.fragment,f),E(oL.$$.fragment,f),E(pT.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(_T.$$.fragment,f),E(lL.$$.fragment,f),E(vT.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(MT.$$.fragment,f),E(mL.$$.fragment,f),E(cM.$$.fragment,f),E(hL.$$.fragment,f),E(gL.$$.fragment,f),E(uL.$$.fragment,f),E(mM.$$.fragment,f),E(_L.$$.fragment,f),E(PM.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(qM.$$.fragment,f),E(ML.$$.fragment,f),E(UM.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(YM.$$.fragment,f),E(yL.$$.fragment,f),E(e4.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(r4.$$.fragment,f),E(RL.$$.fragment,f),E(E4.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(w4.$$.fragment,f),E(NL.$$.fragment,f),E(I4.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(N4.$$.fragment,f),E(VL.$$.fragment,f),E(cE.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(mE.$$.fragment,f),E(HL.$$.fragment,f),E($E.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(SE.$$.fragment,f),E(ZL.$$.fragment,f),E(BE.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(IE.$$.fragment,f),E(a8.$$.fragment,f),E(t5.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(n5.$$.fragment,f),E(d8.$$.fragment,f),E(w5.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(h8.$$.fragment,f),E(y5.$$.fragment,f),E(g8.$$.fragment,f),E(x5.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(k5.$$.fragment,f),E(F8.$$.fragment,f),E(R5.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(P5.$$.fragment,f),E(C8.$$.fragment,f),E(lC.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(dC.$$.fragment,f),E(x8.$$.fragment,f),E(pC.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(_C.$$.fragment,f),E(B8.$$.fragment,f),E($C.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(SC.$$.fragment,f),E(j8.$$.fragment,f),E(VC.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(zC.$$.fragment,f),E(X8.$$.fragment,f),E(o3.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(t3.$$.fragment,f),E(U8.$$.fragment,f),E(g3.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(u3.$$.fragment,f),E(ex.$$.fragment,f),E(y3.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(x3.$$.fragment,f),E(nx.$$.fragment,f),E(N3.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(D3.$$.fragment,f),E(cx.$$.fragment,f),E(U3.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(Y3.$$.fragment,f),E(px.$$.fragment,f),E(Z3.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(Fx.$$.fragment,f),E(ow.$$.fragment,f),E(vx.$$.fragment,f),E(aw.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(sw.$$.fragment,f),E(Ax.$$.fragment,f),E(iw.$$.fragment,f),xSe=!0)},o(f){C(d.$$.fragment,f),C(ba.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C(Yc.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(R0.$$.fragment,f),C(Xm.$$.fragment,f),C(B0.$$.fragment,f),C(P0.$$.fragment,f),C(I0.$$.fragment,f),C(j0.$$.fragment,f),C(Mh.$$.fragment,f),C(D0.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(z0.$$.fragment,f),C(Vh.$$.fragment,f),C(Xh.$$.fragment,f),C(Q0.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(Y0.$$.fragment,f),C(og.$$.fragment,f),C(rg.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(e6.$$.fragment,f),C(r6.$$.fragment,f),C(ng.$$.fragment,f),C(t6.$$.fragment,f),C(Vp.$$.fragment,f),C(a6.$$.fragment,f),C(n6.$$.fragment,f),C(l6.$$.fragment,f),C(zp.$$.fragment,f),C(i6.$$.fragment,f),C(Su.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(m6.$$.fragment,f),C(Bu.$$.fragment,f),C(h6.$$.fragment,f),C(__.$$.fragment,f),C(g6.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(F_.$$.fragment,f),C(b6.$$.fragment,f),C(rb.$$.fragment,f),C(F6.$$.fragment,f),C(v6.$$.fragment,f),C(M6.$$.fragment,f),C(ab.$$.fragment,f),C(E6.$$.fragment,f),C(Mb.$$.fragment,f),C(C6.$$.fragment,f),C(w6.$$.fragment,f),C(y6.$$.fragment,f),C(Cb.$$.fragment,f),C(L6.$$.fragment,f),C(b2.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(S6.$$.fragment,f),C(v2.$$.fragment,f),C(R6.$$.fragment,f),C(J2.$$.fragment,f),C(B6.$$.fragment,f),C(P6.$$.fragment,f),C(q6.$$.fragment,f),C(K2.$$.fragment,f),C(N6.$$.fragment,f),C(nF.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(O6.$$.fragment,f),C(lF.$$.fragment,f),C(V6.$$.fragment,f),C(OF.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(XF.$$.fragment,f),C(H6.$$.fragment,f),C(kv.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(K6.$$.fragment,f),C(Rv.$$.fragment,f),C(Z6.$$.fragment,f),C(Iv.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Nv.$$.fragment,f),C(ay.$$.fragment,f),C(Uv.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(Yv.$$.fragment,f),C(dy.$$.fragment,f),C(e1.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(hy.$$.fragment,f),C(r1.$$.fragment,f),C(gy.$$.fragment,f),C(m1.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(g1.$$.fragment,f),C(Fy.$$.fragment,f),C(v1.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(M1.$$.fragment,f),C(Cy.$$.fragment,f),C(S1.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(B1.$$.fragment,f),C(xy.$$.fragment,f),C(N1.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(D1.$$.fragment,f),C(Py.$$.fragment,f),C(Q1.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(H1.$$.fragment,f),C(Dy.$$.fragment,f),C(Z1.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(oT.$$.fragment,f),C(zy.$$.fragment,f),C(aT.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(sT.$$.fragment,f),C(Jy.$$.fragment,f),C(dT.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(fT.$$.fragment,f),C(oL.$$.fragment,f),C(pT.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(_T.$$.fragment,f),C(lL.$$.fragment,f),C(vT.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(MT.$$.fragment,f),C(mL.$$.fragment,f),C(cM.$$.fragment,f),C(hL.$$.fragment,f),C(gL.$$.fragment,f),C(uL.$$.fragment,f),C(mM.$$.fragment,f),C(_L.$$.fragment,f),C(PM.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(qM.$$.fragment,f),C(ML.$$.fragment,f),C(UM.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(YM.$$.fragment,f),C(yL.$$.fragment,f),C(e4.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(r4.$$.fragment,f),C(RL.$$.fragment,f),C(E4.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(w4.$$.fragment,f),C(NL.$$.fragment,f),C(I4.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(N4.$$.fragment,f),C(VL.$$.fragment,f),C(cE.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(mE.$$.fragment,f),C(HL.$$.fragment,f),C($E.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(SE.$$.fragment,f),C(ZL.$$.fragment,f),C(BE.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(IE.$$.fragment,f),C(a8.$$.fragment,f),C(t5.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(n5.$$.fragment,f),C(d8.$$.fragment,f),C(w5.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(h8.$$.fragment,f),C(y5.$$.fragment,f),C(g8.$$.fragment,f),C(x5.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(k5.$$.fragment,f),C(F8.$$.fragment,f),C(R5.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(P5.$$.fragment,f),C(C8.$$.fragment,f),C(lC.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(dC.$$.fragment,f),C(x8.$$.fragment,f),C(pC.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(_C.$$.fragment,f),C(B8.$$.fragment,f),C($C.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(SC.$$.fragment,f),C(j8.$$.fragment,f),C(VC.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(zC.$$.fragment,f),C(X8.$$.fragment,f),C(o3.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(t3.$$.fragment,f),C(U8.$$.fragment,f),C(g3.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(u3.$$.fragment,f),C(ex.$$.fragment,f),C(y3.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(x3.$$.fragment,f),C(nx.$$.fragment,f),C(N3.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(D3.$$.fragment,f),C(cx.$$.fragment,f),C(U3.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(Y3.$$.fragment,f),C(px.$$.fragment,f),C(Z3.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(Fx.$$.fragment,f),C(ow.$$.fragment,f),C(vx.$$.fragment,f),C(aw.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(sw.$$.fragment,f),C(Ax.$$.fragment,f),C(iw.$$.fragment,f),xSe=!1},d(f){t(h),f&&t(F),f&&t(p),w(d),f&&t(Qc),f&&t(Yr),f&&t(Be),f&&t(Ge),f&&t(Hc),w(ba,f),f&&t(Oe),f&&t(Me),f&&t(To),f&&t(Fa),f&&t(L9e),f&&t(Zl),w(y0),f&&t(x9e),f&&t(Cn),f&&t($9e),w(L0,f),f&&t(k9e),f&&t(I7),f&&t(S9e),w(Yc,f),f&&t(R9e),f&&t(ei),w(x0),f&&t(B9e),f&&t(Mo),w($0),w(R0),w(Xm),w(B0),f&&t(P9e),f&&t(ri),w(P0),f&&t(I9e),f&&t(Eo),w(I0),w(j0),w(Mh),w(D0),f&&t(q9e),f&&t(ti),w(G0),f&&t(N9e),f&&t(Co),w(O0),w(z0),w(Vh),w(Xh),w(Q0),f&&t(j9e),f&&t(ai),w(W0),f&&t(D9e),f&&t(wo),w(H0),w(Y0),w(og),w(rg),w(K0),f&&t(G9e),f&&t(si),w(Z0),f&&t(O9e),f&&t(Ao),w(e6),w(r6),w(ng),w(t6),w(Vp),f&&t(V9e),f&&t(di),w(a6),f&&t(X9e),f&&t(yo),w(n6),w(l6),w(zp),w(i6),w(Su),f&&t(z9e),f&&t(mi),w(d6),f&&t(Q9e),f&&t(Lo),w(c6),w(m6),w(Bu),w(h6),w(__),f&&t(W9e),f&&t(pi),w(g6),f&&t(H9e),f&&t(xo),w(p6),w(_6),w(F_),w(b6),w(rb),f&&t(U9e),f&&t(bi),w(F6),f&&t(J9e),f&&t($o),w(v6),w(M6),w(ab),w(E6),w(Mb),f&&t(Y9e),f&&t(Ti),w(C6),f&&t(K9e),f&&t(ko),w(w6),w(y6),w(Cb),w(L6),w(b2),f&&t(Z9e),f&&t(Ci),w(x6),f&&t(eke),f&&t(So),w($6),w(S6),w(v2),w(R6),w(J2),f&&t(oke),f&&t(yi),w(B6),f&&t(rke),f&&t(Ro),w(P6),w(q6),w(K2),w(N6),w(nF),f&&t(tke),f&&t($i),w(j6),f&&t(ake),f&&t(Bo),w(D6),w(O6),w(lF),w(V6),w(OF),f&&t(nke),f&&t(Ri),w(X6),f&&t(ske),f&&t(Po),w(z6),w(W6),w(XF),w(H6),w(kv),f&&t(lke),f&&t(Ii),w(U6),f&&t(ike),f&&t(Io),w(J6),w(K6),w(Rv),w(Z6),w(Iv),f&&t(dke),f&&t(ji),w(ey),f&&t(cke),f&&t(qo),w(oy),w(ty),w(Nv),w(ay),w(Uv),f&&t(fke),f&&t(Oi),w(ny),f&&t(mke),f&&t(No),w(sy),w(iy),w(Yv),w(dy),w(e1),f&&t(hke),f&&t(zi),w(cy),f&&t(gke),f&&t(jo),w(fy),w(hy),w(r1),w(gy),w(m1),f&&t(pke),f&&t(Hi),w(py),f&&t(uke),f&&t(Do),w(uy),w(by),w(g1),w(Fy),w(v1),f&&t(_ke),f&&t(Yi),w(vy),f&&t(bke),f&&t(Go),w(Ty),w(Ey),w(M1),w(Cy),w(S1),f&&t(Fke),f&&t(ed),w(wy),f&&t(vke),f&&t(Oo),w(Ay),w(Ly),w(B1),w(xy),w(N1),f&&t(Tke),f&&t(td),w(ky),f&&t(Mke),f&&t(Vo),w(Sy),w(By),w(D1),w(Py),w(Q1),f&&t(Eke),f&&t(sd),w(Iy),f&&t(Cke),f&&t(Xo),w(qy),w(jy),w(H1),w(Dy),w(Z1),f&&t(wke),f&&t(cd),w(Gy),f&&t(Ake),f&&t(zo),w(Oy),w(Xy),w(oT),w(zy),w(aT),f&&t(yke),f&&t(hd),w(Qy),f&&t(Lke),f&&t(Qo),w(Wy),w(Uy),w(sT),w(Jy),w(dT),f&&t(xke),f&&t(ud),w(Yy),f&&t($ke),f&&t(Wo),w(Ky),w(eL),w(fT),w(oL),w(pT),f&&t(kke),f&&t(Fd),w(tL),f&&t(Ske),f&&t(Ho),w(aL),w(sL),w(_T),w(lL),w(vT),f&&t(Rke),f&&t(Md),w(iL),f&&t(Bke),f&&t(Uo),w(dL),w(fL),w(MT),w(mL),w(cM),f&&t(Pke),f&&t(wd),w(hL),f&&t(Ike),f&&t(Jo),w(gL),w(uL),w(mM),w(_L),w(PM),f&&t(qke),f&&t(Ld),w(bL),f&&t(Nke),f&&t(Yo),w(FL),w(TL),w(qM),w(ML),w(UM),f&&t(jke),f&&t(kd),w(EL),f&&t(Dke),f&&t(Ko),w(CL),w(AL),w(YM),w(yL),w(e4),f&&t(Gke),f&&t(Bd),w(xL),f&&t(Oke),f&&t(Zo),w($L),w(SL),w(r4),w(RL),w(E4),f&&t(Vke),f&&t(qd),w(BL),f&&t(Xke),f&&t(er),w(PL),w(qL),w(w4),w(NL),w(I4),f&&t(zke),f&&t(Dd),w(jL),f&&t(Qke),f&&t(or),w(DL),w(OL),w(N4),w(VL),w(cE),f&&t(Wke),f&&t(Vd),w(XL),f&&t(Hke),f&&t(rr),w(zL),w(WL),w(mE),w(HL),w($E),f&&t(Uke),f&&t(Qd),w(UL),f&&t(Jke),f&&t(tr),w(JL),w(KL),w(SE),w(ZL),w(BE),f&&t(Yke),f&&t(Ud),w(e8),f&&t(Kke),f&&t(ar),w(o8),w(t8),w(IE),w(a8),w(t5),f&&t(Zke),f&&t(Kd),w(n8),f&&t(eSe),f&&t(nr),w(s8),w(i8),w(n5),w(d8),w(w5),f&&t(oSe),f&&t(oc),w(c8),f&&t(rSe),f&&t(sr),w(f8),w(h8),w(y5),w(g8),w(x5),f&&t(tSe),f&&t(ac),w(p8),f&&t(aSe),f&&t(lr),w(u8),w(b8),w(k5),w(F8),w(R5),f&&t(nSe),f&&t(lc),w(v8),f&&t(sSe),f&&t(ir),w(T8),w(E8),w(P5),w(C8),w(lC),f&&t(lSe),f&&t(cc),w(w8),f&&t(iSe),f&&t(dr),w(A8),w(L8),w(dC),w(x8),w(pC),f&&t(dSe),f&&t(hc),w($8),f&&t(cSe),f&&t(cr),w(k8),w(R8),w(_C),w(B8),w($C),f&&t(fSe),f&&t(uc),w(P8),f&&t(mSe),f&&t(fr),w(I8),w(N8),w(SC),w(j8),w(VC),f&&t(hSe),f&&t(Fc),w(D8),f&&t(gSe),f&&t(mr),w(G8),w(V8),w(zC),w(X8),w(o3),f&&t(pSe),f&&t(Mc),w(z8),f&&t(uSe),f&&t(hr),w(Q8),w(H8),w(t3),w(U8),w(g3),f&&t(_Se),f&&t(wc),w(J8),f&&t(bSe),f&&t(gr),w(Y8),w(Z8),w(u3),w(ex),w(y3),f&&t(FSe),f&&t(Lc),w(ox),f&&t(vSe),f&&t(pr),w(rx),w(ax),w(x3),w(nx),w(N3),f&&t(TSe),f&&t(kc),w(sx),f&&t(MSe),f&&t(ur),w(lx),w(dx),w(D3),w(cx),w(U3),f&&t(ESe),f&&t(Bc),w(fx),f&&t(CSe),f&&t(_r),w(mx),w(gx),w(Y3),w(px),w(Z3),f&&t(wSe),f&&t(qc),w(ux),f&&t(ASe),f&&t(br),w(_x),w(Fx),w(ow),w(vx),w(aw),f&&t(ySe),f&&t(Dc),w(Mx),f&&t(LSe),f&&t(Fr),w(Ex),w(wx),w(sw),w(Ax),w(iw)}}}const Dvt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Gvt(A){return V2t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hvt extends j2t{constructor(h){super();D2t(this,h,Gvt,jvt,G2t,{})}}export{Hvt as default,Dvt as metadata};
