import{S as ho,i as mo,s as fo,e as o,k as d,w as _,t as s,M as po,c as n,d as r,m as c,a,x as v,h as l,b as i,F as e,g as m,y as b,L as uo,q as k,o as y,B,v as go}from"../../chunks/vendor-6b77c823.js";import{D as Oe}from"../../chunks/Docstring-1088f2fb.js";import{I as Te}from"../../chunks/IconCopyLink-7a11ce68.js";function _o($r){let w,Ue,z,A,we,U,gt,ze,_t,Ve,$,q,$e,V,vt,Ee,bt,Ke,F,kt,K,yt,Bt,We,R,Rt,W,Tt,wt,Q,zt,$t,Qe,E,S,xe,G,Et,Pe,xt,Ge,g,J,Pt,X,Ct,he,Mt,At,qt,x,Ft,me,St,Nt,fe,Dt,It,Je,P,N,Ce,Y,Lt,Me,jt,Xe,p,Z,Ht,Ae,Ot,Ut,D,qe,Vt,Kt,pe,Wt,Qt,Gt,ee,Jt,ue,Xt,Yt,Ye,C,I,Fe,te,Zt,Se,er,Ze,u,re,tr,oe,rr,Ne,or,nr,ar,L,ge,ir,sr,_e,lr,dr,cr,ne,hr,ve,mr,fr,et,M,j,De,ae,pr,Ie,ur,tt,f,ie,gr,Le,_r,vr,se,br,be,kr,yr,Br,le,Rr,de,Tr,wr,zr,ke,ce,rt;return U=new Te({}),V=new Te({}),G=new Te({}),J=new Oe({props:{name:"class transformers.RetriBertConfig",anchor:"transformers.RetriBertConfig",parameters:[{name:"vocab_size",val:" = 30522"},{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 8"},{name:"num_attention_heads",val:" = 12"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.1"},{name:"max_position_embeddings",val:" = 512"},{name:"type_vocab_size",val:" = 2"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"share_encoders",val:" = True"},{name:"projection_dim",val:" = 128"},{name:"pad_token_id",val:" = 0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.RetriBertConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 30522) &#x2014;
Vocabulary size of the RetriBERT model. Defines the number of different tokens that can be represented by
the <code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a>`,name:"vocab_size"},{anchor:"transformers.RetriBertConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.RetriBertConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.RetriBertConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.RetriBertConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.RetriBertConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.RetriBertConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.RetriBertConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.RetriBertConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.RetriBertConfig.type_vocab_size",description:`<strong>type_vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The vocabulary size of the <em>token_type_ids</em> passed into <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertModel">BertModel</a>.`,name:"type_vocab_size"},{anchor:"transformers.RetriBertConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.RetriBertConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.RetriBertConfig.share_encoders",description:`<strong>share_encoders</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to use the same Bert-type encoder for the queries and document`,name:"share_encoders"},{anchor:"transformers.RetriBertConfig.projection_dim",description:`<strong>projection_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 128) &#x2014;
Final dimension of the query and document representation after projection`,name:"projection_dim"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/retribert/configuration_retribert.py#L29"}}),Y=new Te({}),Z=new Oe({props:{name:"class transformers.RetriBertTokenizer",anchor:"transformers.RetriBertTokenizer",parameters:[{name:"vocab_file",val:""},{name:"do_lower_case",val:" = True"},{name:"do_basic_tokenize",val:" = True"},{name:"never_split",val:" = None"},{name:"unk_token",val:" = '[UNK]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"tokenize_chinese_chars",val:" = True"},{name:"strip_accents",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/retribert/tokenization_retribert.py#L41"}}),te=new Te({}),re=new Oe({props:{name:"class transformers.RetriBertTokenizerFast",anchor:"transformers.RetriBertTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"do_lower_case",val:" = True"},{name:"unk_token",val:" = '[UNK]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"tokenize_chinese_chars",val:" = True"},{name:"strip_accents",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/retribert/tokenization_retribert_fast.py#L45"}}),ae=new Te({}),ie=new Oe({props:{name:"class transformers.RetriBertModel",anchor:"transformers.RetriBertModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.RetriBertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/retribert/modeling_retribert.py#L87"}}),ce=new Oe({props:{name:"forward",anchor:"transformers.RetriBertModel.forward",parameters:[{name:"input_ids_query",val:""},{name:"attention_mask_query",val:""},{name:"input_ids_doc",val:""},{name:"attention_mask_doc",val:""},{name:"checkpoint_batch_size",val:" = -1"}],parametersDescription:[{anchor:"transformers.RetriBertModel.forward.input_ids_query",description:`<strong>input_ids_query</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary for the queries in a batch.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertTokenizer">RetriBertTokenizer</a>. See <a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids_query"},{anchor:"transformers.RetriBertModel.forward.attention_mask_query",description:`<strong>attention_mask_query</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask_query"},{anchor:"transformers.RetriBertModel.forward.input_ids_doc",description:`<strong>input_ids_doc</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary for the documents in a batch.`,name:"input_ids_doc"},{anchor:"transformers.RetriBertModel.forward.attention_mask_doc",description:`<strong>attention_mask_doc</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on documents padding token indices.`,name:"attention_mask_doc"},{anchor:"transformers.RetriBertModel.forward.checkpoint_batch_size",description:`<strong>checkpoint_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to &#x201C;<code>-1</code>) &#x2014;
If greater than 0, uses gradient checkpointing to only compute sequence representation on
<code>checkpoint_batch_size</code> examples at a time on the GPU. All query representations are still compared to
all document representations in the batch.`,name:"checkpoint_batch_size"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/retribert/modeling_retribert.py#L175",returnDescription:`
<p>The bidirectional cross-entropy loss obtained while trying to match each query to its
corresponding document and each document to its corresponding query in the batch</p>
`,returnType:`
<p>\`torch.FloatTensor\u201C</p>
`}}),{c(){w=o("meta"),Ue=d(),z=o("h1"),A=o("a"),we=o("span"),_(U.$$.fragment),gt=d(),ze=o("span"),_t=s("RetriBERT"),Ve=d(),$=o("h2"),q=o("a"),$e=o("span"),_(V.$$.fragment),vt=d(),Ee=o("span"),bt=s("Overview"),Ke=d(),F=o("p"),kt=s("The RetriBERT model was proposed in the blog post "),K=o("a"),yt=s(`Explain Anything Like I\u2019m Five: A Model for Open Domain Long Form
Question Answering`),Bt=s(`. RetriBERT is a small model that uses either a single or
pair of BERT encoders with lower-dimension projection for dense semantic indexing of text.`),We=d(),R=o("p"),Rt=s("This model was contributed by "),W=o("a"),Tt=s("yjernite"),wt=s(`. Code to train and use the model can be
found `),Q=o("a"),zt=s("here"),$t=s("."),Qe=d(),E=o("h2"),S=o("a"),xe=o("span"),_(G.$$.fragment),Et=d(),Pe=o("span"),xt=s("RetriBertConfig"),Ge=d(),g=o("div"),_(J.$$.fragment),Pt=d(),X=o("p"),Ct=s("This is the configuration class to store the configuration of a "),he=o("a"),Mt=s("RetriBertModel"),At=s(`. It is used to instantiate a
RetriBertModel model according to the specified arguments, defining the model architecture.`),qt=d(),x=o("p"),Ft=s("Configuration objects inherit from "),me=o("a"),St=s("PretrainedConfig"),Nt=s(` and can be used to control the model outputs. Read the
documentation from `),fe=o("a"),Dt=s("PretrainedConfig"),It=s(" for more information."),Je=d(),P=o("h2"),N=o("a"),Ce=o("span"),_(Y.$$.fragment),Lt=d(),Me=o("span"),jt=s("RetriBertTokenizer"),Xe=d(),p=o("div"),_(Z.$$.fragment),Ht=d(),Ae=o("p"),Ot=s("Constructs a RetriBERT tokenizer."),Ut=d(),D=o("p"),qe=o("code"),Vt=s("RetroBertTokenizer"),Kt=s(" is identical to "),pe=o("a"),Wt=s("BertTokenizer"),Qt=s(` and runs end-to-end tokenization: punctuation splitting
and wordpiece.`),Gt=d(),ee=o("p"),Jt=s("Refer to superclass "),ue=o("a"),Xt=s("BertTokenizer"),Yt=s(" for usage examples and documentation concerning parameters."),Ye=d(),C=o("h2"),I=o("a"),Fe=o("span"),_(te.$$.fragment),Zt=d(),Se=o("span"),er=s("RetriBertTokenizerFast"),Ze=d(),u=o("div"),_(re.$$.fragment),tr=d(),oe=o("p"),rr=s("Construct a \u201Cfast\u201D RetriBERT tokenizer (backed by HuggingFace\u2019s "),Ne=o("em"),or=s("tokenizers"),nr=s(" library)."),ar=d(),L=o("p"),ge=o("a"),ir=s("RetriBertTokenizerFast"),sr=s(" is identical to "),_e=o("a"),lr=s("BertTokenizerFast"),dr=s(` and runs end-to-end tokenization: punctuation
splitting and wordpiece.`),cr=d(),ne=o("p"),hr=s("Refer to superclass "),ve=o("a"),mr=s("BertTokenizerFast"),fr=s(" for usage examples and documentation concerning parameters."),et=d(),M=o("h2"),j=o("a"),De=o("span"),_(ae.$$.fragment),pr=d(),Ie=o("span"),ur=s("RetriBertModel"),tt=d(),f=o("div"),_(ie.$$.fragment),gr=d(),Le=o("p"),_r=s("Bert Based model to embed queries or document for document retrieval."),vr=d(),se=o("p"),br=s("This model inherits from "),be=o("a"),kr=s("PreTrainedModel"),yr=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Br=d(),le=o("p"),Rr=s("This model is also a PyTorch "),de=o("a"),Tr=s("torch.nn.Module"),wr=s(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),zr=d(),ke=o("div"),_(ce.$$.fragment),this.h()},l(t){const h=po('[data-svelte="svelte-1phssyn"]',document.head);w=n(h,"META",{name:!0,content:!0}),h.forEach(r),Ue=c(t),z=n(t,"H1",{class:!0});var ot=a(z);A=n(ot,"A",{id:!0,class:!0,href:!0});var Er=a(A);we=n(Er,"SPAN",{});var xr=a(we);v(U.$$.fragment,xr),xr.forEach(r),Er.forEach(r),gt=c(ot),ze=n(ot,"SPAN",{});var Pr=a(ze);_t=l(Pr,"RetriBERT"),Pr.forEach(r),ot.forEach(r),Ve=c(t),$=n(t,"H2",{class:!0});var nt=a($);q=n(nt,"A",{id:!0,class:!0,href:!0});var Cr=a(q);$e=n(Cr,"SPAN",{});var Mr=a($e);v(V.$$.fragment,Mr),Mr.forEach(r),Cr.forEach(r),vt=c(nt),Ee=n(nt,"SPAN",{});var Ar=a(Ee);bt=l(Ar,"Overview"),Ar.forEach(r),nt.forEach(r),Ke=c(t),F=n(t,"P",{});var at=a(F);kt=l(at,"The RetriBERT model was proposed in the blog post "),K=n(at,"A",{href:!0,rel:!0});var qr=a(K);yt=l(qr,`Explain Anything Like I\u2019m Five: A Model for Open Domain Long Form
Question Answering`),qr.forEach(r),Bt=l(at,`. RetriBERT is a small model that uses either a single or
pair of BERT encoders with lower-dimension projection for dense semantic indexing of text.`),at.forEach(r),We=c(t),R=n(t,"P",{});var ye=a(R);Rt=l(ye,"This model was contributed by "),W=n(ye,"A",{href:!0,rel:!0});var Fr=a(W);Tt=l(Fr,"yjernite"),Fr.forEach(r),wt=l(ye,`. Code to train and use the model can be
found `),Q=n(ye,"A",{href:!0,rel:!0});var Sr=a(Q);zt=l(Sr,"here"),Sr.forEach(r),$t=l(ye,"."),ye.forEach(r),Qe=c(t),E=n(t,"H2",{class:!0});var it=a(E);S=n(it,"A",{id:!0,class:!0,href:!0});var Nr=a(S);xe=n(Nr,"SPAN",{});var Dr=a(xe);v(G.$$.fragment,Dr),Dr.forEach(r),Nr.forEach(r),Et=c(it),Pe=n(it,"SPAN",{});var Ir=a(Pe);xt=l(Ir,"RetriBertConfig"),Ir.forEach(r),it.forEach(r),Ge=c(t),g=n(t,"DIV",{class:!0});var Be=a(g);v(J.$$.fragment,Be),Pt=c(Be),X=n(Be,"P",{});var st=a(X);Ct=l(st,"This is the configuration class to store the configuration of a "),he=n(st,"A",{href:!0});var Lr=a(he);Mt=l(Lr,"RetriBertModel"),Lr.forEach(r),At=l(st,`. It is used to instantiate a
RetriBertModel model according to the specified arguments, defining the model architecture.`),st.forEach(r),qt=c(Be),x=n(Be,"P",{});var Re=a(x);Ft=l(Re,"Configuration objects inherit from "),me=n(Re,"A",{href:!0});var jr=a(me);St=l(jr,"PretrainedConfig"),jr.forEach(r),Nt=l(Re,` and can be used to control the model outputs. Read the
documentation from `),fe=n(Re,"A",{href:!0});var Hr=a(fe);Dt=l(Hr,"PretrainedConfig"),Hr.forEach(r),It=l(Re," for more information."),Re.forEach(r),Be.forEach(r),Je=c(t),P=n(t,"H2",{class:!0});var lt=a(P);N=n(lt,"A",{id:!0,class:!0,href:!0});var Or=a(N);Ce=n(Or,"SPAN",{});var Ur=a(Ce);v(Y.$$.fragment,Ur),Ur.forEach(r),Or.forEach(r),Lt=c(lt),Me=n(lt,"SPAN",{});var Vr=a(Me);jt=l(Vr,"RetriBertTokenizer"),Vr.forEach(r),lt.forEach(r),Xe=c(t),p=n(t,"DIV",{class:!0});var H=a(p);v(Z.$$.fragment,H),Ht=c(H),Ae=n(H,"P",{});var Kr=a(Ae);Ot=l(Kr,"Constructs a RetriBERT tokenizer."),Kr.forEach(r),Ut=c(H),D=n(H,"P",{});var je=a(D);qe=n(je,"CODE",{});var Wr=a(qe);Vt=l(Wr,"RetroBertTokenizer"),Wr.forEach(r),Kt=l(je," is identical to "),pe=n(je,"A",{href:!0});var Qr=a(pe);Wt=l(Qr,"BertTokenizer"),Qr.forEach(r),Qt=l(je,` and runs end-to-end tokenization: punctuation splitting
and wordpiece.`),je.forEach(r),Gt=c(H),ee=n(H,"P",{});var dt=a(ee);Jt=l(dt,"Refer to superclass "),ue=n(dt,"A",{href:!0});var Gr=a(ue);Xt=l(Gr,"BertTokenizer"),Gr.forEach(r),Yt=l(dt," for usage examples and documentation concerning parameters."),dt.forEach(r),H.forEach(r),Ye=c(t),C=n(t,"H2",{class:!0});var ct=a(C);I=n(ct,"A",{id:!0,class:!0,href:!0});var Jr=a(I);Fe=n(Jr,"SPAN",{});var Xr=a(Fe);v(te.$$.fragment,Xr),Xr.forEach(r),Jr.forEach(r),Zt=c(ct),Se=n(ct,"SPAN",{});var Yr=a(Se);er=l(Yr,"RetriBertTokenizerFast"),Yr.forEach(r),ct.forEach(r),Ze=c(t),u=n(t,"DIV",{class:!0});var O=a(u);v(re.$$.fragment,O),tr=c(O),oe=n(O,"P",{});var ht=a(oe);rr=l(ht,"Construct a \u201Cfast\u201D RetriBERT tokenizer (backed by HuggingFace\u2019s "),Ne=n(ht,"EM",{});var Zr=a(Ne);or=l(Zr,"tokenizers"),Zr.forEach(r),nr=l(ht," library)."),ht.forEach(r),ar=c(O),L=n(O,"P",{});var He=a(L);ge=n(He,"A",{href:!0});var eo=a(ge);ir=l(eo,"RetriBertTokenizerFast"),eo.forEach(r),sr=l(He," is identical to "),_e=n(He,"A",{href:!0});var to=a(_e);lr=l(to,"BertTokenizerFast"),to.forEach(r),dr=l(He,` and runs end-to-end tokenization: punctuation
splitting and wordpiece.`),He.forEach(r),cr=c(O),ne=n(O,"P",{});var mt=a(ne);hr=l(mt,"Refer to superclass "),ve=n(mt,"A",{href:!0});var ro=a(ve);mr=l(ro,"BertTokenizerFast"),ro.forEach(r),fr=l(mt," for usage examples and documentation concerning parameters."),mt.forEach(r),O.forEach(r),et=c(t),M=n(t,"H2",{class:!0});var ft=a(M);j=n(ft,"A",{id:!0,class:!0,href:!0});var oo=a(j);De=n(oo,"SPAN",{});var no=a(De);v(ae.$$.fragment,no),no.forEach(r),oo.forEach(r),pr=c(ft),Ie=n(ft,"SPAN",{});var ao=a(Ie);ur=l(ao,"RetriBertModel"),ao.forEach(r),ft.forEach(r),tt=c(t),f=n(t,"DIV",{class:!0});var T=a(f);v(ie.$$.fragment,T),gr=c(T),Le=n(T,"P",{});var io=a(Le);_r=l(io,"Bert Based model to embed queries or document for document retrieval."),io.forEach(r),vr=c(T),se=n(T,"P",{});var pt=a(se);br=l(pt,"This model inherits from "),be=n(pt,"A",{href:!0});var so=a(be);kr=l(so,"PreTrainedModel"),so.forEach(r),yr=l(pt,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),pt.forEach(r),Br=c(T),le=n(T,"P",{});var ut=a(le);Rr=l(ut,"This model is also a PyTorch "),de=n(ut,"A",{href:!0,rel:!0});var lo=a(de);Tr=l(lo,"torch.nn.Module"),lo.forEach(r),wr=l(ut,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ut.forEach(r),zr=c(T),ke=n(T,"DIV",{class:!0});var co=a(ke);v(ce.$$.fragment,co),co.forEach(r),T.forEach(r),this.h()},h(){i(w,"name","hf:doc:metadata"),i(w,"content",JSON.stringify(vo)),i(A,"id","retribert"),i(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(A,"href","#retribert"),i(z,"class","relative group"),i(q,"id","overview"),i(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(q,"href","#overview"),i($,"class","relative group"),i(K,"href","https://yjernite.github.io/lfqa.html"),i(K,"rel","nofollow"),i(W,"href","https://huggingface.co/yjernite"),i(W,"rel","nofollow"),i(Q,"href","https://github.com/huggingface/transformers/tree/main/examples/research-projects/distillation"),i(Q,"rel","nofollow"),i(S,"id","transformers.RetriBertConfig"),i(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(S,"href","#transformers.RetriBertConfig"),i(E,"class","relative group"),i(he,"href","/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertModel"),i(me,"href","/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig"),i(fe,"href","/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig"),i(g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(N,"id","transformers.RetriBertTokenizer"),i(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(N,"href","#transformers.RetriBertTokenizer"),i(P,"class","relative group"),i(pe,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizer"),i(ue,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizer"),i(p,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(I,"id","transformers.RetriBertTokenizerFast"),i(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(I,"href","#transformers.RetriBertTokenizerFast"),i(C,"class","relative group"),i(ge,"href","/docs/transformers/pr_highlight/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),i(_e,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizerFast"),i(ve,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizerFast"),i(u,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(j,"id","transformers.RetriBertModel"),i(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(j,"href","#transformers.RetriBertModel"),i(M,"class","relative group"),i(be,"href","/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel"),i(de,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),i(de,"rel","nofollow"),i(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,h){e(document.head,w),m(t,Ue,h),m(t,z,h),e(z,A),e(A,we),b(U,we,null),e(z,gt),e(z,ze),e(ze,_t),m(t,Ve,h),m(t,$,h),e($,q),e(q,$e),b(V,$e,null),e($,vt),e($,Ee),e(Ee,bt),m(t,Ke,h),m(t,F,h),e(F,kt),e(F,K),e(K,yt),e(F,Bt),m(t,We,h),m(t,R,h),e(R,Rt),e(R,W),e(W,Tt),e(R,wt),e(R,Q),e(Q,zt),e(R,$t),m(t,Qe,h),m(t,E,h),e(E,S),e(S,xe),b(G,xe,null),e(E,Et),e(E,Pe),e(Pe,xt),m(t,Ge,h),m(t,g,h),b(J,g,null),e(g,Pt),e(g,X),e(X,Ct),e(X,he),e(he,Mt),e(X,At),e(g,qt),e(g,x),e(x,Ft),e(x,me),e(me,St),e(x,Nt),e(x,fe),e(fe,Dt),e(x,It),m(t,Je,h),m(t,P,h),e(P,N),e(N,Ce),b(Y,Ce,null),e(P,Lt),e(P,Me),e(Me,jt),m(t,Xe,h),m(t,p,h),b(Z,p,null),e(p,Ht),e(p,Ae),e(Ae,Ot),e(p,Ut),e(p,D),e(D,qe),e(qe,Vt),e(D,Kt),e(D,pe),e(pe,Wt),e(D,Qt),e(p,Gt),e(p,ee),e(ee,Jt),e(ee,ue),e(ue,Xt),e(ee,Yt),m(t,Ye,h),m(t,C,h),e(C,I),e(I,Fe),b(te,Fe,null),e(C,Zt),e(C,Se),e(Se,er),m(t,Ze,h),m(t,u,h),b(re,u,null),e(u,tr),e(u,oe),e(oe,rr),e(oe,Ne),e(Ne,or),e(oe,nr),e(u,ar),e(u,L),e(L,ge),e(ge,ir),e(L,sr),e(L,_e),e(_e,lr),e(L,dr),e(u,cr),e(u,ne),e(ne,hr),e(ne,ve),e(ve,mr),e(ne,fr),m(t,et,h),m(t,M,h),e(M,j),e(j,De),b(ae,De,null),e(M,pr),e(M,Ie),e(Ie,ur),m(t,tt,h),m(t,f,h),b(ie,f,null),e(f,gr),e(f,Le),e(Le,_r),e(f,vr),e(f,se),e(se,br),e(se,be),e(be,kr),e(se,yr),e(f,Br),e(f,le),e(le,Rr),e(le,de),e(de,Tr),e(le,wr),e(f,zr),e(f,ke),b(ce,ke,null),rt=!0},p:uo,i(t){rt||(k(U.$$.fragment,t),k(V.$$.fragment,t),k(G.$$.fragment,t),k(J.$$.fragment,t),k(Y.$$.fragment,t),k(Z.$$.fragment,t),k(te.$$.fragment,t),k(re.$$.fragment,t),k(ae.$$.fragment,t),k(ie.$$.fragment,t),k(ce.$$.fragment,t),rt=!0)},o(t){y(U.$$.fragment,t),y(V.$$.fragment,t),y(G.$$.fragment,t),y(J.$$.fragment,t),y(Y.$$.fragment,t),y(Z.$$.fragment,t),y(te.$$.fragment,t),y(re.$$.fragment,t),y(ae.$$.fragment,t),y(ie.$$.fragment,t),y(ce.$$.fragment,t),rt=!1},d(t){r(w),t&&r(Ue),t&&r(z),B(U),t&&r(Ve),t&&r($),B(V),t&&r(Ke),t&&r(F),t&&r(We),t&&r(R),t&&r(Qe),t&&r(E),B(G),t&&r(Ge),t&&r(g),B(J),t&&r(Je),t&&r(P),B(Y),t&&r(Xe),t&&r(p),B(Z),t&&r(Ye),t&&r(C),B(te),t&&r(Ze),t&&r(u),B(re),t&&r(et),t&&r(M),B(ae),t&&r(tt),t&&r(f),B(ie),B(ce)}}}const vo={local:"retribert",sections:[{local:"overview",title:"Overview"},{local:"transformers.RetriBertConfig",title:"RetriBertConfig"},{local:"transformers.RetriBertTokenizer",title:"RetriBertTokenizer"},{local:"transformers.RetriBertTokenizerFast",title:"RetriBertTokenizerFast"},{local:"transformers.RetriBertModel",title:"RetriBertModel"}],title:"RetriBERT"};function bo($r){return go(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ro extends ho{constructor(w){super();mo(this,w,bo,_o,fo,{})}}export{Ro as default,vo as metadata};
