import{S as ha,i as ma,s as fa,e as r,k as m,w as E,t as s,M as pa,c as a,d as o,m as f,a as n,x as b,h as i,b as d,N as ua,F as e,g as u,y as w,q as A,o as M,B as $,v as ga,L as Ar}from"../../chunks/vendor-6b77c823.js";import{T as ca}from"../../chunks/Tip-39098574.js";import{D as ut}from"../../chunks/Docstring-1088f2fb.js";import{C as Mr}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as gt}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as wr}from"../../chunks/ExampleCodeBlock-5212b321.js";function _a(k){let c,T,_,p,v;return p=new Mr({props:{code:`from transformers import ViTMAEModel, ViTMAEConfig

# Initializing a ViT MAE vit-mae-base style configuration
configuration = ViTMAEConfig()

# Initializing a model from the vit-mae-base style configuration
model = ViTMAEModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTMAEModel, ViTMAEConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ViT MAE vit-mae-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ViTMAEConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the vit-mae-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=r("p"),T=s("Example:"),_=m(),E(p.$$.fragment)},l(l){c=a(l,"P",{});var g=n(c);T=i(g,"Example:"),g.forEach(o),_=f(l),b(p.$$.fragment,l)},m(l,g){u(l,c,g),e(c,T),u(l,_,g),w(p,l,g),v=!0},p:Ar,i(l){v||(A(p.$$.fragment,l),v=!0)},o(l){M(p.$$.fragment,l),v=!1},d(l){l&&o(c),l&&o(_),$(p,l)}}}function va(k){let c,T,_,p,v;return{c(){c=r("p"),T=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),p=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=a(l,"P",{});var g=n(c);T=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(g,"CODE",{});var C=n(_);p=i(C,"Module"),C.forEach(o),v=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(l,g){u(l,c,g),e(c,T),e(c,_),e(_,p),e(c,v)},d(l){l&&o(c)}}}function Ta(k){let c,T,_,p,v;return p=new Mr({props:{code:`from transformers import AutoFeatureExtractor, ViTMAEModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/vit-mae-base")
model = ViTMAEModel.from_pretrained("facebook/vit-mae-base")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ViTMAEModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEModel.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){c=r("p"),T=s("Examples:"),_=m(),E(p.$$.fragment)},l(l){c=a(l,"P",{});var g=n(c);T=i(g,"Examples:"),g.forEach(o),_=f(l),b(p.$$.fragment,l)},m(l,g){u(l,c,g),e(c,T),u(l,_,g),w(p,l,g),v=!0},p:Ar,i(l){v||(A(p.$$.fragment,l),v=!0)},o(l){M(p.$$.fragment,l),v=!1},d(l){l&&o(c),l&&o(_),$(p,l)}}}function Ea(k){let c,T,_,p,v;return{c(){c=r("p"),T=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),p=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=a(l,"P",{});var g=n(c);T=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(g,"CODE",{});var C=n(_);p=i(C,"Module"),C.forEach(o),v=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(l,g){u(l,c,g),e(c,T),e(c,_),e(_,p),e(c,v)},d(l){l&&o(c)}}}function ba(k){let c,T,_,p,v;return p=new Mr({props:{code:`from transformers import AutoFeatureExtractor, ViTMAEForPreTraining
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/vit-mae-base")
model = ViTMAEForPreTraining.from_pretrained("facebook/vit-mae-base")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
loss = outputs.loss
mask = outputs.mask
ids_restore = outputs.ids_restore`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ViTMAEForPreTraining
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEForPreTraining.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = outputs.mask
<span class="hljs-meta">&gt;&gt;&gt; </span>ids_restore = outputs.ids_restore`}}),{c(){c=r("p"),T=s("Examples:"),_=m(),E(p.$$.fragment)},l(l){c=a(l,"P",{});var g=n(c);T=i(g,"Examples:"),g.forEach(o),_=f(l),b(p.$$.fragment,l)},m(l,g){u(l,c,g),e(c,T),u(l,_,g),w(p,l,g),v=!0},p:Ar,i(l){v||(A(p.$$.fragment,l),v=!0)},o(l){M(p.$$.fragment,l),v=!1},d(l){l&&o(c),l&&o(_),$(p,l)}}}function wa(k){let c,T,_,p,v,l,g,C,Ht,_t,I,K,et,se,Wt,tt,Ut,vt,X,Rt,ie,Kt,Xt,Tt,Fe,Bt,Et,Ce,ot,Gt,bt,je,Yt,wt,y,le,Jt,ze,Qt,Zt,eo,N,to,qe,oo,ro,de,ao,no,so,S,io,Ie,lo,co,ce,ho,mo,fo,he,po,Ne,uo,go,_o,me,vo,Se,To,Eo,bo,rt,wo,At,B,$r,Mt,fe,Ao,Le,Mo,$t,q,$o,pe,yo,Vo,ue,ko,xo,yt,L,G,at,ge,Po,nt,Fo,Vt,V,_e,Co,D,jo,De,zo,qo,ve,Io,No,So,O,Lo,Oe,Do,Oo,He,Ho,Wo,Uo,Y,kt,H,J,st,Te,Ro,it,Ko,xt,j,Ee,Xo,be,Bo,we,Go,Yo,Jo,x,Ae,Qo,W,Zo,We,er,tr,lt,or,rr,ar,Q,nr,Z,Pt,U,ee,dt,Me,sr,ct,ir,Ft,z,$e,lr,ye,dr,Ve,cr,hr,mr,P,ke,fr,R,pr,Ue,ur,gr,ht,_r,vr,Tr,te,Er,oe,Ct;return l=new gt({}),se=new gt({}),ge=new gt({}),_e=new ut({props:{name:"class transformers.ViTMAEConfig",anchor:"transformers.ViTMAEConfig",parameters:[{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"image_size",val:" = 224"},{name:"patch_size",val:" = 16"},{name:"num_channels",val:" = 3"},{name:"qkv_bias",val:" = True"},{name:"decoder_num_attention_heads",val:" = 16"},{name:"decoder_hidden_size",val:" = 512"},{name:"decoder_num_hidden_layers",val:" = 8"},{name:"decoder_intermediate_size",val:" = 2048"},{name:"mask_ratio",val:" = 0.75"},{name:"norm_pix_loss",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ViTMAEConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.ViTMAEConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.ViTMAEConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.ViTMAEConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.ViTMAEConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ViTMAEConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.ViTMAEConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.ViTMAEConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ViTMAEConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ViTMAEConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.ViTMAEConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.ViTMAEConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ViTMAEConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.ViTMAEConfig.decoder_num_attention_heads",description:`<strong>decoder_num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the decoder.`,name:"decoder_num_attention_heads"},{anchor:"transformers.ViTMAEConfig.decoder_hidden_size",description:`<strong>decoder_hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimensionality of the decoder.`,name:"decoder_hidden_size"},{anchor:"transformers.ViTMAEConfig.decoder_num_hidden_layers",description:`<strong>decoder_num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of hidden layers in the decoder.`,name:"decoder_num_hidden_layers"},{anchor:"transformers.ViTMAEConfig.decoder_intermediate_size",description:`<strong>decoder_intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the decoder.`,name:"decoder_intermediate_size"},{anchor:"transformers.ViTMAEConfig.mask_ratio",description:`<strong>mask_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.75) &#x2014;
The ratio of the number of masked tokens in the input sequence.`,name:"mask_ratio"},{anchor:"transformers.ViTMAEConfig.norm_pix_loss",description:`<strong>norm_pix_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to train with normalized pixels (see Table 3 in the paper). Using normalized pixels improved
representation quality in the experiments of the authors.`,name:"norm_pix_loss"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/vit_mae/configuration_vit_mae.py#L29"}}),Y=new wr({props:{anchor:"transformers.ViTMAEConfig.example",$$slots:{default:[_a]},$$scope:{ctx:k}}}),Te=new gt({}),Ee=new ut({props:{name:"class transformers.ViTMAEModel",anchor:"transformers.ViTMAEModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ViTMAEModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/vit_mae/modeling_vit_mae.py#L642"}}),Ae=new ut({props:{name:"forward",anchor:"transformers.ViTMAEModel.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.ViTMAEModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ViTMAEModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ViTMAEModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ViTMAEModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ViTMAEModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_highlight/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/vit_mae/modeling_vit_mae.py#L666",returnDescription:`
<p>A <code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEModelOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEConfig"
>ViTMAEConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor indicating which patches are masked (1) and which are not (0).</li>
<li><strong>ids_restore</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor containing the original index of the (shuffled) masked patches.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEModelOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Q=new ca({props:{$$slots:{default:[va]},$$scope:{ctx:k}}}),Z=new wr({props:{anchor:"transformers.ViTMAEModel.forward.example",$$slots:{default:[Ta]},$$scope:{ctx:k}}}),Me=new gt({}),$e=new ut({props:{name:"class transformers.ViTMAEForPreTraining",anchor:"transformers.ViTMAEForPreTraining",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ViTMAEForPreTraining.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/vit_mae/modeling_vit_mae.py#L844"}}),ke=new ut({props:{name:"forward",anchor:"transformers.ViTMAEForPreTraining.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.ViTMAEForPreTraining.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ViTMAEForPreTraining.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ViTMAEForPreTraining.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ViTMAEForPreTraining.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ViTMAEForPreTraining.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_highlight/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/vit_mae/modeling_vit_mae.py#L908",returnDescription:`
<p>A <code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEForPreTrainingOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEConfig"
>ViTMAEConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>) \u2014 Pixel reconstruction loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, patch_size ** 2 * num_channels)</code>) \u2014 Pixel reconstruction logits.</li>
<li><strong>mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor indicating which patches are masked (1) and which are not (0).</li>
<li><strong>ids_restore</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor containing the original index of the (shuffled) masked patches.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEForPreTrainingOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),te=new ca({props:{$$slots:{default:[Ea]},$$scope:{ctx:k}}}),oe=new wr({props:{anchor:"transformers.ViTMAEForPreTraining.forward.example",$$slots:{default:[ba]},$$scope:{ctx:k}}}),{c(){c=r("meta"),T=m(),_=r("h1"),p=r("a"),v=r("span"),E(l.$$.fragment),g=m(),C=r("span"),Ht=s("ViTMAE"),_t=m(),I=r("h2"),K=r("a"),et=r("span"),E(se.$$.fragment),Wt=m(),tt=r("span"),Ut=s("Overview"),vt=m(),X=r("p"),Rt=s("The ViTMAE model was proposed in "),ie=r("a"),Kt=s("Masked Autoencoders Are Scalable Vision Learners"),Xt=s(` by Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li,
Piotr Doll\xE1r, Ross Girshick. The paper shows that, by pre-training a Vision Transformer (ViT) to reconstruct pixel values for masked patches, one can get results after
fine-tuning that outperform supervised pre-training.`),Tt=m(),Fe=r("p"),Bt=s("The abstract from the paper is the following:"),Et=m(),Ce=r("p"),ot=r("em"),Gt=s(`This paper shows that masked autoencoders (MAE) are scalable self-supervised learners for computer vision. Our MAE approach is simple: we mask random patches of the
input image and reconstruct the missing pixels. It is based on two core designs. First, we develop an asymmetric encoder-decoder architecture, with an encoder that operates
only on the visible subset of patches (without mask tokens), along with a lightweight decoder that reconstructs the original image from the latent representation and mask
tokens. Second, we find that masking a high proportion of the input image, e.g., 75%, yields a nontrivial and meaningful self-supervisory task. Coupling these two designs
enables us to train large models efficiently and effectively: we accelerate training (by 3x or more) and improve accuracy. Our scalable approach allows for learning high-capacity
models that generalize well: e.g., a vanilla ViT-Huge model achieves the best accuracy (87.8%) among methods that use only ImageNet-1K data. Transfer performance in downstream
tasks outperforms supervised pre-training and shows promising scaling behavior.`),bt=m(),je=r("p"),Yt=s("Tips:"),wt=m(),y=r("ul"),le=r("li"),Jt=s(`MAE (masked auto encoding) is a method for self-supervised pre-training of Vision Transformers (ViTs). The pre-training objective is relatively simple:
by masking a large portion (75%) of the image patches, the model must reconstruct raw pixel values. One can use `),ze=r("a"),Qt=s("ViTMAEForPreTraining"),Zt=s(" for this purpose."),eo=m(),N=r("li"),to=s("An example Python script that illustrates how to pre-train "),qe=r("a"),oo=s("ViTMAEForPreTraining"),ro=s(" from scratch can be found "),de=r("a"),ao=s("here"),no=s(`.
One can easily tweak it for their own use case.`),so=m(),S=r("li"),io=s("A notebook that illustrates how to visualize reconstructed pixel values with "),Ie=r("a"),lo=s("ViTMAEForPreTraining"),co=s(" can be found "),ce=r("a"),ho=s("here"),mo=s("."),fo=m(),he=r("li"),po=s(`After pre-training, one \u201Cthrows away\u201D the decoder used to reconstruct pixels, and one uses the encoder for fine-tuning/linear probing. This means that after
fine-tuning, one can directly plug in the weights into a `),Ne=r("a"),uo=s("ViTForImageClassification"),go=s("."),_o=m(),me=r("li"),vo=s("One can use "),Se=r("a"),To=s("ViTFeatureExtractor"),Eo=s(" to prepare images for the model. See the code examples for more info."),bo=m(),rt=r("li"),wo=s(`Note that the encoder of MAE is only used to encode the visual patches. The encoded patches are then concatenated with mask tokens, which the decoder (which also
consists of Transformer blocks) takes as input. Each mask token is a shared, learned vector that indicates the presence of a missing patch to be predicted. Fixed
sin/cos position embeddings are added both to the input of the encoder and the decoder.`),At=m(),B=r("img"),Mt=m(),fe=r("small"),Ao=s("MAE architecture. Taken from the "),Le=r("a"),Mo=s("original paper."),$t=m(),q=r("p"),$o=s("This model was contributed by "),pe=r("a"),yo=s("nielsr"),Vo=s(". The original code can be found "),ue=r("a"),ko=s("here"),xo=s("."),yt=m(),L=r("h2"),G=r("a"),at=r("span"),E(ge.$$.fragment),Po=m(),nt=r("span"),Fo=s("ViTMAEConfig"),Vt=m(),V=r("div"),E(_e.$$.fragment),Co=m(),D=r("p"),jo=s("This is the configuration class to store the configuration of a "),De=r("a"),zo=s("ViTMAEModel"),qo=s(`. It is used to instantiate an ViT
MAE model according to the specified arguments, defining the model architecture. Instantiating a configuration with
the defaults will yield a similar configuration to that of the ViT
`),ve=r("a"),Io=s("facebook/vit-mae-base"),No=s(" architecture."),So=m(),O=r("p"),Lo=s("Configuration objects inherit from "),Oe=r("a"),Do=s("PretrainedConfig"),Oo=s(` and can be used to control the model outputs. Read the
documentation from `),He=r("a"),Ho=s("PretrainedConfig"),Wo=s(" for more information."),Uo=m(),E(Y.$$.fragment),kt=m(),H=r("h2"),J=r("a"),st=r("span"),E(Te.$$.fragment),Ro=m(),it=r("span"),Ko=s("ViTMAEModel"),xt=m(),j=r("div"),E(Ee.$$.fragment),Xo=m(),be=r("p"),Bo=s(`The bare ViTMAE Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),we=r("a"),Go=s("torch.nn.Module"),Yo=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Jo=m(),x=r("div"),E(Ae.$$.fragment),Qo=m(),W=r("p"),Zo=s("The "),We=r("a"),er=s("ViTMAEModel"),tr=s(" forward method, overrides the "),lt=r("code"),or=s("__call__"),rr=s(" special method."),ar=m(),E(Q.$$.fragment),nr=m(),E(Z.$$.fragment),Pt=m(),U=r("h2"),ee=r("a"),dt=r("span"),E(Me.$$.fragment),sr=m(),ct=r("span"),ir=s("ViTMAEForPreTraining"),Ft=m(),z=r("div"),E($e.$$.fragment),lr=m(),ye=r("p"),dr=s(`The ViTMAE Model transformer with the decoder on top for self-supervised pre-training.
This model is a PyTorch `),Ve=r("a"),cr=s("torch.nn.Module"),hr=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),mr=m(),P=r("div"),E(ke.$$.fragment),fr=m(),R=r("p"),pr=s("The "),Ue=r("a"),ur=s("ViTMAEForPreTraining"),gr=s(" forward method, overrides the "),ht=r("code"),_r=s("__call__"),vr=s(" special method."),Tr=m(),E(te.$$.fragment),Er=m(),E(oe.$$.fragment),this.h()},l(t){const h=pa('[data-svelte="svelte-1phssyn"]',document.head);c=a(h,"META",{name:!0,content:!0}),h.forEach(o),T=f(t),_=a(t,"H1",{class:!0});var xe=n(_);p=a(xe,"A",{id:!0,class:!0,href:!0});var mt=n(p);v=a(mt,"SPAN",{});var ft=n(v);b(l.$$.fragment,ft),ft.forEach(o),mt.forEach(o),g=f(xe),C=a(xe,"SPAN",{});var pt=n(C);Ht=i(pt,"ViTMAE"),pt.forEach(o),xe.forEach(o),_t=f(t),I=a(t,"H2",{class:!0});var Pe=n(I);K=a(Pe,"A",{id:!0,class:!0,href:!0});var yr=n(K);et=a(yr,"SPAN",{});var Vr=n(et);b(se.$$.fragment,Vr),Vr.forEach(o),yr.forEach(o),Wt=f(Pe),tt=a(Pe,"SPAN",{});var kr=n(tt);Ut=i(kr,"Overview"),kr.forEach(o),Pe.forEach(o),vt=f(t),X=a(t,"P",{});var jt=n(X);Rt=i(jt,"The ViTMAE model was proposed in "),ie=a(jt,"A",{href:!0,rel:!0});var xr=n(ie);Kt=i(xr,"Masked Autoencoders Are Scalable Vision Learners"),xr.forEach(o),Xt=i(jt,` by Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li,
Piotr Doll\xE1r, Ross Girshick. The paper shows that, by pre-training a Vision Transformer (ViT) to reconstruct pixel values for masked patches, one can get results after
fine-tuning that outperform supervised pre-training.`),jt.forEach(o),Tt=f(t),Fe=a(t,"P",{});var Pr=n(Fe);Bt=i(Pr,"The abstract from the paper is the following:"),Pr.forEach(o),Et=f(t),Ce=a(t,"P",{});var Fr=n(Ce);ot=a(Fr,"EM",{});var Cr=n(ot);Gt=i(Cr,`This paper shows that masked autoencoders (MAE) are scalable self-supervised learners for computer vision. Our MAE approach is simple: we mask random patches of the
input image and reconstruct the missing pixels. It is based on two core designs. First, we develop an asymmetric encoder-decoder architecture, with an encoder that operates
only on the visible subset of patches (without mask tokens), along with a lightweight decoder that reconstructs the original image from the latent representation and mask
tokens. Second, we find that masking a high proportion of the input image, e.g., 75%, yields a nontrivial and meaningful self-supervisory task. Coupling these two designs
enables us to train large models efficiently and effectively: we accelerate training (by 3x or more) and improve accuracy. Our scalable approach allows for learning high-capacity
models that generalize well: e.g., a vanilla ViT-Huge model achieves the best accuracy (87.8%) among methods that use only ImageNet-1K data. Transfer performance in downstream
tasks outperforms supervised pre-training and shows promising scaling behavior.`),Cr.forEach(o),Fr.forEach(o),bt=f(t),je=a(t,"P",{});var jr=n(je);Yt=i(jr,"Tips:"),jr.forEach(o),wt=f(t),y=a(t,"UL",{});var F=n(y);le=a(F,"LI",{});var zt=n(le);Jt=i(zt,`MAE (masked auto encoding) is a method for self-supervised pre-training of Vision Transformers (ViTs). The pre-training objective is relatively simple:
by masking a large portion (75%) of the image patches, the model must reconstruct raw pixel values. One can use `),ze=a(zt,"A",{href:!0});var zr=n(ze);Qt=i(zr,"ViTMAEForPreTraining"),zr.forEach(o),Zt=i(zt," for this purpose."),zt.forEach(o),eo=f(F),N=a(F,"LI",{});var Re=n(N);to=i(Re,"An example Python script that illustrates how to pre-train "),qe=a(Re,"A",{href:!0});var qr=n(qe);oo=i(qr,"ViTMAEForPreTraining"),qr.forEach(o),ro=i(Re," from scratch can be found "),de=a(Re,"A",{href:!0,rel:!0});var Ir=n(de);ao=i(Ir,"here"),Ir.forEach(o),no=i(Re,`.
One can easily tweak it for their own use case.`),Re.forEach(o),so=f(F),S=a(F,"LI",{});var Ke=n(S);io=i(Ke,"A notebook that illustrates how to visualize reconstructed pixel values with "),Ie=a(Ke,"A",{href:!0});var Nr=n(Ie);lo=i(Nr,"ViTMAEForPreTraining"),Nr.forEach(o),co=i(Ke," can be found "),ce=a(Ke,"A",{href:!0,rel:!0});var Sr=n(ce);ho=i(Sr,"here"),Sr.forEach(o),mo=i(Ke,"."),Ke.forEach(o),fo=f(F),he=a(F,"LI",{});var qt=n(he);po=i(qt,`After pre-training, one \u201Cthrows away\u201D the decoder used to reconstruct pixels, and one uses the encoder for fine-tuning/linear probing. This means that after
fine-tuning, one can directly plug in the weights into a `),Ne=a(qt,"A",{href:!0});var Lr=n(Ne);uo=i(Lr,"ViTForImageClassification"),Lr.forEach(o),go=i(qt,"."),qt.forEach(o),_o=f(F),me=a(F,"LI",{});var It=n(me);vo=i(It,"One can use "),Se=a(It,"A",{href:!0});var Dr=n(Se);To=i(Dr,"ViTFeatureExtractor"),Dr.forEach(o),Eo=i(It," to prepare images for the model. See the code examples for more info."),It.forEach(o),bo=f(F),rt=a(F,"LI",{});var Or=n(rt);wo=i(Or,`Note that the encoder of MAE is only used to encode the visual patches. The encoded patches are then concatenated with mask tokens, which the decoder (which also
consists of Transformer blocks) takes as input. Each mask token is a shared, learned vector that indicates the presence of a missing patch to be predicted. Fixed
sin/cos position embeddings are added both to the input of the encoder and the decoder.`),Or.forEach(o),F.forEach(o),At=f(t),B=a(t,"IMG",{src:!0,alt:!0,width:!0}),Mt=f(t),fe=a(t,"SMALL",{});var br=n(fe);Ao=i(br,"MAE architecture. Taken from the "),Le=a(br,"A",{href:!0});var Hr=n(Le);Mo=i(Hr,"original paper."),Hr.forEach(o),br.forEach(o),$t=f(t),q=a(t,"P",{});var Xe=n(q);$o=i(Xe,"This model was contributed by "),pe=a(Xe,"A",{href:!0,rel:!0});var Wr=n(pe);yo=i(Wr,"nielsr"),Wr.forEach(o),Vo=i(Xe,". The original code can be found "),ue=a(Xe,"A",{href:!0,rel:!0});var Ur=n(ue);ko=i(Ur,"here"),Ur.forEach(o),xo=i(Xe,"."),Xe.forEach(o),yt=f(t),L=a(t,"H2",{class:!0});var Nt=n(L);G=a(Nt,"A",{id:!0,class:!0,href:!0});var Rr=n(G);at=a(Rr,"SPAN",{});var Kr=n(at);b(ge.$$.fragment,Kr),Kr.forEach(o),Rr.forEach(o),Po=f(Nt),nt=a(Nt,"SPAN",{});var Xr=n(nt);Fo=i(Xr,"ViTMAEConfig"),Xr.forEach(o),Nt.forEach(o),Vt=f(t),V=a(t,"DIV",{class:!0});var re=n(V);b(_e.$$.fragment,re),Co=f(re),D=a(re,"P",{});var Be=n(D);jo=i(Be,"This is the configuration class to store the configuration of a "),De=a(Be,"A",{href:!0});var Br=n(De);zo=i(Br,"ViTMAEModel"),Br.forEach(o),qo=i(Be,`. It is used to instantiate an ViT
MAE model according to the specified arguments, defining the model architecture. Instantiating a configuration with
the defaults will yield a similar configuration to that of the ViT
`),ve=a(Be,"A",{href:!0,rel:!0});var Gr=n(ve);Io=i(Gr,"facebook/vit-mae-base"),Gr.forEach(o),No=i(Be," architecture."),Be.forEach(o),So=f(re),O=a(re,"P",{});var Ge=n(O);Lo=i(Ge,"Configuration objects inherit from "),Oe=a(Ge,"A",{href:!0});var Yr=n(Oe);Do=i(Yr,"PretrainedConfig"),Yr.forEach(o),Oo=i(Ge,` and can be used to control the model outputs. Read the
documentation from `),He=a(Ge,"A",{href:!0});var Jr=n(He);Ho=i(Jr,"PretrainedConfig"),Jr.forEach(o),Wo=i(Ge," for more information."),Ge.forEach(o),Uo=f(re),b(Y.$$.fragment,re),re.forEach(o),kt=f(t),H=a(t,"H2",{class:!0});var St=n(H);J=a(St,"A",{id:!0,class:!0,href:!0});var Qr=n(J);st=a(Qr,"SPAN",{});var Zr=n(st);b(Te.$$.fragment,Zr),Zr.forEach(o),Qr.forEach(o),Ro=f(St),it=a(St,"SPAN",{});var ea=n(it);Ko=i(ea,"ViTMAEModel"),ea.forEach(o),St.forEach(o),xt=f(t),j=a(t,"DIV",{class:!0});var Ye=n(j);b(Ee.$$.fragment,Ye),Xo=f(Ye),be=a(Ye,"P",{});var Lt=n(be);Bo=i(Lt,`The bare ViTMAE Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),we=a(Lt,"A",{href:!0,rel:!0});var ta=n(we);Go=i(ta,"torch.nn.Module"),ta.forEach(o),Yo=i(Lt,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Lt.forEach(o),Jo=f(Ye),x=a(Ye,"DIV",{class:!0});var ae=n(x);b(Ae.$$.fragment,ae),Qo=f(ae),W=a(ae,"P",{});var Je=n(W);Zo=i(Je,"The "),We=a(Je,"A",{href:!0});var oa=n(We);er=i(oa,"ViTMAEModel"),oa.forEach(o),tr=i(Je," forward method, overrides the "),lt=a(Je,"CODE",{});var ra=n(lt);or=i(ra,"__call__"),ra.forEach(o),rr=i(Je," special method."),Je.forEach(o),ar=f(ae),b(Q.$$.fragment,ae),nr=f(ae),b(Z.$$.fragment,ae),ae.forEach(o),Ye.forEach(o),Pt=f(t),U=a(t,"H2",{class:!0});var Dt=n(U);ee=a(Dt,"A",{id:!0,class:!0,href:!0});var aa=n(ee);dt=a(aa,"SPAN",{});var na=n(dt);b(Me.$$.fragment,na),na.forEach(o),aa.forEach(o),sr=f(Dt),ct=a(Dt,"SPAN",{});var sa=n(ct);ir=i(sa,"ViTMAEForPreTraining"),sa.forEach(o),Dt.forEach(o),Ft=f(t),z=a(t,"DIV",{class:!0});var Qe=n(z);b($e.$$.fragment,Qe),lr=f(Qe),ye=a(Qe,"P",{});var Ot=n(ye);dr=i(Ot,`The ViTMAE Model transformer with the decoder on top for self-supervised pre-training.
This model is a PyTorch `),Ve=a(Ot,"A",{href:!0,rel:!0});var ia=n(Ve);cr=i(ia,"torch.nn.Module"),ia.forEach(o),hr=i(Ot,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ot.forEach(o),mr=f(Qe),P=a(Qe,"DIV",{class:!0});var ne=n(P);b(ke.$$.fragment,ne),fr=f(ne),R=a(ne,"P",{});var Ze=n(R);pr=i(Ze,"The "),Ue=a(Ze,"A",{href:!0});var la=n(Ue);ur=i(la,"ViTMAEForPreTraining"),la.forEach(o),gr=i(Ze," forward method, overrides the "),ht=a(Ze,"CODE",{});var da=n(ht);_r=i(da,"__call__"),da.forEach(o),vr=i(Ze," special method."),Ze.forEach(o),Tr=f(ne),b(te.$$.fragment,ne),Er=f(ne),b(oe.$$.fragment,ne),ne.forEach(o),Qe.forEach(o),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify(Aa)),d(p,"id","vitmae"),d(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p,"href","#vitmae"),d(_,"class","relative group"),d(K,"id","overview"),d(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K,"href","#overview"),d(I,"class","relative group"),d(ie,"href","https://arxiv.org/abs/2111.06377v2"),d(ie,"rel","nofollow"),d(ze,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(qe,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(de,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-pretraining"),d(de,"rel","nofollow"),d(Ie,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(ce,"href","https://github.com/NielsRogge/Transformers-Tutorials/blob/master/ViTMAE/ViT_MAE_visualization_demo.ipynb"),d(ce,"rel","nofollow"),d(Ne,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTForImageClassification"),d(Se,"href","/docs/transformers/pr_highlight/en/model_doc/vit#transformers.ViTFeatureExtractor"),ua(B.src,$r="https://user-images.githubusercontent.com/11435359/146857310-f258c86c-fde6-48e8-9cee-badd2b21bd2c.png")||d(B,"src",$r),d(B,"alt","drawing"),d(B,"width","600"),d(Le,"href","https://arxiv.org/abs/2111.06377"),d(pe,"href","https://huggingface.co/nielsr"),d(pe,"rel","nofollow"),d(ue,"href","https://github.com/facebookresearch/mae"),d(ue,"rel","nofollow"),d(G,"id","transformers.ViTMAEConfig"),d(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G,"href","#transformers.ViTMAEConfig"),d(L,"class","relative group"),d(De,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(ve,"href","https://huggingface.co/facebook/vit-mae-base"),d(ve,"rel","nofollow"),d(Oe,"href","/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig"),d(He,"href","/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"id","transformers.ViTMAEModel"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#transformers.ViTMAEModel"),d(H,"class","relative group"),d(we,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(we,"rel","nofollow"),d(We,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"id","transformers.ViTMAEForPreTraining"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#transformers.ViTMAEForPreTraining"),d(U,"class","relative group"),d(Ve,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Ve,"rel","nofollow"),d(Ue,"href","/docs/transformers/pr_highlight/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,h){e(document.head,c),u(t,T,h),u(t,_,h),e(_,p),e(p,v),w(l,v,null),e(_,g),e(_,C),e(C,Ht),u(t,_t,h),u(t,I,h),e(I,K),e(K,et),w(se,et,null),e(I,Wt),e(I,tt),e(tt,Ut),u(t,vt,h),u(t,X,h),e(X,Rt),e(X,ie),e(ie,Kt),e(X,Xt),u(t,Tt,h),u(t,Fe,h),e(Fe,Bt),u(t,Et,h),u(t,Ce,h),e(Ce,ot),e(ot,Gt),u(t,bt,h),u(t,je,h),e(je,Yt),u(t,wt,h),u(t,y,h),e(y,le),e(le,Jt),e(le,ze),e(ze,Qt),e(le,Zt),e(y,eo),e(y,N),e(N,to),e(N,qe),e(qe,oo),e(N,ro),e(N,de),e(de,ao),e(N,no),e(y,so),e(y,S),e(S,io),e(S,Ie),e(Ie,lo),e(S,co),e(S,ce),e(ce,ho),e(S,mo),e(y,fo),e(y,he),e(he,po),e(he,Ne),e(Ne,uo),e(he,go),e(y,_o),e(y,me),e(me,vo),e(me,Se),e(Se,To),e(me,Eo),e(y,bo),e(y,rt),e(rt,wo),u(t,At,h),u(t,B,h),u(t,Mt,h),u(t,fe,h),e(fe,Ao),e(fe,Le),e(Le,Mo),u(t,$t,h),u(t,q,h),e(q,$o),e(q,pe),e(pe,yo),e(q,Vo),e(q,ue),e(ue,ko),e(q,xo),u(t,yt,h),u(t,L,h),e(L,G),e(G,at),w(ge,at,null),e(L,Po),e(L,nt),e(nt,Fo),u(t,Vt,h),u(t,V,h),w(_e,V,null),e(V,Co),e(V,D),e(D,jo),e(D,De),e(De,zo),e(D,qo),e(D,ve),e(ve,Io),e(D,No),e(V,So),e(V,O),e(O,Lo),e(O,Oe),e(Oe,Do),e(O,Oo),e(O,He),e(He,Ho),e(O,Wo),e(V,Uo),w(Y,V,null),u(t,kt,h),u(t,H,h),e(H,J),e(J,st),w(Te,st,null),e(H,Ro),e(H,it),e(it,Ko),u(t,xt,h),u(t,j,h),w(Ee,j,null),e(j,Xo),e(j,be),e(be,Bo),e(be,we),e(we,Go),e(be,Yo),e(j,Jo),e(j,x),w(Ae,x,null),e(x,Qo),e(x,W),e(W,Zo),e(W,We),e(We,er),e(W,tr),e(W,lt),e(lt,or),e(W,rr),e(x,ar),w(Q,x,null),e(x,nr),w(Z,x,null),u(t,Pt,h),u(t,U,h),e(U,ee),e(ee,dt),w(Me,dt,null),e(U,sr),e(U,ct),e(ct,ir),u(t,Ft,h),u(t,z,h),w($e,z,null),e(z,lr),e(z,ye),e(ye,dr),e(ye,Ve),e(Ve,cr),e(ye,hr),e(z,mr),e(z,P),w(ke,P,null),e(P,fr),e(P,R),e(R,pr),e(R,Ue),e(Ue,ur),e(R,gr),e(R,ht),e(ht,_r),e(R,vr),e(P,Tr),w(te,P,null),e(P,Er),w(oe,P,null),Ct=!0},p(t,[h]){const xe={};h&2&&(xe.$$scope={dirty:h,ctx:t}),Y.$set(xe);const mt={};h&2&&(mt.$$scope={dirty:h,ctx:t}),Q.$set(mt);const ft={};h&2&&(ft.$$scope={dirty:h,ctx:t}),Z.$set(ft);const pt={};h&2&&(pt.$$scope={dirty:h,ctx:t}),te.$set(pt);const Pe={};h&2&&(Pe.$$scope={dirty:h,ctx:t}),oe.$set(Pe)},i(t){Ct||(A(l.$$.fragment,t),A(se.$$.fragment,t),A(ge.$$.fragment,t),A(_e.$$.fragment,t),A(Y.$$.fragment,t),A(Te.$$.fragment,t),A(Ee.$$.fragment,t),A(Ae.$$.fragment,t),A(Q.$$.fragment,t),A(Z.$$.fragment,t),A(Me.$$.fragment,t),A($e.$$.fragment,t),A(ke.$$.fragment,t),A(te.$$.fragment,t),A(oe.$$.fragment,t),Ct=!0)},o(t){M(l.$$.fragment,t),M(se.$$.fragment,t),M(ge.$$.fragment,t),M(_e.$$.fragment,t),M(Y.$$.fragment,t),M(Te.$$.fragment,t),M(Ee.$$.fragment,t),M(Ae.$$.fragment,t),M(Q.$$.fragment,t),M(Z.$$.fragment,t),M(Me.$$.fragment,t),M($e.$$.fragment,t),M(ke.$$.fragment,t),M(te.$$.fragment,t),M(oe.$$.fragment,t),Ct=!1},d(t){o(c),t&&o(T),t&&o(_),$(l),t&&o(_t),t&&o(I),$(se),t&&o(vt),t&&o(X),t&&o(Tt),t&&o(Fe),t&&o(Et),t&&o(Ce),t&&o(bt),t&&o(je),t&&o(wt),t&&o(y),t&&o(At),t&&o(B),t&&o(Mt),t&&o(fe),t&&o($t),t&&o(q),t&&o(yt),t&&o(L),$(ge),t&&o(Vt),t&&o(V),$(_e),$(Y),t&&o(kt),t&&o(H),$(Te),t&&o(xt),t&&o(j),$(Ee),$(Ae),$(Q),$(Z),t&&o(Pt),t&&o(U),$(Me),t&&o(Ft),t&&o(z),$($e),$(ke),$(te),$(oe)}}}const Aa={local:"vitmae",sections:[{local:"overview",title:"Overview"},{local:"transformers.ViTMAEConfig",title:"ViTMAEConfig"},{local:"transformers.ViTMAEModel",title:"ViTMAEModel"},{local:"transformers.ViTMAEForPreTraining",title:"ViTMAEForPreTraining"}],title:"ViTMAE"};function Ma(k){return ga(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fa extends ha{constructor(c){super();ma(this,c,Ma,wa,fa,{})}}export{Fa as default,Aa as metadata};
