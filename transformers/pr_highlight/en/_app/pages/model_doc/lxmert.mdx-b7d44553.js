import{S as rc,i as sc,s as ac,e as n,k as l,w as b,t as a,M as ic,c as r,d as t,m as d,a as s,x as w,h as i,b as c,F as e,g as u,y,q as k,o as L,B as $,v as lc,L as ps}from"../../chunks/vendor-6b77c823.js";import{T as Xo}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as fs}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Re}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as us}from"../../chunks/ExampleCodeBlock-5212b321.js";function dc(q){let h,x,f,g,T;return{c(){h=n("p"),x=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=n("code"),g=a("Module"),T=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){h=r(m,"P",{});var _=s(h);x=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r(_,"CODE",{});var z=s(f);g=i(z,"Module"),z.forEach(t),T=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(m,_){u(m,h,_),e(h,x),e(h,f),e(f,g),e(h,T)},d(m){m&&t(h)}}}function cc(q){let h,x,f,g,T;return g=new fs({props:{code:`from transformers import LxmertTokenizer, LxmertModel
import torch

tokenizer = LxmertTokenizer.from_pretrained("unc-nlp/lxmert-base-uncased")
model = LxmertModel.from_pretrained("unc-nlp/lxmert-base-uncased")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LxmertTokenizer, LxmertModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = LxmertTokenizer.from_pretrained(<span class="hljs-string">&quot;unc-nlp/lxmert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = LxmertModel.from_pretrained(<span class="hljs-string">&quot;unc-nlp/lxmert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){h=n("p"),x=a("Example:"),f=l(),b(g.$$.fragment)},l(m){h=r(m,"P",{});var _=s(h);x=i(_,"Example:"),_.forEach(t),f=d(m),w(g.$$.fragment,m)},m(m,_){u(m,h,_),e(h,x),u(m,f,_),y(g,m,_),T=!0},p:ps,i(m){T||(k(g.$$.fragment,m),T=!0)},o(m){L(g.$$.fragment,m),T=!1},d(m){m&&t(h),m&&t(f),$(g,m)}}}function hc(q){let h,x,f,g,T;return{c(){h=n("p"),x=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=n("code"),g=a("Module"),T=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){h=r(m,"P",{});var _=s(h);x=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r(_,"CODE",{});var z=s(f);g=i(z,"Module"),z.forEach(t),T=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(m,_){u(m,h,_),e(h,x),e(h,f),e(f,g),e(h,T)},d(m){m&&t(h)}}}function mc(q){let h,x,f,g,T;return{c(){h=n("p"),x=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=n("code"),g=a("Module"),T=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){h=r(m,"P",{});var _=s(h);x=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r(_,"CODE",{});var z=s(f);g=i(z,"Module"),z.forEach(t),T=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(m,_){u(m,h,_),e(h,x),e(h,f),e(f,g),e(h,T)},d(m){m&&t(h)}}}function uc(q){let h,x,f,g,T;return g=new fs({props:{code:`from transformers import LxmertTokenizer, LxmertForQuestionAnswering
import torch

tokenizer = LxmertTokenizer.from_pretrained("unc-nlp/lxmert-base-uncased")
model = LxmertForQuestionAnswering.from_pretrained("unc-nlp/lxmert-base-uncased")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"

inputs = tokenizer(question, text, return_tensors="pt")
with torch.no_grad():
    outputs = model(**inputs)

answer_start_index = outputs.start_logits.argmax()
answer_end_index = outputs.end_logits.argmax()

predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]
tokenizer.decode(predict_answer_tokens)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LxmertTokenizer, LxmertForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = LxmertTokenizer.from_pretrained(<span class="hljs-string">&quot;unc-nlp/lxmert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = LxmertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;unc-nlp/lxmert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>answer_start_index = outputs.start_logits.argmax()
<span class="hljs-meta">&gt;&gt;&gt; </span>answer_end_index = outputs.end_logits.argmax()

<span class="hljs-meta">&gt;&gt;&gt; </span>predict_answer_tokens = inputs.input_ids[<span class="hljs-number">0</span>, answer_start_index : answer_end_index + <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predict_answer_tokens)
`}}),{c(){h=n("p"),x=a("Example:"),f=l(),b(g.$$.fragment)},l(m){h=r(m,"P",{});var _=s(h);x=i(_,"Example:"),_.forEach(t),f=d(m),w(g.$$.fragment,m)},m(m,_){u(m,h,_),e(h,x),u(m,f,_),y(g,m,_),T=!0},p:ps,i(m){T||(k(g.$$.fragment,m),T=!0)},o(m){L(g.$$.fragment,m),T=!1},d(m){m&&t(h),m&&t(f),$(g,m)}}}function pc(q){let h,x;return h=new fs({props:{code:`# target is "nice puppet"
target_start_index, target_end_index = torch.tensor([14]), torch.tensor([15])

outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
loss = outputs.loss
round(loss.item(), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># target is &quot;nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_start_index, target_end_index = torch.tensor([<span class="hljs-number">14</span>]), torch.tensor([<span class="hljs-number">15</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
`}}),{c(){b(h.$$.fragment)},l(f){w(h.$$.fragment,f)},m(f,g){y(h,f,g),x=!0},p:ps,i(f){x||(k(h.$$.fragment,f),x=!0)},o(f){L(h.$$.fragment,f),x=!1},d(f){$(h,f)}}}function fc(q){let h,x,f,g,T,m,_,z,Fe,re,E,Y,D,ee,ze,S,Ee,_e,N,Q,te,de,M,A,se,oe,ve,ae,V,Me,Te,P,qe,Z,j,ce,ne,Pe,he,W,Ae,X,Oe;return{c(){h=n("p"),x=a("TF 2.0 models accepts two formats as inputs:"),f=l(),g=n("ul"),T=n("li"),m=a("having all inputs as keyword arguments (like PyTorch models), or"),_=l(),z=n("li"),Fe=a("having all inputs as a list, tuple or dict in the first positional arguments."),re=l(),E=n("p"),Y=a("This second option is useful when using "),D=n("code"),ee=a("tf.keras.Model.fit"),ze=a(` method which currently requires having all the
tensors in the first argument of the model call function: `),S=n("code"),Ee=a("model(inputs)"),_e=a("."),N=l(),Q=n("p"),te=a(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),de=l(),M=n("ul"),A=n("li"),se=a("a single Tensor with "),oe=n("code"),ve=a("input_ids"),ae=a(" only and nothing else: "),V=n("code"),Me=a("model(inputs_ids)"),Te=l(),P=n("li"),qe=a(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),Z=n("code"),j=a("model([input_ids, attention_mask])"),ce=a(" or "),ne=n("code"),Pe=a("model([input_ids, attention_mask, token_type_ids])"),he=l(),W=n("li"),Ae=a(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),X=n("code"),Oe=a('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(v){h=r(v,"P",{});var F=s(h);x=i(F,"TF 2.0 models accepts two formats as inputs:"),F.forEach(t),f=d(v),g=r(v,"UL",{});var me=s(g);T=r(me,"LI",{});var ue=s(T);m=i(ue,"having all inputs as keyword arguments (like PyTorch models), or"),ue.forEach(t),_=d(me),z=r(me,"LI",{});var We=s(z);Fe=i(We,"having all inputs as a list, tuple or dict in the first positional arguments."),We.forEach(t),me.forEach(t),re=d(v),E=r(v,"P",{});var B=s(E);Y=i(B,"This second option is useful when using "),D=r(B,"CODE",{});var pe=s(D);ee=i(pe,"tf.keras.Model.fit"),pe.forEach(t),ze=i(B,` method which currently requires having all the
tensors in the first argument of the model call function: `),S=r(B,"CODE",{});var Xe=s(S);Ee=i(Xe,"model(inputs)"),Xe.forEach(t),_e=i(B,"."),B.forEach(t),N=d(v),Q=r(v,"P",{});var Be=s(Q);te=i(Be,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),Be.forEach(t),de=d(v),M=r(v,"UL",{});var I=s(M);A=r(I,"LI",{});var O=s(A);se=i(O,"a single Tensor with "),oe=r(O,"CODE",{});var ie=s(oe);ve=i(ie,"input_ids"),ie.forEach(t),ae=i(O," only and nothing else: "),V=r(O,"CODE",{});var Ce=s(V);Me=i(Ce,"model(inputs_ids)"),Ce.forEach(t),O.forEach(t),Te=d(I),P=r(I,"LI",{});var C=s(P);qe=i(C,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),Z=r(C,"CODE",{});var He=s(Z);j=i(He,"model([input_ids, attention_mask])"),He.forEach(t),ce=i(C," or "),ne=r(C,"CODE",{});var Ne=s(ne);Pe=i(Ne,"model([input_ids, attention_mask, token_type_ids])"),Ne.forEach(t),C.forEach(t),he=d(I),W=r(I,"LI",{});var je=s(W);Ae=i(je,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),X=r(je,"CODE",{});var De=s(X);Oe=i(De,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),De.forEach(t),je.forEach(t),I.forEach(t)},m(v,F){u(v,h,F),e(h,x),u(v,f,F),u(v,g,F),e(g,T),e(T,m),e(g,_),e(g,z),e(z,Fe),u(v,re,F),u(v,E,F),e(E,Y),e(E,D),e(D,ee),e(E,ze),e(E,S),e(S,Ee),e(E,_e),u(v,N,F),u(v,Q,F),e(Q,te),u(v,de,F),u(v,M,F),e(M,A),e(A,se),e(A,oe),e(oe,ve),e(A,ae),e(A,V),e(V,Me),e(M,Te),e(M,P),e(P,qe),e(P,Z),e(Z,j),e(P,ce),e(P,ne),e(ne,Pe),e(M,he),e(M,W),e(W,Ae),e(W,X),e(X,Oe)},d(v){v&&t(h),v&&t(f),v&&t(g),v&&t(re),v&&t(E),v&&t(N),v&&t(Q),v&&t(de),v&&t(M)}}}function gc(q){let h,x,f,g,T;return{c(){h=n("p"),x=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=n("code"),g=a("Module"),T=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){h=r(m,"P",{});var _=s(h);x=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r(_,"CODE",{});var z=s(f);g=i(z,"Module"),z.forEach(t),T=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(m,_){u(m,h,_),e(h,x),e(h,f),e(f,g),e(h,T)},d(m){m&&t(h)}}}function _c(q){let h,x,f,g,T;return g=new fs({props:{code:`from transformers import LxmertTokenizer, TFLxmertModel
import tensorflow as tf

tokenizer = LxmertTokenizer.from_pretrained("unc-nlp/lxmert-base-uncased")
model = TFLxmertModel.from_pretrained("unc-nlp/lxmert-base-uncased")

inputs = tokenizer("Hello, my dog is cute", return_tensors="tf")
outputs = model(inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LxmertTokenizer, TFLxmertModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = LxmertTokenizer.from_pretrained(<span class="hljs-string">&quot;unc-nlp/lxmert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFLxmertModel.from_pretrained(<span class="hljs-string">&quot;unc-nlp/lxmert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){h=n("p"),x=a("Example:"),f=l(),b(g.$$.fragment)},l(m){h=r(m,"P",{});var _=s(h);x=i(_,"Example:"),_.forEach(t),f=d(m),w(g.$$.fragment,m)},m(m,_){u(m,h,_),e(h,x),u(m,f,_),y(g,m,_),T=!0},p:ps,i(m){T||(k(g.$$.fragment,m),T=!0)},o(m){L(g.$$.fragment,m),T=!1},d(m){m&&t(h),m&&t(f),$(g,m)}}}function vc(q){let h,x,f,g,T,m,_,z,Fe,re,E,Y,D,ee,ze,S,Ee,_e,N,Q,te,de,M,A,se,oe,ve,ae,V,Me,Te,P,qe,Z,j,ce,ne,Pe,he,W,Ae,X,Oe;return{c(){h=n("p"),x=a("TF 2.0 models accepts two formats as inputs:"),f=l(),g=n("ul"),T=n("li"),m=a("having all inputs as keyword arguments (like PyTorch models), or"),_=l(),z=n("li"),Fe=a("having all inputs as a list, tuple or dict in the first positional arguments."),re=l(),E=n("p"),Y=a("This second option is useful when using "),D=n("code"),ee=a("tf.keras.Model.fit"),ze=a(` method which currently requires having all the
tensors in the first argument of the model call function: `),S=n("code"),Ee=a("model(inputs)"),_e=a("."),N=l(),Q=n("p"),te=a(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),de=l(),M=n("ul"),A=n("li"),se=a("a single Tensor with "),oe=n("code"),ve=a("input_ids"),ae=a(" only and nothing else: "),V=n("code"),Me=a("model(inputs_ids)"),Te=l(),P=n("li"),qe=a(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),Z=n("code"),j=a("model([input_ids, attention_mask])"),ce=a(" or "),ne=n("code"),Pe=a("model([input_ids, attention_mask, token_type_ids])"),he=l(),W=n("li"),Ae=a(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),X=n("code"),Oe=a('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(v){h=r(v,"P",{});var F=s(h);x=i(F,"TF 2.0 models accepts two formats as inputs:"),F.forEach(t),f=d(v),g=r(v,"UL",{});var me=s(g);T=r(me,"LI",{});var ue=s(T);m=i(ue,"having all inputs as keyword arguments (like PyTorch models), or"),ue.forEach(t),_=d(me),z=r(me,"LI",{});var We=s(z);Fe=i(We,"having all inputs as a list, tuple or dict in the first positional arguments."),We.forEach(t),me.forEach(t),re=d(v),E=r(v,"P",{});var B=s(E);Y=i(B,"This second option is useful when using "),D=r(B,"CODE",{});var pe=s(D);ee=i(pe,"tf.keras.Model.fit"),pe.forEach(t),ze=i(B,` method which currently requires having all the
tensors in the first argument of the model call function: `),S=r(B,"CODE",{});var Xe=s(S);Ee=i(Xe,"model(inputs)"),Xe.forEach(t),_e=i(B,"."),B.forEach(t),N=d(v),Q=r(v,"P",{});var Be=s(Q);te=i(Be,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),Be.forEach(t),de=d(v),M=r(v,"UL",{});var I=s(M);A=r(I,"LI",{});var O=s(A);se=i(O,"a single Tensor with "),oe=r(O,"CODE",{});var ie=s(oe);ve=i(ie,"input_ids"),ie.forEach(t),ae=i(O," only and nothing else: "),V=r(O,"CODE",{});var Ce=s(V);Me=i(Ce,"model(inputs_ids)"),Ce.forEach(t),O.forEach(t),Te=d(I),P=r(I,"LI",{});var C=s(P);qe=i(C,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),Z=r(C,"CODE",{});var He=s(Z);j=i(He,"model([input_ids, attention_mask])"),He.forEach(t),ce=i(C," or "),ne=r(C,"CODE",{});var Ne=s(ne);Pe=i(Ne,"model([input_ids, attention_mask, token_type_ids])"),Ne.forEach(t),C.forEach(t),he=d(I),W=r(I,"LI",{});var je=s(W);Ae=i(je,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),X=r(je,"CODE",{});var De=s(X);Oe=i(De,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),De.forEach(t),je.forEach(t),I.forEach(t)},m(v,F){u(v,h,F),e(h,x),u(v,f,F),u(v,g,F),e(g,T),e(T,m),e(g,_),e(g,z),e(z,Fe),u(v,re,F),u(v,E,F),e(E,Y),e(E,D),e(D,ee),e(E,ze),e(E,S),e(S,Ee),e(E,_e),u(v,N,F),u(v,Q,F),e(Q,te),u(v,de,F),u(v,M,F),e(M,A),e(A,se),e(A,oe),e(oe,ve),e(A,ae),e(A,V),e(V,Me),e(M,Te),e(M,P),e(P,qe),e(P,Z),e(Z,j),e(P,ce),e(P,ne),e(ne,Pe),e(M,he),e(M,W),e(W,Ae),e(W,X),e(X,Oe)},d(v){v&&t(h),v&&t(f),v&&t(g),v&&t(re),v&&t(E),v&&t(N),v&&t(Q),v&&t(de),v&&t(M)}}}function Tc(q){let h,x,f,g,T;return{c(){h=n("p"),x=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=n("code"),g=a("Module"),T=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){h=r(m,"P",{});var _=s(h);x=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r(_,"CODE",{});var z=s(f);g=i(z,"Module"),z.forEach(t),T=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(m,_){u(m,h,_),e(h,x),e(h,f),e(f,g),e(h,T)},d(m){m&&t(h)}}}function xc(q){let h,x,f,g,T,m,_,z,Fe,re,E,Y,D,ee,ze,S,Ee,_e,N,Q,te,de,M,A,se,oe,ve,ae,V,Me,Te,P,qe,Z,j,ce,ne,Pe,he,W,Ae,X,Oe,v,F,me,ue,We,B,pe,Xe,Be,I,O,ie,Ce,C,He,Ne,je,De,Ie,Rt,gs,Ge,_s,Bo,vs,Ts,Ho,xs,bs,ws,Ue,ys,Go,ks,Ls,Uo,$s,Fs,mr,Ke,pt,$n,Dt,zs,Fn,Es,ur,fe,St,Ms,zn,qs,Ps,ft,Ko,As,Os,Jo,Cs,Ns,js,Qt,Is,Yo,Rs,Ds,pr,Je,gt,En,Vt,Ss,Mn,Qs,fr,ge,Wt,Vs,Xt,Ws,qn,Xs,Bs,Hs,_t,Zo,Gs,Us,en,Ks,Js,Ys,Bt,Zs,tn,ea,ta,gr,Ye,vt,Pn,Ht,oa,An,na,_r,Ze,Gt,ra,On,sa,vr,et,Ut,aa,Kt,ia,on,la,da,Tr,tt,Jt,ca,Yt,ha,nn,ma,ua,xr,ot,Zt,pa,Cn,fa,br,nt,eo,ga,to,_a,rn,va,Ta,wr,rt,Tt,Nn,oo,xa,jn,ba,yr,H,no,wa,In,ya,ka,ro,La,so,$a,Fa,za,ao,Ea,sn,Ma,qa,Pa,io,Aa,lo,Oa,Ca,Na,xe,co,ja,st,Ia,an,Ra,Da,Rn,Sa,Qa,Va,xt,Wa,bt,kr,at,wt,Dn,ho,Xa,Sn,Ba,Lr,G,mo,Ha,Qn,Ga,Ua,uo,Ka,po,Ja,Ya,Za,fo,ei,ln,ti,oi,ni,go,ri,_o,si,ai,ii,Se,vo,li,it,di,dn,ci,hi,Vn,mi,ui,pi,yt,$r,lt,kt,Wn,To,fi,Xn,gi,Fr,U,xo,_i,Bn,vi,Ti,bo,xi,wo,bi,wi,yi,yo,ki,cn,Li,$i,Fi,ko,zi,Lo,Ei,Mi,qi,le,$o,Pi,dt,Ai,hn,Oi,Ci,Hn,Ni,ji,Ii,Lt,Ri,$t,Di,Ft,zr,ct,zt,Gn,Fo,Si,Un,Qi,Er,K,zo,Vi,Kn,Wi,Xi,Eo,Bi,Mo,Hi,Gi,Ui,qo,Ki,Po,Ji,Yi,Zi,Et,el,be,Ao,tl,ht,ol,mn,nl,rl,Jn,sl,al,il,Mt,ll,qt,Mr,mt,Pt,Yn,Oo,dl,Zn,cl,qr,J,Co,hl,No,ml,er,ul,pl,fl,jo,gl,Io,_l,vl,Tl,Ro,xl,Do,bl,wl,yl,At,kl,Qe,So,Ll,ut,$l,un,Fl,zl,tr,El,Ml,ql,Ot,Pr;return m=new Re({}),ee=new Re({}),C=new Re({}),Rt=new R({props:{name:"class transformers.LxmertConfig",anchor:"transformers.LxmertConfig",parameters:[{name:"vocab_size",val:" = 30522"},{name:"hidden_size",val:" = 768"},{name:"num_attention_heads",val:" = 12"},{name:"num_qa_labels",val:" = 9500"},{name:"num_object_labels",val:" = 1600"},{name:"num_attr_labels",val:" = 400"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.1"},{name:"max_position_embeddings",val:" = 512"},{name:"type_vocab_size",val:" = 2"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"l_layers",val:" = 9"},{name:"x_layers",val:" = 5"},{name:"r_layers",val:" = 5"},{name:"visual_feat_dim",val:" = 2048"},{name:"visual_pos_dim",val:" = 4"},{name:"visual_loss_normalizer",val:" = 6.67"},{name:"task_matched",val:" = True"},{name:"task_mask_lm",val:" = True"},{name:"task_obj_predict",val:" = True"},{name:"task_qa",val:" = True"},{name:"visual_obj_loss",val:" = True"},{name:"visual_attr_loss",val:" = True"},{name:"visual_feat_loss",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LxmertConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 30522) &#x2014;
Vocabulary size of the LXMERT model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> or <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a>.`,name:"vocab_size"},{anchor:"transformers.LxmertConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.LxmertConfig.r_layers",description:`<strong>r_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 5) &#x2014;
Number of hidden layers in the Transformer visual encoder.`,name:"r_layers"},{anchor:"transformers.LxmertConfig.l_layers",description:`<strong>l_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 9) &#x2014;
Number of hidden layers in the Transformer language encoder.`,name:"l_layers"},{anchor:"transformers.LxmertConfig.x_layers",description:`<strong>x_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 5) &#x2014;
Number of hidden layers in the Transformer cross modality encoder.`,name:"x_layers"},{anchor:"transformers.LxmertConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 5) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.LxmertConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.LxmertConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>Callable</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.LxmertConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.LxmertConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.LxmertConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.LxmertConfig.type_vocab_size",description:`<strong>type_vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The vocabulary size of the <em>token_type_ids</em> passed into <a href="/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertModel">BertModel</a>.`,name:"type_vocab_size"},{anchor:"transformers.LxmertConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.LxmertConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.LxmertConfig.visual_feat_dim",description:`<strong>visual_feat_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
This represents the last dimension of the pooled-object features used as input for the model, representing
the size of each object feature itself.`,name:"visual_feat_dim"},{anchor:"transformers.LxmertConfig.visual_pos_dim",description:`<strong>visual_pos_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
This represents the number of spacial features that are mixed into the visual features. The default is set
to 4 because most commonly this will represent the location of a bounding box. i.e., (x, y, width, height)`,name:"visual_pos_dim"},{anchor:"transformers.LxmertConfig.visual_loss_normalizer",description:`<strong>visual_loss_normalizer</strong> (<code>float</code>, <em>optional</em>, defaults to 1/15) &#x2014;
This represents the scaling factor in which each visual loss is multiplied by if during pretraining, one
decided to train with multiple vision-based loss objectives.`,name:"visual_loss_normalizer"},{anchor:"transformers.LxmertConfig.num_qa_labels",description:`<strong>num_qa_labels</strong> (<code>int</code>, <em>optional</em>, defaults to 9500) &#x2014;
This represents the total number of different question answering (QA) labels there are. If using more than
one dataset with QA, the user will need to account for the total number of labels that all of the datasets
have in total.`,name:"num_qa_labels"},{anchor:"transformers.LxmertConfig.num_object_labels",description:`<strong>num_object_labels</strong> (<code>int</code>, <em>optional</em>, defaults to 1600) &#x2014;
This represents the total number of semantically unique objects that lxmert will be able to classify a
pooled-object feature as belonging too.`,name:"num_object_labels"},{anchor:"transformers.LxmertConfig.num_attr_labels",description:`<strong>num_attr_labels</strong> (<code>int</code>, <em>optional</em>, defaults to 400) &#x2014;
This represents the total number of semantically unique attributes that lxmert will be able to classify a
pooled-object feature as possessing.`,name:"num_attr_labels"},{anchor:"transformers.LxmertConfig.task_matched",description:`<strong>task_matched</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
This task is used for sentence-image matching. If the sentence correctly describes the image the label will
be 1. If the sentence does not correctly describe the image, the label will be 0.`,name:"task_matched"},{anchor:"transformers.LxmertConfig.task_mask_lm",description:`<strong>task_mask_lm</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to add masked language modeling (as used in pretraining models such as BERT) to the loss
objective.`,name:"task_mask_lm"},{anchor:"transformers.LxmertConfig.task_obj_predict",description:`<strong>task_obj_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to add object prediction, attribute prediction and feature regression to the loss objective.`,name:"task_obj_predict"},{anchor:"transformers.LxmertConfig.task_qa",description:`<strong>task_qa</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to add the question-answering loss to the objective`,name:"task_qa"},{anchor:"transformers.LxmertConfig.visual_obj_loss",description:`<strong>visual_obj_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to calculate the object-prediction loss objective`,name:"visual_obj_loss"},{anchor:"transformers.LxmertConfig.visual_attr_loss",description:`<strong>visual_attr_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to calculate the attribute-prediction loss objective`,name:"visual_attr_loss"},{anchor:"transformers.LxmertConfig.visual_feat_loss",description:`<strong>visual_feat_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to calculate the feature-regression loss objective`,name:"visual_feat_loss"},{anchor:"transformers.LxmertConfig.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should return the attentions from the vision, language, and cross-modality layers
should be returned.`,name:"output_attentions"},{anchor:"transformers.LxmertConfig.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should return the hidden states from the vision, language, and cross-modality
layers should be returned.`,name:"output_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/configuration_lxmert.py#L29"}}),Dt=new Re({}),St=new R({props:{name:"class transformers.LxmertTokenizer",anchor:"transformers.LxmertTokenizer",parameters:[{name:"vocab_file",val:""},{name:"do_lower_case",val:" = True"},{name:"do_basic_tokenize",val:" = True"},{name:"never_split",val:" = None"},{name:"unk_token",val:" = '[UNK]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"tokenize_chinese_chars",val:" = True"},{name:"strip_accents",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/tokenization_lxmert.py#L36"}}),Vt=new Re({}),Wt=new R({props:{name:"class transformers.LxmertTokenizerFast",anchor:"transformers.LxmertTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"do_lower_case",val:" = True"},{name:"unk_token",val:" = '[UNK]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"tokenize_chinese_chars",val:" = True"},{name:"strip_accents",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/tokenization_lxmert_fast.py#L40"}}),Ht=new Re({}),Gt=new R({props:{name:"class transformers.models.lxmert.modeling_lxmert.LxmertModelOutput",anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput",parameters:[{name:"language_output",val:": typing.Optional[torch.FloatTensor] = None"},{name:"vision_output",val:": typing.Optional[torch.FloatTensor] = None"},{name:"pooled_output",val:": typing.Optional[torch.FloatTensor] = None"},{name:"language_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"vision_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"language_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"vision_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput.language_output",description:`<strong>language_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the language encoder.`,name:"language_output"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput.vision_output",description:`<strong>vision_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the visual encoder.`,name:"vision_output"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput.pooled_output",description:`<strong>pooled_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) &#x2014;
Last layer hidden-state of the first token of the sequence (classification, CLS, token) further processed
by a Linear layer and a Tanh activation function. The Linear`,name:"pooled_output"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput.language_hidden_states",description:`<strong>language_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"language_hidden_states"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput.vision_hidden_states",description:`<strong>vision_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"vision_hidden_states"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput.language_attentions",description:`<strong>language_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"language_attentions"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput.vision_attentions",description:`<strong>vision_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"vision_attentions"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput.cross_encoder_attentions",description:`<strong>cross_encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"cross_encoder_attentions"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L61"}}),Ut=new R({props:{name:"class transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput",anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput",parameters:[{name:"loss",val:": [<class 'torch.FloatTensor'>] = None"},{name:"prediction_logits",val:": typing.Optional[torch.FloatTensor] = None"},{name:"cross_relationship_score",val:": typing.Optional[torch.FloatTensor] = None"},{name:"question_answering_score",val:": typing.Optional[torch.FloatTensor] = None"},{name:"language_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"vision_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"language_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"vision_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput.loss",description:`<strong>loss</strong> (<em>optional</em>, returned when <code>labels</code> is provided, <code>torch.FloatTensor</code> of shape <code>(1,)</code>) &#x2014;
Total loss as the sum of the masked language modeling loss and the next sequence prediction
(classification) loss.`,name:"loss"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput.prediction_logits",description:`<strong>prediction_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).
cross_relationship_score &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2)</code>):
Prediction scores of the textual matching objective (classification) head (scores of True/False
continuation before SoftMax).
question_answering_score &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, n_qa_answers)</code>):
Prediction scores of question answering objective (classification).`,name:"prediction_logits"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput.language_hidden_states",description:`<strong>language_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"language_hidden_states"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput.vision_hidden_states",description:`<strong>vision_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"vision_hidden_states"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput.language_attentions",description:`<strong>language_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"language_attentions"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput.vision_attentions",description:`<strong>vision_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"vision_attentions"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput.cross_encoder_attentions",description:`<strong>cross_encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"cross_encoder_attentions"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L147"}}),Jt=new R({props:{name:"class transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput",anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"question_answering_score",val:": typing.Optional[torch.FloatTensor] = None"},{name:"language_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"vision_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"language_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"vision_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput.loss",description:`<strong>loss</strong> (<em>optional</em>, returned when <code>labels</code> is provided, <code>torch.FloatTensor</code> of shape <code>(1,)</code>) &#x2014;
Total loss as the sum of the masked language modeling loss and the next sequence prediction
(classification) loss.k.
question_answering_score &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, n_qa_answers)</code>, <em>optional</em>):
Prediction scores of question answering objective (classification).`,name:"loss"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput.language_hidden_states",description:`<strong>language_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"language_hidden_states"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput.vision_hidden_states",description:`<strong>vision_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"vision_hidden_states"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput.language_attentions",description:`<strong>language_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"language_attentions"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput.vision_attentions",description:`<strong>vision_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"vision_attentions"},{anchor:"transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput.cross_encoder_attentions",description:`<strong>cross_encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"cross_encoder_attentions"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L107"}}),Zt=new R({props:{name:"class transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput",anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput",parameters:[{name:"language_output",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"vision_output",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"pooled_output",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"language_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"vision_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"language_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"vision_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"cross_encoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],parametersDescription:[{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput.language_output",description:`<strong>language_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the language encoder.`,name:"language_output"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput.vision_output",description:`<strong>vision_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the visual encoder.`,name:"vision_output"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput.pooled_output",description:`<strong>pooled_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) &#x2014;
Last layer hidden-state of the first token of the sequence (classification, CLS, token) further processed
by a Linear layer and a Tanh activation function. The Linear`,name:"pooled_output"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput.language_hidden_states",description:`<strong>language_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for input features + one for the output of each cross-modality layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.`,name:"language_hidden_states"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput.vision_hidden_states",description:`<strong>vision_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for input features + one for the output of each cross-modality layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.`,name:"vision_hidden_states"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput.language_attentions",description:`<strong>language_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"language_attentions"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput.vision_attentions",description:`<strong>vision_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"vision_attentions"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput.cross_encoder_attentions",description:`<strong>cross_encoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"cross_encoder_attentions"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_tf_lxmert.py#L50"}}),eo=new R({props:{name:"class transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput",anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput",parameters:[{name:"loss",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"prediction_logits",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"cross_relationship_score",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"question_answering_score",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"language_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"vision_hidden_states",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"language_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"vision_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"},{name:"cross_encoder_attentions",val:": typing.Optional[typing.Tuple[tensorflow.python.framework.ops.Tensor]] = None"}],parametersDescription:[{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput.loss",description:`<strong>loss</strong> (<em>optional</em>, returned when <code>labels</code> is provided, <code>tf.Tensor</code> of shape <code>(1,)</code>) &#x2014;
Total loss as the sum of the masked language modeling loss and the next sequence prediction
(classification) loss.`,name:"loss"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput.prediction_logits",description:`<strong>prediction_logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).
cross_relationship_score &#x2014; (<code>tf.Tensor</code> of shape <code>(batch_size, 2)</code>):
Prediction scores of the textual matching objective (classification) head (scores of True/False
continuation before SoftMax).
question_answering_score &#x2014; (<code>tf.Tensor</code> of shape <code>(batch_size, n_qa_answers)</code>):
Prediction scores of question answering objective (classification).`,name:"prediction_logits"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput.language_hidden_states",description:`<strong>language_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for input features + one for the output of each cross-modality layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.`,name:"language_hidden_states"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput.vision_hidden_states",description:`<strong>vision_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for input features + one for the output of each cross-modality layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.`,name:"vision_hidden_states"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput.language_attentions",description:`<strong>language_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"language_attentions"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput.vision_attentions",description:`<strong>vision_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"vision_attentions"},{anchor:"transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput.cross_encoder_attentions",description:`<strong>cross_encoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"cross_encoder_attentions"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_tf_lxmert.py#L96"}}),oo=new Re({}),no=new R({props:{name:"class transformers.LxmertModel",anchor:"transformers.LxmertModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.LxmertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L886"}}),co=new R({props:{name:"forward",anchor:"transformers.LxmertModel.forward",parameters:[{name:"input_ids",val:" = None"},{name:"visual_feats",val:" = None"},{name:"visual_pos",val:" = None"},{name:"attention_mask",val:" = None"},{name:"visual_attention_mask",val:" = None"},{name:"token_type_ids",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.LxmertModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizer">LxmertTokenizer</a>. See <a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>
visual_feats &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_visual_features, visual_feat_dim)</code>):
This input represents visual features. They ROI pooled object features from bounding boxes using a
faster-RCNN model)</p>
<p>These are currently not provided by the transformers library.
visual_pos &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_visual_features, visual_pos_dim)</code>):
This input represents spacial features corresponding to their relative (via index) visual features. The
pre-trained LXMERT model expects these spacial features to be normalized bounding boxes on a scale of 0 to</p>
<ol>
<li></li>
</ol>
<p>These are currently not provided by the transformers library.`,name:"input_ids"},{anchor:"transformers.LxmertModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.LxmertModel.forward.visual_attention_mask",description:`<strong>visual_attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"visual_attention_mask"},{anchor:"transformers.LxmertModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.LxmertModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.LxmertModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.LxmertModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LxmertModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_highlight/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L901",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_lxmert.LxmertModelOutput"
>transformers.models.lxmert.modeling_lxmert.LxmertModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig"
>LxmertConfig</a>) and inputs.</p>
<ul>
<li><strong>language_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the language encoder.</li>
<li><strong>vision_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the visual encoder.</li>
<li><strong>pooled_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification, CLS, token) further processed
by a Linear layer and a Tanh activation function. The Linear</li>
<li><strong>language_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>vision_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>language_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>vision_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_lxmert.LxmertModelOutput"
>transformers.models.lxmert.modeling_lxmert.LxmertModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),xt=new Xo({props:{$$slots:{default:[dc]},$$scope:{ctx:q}}}),bt=new us({props:{anchor:"transformers.LxmertModel.forward.example",$$slots:{default:[cc]},$$scope:{ctx:q}}}),ho=new Re({}),mo=new R({props:{name:"class transformers.LxmertForPreTraining",anchor:"transformers.LxmertForPreTraining",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.LxmertForPreTraining.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L1025"}}),vo=new R({props:{name:"forward",anchor:"transformers.LxmertForPreTraining.forward",parameters:[{name:"input_ids",val:" = None"},{name:"visual_feats",val:" = None"},{name:"visual_pos",val:" = None"},{name:"attention_mask",val:" = None"},{name:"visual_attention_mask",val:" = None"},{name:"token_type_ids",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"labels",val:" = None"},{name:"obj_labels",val:" = None"},{name:"matched_label",val:" = None"},{name:"ans",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LxmertForPreTraining.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizer">LxmertTokenizer</a>. See <a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>
visual_feats &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_visual_features, visual_feat_dim)</code>):
This input represents visual features. They ROI pooled object features from bounding boxes using a
faster-RCNN model)</p>
<p>These are currently not provided by the transformers library.
visual_pos &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_visual_features, visual_pos_dim)</code>):
This input represents spacial features corresponding to their relative (via index) visual features. The
pre-trained LXMERT model expects these spacial features to be normalized bounding boxes on a scale of 0 to</p>
<ol>
<li></li>
</ol>
<p>These are currently not provided by the transformers library.`,name:"input_ids"},{anchor:"transformers.LxmertForPreTraining.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.LxmertForPreTraining.forward.visual_attention_mask",description:`<strong>visual_attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"visual_attention_mask"},{anchor:"transformers.LxmertForPreTraining.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.LxmertForPreTraining.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.LxmertForPreTraining.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.LxmertForPreTraining.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LxmertForPreTraining.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_highlight/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.LxmertForPreTraining.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked), the
loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>
obj_labels &#x2014; (<code>Dict[Str: Tuple[Torch.FloatTensor, Torch.FloatTensor]]</code>, <em>optional</em>):
each key is named after each one of the visual losses and each element of the tuple is of the shape
<code>(batch_size, num_features)</code> and <code>(batch_size, num_features, visual_feature_dim)</code> for each the label id and
the label score respectively`,name:"labels"},{anchor:"transformers.LxmertForPreTraining.forward.matched_label",description:`<strong>matched_label</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the whether or not the text input matches the image (classification) loss. Input
should be a sequence pair (see <code>input_ids</code> docstring) Indices should be in <code>[0, 1]</code>:</p>
<ul>
<li>0 indicates that the sentence does not match the image,</li>
<li>1 indicates that the sentence does match the image.</li>
</ul>`,name:"matched_label"},{anchor:"transformers.LxmertForPreTraining.forward.ans",description:`<strong>ans</strong> (<code>Torch.Tensor</code> of shape <code>(batch_size)</code>, <em>optional</em>) &#x2014;
a one hot representation hof the correct answer <em>optional</em>`,name:"ans"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L1153",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput"
>transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig"
>LxmertConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<em>optional</em>, returned when <code>labels</code> is provided, <code>torch.FloatTensor</code> of shape <code>(1,)</code>) \u2014 Total loss as the sum of the masked language modeling loss and the next sequence prediction
(classification) loss.</li>
<li><strong>prediction_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</li>
<li><strong>cross_relationship_score:</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2)</code>) \u2014 Prediction scores of the textual matching objective (classification) head (scores of True/False
continuation before SoftMax).</li>
<li><strong>question_answering_score:</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, n_qa_answers)</code>) \u2014 Prediction scores of question answering objective (classification).</li>
<li><strong>language_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>vision_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>language_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>vision_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput"
>transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),yt=new Xo({props:{$$slots:{default:[hc]},$$scope:{ctx:q}}}),To=new Re({}),xo=new R({props:{name:"class transformers.LxmertForQuestionAnswering",anchor:"transformers.LxmertForQuestionAnswering",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.LxmertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L1291"}}),$o=new R({props:{name:"forward",anchor:"transformers.LxmertForQuestionAnswering.forward",parameters:[{name:"input_ids",val:" = None"},{name:"visual_feats",val:" = None"},{name:"visual_pos",val:" = None"},{name:"attention_mask",val:" = None"},{name:"visual_attention_mask",val:" = None"},{name:"token_type_ids",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"labels",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.LxmertForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizer">LxmertTokenizer</a>. See <a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>
visual_feats &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_visual_features, visual_feat_dim)</code>):
This input represents visual features. They ROI pooled object features from bounding boxes using a
faster-RCNN model)</p>
<p>These are currently not provided by the transformers library.
visual_pos &#x2014; (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_visual_features, visual_pos_dim)</code>):
This input represents spacial features corresponding to their relative (via index) visual features. The
pre-trained LXMERT model expects these spacial features to be normalized bounding boxes on a scale of 0 to</p>
<ol>
<li></li>
</ol>
<p>These are currently not provided by the transformers library.`,name:"input_ids"},{anchor:"transformers.LxmertForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.LxmertForQuestionAnswering.forward.visual_attention_mask",description:`<strong>visual_attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"visual_attention_mask"},{anchor:"transformers.LxmertForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.LxmertForQuestionAnswering.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.LxmertForQuestionAnswering.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.LxmertForQuestionAnswering.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LxmertForQuestionAnswering.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_highlight/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.</p>
<p>labels &#x2014; (<code>Torch.Tensor</code> of shape <code>(batch_size)</code>, <em>optional</em>):
A one-hot representation of the correct answer`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_lxmert.py#L1384",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput"
>transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig"
>LxmertConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<em>optional</em>, returned when <code>labels</code> is provided, <code>torch.FloatTensor</code> of shape <code>(1,)</code>) \u2014 Total loss as the sum of the masked language modeling loss and the next sequence prediction
(classification) loss.k.</li>
<li><strong>question_answering_score:</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, n_qa_answers)</code>, <em>optional</em>) \u2014 Prediction scores of question answering objective (classification).</li>
<li><strong>language_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>vision_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for input features + one for the output of each cross-modality layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>language_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>vision_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput"
>transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Lt=new Xo({props:{$$slots:{default:[mc]},$$scope:{ctx:q}}}),$t=new us({props:{anchor:"transformers.LxmertForQuestionAnswering.forward.example",$$slots:{default:[uc]},$$scope:{ctx:q}}}),Ft=new us({props:{anchor:"transformers.LxmertForQuestionAnswering.forward.example-2",$$slots:{default:[pc]},$$scope:{ctx:q}}}),Fo=new Re({}),zo=new R({props:{name:"class transformers.TFLxmertModel",anchor:"transformers.TFLxmertModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLxmertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_tf_lxmert.py#L944"}}),Et=new Xo({props:{$$slots:{default:[fc]},$$scope:{ctx:q}}}),Ao=new R({props:{name:"call",anchor:"transformers.TFLxmertModel.call",parameters:[{name:"input_ids",val:" = None"},{name:"visual_feats",val:" = None"},{name:"visual_pos",val:" = None"},{name:"attention_mask",val:" = None"},{name:"visual_attention_mask",val:" = None"},{name:"token_type_ids",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"},{name:"training",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLxmertModel.call.input_ids",description:`<strong>input_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizer">LxmertTokenizer</a>. See <a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>
visual_feats &#x2014; (<code>tf.Tensor</code> of shape <code>(batch_size, num_visual_features, visual_feat_dim)</code>):
This input represents visual features. They ROI pooled object features from bounding boxes using a
faster-RCNN model)</p>
<p>These are currently not provided by the transformers library.
visual_pos &#x2014; (<code>tf.Tensor</code> of shape <code>(batch_size, num_visual_features, visual_feat_dim)</code>):
This input represents spacial features corresponding to their relative (via index) visual features. The
pre-trained LXMERT model expects these spacial features to be normalized bounding boxes on a scale of 0 to</p>
<ol>
<li></li>
</ol>
<p>These are currently not provided by the transformers library.`,name:"input_ids"},{anchor:"transformers.TFLxmertModel.call.attention_mask",description:`<strong>attention_mask</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TFLxmertModel.call.visual_attention_mask",description:`<strong>visual_attention_mask</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
MMask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"visual_attention_mask"},{anchor:"transformers.TFLxmertModel.call.token_type_ids",description:`<strong>token_type_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.TFLxmertModel.call.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.TFLxmertModel.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFLxmertModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFLxmertModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_highlight/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used
in eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFLxmertModel.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_tf_lxmert.py#L949",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput"
>transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig"
>LxmertConfig</a>) and inputs.</p>
<ul>
<li><strong>language_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the language encoder.</li>
<li><strong>vision_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the visual encoder.</li>
<li><strong>pooled_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification, CLS, token) further processed
by a Linear layer and a Tanh activation function. The Linear</li>
<li><strong>language_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for input features + one for the output of each cross-modality layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>vision_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for input features + one for the output of each cross-modality layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>language_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>vision_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_encoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput"
>transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Mt=new Xo({props:{$$slots:{default:[gc]},$$scope:{ctx:q}}}),qt=new us({props:{anchor:"transformers.TFLxmertModel.call.example",$$slots:{default:[_c]},$$scope:{ctx:q}}}),Oo=new Re({}),Co=new R({props:{name:"class transformers.TFLxmertForPreTraining",anchor:"transformers.TFLxmertForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLxmertForPreTraining.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_tf_lxmert.py#L1201"}}),At=new Xo({props:{$$slots:{default:[vc]},$$scope:{ctx:q}}}),So=new R({props:{name:"call",anchor:"transformers.TFLxmertForPreTraining.call",parameters:[{name:"input_ids",val:" = None"},{name:"visual_feats",val:" = None"},{name:"visual_pos",val:" = None"},{name:"attention_mask",val:" = None"},{name:"visual_attention_mask",val:" = None"},{name:"token_type_ids",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"masked_lm_labels",val:" = None"},{name:"obj_labels",val:" = None"},{name:"matched_label",val:" = None"},{name:"ans",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"},{name:"training",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLxmertForPreTraining.call.input_ids",description:`<strong>input_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizer">LxmertTokenizer</a>. See <a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> and
<a href="/docs/transformers/pr_highlight/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>
visual_feats &#x2014; (<code>tf.Tensor</code> of shape <code>(batch_size, num_visual_features, visual_feat_dim)</code>):
This input represents visual features. They ROI pooled object features from bounding boxes using a
faster-RCNN model)</p>
<p>These are currently not provided by the transformers library.
visual_pos &#x2014; (<code>tf.Tensor</code> of shape <code>(batch_size, num_visual_features, visual_feat_dim)</code>):
This input represents spacial features corresponding to their relative (via index) visual features. The
pre-trained LXMERT model expects these spacial features to be normalized bounding boxes on a scale of 0 to</p>
<ol>
<li></li>
</ol>
<p>These are currently not provided by the transformers library.`,name:"input_ids"},{anchor:"transformers.TFLxmertForPreTraining.call.attention_mask",description:`<strong>attention_mask</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TFLxmertForPreTraining.call.visual_attention_mask",description:`<strong>visual_attention_mask</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
MMask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"visual_attention_mask"},{anchor:"transformers.TFLxmertForPreTraining.call.token_type_ids",description:`<strong>token_type_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.TFLxmertForPreTraining.call.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.TFLxmertForPreTraining.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFLxmertForPreTraining.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFLxmertForPreTraining.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_highlight/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used
in eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFLxmertForPreTraining.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"},{anchor:"transformers.TFLxmertForPreTraining.call.masked_lm_labels",description:`<strong>masked_lm_labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked), the
loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>
obj_labels &#x2014; (<code>Dict[Str: Tuple[tf.Tensor, tf.Tensor]]</code>, <em>optional</em>, defaults to <code>None</code>):
each key is named after each one of the visual losses and each element of the tuple is of the shape
<code>(batch_size, num_features)</code> and <code>(batch_size, num_features, visual_feature_dim)</code> for each the label id and
the label score respectively`,name:"masked_lm_labels"},{anchor:"transformers.TFLxmertForPreTraining.call.matched_label",description:`<strong>matched_label</strong> (<code>tf.Tensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the whether or not the text input matches the image (classification) loss. Input
should be a sequence pair (see <code>input_ids</code> docstring) Indices should be in <code>[0, 1]</code>:</p>
<ul>
<li>0 indicates that the sentence does not match the image,</li>
<li>1 indicates that the sentence does match the image.</li>
</ul>`,name:"matched_label"},{anchor:"transformers.TFLxmertForPreTraining.call.ans",description:`<strong>ans</strong> (<code>Torch.Tensor</code> of shape <code>(batch_size)</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
a one hot representation hof the correct answer <em>optional</em>`,name:"ans"}],source:"https://github.com/huggingface/transformers/blob/pr_highlight/src/transformers/models/lxmert/modeling_tf_lxmert.py#L1301",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput"
>transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertConfig"
>LxmertConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<em>optional</em>, returned when <code>labels</code> is provided, <code>tf.Tensor</code> of shape <code>(1,)</code>) \u2014 Total loss as the sum of the masked language modeling loss and the next sequence prediction
(classification) loss.</li>
<li><strong>prediction_logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</li>
<li><strong>cross_relationship_score:</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, 2)</code>) \u2014 Prediction scores of the textual matching objective (classification) head (scores of True/False
continuation before SoftMax).</li>
<li><strong>question_answering_score:</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, n_qa_answers)</code>) \u2014 Prediction scores of question answering objective (classification).</li>
<li><strong>language_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for input features + one for the output of each cross-modality layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>vision_hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for input features + one for the output of each cross-modality layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</li>
<li><strong>language_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>vision_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_encoder_attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput"
>transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Ot=new Xo({props:{$$slots:{default:[Tc]},$$scope:{ctx:q}}}),{c(){h=n("meta"),x=l(),f=n("h1"),g=n("a"),T=n("span"),b(m.$$.fragment),_=l(),z=n("span"),Fe=a("LXMERT"),re=l(),E=n("h2"),Y=n("a"),D=n("span"),b(ee.$$.fragment),ze=l(),S=n("span"),Ee=a("Overview"),_e=l(),N=n("p"),Q=a("The LXMERT model was proposed in "),te=n("a"),de=a("LXMERT: Learning Cross-Modality Encoder Representations from Transformers"),M=a(` by Hao Tan & Mohit Bansal. It is a series of bidirectional transformer encoders
(one for the vision modality, one for the language modality, and then one to fuse both modalities) pretrained using a
combination of masked language modeling, visual-language text alignment, ROI-feature regression, masked
visual-attribute modeling, masked visual-object modeling, and visual-question answering objectives. The pretraining
consists of multiple multi-modal datasets: MSCOCO, Visual-Genome + Visual-Genome Question Answering, VQA 2.0, and GQA.`),A=l(),se=n("p"),oe=a("The abstract from the paper is the following:"),ve=l(),ae=n("p"),V=n("em"),Me=a(`Vision-and-language reasoning requires an understanding of visual concepts, language semantics, and, most importantly,
the alignment and relationships between these two modalities. We thus propose the LXMERT (Learning Cross-Modality
Encoder Representations from Transformers) framework to learn these vision-and-language connections. In LXMERT, we
build a large-scale Transformer model that consists of three encoders: an object relationship encoder, a language
encoder, and a cross-modality encoder. Next, to endow our model with the capability of connecting vision and language
semantics, we pre-train the model with large amounts of image-and-sentence pairs, via five diverse representative
pretraining tasks: masked language modeling, masked object prediction (feature regression and label classification),
cross-modality matching, and image question answering. These tasks help in learning both intra-modality and
cross-modality relationships. After fine-tuning from our pretrained parameters, our model achieves the state-of-the-art
results on two visual question answering datasets (i.e., VQA and GQA). We also show the generalizability of our
pretrained cross-modality model by adapting it to a challenging visual-reasoning task, NLVR, and improve the previous
best result by 22% absolute (54% to 76%). Lastly, we demonstrate detailed ablation studies to prove that both our novel
model components and pretraining strategies significantly contribute to our strong results; and also present several
attention visualizations for the different encoders`),Te=l(),P=n("p"),qe=a("Tips:"),Z=l(),j=n("ul"),ce=n("li"),ne=a(`Bounding boxes are not necessary to be used in the visual feature embeddings, any kind of visual-spacial features
will work.`),Pe=l(),he=n("li"),W=a(`Both the language hidden states and the visual hidden states that LXMERT outputs are passed through the
cross-modality layer, so they contain information from both modalities. To access a modality that only attends to
itself, select the vision/language hidden states from the first input in the tuple.`),Ae=l(),X=n("li"),Oe=a(`The bidirectional cross-modality encoder attention only returns attention values when the language modality is used
as the input and the vision modality is used as the context vector. Further, while the cross-modality encoder
contains self-attention for each respective modality and cross-attention, only the cross attention is returned and
both self attention outputs are disregarded.`),v=l(),F=n("p"),me=a("This model was contributed by "),ue=n("a"),We=a("eltoto1219"),B=a(". The original code can be found "),pe=n("a"),Xe=a("here"),Be=a("."),I=l(),O=n("h2"),ie=n("a"),Ce=n("span"),b(C.$$.fragment),He=l(),Ne=n("span"),je=a("LxmertConfig"),De=l(),Ie=n("div"),b(Rt.$$.fragment),gs=l(),Ge=n("p"),_s=a("This is the configuration class to store the configuration of a "),Bo=n("a"),vs=a("LxmertModel"),Ts=a(" or a "),Ho=n("a"),xs=a("TFLxmertModel"),bs=a(`. It is used
to instantiate a LXMERT model according to the specified arguments, defining the model architecture.`),ws=l(),Ue=n("p"),ys=a("Configuration objects inherit from "),Go=n("a"),ks=a("PretrainedConfig"),Ls=a(` and can be used to control the model outputs. Read the
documentation from `),Uo=n("a"),$s=a("PretrainedConfig"),Fs=a(" for more information."),mr=l(),Ke=n("h2"),pt=n("a"),$n=n("span"),b(Dt.$$.fragment),zs=l(),Fn=n("span"),Es=a("LxmertTokenizer"),ur=l(),fe=n("div"),b(St.$$.fragment),Ms=l(),zn=n("p"),qs=a("Construct an LXMERT tokenizer."),Ps=l(),ft=n("p"),Ko=n("a"),As=a("LxmertTokenizer"),Os=a(" is identical to "),Jo=n("a"),Cs=a("BertTokenizer"),Ns=a(` and runs end-to-end tokenization: punctuation splitting and
wordpiece.`),js=l(),Qt=n("p"),Is=a("Refer to superclass "),Yo=n("a"),Rs=a("BertTokenizer"),Ds=a(" for usage examples and documentation concerning parameters."),pr=l(),Je=n("h2"),gt=n("a"),En=n("span"),b(Vt.$$.fragment),Ss=l(),Mn=n("span"),Qs=a("LxmertTokenizerFast"),fr=l(),ge=n("div"),b(Wt.$$.fragment),Vs=l(),Xt=n("p"),Ws=a("Construct a \u201Cfast\u201D LXMERT tokenizer (backed by HuggingFace\u2019s "),qn=n("em"),Xs=a("tokenizers"),Bs=a(" library)."),Hs=l(),_t=n("p"),Zo=n("a"),Gs=a("LxmertTokenizerFast"),Us=a(" is identical to "),en=n("a"),Ks=a("BertTokenizerFast"),Js=a(` and runs end-to-end tokenization: punctuation
splitting and wordpiece.`),Ys=l(),Bt=n("p"),Zs=a("Refer to superclass "),tn=n("a"),ea=a("BertTokenizerFast"),ta=a(" for usage examples and documentation concerning parameters."),gr=l(),Ye=n("h2"),vt=n("a"),Pn=n("span"),b(Ht.$$.fragment),oa=l(),An=n("span"),na=a("Lxmert specific outputs"),_r=l(),Ze=n("div"),b(Gt.$$.fragment),ra=l(),On=n("p"),sa=a(`Lxmert\u2019s outputs that contain the last hidden states, pooled outputs, and attention probabilities for the language,
visual, and, cross-modality encoders. (note: the visual encoder in Lxmert is referred to as the \u201Crelation-ship\u201D
encoder\u201D)`),vr=l(),et=n("div"),b(Ut.$$.fragment),aa=l(),Kt=n("p"),ia=a("Output type of "),on=n("a"),la=a("LxmertForPreTraining"),da=a("."),Tr=l(),tt=n("div"),b(Jt.$$.fragment),ca=l(),Yt=n("p"),ha=a("Output type of "),nn=n("a"),ma=a("LxmertForQuestionAnswering"),ua=a("."),xr=l(),ot=n("div"),b(Zt.$$.fragment),pa=l(),Cn=n("p"),fa=a(`Lxmert\u2019s outputs that contain the last hidden states, pooled outputs, and attention probabilities for the language,
visual, and, cross-modality encoders. (note: the visual encoder in Lxmert is referred to as the \u201Crelation-ship\u201D
encoder\u201D)`),br=l(),nt=n("div"),b(eo.$$.fragment),ga=l(),to=n("p"),_a=a("Output type of "),rn=n("a"),va=a("LxmertForPreTraining"),Ta=a("."),wr=l(),rt=n("h2"),Tt=n("a"),Nn=n("span"),b(oo.$$.fragment),xa=l(),jn=n("span"),ba=a("LxmertModel"),yr=l(),H=n("div"),b(no.$$.fragment),wa=l(),In=n("p"),ya=a("The bare Lxmert Model transformer outputting raw hidden-states without any specific head on top."),ka=l(),ro=n("p"),La=a("The LXMERT model was proposed in "),so=n("a"),$a=a(`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),Fa=a(` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pretrained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),za=l(),ao=n("p"),Ea=a("This model inherits from "),sn=n("a"),Ma=a("PreTrainedModel"),qa=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Pa=l(),io=n("p"),Aa=a("This model is also a PyTorch "),lo=n("a"),Oa=a("torch.nn.Module"),Ca=a(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Na=l(),xe=n("div"),b(co.$$.fragment),ja=l(),st=n("p"),Ia=a("The "),an=n("a"),Ra=a("LxmertModel"),Da=a(" forward method, overrides the "),Rn=n("code"),Sa=a("__call__"),Qa=a(" special method."),Va=l(),b(xt.$$.fragment),Wa=l(),b(bt.$$.fragment),kr=l(),at=n("h2"),wt=n("a"),Dn=n("span"),b(ho.$$.fragment),Xa=l(),Sn=n("span"),Ba=a("LxmertForPreTraining"),Lr=l(),G=n("div"),b(mo.$$.fragment),Ha=l(),Qn=n("p"),Ga=a("Lxmert Model with a specified pretraining head on top."),Ua=l(),uo=n("p"),Ka=a("The LXMERT model was proposed in "),po=n("a"),Ja=a(`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),Ya=a(` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pretrained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),Za=l(),fo=n("p"),ei=a("This model inherits from "),ln=n("a"),ti=a("PreTrainedModel"),oi=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ni=l(),go=n("p"),ri=a("This model is also a PyTorch "),_o=n("a"),si=a("torch.nn.Module"),ai=a(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ii=l(),Se=n("div"),b(vo.$$.fragment),li=l(),it=n("p"),di=a("The "),dn=n("a"),ci=a("LxmertForPreTraining"),hi=a(" forward method, overrides the "),Vn=n("code"),mi=a("__call__"),ui=a(" special method."),pi=l(),b(yt.$$.fragment),$r=l(),lt=n("h2"),kt=n("a"),Wn=n("span"),b(To.$$.fragment),fi=l(),Xn=n("span"),gi=a("LxmertForQuestionAnswering"),Fr=l(),U=n("div"),b(xo.$$.fragment),_i=l(),Bn=n("p"),vi=a("Lxmert Model with a visual-answering head on top for downstream QA tasks"),Ti=l(),bo=n("p"),xi=a("The LXMERT model was proposed in "),wo=n("a"),bi=a(`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),wi=a(` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pretrained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),yi=l(),yo=n("p"),ki=a("This model inherits from "),cn=n("a"),Li=a("PreTrainedModel"),$i=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Fi=l(),ko=n("p"),zi=a("This model is also a PyTorch "),Lo=n("a"),Ei=a("torch.nn.Module"),Mi=a(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),qi=l(),le=n("div"),b($o.$$.fragment),Pi=l(),dt=n("p"),Ai=a("The "),hn=n("a"),Oi=a("LxmertForQuestionAnswering"),Ci=a(" forward method, overrides the "),Hn=n("code"),Ni=a("__call__"),ji=a(" special method."),Ii=l(),b(Lt.$$.fragment),Ri=l(),b($t.$$.fragment),Di=l(),b(Ft.$$.fragment),zr=l(),ct=n("h2"),zt=n("a"),Gn=n("span"),b(Fo.$$.fragment),Si=l(),Un=n("span"),Qi=a("TFLxmertModel"),Er=l(),K=n("div"),b(zo.$$.fragment),Vi=l(),Kn=n("p"),Wi=a("The bare Lxmert Model transformer outputting raw hidden-states without any specific head on top."),Xi=l(),Eo=n("p"),Bi=a("The LXMERT model was proposed in "),Mo=n("a"),Hi=a(`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),Gi=a(` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pre-trained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),Ui=l(),qo=n("p"),Ki=a("This model is also a "),Po=n("a"),Ji=a("tf.keras.Model"),Yi=a(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Zi=l(),b(Et.$$.fragment),el=l(),be=n("div"),b(Ao.$$.fragment),tl=l(),ht=n("p"),ol=a("The "),mn=n("a"),nl=a("TFLxmertModel"),rl=a(" forward method, overrides the "),Jn=n("code"),sl=a("__call__"),al=a(" special method."),il=l(),b(Mt.$$.fragment),ll=l(),b(qt.$$.fragment),Mr=l(),mt=n("h2"),Pt=n("a"),Yn=n("span"),b(Oo.$$.fragment),dl=l(),Zn=n("span"),cl=a("TFLxmertForPreTraining"),qr=l(),J=n("div"),b(Co.$$.fragment),hl=l(),No=n("p"),ml=a("Lxmert Model with a "),er=n("code"),ul=a("language modeling"),pl=a(" head on top."),fl=l(),jo=n("p"),gl=a("The LXMERT model was proposed in "),Io=n("a"),_l=a(`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),vl=a(` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pre-trained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),Tl=l(),Ro=n("p"),xl=a("This model is also a "),Do=n("a"),bl=a("tf.keras.Model"),wl=a(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),yl=l(),b(At.$$.fragment),kl=l(),Qe=n("div"),b(So.$$.fragment),Ll=l(),ut=n("p"),$l=a("The "),un=n("a"),Fl=a("TFLxmertForPreTraining"),zl=a(" forward method, overrides the "),tr=n("code"),El=a("__call__"),Ml=a(" special method."),ql=l(),b(Ot.$$.fragment),this.h()},l(o){const p=ic('[data-svelte="svelte-1phssyn"]',document.head);h=r(p,"META",{name:!0,content:!0}),p.forEach(t),x=d(o),f=r(o,"H1",{class:!0});var Qo=s(f);g=r(Qo,"A",{id:!0,class:!0,href:!0});var or=s(g);T=r(or,"SPAN",{});var nr=s(T);w(m.$$.fragment,nr),nr.forEach(t),or.forEach(t),_=d(Qo),z=r(Qo,"SPAN",{});var rr=s(z);Fe=i(rr,"LXMERT"),rr.forEach(t),Qo.forEach(t),re=d(o),E=r(o,"H2",{class:!0});var Vo=s(E);Y=r(Vo,"A",{id:!0,class:!0,href:!0});var sr=s(Y);D=r(sr,"SPAN",{});var ar=s(D);w(ee.$$.fragment,ar),ar.forEach(t),sr.forEach(t),ze=d(Vo),S=r(Vo,"SPAN",{});var ir=s(S);Ee=i(ir,"Overview"),ir.forEach(t),Vo.forEach(t),_e=d(o),N=r(o,"P",{});var Wo=s(N);Q=i(Wo,"The LXMERT model was proposed in "),te=r(Wo,"A",{href:!0,rel:!0});var lr=s(te);de=i(lr,"LXMERT: Learning Cross-Modality Encoder Representations from Transformers"),lr.forEach(t),M=i(Wo,` by Hao Tan & Mohit Bansal. It is a series of bidirectional transformer encoders
(one for the vision modality, one for the language modality, and then one to fuse both modalities) pretrained using a
combination of masked language modeling, visual-language text alignment, ROI-feature regression, masked
visual-attribute modeling, masked visual-object modeling, and visual-question answering objectives. The pretraining
consists of multiple multi-modal datasets: MSCOCO, Visual-Genome + Visual-Genome Question Answering, VQA 2.0, and GQA.`),Wo.forEach(t),A=d(o),se=r(o,"P",{});var dr=s(se);oe=i(dr,"The abstract from the paper is the following:"),dr.forEach(t),ve=d(o),ae=r(o,"P",{});var Pl=s(ae);V=r(Pl,"EM",{});var Al=s(V);Me=i(Al,`Vision-and-language reasoning requires an understanding of visual concepts, language semantics, and, most importantly,
the alignment and relationships between these two modalities. We thus propose the LXMERT (Learning Cross-Modality
Encoder Representations from Transformers) framework to learn these vision-and-language connections. In LXMERT, we
build a large-scale Transformer model that consists of three encoders: an object relationship encoder, a language
encoder, and a cross-modality encoder. Next, to endow our model with the capability of connecting vision and language
semantics, we pre-train the model with large amounts of image-and-sentence pairs, via five diverse representative
pretraining tasks: masked language modeling, masked object prediction (feature regression and label classification),
cross-modality matching, and image question answering. These tasks help in learning both intra-modality and
cross-modality relationships. After fine-tuning from our pretrained parameters, our model achieves the state-of-the-art
results on two visual question answering datasets (i.e., VQA and GQA). We also show the generalizability of our
pretrained cross-modality model by adapting it to a challenging visual-reasoning task, NLVR, and improve the previous
best result by 22% absolute (54% to 76%). Lastly, we demonstrate detailed ablation studies to prove that both our novel
model components and pretraining strategies significantly contribute to our strong results; and also present several
attention visualizations for the different encoders`),Al.forEach(t),Pl.forEach(t),Te=d(o),P=r(o,"P",{});var Ol=s(P);qe=i(Ol,"Tips:"),Ol.forEach(t),Z=d(o),j=r(o,"UL",{});var pn=s(j);ce=r(pn,"LI",{});var Cl=s(ce);ne=i(Cl,`Bounding boxes are not necessary to be used in the visual feature embeddings, any kind of visual-spacial features
will work.`),Cl.forEach(t),Pe=d(pn),he=r(pn,"LI",{});var Nl=s(he);W=i(Nl,`Both the language hidden states and the visual hidden states that LXMERT outputs are passed through the
cross-modality layer, so they contain information from both modalities. To access a modality that only attends to
itself, select the vision/language hidden states from the first input in the tuple.`),Nl.forEach(t),Ae=d(pn),X=r(pn,"LI",{});var jl=s(X);Oe=i(jl,`The bidirectional cross-modality encoder attention only returns attention values when the language modality is used
as the input and the vision modality is used as the context vector. Further, while the cross-modality encoder
contains self-attention for each respective modality and cross-attention, only the cross attention is returned and
both self attention outputs are disregarded.`),jl.forEach(t),pn.forEach(t),v=d(o),F=r(o,"P",{});var fn=s(F);me=i(fn,"This model was contributed by "),ue=r(fn,"A",{href:!0,rel:!0});var Il=s(ue);We=i(Il,"eltoto1219"),Il.forEach(t),B=i(fn,". The original code can be found "),pe=r(fn,"A",{href:!0,rel:!0});var Rl=s(pe);Xe=i(Rl,"here"),Rl.forEach(t),Be=i(fn,"."),fn.forEach(t),I=d(o),O=r(o,"H2",{class:!0});var Ar=s(O);ie=r(Ar,"A",{id:!0,class:!0,href:!0});var Dl=s(ie);Ce=r(Dl,"SPAN",{});var Sl=s(Ce);w(C.$$.fragment,Sl),Sl.forEach(t),Dl.forEach(t),He=d(Ar),Ne=r(Ar,"SPAN",{});var Ql=s(Ne);je=i(Ql,"LxmertConfig"),Ql.forEach(t),Ar.forEach(t),De=d(o),Ie=r(o,"DIV",{class:!0});var gn=s(Ie);w(Rt.$$.fragment,gn),gs=d(gn),Ge=r(gn,"P",{});var _n=s(Ge);_s=i(_n,"This is the configuration class to store the configuration of a "),Bo=r(_n,"A",{href:!0});var Vl=s(Bo);vs=i(Vl,"LxmertModel"),Vl.forEach(t),Ts=i(_n," or a "),Ho=r(_n,"A",{href:!0});var Wl=s(Ho);xs=i(Wl,"TFLxmertModel"),Wl.forEach(t),bs=i(_n,`. It is used
to instantiate a LXMERT model according to the specified arguments, defining the model architecture.`),_n.forEach(t),ws=d(gn),Ue=r(gn,"P",{});var vn=s(Ue);ys=i(vn,"Configuration objects inherit from "),Go=r(vn,"A",{href:!0});var Xl=s(Go);ks=i(Xl,"PretrainedConfig"),Xl.forEach(t),Ls=i(vn,` and can be used to control the model outputs. Read the
documentation from `),Uo=r(vn,"A",{href:!0});var Bl=s(Uo);$s=i(Bl,"PretrainedConfig"),Bl.forEach(t),Fs=i(vn," for more information."),vn.forEach(t),gn.forEach(t),mr=d(o),Ke=r(o,"H2",{class:!0});var Or=s(Ke);pt=r(Or,"A",{id:!0,class:!0,href:!0});var Hl=s(pt);$n=r(Hl,"SPAN",{});var Gl=s($n);w(Dt.$$.fragment,Gl),Gl.forEach(t),Hl.forEach(t),zs=d(Or),Fn=r(Or,"SPAN",{});var Ul=s(Fn);Es=i(Ul,"LxmertTokenizer"),Ul.forEach(t),Or.forEach(t),ur=d(o),fe=r(o,"DIV",{class:!0});var Ct=s(fe);w(St.$$.fragment,Ct),Ms=d(Ct),zn=r(Ct,"P",{});var Kl=s(zn);qs=i(Kl,"Construct an LXMERT tokenizer."),Kl.forEach(t),Ps=d(Ct),ft=r(Ct,"P",{});var cr=s(ft);Ko=r(cr,"A",{href:!0});var Jl=s(Ko);As=i(Jl,"LxmertTokenizer"),Jl.forEach(t),Os=i(cr," is identical to "),Jo=r(cr,"A",{href:!0});var Yl=s(Jo);Cs=i(Yl,"BertTokenizer"),Yl.forEach(t),Ns=i(cr,` and runs end-to-end tokenization: punctuation splitting and
wordpiece.`),cr.forEach(t),js=d(Ct),Qt=r(Ct,"P",{});var Cr=s(Qt);Is=i(Cr,"Refer to superclass "),Yo=r(Cr,"A",{href:!0});var Zl=s(Yo);Rs=i(Zl,"BertTokenizer"),Zl.forEach(t),Ds=i(Cr," for usage examples and documentation concerning parameters."),Cr.forEach(t),Ct.forEach(t),pr=d(o),Je=r(o,"H2",{class:!0});var Nr=s(Je);gt=r(Nr,"A",{id:!0,class:!0,href:!0});var ed=s(gt);En=r(ed,"SPAN",{});var td=s(En);w(Vt.$$.fragment,td),td.forEach(t),ed.forEach(t),Ss=d(Nr),Mn=r(Nr,"SPAN",{});var od=s(Mn);Qs=i(od,"LxmertTokenizerFast"),od.forEach(t),Nr.forEach(t),fr=d(o),ge=r(o,"DIV",{class:!0});var Nt=s(ge);w(Wt.$$.fragment,Nt),Vs=d(Nt),Xt=r(Nt,"P",{});var jr=s(Xt);Ws=i(jr,"Construct a \u201Cfast\u201D LXMERT tokenizer (backed by HuggingFace\u2019s "),qn=r(jr,"EM",{});var nd=s(qn);Xs=i(nd,"tokenizers"),nd.forEach(t),Bs=i(jr," library)."),jr.forEach(t),Hs=d(Nt),_t=r(Nt,"P",{});var hr=s(_t);Zo=r(hr,"A",{href:!0});var rd=s(Zo);Gs=i(rd,"LxmertTokenizerFast"),rd.forEach(t),Us=i(hr," is identical to "),en=r(hr,"A",{href:!0});var sd=s(en);Ks=i(sd,"BertTokenizerFast"),sd.forEach(t),Js=i(hr,` and runs end-to-end tokenization: punctuation
splitting and wordpiece.`),hr.forEach(t),Ys=d(Nt),Bt=r(Nt,"P",{});var Ir=s(Bt);Zs=i(Ir,"Refer to superclass "),tn=r(Ir,"A",{href:!0});var ad=s(tn);ea=i(ad,"BertTokenizerFast"),ad.forEach(t),ta=i(Ir," for usage examples and documentation concerning parameters."),Ir.forEach(t),Nt.forEach(t),gr=d(o),Ye=r(o,"H2",{class:!0});var Rr=s(Ye);vt=r(Rr,"A",{id:!0,class:!0,href:!0});var id=s(vt);Pn=r(id,"SPAN",{});var ld=s(Pn);w(Ht.$$.fragment,ld),ld.forEach(t),id.forEach(t),oa=d(Rr),An=r(Rr,"SPAN",{});var dd=s(An);na=i(dd,"Lxmert specific outputs"),dd.forEach(t),Rr.forEach(t),_r=d(o),Ze=r(o,"DIV",{class:!0});var Dr=s(Ze);w(Gt.$$.fragment,Dr),ra=d(Dr),On=r(Dr,"P",{});var cd=s(On);sa=i(cd,`Lxmert\u2019s outputs that contain the last hidden states, pooled outputs, and attention probabilities for the language,
visual, and, cross-modality encoders. (note: the visual encoder in Lxmert is referred to as the \u201Crelation-ship\u201D
encoder\u201D)`),cd.forEach(t),Dr.forEach(t),vr=d(o),et=r(o,"DIV",{class:!0});var Sr=s(et);w(Ut.$$.fragment,Sr),aa=d(Sr),Kt=r(Sr,"P",{});var Qr=s(Kt);ia=i(Qr,"Output type of "),on=r(Qr,"A",{href:!0});var hd=s(on);la=i(hd,"LxmertForPreTraining"),hd.forEach(t),da=i(Qr,"."),Qr.forEach(t),Sr.forEach(t),Tr=d(o),tt=r(o,"DIV",{class:!0});var Vr=s(tt);w(Jt.$$.fragment,Vr),ca=d(Vr),Yt=r(Vr,"P",{});var Wr=s(Yt);ha=i(Wr,"Output type of "),nn=r(Wr,"A",{href:!0});var md=s(nn);ma=i(md,"LxmertForQuestionAnswering"),md.forEach(t),ua=i(Wr,"."),Wr.forEach(t),Vr.forEach(t),xr=d(o),ot=r(o,"DIV",{class:!0});var Xr=s(ot);w(Zt.$$.fragment,Xr),pa=d(Xr),Cn=r(Xr,"P",{});var ud=s(Cn);fa=i(ud,`Lxmert\u2019s outputs that contain the last hidden states, pooled outputs, and attention probabilities for the language,
visual, and, cross-modality encoders. (note: the visual encoder in Lxmert is referred to as the \u201Crelation-ship\u201D
encoder\u201D)`),ud.forEach(t),Xr.forEach(t),br=d(o),nt=r(o,"DIV",{class:!0});var Br=s(nt);w(eo.$$.fragment,Br),ga=d(Br),to=r(Br,"P",{});var Hr=s(to);_a=i(Hr,"Output type of "),rn=r(Hr,"A",{href:!0});var pd=s(rn);va=i(pd,"LxmertForPreTraining"),pd.forEach(t),Ta=i(Hr,"."),Hr.forEach(t),Br.forEach(t),wr=d(o),rt=r(o,"H2",{class:!0});var Gr=s(rt);Tt=r(Gr,"A",{id:!0,class:!0,href:!0});var fd=s(Tt);Nn=r(fd,"SPAN",{});var gd=s(Nn);w(oo.$$.fragment,gd),gd.forEach(t),fd.forEach(t),xa=d(Gr),jn=r(Gr,"SPAN",{});var _d=s(jn);ba=i(_d,"LxmertModel"),_d.forEach(t),Gr.forEach(t),yr=d(o),H=r(o,"DIV",{class:!0});var we=s(H);w(no.$$.fragment,we),wa=d(we),In=r(we,"P",{});var vd=s(In);ya=i(vd,"The bare Lxmert Model transformer outputting raw hidden-states without any specific head on top."),vd.forEach(t),ka=d(we),ro=r(we,"P",{});var Ur=s(ro);La=i(Ur,"The LXMERT model was proposed in "),so=r(Ur,"A",{href:!0,rel:!0});var Td=s(so);$a=i(Td,`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),Td.forEach(t),Fa=i(Ur,` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pretrained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),Ur.forEach(t),za=d(we),ao=r(we,"P",{});var Kr=s(ao);Ea=i(Kr,"This model inherits from "),sn=r(Kr,"A",{href:!0});var xd=s(sn);Ma=i(xd,"PreTrainedModel"),xd.forEach(t),qa=i(Kr,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Kr.forEach(t),Pa=d(we),io=r(we,"P",{});var Jr=s(io);Aa=i(Jr,"This model is also a PyTorch "),lo=r(Jr,"A",{href:!0,rel:!0});var bd=s(lo);Oa=i(bd,"torch.nn.Module"),bd.forEach(t),Ca=i(Jr,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Jr.forEach(t),Na=d(we),xe=r(we,"DIV",{class:!0});var jt=s(xe);w(co.$$.fragment,jt),ja=d(jt),st=r(jt,"P",{});var Tn=s(st);Ia=i(Tn,"The "),an=r(Tn,"A",{href:!0});var wd=s(an);Ra=i(wd,"LxmertModel"),wd.forEach(t),Da=i(Tn," forward method, overrides the "),Rn=r(Tn,"CODE",{});var yd=s(Rn);Sa=i(yd,"__call__"),yd.forEach(t),Qa=i(Tn," special method."),Tn.forEach(t),Va=d(jt),w(xt.$$.fragment,jt),Wa=d(jt),w(bt.$$.fragment,jt),jt.forEach(t),we.forEach(t),kr=d(o),at=r(o,"H2",{class:!0});var Yr=s(at);wt=r(Yr,"A",{id:!0,class:!0,href:!0});var kd=s(wt);Dn=r(kd,"SPAN",{});var Ld=s(Dn);w(ho.$$.fragment,Ld),Ld.forEach(t),kd.forEach(t),Xa=d(Yr),Sn=r(Yr,"SPAN",{});var $d=s(Sn);Ba=i($d,"LxmertForPreTraining"),$d.forEach(t),Yr.forEach(t),Lr=d(o),G=r(o,"DIV",{class:!0});var ye=s(G);w(mo.$$.fragment,ye),Ha=d(ye),Qn=r(ye,"P",{});var Fd=s(Qn);Ga=i(Fd,"Lxmert Model with a specified pretraining head on top."),Fd.forEach(t),Ua=d(ye),uo=r(ye,"P",{});var Zr=s(uo);Ka=i(Zr,"The LXMERT model was proposed in "),po=r(Zr,"A",{href:!0,rel:!0});var zd=s(po);Ja=i(zd,`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),zd.forEach(t),Ya=i(Zr,` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pretrained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),Zr.forEach(t),Za=d(ye),fo=r(ye,"P",{});var es=s(fo);ei=i(es,"This model inherits from "),ln=r(es,"A",{href:!0});var Ed=s(ln);ti=i(Ed,"PreTrainedModel"),Ed.forEach(t),oi=i(es,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),es.forEach(t),ni=d(ye),go=r(ye,"P",{});var ts=s(go);ri=i(ts,"This model is also a PyTorch "),_o=r(ts,"A",{href:!0,rel:!0});var Md=s(_o);si=i(Md,"torch.nn.Module"),Md.forEach(t),ai=i(ts,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ts.forEach(t),ii=d(ye),Se=r(ye,"DIV",{class:!0});var xn=s(Se);w(vo.$$.fragment,xn),li=d(xn),it=r(xn,"P",{});var bn=s(it);di=i(bn,"The "),dn=r(bn,"A",{href:!0});var qd=s(dn);ci=i(qd,"LxmertForPreTraining"),qd.forEach(t),hi=i(bn," forward method, overrides the "),Vn=r(bn,"CODE",{});var Pd=s(Vn);mi=i(Pd,"__call__"),Pd.forEach(t),ui=i(bn," special method."),bn.forEach(t),pi=d(xn),w(yt.$$.fragment,xn),xn.forEach(t),ye.forEach(t),$r=d(o),lt=r(o,"H2",{class:!0});var os=s(lt);kt=r(os,"A",{id:!0,class:!0,href:!0});var Ad=s(kt);Wn=r(Ad,"SPAN",{});var Od=s(Wn);w(To.$$.fragment,Od),Od.forEach(t),Ad.forEach(t),fi=d(os),Xn=r(os,"SPAN",{});var Cd=s(Xn);gi=i(Cd,"LxmertForQuestionAnswering"),Cd.forEach(t),os.forEach(t),Fr=d(o),U=r(o,"DIV",{class:!0});var ke=s(U);w(xo.$$.fragment,ke),_i=d(ke),Bn=r(ke,"P",{});var Nd=s(Bn);vi=i(Nd,"Lxmert Model with a visual-answering head on top for downstream QA tasks"),Nd.forEach(t),Ti=d(ke),bo=r(ke,"P",{});var ns=s(bo);xi=i(ns,"The LXMERT model was proposed in "),wo=r(ns,"A",{href:!0,rel:!0});var jd=s(wo);bi=i(jd,`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),jd.forEach(t),wi=i(ns,` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pretrained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),ns.forEach(t),yi=d(ke),yo=r(ke,"P",{});var rs=s(yo);ki=i(rs,"This model inherits from "),cn=r(rs,"A",{href:!0});var Id=s(cn);Li=i(Id,"PreTrainedModel"),Id.forEach(t),$i=i(rs,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),rs.forEach(t),Fi=d(ke),ko=r(ke,"P",{});var ss=s(ko);zi=i(ss,"This model is also a PyTorch "),Lo=r(ss,"A",{href:!0,rel:!0});var Rd=s(Lo);Ei=i(Rd,"torch.nn.Module"),Rd.forEach(t),Mi=i(ss,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ss.forEach(t),qi=d(ke),le=r(ke,"DIV",{class:!0});var Ve=s(le);w($o.$$.fragment,Ve),Pi=d(Ve),dt=r(Ve,"P",{});var wn=s(dt);Ai=i(wn,"The "),hn=r(wn,"A",{href:!0});var Dd=s(hn);Oi=i(Dd,"LxmertForQuestionAnswering"),Dd.forEach(t),Ci=i(wn," forward method, overrides the "),Hn=r(wn,"CODE",{});var Sd=s(Hn);Ni=i(Sd,"__call__"),Sd.forEach(t),ji=i(wn," special method."),wn.forEach(t),Ii=d(Ve),w(Lt.$$.fragment,Ve),Ri=d(Ve),w($t.$$.fragment,Ve),Di=d(Ve),w(Ft.$$.fragment,Ve),Ve.forEach(t),ke.forEach(t),zr=d(o),ct=r(o,"H2",{class:!0});var as=s(ct);zt=r(as,"A",{id:!0,class:!0,href:!0});var Qd=s(zt);Gn=r(Qd,"SPAN",{});var Vd=s(Gn);w(Fo.$$.fragment,Vd),Vd.forEach(t),Qd.forEach(t),Si=d(as),Un=r(as,"SPAN",{});var Wd=s(Un);Qi=i(Wd,"TFLxmertModel"),Wd.forEach(t),as.forEach(t),Er=d(o),K=r(o,"DIV",{class:!0});var Le=s(K);w(zo.$$.fragment,Le),Vi=d(Le),Kn=r(Le,"P",{});var Xd=s(Kn);Wi=i(Xd,"The bare Lxmert Model transformer outputting raw hidden-states without any specific head on top."),Xd.forEach(t),Xi=d(Le),Eo=r(Le,"P",{});var is=s(Eo);Bi=i(is,"The LXMERT model was proposed in "),Mo=r(is,"A",{href:!0,rel:!0});var Bd=s(Mo);Hi=i(Bd,`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),Bd.forEach(t),Gi=i(is,` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pre-trained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),is.forEach(t),Ui=d(Le),qo=r(Le,"P",{});var ls=s(qo);Ki=i(ls,"This model is also a "),Po=r(ls,"A",{href:!0,rel:!0});var Hd=s(Po);Ji=i(Hd,"tf.keras.Model"),Hd.forEach(t),Yi=i(ls,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ls.forEach(t),Zi=d(Le),w(Et.$$.fragment,Le),el=d(Le),be=r(Le,"DIV",{class:!0});var It=s(be);w(Ao.$$.fragment,It),tl=d(It),ht=r(It,"P",{});var yn=s(ht);ol=i(yn,"The "),mn=r(yn,"A",{href:!0});var Gd=s(mn);nl=i(Gd,"TFLxmertModel"),Gd.forEach(t),rl=i(yn," forward method, overrides the "),Jn=r(yn,"CODE",{});var Ud=s(Jn);sl=i(Ud,"__call__"),Ud.forEach(t),al=i(yn," special method."),yn.forEach(t),il=d(It),w(Mt.$$.fragment,It),ll=d(It),w(qt.$$.fragment,It),It.forEach(t),Le.forEach(t),Mr=d(o),mt=r(o,"H2",{class:!0});var ds=s(mt);Pt=r(ds,"A",{id:!0,class:!0,href:!0});var Kd=s(Pt);Yn=r(Kd,"SPAN",{});var Jd=s(Yn);w(Oo.$$.fragment,Jd),Jd.forEach(t),Kd.forEach(t),dl=d(ds),Zn=r(ds,"SPAN",{});var Yd=s(Zn);cl=i(Yd,"TFLxmertForPreTraining"),Yd.forEach(t),ds.forEach(t),qr=d(o),J=r(o,"DIV",{class:!0});var $e=s(J);w(Co.$$.fragment,$e),hl=d($e),No=r($e,"P",{});var cs=s(No);ml=i(cs,"Lxmert Model with a "),er=r(cs,"CODE",{});var Zd=s(er);ul=i(Zd,"language modeling"),Zd.forEach(t),pl=i(cs," head on top."),cs.forEach(t),fl=d($e),jo=r($e,"P",{});var hs=s(jo);gl=i(hs,"The LXMERT model was proposed in "),Io=r(hs,"A",{href:!0,rel:!0});var ec=s(Io);_l=i(ec,`LXMERT: Learning Cross-Modality Encoder Representations from
Transformers`),ec.forEach(t),vl=i(hs,` by Hao Tan and Mohit Bansal. It\u2019s a vision and language transformer
model, pre-trained on a variety of multi-modal datasets comprising of GQA, VQAv2.0, MCSCOCO captions, and Visual
genome, using a combination of masked language modeling, region of interest feature regression, cross entropy loss
for question answering attribute prediction, and object tag prediction.`),hs.forEach(t),Tl=d($e),Ro=r($e,"P",{});var ms=s(Ro);xl=i(ms,"This model is also a "),Do=r(ms,"A",{href:!0,rel:!0});var tc=s(Do);bl=i(tc,"tf.keras.Model"),tc.forEach(t),wl=i(ms,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ms.forEach(t),yl=d($e),w(At.$$.fragment,$e),kl=d($e),Qe=r($e,"DIV",{class:!0});var kn=s(Qe);w(So.$$.fragment,kn),Ll=d(kn),ut=r(kn,"P",{});var Ln=s(ut);$l=i(Ln,"The "),un=r(Ln,"A",{href:!0});var oc=s(un);Fl=i(oc,"TFLxmertForPreTraining"),oc.forEach(t),zl=i(Ln," forward method, overrides the "),tr=r(Ln,"CODE",{});var nc=s(tr);El=i(nc,"__call__"),nc.forEach(t),Ml=i(Ln," special method."),Ln.forEach(t),ql=d(kn),w(Ot.$$.fragment,kn),kn.forEach(t),$e.forEach(t),this.h()},h(){c(h,"name","hf:doc:metadata"),c(h,"content",JSON.stringify(bc)),c(g,"id","lxmert"),c(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g,"href","#lxmert"),c(f,"class","relative group"),c(Y,"id","overview"),c(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y,"href","#overview"),c(E,"class","relative group"),c(te,"href","https://arxiv.org/abs/1908.07490"),c(te,"rel","nofollow"),c(ue,"href","https://huggingface.co/eltoto1219"),c(ue,"rel","nofollow"),c(pe,"href","https://github.com/airsplay/lxmert"),c(pe,"rel","nofollow"),c(ie,"id","transformers.LxmertConfig"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#transformers.LxmertConfig"),c(O,"class","relative group"),c(Bo,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertModel"),c(Ho,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Go,"href","/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig"),c(Uo,"href","/docs/transformers/pr_highlight/en/main_classes/configuration#transformers.PretrainedConfig"),c(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pt,"id","transformers.LxmertTokenizer"),c(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pt,"href","#transformers.LxmertTokenizer"),c(Ke,"class","relative group"),c(Ko,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Jo,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizer"),c(Yo,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizer"),c(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gt,"id","transformers.LxmertTokenizerFast"),c(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gt,"href","#transformers.LxmertTokenizerFast"),c(Je,"class","relative group"),c(Zo,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(en,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizerFast"),c(tn,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizerFast"),c(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vt,"id","transformers.models.lxmert.modeling_lxmert.LxmertModelOutput"),c(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vt,"href","#transformers.models.lxmert.modeling_lxmert.LxmertModelOutput"),c(Ye,"class","relative group"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(on,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nn,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rn,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tt,"id","transformers.LxmertModel"),c(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tt,"href","#transformers.LxmertModel"),c(rt,"class","relative group"),c(so,"href","https://arxiv.org/abs/1908.07490"),c(so,"rel","nofollow"),c(sn,"href","/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel"),c(lo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(lo,"rel","nofollow"),c(an,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertModel"),c(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wt,"id","transformers.LxmertForPreTraining"),c(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wt,"href","#transformers.LxmertForPreTraining"),c(at,"class","relative group"),c(po,"href","https://arxiv.org/abs/1908.07490"),c(po,"rel","nofollow"),c(ln,"href","/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel"),c(_o,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(_o,"rel","nofollow"),c(dn,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kt,"id","transformers.LxmertForQuestionAnswering"),c(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kt,"href","#transformers.LxmertForQuestionAnswering"),c(lt,"class","relative group"),c(wo,"href","https://arxiv.org/abs/1908.07490"),c(wo,"rel","nofollow"),c(cn,"href","/docs/transformers/pr_highlight/en/main_classes/model#transformers.PreTrainedModel"),c(Lo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Lo,"rel","nofollow"),c(hn,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zt,"id","transformers.TFLxmertModel"),c(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zt,"href","#transformers.TFLxmertModel"),c(ct,"class","relative group"),c(Mo,"href","https://arxiv.org/abs/1908.07490"),c(Mo,"rel","nofollow"),c(Po,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Po,"rel","nofollow"),c(mn,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.TFLxmertModel"),c(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pt,"id","transformers.TFLxmertForPreTraining"),c(Pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pt,"href","#transformers.TFLxmertForPreTraining"),c(mt,"class","relative group"),c(Io,"href","https://arxiv.org/abs/1908.07490"),c(Io,"rel","nofollow"),c(Do,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Do,"rel","nofollow"),c(un,"href","/docs/transformers/pr_highlight/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,p){e(document.head,h),u(o,x,p),u(o,f,p),e(f,g),e(g,T),y(m,T,null),e(f,_),e(f,z),e(z,Fe),u(o,re,p),u(o,E,p),e(E,Y),e(Y,D),y(ee,D,null),e(E,ze),e(E,S),e(S,Ee),u(o,_e,p),u(o,N,p),e(N,Q),e(N,te),e(te,de),e(N,M),u(o,A,p),u(o,se,p),e(se,oe),u(o,ve,p),u(o,ae,p),e(ae,V),e(V,Me),u(o,Te,p),u(o,P,p),e(P,qe),u(o,Z,p),u(o,j,p),e(j,ce),e(ce,ne),e(j,Pe),e(j,he),e(he,W),e(j,Ae),e(j,X),e(X,Oe),u(o,v,p),u(o,F,p),e(F,me),e(F,ue),e(ue,We),e(F,B),e(F,pe),e(pe,Xe),e(F,Be),u(o,I,p),u(o,O,p),e(O,ie),e(ie,Ce),y(C,Ce,null),e(O,He),e(O,Ne),e(Ne,je),u(o,De,p),u(o,Ie,p),y(Rt,Ie,null),e(Ie,gs),e(Ie,Ge),e(Ge,_s),e(Ge,Bo),e(Bo,vs),e(Ge,Ts),e(Ge,Ho),e(Ho,xs),e(Ge,bs),e(Ie,ws),e(Ie,Ue),e(Ue,ys),e(Ue,Go),e(Go,ks),e(Ue,Ls),e(Ue,Uo),e(Uo,$s),e(Ue,Fs),u(o,mr,p),u(o,Ke,p),e(Ke,pt),e(pt,$n),y(Dt,$n,null),e(Ke,zs),e(Ke,Fn),e(Fn,Es),u(o,ur,p),u(o,fe,p),y(St,fe,null),e(fe,Ms),e(fe,zn),e(zn,qs),e(fe,Ps),e(fe,ft),e(ft,Ko),e(Ko,As),e(ft,Os),e(ft,Jo),e(Jo,Cs),e(ft,Ns),e(fe,js),e(fe,Qt),e(Qt,Is),e(Qt,Yo),e(Yo,Rs),e(Qt,Ds),u(o,pr,p),u(o,Je,p),e(Je,gt),e(gt,En),y(Vt,En,null),e(Je,Ss),e(Je,Mn),e(Mn,Qs),u(o,fr,p),u(o,ge,p),y(Wt,ge,null),e(ge,Vs),e(ge,Xt),e(Xt,Ws),e(Xt,qn),e(qn,Xs),e(Xt,Bs),e(ge,Hs),e(ge,_t),e(_t,Zo),e(Zo,Gs),e(_t,Us),e(_t,en),e(en,Ks),e(_t,Js),e(ge,Ys),e(ge,Bt),e(Bt,Zs),e(Bt,tn),e(tn,ea),e(Bt,ta),u(o,gr,p),u(o,Ye,p),e(Ye,vt),e(vt,Pn),y(Ht,Pn,null),e(Ye,oa),e(Ye,An),e(An,na),u(o,_r,p),u(o,Ze,p),y(Gt,Ze,null),e(Ze,ra),e(Ze,On),e(On,sa),u(o,vr,p),u(o,et,p),y(Ut,et,null),e(et,aa),e(et,Kt),e(Kt,ia),e(Kt,on),e(on,la),e(Kt,da),u(o,Tr,p),u(o,tt,p),y(Jt,tt,null),e(tt,ca),e(tt,Yt),e(Yt,ha),e(Yt,nn),e(nn,ma),e(Yt,ua),u(o,xr,p),u(o,ot,p),y(Zt,ot,null),e(ot,pa),e(ot,Cn),e(Cn,fa),u(o,br,p),u(o,nt,p),y(eo,nt,null),e(nt,ga),e(nt,to),e(to,_a),e(to,rn),e(rn,va),e(to,Ta),u(o,wr,p),u(o,rt,p),e(rt,Tt),e(Tt,Nn),y(oo,Nn,null),e(rt,xa),e(rt,jn),e(jn,ba),u(o,yr,p),u(o,H,p),y(no,H,null),e(H,wa),e(H,In),e(In,ya),e(H,ka),e(H,ro),e(ro,La),e(ro,so),e(so,$a),e(ro,Fa),e(H,za),e(H,ao),e(ao,Ea),e(ao,sn),e(sn,Ma),e(ao,qa),e(H,Pa),e(H,io),e(io,Aa),e(io,lo),e(lo,Oa),e(io,Ca),e(H,Na),e(H,xe),y(co,xe,null),e(xe,ja),e(xe,st),e(st,Ia),e(st,an),e(an,Ra),e(st,Da),e(st,Rn),e(Rn,Sa),e(st,Qa),e(xe,Va),y(xt,xe,null),e(xe,Wa),y(bt,xe,null),u(o,kr,p),u(o,at,p),e(at,wt),e(wt,Dn),y(ho,Dn,null),e(at,Xa),e(at,Sn),e(Sn,Ba),u(o,Lr,p),u(o,G,p),y(mo,G,null),e(G,Ha),e(G,Qn),e(Qn,Ga),e(G,Ua),e(G,uo),e(uo,Ka),e(uo,po),e(po,Ja),e(uo,Ya),e(G,Za),e(G,fo),e(fo,ei),e(fo,ln),e(ln,ti),e(fo,oi),e(G,ni),e(G,go),e(go,ri),e(go,_o),e(_o,si),e(go,ai),e(G,ii),e(G,Se),y(vo,Se,null),e(Se,li),e(Se,it),e(it,di),e(it,dn),e(dn,ci),e(it,hi),e(it,Vn),e(Vn,mi),e(it,ui),e(Se,pi),y(yt,Se,null),u(o,$r,p),u(o,lt,p),e(lt,kt),e(kt,Wn),y(To,Wn,null),e(lt,fi),e(lt,Xn),e(Xn,gi),u(o,Fr,p),u(o,U,p),y(xo,U,null),e(U,_i),e(U,Bn),e(Bn,vi),e(U,Ti),e(U,bo),e(bo,xi),e(bo,wo),e(wo,bi),e(bo,wi),e(U,yi),e(U,yo),e(yo,ki),e(yo,cn),e(cn,Li),e(yo,$i),e(U,Fi),e(U,ko),e(ko,zi),e(ko,Lo),e(Lo,Ei),e(ko,Mi),e(U,qi),e(U,le),y($o,le,null),e(le,Pi),e(le,dt),e(dt,Ai),e(dt,hn),e(hn,Oi),e(dt,Ci),e(dt,Hn),e(Hn,Ni),e(dt,ji),e(le,Ii),y(Lt,le,null),e(le,Ri),y($t,le,null),e(le,Di),y(Ft,le,null),u(o,zr,p),u(o,ct,p),e(ct,zt),e(zt,Gn),y(Fo,Gn,null),e(ct,Si),e(ct,Un),e(Un,Qi),u(o,Er,p),u(o,K,p),y(zo,K,null),e(K,Vi),e(K,Kn),e(Kn,Wi),e(K,Xi),e(K,Eo),e(Eo,Bi),e(Eo,Mo),e(Mo,Hi),e(Eo,Gi),e(K,Ui),e(K,qo),e(qo,Ki),e(qo,Po),e(Po,Ji),e(qo,Yi),e(K,Zi),y(Et,K,null),e(K,el),e(K,be),y(Ao,be,null),e(be,tl),e(be,ht),e(ht,ol),e(ht,mn),e(mn,nl),e(ht,rl),e(ht,Jn),e(Jn,sl),e(ht,al),e(be,il),y(Mt,be,null),e(be,ll),y(qt,be,null),u(o,Mr,p),u(o,mt,p),e(mt,Pt),e(Pt,Yn),y(Oo,Yn,null),e(mt,dl),e(mt,Zn),e(Zn,cl),u(o,qr,p),u(o,J,p),y(Co,J,null),e(J,hl),e(J,No),e(No,ml),e(No,er),e(er,ul),e(No,pl),e(J,fl),e(J,jo),e(jo,gl),e(jo,Io),e(Io,_l),e(jo,vl),e(J,Tl),e(J,Ro),e(Ro,xl),e(Ro,Do),e(Do,bl),e(Ro,wl),e(J,yl),y(At,J,null),e(J,kl),e(J,Qe),y(So,Qe,null),e(Qe,Ll),e(Qe,ut),e(ut,$l),e(ut,un),e(un,Fl),e(ut,zl),e(ut,tr),e(tr,El),e(ut,Ml),e(Qe,ql),y(Ot,Qe,null),Pr=!0},p(o,[p]){const Qo={};p&2&&(Qo.$$scope={dirty:p,ctx:o}),xt.$set(Qo);const or={};p&2&&(or.$$scope={dirty:p,ctx:o}),bt.$set(or);const nr={};p&2&&(nr.$$scope={dirty:p,ctx:o}),yt.$set(nr);const rr={};p&2&&(rr.$$scope={dirty:p,ctx:o}),Lt.$set(rr);const Vo={};p&2&&(Vo.$$scope={dirty:p,ctx:o}),$t.$set(Vo);const sr={};p&2&&(sr.$$scope={dirty:p,ctx:o}),Ft.$set(sr);const ar={};p&2&&(ar.$$scope={dirty:p,ctx:o}),Et.$set(ar);const ir={};p&2&&(ir.$$scope={dirty:p,ctx:o}),Mt.$set(ir);const Wo={};p&2&&(Wo.$$scope={dirty:p,ctx:o}),qt.$set(Wo);const lr={};p&2&&(lr.$$scope={dirty:p,ctx:o}),At.$set(lr);const dr={};p&2&&(dr.$$scope={dirty:p,ctx:o}),Ot.$set(dr)},i(o){Pr||(k(m.$$.fragment,o),k(ee.$$.fragment,o),k(C.$$.fragment,o),k(Rt.$$.fragment,o),k(Dt.$$.fragment,o),k(St.$$.fragment,o),k(Vt.$$.fragment,o),k(Wt.$$.fragment,o),k(Ht.$$.fragment,o),k(Gt.$$.fragment,o),k(Ut.$$.fragment,o),k(Jt.$$.fragment,o),k(Zt.$$.fragment,o),k(eo.$$.fragment,o),k(oo.$$.fragment,o),k(no.$$.fragment,o),k(co.$$.fragment,o),k(xt.$$.fragment,o),k(bt.$$.fragment,o),k(ho.$$.fragment,o),k(mo.$$.fragment,o),k(vo.$$.fragment,o),k(yt.$$.fragment,o),k(To.$$.fragment,o),k(xo.$$.fragment,o),k($o.$$.fragment,o),k(Lt.$$.fragment,o),k($t.$$.fragment,o),k(Ft.$$.fragment,o),k(Fo.$$.fragment,o),k(zo.$$.fragment,o),k(Et.$$.fragment,o),k(Ao.$$.fragment,o),k(Mt.$$.fragment,o),k(qt.$$.fragment,o),k(Oo.$$.fragment,o),k(Co.$$.fragment,o),k(At.$$.fragment,o),k(So.$$.fragment,o),k(Ot.$$.fragment,o),Pr=!0)},o(o){L(m.$$.fragment,o),L(ee.$$.fragment,o),L(C.$$.fragment,o),L(Rt.$$.fragment,o),L(Dt.$$.fragment,o),L(St.$$.fragment,o),L(Vt.$$.fragment,o),L(Wt.$$.fragment,o),L(Ht.$$.fragment,o),L(Gt.$$.fragment,o),L(Ut.$$.fragment,o),L(Jt.$$.fragment,o),L(Zt.$$.fragment,o),L(eo.$$.fragment,o),L(oo.$$.fragment,o),L(no.$$.fragment,o),L(co.$$.fragment,o),L(xt.$$.fragment,o),L(bt.$$.fragment,o),L(ho.$$.fragment,o),L(mo.$$.fragment,o),L(vo.$$.fragment,o),L(yt.$$.fragment,o),L(To.$$.fragment,o),L(xo.$$.fragment,o),L($o.$$.fragment,o),L(Lt.$$.fragment,o),L($t.$$.fragment,o),L(Ft.$$.fragment,o),L(Fo.$$.fragment,o),L(zo.$$.fragment,o),L(Et.$$.fragment,o),L(Ao.$$.fragment,o),L(Mt.$$.fragment,o),L(qt.$$.fragment,o),L(Oo.$$.fragment,o),L(Co.$$.fragment,o),L(At.$$.fragment,o),L(So.$$.fragment,o),L(Ot.$$.fragment,o),Pr=!1},d(o){t(h),o&&t(x),o&&t(f),$(m),o&&t(re),o&&t(E),$(ee),o&&t(_e),o&&t(N),o&&t(A),o&&t(se),o&&t(ve),o&&t(ae),o&&t(Te),o&&t(P),o&&t(Z),o&&t(j),o&&t(v),o&&t(F),o&&t(I),o&&t(O),$(C),o&&t(De),o&&t(Ie),$(Rt),o&&t(mr),o&&t(Ke),$(Dt),o&&t(ur),o&&t(fe),$(St),o&&t(pr),o&&t(Je),$(Vt),o&&t(fr),o&&t(ge),$(Wt),o&&t(gr),o&&t(Ye),$(Ht),o&&t(_r),o&&t(Ze),$(Gt),o&&t(vr),o&&t(et),$(Ut),o&&t(Tr),o&&t(tt),$(Jt),o&&t(xr),o&&t(ot),$(Zt),o&&t(br),o&&t(nt),$(eo),o&&t(wr),o&&t(rt),$(oo),o&&t(yr),o&&t(H),$(no),$(co),$(xt),$(bt),o&&t(kr),o&&t(at),$(ho),o&&t(Lr),o&&t(G),$(mo),$(vo),$(yt),o&&t($r),o&&t(lt),$(To),o&&t(Fr),o&&t(U),$(xo),$($o),$(Lt),$($t),$(Ft),o&&t(zr),o&&t(ct),$(Fo),o&&t(Er),o&&t(K),$(zo),$(Et),$(Ao),$(Mt),$(qt),o&&t(Mr),o&&t(mt),$(Oo),o&&t(qr),o&&t(J),$(Co),$(At),$(So),$(Ot)}}}const bc={local:"lxmert",sections:[{local:"overview",title:"Overview"},{local:"transformers.LxmertConfig",title:"LxmertConfig"},{local:"transformers.LxmertTokenizer",title:"LxmertTokenizer"},{local:"transformers.LxmertTokenizerFast",title:"LxmertTokenizerFast"},{local:"transformers.models.lxmert.modeling_lxmert.LxmertModelOutput",title:"Lxmert specific outputs"},{local:"transformers.LxmertModel",title:"LxmertModel"},{local:"transformers.LxmertForPreTraining",title:"LxmertForPreTraining"},{local:"transformers.LxmertForQuestionAnswering",title:"LxmertForQuestionAnswering"},{local:"transformers.TFLxmertModel",title:"TFLxmertModel"},{local:"transformers.TFLxmertForPreTraining",title:"TFLxmertForPreTraining"}],title:"LXMERT"};function wc(q){return lc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ec extends rc{constructor(h){super();sc(this,h,wc,xc,ac,{})}}export{Ec as default,bc as metadata};
