import{S as $n,i as xn,s as yn,e as r,k as f,w as d,t as a,M as wn,c as l,d as t,m as c,a as o,x as g,h as n,b as h,N as jn,F as s,g as p,y as v,q as _,o as k,B as $,v as En}from"../chunks/vendor-6b77c823.js";import{T as bn}from"../chunks/Tip-39098574.js";import{I as ls}from"../chunks/IconCopyLink-7a11ce68.js";import{C as S}from"../chunks/CodeBlock-3a8b25a8.js";function An(is){let m,N,u,j,F;return{c(){m=r("p"),N=a("Take a look at the "),u=r("a"),j=a("pipeline()"),F=a(" documentation for a complete list of supported taska."),this.h()},l(w){m=l(w,"P",{});var P=o(m);N=n(P,"Take a look at the "),u=l(P,"A",{href:!0});var H=o(u);j=n(H,"pipeline()"),H.forEach(t),F=n(P," documentation for a complete list of supported taska."),P.forEach(t),this.h()},h(){h(u,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline")},m(w,P){p(w,m,P),s(m,N),s(m,u),s(u,j),s(m,F)},d(w){w&&t(m)}}}function Pn(is){let m,N,u,j,F,w,P,H,Zs,os,E,et,we,st,tt,Z,at,nt,je,rt,lt,ps,T,ee,it,Ee,ot,pt,ht,Be,ft,ct,se,mt,be,ut,dt,hs,I,fs,z,R,Ge,te,gt,Qe,vt,cs,b,_t,Ae,kt,$t,Pe,xt,yt,Te,wt,jt,ms,qe,ae,Et,Me,bt,At,us,ne,ds,re,le,Pt,Se,Tt,qt,gs,ie,vs,Fe,Mt,_s,oe,ks,x,St,ze,Ft,zt,Xe,Lt,Ct,Le,Dt,Nt,Ye,Ht,It,$s,pe,xs,L,O,Ze,he,Rt,es,Ot,ys,y,Ut,Ce,Wt,Jt,fe,Kt,Vt,ss,Bt,Gt,De,Qt,Xt,ws,ce,js,U,Yt,Ne,Zt,ea,Es,me,bs,W,sa,He,ta,aa,As,ue,Ps,C,J,ts,de,na,as,ra,Ts,K,la,Ie,ia,oa,qs,A,pa,ge,ha,fa,ve,ca,ma,Re,ua,da,Ms,_e,Ss,V,ga,Oe,va,_a,Fs,ke,zs,D,B,ns,$e,ka,rs,$a,Ls,G,xa,Ue,ya,wa,Cs,We,ja,Ds,Je,Ke,Ea,Ns,xe,Hs;return w=new ls({}),I=new bn({props:{$$slots:{default:[An]},$$scope:{ctx:is}}}),te=new ls({}),ne=new S({props:{code:`from transformers import pipeline

generator = pipeline(task="text-generation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(task=<span class="hljs-string">&quot;text-generation&quot;</span>)`}}),ie=new S({props:{code:'generator("Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(<span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&#x27;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone, Seven for the Iron-priests at the door to the east, and thirteen for the Lord Kings at the end of the mountain&#x27;</span>}]`}}),oe=new S({props:{code:`generator(
    [
        "Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone",
        "Nine for Mortal Men, doomed to die, One for the Dark Lord on his dark throne",
    ]
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(
<span class="hljs-meta">... </span>    [
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;Nine for Mortal Men, doomed to die, One for the Dark Lord on his dark throne&quot;</span>,
<span class="hljs-meta">... </span>    ]
<span class="hljs-meta">... </span>)`}}),pe=new S({props:{code:`generator(
    "Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone",
    num_return_sequences=2,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>,
<span class="hljs-meta">... </span>    num_return_sequences=<span class="hljs-number">2</span>,
<span class="hljs-meta">... </span>)`}}),he=new ls({}),ce=new S({props:{code:`from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("distilgpt2")
model = AutoModelForCausalLM.from_pretrained("distilgpt2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)`}}),me=new S({props:{code:`from transformers import pipeline

generator = pipeline(task="text-generation", model=model, tokenizer=tokenizer)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(task=<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)`}}),ue=new S({props:{code:'generator("Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(<span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&#x27;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone, Seven for the Dragon-lords (for them to rule in a world ruled by their rulers, and all who live within the realm&#x27;</span>}]`}}),de=new ls({}),_e=new S({props:{code:`from transformers import pipeline

audio_classifier = pipeline(
    task="audio-classification", model="ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>audio_classifier = pipeline(
<span class="hljs-meta">... </span>    task=<span class="hljs-string">&quot;audio-classification&quot;</span>, model=<span class="hljs-string">&quot;ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition&quot;</span>
<span class="hljs-meta">... </span>)`}}),ke=new S({props:{code:'audio_classifier("jfk_moon_speech.wav")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>audio_classifier(<span class="hljs-string">&quot;jfk_moon_speech.wav&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;calm&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.13856211304664612</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;disgust&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.13148026168346405</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;happy&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12635163962841034</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;angry&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12439591437578201</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;fearful&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12404385954141617</span>}]`}}),$e=new ls({}),xe=new S({props:{code:`from transformers import pipeline

vision_classifier = pipeline(task="image-classification")
vision_classifier(
    images="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>vision_classifier = pipeline(task=<span class="hljs-string">&quot;image-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>vision_classifier(
<span class="hljs-meta">... </span>    images=<span class="hljs-string">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg&quot;</span>
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;lynx, catamount&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.4403027892112732</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;cougar, puma, catamount, mountain lion, painter, panther, Felis concolor&#x27;</span>,
  <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.03433405980467796</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;snow leopard, ounce, Panthera uncia&#x27;</span>,
  <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.032148055732250214</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;Egyptian cat&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.02353910356760025</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;tiger cat&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.023034192621707916</span>}]`}}),{c(){m=r("meta"),N=f(),u=r("h1"),j=r("a"),F=r("span"),d(w.$$.fragment),P=f(),H=r("span"),Zs=a("Pipelines for inference"),os=f(),E=r("p"),et=a("The "),we=r("a"),st=a("pipeline()"),tt=a(" makes it simple to use any model from the "),Z=r("a"),at=a("Model Hub"),nt=a(" for inference on a variety of tasks such as text generation, image segmentation and audio classification. Even if you don\u2019t have experience with a specific modality or understand the code powering the models, you can still use them with the "),je=r("a"),rt=a("pipeline()"),lt=a("! This tutorial will teach you to:"),ps=f(),T=r("ul"),ee=r("li"),it=a("Use a "),Ee=r("a"),ot=a("pipeline()"),pt=a(" for inference."),ht=f(),Be=r("li"),ft=a("Use a specific tokenizer or model."),ct=f(),se=r("li"),mt=a("Use a "),be=r("a"),ut=a("pipeline()"),dt=a(" for audio and vision tasks."),hs=f(),d(I.$$.fragment),fs=f(),z=r("h2"),R=r("a"),Ge=r("span"),d(te.$$.fragment),gt=f(),Qe=r("span"),vt=a("Pipeline usage"),cs=f(),b=r("p"),_t=a("While each task has an associated "),Ae=r("a"),kt=a("pipeline()"),$t=a(", it is simpler to use the general "),Pe=r("a"),xt=a("pipeline()"),yt=a(" abstraction which contains all the specific task pipelines. The "),Te=r("a"),wt=a("pipeline()"),jt=a(" automatically loads a default model and tokenizer capable of inference for your task."),ms=f(),qe=r("ol"),ae=r("li"),Et=a("Start by creating a "),Me=r("a"),bt=a("pipeline()"),At=a(" and specify an inference task:"),us=f(),d(ne.$$.fragment),ds=f(),re=r("ol"),le=r("li"),Pt=a("Pass your input text to the "),Se=r("a"),Tt=a("pipeline()"),qt=a(":"),gs=f(),d(ie.$$.fragment),vs=f(),Fe=r("p"),Mt=a("If you have more than one input, pass your input as a list:"),_s=f(),d(oe.$$.fragment),ks=f(),x=r("p"),St=a("Any additional parameters for your task can also be included in the "),ze=r("a"),Ft=a("pipeline()"),zt=a(". The "),Xe=r("code"),Lt=a("text-generation"),Ct=a(" task has a "),Le=r("a"),Dt=a("generate()"),Nt=a(" method with several parameters for controlling the output. For example, if you want to generate more than one output, set the "),Ye=r("code"),Ht=a("num_return_sequences"),It=a(" parameter:"),$s=f(),d(pe.$$.fragment),xs=f(),L=r("h3"),O=r("a"),Ze=r("span"),d(he.$$.fragment),Rt=f(),es=r("span"),Ot=a("Choose a model and tokenizer"),ys=f(),y=r("p"),Ut=a("The "),Ce=r("a"),Wt=a("pipeline()"),Jt=a(" accepts any model from the "),fe=r("a"),Kt=a("Model Hub"),Vt=a(". There are tags on the Model Hub that allow you to filter for a model you\u2019d like to use for your task. Once you\u2019ve picked an appropriate model, load it with the corresponding "),ss=r("code"),Bt=a("AutoModelFor"),Gt=a(" and [`AutoTokenizer\u2019] class. For example, load the "),De=r("a"),Qt=a("AutoModelForCausalLM"),Xt=a(" class for a causal language modeling task:"),ws=f(),d(ce.$$.fragment),js=f(),U=r("p"),Yt=a("Create a "),Ne=r("a"),Zt=a("pipeline()"),ea=a(" for your task, and specify the model and tokenizer you\u2019ve loaded:"),Es=f(),d(me.$$.fragment),bs=f(),W=r("p"),sa=a("Pass your input text to the "),He=r("a"),ta=a("pipeline()"),aa=a(" to generate some text:"),As=f(),d(ue.$$.fragment),Ps=f(),C=r("h2"),J=r("a"),ts=r("span"),d(de.$$.fragment),na=f(),as=r("span"),ra=a("Audio pipeline"),Ts=f(),K=r("p"),la=a("The flexibility of the "),Ie=r("a"),ia=a("pipeline()"),oa=a(" means it can also be extended to audio tasks."),qs=f(),A=r("p"),pa=a("For example, let\u2019s classify the emotion from a short clip of John F. Kennedy\u2019s famous "),ge=r("a"),ha=a("\u201CWe choose to go to the Moon\u201D"),fa=a(" speech. Find an "),ve=r("a"),ca=a("audio classification"),ma=a(" model on the Model Hub for emotion recognition and load it in the "),Re=r("a"),ua=a("pipeline()"),da=a(":"),Ms=f(),d(_e.$$.fragment),Ss=f(),V=r("p"),ga=a("Pass the audio file to the "),Oe=r("a"),va=a("pipeline()"),_a=a(":"),Fs=f(),d(ke.$$.fragment),zs=f(),D=r("h2"),B=r("a"),ns=r("span"),d($e.$$.fragment),ka=f(),rs=r("span"),$a=a("Vision pipeline"),Ls=f(),G=r("p"),xa=a("Finally, using a "),Ue=r("a"),ya=a("pipeline()"),wa=a(" for vision tasks is practically identical."),Cs=f(),We=r("p"),ja=a("Specify your vision task and pass your image to the classifier. The imaage can be a link or a local path to the image. For example, what species of cat is shown below?"),Ds=f(),Je=r("p"),Ke=r("img"),Ns=f(),d(xe.$$.fragment),this.h()},l(e){const i=wn('[data-svelte="svelte-1phssyn"]',document.head);m=l(i,"META",{name:!0,content:!0}),i.forEach(t),N=c(e),u=l(e,"H1",{class:!0});var ye=o(u);j=l(ye,"A",{id:!0,class:!0,href:!0});var ba=o(j);F=l(ba,"SPAN",{});var Aa=o(F);g(w.$$.fragment,Aa),Aa.forEach(t),ba.forEach(t),P=c(ye),H=l(ye,"SPAN",{});var Pa=o(H);Zs=n(Pa,"Pipelines for inference"),Pa.forEach(t),ye.forEach(t),os=c(e),E=l(e,"P",{});var Q=o(E);et=n(Q,"The "),we=l(Q,"A",{href:!0});var Ta=o(we);st=n(Ta,"pipeline()"),Ta.forEach(t),tt=n(Q," makes it simple to use any model from the "),Z=l(Q,"A",{href:!0,rel:!0});var qa=o(Z);at=n(qa,"Model Hub"),qa.forEach(t),nt=n(Q," for inference on a variety of tasks such as text generation, image segmentation and audio classification. Even if you don\u2019t have experience with a specific modality or understand the code powering the models, you can still use them with the "),je=l(Q,"A",{href:!0});var Ma=o(je);rt=n(Ma,"pipeline()"),Ma.forEach(t),lt=n(Q,"! This tutorial will teach you to:"),Q.forEach(t),ps=c(e),T=l(e,"UL",{});var Ve=o(T);ee=l(Ve,"LI",{});var Is=o(ee);it=n(Is,"Use a "),Ee=l(Is,"A",{href:!0});var Sa=o(Ee);ot=n(Sa,"pipeline()"),Sa.forEach(t),pt=n(Is," for inference."),Is.forEach(t),ht=c(Ve),Be=l(Ve,"LI",{});var Fa=o(Be);ft=n(Fa,"Use a specific tokenizer or model."),Fa.forEach(t),ct=c(Ve),se=l(Ve,"LI",{});var Rs=o(se);mt=n(Rs,"Use a "),be=l(Rs,"A",{href:!0});var za=o(be);ut=n(za,"pipeline()"),za.forEach(t),dt=n(Rs," for audio and vision tasks."),Rs.forEach(t),Ve.forEach(t),hs=c(e),g(I.$$.fragment,e),fs=c(e),z=l(e,"H2",{class:!0});var Os=o(z);R=l(Os,"A",{id:!0,class:!0,href:!0});var La=o(R);Ge=l(La,"SPAN",{});var Ca=o(Ge);g(te.$$.fragment,Ca),Ca.forEach(t),La.forEach(t),gt=c(Os),Qe=l(Os,"SPAN",{});var Da=o(Qe);vt=n(Da,"Pipeline usage"),Da.forEach(t),Os.forEach(t),cs=c(e),b=l(e,"P",{});var X=o(b);_t=n(X,"While each task has an associated "),Ae=l(X,"A",{href:!0});var Na=o(Ae);kt=n(Na,"pipeline()"),Na.forEach(t),$t=n(X,", it is simpler to use the general "),Pe=l(X,"A",{href:!0});var Ha=o(Pe);xt=n(Ha,"pipeline()"),Ha.forEach(t),yt=n(X," abstraction which contains all the specific task pipelines. The "),Te=l(X,"A",{href:!0});var Ia=o(Te);wt=n(Ia,"pipeline()"),Ia.forEach(t),jt=n(X," automatically loads a default model and tokenizer capable of inference for your task."),X.forEach(t),ms=c(e),qe=l(e,"OL",{});var Ra=o(qe);ae=l(Ra,"LI",{});var Us=o(ae);Et=n(Us,"Start by creating a "),Me=l(Us,"A",{href:!0});var Oa=o(Me);bt=n(Oa,"pipeline()"),Oa.forEach(t),At=n(Us," and specify an inference task:"),Us.forEach(t),Ra.forEach(t),us=c(e),g(ne.$$.fragment,e),ds=c(e),re=l(e,"OL",{start:!0});var Ua=o(re);le=l(Ua,"LI",{});var Ws=o(le);Pt=n(Ws,"Pass your input text to the "),Se=l(Ws,"A",{href:!0});var Wa=o(Se);Tt=n(Wa,"pipeline()"),Wa.forEach(t),qt=n(Ws,":"),Ws.forEach(t),Ua.forEach(t),gs=c(e),g(ie.$$.fragment,e),vs=c(e),Fe=l(e,"P",{});var Ja=o(Fe);Mt=n(Ja,"If you have more than one input, pass your input as a list:"),Ja.forEach(t),_s=c(e),g(oe.$$.fragment,e),ks=c(e),x=l(e,"P",{});var q=o(x);St=n(q,"Any additional parameters for your task can also be included in the "),ze=l(q,"A",{href:!0});var Ka=o(ze);Ft=n(Ka,"pipeline()"),Ka.forEach(t),zt=n(q,". The "),Xe=l(q,"CODE",{});var Va=o(Xe);Lt=n(Va,"text-generation"),Va.forEach(t),Ct=n(q," task has a "),Le=l(q,"A",{href:!0});var Ba=o(Le);Dt=n(Ba,"generate()"),Ba.forEach(t),Nt=n(q," method with several parameters for controlling the output. For example, if you want to generate more than one output, set the "),Ye=l(q,"CODE",{});var Ga=o(Ye);Ht=n(Ga,"num_return_sequences"),Ga.forEach(t),It=n(q," parameter:"),q.forEach(t),$s=c(e),g(pe.$$.fragment,e),xs=c(e),L=l(e,"H3",{class:!0});var Js=o(L);O=l(Js,"A",{id:!0,class:!0,href:!0});var Qa=o(O);Ze=l(Qa,"SPAN",{});var Xa=o(Ze);g(he.$$.fragment,Xa),Xa.forEach(t),Qa.forEach(t),Rt=c(Js),es=l(Js,"SPAN",{});var Ya=o(es);Ot=n(Ya,"Choose a model and tokenizer"),Ya.forEach(t),Js.forEach(t),ys=c(e),y=l(e,"P",{});var M=o(y);Ut=n(M,"The "),Ce=l(M,"A",{href:!0});var Za=o(Ce);Wt=n(Za,"pipeline()"),Za.forEach(t),Jt=n(M," accepts any model from the "),fe=l(M,"A",{href:!0,rel:!0});var en=o(fe);Kt=n(en,"Model Hub"),en.forEach(t),Vt=n(M,". There are tags on the Model Hub that allow you to filter for a model you\u2019d like to use for your task. Once you\u2019ve picked an appropriate model, load it with the corresponding "),ss=l(M,"CODE",{});var sn=o(ss);Bt=n(sn,"AutoModelFor"),sn.forEach(t),Gt=n(M," and [`AutoTokenizer\u2019] class. For example, load the "),De=l(M,"A",{href:!0});var tn=o(De);Qt=n(tn,"AutoModelForCausalLM"),tn.forEach(t),Xt=n(M," class for a causal language modeling task:"),M.forEach(t),ws=c(e),g(ce.$$.fragment,e),js=c(e),U=l(e,"P",{});var Ks=o(U);Yt=n(Ks,"Create a "),Ne=l(Ks,"A",{href:!0});var an=o(Ne);Zt=n(an,"pipeline()"),an.forEach(t),ea=n(Ks," for your task, and specify the model and tokenizer you\u2019ve loaded:"),Ks.forEach(t),Es=c(e),g(me.$$.fragment,e),bs=c(e),W=l(e,"P",{});var Vs=o(W);sa=n(Vs,"Pass your input text to the "),He=l(Vs,"A",{href:!0});var nn=o(He);ta=n(nn,"pipeline()"),nn.forEach(t),aa=n(Vs," to generate some text:"),Vs.forEach(t),As=c(e),g(ue.$$.fragment,e),Ps=c(e),C=l(e,"H2",{class:!0});var Bs=o(C);J=l(Bs,"A",{id:!0,class:!0,href:!0});var rn=o(J);ts=l(rn,"SPAN",{});var ln=o(ts);g(de.$$.fragment,ln),ln.forEach(t),rn.forEach(t),na=c(Bs),as=l(Bs,"SPAN",{});var on=o(as);ra=n(on,"Audio pipeline"),on.forEach(t),Bs.forEach(t),Ts=c(e),K=l(e,"P",{});var Gs=o(K);la=n(Gs,"The flexibility of the "),Ie=l(Gs,"A",{href:!0});var pn=o(Ie);ia=n(pn,"pipeline()"),pn.forEach(t),oa=n(Gs," means it can also be extended to audio tasks."),Gs.forEach(t),qs=c(e),A=l(e,"P",{});var Y=o(A);pa=n(Y,"For example, let\u2019s classify the emotion from a short clip of John F. Kennedy\u2019s famous "),ge=l(Y,"A",{href:!0,rel:!0});var hn=o(ge);ha=n(hn,"\u201CWe choose to go to the Moon\u201D"),hn.forEach(t),fa=n(Y," speech. Find an "),ve=l(Y,"A",{href:!0,rel:!0});var fn=o(ve);ca=n(fn,"audio classification"),fn.forEach(t),ma=n(Y," model on the Model Hub for emotion recognition and load it in the "),Re=l(Y,"A",{href:!0});var cn=o(Re);ua=n(cn,"pipeline()"),cn.forEach(t),da=n(Y,":"),Y.forEach(t),Ms=c(e),g(_e.$$.fragment,e),Ss=c(e),V=l(e,"P",{});var Qs=o(V);ga=n(Qs,"Pass the audio file to the "),Oe=l(Qs,"A",{href:!0});var mn=o(Oe);va=n(mn,"pipeline()"),mn.forEach(t),_a=n(Qs,":"),Qs.forEach(t),Fs=c(e),g(ke.$$.fragment,e),zs=c(e),D=l(e,"H2",{class:!0});var Xs=o(D);B=l(Xs,"A",{id:!0,class:!0,href:!0});var un=o(B);ns=l(un,"SPAN",{});var dn=o(ns);g($e.$$.fragment,dn),dn.forEach(t),un.forEach(t),ka=c(Xs),rs=l(Xs,"SPAN",{});var gn=o(rs);$a=n(gn,"Vision pipeline"),gn.forEach(t),Xs.forEach(t),Ls=c(e),G=l(e,"P",{});var Ys=o(G);xa=n(Ys,"Finally, using a "),Ue=l(Ys,"A",{href:!0});var vn=o(Ue);ya=n(vn,"pipeline()"),vn.forEach(t),wa=n(Ys," for vision tasks is practically identical."),Ys.forEach(t),Cs=c(e),We=l(e,"P",{});var _n=o(We);ja=n(_n,"Specify your vision task and pass your image to the classifier. The imaage can be a link or a local path to the image. For example, what species of cat is shown below?"),_n.forEach(t),Ds=c(e),Je=l(e,"P",{});var kn=o(Je);Ke=l(kn,"IMG",{src:!0,alt:!0}),kn.forEach(t),Ns=c(e),g(xe.$$.fragment,e),this.h()},h(){h(m,"name","hf:doc:metadata"),h(m,"content",JSON.stringify(Tn)),h(j,"id","pipelines-for-inference"),h(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(j,"href","#pipelines-for-inference"),h(u,"class","relative group"),h(we,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(Z,"href","https://huggingface.co/models"),h(Z,"rel","nofollow"),h(je,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(Ee,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(be,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(R,"id","pipeline-usage"),h(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(R,"href","#pipeline-usage"),h(z,"class","relative group"),h(Ae,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(Pe,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(Te,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(Me,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(Se,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(re,"start","2"),h(ze,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(Le,"href","/docs/transformers/pr_highlight/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),h(O,"id","choose-a-model-and-tokenizer"),h(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(O,"href","#choose-a-model-and-tokenizer"),h(L,"class","relative group"),h(Ce,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(fe,"href","https://huggingface.co/models"),h(fe,"rel","nofollow"),h(De,"href","/docs/transformers/pr_highlight/en/model_doc/auto#transformers.AutoModelForCausalLM"),h(Ne,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(He,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(J,"id","audio-pipeline"),h(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(J,"href","#audio-pipeline"),h(C,"class","relative group"),h(Ie,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(ge,"href","https://en.wikipedia.org/wiki/We_choose_to_go_to_the_Moon"),h(ge,"rel","nofollow"),h(ve,"href","https://huggingface.co/models?pipeline_tag=audio-classification"),h(ve,"rel","nofollow"),h(Re,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(Oe,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),h(B,"id","vision-pipeline"),h(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(B,"href","#vision-pipeline"),h(D,"class","relative group"),h(Ue,"href","/docs/transformers/pr_highlight/en/main_classes/pipelines#transformers.pipeline"),jn(Ke.src,Ea="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg")||h(Ke,"src",Ea),h(Ke,"alt","pipeline-cat-chonk")},m(e,i){s(document.head,m),p(e,N,i),p(e,u,i),s(u,j),s(j,F),v(w,F,null),s(u,P),s(u,H),s(H,Zs),p(e,os,i),p(e,E,i),s(E,et),s(E,we),s(we,st),s(E,tt),s(E,Z),s(Z,at),s(E,nt),s(E,je),s(je,rt),s(E,lt),p(e,ps,i),p(e,T,i),s(T,ee),s(ee,it),s(ee,Ee),s(Ee,ot),s(ee,pt),s(T,ht),s(T,Be),s(Be,ft),s(T,ct),s(T,se),s(se,mt),s(se,be),s(be,ut),s(se,dt),p(e,hs,i),v(I,e,i),p(e,fs,i),p(e,z,i),s(z,R),s(R,Ge),v(te,Ge,null),s(z,gt),s(z,Qe),s(Qe,vt),p(e,cs,i),p(e,b,i),s(b,_t),s(b,Ae),s(Ae,kt),s(b,$t),s(b,Pe),s(Pe,xt),s(b,yt),s(b,Te),s(Te,wt),s(b,jt),p(e,ms,i),p(e,qe,i),s(qe,ae),s(ae,Et),s(ae,Me),s(Me,bt),s(ae,At),p(e,us,i),v(ne,e,i),p(e,ds,i),p(e,re,i),s(re,le),s(le,Pt),s(le,Se),s(Se,Tt),s(le,qt),p(e,gs,i),v(ie,e,i),p(e,vs,i),p(e,Fe,i),s(Fe,Mt),p(e,_s,i),v(oe,e,i),p(e,ks,i),p(e,x,i),s(x,St),s(x,ze),s(ze,Ft),s(x,zt),s(x,Xe),s(Xe,Lt),s(x,Ct),s(x,Le),s(Le,Dt),s(x,Nt),s(x,Ye),s(Ye,Ht),s(x,It),p(e,$s,i),v(pe,e,i),p(e,xs,i),p(e,L,i),s(L,O),s(O,Ze),v(he,Ze,null),s(L,Rt),s(L,es),s(es,Ot),p(e,ys,i),p(e,y,i),s(y,Ut),s(y,Ce),s(Ce,Wt),s(y,Jt),s(y,fe),s(fe,Kt),s(y,Vt),s(y,ss),s(ss,Bt),s(y,Gt),s(y,De),s(De,Qt),s(y,Xt),p(e,ws,i),v(ce,e,i),p(e,js,i),p(e,U,i),s(U,Yt),s(U,Ne),s(Ne,Zt),s(U,ea),p(e,Es,i),v(me,e,i),p(e,bs,i),p(e,W,i),s(W,sa),s(W,He),s(He,ta),s(W,aa),p(e,As,i),v(ue,e,i),p(e,Ps,i),p(e,C,i),s(C,J),s(J,ts),v(de,ts,null),s(C,na),s(C,as),s(as,ra),p(e,Ts,i),p(e,K,i),s(K,la),s(K,Ie),s(Ie,ia),s(K,oa),p(e,qs,i),p(e,A,i),s(A,pa),s(A,ge),s(ge,ha),s(A,fa),s(A,ve),s(ve,ca),s(A,ma),s(A,Re),s(Re,ua),s(A,da),p(e,Ms,i),v(_e,e,i),p(e,Ss,i),p(e,V,i),s(V,ga),s(V,Oe),s(Oe,va),s(V,_a),p(e,Fs,i),v(ke,e,i),p(e,zs,i),p(e,D,i),s(D,B),s(B,ns),v($e,ns,null),s(D,ka),s(D,rs),s(rs,$a),p(e,Ls,i),p(e,G,i),s(G,xa),s(G,Ue),s(Ue,ya),s(G,wa),p(e,Cs,i),p(e,We,i),s(We,ja),p(e,Ds,i),p(e,Je,i),s(Je,Ke),p(e,Ns,i),v(xe,e,i),Hs=!0},p(e,[i]){const ye={};i&2&&(ye.$$scope={dirty:i,ctx:e}),I.$set(ye)},i(e){Hs||(_(w.$$.fragment,e),_(I.$$.fragment,e),_(te.$$.fragment,e),_(ne.$$.fragment,e),_(ie.$$.fragment,e),_(oe.$$.fragment,e),_(pe.$$.fragment,e),_(he.$$.fragment,e),_(ce.$$.fragment,e),_(me.$$.fragment,e),_(ue.$$.fragment,e),_(de.$$.fragment,e),_(_e.$$.fragment,e),_(ke.$$.fragment,e),_($e.$$.fragment,e),_(xe.$$.fragment,e),Hs=!0)},o(e){k(w.$$.fragment,e),k(I.$$.fragment,e),k(te.$$.fragment,e),k(ne.$$.fragment,e),k(ie.$$.fragment,e),k(oe.$$.fragment,e),k(pe.$$.fragment,e),k(he.$$.fragment,e),k(ce.$$.fragment,e),k(me.$$.fragment,e),k(ue.$$.fragment,e),k(de.$$.fragment,e),k(_e.$$.fragment,e),k(ke.$$.fragment,e),k($e.$$.fragment,e),k(xe.$$.fragment,e),Hs=!1},d(e){t(m),e&&t(N),e&&t(u),$(w),e&&t(os),e&&t(E),e&&t(ps),e&&t(T),e&&t(hs),$(I,e),e&&t(fs),e&&t(z),$(te),e&&t(cs),e&&t(b),e&&t(ms),e&&t(qe),e&&t(us),$(ne,e),e&&t(ds),e&&t(re),e&&t(gs),$(ie,e),e&&t(vs),e&&t(Fe),e&&t(_s),$(oe,e),e&&t(ks),e&&t(x),e&&t($s),$(pe,e),e&&t(xs),e&&t(L),$(he),e&&t(ys),e&&t(y),e&&t(ws),$(ce,e),e&&t(js),e&&t(U),e&&t(Es),$(me,e),e&&t(bs),e&&t(W),e&&t(As),$(ue,e),e&&t(Ps),e&&t(C),$(de),e&&t(Ts),e&&t(K),e&&t(qs),e&&t(A),e&&t(Ms),$(_e,e),e&&t(Ss),e&&t(V),e&&t(Fs),$(ke,e),e&&t(zs),e&&t(D),$($e),e&&t(Ls),e&&t(G),e&&t(Cs),e&&t(We),e&&t(Ds),e&&t(Je),e&&t(Ns),$(xe,e)}}}const Tn={local:"pipelines-for-inference",sections:[{local:"pipeline-usage",sections:[{local:"choose-a-model-and-tokenizer",title:"Choose a model and tokenizer"}],title:"Pipeline usage"},{local:"audio-pipeline",title:"Audio pipeline"},{local:"vision-pipeline",title:"Vision pipeline"}],title:"Pipelines for inference"};function qn(is){return En(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ln extends $n{constructor(m){super();xn(this,m,qn,Pn,yn,{})}}export{Ln as default,Tn as metadata};
