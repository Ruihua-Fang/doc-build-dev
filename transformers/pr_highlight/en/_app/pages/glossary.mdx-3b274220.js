import{S as xp,i as Pp,s as Ap,e as l,k as p,w as m,t as n,M as Ip,c as r,d as s,m as d,a as i,x as b,h as a,b as c,F as t,g as h,y as _,L as Cp,q as g,o as k,B as v,v as Dp}from"../chunks/vendor-6b77c823.js";import{Y as yi}from"../chunks/Youtube-5c6e11e6.js";import{I as C}from"../chunks/IconCopyLink-7a11ce68.js";import{C as E}from"../chunks/CodeBlock-3a8b25a8.js";function Mp($i){let D,nn,M,Y,Ws,ke,Xa,Us,Ya,an,L,Q,Vs,ve,Qa,Xs,Ja,on,u,Ys,Ka,Za,Qs,eo,so,Js,to,no,Ks,ao,oo,Zs,lo,ro,et,io,ho,st,po,co,tt,uo,fo,nt,mo,bo,at,_o,go,ot,ko,vo,lt,wo,yo,B,$o,Je,Eo,jo,Ke,qo,To,zo,rt,xo,Po,it,Ao,ln,S,J,ht,we,Io,pt,Co,rn,Ze,Do,hn,es,pn,F,K,dt,ye,Mo,ct,Lo,dn,Z,Bo,ut,So,Fo,cn,$e,un,ee,No,Ee,Ro,Oo,fn,je,mn,ss,Ho,bn,qe,_n,ts,Go,gn,Te,kn,se,Wo,ze,Uo,Vo,vn,xe,wn,ns,Xo,yn,Pe,$n,as,Yo,En,os,Qo,jn,Ae,qn,ls,Jo,Tn,Ie,zn,te,Ko,rs,Zo,el,xn,is,Pn,N,ne,ft,Ce,sl,mt,tl,An,hs,nl,In,De,Cn,ps,al,Dn,ds,ol,Mn,Me,Ln,cs,ll,Bn,Le,Sn,us,rl,Fn,fs,il,Nn,Be,Rn,ms,hl,On,Se,Hn,q,pl,bs,dl,cl,bt,ul,fl,_t,ml,bl,Gn,Fe,Wn,_s,Un,R,ae,gt,Ne,_l,kt,gl,Vn,gs,kl,Xn,Re,Yn,P,vl,vt,wl,yl,wt,$l,El,Qn,Oe,Jn,oe,jl,yt,ql,Tl,Kn,He,Zn,ks,zl,ea,Ge,sa,vs,xl,ta,ws,Pl,na,We,aa,A,Al,$t,Il,Cl,Et,Dl,Ml,oa,I,Ll,ys,Bl,Sl,jt,Fl,Nl,la,$s,ra,O,le,qt,Ue,Rl,Tt,Ol,ia,re,Hl,zt,Gl,Wl,ha,ie,Ul,xt,Vl,Xl,pa,he,Yl,Pt,Ql,Jl,da,Es,ca,H,pe,At,Ve,Kl,It,Zl,ua,js,er,fa,qs,sr,ma,T,G,tr,Ts,nr,ar,Ct,or,lr,rr,W,ir,zs,hr,pr,Dt,dr,cr,ur,U,fr,xs,mr,br,Mt,_r,gr,kr,$,vr,Ps,wr,yr,As,$r,Er,Lt,jr,qr,Bt,Tr,zr,St,xr,Pr,Ft,Ar,Ir,ba,de,Cr,Is,Dr,Mr,_a,Cs,ga,V,ce,Nt,Xe,Lr,Rt,Br,ka,Ds,Sr,va,z,Fr,Ot,Nr,Rr,Ht,Or,Hr,Gt,Gr,Wr,wa,Ms,Ur,ya,Ls,$a,X,ue,Wt,Ye,Vr,Ut,Xr,Ea,fe,Yr,Vt,Qr,Jr,ja,w,Kr,Xt,Zr,ei,Yt,si,ti,Qe,ni,ai,Qt,oi,li,Jt,ri,ii,Kt,hi,pi,Zt,di,ci,en,ui,fi,qa,x,mi,Bs,bi,_i,sn,gi,ki,tn,vi,wi,Ta;return ke=new C({}),ve=new C({}),we=new C({}),ye=new C({}),$e=new yi({props:{id:"VFp38yj8h3A"}}),je=new E({props:{code:`from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained("bert-base-cased")

sequence = "A Titan RTX has 24GB of VRAM"`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence = <span class="hljs-string">&quot;A Titan RTX has 24GB of VRAM&quot;</span>`}}),qe=new E({props:{code:"tokenized_sequence = tokenizer.tokenize(sequence)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_sequence = tokenizer.tokenize(sequence)'}}),Te=new E({props:{code:"print(tokenized_sequence)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tokenized_sequence)
[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;Titan&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;##T&#x27;</span>, <span class="hljs-string">&#x27;##X&#x27;</span>, <span class="hljs-string">&#x27;has&#x27;</span>, <span class="hljs-string">&#x27;24&#x27;</span>, <span class="hljs-string">&#x27;##GB&#x27;</span>, <span class="hljs-string">&#x27;of&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;##RA&#x27;</span>, <span class="hljs-string">&#x27;##M&#x27;</span>]`}}),xe=new E({props:{code:"inputs = tokenizer(sequence)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(sequence)'}}),Pe=new E({props:{code:`encoded_sequence = inputs["input_ids"]
print(encoded_sequence)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence = inputs[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_sequence)
[<span class="hljs-number">101</span>, <span class="hljs-number">138</span>, <span class="hljs-number">18696</span>, <span class="hljs-number">155</span>, <span class="hljs-number">1942</span>, <span class="hljs-number">3190</span>, <span class="hljs-number">1144</span>, <span class="hljs-number">1572</span>, <span class="hljs-number">13745</span>, <span class="hljs-number">1104</span>, <span class="hljs-number">159</span>, <span class="hljs-number">9664</span>, <span class="hljs-number">2107</span>, <span class="hljs-number">102</span>]`}}),Ae=new E({props:{code:"decoded_sequence = tokenizer.decode(encoded_sequence)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>decoded_sequence = tokenizer.decode(encoded_sequence)'}}),Ie=new E({props:{code:"print(decoded_sequence)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(decoded_sequence)
[CLS] A Titan RTX has 24GB of VRAM [SEP]`}}),Ce=new C({}),De=new yi({props:{id:"M6adb1j2jPI"}}),Me=new E({props:{code:`from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained("bert-base-cased")

sequence_a = "This is a short sequence."
sequence_b = "This is a rather long sequence. It is at least longer than the sequence A."

encoded_sequence_a = tokenizer(sequence_a)["input_ids"]
encoded_sequence_b = tokenizer(sequence_b)["input_ids"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_a = <span class="hljs-string">&quot;This is a short sequence.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_b = <span class="hljs-string">&quot;This is a rather long sequence. It is at least longer than the sequence A.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence_a = tokenizer(sequence_a)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence_b = tokenizer(sequence_b)[<span class="hljs-string">&quot;input_ids&quot;</span>]`}}),Le=new E({props:{code:"len(encoded_sequence_a), len(encoded_sequence_b)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(encoded_sequence_a), <span class="hljs-built_in">len</span>(encoded_sequence_b)
(<span class="hljs-number">8</span>, <span class="hljs-number">19</span>)`}}),Be=new E({props:{code:"padded_sequences = tokenizer([sequence_a, sequence_b], padding=True)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences = tokenizer([sequence_a, sequence_b], padding=<span class="hljs-literal">True</span>)'}}),Se=new E({props:{code:'padded_sequences["input_ids"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences[<span class="hljs-string">&quot;input_ids&quot;</span>]
[[<span class="hljs-number">101</span>, <span class="hljs-number">1188</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1603</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">101</span>, <span class="hljs-number">1188</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1897</span>, <span class="hljs-number">1263</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">119</span>, <span class="hljs-number">1135</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">1120</span>, <span class="hljs-number">1655</span>, <span class="hljs-number">2039</span>, <span class="hljs-number">1190</span>, <span class="hljs-number">1103</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">138</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>]]`}}),Fe=new E({props:{code:'padded_sequences["attention_mask"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences[<span class="hljs-string">&quot;attention_mask&quot;</span>]
[[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]`}}),Ne=new C({}),Re=new yi({props:{id:"0u3ioSwev3s"}}),Oe=new E({props:{code:"# [CLS] SEQUENCE_A [SEP] SEQUENCE_B [SEP]",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [CLS] SEQUENCE_A [SEP] SEQUENCE_B [SEP]</span>'}}),He=new E({props:{code:`from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained("bert-base-cased")
sequence_a = "HuggingFace is based in NYC"
sequence_b = "Where is HuggingFace based?"

encoded_dict = tokenizer(sequence_a, sequence_b)
decoded = tokenizer.decode(encoded_dict["input_ids"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_a = <span class="hljs-string">&quot;HuggingFace is based in NYC&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_b = <span class="hljs-string">&quot;Where is HuggingFace based?&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dict = tokenizer(sequence_a, sequence_b)
<span class="hljs-meta">&gt;&gt;&gt; </span>decoded = tokenizer.decode(encoded_dict[<span class="hljs-string">&quot;input_ids&quot;</span>])`}}),Ge=new E({props:{code:"print(decoded)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(decoded)
[CLS] HuggingFace <span class="hljs-keyword">is</span> based <span class="hljs-keyword">in</span> NYC [SEP] Where <span class="hljs-keyword">is</span> HuggingFace based? [SEP]`}}),We=new E({props:{code:'encoded_dict["token_type_ids"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dict[<span class="hljs-string">&quot;token_type_ids&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`}}),Ue=new C({}),Ve=new C({}),Xe=new C({}),Ye=new C({}),{c(){D=l("meta"),nn=p(),M=l("h1"),Y=l("a"),Ws=l("span"),m(ke.$$.fragment),Xa=p(),Us=l("span"),Ya=n("Glossary"),an=p(),L=l("h2"),Q=l("a"),Vs=l("span"),m(ve.$$.fragment),Qa=p(),Xs=l("span"),Ja=n("General terms"),on=p(),u=l("ul"),Ys=l("li"),Ka=n("autoencoding models: see MLM"),Za=p(),Qs=l("li"),eo=n("autoregressive models: see CLM"),so=p(),Js=l("li"),to=n(`CLM: causal language modeling, a pretraining task where the model reads the texts in order and has to predict the
next word. It\u2019s usually done by reading the whole sentence but using a mask inside the model to hide the future
tokens at a certain timestep.`),no=p(),Ks=l("li"),ao=n("deep learning: machine learning algorithms which uses neural networks with several layers."),oo=p(),Zs=l("li"),lo=n(`MLM: masked language modeling, a pretraining task where the model sees a corrupted version of the texts, usually done
by masking some tokens randomly, and has to predict the original text.`),ro=p(),et=l("li"),io=n("multimodal: a task that combines texts with another kind of inputs (for instance images)."),ho=p(),st=l("li"),po=n(`NLG: natural language generation, all tasks related to generating text (for instance talk with transformers,
translation).`),co=p(),tt=l("li"),uo=n("NLP: natural language processing, a generic way to say \u201Cdeal with texts\u201D."),fo=p(),nt=l("li"),mo=n(`NLU: natural language understanding, all tasks related to understanding what is in a text (for instance classifying
the whole text, individual words).`),bo=p(),at=l("li"),_o=n(`pretrained model: a model that has been pretrained on some data (for instance all of Wikipedia). Pretraining methods
involve a self-supervised objective, which can be reading the text and trying to predict the next word (see CLM) or
masking some words and trying to predict them (see MLM).`),go=p(),ot=l("li"),ko=n("RNN: recurrent neural network, a type of model that uses a loop over a layer to process texts."),vo=p(),lt=l("li"),wo=n("self-attention: each element of the input finds out which other elements of the input they should attend to."),yo=p(),B=l("li"),$o=n(`seq2seq or sequence-to-sequence: models that generate a new sequence from an input, like translation models, or
summarization models (such as `),Je=l("a"),Eo=n("Bart"),jo=n(" or "),Ke=l("a"),qo=n("T5"),To=n(")."),zo=p(),rt=l("li"),xo=n(`token: a part of a sentence, usually a word, but can also be a subword (non-common words are often split in subwords)
or a punctuation symbol.`),Po=p(),it=l("li"),Ao=n("transformer: self-attention based deep learning model architecture."),ln=p(),S=l("h2"),J=l("a"),ht=l("span"),m(we.$$.fragment),Io=p(),pt=l("span"),Co=n("Model inputs"),rn=p(),Ze=l("p"),Do=n(`Every model is different yet bears similarities with the others. Therefore most models use the same inputs, which are
detailed here alongside usage examples.`),hn=p(),es=l("a"),pn=p(),F=l("h3"),K=l("a"),dt=l("span"),m(ye.$$.fragment),Mo=p(),ct=l("span"),Lo=n("Input IDs"),dn=p(),Z=l("p"),Bo=n("The input ids are often the only required parameters to be passed to the model as input. "),ut=l("em"),So=n(`They are token indices,
numerical representations of tokens building the sequences that will be used as input by the model`),Fo=n("."),cn=p(),m($e.$$.fragment),un=p(),ee=l("p"),No=n(`Each tokenizer works differently but the underlying mechanism remains the same. Here\u2019s an example using the BERT
tokenizer, which is a `),Ee=l("a"),Ro=n("WordPiece"),Oo=n(" tokenizer:"),fn=p(),m(je.$$.fragment),mn=p(),ss=l("p"),Ho=n("The tokenizer takes care of splitting the sequence into tokens available in the tokenizer vocabulary."),bn=p(),m(qe.$$.fragment),_n=p(),ts=l("p"),Go=n(`The tokens are either words or subwords. Here for instance, \u201CVRAM\u201D wasn\u2019t in the model vocabulary, so it\u2019s been split
in \u201CV\u201D, \u201CRA\u201D and \u201CM\u201D. To indicate those tokens are not separate words but parts of the same word, a double-hash prefix
is added for \u201CRA\u201D and \u201CM\u201D:`),gn=p(),m(Te.$$.fragment),kn=p(),se=l("p"),Wo=n(`These tokens can then be converted into IDs which are understandable by the model. This can be done by directly feeding
the sentence to the tokenizer, which leverages the Rust implementation of `),ze=l("a"),Uo=n("\u{1F917} Tokenizers"),Vo=n(" for peak performance."),vn=p(),m(xe.$$.fragment),wn=p(),ns=l("p"),Xo=n(`The tokenizer returns a dictionary with all the arguments necessary for its corresponding model to work properly. The
token indices are under the key \u201Cinput_ids\u201D:`),yn=p(),m(Pe.$$.fragment),$n=p(),as=l("p"),Yo=n(`Note that the tokenizer automatically adds \u201Cspecial tokens\u201D (if the associated model relies on them) which are special
IDs the model sometimes uses.`),En=p(),os=l("p"),Qo=n("If we decode the previous sequence of ids,"),jn=p(),m(Ae.$$.fragment),qn=p(),ls=l("p"),Jo=n("we will see"),Tn=p(),m(Ie.$$.fragment),zn=p(),te=l("p"),Ko=n("because this is the way a "),rs=l("a"),Zo=n("BertModel"),el=n(" is going to expect its inputs."),xn=p(),is=l("a"),Pn=p(),N=l("h3"),ne=l("a"),ft=l("span"),m(Ce.$$.fragment),sl=p(),mt=l("span"),tl=n("Attention mask"),An=p(),hs=l("p"),nl=n("The attention mask is an optional argument used when batching sequences together."),In=p(),m(De.$$.fragment),Cn=p(),ps=l("p"),al=n("This argument indicates to the model which tokens should be attended to, and which should not."),Dn=p(),ds=l("p"),ol=n("For example, consider these two sequences:"),Mn=p(),m(Me.$$.fragment),Ln=p(),cs=l("p"),ll=n("The encoded versions have different lengths:"),Bn=p(),m(Le.$$.fragment),Sn=p(),us=l("p"),rl=n(`Therefore, we can\u2019t put them together in the same tensor as-is. The first sequence needs to be padded up to the length
of the second one, or the second one needs to be truncated down to the length of the first one.`),Fn=p(),fs=l("p"),il=n(`In the first case, the list of IDs will be extended by the padding indices. We can pass a list to the tokenizer and ask
it to pad like this:`),Nn=p(),m(Be.$$.fragment),Rn=p(),ms=l("p"),hl=n("We can see that 0s have been added on the right of the first sentence to make it the same length as the second one:"),On=p(),m(Se.$$.fragment),Hn=p(),q=l("p"),pl=n(`This can then be converted into a tensor in PyTorch or TensorFlow. The attention mask is a binary tensor indicating the
position of the padded indices so that the model does not attend to them. For the `),bs=l("a"),dl=n("BertTokenizer"),cl=n(`,
`),bt=l("code"),ul=n("1"),fl=n(" indicates a value that should be attended to, while "),_t=l("code"),ml=n("0"),bl=n(` indicates a padded value. This attention mask is
in the dictionary returned by the tokenizer under the key \u201Cattention_mask\u201D:`),Gn=p(),m(Fe.$$.fragment),Wn=p(),_s=l("a"),Un=p(),R=l("h3"),ae=l("a"),gt=l("span"),m(Ne.$$.fragment),_l=p(),kt=l("span"),gl=n("Token Type IDs"),Vn=p(),gs=l("p"),kl=n("Some models\u2019 purpose is to do classification on pairs of sentences or question answering."),Xn=p(),m(Re.$$.fragment),Yn=p(),P=l("p"),vl=n(`These require two different sequences to be joined in a single \u201Cinput_ids\u201D entry, which usually is performed with the
help of special tokens, such as the classifier (`),vt=l("code"),wl=n("[CLS]"),yl=n(") and separator ("),wt=l("code"),$l=n("[SEP]"),El=n(`) tokens. For example, the BERT
model builds its two sequence input as such:`),Qn=p(),m(Oe.$$.fragment),Jn=p(),oe=l("p"),jl=n("We can use our tokenizer to automatically generate such a sentence by passing the two sequences to "),yt=l("code"),ql=n("tokenizer"),Tl=n(` as two
arguments (and not a list, like before) like this:`),Kn=p(),m(He.$$.fragment),Zn=p(),ks=l("p"),zl=n("which will return:"),ea=p(),m(Ge.$$.fragment),sa=p(),vs=l("p"),xl=n(`This is enough for some models to understand where one sequence ends and where another begins. However, other models,
such as BERT, also deploy token type IDs (also called segment IDs). They are represented as a binary mask identifying
the two types of sequence in the model.`),ta=p(),ws=l("p"),Pl=n("The tokenizer returns this mask as the \u201Ctoken_type_ids\u201D entry:"),na=p(),m(We.$$.fragment),aa=p(),A=l("p"),Al=n("The first sequence, the \u201Ccontext\u201D used for the question, has all its tokens represented by a "),$t=l("code"),Il=n("0"),Cl=n(`, whereas the
second sequence, corresponding to the \u201Cquestion\u201D, has all its tokens represented by a `),Et=l("code"),Dl=n("1"),Ml=n("."),oa=p(),I=l("p"),Ll=n("Some models, like "),ys=l("a"),Bl=n("XLNetModel"),Sl=n(" use an additional token represented by a "),jt=l("code"),Fl=n("2"),Nl=n("."),la=p(),$s=l("a"),ra=p(),O=l("h3"),le=l("a"),qt=l("span"),m(Ue.$$.fragment),Rl=p(),Tt=l("span"),Ol=n("Position IDs"),ia=p(),re=l("p"),Hl=n(`Contrary to RNNs that have the position of each token embedded within them, transformers are unaware of the position of
each token. Therefore, the position IDs (`),zt=l("code"),Gl=n("position_ids"),Wl=n(`) are used by the model to identify each token\u2019s position in
the list of tokens.`),ha=p(),ie=l("p"),Ul=n("They are an optional parameter. If no "),xt=l("code"),Vl=n("position_ids"),Xl=n(` are passed to the model, the IDs are automatically created as
absolute positional embeddings.`),pa=p(),he=l("p"),Yl=n("Absolute positional embeddings are selected in the range "),Pt=l("code"),Ql=n("[0, config.max_position_embeddings - 1]"),Jl=n(`. Some models use
other types of positional embeddings, such as sinusoidal position embeddings or relative position embeddings.`),da=p(),Es=l("a"),ca=p(),H=l("h3"),pe=l("a"),At=l("span"),m(Ve.$$.fragment),Kl=p(),It=l("span"),Zl=n("Labels"),ua=p(),js=l("p"),er=n(`The labels are an optional argument which can be passed in order for the model to compute the loss itself. These labels
should be the expected prediction of the model: it will use the standard loss in order to compute the loss between its
predictions and the expected value (the label).`),fa=p(),qs=l("p"),sr=n("These labels are different according to the model head, for example:"),ma=p(),T=l("ul"),G=l("li"),tr=n("For sequence classification models (e.g., "),Ts=l("a"),nr=n("BertForSequenceClassification"),ar=n(`), the model expects a
tensor of dimension `),Ct=l("code"),or=n("(batch_size)"),lr=n(` with each value of the batch corresponding to the expected label of the
entire sequence.`),rr=p(),W=l("li"),ir=n("For token classification models (e.g., "),zs=l("a"),hr=n("BertForTokenClassification"),pr=n(`), the model expects a tensor
of dimension `),Dt=l("code"),dr=n("(batch_size, seq_length)"),cr=n(` with each value corresponding to the expected label of each individual
token.`),ur=p(),U=l("li"),fr=n("For masked language modeling (e.g., "),xs=l("a"),mr=n("BertForMaskedLM"),br=n(`), the model expects a tensor of dimension
`),Mt=l("code"),_r=n("(batch_size, seq_length)"),gr=n(` with each value corresponding to the expected label of each individual token: the
labels being the token ID for the masked token, and values to be ignored for the rest (usually -100).`),kr=p(),$=l("li"),vr=n("For sequence to sequence tasks,(e.g., "),Ps=l("a"),wr=n("BartForConditionalGeneration"),yr=n(`,
`),As=l("a"),$r=n("MBartForConditionalGeneration"),Er=n("), the model expects a tensor of dimension "),Lt=l("code"),jr=n("(batch_size, tgt_seq_length)"),qr=n(` with each value corresponding to the target sequences associated with each input sequence. During
training, both `),Bt=l("em"),Tr=n("BART"),zr=n(" and "),St=l("em"),xr=n("T5"),Pr=n(" will make the appropriate "),Ft=l("em"),Ar=n("decoder_input_ids"),Ir=n(` and decoder attention masks internally.
They usually do not need to be supplied. This does not apply to models leveraging the Encoder-Decoder framework. See
the documentation of each model for more information on each specific model\u2019s labels.`),ba=p(),de=l("p"),Cr=n("The base models (e.g., "),Is=l("a"),Dr=n("BertModel"),Mr=n(`) do not accept labels, as these are the base transformer
models, simply outputting features.`),_a=p(),Cs=l("a"),ga=p(),V=l("h3"),ce=l("a"),Nt=l("span"),m(Xe.$$.fragment),Lr=p(),Rt=l("span"),Br=n("Decoder input IDs"),ka=p(),Ds=l("p"),Sr=n(`This input is specific to encoder-decoder models, and contains the input IDs that will be fed to the decoder. These
inputs should be used for sequence to sequence tasks, such as translation or summarization, and are usually built in a
way specific to each model.`),va=p(),z=l("p"),Fr=n("Most encoder-decoder models (BART, T5) create their "),Ot=l("code"),Nr=n("decoder_input_ids"),Rr=n(" on their own from the "),Ht=l("code"),Or=n("labels"),Hr=n(`. In
such models, passing the `),Gt=l("code"),Gr=n("labels"),Wr=n(" is the preferred way to handle training."),wa=p(),Ms=l("p"),Ur=n("Please check each model\u2019s docs to see how they handle these input IDs for sequence to sequence training."),ya=p(),Ls=l("a"),$a=p(),X=l("h3"),ue=l("a"),Wt=l("span"),m(Ye.$$.fragment),Vr=p(),Ut=l("span"),Xr=n("Feed Forward Chunking"),Ea=p(),fe=l("p"),Yr=n(`In each residual attention block in transformers the self-attention layer is usually followed by 2 feed forward layers.
The intermediate embedding size of the feed forward layers is often bigger than the hidden size of the model (e.g., for
`),Vt=l("code"),Qr=n("bert-base-uncased"),Jr=n(")."),ja=p(),w=l("p"),Kr=n("For an input of size "),Xt=l("code"),Zr=n("[batch_size, sequence_length]"),ei=n(`, the memory required to store the intermediate feed forward
embeddings `),Yt=l("code"),si=n("[batch_size, sequence_length, config.intermediate_size]"),ti=n(` can account for a large fraction of the memory
use. The authors of `),Qe=l("a"),ni=n("Reformer: The Efficient Transformer"),ai=n(` noticed that since the
computation is independent of the `),Qt=l("code"),oi=n("sequence_length"),li=n(` dimension, it is mathematically equivalent to compute the output
embeddings of both feed forward layers `),Jt=l("code"),ri=n("[batch_size, config.hidden_size]_0, ..., [batch_size, config.hidden_size]_n"),ii=n(`
individually and concat them afterward to `),Kt=l("code"),hi=n("[batch_size, sequence_length, config.hidden_size]"),pi=n(" with "),Zt=l("code"),di=n("n = sequence_length"),ci=n(`, which trades increased computation time against reduced memory use, but yields a mathematically
`),en=l("strong"),ui=n("equivalent"),fi=n(" result."),qa=p(),x=l("p"),mi=n("For models employing the function "),Bs=l("a"),bi=n("apply_chunking_to_forward()"),_i=n(", the "),sn=l("code"),gi=n("chunk_size"),ki=n(` defines the
number of output embeddings that are computed in parallel and thus defines the trade-off between memory and time
complexity. If `),tn=l("code"),vi=n("chunk_size"),wi=n(" is set to 0, no feed forward chunking is done."),this.h()},l(e){const o=Ip('[data-svelte="svelte-1phssyn"]',document.head);D=r(o,"META",{name:!0,content:!0}),o.forEach(s),nn=d(e),M=r(e,"H1",{class:!0});var za=i(M);Y=r(za,"A",{id:!0,class:!0,href:!0});var Ei=i(Y);Ws=r(Ei,"SPAN",{});var ji=i(Ws);b(ke.$$.fragment,ji),ji.forEach(s),Ei.forEach(s),Xa=d(za),Us=r(za,"SPAN",{});var qi=i(Us);Ya=a(qi,"Glossary"),qi.forEach(s),za.forEach(s),an=d(e),L=r(e,"H2",{class:!0});var xa=i(L);Q=r(xa,"A",{id:!0,class:!0,href:!0});var Ti=i(Q);Vs=r(Ti,"SPAN",{});var zi=i(Vs);b(ve.$$.fragment,zi),zi.forEach(s),Ti.forEach(s),Qa=d(xa),Xs=r(xa,"SPAN",{});var xi=i(Xs);Ja=a(xi,"General terms"),xi.forEach(s),xa.forEach(s),on=d(e),u=r(e,"UL",{});var f=i(u);Ys=r(f,"LI",{});var Pi=i(Ys);Ka=a(Pi,"autoencoding models: see MLM"),Pi.forEach(s),Za=d(f),Qs=r(f,"LI",{});var Ai=i(Qs);eo=a(Ai,"autoregressive models: see CLM"),Ai.forEach(s),so=d(f),Js=r(f,"LI",{});var Ii=i(Js);to=a(Ii,`CLM: causal language modeling, a pretraining task where the model reads the texts in order and has to predict the
next word. It\u2019s usually done by reading the whole sentence but using a mask inside the model to hide the future
tokens at a certain timestep.`),Ii.forEach(s),no=d(f),Ks=r(f,"LI",{});var Ci=i(Ks);ao=a(Ci,"deep learning: machine learning algorithms which uses neural networks with several layers."),Ci.forEach(s),oo=d(f),Zs=r(f,"LI",{});var Di=i(Zs);lo=a(Di,`MLM: masked language modeling, a pretraining task where the model sees a corrupted version of the texts, usually done
by masking some tokens randomly, and has to predict the original text.`),Di.forEach(s),ro=d(f),et=r(f,"LI",{});var Mi=i(et);io=a(Mi,"multimodal: a task that combines texts with another kind of inputs (for instance images)."),Mi.forEach(s),ho=d(f),st=r(f,"LI",{});var Li=i(st);po=a(Li,`NLG: natural language generation, all tasks related to generating text (for instance talk with transformers,
translation).`),Li.forEach(s),co=d(f),tt=r(f,"LI",{});var Bi=i(tt);uo=a(Bi,"NLP: natural language processing, a generic way to say \u201Cdeal with texts\u201D."),Bi.forEach(s),fo=d(f),nt=r(f,"LI",{});var Si=i(nt);mo=a(Si,`NLU: natural language understanding, all tasks related to understanding what is in a text (for instance classifying
the whole text, individual words).`),Si.forEach(s),bo=d(f),at=r(f,"LI",{});var Fi=i(at);_o=a(Fi,`pretrained model: a model that has been pretrained on some data (for instance all of Wikipedia). Pretraining methods
involve a self-supervised objective, which can be reading the text and trying to predict the next word (see CLM) or
masking some words and trying to predict them (see MLM).`),Fi.forEach(s),go=d(f),ot=r(f,"LI",{});var Ni=i(ot);ko=a(Ni,"RNN: recurrent neural network, a type of model that uses a loop over a layer to process texts."),Ni.forEach(s),vo=d(f),lt=r(f,"LI",{});var Ri=i(lt);wo=a(Ri,"self-attention: each element of the input finds out which other elements of the input they should attend to."),Ri.forEach(s),yo=d(f),B=r(f,"LI",{});var Ss=i(B);$o=a(Ss,`seq2seq or sequence-to-sequence: models that generate a new sequence from an input, like translation models, or
summarization models (such as `),Je=r(Ss,"A",{href:!0});var Oi=i(Je);Eo=a(Oi,"Bart"),Oi.forEach(s),jo=a(Ss," or "),Ke=r(Ss,"A",{href:!0});var Hi=i(Ke);qo=a(Hi,"T5"),Hi.forEach(s),To=a(Ss,")."),Ss.forEach(s),zo=d(f),rt=r(f,"LI",{});var Gi=i(rt);xo=a(Gi,`token: a part of a sentence, usually a word, but can also be a subword (non-common words are often split in subwords)
or a punctuation symbol.`),Gi.forEach(s),Po=d(f),it=r(f,"LI",{});var Wi=i(it);Ao=a(Wi,"transformer: self-attention based deep learning model architecture."),Wi.forEach(s),f.forEach(s),ln=d(e),S=r(e,"H2",{class:!0});var Pa=i(S);J=r(Pa,"A",{id:!0,class:!0,href:!0});var Ui=i(J);ht=r(Ui,"SPAN",{});var Vi=i(ht);b(we.$$.fragment,Vi),Vi.forEach(s),Ui.forEach(s),Io=d(Pa),pt=r(Pa,"SPAN",{});var Xi=i(pt);Co=a(Xi,"Model inputs"),Xi.forEach(s),Pa.forEach(s),rn=d(e),Ze=r(e,"P",{});var Yi=i(Ze);Do=a(Yi,`Every model is different yet bears similarities with the others. Therefore most models use the same inputs, which are
detailed here alongside usage examples.`),Yi.forEach(s),hn=d(e),es=r(e,"A",{id:!0}),i(es).forEach(s),pn=d(e),F=r(e,"H3",{class:!0});var Aa=i(F);K=r(Aa,"A",{id:!0,class:!0,href:!0});var Qi=i(K);dt=r(Qi,"SPAN",{});var Ji=i(dt);b(ye.$$.fragment,Ji),Ji.forEach(s),Qi.forEach(s),Mo=d(Aa),ct=r(Aa,"SPAN",{});var Ki=i(ct);Lo=a(Ki,"Input IDs"),Ki.forEach(s),Aa.forEach(s),dn=d(e),Z=r(e,"P",{});var Ia=i(Z);Bo=a(Ia,"The input ids are often the only required parameters to be passed to the model as input. "),ut=r(Ia,"EM",{});var Zi=i(ut);So=a(Zi,`They are token indices,
numerical representations of tokens building the sequences that will be used as input by the model`),Zi.forEach(s),Fo=a(Ia,"."),Ia.forEach(s),cn=d(e),b($e.$$.fragment,e),un=d(e),ee=r(e,"P",{});var Ca=i(ee);No=a(Ca,`Each tokenizer works differently but the underlying mechanism remains the same. Here\u2019s an example using the BERT
tokenizer, which is a `),Ee=r(Ca,"A",{href:!0,rel:!0});var eh=i(Ee);Ro=a(eh,"WordPiece"),eh.forEach(s),Oo=a(Ca," tokenizer:"),Ca.forEach(s),fn=d(e),b(je.$$.fragment,e),mn=d(e),ss=r(e,"P",{});var sh=i(ss);Ho=a(sh,"The tokenizer takes care of splitting the sequence into tokens available in the tokenizer vocabulary."),sh.forEach(s),bn=d(e),b(qe.$$.fragment,e),_n=d(e),ts=r(e,"P",{});var th=i(ts);Go=a(th,`The tokens are either words or subwords. Here for instance, \u201CVRAM\u201D wasn\u2019t in the model vocabulary, so it\u2019s been split
in \u201CV\u201D, \u201CRA\u201D and \u201CM\u201D. To indicate those tokens are not separate words but parts of the same word, a double-hash prefix
is added for \u201CRA\u201D and \u201CM\u201D:`),th.forEach(s),gn=d(e),b(Te.$$.fragment,e),kn=d(e),se=r(e,"P",{});var Da=i(se);Wo=a(Da,`These tokens can then be converted into IDs which are understandable by the model. This can be done by directly feeding
the sentence to the tokenizer, which leverages the Rust implementation of `),ze=r(Da,"A",{href:!0,rel:!0});var nh=i(ze);Uo=a(nh,"\u{1F917} Tokenizers"),nh.forEach(s),Vo=a(Da," for peak performance."),Da.forEach(s),vn=d(e),b(xe.$$.fragment,e),wn=d(e),ns=r(e,"P",{});var ah=i(ns);Xo=a(ah,`The tokenizer returns a dictionary with all the arguments necessary for its corresponding model to work properly. The
token indices are under the key \u201Cinput_ids\u201D:`),ah.forEach(s),yn=d(e),b(Pe.$$.fragment,e),$n=d(e),as=r(e,"P",{});var oh=i(as);Yo=a(oh,`Note that the tokenizer automatically adds \u201Cspecial tokens\u201D (if the associated model relies on them) which are special
IDs the model sometimes uses.`),oh.forEach(s),En=d(e),os=r(e,"P",{});var lh=i(os);Qo=a(lh,"If we decode the previous sequence of ids,"),lh.forEach(s),jn=d(e),b(Ae.$$.fragment,e),qn=d(e),ls=r(e,"P",{});var rh=i(ls);Jo=a(rh,"we will see"),rh.forEach(s),Tn=d(e),b(Ie.$$.fragment,e),zn=d(e),te=r(e,"P",{});var Ma=i(te);Ko=a(Ma,"because this is the way a "),rs=r(Ma,"A",{href:!0});var ih=i(rs);Zo=a(ih,"BertModel"),ih.forEach(s),el=a(Ma," is going to expect its inputs."),Ma.forEach(s),xn=d(e),is=r(e,"A",{id:!0}),i(is).forEach(s),Pn=d(e),N=r(e,"H3",{class:!0});var La=i(N);ne=r(La,"A",{id:!0,class:!0,href:!0});var hh=i(ne);ft=r(hh,"SPAN",{});var ph=i(ft);b(Ce.$$.fragment,ph),ph.forEach(s),hh.forEach(s),sl=d(La),mt=r(La,"SPAN",{});var dh=i(mt);tl=a(dh,"Attention mask"),dh.forEach(s),La.forEach(s),An=d(e),hs=r(e,"P",{});var ch=i(hs);nl=a(ch,"The attention mask is an optional argument used when batching sequences together."),ch.forEach(s),In=d(e),b(De.$$.fragment,e),Cn=d(e),ps=r(e,"P",{});var uh=i(ps);al=a(uh,"This argument indicates to the model which tokens should be attended to, and which should not."),uh.forEach(s),Dn=d(e),ds=r(e,"P",{});var fh=i(ds);ol=a(fh,"For example, consider these two sequences:"),fh.forEach(s),Mn=d(e),b(Me.$$.fragment,e),Ln=d(e),cs=r(e,"P",{});var mh=i(cs);ll=a(mh,"The encoded versions have different lengths:"),mh.forEach(s),Bn=d(e),b(Le.$$.fragment,e),Sn=d(e),us=r(e,"P",{});var bh=i(us);rl=a(bh,`Therefore, we can\u2019t put them together in the same tensor as-is. The first sequence needs to be padded up to the length
of the second one, or the second one needs to be truncated down to the length of the first one.`),bh.forEach(s),Fn=d(e),fs=r(e,"P",{});var _h=i(fs);il=a(_h,`In the first case, the list of IDs will be extended by the padding indices. We can pass a list to the tokenizer and ask
it to pad like this:`),_h.forEach(s),Nn=d(e),b(Be.$$.fragment,e),Rn=d(e),ms=r(e,"P",{});var gh=i(ms);hl=a(gh,"We can see that 0s have been added on the right of the first sentence to make it the same length as the second one:"),gh.forEach(s),On=d(e),b(Se.$$.fragment,e),Hn=d(e),q=r(e,"P",{});var me=i(q);pl=a(me,`This can then be converted into a tensor in PyTorch or TensorFlow. The attention mask is a binary tensor indicating the
position of the padded indices so that the model does not attend to them. For the `),bs=r(me,"A",{href:!0});var kh=i(bs);dl=a(kh,"BertTokenizer"),kh.forEach(s),cl=a(me,`,
`),bt=r(me,"CODE",{});var vh=i(bt);ul=a(vh,"1"),vh.forEach(s),fl=a(me," indicates a value that should be attended to, while "),_t=r(me,"CODE",{});var wh=i(_t);ml=a(wh,"0"),wh.forEach(s),bl=a(me,` indicates a padded value. This attention mask is
in the dictionary returned by the tokenizer under the key \u201Cattention_mask\u201D:`),me.forEach(s),Gn=d(e),b(Fe.$$.fragment,e),Wn=d(e),_s=r(e,"A",{id:!0}),i(_s).forEach(s),Un=d(e),R=r(e,"H3",{class:!0});var Ba=i(R);ae=r(Ba,"A",{id:!0,class:!0,href:!0});var yh=i(ae);gt=r(yh,"SPAN",{});var $h=i(gt);b(Ne.$$.fragment,$h),$h.forEach(s),yh.forEach(s),_l=d(Ba),kt=r(Ba,"SPAN",{});var Eh=i(kt);gl=a(Eh,"Token Type IDs"),Eh.forEach(s),Ba.forEach(s),Vn=d(e),gs=r(e,"P",{});var jh=i(gs);kl=a(jh,"Some models\u2019 purpose is to do classification on pairs of sentences or question answering."),jh.forEach(s),Xn=d(e),b(Re.$$.fragment,e),Yn=d(e),P=r(e,"P",{});var Fs=i(P);vl=a(Fs,`These require two different sequences to be joined in a single \u201Cinput_ids\u201D entry, which usually is performed with the
help of special tokens, such as the classifier (`),vt=r(Fs,"CODE",{});var qh=i(vt);wl=a(qh,"[CLS]"),qh.forEach(s),yl=a(Fs,") and separator ("),wt=r(Fs,"CODE",{});var Th=i(wt);$l=a(Th,"[SEP]"),Th.forEach(s),El=a(Fs,`) tokens. For example, the BERT
model builds its two sequence input as such:`),Fs.forEach(s),Qn=d(e),b(Oe.$$.fragment,e),Jn=d(e),oe=r(e,"P",{});var Sa=i(oe);jl=a(Sa,"We can use our tokenizer to automatically generate such a sentence by passing the two sequences to "),yt=r(Sa,"CODE",{});var zh=i(yt);ql=a(zh,"tokenizer"),zh.forEach(s),Tl=a(Sa,` as two
arguments (and not a list, like before) like this:`),Sa.forEach(s),Kn=d(e),b(He.$$.fragment,e),Zn=d(e),ks=r(e,"P",{});var xh=i(ks);zl=a(xh,"which will return:"),xh.forEach(s),ea=d(e),b(Ge.$$.fragment,e),sa=d(e),vs=r(e,"P",{});var Ph=i(vs);xl=a(Ph,`This is enough for some models to understand where one sequence ends and where another begins. However, other models,
such as BERT, also deploy token type IDs (also called segment IDs). They are represented as a binary mask identifying
the two types of sequence in the model.`),Ph.forEach(s),ta=d(e),ws=r(e,"P",{});var Ah=i(ws);Pl=a(Ah,"The tokenizer returns this mask as the \u201Ctoken_type_ids\u201D entry:"),Ah.forEach(s),na=d(e),b(We.$$.fragment,e),aa=d(e),A=r(e,"P",{});var Ns=i(A);Al=a(Ns,"The first sequence, the \u201Ccontext\u201D used for the question, has all its tokens represented by a "),$t=r(Ns,"CODE",{});var Ih=i($t);Il=a(Ih,"0"),Ih.forEach(s),Cl=a(Ns,`, whereas the
second sequence, corresponding to the \u201Cquestion\u201D, has all its tokens represented by a `),Et=r(Ns,"CODE",{});var Ch=i(Et);Dl=a(Ch,"1"),Ch.forEach(s),Ml=a(Ns,"."),Ns.forEach(s),oa=d(e),I=r(e,"P",{});var Rs=i(I);Ll=a(Rs,"Some models, like "),ys=r(Rs,"A",{href:!0});var Dh=i(ys);Bl=a(Dh,"XLNetModel"),Dh.forEach(s),Sl=a(Rs," use an additional token represented by a "),jt=r(Rs,"CODE",{});var Mh=i(jt);Fl=a(Mh,"2"),Mh.forEach(s),Nl=a(Rs,"."),Rs.forEach(s),la=d(e),$s=r(e,"A",{id:!0}),i($s).forEach(s),ra=d(e),O=r(e,"H3",{class:!0});var Fa=i(O);le=r(Fa,"A",{id:!0,class:!0,href:!0});var Lh=i(le);qt=r(Lh,"SPAN",{});var Bh=i(qt);b(Ue.$$.fragment,Bh),Bh.forEach(s),Lh.forEach(s),Rl=d(Fa),Tt=r(Fa,"SPAN",{});var Sh=i(Tt);Ol=a(Sh,"Position IDs"),Sh.forEach(s),Fa.forEach(s),ia=d(e),re=r(e,"P",{});var Na=i(re);Hl=a(Na,`Contrary to RNNs that have the position of each token embedded within them, transformers are unaware of the position of
each token. Therefore, the position IDs (`),zt=r(Na,"CODE",{});var Fh=i(zt);Gl=a(Fh,"position_ids"),Fh.forEach(s),Wl=a(Na,`) are used by the model to identify each token\u2019s position in
the list of tokens.`),Na.forEach(s),ha=d(e),ie=r(e,"P",{});var Ra=i(ie);Ul=a(Ra,"They are an optional parameter. If no "),xt=r(Ra,"CODE",{});var Nh=i(xt);Vl=a(Nh,"position_ids"),Nh.forEach(s),Xl=a(Ra,` are passed to the model, the IDs are automatically created as
absolute positional embeddings.`),Ra.forEach(s),pa=d(e),he=r(e,"P",{});var Oa=i(he);Yl=a(Oa,"Absolute positional embeddings are selected in the range "),Pt=r(Oa,"CODE",{});var Rh=i(Pt);Ql=a(Rh,"[0, config.max_position_embeddings - 1]"),Rh.forEach(s),Jl=a(Oa,`. Some models use
other types of positional embeddings, such as sinusoidal position embeddings or relative position embeddings.`),Oa.forEach(s),da=d(e),Es=r(e,"A",{id:!0}),i(Es).forEach(s),ca=d(e),H=r(e,"H3",{class:!0});var Ha=i(H);pe=r(Ha,"A",{id:!0,class:!0,href:!0});var Oh=i(pe);At=r(Oh,"SPAN",{});var Hh=i(At);b(Ve.$$.fragment,Hh),Hh.forEach(s),Oh.forEach(s),Kl=d(Ha),It=r(Ha,"SPAN",{});var Gh=i(It);Zl=a(Gh,"Labels"),Gh.forEach(s),Ha.forEach(s),ua=d(e),js=r(e,"P",{});var Wh=i(js);er=a(Wh,`The labels are an optional argument which can be passed in order for the model to compute the loss itself. These labels
should be the expected prediction of the model: it will use the standard loss in order to compute the loss between its
predictions and the expected value (the label).`),Wh.forEach(s),fa=d(e),qs=r(e,"P",{});var Uh=i(qs);sr=a(Uh,"These labels are different according to the model head, for example:"),Uh.forEach(s),ma=d(e),T=r(e,"UL",{});var be=i(T);G=r(be,"LI",{});var Os=i(G);tr=a(Os,"For sequence classification models (e.g., "),Ts=r(Os,"A",{href:!0});var Vh=i(Ts);nr=a(Vh,"BertForSequenceClassification"),Vh.forEach(s),ar=a(Os,`), the model expects a
tensor of dimension `),Ct=r(Os,"CODE",{});var Xh=i(Ct);or=a(Xh,"(batch_size)"),Xh.forEach(s),lr=a(Os,` with each value of the batch corresponding to the expected label of the
entire sequence.`),Os.forEach(s),rr=d(be),W=r(be,"LI",{});var Hs=i(W);ir=a(Hs,"For token classification models (e.g., "),zs=r(Hs,"A",{href:!0});var Yh=i(zs);hr=a(Yh,"BertForTokenClassification"),Yh.forEach(s),pr=a(Hs,`), the model expects a tensor
of dimension `),Dt=r(Hs,"CODE",{});var Qh=i(Dt);dr=a(Qh,"(batch_size, seq_length)"),Qh.forEach(s),cr=a(Hs,` with each value corresponding to the expected label of each individual
token.`),Hs.forEach(s),ur=d(be),U=r(be,"LI",{});var Gs=i(U);fr=a(Gs,"For masked language modeling (e.g., "),xs=r(Gs,"A",{href:!0});var Jh=i(xs);mr=a(Jh,"BertForMaskedLM"),Jh.forEach(s),br=a(Gs,`), the model expects a tensor of dimension
`),Mt=r(Gs,"CODE",{});var Kh=i(Mt);_r=a(Kh,"(batch_size, seq_length)"),Kh.forEach(s),gr=a(Gs,` with each value corresponding to the expected label of each individual token: the
labels being the token ID for the masked token, and values to be ignored for the rest (usually -100).`),Gs.forEach(s),kr=d(be),$=r(be,"LI",{});var j=i($);vr=a(j,"For sequence to sequence tasks,(e.g., "),Ps=r(j,"A",{href:!0});var Zh=i(Ps);wr=a(Zh,"BartForConditionalGeneration"),Zh.forEach(s),yr=a(j,`,
`),As=r(j,"A",{href:!0});var ep=i(As);$r=a(ep,"MBartForConditionalGeneration"),ep.forEach(s),Er=a(j,"), the model expects a tensor of dimension "),Lt=r(j,"CODE",{});var sp=i(Lt);jr=a(sp,"(batch_size, tgt_seq_length)"),sp.forEach(s),qr=a(j,` with each value corresponding to the target sequences associated with each input sequence. During
training, both `),Bt=r(j,"EM",{});var tp=i(Bt);Tr=a(tp,"BART"),tp.forEach(s),zr=a(j," and "),St=r(j,"EM",{});var np=i(St);xr=a(np,"T5"),np.forEach(s),Pr=a(j," will make the appropriate "),Ft=r(j,"EM",{});var ap=i(Ft);Ar=a(ap,"decoder_input_ids"),ap.forEach(s),Ir=a(j,` and decoder attention masks internally.
They usually do not need to be supplied. This does not apply to models leveraging the Encoder-Decoder framework. See
the documentation of each model for more information on each specific model\u2019s labels.`),j.forEach(s),be.forEach(s),ba=d(e),de=r(e,"P",{});var Ga=i(de);Cr=a(Ga,"The base models (e.g., "),Is=r(Ga,"A",{href:!0});var op=i(Is);Dr=a(op,"BertModel"),op.forEach(s),Mr=a(Ga,`) do not accept labels, as these are the base transformer
models, simply outputting features.`),Ga.forEach(s),_a=d(e),Cs=r(e,"A",{id:!0}),i(Cs).forEach(s),ga=d(e),V=r(e,"H3",{class:!0});var Wa=i(V);ce=r(Wa,"A",{id:!0,class:!0,href:!0});var lp=i(ce);Nt=r(lp,"SPAN",{});var rp=i(Nt);b(Xe.$$.fragment,rp),rp.forEach(s),lp.forEach(s),Lr=d(Wa),Rt=r(Wa,"SPAN",{});var ip=i(Rt);Br=a(ip,"Decoder input IDs"),ip.forEach(s),Wa.forEach(s),ka=d(e),Ds=r(e,"P",{});var hp=i(Ds);Sr=a(hp,`This input is specific to encoder-decoder models, and contains the input IDs that will be fed to the decoder. These
inputs should be used for sequence to sequence tasks, such as translation or summarization, and are usually built in a
way specific to each model.`),hp.forEach(s),va=d(e),z=r(e,"P",{});var _e=i(z);Fr=a(_e,"Most encoder-decoder models (BART, T5) create their "),Ot=r(_e,"CODE",{});var pp=i(Ot);Nr=a(pp,"decoder_input_ids"),pp.forEach(s),Rr=a(_e," on their own from the "),Ht=r(_e,"CODE",{});var dp=i(Ht);Or=a(dp,"labels"),dp.forEach(s),Hr=a(_e,`. In
such models, passing the `),Gt=r(_e,"CODE",{});var cp=i(Gt);Gr=a(cp,"labels"),cp.forEach(s),Wr=a(_e," is the preferred way to handle training."),_e.forEach(s),wa=d(e),Ms=r(e,"P",{});var up=i(Ms);Ur=a(up,"Please check each model\u2019s docs to see how they handle these input IDs for sequence to sequence training."),up.forEach(s),ya=d(e),Ls=r(e,"A",{id:!0}),i(Ls).forEach(s),$a=d(e),X=r(e,"H3",{class:!0});var Ua=i(X);ue=r(Ua,"A",{id:!0,class:!0,href:!0});var fp=i(ue);Wt=r(fp,"SPAN",{});var mp=i(Wt);b(Ye.$$.fragment,mp),mp.forEach(s),fp.forEach(s),Vr=d(Ua),Ut=r(Ua,"SPAN",{});var bp=i(Ut);Xr=a(bp,"Feed Forward Chunking"),bp.forEach(s),Ua.forEach(s),Ea=d(e),fe=r(e,"P",{});var Va=i(fe);Yr=a(Va,`In each residual attention block in transformers the self-attention layer is usually followed by 2 feed forward layers.
The intermediate embedding size of the feed forward layers is often bigger than the hidden size of the model (e.g., for
`),Vt=r(Va,"CODE",{});var _p=i(Vt);Qr=a(_p,"bert-base-uncased"),_p.forEach(s),Jr=a(Va,")."),Va.forEach(s),ja=d(e),w=r(e,"P",{});var y=i(w);Kr=a(y,"For an input of size "),Xt=r(y,"CODE",{});var gp=i(Xt);Zr=a(gp,"[batch_size, sequence_length]"),gp.forEach(s),ei=a(y,`, the memory required to store the intermediate feed forward
embeddings `),Yt=r(y,"CODE",{});var kp=i(Yt);si=a(kp,"[batch_size, sequence_length, config.intermediate_size]"),kp.forEach(s),ti=a(y,` can account for a large fraction of the memory
use. The authors of `),Qe=r(y,"A",{href:!0,rel:!0});var vp=i(Qe);ni=a(vp,"Reformer: The Efficient Transformer"),vp.forEach(s),ai=a(y,` noticed that since the
computation is independent of the `),Qt=r(y,"CODE",{});var wp=i(Qt);oi=a(wp,"sequence_length"),wp.forEach(s),li=a(y,` dimension, it is mathematically equivalent to compute the output
embeddings of both feed forward layers `),Jt=r(y,"CODE",{});var yp=i(Jt);ri=a(yp,"[batch_size, config.hidden_size]_0, ..., [batch_size, config.hidden_size]_n"),yp.forEach(s),ii=a(y,`
individually and concat them afterward to `),Kt=r(y,"CODE",{});var $p=i(Kt);hi=a($p,"[batch_size, sequence_length, config.hidden_size]"),$p.forEach(s),pi=a(y," with "),Zt=r(y,"CODE",{});var Ep=i(Zt);di=a(Ep,"n = sequence_length"),Ep.forEach(s),ci=a(y,`, which trades increased computation time against reduced memory use, but yields a mathematically
`),en=r(y,"STRONG",{});var jp=i(en);ui=a(jp,"equivalent"),jp.forEach(s),fi=a(y," result."),y.forEach(s),qa=d(e),x=r(e,"P",{});var ge=i(x);mi=a(ge,"For models employing the function "),Bs=r(ge,"A",{href:!0});var qp=i(Bs);bi=a(qp,"apply_chunking_to_forward()"),qp.forEach(s),_i=a(ge,", the "),sn=r(ge,"CODE",{});var Tp=i(sn);gi=a(Tp,"chunk_size"),Tp.forEach(s),ki=a(ge,` defines the
number of output embeddings that are computed in parallel and thus defines the trade-off between memory and time
complexity. If `),tn=r(ge,"CODE",{});var zp=i(tn);vi=a(zp,"chunk_size"),zp.forEach(s),wi=a(ge," is set to 0, no feed forward chunking is done."),ge.forEach(s),this.h()},h(){c(D,"name","hf:doc:metadata"),c(D,"content",JSON.stringify(Lp)),c(Y,"id","glossary"),c(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y,"href","#glossary"),c(M,"class","relative group"),c(Q,"id","general-terms"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#general-terms"),c(L,"class","relative group"),c(Je,"href","model_doc/bart"),c(Ke,"href","model_doc/t5"),c(J,"id","model-inputs"),c(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J,"href","#model-inputs"),c(S,"class","relative group"),c(es,"id","input-ids"),c(K,"id","input-ids"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#input-ids"),c(F,"class","relative group"),c(Ee,"href","https://arxiv.org/pdf/1609.08144.pdf"),c(Ee,"rel","nofollow"),c(ze,"href","https://github.com/huggingface/tokenizers"),c(ze,"rel","nofollow"),c(rs,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertModel"),c(is,"id","attention-mask"),c(ne,"id","attention-mask"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#attention-mask"),c(N,"class","relative group"),c(bs,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertTokenizer"),c(_s,"id","token-type-ids"),c(ae,"id","token-type-ids"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#token-type-ids"),c(R,"class","relative group"),c(ys,"href","/docs/transformers/pr_highlight/en/model_doc/xlnet#transformers.XLNetModel"),c($s,"id","position-ids"),c(le,"id","position-ids"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#position-ids"),c(O,"class","relative group"),c(Es,"id","labels"),c(pe,"id","labels"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#labels"),c(H,"class","relative group"),c(Ts,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForSequenceClassification"),c(zs,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForTokenClassification"),c(xs,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertForMaskedLM"),c(Ps,"href","/docs/transformers/pr_highlight/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(As,"href","/docs/transformers/pr_highlight/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Is,"href","/docs/transformers/pr_highlight/en/model_doc/bert#transformers.BertModel"),c(Cs,"id","decoder-input-ids"),c(ce,"id","decoder-input-ids"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#decoder-input-ids"),c(V,"class","relative group"),c(Ls,"id","feed-forward-chunking"),c(ue,"id","feed-forward-chunking"),c(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ue,"href","#feed-forward-chunking"),c(X,"class","relative group"),c(Qe,"href","https://arxiv.org/abs/2001.04451"),c(Qe,"rel","nofollow"),c(Bs,"href","/docs/transformers/pr_highlight/en/internal/modeling_utils#transformers.apply_chunking_to_forward")},m(e,o){t(document.head,D),h(e,nn,o),h(e,M,o),t(M,Y),t(Y,Ws),_(ke,Ws,null),t(M,Xa),t(M,Us),t(Us,Ya),h(e,an,o),h(e,L,o),t(L,Q),t(Q,Vs),_(ve,Vs,null),t(L,Qa),t(L,Xs),t(Xs,Ja),h(e,on,o),h(e,u,o),t(u,Ys),t(Ys,Ka),t(u,Za),t(u,Qs),t(Qs,eo),t(u,so),t(u,Js),t(Js,to),t(u,no),t(u,Ks),t(Ks,ao),t(u,oo),t(u,Zs),t(Zs,lo),t(u,ro),t(u,et),t(et,io),t(u,ho),t(u,st),t(st,po),t(u,co),t(u,tt),t(tt,uo),t(u,fo),t(u,nt),t(nt,mo),t(u,bo),t(u,at),t(at,_o),t(u,go),t(u,ot),t(ot,ko),t(u,vo),t(u,lt),t(lt,wo),t(u,yo),t(u,B),t(B,$o),t(B,Je),t(Je,Eo),t(B,jo),t(B,Ke),t(Ke,qo),t(B,To),t(u,zo),t(u,rt),t(rt,xo),t(u,Po),t(u,it),t(it,Ao),h(e,ln,o),h(e,S,o),t(S,J),t(J,ht),_(we,ht,null),t(S,Io),t(S,pt),t(pt,Co),h(e,rn,o),h(e,Ze,o),t(Ze,Do),h(e,hn,o),h(e,es,o),h(e,pn,o),h(e,F,o),t(F,K),t(K,dt),_(ye,dt,null),t(F,Mo),t(F,ct),t(ct,Lo),h(e,dn,o),h(e,Z,o),t(Z,Bo),t(Z,ut),t(ut,So),t(Z,Fo),h(e,cn,o),_($e,e,o),h(e,un,o),h(e,ee,o),t(ee,No),t(ee,Ee),t(Ee,Ro),t(ee,Oo),h(e,fn,o),_(je,e,o),h(e,mn,o),h(e,ss,o),t(ss,Ho),h(e,bn,o),_(qe,e,o),h(e,_n,o),h(e,ts,o),t(ts,Go),h(e,gn,o),_(Te,e,o),h(e,kn,o),h(e,se,o),t(se,Wo),t(se,ze),t(ze,Uo),t(se,Vo),h(e,vn,o),_(xe,e,o),h(e,wn,o),h(e,ns,o),t(ns,Xo),h(e,yn,o),_(Pe,e,o),h(e,$n,o),h(e,as,o),t(as,Yo),h(e,En,o),h(e,os,o),t(os,Qo),h(e,jn,o),_(Ae,e,o),h(e,qn,o),h(e,ls,o),t(ls,Jo),h(e,Tn,o),_(Ie,e,o),h(e,zn,o),h(e,te,o),t(te,Ko),t(te,rs),t(rs,Zo),t(te,el),h(e,xn,o),h(e,is,o),h(e,Pn,o),h(e,N,o),t(N,ne),t(ne,ft),_(Ce,ft,null),t(N,sl),t(N,mt),t(mt,tl),h(e,An,o),h(e,hs,o),t(hs,nl),h(e,In,o),_(De,e,o),h(e,Cn,o),h(e,ps,o),t(ps,al),h(e,Dn,o),h(e,ds,o),t(ds,ol),h(e,Mn,o),_(Me,e,o),h(e,Ln,o),h(e,cs,o),t(cs,ll),h(e,Bn,o),_(Le,e,o),h(e,Sn,o),h(e,us,o),t(us,rl),h(e,Fn,o),h(e,fs,o),t(fs,il),h(e,Nn,o),_(Be,e,o),h(e,Rn,o),h(e,ms,o),t(ms,hl),h(e,On,o),_(Se,e,o),h(e,Hn,o),h(e,q,o),t(q,pl),t(q,bs),t(bs,dl),t(q,cl),t(q,bt),t(bt,ul),t(q,fl),t(q,_t),t(_t,ml),t(q,bl),h(e,Gn,o),_(Fe,e,o),h(e,Wn,o),h(e,_s,o),h(e,Un,o),h(e,R,o),t(R,ae),t(ae,gt),_(Ne,gt,null),t(R,_l),t(R,kt),t(kt,gl),h(e,Vn,o),h(e,gs,o),t(gs,kl),h(e,Xn,o),_(Re,e,o),h(e,Yn,o),h(e,P,o),t(P,vl),t(P,vt),t(vt,wl),t(P,yl),t(P,wt),t(wt,$l),t(P,El),h(e,Qn,o),_(Oe,e,o),h(e,Jn,o),h(e,oe,o),t(oe,jl),t(oe,yt),t(yt,ql),t(oe,Tl),h(e,Kn,o),_(He,e,o),h(e,Zn,o),h(e,ks,o),t(ks,zl),h(e,ea,o),_(Ge,e,o),h(e,sa,o),h(e,vs,o),t(vs,xl),h(e,ta,o),h(e,ws,o),t(ws,Pl),h(e,na,o),_(We,e,o),h(e,aa,o),h(e,A,o),t(A,Al),t(A,$t),t($t,Il),t(A,Cl),t(A,Et),t(Et,Dl),t(A,Ml),h(e,oa,o),h(e,I,o),t(I,Ll),t(I,ys),t(ys,Bl),t(I,Sl),t(I,jt),t(jt,Fl),t(I,Nl),h(e,la,o),h(e,$s,o),h(e,ra,o),h(e,O,o),t(O,le),t(le,qt),_(Ue,qt,null),t(O,Rl),t(O,Tt),t(Tt,Ol),h(e,ia,o),h(e,re,o),t(re,Hl),t(re,zt),t(zt,Gl),t(re,Wl),h(e,ha,o),h(e,ie,o),t(ie,Ul),t(ie,xt),t(xt,Vl),t(ie,Xl),h(e,pa,o),h(e,he,o),t(he,Yl),t(he,Pt),t(Pt,Ql),t(he,Jl),h(e,da,o),h(e,Es,o),h(e,ca,o),h(e,H,o),t(H,pe),t(pe,At),_(Ve,At,null),t(H,Kl),t(H,It),t(It,Zl),h(e,ua,o),h(e,js,o),t(js,er),h(e,fa,o),h(e,qs,o),t(qs,sr),h(e,ma,o),h(e,T,o),t(T,G),t(G,tr),t(G,Ts),t(Ts,nr),t(G,ar),t(G,Ct),t(Ct,or),t(G,lr),t(T,rr),t(T,W),t(W,ir),t(W,zs),t(zs,hr),t(W,pr),t(W,Dt),t(Dt,dr),t(W,cr),t(T,ur),t(T,U),t(U,fr),t(U,xs),t(xs,mr),t(U,br),t(U,Mt),t(Mt,_r),t(U,gr),t(T,kr),t(T,$),t($,vr),t($,Ps),t(Ps,wr),t($,yr),t($,As),t(As,$r),t($,Er),t($,Lt),t(Lt,jr),t($,qr),t($,Bt),t(Bt,Tr),t($,zr),t($,St),t(St,xr),t($,Pr),t($,Ft),t(Ft,Ar),t($,Ir),h(e,ba,o),h(e,de,o),t(de,Cr),t(de,Is),t(Is,Dr),t(de,Mr),h(e,_a,o),h(e,Cs,o),h(e,ga,o),h(e,V,o),t(V,ce),t(ce,Nt),_(Xe,Nt,null),t(V,Lr),t(V,Rt),t(Rt,Br),h(e,ka,o),h(e,Ds,o),t(Ds,Sr),h(e,va,o),h(e,z,o),t(z,Fr),t(z,Ot),t(Ot,Nr),t(z,Rr),t(z,Ht),t(Ht,Or),t(z,Hr),t(z,Gt),t(Gt,Gr),t(z,Wr),h(e,wa,o),h(e,Ms,o),t(Ms,Ur),h(e,ya,o),h(e,Ls,o),h(e,$a,o),h(e,X,o),t(X,ue),t(ue,Wt),_(Ye,Wt,null),t(X,Vr),t(X,Ut),t(Ut,Xr),h(e,Ea,o),h(e,fe,o),t(fe,Yr),t(fe,Vt),t(Vt,Qr),t(fe,Jr),h(e,ja,o),h(e,w,o),t(w,Kr),t(w,Xt),t(Xt,Zr),t(w,ei),t(w,Yt),t(Yt,si),t(w,ti),t(w,Qe),t(Qe,ni),t(w,ai),t(w,Qt),t(Qt,oi),t(w,li),t(w,Jt),t(Jt,ri),t(w,ii),t(w,Kt),t(Kt,hi),t(w,pi),t(w,Zt),t(Zt,di),t(w,ci),t(w,en),t(en,ui),t(w,fi),h(e,qa,o),h(e,x,o),t(x,mi),t(x,Bs),t(Bs,bi),t(x,_i),t(x,sn),t(sn,gi),t(x,ki),t(x,tn),t(tn,vi),t(x,wi),Ta=!0},p:Cp,i(e){Ta||(g(ke.$$.fragment,e),g(ve.$$.fragment,e),g(we.$$.fragment,e),g(ye.$$.fragment,e),g($e.$$.fragment,e),g(je.$$.fragment,e),g(qe.$$.fragment,e),g(Te.$$.fragment,e),g(xe.$$.fragment,e),g(Pe.$$.fragment,e),g(Ae.$$.fragment,e),g(Ie.$$.fragment,e),g(Ce.$$.fragment,e),g(De.$$.fragment,e),g(Me.$$.fragment,e),g(Le.$$.fragment,e),g(Be.$$.fragment,e),g(Se.$$.fragment,e),g(Fe.$$.fragment,e),g(Ne.$$.fragment,e),g(Re.$$.fragment,e),g(Oe.$$.fragment,e),g(He.$$.fragment,e),g(Ge.$$.fragment,e),g(We.$$.fragment,e),g(Ue.$$.fragment,e),g(Ve.$$.fragment,e),g(Xe.$$.fragment,e),g(Ye.$$.fragment,e),Ta=!0)},o(e){k(ke.$$.fragment,e),k(ve.$$.fragment,e),k(we.$$.fragment,e),k(ye.$$.fragment,e),k($e.$$.fragment,e),k(je.$$.fragment,e),k(qe.$$.fragment,e),k(Te.$$.fragment,e),k(xe.$$.fragment,e),k(Pe.$$.fragment,e),k(Ae.$$.fragment,e),k(Ie.$$.fragment,e),k(Ce.$$.fragment,e),k(De.$$.fragment,e),k(Me.$$.fragment,e),k(Le.$$.fragment,e),k(Be.$$.fragment,e),k(Se.$$.fragment,e),k(Fe.$$.fragment,e),k(Ne.$$.fragment,e),k(Re.$$.fragment,e),k(Oe.$$.fragment,e),k(He.$$.fragment,e),k(Ge.$$.fragment,e),k(We.$$.fragment,e),k(Ue.$$.fragment,e),k(Ve.$$.fragment,e),k(Xe.$$.fragment,e),k(Ye.$$.fragment,e),Ta=!1},d(e){s(D),e&&s(nn),e&&s(M),v(ke),e&&s(an),e&&s(L),v(ve),e&&s(on),e&&s(u),e&&s(ln),e&&s(S),v(we),e&&s(rn),e&&s(Ze),e&&s(hn),e&&s(es),e&&s(pn),e&&s(F),v(ye),e&&s(dn),e&&s(Z),e&&s(cn),v($e,e),e&&s(un),e&&s(ee),e&&s(fn),v(je,e),e&&s(mn),e&&s(ss),e&&s(bn),v(qe,e),e&&s(_n),e&&s(ts),e&&s(gn),v(Te,e),e&&s(kn),e&&s(se),e&&s(vn),v(xe,e),e&&s(wn),e&&s(ns),e&&s(yn),v(Pe,e),e&&s($n),e&&s(as),e&&s(En),e&&s(os),e&&s(jn),v(Ae,e),e&&s(qn),e&&s(ls),e&&s(Tn),v(Ie,e),e&&s(zn),e&&s(te),e&&s(xn),e&&s(is),e&&s(Pn),e&&s(N),v(Ce),e&&s(An),e&&s(hs),e&&s(In),v(De,e),e&&s(Cn),e&&s(ps),e&&s(Dn),e&&s(ds),e&&s(Mn),v(Me,e),e&&s(Ln),e&&s(cs),e&&s(Bn),v(Le,e),e&&s(Sn),e&&s(us),e&&s(Fn),e&&s(fs),e&&s(Nn),v(Be,e),e&&s(Rn),e&&s(ms),e&&s(On),v(Se,e),e&&s(Hn),e&&s(q),e&&s(Gn),v(Fe,e),e&&s(Wn),e&&s(_s),e&&s(Un),e&&s(R),v(Ne),e&&s(Vn),e&&s(gs),e&&s(Xn),v(Re,e),e&&s(Yn),e&&s(P),e&&s(Qn),v(Oe,e),e&&s(Jn),e&&s(oe),e&&s(Kn),v(He,e),e&&s(Zn),e&&s(ks),e&&s(ea),v(Ge,e),e&&s(sa),e&&s(vs),e&&s(ta),e&&s(ws),e&&s(na),v(We,e),e&&s(aa),e&&s(A),e&&s(oa),e&&s(I),e&&s(la),e&&s($s),e&&s(ra),e&&s(O),v(Ue),e&&s(ia),e&&s(re),e&&s(ha),e&&s(ie),e&&s(pa),e&&s(he),e&&s(da),e&&s(Es),e&&s(ca),e&&s(H),v(Ve),e&&s(ua),e&&s(js),e&&s(fa),e&&s(qs),e&&s(ma),e&&s(T),e&&s(ba),e&&s(de),e&&s(_a),e&&s(Cs),e&&s(ga),e&&s(V),v(Xe),e&&s(ka),e&&s(Ds),e&&s(va),e&&s(z),e&&s(wa),e&&s(Ms),e&&s(ya),e&&s(Ls),e&&s($a),e&&s(X),v(Ye),e&&s(Ea),e&&s(fe),e&&s(ja),e&&s(w),e&&s(qa),e&&s(x)}}}const Lp={local:"glossary",sections:[{local:"general-terms",title:"General terms"},{local:"model-inputs",sections:[{local:"input-ids",title:"Input IDs"},{local:"attention-mask",title:"Attention mask"},{local:"token-type-ids",title:"Token Type IDs"},{local:"position-ids",title:"Position IDs"},{local:"labels",title:"Labels"},{local:"decoder-input-ids",title:"Decoder input IDs"},{local:"feed-forward-chunking",title:"Feed Forward Chunking"}],title:"Model inputs"}],title:"Glossary"};function Bp($i){return Dp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Op extends xp{constructor(D){super();Pp(this,D,Bp,Mp,Ap,{})}}export{Op as default,Lp as metadata};
