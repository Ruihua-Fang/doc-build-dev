import{S as pFt,i as _Ft,s as uFt,e as a,k as l,w as f,t as o,M as bFt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-6b77c823.js";import{T as wxr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function vFt(Ii){let J,$e,de,pe,io,fe,Me,Vo,ji,If,fa,Ni,Di,o3,jf,Be,co,qi,On,r3,Gn,Xn,t3,Oi,Vn,a3,Gi,Nf,qa;return{c(){J=a("p"),$e=o("If your "),de=a("code"),pe=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Me=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),Di=o('"new-model"'),o3=o(")."),jf=l(),Be=a("p"),co=o("Likewise, if your "),qi=a("code"),On=o("NewModel"),r3=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),t3=o(`, make sure its
`),Oi=a("code"),Vn=o("config_class"),a3=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Nf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var _e=s(J);$e=r(_e,"If your "),de=n(_e,"CODE",{});var H8=s(de);pe=r(H8,"NewModelConfig"),H8.forEach(t),io=r(_e," is a subclass of "),fe=n(_e,"CODE",{});var Xi=s(fe);Me=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(_e,`, make sure its
`),ji=n(_e,"CODE",{});var U8=s(ji);If=r(U8,"model_type"),U8.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Ni=n(_e,"CODE",{});var J8=s(Ni);Di=r(J8,'"new-model"'),J8.forEach(t),o3=r(_e,")."),_e.forEach(t),jf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Oa=s(qi);On=r(Oa,"NewModel"),Oa.forEach(t),r3=r(zo," is a subclass of "),Gn=n(zo,"A",{href:!0});var Y8=s(Gn);Xn=r(Y8,"PreTrainedModel"),Y8.forEach(t),t3=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Df=s(Oi);Vn=r(Df,"config_class"),Df.forEach(t),a3=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var K8=s(Gi);Nf=r(K8,"NewModelConfig"),K8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(Gn,"href","/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,J,_e),e(J,$e),e(J,de),e(de,pe),e(J,io),e(J,fe),e(fe,Me),e(J,Vo),e(J,ji),e(ji,If),e(J,fa),e(J,Ni),e(Ni,Di),e(J,o3),b(fo,jf,_e),b(fo,Be,_e),e(Be,co),e(Be,qi),e(qi,On),e(Be,r3),e(Be,Gn),e(Gn,Xn),e(Be,t3),e(Be,Oi),e(Oi,Vn),e(Be,a3),e(Be,Gi),e(Gi,Nf),e(Be,qa)},d(fo){fo&&t(J),fo&&t(jf),fo&&t(Be)}}}function TFt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function FFt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function CFt(Ii){let J,$e,de,pe,io,fe,Me,Vo,ji,If,fa,Ni,Di,o3,jf,Be,co,qi,On,r3,Gn,Xn,t3,Oi,Vn,a3,Gi,Nf,qa,fo,_e,H8,Xi,U8,J8,zo,Oa,Y8,Df,K8,KPe,Nxe,Vi,qf,xQ,n3,ZPe,kQ,e$e,Dxe,zn,o$e,RQ,r$e,t$e,SQ,a$e,n$e,qxe,s3,Oxe,Z8,s$e,Gxe,Of,Xxe,zi,Gf,PQ,l3,l$e,$Q,i$e,Vxe,Wo,i3,d$e,d3,c$e,e9,f$e,m$e,g$e,c3,h$e,IQ,p$e,_$e,u$e,mo,f3,b$e,jQ,v$e,T$e,Wi,F$e,NQ,C$e,M$e,DQ,E$e,y$e,w$e,v,Xf,qQ,A$e,L$e,o9,B$e,x$e,k$e,Vf,OQ,R$e,S$e,r9,P$e,$$e,I$e,zf,GQ,j$e,N$e,t9,D$e,q$e,O$e,Wf,XQ,G$e,X$e,a9,V$e,z$e,W$e,Qf,VQ,Q$e,H$e,n9,U$e,J$e,Y$e,Hf,zQ,K$e,Z$e,s9,eIe,oIe,rIe,Uf,WQ,tIe,aIe,l9,nIe,sIe,lIe,Jf,QQ,iIe,dIe,i9,cIe,fIe,mIe,Yf,HQ,gIe,hIe,d9,pIe,_Ie,uIe,Kf,UQ,bIe,vIe,c9,TIe,FIe,CIe,Zf,JQ,MIe,EIe,f9,yIe,wIe,AIe,em,YQ,LIe,BIe,m9,xIe,kIe,RIe,om,KQ,SIe,PIe,g9,$Ie,IIe,jIe,rm,ZQ,NIe,DIe,h9,qIe,OIe,GIe,tm,eH,XIe,VIe,p9,zIe,WIe,QIe,am,oH,HIe,UIe,_9,JIe,YIe,KIe,nm,rH,ZIe,eje,u9,oje,rje,tje,sm,tH,aje,nje,b9,sje,lje,ije,lm,aH,dje,cje,v9,fje,mje,gje,im,nH,hje,pje,T9,_je,uje,bje,dm,sH,vje,Tje,F9,Fje,Cje,Mje,cm,lH,Eje,yje,C9,wje,Aje,Lje,fm,iH,Bje,xje,M9,kje,Rje,Sje,mm,dH,Pje,$je,E9,Ije,jje,Nje,gm,cH,Dje,qje,y9,Oje,Gje,Xje,hm,fH,Vje,zje,w9,Wje,Qje,Hje,pm,mH,Uje,Jje,A9,Yje,Kje,Zje,_m,gH,eNe,oNe,L9,rNe,tNe,aNe,um,hH,nNe,sNe,B9,lNe,iNe,dNe,bm,pH,cNe,fNe,x9,mNe,gNe,hNe,vm,_H,pNe,_Ne,k9,uNe,bNe,vNe,Tm,uH,TNe,FNe,R9,CNe,MNe,ENe,Fm,bH,yNe,wNe,S9,ANe,LNe,BNe,Cm,vH,xNe,kNe,P9,RNe,SNe,PNe,Mm,TH,$Ne,INe,$9,jNe,NNe,DNe,Em,FH,qNe,ONe,I9,GNe,XNe,VNe,ym,CH,zNe,WNe,j9,QNe,HNe,UNe,wm,MH,JNe,YNe,N9,KNe,ZNe,eDe,Am,EH,oDe,rDe,D9,tDe,aDe,nDe,Lm,yH,sDe,lDe,q9,iDe,dDe,cDe,Bm,wH,fDe,mDe,O9,gDe,hDe,pDe,xm,AH,_De,uDe,G9,bDe,vDe,TDe,km,LH,FDe,CDe,X9,MDe,EDe,yDe,Rm,BH,wDe,ADe,V9,LDe,BDe,xDe,Sm,xH,kDe,RDe,z9,SDe,PDe,$De,Pm,kH,IDe,jDe,W9,NDe,DDe,qDe,$m,RH,ODe,GDe,Q9,XDe,VDe,zDe,Im,SH,WDe,QDe,H9,HDe,UDe,JDe,jm,PH,YDe,KDe,U9,ZDe,eqe,oqe,Nm,$H,rqe,tqe,J9,aqe,nqe,sqe,Dm,IH,lqe,iqe,Y9,dqe,cqe,fqe,qm,jH,mqe,gqe,K9,hqe,pqe,_qe,Om,NH,uqe,bqe,Z9,vqe,Tqe,Fqe,Gm,DH,Cqe,Mqe,eB,Eqe,yqe,wqe,Xm,qH,Aqe,Lqe,oB,Bqe,xqe,kqe,Vm,OH,Rqe,Sqe,rB,Pqe,$qe,Iqe,zm,GH,jqe,Nqe,tB,Dqe,qqe,Oqe,Wm,XH,Gqe,Xqe,aB,Vqe,zqe,Wqe,Qm,VH,Qqe,Hqe,nB,Uqe,Jqe,Yqe,Hm,zH,Kqe,Zqe,sB,eOe,oOe,rOe,Um,WH,tOe,aOe,lB,nOe,sOe,lOe,Jm,QH,iOe,dOe,iB,cOe,fOe,mOe,Ym,HH,gOe,hOe,dB,pOe,_Oe,uOe,Km,UH,bOe,vOe,cB,TOe,FOe,COe,Zm,JH,MOe,EOe,fB,yOe,wOe,AOe,eg,YH,LOe,BOe,mB,xOe,kOe,ROe,og,KH,SOe,POe,gB,$Oe,IOe,jOe,rg,ZH,NOe,DOe,hB,qOe,OOe,GOe,tg,eU,XOe,VOe,pB,zOe,WOe,QOe,ag,oU,HOe,UOe,_B,JOe,YOe,KOe,ng,rU,ZOe,eGe,uB,oGe,rGe,tGe,sg,tU,aGe,nGe,bB,sGe,lGe,iGe,lg,aU,dGe,cGe,vB,fGe,mGe,gGe,ig,nU,hGe,pGe,TB,_Ge,uGe,bGe,dg,sU,vGe,TGe,FB,FGe,CGe,MGe,cg,lU,EGe,yGe,CB,wGe,AGe,LGe,fg,iU,BGe,xGe,MB,kGe,RGe,SGe,mg,dU,PGe,$Ge,EB,IGe,jGe,NGe,gg,cU,DGe,qGe,yB,OGe,GGe,XGe,hg,fU,VGe,zGe,wB,WGe,QGe,HGe,pg,mU,UGe,JGe,AB,YGe,KGe,ZGe,_g,gU,eXe,oXe,LB,rXe,tXe,aXe,ug,hU,nXe,sXe,BB,lXe,iXe,dXe,bg,pU,cXe,fXe,xB,mXe,gXe,hXe,vg,_U,pXe,_Xe,kB,uXe,bXe,vXe,Tg,uU,TXe,FXe,RB,CXe,MXe,EXe,Fg,bU,yXe,wXe,SB,AXe,LXe,BXe,Cg,vU,xXe,kXe,PB,RXe,SXe,PXe,Mg,TU,$Xe,IXe,$B,jXe,NXe,DXe,Eg,FU,qXe,OXe,IB,GXe,XXe,VXe,yg,CU,zXe,WXe,jB,QXe,HXe,UXe,wg,MU,JXe,YXe,NB,KXe,ZXe,eVe,Ag,EU,oVe,rVe,DB,tVe,aVe,nVe,Lg,yU,sVe,lVe,qB,iVe,dVe,cVe,Bg,wU,fVe,mVe,OB,gVe,hVe,pVe,xg,AU,_Ve,uVe,GB,bVe,vVe,TVe,LU,FVe,CVe,m3,MVe,kg,g3,EVe,BU,yVe,zxe,Qi,Rg,xU,h3,wVe,kU,AVe,Wxe,Qo,p3,LVe,_3,BVe,XB,xVe,kVe,RVe,u3,SVe,RU,PVe,$Ve,IVe,go,b3,jVe,SU,NVe,DVe,Ga,qVe,PU,OVe,GVe,$U,XVe,VVe,IU,zVe,WVe,QVe,E,Wn,jU,HVe,UVe,VB,JVe,YVe,zB,KVe,ZVe,eze,Qn,NU,oze,rze,WB,tze,aze,QB,nze,sze,lze,Hn,DU,ize,dze,HB,cze,fze,UB,mze,gze,hze,Sg,qU,pze,_ze,JB,uze,bze,vze,Un,OU,Tze,Fze,YB,Cze,Mze,KB,Eze,yze,wze,Pg,GU,Aze,Lze,ZB,Bze,xze,kze,$g,XU,Rze,Sze,ex,Pze,$ze,Ize,Ig,VU,jze,Nze,ox,Dze,qze,Oze,Jn,zU,Gze,Xze,rx,Vze,zze,tx,Wze,Qze,Hze,Yn,WU,Uze,Jze,ax,Yze,Kze,nx,Zze,eWe,oWe,Kn,QU,rWe,tWe,sx,aWe,nWe,lx,sWe,lWe,iWe,jg,HU,dWe,cWe,ix,fWe,mWe,gWe,Ng,UU,hWe,pWe,dx,_We,uWe,bWe,Zn,JU,vWe,TWe,cx,FWe,CWe,fx,MWe,EWe,yWe,Dg,YU,wWe,AWe,mx,LWe,BWe,xWe,es,KU,kWe,RWe,gx,SWe,PWe,hx,$We,IWe,jWe,os,ZU,NWe,DWe,px,qWe,OWe,_x,GWe,XWe,VWe,rs,eJ,zWe,WWe,ux,QWe,HWe,oJ,UWe,JWe,YWe,qg,rJ,KWe,ZWe,bx,eQe,oQe,rQe,ts,tJ,tQe,aQe,vx,nQe,sQe,Tx,lQe,iQe,dQe,Og,aJ,cQe,fQe,Fx,mQe,gQe,hQe,as,nJ,pQe,_Qe,Cx,uQe,bQe,Mx,vQe,TQe,FQe,ns,sJ,CQe,MQe,Ex,EQe,yQe,yx,wQe,AQe,LQe,ss,lJ,BQe,xQe,wx,kQe,RQe,Ax,SQe,PQe,$Qe,Gg,iJ,IQe,jQe,Lx,NQe,DQe,qQe,ls,dJ,OQe,GQe,Bx,XQe,VQe,xx,zQe,WQe,QQe,Xg,cJ,HQe,UQe,kx,JQe,YQe,KQe,is,fJ,ZQe,eHe,Rx,oHe,rHe,Sx,tHe,aHe,nHe,ds,mJ,sHe,lHe,Px,iHe,dHe,$x,cHe,fHe,mHe,cs,gJ,gHe,hHe,Ix,pHe,_He,jx,uHe,bHe,vHe,fs,hJ,THe,FHe,Nx,CHe,MHe,Dx,EHe,yHe,wHe,Vg,pJ,AHe,LHe,qx,BHe,xHe,kHe,ms,_J,RHe,SHe,Ox,PHe,$He,Gx,IHe,jHe,NHe,gs,uJ,DHe,qHe,Xx,OHe,GHe,Vx,XHe,VHe,zHe,hs,bJ,WHe,QHe,zx,HHe,UHe,Wx,JHe,YHe,KHe,ps,vJ,ZHe,eUe,Qx,oUe,rUe,Hx,tUe,aUe,nUe,_s,TJ,sUe,lUe,Ux,iUe,dUe,Jx,cUe,fUe,mUe,us,FJ,gUe,hUe,Yx,pUe,_Ue,Kx,uUe,bUe,vUe,zg,CJ,TUe,FUe,Zx,CUe,MUe,EUe,bs,MJ,yUe,wUe,ek,AUe,LUe,ok,BUe,xUe,kUe,Wg,EJ,RUe,SUe,rk,PUe,$Ue,IUe,Qg,yJ,jUe,NUe,tk,DUe,qUe,OUe,vs,wJ,GUe,XUe,ak,VUe,zUe,nk,WUe,QUe,HUe,Ts,AJ,UUe,JUe,sk,YUe,KUe,lk,ZUe,eJe,oJe,Hg,LJ,rJe,tJe,ik,aJe,nJe,sJe,Fs,BJ,lJe,iJe,dk,dJe,cJe,ck,fJe,mJe,gJe,Cs,xJ,hJe,pJe,fk,_Je,uJe,mk,bJe,vJe,TJe,Ms,kJ,FJe,CJe,gk,MJe,EJe,hk,yJe,wJe,AJe,Es,RJ,LJe,BJe,pk,xJe,kJe,_k,RJe,SJe,PJe,ys,SJ,$Je,IJe,uk,jJe,NJe,bk,DJe,qJe,OJe,Ug,PJ,GJe,XJe,vk,VJe,zJe,WJe,Jg,$J,QJe,HJe,Tk,UJe,JJe,YJe,Yg,IJ,KJe,ZJe,Fk,eYe,oYe,rYe,Kg,jJ,tYe,aYe,Ck,nYe,sYe,lYe,ws,NJ,iYe,dYe,Mk,cYe,fYe,Ek,mYe,gYe,hYe,Zg,DJ,pYe,_Ye,yk,uYe,bYe,vYe,As,qJ,TYe,FYe,wk,CYe,MYe,Ak,EYe,yYe,wYe,Ls,OJ,AYe,LYe,Lk,BYe,xYe,Bk,kYe,RYe,SYe,Bs,GJ,PYe,$Ye,xk,IYe,jYe,kk,NYe,DYe,qYe,xs,XJ,OYe,GYe,Rk,XYe,VYe,Sk,zYe,WYe,QYe,ks,VJ,HYe,UYe,Pk,JYe,YYe,$k,KYe,ZYe,eKe,Rs,zJ,oKe,rKe,Ik,tKe,aKe,jk,nKe,sKe,lKe,eh,WJ,iKe,dKe,Nk,cKe,fKe,mKe,oh,QJ,gKe,hKe,Dk,pKe,_Ke,uKe,Ss,HJ,bKe,vKe,qk,TKe,FKe,Ok,CKe,MKe,EKe,Ps,UJ,yKe,wKe,Gk,AKe,LKe,Xk,BKe,xKe,kKe,$s,JJ,RKe,SKe,Vk,PKe,$Ke,zk,IKe,jKe,NKe,rh,YJ,DKe,qKe,Wk,OKe,GKe,XKe,th,KJ,VKe,zKe,Qk,WKe,QKe,HKe,ah,ZJ,UKe,JKe,Hk,YKe,KKe,ZKe,nh,eY,eZe,oZe,Uk,rZe,tZe,aZe,Is,oY,nZe,sZe,Jk,lZe,iZe,Yk,dZe,cZe,fZe,sh,rY,mZe,gZe,Kk,hZe,pZe,_Ze,lh,tY,uZe,bZe,Zk,vZe,TZe,FZe,js,aY,CZe,MZe,eR,EZe,yZe,oR,wZe,AZe,LZe,Ns,nY,BZe,xZe,rR,kZe,RZe,tR,SZe,PZe,$Ze,sY,IZe,jZe,v3,NZe,ih,T3,DZe,lY,qZe,Qxe,Hi,dh,iY,F3,OZe,dY,GZe,Hxe,Ho,C3,XZe,M3,VZe,aR,zZe,WZe,QZe,E3,HZe,cY,UZe,JZe,YZe,Ie,y3,KZe,fY,ZZe,eeo,Xa,oeo,mY,reo,teo,gY,aeo,neo,hY,seo,leo,ieo,re,ch,pY,deo,ceo,nR,feo,meo,geo,fh,_Y,heo,peo,sR,_eo,ueo,beo,mh,uY,veo,Teo,lR,Feo,Ceo,Meo,gh,bY,Eeo,yeo,iR,weo,Aeo,Leo,hh,vY,Beo,xeo,dR,keo,Reo,Seo,ph,TY,Peo,$eo,cR,Ieo,jeo,Neo,_h,FY,Deo,qeo,fR,Oeo,Geo,Xeo,uh,CY,Veo,zeo,mR,Weo,Qeo,Heo,bh,MY,Ueo,Jeo,gR,Yeo,Keo,Zeo,vh,EY,eoo,ooo,hR,roo,too,aoo,Th,yY,noo,soo,pR,loo,ioo,doo,Fh,wY,coo,foo,_R,moo,goo,hoo,Ch,AY,poo,_oo,uR,uoo,boo,voo,Mh,LY,Too,Foo,bR,Coo,Moo,Eoo,Eh,BY,yoo,woo,vR,Aoo,Loo,Boo,yh,xY,xoo,koo,TR,Roo,Soo,Poo,wh,kY,$oo,Ioo,FR,joo,Noo,Doo,Ah,RY,qoo,Ooo,CR,Goo,Xoo,Voo,Lh,zoo,SY,Woo,Qoo,w3,Hoo,Bh,A3,Uoo,PY,Joo,Uxe,Ui,xh,$Y,L3,Yoo,IY,Koo,Jxe,Uo,B3,Zoo,x3,ero,MR,oro,rro,tro,k3,aro,jY,nro,sro,lro,je,R3,iro,NY,dro,cro,Ji,fro,DY,mro,gro,qY,hro,pro,_ro,xe,kh,OY,uro,bro,ER,vro,Tro,Fro,Rh,GY,Cro,Mro,yR,Ero,yro,wro,Sh,XY,Aro,Lro,wR,Bro,xro,kro,Ph,VY,Rro,Sro,AR,Pro,$ro,Iro,$h,zY,jro,Nro,LR,Dro,qro,Oro,Ih,WY,Gro,Xro,BR,Vro,zro,Wro,jh,QY,Qro,Hro,xR,Uro,Jro,Yro,Nh,HY,Kro,Zro,kR,eto,oto,rto,Dh,tto,UY,ato,nto,S3,sto,qh,P3,lto,JY,ito,Yxe,Yi,Oh,YY,$3,dto,KY,cto,Kxe,Jo,I3,fto,Ki,mto,ZY,gto,hto,eK,pto,_to,uto,j3,bto,oK,vto,Tto,Fto,Vr,N3,Cto,rK,Mto,Eto,Zi,yto,tK,wto,Ato,aK,Lto,Bto,xto,nK,kto,Rto,D3,Sto,Ne,q3,Pto,sK,$to,Ito,Va,jto,lK,Nto,Dto,iK,qto,Oto,dK,Gto,Xto,Vto,F,Gh,cK,zto,Wto,RR,Qto,Hto,Uto,Xh,fK,Jto,Yto,SR,Kto,Zto,eao,Vh,mK,oao,rao,PR,tao,aao,nao,zh,gK,sao,lao,$R,iao,dao,cao,Wh,hK,fao,mao,IR,gao,hao,pao,Qh,pK,_ao,uao,jR,bao,vao,Tao,Hh,_K,Fao,Cao,NR,Mao,Eao,yao,Uh,uK,wao,Aao,DR,Lao,Bao,xao,Jh,bK,kao,Rao,qR,Sao,Pao,$ao,Yh,vK,Iao,jao,OR,Nao,Dao,qao,Kh,TK,Oao,Gao,GR,Xao,Vao,zao,Zh,FK,Wao,Qao,XR,Hao,Uao,Jao,ep,CK,Yao,Kao,VR,Zao,eno,ono,op,MK,rno,tno,zR,ano,nno,sno,rp,EK,lno,ino,WR,dno,cno,fno,tp,yK,mno,gno,QR,hno,pno,_no,ap,wK,uno,bno,HR,vno,Tno,Fno,np,AK,Cno,Mno,UR,Eno,yno,wno,sp,LK,Ano,Lno,JR,Bno,xno,kno,lp,BK,Rno,Sno,YR,Pno,$no,Ino,ip,xK,jno,Nno,KR,Dno,qno,Ono,dp,kK,Gno,Xno,ZR,Vno,zno,Wno,cp,RK,Qno,Hno,eS,Uno,Jno,Yno,fp,SK,Kno,Zno,oS,eso,oso,rso,mp,PK,tso,aso,rS,nso,sso,lso,gp,$K,iso,dso,tS,cso,fso,mso,hp,IK,gso,hso,aS,pso,_so,uso,Ds,jK,bso,vso,nS,Tso,Fso,sS,Cso,Mso,Eso,pp,NK,yso,wso,lS,Aso,Lso,Bso,_p,DK,xso,kso,iS,Rso,Sso,Pso,up,qK,$so,Iso,dS,jso,Nso,Dso,bp,OK,qso,Oso,cS,Gso,Xso,Vso,vp,GK,zso,Wso,fS,Qso,Hso,Uso,Tp,XK,Jso,Yso,mS,Kso,Zso,elo,Fp,VK,olo,rlo,gS,tlo,alo,nlo,Cp,zK,slo,llo,hS,ilo,dlo,clo,Mp,WK,flo,mlo,pS,glo,hlo,plo,Ep,QK,_lo,ulo,_S,blo,vlo,Tlo,yp,HK,Flo,Clo,uS,Mlo,Elo,ylo,wp,UK,wlo,Alo,bS,Llo,Blo,xlo,Ap,JK,klo,Rlo,vS,Slo,Plo,$lo,Lp,YK,Ilo,jlo,TS,Nlo,Dlo,qlo,Bp,KK,Olo,Glo,FS,Xlo,Vlo,zlo,xp,ZK,Wlo,Qlo,CS,Hlo,Ulo,Jlo,kp,eZ,Ylo,Klo,MS,Zlo,eio,oio,Rp,oZ,rio,tio,ES,aio,nio,sio,Sp,rZ,lio,iio,yS,dio,cio,fio,Pp,tZ,mio,gio,wS,hio,pio,_io,$p,aZ,uio,bio,AS,vio,Tio,Fio,Ip,nZ,Cio,Mio,LS,Eio,yio,wio,jp,sZ,Aio,Lio,BS,Bio,xio,kio,Np,lZ,Rio,Sio,xS,Pio,$io,Iio,Dp,iZ,jio,Nio,kS,Dio,qio,Oio,qp,dZ,Gio,Xio,RS,Vio,zio,Wio,Op,cZ,Qio,Hio,SS,Uio,Jio,Yio,Gp,fZ,Kio,Zio,PS,edo,odo,rdo,Xp,mZ,tdo,ado,$S,ndo,sdo,ldo,Vp,gZ,ido,ddo,IS,cdo,fdo,mdo,zp,hZ,gdo,hdo,jS,pdo,_do,udo,Wp,pZ,bdo,vdo,NS,Tdo,Fdo,Cdo,Qp,_Z,Mdo,Edo,DS,ydo,wdo,Ado,Hp,uZ,Ldo,Bdo,qS,xdo,kdo,Rdo,Up,bZ,Sdo,Pdo,OS,$do,Ido,jdo,Jp,vZ,Ndo,Ddo,GS,qdo,Odo,Gdo,Yp,TZ,Xdo,Vdo,XS,zdo,Wdo,Qdo,Kp,FZ,Hdo,Udo,VS,Jdo,Ydo,Kdo,Zp,CZ,Zdo,eco,zS,oco,rco,tco,e_,MZ,aco,nco,WS,sco,lco,ico,o_,EZ,dco,cco,QS,fco,mco,gco,r_,yZ,hco,pco,HS,_co,uco,bco,t_,wZ,vco,Tco,US,Fco,Cco,Mco,a_,AZ,Eco,yco,JS,wco,Aco,Lco,n_,LZ,Bco,xco,YS,kco,Rco,Sco,s_,BZ,Pco,$co,KS,Ico,jco,Nco,l_,xZ,Dco,qco,ZS,Oco,Gco,Xco,i_,kZ,Vco,zco,eP,Wco,Qco,Hco,d_,RZ,Uco,Jco,oP,Yco,Kco,Zco,c_,SZ,efo,ofo,rP,rfo,tfo,afo,f_,PZ,nfo,sfo,tP,lfo,ifo,dfo,m_,$Z,cfo,ffo,aP,mfo,gfo,hfo,g_,IZ,pfo,_fo,nP,ufo,bfo,vfo,h_,jZ,Tfo,Ffo,sP,Cfo,Mfo,Efo,p_,NZ,yfo,wfo,lP,Afo,Lfo,Bfo,__,DZ,xfo,kfo,iP,Rfo,Sfo,Pfo,u_,qZ,$fo,Ifo,dP,jfo,Nfo,Dfo,b_,OZ,qfo,Ofo,cP,Gfo,Xfo,Vfo,v_,GZ,zfo,Wfo,fP,Qfo,Hfo,Ufo,T_,XZ,Jfo,Yfo,mP,Kfo,Zfo,emo,F_,VZ,omo,rmo,gP,tmo,amo,nmo,C_,smo,zZ,lmo,imo,WZ,dmo,cmo,QZ,fmo,mmo,O3,Zxe,ed,M_,HZ,G3,gmo,UZ,hmo,eke,Yo,X3,pmo,od,_mo,JZ,umo,bmo,YZ,vmo,Tmo,Fmo,V3,Cmo,KZ,Mmo,Emo,ymo,zr,z3,wmo,ZZ,Amo,Lmo,rd,Bmo,eee,xmo,kmo,oee,Rmo,Smo,Pmo,ree,$mo,Imo,W3,jmo,De,Q3,Nmo,tee,Dmo,qmo,za,Omo,aee,Gmo,Xmo,nee,Vmo,zmo,see,Wmo,Qmo,Hmo,k,E_,lee,Umo,Jmo,hP,Ymo,Kmo,Zmo,y_,iee,ego,ogo,pP,rgo,tgo,ago,w_,dee,ngo,sgo,_P,lgo,igo,dgo,A_,cee,cgo,fgo,uP,mgo,ggo,hgo,L_,fee,pgo,_go,bP,ugo,bgo,vgo,B_,mee,Tgo,Fgo,vP,Cgo,Mgo,Ego,x_,gee,ygo,wgo,TP,Ago,Lgo,Bgo,k_,hee,xgo,kgo,FP,Rgo,Sgo,Pgo,R_,pee,$go,Igo,CP,jgo,Ngo,Dgo,S_,_ee,qgo,Ogo,MP,Ggo,Xgo,Vgo,P_,uee,zgo,Wgo,EP,Qgo,Hgo,Ugo,$_,bee,Jgo,Ygo,yP,Kgo,Zgo,eho,I_,vee,oho,rho,wP,tho,aho,nho,j_,Tee,sho,lho,AP,iho,dho,cho,N_,Fee,fho,mho,LP,gho,hho,pho,D_,Cee,_ho,uho,BP,bho,vho,Tho,q_,Mee,Fho,Cho,xP,Mho,Eho,yho,O_,Eee,who,Aho,kP,Lho,Bho,xho,G_,yee,kho,Rho,RP,Sho,Pho,$ho,X_,wee,Iho,jho,SP,Nho,Dho,qho,V_,Aee,Oho,Gho,PP,Xho,Vho,zho,z_,Lee,Who,Qho,$P,Hho,Uho,Jho,W_,Bee,Yho,Kho,IP,Zho,epo,opo,Q_,xee,rpo,tpo,jP,apo,npo,spo,H_,kee,lpo,ipo,NP,dpo,cpo,fpo,U_,Ree,mpo,gpo,DP,hpo,ppo,_po,J_,See,upo,bpo,qP,vpo,Tpo,Fpo,Y_,Pee,Cpo,Mpo,OP,Epo,ypo,wpo,K_,$ee,Apo,Lpo,GP,Bpo,xpo,kpo,Z_,Iee,Rpo,Spo,XP,Ppo,$po,Ipo,eu,jee,jpo,Npo,VP,Dpo,qpo,Opo,ou,Nee,Gpo,Xpo,zP,Vpo,zpo,Wpo,ru,Dee,Qpo,Hpo,WP,Upo,Jpo,Ypo,tu,qee,Kpo,Zpo,QP,e_o,o_o,r_o,au,Oee,t_o,a_o,HP,n_o,s_o,l_o,nu,Gee,i_o,d_o,UP,c_o,f_o,m_o,su,Xee,g_o,h_o,JP,p_o,__o,u_o,lu,Vee,b_o,v_o,YP,T_o,F_o,C_o,iu,zee,M_o,E_o,KP,y_o,w_o,A_o,du,L_o,Wee,B_o,x_o,Qee,k_o,R_o,Hee,S_o,P_o,H3,oke,td,cu,Uee,U3,$_o,Jee,I_o,rke,Ko,J3,j_o,ad,N_o,Yee,D_o,q_o,Kee,O_o,G_o,X_o,Y3,V_o,Zee,z_o,W_o,Q_o,Wr,K3,H_o,eoe,U_o,J_o,nd,Y_o,ooe,K_o,Z_o,roe,euo,ouo,ruo,toe,tuo,auo,Z3,nuo,qe,e5,suo,aoe,luo,iuo,Wa,duo,noe,cuo,fuo,soe,muo,guo,loe,huo,puo,_uo,$,fu,ioe,uuo,buo,ZP,vuo,Tuo,Fuo,mu,doe,Cuo,Muo,e$,Euo,yuo,wuo,gu,coe,Auo,Luo,o$,Buo,xuo,kuo,hu,foe,Ruo,Suo,r$,Puo,$uo,Iuo,pu,moe,juo,Nuo,t$,Duo,quo,Ouo,_u,goe,Guo,Xuo,a$,Vuo,zuo,Wuo,uu,hoe,Quo,Huo,n$,Uuo,Juo,Yuo,bu,poe,Kuo,Zuo,s$,e4o,o4o,r4o,vu,_oe,t4o,a4o,l$,n4o,s4o,l4o,Tu,uoe,i4o,d4o,i$,c4o,f4o,m4o,Fu,boe,g4o,h4o,d$,p4o,_4o,u4o,Cu,voe,b4o,v4o,c$,T4o,F4o,C4o,Mu,Toe,M4o,E4o,f$,y4o,w4o,A4o,Eu,Foe,L4o,B4o,m$,x4o,k4o,R4o,yu,Coe,S4o,P4o,g$,$4o,I4o,j4o,wu,Moe,N4o,D4o,h$,q4o,O4o,G4o,Au,Eoe,X4o,V4o,p$,z4o,W4o,Q4o,Lu,yoe,H4o,U4o,_$,J4o,Y4o,K4o,Bu,woe,Z4o,e1o,u$,o1o,r1o,t1o,xu,Aoe,a1o,n1o,b$,s1o,l1o,i1o,ku,Loe,d1o,c1o,v$,f1o,m1o,g1o,Ru,Boe,h1o,p1o,T$,_1o,u1o,b1o,Su,xoe,v1o,T1o,F$,F1o,C1o,M1o,Pu,koe,E1o,y1o,C$,w1o,A1o,L1o,$u,Roe,B1o,x1o,M$,k1o,R1o,S1o,Iu,Soe,P1o,$1o,E$,I1o,j1o,N1o,ju,Poe,D1o,q1o,y$,O1o,G1o,X1o,Nu,$oe,V1o,z1o,w$,W1o,Q1o,H1o,Du,Ioe,U1o,J1o,A$,Y1o,K1o,Z1o,qu,joe,ebo,obo,L$,rbo,tbo,abo,Ou,Noe,nbo,sbo,B$,lbo,ibo,dbo,Gu,Doe,cbo,fbo,x$,mbo,gbo,hbo,Xu,qoe,pbo,_bo,k$,ubo,bbo,vbo,Vu,Ooe,Tbo,Fbo,R$,Cbo,Mbo,Ebo,zu,Goe,ybo,wbo,S$,Abo,Lbo,Bbo,Wu,xbo,Xoe,kbo,Rbo,Voe,Sbo,Pbo,zoe,$bo,Ibo,o5,tke,sd,Qu,Woe,r5,jbo,Qoe,Nbo,ake,Zo,t5,Dbo,ld,qbo,Hoe,Obo,Gbo,Uoe,Xbo,Vbo,zbo,a5,Wbo,Joe,Qbo,Hbo,Ubo,Qr,n5,Jbo,Yoe,Ybo,Kbo,id,Zbo,Koe,e2o,o2o,Zoe,r2o,t2o,a2o,ere,n2o,s2o,s5,l2o,Oe,l5,i2o,ore,d2o,c2o,Qa,f2o,rre,m2o,g2o,tre,h2o,p2o,are,_2o,u2o,b2o,I,Hu,nre,v2o,T2o,P$,F2o,C2o,M2o,Uu,sre,E2o,y2o,$$,w2o,A2o,L2o,Ju,lre,B2o,x2o,I$,k2o,R2o,S2o,Yu,ire,P2o,$2o,j$,I2o,j2o,N2o,Ku,dre,D2o,q2o,N$,O2o,G2o,X2o,Zu,cre,V2o,z2o,D$,W2o,Q2o,H2o,e4,fre,U2o,J2o,q$,Y2o,K2o,Z2o,o4,mre,evo,ovo,O$,rvo,tvo,avo,r4,gre,nvo,svo,G$,lvo,ivo,dvo,t4,hre,cvo,fvo,X$,mvo,gvo,hvo,a4,pre,pvo,_vo,V$,uvo,bvo,vvo,n4,_re,Tvo,Fvo,z$,Cvo,Mvo,Evo,s4,ure,yvo,wvo,W$,Avo,Lvo,Bvo,l4,bre,xvo,kvo,Q$,Rvo,Svo,Pvo,i4,vre,$vo,Ivo,H$,jvo,Nvo,Dvo,d4,Tre,qvo,Ovo,U$,Gvo,Xvo,Vvo,c4,Fre,zvo,Wvo,J$,Qvo,Hvo,Uvo,f4,Cre,Jvo,Yvo,Y$,Kvo,Zvo,e6o,m4,Mre,o6o,r6o,K$,t6o,a6o,n6o,g4,Ere,s6o,l6o,Z$,i6o,d6o,c6o,h4,yre,f6o,m6o,eI,g6o,h6o,p6o,p4,wre,_6o,u6o,oI,b6o,v6o,T6o,_4,Are,F6o,C6o,rI,M6o,E6o,y6o,u4,Lre,w6o,A6o,tI,L6o,B6o,x6o,b4,Bre,k6o,R6o,aI,S6o,P6o,$6o,v4,xre,I6o,j6o,nI,N6o,D6o,q6o,T4,kre,O6o,G6o,sI,X6o,V6o,z6o,F4,Rre,W6o,Q6o,lI,H6o,U6o,J6o,C4,Sre,Y6o,K6o,iI,Z6o,e0o,o0o,M4,Pre,r0o,t0o,dI,a0o,n0o,s0o,E4,$re,l0o,i0o,Ire,d0o,c0o,f0o,y4,jre,m0o,g0o,cI,h0o,p0o,_0o,w4,Nre,u0o,b0o,fI,v0o,T0o,F0o,A4,Dre,C0o,M0o,mI,E0o,y0o,w0o,L4,qre,A0o,L0o,gI,B0o,x0o,k0o,B4,R0o,Ore,S0o,P0o,Gre,$0o,I0o,Xre,j0o,N0o,i5,nke,dd,x4,Vre,d5,D0o,zre,q0o,ske,er,c5,O0o,cd,G0o,Wre,X0o,V0o,Qre,z0o,W0o,Q0o,f5,H0o,Hre,U0o,J0o,Y0o,Hr,m5,K0o,Ure,Z0o,eTo,fd,oTo,Jre,rTo,tTo,Yre,aTo,nTo,sTo,Kre,lTo,iTo,g5,dTo,Ge,h5,cTo,Zre,fTo,mTo,Ha,gTo,ete,hTo,pTo,ote,_To,uTo,rte,bTo,vTo,TTo,se,k4,tte,FTo,CTo,hI,MTo,ETo,yTo,R4,ate,wTo,ATo,pI,LTo,BTo,xTo,S4,nte,kTo,RTo,_I,STo,PTo,$To,P4,ste,ITo,jTo,uI,NTo,DTo,qTo,$4,lte,OTo,GTo,bI,XTo,VTo,zTo,I4,ite,WTo,QTo,vI,HTo,UTo,JTo,j4,dte,YTo,KTo,TI,ZTo,eFo,oFo,N4,cte,rFo,tFo,FI,aFo,nFo,sFo,D4,fte,lFo,iFo,CI,dFo,cFo,fFo,q4,mte,mFo,gFo,MI,hFo,pFo,_Fo,O4,gte,uFo,bFo,EI,vFo,TFo,FFo,G4,hte,CFo,MFo,yI,EFo,yFo,wFo,X4,pte,AFo,LFo,wI,BFo,xFo,kFo,V4,_te,RFo,SFo,AI,PFo,$Fo,IFo,z4,ute,jFo,NFo,LI,DFo,qFo,OFo,W4,bte,GFo,XFo,BI,VFo,zFo,WFo,Q4,QFo,vte,HFo,UFo,Tte,JFo,YFo,Fte,KFo,ZFo,p5,lke,md,H4,Cte,_5,eCo,Mte,oCo,ike,or,u5,rCo,gd,tCo,Ete,aCo,nCo,yte,sCo,lCo,iCo,b5,dCo,wte,cCo,fCo,mCo,Ur,v5,gCo,Ate,hCo,pCo,hd,_Co,Lte,uCo,bCo,Bte,vCo,TCo,FCo,xte,CCo,MCo,T5,ECo,Xe,F5,yCo,kte,wCo,ACo,Ua,LCo,Rte,BCo,xCo,Ste,kCo,RCo,Pte,SCo,PCo,$Co,A,U4,$te,ICo,jCo,xI,NCo,DCo,qCo,J4,Ite,OCo,GCo,kI,XCo,VCo,zCo,Y4,jte,WCo,QCo,RI,HCo,UCo,JCo,K4,Nte,YCo,KCo,SI,ZCo,eMo,oMo,Z4,Dte,rMo,tMo,PI,aMo,nMo,sMo,e1,qte,lMo,iMo,$I,dMo,cMo,fMo,o1,Ote,mMo,gMo,II,hMo,pMo,_Mo,r1,Gte,uMo,bMo,jI,vMo,TMo,FMo,t1,Xte,CMo,MMo,NI,EMo,yMo,wMo,a1,Vte,AMo,LMo,DI,BMo,xMo,kMo,n1,zte,RMo,SMo,qI,PMo,$Mo,IMo,s1,Wte,jMo,NMo,OI,DMo,qMo,OMo,l1,Qte,GMo,XMo,GI,VMo,zMo,WMo,i1,Hte,QMo,HMo,XI,UMo,JMo,YMo,d1,Ute,KMo,ZMo,VI,eEo,oEo,rEo,c1,Jte,tEo,aEo,zI,nEo,sEo,lEo,f1,Yte,iEo,dEo,WI,cEo,fEo,mEo,m1,Kte,gEo,hEo,QI,pEo,_Eo,uEo,g1,Zte,bEo,vEo,HI,TEo,FEo,CEo,h1,eae,MEo,EEo,UI,yEo,wEo,AEo,p1,oae,LEo,BEo,JI,xEo,kEo,REo,_1,rae,SEo,PEo,YI,$Eo,IEo,jEo,u1,tae,NEo,DEo,KI,qEo,OEo,GEo,b1,aae,XEo,VEo,ZI,zEo,WEo,QEo,v1,nae,HEo,UEo,ej,JEo,YEo,KEo,T1,sae,ZEo,e3o,oj,o3o,r3o,t3o,F1,lae,a3o,n3o,rj,s3o,l3o,i3o,C1,iae,d3o,c3o,tj,f3o,m3o,g3o,M1,dae,h3o,p3o,aj,_3o,u3o,b3o,E1,cae,v3o,T3o,nj,F3o,C3o,M3o,y1,fae,E3o,y3o,sj,w3o,A3o,L3o,w1,mae,B3o,x3o,lj,k3o,R3o,S3o,A1,gae,P3o,$3o,ij,I3o,j3o,N3o,L1,hae,D3o,q3o,dj,O3o,G3o,X3o,B1,pae,V3o,z3o,cj,W3o,Q3o,H3o,x1,_ae,U3o,J3o,fj,Y3o,K3o,Z3o,k1,uae,e5o,o5o,mj,r5o,t5o,a5o,R1,bae,n5o,s5o,gj,l5o,i5o,d5o,S1,vae,c5o,f5o,hj,m5o,g5o,h5o,P1,Tae,p5o,_5o,pj,u5o,b5o,v5o,$1,Fae,T5o,F5o,_j,C5o,M5o,E5o,I1,Cae,y5o,w5o,uj,A5o,L5o,B5o,j1,Mae,x5o,k5o,bj,R5o,S5o,P5o,N1,Eae,$5o,I5o,vj,j5o,N5o,D5o,D1,yae,q5o,O5o,Tj,G5o,X5o,V5o,q1,wae,z5o,W5o,Fj,Q5o,H5o,U5o,O1,J5o,Aae,Y5o,K5o,Lae,Z5o,eyo,Bae,oyo,ryo,C5,dke,pd,G1,xae,M5,tyo,kae,ayo,cke,rr,E5,nyo,_d,syo,Rae,lyo,iyo,Sae,dyo,cyo,fyo,y5,myo,Pae,gyo,hyo,pyo,Jr,w5,_yo,$ae,uyo,byo,ud,vyo,Iae,Tyo,Fyo,jae,Cyo,Myo,Eyo,Nae,yyo,wyo,A5,Ayo,Ve,L5,Lyo,Dae,Byo,xyo,Ja,kyo,qae,Ryo,Syo,Oae,Pyo,$yo,Gae,Iyo,jyo,Nyo,O,X1,Xae,Dyo,qyo,Cj,Oyo,Gyo,Xyo,V1,Vae,Vyo,zyo,Mj,Wyo,Qyo,Hyo,z1,zae,Uyo,Jyo,Ej,Yyo,Kyo,Zyo,W1,Wae,ewo,owo,yj,rwo,two,awo,Q1,Qae,nwo,swo,wj,lwo,iwo,dwo,H1,Hae,cwo,fwo,Aj,mwo,gwo,hwo,U1,Uae,pwo,_wo,Lj,uwo,bwo,vwo,J1,Jae,Two,Fwo,Bj,Cwo,Mwo,Ewo,Y1,Yae,ywo,wwo,xj,Awo,Lwo,Bwo,K1,Kae,xwo,kwo,kj,Rwo,Swo,Pwo,Z1,Zae,$wo,Iwo,Rj,jwo,Nwo,Dwo,eb,ene,qwo,Owo,Sj,Gwo,Xwo,Vwo,ob,one,zwo,Wwo,Pj,Qwo,Hwo,Uwo,rb,rne,Jwo,Ywo,$j,Kwo,Zwo,eAo,tb,tne,oAo,rAo,Ij,tAo,aAo,nAo,ab,ane,sAo,lAo,jj,iAo,dAo,cAo,nb,nne,fAo,mAo,Nj,gAo,hAo,pAo,sb,sne,_Ao,uAo,Dj,bAo,vAo,TAo,lb,lne,FAo,CAo,qj,MAo,EAo,yAo,ib,ine,wAo,AAo,Oj,LAo,BAo,xAo,db,dne,kAo,RAo,Gj,SAo,PAo,$Ao,cb,cne,IAo,jAo,Xj,NAo,DAo,qAo,fb,fne,OAo,GAo,Vj,XAo,VAo,zAo,mb,mne,WAo,QAo,zj,HAo,UAo,JAo,gb,gne,YAo,KAo,Wj,ZAo,eLo,oLo,hb,hne,rLo,tLo,Qj,aLo,nLo,sLo,pb,pne,lLo,iLo,Hj,dLo,cLo,fLo,_b,_ne,mLo,gLo,Uj,hLo,pLo,_Lo,ub,uLo,une,bLo,vLo,bne,TLo,FLo,vne,CLo,MLo,B5,fke,bd,bb,Tne,x5,ELo,Fne,yLo,mke,tr,k5,wLo,vd,ALo,Cne,LLo,BLo,Mne,xLo,kLo,RLo,R5,SLo,Ene,PLo,$Lo,ILo,Yr,S5,jLo,yne,NLo,DLo,Td,qLo,wne,OLo,GLo,Ane,XLo,VLo,zLo,Lne,WLo,QLo,P5,HLo,ze,$5,ULo,Bne,JLo,YLo,Ya,KLo,xne,ZLo,e7o,kne,o7o,r7o,Rne,t7o,a7o,n7o,da,vb,Sne,s7o,l7o,Jj,i7o,d7o,c7o,Tb,Pne,f7o,m7o,Yj,g7o,h7o,p7o,Fb,$ne,_7o,u7o,Kj,b7o,v7o,T7o,Cb,Ine,F7o,C7o,Zj,M7o,E7o,y7o,Mb,jne,w7o,A7o,eN,L7o,B7o,x7o,Eb,k7o,Nne,R7o,S7o,Dne,P7o,$7o,qne,I7o,j7o,I5,gke,Fd,yb,One,j5,N7o,Gne,D7o,hke,ar,N5,q7o,Cd,O7o,Xne,G7o,X7o,Vne,V7o,z7o,W7o,D5,Q7o,zne,H7o,U7o,J7o,Kr,q5,Y7o,Wne,K7o,Z7o,Md,e8o,Qne,o8o,r8o,Hne,t8o,a8o,n8o,Une,s8o,l8o,O5,i8o,We,G5,d8o,Jne,c8o,f8o,Ka,m8o,Yne,g8o,h8o,Kne,p8o,_8o,Zne,u8o,b8o,v8o,D,wb,ese,T8o,F8o,oN,C8o,M8o,E8o,Ab,ose,y8o,w8o,rN,A8o,L8o,B8o,Lb,rse,x8o,k8o,tN,R8o,S8o,P8o,Bb,tse,$8o,I8o,aN,j8o,N8o,D8o,xb,ase,q8o,O8o,nN,G8o,X8o,V8o,kb,nse,z8o,W8o,sN,Q8o,H8o,U8o,Rb,sse,J8o,Y8o,lN,K8o,Z8o,e9o,Sb,lse,o9o,r9o,iN,t9o,a9o,n9o,Pb,ise,s9o,l9o,dN,i9o,d9o,c9o,$b,dse,f9o,m9o,cN,g9o,h9o,p9o,Ib,cse,_9o,u9o,fN,b9o,v9o,T9o,jb,fse,F9o,C9o,mN,M9o,E9o,y9o,Nb,mse,w9o,A9o,gN,L9o,B9o,x9o,Db,gse,k9o,R9o,hN,S9o,P9o,$9o,qb,hse,I9o,j9o,pN,N9o,D9o,q9o,Ob,pse,O9o,G9o,_N,X9o,V9o,z9o,Gb,_se,W9o,Q9o,uN,H9o,U9o,J9o,Xb,use,Y9o,K9o,bN,Z9o,eBo,oBo,Vb,bse,rBo,tBo,vN,aBo,nBo,sBo,zb,vse,lBo,iBo,TN,dBo,cBo,fBo,Wb,Tse,mBo,gBo,FN,hBo,pBo,_Bo,Qb,Fse,uBo,bBo,CN,vBo,TBo,FBo,Hb,Cse,CBo,MBo,MN,EBo,yBo,wBo,Ub,Mse,ABo,LBo,EN,BBo,xBo,kBo,Jb,Ese,RBo,SBo,yN,PBo,$Bo,IBo,Yb,yse,jBo,NBo,wN,DBo,qBo,OBo,Kb,wse,GBo,XBo,AN,VBo,zBo,WBo,Zb,Ase,QBo,HBo,LN,UBo,JBo,YBo,e2,Lse,KBo,ZBo,BN,exo,oxo,rxo,o2,Bse,txo,axo,xN,nxo,sxo,lxo,r2,xse,ixo,dxo,kN,cxo,fxo,mxo,t2,kse,gxo,hxo,RN,pxo,_xo,uxo,a2,Rse,bxo,vxo,SN,Txo,Fxo,Cxo,n2,Mxo,Sse,Exo,yxo,Pse,wxo,Axo,$se,Lxo,Bxo,X5,pke,Ed,s2,Ise,V5,xxo,jse,kxo,_ke,nr,z5,Rxo,yd,Sxo,Nse,Pxo,$xo,Dse,Ixo,jxo,Nxo,W5,Dxo,qse,qxo,Oxo,Gxo,Zr,Q5,Xxo,Ose,Vxo,zxo,wd,Wxo,Gse,Qxo,Hxo,Xse,Uxo,Jxo,Yxo,Vse,Kxo,Zxo,H5,eko,Qe,U5,oko,zse,rko,tko,Za,ako,Wse,nko,sko,Qse,lko,iko,Hse,dko,cko,fko,R,l2,Use,mko,gko,PN,hko,pko,_ko,i2,Jse,uko,bko,$N,vko,Tko,Fko,d2,Yse,Cko,Mko,IN,Eko,yko,wko,c2,Kse,Ako,Lko,jN,Bko,xko,kko,f2,Zse,Rko,Sko,NN,Pko,$ko,Iko,m2,ele,jko,Nko,DN,Dko,qko,Oko,g2,ole,Gko,Xko,qN,Vko,zko,Wko,h2,rle,Qko,Hko,ON,Uko,Jko,Yko,p2,tle,Kko,Zko,GN,eRo,oRo,rRo,_2,ale,tRo,aRo,XN,nRo,sRo,lRo,u2,nle,iRo,dRo,VN,cRo,fRo,mRo,b2,sle,gRo,hRo,zN,pRo,_Ro,uRo,v2,lle,bRo,vRo,WN,TRo,FRo,CRo,T2,ile,MRo,ERo,QN,yRo,wRo,ARo,F2,dle,LRo,BRo,HN,xRo,kRo,RRo,C2,cle,SRo,PRo,UN,$Ro,IRo,jRo,M2,fle,NRo,DRo,JN,qRo,ORo,GRo,E2,mle,XRo,VRo,YN,zRo,WRo,QRo,y2,gle,HRo,URo,KN,JRo,YRo,KRo,w2,hle,ZRo,eSo,ZN,oSo,rSo,tSo,A2,ple,aSo,nSo,eD,sSo,lSo,iSo,L2,_le,dSo,cSo,oD,fSo,mSo,gSo,B2,ule,hSo,pSo,rD,_So,uSo,bSo,x2,ble,vSo,TSo,tD,FSo,CSo,MSo,k2,vle,ESo,ySo,aD,wSo,ASo,LSo,R2,Tle,BSo,xSo,nD,kSo,RSo,SSo,S2,Fle,PSo,$So,sD,ISo,jSo,NSo,P2,Cle,DSo,qSo,lD,OSo,GSo,XSo,$2,Mle,VSo,zSo,iD,WSo,QSo,HSo,I2,Ele,USo,JSo,dD,YSo,KSo,ZSo,j2,yle,ePo,oPo,cD,rPo,tPo,aPo,N2,wle,nPo,sPo,fD,lPo,iPo,dPo,D2,Ale,cPo,fPo,mD,mPo,gPo,hPo,q2,Lle,pPo,_Po,gD,uPo,bPo,vPo,O2,Ble,TPo,FPo,hD,CPo,MPo,EPo,G2,xle,yPo,wPo,pD,APo,LPo,BPo,X2,kle,xPo,kPo,_D,RPo,SPo,PPo,V2,Rle,$Po,IPo,uD,jPo,NPo,DPo,z2,Sle,qPo,OPo,bD,GPo,XPo,VPo,W2,zPo,Ple,WPo,QPo,$le,HPo,UPo,Ile,JPo,YPo,J5,uke,Ad,Q2,jle,Y5,KPo,Nle,ZPo,bke,sr,K5,e$o,Ld,o$o,Dle,r$o,t$o,qle,a$o,n$o,s$o,Z5,l$o,Ole,i$o,d$o,c$o,et,ey,f$o,Gle,m$o,g$o,Bd,h$o,Xle,p$o,_$o,Vle,u$o,b$o,v$o,zle,T$o,F$o,oy,C$o,He,ry,M$o,Wle,E$o,y$o,en,w$o,Qle,A$o,L$o,Hle,B$o,x$o,Ule,k$o,R$o,S$o,Jle,H2,Yle,P$o,$$o,vD,I$o,j$o,N$o,U2,D$o,Kle,q$o,O$o,Zle,G$o,X$o,eie,V$o,z$o,ty,vke,xd,J2,oie,ay,W$o,rie,Q$o,Tke,lr,ny,H$o,kd,U$o,tie,J$o,Y$o,aie,K$o,Z$o,eIo,sy,oIo,nie,rIo,tIo,aIo,ot,ly,nIo,sie,sIo,lIo,Rd,iIo,lie,dIo,cIo,iie,fIo,mIo,gIo,die,hIo,pIo,iy,_Io,Ue,dy,uIo,cie,bIo,vIo,on,TIo,fie,FIo,CIo,mie,MIo,EIo,gie,yIo,wIo,AIo,me,Y2,hie,LIo,BIo,TD,xIo,kIo,RIo,K2,pie,SIo,PIo,FD,$Io,IIo,jIo,qs,_ie,NIo,DIo,CD,qIo,OIo,MD,GIo,XIo,VIo,Z2,uie,zIo,WIo,ED,QIo,HIo,UIo,ma,bie,JIo,YIo,yD,KIo,ZIo,wD,ejo,ojo,AD,rjo,tjo,ajo,ev,vie,njo,sjo,LD,ljo,ijo,djo,ov,Tie,cjo,fjo,BD,mjo,gjo,hjo,rv,Fie,pjo,_jo,xD,ujo,bjo,vjo,tv,Cie,Tjo,Fjo,kD,Cjo,Mjo,Ejo,av,Mie,yjo,wjo,RD,Ajo,Ljo,Bjo,nv,Eie,xjo,kjo,SD,Rjo,Sjo,Pjo,sv,$jo,yie,Ijo,jjo,wie,Njo,Djo,Aie,qjo,Ojo,cy,Fke,Sd,lv,Lie,fy,Gjo,Bie,Xjo,Cke,ir,my,Vjo,Pd,zjo,xie,Wjo,Qjo,kie,Hjo,Ujo,Jjo,gy,Yjo,Rie,Kjo,Zjo,eNo,rt,hy,oNo,Sie,rNo,tNo,$d,aNo,Pie,nNo,sNo,$ie,lNo,iNo,dNo,Iie,cNo,fNo,py,mNo,Je,_y,gNo,jie,hNo,pNo,rn,_No,Nie,uNo,bNo,Die,vNo,TNo,qie,FNo,CNo,MNo,Oie,iv,Gie,ENo,yNo,PD,wNo,ANo,LNo,dv,BNo,Xie,xNo,kNo,Vie,RNo,SNo,zie,PNo,$No,uy,Mke,Id,cv,Wie,by,INo,Qie,jNo,Eke,dr,vy,NNo,jd,DNo,Hie,qNo,ONo,Uie,GNo,XNo,VNo,Ty,zNo,Jie,WNo,QNo,HNo,tt,Fy,UNo,Yie,JNo,YNo,Nd,KNo,Kie,ZNo,eDo,Zie,oDo,rDo,tDo,ede,aDo,nDo,Cy,sDo,Ye,My,lDo,ode,iDo,dDo,tn,cDo,rde,fDo,mDo,tde,gDo,hDo,ade,pDo,_Do,uDo,ke,fv,nde,bDo,vDo,$D,TDo,FDo,CDo,mv,sde,MDo,EDo,ID,yDo,wDo,ADo,gv,lde,LDo,BDo,jD,xDo,kDo,RDo,hv,ide,SDo,PDo,ND,$Do,IDo,jDo,pv,dde,NDo,DDo,DD,qDo,ODo,GDo,_v,cde,XDo,VDo,qD,zDo,WDo,QDo,uv,fde,HDo,UDo,OD,JDo,YDo,KDo,bv,mde,ZDo,eqo,GD,oqo,rqo,tqo,vv,aqo,gde,nqo,sqo,hde,lqo,iqo,pde,dqo,cqo,Ey,yke,Dd,Tv,_de,yy,fqo,ude,mqo,wke,cr,wy,gqo,qd,hqo,bde,pqo,_qo,vde,uqo,bqo,vqo,Ay,Tqo,Tde,Fqo,Cqo,Mqo,at,Ly,Eqo,Fde,yqo,wqo,Od,Aqo,Cde,Lqo,Bqo,Mde,xqo,kqo,Rqo,Ede,Sqo,Pqo,By,$qo,Ke,xy,Iqo,yde,jqo,Nqo,an,Dqo,wde,qqo,Oqo,Ade,Gqo,Xqo,Lde,Vqo,zqo,Wqo,nn,Fv,Bde,Qqo,Hqo,XD,Uqo,Jqo,Yqo,Cv,xde,Kqo,Zqo,VD,eOo,oOo,rOo,Mv,kde,tOo,aOo,zD,nOo,sOo,lOo,Ev,Rde,iOo,dOo,WD,cOo,fOo,mOo,yv,gOo,Sde,hOo,pOo,Pde,_Oo,uOo,$de,bOo,vOo,ky,Ake,Gd,wv,Ide,Ry,TOo,jde,FOo,Lke,fr,Sy,COo,Xd,MOo,Nde,EOo,yOo,Dde,wOo,AOo,LOo,Py,BOo,qde,xOo,kOo,ROo,nt,$y,SOo,Ode,POo,$Oo,Vd,IOo,Gde,jOo,NOo,Xde,DOo,qOo,OOo,Vde,GOo,XOo,Iy,VOo,Ze,jy,zOo,zde,WOo,QOo,sn,HOo,Wde,UOo,JOo,Qde,YOo,KOo,Hde,ZOo,eGo,oGo,Re,Av,Ude,rGo,tGo,QD,aGo,nGo,sGo,Lv,Jde,lGo,iGo,HD,dGo,cGo,fGo,Bv,Yde,mGo,gGo,UD,hGo,pGo,_Go,xv,Kde,uGo,bGo,JD,vGo,TGo,FGo,kv,Zde,CGo,MGo,YD,EGo,yGo,wGo,Rv,ece,AGo,LGo,KD,BGo,xGo,kGo,Sv,oce,RGo,SGo,ZD,PGo,$Go,IGo,Pv,rce,jGo,NGo,eq,DGo,qGo,OGo,$v,GGo,tce,XGo,VGo,ace,zGo,WGo,nce,QGo,HGo,Ny,Bke,zd,Iv,sce,Dy,UGo,lce,JGo,xke,mr,qy,YGo,Wd,KGo,ice,ZGo,eXo,dce,oXo,rXo,tXo,Oy,aXo,cce,nXo,sXo,lXo,st,Gy,iXo,fce,dXo,cXo,Qd,fXo,mce,mXo,gXo,gce,hXo,pXo,_Xo,hce,uXo,bXo,Xy,vXo,eo,Vy,TXo,pce,FXo,CXo,ln,MXo,_ce,EXo,yXo,uce,wXo,AXo,bce,LXo,BXo,xXo,zy,jv,vce,kXo,RXo,oq,SXo,PXo,$Xo,Nv,Tce,IXo,jXo,rq,NXo,DXo,qXo,Dv,OXo,Fce,GXo,XXo,Cce,VXo,zXo,Mce,WXo,QXo,Wy,kke,Hd,qv,Ece,Qy,HXo,yce,UXo,Rke,gr,Hy,JXo,Ud,YXo,wce,KXo,ZXo,Ace,eVo,oVo,rVo,Uy,tVo,Lce,aVo,nVo,sVo,lt,Jy,lVo,Bce,iVo,dVo,Jd,cVo,xce,fVo,mVo,kce,gVo,hVo,pVo,Rce,_Vo,uVo,Yy,bVo,oo,Ky,vVo,Sce,TVo,FVo,dn,CVo,Pce,MVo,EVo,$ce,yVo,wVo,Ice,AVo,LVo,BVo,cn,Ov,jce,xVo,kVo,tq,RVo,SVo,PVo,Gv,Nce,$Vo,IVo,aq,jVo,NVo,DVo,Xv,Dce,qVo,OVo,nq,GVo,XVo,VVo,Vv,qce,zVo,WVo,sq,QVo,HVo,UVo,zv,JVo,Oce,YVo,KVo,Gce,ZVo,ezo,Xce,ozo,rzo,Zy,Ske,Yd,Wv,Vce,ew,tzo,zce,azo,Pke,hr,ow,nzo,Kd,szo,Wce,lzo,izo,Qce,dzo,czo,fzo,rw,mzo,Hce,gzo,hzo,pzo,it,tw,_zo,Uce,uzo,bzo,Zd,vzo,Jce,Tzo,Fzo,Yce,Czo,Mzo,Ezo,Kce,yzo,wzo,aw,Azo,ro,nw,Lzo,Zce,Bzo,xzo,fn,kzo,efe,Rzo,Szo,ofe,Pzo,$zo,rfe,Izo,jzo,Nzo,ec,Qv,tfe,Dzo,qzo,lq,Ozo,Gzo,Xzo,Hv,afe,Vzo,zzo,iq,Wzo,Qzo,Hzo,Uv,nfe,Uzo,Jzo,dq,Yzo,Kzo,Zzo,Jv,eWo,sfe,oWo,rWo,lfe,tWo,aWo,ife,nWo,sWo,sw,$ke,oc,Yv,dfe,lw,lWo,cfe,iWo,Ike,pr,iw,dWo,rc,cWo,ffe,fWo,mWo,mfe,gWo,hWo,pWo,dw,_Wo,gfe,uWo,bWo,vWo,dt,cw,TWo,hfe,FWo,CWo,tc,MWo,pfe,EWo,yWo,_fe,wWo,AWo,LWo,ufe,BWo,xWo,fw,kWo,to,mw,RWo,bfe,SWo,PWo,mn,$Wo,vfe,IWo,jWo,Tfe,NWo,DWo,Ffe,qWo,OWo,GWo,Cfe,Kv,Mfe,XWo,VWo,cq,zWo,WWo,QWo,Zv,HWo,Efe,UWo,JWo,yfe,YWo,KWo,wfe,ZWo,eQo,gw,jke,ac,e6,Afe,hw,oQo,Lfe,rQo,Nke,_r,pw,tQo,nc,aQo,Bfe,nQo,sQo,xfe,lQo,iQo,dQo,_w,cQo,kfe,fQo,mQo,gQo,ct,uw,hQo,Rfe,pQo,_Qo,sc,uQo,Sfe,bQo,vQo,Pfe,TQo,FQo,CQo,$fe,MQo,EQo,bw,yQo,ao,vw,wQo,Ife,AQo,LQo,gn,BQo,jfe,xQo,kQo,Nfe,RQo,SQo,Dfe,PQo,$Qo,IQo,qfe,o6,Ofe,jQo,NQo,fq,DQo,qQo,OQo,r6,GQo,Gfe,XQo,VQo,Xfe,zQo,WQo,Vfe,QQo,HQo,Tw,Dke,lc,t6,zfe,Fw,UQo,Wfe,JQo,qke,ur,Cw,YQo,ic,KQo,Qfe,ZQo,eHo,Hfe,oHo,rHo,tHo,Mw,aHo,Ufe,nHo,sHo,lHo,ft,Ew,iHo,Jfe,dHo,cHo,dc,fHo,Yfe,mHo,gHo,Kfe,hHo,pHo,_Ho,Zfe,uHo,bHo,yw,vHo,no,ww,THo,eme,FHo,CHo,hn,MHo,ome,EHo,yHo,rme,wHo,AHo,tme,LHo,BHo,xHo,Aw,a6,ame,kHo,RHo,mq,SHo,PHo,$Ho,n6,nme,IHo,jHo,gq,NHo,DHo,qHo,s6,OHo,sme,GHo,XHo,lme,VHo,zHo,ime,WHo,QHo,Lw,Oke,cc,l6,dme,Bw,HHo,cme,UHo,Gke,br,xw,JHo,fc,YHo,fme,KHo,ZHo,mme,eUo,oUo,rUo,kw,tUo,gme,aUo,nUo,sUo,mt,Rw,lUo,hme,iUo,dUo,mc,cUo,pme,fUo,mUo,_me,gUo,hUo,pUo,ume,_Uo,uUo,Sw,bUo,so,Pw,vUo,bme,TUo,FUo,pn,CUo,vme,MUo,EUo,Tme,yUo,wUo,Fme,AUo,LUo,BUo,Cme,i6,Mme,xUo,kUo,hq,RUo,SUo,PUo,d6,$Uo,Eme,IUo,jUo,yme,NUo,DUo,wme,qUo,OUo,$w,Xke,gc,c6,Ame,Iw,GUo,Lme,XUo,Vke,vr,jw,VUo,hc,zUo,Bme,WUo,QUo,xme,HUo,UUo,JUo,Nw,YUo,kme,KUo,ZUo,eJo,gt,Dw,oJo,Rme,rJo,tJo,pc,aJo,Sme,nJo,sJo,Pme,lJo,iJo,dJo,$me,cJo,fJo,qw,mJo,ho,Ow,gJo,Ime,hJo,pJo,_n,_Jo,jme,uJo,bJo,Nme,vJo,TJo,Dme,FJo,CJo,MJo,B,f6,qme,EJo,yJo,pq,wJo,AJo,LJo,m6,Ome,BJo,xJo,_q,kJo,RJo,SJo,g6,Gme,PJo,$Jo,uq,IJo,jJo,NJo,h6,Xme,DJo,qJo,bq,OJo,GJo,XJo,p6,Vme,VJo,zJo,vq,WJo,QJo,HJo,_6,zme,UJo,JJo,Tq,YJo,KJo,ZJo,u6,Wme,eYo,oYo,Fq,rYo,tYo,aYo,b6,Qme,nYo,sYo,Cq,lYo,iYo,dYo,v6,Hme,cYo,fYo,Mq,mYo,gYo,hYo,T6,Ume,pYo,_Yo,Eq,uYo,bYo,vYo,F6,Jme,TYo,FYo,yq,CYo,MYo,EYo,C6,Yme,yYo,wYo,wq,AYo,LYo,BYo,M6,Kme,xYo,kYo,Aq,RYo,SYo,PYo,E6,Zme,$Yo,IYo,Lq,jYo,NYo,DYo,y6,ege,qYo,OYo,Bq,GYo,XYo,VYo,w6,oge,zYo,WYo,xq,QYo,HYo,UYo,Os,rge,JYo,YYo,kq,KYo,ZYo,Rq,eKo,oKo,rKo,A6,tge,tKo,aKo,Sq,nKo,sKo,lKo,L6,age,iKo,dKo,Pq,cKo,fKo,mKo,B6,nge,gKo,hKo,$q,pKo,_Ko,uKo,x6,sge,bKo,vKo,Iq,TKo,FKo,CKo,k6,lge,MKo,EKo,jq,yKo,wKo,AKo,R6,ige,LKo,BKo,Nq,xKo,kKo,RKo,S6,dge,SKo,PKo,Dq,$Ko,IKo,jKo,P6,cge,NKo,DKo,qq,qKo,OKo,GKo,$6,fge,XKo,VKo,Oq,zKo,WKo,QKo,I6,mge,HKo,UKo,Gq,JKo,YKo,KKo,j6,gge,ZKo,eZo,Xq,oZo,rZo,tZo,N6,hge,aZo,nZo,Vq,sZo,lZo,iZo,D6,pge,dZo,cZo,zq,fZo,mZo,gZo,q6,_ge,hZo,pZo,Wq,_Zo,uZo,bZo,O6,uge,vZo,TZo,Qq,FZo,CZo,MZo,G6,bge,EZo,yZo,Hq,wZo,AZo,LZo,X6,vge,BZo,xZo,Uq,kZo,RZo,SZo,V6,Tge,PZo,$Zo,Jq,IZo,jZo,NZo,z6,Fge,DZo,qZo,Yq,OZo,GZo,XZo,W6,Cge,VZo,zZo,Kq,WZo,QZo,HZo,Q6,Mge,UZo,JZo,Zq,YZo,KZo,ZZo,H6,Ege,eer,oer,eO,rer,ter,aer,U6,yge,ner,ser,oO,ler,ier,der,J6,wge,cer,fer,rO,mer,ger,her,Y6,Age,per,_er,tO,uer,ber,ver,Lge,Ter,Fer,Gw,zke,_c,K6,Bge,Xw,Cer,xge,Mer,Wke,Tr,Vw,Eer,uc,yer,kge,wer,Aer,Rge,Ler,Ber,xer,zw,ker,Sge,Rer,Ser,Per,ht,Ww,$er,Pge,Ier,jer,bc,Ner,$ge,Der,qer,Ige,Oer,Ger,Xer,jge,Ver,zer,Qw,Wer,po,Hw,Qer,Nge,Her,Uer,un,Jer,Dge,Yer,Ker,qge,Zer,eor,Oge,oor,ror,tor,H,Z6,Gge,aor,nor,aO,sor,lor,ior,e0,Xge,dor,cor,nO,mor,gor,hor,o0,Vge,por,_or,sO,uor,bor,vor,r0,zge,Tor,For,lO,Cor,Mor,Eor,t0,Wge,yor,wor,iO,Aor,Lor,Bor,a0,Qge,xor,kor,dO,Ror,Sor,Por,n0,Hge,$or,Ior,cO,jor,Nor,Dor,s0,Uge,qor,Oor,fO,Gor,Xor,Vor,l0,Jge,zor,Wor,mO,Qor,Hor,Uor,i0,Yge,Jor,Yor,gO,Kor,Zor,err,d0,Kge,orr,rrr,hO,trr,arr,nrr,c0,Zge,srr,lrr,pO,irr,drr,crr,f0,ehe,frr,mrr,_O,grr,hrr,prr,m0,ohe,_rr,urr,uO,brr,vrr,Trr,g0,rhe,Frr,Crr,bO,Mrr,Err,yrr,h0,the,wrr,Arr,vO,Lrr,Brr,xrr,p0,ahe,krr,Rrr,TO,Srr,Prr,$rr,_0,nhe,Irr,jrr,FO,Nrr,Drr,qrr,u0,she,Orr,Grr,CO,Xrr,Vrr,zrr,b0,lhe,Wrr,Qrr,MO,Hrr,Urr,Jrr,v0,ihe,Yrr,Krr,EO,Zrr,etr,otr,T0,dhe,rtr,ttr,yO,atr,ntr,str,che,ltr,itr,Uw,Qke,vc,F0,fhe,Jw,dtr,mhe,ctr,Hke,Fr,Yw,ftr,Tc,mtr,ghe,gtr,htr,hhe,ptr,_tr,utr,Kw,btr,phe,vtr,Ttr,Ftr,pt,Zw,Ctr,_he,Mtr,Etr,Fc,ytr,uhe,wtr,Atr,bhe,Ltr,Btr,xtr,vhe,ktr,Rtr,eA,Str,_o,oA,Ptr,The,$tr,Itr,bn,jtr,Fhe,Ntr,Dtr,Che,qtr,Otr,Mhe,Gtr,Xtr,Vtr,ge,C0,Ehe,ztr,Wtr,wO,Qtr,Htr,Utr,M0,yhe,Jtr,Ytr,AO,Ktr,Ztr,ear,E0,whe,oar,rar,LO,tar,aar,nar,y0,Ahe,sar,lar,BO,iar,dar,car,w0,Lhe,far,mar,xO,gar,har,par,A0,Bhe,_ar,uar,kO,bar,Tar,Far,L0,xhe,Car,Mar,RO,Ear,yar,war,B0,khe,Aar,Lar,SO,Bar,xar,kar,x0,Rhe,Rar,Sar,PO,Par,$ar,Iar,k0,She,jar,Nar,$O,Dar,qar,Oar,R0,Phe,Gar,Xar,IO,Var,zar,War,$he,Qar,Har,rA,Uke,Cc,S0,Ihe,tA,Uar,jhe,Jar,Jke,Cr,aA,Yar,Mc,Kar,Nhe,Zar,enr,Dhe,onr,rnr,tnr,nA,anr,qhe,nnr,snr,lnr,_t,sA,inr,Ohe,dnr,cnr,Ec,fnr,Ghe,mnr,gnr,Xhe,hnr,pnr,_nr,Vhe,unr,bnr,lA,vnr,uo,iA,Tnr,zhe,Fnr,Cnr,vn,Mnr,Whe,Enr,ynr,Qhe,wnr,Anr,Hhe,Lnr,Bnr,xnr,dA,P0,Uhe,knr,Rnr,jO,Snr,Pnr,$nr,$0,Jhe,Inr,jnr,NO,Nnr,Dnr,qnr,Yhe,Onr,Gnr,cA,Yke,yc,I0,Khe,fA,Xnr,Zhe,Vnr,Kke,Mr,mA,znr,wc,Wnr,epe,Qnr,Hnr,ope,Unr,Jnr,Ynr,gA,Knr,rpe,Znr,esr,osr,ut,hA,rsr,tpe,tsr,asr,Ac,nsr,ape,ssr,lsr,npe,isr,dsr,csr,spe,fsr,msr,pA,gsr,bo,_A,hsr,lpe,psr,_sr,Tn,usr,ipe,bsr,vsr,dpe,Tsr,Fsr,cpe,Csr,Msr,Esr,Y,j0,fpe,ysr,wsr,DO,Asr,Lsr,Bsr,N0,mpe,xsr,ksr,qO,Rsr,Ssr,Psr,D0,gpe,$sr,Isr,OO,jsr,Nsr,Dsr,q0,hpe,qsr,Osr,GO,Gsr,Xsr,Vsr,O0,ppe,zsr,Wsr,XO,Qsr,Hsr,Usr,G0,_pe,Jsr,Ysr,VO,Ksr,Zsr,elr,X0,upe,olr,rlr,zO,tlr,alr,nlr,V0,bpe,slr,llr,WO,ilr,dlr,clr,z0,vpe,flr,mlr,QO,glr,hlr,plr,W0,Tpe,_lr,ulr,HO,blr,vlr,Tlr,Q0,Fpe,Flr,Clr,UO,Mlr,Elr,ylr,H0,Cpe,wlr,Alr,JO,Llr,Blr,xlr,U0,Mpe,klr,Rlr,YO,Slr,Plr,$lr,J0,Epe,Ilr,jlr,KO,Nlr,Dlr,qlr,Y0,ype,Olr,Glr,ZO,Xlr,Vlr,zlr,K0,wpe,Wlr,Qlr,eG,Hlr,Ulr,Jlr,Z0,Ape,Ylr,Klr,oG,Zlr,eir,oir,eT,Lpe,rir,tir,rG,air,nir,sir,oT,Bpe,lir,iir,tG,dir,cir,fir,rT,xpe,mir,gir,aG,hir,pir,_ir,kpe,uir,bir,uA,Zke,Lc,tT,Rpe,bA,vir,Spe,Tir,eRe,Er,vA,Fir,Bc,Cir,Ppe,Mir,Eir,$pe,yir,wir,Air,TA,Lir,Ipe,Bir,xir,kir,bt,FA,Rir,jpe,Sir,Pir,xc,$ir,Npe,Iir,jir,Dpe,Nir,Dir,qir,qpe,Oir,Gir,CA,Xir,vo,MA,Vir,Ope,zir,Wir,Fn,Qir,Gpe,Hir,Uir,Xpe,Jir,Yir,Vpe,Kir,Zir,edr,ue,aT,zpe,odr,rdr,nG,tdr,adr,ndr,nT,Wpe,sdr,ldr,sG,idr,ddr,cdr,sT,Qpe,fdr,mdr,lG,gdr,hdr,pdr,lT,Hpe,_dr,udr,iG,bdr,vdr,Tdr,iT,Upe,Fdr,Cdr,dG,Mdr,Edr,ydr,dT,Jpe,wdr,Adr,cG,Ldr,Bdr,xdr,cT,Ype,kdr,Rdr,fG,Sdr,Pdr,$dr,fT,Kpe,Idr,jdr,mG,Ndr,Ddr,qdr,mT,Zpe,Odr,Gdr,gG,Xdr,Vdr,zdr,gT,e_e,Wdr,Qdr,hG,Hdr,Udr,Jdr,o_e,Ydr,Kdr,EA,oRe,kc,hT,r_e,yA,Zdr,t_e,ecr,rRe,yr,wA,ocr,Rc,rcr,a_e,tcr,acr,n_e,ncr,scr,lcr,AA,icr,s_e,dcr,ccr,fcr,vt,LA,mcr,l_e,gcr,hcr,Sc,pcr,i_e,_cr,ucr,d_e,bcr,vcr,Tcr,c_e,Fcr,Ccr,BA,Mcr,To,xA,Ecr,f_e,ycr,wcr,Cn,Acr,m_e,Lcr,Bcr,g_e,xcr,kcr,h_e,Rcr,Scr,Pcr,V,pT,p_e,$cr,Icr,pG,jcr,Ncr,Dcr,_T,__e,qcr,Ocr,_G,Gcr,Xcr,Vcr,uT,u_e,zcr,Wcr,uG,Qcr,Hcr,Ucr,bT,b_e,Jcr,Ycr,bG,Kcr,Zcr,efr,vT,v_e,ofr,rfr,vG,tfr,afr,nfr,TT,T_e,sfr,lfr,TG,ifr,dfr,cfr,FT,F_e,ffr,mfr,FG,gfr,hfr,pfr,CT,C_e,_fr,ufr,CG,bfr,vfr,Tfr,MT,M_e,Ffr,Cfr,MG,Mfr,Efr,yfr,ET,E_e,wfr,Afr,EG,Lfr,Bfr,xfr,yT,y_e,kfr,Rfr,yG,Sfr,Pfr,$fr,wT,w_e,Ifr,jfr,wG,Nfr,Dfr,qfr,AT,A_e,Ofr,Gfr,AG,Xfr,Vfr,zfr,LT,L_e,Wfr,Qfr,LG,Hfr,Ufr,Jfr,BT,B_e,Yfr,Kfr,BG,Zfr,emr,omr,xT,x_e,rmr,tmr,xG,amr,nmr,smr,kT,k_e,lmr,imr,kG,dmr,cmr,fmr,RT,R_e,mmr,gmr,RG,hmr,pmr,_mr,ST,S_e,umr,bmr,SG,vmr,Tmr,Fmr,PT,P_e,Cmr,Mmr,PG,Emr,ymr,wmr,$T,$_e,Amr,Lmr,$G,Bmr,xmr,kmr,IT,I_e,Rmr,Smr,IG,Pmr,$mr,Imr,jT,j_e,jmr,Nmr,jG,Dmr,qmr,Omr,NT,N_e,Gmr,Xmr,NG,Vmr,zmr,Wmr,DT,D_e,Qmr,Hmr,DG,Umr,Jmr,Ymr,q_e,Kmr,Zmr,kA,tRe,Pc,qT,O_e,RA,egr,G_e,ogr,aRe,wr,SA,rgr,$c,tgr,X_e,agr,ngr,V_e,sgr,lgr,igr,PA,dgr,z_e,cgr,fgr,mgr,Tt,$A,ggr,W_e,hgr,pgr,Ic,_gr,Q_e,ugr,bgr,H_e,vgr,Tgr,Fgr,U_e,Cgr,Mgr,IA,Egr,Fo,jA,ygr,J_e,wgr,Agr,Mn,Lgr,Y_e,Bgr,xgr,K_e,kgr,Rgr,Z_e,Sgr,Pgr,$gr,ae,OT,eue,Igr,jgr,qG,Ngr,Dgr,qgr,GT,oue,Ogr,Ggr,OG,Xgr,Vgr,zgr,XT,rue,Wgr,Qgr,GG,Hgr,Ugr,Jgr,VT,tue,Ygr,Kgr,XG,Zgr,ehr,ohr,zT,aue,rhr,thr,VG,ahr,nhr,shr,WT,nue,lhr,ihr,zG,dhr,chr,fhr,QT,sue,mhr,ghr,WG,hhr,phr,_hr,HT,lue,uhr,bhr,QG,vhr,Thr,Fhr,UT,iue,Chr,Mhr,HG,Ehr,yhr,whr,JT,due,Ahr,Lhr,UG,Bhr,xhr,khr,YT,cue,Rhr,Shr,JG,Phr,$hr,Ihr,KT,fue,jhr,Nhr,YG,Dhr,qhr,Ohr,ZT,mue,Ghr,Xhr,KG,Vhr,zhr,Whr,eF,gue,Qhr,Hhr,ZG,Uhr,Jhr,Yhr,oF,hue,Khr,Zhr,eX,epr,opr,rpr,rF,pue,tpr,apr,oX,npr,spr,lpr,tF,_ue,ipr,dpr,rX,cpr,fpr,mpr,uue,gpr,hpr,NA,nRe,jc,aF,bue,DA,ppr,vue,_pr,sRe,Ar,qA,upr,Nc,bpr,Tue,vpr,Tpr,Fue,Fpr,Cpr,Mpr,OA,Epr,Cue,ypr,wpr,Apr,Ft,GA,Lpr,Mue,Bpr,xpr,Dc,kpr,Eue,Rpr,Spr,yue,Ppr,$pr,Ipr,wue,jpr,Npr,XA,Dpr,Co,VA,qpr,Aue,Opr,Gpr,En,Xpr,Lue,Vpr,zpr,Bue,Wpr,Qpr,xue,Hpr,Upr,Jpr,kue,nF,Rue,Ypr,Kpr,tX,Zpr,e_r,o_r,Sue,r_r,t_r,zA,lRe,qc,sF,Pue,WA,a_r,$ue,n_r,iRe,Lr,QA,s_r,Oc,l_r,Iue,i_r,d_r,jue,c_r,f_r,m_r,HA,g_r,Nue,h_r,p_r,__r,Ct,UA,u_r,Due,b_r,v_r,Gc,T_r,que,F_r,C_r,Oue,M_r,E_r,y_r,Gue,w_r,A_r,JA,L_r,Mo,YA,B_r,Xue,x_r,k_r,yn,R_r,Vue,S_r,P_r,zue,$_r,I_r,Wue,j_r,N_r,D_r,K,lF,Que,q_r,O_r,aX,G_r,X_r,V_r,iF,Hue,z_r,W_r,nX,Q_r,H_r,U_r,dF,Uue,J_r,Y_r,sX,K_r,Z_r,eur,cF,Jue,our,rur,lX,tur,aur,nur,fF,Yue,sur,lur,iX,iur,dur,cur,mF,Kue,fur,mur,dX,gur,hur,pur,gF,Zue,_ur,uur,cX,bur,vur,Tur,hF,e4e,Fur,Cur,fX,Mur,Eur,yur,pF,o4e,wur,Aur,mX,Lur,Bur,xur,_F,r4e,kur,Rur,gX,Sur,Pur,$ur,uF,t4e,Iur,jur,hX,Nur,Dur,qur,bF,a4e,Our,Gur,pX,Xur,Vur,zur,vF,n4e,Wur,Qur,_X,Hur,Uur,Jur,TF,s4e,Yur,Kur,uX,Zur,e4r,o4r,FF,l4e,r4r,t4r,bX,a4r,n4r,s4r,CF,i4e,l4r,i4r,vX,d4r,c4r,f4r,MF,d4e,m4r,g4r,TX,h4r,p4r,_4r,EF,c4e,u4r,b4r,FX,v4r,T4r,F4r,yF,f4e,C4r,M4r,CX,E4r,y4r,w4r,wF,m4e,A4r,L4r,MX,B4r,x4r,k4r,g4e,R4r,S4r,KA,dRe,Xc,AF,h4e,ZA,P4r,p4e,$4r,cRe,Br,eL,I4r,Vc,j4r,_4e,N4r,D4r,u4e,q4r,O4r,G4r,oL,X4r,b4e,V4r,z4r,W4r,Mt,rL,Q4r,v4e,H4r,U4r,zc,J4r,T4e,Y4r,K4r,F4e,Z4r,e1r,o1r,C4e,r1r,t1r,tL,a1r,Eo,aL,n1r,M4e,s1r,l1r,wn,i1r,E4e,d1r,c1r,y4e,f1r,m1r,w4e,g1r,h1r,p1r,Z,LF,A4e,_1r,u1r,EX,b1r,v1r,T1r,BF,L4e,F1r,C1r,yX,M1r,E1r,y1r,xF,B4e,w1r,A1r,wX,L1r,B1r,x1r,kF,x4e,k1r,R1r,AX,S1r,P1r,$1r,RF,k4e,I1r,j1r,LX,N1r,D1r,q1r,SF,R4e,O1r,G1r,BX,X1r,V1r,z1r,PF,S4e,W1r,Q1r,xX,H1r,U1r,J1r,$F,P4e,Y1r,K1r,kX,Z1r,ebr,obr,IF,$4e,rbr,tbr,RX,abr,nbr,sbr,jF,I4e,lbr,ibr,SX,dbr,cbr,fbr,NF,j4e,mbr,gbr,PX,hbr,pbr,_br,DF,N4e,ubr,bbr,$X,vbr,Tbr,Fbr,qF,D4e,Cbr,Mbr,IX,Ebr,ybr,wbr,OF,q4e,Abr,Lbr,jX,Bbr,xbr,kbr,GF,O4e,Rbr,Sbr,NX,Pbr,$br,Ibr,XF,G4e,jbr,Nbr,DX,Dbr,qbr,Obr,VF,X4e,Gbr,Xbr,qX,Vbr,zbr,Wbr,zF,V4e,Qbr,Hbr,OX,Ubr,Jbr,Ybr,WF,z4e,Kbr,Zbr,GX,e2r,o2r,r2r,W4e,t2r,a2r,nL,fRe,Wc,QF,Q4e,sL,n2r,H4e,s2r,mRe,xr,lL,l2r,Qc,i2r,U4e,d2r,c2r,J4e,f2r,m2r,g2r,iL,h2r,Y4e,p2r,_2r,u2r,Et,dL,b2r,K4e,v2r,T2r,Hc,F2r,Z4e,C2r,M2r,e1e,E2r,y2r,w2r,o1e,A2r,L2r,cL,B2r,yo,fL,x2r,r1e,k2r,R2r,An,S2r,t1e,P2r,$2r,a1e,I2r,j2r,n1e,N2r,D2r,q2r,s1e,HF,l1e,O2r,G2r,XX,X2r,V2r,z2r,i1e,W2r,Q2r,mL,gRe,Uc,UF,d1e,gL,H2r,c1e,U2r,hRe,kr,hL,J2r,Jc,Y2r,f1e,K2r,Z2r,m1e,evr,ovr,rvr,pL,tvr,g1e,avr,nvr,svr,yt,_L,lvr,h1e,ivr,dvr,Yc,cvr,p1e,fvr,mvr,_1e,gvr,hvr,pvr,u1e,_vr,uvr,uL,bvr,wo,bL,vvr,b1e,Tvr,Fvr,Ln,Cvr,v1e,Mvr,Evr,T1e,yvr,wvr,F1e,Avr,Lvr,Bvr,C1e,JF,M1e,xvr,kvr,VX,Rvr,Svr,Pvr,E1e,$vr,Ivr,vL,pRe,Kc,YF,y1e,TL,jvr,w1e,Nvr,_Re,Rr,FL,Dvr,Zc,qvr,A1e,Ovr,Gvr,L1e,Xvr,Vvr,zvr,CL,Wvr,B1e,Qvr,Hvr,Uvr,wt,ML,Jvr,x1e,Yvr,Kvr,ef,Zvr,k1e,e6r,o6r,R1e,r6r,t6r,a6r,S1e,n6r,s6r,EL,l6r,Ao,yL,i6r,P1e,d6r,c6r,Bn,f6r,$1e,m6r,g6r,I1e,h6r,p6r,j1e,_6r,u6r,b6r,z,KF,N1e,v6r,T6r,zX,F6r,C6r,M6r,ZF,D1e,E6r,y6r,WX,w6r,A6r,L6r,eC,q1e,B6r,x6r,QX,k6r,R6r,S6r,oC,O1e,P6r,$6r,HX,I6r,j6r,N6r,rC,G1e,D6r,q6r,UX,O6r,G6r,X6r,tC,X1e,V6r,z6r,JX,W6r,Q6r,H6r,aC,V1e,U6r,J6r,YX,Y6r,K6r,Z6r,nC,z1e,e0r,o0r,KX,r0r,t0r,a0r,sC,W1e,n0r,s0r,ZX,l0r,i0r,d0r,lC,Q1e,c0r,f0r,eV,m0r,g0r,h0r,iC,H1e,p0r,_0r,oV,u0r,b0r,v0r,dC,U1e,T0r,F0r,rV,C0r,M0r,E0r,cC,J1e,y0r,w0r,tV,A0r,L0r,B0r,fC,Y1e,x0r,k0r,aV,R0r,S0r,P0r,mC,K1e,$0r,I0r,nV,j0r,N0r,D0r,gC,Z1e,q0r,O0r,sV,G0r,X0r,V0r,hC,ebe,z0r,W0r,lV,Q0r,H0r,U0r,pC,obe,J0r,Y0r,iV,K0r,Z0r,eTr,_C,rbe,oTr,rTr,dV,tTr,aTr,nTr,uC,tbe,sTr,lTr,cV,iTr,dTr,cTr,bC,abe,fTr,mTr,fV,gTr,hTr,pTr,vC,nbe,_Tr,uTr,mV,bTr,vTr,TTr,TC,sbe,FTr,CTr,gV,MTr,ETr,yTr,FC,lbe,wTr,ATr,hV,LTr,BTr,xTr,CC,ibe,kTr,RTr,pV,STr,PTr,$Tr,dbe,ITr,jTr,wL,uRe,of,MC,cbe,AL,NTr,fbe,DTr,bRe,Sr,LL,qTr,rf,OTr,mbe,GTr,XTr,gbe,VTr,zTr,WTr,BL,QTr,hbe,HTr,UTr,JTr,At,xL,YTr,pbe,KTr,ZTr,tf,eFr,_be,oFr,rFr,ube,tFr,aFr,nFr,bbe,sFr,lFr,kL,iFr,Lo,RL,dFr,vbe,cFr,fFr,xn,mFr,Tbe,gFr,hFr,Fbe,pFr,_Fr,Cbe,uFr,bFr,vFr,ca,EC,Mbe,TFr,FFr,_V,CFr,MFr,EFr,yC,Ebe,yFr,wFr,uV,AFr,LFr,BFr,wC,ybe,xFr,kFr,bV,RFr,SFr,PFr,AC,wbe,$Fr,IFr,vV,jFr,NFr,DFr,LC,Abe,qFr,OFr,TV,GFr,XFr,VFr,Lbe,zFr,WFr,SL,vRe,af,BC,Bbe,PL,QFr,xbe,HFr,TRe,Pr,$L,UFr,nf,JFr,kbe,YFr,KFr,Rbe,ZFr,eCr,oCr,IL,rCr,Sbe,tCr,aCr,nCr,Lt,jL,sCr,Pbe,lCr,iCr,sf,dCr,$be,cCr,fCr,Ibe,mCr,gCr,hCr,jbe,pCr,_Cr,NL,uCr,Bo,DL,bCr,Nbe,vCr,TCr,kn,FCr,Dbe,CCr,MCr,qbe,ECr,yCr,Obe,wCr,ACr,LCr,ce,xC,Gbe,BCr,xCr,FV,kCr,RCr,SCr,kC,Xbe,PCr,$Cr,CV,ICr,jCr,NCr,RC,Vbe,DCr,qCr,MV,OCr,GCr,XCr,SC,zbe,VCr,zCr,EV,WCr,QCr,HCr,PC,Wbe,UCr,JCr,yV,YCr,KCr,ZCr,$C,Qbe,eMr,oMr,wV,rMr,tMr,aMr,IC,Hbe,nMr,sMr,AV,lMr,iMr,dMr,jC,Ube,cMr,fMr,LV,mMr,gMr,hMr,NC,Jbe,pMr,_Mr,BV,uMr,bMr,vMr,DC,Ybe,TMr,FMr,xV,CMr,MMr,EMr,qC,Kbe,yMr,wMr,kV,AMr,LMr,BMr,OC,Zbe,xMr,kMr,RV,RMr,SMr,PMr,e2e,$Mr,IMr,qL,FRe,lf,GC,o2e,OL,jMr,r2e,NMr,CRe,$r,GL,DMr,df,qMr,t2e,OMr,GMr,a2e,XMr,VMr,zMr,XL,WMr,n2e,QMr,HMr,UMr,Bt,VL,JMr,s2e,YMr,KMr,cf,ZMr,l2e,eEr,oEr,i2e,rEr,tEr,aEr,d2e,nEr,sEr,zL,lEr,xo,WL,iEr,c2e,dEr,cEr,Rn,fEr,f2e,mEr,gEr,m2e,hEr,pEr,g2e,_Er,uEr,bEr,be,XC,h2e,vEr,TEr,SV,FEr,CEr,MEr,VC,p2e,EEr,yEr,PV,wEr,AEr,LEr,zC,_2e,BEr,xEr,$V,kEr,REr,SEr,WC,u2e,PEr,$Er,IV,IEr,jEr,NEr,QC,b2e,DEr,qEr,jV,OEr,GEr,XEr,HC,v2e,VEr,zEr,NV,WEr,QEr,HEr,UC,T2e,UEr,JEr,DV,YEr,KEr,ZEr,JC,F2e,e3r,o3r,qV,r3r,t3r,a3r,YC,C2e,n3r,s3r,OV,l3r,i3r,d3r,KC,M2e,c3r,f3r,GV,m3r,g3r,h3r,E2e,p3r,_3r,QL,MRe,ff,ZC,y2e,HL,u3r,w2e,b3r,ERe,Ir,UL,v3r,mf,T3r,A2e,F3r,C3r,L2e,M3r,E3r,y3r,JL,w3r,B2e,A3r,L3r,B3r,xt,YL,x3r,x2e,k3r,R3r,gf,S3r,k2e,P3r,$3r,R2e,I3r,j3r,N3r,S2e,D3r,q3r,KL,O3r,ko,ZL,G3r,P2e,X3r,V3r,Sn,z3r,$2e,W3r,Q3r,I2e,H3r,U3r,j2e,J3r,Y3r,K3r,Ee,eM,N2e,Z3r,e5r,XV,o5r,r5r,t5r,oM,D2e,a5r,n5r,VV,s5r,l5r,i5r,rM,q2e,d5r,c5r,zV,f5r,m5r,g5r,tM,O2e,h5r,p5r,WV,_5r,u5r,b5r,aM,G2e,v5r,T5r,QV,F5r,C5r,M5r,nM,X2e,E5r,y5r,HV,w5r,A5r,L5r,sM,V2e,B5r,x5r,UV,k5r,R5r,S5r,lM,z2e,P5r,$5r,JV,I5r,j5r,N5r,iM,W2e,D5r,q5r,YV,O5r,G5r,X5r,Q2e,V5r,z5r,e7,yRe,hf,dM,H2e,o7,W5r,U2e,Q5r,wRe,jr,r7,H5r,pf,U5r,J2e,J5r,Y5r,Y2e,K5r,Z5r,eyr,t7,oyr,K2e,ryr,tyr,ayr,kt,a7,nyr,Z2e,syr,lyr,_f,iyr,eve,dyr,cyr,ove,fyr,myr,gyr,rve,hyr,pyr,n7,_yr,Ro,s7,uyr,tve,byr,vyr,Pn,Tyr,ave,Fyr,Cyr,nve,Myr,Eyr,sve,yyr,wyr,Ayr,ve,cM,lve,Lyr,Byr,KV,xyr,kyr,Ryr,fM,ive,Syr,Pyr,ZV,$yr,Iyr,jyr,mM,dve,Nyr,Dyr,ez,qyr,Oyr,Gyr,gM,cve,Xyr,Vyr,oz,zyr,Wyr,Qyr,hM,fve,Hyr,Uyr,rz,Jyr,Yyr,Kyr,pM,mve,Zyr,ewr,tz,owr,rwr,twr,_M,gve,awr,nwr,az,swr,lwr,iwr,uM,hve,dwr,cwr,nz,fwr,mwr,gwr,bM,pve,hwr,pwr,sz,_wr,uwr,bwr,vM,_ve,vwr,Twr,lz,Fwr,Cwr,Mwr,uve,Ewr,ywr,l7,ARe,uf,TM,bve,i7,wwr,vve,Awr,LRe,Nr,d7,Lwr,bf,Bwr,Tve,xwr,kwr,Fve,Rwr,Swr,Pwr,c7,$wr,Cve,Iwr,jwr,Nwr,Rt,f7,Dwr,Mve,qwr,Owr,vf,Gwr,Eve,Xwr,Vwr,yve,zwr,Wwr,Qwr,wve,Hwr,Uwr,m7,Jwr,So,g7,Ywr,Ave,Kwr,Zwr,$n,eAr,Lve,oAr,rAr,Bve,tAr,aAr,xve,nAr,sAr,lAr,Te,FM,kve,iAr,dAr,iz,cAr,fAr,mAr,CM,Rve,gAr,hAr,dz,pAr,_Ar,uAr,MM,Sve,bAr,vAr,cz,TAr,FAr,CAr,EM,Pve,MAr,EAr,fz,yAr,wAr,AAr,yM,$ve,LAr,BAr,mz,xAr,kAr,RAr,wM,Ive,SAr,PAr,gz,$Ar,IAr,jAr,AM,jve,NAr,DAr,hz,qAr,OAr,GAr,LM,Nve,XAr,VAr,pz,zAr,WAr,QAr,BM,Dve,HAr,UAr,_z,JAr,YAr,KAr,xM,qve,ZAr,eLr,uz,oLr,rLr,tLr,Ove,aLr,nLr,h7,BRe,Tf,kM,Gve,p7,sLr,Xve,lLr,xRe,Dr,_7,iLr,Ff,dLr,Vve,cLr,fLr,zve,mLr,gLr,hLr,u7,pLr,Wve,_Lr,uLr,bLr,St,b7,vLr,Qve,TLr,FLr,Cf,CLr,Hve,MLr,ELr,Uve,yLr,wLr,ALr,Jve,LLr,BLr,v7,xLr,Po,T7,kLr,Yve,RLr,SLr,In,PLr,Kve,$Lr,ILr,Zve,jLr,NLr,e6e,DLr,qLr,OLr,Se,RM,o6e,GLr,XLr,bz,VLr,zLr,WLr,SM,r6e,QLr,HLr,vz,ULr,JLr,YLr,PM,t6e,KLr,ZLr,Tz,e7r,o7r,r7r,$M,a6e,t7r,a7r,Fz,n7r,s7r,l7r,IM,n6e,i7r,d7r,Cz,c7r,f7r,m7r,jM,s6e,g7r,h7r,Mz,p7r,_7r,u7r,NM,l6e,b7r,v7r,Ez,T7r,F7r,C7r,DM,i6e,M7r,E7r,yz,y7r,w7r,A7r,d6e,L7r,B7r,F7,kRe,Mf,qM,c6e,C7,x7r,f6e,k7r,RRe,qr,M7,R7r,Ef,S7r,m6e,P7r,$7r,g6e,I7r,j7r,N7r,E7,D7r,h6e,q7r,O7r,G7r,Pt,y7,X7r,p6e,V7r,z7r,yf,W7r,_6e,Q7r,H7r,u6e,U7r,J7r,Y7r,b6e,K7r,Z7r,w7,e8r,$o,A7,o8r,v6e,r8r,t8r,jn,a8r,T6e,n8r,s8r,F6e,l8r,i8r,C6e,d8r,c8r,f8r,Pe,OM,M6e,m8r,g8r,wz,h8r,p8r,_8r,GM,E6e,u8r,b8r,Az,v8r,T8r,F8r,XM,y6e,C8r,M8r,Lz,E8r,y8r,w8r,VM,w6e,A8r,L8r,Bz,B8r,x8r,k8r,zM,A6e,R8r,S8r,xz,P8r,$8r,I8r,WM,L6e,j8r,N8r,kz,D8r,q8r,O8r,QM,B6e,G8r,X8r,Rz,V8r,z8r,W8r,HM,x6e,Q8r,H8r,Sz,U8r,J8r,Y8r,k6e,K8r,Z8r,L7,SRe,wf,UM,R6e,B7,e9r,S6e,o9r,PRe,Or,x7,r9r,Af,t9r,P6e,a9r,n9r,$6e,s9r,l9r,i9r,k7,d9r,I6e,c9r,f9r,m9r,$t,R7,g9r,j6e,h9r,p9r,Lf,_9r,N6e,u9r,b9r,D6e,v9r,T9r,F9r,q6e,C9r,M9r,S7,E9r,Io,P7,y9r,O6e,w9r,A9r,Nn,L9r,G6e,B9r,x9r,X6e,k9r,R9r,V6e,S9r,P9r,$9r,z6e,JM,W6e,I9r,j9r,Pz,N9r,D9r,q9r,Q6e,O9r,G9r,$7,$Re,Bf,YM,H6e,I7,X9r,U6e,V9r,IRe,Gr,j7,z9r,xf,W9r,J6e,Q9r,H9r,Y6e,U9r,J9r,Y9r,N7,K9r,K6e,Z9r,eBr,oBr,It,D7,rBr,Z6e,tBr,aBr,kf,nBr,e0e,sBr,lBr,o0e,iBr,dBr,cBr,r0e,fBr,mBr,q7,gBr,jo,O7,hBr,t0e,pBr,_Br,Dn,uBr,a0e,bBr,vBr,n0e,TBr,FBr,s0e,CBr,MBr,EBr,G7,KM,l0e,yBr,wBr,$z,ABr,LBr,BBr,ZM,i0e,xBr,kBr,Iz,RBr,SBr,PBr,d0e,$Br,IBr,X7,jRe,Rf,eE,c0e,V7,jBr,f0e,NBr,NRe,Xr,z7,DBr,Sf,qBr,m0e,OBr,GBr,g0e,XBr,VBr,zBr,W7,WBr,h0e,QBr,HBr,UBr,jt,Q7,JBr,p0e,YBr,KBr,Pf,ZBr,_0e,exr,oxr,u0e,rxr,txr,axr,b0e,nxr,sxr,H7,lxr,No,U7,ixr,v0e,dxr,cxr,qn,fxr,T0e,mxr,gxr,F0e,hxr,pxr,C0e,_xr,uxr,bxr,M0e,oE,E0e,vxr,Txr,jz,Fxr,Cxr,Mxr,y0e,Exr,yxr,J7,DRe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),n3=new X({}),s3=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new wxr({props:{warning:"&lcub;true}",$$slots:{default:[vFt]},$$scope:{ctx:Ii}}}),l3=new X({}),i3=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/configuration_auto.py#L533"}}),f3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/configuration_auto.py#L556",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),m3=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),g3=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/configuration_auto.py#L678",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),h3=new X({}),p3=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/tokenization_auto.py#L352"}}),b3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16044/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),v3=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),T3=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),F3=new X({}),C3=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),y3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16044/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Lh=new wxr({props:{$$slots:{default:[TFt]},$$scope:{ctx:Ii}}}),w3=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),A3=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),L3=new X({}),B3=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/processing_auto.py#L71"}}),R3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Dh=new wxr({props:{$$slots:{default:[FFt]},$$scope:{ctx:Ii}}}),S3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),P3=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),$3=new X({}),I3=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L701"}}),N3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),D3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),q3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G3=new X({}),X3=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L708"}}),z3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),W3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Q3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U3=new X({}),J3=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L723"}}),K3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),e5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r5=new X({}),t5=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L730"}}),n5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),s5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),l5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d5=new X({}),c5=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L737"}}),m5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),g5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),h5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_5=new X({}),u5=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L746"}}),v5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),T5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),F5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M5=new X({}),E5=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L780"}}),w5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),A5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),L5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x5=new X({}),k5=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L787"}}),S5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),P5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),$5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j5=new X({}),N5=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L773"}}),q5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),O5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),G5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V5=new X({}),z5=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L755"}}),Q5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),H5=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),U5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J5=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y5=new X({}),K5=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L762"}}),ey=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L796"}}),ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),dy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new X({}),my=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L835"}}),hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),_y=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),vy=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L842"}}),Fy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),My=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),wy=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L865"}}),Ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),Sy=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L849"}}),$y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),qy=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L856"}}),Gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Vy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Hy=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L874"}}),Jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new X({}),ow=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L881"}}),tw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new X({}),iw=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L828"}}),cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new X({}),pw=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L803"}}),uw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),vw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),Cw=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L810"}}),Ew=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),xw=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_auto.py#L819"}}),Rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new X({}),jw=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),Dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Ow=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new X({}),Vw=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Ww=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Hw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new X({}),Yw=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),Zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),oA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),sA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),iA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new X({}),mA=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),hA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),_A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new X({}),vA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),FA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),MA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),wA=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),LA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),xA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),SA=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),$A=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),jA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new X({}),qA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),GA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),VA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),QA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),UA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),YA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),eL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),rL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),aL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),dL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),fL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),_L=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),uL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),bL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new X({}),FL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),ML=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),EL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),yL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new X({}),LL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),xL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),kL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),RL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),jL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),DL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new X({}),GL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),VL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),zL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),WL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),YL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),KL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),ZL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o7=new X({}),r7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),a7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),n7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),s7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i7=new X({}),d7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),f7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),m7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),g7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p7=new X({}),_7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),b7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),v7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),T7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C7=new X({}),M7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),y7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),w7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),A7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B7=new X({}),x7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),R7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),S7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),P7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I7=new X({}),j7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),D7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),q7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),O7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V7=new X({}),z7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Q7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),H7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),U7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16044/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16044/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16044/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),pe=a("a"),io=a("span"),f(fe.$$.fragment),Me=l(),Vo=a("span"),ji=o("Auto Classes"),If=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),o3=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),qi=o("Instantiating one of "),On=a("a"),r3=o("AutoConfig"),Gn=o(", "),Xn=a("a"),t3=o("AutoModel"),Oi=o(`, and
`),Vn=a("a"),a3=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Nf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),H8=o("will create a model that is an instance of "),Xi=a("a"),U8=o("BertModel"),J8=o("."),zo=l(),Oa=a("p"),Y8=o("There is one class of "),Df=a("code"),K8=o("AutoModel"),KPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Nxe=l(),Vi=a("h2"),qf=a("a"),xQ=a("span"),f(n3.$$.fragment),ZPe=l(),kQ=a("span"),e$e=o("Extending the Auto Classes"),Dxe=l(),zn=a("p"),o$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),RQ=a("code"),r$e=o("NewModel"),t$e=o(", make sure you have a "),SQ=a("code"),a$e=o("NewModelConfig"),n$e=o(` then you can add those to the auto
classes like this:`),qxe=l(),f(s3.$$.fragment),Oxe=l(),Z8=a("p"),s$e=o("You will then be able to use the auto classes like you would usually do!"),Gxe=l(),f(Of.$$.fragment),Xxe=l(),zi=a("h2"),Gf=a("a"),PQ=a("span"),f(l3.$$.fragment),l$e=l(),$Q=a("span"),i$e=o("AutoConfig"),Vxe=l(),Wo=a("div"),f(i3.$$.fragment),d$e=l(),d3=a("p"),c$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),e9=a("a"),f$e=o("from_pretrained()"),m$e=o(" class method."),g$e=l(),c3=a("p"),h$e=o("This class cannot be instantiated directly using "),IQ=a("code"),p$e=o("__init__()"),_$e=o(" (throws an error)."),u$e=l(),mo=a("div"),f(f3.$$.fragment),b$e=l(),jQ=a("p"),v$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),T$e=l(),Wi=a("p"),F$e=o("The configuration class to instantiate is selected based on the "),NQ=a("code"),C$e=o("model_type"),M$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),DQ=a("code"),E$e=o("pretrained_model_name_or_path"),y$e=o(":"),w$e=l(),v=a("ul"),Xf=a("li"),qQ=a("strong"),A$e=o("albert"),L$e=o(" \u2014 "),o9=a("a"),B$e=o("AlbertConfig"),x$e=o(" (ALBERT model)"),k$e=l(),Vf=a("li"),OQ=a("strong"),R$e=o("bart"),S$e=o(" \u2014 "),r9=a("a"),P$e=o("BartConfig"),$$e=o(" (BART model)"),I$e=l(),zf=a("li"),GQ=a("strong"),j$e=o("beit"),N$e=o(" \u2014 "),t9=a("a"),D$e=o("BeitConfig"),q$e=o(" (BEiT model)"),O$e=l(),Wf=a("li"),XQ=a("strong"),G$e=o("bert"),X$e=o(" \u2014 "),a9=a("a"),V$e=o("BertConfig"),z$e=o(" (BERT model)"),W$e=l(),Qf=a("li"),VQ=a("strong"),Q$e=o("bert-generation"),H$e=o(" \u2014 "),n9=a("a"),U$e=o("BertGenerationConfig"),J$e=o(" (Bert Generation model)"),Y$e=l(),Hf=a("li"),zQ=a("strong"),K$e=o("big_bird"),Z$e=o(" \u2014 "),s9=a("a"),eIe=o("BigBirdConfig"),oIe=o(" (BigBird model)"),rIe=l(),Uf=a("li"),WQ=a("strong"),tIe=o("bigbird_pegasus"),aIe=o(" \u2014 "),l9=a("a"),nIe=o("BigBirdPegasusConfig"),sIe=o(" (BigBirdPegasus model)"),lIe=l(),Jf=a("li"),QQ=a("strong"),iIe=o("blenderbot"),dIe=o(" \u2014 "),i9=a("a"),cIe=o("BlenderbotConfig"),fIe=o(" (Blenderbot model)"),mIe=l(),Yf=a("li"),HQ=a("strong"),gIe=o("blenderbot-small"),hIe=o(" \u2014 "),d9=a("a"),pIe=o("BlenderbotSmallConfig"),_Ie=o(" (BlenderbotSmall model)"),uIe=l(),Kf=a("li"),UQ=a("strong"),bIe=o("camembert"),vIe=o(" \u2014 "),c9=a("a"),TIe=o("CamembertConfig"),FIe=o(" (CamemBERT model)"),CIe=l(),Zf=a("li"),JQ=a("strong"),MIe=o("canine"),EIe=o(" \u2014 "),f9=a("a"),yIe=o("CanineConfig"),wIe=o(" (Canine model)"),AIe=l(),em=a("li"),YQ=a("strong"),LIe=o("clip"),BIe=o(" \u2014 "),m9=a("a"),xIe=o("CLIPConfig"),kIe=o(" (CLIP model)"),RIe=l(),om=a("li"),KQ=a("strong"),SIe=o("convbert"),PIe=o(" \u2014 "),g9=a("a"),$Ie=o("ConvBertConfig"),IIe=o(" (ConvBERT model)"),jIe=l(),rm=a("li"),ZQ=a("strong"),NIe=o("convnext"),DIe=o(" \u2014 "),h9=a("a"),qIe=o("ConvNextConfig"),OIe=o(" (ConvNext model)"),GIe=l(),tm=a("li"),eH=a("strong"),XIe=o("ctrl"),VIe=o(" \u2014 "),p9=a("a"),zIe=o("CTRLConfig"),WIe=o(" (CTRL model)"),QIe=l(),am=a("li"),oH=a("strong"),HIe=o("data2vec-audio"),UIe=o(" \u2014 "),_9=a("a"),JIe=o("Data2VecAudioConfig"),YIe=o(" (Data2VecAudio model)"),KIe=l(),nm=a("li"),rH=a("strong"),ZIe=o("data2vec-text"),eje=o(" \u2014 "),u9=a("a"),oje=o("Data2VecTextConfig"),rje=o(" (Data2VecText model)"),tje=l(),sm=a("li"),tH=a("strong"),aje=o("deberta"),nje=o(" \u2014 "),b9=a("a"),sje=o("DebertaConfig"),lje=o(" (DeBERTa model)"),ije=l(),lm=a("li"),aH=a("strong"),dje=o("deberta-v2"),cje=o(" \u2014 "),v9=a("a"),fje=o("DebertaV2Config"),mje=o(" (DeBERTa-v2 model)"),gje=l(),im=a("li"),nH=a("strong"),hje=o("deit"),pje=o(" \u2014 "),T9=a("a"),_je=o("DeiTConfig"),uje=o(" (DeiT model)"),bje=l(),dm=a("li"),sH=a("strong"),vje=o("detr"),Tje=o(" \u2014 "),F9=a("a"),Fje=o("DetrConfig"),Cje=o(" (DETR model)"),Mje=l(),cm=a("li"),lH=a("strong"),Eje=o("distilbert"),yje=o(" \u2014 "),C9=a("a"),wje=o("DistilBertConfig"),Aje=o(" (DistilBERT model)"),Lje=l(),fm=a("li"),iH=a("strong"),Bje=o("dpr"),xje=o(" \u2014 "),M9=a("a"),kje=o("DPRConfig"),Rje=o(" (DPR model)"),Sje=l(),mm=a("li"),dH=a("strong"),Pje=o("electra"),$je=o(" \u2014 "),E9=a("a"),Ije=o("ElectraConfig"),jje=o(" (ELECTRA model)"),Nje=l(),gm=a("li"),cH=a("strong"),Dje=o("encoder-decoder"),qje=o(" \u2014 "),y9=a("a"),Oje=o("EncoderDecoderConfig"),Gje=o(" (Encoder decoder model)"),Xje=l(),hm=a("li"),fH=a("strong"),Vje=o("flaubert"),zje=o(" \u2014 "),w9=a("a"),Wje=o("FlaubertConfig"),Qje=o(" (FlauBERT model)"),Hje=l(),pm=a("li"),mH=a("strong"),Uje=o("fnet"),Jje=o(" \u2014 "),A9=a("a"),Yje=o("FNetConfig"),Kje=o(" (FNet model)"),Zje=l(),_m=a("li"),gH=a("strong"),eNe=o("fsmt"),oNe=o(" \u2014 "),L9=a("a"),rNe=o("FSMTConfig"),tNe=o(" (FairSeq Machine-Translation model)"),aNe=l(),um=a("li"),hH=a("strong"),nNe=o("funnel"),sNe=o(" \u2014 "),B9=a("a"),lNe=o("FunnelConfig"),iNe=o(" (Funnel Transformer model)"),dNe=l(),bm=a("li"),pH=a("strong"),cNe=o("gpt2"),fNe=o(" \u2014 "),x9=a("a"),mNe=o("GPT2Config"),gNe=o(" (OpenAI GPT-2 model)"),hNe=l(),vm=a("li"),_H=a("strong"),pNe=o("gpt_neo"),_Ne=o(" \u2014 "),k9=a("a"),uNe=o("GPTNeoConfig"),bNe=o(" (GPT Neo model)"),vNe=l(),Tm=a("li"),uH=a("strong"),TNe=o("gptj"),FNe=o(" \u2014 "),R9=a("a"),CNe=o("GPTJConfig"),MNe=o(" (GPT-J model)"),ENe=l(),Fm=a("li"),bH=a("strong"),yNe=o("hubert"),wNe=o(" \u2014 "),S9=a("a"),ANe=o("HubertConfig"),LNe=o(" (Hubert model)"),BNe=l(),Cm=a("li"),vH=a("strong"),xNe=o("ibert"),kNe=o(" \u2014 "),P9=a("a"),RNe=o("IBertConfig"),SNe=o(" (I-BERT model)"),PNe=l(),Mm=a("li"),TH=a("strong"),$Ne=o("imagegpt"),INe=o(" \u2014 "),$9=a("a"),jNe=o("ImageGPTConfig"),NNe=o(" (ImageGPT model)"),DNe=l(),Em=a("li"),FH=a("strong"),qNe=o("layoutlm"),ONe=o(" \u2014 "),I9=a("a"),GNe=o("LayoutLMConfig"),XNe=o(" (LayoutLM model)"),VNe=l(),ym=a("li"),CH=a("strong"),zNe=o("layoutlmv2"),WNe=o(" \u2014 "),j9=a("a"),QNe=o("LayoutLMv2Config"),HNe=o(" (LayoutLMv2 model)"),UNe=l(),wm=a("li"),MH=a("strong"),JNe=o("led"),YNe=o(" \u2014 "),N9=a("a"),KNe=o("LEDConfig"),ZNe=o(" (LED model)"),eDe=l(),Am=a("li"),EH=a("strong"),oDe=o("longformer"),rDe=o(" \u2014 "),D9=a("a"),tDe=o("LongformerConfig"),aDe=o(" (Longformer model)"),nDe=l(),Lm=a("li"),yH=a("strong"),sDe=o("luke"),lDe=o(" \u2014 "),q9=a("a"),iDe=o("LukeConfig"),dDe=o(" (LUKE model)"),cDe=l(),Bm=a("li"),wH=a("strong"),fDe=o("lxmert"),mDe=o(" \u2014 "),O9=a("a"),gDe=o("LxmertConfig"),hDe=o(" (LXMERT model)"),pDe=l(),xm=a("li"),AH=a("strong"),_De=o("m2m_100"),uDe=o(" \u2014 "),G9=a("a"),bDe=o("M2M100Config"),vDe=o(" (M2M100 model)"),TDe=l(),km=a("li"),LH=a("strong"),FDe=o("marian"),CDe=o(" \u2014 "),X9=a("a"),MDe=o("MarianConfig"),EDe=o(" (Marian model)"),yDe=l(),Rm=a("li"),BH=a("strong"),wDe=o("maskformer"),ADe=o(" \u2014 "),V9=a("a"),LDe=o("MaskFormerConfig"),BDe=o(" (MaskFormer model)"),xDe=l(),Sm=a("li"),xH=a("strong"),kDe=o("mbart"),RDe=o(" \u2014 "),z9=a("a"),SDe=o("MBartConfig"),PDe=o(" (mBART model)"),$De=l(),Pm=a("li"),kH=a("strong"),IDe=o("megatron-bert"),jDe=o(" \u2014 "),W9=a("a"),NDe=o("MegatronBertConfig"),DDe=o(" (MegatronBert model)"),qDe=l(),$m=a("li"),RH=a("strong"),ODe=o("mobilebert"),GDe=o(" \u2014 "),Q9=a("a"),XDe=o("MobileBertConfig"),VDe=o(" (MobileBERT model)"),zDe=l(),Im=a("li"),SH=a("strong"),WDe=o("mpnet"),QDe=o(" \u2014 "),H9=a("a"),HDe=o("MPNetConfig"),UDe=o(" (MPNet model)"),JDe=l(),jm=a("li"),PH=a("strong"),YDe=o("mt5"),KDe=o(" \u2014 "),U9=a("a"),ZDe=o("MT5Config"),eqe=o(" (mT5 model)"),oqe=l(),Nm=a("li"),$H=a("strong"),rqe=o("nystromformer"),tqe=o(" \u2014 "),J9=a("a"),aqe=o("NystromformerConfig"),nqe=o(" (Nystromformer model)"),sqe=l(),Dm=a("li"),IH=a("strong"),lqe=o("openai-gpt"),iqe=o(" \u2014 "),Y9=a("a"),dqe=o("OpenAIGPTConfig"),cqe=o(" (OpenAI GPT model)"),fqe=l(),qm=a("li"),jH=a("strong"),mqe=o("pegasus"),gqe=o(" \u2014 "),K9=a("a"),hqe=o("PegasusConfig"),pqe=o(" (Pegasus model)"),_qe=l(),Om=a("li"),NH=a("strong"),uqe=o("perceiver"),bqe=o(" \u2014 "),Z9=a("a"),vqe=o("PerceiverConfig"),Tqe=o(" (Perceiver model)"),Fqe=l(),Gm=a("li"),DH=a("strong"),Cqe=o("plbart"),Mqe=o(" \u2014 "),eB=a("a"),Eqe=o("PLBartConfig"),yqe=o(" (PLBart model)"),wqe=l(),Xm=a("li"),qH=a("strong"),Aqe=o("poolformer"),Lqe=o(" \u2014 "),oB=a("a"),Bqe=o("PoolFormerConfig"),xqe=o(" (PoolFormer model)"),kqe=l(),Vm=a("li"),OH=a("strong"),Rqe=o("prophetnet"),Sqe=o(" \u2014 "),rB=a("a"),Pqe=o("ProphetNetConfig"),$qe=o(" (ProphetNet model)"),Iqe=l(),zm=a("li"),GH=a("strong"),jqe=o("qdqbert"),Nqe=o(" \u2014 "),tB=a("a"),Dqe=o("QDQBertConfig"),qqe=o(" (QDQBert model)"),Oqe=l(),Wm=a("li"),XH=a("strong"),Gqe=o("rag"),Xqe=o(" \u2014 "),aB=a("a"),Vqe=o("RagConfig"),zqe=o(" (RAG model)"),Wqe=l(),Qm=a("li"),VH=a("strong"),Qqe=o("realm"),Hqe=o(" \u2014 "),nB=a("a"),Uqe=o("RealmConfig"),Jqe=o(" (Realm model)"),Yqe=l(),Hm=a("li"),zH=a("strong"),Kqe=o("reformer"),Zqe=o(" \u2014 "),sB=a("a"),eOe=o("ReformerConfig"),oOe=o(" (Reformer model)"),rOe=l(),Um=a("li"),WH=a("strong"),tOe=o("rembert"),aOe=o(" \u2014 "),lB=a("a"),nOe=o("RemBertConfig"),sOe=o(" (RemBERT model)"),lOe=l(),Jm=a("li"),QH=a("strong"),iOe=o("resnet"),dOe=o(" \u2014 "),iB=a("a"),cOe=o("ResNetConfig"),fOe=o(" (ResNet model)"),mOe=l(),Ym=a("li"),HH=a("strong"),gOe=o("retribert"),hOe=o(" \u2014 "),dB=a("a"),pOe=o("RetriBertConfig"),_Oe=o(" (RetriBERT model)"),uOe=l(),Km=a("li"),UH=a("strong"),bOe=o("roberta"),vOe=o(" \u2014 "),cB=a("a"),TOe=o("RobertaConfig"),FOe=o(" (RoBERTa model)"),COe=l(),Zm=a("li"),JH=a("strong"),MOe=o("roformer"),EOe=o(" \u2014 "),fB=a("a"),yOe=o("RoFormerConfig"),wOe=o(" (RoFormer model)"),AOe=l(),eg=a("li"),YH=a("strong"),LOe=o("segformer"),BOe=o(" \u2014 "),mB=a("a"),xOe=o("SegformerConfig"),kOe=o(" (SegFormer model)"),ROe=l(),og=a("li"),KH=a("strong"),SOe=o("sew"),POe=o(" \u2014 "),gB=a("a"),$Oe=o("SEWConfig"),IOe=o(" (SEW model)"),jOe=l(),rg=a("li"),ZH=a("strong"),NOe=o("sew-d"),DOe=o(" \u2014 "),hB=a("a"),qOe=o("SEWDConfig"),OOe=o(" (SEW-D model)"),GOe=l(),tg=a("li"),eU=a("strong"),XOe=o("speech-encoder-decoder"),VOe=o(" \u2014 "),pB=a("a"),zOe=o("SpeechEncoderDecoderConfig"),WOe=o(" (Speech Encoder decoder model)"),QOe=l(),ag=a("li"),oU=a("strong"),HOe=o("speech_to_text"),UOe=o(" \u2014 "),_B=a("a"),JOe=o("Speech2TextConfig"),YOe=o(" (Speech2Text model)"),KOe=l(),ng=a("li"),rU=a("strong"),ZOe=o("speech_to_text_2"),eGe=o(" \u2014 "),uB=a("a"),oGe=o("Speech2Text2Config"),rGe=o(" (Speech2Text2 model)"),tGe=l(),sg=a("li"),tU=a("strong"),aGe=o("splinter"),nGe=o(" \u2014 "),bB=a("a"),sGe=o("SplinterConfig"),lGe=o(" (Splinter model)"),iGe=l(),lg=a("li"),aU=a("strong"),dGe=o("squeezebert"),cGe=o(" \u2014 "),vB=a("a"),fGe=o("SqueezeBertConfig"),mGe=o(" (SqueezeBERT model)"),gGe=l(),ig=a("li"),nU=a("strong"),hGe=o("swin"),pGe=o(" \u2014 "),TB=a("a"),_Ge=o("SwinConfig"),uGe=o(" (Swin model)"),bGe=l(),dg=a("li"),sU=a("strong"),vGe=o("t5"),TGe=o(" \u2014 "),FB=a("a"),FGe=o("T5Config"),CGe=o(" (T5 model)"),MGe=l(),cg=a("li"),lU=a("strong"),EGe=o("tapas"),yGe=o(" \u2014 "),CB=a("a"),wGe=o("TapasConfig"),AGe=o(" (TAPAS model)"),LGe=l(),fg=a("li"),iU=a("strong"),BGe=o("transfo-xl"),xGe=o(" \u2014 "),MB=a("a"),kGe=o("TransfoXLConfig"),RGe=o(" (Transformer-XL model)"),SGe=l(),mg=a("li"),dU=a("strong"),PGe=o("trocr"),$Ge=o(" \u2014 "),EB=a("a"),IGe=o("TrOCRConfig"),jGe=o(" (TrOCR model)"),NGe=l(),gg=a("li"),cU=a("strong"),DGe=o("unispeech"),qGe=o(" \u2014 "),yB=a("a"),OGe=o("UniSpeechConfig"),GGe=o(" (UniSpeech model)"),XGe=l(),hg=a("li"),fU=a("strong"),VGe=o("unispeech-sat"),zGe=o(" \u2014 "),wB=a("a"),WGe=o("UniSpeechSatConfig"),QGe=o(" (UniSpeechSat model)"),HGe=l(),pg=a("li"),mU=a("strong"),UGe=o("van"),JGe=o(" \u2014 "),AB=a("a"),YGe=o("VanConfig"),KGe=o(" (VAN model)"),ZGe=l(),_g=a("li"),gU=a("strong"),eXe=o("vilt"),oXe=o(" \u2014 "),LB=a("a"),rXe=o("ViltConfig"),tXe=o(" (ViLT model)"),aXe=l(),ug=a("li"),hU=a("strong"),nXe=o("vision-encoder-decoder"),sXe=o(" \u2014 "),BB=a("a"),lXe=o("VisionEncoderDecoderConfig"),iXe=o(" (Vision Encoder decoder model)"),dXe=l(),bg=a("li"),pU=a("strong"),cXe=o("vision-text-dual-encoder"),fXe=o(" \u2014 "),xB=a("a"),mXe=o("VisionTextDualEncoderConfig"),gXe=o(" (VisionTextDualEncoder model)"),hXe=l(),vg=a("li"),_U=a("strong"),pXe=o("visual_bert"),_Xe=o(" \u2014 "),kB=a("a"),uXe=o("VisualBertConfig"),bXe=o(" (VisualBert model)"),vXe=l(),Tg=a("li"),uU=a("strong"),TXe=o("vit"),FXe=o(" \u2014 "),RB=a("a"),CXe=o("ViTConfig"),MXe=o(" (ViT model)"),EXe=l(),Fg=a("li"),bU=a("strong"),yXe=o("vit_mae"),wXe=o(" \u2014 "),SB=a("a"),AXe=o("ViTMAEConfig"),LXe=o(" (ViTMAE model)"),BXe=l(),Cg=a("li"),vU=a("strong"),xXe=o("wav2vec2"),kXe=o(" \u2014 "),PB=a("a"),RXe=o("Wav2Vec2Config"),SXe=o(" (Wav2Vec2 model)"),PXe=l(),Mg=a("li"),TU=a("strong"),$Xe=o("wavlm"),IXe=o(" \u2014 "),$B=a("a"),jXe=o("WavLMConfig"),NXe=o(" (WavLM model)"),DXe=l(),Eg=a("li"),FU=a("strong"),qXe=o("xglm"),OXe=o(" \u2014 "),IB=a("a"),GXe=o("XGLMConfig"),XXe=o(" (XGLM model)"),VXe=l(),yg=a("li"),CU=a("strong"),zXe=o("xlm"),WXe=o(" \u2014 "),jB=a("a"),QXe=o("XLMConfig"),HXe=o(" (XLM model)"),UXe=l(),wg=a("li"),MU=a("strong"),JXe=o("xlm-prophetnet"),YXe=o(" \u2014 "),NB=a("a"),KXe=o("XLMProphetNetConfig"),ZXe=o(" (XLMProphetNet model)"),eVe=l(),Ag=a("li"),EU=a("strong"),oVe=o("xlm-roberta"),rVe=o(" \u2014 "),DB=a("a"),tVe=o("XLMRobertaConfig"),aVe=o(" (XLM-RoBERTa model)"),nVe=l(),Lg=a("li"),yU=a("strong"),sVe=o("xlm-roberta-xl"),lVe=o(" \u2014 "),qB=a("a"),iVe=o("XLMRobertaXLConfig"),dVe=o(" (XLM-RoBERTa-XL model)"),cVe=l(),Bg=a("li"),wU=a("strong"),fVe=o("xlnet"),mVe=o(" \u2014 "),OB=a("a"),gVe=o("XLNetConfig"),hVe=o(" (XLNet model)"),pVe=l(),xg=a("li"),AU=a("strong"),_Ve=o("yoso"),uVe=o(" \u2014 "),GB=a("a"),bVe=o("YosoConfig"),vVe=o(" (YOSO model)"),TVe=l(),LU=a("p"),FVe=o("Examples:"),CVe=l(),f(m3.$$.fragment),MVe=l(),kg=a("div"),f(g3.$$.fragment),EVe=l(),BU=a("p"),yVe=o("Register a new configuration for this class."),zxe=l(),Qi=a("h2"),Rg=a("a"),xU=a("span"),f(h3.$$.fragment),wVe=l(),kU=a("span"),AVe=o("AutoTokenizer"),Wxe=l(),Qo=a("div"),f(p3.$$.fragment),LVe=l(),_3=a("p"),BVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),XB=a("a"),xVe=o("AutoTokenizer.from_pretrained()"),kVe=o(" class method."),RVe=l(),u3=a("p"),SVe=o("This class cannot be instantiated directly using "),RU=a("code"),PVe=o("__init__()"),$Ve=o(" (throws an error)."),IVe=l(),go=a("div"),f(b3.$$.fragment),jVe=l(),SU=a("p"),NVe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DVe=l(),Ga=a("p"),qVe=o("The tokenizer class to instantiate is selected based on the "),PU=a("code"),OVe=o("model_type"),GVe=o(` property of the config object (either
passed as an argument or loaded from `),$U=a("code"),XVe=o("pretrained_model_name_or_path"),VVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IU=a("code"),zVe=o("pretrained_model_name_or_path"),WVe=o(":"),QVe=l(),E=a("ul"),Wn=a("li"),jU=a("strong"),HVe=o("albert"),UVe=o(" \u2014 "),VB=a("a"),JVe=o("AlbertTokenizer"),YVe=o(" or "),zB=a("a"),KVe=o("AlbertTokenizerFast"),ZVe=o(" (ALBERT model)"),eze=l(),Qn=a("li"),NU=a("strong"),oze=o("bart"),rze=o(" \u2014 "),WB=a("a"),tze=o("BartTokenizer"),aze=o(" or "),QB=a("a"),nze=o("BartTokenizerFast"),sze=o(" (BART model)"),lze=l(),Hn=a("li"),DU=a("strong"),ize=o("barthez"),dze=o(" \u2014 "),HB=a("a"),cze=o("BarthezTokenizer"),fze=o(" or "),UB=a("a"),mze=o("BarthezTokenizerFast"),gze=o(" (BARThez model)"),hze=l(),Sg=a("li"),qU=a("strong"),pze=o("bartpho"),_ze=o(" \u2014 "),JB=a("a"),uze=o("BartphoTokenizer"),bze=o(" (BARTpho model)"),vze=l(),Un=a("li"),OU=a("strong"),Tze=o("bert"),Fze=o(" \u2014 "),YB=a("a"),Cze=o("BertTokenizer"),Mze=o(" or "),KB=a("a"),Eze=o("BertTokenizerFast"),yze=o(" (BERT model)"),wze=l(),Pg=a("li"),GU=a("strong"),Aze=o("bert-generation"),Lze=o(" \u2014 "),ZB=a("a"),Bze=o("BertGenerationTokenizer"),xze=o(" (Bert Generation model)"),kze=l(),$g=a("li"),XU=a("strong"),Rze=o("bert-japanese"),Sze=o(" \u2014 "),ex=a("a"),Pze=o("BertJapaneseTokenizer"),$ze=o(" (BertJapanese model)"),Ize=l(),Ig=a("li"),VU=a("strong"),jze=o("bertweet"),Nze=o(" \u2014 "),ox=a("a"),Dze=o("BertweetTokenizer"),qze=o(" (Bertweet model)"),Oze=l(),Jn=a("li"),zU=a("strong"),Gze=o("big_bird"),Xze=o(" \u2014 "),rx=a("a"),Vze=o("BigBirdTokenizer"),zze=o(" or "),tx=a("a"),Wze=o("BigBirdTokenizerFast"),Qze=o(" (BigBird model)"),Hze=l(),Yn=a("li"),WU=a("strong"),Uze=o("bigbird_pegasus"),Jze=o(" \u2014 "),ax=a("a"),Yze=o("PegasusTokenizer"),Kze=o(" or "),nx=a("a"),Zze=o("PegasusTokenizerFast"),eWe=o(" (BigBirdPegasus model)"),oWe=l(),Kn=a("li"),QU=a("strong"),rWe=o("blenderbot"),tWe=o(" \u2014 "),sx=a("a"),aWe=o("BlenderbotTokenizer"),nWe=o(" or "),lx=a("a"),sWe=o("BlenderbotTokenizerFast"),lWe=o(" (Blenderbot model)"),iWe=l(),jg=a("li"),HU=a("strong"),dWe=o("blenderbot-small"),cWe=o(" \u2014 "),ix=a("a"),fWe=o("BlenderbotSmallTokenizer"),mWe=o(" (BlenderbotSmall model)"),gWe=l(),Ng=a("li"),UU=a("strong"),hWe=o("byt5"),pWe=o(" \u2014 "),dx=a("a"),_We=o("ByT5Tokenizer"),uWe=o(" (ByT5 model)"),bWe=l(),Zn=a("li"),JU=a("strong"),vWe=o("camembert"),TWe=o(" \u2014 "),cx=a("a"),FWe=o("CamembertTokenizer"),CWe=o(" or "),fx=a("a"),MWe=o("CamembertTokenizerFast"),EWe=o(" (CamemBERT model)"),yWe=l(),Dg=a("li"),YU=a("strong"),wWe=o("canine"),AWe=o(" \u2014 "),mx=a("a"),LWe=o("CanineTokenizer"),BWe=o(" (Canine model)"),xWe=l(),es=a("li"),KU=a("strong"),kWe=o("clip"),RWe=o(" \u2014 "),gx=a("a"),SWe=o("CLIPTokenizer"),PWe=o(" or "),hx=a("a"),$We=o("CLIPTokenizerFast"),IWe=o(" (CLIP model)"),jWe=l(),os=a("li"),ZU=a("strong"),NWe=o("convbert"),DWe=o(" \u2014 "),px=a("a"),qWe=o("ConvBertTokenizer"),OWe=o(" or "),_x=a("a"),GWe=o("ConvBertTokenizerFast"),XWe=o(" (ConvBERT model)"),VWe=l(),rs=a("li"),eJ=a("strong"),zWe=o("cpm"),WWe=o(" \u2014 "),ux=a("a"),QWe=o("CpmTokenizer"),HWe=o(" or "),oJ=a("code"),UWe=o("CpmTokenizerFast"),JWe=o(" (CPM model)"),YWe=l(),qg=a("li"),rJ=a("strong"),KWe=o("ctrl"),ZWe=o(" \u2014 "),bx=a("a"),eQe=o("CTRLTokenizer"),oQe=o(" (CTRL model)"),rQe=l(),ts=a("li"),tJ=a("strong"),tQe=o("deberta"),aQe=o(" \u2014 "),vx=a("a"),nQe=o("DebertaTokenizer"),sQe=o(" or "),Tx=a("a"),lQe=o("DebertaTokenizerFast"),iQe=o(" (DeBERTa model)"),dQe=l(),Og=a("li"),aJ=a("strong"),cQe=o("deberta-v2"),fQe=o(" \u2014 "),Fx=a("a"),mQe=o("DebertaV2Tokenizer"),gQe=o(" (DeBERTa-v2 model)"),hQe=l(),as=a("li"),nJ=a("strong"),pQe=o("distilbert"),_Qe=o(" \u2014 "),Cx=a("a"),uQe=o("DistilBertTokenizer"),bQe=o(" or "),Mx=a("a"),vQe=o("DistilBertTokenizerFast"),TQe=o(" (DistilBERT model)"),FQe=l(),ns=a("li"),sJ=a("strong"),CQe=o("dpr"),MQe=o(" \u2014 "),Ex=a("a"),EQe=o("DPRQuestionEncoderTokenizer"),yQe=o(" or "),yx=a("a"),wQe=o("DPRQuestionEncoderTokenizerFast"),AQe=o(" (DPR model)"),LQe=l(),ss=a("li"),lJ=a("strong"),BQe=o("electra"),xQe=o(" \u2014 "),wx=a("a"),kQe=o("ElectraTokenizer"),RQe=o(" or "),Ax=a("a"),SQe=o("ElectraTokenizerFast"),PQe=o(" (ELECTRA model)"),$Qe=l(),Gg=a("li"),iJ=a("strong"),IQe=o("flaubert"),jQe=o(" \u2014 "),Lx=a("a"),NQe=o("FlaubertTokenizer"),DQe=o(" (FlauBERT model)"),qQe=l(),ls=a("li"),dJ=a("strong"),OQe=o("fnet"),GQe=o(" \u2014 "),Bx=a("a"),XQe=o("FNetTokenizer"),VQe=o(" or "),xx=a("a"),zQe=o("FNetTokenizerFast"),WQe=o(" (FNet model)"),QQe=l(),Xg=a("li"),cJ=a("strong"),HQe=o("fsmt"),UQe=o(" \u2014 "),kx=a("a"),JQe=o("FSMTTokenizer"),YQe=o(" (FairSeq Machine-Translation model)"),KQe=l(),is=a("li"),fJ=a("strong"),ZQe=o("funnel"),eHe=o(" \u2014 "),Rx=a("a"),oHe=o("FunnelTokenizer"),rHe=o(" or "),Sx=a("a"),tHe=o("FunnelTokenizerFast"),aHe=o(" (Funnel Transformer model)"),nHe=l(),ds=a("li"),mJ=a("strong"),sHe=o("gpt2"),lHe=o(" \u2014 "),Px=a("a"),iHe=o("GPT2Tokenizer"),dHe=o(" or "),$x=a("a"),cHe=o("GPT2TokenizerFast"),fHe=o(" (OpenAI GPT-2 model)"),mHe=l(),cs=a("li"),gJ=a("strong"),gHe=o("gpt_neo"),hHe=o(" \u2014 "),Ix=a("a"),pHe=o("GPT2Tokenizer"),_He=o(" or "),jx=a("a"),uHe=o("GPT2TokenizerFast"),bHe=o(" (GPT Neo model)"),vHe=l(),fs=a("li"),hJ=a("strong"),THe=o("herbert"),FHe=o(" \u2014 "),Nx=a("a"),CHe=o("HerbertTokenizer"),MHe=o(" or "),Dx=a("a"),EHe=o("HerbertTokenizerFast"),yHe=o(" (HerBERT model)"),wHe=l(),Vg=a("li"),pJ=a("strong"),AHe=o("hubert"),LHe=o(" \u2014 "),qx=a("a"),BHe=o("Wav2Vec2CTCTokenizer"),xHe=o(" (Hubert model)"),kHe=l(),ms=a("li"),_J=a("strong"),RHe=o("ibert"),SHe=o(" \u2014 "),Ox=a("a"),PHe=o("RobertaTokenizer"),$He=o(" or "),Gx=a("a"),IHe=o("RobertaTokenizerFast"),jHe=o(" (I-BERT model)"),NHe=l(),gs=a("li"),uJ=a("strong"),DHe=o("layoutlm"),qHe=o(" \u2014 "),Xx=a("a"),OHe=o("LayoutLMTokenizer"),GHe=o(" or "),Vx=a("a"),XHe=o("LayoutLMTokenizerFast"),VHe=o(" (LayoutLM model)"),zHe=l(),hs=a("li"),bJ=a("strong"),WHe=o("layoutlmv2"),QHe=o(" \u2014 "),zx=a("a"),HHe=o("LayoutLMv2Tokenizer"),UHe=o(" or "),Wx=a("a"),JHe=o("LayoutLMv2TokenizerFast"),YHe=o(" (LayoutLMv2 model)"),KHe=l(),ps=a("li"),vJ=a("strong"),ZHe=o("layoutxlm"),eUe=o(" \u2014 "),Qx=a("a"),oUe=o("LayoutXLMTokenizer"),rUe=o(" or "),Hx=a("a"),tUe=o("LayoutXLMTokenizerFast"),aUe=o(" (LayoutXLM model)"),nUe=l(),_s=a("li"),TJ=a("strong"),sUe=o("led"),lUe=o(" \u2014 "),Ux=a("a"),iUe=o("LEDTokenizer"),dUe=o(" or "),Jx=a("a"),cUe=o("LEDTokenizerFast"),fUe=o(" (LED model)"),mUe=l(),us=a("li"),FJ=a("strong"),gUe=o("longformer"),hUe=o(" \u2014 "),Yx=a("a"),pUe=o("LongformerTokenizer"),_Ue=o(" or "),Kx=a("a"),uUe=o("LongformerTokenizerFast"),bUe=o(" (Longformer model)"),vUe=l(),zg=a("li"),CJ=a("strong"),TUe=o("luke"),FUe=o(" \u2014 "),Zx=a("a"),CUe=o("LukeTokenizer"),MUe=o(" (LUKE model)"),EUe=l(),bs=a("li"),MJ=a("strong"),yUe=o("lxmert"),wUe=o(" \u2014 "),ek=a("a"),AUe=o("LxmertTokenizer"),LUe=o(" or "),ok=a("a"),BUe=o("LxmertTokenizerFast"),xUe=o(" (LXMERT model)"),kUe=l(),Wg=a("li"),EJ=a("strong"),RUe=o("m2m_100"),SUe=o(" \u2014 "),rk=a("a"),PUe=o("M2M100Tokenizer"),$Ue=o(" (M2M100 model)"),IUe=l(),Qg=a("li"),yJ=a("strong"),jUe=o("marian"),NUe=o(" \u2014 "),tk=a("a"),DUe=o("MarianTokenizer"),qUe=o(" (Marian model)"),OUe=l(),vs=a("li"),wJ=a("strong"),GUe=o("mbart"),XUe=o(" \u2014 "),ak=a("a"),VUe=o("MBartTokenizer"),zUe=o(" or "),nk=a("a"),WUe=o("MBartTokenizerFast"),QUe=o(" (mBART model)"),HUe=l(),Ts=a("li"),AJ=a("strong"),UUe=o("mbart50"),JUe=o(" \u2014 "),sk=a("a"),YUe=o("MBart50Tokenizer"),KUe=o(" or "),lk=a("a"),ZUe=o("MBart50TokenizerFast"),eJe=o(" (mBART-50 model)"),oJe=l(),Hg=a("li"),LJ=a("strong"),rJe=o("mluke"),tJe=o(" \u2014 "),ik=a("a"),aJe=o("MLukeTokenizer"),nJe=o(" (mLUKE model)"),sJe=l(),Fs=a("li"),BJ=a("strong"),lJe=o("mobilebert"),iJe=o(" \u2014 "),dk=a("a"),dJe=o("MobileBertTokenizer"),cJe=o(" or "),ck=a("a"),fJe=o("MobileBertTokenizerFast"),mJe=o(" (MobileBERT model)"),gJe=l(),Cs=a("li"),xJ=a("strong"),hJe=o("mpnet"),pJe=o(" \u2014 "),fk=a("a"),_Je=o("MPNetTokenizer"),uJe=o(" or "),mk=a("a"),bJe=o("MPNetTokenizerFast"),vJe=o(" (MPNet model)"),TJe=l(),Ms=a("li"),kJ=a("strong"),FJe=o("mt5"),CJe=o(" \u2014 "),gk=a("a"),MJe=o("MT5Tokenizer"),EJe=o(" or "),hk=a("a"),yJe=o("MT5TokenizerFast"),wJe=o(" (mT5 model)"),AJe=l(),Es=a("li"),RJ=a("strong"),LJe=o("openai-gpt"),BJe=o(" \u2014 "),pk=a("a"),xJe=o("OpenAIGPTTokenizer"),kJe=o(" or "),_k=a("a"),RJe=o("OpenAIGPTTokenizerFast"),SJe=o(" (OpenAI GPT model)"),PJe=l(),ys=a("li"),SJ=a("strong"),$Je=o("pegasus"),IJe=o(" \u2014 "),uk=a("a"),jJe=o("PegasusTokenizer"),NJe=o(" or "),bk=a("a"),DJe=o("PegasusTokenizerFast"),qJe=o(" (Pegasus model)"),OJe=l(),Ug=a("li"),PJ=a("strong"),GJe=o("perceiver"),XJe=o(" \u2014 "),vk=a("a"),VJe=o("PerceiverTokenizer"),zJe=o(" (Perceiver model)"),WJe=l(),Jg=a("li"),$J=a("strong"),QJe=o("phobert"),HJe=o(" \u2014 "),Tk=a("a"),UJe=o("PhobertTokenizer"),JJe=o(" (PhoBERT model)"),YJe=l(),Yg=a("li"),IJ=a("strong"),KJe=o("plbart"),ZJe=o(" \u2014 "),Fk=a("a"),eYe=o("PLBartTokenizer"),oYe=o(" (PLBart model)"),rYe=l(),Kg=a("li"),jJ=a("strong"),tYe=o("prophetnet"),aYe=o(" \u2014 "),Ck=a("a"),nYe=o("ProphetNetTokenizer"),sYe=o(" (ProphetNet model)"),lYe=l(),ws=a("li"),NJ=a("strong"),iYe=o("qdqbert"),dYe=o(" \u2014 "),Mk=a("a"),cYe=o("BertTokenizer"),fYe=o(" or "),Ek=a("a"),mYe=o("BertTokenizerFast"),gYe=o(" (QDQBert model)"),hYe=l(),Zg=a("li"),DJ=a("strong"),pYe=o("rag"),_Ye=o(" \u2014 "),yk=a("a"),uYe=o("RagTokenizer"),bYe=o(" (RAG model)"),vYe=l(),As=a("li"),qJ=a("strong"),TYe=o("realm"),FYe=o(" \u2014 "),wk=a("a"),CYe=o("RealmTokenizer"),MYe=o(" or "),Ak=a("a"),EYe=o("RealmTokenizerFast"),yYe=o(" (Realm model)"),wYe=l(),Ls=a("li"),OJ=a("strong"),AYe=o("reformer"),LYe=o(" \u2014 "),Lk=a("a"),BYe=o("ReformerTokenizer"),xYe=o(" or "),Bk=a("a"),kYe=o("ReformerTokenizerFast"),RYe=o(" (Reformer model)"),SYe=l(),Bs=a("li"),GJ=a("strong"),PYe=o("rembert"),$Ye=o(" \u2014 "),xk=a("a"),IYe=o("RemBertTokenizer"),jYe=o(" or "),kk=a("a"),NYe=o("RemBertTokenizerFast"),DYe=o(" (RemBERT model)"),qYe=l(),xs=a("li"),XJ=a("strong"),OYe=o("retribert"),GYe=o(" \u2014 "),Rk=a("a"),XYe=o("RetriBertTokenizer"),VYe=o(" or "),Sk=a("a"),zYe=o("RetriBertTokenizerFast"),WYe=o(" (RetriBERT model)"),QYe=l(),ks=a("li"),VJ=a("strong"),HYe=o("roberta"),UYe=o(" \u2014 "),Pk=a("a"),JYe=o("RobertaTokenizer"),YYe=o(" or "),$k=a("a"),KYe=o("RobertaTokenizerFast"),ZYe=o(" (RoBERTa model)"),eKe=l(),Rs=a("li"),zJ=a("strong"),oKe=o("roformer"),rKe=o(" \u2014 "),Ik=a("a"),tKe=o("RoFormerTokenizer"),aKe=o(" or "),jk=a("a"),nKe=o("RoFormerTokenizerFast"),sKe=o(" (RoFormer model)"),lKe=l(),eh=a("li"),WJ=a("strong"),iKe=o("speech_to_text"),dKe=o(" \u2014 "),Nk=a("a"),cKe=o("Speech2TextTokenizer"),fKe=o(" (Speech2Text model)"),mKe=l(),oh=a("li"),QJ=a("strong"),gKe=o("speech_to_text_2"),hKe=o(" \u2014 "),Dk=a("a"),pKe=o("Speech2Text2Tokenizer"),_Ke=o(" (Speech2Text2 model)"),uKe=l(),Ss=a("li"),HJ=a("strong"),bKe=o("splinter"),vKe=o(" \u2014 "),qk=a("a"),TKe=o("SplinterTokenizer"),FKe=o(" or "),Ok=a("a"),CKe=o("SplinterTokenizerFast"),MKe=o(" (Splinter model)"),EKe=l(),Ps=a("li"),UJ=a("strong"),yKe=o("squeezebert"),wKe=o(" \u2014 "),Gk=a("a"),AKe=o("SqueezeBertTokenizer"),LKe=o(" or "),Xk=a("a"),BKe=o("SqueezeBertTokenizerFast"),xKe=o(" (SqueezeBERT model)"),kKe=l(),$s=a("li"),JJ=a("strong"),RKe=o("t5"),SKe=o(" \u2014 "),Vk=a("a"),PKe=o("T5Tokenizer"),$Ke=o(" or "),zk=a("a"),IKe=o("T5TokenizerFast"),jKe=o(" (T5 model)"),NKe=l(),rh=a("li"),YJ=a("strong"),DKe=o("tapas"),qKe=o(" \u2014 "),Wk=a("a"),OKe=o("TapasTokenizer"),GKe=o(" (TAPAS model)"),XKe=l(),th=a("li"),KJ=a("strong"),VKe=o("transfo-xl"),zKe=o(" \u2014 "),Qk=a("a"),WKe=o("TransfoXLTokenizer"),QKe=o(" (Transformer-XL model)"),HKe=l(),ah=a("li"),ZJ=a("strong"),UKe=o("wav2vec2"),JKe=o(" \u2014 "),Hk=a("a"),YKe=o("Wav2Vec2CTCTokenizer"),KKe=o(" (Wav2Vec2 model)"),ZKe=l(),nh=a("li"),eY=a("strong"),eZe=o("wav2vec2_phoneme"),oZe=o(" \u2014 "),Uk=a("a"),rZe=o("Wav2Vec2PhonemeCTCTokenizer"),tZe=o(" (Wav2Vec2Phoneme model)"),aZe=l(),Is=a("li"),oY=a("strong"),nZe=o("xglm"),sZe=o(" \u2014 "),Jk=a("a"),lZe=o("XGLMTokenizer"),iZe=o(" or "),Yk=a("a"),dZe=o("XGLMTokenizerFast"),cZe=o(" (XGLM model)"),fZe=l(),sh=a("li"),rY=a("strong"),mZe=o("xlm"),gZe=o(" \u2014 "),Kk=a("a"),hZe=o("XLMTokenizer"),pZe=o(" (XLM model)"),_Ze=l(),lh=a("li"),tY=a("strong"),uZe=o("xlm-prophetnet"),bZe=o(" \u2014 "),Zk=a("a"),vZe=o("XLMProphetNetTokenizer"),TZe=o(" (XLMProphetNet model)"),FZe=l(),js=a("li"),aY=a("strong"),CZe=o("xlm-roberta"),MZe=o(" \u2014 "),eR=a("a"),EZe=o("XLMRobertaTokenizer"),yZe=o(" or "),oR=a("a"),wZe=o("XLMRobertaTokenizerFast"),AZe=o(" (XLM-RoBERTa model)"),LZe=l(),Ns=a("li"),nY=a("strong"),BZe=o("xlnet"),xZe=o(" \u2014 "),rR=a("a"),kZe=o("XLNetTokenizer"),RZe=o(" or "),tR=a("a"),SZe=o("XLNetTokenizerFast"),PZe=o(" (XLNet model)"),$Ze=l(),sY=a("p"),IZe=o("Examples:"),jZe=l(),f(v3.$$.fragment),NZe=l(),ih=a("div"),f(T3.$$.fragment),DZe=l(),lY=a("p"),qZe=o("Register a new tokenizer in this mapping."),Qxe=l(),Hi=a("h2"),dh=a("a"),iY=a("span"),f(F3.$$.fragment),OZe=l(),dY=a("span"),GZe=o("AutoFeatureExtractor"),Hxe=l(),Ho=a("div"),f(C3.$$.fragment),XZe=l(),M3=a("p"),VZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aR=a("a"),zZe=o("AutoFeatureExtractor.from_pretrained()"),WZe=o(" class method."),QZe=l(),E3=a("p"),HZe=o("This class cannot be instantiated directly using "),cY=a("code"),UZe=o("__init__()"),JZe=o(" (throws an error)."),YZe=l(),Ie=a("div"),f(y3.$$.fragment),KZe=l(),fY=a("p"),ZZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eeo=l(),Xa=a("p"),oeo=o("The feature extractor class to instantiate is selected based on the "),mY=a("code"),reo=o("model_type"),teo=o(` property of the config object
(either passed as an argument or loaded from `),gY=a("code"),aeo=o("pretrained_model_name_or_path"),neo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hY=a("code"),seo=o("pretrained_model_name_or_path"),leo=o(":"),ieo=l(),re=a("ul"),ch=a("li"),pY=a("strong"),deo=o("beit"),ceo=o(" \u2014 "),nR=a("a"),feo=o("BeitFeatureExtractor"),meo=o(" (BEiT model)"),geo=l(),fh=a("li"),_Y=a("strong"),heo=o("clip"),peo=o(" \u2014 "),sR=a("a"),_eo=o("CLIPFeatureExtractor"),ueo=o(" (CLIP model)"),beo=l(),mh=a("li"),uY=a("strong"),veo=o("convnext"),Teo=o(" \u2014 "),lR=a("a"),Feo=o("ConvNextFeatureExtractor"),Ceo=o(" (ConvNext model)"),Meo=l(),gh=a("li"),bY=a("strong"),Eeo=o("deit"),yeo=o(" \u2014 "),iR=a("a"),weo=o("DeiTFeatureExtractor"),Aeo=o(" (DeiT model)"),Leo=l(),hh=a("li"),vY=a("strong"),Beo=o("detr"),xeo=o(" \u2014 "),dR=a("a"),keo=o("DetrFeatureExtractor"),Reo=o(" (DETR model)"),Seo=l(),ph=a("li"),TY=a("strong"),Peo=o("hubert"),$eo=o(" \u2014 "),cR=a("a"),Ieo=o("Wav2Vec2FeatureExtractor"),jeo=o(" (Hubert model)"),Neo=l(),_h=a("li"),FY=a("strong"),Deo=o("layoutlmv2"),qeo=o(" \u2014 "),fR=a("a"),Oeo=o("LayoutLMv2FeatureExtractor"),Geo=o(" (LayoutLMv2 model)"),Xeo=l(),uh=a("li"),CY=a("strong"),Veo=o("maskformer"),zeo=o(" \u2014 "),mR=a("a"),Weo=o("MaskFormerFeatureExtractor"),Qeo=o(" (MaskFormer model)"),Heo=l(),bh=a("li"),MY=a("strong"),Ueo=o("perceiver"),Jeo=o(" \u2014 "),gR=a("a"),Yeo=o("PerceiverFeatureExtractor"),Keo=o(" (Perceiver model)"),Zeo=l(),vh=a("li"),EY=a("strong"),eoo=o("poolformer"),ooo=o(" \u2014 "),hR=a("a"),roo=o("PoolFormerFeatureExtractor"),too=o(" (PoolFormer model)"),aoo=l(),Th=a("li"),yY=a("strong"),noo=o("resnet"),soo=o(" \u2014 "),pR=a("a"),loo=o("ConvNextFeatureExtractor"),ioo=o(" (ResNet model)"),doo=l(),Fh=a("li"),wY=a("strong"),coo=o("segformer"),foo=o(" \u2014 "),_R=a("a"),moo=o("SegformerFeatureExtractor"),goo=o(" (SegFormer model)"),hoo=l(),Ch=a("li"),AY=a("strong"),poo=o("speech_to_text"),_oo=o(" \u2014 "),uR=a("a"),uoo=o("Speech2TextFeatureExtractor"),boo=o(" (Speech2Text model)"),voo=l(),Mh=a("li"),LY=a("strong"),Too=o("swin"),Foo=o(" \u2014 "),bR=a("a"),Coo=o("ViTFeatureExtractor"),Moo=o(" (Swin model)"),Eoo=l(),Eh=a("li"),BY=a("strong"),yoo=o("van"),woo=o(" \u2014 "),vR=a("a"),Aoo=o("ConvNextFeatureExtractor"),Loo=o(" (VAN model)"),Boo=l(),yh=a("li"),xY=a("strong"),xoo=o("vit"),koo=o(" \u2014 "),TR=a("a"),Roo=o("ViTFeatureExtractor"),Soo=o(" (ViT model)"),Poo=l(),wh=a("li"),kY=a("strong"),$oo=o("vit_mae"),Ioo=o(" \u2014 "),FR=a("a"),joo=o("ViTFeatureExtractor"),Noo=o(" (ViTMAE model)"),Doo=l(),Ah=a("li"),RY=a("strong"),qoo=o("wav2vec2"),Ooo=o(" \u2014 "),CR=a("a"),Goo=o("Wav2Vec2FeatureExtractor"),Xoo=o(" (Wav2Vec2 model)"),Voo=l(),f(Lh.$$.fragment),zoo=l(),SY=a("p"),Woo=o("Examples:"),Qoo=l(),f(w3.$$.fragment),Hoo=l(),Bh=a("div"),f(A3.$$.fragment),Uoo=l(),PY=a("p"),Joo=o("Register a new feature extractor for this class."),Uxe=l(),Ui=a("h2"),xh=a("a"),$Y=a("span"),f(L3.$$.fragment),Yoo=l(),IY=a("span"),Koo=o("AutoProcessor"),Jxe=l(),Uo=a("div"),f(B3.$$.fragment),Zoo=l(),x3=a("p"),ero=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MR=a("a"),oro=o("AutoProcessor.from_pretrained()"),rro=o(" class method."),tro=l(),k3=a("p"),aro=o("This class cannot be instantiated directly using "),jY=a("code"),nro=o("__init__()"),sro=o(" (throws an error)."),lro=l(),je=a("div"),f(R3.$$.fragment),iro=l(),NY=a("p"),dro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cro=l(),Ji=a("p"),fro=o("The processor class to instantiate is selected based on the "),DY=a("code"),mro=o("model_type"),gro=o(` property of the config object (either
passed as an argument or loaded from `),qY=a("code"),hro=o("pretrained_model_name_or_path"),pro=o(" if possible):"),_ro=l(),xe=a("ul"),kh=a("li"),OY=a("strong"),uro=o("clip"),bro=o(" \u2014 "),ER=a("a"),vro=o("CLIPProcessor"),Tro=o(" (CLIP model)"),Fro=l(),Rh=a("li"),GY=a("strong"),Cro=o("layoutlmv2"),Mro=o(" \u2014 "),yR=a("a"),Ero=o("LayoutLMv2Processor"),yro=o(" (LayoutLMv2 model)"),wro=l(),Sh=a("li"),XY=a("strong"),Aro=o("layoutxlm"),Lro=o(" \u2014 "),wR=a("a"),Bro=o("LayoutXLMProcessor"),xro=o(" (LayoutXLM model)"),kro=l(),Ph=a("li"),VY=a("strong"),Rro=o("speech_to_text"),Sro=o(" \u2014 "),AR=a("a"),Pro=o("Speech2TextProcessor"),$ro=o(" (Speech2Text model)"),Iro=l(),$h=a("li"),zY=a("strong"),jro=o("speech_to_text_2"),Nro=o(" \u2014 "),LR=a("a"),Dro=o("Speech2Text2Processor"),qro=o(" (Speech2Text2 model)"),Oro=l(),Ih=a("li"),WY=a("strong"),Gro=o("trocr"),Xro=o(" \u2014 "),BR=a("a"),Vro=o("TrOCRProcessor"),zro=o(" (TrOCR model)"),Wro=l(),jh=a("li"),QY=a("strong"),Qro=o("vision-text-dual-encoder"),Hro=o(" \u2014 "),xR=a("a"),Uro=o("VisionTextDualEncoderProcessor"),Jro=o(" (VisionTextDualEncoder model)"),Yro=l(),Nh=a("li"),HY=a("strong"),Kro=o("wav2vec2"),Zro=o(" \u2014 "),kR=a("a"),eto=o("Wav2Vec2Processor"),oto=o(" (Wav2Vec2 model)"),rto=l(),f(Dh.$$.fragment),tto=l(),UY=a("p"),ato=o("Examples:"),nto=l(),f(S3.$$.fragment),sto=l(),qh=a("div"),f(P3.$$.fragment),lto=l(),JY=a("p"),ito=o("Register a new processor for this class."),Yxe=l(),Yi=a("h2"),Oh=a("a"),YY=a("span"),f($3.$$.fragment),dto=l(),KY=a("span"),cto=o("AutoModel"),Kxe=l(),Jo=a("div"),f(I3.$$.fragment),fto=l(),Ki=a("p"),mto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZY=a("code"),gto=o("from_pretrained()"),hto=o("class method or the "),eK=a("code"),pto=o("from_config()"),_to=o(`class
method.`),uto=l(),j3=a("p"),bto=o("This class cannot be instantiated directly using "),oK=a("code"),vto=o("__init__()"),Tto=o(" (throws an error)."),Fto=l(),Vr=a("div"),f(N3.$$.fragment),Cto=l(),rK=a("p"),Mto=o("Instantiates one of the base model classes of the library from a configuration."),Eto=l(),Zi=a("p"),yto=o(`Note:
Loading a model from its configuration file does `),tK=a("strong"),wto=o("not"),Ato=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("code"),Lto=o("from_pretrained()"),Bto=o("to load the model weights."),xto=l(),nK=a("p"),kto=o("Examples:"),Rto=l(),f(D3.$$.fragment),Sto=l(),Ne=a("div"),f(q3.$$.fragment),Pto=l(),sK=a("p"),$to=o("Instantiate one of the base model classes of the library from a pretrained model."),Ito=l(),Va=a("p"),jto=o("The model class to instantiate is selected based on the "),lK=a("code"),Nto=o("model_type"),Dto=o(` property of the config object (either
passed as an argument or loaded from `),iK=a("code"),qto=o("pretrained_model_name_or_path"),Oto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dK=a("code"),Gto=o("pretrained_model_name_or_path"),Xto=o(":"),Vto=l(),F=a("ul"),Gh=a("li"),cK=a("strong"),zto=o("albert"),Wto=o(" \u2014 "),RR=a("a"),Qto=o("AlbertModel"),Hto=o(" (ALBERT model)"),Uto=l(),Xh=a("li"),fK=a("strong"),Jto=o("bart"),Yto=o(" \u2014 "),SR=a("a"),Kto=o("BartModel"),Zto=o(" (BART model)"),eao=l(),Vh=a("li"),mK=a("strong"),oao=o("beit"),rao=o(" \u2014 "),PR=a("a"),tao=o("BeitModel"),aao=o(" (BEiT model)"),nao=l(),zh=a("li"),gK=a("strong"),sao=o("bert"),lao=o(" \u2014 "),$R=a("a"),iao=o("BertModel"),dao=o(" (BERT model)"),cao=l(),Wh=a("li"),hK=a("strong"),fao=o("bert-generation"),mao=o(" \u2014 "),IR=a("a"),gao=o("BertGenerationEncoder"),hao=o(" (Bert Generation model)"),pao=l(),Qh=a("li"),pK=a("strong"),_ao=o("big_bird"),uao=o(" \u2014 "),jR=a("a"),bao=o("BigBirdModel"),vao=o(" (BigBird model)"),Tao=l(),Hh=a("li"),_K=a("strong"),Fao=o("bigbird_pegasus"),Cao=o(" \u2014 "),NR=a("a"),Mao=o("BigBirdPegasusModel"),Eao=o(" (BigBirdPegasus model)"),yao=l(),Uh=a("li"),uK=a("strong"),wao=o("blenderbot"),Aao=o(" \u2014 "),DR=a("a"),Lao=o("BlenderbotModel"),Bao=o(" (Blenderbot model)"),xao=l(),Jh=a("li"),bK=a("strong"),kao=o("blenderbot-small"),Rao=o(" \u2014 "),qR=a("a"),Sao=o("BlenderbotSmallModel"),Pao=o(" (BlenderbotSmall model)"),$ao=l(),Yh=a("li"),vK=a("strong"),Iao=o("camembert"),jao=o(" \u2014 "),OR=a("a"),Nao=o("CamembertModel"),Dao=o(" (CamemBERT model)"),qao=l(),Kh=a("li"),TK=a("strong"),Oao=o("canine"),Gao=o(" \u2014 "),GR=a("a"),Xao=o("CanineModel"),Vao=o(" (Canine model)"),zao=l(),Zh=a("li"),FK=a("strong"),Wao=o("clip"),Qao=o(" \u2014 "),XR=a("a"),Hao=o("CLIPModel"),Uao=o(" (CLIP model)"),Jao=l(),ep=a("li"),CK=a("strong"),Yao=o("convbert"),Kao=o(" \u2014 "),VR=a("a"),Zao=o("ConvBertModel"),eno=o(" (ConvBERT model)"),ono=l(),op=a("li"),MK=a("strong"),rno=o("convnext"),tno=o(" \u2014 "),zR=a("a"),ano=o("ConvNextModel"),nno=o(" (ConvNext model)"),sno=l(),rp=a("li"),EK=a("strong"),lno=o("ctrl"),ino=o(" \u2014 "),WR=a("a"),dno=o("CTRLModel"),cno=o(" (CTRL model)"),fno=l(),tp=a("li"),yK=a("strong"),mno=o("data2vec-audio"),gno=o(" \u2014 "),QR=a("a"),hno=o("Data2VecAudioModel"),pno=o(" (Data2VecAudio model)"),_no=l(),ap=a("li"),wK=a("strong"),uno=o("data2vec-text"),bno=o(" \u2014 "),HR=a("a"),vno=o("Data2VecTextModel"),Tno=o(" (Data2VecText model)"),Fno=l(),np=a("li"),AK=a("strong"),Cno=o("deberta"),Mno=o(" \u2014 "),UR=a("a"),Eno=o("DebertaModel"),yno=o(" (DeBERTa model)"),wno=l(),sp=a("li"),LK=a("strong"),Ano=o("deberta-v2"),Lno=o(" \u2014 "),JR=a("a"),Bno=o("DebertaV2Model"),xno=o(" (DeBERTa-v2 model)"),kno=l(),lp=a("li"),BK=a("strong"),Rno=o("deit"),Sno=o(" \u2014 "),YR=a("a"),Pno=o("DeiTModel"),$no=o(" (DeiT model)"),Ino=l(),ip=a("li"),xK=a("strong"),jno=o("detr"),Nno=o(" \u2014 "),KR=a("a"),Dno=o("DetrModel"),qno=o(" (DETR model)"),Ono=l(),dp=a("li"),kK=a("strong"),Gno=o("distilbert"),Xno=o(" \u2014 "),ZR=a("a"),Vno=o("DistilBertModel"),zno=o(" (DistilBERT model)"),Wno=l(),cp=a("li"),RK=a("strong"),Qno=o("dpr"),Hno=o(" \u2014 "),eS=a("a"),Uno=o("DPRQuestionEncoder"),Jno=o(" (DPR model)"),Yno=l(),fp=a("li"),SK=a("strong"),Kno=o("electra"),Zno=o(" \u2014 "),oS=a("a"),eso=o("ElectraModel"),oso=o(" (ELECTRA model)"),rso=l(),mp=a("li"),PK=a("strong"),tso=o("flaubert"),aso=o(" \u2014 "),rS=a("a"),nso=o("FlaubertModel"),sso=o(" (FlauBERT model)"),lso=l(),gp=a("li"),$K=a("strong"),iso=o("fnet"),dso=o(" \u2014 "),tS=a("a"),cso=o("FNetModel"),fso=o(" (FNet model)"),mso=l(),hp=a("li"),IK=a("strong"),gso=o("fsmt"),hso=o(" \u2014 "),aS=a("a"),pso=o("FSMTModel"),_so=o(" (FairSeq Machine-Translation model)"),uso=l(),Ds=a("li"),jK=a("strong"),bso=o("funnel"),vso=o(" \u2014 "),nS=a("a"),Tso=o("FunnelModel"),Fso=o(" or "),sS=a("a"),Cso=o("FunnelBaseModel"),Mso=o(" (Funnel Transformer model)"),Eso=l(),pp=a("li"),NK=a("strong"),yso=o("gpt2"),wso=o(" \u2014 "),lS=a("a"),Aso=o("GPT2Model"),Lso=o(" (OpenAI GPT-2 model)"),Bso=l(),_p=a("li"),DK=a("strong"),xso=o("gpt_neo"),kso=o(" \u2014 "),iS=a("a"),Rso=o("GPTNeoModel"),Sso=o(" (GPT Neo model)"),Pso=l(),up=a("li"),qK=a("strong"),$so=o("gptj"),Iso=o(" \u2014 "),dS=a("a"),jso=o("GPTJModel"),Nso=o(" (GPT-J model)"),Dso=l(),bp=a("li"),OK=a("strong"),qso=o("hubert"),Oso=o(" \u2014 "),cS=a("a"),Gso=o("HubertModel"),Xso=o(" (Hubert model)"),Vso=l(),vp=a("li"),GK=a("strong"),zso=o("ibert"),Wso=o(" \u2014 "),fS=a("a"),Qso=o("IBertModel"),Hso=o(" (I-BERT model)"),Uso=l(),Tp=a("li"),XK=a("strong"),Jso=o("imagegpt"),Yso=o(" \u2014 "),mS=a("a"),Kso=o("ImageGPTModel"),Zso=o(" (ImageGPT model)"),elo=l(),Fp=a("li"),VK=a("strong"),olo=o("layoutlm"),rlo=o(" \u2014 "),gS=a("a"),tlo=o("LayoutLMModel"),alo=o(" (LayoutLM model)"),nlo=l(),Cp=a("li"),zK=a("strong"),slo=o("layoutlmv2"),llo=o(" \u2014 "),hS=a("a"),ilo=o("LayoutLMv2Model"),dlo=o(" (LayoutLMv2 model)"),clo=l(),Mp=a("li"),WK=a("strong"),flo=o("led"),mlo=o(" \u2014 "),pS=a("a"),glo=o("LEDModel"),hlo=o(" (LED model)"),plo=l(),Ep=a("li"),QK=a("strong"),_lo=o("longformer"),ulo=o(" \u2014 "),_S=a("a"),blo=o("LongformerModel"),vlo=o(" (Longformer model)"),Tlo=l(),yp=a("li"),HK=a("strong"),Flo=o("luke"),Clo=o(" \u2014 "),uS=a("a"),Mlo=o("LukeModel"),Elo=o(" (LUKE model)"),ylo=l(),wp=a("li"),UK=a("strong"),wlo=o("lxmert"),Alo=o(" \u2014 "),bS=a("a"),Llo=o("LxmertModel"),Blo=o(" (LXMERT model)"),xlo=l(),Ap=a("li"),JK=a("strong"),klo=o("m2m_100"),Rlo=o(" \u2014 "),vS=a("a"),Slo=o("M2M100Model"),Plo=o(" (M2M100 model)"),$lo=l(),Lp=a("li"),YK=a("strong"),Ilo=o("marian"),jlo=o(" \u2014 "),TS=a("a"),Nlo=o("MarianModel"),Dlo=o(" (Marian model)"),qlo=l(),Bp=a("li"),KK=a("strong"),Olo=o("maskformer"),Glo=o(" \u2014 "),FS=a("a"),Xlo=o("MaskFormerModel"),Vlo=o(" (MaskFormer model)"),zlo=l(),xp=a("li"),ZK=a("strong"),Wlo=o("mbart"),Qlo=o(" \u2014 "),CS=a("a"),Hlo=o("MBartModel"),Ulo=o(" (mBART model)"),Jlo=l(),kp=a("li"),eZ=a("strong"),Ylo=o("megatron-bert"),Klo=o(" \u2014 "),MS=a("a"),Zlo=o("MegatronBertModel"),eio=o(" (MegatronBert model)"),oio=l(),Rp=a("li"),oZ=a("strong"),rio=o("mobilebert"),tio=o(" \u2014 "),ES=a("a"),aio=o("MobileBertModel"),nio=o(" (MobileBERT model)"),sio=l(),Sp=a("li"),rZ=a("strong"),lio=o("mpnet"),iio=o(" \u2014 "),yS=a("a"),dio=o("MPNetModel"),cio=o(" (MPNet model)"),fio=l(),Pp=a("li"),tZ=a("strong"),mio=o("mt5"),gio=o(" \u2014 "),wS=a("a"),hio=o("MT5Model"),pio=o(" (mT5 model)"),_io=l(),$p=a("li"),aZ=a("strong"),uio=o("nystromformer"),bio=o(" \u2014 "),AS=a("a"),vio=o("NystromformerModel"),Tio=o(" (Nystromformer model)"),Fio=l(),Ip=a("li"),nZ=a("strong"),Cio=o("openai-gpt"),Mio=o(" \u2014 "),LS=a("a"),Eio=o("OpenAIGPTModel"),yio=o(" (OpenAI GPT model)"),wio=l(),jp=a("li"),sZ=a("strong"),Aio=o("pegasus"),Lio=o(" \u2014 "),BS=a("a"),Bio=o("PegasusModel"),xio=o(" (Pegasus model)"),kio=l(),Np=a("li"),lZ=a("strong"),Rio=o("perceiver"),Sio=o(" \u2014 "),xS=a("a"),Pio=o("PerceiverModel"),$io=o(" (Perceiver model)"),Iio=l(),Dp=a("li"),iZ=a("strong"),jio=o("plbart"),Nio=o(" \u2014 "),kS=a("a"),Dio=o("PLBartModel"),qio=o(" (PLBart model)"),Oio=l(),qp=a("li"),dZ=a("strong"),Gio=o("poolformer"),Xio=o(" \u2014 "),RS=a("a"),Vio=o("PoolFormerModel"),zio=o(" (PoolFormer model)"),Wio=l(),Op=a("li"),cZ=a("strong"),Qio=o("prophetnet"),Hio=o(" \u2014 "),SS=a("a"),Uio=o("ProphetNetModel"),Jio=o(" (ProphetNet model)"),Yio=l(),Gp=a("li"),fZ=a("strong"),Kio=o("qdqbert"),Zio=o(" \u2014 "),PS=a("a"),edo=o("QDQBertModel"),odo=o(" (QDQBert model)"),rdo=l(),Xp=a("li"),mZ=a("strong"),tdo=o("reformer"),ado=o(" \u2014 "),$S=a("a"),ndo=o("ReformerModel"),sdo=o(" (Reformer model)"),ldo=l(),Vp=a("li"),gZ=a("strong"),ido=o("rembert"),ddo=o(" \u2014 "),IS=a("a"),cdo=o("RemBertModel"),fdo=o(" (RemBERT model)"),mdo=l(),zp=a("li"),hZ=a("strong"),gdo=o("resnet"),hdo=o(" \u2014 "),jS=a("a"),pdo=o("ResNetModel"),_do=o(" (ResNet model)"),udo=l(),Wp=a("li"),pZ=a("strong"),bdo=o("retribert"),vdo=o(" \u2014 "),NS=a("a"),Tdo=o("RetriBertModel"),Fdo=o(" (RetriBERT model)"),Cdo=l(),Qp=a("li"),_Z=a("strong"),Mdo=o("roberta"),Edo=o(" \u2014 "),DS=a("a"),ydo=o("RobertaModel"),wdo=o(" (RoBERTa model)"),Ado=l(),Hp=a("li"),uZ=a("strong"),Ldo=o("roformer"),Bdo=o(" \u2014 "),qS=a("a"),xdo=o("RoFormerModel"),kdo=o(" (RoFormer model)"),Rdo=l(),Up=a("li"),bZ=a("strong"),Sdo=o("segformer"),Pdo=o(" \u2014 "),OS=a("a"),$do=o("SegformerModel"),Ido=o(" (SegFormer model)"),jdo=l(),Jp=a("li"),vZ=a("strong"),Ndo=o("sew"),Ddo=o(" \u2014 "),GS=a("a"),qdo=o("SEWModel"),Odo=o(" (SEW model)"),Gdo=l(),Yp=a("li"),TZ=a("strong"),Xdo=o("sew-d"),Vdo=o(" \u2014 "),XS=a("a"),zdo=o("SEWDModel"),Wdo=o(" (SEW-D model)"),Qdo=l(),Kp=a("li"),FZ=a("strong"),Hdo=o("speech_to_text"),Udo=o(" \u2014 "),VS=a("a"),Jdo=o("Speech2TextModel"),Ydo=o(" (Speech2Text model)"),Kdo=l(),Zp=a("li"),CZ=a("strong"),Zdo=o("splinter"),eco=o(" \u2014 "),zS=a("a"),oco=o("SplinterModel"),rco=o(" (Splinter model)"),tco=l(),e_=a("li"),MZ=a("strong"),aco=o("squeezebert"),nco=o(" \u2014 "),WS=a("a"),sco=o("SqueezeBertModel"),lco=o(" (SqueezeBERT model)"),ico=l(),o_=a("li"),EZ=a("strong"),dco=o("swin"),cco=o(" \u2014 "),QS=a("a"),fco=o("SwinModel"),mco=o(" (Swin model)"),gco=l(),r_=a("li"),yZ=a("strong"),hco=o("t5"),pco=o(" \u2014 "),HS=a("a"),_co=o("T5Model"),uco=o(" (T5 model)"),bco=l(),t_=a("li"),wZ=a("strong"),vco=o("tapas"),Tco=o(" \u2014 "),US=a("a"),Fco=o("TapasModel"),Cco=o(" (TAPAS model)"),Mco=l(),a_=a("li"),AZ=a("strong"),Eco=o("transfo-xl"),yco=o(" \u2014 "),JS=a("a"),wco=o("TransfoXLModel"),Aco=o(" (Transformer-XL model)"),Lco=l(),n_=a("li"),LZ=a("strong"),Bco=o("unispeech"),xco=o(" \u2014 "),YS=a("a"),kco=o("UniSpeechModel"),Rco=o(" (UniSpeech model)"),Sco=l(),s_=a("li"),BZ=a("strong"),Pco=o("unispeech-sat"),$co=o(" \u2014 "),KS=a("a"),Ico=o("UniSpeechSatModel"),jco=o(" (UniSpeechSat model)"),Nco=l(),l_=a("li"),xZ=a("strong"),Dco=o("van"),qco=o(" \u2014 "),ZS=a("a"),Oco=o("VanModel"),Gco=o(" (VAN model)"),Xco=l(),i_=a("li"),kZ=a("strong"),Vco=o("vilt"),zco=o(" \u2014 "),eP=a("a"),Wco=o("ViltModel"),Qco=o(" (ViLT model)"),Hco=l(),d_=a("li"),RZ=a("strong"),Uco=o("vision-text-dual-encoder"),Jco=o(" \u2014 "),oP=a("a"),Yco=o("VisionTextDualEncoderModel"),Kco=o(" (VisionTextDualEncoder model)"),Zco=l(),c_=a("li"),SZ=a("strong"),efo=o("visual_bert"),ofo=o(" \u2014 "),rP=a("a"),rfo=o("VisualBertModel"),tfo=o(" (VisualBert model)"),afo=l(),f_=a("li"),PZ=a("strong"),nfo=o("vit"),sfo=o(" \u2014 "),tP=a("a"),lfo=o("ViTModel"),ifo=o(" (ViT model)"),dfo=l(),m_=a("li"),$Z=a("strong"),cfo=o("vit_mae"),ffo=o(" \u2014 "),aP=a("a"),mfo=o("ViTMAEModel"),gfo=o(" (ViTMAE model)"),hfo=l(),g_=a("li"),IZ=a("strong"),pfo=o("wav2vec2"),_fo=o(" \u2014 "),nP=a("a"),ufo=o("Wav2Vec2Model"),bfo=o(" (Wav2Vec2 model)"),vfo=l(),h_=a("li"),jZ=a("strong"),Tfo=o("wavlm"),Ffo=o(" \u2014 "),sP=a("a"),Cfo=o("WavLMModel"),Mfo=o(" (WavLM model)"),Efo=l(),p_=a("li"),NZ=a("strong"),yfo=o("xglm"),wfo=o(" \u2014 "),lP=a("a"),Afo=o("XGLMModel"),Lfo=o(" (XGLM model)"),Bfo=l(),__=a("li"),DZ=a("strong"),xfo=o("xlm"),kfo=o(" \u2014 "),iP=a("a"),Rfo=o("XLMModel"),Sfo=o(" (XLM model)"),Pfo=l(),u_=a("li"),qZ=a("strong"),$fo=o("xlm-prophetnet"),Ifo=o(" \u2014 "),dP=a("a"),jfo=o("XLMProphetNetModel"),Nfo=o(" (XLMProphetNet model)"),Dfo=l(),b_=a("li"),OZ=a("strong"),qfo=o("xlm-roberta"),Ofo=o(" \u2014 "),cP=a("a"),Gfo=o("XLMRobertaModel"),Xfo=o(" (XLM-RoBERTa model)"),Vfo=l(),v_=a("li"),GZ=a("strong"),zfo=o("xlm-roberta-xl"),Wfo=o(" \u2014 "),fP=a("a"),Qfo=o("XLMRobertaXLModel"),Hfo=o(" (XLM-RoBERTa-XL model)"),Ufo=l(),T_=a("li"),XZ=a("strong"),Jfo=o("xlnet"),Yfo=o(" \u2014 "),mP=a("a"),Kfo=o("XLNetModel"),Zfo=o(" (XLNet model)"),emo=l(),F_=a("li"),VZ=a("strong"),omo=o("yoso"),rmo=o(" \u2014 "),gP=a("a"),tmo=o("YosoModel"),amo=o(" (YOSO model)"),nmo=l(),C_=a("p"),smo=o("The model is set in evaluation mode by default using "),zZ=a("code"),lmo=o("model.eval()"),imo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WZ=a("code"),dmo=o("model.train()"),cmo=l(),QZ=a("p"),fmo=o("Examples:"),mmo=l(),f(O3.$$.fragment),Zxe=l(),ed=a("h2"),M_=a("a"),HZ=a("span"),f(G3.$$.fragment),gmo=l(),UZ=a("span"),hmo=o("AutoModelForPreTraining"),eke=l(),Yo=a("div"),f(X3.$$.fragment),pmo=l(),od=a("p"),_mo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JZ=a("code"),umo=o("from_pretrained()"),bmo=o("class method or the "),YZ=a("code"),vmo=o("from_config()"),Tmo=o(`class
method.`),Fmo=l(),V3=a("p"),Cmo=o("This class cannot be instantiated directly using "),KZ=a("code"),Mmo=o("__init__()"),Emo=o(" (throws an error)."),ymo=l(),zr=a("div"),f(z3.$$.fragment),wmo=l(),ZZ=a("p"),Amo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lmo=l(),rd=a("p"),Bmo=o(`Note:
Loading a model from its configuration file does `),eee=a("strong"),xmo=o("not"),kmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("code"),Rmo=o("from_pretrained()"),Smo=o("to load the model weights."),Pmo=l(),ree=a("p"),$mo=o("Examples:"),Imo=l(),f(W3.$$.fragment),jmo=l(),De=a("div"),f(Q3.$$.fragment),Nmo=l(),tee=a("p"),Dmo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qmo=l(),za=a("p"),Omo=o("The model class to instantiate is selected based on the "),aee=a("code"),Gmo=o("model_type"),Xmo=o(` property of the config object (either
passed as an argument or loaded from `),nee=a("code"),Vmo=o("pretrained_model_name_or_path"),zmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),see=a("code"),Wmo=o("pretrained_model_name_or_path"),Qmo=o(":"),Hmo=l(),k=a("ul"),E_=a("li"),lee=a("strong"),Umo=o("albert"),Jmo=o(" \u2014 "),hP=a("a"),Ymo=o("AlbertForPreTraining"),Kmo=o(" (ALBERT model)"),Zmo=l(),y_=a("li"),iee=a("strong"),ego=o("bart"),ogo=o(" \u2014 "),pP=a("a"),rgo=o("BartForConditionalGeneration"),tgo=o(" (BART model)"),ago=l(),w_=a("li"),dee=a("strong"),ngo=o("bert"),sgo=o(" \u2014 "),_P=a("a"),lgo=o("BertForPreTraining"),igo=o(" (BERT model)"),dgo=l(),A_=a("li"),cee=a("strong"),cgo=o("big_bird"),fgo=o(" \u2014 "),uP=a("a"),mgo=o("BigBirdForPreTraining"),ggo=o(" (BigBird model)"),hgo=l(),L_=a("li"),fee=a("strong"),pgo=o("camembert"),_go=o(" \u2014 "),bP=a("a"),ugo=o("CamembertForMaskedLM"),bgo=o(" (CamemBERT model)"),vgo=l(),B_=a("li"),mee=a("strong"),Tgo=o("ctrl"),Fgo=o(" \u2014 "),vP=a("a"),Cgo=o("CTRLLMHeadModel"),Mgo=o(" (CTRL model)"),Ego=l(),x_=a("li"),gee=a("strong"),ygo=o("data2vec-text"),wgo=o(" \u2014 "),TP=a("a"),Ago=o("Data2VecTextForMaskedLM"),Lgo=o(" (Data2VecText model)"),Bgo=l(),k_=a("li"),hee=a("strong"),xgo=o("deberta"),kgo=o(" \u2014 "),FP=a("a"),Rgo=o("DebertaForMaskedLM"),Sgo=o(" (DeBERTa model)"),Pgo=l(),R_=a("li"),pee=a("strong"),$go=o("deberta-v2"),Igo=o(" \u2014 "),CP=a("a"),jgo=o("DebertaV2ForMaskedLM"),Ngo=o(" (DeBERTa-v2 model)"),Dgo=l(),S_=a("li"),_ee=a("strong"),qgo=o("distilbert"),Ogo=o(" \u2014 "),MP=a("a"),Ggo=o("DistilBertForMaskedLM"),Xgo=o(" (DistilBERT model)"),Vgo=l(),P_=a("li"),uee=a("strong"),zgo=o("electra"),Wgo=o(" \u2014 "),EP=a("a"),Qgo=o("ElectraForPreTraining"),Hgo=o(" (ELECTRA model)"),Ugo=l(),$_=a("li"),bee=a("strong"),Jgo=o("flaubert"),Ygo=o(" \u2014 "),yP=a("a"),Kgo=o("FlaubertWithLMHeadModel"),Zgo=o(" (FlauBERT model)"),eho=l(),I_=a("li"),vee=a("strong"),oho=o("fnet"),rho=o(" \u2014 "),wP=a("a"),tho=o("FNetForPreTraining"),aho=o(" (FNet model)"),nho=l(),j_=a("li"),Tee=a("strong"),sho=o("fsmt"),lho=o(" \u2014 "),AP=a("a"),iho=o("FSMTForConditionalGeneration"),dho=o(" (FairSeq Machine-Translation model)"),cho=l(),N_=a("li"),Fee=a("strong"),fho=o("funnel"),mho=o(" \u2014 "),LP=a("a"),gho=o("FunnelForPreTraining"),hho=o(" (Funnel Transformer model)"),pho=l(),D_=a("li"),Cee=a("strong"),_ho=o("gpt2"),uho=o(" \u2014 "),BP=a("a"),bho=o("GPT2LMHeadModel"),vho=o(" (OpenAI GPT-2 model)"),Tho=l(),q_=a("li"),Mee=a("strong"),Fho=o("ibert"),Cho=o(" \u2014 "),xP=a("a"),Mho=o("IBertForMaskedLM"),Eho=o(" (I-BERT model)"),yho=l(),O_=a("li"),Eee=a("strong"),who=o("layoutlm"),Aho=o(" \u2014 "),kP=a("a"),Lho=o("LayoutLMForMaskedLM"),Bho=o(" (LayoutLM model)"),xho=l(),G_=a("li"),yee=a("strong"),kho=o("longformer"),Rho=o(" \u2014 "),RP=a("a"),Sho=o("LongformerForMaskedLM"),Pho=o(" (Longformer model)"),$ho=l(),X_=a("li"),wee=a("strong"),Iho=o("lxmert"),jho=o(" \u2014 "),SP=a("a"),Nho=o("LxmertForPreTraining"),Dho=o(" (LXMERT model)"),qho=l(),V_=a("li"),Aee=a("strong"),Oho=o("megatron-bert"),Gho=o(" \u2014 "),PP=a("a"),Xho=o("MegatronBertForPreTraining"),Vho=o(" (MegatronBert model)"),zho=l(),z_=a("li"),Lee=a("strong"),Who=o("mobilebert"),Qho=o(" \u2014 "),$P=a("a"),Hho=o("MobileBertForPreTraining"),Uho=o(" (MobileBERT model)"),Jho=l(),W_=a("li"),Bee=a("strong"),Yho=o("mpnet"),Kho=o(" \u2014 "),IP=a("a"),Zho=o("MPNetForMaskedLM"),epo=o(" (MPNet model)"),opo=l(),Q_=a("li"),xee=a("strong"),rpo=o("openai-gpt"),tpo=o(" \u2014 "),jP=a("a"),apo=o("OpenAIGPTLMHeadModel"),npo=o(" (OpenAI GPT model)"),spo=l(),H_=a("li"),kee=a("strong"),lpo=o("retribert"),ipo=o(" \u2014 "),NP=a("a"),dpo=o("RetriBertModel"),cpo=o(" (RetriBERT model)"),fpo=l(),U_=a("li"),Ree=a("strong"),mpo=o("roberta"),gpo=o(" \u2014 "),DP=a("a"),hpo=o("RobertaForMaskedLM"),ppo=o(" (RoBERTa model)"),_po=l(),J_=a("li"),See=a("strong"),upo=o("squeezebert"),bpo=o(" \u2014 "),qP=a("a"),vpo=o("SqueezeBertForMaskedLM"),Tpo=o(" (SqueezeBERT model)"),Fpo=l(),Y_=a("li"),Pee=a("strong"),Cpo=o("t5"),Mpo=o(" \u2014 "),OP=a("a"),Epo=o("T5ForConditionalGeneration"),ypo=o(" (T5 model)"),wpo=l(),K_=a("li"),$ee=a("strong"),Apo=o("tapas"),Lpo=o(" \u2014 "),GP=a("a"),Bpo=o("TapasForMaskedLM"),xpo=o(" (TAPAS model)"),kpo=l(),Z_=a("li"),Iee=a("strong"),Rpo=o("transfo-xl"),Spo=o(" \u2014 "),XP=a("a"),Ppo=o("TransfoXLLMHeadModel"),$po=o(" (Transformer-XL model)"),Ipo=l(),eu=a("li"),jee=a("strong"),jpo=o("unispeech"),Npo=o(" \u2014 "),VP=a("a"),Dpo=o("UniSpeechForPreTraining"),qpo=o(" (UniSpeech model)"),Opo=l(),ou=a("li"),Nee=a("strong"),Gpo=o("unispeech-sat"),Xpo=o(" \u2014 "),zP=a("a"),Vpo=o("UniSpeechSatForPreTraining"),zpo=o(" (UniSpeechSat model)"),Wpo=l(),ru=a("li"),Dee=a("strong"),Qpo=o("visual_bert"),Hpo=o(" \u2014 "),WP=a("a"),Upo=o("VisualBertForPreTraining"),Jpo=o(" (VisualBert model)"),Ypo=l(),tu=a("li"),qee=a("strong"),Kpo=o("vit_mae"),Zpo=o(" \u2014 "),QP=a("a"),e_o=o("ViTMAEForPreTraining"),o_o=o(" (ViTMAE model)"),r_o=l(),au=a("li"),Oee=a("strong"),t_o=o("wav2vec2"),a_o=o(" \u2014 "),HP=a("a"),n_o=o("Wav2Vec2ForPreTraining"),s_o=o(" (Wav2Vec2 model)"),l_o=l(),nu=a("li"),Gee=a("strong"),i_o=o("xlm"),d_o=o(" \u2014 "),UP=a("a"),c_o=o("XLMWithLMHeadModel"),f_o=o(" (XLM model)"),m_o=l(),su=a("li"),Xee=a("strong"),g_o=o("xlm-roberta"),h_o=o(" \u2014 "),JP=a("a"),p_o=o("XLMRobertaForMaskedLM"),__o=o(" (XLM-RoBERTa model)"),u_o=l(),lu=a("li"),Vee=a("strong"),b_o=o("xlm-roberta-xl"),v_o=o(" \u2014 "),YP=a("a"),T_o=o("XLMRobertaXLForMaskedLM"),F_o=o(" (XLM-RoBERTa-XL model)"),C_o=l(),iu=a("li"),zee=a("strong"),M_o=o("xlnet"),E_o=o(" \u2014 "),KP=a("a"),y_o=o("XLNetLMHeadModel"),w_o=o(" (XLNet model)"),A_o=l(),du=a("p"),L_o=o("The model is set in evaluation mode by default using "),Wee=a("code"),B_o=o("model.eval()"),x_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qee=a("code"),k_o=o("model.train()"),R_o=l(),Hee=a("p"),S_o=o("Examples:"),P_o=l(),f(H3.$$.fragment),oke=l(),td=a("h2"),cu=a("a"),Uee=a("span"),f(U3.$$.fragment),$_o=l(),Jee=a("span"),I_o=o("AutoModelForCausalLM"),rke=l(),Ko=a("div"),f(J3.$$.fragment),j_o=l(),ad=a("p"),N_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Yee=a("code"),D_o=o("from_pretrained()"),q_o=o("class method or the "),Kee=a("code"),O_o=o("from_config()"),G_o=o(`class
method.`),X_o=l(),Y3=a("p"),V_o=o("This class cannot be instantiated directly using "),Zee=a("code"),z_o=o("__init__()"),W_o=o(" (throws an error)."),Q_o=l(),Wr=a("div"),f(K3.$$.fragment),H_o=l(),eoe=a("p"),U_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J_o=l(),nd=a("p"),Y_o=o(`Note:
Loading a model from its configuration file does `),ooe=a("strong"),K_o=o("not"),Z_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=a("code"),euo=o("from_pretrained()"),ouo=o("to load the model weights."),ruo=l(),toe=a("p"),tuo=o("Examples:"),auo=l(),f(Z3.$$.fragment),nuo=l(),qe=a("div"),f(e5.$$.fragment),suo=l(),aoe=a("p"),luo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iuo=l(),Wa=a("p"),duo=o("The model class to instantiate is selected based on the "),noe=a("code"),cuo=o("model_type"),fuo=o(` property of the config object (either
passed as an argument or loaded from `),soe=a("code"),muo=o("pretrained_model_name_or_path"),guo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),loe=a("code"),huo=o("pretrained_model_name_or_path"),puo=o(":"),_uo=l(),$=a("ul"),fu=a("li"),ioe=a("strong"),uuo=o("bart"),buo=o(" \u2014 "),ZP=a("a"),vuo=o("BartForCausalLM"),Tuo=o(" (BART model)"),Fuo=l(),mu=a("li"),doe=a("strong"),Cuo=o("bert"),Muo=o(" \u2014 "),e$=a("a"),Euo=o("BertLMHeadModel"),yuo=o(" (BERT model)"),wuo=l(),gu=a("li"),coe=a("strong"),Auo=o("bert-generation"),Luo=o(" \u2014 "),o$=a("a"),Buo=o("BertGenerationDecoder"),xuo=o(" (Bert Generation model)"),kuo=l(),hu=a("li"),foe=a("strong"),Ruo=o("big_bird"),Suo=o(" \u2014 "),r$=a("a"),Puo=o("BigBirdForCausalLM"),$uo=o(" (BigBird model)"),Iuo=l(),pu=a("li"),moe=a("strong"),juo=o("bigbird_pegasus"),Nuo=o(" \u2014 "),t$=a("a"),Duo=o("BigBirdPegasusForCausalLM"),quo=o(" (BigBirdPegasus model)"),Ouo=l(),_u=a("li"),goe=a("strong"),Guo=o("blenderbot"),Xuo=o(" \u2014 "),a$=a("a"),Vuo=o("BlenderbotForCausalLM"),zuo=o(" (Blenderbot model)"),Wuo=l(),uu=a("li"),hoe=a("strong"),Quo=o("blenderbot-small"),Huo=o(" \u2014 "),n$=a("a"),Uuo=o("BlenderbotSmallForCausalLM"),Juo=o(" (BlenderbotSmall model)"),Yuo=l(),bu=a("li"),poe=a("strong"),Kuo=o("camembert"),Zuo=o(" \u2014 "),s$=a("a"),e4o=o("CamembertForCausalLM"),o4o=o(" (CamemBERT model)"),r4o=l(),vu=a("li"),_oe=a("strong"),t4o=o("ctrl"),a4o=o(" \u2014 "),l$=a("a"),n4o=o("CTRLLMHeadModel"),s4o=o(" (CTRL model)"),l4o=l(),Tu=a("li"),uoe=a("strong"),i4o=o("data2vec-text"),d4o=o(" \u2014 "),i$=a("a"),c4o=o("Data2VecTextForCausalLM"),f4o=o(" (Data2VecText model)"),m4o=l(),Fu=a("li"),boe=a("strong"),g4o=o("electra"),h4o=o(" \u2014 "),d$=a("a"),p4o=o("ElectraForCausalLM"),_4o=o(" (ELECTRA model)"),u4o=l(),Cu=a("li"),voe=a("strong"),b4o=o("gpt2"),v4o=o(" \u2014 "),c$=a("a"),T4o=o("GPT2LMHeadModel"),F4o=o(" (OpenAI GPT-2 model)"),C4o=l(),Mu=a("li"),Toe=a("strong"),M4o=o("gpt_neo"),E4o=o(" \u2014 "),f$=a("a"),y4o=o("GPTNeoForCausalLM"),w4o=o(" (GPT Neo model)"),A4o=l(),Eu=a("li"),Foe=a("strong"),L4o=o("gptj"),B4o=o(" \u2014 "),m$=a("a"),x4o=o("GPTJForCausalLM"),k4o=o(" (GPT-J model)"),R4o=l(),yu=a("li"),Coe=a("strong"),S4o=o("marian"),P4o=o(" \u2014 "),g$=a("a"),$4o=o("MarianForCausalLM"),I4o=o(" (Marian model)"),j4o=l(),wu=a("li"),Moe=a("strong"),N4o=o("mbart"),D4o=o(" \u2014 "),h$=a("a"),q4o=o("MBartForCausalLM"),O4o=o(" (mBART model)"),G4o=l(),Au=a("li"),Eoe=a("strong"),X4o=o("megatron-bert"),V4o=o(" \u2014 "),p$=a("a"),z4o=o("MegatronBertForCausalLM"),W4o=o(" (MegatronBert model)"),Q4o=l(),Lu=a("li"),yoe=a("strong"),H4o=o("openai-gpt"),U4o=o(" \u2014 "),_$=a("a"),J4o=o("OpenAIGPTLMHeadModel"),Y4o=o(" (OpenAI GPT model)"),K4o=l(),Bu=a("li"),woe=a("strong"),Z4o=o("pegasus"),e1o=o(" \u2014 "),u$=a("a"),o1o=o("PegasusForCausalLM"),r1o=o(" (Pegasus model)"),t1o=l(),xu=a("li"),Aoe=a("strong"),a1o=o("plbart"),n1o=o(" \u2014 "),b$=a("a"),s1o=o("PLBartForCausalLM"),l1o=o(" (PLBart model)"),i1o=l(),ku=a("li"),Loe=a("strong"),d1o=o("prophetnet"),c1o=o(" \u2014 "),v$=a("a"),f1o=o("ProphetNetForCausalLM"),m1o=o(" (ProphetNet model)"),g1o=l(),Ru=a("li"),Boe=a("strong"),h1o=o("qdqbert"),p1o=o(" \u2014 "),T$=a("a"),_1o=o("QDQBertLMHeadModel"),u1o=o(" (QDQBert model)"),b1o=l(),Su=a("li"),xoe=a("strong"),v1o=o("reformer"),T1o=o(" \u2014 "),F$=a("a"),F1o=o("ReformerModelWithLMHead"),C1o=o(" (Reformer model)"),M1o=l(),Pu=a("li"),koe=a("strong"),E1o=o("rembert"),y1o=o(" \u2014 "),C$=a("a"),w1o=o("RemBertForCausalLM"),A1o=o(" (RemBERT model)"),L1o=l(),$u=a("li"),Roe=a("strong"),B1o=o("roberta"),x1o=o(" \u2014 "),M$=a("a"),k1o=o("RobertaForCausalLM"),R1o=o(" (RoBERTa model)"),S1o=l(),Iu=a("li"),Soe=a("strong"),P1o=o("roformer"),$1o=o(" \u2014 "),E$=a("a"),I1o=o("RoFormerForCausalLM"),j1o=o(" (RoFormer model)"),N1o=l(),ju=a("li"),Poe=a("strong"),D1o=o("speech_to_text_2"),q1o=o(" \u2014 "),y$=a("a"),O1o=o("Speech2Text2ForCausalLM"),G1o=o(" (Speech2Text2 model)"),X1o=l(),Nu=a("li"),$oe=a("strong"),V1o=o("transfo-xl"),z1o=o(" \u2014 "),w$=a("a"),W1o=o("TransfoXLLMHeadModel"),Q1o=o(" (Transformer-XL model)"),H1o=l(),Du=a("li"),Ioe=a("strong"),U1o=o("trocr"),J1o=o(" \u2014 "),A$=a("a"),Y1o=o("TrOCRForCausalLM"),K1o=o(" (TrOCR model)"),Z1o=l(),qu=a("li"),joe=a("strong"),ebo=o("xglm"),obo=o(" \u2014 "),L$=a("a"),rbo=o("XGLMForCausalLM"),tbo=o(" (XGLM model)"),abo=l(),Ou=a("li"),Noe=a("strong"),nbo=o("xlm"),sbo=o(" \u2014 "),B$=a("a"),lbo=o("XLMWithLMHeadModel"),ibo=o(" (XLM model)"),dbo=l(),Gu=a("li"),Doe=a("strong"),cbo=o("xlm-prophetnet"),fbo=o(" \u2014 "),x$=a("a"),mbo=o("XLMProphetNetForCausalLM"),gbo=o(" (XLMProphetNet model)"),hbo=l(),Xu=a("li"),qoe=a("strong"),pbo=o("xlm-roberta"),_bo=o(" \u2014 "),k$=a("a"),ubo=o("XLMRobertaForCausalLM"),bbo=o(" (XLM-RoBERTa model)"),vbo=l(),Vu=a("li"),Ooe=a("strong"),Tbo=o("xlm-roberta-xl"),Fbo=o(" \u2014 "),R$=a("a"),Cbo=o("XLMRobertaXLForCausalLM"),Mbo=o(" (XLM-RoBERTa-XL model)"),Ebo=l(),zu=a("li"),Goe=a("strong"),ybo=o("xlnet"),wbo=o(" \u2014 "),S$=a("a"),Abo=o("XLNetLMHeadModel"),Lbo=o(" (XLNet model)"),Bbo=l(),Wu=a("p"),xbo=o("The model is set in evaluation mode by default using "),Xoe=a("code"),kbo=o("model.eval()"),Rbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Voe=a("code"),Sbo=o("model.train()"),Pbo=l(),zoe=a("p"),$bo=o("Examples:"),Ibo=l(),f(o5.$$.fragment),tke=l(),sd=a("h2"),Qu=a("a"),Woe=a("span"),f(r5.$$.fragment),jbo=l(),Qoe=a("span"),Nbo=o("AutoModelForMaskedLM"),ake=l(),Zo=a("div"),f(t5.$$.fragment),Dbo=l(),ld=a("p"),qbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hoe=a("code"),Obo=o("from_pretrained()"),Gbo=o("class method or the "),Uoe=a("code"),Xbo=o("from_config()"),Vbo=o(`class
method.`),zbo=l(),a5=a("p"),Wbo=o("This class cannot be instantiated directly using "),Joe=a("code"),Qbo=o("__init__()"),Hbo=o(" (throws an error)."),Ubo=l(),Qr=a("div"),f(n5.$$.fragment),Jbo=l(),Yoe=a("p"),Ybo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Kbo=l(),id=a("p"),Zbo=o(`Note:
Loading a model from its configuration file does `),Koe=a("strong"),e2o=o("not"),o2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("code"),r2o=o("from_pretrained()"),t2o=o("to load the model weights."),a2o=l(),ere=a("p"),n2o=o("Examples:"),s2o=l(),f(s5.$$.fragment),l2o=l(),Oe=a("div"),f(l5.$$.fragment),i2o=l(),ore=a("p"),d2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c2o=l(),Qa=a("p"),f2o=o("The model class to instantiate is selected based on the "),rre=a("code"),m2o=o("model_type"),g2o=o(` property of the config object (either
passed as an argument or loaded from `),tre=a("code"),h2o=o("pretrained_model_name_or_path"),p2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),are=a("code"),_2o=o("pretrained_model_name_or_path"),u2o=o(":"),b2o=l(),I=a("ul"),Hu=a("li"),nre=a("strong"),v2o=o("albert"),T2o=o(" \u2014 "),P$=a("a"),F2o=o("AlbertForMaskedLM"),C2o=o(" (ALBERT model)"),M2o=l(),Uu=a("li"),sre=a("strong"),E2o=o("bart"),y2o=o(" \u2014 "),$$=a("a"),w2o=o("BartForConditionalGeneration"),A2o=o(" (BART model)"),L2o=l(),Ju=a("li"),lre=a("strong"),B2o=o("bert"),x2o=o(" \u2014 "),I$=a("a"),k2o=o("BertForMaskedLM"),R2o=o(" (BERT model)"),S2o=l(),Yu=a("li"),ire=a("strong"),P2o=o("big_bird"),$2o=o(" \u2014 "),j$=a("a"),I2o=o("BigBirdForMaskedLM"),j2o=o(" (BigBird model)"),N2o=l(),Ku=a("li"),dre=a("strong"),D2o=o("camembert"),q2o=o(" \u2014 "),N$=a("a"),O2o=o("CamembertForMaskedLM"),G2o=o(" (CamemBERT model)"),X2o=l(),Zu=a("li"),cre=a("strong"),V2o=o("convbert"),z2o=o(" \u2014 "),D$=a("a"),W2o=o("ConvBertForMaskedLM"),Q2o=o(" (ConvBERT model)"),H2o=l(),e4=a("li"),fre=a("strong"),U2o=o("data2vec-text"),J2o=o(" \u2014 "),q$=a("a"),Y2o=o("Data2VecTextForMaskedLM"),K2o=o(" (Data2VecText model)"),Z2o=l(),o4=a("li"),mre=a("strong"),evo=o("deberta"),ovo=o(" \u2014 "),O$=a("a"),rvo=o("DebertaForMaskedLM"),tvo=o(" (DeBERTa model)"),avo=l(),r4=a("li"),gre=a("strong"),nvo=o("deberta-v2"),svo=o(" \u2014 "),G$=a("a"),lvo=o("DebertaV2ForMaskedLM"),ivo=o(" (DeBERTa-v2 model)"),dvo=l(),t4=a("li"),hre=a("strong"),cvo=o("distilbert"),fvo=o(" \u2014 "),X$=a("a"),mvo=o("DistilBertForMaskedLM"),gvo=o(" (DistilBERT model)"),hvo=l(),a4=a("li"),pre=a("strong"),pvo=o("electra"),_vo=o(" \u2014 "),V$=a("a"),uvo=o("ElectraForMaskedLM"),bvo=o(" (ELECTRA model)"),vvo=l(),n4=a("li"),_re=a("strong"),Tvo=o("flaubert"),Fvo=o(" \u2014 "),z$=a("a"),Cvo=o("FlaubertWithLMHeadModel"),Mvo=o(" (FlauBERT model)"),Evo=l(),s4=a("li"),ure=a("strong"),yvo=o("fnet"),wvo=o(" \u2014 "),W$=a("a"),Avo=o("FNetForMaskedLM"),Lvo=o(" (FNet model)"),Bvo=l(),l4=a("li"),bre=a("strong"),xvo=o("funnel"),kvo=o(" \u2014 "),Q$=a("a"),Rvo=o("FunnelForMaskedLM"),Svo=o(" (Funnel Transformer model)"),Pvo=l(),i4=a("li"),vre=a("strong"),$vo=o("ibert"),Ivo=o(" \u2014 "),H$=a("a"),jvo=o("IBertForMaskedLM"),Nvo=o(" (I-BERT model)"),Dvo=l(),d4=a("li"),Tre=a("strong"),qvo=o("layoutlm"),Ovo=o(" \u2014 "),U$=a("a"),Gvo=o("LayoutLMForMaskedLM"),Xvo=o(" (LayoutLM model)"),Vvo=l(),c4=a("li"),Fre=a("strong"),zvo=o("longformer"),Wvo=o(" \u2014 "),J$=a("a"),Qvo=o("LongformerForMaskedLM"),Hvo=o(" (Longformer model)"),Uvo=l(),f4=a("li"),Cre=a("strong"),Jvo=o("mbart"),Yvo=o(" \u2014 "),Y$=a("a"),Kvo=o("MBartForConditionalGeneration"),Zvo=o(" (mBART model)"),e6o=l(),m4=a("li"),Mre=a("strong"),o6o=o("megatron-bert"),r6o=o(" \u2014 "),K$=a("a"),t6o=o("MegatronBertForMaskedLM"),a6o=o(" (MegatronBert model)"),n6o=l(),g4=a("li"),Ere=a("strong"),s6o=o("mobilebert"),l6o=o(" \u2014 "),Z$=a("a"),i6o=o("MobileBertForMaskedLM"),d6o=o(" (MobileBERT model)"),c6o=l(),h4=a("li"),yre=a("strong"),f6o=o("mpnet"),m6o=o(" \u2014 "),eI=a("a"),g6o=o("MPNetForMaskedLM"),h6o=o(" (MPNet model)"),p6o=l(),p4=a("li"),wre=a("strong"),_6o=o("nystromformer"),u6o=o(" \u2014 "),oI=a("a"),b6o=o("NystromformerForMaskedLM"),v6o=o(" (Nystromformer model)"),T6o=l(),_4=a("li"),Are=a("strong"),F6o=o("perceiver"),C6o=o(" \u2014 "),rI=a("a"),M6o=o("PerceiverForMaskedLM"),E6o=o(" (Perceiver model)"),y6o=l(),u4=a("li"),Lre=a("strong"),w6o=o("qdqbert"),A6o=o(" \u2014 "),tI=a("a"),L6o=o("QDQBertForMaskedLM"),B6o=o(" (QDQBert model)"),x6o=l(),b4=a("li"),Bre=a("strong"),k6o=o("reformer"),R6o=o(" \u2014 "),aI=a("a"),S6o=o("ReformerForMaskedLM"),P6o=o(" (Reformer model)"),$6o=l(),v4=a("li"),xre=a("strong"),I6o=o("rembert"),j6o=o(" \u2014 "),nI=a("a"),N6o=o("RemBertForMaskedLM"),D6o=o(" (RemBERT model)"),q6o=l(),T4=a("li"),kre=a("strong"),O6o=o("roberta"),G6o=o(" \u2014 "),sI=a("a"),X6o=o("RobertaForMaskedLM"),V6o=o(" (RoBERTa model)"),z6o=l(),F4=a("li"),Rre=a("strong"),W6o=o("roformer"),Q6o=o(" \u2014 "),lI=a("a"),H6o=o("RoFormerForMaskedLM"),U6o=o(" (RoFormer model)"),J6o=l(),C4=a("li"),Sre=a("strong"),Y6o=o("squeezebert"),K6o=o(" \u2014 "),iI=a("a"),Z6o=o("SqueezeBertForMaskedLM"),e0o=o(" (SqueezeBERT model)"),o0o=l(),M4=a("li"),Pre=a("strong"),r0o=o("tapas"),t0o=o(" \u2014 "),dI=a("a"),a0o=o("TapasForMaskedLM"),n0o=o(" (TAPAS model)"),s0o=l(),E4=a("li"),$re=a("strong"),l0o=o("wav2vec2"),i0o=o(" \u2014 "),Ire=a("code"),d0o=o("Wav2Vec2ForMaskedLM"),c0o=o("(Wav2Vec2 model)"),f0o=l(),y4=a("li"),jre=a("strong"),m0o=o("xlm"),g0o=o(" \u2014 "),cI=a("a"),h0o=o("XLMWithLMHeadModel"),p0o=o(" (XLM model)"),_0o=l(),w4=a("li"),Nre=a("strong"),u0o=o("xlm-roberta"),b0o=o(" \u2014 "),fI=a("a"),v0o=o("XLMRobertaForMaskedLM"),T0o=o(" (XLM-RoBERTa model)"),F0o=l(),A4=a("li"),Dre=a("strong"),C0o=o("xlm-roberta-xl"),M0o=o(" \u2014 "),mI=a("a"),E0o=o("XLMRobertaXLForMaskedLM"),y0o=o(" (XLM-RoBERTa-XL model)"),w0o=l(),L4=a("li"),qre=a("strong"),A0o=o("yoso"),L0o=o(" \u2014 "),gI=a("a"),B0o=o("YosoForMaskedLM"),x0o=o(" (YOSO model)"),k0o=l(),B4=a("p"),R0o=o("The model is set in evaluation mode by default using "),Ore=a("code"),S0o=o("model.eval()"),P0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gre=a("code"),$0o=o("model.train()"),I0o=l(),Xre=a("p"),j0o=o("Examples:"),N0o=l(),f(i5.$$.fragment),nke=l(),dd=a("h2"),x4=a("a"),Vre=a("span"),f(d5.$$.fragment),D0o=l(),zre=a("span"),q0o=o("AutoModelForSeq2SeqLM"),ske=l(),er=a("div"),f(c5.$$.fragment),O0o=l(),cd=a("p"),G0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wre=a("code"),X0o=o("from_pretrained()"),V0o=o("class method or the "),Qre=a("code"),z0o=o("from_config()"),W0o=o(`class
method.`),Q0o=l(),f5=a("p"),H0o=o("This class cannot be instantiated directly using "),Hre=a("code"),U0o=o("__init__()"),J0o=o(" (throws an error)."),Y0o=l(),Hr=a("div"),f(m5.$$.fragment),K0o=l(),Ure=a("p"),Z0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eTo=l(),fd=a("p"),oTo=o(`Note:
Loading a model from its configuration file does `),Jre=a("strong"),rTo=o("not"),tTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yre=a("code"),aTo=o("from_pretrained()"),nTo=o("to load the model weights."),sTo=l(),Kre=a("p"),lTo=o("Examples:"),iTo=l(),f(g5.$$.fragment),dTo=l(),Ge=a("div"),f(h5.$$.fragment),cTo=l(),Zre=a("p"),fTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mTo=l(),Ha=a("p"),gTo=o("The model class to instantiate is selected based on the "),ete=a("code"),hTo=o("model_type"),pTo=o(` property of the config object (either
passed as an argument or loaded from `),ote=a("code"),_To=o("pretrained_model_name_or_path"),uTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rte=a("code"),bTo=o("pretrained_model_name_or_path"),vTo=o(":"),TTo=l(),se=a("ul"),k4=a("li"),tte=a("strong"),FTo=o("bart"),CTo=o(" \u2014 "),hI=a("a"),MTo=o("BartForConditionalGeneration"),ETo=o(" (BART model)"),yTo=l(),R4=a("li"),ate=a("strong"),wTo=o("bigbird_pegasus"),ATo=o(" \u2014 "),pI=a("a"),LTo=o("BigBirdPegasusForConditionalGeneration"),BTo=o(" (BigBirdPegasus model)"),xTo=l(),S4=a("li"),nte=a("strong"),kTo=o("blenderbot"),RTo=o(" \u2014 "),_I=a("a"),STo=o("BlenderbotForConditionalGeneration"),PTo=o(" (Blenderbot model)"),$To=l(),P4=a("li"),ste=a("strong"),ITo=o("blenderbot-small"),jTo=o(" \u2014 "),uI=a("a"),NTo=o("BlenderbotSmallForConditionalGeneration"),DTo=o(" (BlenderbotSmall model)"),qTo=l(),$4=a("li"),lte=a("strong"),OTo=o("encoder-decoder"),GTo=o(" \u2014 "),bI=a("a"),XTo=o("EncoderDecoderModel"),VTo=o(" (Encoder decoder model)"),zTo=l(),I4=a("li"),ite=a("strong"),WTo=o("fsmt"),QTo=o(" \u2014 "),vI=a("a"),HTo=o("FSMTForConditionalGeneration"),UTo=o(" (FairSeq Machine-Translation model)"),JTo=l(),j4=a("li"),dte=a("strong"),YTo=o("led"),KTo=o(" \u2014 "),TI=a("a"),ZTo=o("LEDForConditionalGeneration"),eFo=o(" (LED model)"),oFo=l(),N4=a("li"),cte=a("strong"),rFo=o("m2m_100"),tFo=o(" \u2014 "),FI=a("a"),aFo=o("M2M100ForConditionalGeneration"),nFo=o(" (M2M100 model)"),sFo=l(),D4=a("li"),fte=a("strong"),lFo=o("marian"),iFo=o(" \u2014 "),CI=a("a"),dFo=o("MarianMTModel"),cFo=o(" (Marian model)"),fFo=l(),q4=a("li"),mte=a("strong"),mFo=o("mbart"),gFo=o(" \u2014 "),MI=a("a"),hFo=o("MBartForConditionalGeneration"),pFo=o(" (mBART model)"),_Fo=l(),O4=a("li"),gte=a("strong"),uFo=o("mt5"),bFo=o(" \u2014 "),EI=a("a"),vFo=o("MT5ForConditionalGeneration"),TFo=o(" (mT5 model)"),FFo=l(),G4=a("li"),hte=a("strong"),CFo=o("pegasus"),MFo=o(" \u2014 "),yI=a("a"),EFo=o("PegasusForConditionalGeneration"),yFo=o(" (Pegasus model)"),wFo=l(),X4=a("li"),pte=a("strong"),AFo=o("plbart"),LFo=o(" \u2014 "),wI=a("a"),BFo=o("PLBartForConditionalGeneration"),xFo=o(" (PLBart model)"),kFo=l(),V4=a("li"),_te=a("strong"),RFo=o("prophetnet"),SFo=o(" \u2014 "),AI=a("a"),PFo=o("ProphetNetForConditionalGeneration"),$Fo=o(" (ProphetNet model)"),IFo=l(),z4=a("li"),ute=a("strong"),jFo=o("t5"),NFo=o(" \u2014 "),LI=a("a"),DFo=o("T5ForConditionalGeneration"),qFo=o(" (T5 model)"),OFo=l(),W4=a("li"),bte=a("strong"),GFo=o("xlm-prophetnet"),XFo=o(" \u2014 "),BI=a("a"),VFo=o("XLMProphetNetForConditionalGeneration"),zFo=o(" (XLMProphetNet model)"),WFo=l(),Q4=a("p"),QFo=o("The model is set in evaluation mode by default using "),vte=a("code"),HFo=o("model.eval()"),UFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tte=a("code"),JFo=o("model.train()"),YFo=l(),Fte=a("p"),KFo=o("Examples:"),ZFo=l(),f(p5.$$.fragment),lke=l(),md=a("h2"),H4=a("a"),Cte=a("span"),f(_5.$$.fragment),eCo=l(),Mte=a("span"),oCo=o("AutoModelForSequenceClassification"),ike=l(),or=a("div"),f(u5.$$.fragment),rCo=l(),gd=a("p"),tCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ete=a("code"),aCo=o("from_pretrained()"),nCo=o("class method or the "),yte=a("code"),sCo=o("from_config()"),lCo=o(`class
method.`),iCo=l(),b5=a("p"),dCo=o("This class cannot be instantiated directly using "),wte=a("code"),cCo=o("__init__()"),fCo=o(" (throws an error)."),mCo=l(),Ur=a("div"),f(v5.$$.fragment),gCo=l(),Ate=a("p"),hCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pCo=l(),hd=a("p"),_Co=o(`Note:
Loading a model from its configuration file does `),Lte=a("strong"),uCo=o("not"),bCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=a("code"),vCo=o("from_pretrained()"),TCo=o("to load the model weights."),FCo=l(),xte=a("p"),CCo=o("Examples:"),MCo=l(),f(T5.$$.fragment),ECo=l(),Xe=a("div"),f(F5.$$.fragment),yCo=l(),kte=a("p"),wCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ACo=l(),Ua=a("p"),LCo=o("The model class to instantiate is selected based on the "),Rte=a("code"),BCo=o("model_type"),xCo=o(` property of the config object (either
passed as an argument or loaded from `),Ste=a("code"),kCo=o("pretrained_model_name_or_path"),RCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=a("code"),SCo=o("pretrained_model_name_or_path"),PCo=o(":"),$Co=l(),A=a("ul"),U4=a("li"),$te=a("strong"),ICo=o("albert"),jCo=o(" \u2014 "),xI=a("a"),NCo=o("AlbertForSequenceClassification"),DCo=o(" (ALBERT model)"),qCo=l(),J4=a("li"),Ite=a("strong"),OCo=o("bart"),GCo=o(" \u2014 "),kI=a("a"),XCo=o("BartForSequenceClassification"),VCo=o(" (BART model)"),zCo=l(),Y4=a("li"),jte=a("strong"),WCo=o("bert"),QCo=o(" \u2014 "),RI=a("a"),HCo=o("BertForSequenceClassification"),UCo=o(" (BERT model)"),JCo=l(),K4=a("li"),Nte=a("strong"),YCo=o("big_bird"),KCo=o(" \u2014 "),SI=a("a"),ZCo=o("BigBirdForSequenceClassification"),eMo=o(" (BigBird model)"),oMo=l(),Z4=a("li"),Dte=a("strong"),rMo=o("bigbird_pegasus"),tMo=o(" \u2014 "),PI=a("a"),aMo=o("BigBirdPegasusForSequenceClassification"),nMo=o(" (BigBirdPegasus model)"),sMo=l(),e1=a("li"),qte=a("strong"),lMo=o("camembert"),iMo=o(" \u2014 "),$I=a("a"),dMo=o("CamembertForSequenceClassification"),cMo=o(" (CamemBERT model)"),fMo=l(),o1=a("li"),Ote=a("strong"),mMo=o("canine"),gMo=o(" \u2014 "),II=a("a"),hMo=o("CanineForSequenceClassification"),pMo=o(" (Canine model)"),_Mo=l(),r1=a("li"),Gte=a("strong"),uMo=o("convbert"),bMo=o(" \u2014 "),jI=a("a"),vMo=o("ConvBertForSequenceClassification"),TMo=o(" (ConvBERT model)"),FMo=l(),t1=a("li"),Xte=a("strong"),CMo=o("ctrl"),MMo=o(" \u2014 "),NI=a("a"),EMo=o("CTRLForSequenceClassification"),yMo=o(" (CTRL model)"),wMo=l(),a1=a("li"),Vte=a("strong"),AMo=o("data2vec-text"),LMo=o(" \u2014 "),DI=a("a"),BMo=o("Data2VecTextForSequenceClassification"),xMo=o(" (Data2VecText model)"),kMo=l(),n1=a("li"),zte=a("strong"),RMo=o("deberta"),SMo=o(" \u2014 "),qI=a("a"),PMo=o("DebertaForSequenceClassification"),$Mo=o(" (DeBERTa model)"),IMo=l(),s1=a("li"),Wte=a("strong"),jMo=o("deberta-v2"),NMo=o(" \u2014 "),OI=a("a"),DMo=o("DebertaV2ForSequenceClassification"),qMo=o(" (DeBERTa-v2 model)"),OMo=l(),l1=a("li"),Qte=a("strong"),GMo=o("distilbert"),XMo=o(" \u2014 "),GI=a("a"),VMo=o("DistilBertForSequenceClassification"),zMo=o(" (DistilBERT model)"),WMo=l(),i1=a("li"),Hte=a("strong"),QMo=o("electra"),HMo=o(" \u2014 "),XI=a("a"),UMo=o("ElectraForSequenceClassification"),JMo=o(" (ELECTRA model)"),YMo=l(),d1=a("li"),Ute=a("strong"),KMo=o("flaubert"),ZMo=o(" \u2014 "),VI=a("a"),eEo=o("FlaubertForSequenceClassification"),oEo=o(" (FlauBERT model)"),rEo=l(),c1=a("li"),Jte=a("strong"),tEo=o("fnet"),aEo=o(" \u2014 "),zI=a("a"),nEo=o("FNetForSequenceClassification"),sEo=o(" (FNet model)"),lEo=l(),f1=a("li"),Yte=a("strong"),iEo=o("funnel"),dEo=o(" \u2014 "),WI=a("a"),cEo=o("FunnelForSequenceClassification"),fEo=o(" (Funnel Transformer model)"),mEo=l(),m1=a("li"),Kte=a("strong"),gEo=o("gpt2"),hEo=o(" \u2014 "),QI=a("a"),pEo=o("GPT2ForSequenceClassification"),_Eo=o(" (OpenAI GPT-2 model)"),uEo=l(),g1=a("li"),Zte=a("strong"),bEo=o("gpt_neo"),vEo=o(" \u2014 "),HI=a("a"),TEo=o("GPTNeoForSequenceClassification"),FEo=o(" (GPT Neo model)"),CEo=l(),h1=a("li"),eae=a("strong"),MEo=o("gptj"),EEo=o(" \u2014 "),UI=a("a"),yEo=o("GPTJForSequenceClassification"),wEo=o(" (GPT-J model)"),AEo=l(),p1=a("li"),oae=a("strong"),LEo=o("ibert"),BEo=o(" \u2014 "),JI=a("a"),xEo=o("IBertForSequenceClassification"),kEo=o(" (I-BERT model)"),REo=l(),_1=a("li"),rae=a("strong"),SEo=o("layoutlm"),PEo=o(" \u2014 "),YI=a("a"),$Eo=o("LayoutLMForSequenceClassification"),IEo=o(" (LayoutLM model)"),jEo=l(),u1=a("li"),tae=a("strong"),NEo=o("layoutlmv2"),DEo=o(" \u2014 "),KI=a("a"),qEo=o("LayoutLMv2ForSequenceClassification"),OEo=o(" (LayoutLMv2 model)"),GEo=l(),b1=a("li"),aae=a("strong"),XEo=o("led"),VEo=o(" \u2014 "),ZI=a("a"),zEo=o("LEDForSequenceClassification"),WEo=o(" (LED model)"),QEo=l(),v1=a("li"),nae=a("strong"),HEo=o("longformer"),UEo=o(" \u2014 "),ej=a("a"),JEo=o("LongformerForSequenceClassification"),YEo=o(" (Longformer model)"),KEo=l(),T1=a("li"),sae=a("strong"),ZEo=o("mbart"),e3o=o(" \u2014 "),oj=a("a"),o3o=o("MBartForSequenceClassification"),r3o=o(" (mBART model)"),t3o=l(),F1=a("li"),lae=a("strong"),a3o=o("megatron-bert"),n3o=o(" \u2014 "),rj=a("a"),s3o=o("MegatronBertForSequenceClassification"),l3o=o(" (MegatronBert model)"),i3o=l(),C1=a("li"),iae=a("strong"),d3o=o("mobilebert"),c3o=o(" \u2014 "),tj=a("a"),f3o=o("MobileBertForSequenceClassification"),m3o=o(" (MobileBERT model)"),g3o=l(),M1=a("li"),dae=a("strong"),h3o=o("mpnet"),p3o=o(" \u2014 "),aj=a("a"),_3o=o("MPNetForSequenceClassification"),u3o=o(" (MPNet model)"),b3o=l(),E1=a("li"),cae=a("strong"),v3o=o("nystromformer"),T3o=o(" \u2014 "),nj=a("a"),F3o=o("NystromformerForSequenceClassification"),C3o=o(" (Nystromformer model)"),M3o=l(),y1=a("li"),fae=a("strong"),E3o=o("openai-gpt"),y3o=o(" \u2014 "),sj=a("a"),w3o=o("OpenAIGPTForSequenceClassification"),A3o=o(" (OpenAI GPT model)"),L3o=l(),w1=a("li"),mae=a("strong"),B3o=o("perceiver"),x3o=o(" \u2014 "),lj=a("a"),k3o=o("PerceiverForSequenceClassification"),R3o=o(" (Perceiver model)"),S3o=l(),A1=a("li"),gae=a("strong"),P3o=o("plbart"),$3o=o(" \u2014 "),ij=a("a"),I3o=o("PLBartForSequenceClassification"),j3o=o(" (PLBart model)"),N3o=l(),L1=a("li"),hae=a("strong"),D3o=o("qdqbert"),q3o=o(" \u2014 "),dj=a("a"),O3o=o("QDQBertForSequenceClassification"),G3o=o(" (QDQBert model)"),X3o=l(),B1=a("li"),pae=a("strong"),V3o=o("reformer"),z3o=o(" \u2014 "),cj=a("a"),W3o=o("ReformerForSequenceClassification"),Q3o=o(" (Reformer model)"),H3o=l(),x1=a("li"),_ae=a("strong"),U3o=o("rembert"),J3o=o(" \u2014 "),fj=a("a"),Y3o=o("RemBertForSequenceClassification"),K3o=o(" (RemBERT model)"),Z3o=l(),k1=a("li"),uae=a("strong"),e5o=o("roberta"),o5o=o(" \u2014 "),mj=a("a"),r5o=o("RobertaForSequenceClassification"),t5o=o(" (RoBERTa model)"),a5o=l(),R1=a("li"),bae=a("strong"),n5o=o("roformer"),s5o=o(" \u2014 "),gj=a("a"),l5o=o("RoFormerForSequenceClassification"),i5o=o(" (RoFormer model)"),d5o=l(),S1=a("li"),vae=a("strong"),c5o=o("squeezebert"),f5o=o(" \u2014 "),hj=a("a"),m5o=o("SqueezeBertForSequenceClassification"),g5o=o(" (SqueezeBERT model)"),h5o=l(),P1=a("li"),Tae=a("strong"),p5o=o("tapas"),_5o=o(" \u2014 "),pj=a("a"),u5o=o("TapasForSequenceClassification"),b5o=o(" (TAPAS model)"),v5o=l(),$1=a("li"),Fae=a("strong"),T5o=o("transfo-xl"),F5o=o(" \u2014 "),_j=a("a"),C5o=o("TransfoXLForSequenceClassification"),M5o=o(" (Transformer-XL model)"),E5o=l(),I1=a("li"),Cae=a("strong"),y5o=o("xlm"),w5o=o(" \u2014 "),uj=a("a"),A5o=o("XLMForSequenceClassification"),L5o=o(" (XLM model)"),B5o=l(),j1=a("li"),Mae=a("strong"),x5o=o("xlm-roberta"),k5o=o(" \u2014 "),bj=a("a"),R5o=o("XLMRobertaForSequenceClassification"),S5o=o(" (XLM-RoBERTa model)"),P5o=l(),N1=a("li"),Eae=a("strong"),$5o=o("xlm-roberta-xl"),I5o=o(" \u2014 "),vj=a("a"),j5o=o("XLMRobertaXLForSequenceClassification"),N5o=o(" (XLM-RoBERTa-XL model)"),D5o=l(),D1=a("li"),yae=a("strong"),q5o=o("xlnet"),O5o=o(" \u2014 "),Tj=a("a"),G5o=o("XLNetForSequenceClassification"),X5o=o(" (XLNet model)"),V5o=l(),q1=a("li"),wae=a("strong"),z5o=o("yoso"),W5o=o(" \u2014 "),Fj=a("a"),Q5o=o("YosoForSequenceClassification"),H5o=o(" (YOSO model)"),U5o=l(),O1=a("p"),J5o=o("The model is set in evaluation mode by default using "),Aae=a("code"),Y5o=o("model.eval()"),K5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=a("code"),Z5o=o("model.train()"),eyo=l(),Bae=a("p"),oyo=o("Examples:"),ryo=l(),f(C5.$$.fragment),dke=l(),pd=a("h2"),G1=a("a"),xae=a("span"),f(M5.$$.fragment),tyo=l(),kae=a("span"),ayo=o("AutoModelForMultipleChoice"),cke=l(),rr=a("div"),f(E5.$$.fragment),nyo=l(),_d=a("p"),syo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rae=a("code"),lyo=o("from_pretrained()"),iyo=o("class method or the "),Sae=a("code"),dyo=o("from_config()"),cyo=o(`class
method.`),fyo=l(),y5=a("p"),myo=o("This class cannot be instantiated directly using "),Pae=a("code"),gyo=o("__init__()"),hyo=o(" (throws an error)."),pyo=l(),Jr=a("div"),f(w5.$$.fragment),_yo=l(),$ae=a("p"),uyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),byo=l(),ud=a("p"),vyo=o(`Note:
Loading a model from its configuration file does `),Iae=a("strong"),Tyo=o("not"),Fyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=a("code"),Cyo=o("from_pretrained()"),Myo=o("to load the model weights."),Eyo=l(),Nae=a("p"),yyo=o("Examples:"),wyo=l(),f(A5.$$.fragment),Ayo=l(),Ve=a("div"),f(L5.$$.fragment),Lyo=l(),Dae=a("p"),Byo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xyo=l(),Ja=a("p"),kyo=o("The model class to instantiate is selected based on the "),qae=a("code"),Ryo=o("model_type"),Syo=o(` property of the config object (either
passed as an argument or loaded from `),Oae=a("code"),Pyo=o("pretrained_model_name_or_path"),$yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gae=a("code"),Iyo=o("pretrained_model_name_or_path"),jyo=o(":"),Nyo=l(),O=a("ul"),X1=a("li"),Xae=a("strong"),Dyo=o("albert"),qyo=o(" \u2014 "),Cj=a("a"),Oyo=o("AlbertForMultipleChoice"),Gyo=o(" (ALBERT model)"),Xyo=l(),V1=a("li"),Vae=a("strong"),Vyo=o("bert"),zyo=o(" \u2014 "),Mj=a("a"),Wyo=o("BertForMultipleChoice"),Qyo=o(" (BERT model)"),Hyo=l(),z1=a("li"),zae=a("strong"),Uyo=o("big_bird"),Jyo=o(" \u2014 "),Ej=a("a"),Yyo=o("BigBirdForMultipleChoice"),Kyo=o(" (BigBird model)"),Zyo=l(),W1=a("li"),Wae=a("strong"),ewo=o("camembert"),owo=o(" \u2014 "),yj=a("a"),rwo=o("CamembertForMultipleChoice"),two=o(" (CamemBERT model)"),awo=l(),Q1=a("li"),Qae=a("strong"),nwo=o("canine"),swo=o(" \u2014 "),wj=a("a"),lwo=o("CanineForMultipleChoice"),iwo=o(" (Canine model)"),dwo=l(),H1=a("li"),Hae=a("strong"),cwo=o("convbert"),fwo=o(" \u2014 "),Aj=a("a"),mwo=o("ConvBertForMultipleChoice"),gwo=o(" (ConvBERT model)"),hwo=l(),U1=a("li"),Uae=a("strong"),pwo=o("data2vec-text"),_wo=o(" \u2014 "),Lj=a("a"),uwo=o("Data2VecTextForMultipleChoice"),bwo=o(" (Data2VecText model)"),vwo=l(),J1=a("li"),Jae=a("strong"),Two=o("distilbert"),Fwo=o(" \u2014 "),Bj=a("a"),Cwo=o("DistilBertForMultipleChoice"),Mwo=o(" (DistilBERT model)"),Ewo=l(),Y1=a("li"),Yae=a("strong"),ywo=o("electra"),wwo=o(" \u2014 "),xj=a("a"),Awo=o("ElectraForMultipleChoice"),Lwo=o(" (ELECTRA model)"),Bwo=l(),K1=a("li"),Kae=a("strong"),xwo=o("flaubert"),kwo=o(" \u2014 "),kj=a("a"),Rwo=o("FlaubertForMultipleChoice"),Swo=o(" (FlauBERT model)"),Pwo=l(),Z1=a("li"),Zae=a("strong"),$wo=o("fnet"),Iwo=o(" \u2014 "),Rj=a("a"),jwo=o("FNetForMultipleChoice"),Nwo=o(" (FNet model)"),Dwo=l(),eb=a("li"),ene=a("strong"),qwo=o("funnel"),Owo=o(" \u2014 "),Sj=a("a"),Gwo=o("FunnelForMultipleChoice"),Xwo=o(" (Funnel Transformer model)"),Vwo=l(),ob=a("li"),one=a("strong"),zwo=o("ibert"),Wwo=o(" \u2014 "),Pj=a("a"),Qwo=o("IBertForMultipleChoice"),Hwo=o(" (I-BERT model)"),Uwo=l(),rb=a("li"),rne=a("strong"),Jwo=o("longformer"),Ywo=o(" \u2014 "),$j=a("a"),Kwo=o("LongformerForMultipleChoice"),Zwo=o(" (Longformer model)"),eAo=l(),tb=a("li"),tne=a("strong"),oAo=o("megatron-bert"),rAo=o(" \u2014 "),Ij=a("a"),tAo=o("MegatronBertForMultipleChoice"),aAo=o(" (MegatronBert model)"),nAo=l(),ab=a("li"),ane=a("strong"),sAo=o("mobilebert"),lAo=o(" \u2014 "),jj=a("a"),iAo=o("MobileBertForMultipleChoice"),dAo=o(" (MobileBERT model)"),cAo=l(),nb=a("li"),nne=a("strong"),fAo=o("mpnet"),mAo=o(" \u2014 "),Nj=a("a"),gAo=o("MPNetForMultipleChoice"),hAo=o(" (MPNet model)"),pAo=l(),sb=a("li"),sne=a("strong"),_Ao=o("nystromformer"),uAo=o(" \u2014 "),Dj=a("a"),bAo=o("NystromformerForMultipleChoice"),vAo=o(" (Nystromformer model)"),TAo=l(),lb=a("li"),lne=a("strong"),FAo=o("qdqbert"),CAo=o(" \u2014 "),qj=a("a"),MAo=o("QDQBertForMultipleChoice"),EAo=o(" (QDQBert model)"),yAo=l(),ib=a("li"),ine=a("strong"),wAo=o("rembert"),AAo=o(" \u2014 "),Oj=a("a"),LAo=o("RemBertForMultipleChoice"),BAo=o(" (RemBERT model)"),xAo=l(),db=a("li"),dne=a("strong"),kAo=o("roberta"),RAo=o(" \u2014 "),Gj=a("a"),SAo=o("RobertaForMultipleChoice"),PAo=o(" (RoBERTa model)"),$Ao=l(),cb=a("li"),cne=a("strong"),IAo=o("roformer"),jAo=o(" \u2014 "),Xj=a("a"),NAo=o("RoFormerForMultipleChoice"),DAo=o(" (RoFormer model)"),qAo=l(),fb=a("li"),fne=a("strong"),OAo=o("squeezebert"),GAo=o(" \u2014 "),Vj=a("a"),XAo=o("SqueezeBertForMultipleChoice"),VAo=o(" (SqueezeBERT model)"),zAo=l(),mb=a("li"),mne=a("strong"),WAo=o("xlm"),QAo=o(" \u2014 "),zj=a("a"),HAo=o("XLMForMultipleChoice"),UAo=o(" (XLM model)"),JAo=l(),gb=a("li"),gne=a("strong"),YAo=o("xlm-roberta"),KAo=o(" \u2014 "),Wj=a("a"),ZAo=o("XLMRobertaForMultipleChoice"),eLo=o(" (XLM-RoBERTa model)"),oLo=l(),hb=a("li"),hne=a("strong"),rLo=o("xlm-roberta-xl"),tLo=o(" \u2014 "),Qj=a("a"),aLo=o("XLMRobertaXLForMultipleChoice"),nLo=o(" (XLM-RoBERTa-XL model)"),sLo=l(),pb=a("li"),pne=a("strong"),lLo=o("xlnet"),iLo=o(" \u2014 "),Hj=a("a"),dLo=o("XLNetForMultipleChoice"),cLo=o(" (XLNet model)"),fLo=l(),_b=a("li"),_ne=a("strong"),mLo=o("yoso"),gLo=o(" \u2014 "),Uj=a("a"),hLo=o("YosoForMultipleChoice"),pLo=o(" (YOSO model)"),_Lo=l(),ub=a("p"),uLo=o("The model is set in evaluation mode by default using "),une=a("code"),bLo=o("model.eval()"),vLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bne=a("code"),TLo=o("model.train()"),FLo=l(),vne=a("p"),CLo=o("Examples:"),MLo=l(),f(B5.$$.fragment),fke=l(),bd=a("h2"),bb=a("a"),Tne=a("span"),f(x5.$$.fragment),ELo=l(),Fne=a("span"),yLo=o("AutoModelForNextSentencePrediction"),mke=l(),tr=a("div"),f(k5.$$.fragment),wLo=l(),vd=a("p"),ALo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cne=a("code"),LLo=o("from_pretrained()"),BLo=o("class method or the "),Mne=a("code"),xLo=o("from_config()"),kLo=o(`class
method.`),RLo=l(),R5=a("p"),SLo=o("This class cannot be instantiated directly using "),Ene=a("code"),PLo=o("__init__()"),$Lo=o(" (throws an error)."),ILo=l(),Yr=a("div"),f(S5.$$.fragment),jLo=l(),yne=a("p"),NLo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DLo=l(),Td=a("p"),qLo=o(`Note:
Loading a model from its configuration file does `),wne=a("strong"),OLo=o("not"),GLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ane=a("code"),XLo=o("from_pretrained()"),VLo=o("to load the model weights."),zLo=l(),Lne=a("p"),WLo=o("Examples:"),QLo=l(),f(P5.$$.fragment),HLo=l(),ze=a("div"),f($5.$$.fragment),ULo=l(),Bne=a("p"),JLo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YLo=l(),Ya=a("p"),KLo=o("The model class to instantiate is selected based on the "),xne=a("code"),ZLo=o("model_type"),e7o=o(` property of the config object (either
passed as an argument or loaded from `),kne=a("code"),o7o=o("pretrained_model_name_or_path"),r7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=a("code"),t7o=o("pretrained_model_name_or_path"),a7o=o(":"),n7o=l(),da=a("ul"),vb=a("li"),Sne=a("strong"),s7o=o("bert"),l7o=o(" \u2014 "),Jj=a("a"),i7o=o("BertForNextSentencePrediction"),d7o=o(" (BERT model)"),c7o=l(),Tb=a("li"),Pne=a("strong"),f7o=o("fnet"),m7o=o(" \u2014 "),Yj=a("a"),g7o=o("FNetForNextSentencePrediction"),h7o=o(" (FNet model)"),p7o=l(),Fb=a("li"),$ne=a("strong"),_7o=o("megatron-bert"),u7o=o(" \u2014 "),Kj=a("a"),b7o=o("MegatronBertForNextSentencePrediction"),v7o=o(" (MegatronBert model)"),T7o=l(),Cb=a("li"),Ine=a("strong"),F7o=o("mobilebert"),C7o=o(" \u2014 "),Zj=a("a"),M7o=o("MobileBertForNextSentencePrediction"),E7o=o(" (MobileBERT model)"),y7o=l(),Mb=a("li"),jne=a("strong"),w7o=o("qdqbert"),A7o=o(" \u2014 "),eN=a("a"),L7o=o("QDQBertForNextSentencePrediction"),B7o=o(" (QDQBert model)"),x7o=l(),Eb=a("p"),k7o=o("The model is set in evaluation mode by default using "),Nne=a("code"),R7o=o("model.eval()"),S7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=a("code"),P7o=o("model.train()"),$7o=l(),qne=a("p"),I7o=o("Examples:"),j7o=l(),f(I5.$$.fragment),gke=l(),Fd=a("h2"),yb=a("a"),One=a("span"),f(j5.$$.fragment),N7o=l(),Gne=a("span"),D7o=o("AutoModelForTokenClassification"),hke=l(),ar=a("div"),f(N5.$$.fragment),q7o=l(),Cd=a("p"),O7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xne=a("code"),G7o=o("from_pretrained()"),X7o=o("class method or the "),Vne=a("code"),V7o=o("from_config()"),z7o=o(`class
method.`),W7o=l(),D5=a("p"),Q7o=o("This class cannot be instantiated directly using "),zne=a("code"),H7o=o("__init__()"),U7o=o(" (throws an error)."),J7o=l(),Kr=a("div"),f(q5.$$.fragment),Y7o=l(),Wne=a("p"),K7o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Z7o=l(),Md=a("p"),e8o=o(`Note:
Loading a model from its configuration file does `),Qne=a("strong"),o8o=o("not"),r8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hne=a("code"),t8o=o("from_pretrained()"),a8o=o("to load the model weights."),n8o=l(),Une=a("p"),s8o=o("Examples:"),l8o=l(),f(O5.$$.fragment),i8o=l(),We=a("div"),f(G5.$$.fragment),d8o=l(),Jne=a("p"),c8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),f8o=l(),Ka=a("p"),m8o=o("The model class to instantiate is selected based on the "),Yne=a("code"),g8o=o("model_type"),h8o=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),p8o=o("pretrained_model_name_or_path"),_8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=a("code"),u8o=o("pretrained_model_name_or_path"),b8o=o(":"),v8o=l(),D=a("ul"),wb=a("li"),ese=a("strong"),T8o=o("albert"),F8o=o(" \u2014 "),oN=a("a"),C8o=o("AlbertForTokenClassification"),M8o=o(" (ALBERT model)"),E8o=l(),Ab=a("li"),ose=a("strong"),y8o=o("bert"),w8o=o(" \u2014 "),rN=a("a"),A8o=o("BertForTokenClassification"),L8o=o(" (BERT model)"),B8o=l(),Lb=a("li"),rse=a("strong"),x8o=o("big_bird"),k8o=o(" \u2014 "),tN=a("a"),R8o=o("BigBirdForTokenClassification"),S8o=o(" (BigBird model)"),P8o=l(),Bb=a("li"),tse=a("strong"),$8o=o("camembert"),I8o=o(" \u2014 "),aN=a("a"),j8o=o("CamembertForTokenClassification"),N8o=o(" (CamemBERT model)"),D8o=l(),xb=a("li"),ase=a("strong"),q8o=o("canine"),O8o=o(" \u2014 "),nN=a("a"),G8o=o("CanineForTokenClassification"),X8o=o(" (Canine model)"),V8o=l(),kb=a("li"),nse=a("strong"),z8o=o("convbert"),W8o=o(" \u2014 "),sN=a("a"),Q8o=o("ConvBertForTokenClassification"),H8o=o(" (ConvBERT model)"),U8o=l(),Rb=a("li"),sse=a("strong"),J8o=o("data2vec-text"),Y8o=o(" \u2014 "),lN=a("a"),K8o=o("Data2VecTextForTokenClassification"),Z8o=o(" (Data2VecText model)"),e9o=l(),Sb=a("li"),lse=a("strong"),o9o=o("deberta"),r9o=o(" \u2014 "),iN=a("a"),t9o=o("DebertaForTokenClassification"),a9o=o(" (DeBERTa model)"),n9o=l(),Pb=a("li"),ise=a("strong"),s9o=o("deberta-v2"),l9o=o(" \u2014 "),dN=a("a"),i9o=o("DebertaV2ForTokenClassification"),d9o=o(" (DeBERTa-v2 model)"),c9o=l(),$b=a("li"),dse=a("strong"),f9o=o("distilbert"),m9o=o(" \u2014 "),cN=a("a"),g9o=o("DistilBertForTokenClassification"),h9o=o(" (DistilBERT model)"),p9o=l(),Ib=a("li"),cse=a("strong"),_9o=o("electra"),u9o=o(" \u2014 "),fN=a("a"),b9o=o("ElectraForTokenClassification"),v9o=o(" (ELECTRA model)"),T9o=l(),jb=a("li"),fse=a("strong"),F9o=o("flaubert"),C9o=o(" \u2014 "),mN=a("a"),M9o=o("FlaubertForTokenClassification"),E9o=o(" (FlauBERT model)"),y9o=l(),Nb=a("li"),mse=a("strong"),w9o=o("fnet"),A9o=o(" \u2014 "),gN=a("a"),L9o=o("FNetForTokenClassification"),B9o=o(" (FNet model)"),x9o=l(),Db=a("li"),gse=a("strong"),k9o=o("funnel"),R9o=o(" \u2014 "),hN=a("a"),S9o=o("FunnelForTokenClassification"),P9o=o(" (Funnel Transformer model)"),$9o=l(),qb=a("li"),hse=a("strong"),I9o=o("gpt2"),j9o=o(" \u2014 "),pN=a("a"),N9o=o("GPT2ForTokenClassification"),D9o=o(" (OpenAI GPT-2 model)"),q9o=l(),Ob=a("li"),pse=a("strong"),O9o=o("ibert"),G9o=o(" \u2014 "),_N=a("a"),X9o=o("IBertForTokenClassification"),V9o=o(" (I-BERT model)"),z9o=l(),Gb=a("li"),_se=a("strong"),W9o=o("layoutlm"),Q9o=o(" \u2014 "),uN=a("a"),H9o=o("LayoutLMForTokenClassification"),U9o=o(" (LayoutLM model)"),J9o=l(),Xb=a("li"),use=a("strong"),Y9o=o("layoutlmv2"),K9o=o(" \u2014 "),bN=a("a"),Z9o=o("LayoutLMv2ForTokenClassification"),eBo=o(" (LayoutLMv2 model)"),oBo=l(),Vb=a("li"),bse=a("strong"),rBo=o("longformer"),tBo=o(" \u2014 "),vN=a("a"),aBo=o("LongformerForTokenClassification"),nBo=o(" (Longformer model)"),sBo=l(),zb=a("li"),vse=a("strong"),lBo=o("megatron-bert"),iBo=o(" \u2014 "),TN=a("a"),dBo=o("MegatronBertForTokenClassification"),cBo=o(" (MegatronBert model)"),fBo=l(),Wb=a("li"),Tse=a("strong"),mBo=o("mobilebert"),gBo=o(" \u2014 "),FN=a("a"),hBo=o("MobileBertForTokenClassification"),pBo=o(" (MobileBERT model)"),_Bo=l(),Qb=a("li"),Fse=a("strong"),uBo=o("mpnet"),bBo=o(" \u2014 "),CN=a("a"),vBo=o("MPNetForTokenClassification"),TBo=o(" (MPNet model)"),FBo=l(),Hb=a("li"),Cse=a("strong"),CBo=o("nystromformer"),MBo=o(" \u2014 "),MN=a("a"),EBo=o("NystromformerForTokenClassification"),yBo=o(" (Nystromformer model)"),wBo=l(),Ub=a("li"),Mse=a("strong"),ABo=o("qdqbert"),LBo=o(" \u2014 "),EN=a("a"),BBo=o("QDQBertForTokenClassification"),xBo=o(" (QDQBert model)"),kBo=l(),Jb=a("li"),Ese=a("strong"),RBo=o("rembert"),SBo=o(" \u2014 "),yN=a("a"),PBo=o("RemBertForTokenClassification"),$Bo=o(" (RemBERT model)"),IBo=l(),Yb=a("li"),yse=a("strong"),jBo=o("roberta"),NBo=o(" \u2014 "),wN=a("a"),DBo=o("RobertaForTokenClassification"),qBo=o(" (RoBERTa model)"),OBo=l(),Kb=a("li"),wse=a("strong"),GBo=o("roformer"),XBo=o(" \u2014 "),AN=a("a"),VBo=o("RoFormerForTokenClassification"),zBo=o(" (RoFormer model)"),WBo=l(),Zb=a("li"),Ase=a("strong"),QBo=o("squeezebert"),HBo=o(" \u2014 "),LN=a("a"),UBo=o("SqueezeBertForTokenClassification"),JBo=o(" (SqueezeBERT model)"),YBo=l(),e2=a("li"),Lse=a("strong"),KBo=o("xlm"),ZBo=o(" \u2014 "),BN=a("a"),exo=o("XLMForTokenClassification"),oxo=o(" (XLM model)"),rxo=l(),o2=a("li"),Bse=a("strong"),txo=o("xlm-roberta"),axo=o(" \u2014 "),xN=a("a"),nxo=o("XLMRobertaForTokenClassification"),sxo=o(" (XLM-RoBERTa model)"),lxo=l(),r2=a("li"),xse=a("strong"),ixo=o("xlm-roberta-xl"),dxo=o(" \u2014 "),kN=a("a"),cxo=o("XLMRobertaXLForTokenClassification"),fxo=o(" (XLM-RoBERTa-XL model)"),mxo=l(),t2=a("li"),kse=a("strong"),gxo=o("xlnet"),hxo=o(" \u2014 "),RN=a("a"),pxo=o("XLNetForTokenClassification"),_xo=o(" (XLNet model)"),uxo=l(),a2=a("li"),Rse=a("strong"),bxo=o("yoso"),vxo=o(" \u2014 "),SN=a("a"),Txo=o("YosoForTokenClassification"),Fxo=o(" (YOSO model)"),Cxo=l(),n2=a("p"),Mxo=o("The model is set in evaluation mode by default using "),Sse=a("code"),Exo=o("model.eval()"),yxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pse=a("code"),wxo=o("model.train()"),Axo=l(),$se=a("p"),Lxo=o("Examples:"),Bxo=l(),f(X5.$$.fragment),pke=l(),Ed=a("h2"),s2=a("a"),Ise=a("span"),f(V5.$$.fragment),xxo=l(),jse=a("span"),kxo=o("AutoModelForQuestionAnswering"),_ke=l(),nr=a("div"),f(z5.$$.fragment),Rxo=l(),yd=a("p"),Sxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nse=a("code"),Pxo=o("from_pretrained()"),$xo=o("class method or the "),Dse=a("code"),Ixo=o("from_config()"),jxo=o(`class
method.`),Nxo=l(),W5=a("p"),Dxo=o("This class cannot be instantiated directly using "),qse=a("code"),qxo=o("__init__()"),Oxo=o(" (throws an error)."),Gxo=l(),Zr=a("div"),f(Q5.$$.fragment),Xxo=l(),Ose=a("p"),Vxo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zxo=l(),wd=a("p"),Wxo=o(`Note:
Loading a model from its configuration file does `),Gse=a("strong"),Qxo=o("not"),Hxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xse=a("code"),Uxo=o("from_pretrained()"),Jxo=o("to load the model weights."),Yxo=l(),Vse=a("p"),Kxo=o("Examples:"),Zxo=l(),f(H5.$$.fragment),eko=l(),Qe=a("div"),f(U5.$$.fragment),oko=l(),zse=a("p"),rko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tko=l(),Za=a("p"),ako=o("The model class to instantiate is selected based on the "),Wse=a("code"),nko=o("model_type"),sko=o(` property of the config object (either
passed as an argument or loaded from `),Qse=a("code"),lko=o("pretrained_model_name_or_path"),iko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hse=a("code"),dko=o("pretrained_model_name_or_path"),cko=o(":"),fko=l(),R=a("ul"),l2=a("li"),Use=a("strong"),mko=o("albert"),gko=o(" \u2014 "),PN=a("a"),hko=o("AlbertForQuestionAnswering"),pko=o(" (ALBERT model)"),_ko=l(),i2=a("li"),Jse=a("strong"),uko=o("bart"),bko=o(" \u2014 "),$N=a("a"),vko=o("BartForQuestionAnswering"),Tko=o(" (BART model)"),Fko=l(),d2=a("li"),Yse=a("strong"),Cko=o("bert"),Mko=o(" \u2014 "),IN=a("a"),Eko=o("BertForQuestionAnswering"),yko=o(" (BERT model)"),wko=l(),c2=a("li"),Kse=a("strong"),Ako=o("big_bird"),Lko=o(" \u2014 "),jN=a("a"),Bko=o("BigBirdForQuestionAnswering"),xko=o(" (BigBird model)"),kko=l(),f2=a("li"),Zse=a("strong"),Rko=o("bigbird_pegasus"),Sko=o(" \u2014 "),NN=a("a"),Pko=o("BigBirdPegasusForQuestionAnswering"),$ko=o(" (BigBirdPegasus model)"),Iko=l(),m2=a("li"),ele=a("strong"),jko=o("camembert"),Nko=o(" \u2014 "),DN=a("a"),Dko=o("CamembertForQuestionAnswering"),qko=o(" (CamemBERT model)"),Oko=l(),g2=a("li"),ole=a("strong"),Gko=o("canine"),Xko=o(" \u2014 "),qN=a("a"),Vko=o("CanineForQuestionAnswering"),zko=o(" (Canine model)"),Wko=l(),h2=a("li"),rle=a("strong"),Qko=o("convbert"),Hko=o(" \u2014 "),ON=a("a"),Uko=o("ConvBertForQuestionAnswering"),Jko=o(" (ConvBERT model)"),Yko=l(),p2=a("li"),tle=a("strong"),Kko=o("data2vec-text"),Zko=o(" \u2014 "),GN=a("a"),eRo=o("Data2VecTextForQuestionAnswering"),oRo=o(" (Data2VecText model)"),rRo=l(),_2=a("li"),ale=a("strong"),tRo=o("deberta"),aRo=o(" \u2014 "),XN=a("a"),nRo=o("DebertaForQuestionAnswering"),sRo=o(" (DeBERTa model)"),lRo=l(),u2=a("li"),nle=a("strong"),iRo=o("deberta-v2"),dRo=o(" \u2014 "),VN=a("a"),cRo=o("DebertaV2ForQuestionAnswering"),fRo=o(" (DeBERTa-v2 model)"),mRo=l(),b2=a("li"),sle=a("strong"),gRo=o("distilbert"),hRo=o(" \u2014 "),zN=a("a"),pRo=o("DistilBertForQuestionAnswering"),_Ro=o(" (DistilBERT model)"),uRo=l(),v2=a("li"),lle=a("strong"),bRo=o("electra"),vRo=o(" \u2014 "),WN=a("a"),TRo=o("ElectraForQuestionAnswering"),FRo=o(" (ELECTRA model)"),CRo=l(),T2=a("li"),ile=a("strong"),MRo=o("flaubert"),ERo=o(" \u2014 "),QN=a("a"),yRo=o("FlaubertForQuestionAnsweringSimple"),wRo=o(" (FlauBERT model)"),ARo=l(),F2=a("li"),dle=a("strong"),LRo=o("fnet"),BRo=o(" \u2014 "),HN=a("a"),xRo=o("FNetForQuestionAnswering"),kRo=o(" (FNet model)"),RRo=l(),C2=a("li"),cle=a("strong"),SRo=o("funnel"),PRo=o(" \u2014 "),UN=a("a"),$Ro=o("FunnelForQuestionAnswering"),IRo=o(" (Funnel Transformer model)"),jRo=l(),M2=a("li"),fle=a("strong"),NRo=o("gptj"),DRo=o(" \u2014 "),JN=a("a"),qRo=o("GPTJForQuestionAnswering"),ORo=o(" (GPT-J model)"),GRo=l(),E2=a("li"),mle=a("strong"),XRo=o("ibert"),VRo=o(" \u2014 "),YN=a("a"),zRo=o("IBertForQuestionAnswering"),WRo=o(" (I-BERT model)"),QRo=l(),y2=a("li"),gle=a("strong"),HRo=o("layoutlmv2"),URo=o(" \u2014 "),KN=a("a"),JRo=o("LayoutLMv2ForQuestionAnswering"),YRo=o(" (LayoutLMv2 model)"),KRo=l(),w2=a("li"),hle=a("strong"),ZRo=o("led"),eSo=o(" \u2014 "),ZN=a("a"),oSo=o("LEDForQuestionAnswering"),rSo=o(" (LED model)"),tSo=l(),A2=a("li"),ple=a("strong"),aSo=o("longformer"),nSo=o(" \u2014 "),eD=a("a"),sSo=o("LongformerForQuestionAnswering"),lSo=o(" (Longformer model)"),iSo=l(),L2=a("li"),_le=a("strong"),dSo=o("lxmert"),cSo=o(" \u2014 "),oD=a("a"),fSo=o("LxmertForQuestionAnswering"),mSo=o(" (LXMERT model)"),gSo=l(),B2=a("li"),ule=a("strong"),hSo=o("mbart"),pSo=o(" \u2014 "),rD=a("a"),_So=o("MBartForQuestionAnswering"),uSo=o(" (mBART model)"),bSo=l(),x2=a("li"),ble=a("strong"),vSo=o("megatron-bert"),TSo=o(" \u2014 "),tD=a("a"),FSo=o("MegatronBertForQuestionAnswering"),CSo=o(" (MegatronBert model)"),MSo=l(),k2=a("li"),vle=a("strong"),ESo=o("mobilebert"),ySo=o(" \u2014 "),aD=a("a"),wSo=o("MobileBertForQuestionAnswering"),ASo=o(" (MobileBERT model)"),LSo=l(),R2=a("li"),Tle=a("strong"),BSo=o("mpnet"),xSo=o(" \u2014 "),nD=a("a"),kSo=o("MPNetForQuestionAnswering"),RSo=o(" (MPNet model)"),SSo=l(),S2=a("li"),Fle=a("strong"),PSo=o("nystromformer"),$So=o(" \u2014 "),sD=a("a"),ISo=o("NystromformerForQuestionAnswering"),jSo=o(" (Nystromformer model)"),NSo=l(),P2=a("li"),Cle=a("strong"),DSo=o("qdqbert"),qSo=o(" \u2014 "),lD=a("a"),OSo=o("QDQBertForQuestionAnswering"),GSo=o(" (QDQBert model)"),XSo=l(),$2=a("li"),Mle=a("strong"),VSo=o("reformer"),zSo=o(" \u2014 "),iD=a("a"),WSo=o("ReformerForQuestionAnswering"),QSo=o(" (Reformer model)"),HSo=l(),I2=a("li"),Ele=a("strong"),USo=o("rembert"),JSo=o(" \u2014 "),dD=a("a"),YSo=o("RemBertForQuestionAnswering"),KSo=o(" (RemBERT model)"),ZSo=l(),j2=a("li"),yle=a("strong"),ePo=o("roberta"),oPo=o(" \u2014 "),cD=a("a"),rPo=o("RobertaForQuestionAnswering"),tPo=o(" (RoBERTa model)"),aPo=l(),N2=a("li"),wle=a("strong"),nPo=o("roformer"),sPo=o(" \u2014 "),fD=a("a"),lPo=o("RoFormerForQuestionAnswering"),iPo=o(" (RoFormer model)"),dPo=l(),D2=a("li"),Ale=a("strong"),cPo=o("splinter"),fPo=o(" \u2014 "),mD=a("a"),mPo=o("SplinterForQuestionAnswering"),gPo=o(" (Splinter model)"),hPo=l(),q2=a("li"),Lle=a("strong"),pPo=o("squeezebert"),_Po=o(" \u2014 "),gD=a("a"),uPo=o("SqueezeBertForQuestionAnswering"),bPo=o(" (SqueezeBERT model)"),vPo=l(),O2=a("li"),Ble=a("strong"),TPo=o("xlm"),FPo=o(" \u2014 "),hD=a("a"),CPo=o("XLMForQuestionAnsweringSimple"),MPo=o(" (XLM model)"),EPo=l(),G2=a("li"),xle=a("strong"),yPo=o("xlm-roberta"),wPo=o(" \u2014 "),pD=a("a"),APo=o("XLMRobertaForQuestionAnswering"),LPo=o(" (XLM-RoBERTa model)"),BPo=l(),X2=a("li"),kle=a("strong"),xPo=o("xlm-roberta-xl"),kPo=o(" \u2014 "),_D=a("a"),RPo=o("XLMRobertaXLForQuestionAnswering"),SPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),V2=a("li"),Rle=a("strong"),$Po=o("xlnet"),IPo=o(" \u2014 "),uD=a("a"),jPo=o("XLNetForQuestionAnsweringSimple"),NPo=o(" (XLNet model)"),DPo=l(),z2=a("li"),Sle=a("strong"),qPo=o("yoso"),OPo=o(" \u2014 "),bD=a("a"),GPo=o("YosoForQuestionAnswering"),XPo=o(" (YOSO model)"),VPo=l(),W2=a("p"),zPo=o("The model is set in evaluation mode by default using "),Ple=a("code"),WPo=o("model.eval()"),QPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=a("code"),HPo=o("model.train()"),UPo=l(),Ile=a("p"),JPo=o("Examples:"),YPo=l(),f(J5.$$.fragment),uke=l(),Ad=a("h2"),Q2=a("a"),jle=a("span"),f(Y5.$$.fragment),KPo=l(),Nle=a("span"),ZPo=o("AutoModelForTableQuestionAnswering"),bke=l(),sr=a("div"),f(K5.$$.fragment),e$o=l(),Ld=a("p"),o$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dle=a("code"),r$o=o("from_pretrained()"),t$o=o("class method or the "),qle=a("code"),a$o=o("from_config()"),n$o=o(`class
method.`),s$o=l(),Z5=a("p"),l$o=o("This class cannot be instantiated directly using "),Ole=a("code"),i$o=o("__init__()"),d$o=o(" (throws an error)."),c$o=l(),et=a("div"),f(ey.$$.fragment),f$o=l(),Gle=a("p"),m$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),g$o=l(),Bd=a("p"),h$o=o(`Note:
Loading a model from its configuration file does `),Xle=a("strong"),p$o=o("not"),_$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vle=a("code"),u$o=o("from_pretrained()"),b$o=o("to load the model weights."),v$o=l(),zle=a("p"),T$o=o("Examples:"),F$o=l(),f(oy.$$.fragment),C$o=l(),He=a("div"),f(ry.$$.fragment),M$o=l(),Wle=a("p"),E$o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),y$o=l(),en=a("p"),w$o=o("The model class to instantiate is selected based on the "),Qle=a("code"),A$o=o("model_type"),L$o=o(` property of the config object (either
passed as an argument or loaded from `),Hle=a("code"),B$o=o("pretrained_model_name_or_path"),x$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ule=a("code"),k$o=o("pretrained_model_name_or_path"),R$o=o(":"),S$o=l(),Jle=a("ul"),H2=a("li"),Yle=a("strong"),P$o=o("tapas"),$$o=o(" \u2014 "),vD=a("a"),I$o=o("TapasForQuestionAnswering"),j$o=o(" (TAPAS model)"),N$o=l(),U2=a("p"),D$o=o("The model is set in evaluation mode by default using "),Kle=a("code"),q$o=o("model.eval()"),O$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=a("code"),G$o=o("model.train()"),X$o=l(),eie=a("p"),V$o=o("Examples:"),z$o=l(),f(ty.$$.fragment),vke=l(),xd=a("h2"),J2=a("a"),oie=a("span"),f(ay.$$.fragment),W$o=l(),rie=a("span"),Q$o=o("AutoModelForImageClassification"),Tke=l(),lr=a("div"),f(ny.$$.fragment),H$o=l(),kd=a("p"),U$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tie=a("code"),J$o=o("from_pretrained()"),Y$o=o("class method or the "),aie=a("code"),K$o=o("from_config()"),Z$o=o(`class
method.`),eIo=l(),sy=a("p"),oIo=o("This class cannot be instantiated directly using "),nie=a("code"),rIo=o("__init__()"),tIo=o(" (throws an error)."),aIo=l(),ot=a("div"),f(ly.$$.fragment),nIo=l(),sie=a("p"),sIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lIo=l(),Rd=a("p"),iIo=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),dIo=o("not"),cIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iie=a("code"),fIo=o("from_pretrained()"),mIo=o("to load the model weights."),gIo=l(),die=a("p"),hIo=o("Examples:"),pIo=l(),f(iy.$$.fragment),_Io=l(),Ue=a("div"),f(dy.$$.fragment),uIo=l(),cie=a("p"),bIo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vIo=l(),on=a("p"),TIo=o("The model class to instantiate is selected based on the "),fie=a("code"),FIo=o("model_type"),CIo=o(` property of the config object (either
passed as an argument or loaded from `),mie=a("code"),MIo=o("pretrained_model_name_or_path"),EIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=a("code"),yIo=o("pretrained_model_name_or_path"),wIo=o(":"),AIo=l(),me=a("ul"),Y2=a("li"),hie=a("strong"),LIo=o("beit"),BIo=o(" \u2014 "),TD=a("a"),xIo=o("BeitForImageClassification"),kIo=o(" (BEiT model)"),RIo=l(),K2=a("li"),pie=a("strong"),SIo=o("convnext"),PIo=o(" \u2014 "),FD=a("a"),$Io=o("ConvNextForImageClassification"),IIo=o(" (ConvNext model)"),jIo=l(),qs=a("li"),_ie=a("strong"),NIo=o("deit"),DIo=o(" \u2014 "),CD=a("a"),qIo=o("DeiTForImageClassification"),OIo=o(" or "),MD=a("a"),GIo=o("DeiTForImageClassificationWithTeacher"),XIo=o(" (DeiT model)"),VIo=l(),Z2=a("li"),uie=a("strong"),zIo=o("imagegpt"),WIo=o(" \u2014 "),ED=a("a"),QIo=o("ImageGPTForImageClassification"),HIo=o(" (ImageGPT model)"),UIo=l(),ma=a("li"),bie=a("strong"),JIo=o("perceiver"),YIo=o(" \u2014 "),yD=a("a"),KIo=o("PerceiverForImageClassificationLearned"),ZIo=o(" or "),wD=a("a"),ejo=o("PerceiverForImageClassificationFourier"),ojo=o(" or "),AD=a("a"),rjo=o("PerceiverForImageClassificationConvProcessing"),tjo=o(" (Perceiver model)"),ajo=l(),ev=a("li"),vie=a("strong"),njo=o("poolformer"),sjo=o(" \u2014 "),LD=a("a"),ljo=o("PoolFormerForImageClassification"),ijo=o(" (PoolFormer model)"),djo=l(),ov=a("li"),Tie=a("strong"),cjo=o("resnet"),fjo=o(" \u2014 "),BD=a("a"),mjo=o("ResNetForImageClassification"),gjo=o(" (ResNet model)"),hjo=l(),rv=a("li"),Fie=a("strong"),pjo=o("segformer"),_jo=o(" \u2014 "),xD=a("a"),ujo=o("SegformerForImageClassification"),bjo=o(" (SegFormer model)"),vjo=l(),tv=a("li"),Cie=a("strong"),Tjo=o("swin"),Fjo=o(" \u2014 "),kD=a("a"),Cjo=o("SwinForImageClassification"),Mjo=o(" (Swin model)"),Ejo=l(),av=a("li"),Mie=a("strong"),yjo=o("van"),wjo=o(" \u2014 "),RD=a("a"),Ajo=o("VanForImageClassification"),Ljo=o(" (VAN model)"),Bjo=l(),nv=a("li"),Eie=a("strong"),xjo=o("vit"),kjo=o(" \u2014 "),SD=a("a"),Rjo=o("ViTForImageClassification"),Sjo=o(" (ViT model)"),Pjo=l(),sv=a("p"),$jo=o("The model is set in evaluation mode by default using "),yie=a("code"),Ijo=o("model.eval()"),jjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),Njo=o("model.train()"),Djo=l(),Aie=a("p"),qjo=o("Examples:"),Ojo=l(),f(cy.$$.fragment),Fke=l(),Sd=a("h2"),lv=a("a"),Lie=a("span"),f(fy.$$.fragment),Gjo=l(),Bie=a("span"),Xjo=o("AutoModelForVision2Seq"),Cke=l(),ir=a("div"),f(my.$$.fragment),Vjo=l(),Pd=a("p"),zjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xie=a("code"),Wjo=o("from_pretrained()"),Qjo=o("class method or the "),kie=a("code"),Hjo=o("from_config()"),Ujo=o(`class
method.`),Jjo=l(),gy=a("p"),Yjo=o("This class cannot be instantiated directly using "),Rie=a("code"),Kjo=o("__init__()"),Zjo=o(" (throws an error)."),eNo=l(),rt=a("div"),f(hy.$$.fragment),oNo=l(),Sie=a("p"),rNo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tNo=l(),$d=a("p"),aNo=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),nNo=o("not"),sNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=a("code"),lNo=o("from_pretrained()"),iNo=o("to load the model weights."),dNo=l(),Iie=a("p"),cNo=o("Examples:"),fNo=l(),f(py.$$.fragment),mNo=l(),Je=a("div"),f(_y.$$.fragment),gNo=l(),jie=a("p"),hNo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pNo=l(),rn=a("p"),_No=o("The model class to instantiate is selected based on the "),Nie=a("code"),uNo=o("model_type"),bNo=o(` property of the config object (either
passed as an argument or loaded from `),Die=a("code"),vNo=o("pretrained_model_name_or_path"),TNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),FNo=o("pretrained_model_name_or_path"),CNo=o(":"),MNo=l(),Oie=a("ul"),iv=a("li"),Gie=a("strong"),ENo=o("vision-encoder-decoder"),yNo=o(" \u2014 "),PD=a("a"),wNo=o("VisionEncoderDecoderModel"),ANo=o(" (Vision Encoder decoder model)"),LNo=l(),dv=a("p"),BNo=o("The model is set in evaluation mode by default using "),Xie=a("code"),xNo=o("model.eval()"),kNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=a("code"),RNo=o("model.train()"),SNo=l(),zie=a("p"),PNo=o("Examples:"),$No=l(),f(uy.$$.fragment),Mke=l(),Id=a("h2"),cv=a("a"),Wie=a("span"),f(by.$$.fragment),INo=l(),Qie=a("span"),jNo=o("AutoModelForAudioClassification"),Eke=l(),dr=a("div"),f(vy.$$.fragment),NNo=l(),jd=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Hie=a("code"),qNo=o("from_pretrained()"),ONo=o("class method or the "),Uie=a("code"),GNo=o("from_config()"),XNo=o(`class
method.`),VNo=l(),Ty=a("p"),zNo=o("This class cannot be instantiated directly using "),Jie=a("code"),WNo=o("__init__()"),QNo=o(" (throws an error)."),HNo=l(),tt=a("div"),f(Fy.$$.fragment),UNo=l(),Yie=a("p"),JNo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),YNo=l(),Nd=a("p"),KNo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),ZNo=o("not"),eDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=a("code"),oDo=o("from_pretrained()"),rDo=o("to load the model weights."),tDo=l(),ede=a("p"),aDo=o("Examples:"),nDo=l(),f(Cy.$$.fragment),sDo=l(),Ye=a("div"),f(My.$$.fragment),lDo=l(),ode=a("p"),iDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dDo=l(),tn=a("p"),cDo=o("The model class to instantiate is selected based on the "),rde=a("code"),fDo=o("model_type"),mDo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),gDo=o("pretrained_model_name_or_path"),hDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),pDo=o("pretrained_model_name_or_path"),_Do=o(":"),uDo=l(),ke=a("ul"),fv=a("li"),nde=a("strong"),bDo=o("data2vec-audio"),vDo=o(" \u2014 "),$D=a("a"),TDo=o("Data2VecAudioForSequenceClassification"),FDo=o(" (Data2VecAudio model)"),CDo=l(),mv=a("li"),sde=a("strong"),MDo=o("hubert"),EDo=o(" \u2014 "),ID=a("a"),yDo=o("HubertForSequenceClassification"),wDo=o(" (Hubert model)"),ADo=l(),gv=a("li"),lde=a("strong"),LDo=o("sew"),BDo=o(" \u2014 "),jD=a("a"),xDo=o("SEWForSequenceClassification"),kDo=o(" (SEW model)"),RDo=l(),hv=a("li"),ide=a("strong"),SDo=o("sew-d"),PDo=o(" \u2014 "),ND=a("a"),$Do=o("SEWDForSequenceClassification"),IDo=o(" (SEW-D model)"),jDo=l(),pv=a("li"),dde=a("strong"),NDo=o("unispeech"),DDo=o(" \u2014 "),DD=a("a"),qDo=o("UniSpeechForSequenceClassification"),ODo=o(" (UniSpeech model)"),GDo=l(),_v=a("li"),cde=a("strong"),XDo=o("unispeech-sat"),VDo=o(" \u2014 "),qD=a("a"),zDo=o("UniSpeechSatForSequenceClassification"),WDo=o(" (UniSpeechSat model)"),QDo=l(),uv=a("li"),fde=a("strong"),HDo=o("wav2vec2"),UDo=o(" \u2014 "),OD=a("a"),JDo=o("Wav2Vec2ForSequenceClassification"),YDo=o(" (Wav2Vec2 model)"),KDo=l(),bv=a("li"),mde=a("strong"),ZDo=o("wavlm"),eqo=o(" \u2014 "),GD=a("a"),oqo=o("WavLMForSequenceClassification"),rqo=o(" (WavLM model)"),tqo=l(),vv=a("p"),aqo=o("The model is set in evaluation mode by default using "),gde=a("code"),nqo=o("model.eval()"),sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=a("code"),lqo=o("model.train()"),iqo=l(),pde=a("p"),dqo=o("Examples:"),cqo=l(),f(Ey.$$.fragment),yke=l(),Dd=a("h2"),Tv=a("a"),_de=a("span"),f(yy.$$.fragment),fqo=l(),ude=a("span"),mqo=o("AutoModelForAudioFrameClassification"),wke=l(),cr=a("div"),f(wy.$$.fragment),gqo=l(),qd=a("p"),hqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bde=a("code"),pqo=o("from_pretrained()"),_qo=o("class method or the "),vde=a("code"),uqo=o("from_config()"),bqo=o(`class
method.`),vqo=l(),Ay=a("p"),Tqo=o("This class cannot be instantiated directly using "),Tde=a("code"),Fqo=o("__init__()"),Cqo=o(" (throws an error)."),Mqo=l(),at=a("div"),f(Ly.$$.fragment),Eqo=l(),Fde=a("p"),yqo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wqo=l(),Od=a("p"),Aqo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),Lqo=o("not"),Bqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=a("code"),xqo=o("from_pretrained()"),kqo=o("to load the model weights."),Rqo=l(),Ede=a("p"),Sqo=o("Examples:"),Pqo=l(),f(By.$$.fragment),$qo=l(),Ke=a("div"),f(xy.$$.fragment),Iqo=l(),yde=a("p"),jqo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Nqo=l(),an=a("p"),Dqo=o("The model class to instantiate is selected based on the "),wde=a("code"),qqo=o("model_type"),Oqo=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),Gqo=o("pretrained_model_name_or_path"),Xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),Vqo=o("pretrained_model_name_or_path"),zqo=o(":"),Wqo=l(),nn=a("ul"),Fv=a("li"),Bde=a("strong"),Qqo=o("data2vec-audio"),Hqo=o(" \u2014 "),XD=a("a"),Uqo=o("Data2VecAudioForAudioFrameClassification"),Jqo=o(" (Data2VecAudio model)"),Yqo=l(),Cv=a("li"),xde=a("strong"),Kqo=o("unispeech-sat"),Zqo=o(" \u2014 "),VD=a("a"),eOo=o("UniSpeechSatForAudioFrameClassification"),oOo=o(" (UniSpeechSat model)"),rOo=l(),Mv=a("li"),kde=a("strong"),tOo=o("wav2vec2"),aOo=o(" \u2014 "),zD=a("a"),nOo=o("Wav2Vec2ForAudioFrameClassification"),sOo=o(" (Wav2Vec2 model)"),lOo=l(),Ev=a("li"),Rde=a("strong"),iOo=o("wavlm"),dOo=o(" \u2014 "),WD=a("a"),cOo=o("WavLMForAudioFrameClassification"),fOo=o(" (WavLM model)"),mOo=l(),yv=a("p"),gOo=o("The model is set in evaluation mode by default using "),Sde=a("code"),hOo=o("model.eval()"),pOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),_Oo=o("model.train()"),uOo=l(),$de=a("p"),bOo=o("Examples:"),vOo=l(),f(ky.$$.fragment),Ake=l(),Gd=a("h2"),wv=a("a"),Ide=a("span"),f(Ry.$$.fragment),TOo=l(),jde=a("span"),FOo=o("AutoModelForCTC"),Lke=l(),fr=a("div"),f(Sy.$$.fragment),COo=l(),Xd=a("p"),MOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Nde=a("code"),EOo=o("from_pretrained()"),yOo=o("class method or the "),Dde=a("code"),wOo=o("from_config()"),AOo=o(`class
method.`),LOo=l(),Py=a("p"),BOo=o("This class cannot be instantiated directly using "),qde=a("code"),xOo=o("__init__()"),kOo=o(" (throws an error)."),ROo=l(),nt=a("div"),f($y.$$.fragment),SOo=l(),Ode=a("p"),POo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Oo=l(),Vd=a("p"),IOo=o(`Note:
Loading a model from its configuration file does `),Gde=a("strong"),jOo=o("not"),NOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("code"),DOo=o("from_pretrained()"),qOo=o("to load the model weights."),OOo=l(),Vde=a("p"),GOo=o("Examples:"),XOo=l(),f(Iy.$$.fragment),VOo=l(),Ze=a("div"),f(jy.$$.fragment),zOo=l(),zde=a("p"),WOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),QOo=l(),sn=a("p"),HOo=o("The model class to instantiate is selected based on the "),Wde=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),ZOo=o("pretrained_model_name_or_path"),eGo=o(":"),oGo=l(),Re=a("ul"),Av=a("li"),Ude=a("strong"),rGo=o("data2vec-audio"),tGo=o(" \u2014 "),QD=a("a"),aGo=o("Data2VecAudioForCTC"),nGo=o(" (Data2VecAudio model)"),sGo=l(),Lv=a("li"),Jde=a("strong"),lGo=o("hubert"),iGo=o(" \u2014 "),HD=a("a"),dGo=o("HubertForCTC"),cGo=o(" (Hubert model)"),fGo=l(),Bv=a("li"),Yde=a("strong"),mGo=o("sew"),gGo=o(" \u2014 "),UD=a("a"),hGo=o("SEWForCTC"),pGo=o(" (SEW model)"),_Go=l(),xv=a("li"),Kde=a("strong"),uGo=o("sew-d"),bGo=o(" \u2014 "),JD=a("a"),vGo=o("SEWDForCTC"),TGo=o(" (SEW-D model)"),FGo=l(),kv=a("li"),Zde=a("strong"),CGo=o("unispeech"),MGo=o(" \u2014 "),YD=a("a"),EGo=o("UniSpeechForCTC"),yGo=o(" (UniSpeech model)"),wGo=l(),Rv=a("li"),ece=a("strong"),AGo=o("unispeech-sat"),LGo=o(" \u2014 "),KD=a("a"),BGo=o("UniSpeechSatForCTC"),xGo=o(" (UniSpeechSat model)"),kGo=l(),Sv=a("li"),oce=a("strong"),RGo=o("wav2vec2"),SGo=o(" \u2014 "),ZD=a("a"),PGo=o("Wav2Vec2ForCTC"),$Go=o(" (Wav2Vec2 model)"),IGo=l(),Pv=a("li"),rce=a("strong"),jGo=o("wavlm"),NGo=o(" \u2014 "),eq=a("a"),DGo=o("WavLMForCTC"),qGo=o(" (WavLM model)"),OGo=l(),$v=a("p"),GGo=o("The model is set in evaluation mode by default using "),tce=a("code"),XGo=o("model.eval()"),VGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),zGo=o("model.train()"),WGo=l(),nce=a("p"),QGo=o("Examples:"),HGo=l(),f(Ny.$$.fragment),Bke=l(),zd=a("h2"),Iv=a("a"),sce=a("span"),f(Dy.$$.fragment),UGo=l(),lce=a("span"),JGo=o("AutoModelForSpeechSeq2Seq"),xke=l(),mr=a("div"),f(qy.$$.fragment),YGo=l(),Wd=a("p"),KGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ice=a("code"),ZGo=o("from_pretrained()"),eXo=o("class method or the "),dce=a("code"),oXo=o("from_config()"),rXo=o(`class
method.`),tXo=l(),Oy=a("p"),aXo=o("This class cannot be instantiated directly using "),cce=a("code"),nXo=o("__init__()"),sXo=o(" (throws an error)."),lXo=l(),st=a("div"),f(Gy.$$.fragment),iXo=l(),fce=a("p"),dXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cXo=l(),Qd=a("p"),fXo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),mXo=o("not"),gXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=a("code"),hXo=o("from_pretrained()"),pXo=o("to load the model weights."),_Xo=l(),hce=a("p"),uXo=o("Examples:"),bXo=l(),f(Xy.$$.fragment),vXo=l(),eo=a("div"),f(Vy.$$.fragment),TXo=l(),pce=a("p"),FXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CXo=l(),ln=a("p"),MXo=o("The model class to instantiate is selected based on the "),_ce=a("code"),EXo=o("model_type"),yXo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),wXo=o("pretrained_model_name_or_path"),AXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),LXo=o("pretrained_model_name_or_path"),BXo=o(":"),xXo=l(),zy=a("ul"),jv=a("li"),vce=a("strong"),kXo=o("speech-encoder-decoder"),RXo=o(" \u2014 "),oq=a("a"),SXo=o("SpeechEncoderDecoderModel"),PXo=o(" (Speech Encoder decoder model)"),$Xo=l(),Nv=a("li"),Tce=a("strong"),IXo=o("speech_to_text"),jXo=o(" \u2014 "),rq=a("a"),NXo=o("Speech2TextForConditionalGeneration"),DXo=o(" (Speech2Text model)"),qXo=l(),Dv=a("p"),OXo=o("The model is set in evaluation mode by default using "),Fce=a("code"),GXo=o("model.eval()"),XXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),VXo=o("model.train()"),zXo=l(),Mce=a("p"),WXo=o("Examples:"),QXo=l(),f(Wy.$$.fragment),kke=l(),Hd=a("h2"),qv=a("a"),Ece=a("span"),f(Qy.$$.fragment),HXo=l(),yce=a("span"),UXo=o("AutoModelForAudioXVector"),Rke=l(),gr=a("div"),f(Hy.$$.fragment),JXo=l(),Ud=a("p"),YXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wce=a("code"),KXo=o("from_pretrained()"),ZXo=o("class method or the "),Ace=a("code"),eVo=o("from_config()"),oVo=o(`class
method.`),rVo=l(),Uy=a("p"),tVo=o("This class cannot be instantiated directly using "),Lce=a("code"),aVo=o("__init__()"),nVo=o(" (throws an error)."),sVo=l(),lt=a("div"),f(Jy.$$.fragment),lVo=l(),Bce=a("p"),iVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dVo=l(),Jd=a("p"),cVo=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),fVo=o("not"),mVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kce=a("code"),gVo=o("from_pretrained()"),hVo=o("to load the model weights."),pVo=l(),Rce=a("p"),_Vo=o("Examples:"),uVo=l(),f(Yy.$$.fragment),bVo=l(),oo=a("div"),f(Ky.$$.fragment),vVo=l(),Sce=a("p"),TVo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),FVo=l(),dn=a("p"),CVo=o("The model class to instantiate is selected based on the "),Pce=a("code"),MVo=o("model_type"),EVo=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),yVo=o("pretrained_model_name_or_path"),wVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),AVo=o("pretrained_model_name_or_path"),LVo=o(":"),BVo=l(),cn=a("ul"),Ov=a("li"),jce=a("strong"),xVo=o("data2vec-audio"),kVo=o(" \u2014 "),tq=a("a"),RVo=o("Data2VecAudioForXVector"),SVo=o(" (Data2VecAudio model)"),PVo=l(),Gv=a("li"),Nce=a("strong"),$Vo=o("unispeech-sat"),IVo=o(" \u2014 "),aq=a("a"),jVo=o("UniSpeechSatForXVector"),NVo=o(" (UniSpeechSat model)"),DVo=l(),Xv=a("li"),Dce=a("strong"),qVo=o("wav2vec2"),OVo=o(" \u2014 "),nq=a("a"),GVo=o("Wav2Vec2ForXVector"),XVo=o(" (Wav2Vec2 model)"),VVo=l(),Vv=a("li"),qce=a("strong"),zVo=o("wavlm"),WVo=o(" \u2014 "),sq=a("a"),QVo=o("WavLMForXVector"),HVo=o(" (WavLM model)"),UVo=l(),zv=a("p"),JVo=o("The model is set in evaluation mode by default using "),Oce=a("code"),YVo=o("model.eval()"),KVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=a("code"),ZVo=o("model.train()"),ezo=l(),Xce=a("p"),ozo=o("Examples:"),rzo=l(),f(Zy.$$.fragment),Ske=l(),Yd=a("h2"),Wv=a("a"),Vce=a("span"),f(ew.$$.fragment),tzo=l(),zce=a("span"),azo=o("AutoModelForMaskedImageModeling"),Pke=l(),hr=a("div"),f(ow.$$.fragment),nzo=l(),Kd=a("p"),szo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Wce=a("code"),lzo=o("from_pretrained()"),izo=o("class method or the "),Qce=a("code"),dzo=o("from_config()"),czo=o(`class
method.`),fzo=l(),rw=a("p"),mzo=o("This class cannot be instantiated directly using "),Hce=a("code"),gzo=o("__init__()"),hzo=o(" (throws an error)."),pzo=l(),it=a("div"),f(tw.$$.fragment),_zo=l(),Uce=a("p"),uzo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bzo=l(),Zd=a("p"),vzo=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),Tzo=o("not"),Fzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yce=a("code"),Czo=o("from_pretrained()"),Mzo=o("to load the model weights."),Ezo=l(),Kce=a("p"),yzo=o("Examples:"),wzo=l(),f(aw.$$.fragment),Azo=l(),ro=a("div"),f(nw.$$.fragment),Lzo=l(),Zce=a("p"),Bzo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xzo=l(),fn=a("p"),kzo=o("The model class to instantiate is selected based on the "),efe=a("code"),Rzo=o("model_type"),Szo=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),Pzo=o("pretrained_model_name_or_path"),$zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),Izo=o("pretrained_model_name_or_path"),jzo=o(":"),Nzo=l(),ec=a("ul"),Qv=a("li"),tfe=a("strong"),Dzo=o("deit"),qzo=o(" \u2014 "),lq=a("a"),Ozo=o("DeiTForMaskedImageModeling"),Gzo=o(" (DeiT model)"),Xzo=l(),Hv=a("li"),afe=a("strong"),Vzo=o("swin"),zzo=o(" \u2014 "),iq=a("a"),Wzo=o("SwinForMaskedImageModeling"),Qzo=o(" (Swin model)"),Hzo=l(),Uv=a("li"),nfe=a("strong"),Uzo=o("vit"),Jzo=o(" \u2014 "),dq=a("a"),Yzo=o("ViTForMaskedImageModeling"),Kzo=o(" (ViT model)"),Zzo=l(),Jv=a("p"),eWo=o("The model is set in evaluation mode by default using "),sfe=a("code"),oWo=o("model.eval()"),rWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=a("code"),tWo=o("model.train()"),aWo=l(),ife=a("p"),nWo=o("Examples:"),sWo=l(),f(sw.$$.fragment),$ke=l(),oc=a("h2"),Yv=a("a"),dfe=a("span"),f(lw.$$.fragment),lWo=l(),cfe=a("span"),iWo=o("AutoModelForObjectDetection"),Ike=l(),pr=a("div"),f(iw.$$.fragment),dWo=l(),rc=a("p"),cWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ffe=a("code"),fWo=o("from_pretrained()"),mWo=o("class method or the "),mfe=a("code"),gWo=o("from_config()"),hWo=o(`class
method.`),pWo=l(),dw=a("p"),_Wo=o("This class cannot be instantiated directly using "),gfe=a("code"),uWo=o("__init__()"),bWo=o(" (throws an error)."),vWo=l(),dt=a("div"),f(cw.$$.fragment),TWo=l(),hfe=a("p"),FWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),CWo=l(),tc=a("p"),MWo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),EWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_fe=a("code"),wWo=o("from_pretrained()"),AWo=o("to load the model weights."),LWo=l(),ufe=a("p"),BWo=o("Examples:"),xWo=l(),f(fw.$$.fragment),kWo=l(),to=a("div"),f(mw.$$.fragment),RWo=l(),bfe=a("p"),SWo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),PWo=l(),mn=a("p"),$Wo=o("The model class to instantiate is selected based on the "),vfe=a("code"),IWo=o("model_type"),jWo=o(` property of the config object (either
passed as an argument or loaded from `),Tfe=a("code"),NWo=o("pretrained_model_name_or_path"),DWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),qWo=o("pretrained_model_name_or_path"),OWo=o(":"),GWo=l(),Cfe=a("ul"),Kv=a("li"),Mfe=a("strong"),XWo=o("detr"),VWo=o(" \u2014 "),cq=a("a"),zWo=o("DetrForObjectDetection"),WWo=o(" (DETR model)"),QWo=l(),Zv=a("p"),HWo=o("The model is set in evaluation mode by default using "),Efe=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=a("code"),YWo=o("model.train()"),KWo=l(),wfe=a("p"),ZWo=o("Examples:"),eQo=l(),f(gw.$$.fragment),jke=l(),ac=a("h2"),e6=a("a"),Afe=a("span"),f(hw.$$.fragment),oQo=l(),Lfe=a("span"),rQo=o("AutoModelForImageSegmentation"),Nke=l(),_r=a("div"),f(pw.$$.fragment),tQo=l(),nc=a("p"),aQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Bfe=a("code"),nQo=o("from_pretrained()"),sQo=o("class method or the "),xfe=a("code"),lQo=o("from_config()"),iQo=o(`class
method.`),dQo=l(),_w=a("p"),cQo=o("This class cannot be instantiated directly using "),kfe=a("code"),fQo=o("__init__()"),mQo=o(" (throws an error)."),gQo=l(),ct=a("div"),f(uw.$$.fragment),hQo=l(),Rfe=a("p"),pQo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_Qo=l(),sc=a("p"),uQo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),bQo=o("not"),vQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pfe=a("code"),TQo=o("from_pretrained()"),FQo=o("to load the model weights."),CQo=l(),$fe=a("p"),MQo=o("Examples:"),EQo=l(),f(bw.$$.fragment),yQo=l(),ao=a("div"),f(vw.$$.fragment),wQo=l(),Ife=a("p"),AQo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),LQo=l(),gn=a("p"),BQo=o("The model class to instantiate is selected based on the "),jfe=a("code"),xQo=o("model_type"),kQo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),RQo=o("pretrained_model_name_or_path"),SQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),PQo=o("pretrained_model_name_or_path"),$Qo=o(":"),IQo=l(),qfe=a("ul"),o6=a("li"),Ofe=a("strong"),jQo=o("detr"),NQo=o(" \u2014 "),fq=a("a"),DQo=o("DetrForSegmentation"),qQo=o(" (DETR model)"),OQo=l(),r6=a("p"),GQo=o("The model is set in evaluation mode by default using "),Gfe=a("code"),XQo=o("model.eval()"),VQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),zQo=o("model.train()"),WQo=l(),Vfe=a("p"),QQo=o("Examples:"),HQo=l(),f(Tw.$$.fragment),Dke=l(),lc=a("h2"),t6=a("a"),zfe=a("span"),f(Fw.$$.fragment),UQo=l(),Wfe=a("span"),JQo=o("AutoModelForSemanticSegmentation"),qke=l(),ur=a("div"),f(Cw.$$.fragment),YQo=l(),ic=a("p"),KQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Qfe=a("code"),ZQo=o("from_pretrained()"),eHo=o("class method or the "),Hfe=a("code"),oHo=o("from_config()"),rHo=o(`class
method.`),tHo=l(),Mw=a("p"),aHo=o("This class cannot be instantiated directly using "),Ufe=a("code"),nHo=o("__init__()"),sHo=o(" (throws an error)."),lHo=l(),ft=a("div"),f(Ew.$$.fragment),iHo=l(),Jfe=a("p"),dHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cHo=l(),dc=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),mHo=o("not"),gHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=a("code"),hHo=o("from_pretrained()"),pHo=o("to load the model weights."),_Ho=l(),Zfe=a("p"),uHo=o("Examples:"),bHo=l(),f(yw.$$.fragment),vHo=l(),no=a("div"),f(ww.$$.fragment),THo=l(),eme=a("p"),FHo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),CHo=l(),hn=a("p"),MHo=o("The model class to instantiate is selected based on the "),ome=a("code"),EHo=o("model_type"),yHo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),wHo=o("pretrained_model_name_or_path"),AHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),LHo=o("pretrained_model_name_or_path"),BHo=o(":"),xHo=l(),Aw=a("ul"),a6=a("li"),ame=a("strong"),kHo=o("beit"),RHo=o(" \u2014 "),mq=a("a"),SHo=o("BeitForSemanticSegmentation"),PHo=o(" (BEiT model)"),$Ho=l(),n6=a("li"),nme=a("strong"),IHo=o("segformer"),jHo=o(" \u2014 "),gq=a("a"),NHo=o("SegformerForSemanticSegmentation"),DHo=o(" (SegFormer model)"),qHo=l(),s6=a("p"),OHo=o("The model is set in evaluation mode by default using "),sme=a("code"),GHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),VHo=o("model.train()"),zHo=l(),ime=a("p"),WHo=o("Examples:"),QHo=l(),f(Lw.$$.fragment),Oke=l(),cc=a("h2"),l6=a("a"),dme=a("span"),f(Bw.$$.fragment),HHo=l(),cme=a("span"),UHo=o("AutoModelForInstanceSegmentation"),Gke=l(),br=a("div"),f(xw.$$.fragment),JHo=l(),fc=a("p"),YHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fme=a("code"),KHo=o("from_pretrained()"),ZHo=o("class method or the "),mme=a("code"),eUo=o("from_config()"),oUo=o(`class
method.`),rUo=l(),kw=a("p"),tUo=o("This class cannot be instantiated directly using "),gme=a("code"),aUo=o("__init__()"),nUo=o(" (throws an error)."),sUo=l(),mt=a("div"),f(Rw.$$.fragment),lUo=l(),hme=a("p"),iUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dUo=l(),mc=a("p"),cUo=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),fUo=o("not"),mUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_me=a("code"),gUo=o("from_pretrained()"),hUo=o("to load the model weights."),pUo=l(),ume=a("p"),_Uo=o("Examples:"),uUo=l(),f(Sw.$$.fragment),bUo=l(),so=a("div"),f(Pw.$$.fragment),vUo=l(),bme=a("p"),TUo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),FUo=l(),pn=a("p"),CUo=o("The model class to instantiate is selected based on the "),vme=a("code"),MUo=o("model_type"),EUo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),yUo=o("pretrained_model_name_or_path"),wUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),AUo=o("pretrained_model_name_or_path"),LUo=o(":"),BUo=l(),Cme=a("ul"),i6=a("li"),Mme=a("strong"),xUo=o("maskformer"),kUo=o(" \u2014 "),hq=a("a"),RUo=o("MaskFormerForInstanceSegmentation"),SUo=o(" (MaskFormer model)"),PUo=l(),d6=a("p"),$Uo=o("The model is set in evaluation mode by default using "),Eme=a("code"),IUo=o("model.eval()"),jUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),NUo=o("model.train()"),DUo=l(),wme=a("p"),qUo=o("Examples:"),OUo=l(),f($w.$$.fragment),Xke=l(),gc=a("h2"),c6=a("a"),Ame=a("span"),f(Iw.$$.fragment),GUo=l(),Lme=a("span"),XUo=o("TFAutoModel"),Vke=l(),vr=a("div"),f(jw.$$.fragment),VUo=l(),hc=a("p"),zUo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bme=a("code"),WUo=o("from_pretrained()"),QUo=o("class method or the "),xme=a("code"),HUo=o("from_config()"),UUo=o(`class
method.`),JUo=l(),Nw=a("p"),YUo=o("This class cannot be instantiated directly using "),kme=a("code"),KUo=o("__init__()"),ZUo=o(" (throws an error)."),eJo=l(),gt=a("div"),f(Dw.$$.fragment),oJo=l(),Rme=a("p"),rJo=o("Instantiates one of the base model classes of the library from a configuration."),tJo=l(),pc=a("p"),aJo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),nJo=o("not"),sJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pme=a("code"),lJo=o("from_pretrained()"),iJo=o("to load the model weights."),dJo=l(),$me=a("p"),cJo=o("Examples:"),fJo=l(),f(qw.$$.fragment),mJo=l(),ho=a("div"),f(Ow.$$.fragment),gJo=l(),Ime=a("p"),hJo=o("Instantiate one of the base model classes of the library from a pretrained model."),pJo=l(),_n=a("p"),_Jo=o("The model class to instantiate is selected based on the "),jme=a("code"),uJo=o("model_type"),bJo=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),vJo=o("pretrained_model_name_or_path"),TJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),FJo=o("pretrained_model_name_or_path"),CJo=o(":"),MJo=l(),B=a("ul"),f6=a("li"),qme=a("strong"),EJo=o("albert"),yJo=o(" \u2014 "),pq=a("a"),wJo=o("TFAlbertModel"),AJo=o(" (ALBERT model)"),LJo=l(),m6=a("li"),Ome=a("strong"),BJo=o("bart"),xJo=o(" \u2014 "),_q=a("a"),kJo=o("TFBartModel"),RJo=o(" (BART model)"),SJo=l(),g6=a("li"),Gme=a("strong"),PJo=o("bert"),$Jo=o(" \u2014 "),uq=a("a"),IJo=o("TFBertModel"),jJo=o(" (BERT model)"),NJo=l(),h6=a("li"),Xme=a("strong"),DJo=o("blenderbot"),qJo=o(" \u2014 "),bq=a("a"),OJo=o("TFBlenderbotModel"),GJo=o(" (Blenderbot model)"),XJo=l(),p6=a("li"),Vme=a("strong"),VJo=o("blenderbot-small"),zJo=o(" \u2014 "),vq=a("a"),WJo=o("TFBlenderbotSmallModel"),QJo=o(" (BlenderbotSmall model)"),HJo=l(),_6=a("li"),zme=a("strong"),UJo=o("camembert"),JJo=o(" \u2014 "),Tq=a("a"),YJo=o("TFCamembertModel"),KJo=o(" (CamemBERT model)"),ZJo=l(),u6=a("li"),Wme=a("strong"),eYo=o("clip"),oYo=o(" \u2014 "),Fq=a("a"),rYo=o("TFCLIPModel"),tYo=o(" (CLIP model)"),aYo=l(),b6=a("li"),Qme=a("strong"),nYo=o("convbert"),sYo=o(" \u2014 "),Cq=a("a"),lYo=o("TFConvBertModel"),iYo=o(" (ConvBERT model)"),dYo=l(),v6=a("li"),Hme=a("strong"),cYo=o("convnext"),fYo=o(" \u2014 "),Mq=a("a"),mYo=o("TFConvNextModel"),gYo=o(" (ConvNext model)"),hYo=l(),T6=a("li"),Ume=a("strong"),pYo=o("ctrl"),_Yo=o(" \u2014 "),Eq=a("a"),uYo=o("TFCTRLModel"),bYo=o(" (CTRL model)"),vYo=l(),F6=a("li"),Jme=a("strong"),TYo=o("deberta"),FYo=o(" \u2014 "),yq=a("a"),CYo=o("TFDebertaModel"),MYo=o(" (DeBERTa model)"),EYo=l(),C6=a("li"),Yme=a("strong"),yYo=o("deberta-v2"),wYo=o(" \u2014 "),wq=a("a"),AYo=o("TFDebertaV2Model"),LYo=o(" (DeBERTa-v2 model)"),BYo=l(),M6=a("li"),Kme=a("strong"),xYo=o("distilbert"),kYo=o(" \u2014 "),Aq=a("a"),RYo=o("TFDistilBertModel"),SYo=o(" (DistilBERT model)"),PYo=l(),E6=a("li"),Zme=a("strong"),$Yo=o("dpr"),IYo=o(" \u2014 "),Lq=a("a"),jYo=o("TFDPRQuestionEncoder"),NYo=o(" (DPR model)"),DYo=l(),y6=a("li"),ege=a("strong"),qYo=o("electra"),OYo=o(" \u2014 "),Bq=a("a"),GYo=o("TFElectraModel"),XYo=o(" (ELECTRA model)"),VYo=l(),w6=a("li"),oge=a("strong"),zYo=o("flaubert"),WYo=o(" \u2014 "),xq=a("a"),QYo=o("TFFlaubertModel"),HYo=o(" (FlauBERT model)"),UYo=l(),Os=a("li"),rge=a("strong"),JYo=o("funnel"),YYo=o(" \u2014 "),kq=a("a"),KYo=o("TFFunnelModel"),ZYo=o(" or "),Rq=a("a"),eKo=o("TFFunnelBaseModel"),oKo=o(" (Funnel Transformer model)"),rKo=l(),A6=a("li"),tge=a("strong"),tKo=o("gpt2"),aKo=o(" \u2014 "),Sq=a("a"),nKo=o("TFGPT2Model"),sKo=o(" (OpenAI GPT-2 model)"),lKo=l(),L6=a("li"),age=a("strong"),iKo=o("hubert"),dKo=o(" \u2014 "),Pq=a("a"),cKo=o("TFHubertModel"),fKo=o(" (Hubert model)"),mKo=l(),B6=a("li"),nge=a("strong"),gKo=o("layoutlm"),hKo=o(" \u2014 "),$q=a("a"),pKo=o("TFLayoutLMModel"),_Ko=o(" (LayoutLM model)"),uKo=l(),x6=a("li"),sge=a("strong"),bKo=o("led"),vKo=o(" \u2014 "),Iq=a("a"),TKo=o("TFLEDModel"),FKo=o(" (LED model)"),CKo=l(),k6=a("li"),lge=a("strong"),MKo=o("longformer"),EKo=o(" \u2014 "),jq=a("a"),yKo=o("TFLongformerModel"),wKo=o(" (Longformer model)"),AKo=l(),R6=a("li"),ige=a("strong"),LKo=o("lxmert"),BKo=o(" \u2014 "),Nq=a("a"),xKo=o("TFLxmertModel"),kKo=o(" (LXMERT model)"),RKo=l(),S6=a("li"),dge=a("strong"),SKo=o("marian"),PKo=o(" \u2014 "),Dq=a("a"),$Ko=o("TFMarianModel"),IKo=o(" (Marian model)"),jKo=l(),P6=a("li"),cge=a("strong"),NKo=o("mbart"),DKo=o(" \u2014 "),qq=a("a"),qKo=o("TFMBartModel"),OKo=o(" (mBART model)"),GKo=l(),$6=a("li"),fge=a("strong"),XKo=o("mobilebert"),VKo=o(" \u2014 "),Oq=a("a"),zKo=o("TFMobileBertModel"),WKo=o(" (MobileBERT model)"),QKo=l(),I6=a("li"),mge=a("strong"),HKo=o("mpnet"),UKo=o(" \u2014 "),Gq=a("a"),JKo=o("TFMPNetModel"),YKo=o(" (MPNet model)"),KKo=l(),j6=a("li"),gge=a("strong"),ZKo=o("mt5"),eZo=o(" \u2014 "),Xq=a("a"),oZo=o("TFMT5Model"),rZo=o(" (mT5 model)"),tZo=l(),N6=a("li"),hge=a("strong"),aZo=o("openai-gpt"),nZo=o(" \u2014 "),Vq=a("a"),sZo=o("TFOpenAIGPTModel"),lZo=o(" (OpenAI GPT model)"),iZo=l(),D6=a("li"),pge=a("strong"),dZo=o("pegasus"),cZo=o(" \u2014 "),zq=a("a"),fZo=o("TFPegasusModel"),mZo=o(" (Pegasus model)"),gZo=l(),q6=a("li"),_ge=a("strong"),hZo=o("rembert"),pZo=o(" \u2014 "),Wq=a("a"),_Zo=o("TFRemBertModel"),uZo=o(" (RemBERT model)"),bZo=l(),O6=a("li"),uge=a("strong"),vZo=o("roberta"),TZo=o(" \u2014 "),Qq=a("a"),FZo=o("TFRobertaModel"),CZo=o(" (RoBERTa model)"),MZo=l(),G6=a("li"),bge=a("strong"),EZo=o("roformer"),yZo=o(" \u2014 "),Hq=a("a"),wZo=o("TFRoFormerModel"),AZo=o(" (RoFormer model)"),LZo=l(),X6=a("li"),vge=a("strong"),BZo=o("speech_to_text"),xZo=o(" \u2014 "),Uq=a("a"),kZo=o("TFSpeech2TextModel"),RZo=o(" (Speech2Text model)"),SZo=l(),V6=a("li"),Tge=a("strong"),PZo=o("t5"),$Zo=o(" \u2014 "),Jq=a("a"),IZo=o("TFT5Model"),jZo=o(" (T5 model)"),NZo=l(),z6=a("li"),Fge=a("strong"),DZo=o("tapas"),qZo=o(" \u2014 "),Yq=a("a"),OZo=o("TFTapasModel"),GZo=o(" (TAPAS model)"),XZo=l(),W6=a("li"),Cge=a("strong"),VZo=o("transfo-xl"),zZo=o(" \u2014 "),Kq=a("a"),WZo=o("TFTransfoXLModel"),QZo=o(" (Transformer-XL model)"),HZo=l(),Q6=a("li"),Mge=a("strong"),UZo=o("vit"),JZo=o(" \u2014 "),Zq=a("a"),YZo=o("TFViTModel"),KZo=o(" (ViT model)"),ZZo=l(),H6=a("li"),Ege=a("strong"),eer=o("wav2vec2"),oer=o(" \u2014 "),eO=a("a"),rer=o("TFWav2Vec2Model"),ter=o(" (Wav2Vec2 model)"),aer=l(),U6=a("li"),yge=a("strong"),ner=o("xlm"),ser=o(" \u2014 "),oO=a("a"),ler=o("TFXLMModel"),ier=o(" (XLM model)"),der=l(),J6=a("li"),wge=a("strong"),cer=o("xlm-roberta"),fer=o(" \u2014 "),rO=a("a"),mer=o("TFXLMRobertaModel"),ger=o(" (XLM-RoBERTa model)"),her=l(),Y6=a("li"),Age=a("strong"),per=o("xlnet"),_er=o(" \u2014 "),tO=a("a"),uer=o("TFXLNetModel"),ber=o(" (XLNet model)"),ver=l(),Lge=a("p"),Ter=o("Examples:"),Fer=l(),f(Gw.$$.fragment),zke=l(),_c=a("h2"),K6=a("a"),Bge=a("span"),f(Xw.$$.fragment),Cer=l(),xge=a("span"),Mer=o("TFAutoModelForPreTraining"),Wke=l(),Tr=a("div"),f(Vw.$$.fragment),Eer=l(),uc=a("p"),yer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kge=a("code"),wer=o("from_pretrained()"),Aer=o("class method or the "),Rge=a("code"),Ler=o("from_config()"),Ber=o(`class
method.`),xer=l(),zw=a("p"),ker=o("This class cannot be instantiated directly using "),Sge=a("code"),Rer=o("__init__()"),Ser=o(" (throws an error)."),Per=l(),ht=a("div"),f(Ww.$$.fragment),$er=l(),Pge=a("p"),Ier=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jer=l(),bc=a("p"),Ner=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),Der=o("not"),qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ige=a("code"),Oer=o("from_pretrained()"),Ger=o("to load the model weights."),Xer=l(),jge=a("p"),Ver=o("Examples:"),zer=l(),f(Qw.$$.fragment),Wer=l(),po=a("div"),f(Hw.$$.fragment),Qer=l(),Nge=a("p"),Her=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uer=l(),un=a("p"),Jer=o("The model class to instantiate is selected based on the "),Dge=a("code"),Yer=o("model_type"),Ker=o(` property of the config object (either
passed as an argument or loaded from `),qge=a("code"),Zer=o("pretrained_model_name_or_path"),eor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),oor=o("pretrained_model_name_or_path"),ror=o(":"),tor=l(),H=a("ul"),Z6=a("li"),Gge=a("strong"),aor=o("albert"),nor=o(" \u2014 "),aO=a("a"),sor=o("TFAlbertForPreTraining"),lor=o(" (ALBERT model)"),ior=l(),e0=a("li"),Xge=a("strong"),dor=o("bart"),cor=o(" \u2014 "),nO=a("a"),mor=o("TFBartForConditionalGeneration"),gor=o(" (BART model)"),hor=l(),o0=a("li"),Vge=a("strong"),por=o("bert"),_or=o(" \u2014 "),sO=a("a"),uor=o("TFBertForPreTraining"),bor=o(" (BERT model)"),vor=l(),r0=a("li"),zge=a("strong"),Tor=o("camembert"),For=o(" \u2014 "),lO=a("a"),Cor=o("TFCamembertForMaskedLM"),Mor=o(" (CamemBERT model)"),Eor=l(),t0=a("li"),Wge=a("strong"),yor=o("ctrl"),wor=o(" \u2014 "),iO=a("a"),Aor=o("TFCTRLLMHeadModel"),Lor=o(" (CTRL model)"),Bor=l(),a0=a("li"),Qge=a("strong"),xor=o("distilbert"),kor=o(" \u2014 "),dO=a("a"),Ror=o("TFDistilBertForMaskedLM"),Sor=o(" (DistilBERT model)"),Por=l(),n0=a("li"),Hge=a("strong"),$or=o("electra"),Ior=o(" \u2014 "),cO=a("a"),jor=o("TFElectraForPreTraining"),Nor=o(" (ELECTRA model)"),Dor=l(),s0=a("li"),Uge=a("strong"),qor=o("flaubert"),Oor=o(" \u2014 "),fO=a("a"),Gor=o("TFFlaubertWithLMHeadModel"),Xor=o(" (FlauBERT model)"),Vor=l(),l0=a("li"),Jge=a("strong"),zor=o("funnel"),Wor=o(" \u2014 "),mO=a("a"),Qor=o("TFFunnelForPreTraining"),Hor=o(" (Funnel Transformer model)"),Uor=l(),i0=a("li"),Yge=a("strong"),Jor=o("gpt2"),Yor=o(" \u2014 "),gO=a("a"),Kor=o("TFGPT2LMHeadModel"),Zor=o(" (OpenAI GPT-2 model)"),err=l(),d0=a("li"),Kge=a("strong"),orr=o("layoutlm"),rrr=o(" \u2014 "),hO=a("a"),trr=o("TFLayoutLMForMaskedLM"),arr=o(" (LayoutLM model)"),nrr=l(),c0=a("li"),Zge=a("strong"),srr=o("lxmert"),lrr=o(" \u2014 "),pO=a("a"),irr=o("TFLxmertForPreTraining"),drr=o(" (LXMERT model)"),crr=l(),f0=a("li"),ehe=a("strong"),frr=o("mobilebert"),mrr=o(" \u2014 "),_O=a("a"),grr=o("TFMobileBertForPreTraining"),hrr=o(" (MobileBERT model)"),prr=l(),m0=a("li"),ohe=a("strong"),_rr=o("mpnet"),urr=o(" \u2014 "),uO=a("a"),brr=o("TFMPNetForMaskedLM"),vrr=o(" (MPNet model)"),Trr=l(),g0=a("li"),rhe=a("strong"),Frr=o("openai-gpt"),Crr=o(" \u2014 "),bO=a("a"),Mrr=o("TFOpenAIGPTLMHeadModel"),Err=o(" (OpenAI GPT model)"),yrr=l(),h0=a("li"),the=a("strong"),wrr=o("roberta"),Arr=o(" \u2014 "),vO=a("a"),Lrr=o("TFRobertaForMaskedLM"),Brr=o(" (RoBERTa model)"),xrr=l(),p0=a("li"),ahe=a("strong"),krr=o("t5"),Rrr=o(" \u2014 "),TO=a("a"),Srr=o("TFT5ForConditionalGeneration"),Prr=o(" (T5 model)"),$rr=l(),_0=a("li"),nhe=a("strong"),Irr=o("tapas"),jrr=o(" \u2014 "),FO=a("a"),Nrr=o("TFTapasForMaskedLM"),Drr=o(" (TAPAS model)"),qrr=l(),u0=a("li"),she=a("strong"),Orr=o("transfo-xl"),Grr=o(" \u2014 "),CO=a("a"),Xrr=o("TFTransfoXLLMHeadModel"),Vrr=o(" (Transformer-XL model)"),zrr=l(),b0=a("li"),lhe=a("strong"),Wrr=o("xlm"),Qrr=o(" \u2014 "),MO=a("a"),Hrr=o("TFXLMWithLMHeadModel"),Urr=o(" (XLM model)"),Jrr=l(),v0=a("li"),ihe=a("strong"),Yrr=o("xlm-roberta"),Krr=o(" \u2014 "),EO=a("a"),Zrr=o("TFXLMRobertaForMaskedLM"),etr=o(" (XLM-RoBERTa model)"),otr=l(),T0=a("li"),dhe=a("strong"),rtr=o("xlnet"),ttr=o(" \u2014 "),yO=a("a"),atr=o("TFXLNetLMHeadModel"),ntr=o(" (XLNet model)"),str=l(),che=a("p"),ltr=o("Examples:"),itr=l(),f(Uw.$$.fragment),Qke=l(),vc=a("h2"),F0=a("a"),fhe=a("span"),f(Jw.$$.fragment),dtr=l(),mhe=a("span"),ctr=o("TFAutoModelForCausalLM"),Hke=l(),Fr=a("div"),f(Yw.$$.fragment),ftr=l(),Tc=a("p"),mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ghe=a("code"),gtr=o("from_pretrained()"),htr=o("class method or the "),hhe=a("code"),ptr=o("from_config()"),_tr=o(`class
method.`),utr=l(),Kw=a("p"),btr=o("This class cannot be instantiated directly using "),phe=a("code"),vtr=o("__init__()"),Ttr=o(" (throws an error)."),Ftr=l(),pt=a("div"),f(Zw.$$.fragment),Ctr=l(),_he=a("p"),Mtr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Etr=l(),Fc=a("p"),ytr=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),wtr=o("not"),Atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bhe=a("code"),Ltr=o("from_pretrained()"),Btr=o("to load the model weights."),xtr=l(),vhe=a("p"),ktr=o("Examples:"),Rtr=l(),f(eA.$$.fragment),Str=l(),_o=a("div"),f(oA.$$.fragment),Ptr=l(),The=a("p"),$tr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Itr=l(),bn=a("p"),jtr=o("The model class to instantiate is selected based on the "),Fhe=a("code"),Ntr=o("model_type"),Dtr=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),qtr=o("pretrained_model_name_or_path"),Otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),Gtr=o("pretrained_model_name_or_path"),Xtr=o(":"),Vtr=l(),ge=a("ul"),C0=a("li"),Ehe=a("strong"),ztr=o("bert"),Wtr=o(" \u2014 "),wO=a("a"),Qtr=o("TFBertLMHeadModel"),Htr=o(" (BERT model)"),Utr=l(),M0=a("li"),yhe=a("strong"),Jtr=o("camembert"),Ytr=o(" \u2014 "),AO=a("a"),Ktr=o("TFCamembertForCausalLM"),Ztr=o(" (CamemBERT model)"),ear=l(),E0=a("li"),whe=a("strong"),oar=o("ctrl"),rar=o(" \u2014 "),LO=a("a"),tar=o("TFCTRLLMHeadModel"),aar=o(" (CTRL model)"),nar=l(),y0=a("li"),Ahe=a("strong"),sar=o("gpt2"),lar=o(" \u2014 "),BO=a("a"),iar=o("TFGPT2LMHeadModel"),dar=o(" (OpenAI GPT-2 model)"),car=l(),w0=a("li"),Lhe=a("strong"),far=o("openai-gpt"),mar=o(" \u2014 "),xO=a("a"),gar=o("TFOpenAIGPTLMHeadModel"),har=o(" (OpenAI GPT model)"),par=l(),A0=a("li"),Bhe=a("strong"),_ar=o("rembert"),uar=o(" \u2014 "),kO=a("a"),bar=o("TFRemBertForCausalLM"),Tar=o(" (RemBERT model)"),Far=l(),L0=a("li"),xhe=a("strong"),Car=o("roberta"),Mar=o(" \u2014 "),RO=a("a"),Ear=o("TFRobertaForCausalLM"),yar=o(" (RoBERTa model)"),war=l(),B0=a("li"),khe=a("strong"),Aar=o("roformer"),Lar=o(" \u2014 "),SO=a("a"),Bar=o("TFRoFormerForCausalLM"),xar=o(" (RoFormer model)"),kar=l(),x0=a("li"),Rhe=a("strong"),Rar=o("transfo-xl"),Sar=o(" \u2014 "),PO=a("a"),Par=o("TFTransfoXLLMHeadModel"),$ar=o(" (Transformer-XL model)"),Iar=l(),k0=a("li"),She=a("strong"),jar=o("xlm"),Nar=o(" \u2014 "),$O=a("a"),Dar=o("TFXLMWithLMHeadModel"),qar=o(" (XLM model)"),Oar=l(),R0=a("li"),Phe=a("strong"),Gar=o("xlnet"),Xar=o(" \u2014 "),IO=a("a"),Var=o("TFXLNetLMHeadModel"),zar=o(" (XLNet model)"),War=l(),$he=a("p"),Qar=o("Examples:"),Har=l(),f(rA.$$.fragment),Uke=l(),Cc=a("h2"),S0=a("a"),Ihe=a("span"),f(tA.$$.fragment),Uar=l(),jhe=a("span"),Jar=o("TFAutoModelForImageClassification"),Jke=l(),Cr=a("div"),f(aA.$$.fragment),Yar=l(),Mc=a("p"),Kar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nhe=a("code"),Zar=o("from_pretrained()"),enr=o("class method or the "),Dhe=a("code"),onr=o("from_config()"),rnr=o(`class
method.`),tnr=l(),nA=a("p"),anr=o("This class cannot be instantiated directly using "),qhe=a("code"),nnr=o("__init__()"),snr=o(" (throws an error)."),lnr=l(),_t=a("div"),f(sA.$$.fragment),inr=l(),Ohe=a("p"),dnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cnr=l(),Ec=a("p"),fnr=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),mnr=o("not"),gnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=a("code"),hnr=o("from_pretrained()"),pnr=o("to load the model weights."),_nr=l(),Vhe=a("p"),unr=o("Examples:"),bnr=l(),f(lA.$$.fragment),vnr=l(),uo=a("div"),f(iA.$$.fragment),Tnr=l(),zhe=a("p"),Fnr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cnr=l(),vn=a("p"),Mnr=o("The model class to instantiate is selected based on the "),Whe=a("code"),Enr=o("model_type"),ynr=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),Lnr=o("pretrained_model_name_or_path"),Bnr=o(":"),xnr=l(),dA=a("ul"),P0=a("li"),Uhe=a("strong"),knr=o("convnext"),Rnr=o(" \u2014 "),jO=a("a"),Snr=o("TFConvNextForImageClassification"),Pnr=o(" (ConvNext model)"),$nr=l(),$0=a("li"),Jhe=a("strong"),Inr=o("vit"),jnr=o(" \u2014 "),NO=a("a"),Nnr=o("TFViTForImageClassification"),Dnr=o(" (ViT model)"),qnr=l(),Yhe=a("p"),Onr=o("Examples:"),Gnr=l(),f(cA.$$.fragment),Yke=l(),yc=a("h2"),I0=a("a"),Khe=a("span"),f(fA.$$.fragment),Xnr=l(),Zhe=a("span"),Vnr=o("TFAutoModelForMaskedLM"),Kke=l(),Mr=a("div"),f(mA.$$.fragment),znr=l(),wc=a("p"),Wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),epe=a("code"),Qnr=o("from_pretrained()"),Hnr=o("class method or the "),ope=a("code"),Unr=o("from_config()"),Jnr=o(`class
method.`),Ynr=l(),gA=a("p"),Knr=o("This class cannot be instantiated directly using "),rpe=a("code"),Znr=o("__init__()"),esr=o(" (throws an error)."),osr=l(),ut=a("div"),f(hA.$$.fragment),rsr=l(),tpe=a("p"),tsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),asr=l(),Ac=a("p"),nsr=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),ssr=o("not"),lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=a("code"),isr=o("from_pretrained()"),dsr=o("to load the model weights."),csr=l(),spe=a("p"),fsr=o("Examples:"),msr=l(),f(pA.$$.fragment),gsr=l(),bo=a("div"),f(_A.$$.fragment),hsr=l(),lpe=a("p"),psr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_sr=l(),Tn=a("p"),usr=o("The model class to instantiate is selected based on the "),ipe=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),Tsr=o("pretrained_model_name_or_path"),Fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),Csr=o("pretrained_model_name_or_path"),Msr=o(":"),Esr=l(),Y=a("ul"),j0=a("li"),fpe=a("strong"),ysr=o("albert"),wsr=o(" \u2014 "),DO=a("a"),Asr=o("TFAlbertForMaskedLM"),Lsr=o(" (ALBERT model)"),Bsr=l(),N0=a("li"),mpe=a("strong"),xsr=o("bert"),ksr=o(" \u2014 "),qO=a("a"),Rsr=o("TFBertForMaskedLM"),Ssr=o(" (BERT model)"),Psr=l(),D0=a("li"),gpe=a("strong"),$sr=o("camembert"),Isr=o(" \u2014 "),OO=a("a"),jsr=o("TFCamembertForMaskedLM"),Nsr=o(" (CamemBERT model)"),Dsr=l(),q0=a("li"),hpe=a("strong"),qsr=o("convbert"),Osr=o(" \u2014 "),GO=a("a"),Gsr=o("TFConvBertForMaskedLM"),Xsr=o(" (ConvBERT model)"),Vsr=l(),O0=a("li"),ppe=a("strong"),zsr=o("deberta"),Wsr=o(" \u2014 "),XO=a("a"),Qsr=o("TFDebertaForMaskedLM"),Hsr=o(" (DeBERTa model)"),Usr=l(),G0=a("li"),_pe=a("strong"),Jsr=o("deberta-v2"),Ysr=o(" \u2014 "),VO=a("a"),Ksr=o("TFDebertaV2ForMaskedLM"),Zsr=o(" (DeBERTa-v2 model)"),elr=l(),X0=a("li"),upe=a("strong"),olr=o("distilbert"),rlr=o(" \u2014 "),zO=a("a"),tlr=o("TFDistilBertForMaskedLM"),alr=o(" (DistilBERT model)"),nlr=l(),V0=a("li"),bpe=a("strong"),slr=o("electra"),llr=o(" \u2014 "),WO=a("a"),ilr=o("TFElectraForMaskedLM"),dlr=o(" (ELECTRA model)"),clr=l(),z0=a("li"),vpe=a("strong"),flr=o("flaubert"),mlr=o(" \u2014 "),QO=a("a"),glr=o("TFFlaubertWithLMHeadModel"),hlr=o(" (FlauBERT model)"),plr=l(),W0=a("li"),Tpe=a("strong"),_lr=o("funnel"),ulr=o(" \u2014 "),HO=a("a"),blr=o("TFFunnelForMaskedLM"),vlr=o(" (Funnel Transformer model)"),Tlr=l(),Q0=a("li"),Fpe=a("strong"),Flr=o("layoutlm"),Clr=o(" \u2014 "),UO=a("a"),Mlr=o("TFLayoutLMForMaskedLM"),Elr=o(" (LayoutLM model)"),ylr=l(),H0=a("li"),Cpe=a("strong"),wlr=o("longformer"),Alr=o(" \u2014 "),JO=a("a"),Llr=o("TFLongformerForMaskedLM"),Blr=o(" (Longformer model)"),xlr=l(),U0=a("li"),Mpe=a("strong"),klr=o("mobilebert"),Rlr=o(" \u2014 "),YO=a("a"),Slr=o("TFMobileBertForMaskedLM"),Plr=o(" (MobileBERT model)"),$lr=l(),J0=a("li"),Epe=a("strong"),Ilr=o("mpnet"),jlr=o(" \u2014 "),KO=a("a"),Nlr=o("TFMPNetForMaskedLM"),Dlr=o(" (MPNet model)"),qlr=l(),Y0=a("li"),ype=a("strong"),Olr=o("rembert"),Glr=o(" \u2014 "),ZO=a("a"),Xlr=o("TFRemBertForMaskedLM"),Vlr=o(" (RemBERT model)"),zlr=l(),K0=a("li"),wpe=a("strong"),Wlr=o("roberta"),Qlr=o(" \u2014 "),eG=a("a"),Hlr=o("TFRobertaForMaskedLM"),Ulr=o(" (RoBERTa model)"),Jlr=l(),Z0=a("li"),Ape=a("strong"),Ylr=o("roformer"),Klr=o(" \u2014 "),oG=a("a"),Zlr=o("TFRoFormerForMaskedLM"),eir=o(" (RoFormer model)"),oir=l(),eT=a("li"),Lpe=a("strong"),rir=o("tapas"),tir=o(" \u2014 "),rG=a("a"),air=o("TFTapasForMaskedLM"),nir=o(" (TAPAS model)"),sir=l(),oT=a("li"),Bpe=a("strong"),lir=o("xlm"),iir=o(" \u2014 "),tG=a("a"),dir=o("TFXLMWithLMHeadModel"),cir=o(" (XLM model)"),fir=l(),rT=a("li"),xpe=a("strong"),mir=o("xlm-roberta"),gir=o(" \u2014 "),aG=a("a"),hir=o("TFXLMRobertaForMaskedLM"),pir=o(" (XLM-RoBERTa model)"),_ir=l(),kpe=a("p"),uir=o("Examples:"),bir=l(),f(uA.$$.fragment),Zke=l(),Lc=a("h2"),tT=a("a"),Rpe=a("span"),f(bA.$$.fragment),vir=l(),Spe=a("span"),Tir=o("TFAutoModelForSeq2SeqLM"),eRe=l(),Er=a("div"),f(vA.$$.fragment),Fir=l(),Bc=a("p"),Cir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ppe=a("code"),Mir=o("from_pretrained()"),Eir=o("class method or the "),$pe=a("code"),yir=o("from_config()"),wir=o(`class
method.`),Air=l(),TA=a("p"),Lir=o("This class cannot be instantiated directly using "),Ipe=a("code"),Bir=o("__init__()"),xir=o(" (throws an error)."),kir=l(),bt=a("div"),f(FA.$$.fragment),Rir=l(),jpe=a("p"),Sir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pir=l(),xc=a("p"),$ir=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),Iir=o("not"),jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=a("code"),Nir=o("from_pretrained()"),Dir=o("to load the model weights."),qir=l(),qpe=a("p"),Oir=o("Examples:"),Gir=l(),f(CA.$$.fragment),Xir=l(),vo=a("div"),f(MA.$$.fragment),Vir=l(),Ope=a("p"),zir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wir=l(),Fn=a("p"),Qir=o("The model class to instantiate is selected based on the "),Gpe=a("code"),Hir=o("model_type"),Uir=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),Jir=o("pretrained_model_name_or_path"),Yir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),Kir=o("pretrained_model_name_or_path"),Zir=o(":"),edr=l(),ue=a("ul"),aT=a("li"),zpe=a("strong"),odr=o("bart"),rdr=o(" \u2014 "),nG=a("a"),tdr=o("TFBartForConditionalGeneration"),adr=o(" (BART model)"),ndr=l(),nT=a("li"),Wpe=a("strong"),sdr=o("blenderbot"),ldr=o(" \u2014 "),sG=a("a"),idr=o("TFBlenderbotForConditionalGeneration"),ddr=o(" (Blenderbot model)"),cdr=l(),sT=a("li"),Qpe=a("strong"),fdr=o("blenderbot-small"),mdr=o(" \u2014 "),lG=a("a"),gdr=o("TFBlenderbotSmallForConditionalGeneration"),hdr=o(" (BlenderbotSmall model)"),pdr=l(),lT=a("li"),Hpe=a("strong"),_dr=o("encoder-decoder"),udr=o(" \u2014 "),iG=a("a"),bdr=o("TFEncoderDecoderModel"),vdr=o(" (Encoder decoder model)"),Tdr=l(),iT=a("li"),Upe=a("strong"),Fdr=o("led"),Cdr=o(" \u2014 "),dG=a("a"),Mdr=o("TFLEDForConditionalGeneration"),Edr=o(" (LED model)"),ydr=l(),dT=a("li"),Jpe=a("strong"),wdr=o("marian"),Adr=o(" \u2014 "),cG=a("a"),Ldr=o("TFMarianMTModel"),Bdr=o(" (Marian model)"),xdr=l(),cT=a("li"),Ype=a("strong"),kdr=o("mbart"),Rdr=o(" \u2014 "),fG=a("a"),Sdr=o("TFMBartForConditionalGeneration"),Pdr=o(" (mBART model)"),$dr=l(),fT=a("li"),Kpe=a("strong"),Idr=o("mt5"),jdr=o(" \u2014 "),mG=a("a"),Ndr=o("TFMT5ForConditionalGeneration"),Ddr=o(" (mT5 model)"),qdr=l(),mT=a("li"),Zpe=a("strong"),Odr=o("pegasus"),Gdr=o(" \u2014 "),gG=a("a"),Xdr=o("TFPegasusForConditionalGeneration"),Vdr=o(" (Pegasus model)"),zdr=l(),gT=a("li"),e_e=a("strong"),Wdr=o("t5"),Qdr=o(" \u2014 "),hG=a("a"),Hdr=o("TFT5ForConditionalGeneration"),Udr=o(" (T5 model)"),Jdr=l(),o_e=a("p"),Ydr=o("Examples:"),Kdr=l(),f(EA.$$.fragment),oRe=l(),kc=a("h2"),hT=a("a"),r_e=a("span"),f(yA.$$.fragment),Zdr=l(),t_e=a("span"),ecr=o("TFAutoModelForSequenceClassification"),rRe=l(),yr=a("div"),f(wA.$$.fragment),ocr=l(),Rc=a("p"),rcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),a_e=a("code"),tcr=o("from_pretrained()"),acr=o("class method or the "),n_e=a("code"),ncr=o("from_config()"),scr=o(`class
method.`),lcr=l(),AA=a("p"),icr=o("This class cannot be instantiated directly using "),s_e=a("code"),dcr=o("__init__()"),ccr=o(" (throws an error)."),fcr=l(),vt=a("div"),f(LA.$$.fragment),mcr=l(),l_e=a("p"),gcr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hcr=l(),Sc=a("p"),pcr=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),_cr=o("not"),ucr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d_e=a("code"),bcr=o("from_pretrained()"),vcr=o("to load the model weights."),Tcr=l(),c_e=a("p"),Fcr=o("Examples:"),Ccr=l(),f(BA.$$.fragment),Mcr=l(),To=a("div"),f(xA.$$.fragment),Ecr=l(),f_e=a("p"),ycr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wcr=l(),Cn=a("p"),Acr=o("The model class to instantiate is selected based on the "),m_e=a("code"),Lcr=o("model_type"),Bcr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),xcr=o("pretrained_model_name_or_path"),kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),Rcr=o("pretrained_model_name_or_path"),Scr=o(":"),Pcr=l(),V=a("ul"),pT=a("li"),p_e=a("strong"),$cr=o("albert"),Icr=o(" \u2014 "),pG=a("a"),jcr=o("TFAlbertForSequenceClassification"),Ncr=o(" (ALBERT model)"),Dcr=l(),_T=a("li"),__e=a("strong"),qcr=o("bert"),Ocr=o(" \u2014 "),_G=a("a"),Gcr=o("TFBertForSequenceClassification"),Xcr=o(" (BERT model)"),Vcr=l(),uT=a("li"),u_e=a("strong"),zcr=o("camembert"),Wcr=o(" \u2014 "),uG=a("a"),Qcr=o("TFCamembertForSequenceClassification"),Hcr=o(" (CamemBERT model)"),Ucr=l(),bT=a("li"),b_e=a("strong"),Jcr=o("convbert"),Ycr=o(" \u2014 "),bG=a("a"),Kcr=o("TFConvBertForSequenceClassification"),Zcr=o(" (ConvBERT model)"),efr=l(),vT=a("li"),v_e=a("strong"),ofr=o("ctrl"),rfr=o(" \u2014 "),vG=a("a"),tfr=o("TFCTRLForSequenceClassification"),afr=o(" (CTRL model)"),nfr=l(),TT=a("li"),T_e=a("strong"),sfr=o("deberta"),lfr=o(" \u2014 "),TG=a("a"),ifr=o("TFDebertaForSequenceClassification"),dfr=o(" (DeBERTa model)"),cfr=l(),FT=a("li"),F_e=a("strong"),ffr=o("deberta-v2"),mfr=o(" \u2014 "),FG=a("a"),gfr=o("TFDebertaV2ForSequenceClassification"),hfr=o(" (DeBERTa-v2 model)"),pfr=l(),CT=a("li"),C_e=a("strong"),_fr=o("distilbert"),ufr=o(" \u2014 "),CG=a("a"),bfr=o("TFDistilBertForSequenceClassification"),vfr=o(" (DistilBERT model)"),Tfr=l(),MT=a("li"),M_e=a("strong"),Ffr=o("electra"),Cfr=o(" \u2014 "),MG=a("a"),Mfr=o("TFElectraForSequenceClassification"),Efr=o(" (ELECTRA model)"),yfr=l(),ET=a("li"),E_e=a("strong"),wfr=o("flaubert"),Afr=o(" \u2014 "),EG=a("a"),Lfr=o("TFFlaubertForSequenceClassification"),Bfr=o(" (FlauBERT model)"),xfr=l(),yT=a("li"),y_e=a("strong"),kfr=o("funnel"),Rfr=o(" \u2014 "),yG=a("a"),Sfr=o("TFFunnelForSequenceClassification"),Pfr=o(" (Funnel Transformer model)"),$fr=l(),wT=a("li"),w_e=a("strong"),Ifr=o("gpt2"),jfr=o(" \u2014 "),wG=a("a"),Nfr=o("TFGPT2ForSequenceClassification"),Dfr=o(" (OpenAI GPT-2 model)"),qfr=l(),AT=a("li"),A_e=a("strong"),Ofr=o("layoutlm"),Gfr=o(" \u2014 "),AG=a("a"),Xfr=o("TFLayoutLMForSequenceClassification"),Vfr=o(" (LayoutLM model)"),zfr=l(),LT=a("li"),L_e=a("strong"),Wfr=o("longformer"),Qfr=o(" \u2014 "),LG=a("a"),Hfr=o("TFLongformerForSequenceClassification"),Ufr=o(" (Longformer model)"),Jfr=l(),BT=a("li"),B_e=a("strong"),Yfr=o("mobilebert"),Kfr=o(" \u2014 "),BG=a("a"),Zfr=o("TFMobileBertForSequenceClassification"),emr=o(" (MobileBERT model)"),omr=l(),xT=a("li"),x_e=a("strong"),rmr=o("mpnet"),tmr=o(" \u2014 "),xG=a("a"),amr=o("TFMPNetForSequenceClassification"),nmr=o(" (MPNet model)"),smr=l(),kT=a("li"),k_e=a("strong"),lmr=o("openai-gpt"),imr=o(" \u2014 "),kG=a("a"),dmr=o("TFOpenAIGPTForSequenceClassification"),cmr=o(" (OpenAI GPT model)"),fmr=l(),RT=a("li"),R_e=a("strong"),mmr=o("rembert"),gmr=o(" \u2014 "),RG=a("a"),hmr=o("TFRemBertForSequenceClassification"),pmr=o(" (RemBERT model)"),_mr=l(),ST=a("li"),S_e=a("strong"),umr=o("roberta"),bmr=o(" \u2014 "),SG=a("a"),vmr=o("TFRobertaForSequenceClassification"),Tmr=o(" (RoBERTa model)"),Fmr=l(),PT=a("li"),P_e=a("strong"),Cmr=o("roformer"),Mmr=o(" \u2014 "),PG=a("a"),Emr=o("TFRoFormerForSequenceClassification"),ymr=o(" (RoFormer model)"),wmr=l(),$T=a("li"),$_e=a("strong"),Amr=o("tapas"),Lmr=o(" \u2014 "),$G=a("a"),Bmr=o("TFTapasForSequenceClassification"),xmr=o(" (TAPAS model)"),kmr=l(),IT=a("li"),I_e=a("strong"),Rmr=o("transfo-xl"),Smr=o(" \u2014 "),IG=a("a"),Pmr=o("TFTransfoXLForSequenceClassification"),$mr=o(" (Transformer-XL model)"),Imr=l(),jT=a("li"),j_e=a("strong"),jmr=o("xlm"),Nmr=o(" \u2014 "),jG=a("a"),Dmr=o("TFXLMForSequenceClassification"),qmr=o(" (XLM model)"),Omr=l(),NT=a("li"),N_e=a("strong"),Gmr=o("xlm-roberta"),Xmr=o(" \u2014 "),NG=a("a"),Vmr=o("TFXLMRobertaForSequenceClassification"),zmr=o(" (XLM-RoBERTa model)"),Wmr=l(),DT=a("li"),D_e=a("strong"),Qmr=o("xlnet"),Hmr=o(" \u2014 "),DG=a("a"),Umr=o("TFXLNetForSequenceClassification"),Jmr=o(" (XLNet model)"),Ymr=l(),q_e=a("p"),Kmr=o("Examples:"),Zmr=l(),f(kA.$$.fragment),tRe=l(),Pc=a("h2"),qT=a("a"),O_e=a("span"),f(RA.$$.fragment),egr=l(),G_e=a("span"),ogr=o("TFAutoModelForMultipleChoice"),aRe=l(),wr=a("div"),f(SA.$$.fragment),rgr=l(),$c=a("p"),tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),X_e=a("code"),agr=o("from_pretrained()"),ngr=o("class method or the "),V_e=a("code"),sgr=o("from_config()"),lgr=o(`class
method.`),igr=l(),PA=a("p"),dgr=o("This class cannot be instantiated directly using "),z_e=a("code"),cgr=o("__init__()"),fgr=o(" (throws an error)."),mgr=l(),Tt=a("div"),f($A.$$.fragment),ggr=l(),W_e=a("p"),hgr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pgr=l(),Ic=a("p"),_gr=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),ugr=o("not"),bgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=a("code"),vgr=o("from_pretrained()"),Tgr=o("to load the model weights."),Fgr=l(),U_e=a("p"),Cgr=o("Examples:"),Mgr=l(),f(IA.$$.fragment),Egr=l(),Fo=a("div"),f(jA.$$.fragment),ygr=l(),J_e=a("p"),wgr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Agr=l(),Mn=a("p"),Lgr=o("The model class to instantiate is selected based on the "),Y_e=a("code"),Bgr=o("model_type"),xgr=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),kgr=o("pretrained_model_name_or_path"),Rgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),Sgr=o("pretrained_model_name_or_path"),Pgr=o(":"),$gr=l(),ae=a("ul"),OT=a("li"),eue=a("strong"),Igr=o("albert"),jgr=o(" \u2014 "),qG=a("a"),Ngr=o("TFAlbertForMultipleChoice"),Dgr=o(" (ALBERT model)"),qgr=l(),GT=a("li"),oue=a("strong"),Ogr=o("bert"),Ggr=o(" \u2014 "),OG=a("a"),Xgr=o("TFBertForMultipleChoice"),Vgr=o(" (BERT model)"),zgr=l(),XT=a("li"),rue=a("strong"),Wgr=o("camembert"),Qgr=o(" \u2014 "),GG=a("a"),Hgr=o("TFCamembertForMultipleChoice"),Ugr=o(" (CamemBERT model)"),Jgr=l(),VT=a("li"),tue=a("strong"),Ygr=o("convbert"),Kgr=o(" \u2014 "),XG=a("a"),Zgr=o("TFConvBertForMultipleChoice"),ehr=o(" (ConvBERT model)"),ohr=l(),zT=a("li"),aue=a("strong"),rhr=o("distilbert"),thr=o(" \u2014 "),VG=a("a"),ahr=o("TFDistilBertForMultipleChoice"),nhr=o(" (DistilBERT model)"),shr=l(),WT=a("li"),nue=a("strong"),lhr=o("electra"),ihr=o(" \u2014 "),zG=a("a"),dhr=o("TFElectraForMultipleChoice"),chr=o(" (ELECTRA model)"),fhr=l(),QT=a("li"),sue=a("strong"),mhr=o("flaubert"),ghr=o(" \u2014 "),WG=a("a"),hhr=o("TFFlaubertForMultipleChoice"),phr=o(" (FlauBERT model)"),_hr=l(),HT=a("li"),lue=a("strong"),uhr=o("funnel"),bhr=o(" \u2014 "),QG=a("a"),vhr=o("TFFunnelForMultipleChoice"),Thr=o(" (Funnel Transformer model)"),Fhr=l(),UT=a("li"),iue=a("strong"),Chr=o("longformer"),Mhr=o(" \u2014 "),HG=a("a"),Ehr=o("TFLongformerForMultipleChoice"),yhr=o(" (Longformer model)"),whr=l(),JT=a("li"),due=a("strong"),Ahr=o("mobilebert"),Lhr=o(" \u2014 "),UG=a("a"),Bhr=o("TFMobileBertForMultipleChoice"),xhr=o(" (MobileBERT model)"),khr=l(),YT=a("li"),cue=a("strong"),Rhr=o("mpnet"),Shr=o(" \u2014 "),JG=a("a"),Phr=o("TFMPNetForMultipleChoice"),$hr=o(" (MPNet model)"),Ihr=l(),KT=a("li"),fue=a("strong"),jhr=o("rembert"),Nhr=o(" \u2014 "),YG=a("a"),Dhr=o("TFRemBertForMultipleChoice"),qhr=o(" (RemBERT model)"),Ohr=l(),ZT=a("li"),mue=a("strong"),Ghr=o("roberta"),Xhr=o(" \u2014 "),KG=a("a"),Vhr=o("TFRobertaForMultipleChoice"),zhr=o(" (RoBERTa model)"),Whr=l(),eF=a("li"),gue=a("strong"),Qhr=o("roformer"),Hhr=o(" \u2014 "),ZG=a("a"),Uhr=o("TFRoFormerForMultipleChoice"),Jhr=o(" (RoFormer model)"),Yhr=l(),oF=a("li"),hue=a("strong"),Khr=o("xlm"),Zhr=o(" \u2014 "),eX=a("a"),epr=o("TFXLMForMultipleChoice"),opr=o(" (XLM model)"),rpr=l(),rF=a("li"),pue=a("strong"),tpr=o("xlm-roberta"),apr=o(" \u2014 "),oX=a("a"),npr=o("TFXLMRobertaForMultipleChoice"),spr=o(" (XLM-RoBERTa model)"),lpr=l(),tF=a("li"),_ue=a("strong"),ipr=o("xlnet"),dpr=o(" \u2014 "),rX=a("a"),cpr=o("TFXLNetForMultipleChoice"),fpr=o(" (XLNet model)"),mpr=l(),uue=a("p"),gpr=o("Examples:"),hpr=l(),f(NA.$$.fragment),nRe=l(),jc=a("h2"),aF=a("a"),bue=a("span"),f(DA.$$.fragment),ppr=l(),vue=a("span"),_pr=o("TFAutoModelForTableQuestionAnswering"),sRe=l(),Ar=a("div"),f(qA.$$.fragment),upr=l(),Nc=a("p"),bpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tue=a("code"),vpr=o("from_pretrained()"),Tpr=o("class method or the "),Fue=a("code"),Fpr=o("from_config()"),Cpr=o(`class
method.`),Mpr=l(),OA=a("p"),Epr=o("This class cannot be instantiated directly using "),Cue=a("code"),ypr=o("__init__()"),wpr=o(" (throws an error)."),Apr=l(),Ft=a("div"),f(GA.$$.fragment),Lpr=l(),Mue=a("p"),Bpr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xpr=l(),Dc=a("p"),kpr=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),Rpr=o("not"),Spr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yue=a("code"),Ppr=o("from_pretrained()"),$pr=o("to load the model weights."),Ipr=l(),wue=a("p"),jpr=o("Examples:"),Npr=l(),f(XA.$$.fragment),Dpr=l(),Co=a("div"),f(VA.$$.fragment),qpr=l(),Aue=a("p"),Opr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Gpr=l(),En=a("p"),Xpr=o("The model class to instantiate is selected based on the "),Lue=a("code"),Vpr=o("model_type"),zpr=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Wpr=o("pretrained_model_name_or_path"),Qpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(":"),Jpr=l(),kue=a("ul"),nF=a("li"),Rue=a("strong"),Ypr=o("tapas"),Kpr=o(" \u2014 "),tX=a("a"),Zpr=o("TFTapasForQuestionAnswering"),e_r=o(" (TAPAS model)"),o_r=l(),Sue=a("p"),r_r=o("Examples:"),t_r=l(),f(zA.$$.fragment),lRe=l(),qc=a("h2"),sF=a("a"),Pue=a("span"),f(WA.$$.fragment),a_r=l(),$ue=a("span"),n_r=o("TFAutoModelForTokenClassification"),iRe=l(),Lr=a("div"),f(QA.$$.fragment),s_r=l(),Oc=a("p"),l_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Iue=a("code"),i_r=o("from_pretrained()"),d_r=o("class method or the "),jue=a("code"),c_r=o("from_config()"),f_r=o(`class
method.`),m_r=l(),HA=a("p"),g_r=o("This class cannot be instantiated directly using "),Nue=a("code"),h_r=o("__init__()"),p_r=o(" (throws an error)."),__r=l(),Ct=a("div"),f(UA.$$.fragment),u_r=l(),Due=a("p"),b_r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),v_r=l(),Gc=a("p"),T_r=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),F_r=o("not"),C_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oue=a("code"),M_r=o("from_pretrained()"),E_r=o("to load the model weights."),y_r=l(),Gue=a("p"),w_r=o("Examples:"),A_r=l(),f(JA.$$.fragment),L_r=l(),Mo=a("div"),f(YA.$$.fragment),B_r=l(),Xue=a("p"),x_r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k_r=l(),yn=a("p"),R_r=o("The model class to instantiate is selected based on the "),Vue=a("code"),S_r=o("model_type"),P_r=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),$_r=o("pretrained_model_name_or_path"),I_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),j_r=o("pretrained_model_name_or_path"),N_r=o(":"),D_r=l(),K=a("ul"),lF=a("li"),Que=a("strong"),q_r=o("albert"),O_r=o(" \u2014 "),aX=a("a"),G_r=o("TFAlbertForTokenClassification"),X_r=o(" (ALBERT model)"),V_r=l(),iF=a("li"),Hue=a("strong"),z_r=o("bert"),W_r=o(" \u2014 "),nX=a("a"),Q_r=o("TFBertForTokenClassification"),H_r=o(" (BERT model)"),U_r=l(),dF=a("li"),Uue=a("strong"),J_r=o("camembert"),Y_r=o(" \u2014 "),sX=a("a"),K_r=o("TFCamembertForTokenClassification"),Z_r=o(" (CamemBERT model)"),eur=l(),cF=a("li"),Jue=a("strong"),our=o("convbert"),rur=o(" \u2014 "),lX=a("a"),tur=o("TFConvBertForTokenClassification"),aur=o(" (ConvBERT model)"),nur=l(),fF=a("li"),Yue=a("strong"),sur=o("deberta"),lur=o(" \u2014 "),iX=a("a"),iur=o("TFDebertaForTokenClassification"),dur=o(" (DeBERTa model)"),cur=l(),mF=a("li"),Kue=a("strong"),fur=o("deberta-v2"),mur=o(" \u2014 "),dX=a("a"),gur=o("TFDebertaV2ForTokenClassification"),hur=o(" (DeBERTa-v2 model)"),pur=l(),gF=a("li"),Zue=a("strong"),_ur=o("distilbert"),uur=o(" \u2014 "),cX=a("a"),bur=o("TFDistilBertForTokenClassification"),vur=o(" (DistilBERT model)"),Tur=l(),hF=a("li"),e4e=a("strong"),Fur=o("electra"),Cur=o(" \u2014 "),fX=a("a"),Mur=o("TFElectraForTokenClassification"),Eur=o(" (ELECTRA model)"),yur=l(),pF=a("li"),o4e=a("strong"),wur=o("flaubert"),Aur=o(" \u2014 "),mX=a("a"),Lur=o("TFFlaubertForTokenClassification"),Bur=o(" (FlauBERT model)"),xur=l(),_F=a("li"),r4e=a("strong"),kur=o("funnel"),Rur=o(" \u2014 "),gX=a("a"),Sur=o("TFFunnelForTokenClassification"),Pur=o(" (Funnel Transformer model)"),$ur=l(),uF=a("li"),t4e=a("strong"),Iur=o("layoutlm"),jur=o(" \u2014 "),hX=a("a"),Nur=o("TFLayoutLMForTokenClassification"),Dur=o(" (LayoutLM model)"),qur=l(),bF=a("li"),a4e=a("strong"),Our=o("longformer"),Gur=o(" \u2014 "),pX=a("a"),Xur=o("TFLongformerForTokenClassification"),Vur=o(" (Longformer model)"),zur=l(),vF=a("li"),n4e=a("strong"),Wur=o("mobilebert"),Qur=o(" \u2014 "),_X=a("a"),Hur=o("TFMobileBertForTokenClassification"),Uur=o(" (MobileBERT model)"),Jur=l(),TF=a("li"),s4e=a("strong"),Yur=o("mpnet"),Kur=o(" \u2014 "),uX=a("a"),Zur=o("TFMPNetForTokenClassification"),e4r=o(" (MPNet model)"),o4r=l(),FF=a("li"),l4e=a("strong"),r4r=o("rembert"),t4r=o(" \u2014 "),bX=a("a"),a4r=o("TFRemBertForTokenClassification"),n4r=o(" (RemBERT model)"),s4r=l(),CF=a("li"),i4e=a("strong"),l4r=o("roberta"),i4r=o(" \u2014 "),vX=a("a"),d4r=o("TFRobertaForTokenClassification"),c4r=o(" (RoBERTa model)"),f4r=l(),MF=a("li"),d4e=a("strong"),m4r=o("roformer"),g4r=o(" \u2014 "),TX=a("a"),h4r=o("TFRoFormerForTokenClassification"),p4r=o(" (RoFormer model)"),_4r=l(),EF=a("li"),c4e=a("strong"),u4r=o("xlm"),b4r=o(" \u2014 "),FX=a("a"),v4r=o("TFXLMForTokenClassification"),T4r=o(" (XLM model)"),F4r=l(),yF=a("li"),f4e=a("strong"),C4r=o("xlm-roberta"),M4r=o(" \u2014 "),CX=a("a"),E4r=o("TFXLMRobertaForTokenClassification"),y4r=o(" (XLM-RoBERTa model)"),w4r=l(),wF=a("li"),m4e=a("strong"),A4r=o("xlnet"),L4r=o(" \u2014 "),MX=a("a"),B4r=o("TFXLNetForTokenClassification"),x4r=o(" (XLNet model)"),k4r=l(),g4e=a("p"),R4r=o("Examples:"),S4r=l(),f(KA.$$.fragment),dRe=l(),Xc=a("h2"),AF=a("a"),h4e=a("span"),f(ZA.$$.fragment),P4r=l(),p4e=a("span"),$4r=o("TFAutoModelForQuestionAnswering"),cRe=l(),Br=a("div"),f(eL.$$.fragment),I4r=l(),Vc=a("p"),j4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_4e=a("code"),N4r=o("from_pretrained()"),D4r=o("class method or the "),u4e=a("code"),q4r=o("from_config()"),O4r=o(`class
method.`),G4r=l(),oL=a("p"),X4r=o("This class cannot be instantiated directly using "),b4e=a("code"),V4r=o("__init__()"),z4r=o(" (throws an error)."),W4r=l(),Mt=a("div"),f(rL.$$.fragment),Q4r=l(),v4e=a("p"),H4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),U4r=l(),zc=a("p"),J4r=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),Y4r=o("not"),K4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),F4e=a("code"),Z4r=o("from_pretrained()"),e1r=o("to load the model weights."),o1r=l(),C4e=a("p"),r1r=o("Examples:"),t1r=l(),f(tL.$$.fragment),a1r=l(),Eo=a("div"),f(aL.$$.fragment),n1r=l(),M4e=a("p"),s1r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l1r=l(),wn=a("p"),i1r=o("The model class to instantiate is selected based on the "),E4e=a("code"),d1r=o("model_type"),c1r=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),f1r=o("pretrained_model_name_or_path"),m1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),g1r=o("pretrained_model_name_or_path"),h1r=o(":"),p1r=l(),Z=a("ul"),LF=a("li"),A4e=a("strong"),_1r=o("albert"),u1r=o(" \u2014 "),EX=a("a"),b1r=o("TFAlbertForQuestionAnswering"),v1r=o(" (ALBERT model)"),T1r=l(),BF=a("li"),L4e=a("strong"),F1r=o("bert"),C1r=o(" \u2014 "),yX=a("a"),M1r=o("TFBertForQuestionAnswering"),E1r=o(" (BERT model)"),y1r=l(),xF=a("li"),B4e=a("strong"),w1r=o("camembert"),A1r=o(" \u2014 "),wX=a("a"),L1r=o("TFCamembertForQuestionAnswering"),B1r=o(" (CamemBERT model)"),x1r=l(),kF=a("li"),x4e=a("strong"),k1r=o("convbert"),R1r=o(" \u2014 "),AX=a("a"),S1r=o("TFConvBertForQuestionAnswering"),P1r=o(" (ConvBERT model)"),$1r=l(),RF=a("li"),k4e=a("strong"),I1r=o("deberta"),j1r=o(" \u2014 "),LX=a("a"),N1r=o("TFDebertaForQuestionAnswering"),D1r=o(" (DeBERTa model)"),q1r=l(),SF=a("li"),R4e=a("strong"),O1r=o("deberta-v2"),G1r=o(" \u2014 "),BX=a("a"),X1r=o("TFDebertaV2ForQuestionAnswering"),V1r=o(" (DeBERTa-v2 model)"),z1r=l(),PF=a("li"),S4e=a("strong"),W1r=o("distilbert"),Q1r=o(" \u2014 "),xX=a("a"),H1r=o("TFDistilBertForQuestionAnswering"),U1r=o(" (DistilBERT model)"),J1r=l(),$F=a("li"),P4e=a("strong"),Y1r=o("electra"),K1r=o(" \u2014 "),kX=a("a"),Z1r=o("TFElectraForQuestionAnswering"),ebr=o(" (ELECTRA model)"),obr=l(),IF=a("li"),$4e=a("strong"),rbr=o("flaubert"),tbr=o(" \u2014 "),RX=a("a"),abr=o("TFFlaubertForQuestionAnsweringSimple"),nbr=o(" (FlauBERT model)"),sbr=l(),jF=a("li"),I4e=a("strong"),lbr=o("funnel"),ibr=o(" \u2014 "),SX=a("a"),dbr=o("TFFunnelForQuestionAnswering"),cbr=o(" (Funnel Transformer model)"),fbr=l(),NF=a("li"),j4e=a("strong"),mbr=o("longformer"),gbr=o(" \u2014 "),PX=a("a"),hbr=o("TFLongformerForQuestionAnswering"),pbr=o(" (Longformer model)"),_br=l(),DF=a("li"),N4e=a("strong"),ubr=o("mobilebert"),bbr=o(" \u2014 "),$X=a("a"),vbr=o("TFMobileBertForQuestionAnswering"),Tbr=o(" (MobileBERT model)"),Fbr=l(),qF=a("li"),D4e=a("strong"),Cbr=o("mpnet"),Mbr=o(" \u2014 "),IX=a("a"),Ebr=o("TFMPNetForQuestionAnswering"),ybr=o(" (MPNet model)"),wbr=l(),OF=a("li"),q4e=a("strong"),Abr=o("rembert"),Lbr=o(" \u2014 "),jX=a("a"),Bbr=o("TFRemBertForQuestionAnswering"),xbr=o(" (RemBERT model)"),kbr=l(),GF=a("li"),O4e=a("strong"),Rbr=o("roberta"),Sbr=o(" \u2014 "),NX=a("a"),Pbr=o("TFRobertaForQuestionAnswering"),$br=o(" (RoBERTa model)"),Ibr=l(),XF=a("li"),G4e=a("strong"),jbr=o("roformer"),Nbr=o(" \u2014 "),DX=a("a"),Dbr=o("TFRoFormerForQuestionAnswering"),qbr=o(" (RoFormer model)"),Obr=l(),VF=a("li"),X4e=a("strong"),Gbr=o("xlm"),Xbr=o(" \u2014 "),qX=a("a"),Vbr=o("TFXLMForQuestionAnsweringSimple"),zbr=o(" (XLM model)"),Wbr=l(),zF=a("li"),V4e=a("strong"),Qbr=o("xlm-roberta"),Hbr=o(" \u2014 "),OX=a("a"),Ubr=o("TFXLMRobertaForQuestionAnswering"),Jbr=o(" (XLM-RoBERTa model)"),Ybr=l(),WF=a("li"),z4e=a("strong"),Kbr=o("xlnet"),Zbr=o(" \u2014 "),GX=a("a"),e2r=o("TFXLNetForQuestionAnsweringSimple"),o2r=o(" (XLNet model)"),r2r=l(),W4e=a("p"),t2r=o("Examples:"),a2r=l(),f(nL.$$.fragment),fRe=l(),Wc=a("h2"),QF=a("a"),Q4e=a("span"),f(sL.$$.fragment),n2r=l(),H4e=a("span"),s2r=o("TFAutoModelForVision2Seq"),mRe=l(),xr=a("div"),f(lL.$$.fragment),l2r=l(),Qc=a("p"),i2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),U4e=a("code"),d2r=o("from_pretrained()"),c2r=o("class method or the "),J4e=a("code"),f2r=o("from_config()"),m2r=o(`class
method.`),g2r=l(),iL=a("p"),h2r=o("This class cannot be instantiated directly using "),Y4e=a("code"),p2r=o("__init__()"),_2r=o(" (throws an error)."),u2r=l(),Et=a("div"),f(dL.$$.fragment),b2r=l(),K4e=a("p"),v2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T2r=l(),Hc=a("p"),F2r=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),C2r=o("not"),M2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e1e=a("code"),E2r=o("from_pretrained()"),y2r=o("to load the model weights."),w2r=l(),o1e=a("p"),A2r=o("Examples:"),L2r=l(),f(cL.$$.fragment),B2r=l(),yo=a("div"),f(fL.$$.fragment),x2r=l(),r1e=a("p"),k2r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),R2r=l(),An=a("p"),S2r=o("The model class to instantiate is selected based on the "),t1e=a("code"),P2r=o("model_type"),$2r=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),I2r=o("pretrained_model_name_or_path"),j2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),N2r=o("pretrained_model_name_or_path"),D2r=o(":"),q2r=l(),s1e=a("ul"),HF=a("li"),l1e=a("strong"),O2r=o("vision-encoder-decoder"),G2r=o(" \u2014 "),XX=a("a"),X2r=o("TFVisionEncoderDecoderModel"),V2r=o(" (Vision Encoder decoder model)"),z2r=l(),i1e=a("p"),W2r=o("Examples:"),Q2r=l(),f(mL.$$.fragment),gRe=l(),Uc=a("h2"),UF=a("a"),d1e=a("span"),f(gL.$$.fragment),H2r=l(),c1e=a("span"),U2r=o("TFAutoModelForSpeechSeq2Seq"),hRe=l(),kr=a("div"),f(hL.$$.fragment),J2r=l(),Jc=a("p"),Y2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),f1e=a("code"),K2r=o("from_pretrained()"),Z2r=o("class method or the "),m1e=a("code"),evr=o("from_config()"),ovr=o(`class
method.`),rvr=l(),pL=a("p"),tvr=o("This class cannot be instantiated directly using "),g1e=a("code"),avr=o("__init__()"),nvr=o(" (throws an error)."),svr=l(),yt=a("div"),f(_L.$$.fragment),lvr=l(),h1e=a("p"),ivr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dvr=l(),Yc=a("p"),cvr=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),fvr=o("not"),mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_1e=a("code"),gvr=o("from_pretrained()"),hvr=o("to load the model weights."),pvr=l(),u1e=a("p"),_vr=o("Examples:"),uvr=l(),f(uL.$$.fragment),bvr=l(),wo=a("div"),f(bL.$$.fragment),vvr=l(),b1e=a("p"),Tvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fvr=l(),Ln=a("p"),Cvr=o("The model class to instantiate is selected based on the "),v1e=a("code"),Mvr=o("model_type"),Evr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),yvr=o("pretrained_model_name_or_path"),wvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),Avr=o("pretrained_model_name_or_path"),Lvr=o(":"),Bvr=l(),C1e=a("ul"),JF=a("li"),M1e=a("strong"),xvr=o("speech_to_text"),kvr=o(" \u2014 "),VX=a("a"),Rvr=o("TFSpeech2TextForConditionalGeneration"),Svr=o(" (Speech2Text model)"),Pvr=l(),E1e=a("p"),$vr=o("Examples:"),Ivr=l(),f(vL.$$.fragment),pRe=l(),Kc=a("h2"),YF=a("a"),y1e=a("span"),f(TL.$$.fragment),jvr=l(),w1e=a("span"),Nvr=o("FlaxAutoModel"),_Re=l(),Rr=a("div"),f(FL.$$.fragment),Dvr=l(),Zc=a("p"),qvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),A1e=a("code"),Ovr=o("from_pretrained()"),Gvr=o("class method or the "),L1e=a("code"),Xvr=o("from_config()"),Vvr=o(`class
method.`),zvr=l(),CL=a("p"),Wvr=o("This class cannot be instantiated directly using "),B1e=a("code"),Qvr=o("__init__()"),Hvr=o(" (throws an error)."),Uvr=l(),wt=a("div"),f(ML.$$.fragment),Jvr=l(),x1e=a("p"),Yvr=o("Instantiates one of the base model classes of the library from a configuration."),Kvr=l(),ef=a("p"),Zvr=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),e6r=o("not"),o6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R1e=a("code"),r6r=o("from_pretrained()"),t6r=o("to load the model weights."),a6r=l(),S1e=a("p"),n6r=o("Examples:"),s6r=l(),f(EL.$$.fragment),l6r=l(),Ao=a("div"),f(yL.$$.fragment),i6r=l(),P1e=a("p"),d6r=o("Instantiate one of the base model classes of the library from a pretrained model."),c6r=l(),Bn=a("p"),f6r=o("The model class to instantiate is selected based on the "),$1e=a("code"),m6r=o("model_type"),g6r=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(":"),b6r=l(),z=a("ul"),KF=a("li"),N1e=a("strong"),v6r=o("albert"),T6r=o(" \u2014 "),zX=a("a"),F6r=o("FlaxAlbertModel"),C6r=o(" (ALBERT model)"),M6r=l(),ZF=a("li"),D1e=a("strong"),E6r=o("bart"),y6r=o(" \u2014 "),WX=a("a"),w6r=o("FlaxBartModel"),A6r=o(" (BART model)"),L6r=l(),eC=a("li"),q1e=a("strong"),B6r=o("beit"),x6r=o(" \u2014 "),QX=a("a"),k6r=o("FlaxBeitModel"),R6r=o(" (BEiT model)"),S6r=l(),oC=a("li"),O1e=a("strong"),P6r=o("bert"),$6r=o(" \u2014 "),HX=a("a"),I6r=o("FlaxBertModel"),j6r=o(" (BERT model)"),N6r=l(),rC=a("li"),G1e=a("strong"),D6r=o("big_bird"),q6r=o(" \u2014 "),UX=a("a"),O6r=o("FlaxBigBirdModel"),G6r=o(" (BigBird model)"),X6r=l(),tC=a("li"),X1e=a("strong"),V6r=o("blenderbot"),z6r=o(" \u2014 "),JX=a("a"),W6r=o("FlaxBlenderbotModel"),Q6r=o(" (Blenderbot model)"),H6r=l(),aC=a("li"),V1e=a("strong"),U6r=o("blenderbot-small"),J6r=o(" \u2014 "),YX=a("a"),Y6r=o("FlaxBlenderbotSmallModel"),K6r=o(" (BlenderbotSmall model)"),Z6r=l(),nC=a("li"),z1e=a("strong"),e0r=o("clip"),o0r=o(" \u2014 "),KX=a("a"),r0r=o("FlaxCLIPModel"),t0r=o(" (CLIP model)"),a0r=l(),sC=a("li"),W1e=a("strong"),n0r=o("distilbert"),s0r=o(" \u2014 "),ZX=a("a"),l0r=o("FlaxDistilBertModel"),i0r=o(" (DistilBERT model)"),d0r=l(),lC=a("li"),Q1e=a("strong"),c0r=o("electra"),f0r=o(" \u2014 "),eV=a("a"),m0r=o("FlaxElectraModel"),g0r=o(" (ELECTRA model)"),h0r=l(),iC=a("li"),H1e=a("strong"),p0r=o("gpt2"),_0r=o(" \u2014 "),oV=a("a"),u0r=o("FlaxGPT2Model"),b0r=o(" (OpenAI GPT-2 model)"),v0r=l(),dC=a("li"),U1e=a("strong"),T0r=o("gpt_neo"),F0r=o(" \u2014 "),rV=a("a"),C0r=o("FlaxGPTNeoModel"),M0r=o(" (GPT Neo model)"),E0r=l(),cC=a("li"),J1e=a("strong"),y0r=o("gptj"),w0r=o(" \u2014 "),tV=a("a"),A0r=o("FlaxGPTJModel"),L0r=o(" (GPT-J model)"),B0r=l(),fC=a("li"),Y1e=a("strong"),x0r=o("marian"),k0r=o(" \u2014 "),aV=a("a"),R0r=o("FlaxMarianModel"),S0r=o(" (Marian model)"),P0r=l(),mC=a("li"),K1e=a("strong"),$0r=o("mbart"),I0r=o(" \u2014 "),nV=a("a"),j0r=o("FlaxMBartModel"),N0r=o(" (mBART model)"),D0r=l(),gC=a("li"),Z1e=a("strong"),q0r=o("mt5"),O0r=o(" \u2014 "),sV=a("a"),G0r=o("FlaxMT5Model"),X0r=o(" (mT5 model)"),V0r=l(),hC=a("li"),ebe=a("strong"),z0r=o("pegasus"),W0r=o(" \u2014 "),lV=a("a"),Q0r=o("FlaxPegasusModel"),H0r=o(" (Pegasus model)"),U0r=l(),pC=a("li"),obe=a("strong"),J0r=o("roberta"),Y0r=o(" \u2014 "),iV=a("a"),K0r=o("FlaxRobertaModel"),Z0r=o(" (RoBERTa model)"),eTr=l(),_C=a("li"),rbe=a("strong"),oTr=o("roformer"),rTr=o(" \u2014 "),dV=a("a"),tTr=o("FlaxRoFormerModel"),aTr=o(" (RoFormer model)"),nTr=l(),uC=a("li"),tbe=a("strong"),sTr=o("t5"),lTr=o(" \u2014 "),cV=a("a"),iTr=o("FlaxT5Model"),dTr=o(" (T5 model)"),cTr=l(),bC=a("li"),abe=a("strong"),fTr=o("vision-text-dual-encoder"),mTr=o(" \u2014 "),fV=a("a"),gTr=o("FlaxVisionTextDualEncoderModel"),hTr=o(" (VisionTextDualEncoder model)"),pTr=l(),vC=a("li"),nbe=a("strong"),_Tr=o("vit"),uTr=o(" \u2014 "),mV=a("a"),bTr=o("FlaxViTModel"),vTr=o(" (ViT model)"),TTr=l(),TC=a("li"),sbe=a("strong"),FTr=o("wav2vec2"),CTr=o(" \u2014 "),gV=a("a"),MTr=o("FlaxWav2Vec2Model"),ETr=o(" (Wav2Vec2 model)"),yTr=l(),FC=a("li"),lbe=a("strong"),wTr=o("xglm"),ATr=o(" \u2014 "),hV=a("a"),LTr=o("FlaxXGLMModel"),BTr=o(" (XGLM model)"),xTr=l(),CC=a("li"),ibe=a("strong"),kTr=o("xlm-roberta"),RTr=o(" \u2014 "),pV=a("a"),STr=o("FlaxXLMRobertaModel"),PTr=o(" (XLM-RoBERTa model)"),$Tr=l(),dbe=a("p"),ITr=o("Examples:"),jTr=l(),f(wL.$$.fragment),uRe=l(),of=a("h2"),MC=a("a"),cbe=a("span"),f(AL.$$.fragment),NTr=l(),fbe=a("span"),DTr=o("FlaxAutoModelForCausalLM"),bRe=l(),Sr=a("div"),f(LL.$$.fragment),qTr=l(),rf=a("p"),OTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mbe=a("code"),GTr=o("from_pretrained()"),XTr=o("class method or the "),gbe=a("code"),VTr=o("from_config()"),zTr=o(`class
method.`),WTr=l(),BL=a("p"),QTr=o("This class cannot be instantiated directly using "),hbe=a("code"),HTr=o("__init__()"),UTr=o(" (throws an error)."),JTr=l(),At=a("div"),f(xL.$$.fragment),YTr=l(),pbe=a("p"),KTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZTr=l(),tf=a("p"),eFr=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),oFr=o("not"),rFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ube=a("code"),tFr=o("from_pretrained()"),aFr=o("to load the model weights."),nFr=l(),bbe=a("p"),sFr=o("Examples:"),lFr=l(),f(kL.$$.fragment),iFr=l(),Lo=a("div"),f(RL.$$.fragment),dFr=l(),vbe=a("p"),cFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fFr=l(),xn=a("p"),mFr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),gFr=o("model_type"),hFr=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),pFr=o("pretrained_model_name_or_path"),_Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),uFr=o("pretrained_model_name_or_path"),bFr=o(":"),vFr=l(),ca=a("ul"),EC=a("li"),Mbe=a("strong"),TFr=o("bart"),FFr=o(" \u2014 "),_V=a("a"),CFr=o("FlaxBartForCausalLM"),MFr=o(" (BART model)"),EFr=l(),yC=a("li"),Ebe=a("strong"),yFr=o("gpt2"),wFr=o(" \u2014 "),uV=a("a"),AFr=o("FlaxGPT2LMHeadModel"),LFr=o(" (OpenAI GPT-2 model)"),BFr=l(),wC=a("li"),ybe=a("strong"),xFr=o("gpt_neo"),kFr=o(" \u2014 "),bV=a("a"),RFr=o("FlaxGPTNeoForCausalLM"),SFr=o(" (GPT Neo model)"),PFr=l(),AC=a("li"),wbe=a("strong"),$Fr=o("gptj"),IFr=o(" \u2014 "),vV=a("a"),jFr=o("FlaxGPTJForCausalLM"),NFr=o(" (GPT-J model)"),DFr=l(),LC=a("li"),Abe=a("strong"),qFr=o("xglm"),OFr=o(" \u2014 "),TV=a("a"),GFr=o("FlaxXGLMForCausalLM"),XFr=o(" (XGLM model)"),VFr=l(),Lbe=a("p"),zFr=o("Examples:"),WFr=l(),f(SL.$$.fragment),vRe=l(),af=a("h2"),BC=a("a"),Bbe=a("span"),f(PL.$$.fragment),QFr=l(),xbe=a("span"),HFr=o("FlaxAutoModelForPreTraining"),TRe=l(),Pr=a("div"),f($L.$$.fragment),UFr=l(),nf=a("p"),JFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kbe=a("code"),YFr=o("from_pretrained()"),KFr=o("class method or the "),Rbe=a("code"),ZFr=o("from_config()"),eCr=o(`class
method.`),oCr=l(),IL=a("p"),rCr=o("This class cannot be instantiated directly using "),Sbe=a("code"),tCr=o("__init__()"),aCr=o(" (throws an error)."),nCr=l(),Lt=a("div"),f(jL.$$.fragment),sCr=l(),Pbe=a("p"),lCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iCr=l(),sf=a("p"),dCr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),cCr=o("not"),fCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ibe=a("code"),mCr=o("from_pretrained()"),gCr=o("to load the model weights."),hCr=l(),jbe=a("p"),pCr=o("Examples:"),_Cr=l(),f(NL.$$.fragment),uCr=l(),Bo=a("div"),f(DL.$$.fragment),bCr=l(),Nbe=a("p"),vCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TCr=l(),kn=a("p"),FCr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),CCr=o("model_type"),MCr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),ECr=o("pretrained_model_name_or_path"),yCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),wCr=o("pretrained_model_name_or_path"),ACr=o(":"),LCr=l(),ce=a("ul"),xC=a("li"),Gbe=a("strong"),BCr=o("albert"),xCr=o(" \u2014 "),FV=a("a"),kCr=o("FlaxAlbertForPreTraining"),RCr=o(" (ALBERT model)"),SCr=l(),kC=a("li"),Xbe=a("strong"),PCr=o("bart"),$Cr=o(" \u2014 "),CV=a("a"),ICr=o("FlaxBartForConditionalGeneration"),jCr=o(" (BART model)"),NCr=l(),RC=a("li"),Vbe=a("strong"),DCr=o("bert"),qCr=o(" \u2014 "),MV=a("a"),OCr=o("FlaxBertForPreTraining"),GCr=o(" (BERT model)"),XCr=l(),SC=a("li"),zbe=a("strong"),VCr=o("big_bird"),zCr=o(" \u2014 "),EV=a("a"),WCr=o("FlaxBigBirdForPreTraining"),QCr=o(" (BigBird model)"),HCr=l(),PC=a("li"),Wbe=a("strong"),UCr=o("electra"),JCr=o(" \u2014 "),yV=a("a"),YCr=o("FlaxElectraForPreTraining"),KCr=o(" (ELECTRA model)"),ZCr=l(),$C=a("li"),Qbe=a("strong"),eMr=o("mbart"),oMr=o(" \u2014 "),wV=a("a"),rMr=o("FlaxMBartForConditionalGeneration"),tMr=o(" (mBART model)"),aMr=l(),IC=a("li"),Hbe=a("strong"),nMr=o("mt5"),sMr=o(" \u2014 "),AV=a("a"),lMr=o("FlaxMT5ForConditionalGeneration"),iMr=o(" (mT5 model)"),dMr=l(),jC=a("li"),Ube=a("strong"),cMr=o("roberta"),fMr=o(" \u2014 "),LV=a("a"),mMr=o("FlaxRobertaForMaskedLM"),gMr=o(" (RoBERTa model)"),hMr=l(),NC=a("li"),Jbe=a("strong"),pMr=o("roformer"),_Mr=o(" \u2014 "),BV=a("a"),uMr=o("FlaxRoFormerForMaskedLM"),bMr=o(" (RoFormer model)"),vMr=l(),DC=a("li"),Ybe=a("strong"),TMr=o("t5"),FMr=o(" \u2014 "),xV=a("a"),CMr=o("FlaxT5ForConditionalGeneration"),MMr=o(" (T5 model)"),EMr=l(),qC=a("li"),Kbe=a("strong"),yMr=o("wav2vec2"),wMr=o(" \u2014 "),kV=a("a"),AMr=o("FlaxWav2Vec2ForPreTraining"),LMr=o(" (Wav2Vec2 model)"),BMr=l(),OC=a("li"),Zbe=a("strong"),xMr=o("xlm-roberta"),kMr=o(" \u2014 "),RV=a("a"),RMr=o("FlaxXLMRobertaForMaskedLM"),SMr=o(" (XLM-RoBERTa model)"),PMr=l(),e2e=a("p"),$Mr=o("Examples:"),IMr=l(),f(qL.$$.fragment),FRe=l(),lf=a("h2"),GC=a("a"),o2e=a("span"),f(OL.$$.fragment),jMr=l(),r2e=a("span"),NMr=o("FlaxAutoModelForMaskedLM"),CRe=l(),$r=a("div"),f(GL.$$.fragment),DMr=l(),df=a("p"),qMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),t2e=a("code"),OMr=o("from_pretrained()"),GMr=o("class method or the "),a2e=a("code"),XMr=o("from_config()"),VMr=o(`class
method.`),zMr=l(),XL=a("p"),WMr=o("This class cannot be instantiated directly using "),n2e=a("code"),QMr=o("__init__()"),HMr=o(" (throws an error)."),UMr=l(),Bt=a("div"),f(VL.$$.fragment),JMr=l(),s2e=a("p"),YMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KMr=l(),cf=a("p"),ZMr=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),eEr=o("not"),oEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i2e=a("code"),rEr=o("from_pretrained()"),tEr=o("to load the model weights."),aEr=l(),d2e=a("p"),nEr=o("Examples:"),sEr=l(),f(zL.$$.fragment),lEr=l(),xo=a("div"),f(WL.$$.fragment),iEr=l(),c2e=a("p"),dEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cEr=l(),Rn=a("p"),fEr=o("The model class to instantiate is selected based on the "),f2e=a("code"),mEr=o("model_type"),gEr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),hEr=o("pretrained_model_name_or_path"),pEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),_Er=o("pretrained_model_name_or_path"),uEr=o(":"),bEr=l(),be=a("ul"),XC=a("li"),h2e=a("strong"),vEr=o("albert"),TEr=o(" \u2014 "),SV=a("a"),FEr=o("FlaxAlbertForMaskedLM"),CEr=o(" (ALBERT model)"),MEr=l(),VC=a("li"),p2e=a("strong"),EEr=o("bart"),yEr=o(" \u2014 "),PV=a("a"),wEr=o("FlaxBartForConditionalGeneration"),AEr=o(" (BART model)"),LEr=l(),zC=a("li"),_2e=a("strong"),BEr=o("bert"),xEr=o(" \u2014 "),$V=a("a"),kEr=o("FlaxBertForMaskedLM"),REr=o(" (BERT model)"),SEr=l(),WC=a("li"),u2e=a("strong"),PEr=o("big_bird"),$Er=o(" \u2014 "),IV=a("a"),IEr=o("FlaxBigBirdForMaskedLM"),jEr=o(" (BigBird model)"),NEr=l(),QC=a("li"),b2e=a("strong"),DEr=o("distilbert"),qEr=o(" \u2014 "),jV=a("a"),OEr=o("FlaxDistilBertForMaskedLM"),GEr=o(" (DistilBERT model)"),XEr=l(),HC=a("li"),v2e=a("strong"),VEr=o("electra"),zEr=o(" \u2014 "),NV=a("a"),WEr=o("FlaxElectraForMaskedLM"),QEr=o(" (ELECTRA model)"),HEr=l(),UC=a("li"),T2e=a("strong"),UEr=o("mbart"),JEr=o(" \u2014 "),DV=a("a"),YEr=o("FlaxMBartForConditionalGeneration"),KEr=o(" (mBART model)"),ZEr=l(),JC=a("li"),F2e=a("strong"),e3r=o("roberta"),o3r=o(" \u2014 "),qV=a("a"),r3r=o("FlaxRobertaForMaskedLM"),t3r=o(" (RoBERTa model)"),a3r=l(),YC=a("li"),C2e=a("strong"),n3r=o("roformer"),s3r=o(" \u2014 "),OV=a("a"),l3r=o("FlaxRoFormerForMaskedLM"),i3r=o(" (RoFormer model)"),d3r=l(),KC=a("li"),M2e=a("strong"),c3r=o("xlm-roberta"),f3r=o(" \u2014 "),GV=a("a"),m3r=o("FlaxXLMRobertaForMaskedLM"),g3r=o(" (XLM-RoBERTa model)"),h3r=l(),E2e=a("p"),p3r=o("Examples:"),_3r=l(),f(QL.$$.fragment),MRe=l(),ff=a("h2"),ZC=a("a"),y2e=a("span"),f(HL.$$.fragment),u3r=l(),w2e=a("span"),b3r=o("FlaxAutoModelForSeq2SeqLM"),ERe=l(),Ir=a("div"),f(UL.$$.fragment),v3r=l(),mf=a("p"),T3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),A2e=a("code"),F3r=o("from_pretrained()"),C3r=o("class method or the "),L2e=a("code"),M3r=o("from_config()"),E3r=o(`class
method.`),y3r=l(),JL=a("p"),w3r=o("This class cannot be instantiated directly using "),B2e=a("code"),A3r=o("__init__()"),L3r=o(" (throws an error)."),B3r=l(),xt=a("div"),f(YL.$$.fragment),x3r=l(),x2e=a("p"),k3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R3r=l(),gf=a("p"),S3r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),P3r=o("not"),$3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R2e=a("code"),I3r=o("from_pretrained()"),j3r=o("to load the model weights."),N3r=l(),S2e=a("p"),D3r=o("Examples:"),q3r=l(),f(KL.$$.fragment),O3r=l(),ko=a("div"),f(ZL.$$.fragment),G3r=l(),P2e=a("p"),X3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V3r=l(),Sn=a("p"),z3r=o("The model class to instantiate is selected based on the "),$2e=a("code"),W3r=o("model_type"),Q3r=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),H3r=o("pretrained_model_name_or_path"),U3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),J3r=o("pretrained_model_name_or_path"),Y3r=o(":"),K3r=l(),Ee=a("ul"),eM=a("li"),N2e=a("strong"),Z3r=o("bart"),e5r=o(" \u2014 "),XV=a("a"),o5r=o("FlaxBartForConditionalGeneration"),r5r=o(" (BART model)"),t5r=l(),oM=a("li"),D2e=a("strong"),a5r=o("blenderbot"),n5r=o(" \u2014 "),VV=a("a"),s5r=o("FlaxBlenderbotForConditionalGeneration"),l5r=o(" (Blenderbot model)"),i5r=l(),rM=a("li"),q2e=a("strong"),d5r=o("blenderbot-small"),c5r=o(" \u2014 "),zV=a("a"),f5r=o("FlaxBlenderbotSmallForConditionalGeneration"),m5r=o(" (BlenderbotSmall model)"),g5r=l(),tM=a("li"),O2e=a("strong"),h5r=o("encoder-decoder"),p5r=o(" \u2014 "),WV=a("a"),_5r=o("FlaxEncoderDecoderModel"),u5r=o(" (Encoder decoder model)"),b5r=l(),aM=a("li"),G2e=a("strong"),v5r=o("marian"),T5r=o(" \u2014 "),QV=a("a"),F5r=o("FlaxMarianMTModel"),C5r=o(" (Marian model)"),M5r=l(),nM=a("li"),X2e=a("strong"),E5r=o("mbart"),y5r=o(" \u2014 "),HV=a("a"),w5r=o("FlaxMBartForConditionalGeneration"),A5r=o(" (mBART model)"),L5r=l(),sM=a("li"),V2e=a("strong"),B5r=o("mt5"),x5r=o(" \u2014 "),UV=a("a"),k5r=o("FlaxMT5ForConditionalGeneration"),R5r=o(" (mT5 model)"),S5r=l(),lM=a("li"),z2e=a("strong"),P5r=o("pegasus"),$5r=o(" \u2014 "),JV=a("a"),I5r=o("FlaxPegasusForConditionalGeneration"),j5r=o(" (Pegasus model)"),N5r=l(),iM=a("li"),W2e=a("strong"),D5r=o("t5"),q5r=o(" \u2014 "),YV=a("a"),O5r=o("FlaxT5ForConditionalGeneration"),G5r=o(" (T5 model)"),X5r=l(),Q2e=a("p"),V5r=o("Examples:"),z5r=l(),f(e7.$$.fragment),yRe=l(),hf=a("h2"),dM=a("a"),H2e=a("span"),f(o7.$$.fragment),W5r=l(),U2e=a("span"),Q5r=o("FlaxAutoModelForSequenceClassification"),wRe=l(),jr=a("div"),f(r7.$$.fragment),H5r=l(),pf=a("p"),U5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),J2e=a("code"),J5r=o("from_pretrained()"),Y5r=o("class method or the "),Y2e=a("code"),K5r=o("from_config()"),Z5r=o(`class
method.`),eyr=l(),t7=a("p"),oyr=o("This class cannot be instantiated directly using "),K2e=a("code"),ryr=o("__init__()"),tyr=o(" (throws an error)."),ayr=l(),kt=a("div"),f(a7.$$.fragment),nyr=l(),Z2e=a("p"),syr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lyr=l(),_f=a("p"),iyr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),dyr=o("not"),cyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ove=a("code"),fyr=o("from_pretrained()"),myr=o("to load the model weights."),gyr=l(),rve=a("p"),hyr=o("Examples:"),pyr=l(),f(n7.$$.fragment),_yr=l(),Ro=a("div"),f(s7.$$.fragment),uyr=l(),tve=a("p"),byr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vyr=l(),Pn=a("p"),Tyr=o("The model class to instantiate is selected based on the "),ave=a("code"),Fyr=o("model_type"),Cyr=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),yyr=o("pretrained_model_name_or_path"),wyr=o(":"),Ayr=l(),ve=a("ul"),cM=a("li"),lve=a("strong"),Lyr=o("albert"),Byr=o(" \u2014 "),KV=a("a"),xyr=o("FlaxAlbertForSequenceClassification"),kyr=o(" (ALBERT model)"),Ryr=l(),fM=a("li"),ive=a("strong"),Syr=o("bart"),Pyr=o(" \u2014 "),ZV=a("a"),$yr=o("FlaxBartForSequenceClassification"),Iyr=o(" (BART model)"),jyr=l(),mM=a("li"),dve=a("strong"),Nyr=o("bert"),Dyr=o(" \u2014 "),ez=a("a"),qyr=o("FlaxBertForSequenceClassification"),Oyr=o(" (BERT model)"),Gyr=l(),gM=a("li"),cve=a("strong"),Xyr=o("big_bird"),Vyr=o(" \u2014 "),oz=a("a"),zyr=o("FlaxBigBirdForSequenceClassification"),Wyr=o(" (BigBird model)"),Qyr=l(),hM=a("li"),fve=a("strong"),Hyr=o("distilbert"),Uyr=o(" \u2014 "),rz=a("a"),Jyr=o("FlaxDistilBertForSequenceClassification"),Yyr=o(" (DistilBERT model)"),Kyr=l(),pM=a("li"),mve=a("strong"),Zyr=o("electra"),ewr=o(" \u2014 "),tz=a("a"),owr=o("FlaxElectraForSequenceClassification"),rwr=o(" (ELECTRA model)"),twr=l(),_M=a("li"),gve=a("strong"),awr=o("mbart"),nwr=o(" \u2014 "),az=a("a"),swr=o("FlaxMBartForSequenceClassification"),lwr=o(" (mBART model)"),iwr=l(),uM=a("li"),hve=a("strong"),dwr=o("roberta"),cwr=o(" \u2014 "),nz=a("a"),fwr=o("FlaxRobertaForSequenceClassification"),mwr=o(" (RoBERTa model)"),gwr=l(),bM=a("li"),pve=a("strong"),hwr=o("roformer"),pwr=o(" \u2014 "),sz=a("a"),_wr=o("FlaxRoFormerForSequenceClassification"),uwr=o(" (RoFormer model)"),bwr=l(),vM=a("li"),_ve=a("strong"),vwr=o("xlm-roberta"),Twr=o(" \u2014 "),lz=a("a"),Fwr=o("FlaxXLMRobertaForSequenceClassification"),Cwr=o(" (XLM-RoBERTa model)"),Mwr=l(),uve=a("p"),Ewr=o("Examples:"),ywr=l(),f(l7.$$.fragment),ARe=l(),uf=a("h2"),TM=a("a"),bve=a("span"),f(i7.$$.fragment),wwr=l(),vve=a("span"),Awr=o("FlaxAutoModelForQuestionAnswering"),LRe=l(),Nr=a("div"),f(d7.$$.fragment),Lwr=l(),bf=a("p"),Bwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tve=a("code"),xwr=o("from_pretrained()"),kwr=o("class method or the "),Fve=a("code"),Rwr=o("from_config()"),Swr=o(`class
method.`),Pwr=l(),c7=a("p"),$wr=o("This class cannot be instantiated directly using "),Cve=a("code"),Iwr=o("__init__()"),jwr=o(" (throws an error)."),Nwr=l(),Rt=a("div"),f(f7.$$.fragment),Dwr=l(),Mve=a("p"),qwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Owr=l(),vf=a("p"),Gwr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),Xwr=o("not"),Vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yve=a("code"),zwr=o("from_pretrained()"),Wwr=o("to load the model weights."),Qwr=l(),wve=a("p"),Hwr=o("Examples:"),Uwr=l(),f(m7.$$.fragment),Jwr=l(),So=a("div"),f(g7.$$.fragment),Ywr=l(),Ave=a("p"),Kwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zwr=l(),$n=a("p"),eAr=o("The model class to instantiate is selected based on the "),Lve=a("code"),oAr=o("model_type"),rAr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(":"),lAr=l(),Te=a("ul"),FM=a("li"),kve=a("strong"),iAr=o("albert"),dAr=o(" \u2014 "),iz=a("a"),cAr=o("FlaxAlbertForQuestionAnswering"),fAr=o(" (ALBERT model)"),mAr=l(),CM=a("li"),Rve=a("strong"),gAr=o("bart"),hAr=o(" \u2014 "),dz=a("a"),pAr=o("FlaxBartForQuestionAnswering"),_Ar=o(" (BART model)"),uAr=l(),MM=a("li"),Sve=a("strong"),bAr=o("bert"),vAr=o(" \u2014 "),cz=a("a"),TAr=o("FlaxBertForQuestionAnswering"),FAr=o(" (BERT model)"),CAr=l(),EM=a("li"),Pve=a("strong"),MAr=o("big_bird"),EAr=o(" \u2014 "),fz=a("a"),yAr=o("FlaxBigBirdForQuestionAnswering"),wAr=o(" (BigBird model)"),AAr=l(),yM=a("li"),$ve=a("strong"),LAr=o("distilbert"),BAr=o(" \u2014 "),mz=a("a"),xAr=o("FlaxDistilBertForQuestionAnswering"),kAr=o(" (DistilBERT model)"),RAr=l(),wM=a("li"),Ive=a("strong"),SAr=o("electra"),PAr=o(" \u2014 "),gz=a("a"),$Ar=o("FlaxElectraForQuestionAnswering"),IAr=o(" (ELECTRA model)"),jAr=l(),AM=a("li"),jve=a("strong"),NAr=o("mbart"),DAr=o(" \u2014 "),hz=a("a"),qAr=o("FlaxMBartForQuestionAnswering"),OAr=o(" (mBART model)"),GAr=l(),LM=a("li"),Nve=a("strong"),XAr=o("roberta"),VAr=o(" \u2014 "),pz=a("a"),zAr=o("FlaxRobertaForQuestionAnswering"),WAr=o(" (RoBERTa model)"),QAr=l(),BM=a("li"),Dve=a("strong"),HAr=o("roformer"),UAr=o(" \u2014 "),_z=a("a"),JAr=o("FlaxRoFormerForQuestionAnswering"),YAr=o(" (RoFormer model)"),KAr=l(),xM=a("li"),qve=a("strong"),ZAr=o("xlm-roberta"),eLr=o(" \u2014 "),uz=a("a"),oLr=o("FlaxXLMRobertaForQuestionAnswering"),rLr=o(" (XLM-RoBERTa model)"),tLr=l(),Ove=a("p"),aLr=o("Examples:"),nLr=l(),f(h7.$$.fragment),BRe=l(),Tf=a("h2"),kM=a("a"),Gve=a("span"),f(p7.$$.fragment),sLr=l(),Xve=a("span"),lLr=o("FlaxAutoModelForTokenClassification"),xRe=l(),Dr=a("div"),f(_7.$$.fragment),iLr=l(),Ff=a("p"),dLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vve=a("code"),cLr=o("from_pretrained()"),fLr=o("class method or the "),zve=a("code"),mLr=o("from_config()"),gLr=o(`class
method.`),hLr=l(),u7=a("p"),pLr=o("This class cannot be instantiated directly using "),Wve=a("code"),_Lr=o("__init__()"),uLr=o(" (throws an error)."),bLr=l(),St=a("div"),f(b7.$$.fragment),vLr=l(),Qve=a("p"),TLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FLr=l(),Cf=a("p"),CLr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),MLr=o("not"),ELr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uve=a("code"),yLr=o("from_pretrained()"),wLr=o("to load the model weights."),ALr=l(),Jve=a("p"),LLr=o("Examples:"),BLr=l(),f(v7.$$.fragment),xLr=l(),Po=a("div"),f(T7.$$.fragment),kLr=l(),Yve=a("p"),RLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SLr=l(),In=a("p"),PLr=o("The model class to instantiate is selected based on the "),Kve=a("code"),$Lr=o("model_type"),ILr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),jLr=o("pretrained_model_name_or_path"),NLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=a("code"),DLr=o("pretrained_model_name_or_path"),qLr=o(":"),OLr=l(),Se=a("ul"),RM=a("li"),o6e=a("strong"),GLr=o("albert"),XLr=o(" \u2014 "),bz=a("a"),VLr=o("FlaxAlbertForTokenClassification"),zLr=o(" (ALBERT model)"),WLr=l(),SM=a("li"),r6e=a("strong"),QLr=o("bert"),HLr=o(" \u2014 "),vz=a("a"),ULr=o("FlaxBertForTokenClassification"),JLr=o(" (BERT model)"),YLr=l(),PM=a("li"),t6e=a("strong"),KLr=o("big_bird"),ZLr=o(" \u2014 "),Tz=a("a"),e7r=o("FlaxBigBirdForTokenClassification"),o7r=o(" (BigBird model)"),r7r=l(),$M=a("li"),a6e=a("strong"),t7r=o("distilbert"),a7r=o(" \u2014 "),Fz=a("a"),n7r=o("FlaxDistilBertForTokenClassification"),s7r=o(" (DistilBERT model)"),l7r=l(),IM=a("li"),n6e=a("strong"),i7r=o("electra"),d7r=o(" \u2014 "),Cz=a("a"),c7r=o("FlaxElectraForTokenClassification"),f7r=o(" (ELECTRA model)"),m7r=l(),jM=a("li"),s6e=a("strong"),g7r=o("roberta"),h7r=o(" \u2014 "),Mz=a("a"),p7r=o("FlaxRobertaForTokenClassification"),_7r=o(" (RoBERTa model)"),u7r=l(),NM=a("li"),l6e=a("strong"),b7r=o("roformer"),v7r=o(" \u2014 "),Ez=a("a"),T7r=o("FlaxRoFormerForTokenClassification"),F7r=o(" (RoFormer model)"),C7r=l(),DM=a("li"),i6e=a("strong"),M7r=o("xlm-roberta"),E7r=o(" \u2014 "),yz=a("a"),y7r=o("FlaxXLMRobertaForTokenClassification"),w7r=o(" (XLM-RoBERTa model)"),A7r=l(),d6e=a("p"),L7r=o("Examples:"),B7r=l(),f(F7.$$.fragment),kRe=l(),Mf=a("h2"),qM=a("a"),c6e=a("span"),f(C7.$$.fragment),x7r=l(),f6e=a("span"),k7r=o("FlaxAutoModelForMultipleChoice"),RRe=l(),qr=a("div"),f(M7.$$.fragment),R7r=l(),Ef=a("p"),S7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),m6e=a("code"),P7r=o("from_pretrained()"),$7r=o("class method or the "),g6e=a("code"),I7r=o("from_config()"),j7r=o(`class
method.`),N7r=l(),E7=a("p"),D7r=o("This class cannot be instantiated directly using "),h6e=a("code"),q7r=o("__init__()"),O7r=o(" (throws an error)."),G7r=l(),Pt=a("div"),f(y7.$$.fragment),X7r=l(),p6e=a("p"),V7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z7r=l(),yf=a("p"),W7r=o(`Note:
Loading a model from its configuration file does `),_6e=a("strong"),Q7r=o("not"),H7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u6e=a("code"),U7r=o("from_pretrained()"),J7r=o("to load the model weights."),Y7r=l(),b6e=a("p"),K7r=o("Examples:"),Z7r=l(),f(w7.$$.fragment),e8r=l(),$o=a("div"),f(A7.$$.fragment),o8r=l(),v6e=a("p"),r8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),t8r=l(),jn=a("p"),a8r=o("The model class to instantiate is selected based on the "),T6e=a("code"),n8r=o("model_type"),s8r=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),l8r=o("pretrained_model_name_or_path"),i8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),d8r=o("pretrained_model_name_or_path"),c8r=o(":"),f8r=l(),Pe=a("ul"),OM=a("li"),M6e=a("strong"),m8r=o("albert"),g8r=o(" \u2014 "),wz=a("a"),h8r=o("FlaxAlbertForMultipleChoice"),p8r=o(" (ALBERT model)"),_8r=l(),GM=a("li"),E6e=a("strong"),u8r=o("bert"),b8r=o(" \u2014 "),Az=a("a"),v8r=o("FlaxBertForMultipleChoice"),T8r=o(" (BERT model)"),F8r=l(),XM=a("li"),y6e=a("strong"),C8r=o("big_bird"),M8r=o(" \u2014 "),Lz=a("a"),E8r=o("FlaxBigBirdForMultipleChoice"),y8r=o(" (BigBird model)"),w8r=l(),VM=a("li"),w6e=a("strong"),A8r=o("distilbert"),L8r=o(" \u2014 "),Bz=a("a"),B8r=o("FlaxDistilBertForMultipleChoice"),x8r=o(" (DistilBERT model)"),k8r=l(),zM=a("li"),A6e=a("strong"),R8r=o("electra"),S8r=o(" \u2014 "),xz=a("a"),P8r=o("FlaxElectraForMultipleChoice"),$8r=o(" (ELECTRA model)"),I8r=l(),WM=a("li"),L6e=a("strong"),j8r=o("roberta"),N8r=o(" \u2014 "),kz=a("a"),D8r=o("FlaxRobertaForMultipleChoice"),q8r=o(" (RoBERTa model)"),O8r=l(),QM=a("li"),B6e=a("strong"),G8r=o("roformer"),X8r=o(" \u2014 "),Rz=a("a"),V8r=o("FlaxRoFormerForMultipleChoice"),z8r=o(" (RoFormer model)"),W8r=l(),HM=a("li"),x6e=a("strong"),Q8r=o("xlm-roberta"),H8r=o(" \u2014 "),Sz=a("a"),U8r=o("FlaxXLMRobertaForMultipleChoice"),J8r=o(" (XLM-RoBERTa model)"),Y8r=l(),k6e=a("p"),K8r=o("Examples:"),Z8r=l(),f(L7.$$.fragment),SRe=l(),wf=a("h2"),UM=a("a"),R6e=a("span"),f(B7.$$.fragment),e9r=l(),S6e=a("span"),o9r=o("FlaxAutoModelForNextSentencePrediction"),PRe=l(),Or=a("div"),f(x7.$$.fragment),r9r=l(),Af=a("p"),t9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),P6e=a("code"),a9r=o("from_pretrained()"),n9r=o("class method or the "),$6e=a("code"),s9r=o("from_config()"),l9r=o(`class
method.`),i9r=l(),k7=a("p"),d9r=o("This class cannot be instantiated directly using "),I6e=a("code"),c9r=o("__init__()"),f9r=o(" (throws an error)."),m9r=l(),$t=a("div"),f(R7.$$.fragment),g9r=l(),j6e=a("p"),h9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),p9r=l(),Lf=a("p"),_9r=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),u9r=o("not"),b9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),D6e=a("code"),v9r=o("from_pretrained()"),T9r=o("to load the model weights."),F9r=l(),q6e=a("p"),C9r=o("Examples:"),M9r=l(),f(S7.$$.fragment),E9r=l(),Io=a("div"),f(P7.$$.fragment),y9r=l(),O6e=a("p"),w9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A9r=l(),Nn=a("p"),L9r=o("The model class to instantiate is selected based on the "),G6e=a("code"),B9r=o("model_type"),x9r=o(` property of the config object (either
passed as an argument or loaded from `),X6e=a("code"),k9r=o("pretrained_model_name_or_path"),R9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=a("code"),S9r=o("pretrained_model_name_or_path"),P9r=o(":"),$9r=l(),z6e=a("ul"),JM=a("li"),W6e=a("strong"),I9r=o("bert"),j9r=o(" \u2014 "),Pz=a("a"),N9r=o("FlaxBertForNextSentencePrediction"),D9r=o(" (BERT model)"),q9r=l(),Q6e=a("p"),O9r=o("Examples:"),G9r=l(),f($7.$$.fragment),$Re=l(),Bf=a("h2"),YM=a("a"),H6e=a("span"),f(I7.$$.fragment),X9r=l(),U6e=a("span"),V9r=o("FlaxAutoModelForImageClassification"),IRe=l(),Gr=a("div"),f(j7.$$.fragment),z9r=l(),xf=a("p"),W9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),J6e=a("code"),Q9r=o("from_pretrained()"),H9r=o("class method or the "),Y6e=a("code"),U9r=o("from_config()"),J9r=o(`class
method.`),Y9r=l(),N7=a("p"),K9r=o("This class cannot be instantiated directly using "),K6e=a("code"),Z9r=o("__init__()"),eBr=o(" (throws an error)."),oBr=l(),It=a("div"),f(D7.$$.fragment),rBr=l(),Z6e=a("p"),tBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aBr=l(),kf=a("p"),nBr=o(`Note:
Loading a model from its configuration file does `),e0e=a("strong"),sBr=o("not"),lBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o0e=a("code"),iBr=o("from_pretrained()"),dBr=o("to load the model weights."),cBr=l(),r0e=a("p"),fBr=o("Examples:"),mBr=l(),f(q7.$$.fragment),gBr=l(),jo=a("div"),f(O7.$$.fragment),hBr=l(),t0e=a("p"),pBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Br=l(),Dn=a("p"),uBr=o("The model class to instantiate is selected based on the "),a0e=a("code"),bBr=o("model_type"),vBr=o(` property of the config object (either
passed as an argument or loaded from `),n0e=a("code"),TBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=a("code"),CBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),G7=a("ul"),KM=a("li"),l0e=a("strong"),yBr=o("beit"),wBr=o(" \u2014 "),$z=a("a"),ABr=o("FlaxBeitForImageClassification"),LBr=o(" (BEiT model)"),BBr=l(),ZM=a("li"),i0e=a("strong"),xBr=o("vit"),kBr=o(" \u2014 "),Iz=a("a"),RBr=o("FlaxViTForImageClassification"),SBr=o(" (ViT model)"),PBr=l(),d0e=a("p"),$Br=o("Examples:"),IBr=l(),f(X7.$$.fragment),jRe=l(),Rf=a("h2"),eE=a("a"),c0e=a("span"),f(V7.$$.fragment),jBr=l(),f0e=a("span"),NBr=o("FlaxAutoModelForVision2Seq"),NRe=l(),Xr=a("div"),f(z7.$$.fragment),DBr=l(),Sf=a("p"),qBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),m0e=a("code"),OBr=o("from_pretrained()"),GBr=o("class method or the "),g0e=a("code"),XBr=o("from_config()"),VBr=o(`class
method.`),zBr=l(),W7=a("p"),WBr=o("This class cannot be instantiated directly using "),h0e=a("code"),QBr=o("__init__()"),HBr=o(" (throws an error)."),UBr=l(),jt=a("div"),f(Q7.$$.fragment),JBr=l(),p0e=a("p"),YBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KBr=l(),Pf=a("p"),ZBr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),exr=o("not"),oxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u0e=a("code"),rxr=o("from_pretrained()"),txr=o("to load the model weights."),axr=l(),b0e=a("p"),nxr=o("Examples:"),sxr=l(),f(H7.$$.fragment),lxr=l(),No=a("div"),f(U7.$$.fragment),ixr=l(),v0e=a("p"),dxr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cxr=l(),qn=a("p"),fxr=o("The model class to instantiate is selected based on the "),T0e=a("code"),mxr=o("model_type"),gxr=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),hxr=o("pretrained_model_name_or_path"),pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=a("code"),_xr=o("pretrained_model_name_or_path"),uxr=o(":"),bxr=l(),M0e=a("ul"),oE=a("li"),E0e=a("strong"),vxr=o("vision-encoder-decoder"),Txr=o(" \u2014 "),jz=a("a"),Fxr=o("FlaxVisionEncoderDecoderModel"),Cxr=o(" (Vision Encoder decoder model)"),Mxr=l(),y0e=a("p"),Exr=o("Examples:"),yxr=l(),f(J7.$$.fragment),this.h()},l(c){const u=bFt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(c),de=n(c,"H1",{class:!0});var Y7=s(de);pe=n(Y7,"A",{id:!0,class:!0,href:!0});var w0e=s(pe);io=n(w0e,"SPAN",{});var A0e=s(io);m(fe.$$.fragment,A0e),A0e.forEach(t),w0e.forEach(t),Me=i(Y7),Vo=n(Y7,"SPAN",{});var Axr=s(Vo);ji=r(Axr,"Auto Classes"),Axr.forEach(t),Y7.forEach(t),If=i(c),fa=n(c,"P",{});var qRe=s(fa);Ni=r(qRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(qRe,"CODE",{});var Lxr=s(Di);o3=r(Lxr,"from_pretrained()"),Lxr.forEach(t),jf=r(qRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qRe.forEach(t),Be=i(c),co=n(c,"P",{});var rE=s(co);qi=r(rE,"Instantiating one of "),On=n(rE,"A",{href:!0});var Bxr=s(On);r3=r(Bxr,"AutoConfig"),Bxr.forEach(t),Gn=r(rE,", "),Xn=n(rE,"A",{href:!0});var xxr=s(Xn);t3=r(xxr,"AutoModel"),xxr.forEach(t),Oi=r(rE,`, and
`),Vn=n(rE,"A",{href:!0});var kxr=s(Vn);a3=r(kxr,"AutoTokenizer"),kxr.forEach(t),Gi=r(rE," will directly create a class of the relevant architecture. For instance"),rE.forEach(t),Nf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var ORe=s(_e);H8=r(ORe,"will create a model that is an instance of "),Xi=n(ORe,"A",{href:!0});var Rxr=s(Xi);U8=r(Rxr,"BertModel"),Rxr.forEach(t),J8=r(ORe,"."),ORe.forEach(t),zo=i(c),Oa=n(c,"P",{});var GRe=s(Oa);Y8=r(GRe,"There is one class of "),Df=n(GRe,"CODE",{});var Sxr=s(Df);K8=r(Sxr,"AutoModel"),Sxr.forEach(t),KPe=r(GRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GRe.forEach(t),Nxe=i(c),Vi=n(c,"H2",{class:!0});var XRe=s(Vi);qf=n(XRe,"A",{id:!0,class:!0,href:!0});var Pxr=s(qf);xQ=n(Pxr,"SPAN",{});var $xr=s(xQ);m(n3.$$.fragment,$xr),$xr.forEach(t),Pxr.forEach(t),ZPe=i(XRe),kQ=n(XRe,"SPAN",{});var Ixr=s(kQ);e$e=r(Ixr,"Extending the Auto Classes"),Ixr.forEach(t),XRe.forEach(t),Dxe=i(c),zn=n(c,"P",{});var Nz=s(zn);o$e=r(Nz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),RQ=n(Nz,"CODE",{});var jxr=s(RQ);r$e=r(jxr,"NewModel"),jxr.forEach(t),t$e=r(Nz,", make sure you have a "),SQ=n(Nz,"CODE",{});var Nxr=s(SQ);a$e=r(Nxr,"NewModelConfig"),Nxr.forEach(t),n$e=r(Nz,` then you can add those to the auto
classes like this:`),Nz.forEach(t),qxe=i(c),m(s3.$$.fragment,c),Oxe=i(c),Z8=n(c,"P",{});var Dxr=s(Z8);s$e=r(Dxr,"You will then be able to use the auto classes like you would usually do!"),Dxr.forEach(t),Gxe=i(c),m(Of.$$.fragment,c),Xxe=i(c),zi=n(c,"H2",{class:!0});var VRe=s(zi);Gf=n(VRe,"A",{id:!0,class:!0,href:!0});var qxr=s(Gf);PQ=n(qxr,"SPAN",{});var Oxr=s(PQ);m(l3.$$.fragment,Oxr),Oxr.forEach(t),qxr.forEach(t),l$e=i(VRe),$Q=n(VRe,"SPAN",{});var Gxr=s($Q);i$e=r(Gxr,"AutoConfig"),Gxr.forEach(t),VRe.forEach(t),Vxe=i(c),Wo=n(c,"DIV",{class:!0});var Gs=s(Wo);m(i3.$$.fragment,Gs),d$e=i(Gs),d3=n(Gs,"P",{});var zRe=s(d3);c$e=r(zRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),e9=n(zRe,"A",{href:!0});var Xxr=s(e9);f$e=r(Xxr,"from_pretrained()"),Xxr.forEach(t),m$e=r(zRe," class method."),zRe.forEach(t),g$e=i(Gs),c3=n(Gs,"P",{});var WRe=s(c3);h$e=r(WRe,"This class cannot be instantiated directly using "),IQ=n(WRe,"CODE",{});var Vxr=s(IQ);p$e=r(Vxr,"__init__()"),Vxr.forEach(t),_$e=r(WRe," (throws an error)."),WRe.forEach(t),u$e=i(Gs),mo=n(Gs,"DIV",{class:!0});var ga=s(mo);m(f3.$$.fragment,ga),b$e=i(ga),jQ=n(ga,"P",{});var zxr=s(jQ);v$e=r(zxr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zxr.forEach(t),T$e=i(ga),Wi=n(ga,"P",{});var Dz=s(Wi);F$e=r(Dz,"The configuration class to instantiate is selected based on the "),NQ=n(Dz,"CODE",{});var Wxr=s(NQ);C$e=r(Wxr,"model_type"),Wxr.forEach(t),M$e=r(Dz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),DQ=n(Dz,"CODE",{});var Qxr=s(DQ);E$e=r(Qxr,"pretrained_model_name_or_path"),Qxr.forEach(t),y$e=r(Dz,":"),Dz.forEach(t),w$e=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var L0e=s(Xf);qQ=n(L0e,"STRONG",{});var Hxr=s(qQ);A$e=r(Hxr,"albert"),Hxr.forEach(t),L$e=r(L0e," \u2014 "),o9=n(L0e,"A",{href:!0});var Uxr=s(o9);B$e=r(Uxr,"AlbertConfig"),Uxr.forEach(t),x$e=r(L0e," (ALBERT model)"),L0e.forEach(t),k$e=i(T),Vf=n(T,"LI",{});var B0e=s(Vf);OQ=n(B0e,"STRONG",{});var Jxr=s(OQ);R$e=r(Jxr,"bart"),Jxr.forEach(t),S$e=r(B0e," \u2014 "),r9=n(B0e,"A",{href:!0});var Yxr=s(r9);P$e=r(Yxr,"BartConfig"),Yxr.forEach(t),$$e=r(B0e," (BART model)"),B0e.forEach(t),I$e=i(T),zf=n(T,"LI",{});var x0e=s(zf);GQ=n(x0e,"STRONG",{});var Kxr=s(GQ);j$e=r(Kxr,"beit"),Kxr.forEach(t),N$e=r(x0e," \u2014 "),t9=n(x0e,"A",{href:!0});var Zxr=s(t9);D$e=r(Zxr,"BeitConfig"),Zxr.forEach(t),q$e=r(x0e," (BEiT model)"),x0e.forEach(t),O$e=i(T),Wf=n(T,"LI",{});var k0e=s(Wf);XQ=n(k0e,"STRONG",{});var ekr=s(XQ);G$e=r(ekr,"bert"),ekr.forEach(t),X$e=r(k0e," \u2014 "),a9=n(k0e,"A",{href:!0});var okr=s(a9);V$e=r(okr,"BertConfig"),okr.forEach(t),z$e=r(k0e," (BERT model)"),k0e.forEach(t),W$e=i(T),Qf=n(T,"LI",{});var R0e=s(Qf);VQ=n(R0e,"STRONG",{});var rkr=s(VQ);Q$e=r(rkr,"bert-generation"),rkr.forEach(t),H$e=r(R0e," \u2014 "),n9=n(R0e,"A",{href:!0});var tkr=s(n9);U$e=r(tkr,"BertGenerationConfig"),tkr.forEach(t),J$e=r(R0e," (Bert Generation model)"),R0e.forEach(t),Y$e=i(T),Hf=n(T,"LI",{});var S0e=s(Hf);zQ=n(S0e,"STRONG",{});var akr=s(zQ);K$e=r(akr,"big_bird"),akr.forEach(t),Z$e=r(S0e," \u2014 "),s9=n(S0e,"A",{href:!0});var nkr=s(s9);eIe=r(nkr,"BigBirdConfig"),nkr.forEach(t),oIe=r(S0e," (BigBird model)"),S0e.forEach(t),rIe=i(T),Uf=n(T,"LI",{});var P0e=s(Uf);WQ=n(P0e,"STRONG",{});var skr=s(WQ);tIe=r(skr,"bigbird_pegasus"),skr.forEach(t),aIe=r(P0e," \u2014 "),l9=n(P0e,"A",{href:!0});var lkr=s(l9);nIe=r(lkr,"BigBirdPegasusConfig"),lkr.forEach(t),sIe=r(P0e," (BigBirdPegasus model)"),P0e.forEach(t),lIe=i(T),Jf=n(T,"LI",{});var $0e=s(Jf);QQ=n($0e,"STRONG",{});var ikr=s(QQ);iIe=r(ikr,"blenderbot"),ikr.forEach(t),dIe=r($0e," \u2014 "),i9=n($0e,"A",{href:!0});var dkr=s(i9);cIe=r(dkr,"BlenderbotConfig"),dkr.forEach(t),fIe=r($0e," (Blenderbot model)"),$0e.forEach(t),mIe=i(T),Yf=n(T,"LI",{});var I0e=s(Yf);HQ=n(I0e,"STRONG",{});var ckr=s(HQ);gIe=r(ckr,"blenderbot-small"),ckr.forEach(t),hIe=r(I0e," \u2014 "),d9=n(I0e,"A",{href:!0});var fkr=s(d9);pIe=r(fkr,"BlenderbotSmallConfig"),fkr.forEach(t),_Ie=r(I0e," (BlenderbotSmall model)"),I0e.forEach(t),uIe=i(T),Kf=n(T,"LI",{});var j0e=s(Kf);UQ=n(j0e,"STRONG",{});var mkr=s(UQ);bIe=r(mkr,"camembert"),mkr.forEach(t),vIe=r(j0e," \u2014 "),c9=n(j0e,"A",{href:!0});var gkr=s(c9);TIe=r(gkr,"CamembertConfig"),gkr.forEach(t),FIe=r(j0e," (CamemBERT model)"),j0e.forEach(t),CIe=i(T),Zf=n(T,"LI",{});var N0e=s(Zf);JQ=n(N0e,"STRONG",{});var hkr=s(JQ);MIe=r(hkr,"canine"),hkr.forEach(t),EIe=r(N0e," \u2014 "),f9=n(N0e,"A",{href:!0});var pkr=s(f9);yIe=r(pkr,"CanineConfig"),pkr.forEach(t),wIe=r(N0e," (Canine model)"),N0e.forEach(t),AIe=i(T),em=n(T,"LI",{});var D0e=s(em);YQ=n(D0e,"STRONG",{});var _kr=s(YQ);LIe=r(_kr,"clip"),_kr.forEach(t),BIe=r(D0e," \u2014 "),m9=n(D0e,"A",{href:!0});var ukr=s(m9);xIe=r(ukr,"CLIPConfig"),ukr.forEach(t),kIe=r(D0e," (CLIP model)"),D0e.forEach(t),RIe=i(T),om=n(T,"LI",{});var q0e=s(om);KQ=n(q0e,"STRONG",{});var bkr=s(KQ);SIe=r(bkr,"convbert"),bkr.forEach(t),PIe=r(q0e," \u2014 "),g9=n(q0e,"A",{href:!0});var vkr=s(g9);$Ie=r(vkr,"ConvBertConfig"),vkr.forEach(t),IIe=r(q0e," (ConvBERT model)"),q0e.forEach(t),jIe=i(T),rm=n(T,"LI",{});var O0e=s(rm);ZQ=n(O0e,"STRONG",{});var Tkr=s(ZQ);NIe=r(Tkr,"convnext"),Tkr.forEach(t),DIe=r(O0e," \u2014 "),h9=n(O0e,"A",{href:!0});var Fkr=s(h9);qIe=r(Fkr,"ConvNextConfig"),Fkr.forEach(t),OIe=r(O0e," (ConvNext model)"),O0e.forEach(t),GIe=i(T),tm=n(T,"LI",{});var G0e=s(tm);eH=n(G0e,"STRONG",{});var Ckr=s(eH);XIe=r(Ckr,"ctrl"),Ckr.forEach(t),VIe=r(G0e," \u2014 "),p9=n(G0e,"A",{href:!0});var Mkr=s(p9);zIe=r(Mkr,"CTRLConfig"),Mkr.forEach(t),WIe=r(G0e," (CTRL model)"),G0e.forEach(t),QIe=i(T),am=n(T,"LI",{});var X0e=s(am);oH=n(X0e,"STRONG",{});var Ekr=s(oH);HIe=r(Ekr,"data2vec-audio"),Ekr.forEach(t),UIe=r(X0e," \u2014 "),_9=n(X0e,"A",{href:!0});var ykr=s(_9);JIe=r(ykr,"Data2VecAudioConfig"),ykr.forEach(t),YIe=r(X0e," (Data2VecAudio model)"),X0e.forEach(t),KIe=i(T),nm=n(T,"LI",{});var V0e=s(nm);rH=n(V0e,"STRONG",{});var wkr=s(rH);ZIe=r(wkr,"data2vec-text"),wkr.forEach(t),eje=r(V0e," \u2014 "),u9=n(V0e,"A",{href:!0});var Akr=s(u9);oje=r(Akr,"Data2VecTextConfig"),Akr.forEach(t),rje=r(V0e," (Data2VecText model)"),V0e.forEach(t),tje=i(T),sm=n(T,"LI",{});var z0e=s(sm);tH=n(z0e,"STRONG",{});var Lkr=s(tH);aje=r(Lkr,"deberta"),Lkr.forEach(t),nje=r(z0e," \u2014 "),b9=n(z0e,"A",{href:!0});var Bkr=s(b9);sje=r(Bkr,"DebertaConfig"),Bkr.forEach(t),lje=r(z0e," (DeBERTa model)"),z0e.forEach(t),ije=i(T),lm=n(T,"LI",{});var W0e=s(lm);aH=n(W0e,"STRONG",{});var xkr=s(aH);dje=r(xkr,"deberta-v2"),xkr.forEach(t),cje=r(W0e," \u2014 "),v9=n(W0e,"A",{href:!0});var kkr=s(v9);fje=r(kkr,"DebertaV2Config"),kkr.forEach(t),mje=r(W0e," (DeBERTa-v2 model)"),W0e.forEach(t),gje=i(T),im=n(T,"LI",{});var Q0e=s(im);nH=n(Q0e,"STRONG",{});var Rkr=s(nH);hje=r(Rkr,"deit"),Rkr.forEach(t),pje=r(Q0e," \u2014 "),T9=n(Q0e,"A",{href:!0});var Skr=s(T9);_je=r(Skr,"DeiTConfig"),Skr.forEach(t),uje=r(Q0e," (DeiT model)"),Q0e.forEach(t),bje=i(T),dm=n(T,"LI",{});var H0e=s(dm);sH=n(H0e,"STRONG",{});var Pkr=s(sH);vje=r(Pkr,"detr"),Pkr.forEach(t),Tje=r(H0e," \u2014 "),F9=n(H0e,"A",{href:!0});var $kr=s(F9);Fje=r($kr,"DetrConfig"),$kr.forEach(t),Cje=r(H0e," (DETR model)"),H0e.forEach(t),Mje=i(T),cm=n(T,"LI",{});var U0e=s(cm);lH=n(U0e,"STRONG",{});var Ikr=s(lH);Eje=r(Ikr,"distilbert"),Ikr.forEach(t),yje=r(U0e," \u2014 "),C9=n(U0e,"A",{href:!0});var jkr=s(C9);wje=r(jkr,"DistilBertConfig"),jkr.forEach(t),Aje=r(U0e," (DistilBERT model)"),U0e.forEach(t),Lje=i(T),fm=n(T,"LI",{});var J0e=s(fm);iH=n(J0e,"STRONG",{});var Nkr=s(iH);Bje=r(Nkr,"dpr"),Nkr.forEach(t),xje=r(J0e," \u2014 "),M9=n(J0e,"A",{href:!0});var Dkr=s(M9);kje=r(Dkr,"DPRConfig"),Dkr.forEach(t),Rje=r(J0e," (DPR model)"),J0e.forEach(t),Sje=i(T),mm=n(T,"LI",{});var Y0e=s(mm);dH=n(Y0e,"STRONG",{});var qkr=s(dH);Pje=r(qkr,"electra"),qkr.forEach(t),$je=r(Y0e," \u2014 "),E9=n(Y0e,"A",{href:!0});var Okr=s(E9);Ije=r(Okr,"ElectraConfig"),Okr.forEach(t),jje=r(Y0e," (ELECTRA model)"),Y0e.forEach(t),Nje=i(T),gm=n(T,"LI",{});var K0e=s(gm);cH=n(K0e,"STRONG",{});var Gkr=s(cH);Dje=r(Gkr,"encoder-decoder"),Gkr.forEach(t),qje=r(K0e," \u2014 "),y9=n(K0e,"A",{href:!0});var Xkr=s(y9);Oje=r(Xkr,"EncoderDecoderConfig"),Xkr.forEach(t),Gje=r(K0e," (Encoder decoder model)"),K0e.forEach(t),Xje=i(T),hm=n(T,"LI",{});var Z0e=s(hm);fH=n(Z0e,"STRONG",{});var Vkr=s(fH);Vje=r(Vkr,"flaubert"),Vkr.forEach(t),zje=r(Z0e," \u2014 "),w9=n(Z0e,"A",{href:!0});var zkr=s(w9);Wje=r(zkr,"FlaubertConfig"),zkr.forEach(t),Qje=r(Z0e," (FlauBERT model)"),Z0e.forEach(t),Hje=i(T),pm=n(T,"LI",{});var eTe=s(pm);mH=n(eTe,"STRONG",{});var Wkr=s(mH);Uje=r(Wkr,"fnet"),Wkr.forEach(t),Jje=r(eTe," \u2014 "),A9=n(eTe,"A",{href:!0});var Qkr=s(A9);Yje=r(Qkr,"FNetConfig"),Qkr.forEach(t),Kje=r(eTe," (FNet model)"),eTe.forEach(t),Zje=i(T),_m=n(T,"LI",{});var oTe=s(_m);gH=n(oTe,"STRONG",{});var Hkr=s(gH);eNe=r(Hkr,"fsmt"),Hkr.forEach(t),oNe=r(oTe," \u2014 "),L9=n(oTe,"A",{href:!0});var Ukr=s(L9);rNe=r(Ukr,"FSMTConfig"),Ukr.forEach(t),tNe=r(oTe," (FairSeq Machine-Translation model)"),oTe.forEach(t),aNe=i(T),um=n(T,"LI",{});var rTe=s(um);hH=n(rTe,"STRONG",{});var Jkr=s(hH);nNe=r(Jkr,"funnel"),Jkr.forEach(t),sNe=r(rTe," \u2014 "),B9=n(rTe,"A",{href:!0});var Ykr=s(B9);lNe=r(Ykr,"FunnelConfig"),Ykr.forEach(t),iNe=r(rTe," (Funnel Transformer model)"),rTe.forEach(t),dNe=i(T),bm=n(T,"LI",{});var tTe=s(bm);pH=n(tTe,"STRONG",{});var Kkr=s(pH);cNe=r(Kkr,"gpt2"),Kkr.forEach(t),fNe=r(tTe," \u2014 "),x9=n(tTe,"A",{href:!0});var Zkr=s(x9);mNe=r(Zkr,"GPT2Config"),Zkr.forEach(t),gNe=r(tTe," (OpenAI GPT-2 model)"),tTe.forEach(t),hNe=i(T),vm=n(T,"LI",{});var aTe=s(vm);_H=n(aTe,"STRONG",{});var eRr=s(_H);pNe=r(eRr,"gpt_neo"),eRr.forEach(t),_Ne=r(aTe," \u2014 "),k9=n(aTe,"A",{href:!0});var oRr=s(k9);uNe=r(oRr,"GPTNeoConfig"),oRr.forEach(t),bNe=r(aTe," (GPT Neo model)"),aTe.forEach(t),vNe=i(T),Tm=n(T,"LI",{});var nTe=s(Tm);uH=n(nTe,"STRONG",{});var rRr=s(uH);TNe=r(rRr,"gptj"),rRr.forEach(t),FNe=r(nTe," \u2014 "),R9=n(nTe,"A",{href:!0});var tRr=s(R9);CNe=r(tRr,"GPTJConfig"),tRr.forEach(t),MNe=r(nTe," (GPT-J model)"),nTe.forEach(t),ENe=i(T),Fm=n(T,"LI",{});var sTe=s(Fm);bH=n(sTe,"STRONG",{});var aRr=s(bH);yNe=r(aRr,"hubert"),aRr.forEach(t),wNe=r(sTe," \u2014 "),S9=n(sTe,"A",{href:!0});var nRr=s(S9);ANe=r(nRr,"HubertConfig"),nRr.forEach(t),LNe=r(sTe," (Hubert model)"),sTe.forEach(t),BNe=i(T),Cm=n(T,"LI",{});var lTe=s(Cm);vH=n(lTe,"STRONG",{});var sRr=s(vH);xNe=r(sRr,"ibert"),sRr.forEach(t),kNe=r(lTe," \u2014 "),P9=n(lTe,"A",{href:!0});var lRr=s(P9);RNe=r(lRr,"IBertConfig"),lRr.forEach(t),SNe=r(lTe," (I-BERT model)"),lTe.forEach(t),PNe=i(T),Mm=n(T,"LI",{});var iTe=s(Mm);TH=n(iTe,"STRONG",{});var iRr=s(TH);$Ne=r(iRr,"imagegpt"),iRr.forEach(t),INe=r(iTe," \u2014 "),$9=n(iTe,"A",{href:!0});var dRr=s($9);jNe=r(dRr,"ImageGPTConfig"),dRr.forEach(t),NNe=r(iTe," (ImageGPT model)"),iTe.forEach(t),DNe=i(T),Em=n(T,"LI",{});var dTe=s(Em);FH=n(dTe,"STRONG",{});var cRr=s(FH);qNe=r(cRr,"layoutlm"),cRr.forEach(t),ONe=r(dTe," \u2014 "),I9=n(dTe,"A",{href:!0});var fRr=s(I9);GNe=r(fRr,"LayoutLMConfig"),fRr.forEach(t),XNe=r(dTe," (LayoutLM model)"),dTe.forEach(t),VNe=i(T),ym=n(T,"LI",{});var cTe=s(ym);CH=n(cTe,"STRONG",{});var mRr=s(CH);zNe=r(mRr,"layoutlmv2"),mRr.forEach(t),WNe=r(cTe," \u2014 "),j9=n(cTe,"A",{href:!0});var gRr=s(j9);QNe=r(gRr,"LayoutLMv2Config"),gRr.forEach(t),HNe=r(cTe," (LayoutLMv2 model)"),cTe.forEach(t),UNe=i(T),wm=n(T,"LI",{});var fTe=s(wm);MH=n(fTe,"STRONG",{});var hRr=s(MH);JNe=r(hRr,"led"),hRr.forEach(t),YNe=r(fTe," \u2014 "),N9=n(fTe,"A",{href:!0});var pRr=s(N9);KNe=r(pRr,"LEDConfig"),pRr.forEach(t),ZNe=r(fTe," (LED model)"),fTe.forEach(t),eDe=i(T),Am=n(T,"LI",{});var mTe=s(Am);EH=n(mTe,"STRONG",{});var _Rr=s(EH);oDe=r(_Rr,"longformer"),_Rr.forEach(t),rDe=r(mTe," \u2014 "),D9=n(mTe,"A",{href:!0});var uRr=s(D9);tDe=r(uRr,"LongformerConfig"),uRr.forEach(t),aDe=r(mTe," (Longformer model)"),mTe.forEach(t),nDe=i(T),Lm=n(T,"LI",{});var gTe=s(Lm);yH=n(gTe,"STRONG",{});var bRr=s(yH);sDe=r(bRr,"luke"),bRr.forEach(t),lDe=r(gTe," \u2014 "),q9=n(gTe,"A",{href:!0});var vRr=s(q9);iDe=r(vRr,"LukeConfig"),vRr.forEach(t),dDe=r(gTe," (LUKE model)"),gTe.forEach(t),cDe=i(T),Bm=n(T,"LI",{});var hTe=s(Bm);wH=n(hTe,"STRONG",{});var TRr=s(wH);fDe=r(TRr,"lxmert"),TRr.forEach(t),mDe=r(hTe," \u2014 "),O9=n(hTe,"A",{href:!0});var FRr=s(O9);gDe=r(FRr,"LxmertConfig"),FRr.forEach(t),hDe=r(hTe," (LXMERT model)"),hTe.forEach(t),pDe=i(T),xm=n(T,"LI",{});var pTe=s(xm);AH=n(pTe,"STRONG",{});var CRr=s(AH);_De=r(CRr,"m2m_100"),CRr.forEach(t),uDe=r(pTe," \u2014 "),G9=n(pTe,"A",{href:!0});var MRr=s(G9);bDe=r(MRr,"M2M100Config"),MRr.forEach(t),vDe=r(pTe," (M2M100 model)"),pTe.forEach(t),TDe=i(T),km=n(T,"LI",{});var _Te=s(km);LH=n(_Te,"STRONG",{});var ERr=s(LH);FDe=r(ERr,"marian"),ERr.forEach(t),CDe=r(_Te," \u2014 "),X9=n(_Te,"A",{href:!0});var yRr=s(X9);MDe=r(yRr,"MarianConfig"),yRr.forEach(t),EDe=r(_Te," (Marian model)"),_Te.forEach(t),yDe=i(T),Rm=n(T,"LI",{});var uTe=s(Rm);BH=n(uTe,"STRONG",{});var wRr=s(BH);wDe=r(wRr,"maskformer"),wRr.forEach(t),ADe=r(uTe," \u2014 "),V9=n(uTe,"A",{href:!0});var ARr=s(V9);LDe=r(ARr,"MaskFormerConfig"),ARr.forEach(t),BDe=r(uTe," (MaskFormer model)"),uTe.forEach(t),xDe=i(T),Sm=n(T,"LI",{});var bTe=s(Sm);xH=n(bTe,"STRONG",{});var LRr=s(xH);kDe=r(LRr,"mbart"),LRr.forEach(t),RDe=r(bTe," \u2014 "),z9=n(bTe,"A",{href:!0});var BRr=s(z9);SDe=r(BRr,"MBartConfig"),BRr.forEach(t),PDe=r(bTe," (mBART model)"),bTe.forEach(t),$De=i(T),Pm=n(T,"LI",{});var vTe=s(Pm);kH=n(vTe,"STRONG",{});var xRr=s(kH);IDe=r(xRr,"megatron-bert"),xRr.forEach(t),jDe=r(vTe," \u2014 "),W9=n(vTe,"A",{href:!0});var kRr=s(W9);NDe=r(kRr,"MegatronBertConfig"),kRr.forEach(t),DDe=r(vTe," (MegatronBert model)"),vTe.forEach(t),qDe=i(T),$m=n(T,"LI",{});var TTe=s($m);RH=n(TTe,"STRONG",{});var RRr=s(RH);ODe=r(RRr,"mobilebert"),RRr.forEach(t),GDe=r(TTe," \u2014 "),Q9=n(TTe,"A",{href:!0});var SRr=s(Q9);XDe=r(SRr,"MobileBertConfig"),SRr.forEach(t),VDe=r(TTe," (MobileBERT model)"),TTe.forEach(t),zDe=i(T),Im=n(T,"LI",{});var FTe=s(Im);SH=n(FTe,"STRONG",{});var PRr=s(SH);WDe=r(PRr,"mpnet"),PRr.forEach(t),QDe=r(FTe," \u2014 "),H9=n(FTe,"A",{href:!0});var $Rr=s(H9);HDe=r($Rr,"MPNetConfig"),$Rr.forEach(t),UDe=r(FTe," (MPNet model)"),FTe.forEach(t),JDe=i(T),jm=n(T,"LI",{});var CTe=s(jm);PH=n(CTe,"STRONG",{});var IRr=s(PH);YDe=r(IRr,"mt5"),IRr.forEach(t),KDe=r(CTe," \u2014 "),U9=n(CTe,"A",{href:!0});var jRr=s(U9);ZDe=r(jRr,"MT5Config"),jRr.forEach(t),eqe=r(CTe," (mT5 model)"),CTe.forEach(t),oqe=i(T),Nm=n(T,"LI",{});var MTe=s(Nm);$H=n(MTe,"STRONG",{});var NRr=s($H);rqe=r(NRr,"nystromformer"),NRr.forEach(t),tqe=r(MTe," \u2014 "),J9=n(MTe,"A",{href:!0});var DRr=s(J9);aqe=r(DRr,"NystromformerConfig"),DRr.forEach(t),nqe=r(MTe," (Nystromformer model)"),MTe.forEach(t),sqe=i(T),Dm=n(T,"LI",{});var ETe=s(Dm);IH=n(ETe,"STRONG",{});var qRr=s(IH);lqe=r(qRr,"openai-gpt"),qRr.forEach(t),iqe=r(ETe," \u2014 "),Y9=n(ETe,"A",{href:!0});var ORr=s(Y9);dqe=r(ORr,"OpenAIGPTConfig"),ORr.forEach(t),cqe=r(ETe," (OpenAI GPT model)"),ETe.forEach(t),fqe=i(T),qm=n(T,"LI",{});var yTe=s(qm);jH=n(yTe,"STRONG",{});var GRr=s(jH);mqe=r(GRr,"pegasus"),GRr.forEach(t),gqe=r(yTe," \u2014 "),K9=n(yTe,"A",{href:!0});var XRr=s(K9);hqe=r(XRr,"PegasusConfig"),XRr.forEach(t),pqe=r(yTe," (Pegasus model)"),yTe.forEach(t),_qe=i(T),Om=n(T,"LI",{});var wTe=s(Om);NH=n(wTe,"STRONG",{});var VRr=s(NH);uqe=r(VRr,"perceiver"),VRr.forEach(t),bqe=r(wTe," \u2014 "),Z9=n(wTe,"A",{href:!0});var zRr=s(Z9);vqe=r(zRr,"PerceiverConfig"),zRr.forEach(t),Tqe=r(wTe," (Perceiver model)"),wTe.forEach(t),Fqe=i(T),Gm=n(T,"LI",{});var ATe=s(Gm);DH=n(ATe,"STRONG",{});var WRr=s(DH);Cqe=r(WRr,"plbart"),WRr.forEach(t),Mqe=r(ATe," \u2014 "),eB=n(ATe,"A",{href:!0});var QRr=s(eB);Eqe=r(QRr,"PLBartConfig"),QRr.forEach(t),yqe=r(ATe," (PLBart model)"),ATe.forEach(t),wqe=i(T),Xm=n(T,"LI",{});var LTe=s(Xm);qH=n(LTe,"STRONG",{});var HRr=s(qH);Aqe=r(HRr,"poolformer"),HRr.forEach(t),Lqe=r(LTe," \u2014 "),oB=n(LTe,"A",{href:!0});var URr=s(oB);Bqe=r(URr,"PoolFormerConfig"),URr.forEach(t),xqe=r(LTe," (PoolFormer model)"),LTe.forEach(t),kqe=i(T),Vm=n(T,"LI",{});var BTe=s(Vm);OH=n(BTe,"STRONG",{});var JRr=s(OH);Rqe=r(JRr,"prophetnet"),JRr.forEach(t),Sqe=r(BTe," \u2014 "),rB=n(BTe,"A",{href:!0});var YRr=s(rB);Pqe=r(YRr,"ProphetNetConfig"),YRr.forEach(t),$qe=r(BTe," (ProphetNet model)"),BTe.forEach(t),Iqe=i(T),zm=n(T,"LI",{});var xTe=s(zm);GH=n(xTe,"STRONG",{});var KRr=s(GH);jqe=r(KRr,"qdqbert"),KRr.forEach(t),Nqe=r(xTe," \u2014 "),tB=n(xTe,"A",{href:!0});var ZRr=s(tB);Dqe=r(ZRr,"QDQBertConfig"),ZRr.forEach(t),qqe=r(xTe," (QDQBert model)"),xTe.forEach(t),Oqe=i(T),Wm=n(T,"LI",{});var kTe=s(Wm);XH=n(kTe,"STRONG",{});var eSr=s(XH);Gqe=r(eSr,"rag"),eSr.forEach(t),Xqe=r(kTe," \u2014 "),aB=n(kTe,"A",{href:!0});var oSr=s(aB);Vqe=r(oSr,"RagConfig"),oSr.forEach(t),zqe=r(kTe," (RAG model)"),kTe.forEach(t),Wqe=i(T),Qm=n(T,"LI",{});var RTe=s(Qm);VH=n(RTe,"STRONG",{});var rSr=s(VH);Qqe=r(rSr,"realm"),rSr.forEach(t),Hqe=r(RTe," \u2014 "),nB=n(RTe,"A",{href:!0});var tSr=s(nB);Uqe=r(tSr,"RealmConfig"),tSr.forEach(t),Jqe=r(RTe," (Realm model)"),RTe.forEach(t),Yqe=i(T),Hm=n(T,"LI",{});var STe=s(Hm);zH=n(STe,"STRONG",{});var aSr=s(zH);Kqe=r(aSr,"reformer"),aSr.forEach(t),Zqe=r(STe," \u2014 "),sB=n(STe,"A",{href:!0});var nSr=s(sB);eOe=r(nSr,"ReformerConfig"),nSr.forEach(t),oOe=r(STe," (Reformer model)"),STe.forEach(t),rOe=i(T),Um=n(T,"LI",{});var PTe=s(Um);WH=n(PTe,"STRONG",{});var sSr=s(WH);tOe=r(sSr,"rembert"),sSr.forEach(t),aOe=r(PTe," \u2014 "),lB=n(PTe,"A",{href:!0});var lSr=s(lB);nOe=r(lSr,"RemBertConfig"),lSr.forEach(t),sOe=r(PTe," (RemBERT model)"),PTe.forEach(t),lOe=i(T),Jm=n(T,"LI",{});var $Te=s(Jm);QH=n($Te,"STRONG",{});var iSr=s(QH);iOe=r(iSr,"resnet"),iSr.forEach(t),dOe=r($Te," \u2014 "),iB=n($Te,"A",{href:!0});var dSr=s(iB);cOe=r(dSr,"ResNetConfig"),dSr.forEach(t),fOe=r($Te," (ResNet model)"),$Te.forEach(t),mOe=i(T),Ym=n(T,"LI",{});var ITe=s(Ym);HH=n(ITe,"STRONG",{});var cSr=s(HH);gOe=r(cSr,"retribert"),cSr.forEach(t),hOe=r(ITe," \u2014 "),dB=n(ITe,"A",{href:!0});var fSr=s(dB);pOe=r(fSr,"RetriBertConfig"),fSr.forEach(t),_Oe=r(ITe," (RetriBERT model)"),ITe.forEach(t),uOe=i(T),Km=n(T,"LI",{});var jTe=s(Km);UH=n(jTe,"STRONG",{});var mSr=s(UH);bOe=r(mSr,"roberta"),mSr.forEach(t),vOe=r(jTe," \u2014 "),cB=n(jTe,"A",{href:!0});var gSr=s(cB);TOe=r(gSr,"RobertaConfig"),gSr.forEach(t),FOe=r(jTe," (RoBERTa model)"),jTe.forEach(t),COe=i(T),Zm=n(T,"LI",{});var NTe=s(Zm);JH=n(NTe,"STRONG",{});var hSr=s(JH);MOe=r(hSr,"roformer"),hSr.forEach(t),EOe=r(NTe," \u2014 "),fB=n(NTe,"A",{href:!0});var pSr=s(fB);yOe=r(pSr,"RoFormerConfig"),pSr.forEach(t),wOe=r(NTe," (RoFormer model)"),NTe.forEach(t),AOe=i(T),eg=n(T,"LI",{});var DTe=s(eg);YH=n(DTe,"STRONG",{});var _Sr=s(YH);LOe=r(_Sr,"segformer"),_Sr.forEach(t),BOe=r(DTe," \u2014 "),mB=n(DTe,"A",{href:!0});var uSr=s(mB);xOe=r(uSr,"SegformerConfig"),uSr.forEach(t),kOe=r(DTe," (SegFormer model)"),DTe.forEach(t),ROe=i(T),og=n(T,"LI",{});var qTe=s(og);KH=n(qTe,"STRONG",{});var bSr=s(KH);SOe=r(bSr,"sew"),bSr.forEach(t),POe=r(qTe," \u2014 "),gB=n(qTe,"A",{href:!0});var vSr=s(gB);$Oe=r(vSr,"SEWConfig"),vSr.forEach(t),IOe=r(qTe," (SEW model)"),qTe.forEach(t),jOe=i(T),rg=n(T,"LI",{});var OTe=s(rg);ZH=n(OTe,"STRONG",{});var TSr=s(ZH);NOe=r(TSr,"sew-d"),TSr.forEach(t),DOe=r(OTe," \u2014 "),hB=n(OTe,"A",{href:!0});var FSr=s(hB);qOe=r(FSr,"SEWDConfig"),FSr.forEach(t),OOe=r(OTe," (SEW-D model)"),OTe.forEach(t),GOe=i(T),tg=n(T,"LI",{});var GTe=s(tg);eU=n(GTe,"STRONG",{});var CSr=s(eU);XOe=r(CSr,"speech-encoder-decoder"),CSr.forEach(t),VOe=r(GTe," \u2014 "),pB=n(GTe,"A",{href:!0});var MSr=s(pB);zOe=r(MSr,"SpeechEncoderDecoderConfig"),MSr.forEach(t),WOe=r(GTe," (Speech Encoder decoder model)"),GTe.forEach(t),QOe=i(T),ag=n(T,"LI",{});var XTe=s(ag);oU=n(XTe,"STRONG",{});var ESr=s(oU);HOe=r(ESr,"speech_to_text"),ESr.forEach(t),UOe=r(XTe," \u2014 "),_B=n(XTe,"A",{href:!0});var ySr=s(_B);JOe=r(ySr,"Speech2TextConfig"),ySr.forEach(t),YOe=r(XTe," (Speech2Text model)"),XTe.forEach(t),KOe=i(T),ng=n(T,"LI",{});var VTe=s(ng);rU=n(VTe,"STRONG",{});var wSr=s(rU);ZOe=r(wSr,"speech_to_text_2"),wSr.forEach(t),eGe=r(VTe," \u2014 "),uB=n(VTe,"A",{href:!0});var ASr=s(uB);oGe=r(ASr,"Speech2Text2Config"),ASr.forEach(t),rGe=r(VTe," (Speech2Text2 model)"),VTe.forEach(t),tGe=i(T),sg=n(T,"LI",{});var zTe=s(sg);tU=n(zTe,"STRONG",{});var LSr=s(tU);aGe=r(LSr,"splinter"),LSr.forEach(t),nGe=r(zTe," \u2014 "),bB=n(zTe,"A",{href:!0});var BSr=s(bB);sGe=r(BSr,"SplinterConfig"),BSr.forEach(t),lGe=r(zTe," (Splinter model)"),zTe.forEach(t),iGe=i(T),lg=n(T,"LI",{});var WTe=s(lg);aU=n(WTe,"STRONG",{});var xSr=s(aU);dGe=r(xSr,"squeezebert"),xSr.forEach(t),cGe=r(WTe," \u2014 "),vB=n(WTe,"A",{href:!0});var kSr=s(vB);fGe=r(kSr,"SqueezeBertConfig"),kSr.forEach(t),mGe=r(WTe," (SqueezeBERT model)"),WTe.forEach(t),gGe=i(T),ig=n(T,"LI",{});var QTe=s(ig);nU=n(QTe,"STRONG",{});var RSr=s(nU);hGe=r(RSr,"swin"),RSr.forEach(t),pGe=r(QTe," \u2014 "),TB=n(QTe,"A",{href:!0});var SSr=s(TB);_Ge=r(SSr,"SwinConfig"),SSr.forEach(t),uGe=r(QTe," (Swin model)"),QTe.forEach(t),bGe=i(T),dg=n(T,"LI",{});var HTe=s(dg);sU=n(HTe,"STRONG",{});var PSr=s(sU);vGe=r(PSr,"t5"),PSr.forEach(t),TGe=r(HTe," \u2014 "),FB=n(HTe,"A",{href:!0});var $Sr=s(FB);FGe=r($Sr,"T5Config"),$Sr.forEach(t),CGe=r(HTe," (T5 model)"),HTe.forEach(t),MGe=i(T),cg=n(T,"LI",{});var UTe=s(cg);lU=n(UTe,"STRONG",{});var ISr=s(lU);EGe=r(ISr,"tapas"),ISr.forEach(t),yGe=r(UTe," \u2014 "),CB=n(UTe,"A",{href:!0});var jSr=s(CB);wGe=r(jSr,"TapasConfig"),jSr.forEach(t),AGe=r(UTe," (TAPAS model)"),UTe.forEach(t),LGe=i(T),fg=n(T,"LI",{});var JTe=s(fg);iU=n(JTe,"STRONG",{});var NSr=s(iU);BGe=r(NSr,"transfo-xl"),NSr.forEach(t),xGe=r(JTe," \u2014 "),MB=n(JTe,"A",{href:!0});var DSr=s(MB);kGe=r(DSr,"TransfoXLConfig"),DSr.forEach(t),RGe=r(JTe," (Transformer-XL model)"),JTe.forEach(t),SGe=i(T),mg=n(T,"LI",{});var YTe=s(mg);dU=n(YTe,"STRONG",{});var qSr=s(dU);PGe=r(qSr,"trocr"),qSr.forEach(t),$Ge=r(YTe," \u2014 "),EB=n(YTe,"A",{href:!0});var OSr=s(EB);IGe=r(OSr,"TrOCRConfig"),OSr.forEach(t),jGe=r(YTe," (TrOCR model)"),YTe.forEach(t),NGe=i(T),gg=n(T,"LI",{});var KTe=s(gg);cU=n(KTe,"STRONG",{});var GSr=s(cU);DGe=r(GSr,"unispeech"),GSr.forEach(t),qGe=r(KTe," \u2014 "),yB=n(KTe,"A",{href:!0});var XSr=s(yB);OGe=r(XSr,"UniSpeechConfig"),XSr.forEach(t),GGe=r(KTe," (UniSpeech model)"),KTe.forEach(t),XGe=i(T),hg=n(T,"LI",{});var ZTe=s(hg);fU=n(ZTe,"STRONG",{});var VSr=s(fU);VGe=r(VSr,"unispeech-sat"),VSr.forEach(t),zGe=r(ZTe," \u2014 "),wB=n(ZTe,"A",{href:!0});var zSr=s(wB);WGe=r(zSr,"UniSpeechSatConfig"),zSr.forEach(t),QGe=r(ZTe," (UniSpeechSat model)"),ZTe.forEach(t),HGe=i(T),pg=n(T,"LI",{});var eFe=s(pg);mU=n(eFe,"STRONG",{});var WSr=s(mU);UGe=r(WSr,"van"),WSr.forEach(t),JGe=r(eFe," \u2014 "),AB=n(eFe,"A",{href:!0});var QSr=s(AB);YGe=r(QSr,"VanConfig"),QSr.forEach(t),KGe=r(eFe," (VAN model)"),eFe.forEach(t),ZGe=i(T),_g=n(T,"LI",{});var oFe=s(_g);gU=n(oFe,"STRONG",{});var HSr=s(gU);eXe=r(HSr,"vilt"),HSr.forEach(t),oXe=r(oFe," \u2014 "),LB=n(oFe,"A",{href:!0});var USr=s(LB);rXe=r(USr,"ViltConfig"),USr.forEach(t),tXe=r(oFe," (ViLT model)"),oFe.forEach(t),aXe=i(T),ug=n(T,"LI",{});var rFe=s(ug);hU=n(rFe,"STRONG",{});var JSr=s(hU);nXe=r(JSr,"vision-encoder-decoder"),JSr.forEach(t),sXe=r(rFe," \u2014 "),BB=n(rFe,"A",{href:!0});var YSr=s(BB);lXe=r(YSr,"VisionEncoderDecoderConfig"),YSr.forEach(t),iXe=r(rFe," (Vision Encoder decoder model)"),rFe.forEach(t),dXe=i(T),bg=n(T,"LI",{});var tFe=s(bg);pU=n(tFe,"STRONG",{});var KSr=s(pU);cXe=r(KSr,"vision-text-dual-encoder"),KSr.forEach(t),fXe=r(tFe," \u2014 "),xB=n(tFe,"A",{href:!0});var ZSr=s(xB);mXe=r(ZSr,"VisionTextDualEncoderConfig"),ZSr.forEach(t),gXe=r(tFe," (VisionTextDualEncoder model)"),tFe.forEach(t),hXe=i(T),vg=n(T,"LI",{});var aFe=s(vg);_U=n(aFe,"STRONG",{});var ePr=s(_U);pXe=r(ePr,"visual_bert"),ePr.forEach(t),_Xe=r(aFe," \u2014 "),kB=n(aFe,"A",{href:!0});var oPr=s(kB);uXe=r(oPr,"VisualBertConfig"),oPr.forEach(t),bXe=r(aFe," (VisualBert model)"),aFe.forEach(t),vXe=i(T),Tg=n(T,"LI",{});var nFe=s(Tg);uU=n(nFe,"STRONG",{});var rPr=s(uU);TXe=r(rPr,"vit"),rPr.forEach(t),FXe=r(nFe," \u2014 "),RB=n(nFe,"A",{href:!0});var tPr=s(RB);CXe=r(tPr,"ViTConfig"),tPr.forEach(t),MXe=r(nFe," (ViT model)"),nFe.forEach(t),EXe=i(T),Fg=n(T,"LI",{});var sFe=s(Fg);bU=n(sFe,"STRONG",{});var aPr=s(bU);yXe=r(aPr,"vit_mae"),aPr.forEach(t),wXe=r(sFe," \u2014 "),SB=n(sFe,"A",{href:!0});var nPr=s(SB);AXe=r(nPr,"ViTMAEConfig"),nPr.forEach(t),LXe=r(sFe," (ViTMAE model)"),sFe.forEach(t),BXe=i(T),Cg=n(T,"LI",{});var lFe=s(Cg);vU=n(lFe,"STRONG",{});var sPr=s(vU);xXe=r(sPr,"wav2vec2"),sPr.forEach(t),kXe=r(lFe," \u2014 "),PB=n(lFe,"A",{href:!0});var lPr=s(PB);RXe=r(lPr,"Wav2Vec2Config"),lPr.forEach(t),SXe=r(lFe," (Wav2Vec2 model)"),lFe.forEach(t),PXe=i(T),Mg=n(T,"LI",{});var iFe=s(Mg);TU=n(iFe,"STRONG",{});var iPr=s(TU);$Xe=r(iPr,"wavlm"),iPr.forEach(t),IXe=r(iFe," \u2014 "),$B=n(iFe,"A",{href:!0});var dPr=s($B);jXe=r(dPr,"WavLMConfig"),dPr.forEach(t),NXe=r(iFe," (WavLM model)"),iFe.forEach(t),DXe=i(T),Eg=n(T,"LI",{});var dFe=s(Eg);FU=n(dFe,"STRONG",{});var cPr=s(FU);qXe=r(cPr,"xglm"),cPr.forEach(t),OXe=r(dFe," \u2014 "),IB=n(dFe,"A",{href:!0});var fPr=s(IB);GXe=r(fPr,"XGLMConfig"),fPr.forEach(t),XXe=r(dFe," (XGLM model)"),dFe.forEach(t),VXe=i(T),yg=n(T,"LI",{});var cFe=s(yg);CU=n(cFe,"STRONG",{});var mPr=s(CU);zXe=r(mPr,"xlm"),mPr.forEach(t),WXe=r(cFe," \u2014 "),jB=n(cFe,"A",{href:!0});var gPr=s(jB);QXe=r(gPr,"XLMConfig"),gPr.forEach(t),HXe=r(cFe," (XLM model)"),cFe.forEach(t),UXe=i(T),wg=n(T,"LI",{});var fFe=s(wg);MU=n(fFe,"STRONG",{});var hPr=s(MU);JXe=r(hPr,"xlm-prophetnet"),hPr.forEach(t),YXe=r(fFe," \u2014 "),NB=n(fFe,"A",{href:!0});var pPr=s(NB);KXe=r(pPr,"XLMProphetNetConfig"),pPr.forEach(t),ZXe=r(fFe," (XLMProphetNet model)"),fFe.forEach(t),eVe=i(T),Ag=n(T,"LI",{});var mFe=s(Ag);EU=n(mFe,"STRONG",{});var _Pr=s(EU);oVe=r(_Pr,"xlm-roberta"),_Pr.forEach(t),rVe=r(mFe," \u2014 "),DB=n(mFe,"A",{href:!0});var uPr=s(DB);tVe=r(uPr,"XLMRobertaConfig"),uPr.forEach(t),aVe=r(mFe," (XLM-RoBERTa model)"),mFe.forEach(t),nVe=i(T),Lg=n(T,"LI",{});var gFe=s(Lg);yU=n(gFe,"STRONG",{});var bPr=s(yU);sVe=r(bPr,"xlm-roberta-xl"),bPr.forEach(t),lVe=r(gFe," \u2014 "),qB=n(gFe,"A",{href:!0});var vPr=s(qB);iVe=r(vPr,"XLMRobertaXLConfig"),vPr.forEach(t),dVe=r(gFe," (XLM-RoBERTa-XL model)"),gFe.forEach(t),cVe=i(T),Bg=n(T,"LI",{});var hFe=s(Bg);wU=n(hFe,"STRONG",{});var TPr=s(wU);fVe=r(TPr,"xlnet"),TPr.forEach(t),mVe=r(hFe," \u2014 "),OB=n(hFe,"A",{href:!0});var FPr=s(OB);gVe=r(FPr,"XLNetConfig"),FPr.forEach(t),hVe=r(hFe," (XLNet model)"),hFe.forEach(t),pVe=i(T),xg=n(T,"LI",{});var pFe=s(xg);AU=n(pFe,"STRONG",{});var CPr=s(AU);_Ve=r(CPr,"yoso"),CPr.forEach(t),uVe=r(pFe," \u2014 "),GB=n(pFe,"A",{href:!0});var MPr=s(GB);bVe=r(MPr,"YosoConfig"),MPr.forEach(t),vVe=r(pFe," (YOSO model)"),pFe.forEach(t),T.forEach(t),TVe=i(ga),LU=n(ga,"P",{});var EPr=s(LU);FVe=r(EPr,"Examples:"),EPr.forEach(t),CVe=i(ga),m(m3.$$.fragment,ga),ga.forEach(t),MVe=i(Gs),kg=n(Gs,"DIV",{class:!0});var QRe=s(kg);m(g3.$$.fragment,QRe),EVe=i(QRe),BU=n(QRe,"P",{});var yPr=s(BU);yVe=r(yPr,"Register a new configuration for this class."),yPr.forEach(t),QRe.forEach(t),Gs.forEach(t),zxe=i(c),Qi=n(c,"H2",{class:!0});var HRe=s(Qi);Rg=n(HRe,"A",{id:!0,class:!0,href:!0});var wPr=s(Rg);xU=n(wPr,"SPAN",{});var APr=s(xU);m(h3.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),wVe=i(HRe),kU=n(HRe,"SPAN",{});var LPr=s(kU);AVe=r(LPr,"AutoTokenizer"),LPr.forEach(t),HRe.forEach(t),Wxe=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(p3.$$.fragment,Xs),LVe=i(Xs),_3=n(Xs,"P",{});var URe=s(_3);BVe=r(URe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),XB=n(URe,"A",{href:!0});var BPr=s(XB);xVe=r(BPr,"AutoTokenizer.from_pretrained()"),BPr.forEach(t),kVe=r(URe," class method."),URe.forEach(t),RVe=i(Xs),u3=n(Xs,"P",{});var JRe=s(u3);SVe=r(JRe,"This class cannot be instantiated directly using "),RU=n(JRe,"CODE",{});var xPr=s(RU);PVe=r(xPr,"__init__()"),xPr.forEach(t),$Ve=r(JRe," (throws an error)."),JRe.forEach(t),IVe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(b3.$$.fragment,ha),jVe=i(ha),SU=n(ha,"P",{});var kPr=s(SU);NVe=r(kPr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),kPr.forEach(t),DVe=i(ha),Ga=n(ha,"P",{});var tE=s(Ga);qVe=r(tE,"The tokenizer class to instantiate is selected based on the "),PU=n(tE,"CODE",{});var RPr=s(PU);OVe=r(RPr,"model_type"),RPr.forEach(t),GVe=r(tE,` property of the config object (either
passed as an argument or loaded from `),$U=n(tE,"CODE",{});var SPr=s($U);XVe=r(SPr,"pretrained_model_name_or_path"),SPr.forEach(t),VVe=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IU=n(tE,"CODE",{});var PPr=s(IU);zVe=r(PPr,"pretrained_model_name_or_path"),PPr.forEach(t),WVe=r(tE,":"),tE.forEach(t),QVe=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var K7=s(Wn);jU=n(K7,"STRONG",{});var $Pr=s(jU);HVe=r($Pr,"albert"),$Pr.forEach(t),UVe=r(K7," \u2014 "),VB=n(K7,"A",{href:!0});var IPr=s(VB);JVe=r(IPr,"AlbertTokenizer"),IPr.forEach(t),YVe=r(K7," or "),zB=n(K7,"A",{href:!0});var jPr=s(zB);KVe=r(jPr,"AlbertTokenizerFast"),jPr.forEach(t),ZVe=r(K7," (ALBERT model)"),K7.forEach(t),eze=i(y),Qn=n(y,"LI",{});var Z7=s(Qn);NU=n(Z7,"STRONG",{});var NPr=s(NU);oze=r(NPr,"bart"),NPr.forEach(t),rze=r(Z7," \u2014 "),WB=n(Z7,"A",{href:!0});var DPr=s(WB);tze=r(DPr,"BartTokenizer"),DPr.forEach(t),aze=r(Z7," or "),QB=n(Z7,"A",{href:!0});var qPr=s(QB);nze=r(qPr,"BartTokenizerFast"),qPr.forEach(t),sze=r(Z7," (BART model)"),Z7.forEach(t),lze=i(y),Hn=n(y,"LI",{});var e8=s(Hn);DU=n(e8,"STRONG",{});var OPr=s(DU);ize=r(OPr,"barthez"),OPr.forEach(t),dze=r(e8," \u2014 "),HB=n(e8,"A",{href:!0});var GPr=s(HB);cze=r(GPr,"BarthezTokenizer"),GPr.forEach(t),fze=r(e8," or "),UB=n(e8,"A",{href:!0});var XPr=s(UB);mze=r(XPr,"BarthezTokenizerFast"),XPr.forEach(t),gze=r(e8," (BARThez model)"),e8.forEach(t),hze=i(y),Sg=n(y,"LI",{});var _Fe=s(Sg);qU=n(_Fe,"STRONG",{});var VPr=s(qU);pze=r(VPr,"bartpho"),VPr.forEach(t),_ze=r(_Fe," \u2014 "),JB=n(_Fe,"A",{href:!0});var zPr=s(JB);uze=r(zPr,"BartphoTokenizer"),zPr.forEach(t),bze=r(_Fe," (BARTpho model)"),_Fe.forEach(t),vze=i(y),Un=n(y,"LI",{});var o8=s(Un);OU=n(o8,"STRONG",{});var WPr=s(OU);Tze=r(WPr,"bert"),WPr.forEach(t),Fze=r(o8," \u2014 "),YB=n(o8,"A",{href:!0});var QPr=s(YB);Cze=r(QPr,"BertTokenizer"),QPr.forEach(t),Mze=r(o8," or "),KB=n(o8,"A",{href:!0});var HPr=s(KB);Eze=r(HPr,"BertTokenizerFast"),HPr.forEach(t),yze=r(o8," (BERT model)"),o8.forEach(t),wze=i(y),Pg=n(y,"LI",{});var uFe=s(Pg);GU=n(uFe,"STRONG",{});var UPr=s(GU);Aze=r(UPr,"bert-generation"),UPr.forEach(t),Lze=r(uFe," \u2014 "),ZB=n(uFe,"A",{href:!0});var JPr=s(ZB);Bze=r(JPr,"BertGenerationTokenizer"),JPr.forEach(t),xze=r(uFe," (Bert Generation model)"),uFe.forEach(t),kze=i(y),$g=n(y,"LI",{});var bFe=s($g);XU=n(bFe,"STRONG",{});var YPr=s(XU);Rze=r(YPr,"bert-japanese"),YPr.forEach(t),Sze=r(bFe," \u2014 "),ex=n(bFe,"A",{href:!0});var KPr=s(ex);Pze=r(KPr,"BertJapaneseTokenizer"),KPr.forEach(t),$ze=r(bFe," (BertJapanese model)"),bFe.forEach(t),Ize=i(y),Ig=n(y,"LI",{});var vFe=s(Ig);VU=n(vFe,"STRONG",{});var ZPr=s(VU);jze=r(ZPr,"bertweet"),ZPr.forEach(t),Nze=r(vFe," \u2014 "),ox=n(vFe,"A",{href:!0});var e$r=s(ox);Dze=r(e$r,"BertweetTokenizer"),e$r.forEach(t),qze=r(vFe," (Bertweet model)"),vFe.forEach(t),Oze=i(y),Jn=n(y,"LI",{});var r8=s(Jn);zU=n(r8,"STRONG",{});var o$r=s(zU);Gze=r(o$r,"big_bird"),o$r.forEach(t),Xze=r(r8," \u2014 "),rx=n(r8,"A",{href:!0});var r$r=s(rx);Vze=r(r$r,"BigBirdTokenizer"),r$r.forEach(t),zze=r(r8," or "),tx=n(r8,"A",{href:!0});var t$r=s(tx);Wze=r(t$r,"BigBirdTokenizerFast"),t$r.forEach(t),Qze=r(r8," (BigBird model)"),r8.forEach(t),Hze=i(y),Yn=n(y,"LI",{});var t8=s(Yn);WU=n(t8,"STRONG",{});var a$r=s(WU);Uze=r(a$r,"bigbird_pegasus"),a$r.forEach(t),Jze=r(t8," \u2014 "),ax=n(t8,"A",{href:!0});var n$r=s(ax);Yze=r(n$r,"PegasusTokenizer"),n$r.forEach(t),Kze=r(t8," or "),nx=n(t8,"A",{href:!0});var s$r=s(nx);Zze=r(s$r,"PegasusTokenizerFast"),s$r.forEach(t),eWe=r(t8," (BigBirdPegasus model)"),t8.forEach(t),oWe=i(y),Kn=n(y,"LI",{});var a8=s(Kn);QU=n(a8,"STRONG",{});var l$r=s(QU);rWe=r(l$r,"blenderbot"),l$r.forEach(t),tWe=r(a8," \u2014 "),sx=n(a8,"A",{href:!0});var i$r=s(sx);aWe=r(i$r,"BlenderbotTokenizer"),i$r.forEach(t),nWe=r(a8," or "),lx=n(a8,"A",{href:!0});var d$r=s(lx);sWe=r(d$r,"BlenderbotTokenizerFast"),d$r.forEach(t),lWe=r(a8," (Blenderbot model)"),a8.forEach(t),iWe=i(y),jg=n(y,"LI",{});var TFe=s(jg);HU=n(TFe,"STRONG",{});var c$r=s(HU);dWe=r(c$r,"blenderbot-small"),c$r.forEach(t),cWe=r(TFe," \u2014 "),ix=n(TFe,"A",{href:!0});var f$r=s(ix);fWe=r(f$r,"BlenderbotSmallTokenizer"),f$r.forEach(t),mWe=r(TFe," (BlenderbotSmall model)"),TFe.forEach(t),gWe=i(y),Ng=n(y,"LI",{});var FFe=s(Ng);UU=n(FFe,"STRONG",{});var m$r=s(UU);hWe=r(m$r,"byt5"),m$r.forEach(t),pWe=r(FFe," \u2014 "),dx=n(FFe,"A",{href:!0});var g$r=s(dx);_We=r(g$r,"ByT5Tokenizer"),g$r.forEach(t),uWe=r(FFe," (ByT5 model)"),FFe.forEach(t),bWe=i(y),Zn=n(y,"LI",{});var n8=s(Zn);JU=n(n8,"STRONG",{});var h$r=s(JU);vWe=r(h$r,"camembert"),h$r.forEach(t),TWe=r(n8," \u2014 "),cx=n(n8,"A",{href:!0});var p$r=s(cx);FWe=r(p$r,"CamembertTokenizer"),p$r.forEach(t),CWe=r(n8," or "),fx=n(n8,"A",{href:!0});var _$r=s(fx);MWe=r(_$r,"CamembertTokenizerFast"),_$r.forEach(t),EWe=r(n8," (CamemBERT model)"),n8.forEach(t),yWe=i(y),Dg=n(y,"LI",{});var CFe=s(Dg);YU=n(CFe,"STRONG",{});var u$r=s(YU);wWe=r(u$r,"canine"),u$r.forEach(t),AWe=r(CFe," \u2014 "),mx=n(CFe,"A",{href:!0});var b$r=s(mx);LWe=r(b$r,"CanineTokenizer"),b$r.forEach(t),BWe=r(CFe," (Canine model)"),CFe.forEach(t),xWe=i(y),es=n(y,"LI",{});var s8=s(es);KU=n(s8,"STRONG",{});var v$r=s(KU);kWe=r(v$r,"clip"),v$r.forEach(t),RWe=r(s8," \u2014 "),gx=n(s8,"A",{href:!0});var T$r=s(gx);SWe=r(T$r,"CLIPTokenizer"),T$r.forEach(t),PWe=r(s8," or "),hx=n(s8,"A",{href:!0});var F$r=s(hx);$We=r(F$r,"CLIPTokenizerFast"),F$r.forEach(t),IWe=r(s8," (CLIP model)"),s8.forEach(t),jWe=i(y),os=n(y,"LI",{});var l8=s(os);ZU=n(l8,"STRONG",{});var C$r=s(ZU);NWe=r(C$r,"convbert"),C$r.forEach(t),DWe=r(l8," \u2014 "),px=n(l8,"A",{href:!0});var M$r=s(px);qWe=r(M$r,"ConvBertTokenizer"),M$r.forEach(t),OWe=r(l8," or "),_x=n(l8,"A",{href:!0});var E$r=s(_x);GWe=r(E$r,"ConvBertTokenizerFast"),E$r.forEach(t),XWe=r(l8," (ConvBERT model)"),l8.forEach(t),VWe=i(y),rs=n(y,"LI",{});var i8=s(rs);eJ=n(i8,"STRONG",{});var y$r=s(eJ);zWe=r(y$r,"cpm"),y$r.forEach(t),WWe=r(i8," \u2014 "),ux=n(i8,"A",{href:!0});var w$r=s(ux);QWe=r(w$r,"CpmTokenizer"),w$r.forEach(t),HWe=r(i8," or "),oJ=n(i8,"CODE",{});var A$r=s(oJ);UWe=r(A$r,"CpmTokenizerFast"),A$r.forEach(t),JWe=r(i8," (CPM model)"),i8.forEach(t),YWe=i(y),qg=n(y,"LI",{});var MFe=s(qg);rJ=n(MFe,"STRONG",{});var L$r=s(rJ);KWe=r(L$r,"ctrl"),L$r.forEach(t),ZWe=r(MFe," \u2014 "),bx=n(MFe,"A",{href:!0});var B$r=s(bx);eQe=r(B$r,"CTRLTokenizer"),B$r.forEach(t),oQe=r(MFe," (CTRL model)"),MFe.forEach(t),rQe=i(y),ts=n(y,"LI",{});var d8=s(ts);tJ=n(d8,"STRONG",{});var x$r=s(tJ);tQe=r(x$r,"deberta"),x$r.forEach(t),aQe=r(d8," \u2014 "),vx=n(d8,"A",{href:!0});var k$r=s(vx);nQe=r(k$r,"DebertaTokenizer"),k$r.forEach(t),sQe=r(d8," or "),Tx=n(d8,"A",{href:!0});var R$r=s(Tx);lQe=r(R$r,"DebertaTokenizerFast"),R$r.forEach(t),iQe=r(d8," (DeBERTa model)"),d8.forEach(t),dQe=i(y),Og=n(y,"LI",{});var EFe=s(Og);aJ=n(EFe,"STRONG",{});var S$r=s(aJ);cQe=r(S$r,"deberta-v2"),S$r.forEach(t),fQe=r(EFe," \u2014 "),Fx=n(EFe,"A",{href:!0});var P$r=s(Fx);mQe=r(P$r,"DebertaV2Tokenizer"),P$r.forEach(t),gQe=r(EFe," (DeBERTa-v2 model)"),EFe.forEach(t),hQe=i(y),as=n(y,"LI",{});var c8=s(as);nJ=n(c8,"STRONG",{});var $$r=s(nJ);pQe=r($$r,"distilbert"),$$r.forEach(t),_Qe=r(c8," \u2014 "),Cx=n(c8,"A",{href:!0});var I$r=s(Cx);uQe=r(I$r,"DistilBertTokenizer"),I$r.forEach(t),bQe=r(c8," or "),Mx=n(c8,"A",{href:!0});var j$r=s(Mx);vQe=r(j$r,"DistilBertTokenizerFast"),j$r.forEach(t),TQe=r(c8," (DistilBERT model)"),c8.forEach(t),FQe=i(y),ns=n(y,"LI",{});var f8=s(ns);sJ=n(f8,"STRONG",{});var N$r=s(sJ);CQe=r(N$r,"dpr"),N$r.forEach(t),MQe=r(f8," \u2014 "),Ex=n(f8,"A",{href:!0});var D$r=s(Ex);EQe=r(D$r,"DPRQuestionEncoderTokenizer"),D$r.forEach(t),yQe=r(f8," or "),yx=n(f8,"A",{href:!0});var q$r=s(yx);wQe=r(q$r,"DPRQuestionEncoderTokenizerFast"),q$r.forEach(t),AQe=r(f8," (DPR model)"),f8.forEach(t),LQe=i(y),ss=n(y,"LI",{});var m8=s(ss);lJ=n(m8,"STRONG",{});var O$r=s(lJ);BQe=r(O$r,"electra"),O$r.forEach(t),xQe=r(m8," \u2014 "),wx=n(m8,"A",{href:!0});var G$r=s(wx);kQe=r(G$r,"ElectraTokenizer"),G$r.forEach(t),RQe=r(m8," or "),Ax=n(m8,"A",{href:!0});var X$r=s(Ax);SQe=r(X$r,"ElectraTokenizerFast"),X$r.forEach(t),PQe=r(m8," (ELECTRA model)"),m8.forEach(t),$Qe=i(y),Gg=n(y,"LI",{});var yFe=s(Gg);iJ=n(yFe,"STRONG",{});var V$r=s(iJ);IQe=r(V$r,"flaubert"),V$r.forEach(t),jQe=r(yFe," \u2014 "),Lx=n(yFe,"A",{href:!0});var z$r=s(Lx);NQe=r(z$r,"FlaubertTokenizer"),z$r.forEach(t),DQe=r(yFe," (FlauBERT model)"),yFe.forEach(t),qQe=i(y),ls=n(y,"LI",{});var g8=s(ls);dJ=n(g8,"STRONG",{});var W$r=s(dJ);OQe=r(W$r,"fnet"),W$r.forEach(t),GQe=r(g8," \u2014 "),Bx=n(g8,"A",{href:!0});var Q$r=s(Bx);XQe=r(Q$r,"FNetTokenizer"),Q$r.forEach(t),VQe=r(g8," or "),xx=n(g8,"A",{href:!0});var H$r=s(xx);zQe=r(H$r,"FNetTokenizerFast"),H$r.forEach(t),WQe=r(g8," (FNet model)"),g8.forEach(t),QQe=i(y),Xg=n(y,"LI",{});var wFe=s(Xg);cJ=n(wFe,"STRONG",{});var U$r=s(cJ);HQe=r(U$r,"fsmt"),U$r.forEach(t),UQe=r(wFe," \u2014 "),kx=n(wFe,"A",{href:!0});var J$r=s(kx);JQe=r(J$r,"FSMTTokenizer"),J$r.forEach(t),YQe=r(wFe," (FairSeq Machine-Translation model)"),wFe.forEach(t),KQe=i(y),is=n(y,"LI",{});var h8=s(is);fJ=n(h8,"STRONG",{});var Y$r=s(fJ);ZQe=r(Y$r,"funnel"),Y$r.forEach(t),eHe=r(h8," \u2014 "),Rx=n(h8,"A",{href:!0});var K$r=s(Rx);oHe=r(K$r,"FunnelTokenizer"),K$r.forEach(t),rHe=r(h8," or "),Sx=n(h8,"A",{href:!0});var Z$r=s(Sx);tHe=r(Z$r,"FunnelTokenizerFast"),Z$r.forEach(t),aHe=r(h8," (Funnel Transformer model)"),h8.forEach(t),nHe=i(y),ds=n(y,"LI",{});var p8=s(ds);mJ=n(p8,"STRONG",{});var eIr=s(mJ);sHe=r(eIr,"gpt2"),eIr.forEach(t),lHe=r(p8," \u2014 "),Px=n(p8,"A",{href:!0});var oIr=s(Px);iHe=r(oIr,"GPT2Tokenizer"),oIr.forEach(t),dHe=r(p8," or "),$x=n(p8,"A",{href:!0});var rIr=s($x);cHe=r(rIr,"GPT2TokenizerFast"),rIr.forEach(t),fHe=r(p8," (OpenAI GPT-2 model)"),p8.forEach(t),mHe=i(y),cs=n(y,"LI",{});var _8=s(cs);gJ=n(_8,"STRONG",{});var tIr=s(gJ);gHe=r(tIr,"gpt_neo"),tIr.forEach(t),hHe=r(_8," \u2014 "),Ix=n(_8,"A",{href:!0});var aIr=s(Ix);pHe=r(aIr,"GPT2Tokenizer"),aIr.forEach(t),_He=r(_8," or "),jx=n(_8,"A",{href:!0});var nIr=s(jx);uHe=r(nIr,"GPT2TokenizerFast"),nIr.forEach(t),bHe=r(_8," (GPT Neo model)"),_8.forEach(t),vHe=i(y),fs=n(y,"LI",{});var u8=s(fs);hJ=n(u8,"STRONG",{});var sIr=s(hJ);THe=r(sIr,"herbert"),sIr.forEach(t),FHe=r(u8," \u2014 "),Nx=n(u8,"A",{href:!0});var lIr=s(Nx);CHe=r(lIr,"HerbertTokenizer"),lIr.forEach(t),MHe=r(u8," or "),Dx=n(u8,"A",{href:!0});var iIr=s(Dx);EHe=r(iIr,"HerbertTokenizerFast"),iIr.forEach(t),yHe=r(u8," (HerBERT model)"),u8.forEach(t),wHe=i(y),Vg=n(y,"LI",{});var AFe=s(Vg);pJ=n(AFe,"STRONG",{});var dIr=s(pJ);AHe=r(dIr,"hubert"),dIr.forEach(t),LHe=r(AFe," \u2014 "),qx=n(AFe,"A",{href:!0});var cIr=s(qx);BHe=r(cIr,"Wav2Vec2CTCTokenizer"),cIr.forEach(t),xHe=r(AFe," (Hubert model)"),AFe.forEach(t),kHe=i(y),ms=n(y,"LI",{});var b8=s(ms);_J=n(b8,"STRONG",{});var fIr=s(_J);RHe=r(fIr,"ibert"),fIr.forEach(t),SHe=r(b8," \u2014 "),Ox=n(b8,"A",{href:!0});var mIr=s(Ox);PHe=r(mIr,"RobertaTokenizer"),mIr.forEach(t),$He=r(b8," or "),Gx=n(b8,"A",{href:!0});var gIr=s(Gx);IHe=r(gIr,"RobertaTokenizerFast"),gIr.forEach(t),jHe=r(b8," (I-BERT model)"),b8.forEach(t),NHe=i(y),gs=n(y,"LI",{});var v8=s(gs);uJ=n(v8,"STRONG",{});var hIr=s(uJ);DHe=r(hIr,"layoutlm"),hIr.forEach(t),qHe=r(v8," \u2014 "),Xx=n(v8,"A",{href:!0});var pIr=s(Xx);OHe=r(pIr,"LayoutLMTokenizer"),pIr.forEach(t),GHe=r(v8," or "),Vx=n(v8,"A",{href:!0});var _Ir=s(Vx);XHe=r(_Ir,"LayoutLMTokenizerFast"),_Ir.forEach(t),VHe=r(v8," (LayoutLM model)"),v8.forEach(t),zHe=i(y),hs=n(y,"LI",{});var T8=s(hs);bJ=n(T8,"STRONG",{});var uIr=s(bJ);WHe=r(uIr,"layoutlmv2"),uIr.forEach(t),QHe=r(T8," \u2014 "),zx=n(T8,"A",{href:!0});var bIr=s(zx);HHe=r(bIr,"LayoutLMv2Tokenizer"),bIr.forEach(t),UHe=r(T8," or "),Wx=n(T8,"A",{href:!0});var vIr=s(Wx);JHe=r(vIr,"LayoutLMv2TokenizerFast"),vIr.forEach(t),YHe=r(T8," (LayoutLMv2 model)"),T8.forEach(t),KHe=i(y),ps=n(y,"LI",{});var F8=s(ps);vJ=n(F8,"STRONG",{});var TIr=s(vJ);ZHe=r(TIr,"layoutxlm"),TIr.forEach(t),eUe=r(F8," \u2014 "),Qx=n(F8,"A",{href:!0});var FIr=s(Qx);oUe=r(FIr,"LayoutXLMTokenizer"),FIr.forEach(t),rUe=r(F8," or "),Hx=n(F8,"A",{href:!0});var CIr=s(Hx);tUe=r(CIr,"LayoutXLMTokenizerFast"),CIr.forEach(t),aUe=r(F8," (LayoutXLM model)"),F8.forEach(t),nUe=i(y),_s=n(y,"LI",{});var C8=s(_s);TJ=n(C8,"STRONG",{});var MIr=s(TJ);sUe=r(MIr,"led"),MIr.forEach(t),lUe=r(C8," \u2014 "),Ux=n(C8,"A",{href:!0});var EIr=s(Ux);iUe=r(EIr,"LEDTokenizer"),EIr.forEach(t),dUe=r(C8," or "),Jx=n(C8,"A",{href:!0});var yIr=s(Jx);cUe=r(yIr,"LEDTokenizerFast"),yIr.forEach(t),fUe=r(C8," (LED model)"),C8.forEach(t),mUe=i(y),us=n(y,"LI",{});var M8=s(us);FJ=n(M8,"STRONG",{});var wIr=s(FJ);gUe=r(wIr,"longformer"),wIr.forEach(t),hUe=r(M8," \u2014 "),Yx=n(M8,"A",{href:!0});var AIr=s(Yx);pUe=r(AIr,"LongformerTokenizer"),AIr.forEach(t),_Ue=r(M8," or "),Kx=n(M8,"A",{href:!0});var LIr=s(Kx);uUe=r(LIr,"LongformerTokenizerFast"),LIr.forEach(t),bUe=r(M8," (Longformer model)"),M8.forEach(t),vUe=i(y),zg=n(y,"LI",{});var LFe=s(zg);CJ=n(LFe,"STRONG",{});var BIr=s(CJ);TUe=r(BIr,"luke"),BIr.forEach(t),FUe=r(LFe," \u2014 "),Zx=n(LFe,"A",{href:!0});var xIr=s(Zx);CUe=r(xIr,"LukeTokenizer"),xIr.forEach(t),MUe=r(LFe," (LUKE model)"),LFe.forEach(t),EUe=i(y),bs=n(y,"LI",{});var E8=s(bs);MJ=n(E8,"STRONG",{});var kIr=s(MJ);yUe=r(kIr,"lxmert"),kIr.forEach(t),wUe=r(E8," \u2014 "),ek=n(E8,"A",{href:!0});var RIr=s(ek);AUe=r(RIr,"LxmertTokenizer"),RIr.forEach(t),LUe=r(E8," or "),ok=n(E8,"A",{href:!0});var SIr=s(ok);BUe=r(SIr,"LxmertTokenizerFast"),SIr.forEach(t),xUe=r(E8," (LXMERT model)"),E8.forEach(t),kUe=i(y),Wg=n(y,"LI",{});var BFe=s(Wg);EJ=n(BFe,"STRONG",{});var PIr=s(EJ);RUe=r(PIr,"m2m_100"),PIr.forEach(t),SUe=r(BFe," \u2014 "),rk=n(BFe,"A",{href:!0});var $Ir=s(rk);PUe=r($Ir,"M2M100Tokenizer"),$Ir.forEach(t),$Ue=r(BFe," (M2M100 model)"),BFe.forEach(t),IUe=i(y),Qg=n(y,"LI",{});var xFe=s(Qg);yJ=n(xFe,"STRONG",{});var IIr=s(yJ);jUe=r(IIr,"marian"),IIr.forEach(t),NUe=r(xFe," \u2014 "),tk=n(xFe,"A",{href:!0});var jIr=s(tk);DUe=r(jIr,"MarianTokenizer"),jIr.forEach(t),qUe=r(xFe," (Marian model)"),xFe.forEach(t),OUe=i(y),vs=n(y,"LI",{});var y8=s(vs);wJ=n(y8,"STRONG",{});var NIr=s(wJ);GUe=r(NIr,"mbart"),NIr.forEach(t),XUe=r(y8," \u2014 "),ak=n(y8,"A",{href:!0});var DIr=s(ak);VUe=r(DIr,"MBartTokenizer"),DIr.forEach(t),zUe=r(y8," or "),nk=n(y8,"A",{href:!0});var qIr=s(nk);WUe=r(qIr,"MBartTokenizerFast"),qIr.forEach(t),QUe=r(y8," (mBART model)"),y8.forEach(t),HUe=i(y),Ts=n(y,"LI",{});var w8=s(Ts);AJ=n(w8,"STRONG",{});var OIr=s(AJ);UUe=r(OIr,"mbart50"),OIr.forEach(t),JUe=r(w8," \u2014 "),sk=n(w8,"A",{href:!0});var GIr=s(sk);YUe=r(GIr,"MBart50Tokenizer"),GIr.forEach(t),KUe=r(w8," or "),lk=n(w8,"A",{href:!0});var XIr=s(lk);ZUe=r(XIr,"MBart50TokenizerFast"),XIr.forEach(t),eJe=r(w8," (mBART-50 model)"),w8.forEach(t),oJe=i(y),Hg=n(y,"LI",{});var kFe=s(Hg);LJ=n(kFe,"STRONG",{});var VIr=s(LJ);rJe=r(VIr,"mluke"),VIr.forEach(t),tJe=r(kFe," \u2014 "),ik=n(kFe,"A",{href:!0});var zIr=s(ik);aJe=r(zIr,"MLukeTokenizer"),zIr.forEach(t),nJe=r(kFe," (mLUKE model)"),kFe.forEach(t),sJe=i(y),Fs=n(y,"LI",{});var A8=s(Fs);BJ=n(A8,"STRONG",{});var WIr=s(BJ);lJe=r(WIr,"mobilebert"),WIr.forEach(t),iJe=r(A8," \u2014 "),dk=n(A8,"A",{href:!0});var QIr=s(dk);dJe=r(QIr,"MobileBertTokenizer"),QIr.forEach(t),cJe=r(A8," or "),ck=n(A8,"A",{href:!0});var HIr=s(ck);fJe=r(HIr,"MobileBertTokenizerFast"),HIr.forEach(t),mJe=r(A8," (MobileBERT model)"),A8.forEach(t),gJe=i(y),Cs=n(y,"LI",{});var L8=s(Cs);xJ=n(L8,"STRONG",{});var UIr=s(xJ);hJe=r(UIr,"mpnet"),UIr.forEach(t),pJe=r(L8," \u2014 "),fk=n(L8,"A",{href:!0});var JIr=s(fk);_Je=r(JIr,"MPNetTokenizer"),JIr.forEach(t),uJe=r(L8," or "),mk=n(L8,"A",{href:!0});var YIr=s(mk);bJe=r(YIr,"MPNetTokenizerFast"),YIr.forEach(t),vJe=r(L8," (MPNet model)"),L8.forEach(t),TJe=i(y),Ms=n(y,"LI",{});var B8=s(Ms);kJ=n(B8,"STRONG",{});var KIr=s(kJ);FJe=r(KIr,"mt5"),KIr.forEach(t),CJe=r(B8," \u2014 "),gk=n(B8,"A",{href:!0});var ZIr=s(gk);MJe=r(ZIr,"MT5Tokenizer"),ZIr.forEach(t),EJe=r(B8," or "),hk=n(B8,"A",{href:!0});var ejr=s(hk);yJe=r(ejr,"MT5TokenizerFast"),ejr.forEach(t),wJe=r(B8," (mT5 model)"),B8.forEach(t),AJe=i(y),Es=n(y,"LI",{});var x8=s(Es);RJ=n(x8,"STRONG",{});var ojr=s(RJ);LJe=r(ojr,"openai-gpt"),ojr.forEach(t),BJe=r(x8," \u2014 "),pk=n(x8,"A",{href:!0});var rjr=s(pk);xJe=r(rjr,"OpenAIGPTTokenizer"),rjr.forEach(t),kJe=r(x8," or "),_k=n(x8,"A",{href:!0});var tjr=s(_k);RJe=r(tjr,"OpenAIGPTTokenizerFast"),tjr.forEach(t),SJe=r(x8," (OpenAI GPT model)"),x8.forEach(t),PJe=i(y),ys=n(y,"LI",{});var k8=s(ys);SJ=n(k8,"STRONG",{});var ajr=s(SJ);$Je=r(ajr,"pegasus"),ajr.forEach(t),IJe=r(k8," \u2014 "),uk=n(k8,"A",{href:!0});var njr=s(uk);jJe=r(njr,"PegasusTokenizer"),njr.forEach(t),NJe=r(k8," or "),bk=n(k8,"A",{href:!0});var sjr=s(bk);DJe=r(sjr,"PegasusTokenizerFast"),sjr.forEach(t),qJe=r(k8," (Pegasus model)"),k8.forEach(t),OJe=i(y),Ug=n(y,"LI",{});var RFe=s(Ug);PJ=n(RFe,"STRONG",{});var ljr=s(PJ);GJe=r(ljr,"perceiver"),ljr.forEach(t),XJe=r(RFe," \u2014 "),vk=n(RFe,"A",{href:!0});var ijr=s(vk);VJe=r(ijr,"PerceiverTokenizer"),ijr.forEach(t),zJe=r(RFe," (Perceiver model)"),RFe.forEach(t),WJe=i(y),Jg=n(y,"LI",{});var SFe=s(Jg);$J=n(SFe,"STRONG",{});var djr=s($J);QJe=r(djr,"phobert"),djr.forEach(t),HJe=r(SFe," \u2014 "),Tk=n(SFe,"A",{href:!0});var cjr=s(Tk);UJe=r(cjr,"PhobertTokenizer"),cjr.forEach(t),JJe=r(SFe," (PhoBERT model)"),SFe.forEach(t),YJe=i(y),Yg=n(y,"LI",{});var PFe=s(Yg);IJ=n(PFe,"STRONG",{});var fjr=s(IJ);KJe=r(fjr,"plbart"),fjr.forEach(t),ZJe=r(PFe," \u2014 "),Fk=n(PFe,"A",{href:!0});var mjr=s(Fk);eYe=r(mjr,"PLBartTokenizer"),mjr.forEach(t),oYe=r(PFe," (PLBart model)"),PFe.forEach(t),rYe=i(y),Kg=n(y,"LI",{});var $Fe=s(Kg);jJ=n($Fe,"STRONG",{});var gjr=s(jJ);tYe=r(gjr,"prophetnet"),gjr.forEach(t),aYe=r($Fe," \u2014 "),Ck=n($Fe,"A",{href:!0});var hjr=s(Ck);nYe=r(hjr,"ProphetNetTokenizer"),hjr.forEach(t),sYe=r($Fe," (ProphetNet model)"),$Fe.forEach(t),lYe=i(y),ws=n(y,"LI",{});var R8=s(ws);NJ=n(R8,"STRONG",{});var pjr=s(NJ);iYe=r(pjr,"qdqbert"),pjr.forEach(t),dYe=r(R8," \u2014 "),Mk=n(R8,"A",{href:!0});var _jr=s(Mk);cYe=r(_jr,"BertTokenizer"),_jr.forEach(t),fYe=r(R8," or "),Ek=n(R8,"A",{href:!0});var ujr=s(Ek);mYe=r(ujr,"BertTokenizerFast"),ujr.forEach(t),gYe=r(R8," (QDQBert model)"),R8.forEach(t),hYe=i(y),Zg=n(y,"LI",{});var IFe=s(Zg);DJ=n(IFe,"STRONG",{});var bjr=s(DJ);pYe=r(bjr,"rag"),bjr.forEach(t),_Ye=r(IFe," \u2014 "),yk=n(IFe,"A",{href:!0});var vjr=s(yk);uYe=r(vjr,"RagTokenizer"),vjr.forEach(t),bYe=r(IFe," (RAG model)"),IFe.forEach(t),vYe=i(y),As=n(y,"LI",{});var S8=s(As);qJ=n(S8,"STRONG",{});var Tjr=s(qJ);TYe=r(Tjr,"realm"),Tjr.forEach(t),FYe=r(S8," \u2014 "),wk=n(S8,"A",{href:!0});var Fjr=s(wk);CYe=r(Fjr,"RealmTokenizer"),Fjr.forEach(t),MYe=r(S8," or "),Ak=n(S8,"A",{href:!0});var Cjr=s(Ak);EYe=r(Cjr,"RealmTokenizerFast"),Cjr.forEach(t),yYe=r(S8," (Realm model)"),S8.forEach(t),wYe=i(y),Ls=n(y,"LI",{});var P8=s(Ls);OJ=n(P8,"STRONG",{});var Mjr=s(OJ);AYe=r(Mjr,"reformer"),Mjr.forEach(t),LYe=r(P8," \u2014 "),Lk=n(P8,"A",{href:!0});var Ejr=s(Lk);BYe=r(Ejr,"ReformerTokenizer"),Ejr.forEach(t),xYe=r(P8," or "),Bk=n(P8,"A",{href:!0});var yjr=s(Bk);kYe=r(yjr,"ReformerTokenizerFast"),yjr.forEach(t),RYe=r(P8," (Reformer model)"),P8.forEach(t),SYe=i(y),Bs=n(y,"LI",{});var $8=s(Bs);GJ=n($8,"STRONG",{});var wjr=s(GJ);PYe=r(wjr,"rembert"),wjr.forEach(t),$Ye=r($8," \u2014 "),xk=n($8,"A",{href:!0});var Ajr=s(xk);IYe=r(Ajr,"RemBertTokenizer"),Ajr.forEach(t),jYe=r($8," or "),kk=n($8,"A",{href:!0});var Ljr=s(kk);NYe=r(Ljr,"RemBertTokenizerFast"),Ljr.forEach(t),DYe=r($8," (RemBERT model)"),$8.forEach(t),qYe=i(y),xs=n(y,"LI",{});var I8=s(xs);XJ=n(I8,"STRONG",{});var Bjr=s(XJ);OYe=r(Bjr,"retribert"),Bjr.forEach(t),GYe=r(I8," \u2014 "),Rk=n(I8,"A",{href:!0});var xjr=s(Rk);XYe=r(xjr,"RetriBertTokenizer"),xjr.forEach(t),VYe=r(I8," or "),Sk=n(I8,"A",{href:!0});var kjr=s(Sk);zYe=r(kjr,"RetriBertTokenizerFast"),kjr.forEach(t),WYe=r(I8," (RetriBERT model)"),I8.forEach(t),QYe=i(y),ks=n(y,"LI",{});var j8=s(ks);VJ=n(j8,"STRONG",{});var Rjr=s(VJ);HYe=r(Rjr,"roberta"),Rjr.forEach(t),UYe=r(j8," \u2014 "),Pk=n(j8,"A",{href:!0});var Sjr=s(Pk);JYe=r(Sjr,"RobertaTokenizer"),Sjr.forEach(t),YYe=r(j8," or "),$k=n(j8,"A",{href:!0});var Pjr=s($k);KYe=r(Pjr,"RobertaTokenizerFast"),Pjr.forEach(t),ZYe=r(j8," (RoBERTa model)"),j8.forEach(t),eKe=i(y),Rs=n(y,"LI",{});var N8=s(Rs);zJ=n(N8,"STRONG",{});var $jr=s(zJ);oKe=r($jr,"roformer"),$jr.forEach(t),rKe=r(N8," \u2014 "),Ik=n(N8,"A",{href:!0});var Ijr=s(Ik);tKe=r(Ijr,"RoFormerTokenizer"),Ijr.forEach(t),aKe=r(N8," or "),jk=n(N8,"A",{href:!0});var jjr=s(jk);nKe=r(jjr,"RoFormerTokenizerFast"),jjr.forEach(t),sKe=r(N8," (RoFormer model)"),N8.forEach(t),lKe=i(y),eh=n(y,"LI",{});var jFe=s(eh);WJ=n(jFe,"STRONG",{});var Njr=s(WJ);iKe=r(Njr,"speech_to_text"),Njr.forEach(t),dKe=r(jFe," \u2014 "),Nk=n(jFe,"A",{href:!0});var Djr=s(Nk);cKe=r(Djr,"Speech2TextTokenizer"),Djr.forEach(t),fKe=r(jFe," (Speech2Text model)"),jFe.forEach(t),mKe=i(y),oh=n(y,"LI",{});var NFe=s(oh);QJ=n(NFe,"STRONG",{});var qjr=s(QJ);gKe=r(qjr,"speech_to_text_2"),qjr.forEach(t),hKe=r(NFe," \u2014 "),Dk=n(NFe,"A",{href:!0});var Ojr=s(Dk);pKe=r(Ojr,"Speech2Text2Tokenizer"),Ojr.forEach(t),_Ke=r(NFe," (Speech2Text2 model)"),NFe.forEach(t),uKe=i(y),Ss=n(y,"LI",{});var D8=s(Ss);HJ=n(D8,"STRONG",{});var Gjr=s(HJ);bKe=r(Gjr,"splinter"),Gjr.forEach(t),vKe=r(D8," \u2014 "),qk=n(D8,"A",{href:!0});var Xjr=s(qk);TKe=r(Xjr,"SplinterTokenizer"),Xjr.forEach(t),FKe=r(D8," or "),Ok=n(D8,"A",{href:!0});var Vjr=s(Ok);CKe=r(Vjr,"SplinterTokenizerFast"),Vjr.forEach(t),MKe=r(D8," (Splinter model)"),D8.forEach(t),EKe=i(y),Ps=n(y,"LI",{});var q8=s(Ps);UJ=n(q8,"STRONG",{});var zjr=s(UJ);yKe=r(zjr,"squeezebert"),zjr.forEach(t),wKe=r(q8," \u2014 "),Gk=n(q8,"A",{href:!0});var Wjr=s(Gk);AKe=r(Wjr,"SqueezeBertTokenizer"),Wjr.forEach(t),LKe=r(q8," or "),Xk=n(q8,"A",{href:!0});var Qjr=s(Xk);BKe=r(Qjr,"SqueezeBertTokenizerFast"),Qjr.forEach(t),xKe=r(q8," (SqueezeBERT model)"),q8.forEach(t),kKe=i(y),$s=n(y,"LI",{});var O8=s($s);JJ=n(O8,"STRONG",{});var Hjr=s(JJ);RKe=r(Hjr,"t5"),Hjr.forEach(t),SKe=r(O8," \u2014 "),Vk=n(O8,"A",{href:!0});var Ujr=s(Vk);PKe=r(Ujr,"T5Tokenizer"),Ujr.forEach(t),$Ke=r(O8," or "),zk=n(O8,"A",{href:!0});var Jjr=s(zk);IKe=r(Jjr,"T5TokenizerFast"),Jjr.forEach(t),jKe=r(O8," (T5 model)"),O8.forEach(t),NKe=i(y),rh=n(y,"LI",{});var DFe=s(rh);YJ=n(DFe,"STRONG",{});var Yjr=s(YJ);DKe=r(Yjr,"tapas"),Yjr.forEach(t),qKe=r(DFe," \u2014 "),Wk=n(DFe,"A",{href:!0});var Kjr=s(Wk);OKe=r(Kjr,"TapasTokenizer"),Kjr.forEach(t),GKe=r(DFe," (TAPAS model)"),DFe.forEach(t),XKe=i(y),th=n(y,"LI",{});var qFe=s(th);KJ=n(qFe,"STRONG",{});var Zjr=s(KJ);VKe=r(Zjr,"transfo-xl"),Zjr.forEach(t),zKe=r(qFe," \u2014 "),Qk=n(qFe,"A",{href:!0});var eNr=s(Qk);WKe=r(eNr,"TransfoXLTokenizer"),eNr.forEach(t),QKe=r(qFe," (Transformer-XL model)"),qFe.forEach(t),HKe=i(y),ah=n(y,"LI",{});var OFe=s(ah);ZJ=n(OFe,"STRONG",{});var oNr=s(ZJ);UKe=r(oNr,"wav2vec2"),oNr.forEach(t),JKe=r(OFe," \u2014 "),Hk=n(OFe,"A",{href:!0});var rNr=s(Hk);YKe=r(rNr,"Wav2Vec2CTCTokenizer"),rNr.forEach(t),KKe=r(OFe," (Wav2Vec2 model)"),OFe.forEach(t),ZKe=i(y),nh=n(y,"LI",{});var GFe=s(nh);eY=n(GFe,"STRONG",{});var tNr=s(eY);eZe=r(tNr,"wav2vec2_phoneme"),tNr.forEach(t),oZe=r(GFe," \u2014 "),Uk=n(GFe,"A",{href:!0});var aNr=s(Uk);rZe=r(aNr,"Wav2Vec2PhonemeCTCTokenizer"),aNr.forEach(t),tZe=r(GFe," (Wav2Vec2Phoneme model)"),GFe.forEach(t),aZe=i(y),Is=n(y,"LI",{});var G8=s(Is);oY=n(G8,"STRONG",{});var nNr=s(oY);nZe=r(nNr,"xglm"),nNr.forEach(t),sZe=r(G8," \u2014 "),Jk=n(G8,"A",{href:!0});var sNr=s(Jk);lZe=r(sNr,"XGLMTokenizer"),sNr.forEach(t),iZe=r(G8," or "),Yk=n(G8,"A",{href:!0});var lNr=s(Yk);dZe=r(lNr,"XGLMTokenizerFast"),lNr.forEach(t),cZe=r(G8," (XGLM model)"),G8.forEach(t),fZe=i(y),sh=n(y,"LI",{});var XFe=s(sh);rY=n(XFe,"STRONG",{});var iNr=s(rY);mZe=r(iNr,"xlm"),iNr.forEach(t),gZe=r(XFe," \u2014 "),Kk=n(XFe,"A",{href:!0});var dNr=s(Kk);hZe=r(dNr,"XLMTokenizer"),dNr.forEach(t),pZe=r(XFe," (XLM model)"),XFe.forEach(t),_Ze=i(y),lh=n(y,"LI",{});var VFe=s(lh);tY=n(VFe,"STRONG",{});var cNr=s(tY);uZe=r(cNr,"xlm-prophetnet"),cNr.forEach(t),bZe=r(VFe," \u2014 "),Zk=n(VFe,"A",{href:!0});var fNr=s(Zk);vZe=r(fNr,"XLMProphetNetTokenizer"),fNr.forEach(t),TZe=r(VFe," (XLMProphetNet model)"),VFe.forEach(t),FZe=i(y),js=n(y,"LI",{});var X8=s(js);aY=n(X8,"STRONG",{});var mNr=s(aY);CZe=r(mNr,"xlm-roberta"),mNr.forEach(t),MZe=r(X8," \u2014 "),eR=n(X8,"A",{href:!0});var gNr=s(eR);EZe=r(gNr,"XLMRobertaTokenizer"),gNr.forEach(t),yZe=r(X8," or "),oR=n(X8,"A",{href:!0});var hNr=s(oR);wZe=r(hNr,"XLMRobertaTokenizerFast"),hNr.forEach(t),AZe=r(X8," (XLM-RoBERTa model)"),X8.forEach(t),LZe=i(y),Ns=n(y,"LI",{});var V8=s(Ns);nY=n(V8,"STRONG",{});var pNr=s(nY);BZe=r(pNr,"xlnet"),pNr.forEach(t),xZe=r(V8," \u2014 "),rR=n(V8,"A",{href:!0});var _Nr=s(rR);kZe=r(_Nr,"XLNetTokenizer"),_Nr.forEach(t),RZe=r(V8," or "),tR=n(V8,"A",{href:!0});var uNr=s(tR);SZe=r(uNr,"XLNetTokenizerFast"),uNr.forEach(t),PZe=r(V8," (XLNet model)"),V8.forEach(t),y.forEach(t),$Ze=i(ha),sY=n(ha,"P",{});var bNr=s(sY);IZe=r(bNr,"Examples:"),bNr.forEach(t),jZe=i(ha),m(v3.$$.fragment,ha),ha.forEach(t),NZe=i(Xs),ih=n(Xs,"DIV",{class:!0});var YRe=s(ih);m(T3.$$.fragment,YRe),DZe=i(YRe),lY=n(YRe,"P",{});var vNr=s(lY);qZe=r(vNr,"Register a new tokenizer in this mapping."),vNr.forEach(t),YRe.forEach(t),Xs.forEach(t),Qxe=i(c),Hi=n(c,"H2",{class:!0});var KRe=s(Hi);dh=n(KRe,"A",{id:!0,class:!0,href:!0});var TNr=s(dh);iY=n(TNr,"SPAN",{});var FNr=s(iY);m(F3.$$.fragment,FNr),FNr.forEach(t),TNr.forEach(t),OZe=i(KRe),dY=n(KRe,"SPAN",{});var CNr=s(dY);GZe=r(CNr,"AutoFeatureExtractor"),CNr.forEach(t),KRe.forEach(t),Hxe=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(C3.$$.fragment,Vs),XZe=i(Vs),M3=n(Vs,"P",{});var ZRe=s(M3);VZe=r(ZRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aR=n(ZRe,"A",{href:!0});var MNr=s(aR);zZe=r(MNr,"AutoFeatureExtractor.from_pretrained()"),MNr.forEach(t),WZe=r(ZRe," class method."),ZRe.forEach(t),QZe=i(Vs),E3=n(Vs,"P",{});var eSe=s(E3);HZe=r(eSe,"This class cannot be instantiated directly using "),cY=n(eSe,"CODE",{});var ENr=s(cY);UZe=r(ENr,"__init__()"),ENr.forEach(t),JZe=r(eSe," (throws an error)."),eSe.forEach(t),YZe=i(Vs),Ie=n(Vs,"DIV",{class:!0});var Nt=s(Ie);m(y3.$$.fragment,Nt),KZe=i(Nt),fY=n(Nt,"P",{});var yNr=s(fY);ZZe=r(yNr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yNr.forEach(t),eeo=i(Nt),Xa=n(Nt,"P",{});var aE=s(Xa);oeo=r(aE,"The feature extractor class to instantiate is selected based on the "),mY=n(aE,"CODE",{});var wNr=s(mY);reo=r(wNr,"model_type"),wNr.forEach(t),teo=r(aE,` property of the config object
(either passed as an argument or loaded from `),gY=n(aE,"CODE",{});var ANr=s(gY);aeo=r(ANr,"pretrained_model_name_or_path"),ANr.forEach(t),neo=r(aE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hY=n(aE,"CODE",{});var LNr=s(hY);seo=r(LNr,"pretrained_model_name_or_path"),LNr.forEach(t),leo=r(aE,":"),aE.forEach(t),ieo=i(Nt),re=n(Nt,"UL",{});var ne=s(re);ch=n(ne,"LI",{});var zFe=s(ch);pY=n(zFe,"STRONG",{});var BNr=s(pY);deo=r(BNr,"beit"),BNr.forEach(t),ceo=r(zFe," \u2014 "),nR=n(zFe,"A",{href:!0});var xNr=s(nR);feo=r(xNr,"BeitFeatureExtractor"),xNr.forEach(t),meo=r(zFe," (BEiT model)"),zFe.forEach(t),geo=i(ne),fh=n(ne,"LI",{});var WFe=s(fh);_Y=n(WFe,"STRONG",{});var kNr=s(_Y);heo=r(kNr,"clip"),kNr.forEach(t),peo=r(WFe," \u2014 "),sR=n(WFe,"A",{href:!0});var RNr=s(sR);_eo=r(RNr,"CLIPFeatureExtractor"),RNr.forEach(t),ueo=r(WFe," (CLIP model)"),WFe.forEach(t),beo=i(ne),mh=n(ne,"LI",{});var QFe=s(mh);uY=n(QFe,"STRONG",{});var SNr=s(uY);veo=r(SNr,"convnext"),SNr.forEach(t),Teo=r(QFe," \u2014 "),lR=n(QFe,"A",{href:!0});var PNr=s(lR);Feo=r(PNr,"ConvNextFeatureExtractor"),PNr.forEach(t),Ceo=r(QFe," (ConvNext model)"),QFe.forEach(t),Meo=i(ne),gh=n(ne,"LI",{});var HFe=s(gh);bY=n(HFe,"STRONG",{});var $Nr=s(bY);Eeo=r($Nr,"deit"),$Nr.forEach(t),yeo=r(HFe," \u2014 "),iR=n(HFe,"A",{href:!0});var INr=s(iR);weo=r(INr,"DeiTFeatureExtractor"),INr.forEach(t),Aeo=r(HFe," (DeiT model)"),HFe.forEach(t),Leo=i(ne),hh=n(ne,"LI",{});var UFe=s(hh);vY=n(UFe,"STRONG",{});var jNr=s(vY);Beo=r(jNr,"detr"),jNr.forEach(t),xeo=r(UFe," \u2014 "),dR=n(UFe,"A",{href:!0});var NNr=s(dR);keo=r(NNr,"DetrFeatureExtractor"),NNr.forEach(t),Reo=r(UFe," (DETR model)"),UFe.forEach(t),Seo=i(ne),ph=n(ne,"LI",{});var JFe=s(ph);TY=n(JFe,"STRONG",{});var DNr=s(TY);Peo=r(DNr,"hubert"),DNr.forEach(t),$eo=r(JFe," \u2014 "),cR=n(JFe,"A",{href:!0});var qNr=s(cR);Ieo=r(qNr,"Wav2Vec2FeatureExtractor"),qNr.forEach(t),jeo=r(JFe," (Hubert model)"),JFe.forEach(t),Neo=i(ne),_h=n(ne,"LI",{});var YFe=s(_h);FY=n(YFe,"STRONG",{});var ONr=s(FY);Deo=r(ONr,"layoutlmv2"),ONr.forEach(t),qeo=r(YFe," \u2014 "),fR=n(YFe,"A",{href:!0});var GNr=s(fR);Oeo=r(GNr,"LayoutLMv2FeatureExtractor"),GNr.forEach(t),Geo=r(YFe," (LayoutLMv2 model)"),YFe.forEach(t),Xeo=i(ne),uh=n(ne,"LI",{});var KFe=s(uh);CY=n(KFe,"STRONG",{});var XNr=s(CY);Veo=r(XNr,"maskformer"),XNr.forEach(t),zeo=r(KFe," \u2014 "),mR=n(KFe,"A",{href:!0});var VNr=s(mR);Weo=r(VNr,"MaskFormerFeatureExtractor"),VNr.forEach(t),Qeo=r(KFe," (MaskFormer model)"),KFe.forEach(t),Heo=i(ne),bh=n(ne,"LI",{});var ZFe=s(bh);MY=n(ZFe,"STRONG",{});var zNr=s(MY);Ueo=r(zNr,"perceiver"),zNr.forEach(t),Jeo=r(ZFe," \u2014 "),gR=n(ZFe,"A",{href:!0});var WNr=s(gR);Yeo=r(WNr,"PerceiverFeatureExtractor"),WNr.forEach(t),Keo=r(ZFe," (Perceiver model)"),ZFe.forEach(t),Zeo=i(ne),vh=n(ne,"LI",{});var eCe=s(vh);EY=n(eCe,"STRONG",{});var QNr=s(EY);eoo=r(QNr,"poolformer"),QNr.forEach(t),ooo=r(eCe," \u2014 "),hR=n(eCe,"A",{href:!0});var HNr=s(hR);roo=r(HNr,"PoolFormerFeatureExtractor"),HNr.forEach(t),too=r(eCe," (PoolFormer model)"),eCe.forEach(t),aoo=i(ne),Th=n(ne,"LI",{});var oCe=s(Th);yY=n(oCe,"STRONG",{});var UNr=s(yY);noo=r(UNr,"resnet"),UNr.forEach(t),soo=r(oCe," \u2014 "),pR=n(oCe,"A",{href:!0});var JNr=s(pR);loo=r(JNr,"ConvNextFeatureExtractor"),JNr.forEach(t),ioo=r(oCe," (ResNet model)"),oCe.forEach(t),doo=i(ne),Fh=n(ne,"LI",{});var rCe=s(Fh);wY=n(rCe,"STRONG",{});var YNr=s(wY);coo=r(YNr,"segformer"),YNr.forEach(t),foo=r(rCe," \u2014 "),_R=n(rCe,"A",{href:!0});var KNr=s(_R);moo=r(KNr,"SegformerFeatureExtractor"),KNr.forEach(t),goo=r(rCe," (SegFormer model)"),rCe.forEach(t),hoo=i(ne),Ch=n(ne,"LI",{});var tCe=s(Ch);AY=n(tCe,"STRONG",{});var ZNr=s(AY);poo=r(ZNr,"speech_to_text"),ZNr.forEach(t),_oo=r(tCe," \u2014 "),uR=n(tCe,"A",{href:!0});var eDr=s(uR);uoo=r(eDr,"Speech2TextFeatureExtractor"),eDr.forEach(t),boo=r(tCe," (Speech2Text model)"),tCe.forEach(t),voo=i(ne),Mh=n(ne,"LI",{});var aCe=s(Mh);LY=n(aCe,"STRONG",{});var oDr=s(LY);Too=r(oDr,"swin"),oDr.forEach(t),Foo=r(aCe," \u2014 "),bR=n(aCe,"A",{href:!0});var rDr=s(bR);Coo=r(rDr,"ViTFeatureExtractor"),rDr.forEach(t),Moo=r(aCe," (Swin model)"),aCe.forEach(t),Eoo=i(ne),Eh=n(ne,"LI",{});var nCe=s(Eh);BY=n(nCe,"STRONG",{});var tDr=s(BY);yoo=r(tDr,"van"),tDr.forEach(t),woo=r(nCe," \u2014 "),vR=n(nCe,"A",{href:!0});var aDr=s(vR);Aoo=r(aDr,"ConvNextFeatureExtractor"),aDr.forEach(t),Loo=r(nCe," (VAN model)"),nCe.forEach(t),Boo=i(ne),yh=n(ne,"LI",{});var sCe=s(yh);xY=n(sCe,"STRONG",{});var nDr=s(xY);xoo=r(nDr,"vit"),nDr.forEach(t),koo=r(sCe," \u2014 "),TR=n(sCe,"A",{href:!0});var sDr=s(TR);Roo=r(sDr,"ViTFeatureExtractor"),sDr.forEach(t),Soo=r(sCe," (ViT model)"),sCe.forEach(t),Poo=i(ne),wh=n(ne,"LI",{});var lCe=s(wh);kY=n(lCe,"STRONG",{});var lDr=s(kY);$oo=r(lDr,"vit_mae"),lDr.forEach(t),Ioo=r(lCe," \u2014 "),FR=n(lCe,"A",{href:!0});var iDr=s(FR);joo=r(iDr,"ViTFeatureExtractor"),iDr.forEach(t),Noo=r(lCe," (ViTMAE model)"),lCe.forEach(t),Doo=i(ne),Ah=n(ne,"LI",{});var iCe=s(Ah);RY=n(iCe,"STRONG",{});var dDr=s(RY);qoo=r(dDr,"wav2vec2"),dDr.forEach(t),Ooo=r(iCe," \u2014 "),CR=n(iCe,"A",{href:!0});var cDr=s(CR);Goo=r(cDr,"Wav2Vec2FeatureExtractor"),cDr.forEach(t),Xoo=r(iCe," (Wav2Vec2 model)"),iCe.forEach(t),ne.forEach(t),Voo=i(Nt),m(Lh.$$.fragment,Nt),zoo=i(Nt),SY=n(Nt,"P",{});var fDr=s(SY);Woo=r(fDr,"Examples:"),fDr.forEach(t),Qoo=i(Nt),m(w3.$$.fragment,Nt),Nt.forEach(t),Hoo=i(Vs),Bh=n(Vs,"DIV",{class:!0});var oSe=s(Bh);m(A3.$$.fragment,oSe),Uoo=i(oSe),PY=n(oSe,"P",{});var mDr=s(PY);Joo=r(mDr,"Register a new feature extractor for this class."),mDr.forEach(t),oSe.forEach(t),Vs.forEach(t),Uxe=i(c),Ui=n(c,"H2",{class:!0});var rSe=s(Ui);xh=n(rSe,"A",{id:!0,class:!0,href:!0});var gDr=s(xh);$Y=n(gDr,"SPAN",{});var hDr=s($Y);m(L3.$$.fragment,hDr),hDr.forEach(t),gDr.forEach(t),Yoo=i(rSe),IY=n(rSe,"SPAN",{});var pDr=s(IY);Koo=r(pDr,"AutoProcessor"),pDr.forEach(t),rSe.forEach(t),Jxe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(B3.$$.fragment,zs),Zoo=i(zs),x3=n(zs,"P",{});var tSe=s(x3);ero=r(tSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MR=n(tSe,"A",{href:!0});var _Dr=s(MR);oro=r(_Dr,"AutoProcessor.from_pretrained()"),_Dr.forEach(t),rro=r(tSe," class method."),tSe.forEach(t),tro=i(zs),k3=n(zs,"P",{});var aSe=s(k3);aro=r(aSe,"This class cannot be instantiated directly using "),jY=n(aSe,"CODE",{});var uDr=s(jY);nro=r(uDr,"__init__()"),uDr.forEach(t),sro=r(aSe," (throws an error)."),aSe.forEach(t),lro=i(zs),je=n(zs,"DIV",{class:!0});var Dt=s(je);m(R3.$$.fragment,Dt),iro=i(Dt),NY=n(Dt,"P",{});var bDr=s(NY);dro=r(bDr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bDr.forEach(t),cro=i(Dt),Ji=n(Dt,"P",{});var qz=s(Ji);fro=r(qz,"The processor class to instantiate is selected based on the "),DY=n(qz,"CODE",{});var vDr=s(DY);mro=r(vDr,"model_type"),vDr.forEach(t),gro=r(qz,` property of the config object (either
passed as an argument or loaded from `),qY=n(qz,"CODE",{});var TDr=s(qY);hro=r(TDr,"pretrained_model_name_or_path"),TDr.forEach(t),pro=r(qz," if possible):"),qz.forEach(t),_ro=i(Dt),xe=n(Dt,"UL",{});var Do=s(xe);kh=n(Do,"LI",{});var dCe=s(kh);OY=n(dCe,"STRONG",{});var FDr=s(OY);uro=r(FDr,"clip"),FDr.forEach(t),bro=r(dCe," \u2014 "),ER=n(dCe,"A",{href:!0});var CDr=s(ER);vro=r(CDr,"CLIPProcessor"),CDr.forEach(t),Tro=r(dCe," (CLIP model)"),dCe.forEach(t),Fro=i(Do),Rh=n(Do,"LI",{});var cCe=s(Rh);GY=n(cCe,"STRONG",{});var MDr=s(GY);Cro=r(MDr,"layoutlmv2"),MDr.forEach(t),Mro=r(cCe," \u2014 "),yR=n(cCe,"A",{href:!0});var EDr=s(yR);Ero=r(EDr,"LayoutLMv2Processor"),EDr.forEach(t),yro=r(cCe," (LayoutLMv2 model)"),cCe.forEach(t),wro=i(Do),Sh=n(Do,"LI",{});var fCe=s(Sh);XY=n(fCe,"STRONG",{});var yDr=s(XY);Aro=r(yDr,"layoutxlm"),yDr.forEach(t),Lro=r(fCe," \u2014 "),wR=n(fCe,"A",{href:!0});var wDr=s(wR);Bro=r(wDr,"LayoutXLMProcessor"),wDr.forEach(t),xro=r(fCe," (LayoutXLM model)"),fCe.forEach(t),kro=i(Do),Ph=n(Do,"LI",{});var mCe=s(Ph);VY=n(mCe,"STRONG",{});var ADr=s(VY);Rro=r(ADr,"speech_to_text"),ADr.forEach(t),Sro=r(mCe," \u2014 "),AR=n(mCe,"A",{href:!0});var LDr=s(AR);Pro=r(LDr,"Speech2TextProcessor"),LDr.forEach(t),$ro=r(mCe," (Speech2Text model)"),mCe.forEach(t),Iro=i(Do),$h=n(Do,"LI",{});var gCe=s($h);zY=n(gCe,"STRONG",{});var BDr=s(zY);jro=r(BDr,"speech_to_text_2"),BDr.forEach(t),Nro=r(gCe," \u2014 "),LR=n(gCe,"A",{href:!0});var xDr=s(LR);Dro=r(xDr,"Speech2Text2Processor"),xDr.forEach(t),qro=r(gCe," (Speech2Text2 model)"),gCe.forEach(t),Oro=i(Do),Ih=n(Do,"LI",{});var hCe=s(Ih);WY=n(hCe,"STRONG",{});var kDr=s(WY);Gro=r(kDr,"trocr"),kDr.forEach(t),Xro=r(hCe," \u2014 "),BR=n(hCe,"A",{href:!0});var RDr=s(BR);Vro=r(RDr,"TrOCRProcessor"),RDr.forEach(t),zro=r(hCe," (TrOCR model)"),hCe.forEach(t),Wro=i(Do),jh=n(Do,"LI",{});var pCe=s(jh);QY=n(pCe,"STRONG",{});var SDr=s(QY);Qro=r(SDr,"vision-text-dual-encoder"),SDr.forEach(t),Hro=r(pCe," \u2014 "),xR=n(pCe,"A",{href:!0});var PDr=s(xR);Uro=r(PDr,"VisionTextDualEncoderProcessor"),PDr.forEach(t),Jro=r(pCe," (VisionTextDualEncoder model)"),pCe.forEach(t),Yro=i(Do),Nh=n(Do,"LI",{});var _Ce=s(Nh);HY=n(_Ce,"STRONG",{});var $Dr=s(HY);Kro=r($Dr,"wav2vec2"),$Dr.forEach(t),Zro=r(_Ce," \u2014 "),kR=n(_Ce,"A",{href:!0});var IDr=s(kR);eto=r(IDr,"Wav2Vec2Processor"),IDr.forEach(t),oto=r(_Ce," (Wav2Vec2 model)"),_Ce.forEach(t),Do.forEach(t),rto=i(Dt),m(Dh.$$.fragment,Dt),tto=i(Dt),UY=n(Dt,"P",{});var jDr=s(UY);ato=r(jDr,"Examples:"),jDr.forEach(t),nto=i(Dt),m(S3.$$.fragment,Dt),Dt.forEach(t),sto=i(zs),qh=n(zs,"DIV",{class:!0});var nSe=s(qh);m(P3.$$.fragment,nSe),lto=i(nSe),JY=n(nSe,"P",{});var NDr=s(JY);ito=r(NDr,"Register a new processor for this class."),NDr.forEach(t),nSe.forEach(t),zs.forEach(t),Yxe=i(c),Yi=n(c,"H2",{class:!0});var sSe=s(Yi);Oh=n(sSe,"A",{id:!0,class:!0,href:!0});var DDr=s(Oh);YY=n(DDr,"SPAN",{});var qDr=s(YY);m($3.$$.fragment,qDr),qDr.forEach(t),DDr.forEach(t),dto=i(sSe),KY=n(sSe,"SPAN",{});var ODr=s(KY);cto=r(ODr,"AutoModel"),ODr.forEach(t),sSe.forEach(t),Kxe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(I3.$$.fragment,Ws),fto=i(Ws),Ki=n(Ws,"P",{});var Oz=s(Ki);mto=r(Oz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZY=n(Oz,"CODE",{});var GDr=s(ZY);gto=r(GDr,"from_pretrained()"),GDr.forEach(t),hto=r(Oz,"class method or the "),eK=n(Oz,"CODE",{});var XDr=s(eK);pto=r(XDr,"from_config()"),XDr.forEach(t),_to=r(Oz,`class
method.`),Oz.forEach(t),uto=i(Ws),j3=n(Ws,"P",{});var lSe=s(j3);bto=r(lSe,"This class cannot be instantiated directly using "),oK=n(lSe,"CODE",{});var VDr=s(oK);vto=r(VDr,"__init__()"),VDr.forEach(t),Tto=r(lSe," (throws an error)."),lSe.forEach(t),Fto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(N3.$$.fragment,Qs),Cto=i(Qs),rK=n(Qs,"P",{});var zDr=s(rK);Mto=r(zDr,"Instantiates one of the base model classes of the library from a configuration."),zDr.forEach(t),Eto=i(Qs),Zi=n(Qs,"P",{});var Gz=s(Zi);yto=r(Gz,`Note:
Loading a model from its configuration file does `),tK=n(Gz,"STRONG",{});var WDr=s(tK);wto=r(WDr,"not"),WDr.forEach(t),Ato=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(Gz,"CODE",{});var QDr=s(aK);Lto=r(QDr,"from_pretrained()"),QDr.forEach(t),Bto=r(Gz,"to load the model weights."),Gz.forEach(t),xto=i(Qs),nK=n(Qs,"P",{});var HDr=s(nK);kto=r(HDr,"Examples:"),HDr.forEach(t),Rto=i(Qs),m(D3.$$.fragment,Qs),Qs.forEach(t),Sto=i(Ws),Ne=n(Ws,"DIV",{class:!0});var qt=s(Ne);m(q3.$$.fragment,qt),Pto=i(qt),sK=n(qt,"P",{});var UDr=s(sK);$to=r(UDr,"Instantiate one of the base model classes of the library from a pretrained model."),UDr.forEach(t),Ito=i(qt),Va=n(qt,"P",{});var nE=s(Va);jto=r(nE,"The model class to instantiate is selected based on the "),lK=n(nE,"CODE",{});var JDr=s(lK);Nto=r(JDr,"model_type"),JDr.forEach(t),Dto=r(nE,` property of the config object (either
passed as an argument or loaded from `),iK=n(nE,"CODE",{});var YDr=s(iK);qto=r(YDr,"pretrained_model_name_or_path"),YDr.forEach(t),Oto=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dK=n(nE,"CODE",{});var KDr=s(dK);Gto=r(KDr,"pretrained_model_name_or_path"),KDr.forEach(t),Xto=r(nE,":"),nE.forEach(t),Vto=i(qt),F=n(qt,"UL",{});var C=s(F);Gh=n(C,"LI",{});var uCe=s(Gh);cK=n(uCe,"STRONG",{});var ZDr=s(cK);zto=r(ZDr,"albert"),ZDr.forEach(t),Wto=r(uCe," \u2014 "),RR=n(uCe,"A",{href:!0});var eqr=s(RR);Qto=r(eqr,"AlbertModel"),eqr.forEach(t),Hto=r(uCe," (ALBERT model)"),uCe.forEach(t),Uto=i(C),Xh=n(C,"LI",{});var bCe=s(Xh);fK=n(bCe,"STRONG",{});var oqr=s(fK);Jto=r(oqr,"bart"),oqr.forEach(t),Yto=r(bCe," \u2014 "),SR=n(bCe,"A",{href:!0});var rqr=s(SR);Kto=r(rqr,"BartModel"),rqr.forEach(t),Zto=r(bCe," (BART model)"),bCe.forEach(t),eao=i(C),Vh=n(C,"LI",{});var vCe=s(Vh);mK=n(vCe,"STRONG",{});var tqr=s(mK);oao=r(tqr,"beit"),tqr.forEach(t),rao=r(vCe," \u2014 "),PR=n(vCe,"A",{href:!0});var aqr=s(PR);tao=r(aqr,"BeitModel"),aqr.forEach(t),aao=r(vCe," (BEiT model)"),vCe.forEach(t),nao=i(C),zh=n(C,"LI",{});var TCe=s(zh);gK=n(TCe,"STRONG",{});var nqr=s(gK);sao=r(nqr,"bert"),nqr.forEach(t),lao=r(TCe," \u2014 "),$R=n(TCe,"A",{href:!0});var sqr=s($R);iao=r(sqr,"BertModel"),sqr.forEach(t),dao=r(TCe," (BERT model)"),TCe.forEach(t),cao=i(C),Wh=n(C,"LI",{});var FCe=s(Wh);hK=n(FCe,"STRONG",{});var lqr=s(hK);fao=r(lqr,"bert-generation"),lqr.forEach(t),mao=r(FCe," \u2014 "),IR=n(FCe,"A",{href:!0});var iqr=s(IR);gao=r(iqr,"BertGenerationEncoder"),iqr.forEach(t),hao=r(FCe," (Bert Generation model)"),FCe.forEach(t),pao=i(C),Qh=n(C,"LI",{});var CCe=s(Qh);pK=n(CCe,"STRONG",{});var dqr=s(pK);_ao=r(dqr,"big_bird"),dqr.forEach(t),uao=r(CCe," \u2014 "),jR=n(CCe,"A",{href:!0});var cqr=s(jR);bao=r(cqr,"BigBirdModel"),cqr.forEach(t),vao=r(CCe," (BigBird model)"),CCe.forEach(t),Tao=i(C),Hh=n(C,"LI",{});var MCe=s(Hh);_K=n(MCe,"STRONG",{});var fqr=s(_K);Fao=r(fqr,"bigbird_pegasus"),fqr.forEach(t),Cao=r(MCe," \u2014 "),NR=n(MCe,"A",{href:!0});var mqr=s(NR);Mao=r(mqr,"BigBirdPegasusModel"),mqr.forEach(t),Eao=r(MCe," (BigBirdPegasus model)"),MCe.forEach(t),yao=i(C),Uh=n(C,"LI",{});var ECe=s(Uh);uK=n(ECe,"STRONG",{});var gqr=s(uK);wao=r(gqr,"blenderbot"),gqr.forEach(t),Aao=r(ECe," \u2014 "),DR=n(ECe,"A",{href:!0});var hqr=s(DR);Lao=r(hqr,"BlenderbotModel"),hqr.forEach(t),Bao=r(ECe," (Blenderbot model)"),ECe.forEach(t),xao=i(C),Jh=n(C,"LI",{});var yCe=s(Jh);bK=n(yCe,"STRONG",{});var pqr=s(bK);kao=r(pqr,"blenderbot-small"),pqr.forEach(t),Rao=r(yCe," \u2014 "),qR=n(yCe,"A",{href:!0});var _qr=s(qR);Sao=r(_qr,"BlenderbotSmallModel"),_qr.forEach(t),Pao=r(yCe," (BlenderbotSmall model)"),yCe.forEach(t),$ao=i(C),Yh=n(C,"LI",{});var wCe=s(Yh);vK=n(wCe,"STRONG",{});var uqr=s(vK);Iao=r(uqr,"camembert"),uqr.forEach(t),jao=r(wCe," \u2014 "),OR=n(wCe,"A",{href:!0});var bqr=s(OR);Nao=r(bqr,"CamembertModel"),bqr.forEach(t),Dao=r(wCe," (CamemBERT model)"),wCe.forEach(t),qao=i(C),Kh=n(C,"LI",{});var ACe=s(Kh);TK=n(ACe,"STRONG",{});var vqr=s(TK);Oao=r(vqr,"canine"),vqr.forEach(t),Gao=r(ACe," \u2014 "),GR=n(ACe,"A",{href:!0});var Tqr=s(GR);Xao=r(Tqr,"CanineModel"),Tqr.forEach(t),Vao=r(ACe," (Canine model)"),ACe.forEach(t),zao=i(C),Zh=n(C,"LI",{});var LCe=s(Zh);FK=n(LCe,"STRONG",{});var Fqr=s(FK);Wao=r(Fqr,"clip"),Fqr.forEach(t),Qao=r(LCe," \u2014 "),XR=n(LCe,"A",{href:!0});var Cqr=s(XR);Hao=r(Cqr,"CLIPModel"),Cqr.forEach(t),Uao=r(LCe," (CLIP model)"),LCe.forEach(t),Jao=i(C),ep=n(C,"LI",{});var BCe=s(ep);CK=n(BCe,"STRONG",{});var Mqr=s(CK);Yao=r(Mqr,"convbert"),Mqr.forEach(t),Kao=r(BCe," \u2014 "),VR=n(BCe,"A",{href:!0});var Eqr=s(VR);Zao=r(Eqr,"ConvBertModel"),Eqr.forEach(t),eno=r(BCe," (ConvBERT model)"),BCe.forEach(t),ono=i(C),op=n(C,"LI",{});var xCe=s(op);MK=n(xCe,"STRONG",{});var yqr=s(MK);rno=r(yqr,"convnext"),yqr.forEach(t),tno=r(xCe," \u2014 "),zR=n(xCe,"A",{href:!0});var wqr=s(zR);ano=r(wqr,"ConvNextModel"),wqr.forEach(t),nno=r(xCe," (ConvNext model)"),xCe.forEach(t),sno=i(C),rp=n(C,"LI",{});var kCe=s(rp);EK=n(kCe,"STRONG",{});var Aqr=s(EK);lno=r(Aqr,"ctrl"),Aqr.forEach(t),ino=r(kCe," \u2014 "),WR=n(kCe,"A",{href:!0});var Lqr=s(WR);dno=r(Lqr,"CTRLModel"),Lqr.forEach(t),cno=r(kCe," (CTRL model)"),kCe.forEach(t),fno=i(C),tp=n(C,"LI",{});var RCe=s(tp);yK=n(RCe,"STRONG",{});var Bqr=s(yK);mno=r(Bqr,"data2vec-audio"),Bqr.forEach(t),gno=r(RCe," \u2014 "),QR=n(RCe,"A",{href:!0});var xqr=s(QR);hno=r(xqr,"Data2VecAudioModel"),xqr.forEach(t),pno=r(RCe," (Data2VecAudio model)"),RCe.forEach(t),_no=i(C),ap=n(C,"LI",{});var SCe=s(ap);wK=n(SCe,"STRONG",{});var kqr=s(wK);uno=r(kqr,"data2vec-text"),kqr.forEach(t),bno=r(SCe," \u2014 "),HR=n(SCe,"A",{href:!0});var Rqr=s(HR);vno=r(Rqr,"Data2VecTextModel"),Rqr.forEach(t),Tno=r(SCe," (Data2VecText model)"),SCe.forEach(t),Fno=i(C),np=n(C,"LI",{});var PCe=s(np);AK=n(PCe,"STRONG",{});var Sqr=s(AK);Cno=r(Sqr,"deberta"),Sqr.forEach(t),Mno=r(PCe," \u2014 "),UR=n(PCe,"A",{href:!0});var Pqr=s(UR);Eno=r(Pqr,"DebertaModel"),Pqr.forEach(t),yno=r(PCe," (DeBERTa model)"),PCe.forEach(t),wno=i(C),sp=n(C,"LI",{});var $Ce=s(sp);LK=n($Ce,"STRONG",{});var $qr=s(LK);Ano=r($qr,"deberta-v2"),$qr.forEach(t),Lno=r($Ce," \u2014 "),JR=n($Ce,"A",{href:!0});var Iqr=s(JR);Bno=r(Iqr,"DebertaV2Model"),Iqr.forEach(t),xno=r($Ce," (DeBERTa-v2 model)"),$Ce.forEach(t),kno=i(C),lp=n(C,"LI",{});var ICe=s(lp);BK=n(ICe,"STRONG",{});var jqr=s(BK);Rno=r(jqr,"deit"),jqr.forEach(t),Sno=r(ICe," \u2014 "),YR=n(ICe,"A",{href:!0});var Nqr=s(YR);Pno=r(Nqr,"DeiTModel"),Nqr.forEach(t),$no=r(ICe," (DeiT model)"),ICe.forEach(t),Ino=i(C),ip=n(C,"LI",{});var jCe=s(ip);xK=n(jCe,"STRONG",{});var Dqr=s(xK);jno=r(Dqr,"detr"),Dqr.forEach(t),Nno=r(jCe," \u2014 "),KR=n(jCe,"A",{href:!0});var qqr=s(KR);Dno=r(qqr,"DetrModel"),qqr.forEach(t),qno=r(jCe," (DETR model)"),jCe.forEach(t),Ono=i(C),dp=n(C,"LI",{});var NCe=s(dp);kK=n(NCe,"STRONG",{});var Oqr=s(kK);Gno=r(Oqr,"distilbert"),Oqr.forEach(t),Xno=r(NCe," \u2014 "),ZR=n(NCe,"A",{href:!0});var Gqr=s(ZR);Vno=r(Gqr,"DistilBertModel"),Gqr.forEach(t),zno=r(NCe," (DistilBERT model)"),NCe.forEach(t),Wno=i(C),cp=n(C,"LI",{});var DCe=s(cp);RK=n(DCe,"STRONG",{});var Xqr=s(RK);Qno=r(Xqr,"dpr"),Xqr.forEach(t),Hno=r(DCe," \u2014 "),eS=n(DCe,"A",{href:!0});var Vqr=s(eS);Uno=r(Vqr,"DPRQuestionEncoder"),Vqr.forEach(t),Jno=r(DCe," (DPR model)"),DCe.forEach(t),Yno=i(C),fp=n(C,"LI",{});var qCe=s(fp);SK=n(qCe,"STRONG",{});var zqr=s(SK);Kno=r(zqr,"electra"),zqr.forEach(t),Zno=r(qCe," \u2014 "),oS=n(qCe,"A",{href:!0});var Wqr=s(oS);eso=r(Wqr,"ElectraModel"),Wqr.forEach(t),oso=r(qCe," (ELECTRA model)"),qCe.forEach(t),rso=i(C),mp=n(C,"LI",{});var OCe=s(mp);PK=n(OCe,"STRONG",{});var Qqr=s(PK);tso=r(Qqr,"flaubert"),Qqr.forEach(t),aso=r(OCe," \u2014 "),rS=n(OCe,"A",{href:!0});var Hqr=s(rS);nso=r(Hqr,"FlaubertModel"),Hqr.forEach(t),sso=r(OCe," (FlauBERT model)"),OCe.forEach(t),lso=i(C),gp=n(C,"LI",{});var GCe=s(gp);$K=n(GCe,"STRONG",{});var Uqr=s($K);iso=r(Uqr,"fnet"),Uqr.forEach(t),dso=r(GCe," \u2014 "),tS=n(GCe,"A",{href:!0});var Jqr=s(tS);cso=r(Jqr,"FNetModel"),Jqr.forEach(t),fso=r(GCe," (FNet model)"),GCe.forEach(t),mso=i(C),hp=n(C,"LI",{});var XCe=s(hp);IK=n(XCe,"STRONG",{});var Yqr=s(IK);gso=r(Yqr,"fsmt"),Yqr.forEach(t),hso=r(XCe," \u2014 "),aS=n(XCe,"A",{href:!0});var Kqr=s(aS);pso=r(Kqr,"FSMTModel"),Kqr.forEach(t),_so=r(XCe," (FairSeq Machine-Translation model)"),XCe.forEach(t),uso=i(C),Ds=n(C,"LI",{});var z8=s(Ds);jK=n(z8,"STRONG",{});var Zqr=s(jK);bso=r(Zqr,"funnel"),Zqr.forEach(t),vso=r(z8," \u2014 "),nS=n(z8,"A",{href:!0});var eOr=s(nS);Tso=r(eOr,"FunnelModel"),eOr.forEach(t),Fso=r(z8," or "),sS=n(z8,"A",{href:!0});var oOr=s(sS);Cso=r(oOr,"FunnelBaseModel"),oOr.forEach(t),Mso=r(z8," (Funnel Transformer model)"),z8.forEach(t),Eso=i(C),pp=n(C,"LI",{});var VCe=s(pp);NK=n(VCe,"STRONG",{});var rOr=s(NK);yso=r(rOr,"gpt2"),rOr.forEach(t),wso=r(VCe," \u2014 "),lS=n(VCe,"A",{href:!0});var tOr=s(lS);Aso=r(tOr,"GPT2Model"),tOr.forEach(t),Lso=r(VCe," (OpenAI GPT-2 model)"),VCe.forEach(t),Bso=i(C),_p=n(C,"LI",{});var zCe=s(_p);DK=n(zCe,"STRONG",{});var aOr=s(DK);xso=r(aOr,"gpt_neo"),aOr.forEach(t),kso=r(zCe," \u2014 "),iS=n(zCe,"A",{href:!0});var nOr=s(iS);Rso=r(nOr,"GPTNeoModel"),nOr.forEach(t),Sso=r(zCe," (GPT Neo model)"),zCe.forEach(t),Pso=i(C),up=n(C,"LI",{});var WCe=s(up);qK=n(WCe,"STRONG",{});var sOr=s(qK);$so=r(sOr,"gptj"),sOr.forEach(t),Iso=r(WCe," \u2014 "),dS=n(WCe,"A",{href:!0});var lOr=s(dS);jso=r(lOr,"GPTJModel"),lOr.forEach(t),Nso=r(WCe," (GPT-J model)"),WCe.forEach(t),Dso=i(C),bp=n(C,"LI",{});var QCe=s(bp);OK=n(QCe,"STRONG",{});var iOr=s(OK);qso=r(iOr,"hubert"),iOr.forEach(t),Oso=r(QCe," \u2014 "),cS=n(QCe,"A",{href:!0});var dOr=s(cS);Gso=r(dOr,"HubertModel"),dOr.forEach(t),Xso=r(QCe," (Hubert model)"),QCe.forEach(t),Vso=i(C),vp=n(C,"LI",{});var HCe=s(vp);GK=n(HCe,"STRONG",{});var cOr=s(GK);zso=r(cOr,"ibert"),cOr.forEach(t),Wso=r(HCe," \u2014 "),fS=n(HCe,"A",{href:!0});var fOr=s(fS);Qso=r(fOr,"IBertModel"),fOr.forEach(t),Hso=r(HCe," (I-BERT model)"),HCe.forEach(t),Uso=i(C),Tp=n(C,"LI",{});var UCe=s(Tp);XK=n(UCe,"STRONG",{});var mOr=s(XK);Jso=r(mOr,"imagegpt"),mOr.forEach(t),Yso=r(UCe," \u2014 "),mS=n(UCe,"A",{href:!0});var gOr=s(mS);Kso=r(gOr,"ImageGPTModel"),gOr.forEach(t),Zso=r(UCe," (ImageGPT model)"),UCe.forEach(t),elo=i(C),Fp=n(C,"LI",{});var JCe=s(Fp);VK=n(JCe,"STRONG",{});var hOr=s(VK);olo=r(hOr,"layoutlm"),hOr.forEach(t),rlo=r(JCe," \u2014 "),gS=n(JCe,"A",{href:!0});var pOr=s(gS);tlo=r(pOr,"LayoutLMModel"),pOr.forEach(t),alo=r(JCe," (LayoutLM model)"),JCe.forEach(t),nlo=i(C),Cp=n(C,"LI",{});var YCe=s(Cp);zK=n(YCe,"STRONG",{});var _Or=s(zK);slo=r(_Or,"layoutlmv2"),_Or.forEach(t),llo=r(YCe," \u2014 "),hS=n(YCe,"A",{href:!0});var uOr=s(hS);ilo=r(uOr,"LayoutLMv2Model"),uOr.forEach(t),dlo=r(YCe," (LayoutLMv2 model)"),YCe.forEach(t),clo=i(C),Mp=n(C,"LI",{});var KCe=s(Mp);WK=n(KCe,"STRONG",{});var bOr=s(WK);flo=r(bOr,"led"),bOr.forEach(t),mlo=r(KCe," \u2014 "),pS=n(KCe,"A",{href:!0});var vOr=s(pS);glo=r(vOr,"LEDModel"),vOr.forEach(t),hlo=r(KCe," (LED model)"),KCe.forEach(t),plo=i(C),Ep=n(C,"LI",{});var ZCe=s(Ep);QK=n(ZCe,"STRONG",{});var TOr=s(QK);_lo=r(TOr,"longformer"),TOr.forEach(t),ulo=r(ZCe," \u2014 "),_S=n(ZCe,"A",{href:!0});var FOr=s(_S);blo=r(FOr,"LongformerModel"),FOr.forEach(t),vlo=r(ZCe," (Longformer model)"),ZCe.forEach(t),Tlo=i(C),yp=n(C,"LI",{});var eMe=s(yp);HK=n(eMe,"STRONG",{});var COr=s(HK);Flo=r(COr,"luke"),COr.forEach(t),Clo=r(eMe," \u2014 "),uS=n(eMe,"A",{href:!0});var MOr=s(uS);Mlo=r(MOr,"LukeModel"),MOr.forEach(t),Elo=r(eMe," (LUKE model)"),eMe.forEach(t),ylo=i(C),wp=n(C,"LI",{});var oMe=s(wp);UK=n(oMe,"STRONG",{});var EOr=s(UK);wlo=r(EOr,"lxmert"),EOr.forEach(t),Alo=r(oMe," \u2014 "),bS=n(oMe,"A",{href:!0});var yOr=s(bS);Llo=r(yOr,"LxmertModel"),yOr.forEach(t),Blo=r(oMe," (LXMERT model)"),oMe.forEach(t),xlo=i(C),Ap=n(C,"LI",{});var rMe=s(Ap);JK=n(rMe,"STRONG",{});var wOr=s(JK);klo=r(wOr,"m2m_100"),wOr.forEach(t),Rlo=r(rMe," \u2014 "),vS=n(rMe,"A",{href:!0});var AOr=s(vS);Slo=r(AOr,"M2M100Model"),AOr.forEach(t),Plo=r(rMe," (M2M100 model)"),rMe.forEach(t),$lo=i(C),Lp=n(C,"LI",{});var tMe=s(Lp);YK=n(tMe,"STRONG",{});var LOr=s(YK);Ilo=r(LOr,"marian"),LOr.forEach(t),jlo=r(tMe," \u2014 "),TS=n(tMe,"A",{href:!0});var BOr=s(TS);Nlo=r(BOr,"MarianModel"),BOr.forEach(t),Dlo=r(tMe," (Marian model)"),tMe.forEach(t),qlo=i(C),Bp=n(C,"LI",{});var aMe=s(Bp);KK=n(aMe,"STRONG",{});var xOr=s(KK);Olo=r(xOr,"maskformer"),xOr.forEach(t),Glo=r(aMe," \u2014 "),FS=n(aMe,"A",{href:!0});var kOr=s(FS);Xlo=r(kOr,"MaskFormerModel"),kOr.forEach(t),Vlo=r(aMe," (MaskFormer model)"),aMe.forEach(t),zlo=i(C),xp=n(C,"LI",{});var nMe=s(xp);ZK=n(nMe,"STRONG",{});var ROr=s(ZK);Wlo=r(ROr,"mbart"),ROr.forEach(t),Qlo=r(nMe," \u2014 "),CS=n(nMe,"A",{href:!0});var SOr=s(CS);Hlo=r(SOr,"MBartModel"),SOr.forEach(t),Ulo=r(nMe," (mBART model)"),nMe.forEach(t),Jlo=i(C),kp=n(C,"LI",{});var sMe=s(kp);eZ=n(sMe,"STRONG",{});var POr=s(eZ);Ylo=r(POr,"megatron-bert"),POr.forEach(t),Klo=r(sMe," \u2014 "),MS=n(sMe,"A",{href:!0});var $Or=s(MS);Zlo=r($Or,"MegatronBertModel"),$Or.forEach(t),eio=r(sMe," (MegatronBert model)"),sMe.forEach(t),oio=i(C),Rp=n(C,"LI",{});var lMe=s(Rp);oZ=n(lMe,"STRONG",{});var IOr=s(oZ);rio=r(IOr,"mobilebert"),IOr.forEach(t),tio=r(lMe," \u2014 "),ES=n(lMe,"A",{href:!0});var jOr=s(ES);aio=r(jOr,"MobileBertModel"),jOr.forEach(t),nio=r(lMe," (MobileBERT model)"),lMe.forEach(t),sio=i(C),Sp=n(C,"LI",{});var iMe=s(Sp);rZ=n(iMe,"STRONG",{});var NOr=s(rZ);lio=r(NOr,"mpnet"),NOr.forEach(t),iio=r(iMe," \u2014 "),yS=n(iMe,"A",{href:!0});var DOr=s(yS);dio=r(DOr,"MPNetModel"),DOr.forEach(t),cio=r(iMe," (MPNet model)"),iMe.forEach(t),fio=i(C),Pp=n(C,"LI",{});var dMe=s(Pp);tZ=n(dMe,"STRONG",{});var qOr=s(tZ);mio=r(qOr,"mt5"),qOr.forEach(t),gio=r(dMe," \u2014 "),wS=n(dMe,"A",{href:!0});var OOr=s(wS);hio=r(OOr,"MT5Model"),OOr.forEach(t),pio=r(dMe," (mT5 model)"),dMe.forEach(t),_io=i(C),$p=n(C,"LI",{});var cMe=s($p);aZ=n(cMe,"STRONG",{});var GOr=s(aZ);uio=r(GOr,"nystromformer"),GOr.forEach(t),bio=r(cMe," \u2014 "),AS=n(cMe,"A",{href:!0});var XOr=s(AS);vio=r(XOr,"NystromformerModel"),XOr.forEach(t),Tio=r(cMe," (Nystromformer model)"),cMe.forEach(t),Fio=i(C),Ip=n(C,"LI",{});var fMe=s(Ip);nZ=n(fMe,"STRONG",{});var VOr=s(nZ);Cio=r(VOr,"openai-gpt"),VOr.forEach(t),Mio=r(fMe," \u2014 "),LS=n(fMe,"A",{href:!0});var zOr=s(LS);Eio=r(zOr,"OpenAIGPTModel"),zOr.forEach(t),yio=r(fMe," (OpenAI GPT model)"),fMe.forEach(t),wio=i(C),jp=n(C,"LI",{});var mMe=s(jp);sZ=n(mMe,"STRONG",{});var WOr=s(sZ);Aio=r(WOr,"pegasus"),WOr.forEach(t),Lio=r(mMe," \u2014 "),BS=n(mMe,"A",{href:!0});var QOr=s(BS);Bio=r(QOr,"PegasusModel"),QOr.forEach(t),xio=r(mMe," (Pegasus model)"),mMe.forEach(t),kio=i(C),Np=n(C,"LI",{});var gMe=s(Np);lZ=n(gMe,"STRONG",{});var HOr=s(lZ);Rio=r(HOr,"perceiver"),HOr.forEach(t),Sio=r(gMe," \u2014 "),xS=n(gMe,"A",{href:!0});var UOr=s(xS);Pio=r(UOr,"PerceiverModel"),UOr.forEach(t),$io=r(gMe," (Perceiver model)"),gMe.forEach(t),Iio=i(C),Dp=n(C,"LI",{});var hMe=s(Dp);iZ=n(hMe,"STRONG",{});var JOr=s(iZ);jio=r(JOr,"plbart"),JOr.forEach(t),Nio=r(hMe," \u2014 "),kS=n(hMe,"A",{href:!0});var YOr=s(kS);Dio=r(YOr,"PLBartModel"),YOr.forEach(t),qio=r(hMe," (PLBart model)"),hMe.forEach(t),Oio=i(C),qp=n(C,"LI",{});var pMe=s(qp);dZ=n(pMe,"STRONG",{});var KOr=s(dZ);Gio=r(KOr,"poolformer"),KOr.forEach(t),Xio=r(pMe," \u2014 "),RS=n(pMe,"A",{href:!0});var ZOr=s(RS);Vio=r(ZOr,"PoolFormerModel"),ZOr.forEach(t),zio=r(pMe," (PoolFormer model)"),pMe.forEach(t),Wio=i(C),Op=n(C,"LI",{});var _Me=s(Op);cZ=n(_Me,"STRONG",{});var eGr=s(cZ);Qio=r(eGr,"prophetnet"),eGr.forEach(t),Hio=r(_Me," \u2014 "),SS=n(_Me,"A",{href:!0});var oGr=s(SS);Uio=r(oGr,"ProphetNetModel"),oGr.forEach(t),Jio=r(_Me," (ProphetNet model)"),_Me.forEach(t),Yio=i(C),Gp=n(C,"LI",{});var uMe=s(Gp);fZ=n(uMe,"STRONG",{});var rGr=s(fZ);Kio=r(rGr,"qdqbert"),rGr.forEach(t),Zio=r(uMe," \u2014 "),PS=n(uMe,"A",{href:!0});var tGr=s(PS);edo=r(tGr,"QDQBertModel"),tGr.forEach(t),odo=r(uMe," (QDQBert model)"),uMe.forEach(t),rdo=i(C),Xp=n(C,"LI",{});var bMe=s(Xp);mZ=n(bMe,"STRONG",{});var aGr=s(mZ);tdo=r(aGr,"reformer"),aGr.forEach(t),ado=r(bMe," \u2014 "),$S=n(bMe,"A",{href:!0});var nGr=s($S);ndo=r(nGr,"ReformerModel"),nGr.forEach(t),sdo=r(bMe," (Reformer model)"),bMe.forEach(t),ldo=i(C),Vp=n(C,"LI",{});var vMe=s(Vp);gZ=n(vMe,"STRONG",{});var sGr=s(gZ);ido=r(sGr,"rembert"),sGr.forEach(t),ddo=r(vMe," \u2014 "),IS=n(vMe,"A",{href:!0});var lGr=s(IS);cdo=r(lGr,"RemBertModel"),lGr.forEach(t),fdo=r(vMe," (RemBERT model)"),vMe.forEach(t),mdo=i(C),zp=n(C,"LI",{});var TMe=s(zp);hZ=n(TMe,"STRONG",{});var iGr=s(hZ);gdo=r(iGr,"resnet"),iGr.forEach(t),hdo=r(TMe," \u2014 "),jS=n(TMe,"A",{href:!0});var dGr=s(jS);pdo=r(dGr,"ResNetModel"),dGr.forEach(t),_do=r(TMe," (ResNet model)"),TMe.forEach(t),udo=i(C),Wp=n(C,"LI",{});var FMe=s(Wp);pZ=n(FMe,"STRONG",{});var cGr=s(pZ);bdo=r(cGr,"retribert"),cGr.forEach(t),vdo=r(FMe," \u2014 "),NS=n(FMe,"A",{href:!0});var fGr=s(NS);Tdo=r(fGr,"RetriBertModel"),fGr.forEach(t),Fdo=r(FMe," (RetriBERT model)"),FMe.forEach(t),Cdo=i(C),Qp=n(C,"LI",{});var CMe=s(Qp);_Z=n(CMe,"STRONG",{});var mGr=s(_Z);Mdo=r(mGr,"roberta"),mGr.forEach(t),Edo=r(CMe," \u2014 "),DS=n(CMe,"A",{href:!0});var gGr=s(DS);ydo=r(gGr,"RobertaModel"),gGr.forEach(t),wdo=r(CMe," (RoBERTa model)"),CMe.forEach(t),Ado=i(C),Hp=n(C,"LI",{});var MMe=s(Hp);uZ=n(MMe,"STRONG",{});var hGr=s(uZ);Ldo=r(hGr,"roformer"),hGr.forEach(t),Bdo=r(MMe," \u2014 "),qS=n(MMe,"A",{href:!0});var pGr=s(qS);xdo=r(pGr,"RoFormerModel"),pGr.forEach(t),kdo=r(MMe," (RoFormer model)"),MMe.forEach(t),Rdo=i(C),Up=n(C,"LI",{});var EMe=s(Up);bZ=n(EMe,"STRONG",{});var _Gr=s(bZ);Sdo=r(_Gr,"segformer"),_Gr.forEach(t),Pdo=r(EMe," \u2014 "),OS=n(EMe,"A",{href:!0});var uGr=s(OS);$do=r(uGr,"SegformerModel"),uGr.forEach(t),Ido=r(EMe," (SegFormer model)"),EMe.forEach(t),jdo=i(C),Jp=n(C,"LI",{});var yMe=s(Jp);vZ=n(yMe,"STRONG",{});var bGr=s(vZ);Ndo=r(bGr,"sew"),bGr.forEach(t),Ddo=r(yMe," \u2014 "),GS=n(yMe,"A",{href:!0});var vGr=s(GS);qdo=r(vGr,"SEWModel"),vGr.forEach(t),Odo=r(yMe," (SEW model)"),yMe.forEach(t),Gdo=i(C),Yp=n(C,"LI",{});var wMe=s(Yp);TZ=n(wMe,"STRONG",{});var TGr=s(TZ);Xdo=r(TGr,"sew-d"),TGr.forEach(t),Vdo=r(wMe," \u2014 "),XS=n(wMe,"A",{href:!0});var FGr=s(XS);zdo=r(FGr,"SEWDModel"),FGr.forEach(t),Wdo=r(wMe," (SEW-D model)"),wMe.forEach(t),Qdo=i(C),Kp=n(C,"LI",{});var AMe=s(Kp);FZ=n(AMe,"STRONG",{});var CGr=s(FZ);Hdo=r(CGr,"speech_to_text"),CGr.forEach(t),Udo=r(AMe," \u2014 "),VS=n(AMe,"A",{href:!0});var MGr=s(VS);Jdo=r(MGr,"Speech2TextModel"),MGr.forEach(t),Ydo=r(AMe," (Speech2Text model)"),AMe.forEach(t),Kdo=i(C),Zp=n(C,"LI",{});var LMe=s(Zp);CZ=n(LMe,"STRONG",{});var EGr=s(CZ);Zdo=r(EGr,"splinter"),EGr.forEach(t),eco=r(LMe," \u2014 "),zS=n(LMe,"A",{href:!0});var yGr=s(zS);oco=r(yGr,"SplinterModel"),yGr.forEach(t),rco=r(LMe," (Splinter model)"),LMe.forEach(t),tco=i(C),e_=n(C,"LI",{});var BMe=s(e_);MZ=n(BMe,"STRONG",{});var wGr=s(MZ);aco=r(wGr,"squeezebert"),wGr.forEach(t),nco=r(BMe," \u2014 "),WS=n(BMe,"A",{href:!0});var AGr=s(WS);sco=r(AGr,"SqueezeBertModel"),AGr.forEach(t),lco=r(BMe," (SqueezeBERT model)"),BMe.forEach(t),ico=i(C),o_=n(C,"LI",{});var xMe=s(o_);EZ=n(xMe,"STRONG",{});var LGr=s(EZ);dco=r(LGr,"swin"),LGr.forEach(t),cco=r(xMe," \u2014 "),QS=n(xMe,"A",{href:!0});var BGr=s(QS);fco=r(BGr,"SwinModel"),BGr.forEach(t),mco=r(xMe," (Swin model)"),xMe.forEach(t),gco=i(C),r_=n(C,"LI",{});var kMe=s(r_);yZ=n(kMe,"STRONG",{});var xGr=s(yZ);hco=r(xGr,"t5"),xGr.forEach(t),pco=r(kMe," \u2014 "),HS=n(kMe,"A",{href:!0});var kGr=s(HS);_co=r(kGr,"T5Model"),kGr.forEach(t),uco=r(kMe," (T5 model)"),kMe.forEach(t),bco=i(C),t_=n(C,"LI",{});var RMe=s(t_);wZ=n(RMe,"STRONG",{});var RGr=s(wZ);vco=r(RGr,"tapas"),RGr.forEach(t),Tco=r(RMe," \u2014 "),US=n(RMe,"A",{href:!0});var SGr=s(US);Fco=r(SGr,"TapasModel"),SGr.forEach(t),Cco=r(RMe," (TAPAS model)"),RMe.forEach(t),Mco=i(C),a_=n(C,"LI",{});var SMe=s(a_);AZ=n(SMe,"STRONG",{});var PGr=s(AZ);Eco=r(PGr,"transfo-xl"),PGr.forEach(t),yco=r(SMe," \u2014 "),JS=n(SMe,"A",{href:!0});var $Gr=s(JS);wco=r($Gr,"TransfoXLModel"),$Gr.forEach(t),Aco=r(SMe," (Transformer-XL model)"),SMe.forEach(t),Lco=i(C),n_=n(C,"LI",{});var PMe=s(n_);LZ=n(PMe,"STRONG",{});var IGr=s(LZ);Bco=r(IGr,"unispeech"),IGr.forEach(t),xco=r(PMe," \u2014 "),YS=n(PMe,"A",{href:!0});var jGr=s(YS);kco=r(jGr,"UniSpeechModel"),jGr.forEach(t),Rco=r(PMe," (UniSpeech model)"),PMe.forEach(t),Sco=i(C),s_=n(C,"LI",{});var $Me=s(s_);BZ=n($Me,"STRONG",{});var NGr=s(BZ);Pco=r(NGr,"unispeech-sat"),NGr.forEach(t),$co=r($Me," \u2014 "),KS=n($Me,"A",{href:!0});var DGr=s(KS);Ico=r(DGr,"UniSpeechSatModel"),DGr.forEach(t),jco=r($Me," (UniSpeechSat model)"),$Me.forEach(t),Nco=i(C),l_=n(C,"LI",{});var IMe=s(l_);xZ=n(IMe,"STRONG",{});var qGr=s(xZ);Dco=r(qGr,"van"),qGr.forEach(t),qco=r(IMe," \u2014 "),ZS=n(IMe,"A",{href:!0});var OGr=s(ZS);Oco=r(OGr,"VanModel"),OGr.forEach(t),Gco=r(IMe," (VAN model)"),IMe.forEach(t),Xco=i(C),i_=n(C,"LI",{});var jMe=s(i_);kZ=n(jMe,"STRONG",{});var GGr=s(kZ);Vco=r(GGr,"vilt"),GGr.forEach(t),zco=r(jMe," \u2014 "),eP=n(jMe,"A",{href:!0});var XGr=s(eP);Wco=r(XGr,"ViltModel"),XGr.forEach(t),Qco=r(jMe," (ViLT model)"),jMe.forEach(t),Hco=i(C),d_=n(C,"LI",{});var NMe=s(d_);RZ=n(NMe,"STRONG",{});var VGr=s(RZ);Uco=r(VGr,"vision-text-dual-encoder"),VGr.forEach(t),Jco=r(NMe," \u2014 "),oP=n(NMe,"A",{href:!0});var zGr=s(oP);Yco=r(zGr,"VisionTextDualEncoderModel"),zGr.forEach(t),Kco=r(NMe," (VisionTextDualEncoder model)"),NMe.forEach(t),Zco=i(C),c_=n(C,"LI",{});var DMe=s(c_);SZ=n(DMe,"STRONG",{});var WGr=s(SZ);efo=r(WGr,"visual_bert"),WGr.forEach(t),ofo=r(DMe," \u2014 "),rP=n(DMe,"A",{href:!0});var QGr=s(rP);rfo=r(QGr,"VisualBertModel"),QGr.forEach(t),tfo=r(DMe," (VisualBert model)"),DMe.forEach(t),afo=i(C),f_=n(C,"LI",{});var qMe=s(f_);PZ=n(qMe,"STRONG",{});var HGr=s(PZ);nfo=r(HGr,"vit"),HGr.forEach(t),sfo=r(qMe," \u2014 "),tP=n(qMe,"A",{href:!0});var UGr=s(tP);lfo=r(UGr,"ViTModel"),UGr.forEach(t),ifo=r(qMe," (ViT model)"),qMe.forEach(t),dfo=i(C),m_=n(C,"LI",{});var OMe=s(m_);$Z=n(OMe,"STRONG",{});var JGr=s($Z);cfo=r(JGr,"vit_mae"),JGr.forEach(t),ffo=r(OMe," \u2014 "),aP=n(OMe,"A",{href:!0});var YGr=s(aP);mfo=r(YGr,"ViTMAEModel"),YGr.forEach(t),gfo=r(OMe," (ViTMAE model)"),OMe.forEach(t),hfo=i(C),g_=n(C,"LI",{});var GMe=s(g_);IZ=n(GMe,"STRONG",{});var KGr=s(IZ);pfo=r(KGr,"wav2vec2"),KGr.forEach(t),_fo=r(GMe," \u2014 "),nP=n(GMe,"A",{href:!0});var ZGr=s(nP);ufo=r(ZGr,"Wav2Vec2Model"),ZGr.forEach(t),bfo=r(GMe," (Wav2Vec2 model)"),GMe.forEach(t),vfo=i(C),h_=n(C,"LI",{});var XMe=s(h_);jZ=n(XMe,"STRONG",{});var eXr=s(jZ);Tfo=r(eXr,"wavlm"),eXr.forEach(t),Ffo=r(XMe," \u2014 "),sP=n(XMe,"A",{href:!0});var oXr=s(sP);Cfo=r(oXr,"WavLMModel"),oXr.forEach(t),Mfo=r(XMe," (WavLM model)"),XMe.forEach(t),Efo=i(C),p_=n(C,"LI",{});var VMe=s(p_);NZ=n(VMe,"STRONG",{});var rXr=s(NZ);yfo=r(rXr,"xglm"),rXr.forEach(t),wfo=r(VMe," \u2014 "),lP=n(VMe,"A",{href:!0});var tXr=s(lP);Afo=r(tXr,"XGLMModel"),tXr.forEach(t),Lfo=r(VMe," (XGLM model)"),VMe.forEach(t),Bfo=i(C),__=n(C,"LI",{});var zMe=s(__);DZ=n(zMe,"STRONG",{});var aXr=s(DZ);xfo=r(aXr,"xlm"),aXr.forEach(t),kfo=r(zMe," \u2014 "),iP=n(zMe,"A",{href:!0});var nXr=s(iP);Rfo=r(nXr,"XLMModel"),nXr.forEach(t),Sfo=r(zMe," (XLM model)"),zMe.forEach(t),Pfo=i(C),u_=n(C,"LI",{});var WMe=s(u_);qZ=n(WMe,"STRONG",{});var sXr=s(qZ);$fo=r(sXr,"xlm-prophetnet"),sXr.forEach(t),Ifo=r(WMe," \u2014 "),dP=n(WMe,"A",{href:!0});var lXr=s(dP);jfo=r(lXr,"XLMProphetNetModel"),lXr.forEach(t),Nfo=r(WMe," (XLMProphetNet model)"),WMe.forEach(t),Dfo=i(C),b_=n(C,"LI",{});var QMe=s(b_);OZ=n(QMe,"STRONG",{});var iXr=s(OZ);qfo=r(iXr,"xlm-roberta"),iXr.forEach(t),Ofo=r(QMe," \u2014 "),cP=n(QMe,"A",{href:!0});var dXr=s(cP);Gfo=r(dXr,"XLMRobertaModel"),dXr.forEach(t),Xfo=r(QMe," (XLM-RoBERTa model)"),QMe.forEach(t),Vfo=i(C),v_=n(C,"LI",{});var HMe=s(v_);GZ=n(HMe,"STRONG",{});var cXr=s(GZ);zfo=r(cXr,"xlm-roberta-xl"),cXr.forEach(t),Wfo=r(HMe," \u2014 "),fP=n(HMe,"A",{href:!0});var fXr=s(fP);Qfo=r(fXr,"XLMRobertaXLModel"),fXr.forEach(t),Hfo=r(HMe," (XLM-RoBERTa-XL model)"),HMe.forEach(t),Ufo=i(C),T_=n(C,"LI",{});var UMe=s(T_);XZ=n(UMe,"STRONG",{});var mXr=s(XZ);Jfo=r(mXr,"xlnet"),mXr.forEach(t),Yfo=r(UMe," \u2014 "),mP=n(UMe,"A",{href:!0});var gXr=s(mP);Kfo=r(gXr,"XLNetModel"),gXr.forEach(t),Zfo=r(UMe," (XLNet model)"),UMe.forEach(t),emo=i(C),F_=n(C,"LI",{});var JMe=s(F_);VZ=n(JMe,"STRONG",{});var hXr=s(VZ);omo=r(hXr,"yoso"),hXr.forEach(t),rmo=r(JMe," \u2014 "),gP=n(JMe,"A",{href:!0});var pXr=s(gP);tmo=r(pXr,"YosoModel"),pXr.forEach(t),amo=r(JMe," (YOSO model)"),JMe.forEach(t),C.forEach(t),nmo=i(qt),C_=n(qt,"P",{});var YMe=s(C_);smo=r(YMe,"The model is set in evaluation mode by default using "),zZ=n(YMe,"CODE",{});var _Xr=s(zZ);lmo=r(_Xr,"model.eval()"),_Xr.forEach(t),imo=r(YMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WZ=n(YMe,"CODE",{});var uXr=s(WZ);dmo=r(uXr,"model.train()"),uXr.forEach(t),YMe.forEach(t),cmo=i(qt),QZ=n(qt,"P",{});var bXr=s(QZ);fmo=r(bXr,"Examples:"),bXr.forEach(t),mmo=i(qt),m(O3.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Zxe=i(c),ed=n(c,"H2",{class:!0});var iSe=s(ed);M_=n(iSe,"A",{id:!0,class:!0,href:!0});var vXr=s(M_);HZ=n(vXr,"SPAN",{});var TXr=s(HZ);m(G3.$$.fragment,TXr),TXr.forEach(t),vXr.forEach(t),gmo=i(iSe),UZ=n(iSe,"SPAN",{});var FXr=s(UZ);hmo=r(FXr,"AutoModelForPreTraining"),FXr.forEach(t),iSe.forEach(t),eke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(X3.$$.fragment,Hs),pmo=i(Hs),od=n(Hs,"P",{});var Xz=s(od);_mo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JZ=n(Xz,"CODE",{});var CXr=s(JZ);umo=r(CXr,"from_pretrained()"),CXr.forEach(t),bmo=r(Xz,"class method or the "),YZ=n(Xz,"CODE",{});var MXr=s(YZ);vmo=r(MXr,"from_config()"),MXr.forEach(t),Tmo=r(Xz,`class
method.`),Xz.forEach(t),Fmo=i(Hs),V3=n(Hs,"P",{});var dSe=s(V3);Cmo=r(dSe,"This class cannot be instantiated directly using "),KZ=n(dSe,"CODE",{});var EXr=s(KZ);Mmo=r(EXr,"__init__()"),EXr.forEach(t),Emo=r(dSe," (throws an error)."),dSe.forEach(t),ymo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(z3.$$.fragment,Us),wmo=i(Us),ZZ=n(Us,"P",{});var yXr=s(ZZ);Amo=r(yXr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yXr.forEach(t),Lmo=i(Us),rd=n(Us,"P",{});var Vz=s(rd);Bmo=r(Vz,`Note:
Loading a model from its configuration file does `),eee=n(Vz,"STRONG",{});var wXr=s(eee);xmo=r(wXr,"not"),wXr.forEach(t),kmo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Vz,"CODE",{});var AXr=s(oee);Rmo=r(AXr,"from_pretrained()"),AXr.forEach(t),Smo=r(Vz,"to load the model weights."),Vz.forEach(t),Pmo=i(Us),ree=n(Us,"P",{});var LXr=s(ree);$mo=r(LXr,"Examples:"),LXr.forEach(t),Imo=i(Us),m(W3.$$.fragment,Us),Us.forEach(t),jmo=i(Hs),De=n(Hs,"DIV",{class:!0});var Ot=s(De);m(Q3.$$.fragment,Ot),Nmo=i(Ot),tee=n(Ot,"P",{});var BXr=s(tee);Dmo=r(BXr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BXr.forEach(t),qmo=i(Ot),za=n(Ot,"P",{});var sE=s(za);Omo=r(sE,"The model class to instantiate is selected based on the "),aee=n(sE,"CODE",{});var xXr=s(aee);Gmo=r(xXr,"model_type"),xXr.forEach(t),Xmo=r(sE,` property of the config object (either
passed as an argument or loaded from `),nee=n(sE,"CODE",{});var kXr=s(nee);Vmo=r(kXr,"pretrained_model_name_or_path"),kXr.forEach(t),zmo=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),see=n(sE,"CODE",{});var RXr=s(see);Wmo=r(RXr,"pretrained_model_name_or_path"),RXr.forEach(t),Qmo=r(sE,":"),sE.forEach(t),Hmo=i(Ot),k=n(Ot,"UL",{});var S=s(k);E_=n(S,"LI",{});var KMe=s(E_);lee=n(KMe,"STRONG",{});var SXr=s(lee);Umo=r(SXr,"albert"),SXr.forEach(t),Jmo=r(KMe," \u2014 "),hP=n(KMe,"A",{href:!0});var PXr=s(hP);Ymo=r(PXr,"AlbertForPreTraining"),PXr.forEach(t),Kmo=r(KMe," (ALBERT model)"),KMe.forEach(t),Zmo=i(S),y_=n(S,"LI",{});var ZMe=s(y_);iee=n(ZMe,"STRONG",{});var $Xr=s(iee);ego=r($Xr,"bart"),$Xr.forEach(t),ogo=r(ZMe," \u2014 "),pP=n(ZMe,"A",{href:!0});var IXr=s(pP);rgo=r(IXr,"BartForConditionalGeneration"),IXr.forEach(t),tgo=r(ZMe," (BART model)"),ZMe.forEach(t),ago=i(S),w_=n(S,"LI",{});var eEe=s(w_);dee=n(eEe,"STRONG",{});var jXr=s(dee);ngo=r(jXr,"bert"),jXr.forEach(t),sgo=r(eEe," \u2014 "),_P=n(eEe,"A",{href:!0});var NXr=s(_P);lgo=r(NXr,"BertForPreTraining"),NXr.forEach(t),igo=r(eEe," (BERT model)"),eEe.forEach(t),dgo=i(S),A_=n(S,"LI",{});var oEe=s(A_);cee=n(oEe,"STRONG",{});var DXr=s(cee);cgo=r(DXr,"big_bird"),DXr.forEach(t),fgo=r(oEe," \u2014 "),uP=n(oEe,"A",{href:!0});var qXr=s(uP);mgo=r(qXr,"BigBirdForPreTraining"),qXr.forEach(t),ggo=r(oEe," (BigBird model)"),oEe.forEach(t),hgo=i(S),L_=n(S,"LI",{});var rEe=s(L_);fee=n(rEe,"STRONG",{});var OXr=s(fee);pgo=r(OXr,"camembert"),OXr.forEach(t),_go=r(rEe," \u2014 "),bP=n(rEe,"A",{href:!0});var GXr=s(bP);ugo=r(GXr,"CamembertForMaskedLM"),GXr.forEach(t),bgo=r(rEe," (CamemBERT model)"),rEe.forEach(t),vgo=i(S),B_=n(S,"LI",{});var tEe=s(B_);mee=n(tEe,"STRONG",{});var XXr=s(mee);Tgo=r(XXr,"ctrl"),XXr.forEach(t),Fgo=r(tEe," \u2014 "),vP=n(tEe,"A",{href:!0});var VXr=s(vP);Cgo=r(VXr,"CTRLLMHeadModel"),VXr.forEach(t),Mgo=r(tEe," (CTRL model)"),tEe.forEach(t),Ego=i(S),x_=n(S,"LI",{});var aEe=s(x_);gee=n(aEe,"STRONG",{});var zXr=s(gee);ygo=r(zXr,"data2vec-text"),zXr.forEach(t),wgo=r(aEe," \u2014 "),TP=n(aEe,"A",{href:!0});var WXr=s(TP);Ago=r(WXr,"Data2VecTextForMaskedLM"),WXr.forEach(t),Lgo=r(aEe," (Data2VecText model)"),aEe.forEach(t),Bgo=i(S),k_=n(S,"LI",{});var nEe=s(k_);hee=n(nEe,"STRONG",{});var QXr=s(hee);xgo=r(QXr,"deberta"),QXr.forEach(t),kgo=r(nEe," \u2014 "),FP=n(nEe,"A",{href:!0});var HXr=s(FP);Rgo=r(HXr,"DebertaForMaskedLM"),HXr.forEach(t),Sgo=r(nEe," (DeBERTa model)"),nEe.forEach(t),Pgo=i(S),R_=n(S,"LI",{});var sEe=s(R_);pee=n(sEe,"STRONG",{});var UXr=s(pee);$go=r(UXr,"deberta-v2"),UXr.forEach(t),Igo=r(sEe," \u2014 "),CP=n(sEe,"A",{href:!0});var JXr=s(CP);jgo=r(JXr,"DebertaV2ForMaskedLM"),JXr.forEach(t),Ngo=r(sEe," (DeBERTa-v2 model)"),sEe.forEach(t),Dgo=i(S),S_=n(S,"LI",{});var lEe=s(S_);_ee=n(lEe,"STRONG",{});var YXr=s(_ee);qgo=r(YXr,"distilbert"),YXr.forEach(t),Ogo=r(lEe," \u2014 "),MP=n(lEe,"A",{href:!0});var KXr=s(MP);Ggo=r(KXr,"DistilBertForMaskedLM"),KXr.forEach(t),Xgo=r(lEe," (DistilBERT model)"),lEe.forEach(t),Vgo=i(S),P_=n(S,"LI",{});var iEe=s(P_);uee=n(iEe,"STRONG",{});var ZXr=s(uee);zgo=r(ZXr,"electra"),ZXr.forEach(t),Wgo=r(iEe," \u2014 "),EP=n(iEe,"A",{href:!0});var eVr=s(EP);Qgo=r(eVr,"ElectraForPreTraining"),eVr.forEach(t),Hgo=r(iEe," (ELECTRA model)"),iEe.forEach(t),Ugo=i(S),$_=n(S,"LI",{});var dEe=s($_);bee=n(dEe,"STRONG",{});var oVr=s(bee);Jgo=r(oVr,"flaubert"),oVr.forEach(t),Ygo=r(dEe," \u2014 "),yP=n(dEe,"A",{href:!0});var rVr=s(yP);Kgo=r(rVr,"FlaubertWithLMHeadModel"),rVr.forEach(t),Zgo=r(dEe," (FlauBERT model)"),dEe.forEach(t),eho=i(S),I_=n(S,"LI",{});var cEe=s(I_);vee=n(cEe,"STRONG",{});var tVr=s(vee);oho=r(tVr,"fnet"),tVr.forEach(t),rho=r(cEe," \u2014 "),wP=n(cEe,"A",{href:!0});var aVr=s(wP);tho=r(aVr,"FNetForPreTraining"),aVr.forEach(t),aho=r(cEe," (FNet model)"),cEe.forEach(t),nho=i(S),j_=n(S,"LI",{});var fEe=s(j_);Tee=n(fEe,"STRONG",{});var nVr=s(Tee);sho=r(nVr,"fsmt"),nVr.forEach(t),lho=r(fEe," \u2014 "),AP=n(fEe,"A",{href:!0});var sVr=s(AP);iho=r(sVr,"FSMTForConditionalGeneration"),sVr.forEach(t),dho=r(fEe," (FairSeq Machine-Translation model)"),fEe.forEach(t),cho=i(S),N_=n(S,"LI",{});var mEe=s(N_);Fee=n(mEe,"STRONG",{});var lVr=s(Fee);fho=r(lVr,"funnel"),lVr.forEach(t),mho=r(mEe," \u2014 "),LP=n(mEe,"A",{href:!0});var iVr=s(LP);gho=r(iVr,"FunnelForPreTraining"),iVr.forEach(t),hho=r(mEe," (Funnel Transformer model)"),mEe.forEach(t),pho=i(S),D_=n(S,"LI",{});var gEe=s(D_);Cee=n(gEe,"STRONG",{});var dVr=s(Cee);_ho=r(dVr,"gpt2"),dVr.forEach(t),uho=r(gEe," \u2014 "),BP=n(gEe,"A",{href:!0});var cVr=s(BP);bho=r(cVr,"GPT2LMHeadModel"),cVr.forEach(t),vho=r(gEe," (OpenAI GPT-2 model)"),gEe.forEach(t),Tho=i(S),q_=n(S,"LI",{});var hEe=s(q_);Mee=n(hEe,"STRONG",{});var fVr=s(Mee);Fho=r(fVr,"ibert"),fVr.forEach(t),Cho=r(hEe," \u2014 "),xP=n(hEe,"A",{href:!0});var mVr=s(xP);Mho=r(mVr,"IBertForMaskedLM"),mVr.forEach(t),Eho=r(hEe," (I-BERT model)"),hEe.forEach(t),yho=i(S),O_=n(S,"LI",{});var pEe=s(O_);Eee=n(pEe,"STRONG",{});var gVr=s(Eee);who=r(gVr,"layoutlm"),gVr.forEach(t),Aho=r(pEe," \u2014 "),kP=n(pEe,"A",{href:!0});var hVr=s(kP);Lho=r(hVr,"LayoutLMForMaskedLM"),hVr.forEach(t),Bho=r(pEe," (LayoutLM model)"),pEe.forEach(t),xho=i(S),G_=n(S,"LI",{});var _Ee=s(G_);yee=n(_Ee,"STRONG",{});var pVr=s(yee);kho=r(pVr,"longformer"),pVr.forEach(t),Rho=r(_Ee," \u2014 "),RP=n(_Ee,"A",{href:!0});var _Vr=s(RP);Sho=r(_Vr,"LongformerForMaskedLM"),_Vr.forEach(t),Pho=r(_Ee," (Longformer model)"),_Ee.forEach(t),$ho=i(S),X_=n(S,"LI",{});var uEe=s(X_);wee=n(uEe,"STRONG",{});var uVr=s(wee);Iho=r(uVr,"lxmert"),uVr.forEach(t),jho=r(uEe," \u2014 "),SP=n(uEe,"A",{href:!0});var bVr=s(SP);Nho=r(bVr,"LxmertForPreTraining"),bVr.forEach(t),Dho=r(uEe," (LXMERT model)"),uEe.forEach(t),qho=i(S),V_=n(S,"LI",{});var bEe=s(V_);Aee=n(bEe,"STRONG",{});var vVr=s(Aee);Oho=r(vVr,"megatron-bert"),vVr.forEach(t),Gho=r(bEe," \u2014 "),PP=n(bEe,"A",{href:!0});var TVr=s(PP);Xho=r(TVr,"MegatronBertForPreTraining"),TVr.forEach(t),Vho=r(bEe," (MegatronBert model)"),bEe.forEach(t),zho=i(S),z_=n(S,"LI",{});var vEe=s(z_);Lee=n(vEe,"STRONG",{});var FVr=s(Lee);Who=r(FVr,"mobilebert"),FVr.forEach(t),Qho=r(vEe," \u2014 "),$P=n(vEe,"A",{href:!0});var CVr=s($P);Hho=r(CVr,"MobileBertForPreTraining"),CVr.forEach(t),Uho=r(vEe," (MobileBERT model)"),vEe.forEach(t),Jho=i(S),W_=n(S,"LI",{});var TEe=s(W_);Bee=n(TEe,"STRONG",{});var MVr=s(Bee);Yho=r(MVr,"mpnet"),MVr.forEach(t),Kho=r(TEe," \u2014 "),IP=n(TEe,"A",{href:!0});var EVr=s(IP);Zho=r(EVr,"MPNetForMaskedLM"),EVr.forEach(t),epo=r(TEe," (MPNet model)"),TEe.forEach(t),opo=i(S),Q_=n(S,"LI",{});var FEe=s(Q_);xee=n(FEe,"STRONG",{});var yVr=s(xee);rpo=r(yVr,"openai-gpt"),yVr.forEach(t),tpo=r(FEe," \u2014 "),jP=n(FEe,"A",{href:!0});var wVr=s(jP);apo=r(wVr,"OpenAIGPTLMHeadModel"),wVr.forEach(t),npo=r(FEe," (OpenAI GPT model)"),FEe.forEach(t),spo=i(S),H_=n(S,"LI",{});var CEe=s(H_);kee=n(CEe,"STRONG",{});var AVr=s(kee);lpo=r(AVr,"retribert"),AVr.forEach(t),ipo=r(CEe," \u2014 "),NP=n(CEe,"A",{href:!0});var LVr=s(NP);dpo=r(LVr,"RetriBertModel"),LVr.forEach(t),cpo=r(CEe," (RetriBERT model)"),CEe.forEach(t),fpo=i(S),U_=n(S,"LI",{});var MEe=s(U_);Ree=n(MEe,"STRONG",{});var BVr=s(Ree);mpo=r(BVr,"roberta"),BVr.forEach(t),gpo=r(MEe," \u2014 "),DP=n(MEe,"A",{href:!0});var xVr=s(DP);hpo=r(xVr,"RobertaForMaskedLM"),xVr.forEach(t),ppo=r(MEe," (RoBERTa model)"),MEe.forEach(t),_po=i(S),J_=n(S,"LI",{});var EEe=s(J_);See=n(EEe,"STRONG",{});var kVr=s(See);upo=r(kVr,"squeezebert"),kVr.forEach(t),bpo=r(EEe," \u2014 "),qP=n(EEe,"A",{href:!0});var RVr=s(qP);vpo=r(RVr,"SqueezeBertForMaskedLM"),RVr.forEach(t),Tpo=r(EEe," (SqueezeBERT model)"),EEe.forEach(t),Fpo=i(S),Y_=n(S,"LI",{});var yEe=s(Y_);Pee=n(yEe,"STRONG",{});var SVr=s(Pee);Cpo=r(SVr,"t5"),SVr.forEach(t),Mpo=r(yEe," \u2014 "),OP=n(yEe,"A",{href:!0});var PVr=s(OP);Epo=r(PVr,"T5ForConditionalGeneration"),PVr.forEach(t),ypo=r(yEe," (T5 model)"),yEe.forEach(t),wpo=i(S),K_=n(S,"LI",{});var wEe=s(K_);$ee=n(wEe,"STRONG",{});var $Vr=s($ee);Apo=r($Vr,"tapas"),$Vr.forEach(t),Lpo=r(wEe," \u2014 "),GP=n(wEe,"A",{href:!0});var IVr=s(GP);Bpo=r(IVr,"TapasForMaskedLM"),IVr.forEach(t),xpo=r(wEe," (TAPAS model)"),wEe.forEach(t),kpo=i(S),Z_=n(S,"LI",{});var AEe=s(Z_);Iee=n(AEe,"STRONG",{});var jVr=s(Iee);Rpo=r(jVr,"transfo-xl"),jVr.forEach(t),Spo=r(AEe," \u2014 "),XP=n(AEe,"A",{href:!0});var NVr=s(XP);Ppo=r(NVr,"TransfoXLLMHeadModel"),NVr.forEach(t),$po=r(AEe," (Transformer-XL model)"),AEe.forEach(t),Ipo=i(S),eu=n(S,"LI",{});var LEe=s(eu);jee=n(LEe,"STRONG",{});var DVr=s(jee);jpo=r(DVr,"unispeech"),DVr.forEach(t),Npo=r(LEe," \u2014 "),VP=n(LEe,"A",{href:!0});var qVr=s(VP);Dpo=r(qVr,"UniSpeechForPreTraining"),qVr.forEach(t),qpo=r(LEe," (UniSpeech model)"),LEe.forEach(t),Opo=i(S),ou=n(S,"LI",{});var BEe=s(ou);Nee=n(BEe,"STRONG",{});var OVr=s(Nee);Gpo=r(OVr,"unispeech-sat"),OVr.forEach(t),Xpo=r(BEe," \u2014 "),zP=n(BEe,"A",{href:!0});var GVr=s(zP);Vpo=r(GVr,"UniSpeechSatForPreTraining"),GVr.forEach(t),zpo=r(BEe," (UniSpeechSat model)"),BEe.forEach(t),Wpo=i(S),ru=n(S,"LI",{});var xEe=s(ru);Dee=n(xEe,"STRONG",{});var XVr=s(Dee);Qpo=r(XVr,"visual_bert"),XVr.forEach(t),Hpo=r(xEe," \u2014 "),WP=n(xEe,"A",{href:!0});var VVr=s(WP);Upo=r(VVr,"VisualBertForPreTraining"),VVr.forEach(t),Jpo=r(xEe," (VisualBert model)"),xEe.forEach(t),Ypo=i(S),tu=n(S,"LI",{});var kEe=s(tu);qee=n(kEe,"STRONG",{});var zVr=s(qee);Kpo=r(zVr,"vit_mae"),zVr.forEach(t),Zpo=r(kEe," \u2014 "),QP=n(kEe,"A",{href:!0});var WVr=s(QP);e_o=r(WVr,"ViTMAEForPreTraining"),WVr.forEach(t),o_o=r(kEe," (ViTMAE model)"),kEe.forEach(t),r_o=i(S),au=n(S,"LI",{});var REe=s(au);Oee=n(REe,"STRONG",{});var QVr=s(Oee);t_o=r(QVr,"wav2vec2"),QVr.forEach(t),a_o=r(REe," \u2014 "),HP=n(REe,"A",{href:!0});var HVr=s(HP);n_o=r(HVr,"Wav2Vec2ForPreTraining"),HVr.forEach(t),s_o=r(REe," (Wav2Vec2 model)"),REe.forEach(t),l_o=i(S),nu=n(S,"LI",{});var SEe=s(nu);Gee=n(SEe,"STRONG",{});var UVr=s(Gee);i_o=r(UVr,"xlm"),UVr.forEach(t),d_o=r(SEe," \u2014 "),UP=n(SEe,"A",{href:!0});var JVr=s(UP);c_o=r(JVr,"XLMWithLMHeadModel"),JVr.forEach(t),f_o=r(SEe," (XLM model)"),SEe.forEach(t),m_o=i(S),su=n(S,"LI",{});var PEe=s(su);Xee=n(PEe,"STRONG",{});var YVr=s(Xee);g_o=r(YVr,"xlm-roberta"),YVr.forEach(t),h_o=r(PEe," \u2014 "),JP=n(PEe,"A",{href:!0});var KVr=s(JP);p_o=r(KVr,"XLMRobertaForMaskedLM"),KVr.forEach(t),__o=r(PEe," (XLM-RoBERTa model)"),PEe.forEach(t),u_o=i(S),lu=n(S,"LI",{});var $Ee=s(lu);Vee=n($Ee,"STRONG",{});var ZVr=s(Vee);b_o=r(ZVr,"xlm-roberta-xl"),ZVr.forEach(t),v_o=r($Ee," \u2014 "),YP=n($Ee,"A",{href:!0});var ezr=s(YP);T_o=r(ezr,"XLMRobertaXLForMaskedLM"),ezr.forEach(t),F_o=r($Ee," (XLM-RoBERTa-XL model)"),$Ee.forEach(t),C_o=i(S),iu=n(S,"LI",{});var IEe=s(iu);zee=n(IEe,"STRONG",{});var ozr=s(zee);M_o=r(ozr,"xlnet"),ozr.forEach(t),E_o=r(IEe," \u2014 "),KP=n(IEe,"A",{href:!0});var rzr=s(KP);y_o=r(rzr,"XLNetLMHeadModel"),rzr.forEach(t),w_o=r(IEe," (XLNet model)"),IEe.forEach(t),S.forEach(t),A_o=i(Ot),du=n(Ot,"P",{});var jEe=s(du);L_o=r(jEe,"The model is set in evaluation mode by default using "),Wee=n(jEe,"CODE",{});var tzr=s(Wee);B_o=r(tzr,"model.eval()"),tzr.forEach(t),x_o=r(jEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qee=n(jEe,"CODE",{});var azr=s(Qee);k_o=r(azr,"model.train()"),azr.forEach(t),jEe.forEach(t),R_o=i(Ot),Hee=n(Ot,"P",{});var nzr=s(Hee);S_o=r(nzr,"Examples:"),nzr.forEach(t),P_o=i(Ot),m(H3.$$.fragment,Ot),Ot.forEach(t),Hs.forEach(t),oke=i(c),td=n(c,"H2",{class:!0});var cSe=s(td);cu=n(cSe,"A",{id:!0,class:!0,href:!0});var szr=s(cu);Uee=n(szr,"SPAN",{});var lzr=s(Uee);m(U3.$$.fragment,lzr),lzr.forEach(t),szr.forEach(t),$_o=i(cSe),Jee=n(cSe,"SPAN",{});var izr=s(Jee);I_o=r(izr,"AutoModelForCausalLM"),izr.forEach(t),cSe.forEach(t),rke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(J3.$$.fragment,Js),j_o=i(Js),ad=n(Js,"P",{});var zz=s(ad);N_o=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Yee=n(zz,"CODE",{});var dzr=s(Yee);D_o=r(dzr,"from_pretrained()"),dzr.forEach(t),q_o=r(zz,"class method or the "),Kee=n(zz,"CODE",{});var czr=s(Kee);O_o=r(czr,"from_config()"),czr.forEach(t),G_o=r(zz,`class
method.`),zz.forEach(t),X_o=i(Js),Y3=n(Js,"P",{});var fSe=s(Y3);V_o=r(fSe,"This class cannot be instantiated directly using "),Zee=n(fSe,"CODE",{});var fzr=s(Zee);z_o=r(fzr,"__init__()"),fzr.forEach(t),W_o=r(fSe," (throws an error)."),fSe.forEach(t),Q_o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(K3.$$.fragment,Ys),H_o=i(Ys),eoe=n(Ys,"P",{});var mzr=s(eoe);U_o=r(mzr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mzr.forEach(t),J_o=i(Ys),nd=n(Ys,"P",{});var Wz=s(nd);Y_o=r(Wz,`Note:
Loading a model from its configuration file does `),ooe=n(Wz,"STRONG",{});var gzr=s(ooe);K_o=r(gzr,"not"),gzr.forEach(t),Z_o=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=n(Wz,"CODE",{});var hzr=s(roe);euo=r(hzr,"from_pretrained()"),hzr.forEach(t),ouo=r(Wz,"to load the model weights."),Wz.forEach(t),ruo=i(Ys),toe=n(Ys,"P",{});var pzr=s(toe);tuo=r(pzr,"Examples:"),pzr.forEach(t),auo=i(Ys),m(Z3.$$.fragment,Ys),Ys.forEach(t),nuo=i(Js),qe=n(Js,"DIV",{class:!0});var Gt=s(qe);m(e5.$$.fragment,Gt),suo=i(Gt),aoe=n(Gt,"P",{});var _zr=s(aoe);luo=r(_zr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_zr.forEach(t),iuo=i(Gt),Wa=n(Gt,"P",{});var lE=s(Wa);duo=r(lE,"The model class to instantiate is selected based on the "),noe=n(lE,"CODE",{});var uzr=s(noe);cuo=r(uzr,"model_type"),uzr.forEach(t),fuo=r(lE,` property of the config object (either
passed as an argument or loaded from `),soe=n(lE,"CODE",{});var bzr=s(soe);muo=r(bzr,"pretrained_model_name_or_path"),bzr.forEach(t),guo=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),loe=n(lE,"CODE",{});var vzr=s(loe);huo=r(vzr,"pretrained_model_name_or_path"),vzr.forEach(t),puo=r(lE,":"),lE.forEach(t),_uo=i(Gt),$=n(Gt,"UL",{});var j=s($);fu=n(j,"LI",{});var NEe=s(fu);ioe=n(NEe,"STRONG",{});var Tzr=s(ioe);uuo=r(Tzr,"bart"),Tzr.forEach(t),buo=r(NEe," \u2014 "),ZP=n(NEe,"A",{href:!0});var Fzr=s(ZP);vuo=r(Fzr,"BartForCausalLM"),Fzr.forEach(t),Tuo=r(NEe," (BART model)"),NEe.forEach(t),Fuo=i(j),mu=n(j,"LI",{});var DEe=s(mu);doe=n(DEe,"STRONG",{});var Czr=s(doe);Cuo=r(Czr,"bert"),Czr.forEach(t),Muo=r(DEe," \u2014 "),e$=n(DEe,"A",{href:!0});var Mzr=s(e$);Euo=r(Mzr,"BertLMHeadModel"),Mzr.forEach(t),yuo=r(DEe," (BERT model)"),DEe.forEach(t),wuo=i(j),gu=n(j,"LI",{});var qEe=s(gu);coe=n(qEe,"STRONG",{});var Ezr=s(coe);Auo=r(Ezr,"bert-generation"),Ezr.forEach(t),Luo=r(qEe," \u2014 "),o$=n(qEe,"A",{href:!0});var yzr=s(o$);Buo=r(yzr,"BertGenerationDecoder"),yzr.forEach(t),xuo=r(qEe," (Bert Generation model)"),qEe.forEach(t),kuo=i(j),hu=n(j,"LI",{});var OEe=s(hu);foe=n(OEe,"STRONG",{});var wzr=s(foe);Ruo=r(wzr,"big_bird"),wzr.forEach(t),Suo=r(OEe," \u2014 "),r$=n(OEe,"A",{href:!0});var Azr=s(r$);Puo=r(Azr,"BigBirdForCausalLM"),Azr.forEach(t),$uo=r(OEe," (BigBird model)"),OEe.forEach(t),Iuo=i(j),pu=n(j,"LI",{});var GEe=s(pu);moe=n(GEe,"STRONG",{});var Lzr=s(moe);juo=r(Lzr,"bigbird_pegasus"),Lzr.forEach(t),Nuo=r(GEe," \u2014 "),t$=n(GEe,"A",{href:!0});var Bzr=s(t$);Duo=r(Bzr,"BigBirdPegasusForCausalLM"),Bzr.forEach(t),quo=r(GEe," (BigBirdPegasus model)"),GEe.forEach(t),Ouo=i(j),_u=n(j,"LI",{});var XEe=s(_u);goe=n(XEe,"STRONG",{});var xzr=s(goe);Guo=r(xzr,"blenderbot"),xzr.forEach(t),Xuo=r(XEe," \u2014 "),a$=n(XEe,"A",{href:!0});var kzr=s(a$);Vuo=r(kzr,"BlenderbotForCausalLM"),kzr.forEach(t),zuo=r(XEe," (Blenderbot model)"),XEe.forEach(t),Wuo=i(j),uu=n(j,"LI",{});var VEe=s(uu);hoe=n(VEe,"STRONG",{});var Rzr=s(hoe);Quo=r(Rzr,"blenderbot-small"),Rzr.forEach(t),Huo=r(VEe," \u2014 "),n$=n(VEe,"A",{href:!0});var Szr=s(n$);Uuo=r(Szr,"BlenderbotSmallForCausalLM"),Szr.forEach(t),Juo=r(VEe," (BlenderbotSmall model)"),VEe.forEach(t),Yuo=i(j),bu=n(j,"LI",{});var zEe=s(bu);poe=n(zEe,"STRONG",{});var Pzr=s(poe);Kuo=r(Pzr,"camembert"),Pzr.forEach(t),Zuo=r(zEe," \u2014 "),s$=n(zEe,"A",{href:!0});var $zr=s(s$);e4o=r($zr,"CamembertForCausalLM"),$zr.forEach(t),o4o=r(zEe," (CamemBERT model)"),zEe.forEach(t),r4o=i(j),vu=n(j,"LI",{});var WEe=s(vu);_oe=n(WEe,"STRONG",{});var Izr=s(_oe);t4o=r(Izr,"ctrl"),Izr.forEach(t),a4o=r(WEe," \u2014 "),l$=n(WEe,"A",{href:!0});var jzr=s(l$);n4o=r(jzr,"CTRLLMHeadModel"),jzr.forEach(t),s4o=r(WEe," (CTRL model)"),WEe.forEach(t),l4o=i(j),Tu=n(j,"LI",{});var QEe=s(Tu);uoe=n(QEe,"STRONG",{});var Nzr=s(uoe);i4o=r(Nzr,"data2vec-text"),Nzr.forEach(t),d4o=r(QEe," \u2014 "),i$=n(QEe,"A",{href:!0});var Dzr=s(i$);c4o=r(Dzr,"Data2VecTextForCausalLM"),Dzr.forEach(t),f4o=r(QEe," (Data2VecText model)"),QEe.forEach(t),m4o=i(j),Fu=n(j,"LI",{});var HEe=s(Fu);boe=n(HEe,"STRONG",{});var qzr=s(boe);g4o=r(qzr,"electra"),qzr.forEach(t),h4o=r(HEe," \u2014 "),d$=n(HEe,"A",{href:!0});var Ozr=s(d$);p4o=r(Ozr,"ElectraForCausalLM"),Ozr.forEach(t),_4o=r(HEe," (ELECTRA model)"),HEe.forEach(t),u4o=i(j),Cu=n(j,"LI",{});var UEe=s(Cu);voe=n(UEe,"STRONG",{});var Gzr=s(voe);b4o=r(Gzr,"gpt2"),Gzr.forEach(t),v4o=r(UEe," \u2014 "),c$=n(UEe,"A",{href:!0});var Xzr=s(c$);T4o=r(Xzr,"GPT2LMHeadModel"),Xzr.forEach(t),F4o=r(UEe," (OpenAI GPT-2 model)"),UEe.forEach(t),C4o=i(j),Mu=n(j,"LI",{});var JEe=s(Mu);Toe=n(JEe,"STRONG",{});var Vzr=s(Toe);M4o=r(Vzr,"gpt_neo"),Vzr.forEach(t),E4o=r(JEe," \u2014 "),f$=n(JEe,"A",{href:!0});var zzr=s(f$);y4o=r(zzr,"GPTNeoForCausalLM"),zzr.forEach(t),w4o=r(JEe," (GPT Neo model)"),JEe.forEach(t),A4o=i(j),Eu=n(j,"LI",{});var YEe=s(Eu);Foe=n(YEe,"STRONG",{});var Wzr=s(Foe);L4o=r(Wzr,"gptj"),Wzr.forEach(t),B4o=r(YEe," \u2014 "),m$=n(YEe,"A",{href:!0});var Qzr=s(m$);x4o=r(Qzr,"GPTJForCausalLM"),Qzr.forEach(t),k4o=r(YEe," (GPT-J model)"),YEe.forEach(t),R4o=i(j),yu=n(j,"LI",{});var KEe=s(yu);Coe=n(KEe,"STRONG",{});var Hzr=s(Coe);S4o=r(Hzr,"marian"),Hzr.forEach(t),P4o=r(KEe," \u2014 "),g$=n(KEe,"A",{href:!0});var Uzr=s(g$);$4o=r(Uzr,"MarianForCausalLM"),Uzr.forEach(t),I4o=r(KEe," (Marian model)"),KEe.forEach(t),j4o=i(j),wu=n(j,"LI",{});var ZEe=s(wu);Moe=n(ZEe,"STRONG",{});var Jzr=s(Moe);N4o=r(Jzr,"mbart"),Jzr.forEach(t),D4o=r(ZEe," \u2014 "),h$=n(ZEe,"A",{href:!0});var Yzr=s(h$);q4o=r(Yzr,"MBartForCausalLM"),Yzr.forEach(t),O4o=r(ZEe," (mBART model)"),ZEe.forEach(t),G4o=i(j),Au=n(j,"LI",{});var e3e=s(Au);Eoe=n(e3e,"STRONG",{});var Kzr=s(Eoe);X4o=r(Kzr,"megatron-bert"),Kzr.forEach(t),V4o=r(e3e," \u2014 "),p$=n(e3e,"A",{href:!0});var Zzr=s(p$);z4o=r(Zzr,"MegatronBertForCausalLM"),Zzr.forEach(t),W4o=r(e3e," (MegatronBert model)"),e3e.forEach(t),Q4o=i(j),Lu=n(j,"LI",{});var o3e=s(Lu);yoe=n(o3e,"STRONG",{});var eWr=s(yoe);H4o=r(eWr,"openai-gpt"),eWr.forEach(t),U4o=r(o3e," \u2014 "),_$=n(o3e,"A",{href:!0});var oWr=s(_$);J4o=r(oWr,"OpenAIGPTLMHeadModel"),oWr.forEach(t),Y4o=r(o3e," (OpenAI GPT model)"),o3e.forEach(t),K4o=i(j),Bu=n(j,"LI",{});var r3e=s(Bu);woe=n(r3e,"STRONG",{});var rWr=s(woe);Z4o=r(rWr,"pegasus"),rWr.forEach(t),e1o=r(r3e," \u2014 "),u$=n(r3e,"A",{href:!0});var tWr=s(u$);o1o=r(tWr,"PegasusForCausalLM"),tWr.forEach(t),r1o=r(r3e," (Pegasus model)"),r3e.forEach(t),t1o=i(j),xu=n(j,"LI",{});var t3e=s(xu);Aoe=n(t3e,"STRONG",{});var aWr=s(Aoe);a1o=r(aWr,"plbart"),aWr.forEach(t),n1o=r(t3e," \u2014 "),b$=n(t3e,"A",{href:!0});var nWr=s(b$);s1o=r(nWr,"PLBartForCausalLM"),nWr.forEach(t),l1o=r(t3e," (PLBart model)"),t3e.forEach(t),i1o=i(j),ku=n(j,"LI",{});var a3e=s(ku);Loe=n(a3e,"STRONG",{});var sWr=s(Loe);d1o=r(sWr,"prophetnet"),sWr.forEach(t),c1o=r(a3e," \u2014 "),v$=n(a3e,"A",{href:!0});var lWr=s(v$);f1o=r(lWr,"ProphetNetForCausalLM"),lWr.forEach(t),m1o=r(a3e," (ProphetNet model)"),a3e.forEach(t),g1o=i(j),Ru=n(j,"LI",{});var n3e=s(Ru);Boe=n(n3e,"STRONG",{});var iWr=s(Boe);h1o=r(iWr,"qdqbert"),iWr.forEach(t),p1o=r(n3e," \u2014 "),T$=n(n3e,"A",{href:!0});var dWr=s(T$);_1o=r(dWr,"QDQBertLMHeadModel"),dWr.forEach(t),u1o=r(n3e," (QDQBert model)"),n3e.forEach(t),b1o=i(j),Su=n(j,"LI",{});var s3e=s(Su);xoe=n(s3e,"STRONG",{});var cWr=s(xoe);v1o=r(cWr,"reformer"),cWr.forEach(t),T1o=r(s3e," \u2014 "),F$=n(s3e,"A",{href:!0});var fWr=s(F$);F1o=r(fWr,"ReformerModelWithLMHead"),fWr.forEach(t),C1o=r(s3e," (Reformer model)"),s3e.forEach(t),M1o=i(j),Pu=n(j,"LI",{});var l3e=s(Pu);koe=n(l3e,"STRONG",{});var mWr=s(koe);E1o=r(mWr,"rembert"),mWr.forEach(t),y1o=r(l3e," \u2014 "),C$=n(l3e,"A",{href:!0});var gWr=s(C$);w1o=r(gWr,"RemBertForCausalLM"),gWr.forEach(t),A1o=r(l3e," (RemBERT model)"),l3e.forEach(t),L1o=i(j),$u=n(j,"LI",{});var i3e=s($u);Roe=n(i3e,"STRONG",{});var hWr=s(Roe);B1o=r(hWr,"roberta"),hWr.forEach(t),x1o=r(i3e," \u2014 "),M$=n(i3e,"A",{href:!0});var pWr=s(M$);k1o=r(pWr,"RobertaForCausalLM"),pWr.forEach(t),R1o=r(i3e," (RoBERTa model)"),i3e.forEach(t),S1o=i(j),Iu=n(j,"LI",{});var d3e=s(Iu);Soe=n(d3e,"STRONG",{});var _Wr=s(Soe);P1o=r(_Wr,"roformer"),_Wr.forEach(t),$1o=r(d3e," \u2014 "),E$=n(d3e,"A",{href:!0});var uWr=s(E$);I1o=r(uWr,"RoFormerForCausalLM"),uWr.forEach(t),j1o=r(d3e," (RoFormer model)"),d3e.forEach(t),N1o=i(j),ju=n(j,"LI",{});var c3e=s(ju);Poe=n(c3e,"STRONG",{});var bWr=s(Poe);D1o=r(bWr,"speech_to_text_2"),bWr.forEach(t),q1o=r(c3e," \u2014 "),y$=n(c3e,"A",{href:!0});var vWr=s(y$);O1o=r(vWr,"Speech2Text2ForCausalLM"),vWr.forEach(t),G1o=r(c3e," (Speech2Text2 model)"),c3e.forEach(t),X1o=i(j),Nu=n(j,"LI",{});var f3e=s(Nu);$oe=n(f3e,"STRONG",{});var TWr=s($oe);V1o=r(TWr,"transfo-xl"),TWr.forEach(t),z1o=r(f3e," \u2014 "),w$=n(f3e,"A",{href:!0});var FWr=s(w$);W1o=r(FWr,"TransfoXLLMHeadModel"),FWr.forEach(t),Q1o=r(f3e," (Transformer-XL model)"),f3e.forEach(t),H1o=i(j),Du=n(j,"LI",{});var m3e=s(Du);Ioe=n(m3e,"STRONG",{});var CWr=s(Ioe);U1o=r(CWr,"trocr"),CWr.forEach(t),J1o=r(m3e," \u2014 "),A$=n(m3e,"A",{href:!0});var MWr=s(A$);Y1o=r(MWr,"TrOCRForCausalLM"),MWr.forEach(t),K1o=r(m3e," (TrOCR model)"),m3e.forEach(t),Z1o=i(j),qu=n(j,"LI",{});var g3e=s(qu);joe=n(g3e,"STRONG",{});var EWr=s(joe);ebo=r(EWr,"xglm"),EWr.forEach(t),obo=r(g3e," \u2014 "),L$=n(g3e,"A",{href:!0});var yWr=s(L$);rbo=r(yWr,"XGLMForCausalLM"),yWr.forEach(t),tbo=r(g3e," (XGLM model)"),g3e.forEach(t),abo=i(j),Ou=n(j,"LI",{});var h3e=s(Ou);Noe=n(h3e,"STRONG",{});var wWr=s(Noe);nbo=r(wWr,"xlm"),wWr.forEach(t),sbo=r(h3e," \u2014 "),B$=n(h3e,"A",{href:!0});var AWr=s(B$);lbo=r(AWr,"XLMWithLMHeadModel"),AWr.forEach(t),ibo=r(h3e," (XLM model)"),h3e.forEach(t),dbo=i(j),Gu=n(j,"LI",{});var p3e=s(Gu);Doe=n(p3e,"STRONG",{});var LWr=s(Doe);cbo=r(LWr,"xlm-prophetnet"),LWr.forEach(t),fbo=r(p3e," \u2014 "),x$=n(p3e,"A",{href:!0});var BWr=s(x$);mbo=r(BWr,"XLMProphetNetForCausalLM"),BWr.forEach(t),gbo=r(p3e," (XLMProphetNet model)"),p3e.forEach(t),hbo=i(j),Xu=n(j,"LI",{});var _3e=s(Xu);qoe=n(_3e,"STRONG",{});var xWr=s(qoe);pbo=r(xWr,"xlm-roberta"),xWr.forEach(t),_bo=r(_3e," \u2014 "),k$=n(_3e,"A",{href:!0});var kWr=s(k$);ubo=r(kWr,"XLMRobertaForCausalLM"),kWr.forEach(t),bbo=r(_3e," (XLM-RoBERTa model)"),_3e.forEach(t),vbo=i(j),Vu=n(j,"LI",{});var u3e=s(Vu);Ooe=n(u3e,"STRONG",{});var RWr=s(Ooe);Tbo=r(RWr,"xlm-roberta-xl"),RWr.forEach(t),Fbo=r(u3e," \u2014 "),R$=n(u3e,"A",{href:!0});var SWr=s(R$);Cbo=r(SWr,"XLMRobertaXLForCausalLM"),SWr.forEach(t),Mbo=r(u3e," (XLM-RoBERTa-XL model)"),u3e.forEach(t),Ebo=i(j),zu=n(j,"LI",{});var b3e=s(zu);Goe=n(b3e,"STRONG",{});var PWr=s(Goe);ybo=r(PWr,"xlnet"),PWr.forEach(t),wbo=r(b3e," \u2014 "),S$=n(b3e,"A",{href:!0});var $Wr=s(S$);Abo=r($Wr,"XLNetLMHeadModel"),$Wr.forEach(t),Lbo=r(b3e," (XLNet model)"),b3e.forEach(t),j.forEach(t),Bbo=i(Gt),Wu=n(Gt,"P",{});var v3e=s(Wu);xbo=r(v3e,"The model is set in evaluation mode by default using "),Xoe=n(v3e,"CODE",{});var IWr=s(Xoe);kbo=r(IWr,"model.eval()"),IWr.forEach(t),Rbo=r(v3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Voe=n(v3e,"CODE",{});var jWr=s(Voe);Sbo=r(jWr,"model.train()"),jWr.forEach(t),v3e.forEach(t),Pbo=i(Gt),zoe=n(Gt,"P",{});var NWr=s(zoe);$bo=r(NWr,"Examples:"),NWr.forEach(t),Ibo=i(Gt),m(o5.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),tke=i(c),sd=n(c,"H2",{class:!0});var mSe=s(sd);Qu=n(mSe,"A",{id:!0,class:!0,href:!0});var DWr=s(Qu);Woe=n(DWr,"SPAN",{});var qWr=s(Woe);m(r5.$$.fragment,qWr),qWr.forEach(t),DWr.forEach(t),jbo=i(mSe),Qoe=n(mSe,"SPAN",{});var OWr=s(Qoe);Nbo=r(OWr,"AutoModelForMaskedLM"),OWr.forEach(t),mSe.forEach(t),ake=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(t5.$$.fragment,Ks),Dbo=i(Ks),ld=n(Ks,"P",{});var Qz=s(ld);qbo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hoe=n(Qz,"CODE",{});var GWr=s(Hoe);Obo=r(GWr,"from_pretrained()"),GWr.forEach(t),Gbo=r(Qz,"class method or the "),Uoe=n(Qz,"CODE",{});var XWr=s(Uoe);Xbo=r(XWr,"from_config()"),XWr.forEach(t),Vbo=r(Qz,`class
method.`),Qz.forEach(t),zbo=i(Ks),a5=n(Ks,"P",{});var gSe=s(a5);Wbo=r(gSe,"This class cannot be instantiated directly using "),Joe=n(gSe,"CODE",{});var VWr=s(Joe);Qbo=r(VWr,"__init__()"),VWr.forEach(t),Hbo=r(gSe," (throws an error)."),gSe.forEach(t),Ubo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(n5.$$.fragment,Zs),Jbo=i(Zs),Yoe=n(Zs,"P",{});var zWr=s(Yoe);Ybo=r(zWr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zWr.forEach(t),Kbo=i(Zs),id=n(Zs,"P",{});var Hz=s(id);Zbo=r(Hz,`Note:
Loading a model from its configuration file does `),Koe=n(Hz,"STRONG",{});var WWr=s(Koe);e2o=r(WWr,"not"),WWr.forEach(t),o2o=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(Hz,"CODE",{});var QWr=s(Zoe);r2o=r(QWr,"from_pretrained()"),QWr.forEach(t),t2o=r(Hz,"to load the model weights."),Hz.forEach(t),a2o=i(Zs),ere=n(Zs,"P",{});var HWr=s(ere);n2o=r(HWr,"Examples:"),HWr.forEach(t),s2o=i(Zs),m(s5.$$.fragment,Zs),Zs.forEach(t),l2o=i(Ks),Oe=n(Ks,"DIV",{class:!0});var Xt=s(Oe);m(l5.$$.fragment,Xt),i2o=i(Xt),ore=n(Xt,"P",{});var UWr=s(ore);d2o=r(UWr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UWr.forEach(t),c2o=i(Xt),Qa=n(Xt,"P",{});var iE=s(Qa);f2o=r(iE,"The model class to instantiate is selected based on the "),rre=n(iE,"CODE",{});var JWr=s(rre);m2o=r(JWr,"model_type"),JWr.forEach(t),g2o=r(iE,` property of the config object (either
passed as an argument or loaded from `),tre=n(iE,"CODE",{});var YWr=s(tre);h2o=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),p2o=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),are=n(iE,"CODE",{});var KWr=s(are);_2o=r(KWr,"pretrained_model_name_or_path"),KWr.forEach(t),u2o=r(iE,":"),iE.forEach(t),b2o=i(Xt),I=n(Xt,"UL",{});var N=s(I);Hu=n(N,"LI",{});var T3e=s(Hu);nre=n(T3e,"STRONG",{});var ZWr=s(nre);v2o=r(ZWr,"albert"),ZWr.forEach(t),T2o=r(T3e," \u2014 "),P$=n(T3e,"A",{href:!0});var eQr=s(P$);F2o=r(eQr,"AlbertForMaskedLM"),eQr.forEach(t),C2o=r(T3e," (ALBERT model)"),T3e.forEach(t),M2o=i(N),Uu=n(N,"LI",{});var F3e=s(Uu);sre=n(F3e,"STRONG",{});var oQr=s(sre);E2o=r(oQr,"bart"),oQr.forEach(t),y2o=r(F3e," \u2014 "),$$=n(F3e,"A",{href:!0});var rQr=s($$);w2o=r(rQr,"BartForConditionalGeneration"),rQr.forEach(t),A2o=r(F3e," (BART model)"),F3e.forEach(t),L2o=i(N),Ju=n(N,"LI",{});var C3e=s(Ju);lre=n(C3e,"STRONG",{});var tQr=s(lre);B2o=r(tQr,"bert"),tQr.forEach(t),x2o=r(C3e," \u2014 "),I$=n(C3e,"A",{href:!0});var aQr=s(I$);k2o=r(aQr,"BertForMaskedLM"),aQr.forEach(t),R2o=r(C3e," (BERT model)"),C3e.forEach(t),S2o=i(N),Yu=n(N,"LI",{});var M3e=s(Yu);ire=n(M3e,"STRONG",{});var nQr=s(ire);P2o=r(nQr,"big_bird"),nQr.forEach(t),$2o=r(M3e," \u2014 "),j$=n(M3e,"A",{href:!0});var sQr=s(j$);I2o=r(sQr,"BigBirdForMaskedLM"),sQr.forEach(t),j2o=r(M3e," (BigBird model)"),M3e.forEach(t),N2o=i(N),Ku=n(N,"LI",{});var E3e=s(Ku);dre=n(E3e,"STRONG",{});var lQr=s(dre);D2o=r(lQr,"camembert"),lQr.forEach(t),q2o=r(E3e," \u2014 "),N$=n(E3e,"A",{href:!0});var iQr=s(N$);O2o=r(iQr,"CamembertForMaskedLM"),iQr.forEach(t),G2o=r(E3e," (CamemBERT model)"),E3e.forEach(t),X2o=i(N),Zu=n(N,"LI",{});var y3e=s(Zu);cre=n(y3e,"STRONG",{});var dQr=s(cre);V2o=r(dQr,"convbert"),dQr.forEach(t),z2o=r(y3e," \u2014 "),D$=n(y3e,"A",{href:!0});var cQr=s(D$);W2o=r(cQr,"ConvBertForMaskedLM"),cQr.forEach(t),Q2o=r(y3e," (ConvBERT model)"),y3e.forEach(t),H2o=i(N),e4=n(N,"LI",{});var w3e=s(e4);fre=n(w3e,"STRONG",{});var fQr=s(fre);U2o=r(fQr,"data2vec-text"),fQr.forEach(t),J2o=r(w3e," \u2014 "),q$=n(w3e,"A",{href:!0});var mQr=s(q$);Y2o=r(mQr,"Data2VecTextForMaskedLM"),mQr.forEach(t),K2o=r(w3e," (Data2VecText model)"),w3e.forEach(t),Z2o=i(N),o4=n(N,"LI",{});var A3e=s(o4);mre=n(A3e,"STRONG",{});var gQr=s(mre);evo=r(gQr,"deberta"),gQr.forEach(t),ovo=r(A3e," \u2014 "),O$=n(A3e,"A",{href:!0});var hQr=s(O$);rvo=r(hQr,"DebertaForMaskedLM"),hQr.forEach(t),tvo=r(A3e," (DeBERTa model)"),A3e.forEach(t),avo=i(N),r4=n(N,"LI",{});var L3e=s(r4);gre=n(L3e,"STRONG",{});var pQr=s(gre);nvo=r(pQr,"deberta-v2"),pQr.forEach(t),svo=r(L3e," \u2014 "),G$=n(L3e,"A",{href:!0});var _Qr=s(G$);lvo=r(_Qr,"DebertaV2ForMaskedLM"),_Qr.forEach(t),ivo=r(L3e," (DeBERTa-v2 model)"),L3e.forEach(t),dvo=i(N),t4=n(N,"LI",{});var B3e=s(t4);hre=n(B3e,"STRONG",{});var uQr=s(hre);cvo=r(uQr,"distilbert"),uQr.forEach(t),fvo=r(B3e," \u2014 "),X$=n(B3e,"A",{href:!0});var bQr=s(X$);mvo=r(bQr,"DistilBertForMaskedLM"),bQr.forEach(t),gvo=r(B3e," (DistilBERT model)"),B3e.forEach(t),hvo=i(N),a4=n(N,"LI",{});var x3e=s(a4);pre=n(x3e,"STRONG",{});var vQr=s(pre);pvo=r(vQr,"electra"),vQr.forEach(t),_vo=r(x3e," \u2014 "),V$=n(x3e,"A",{href:!0});var TQr=s(V$);uvo=r(TQr,"ElectraForMaskedLM"),TQr.forEach(t),bvo=r(x3e," (ELECTRA model)"),x3e.forEach(t),vvo=i(N),n4=n(N,"LI",{});var k3e=s(n4);_re=n(k3e,"STRONG",{});var FQr=s(_re);Tvo=r(FQr,"flaubert"),FQr.forEach(t),Fvo=r(k3e," \u2014 "),z$=n(k3e,"A",{href:!0});var CQr=s(z$);Cvo=r(CQr,"FlaubertWithLMHeadModel"),CQr.forEach(t),Mvo=r(k3e," (FlauBERT model)"),k3e.forEach(t),Evo=i(N),s4=n(N,"LI",{});var R3e=s(s4);ure=n(R3e,"STRONG",{});var MQr=s(ure);yvo=r(MQr,"fnet"),MQr.forEach(t),wvo=r(R3e," \u2014 "),W$=n(R3e,"A",{href:!0});var EQr=s(W$);Avo=r(EQr,"FNetForMaskedLM"),EQr.forEach(t),Lvo=r(R3e," (FNet model)"),R3e.forEach(t),Bvo=i(N),l4=n(N,"LI",{});var S3e=s(l4);bre=n(S3e,"STRONG",{});var yQr=s(bre);xvo=r(yQr,"funnel"),yQr.forEach(t),kvo=r(S3e," \u2014 "),Q$=n(S3e,"A",{href:!0});var wQr=s(Q$);Rvo=r(wQr,"FunnelForMaskedLM"),wQr.forEach(t),Svo=r(S3e," (Funnel Transformer model)"),S3e.forEach(t),Pvo=i(N),i4=n(N,"LI",{});var P3e=s(i4);vre=n(P3e,"STRONG",{});var AQr=s(vre);$vo=r(AQr,"ibert"),AQr.forEach(t),Ivo=r(P3e," \u2014 "),H$=n(P3e,"A",{href:!0});var LQr=s(H$);jvo=r(LQr,"IBertForMaskedLM"),LQr.forEach(t),Nvo=r(P3e," (I-BERT model)"),P3e.forEach(t),Dvo=i(N),d4=n(N,"LI",{});var $3e=s(d4);Tre=n($3e,"STRONG",{});var BQr=s(Tre);qvo=r(BQr,"layoutlm"),BQr.forEach(t),Ovo=r($3e," \u2014 "),U$=n($3e,"A",{href:!0});var xQr=s(U$);Gvo=r(xQr,"LayoutLMForMaskedLM"),xQr.forEach(t),Xvo=r($3e," (LayoutLM model)"),$3e.forEach(t),Vvo=i(N),c4=n(N,"LI",{});var I3e=s(c4);Fre=n(I3e,"STRONG",{});var kQr=s(Fre);zvo=r(kQr,"longformer"),kQr.forEach(t),Wvo=r(I3e," \u2014 "),J$=n(I3e,"A",{href:!0});var RQr=s(J$);Qvo=r(RQr,"LongformerForMaskedLM"),RQr.forEach(t),Hvo=r(I3e," (Longformer model)"),I3e.forEach(t),Uvo=i(N),f4=n(N,"LI",{});var j3e=s(f4);Cre=n(j3e,"STRONG",{});var SQr=s(Cre);Jvo=r(SQr,"mbart"),SQr.forEach(t),Yvo=r(j3e," \u2014 "),Y$=n(j3e,"A",{href:!0});var PQr=s(Y$);Kvo=r(PQr,"MBartForConditionalGeneration"),PQr.forEach(t),Zvo=r(j3e," (mBART model)"),j3e.forEach(t),e6o=i(N),m4=n(N,"LI",{});var N3e=s(m4);Mre=n(N3e,"STRONG",{});var $Qr=s(Mre);o6o=r($Qr,"megatron-bert"),$Qr.forEach(t),r6o=r(N3e," \u2014 "),K$=n(N3e,"A",{href:!0});var IQr=s(K$);t6o=r(IQr,"MegatronBertForMaskedLM"),IQr.forEach(t),a6o=r(N3e," (MegatronBert model)"),N3e.forEach(t),n6o=i(N),g4=n(N,"LI",{});var D3e=s(g4);Ere=n(D3e,"STRONG",{});var jQr=s(Ere);s6o=r(jQr,"mobilebert"),jQr.forEach(t),l6o=r(D3e," \u2014 "),Z$=n(D3e,"A",{href:!0});var NQr=s(Z$);i6o=r(NQr,"MobileBertForMaskedLM"),NQr.forEach(t),d6o=r(D3e," (MobileBERT model)"),D3e.forEach(t),c6o=i(N),h4=n(N,"LI",{});var q3e=s(h4);yre=n(q3e,"STRONG",{});var DQr=s(yre);f6o=r(DQr,"mpnet"),DQr.forEach(t),m6o=r(q3e," \u2014 "),eI=n(q3e,"A",{href:!0});var qQr=s(eI);g6o=r(qQr,"MPNetForMaskedLM"),qQr.forEach(t),h6o=r(q3e," (MPNet model)"),q3e.forEach(t),p6o=i(N),p4=n(N,"LI",{});var O3e=s(p4);wre=n(O3e,"STRONG",{});var OQr=s(wre);_6o=r(OQr,"nystromformer"),OQr.forEach(t),u6o=r(O3e," \u2014 "),oI=n(O3e,"A",{href:!0});var GQr=s(oI);b6o=r(GQr,"NystromformerForMaskedLM"),GQr.forEach(t),v6o=r(O3e," (Nystromformer model)"),O3e.forEach(t),T6o=i(N),_4=n(N,"LI",{});var G3e=s(_4);Are=n(G3e,"STRONG",{});var XQr=s(Are);F6o=r(XQr,"perceiver"),XQr.forEach(t),C6o=r(G3e," \u2014 "),rI=n(G3e,"A",{href:!0});var VQr=s(rI);M6o=r(VQr,"PerceiverForMaskedLM"),VQr.forEach(t),E6o=r(G3e," (Perceiver model)"),G3e.forEach(t),y6o=i(N),u4=n(N,"LI",{});var X3e=s(u4);Lre=n(X3e,"STRONG",{});var zQr=s(Lre);w6o=r(zQr,"qdqbert"),zQr.forEach(t),A6o=r(X3e," \u2014 "),tI=n(X3e,"A",{href:!0});var WQr=s(tI);L6o=r(WQr,"QDQBertForMaskedLM"),WQr.forEach(t),B6o=r(X3e," (QDQBert model)"),X3e.forEach(t),x6o=i(N),b4=n(N,"LI",{});var V3e=s(b4);Bre=n(V3e,"STRONG",{});var QQr=s(Bre);k6o=r(QQr,"reformer"),QQr.forEach(t),R6o=r(V3e," \u2014 "),aI=n(V3e,"A",{href:!0});var HQr=s(aI);S6o=r(HQr,"ReformerForMaskedLM"),HQr.forEach(t),P6o=r(V3e," (Reformer model)"),V3e.forEach(t),$6o=i(N),v4=n(N,"LI",{});var z3e=s(v4);xre=n(z3e,"STRONG",{});var UQr=s(xre);I6o=r(UQr,"rembert"),UQr.forEach(t),j6o=r(z3e," \u2014 "),nI=n(z3e,"A",{href:!0});var JQr=s(nI);N6o=r(JQr,"RemBertForMaskedLM"),JQr.forEach(t),D6o=r(z3e," (RemBERT model)"),z3e.forEach(t),q6o=i(N),T4=n(N,"LI",{});var W3e=s(T4);kre=n(W3e,"STRONG",{});var YQr=s(kre);O6o=r(YQr,"roberta"),YQr.forEach(t),G6o=r(W3e," \u2014 "),sI=n(W3e,"A",{href:!0});var KQr=s(sI);X6o=r(KQr,"RobertaForMaskedLM"),KQr.forEach(t),V6o=r(W3e," (RoBERTa model)"),W3e.forEach(t),z6o=i(N),F4=n(N,"LI",{});var Q3e=s(F4);Rre=n(Q3e,"STRONG",{});var ZQr=s(Rre);W6o=r(ZQr,"roformer"),ZQr.forEach(t),Q6o=r(Q3e," \u2014 "),lI=n(Q3e,"A",{href:!0});var eHr=s(lI);H6o=r(eHr,"RoFormerForMaskedLM"),eHr.forEach(t),U6o=r(Q3e," (RoFormer model)"),Q3e.forEach(t),J6o=i(N),C4=n(N,"LI",{});var H3e=s(C4);Sre=n(H3e,"STRONG",{});var oHr=s(Sre);Y6o=r(oHr,"squeezebert"),oHr.forEach(t),K6o=r(H3e," \u2014 "),iI=n(H3e,"A",{href:!0});var rHr=s(iI);Z6o=r(rHr,"SqueezeBertForMaskedLM"),rHr.forEach(t),e0o=r(H3e," (SqueezeBERT model)"),H3e.forEach(t),o0o=i(N),M4=n(N,"LI",{});var U3e=s(M4);Pre=n(U3e,"STRONG",{});var tHr=s(Pre);r0o=r(tHr,"tapas"),tHr.forEach(t),t0o=r(U3e," \u2014 "),dI=n(U3e,"A",{href:!0});var aHr=s(dI);a0o=r(aHr,"TapasForMaskedLM"),aHr.forEach(t),n0o=r(U3e," (TAPAS model)"),U3e.forEach(t),s0o=i(N),E4=n(N,"LI",{});var J3e=s(E4);$re=n(J3e,"STRONG",{});var nHr=s($re);l0o=r(nHr,"wav2vec2"),nHr.forEach(t),i0o=r(J3e," \u2014 "),Ire=n(J3e,"CODE",{});var sHr=s(Ire);d0o=r(sHr,"Wav2Vec2ForMaskedLM"),sHr.forEach(t),c0o=r(J3e,"(Wav2Vec2 model)"),J3e.forEach(t),f0o=i(N),y4=n(N,"LI",{});var Y3e=s(y4);jre=n(Y3e,"STRONG",{});var lHr=s(jre);m0o=r(lHr,"xlm"),lHr.forEach(t),g0o=r(Y3e," \u2014 "),cI=n(Y3e,"A",{href:!0});var iHr=s(cI);h0o=r(iHr,"XLMWithLMHeadModel"),iHr.forEach(t),p0o=r(Y3e," (XLM model)"),Y3e.forEach(t),_0o=i(N),w4=n(N,"LI",{});var K3e=s(w4);Nre=n(K3e,"STRONG",{});var dHr=s(Nre);u0o=r(dHr,"xlm-roberta"),dHr.forEach(t),b0o=r(K3e," \u2014 "),fI=n(K3e,"A",{href:!0});var cHr=s(fI);v0o=r(cHr,"XLMRobertaForMaskedLM"),cHr.forEach(t),T0o=r(K3e," (XLM-RoBERTa model)"),K3e.forEach(t),F0o=i(N),A4=n(N,"LI",{});var Z3e=s(A4);Dre=n(Z3e,"STRONG",{});var fHr=s(Dre);C0o=r(fHr,"xlm-roberta-xl"),fHr.forEach(t),M0o=r(Z3e," \u2014 "),mI=n(Z3e,"A",{href:!0});var mHr=s(mI);E0o=r(mHr,"XLMRobertaXLForMaskedLM"),mHr.forEach(t),y0o=r(Z3e," (XLM-RoBERTa-XL model)"),Z3e.forEach(t),w0o=i(N),L4=n(N,"LI",{});var e5e=s(L4);qre=n(e5e,"STRONG",{});var gHr=s(qre);A0o=r(gHr,"yoso"),gHr.forEach(t),L0o=r(e5e," \u2014 "),gI=n(e5e,"A",{href:!0});var hHr=s(gI);B0o=r(hHr,"YosoForMaskedLM"),hHr.forEach(t),x0o=r(e5e," (YOSO model)"),e5e.forEach(t),N.forEach(t),k0o=i(Xt),B4=n(Xt,"P",{});var o5e=s(B4);R0o=r(o5e,"The model is set in evaluation mode by default using "),Ore=n(o5e,"CODE",{});var pHr=s(Ore);S0o=r(pHr,"model.eval()"),pHr.forEach(t),P0o=r(o5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gre=n(o5e,"CODE",{});var _Hr=s(Gre);$0o=r(_Hr,"model.train()"),_Hr.forEach(t),o5e.forEach(t),I0o=i(Xt),Xre=n(Xt,"P",{});var uHr=s(Xre);j0o=r(uHr,"Examples:"),uHr.forEach(t),N0o=i(Xt),m(i5.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),nke=i(c),dd=n(c,"H2",{class:!0});var hSe=s(dd);x4=n(hSe,"A",{id:!0,class:!0,href:!0});var bHr=s(x4);Vre=n(bHr,"SPAN",{});var vHr=s(Vre);m(d5.$$.fragment,vHr),vHr.forEach(t),bHr.forEach(t),D0o=i(hSe),zre=n(hSe,"SPAN",{});var THr=s(zre);q0o=r(THr,"AutoModelForSeq2SeqLM"),THr.forEach(t),hSe.forEach(t),ske=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(c5.$$.fragment,el),O0o=i(el),cd=n(el,"P",{});var Uz=s(cd);G0o=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wre=n(Uz,"CODE",{});var FHr=s(Wre);X0o=r(FHr,"from_pretrained()"),FHr.forEach(t),V0o=r(Uz,"class method or the "),Qre=n(Uz,"CODE",{});var CHr=s(Qre);z0o=r(CHr,"from_config()"),CHr.forEach(t),W0o=r(Uz,`class
method.`),Uz.forEach(t),Q0o=i(el),f5=n(el,"P",{});var pSe=s(f5);H0o=r(pSe,"This class cannot be instantiated directly using "),Hre=n(pSe,"CODE",{});var MHr=s(Hre);U0o=r(MHr,"__init__()"),MHr.forEach(t),J0o=r(pSe," (throws an error)."),pSe.forEach(t),Y0o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(m5.$$.fragment,ol),K0o=i(ol),Ure=n(ol,"P",{});var EHr=s(Ure);Z0o=r(EHr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EHr.forEach(t),eTo=i(ol),fd=n(ol,"P",{});var Jz=s(fd);oTo=r(Jz,`Note:
Loading a model from its configuration file does `),Jre=n(Jz,"STRONG",{});var yHr=s(Jre);rTo=r(yHr,"not"),yHr.forEach(t),tTo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yre=n(Jz,"CODE",{});var wHr=s(Yre);aTo=r(wHr,"from_pretrained()"),wHr.forEach(t),nTo=r(Jz,"to load the model weights."),Jz.forEach(t),sTo=i(ol),Kre=n(ol,"P",{});var AHr=s(Kre);lTo=r(AHr,"Examples:"),AHr.forEach(t),iTo=i(ol),m(g5.$$.fragment,ol),ol.forEach(t),dTo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(h5.$$.fragment,Vt),cTo=i(Vt),Zre=n(Vt,"P",{});var LHr=s(Zre);fTo=r(LHr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LHr.forEach(t),mTo=i(Vt),Ha=n(Vt,"P",{});var dE=s(Ha);gTo=r(dE,"The model class to instantiate is selected based on the "),ete=n(dE,"CODE",{});var BHr=s(ete);hTo=r(BHr,"model_type"),BHr.forEach(t),pTo=r(dE,` property of the config object (either
passed as an argument or loaded from `),ote=n(dE,"CODE",{});var xHr=s(ote);_To=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),uTo=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rte=n(dE,"CODE",{});var kHr=s(rte);bTo=r(kHr,"pretrained_model_name_or_path"),kHr.forEach(t),vTo=r(dE,":"),dE.forEach(t),TTo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);k4=n(ie,"LI",{});var r5e=s(k4);tte=n(r5e,"STRONG",{});var RHr=s(tte);FTo=r(RHr,"bart"),RHr.forEach(t),CTo=r(r5e," \u2014 "),hI=n(r5e,"A",{href:!0});var SHr=s(hI);MTo=r(SHr,"BartForConditionalGeneration"),SHr.forEach(t),ETo=r(r5e," (BART model)"),r5e.forEach(t),yTo=i(ie),R4=n(ie,"LI",{});var t5e=s(R4);ate=n(t5e,"STRONG",{});var PHr=s(ate);wTo=r(PHr,"bigbird_pegasus"),PHr.forEach(t),ATo=r(t5e," \u2014 "),pI=n(t5e,"A",{href:!0});var $Hr=s(pI);LTo=r($Hr,"BigBirdPegasusForConditionalGeneration"),$Hr.forEach(t),BTo=r(t5e," (BigBirdPegasus model)"),t5e.forEach(t),xTo=i(ie),S4=n(ie,"LI",{});var a5e=s(S4);nte=n(a5e,"STRONG",{});var IHr=s(nte);kTo=r(IHr,"blenderbot"),IHr.forEach(t),RTo=r(a5e," \u2014 "),_I=n(a5e,"A",{href:!0});var jHr=s(_I);STo=r(jHr,"BlenderbotForConditionalGeneration"),jHr.forEach(t),PTo=r(a5e," (Blenderbot model)"),a5e.forEach(t),$To=i(ie),P4=n(ie,"LI",{});var n5e=s(P4);ste=n(n5e,"STRONG",{});var NHr=s(ste);ITo=r(NHr,"blenderbot-small"),NHr.forEach(t),jTo=r(n5e," \u2014 "),uI=n(n5e,"A",{href:!0});var DHr=s(uI);NTo=r(DHr,"BlenderbotSmallForConditionalGeneration"),DHr.forEach(t),DTo=r(n5e," (BlenderbotSmall model)"),n5e.forEach(t),qTo=i(ie),$4=n(ie,"LI",{});var s5e=s($4);lte=n(s5e,"STRONG",{});var qHr=s(lte);OTo=r(qHr,"encoder-decoder"),qHr.forEach(t),GTo=r(s5e," \u2014 "),bI=n(s5e,"A",{href:!0});var OHr=s(bI);XTo=r(OHr,"EncoderDecoderModel"),OHr.forEach(t),VTo=r(s5e," (Encoder decoder model)"),s5e.forEach(t),zTo=i(ie),I4=n(ie,"LI",{});var l5e=s(I4);ite=n(l5e,"STRONG",{});var GHr=s(ite);WTo=r(GHr,"fsmt"),GHr.forEach(t),QTo=r(l5e," \u2014 "),vI=n(l5e,"A",{href:!0});var XHr=s(vI);HTo=r(XHr,"FSMTForConditionalGeneration"),XHr.forEach(t),UTo=r(l5e," (FairSeq Machine-Translation model)"),l5e.forEach(t),JTo=i(ie),j4=n(ie,"LI",{});var i5e=s(j4);dte=n(i5e,"STRONG",{});var VHr=s(dte);YTo=r(VHr,"led"),VHr.forEach(t),KTo=r(i5e," \u2014 "),TI=n(i5e,"A",{href:!0});var zHr=s(TI);ZTo=r(zHr,"LEDForConditionalGeneration"),zHr.forEach(t),eFo=r(i5e," (LED model)"),i5e.forEach(t),oFo=i(ie),N4=n(ie,"LI",{});var d5e=s(N4);cte=n(d5e,"STRONG",{});var WHr=s(cte);rFo=r(WHr,"m2m_100"),WHr.forEach(t),tFo=r(d5e," \u2014 "),FI=n(d5e,"A",{href:!0});var QHr=s(FI);aFo=r(QHr,"M2M100ForConditionalGeneration"),QHr.forEach(t),nFo=r(d5e," (M2M100 model)"),d5e.forEach(t),sFo=i(ie),D4=n(ie,"LI",{});var c5e=s(D4);fte=n(c5e,"STRONG",{});var HHr=s(fte);lFo=r(HHr,"marian"),HHr.forEach(t),iFo=r(c5e," \u2014 "),CI=n(c5e,"A",{href:!0});var UHr=s(CI);dFo=r(UHr,"MarianMTModel"),UHr.forEach(t),cFo=r(c5e," (Marian model)"),c5e.forEach(t),fFo=i(ie),q4=n(ie,"LI",{});var f5e=s(q4);mte=n(f5e,"STRONG",{});var JHr=s(mte);mFo=r(JHr,"mbart"),JHr.forEach(t),gFo=r(f5e," \u2014 "),MI=n(f5e,"A",{href:!0});var YHr=s(MI);hFo=r(YHr,"MBartForConditionalGeneration"),YHr.forEach(t),pFo=r(f5e," (mBART model)"),f5e.forEach(t),_Fo=i(ie),O4=n(ie,"LI",{});var m5e=s(O4);gte=n(m5e,"STRONG",{});var KHr=s(gte);uFo=r(KHr,"mt5"),KHr.forEach(t),bFo=r(m5e," \u2014 "),EI=n(m5e,"A",{href:!0});var ZHr=s(EI);vFo=r(ZHr,"MT5ForConditionalGeneration"),ZHr.forEach(t),TFo=r(m5e," (mT5 model)"),m5e.forEach(t),FFo=i(ie),G4=n(ie,"LI",{});var g5e=s(G4);hte=n(g5e,"STRONG",{});var eUr=s(hte);CFo=r(eUr,"pegasus"),eUr.forEach(t),MFo=r(g5e," \u2014 "),yI=n(g5e,"A",{href:!0});var oUr=s(yI);EFo=r(oUr,"PegasusForConditionalGeneration"),oUr.forEach(t),yFo=r(g5e," (Pegasus model)"),g5e.forEach(t),wFo=i(ie),X4=n(ie,"LI",{});var h5e=s(X4);pte=n(h5e,"STRONG",{});var rUr=s(pte);AFo=r(rUr,"plbart"),rUr.forEach(t),LFo=r(h5e," \u2014 "),wI=n(h5e,"A",{href:!0});var tUr=s(wI);BFo=r(tUr,"PLBartForConditionalGeneration"),tUr.forEach(t),xFo=r(h5e," (PLBart model)"),h5e.forEach(t),kFo=i(ie),V4=n(ie,"LI",{});var p5e=s(V4);_te=n(p5e,"STRONG",{});var aUr=s(_te);RFo=r(aUr,"prophetnet"),aUr.forEach(t),SFo=r(p5e," \u2014 "),AI=n(p5e,"A",{href:!0});var nUr=s(AI);PFo=r(nUr,"ProphetNetForConditionalGeneration"),nUr.forEach(t),$Fo=r(p5e," (ProphetNet model)"),p5e.forEach(t),IFo=i(ie),z4=n(ie,"LI",{});var _5e=s(z4);ute=n(_5e,"STRONG",{});var sUr=s(ute);jFo=r(sUr,"t5"),sUr.forEach(t),NFo=r(_5e," \u2014 "),LI=n(_5e,"A",{href:!0});var lUr=s(LI);DFo=r(lUr,"T5ForConditionalGeneration"),lUr.forEach(t),qFo=r(_5e," (T5 model)"),_5e.forEach(t),OFo=i(ie),W4=n(ie,"LI",{});var u5e=s(W4);bte=n(u5e,"STRONG",{});var iUr=s(bte);GFo=r(iUr,"xlm-prophetnet"),iUr.forEach(t),XFo=r(u5e," \u2014 "),BI=n(u5e,"A",{href:!0});var dUr=s(BI);VFo=r(dUr,"XLMProphetNetForConditionalGeneration"),dUr.forEach(t),zFo=r(u5e," (XLMProphetNet model)"),u5e.forEach(t),ie.forEach(t),WFo=i(Vt),Q4=n(Vt,"P",{});var b5e=s(Q4);QFo=r(b5e,"The model is set in evaluation mode by default using "),vte=n(b5e,"CODE",{});var cUr=s(vte);HFo=r(cUr,"model.eval()"),cUr.forEach(t),UFo=r(b5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tte=n(b5e,"CODE",{});var fUr=s(Tte);JFo=r(fUr,"model.train()"),fUr.forEach(t),b5e.forEach(t),YFo=i(Vt),Fte=n(Vt,"P",{});var mUr=s(Fte);KFo=r(mUr,"Examples:"),mUr.forEach(t),ZFo=i(Vt),m(p5.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),lke=i(c),md=n(c,"H2",{class:!0});var _Se=s(md);H4=n(_Se,"A",{id:!0,class:!0,href:!0});var gUr=s(H4);Cte=n(gUr,"SPAN",{});var hUr=s(Cte);m(_5.$$.fragment,hUr),hUr.forEach(t),gUr.forEach(t),eCo=i(_Se),Mte=n(_Se,"SPAN",{});var pUr=s(Mte);oCo=r(pUr,"AutoModelForSequenceClassification"),pUr.forEach(t),_Se.forEach(t),ike=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(u5.$$.fragment,rl),rCo=i(rl),gd=n(rl,"P",{});var Yz=s(gd);tCo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ete=n(Yz,"CODE",{});var _Ur=s(Ete);aCo=r(_Ur,"from_pretrained()"),_Ur.forEach(t),nCo=r(Yz,"class method or the "),yte=n(Yz,"CODE",{});var uUr=s(yte);sCo=r(uUr,"from_config()"),uUr.forEach(t),lCo=r(Yz,`class
method.`),Yz.forEach(t),iCo=i(rl),b5=n(rl,"P",{});var uSe=s(b5);dCo=r(uSe,"This class cannot be instantiated directly using "),wte=n(uSe,"CODE",{});var bUr=s(wte);cCo=r(bUr,"__init__()"),bUr.forEach(t),fCo=r(uSe," (throws an error)."),uSe.forEach(t),mCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(v5.$$.fragment,tl),gCo=i(tl),Ate=n(tl,"P",{});var vUr=s(Ate);hCo=r(vUr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vUr.forEach(t),pCo=i(tl),hd=n(tl,"P",{});var Kz=s(hd);_Co=r(Kz,`Note:
Loading a model from its configuration file does `),Lte=n(Kz,"STRONG",{});var TUr=s(Lte);uCo=r(TUr,"not"),TUr.forEach(t),bCo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=n(Kz,"CODE",{});var FUr=s(Bte);vCo=r(FUr,"from_pretrained()"),FUr.forEach(t),TCo=r(Kz,"to load the model weights."),Kz.forEach(t),FCo=i(tl),xte=n(tl,"P",{});var CUr=s(xte);CCo=r(CUr,"Examples:"),CUr.forEach(t),MCo=i(tl),m(T5.$$.fragment,tl),tl.forEach(t),ECo=i(rl),Xe=n(rl,"DIV",{class:!0});var zt=s(Xe);m(F5.$$.fragment,zt),yCo=i(zt),kte=n(zt,"P",{});var MUr=s(kte);wCo=r(MUr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MUr.forEach(t),ACo=i(zt),Ua=n(zt,"P",{});var cE=s(Ua);LCo=r(cE,"The model class to instantiate is selected based on the "),Rte=n(cE,"CODE",{});var EUr=s(Rte);BCo=r(EUr,"model_type"),EUr.forEach(t),xCo=r(cE,` property of the config object (either
passed as an argument or loaded from `),Ste=n(cE,"CODE",{});var yUr=s(Ste);kCo=r(yUr,"pretrained_model_name_or_path"),yUr.forEach(t),RCo=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=n(cE,"CODE",{});var wUr=s(Pte);SCo=r(wUr,"pretrained_model_name_or_path"),wUr.forEach(t),PCo=r(cE,":"),cE.forEach(t),$Co=i(zt),A=n(zt,"UL",{});var L=s(A);U4=n(L,"LI",{});var v5e=s(U4);$te=n(v5e,"STRONG",{});var AUr=s($te);ICo=r(AUr,"albert"),AUr.forEach(t),jCo=r(v5e," \u2014 "),xI=n(v5e,"A",{href:!0});var LUr=s(xI);NCo=r(LUr,"AlbertForSequenceClassification"),LUr.forEach(t),DCo=r(v5e," (ALBERT model)"),v5e.forEach(t),qCo=i(L),J4=n(L,"LI",{});var T5e=s(J4);Ite=n(T5e,"STRONG",{});var BUr=s(Ite);OCo=r(BUr,"bart"),BUr.forEach(t),GCo=r(T5e," \u2014 "),kI=n(T5e,"A",{href:!0});var xUr=s(kI);XCo=r(xUr,"BartForSequenceClassification"),xUr.forEach(t),VCo=r(T5e," (BART model)"),T5e.forEach(t),zCo=i(L),Y4=n(L,"LI",{});var F5e=s(Y4);jte=n(F5e,"STRONG",{});var kUr=s(jte);WCo=r(kUr,"bert"),kUr.forEach(t),QCo=r(F5e," \u2014 "),RI=n(F5e,"A",{href:!0});var RUr=s(RI);HCo=r(RUr,"BertForSequenceClassification"),RUr.forEach(t),UCo=r(F5e," (BERT model)"),F5e.forEach(t),JCo=i(L),K4=n(L,"LI",{});var C5e=s(K4);Nte=n(C5e,"STRONG",{});var SUr=s(Nte);YCo=r(SUr,"big_bird"),SUr.forEach(t),KCo=r(C5e," \u2014 "),SI=n(C5e,"A",{href:!0});var PUr=s(SI);ZCo=r(PUr,"BigBirdForSequenceClassification"),PUr.forEach(t),eMo=r(C5e," (BigBird model)"),C5e.forEach(t),oMo=i(L),Z4=n(L,"LI",{});var M5e=s(Z4);Dte=n(M5e,"STRONG",{});var $Ur=s(Dte);rMo=r($Ur,"bigbird_pegasus"),$Ur.forEach(t),tMo=r(M5e," \u2014 "),PI=n(M5e,"A",{href:!0});var IUr=s(PI);aMo=r(IUr,"BigBirdPegasusForSequenceClassification"),IUr.forEach(t),nMo=r(M5e," (BigBirdPegasus model)"),M5e.forEach(t),sMo=i(L),e1=n(L,"LI",{});var E5e=s(e1);qte=n(E5e,"STRONG",{});var jUr=s(qte);lMo=r(jUr,"camembert"),jUr.forEach(t),iMo=r(E5e," \u2014 "),$I=n(E5e,"A",{href:!0});var NUr=s($I);dMo=r(NUr,"CamembertForSequenceClassification"),NUr.forEach(t),cMo=r(E5e," (CamemBERT model)"),E5e.forEach(t),fMo=i(L),o1=n(L,"LI",{});var y5e=s(o1);Ote=n(y5e,"STRONG",{});var DUr=s(Ote);mMo=r(DUr,"canine"),DUr.forEach(t),gMo=r(y5e," \u2014 "),II=n(y5e,"A",{href:!0});var qUr=s(II);hMo=r(qUr,"CanineForSequenceClassification"),qUr.forEach(t),pMo=r(y5e," (Canine model)"),y5e.forEach(t),_Mo=i(L),r1=n(L,"LI",{});var w5e=s(r1);Gte=n(w5e,"STRONG",{});var OUr=s(Gte);uMo=r(OUr,"convbert"),OUr.forEach(t),bMo=r(w5e," \u2014 "),jI=n(w5e,"A",{href:!0});var GUr=s(jI);vMo=r(GUr,"ConvBertForSequenceClassification"),GUr.forEach(t),TMo=r(w5e," (ConvBERT model)"),w5e.forEach(t),FMo=i(L),t1=n(L,"LI",{});var A5e=s(t1);Xte=n(A5e,"STRONG",{});var XUr=s(Xte);CMo=r(XUr,"ctrl"),XUr.forEach(t),MMo=r(A5e," \u2014 "),NI=n(A5e,"A",{href:!0});var VUr=s(NI);EMo=r(VUr,"CTRLForSequenceClassification"),VUr.forEach(t),yMo=r(A5e," (CTRL model)"),A5e.forEach(t),wMo=i(L),a1=n(L,"LI",{});var L5e=s(a1);Vte=n(L5e,"STRONG",{});var zUr=s(Vte);AMo=r(zUr,"data2vec-text"),zUr.forEach(t),LMo=r(L5e," \u2014 "),DI=n(L5e,"A",{href:!0});var WUr=s(DI);BMo=r(WUr,"Data2VecTextForSequenceClassification"),WUr.forEach(t),xMo=r(L5e," (Data2VecText model)"),L5e.forEach(t),kMo=i(L),n1=n(L,"LI",{});var B5e=s(n1);zte=n(B5e,"STRONG",{});var QUr=s(zte);RMo=r(QUr,"deberta"),QUr.forEach(t),SMo=r(B5e," \u2014 "),qI=n(B5e,"A",{href:!0});var HUr=s(qI);PMo=r(HUr,"DebertaForSequenceClassification"),HUr.forEach(t),$Mo=r(B5e," (DeBERTa model)"),B5e.forEach(t),IMo=i(L),s1=n(L,"LI",{});var x5e=s(s1);Wte=n(x5e,"STRONG",{});var UUr=s(Wte);jMo=r(UUr,"deberta-v2"),UUr.forEach(t),NMo=r(x5e," \u2014 "),OI=n(x5e,"A",{href:!0});var JUr=s(OI);DMo=r(JUr,"DebertaV2ForSequenceClassification"),JUr.forEach(t),qMo=r(x5e," (DeBERTa-v2 model)"),x5e.forEach(t),OMo=i(L),l1=n(L,"LI",{});var k5e=s(l1);Qte=n(k5e,"STRONG",{});var YUr=s(Qte);GMo=r(YUr,"distilbert"),YUr.forEach(t),XMo=r(k5e," \u2014 "),GI=n(k5e,"A",{href:!0});var KUr=s(GI);VMo=r(KUr,"DistilBertForSequenceClassification"),KUr.forEach(t),zMo=r(k5e," (DistilBERT model)"),k5e.forEach(t),WMo=i(L),i1=n(L,"LI",{});var R5e=s(i1);Hte=n(R5e,"STRONG",{});var ZUr=s(Hte);QMo=r(ZUr,"electra"),ZUr.forEach(t),HMo=r(R5e," \u2014 "),XI=n(R5e,"A",{href:!0});var eJr=s(XI);UMo=r(eJr,"ElectraForSequenceClassification"),eJr.forEach(t),JMo=r(R5e," (ELECTRA model)"),R5e.forEach(t),YMo=i(L),d1=n(L,"LI",{});var S5e=s(d1);Ute=n(S5e,"STRONG",{});var oJr=s(Ute);KMo=r(oJr,"flaubert"),oJr.forEach(t),ZMo=r(S5e," \u2014 "),VI=n(S5e,"A",{href:!0});var rJr=s(VI);eEo=r(rJr,"FlaubertForSequenceClassification"),rJr.forEach(t),oEo=r(S5e," (FlauBERT model)"),S5e.forEach(t),rEo=i(L),c1=n(L,"LI",{});var P5e=s(c1);Jte=n(P5e,"STRONG",{});var tJr=s(Jte);tEo=r(tJr,"fnet"),tJr.forEach(t),aEo=r(P5e," \u2014 "),zI=n(P5e,"A",{href:!0});var aJr=s(zI);nEo=r(aJr,"FNetForSequenceClassification"),aJr.forEach(t),sEo=r(P5e," (FNet model)"),P5e.forEach(t),lEo=i(L),f1=n(L,"LI",{});var $5e=s(f1);Yte=n($5e,"STRONG",{});var nJr=s(Yte);iEo=r(nJr,"funnel"),nJr.forEach(t),dEo=r($5e," \u2014 "),WI=n($5e,"A",{href:!0});var sJr=s(WI);cEo=r(sJr,"FunnelForSequenceClassification"),sJr.forEach(t),fEo=r($5e," (Funnel Transformer model)"),$5e.forEach(t),mEo=i(L),m1=n(L,"LI",{});var I5e=s(m1);Kte=n(I5e,"STRONG",{});var lJr=s(Kte);gEo=r(lJr,"gpt2"),lJr.forEach(t),hEo=r(I5e," \u2014 "),QI=n(I5e,"A",{href:!0});var iJr=s(QI);pEo=r(iJr,"GPT2ForSequenceClassification"),iJr.forEach(t),_Eo=r(I5e," (OpenAI GPT-2 model)"),I5e.forEach(t),uEo=i(L),g1=n(L,"LI",{});var j5e=s(g1);Zte=n(j5e,"STRONG",{});var dJr=s(Zte);bEo=r(dJr,"gpt_neo"),dJr.forEach(t),vEo=r(j5e," \u2014 "),HI=n(j5e,"A",{href:!0});var cJr=s(HI);TEo=r(cJr,"GPTNeoForSequenceClassification"),cJr.forEach(t),FEo=r(j5e," (GPT Neo model)"),j5e.forEach(t),CEo=i(L),h1=n(L,"LI",{});var N5e=s(h1);eae=n(N5e,"STRONG",{});var fJr=s(eae);MEo=r(fJr,"gptj"),fJr.forEach(t),EEo=r(N5e," \u2014 "),UI=n(N5e,"A",{href:!0});var mJr=s(UI);yEo=r(mJr,"GPTJForSequenceClassification"),mJr.forEach(t),wEo=r(N5e," (GPT-J model)"),N5e.forEach(t),AEo=i(L),p1=n(L,"LI",{});var D5e=s(p1);oae=n(D5e,"STRONG",{});var gJr=s(oae);LEo=r(gJr,"ibert"),gJr.forEach(t),BEo=r(D5e," \u2014 "),JI=n(D5e,"A",{href:!0});var hJr=s(JI);xEo=r(hJr,"IBertForSequenceClassification"),hJr.forEach(t),kEo=r(D5e," (I-BERT model)"),D5e.forEach(t),REo=i(L),_1=n(L,"LI",{});var q5e=s(_1);rae=n(q5e,"STRONG",{});var pJr=s(rae);SEo=r(pJr,"layoutlm"),pJr.forEach(t),PEo=r(q5e," \u2014 "),YI=n(q5e,"A",{href:!0});var _Jr=s(YI);$Eo=r(_Jr,"LayoutLMForSequenceClassification"),_Jr.forEach(t),IEo=r(q5e," (LayoutLM model)"),q5e.forEach(t),jEo=i(L),u1=n(L,"LI",{});var O5e=s(u1);tae=n(O5e,"STRONG",{});var uJr=s(tae);NEo=r(uJr,"layoutlmv2"),uJr.forEach(t),DEo=r(O5e," \u2014 "),KI=n(O5e,"A",{href:!0});var bJr=s(KI);qEo=r(bJr,"LayoutLMv2ForSequenceClassification"),bJr.forEach(t),OEo=r(O5e," (LayoutLMv2 model)"),O5e.forEach(t),GEo=i(L),b1=n(L,"LI",{});var G5e=s(b1);aae=n(G5e,"STRONG",{});var vJr=s(aae);XEo=r(vJr,"led"),vJr.forEach(t),VEo=r(G5e," \u2014 "),ZI=n(G5e,"A",{href:!0});var TJr=s(ZI);zEo=r(TJr,"LEDForSequenceClassification"),TJr.forEach(t),WEo=r(G5e," (LED model)"),G5e.forEach(t),QEo=i(L),v1=n(L,"LI",{});var X5e=s(v1);nae=n(X5e,"STRONG",{});var FJr=s(nae);HEo=r(FJr,"longformer"),FJr.forEach(t),UEo=r(X5e," \u2014 "),ej=n(X5e,"A",{href:!0});var CJr=s(ej);JEo=r(CJr,"LongformerForSequenceClassification"),CJr.forEach(t),YEo=r(X5e," (Longformer model)"),X5e.forEach(t),KEo=i(L),T1=n(L,"LI",{});var V5e=s(T1);sae=n(V5e,"STRONG",{});var MJr=s(sae);ZEo=r(MJr,"mbart"),MJr.forEach(t),e3o=r(V5e," \u2014 "),oj=n(V5e,"A",{href:!0});var EJr=s(oj);o3o=r(EJr,"MBartForSequenceClassification"),EJr.forEach(t),r3o=r(V5e," (mBART model)"),V5e.forEach(t),t3o=i(L),F1=n(L,"LI",{});var z5e=s(F1);lae=n(z5e,"STRONG",{});var yJr=s(lae);a3o=r(yJr,"megatron-bert"),yJr.forEach(t),n3o=r(z5e," \u2014 "),rj=n(z5e,"A",{href:!0});var wJr=s(rj);s3o=r(wJr,"MegatronBertForSequenceClassification"),wJr.forEach(t),l3o=r(z5e," (MegatronBert model)"),z5e.forEach(t),i3o=i(L),C1=n(L,"LI",{});var W5e=s(C1);iae=n(W5e,"STRONG",{});var AJr=s(iae);d3o=r(AJr,"mobilebert"),AJr.forEach(t),c3o=r(W5e," \u2014 "),tj=n(W5e,"A",{href:!0});var LJr=s(tj);f3o=r(LJr,"MobileBertForSequenceClassification"),LJr.forEach(t),m3o=r(W5e," (MobileBERT model)"),W5e.forEach(t),g3o=i(L),M1=n(L,"LI",{});var Q5e=s(M1);dae=n(Q5e,"STRONG",{});var BJr=s(dae);h3o=r(BJr,"mpnet"),BJr.forEach(t),p3o=r(Q5e," \u2014 "),aj=n(Q5e,"A",{href:!0});var xJr=s(aj);_3o=r(xJr,"MPNetForSequenceClassification"),xJr.forEach(t),u3o=r(Q5e," (MPNet model)"),Q5e.forEach(t),b3o=i(L),E1=n(L,"LI",{});var H5e=s(E1);cae=n(H5e,"STRONG",{});var kJr=s(cae);v3o=r(kJr,"nystromformer"),kJr.forEach(t),T3o=r(H5e," \u2014 "),nj=n(H5e,"A",{href:!0});var RJr=s(nj);F3o=r(RJr,"NystromformerForSequenceClassification"),RJr.forEach(t),C3o=r(H5e," (Nystromformer model)"),H5e.forEach(t),M3o=i(L),y1=n(L,"LI",{});var U5e=s(y1);fae=n(U5e,"STRONG",{});var SJr=s(fae);E3o=r(SJr,"openai-gpt"),SJr.forEach(t),y3o=r(U5e," \u2014 "),sj=n(U5e,"A",{href:!0});var PJr=s(sj);w3o=r(PJr,"OpenAIGPTForSequenceClassification"),PJr.forEach(t),A3o=r(U5e," (OpenAI GPT model)"),U5e.forEach(t),L3o=i(L),w1=n(L,"LI",{});var J5e=s(w1);mae=n(J5e,"STRONG",{});var $Jr=s(mae);B3o=r($Jr,"perceiver"),$Jr.forEach(t),x3o=r(J5e," \u2014 "),lj=n(J5e,"A",{href:!0});var IJr=s(lj);k3o=r(IJr,"PerceiverForSequenceClassification"),IJr.forEach(t),R3o=r(J5e," (Perceiver model)"),J5e.forEach(t),S3o=i(L),A1=n(L,"LI",{});var Y5e=s(A1);gae=n(Y5e,"STRONG",{});var jJr=s(gae);P3o=r(jJr,"plbart"),jJr.forEach(t),$3o=r(Y5e," \u2014 "),ij=n(Y5e,"A",{href:!0});var NJr=s(ij);I3o=r(NJr,"PLBartForSequenceClassification"),NJr.forEach(t),j3o=r(Y5e," (PLBart model)"),Y5e.forEach(t),N3o=i(L),L1=n(L,"LI",{});var K5e=s(L1);hae=n(K5e,"STRONG",{});var DJr=s(hae);D3o=r(DJr,"qdqbert"),DJr.forEach(t),q3o=r(K5e," \u2014 "),dj=n(K5e,"A",{href:!0});var qJr=s(dj);O3o=r(qJr,"QDQBertForSequenceClassification"),qJr.forEach(t),G3o=r(K5e," (QDQBert model)"),K5e.forEach(t),X3o=i(L),B1=n(L,"LI",{});var Z5e=s(B1);pae=n(Z5e,"STRONG",{});var OJr=s(pae);V3o=r(OJr,"reformer"),OJr.forEach(t),z3o=r(Z5e," \u2014 "),cj=n(Z5e,"A",{href:!0});var GJr=s(cj);W3o=r(GJr,"ReformerForSequenceClassification"),GJr.forEach(t),Q3o=r(Z5e," (Reformer model)"),Z5e.forEach(t),H3o=i(L),x1=n(L,"LI",{});var eye=s(x1);_ae=n(eye,"STRONG",{});var XJr=s(_ae);U3o=r(XJr,"rembert"),XJr.forEach(t),J3o=r(eye," \u2014 "),fj=n(eye,"A",{href:!0});var VJr=s(fj);Y3o=r(VJr,"RemBertForSequenceClassification"),VJr.forEach(t),K3o=r(eye," (RemBERT model)"),eye.forEach(t),Z3o=i(L),k1=n(L,"LI",{});var oye=s(k1);uae=n(oye,"STRONG",{});var zJr=s(uae);e5o=r(zJr,"roberta"),zJr.forEach(t),o5o=r(oye," \u2014 "),mj=n(oye,"A",{href:!0});var WJr=s(mj);r5o=r(WJr,"RobertaForSequenceClassification"),WJr.forEach(t),t5o=r(oye," (RoBERTa model)"),oye.forEach(t),a5o=i(L),R1=n(L,"LI",{});var rye=s(R1);bae=n(rye,"STRONG",{});var QJr=s(bae);n5o=r(QJr,"roformer"),QJr.forEach(t),s5o=r(rye," \u2014 "),gj=n(rye,"A",{href:!0});var HJr=s(gj);l5o=r(HJr,"RoFormerForSequenceClassification"),HJr.forEach(t),i5o=r(rye," (RoFormer model)"),rye.forEach(t),d5o=i(L),S1=n(L,"LI",{});var tye=s(S1);vae=n(tye,"STRONG",{});var UJr=s(vae);c5o=r(UJr,"squeezebert"),UJr.forEach(t),f5o=r(tye," \u2014 "),hj=n(tye,"A",{href:!0});var JJr=s(hj);m5o=r(JJr,"SqueezeBertForSequenceClassification"),JJr.forEach(t),g5o=r(tye," (SqueezeBERT model)"),tye.forEach(t),h5o=i(L),P1=n(L,"LI",{});var aye=s(P1);Tae=n(aye,"STRONG",{});var YJr=s(Tae);p5o=r(YJr,"tapas"),YJr.forEach(t),_5o=r(aye," \u2014 "),pj=n(aye,"A",{href:!0});var KJr=s(pj);u5o=r(KJr,"TapasForSequenceClassification"),KJr.forEach(t),b5o=r(aye," (TAPAS model)"),aye.forEach(t),v5o=i(L),$1=n(L,"LI",{});var nye=s($1);Fae=n(nye,"STRONG",{});var ZJr=s(Fae);T5o=r(ZJr,"transfo-xl"),ZJr.forEach(t),F5o=r(nye," \u2014 "),_j=n(nye,"A",{href:!0});var eYr=s(_j);C5o=r(eYr,"TransfoXLForSequenceClassification"),eYr.forEach(t),M5o=r(nye," (Transformer-XL model)"),nye.forEach(t),E5o=i(L),I1=n(L,"LI",{});var sye=s(I1);Cae=n(sye,"STRONG",{});var oYr=s(Cae);y5o=r(oYr,"xlm"),oYr.forEach(t),w5o=r(sye," \u2014 "),uj=n(sye,"A",{href:!0});var rYr=s(uj);A5o=r(rYr,"XLMForSequenceClassification"),rYr.forEach(t),L5o=r(sye," (XLM model)"),sye.forEach(t),B5o=i(L),j1=n(L,"LI",{});var lye=s(j1);Mae=n(lye,"STRONG",{});var tYr=s(Mae);x5o=r(tYr,"xlm-roberta"),tYr.forEach(t),k5o=r(lye," \u2014 "),bj=n(lye,"A",{href:!0});var aYr=s(bj);R5o=r(aYr,"XLMRobertaForSequenceClassification"),aYr.forEach(t),S5o=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),P5o=i(L),N1=n(L,"LI",{});var iye=s(N1);Eae=n(iye,"STRONG",{});var nYr=s(Eae);$5o=r(nYr,"xlm-roberta-xl"),nYr.forEach(t),I5o=r(iye," \u2014 "),vj=n(iye,"A",{href:!0});var sYr=s(vj);j5o=r(sYr,"XLMRobertaXLForSequenceClassification"),sYr.forEach(t),N5o=r(iye," (XLM-RoBERTa-XL model)"),iye.forEach(t),D5o=i(L),D1=n(L,"LI",{});var dye=s(D1);yae=n(dye,"STRONG",{});var lYr=s(yae);q5o=r(lYr,"xlnet"),lYr.forEach(t),O5o=r(dye," \u2014 "),Tj=n(dye,"A",{href:!0});var iYr=s(Tj);G5o=r(iYr,"XLNetForSequenceClassification"),iYr.forEach(t),X5o=r(dye," (XLNet model)"),dye.forEach(t),V5o=i(L),q1=n(L,"LI",{});var cye=s(q1);wae=n(cye,"STRONG",{});var dYr=s(wae);z5o=r(dYr,"yoso"),dYr.forEach(t),W5o=r(cye," \u2014 "),Fj=n(cye,"A",{href:!0});var cYr=s(Fj);Q5o=r(cYr,"YosoForSequenceClassification"),cYr.forEach(t),H5o=r(cye," (YOSO model)"),cye.forEach(t),L.forEach(t),U5o=i(zt),O1=n(zt,"P",{});var fye=s(O1);J5o=r(fye,"The model is set in evaluation mode by default using "),Aae=n(fye,"CODE",{});var fYr=s(Aae);Y5o=r(fYr,"model.eval()"),fYr.forEach(t),K5o=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=n(fye,"CODE",{});var mYr=s(Lae);Z5o=r(mYr,"model.train()"),mYr.forEach(t),fye.forEach(t),eyo=i(zt),Bae=n(zt,"P",{});var gYr=s(Bae);oyo=r(gYr,"Examples:"),gYr.forEach(t),ryo=i(zt),m(C5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),dke=i(c),pd=n(c,"H2",{class:!0});var bSe=s(pd);G1=n(bSe,"A",{id:!0,class:!0,href:!0});var hYr=s(G1);xae=n(hYr,"SPAN",{});var pYr=s(xae);m(M5.$$.fragment,pYr),pYr.forEach(t),hYr.forEach(t),tyo=i(bSe),kae=n(bSe,"SPAN",{});var _Yr=s(kae);ayo=r(_Yr,"AutoModelForMultipleChoice"),_Yr.forEach(t),bSe.forEach(t),cke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(E5.$$.fragment,al),nyo=i(al),_d=n(al,"P",{});var Zz=s(_d);syo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rae=n(Zz,"CODE",{});var uYr=s(Rae);lyo=r(uYr,"from_pretrained()"),uYr.forEach(t),iyo=r(Zz,"class method or the "),Sae=n(Zz,"CODE",{});var bYr=s(Sae);dyo=r(bYr,"from_config()"),bYr.forEach(t),cyo=r(Zz,`class
method.`),Zz.forEach(t),fyo=i(al),y5=n(al,"P",{});var vSe=s(y5);myo=r(vSe,"This class cannot be instantiated directly using "),Pae=n(vSe,"CODE",{});var vYr=s(Pae);gyo=r(vYr,"__init__()"),vYr.forEach(t),hyo=r(vSe," (throws an error)."),vSe.forEach(t),pyo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(w5.$$.fragment,nl),_yo=i(nl),$ae=n(nl,"P",{});var TYr=s($ae);uyo=r(TYr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TYr.forEach(t),byo=i(nl),ud=n(nl,"P",{});var eW=s(ud);vyo=r(eW,`Note:
Loading a model from its configuration file does `),Iae=n(eW,"STRONG",{});var FYr=s(Iae);Tyo=r(FYr,"not"),FYr.forEach(t),Fyo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=n(eW,"CODE",{});var CYr=s(jae);Cyo=r(CYr,"from_pretrained()"),CYr.forEach(t),Myo=r(eW,"to load the model weights."),eW.forEach(t),Eyo=i(nl),Nae=n(nl,"P",{});var MYr=s(Nae);yyo=r(MYr,"Examples:"),MYr.forEach(t),wyo=i(nl),m(A5.$$.fragment,nl),nl.forEach(t),Ayo=i(al),Ve=n(al,"DIV",{class:!0});var Wt=s(Ve);m(L5.$$.fragment,Wt),Lyo=i(Wt),Dae=n(Wt,"P",{});var EYr=s(Dae);Byo=r(EYr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),EYr.forEach(t),xyo=i(Wt),Ja=n(Wt,"P",{});var fE=s(Ja);kyo=r(fE,"The model class to instantiate is selected based on the "),qae=n(fE,"CODE",{});var yYr=s(qae);Ryo=r(yYr,"model_type"),yYr.forEach(t),Syo=r(fE,` property of the config object (either
passed as an argument or loaded from `),Oae=n(fE,"CODE",{});var wYr=s(Oae);Pyo=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),$yo=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gae=n(fE,"CODE",{});var AYr=s(Gae);Iyo=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),jyo=r(fE,":"),fE.forEach(t),Nyo=i(Wt),O=n(Wt,"UL",{});var G=s(O);X1=n(G,"LI",{});var mye=s(X1);Xae=n(mye,"STRONG",{});var LYr=s(Xae);Dyo=r(LYr,"albert"),LYr.forEach(t),qyo=r(mye," \u2014 "),Cj=n(mye,"A",{href:!0});var BYr=s(Cj);Oyo=r(BYr,"AlbertForMultipleChoice"),BYr.forEach(t),Gyo=r(mye," (ALBERT model)"),mye.forEach(t),Xyo=i(G),V1=n(G,"LI",{});var gye=s(V1);Vae=n(gye,"STRONG",{});var xYr=s(Vae);Vyo=r(xYr,"bert"),xYr.forEach(t),zyo=r(gye," \u2014 "),Mj=n(gye,"A",{href:!0});var kYr=s(Mj);Wyo=r(kYr,"BertForMultipleChoice"),kYr.forEach(t),Qyo=r(gye," (BERT model)"),gye.forEach(t),Hyo=i(G),z1=n(G,"LI",{});var hye=s(z1);zae=n(hye,"STRONG",{});var RYr=s(zae);Uyo=r(RYr,"big_bird"),RYr.forEach(t),Jyo=r(hye," \u2014 "),Ej=n(hye,"A",{href:!0});var SYr=s(Ej);Yyo=r(SYr,"BigBirdForMultipleChoice"),SYr.forEach(t),Kyo=r(hye," (BigBird model)"),hye.forEach(t),Zyo=i(G),W1=n(G,"LI",{});var pye=s(W1);Wae=n(pye,"STRONG",{});var PYr=s(Wae);ewo=r(PYr,"camembert"),PYr.forEach(t),owo=r(pye," \u2014 "),yj=n(pye,"A",{href:!0});var $Yr=s(yj);rwo=r($Yr,"CamembertForMultipleChoice"),$Yr.forEach(t),two=r(pye," (CamemBERT model)"),pye.forEach(t),awo=i(G),Q1=n(G,"LI",{});var _ye=s(Q1);Qae=n(_ye,"STRONG",{});var IYr=s(Qae);nwo=r(IYr,"canine"),IYr.forEach(t),swo=r(_ye," \u2014 "),wj=n(_ye,"A",{href:!0});var jYr=s(wj);lwo=r(jYr,"CanineForMultipleChoice"),jYr.forEach(t),iwo=r(_ye," (Canine model)"),_ye.forEach(t),dwo=i(G),H1=n(G,"LI",{});var uye=s(H1);Hae=n(uye,"STRONG",{});var NYr=s(Hae);cwo=r(NYr,"convbert"),NYr.forEach(t),fwo=r(uye," \u2014 "),Aj=n(uye,"A",{href:!0});var DYr=s(Aj);mwo=r(DYr,"ConvBertForMultipleChoice"),DYr.forEach(t),gwo=r(uye," (ConvBERT model)"),uye.forEach(t),hwo=i(G),U1=n(G,"LI",{});var bye=s(U1);Uae=n(bye,"STRONG",{});var qYr=s(Uae);pwo=r(qYr,"data2vec-text"),qYr.forEach(t),_wo=r(bye," \u2014 "),Lj=n(bye,"A",{href:!0});var OYr=s(Lj);uwo=r(OYr,"Data2VecTextForMultipleChoice"),OYr.forEach(t),bwo=r(bye," (Data2VecText model)"),bye.forEach(t),vwo=i(G),J1=n(G,"LI",{});var vye=s(J1);Jae=n(vye,"STRONG",{});var GYr=s(Jae);Two=r(GYr,"distilbert"),GYr.forEach(t),Fwo=r(vye," \u2014 "),Bj=n(vye,"A",{href:!0});var XYr=s(Bj);Cwo=r(XYr,"DistilBertForMultipleChoice"),XYr.forEach(t),Mwo=r(vye," (DistilBERT model)"),vye.forEach(t),Ewo=i(G),Y1=n(G,"LI",{});var Tye=s(Y1);Yae=n(Tye,"STRONG",{});var VYr=s(Yae);ywo=r(VYr,"electra"),VYr.forEach(t),wwo=r(Tye," \u2014 "),xj=n(Tye,"A",{href:!0});var zYr=s(xj);Awo=r(zYr,"ElectraForMultipleChoice"),zYr.forEach(t),Lwo=r(Tye," (ELECTRA model)"),Tye.forEach(t),Bwo=i(G),K1=n(G,"LI",{});var Fye=s(K1);Kae=n(Fye,"STRONG",{});var WYr=s(Kae);xwo=r(WYr,"flaubert"),WYr.forEach(t),kwo=r(Fye," \u2014 "),kj=n(Fye,"A",{href:!0});var QYr=s(kj);Rwo=r(QYr,"FlaubertForMultipleChoice"),QYr.forEach(t),Swo=r(Fye," (FlauBERT model)"),Fye.forEach(t),Pwo=i(G),Z1=n(G,"LI",{});var Cye=s(Z1);Zae=n(Cye,"STRONG",{});var HYr=s(Zae);$wo=r(HYr,"fnet"),HYr.forEach(t),Iwo=r(Cye," \u2014 "),Rj=n(Cye,"A",{href:!0});var UYr=s(Rj);jwo=r(UYr,"FNetForMultipleChoice"),UYr.forEach(t),Nwo=r(Cye," (FNet model)"),Cye.forEach(t),Dwo=i(G),eb=n(G,"LI",{});var Mye=s(eb);ene=n(Mye,"STRONG",{});var JYr=s(ene);qwo=r(JYr,"funnel"),JYr.forEach(t),Owo=r(Mye," \u2014 "),Sj=n(Mye,"A",{href:!0});var YYr=s(Sj);Gwo=r(YYr,"FunnelForMultipleChoice"),YYr.forEach(t),Xwo=r(Mye," (Funnel Transformer model)"),Mye.forEach(t),Vwo=i(G),ob=n(G,"LI",{});var Eye=s(ob);one=n(Eye,"STRONG",{});var KYr=s(one);zwo=r(KYr,"ibert"),KYr.forEach(t),Wwo=r(Eye," \u2014 "),Pj=n(Eye,"A",{href:!0});var ZYr=s(Pj);Qwo=r(ZYr,"IBertForMultipleChoice"),ZYr.forEach(t),Hwo=r(Eye," (I-BERT model)"),Eye.forEach(t),Uwo=i(G),rb=n(G,"LI",{});var yye=s(rb);rne=n(yye,"STRONG",{});var eKr=s(rne);Jwo=r(eKr,"longformer"),eKr.forEach(t),Ywo=r(yye," \u2014 "),$j=n(yye,"A",{href:!0});var oKr=s($j);Kwo=r(oKr,"LongformerForMultipleChoice"),oKr.forEach(t),Zwo=r(yye," (Longformer model)"),yye.forEach(t),eAo=i(G),tb=n(G,"LI",{});var wye=s(tb);tne=n(wye,"STRONG",{});var rKr=s(tne);oAo=r(rKr,"megatron-bert"),rKr.forEach(t),rAo=r(wye," \u2014 "),Ij=n(wye,"A",{href:!0});var tKr=s(Ij);tAo=r(tKr,"MegatronBertForMultipleChoice"),tKr.forEach(t),aAo=r(wye," (MegatronBert model)"),wye.forEach(t),nAo=i(G),ab=n(G,"LI",{});var Aye=s(ab);ane=n(Aye,"STRONG",{});var aKr=s(ane);sAo=r(aKr,"mobilebert"),aKr.forEach(t),lAo=r(Aye," \u2014 "),jj=n(Aye,"A",{href:!0});var nKr=s(jj);iAo=r(nKr,"MobileBertForMultipleChoice"),nKr.forEach(t),dAo=r(Aye," (MobileBERT model)"),Aye.forEach(t),cAo=i(G),nb=n(G,"LI",{});var Lye=s(nb);nne=n(Lye,"STRONG",{});var sKr=s(nne);fAo=r(sKr,"mpnet"),sKr.forEach(t),mAo=r(Lye," \u2014 "),Nj=n(Lye,"A",{href:!0});var lKr=s(Nj);gAo=r(lKr,"MPNetForMultipleChoice"),lKr.forEach(t),hAo=r(Lye," (MPNet model)"),Lye.forEach(t),pAo=i(G),sb=n(G,"LI",{});var Bye=s(sb);sne=n(Bye,"STRONG",{});var iKr=s(sne);_Ao=r(iKr,"nystromformer"),iKr.forEach(t),uAo=r(Bye," \u2014 "),Dj=n(Bye,"A",{href:!0});var dKr=s(Dj);bAo=r(dKr,"NystromformerForMultipleChoice"),dKr.forEach(t),vAo=r(Bye," (Nystromformer model)"),Bye.forEach(t),TAo=i(G),lb=n(G,"LI",{});var xye=s(lb);lne=n(xye,"STRONG",{});var cKr=s(lne);FAo=r(cKr,"qdqbert"),cKr.forEach(t),CAo=r(xye," \u2014 "),qj=n(xye,"A",{href:!0});var fKr=s(qj);MAo=r(fKr,"QDQBertForMultipleChoice"),fKr.forEach(t),EAo=r(xye," (QDQBert model)"),xye.forEach(t),yAo=i(G),ib=n(G,"LI",{});var kye=s(ib);ine=n(kye,"STRONG",{});var mKr=s(ine);wAo=r(mKr,"rembert"),mKr.forEach(t),AAo=r(kye," \u2014 "),Oj=n(kye,"A",{href:!0});var gKr=s(Oj);LAo=r(gKr,"RemBertForMultipleChoice"),gKr.forEach(t),BAo=r(kye," (RemBERT model)"),kye.forEach(t),xAo=i(G),db=n(G,"LI",{});var Rye=s(db);dne=n(Rye,"STRONG",{});var hKr=s(dne);kAo=r(hKr,"roberta"),hKr.forEach(t),RAo=r(Rye," \u2014 "),Gj=n(Rye,"A",{href:!0});var pKr=s(Gj);SAo=r(pKr,"RobertaForMultipleChoice"),pKr.forEach(t),PAo=r(Rye," (RoBERTa model)"),Rye.forEach(t),$Ao=i(G),cb=n(G,"LI",{});var Sye=s(cb);cne=n(Sye,"STRONG",{});var _Kr=s(cne);IAo=r(_Kr,"roformer"),_Kr.forEach(t),jAo=r(Sye," \u2014 "),Xj=n(Sye,"A",{href:!0});var uKr=s(Xj);NAo=r(uKr,"RoFormerForMultipleChoice"),uKr.forEach(t),DAo=r(Sye," (RoFormer model)"),Sye.forEach(t),qAo=i(G),fb=n(G,"LI",{});var Pye=s(fb);fne=n(Pye,"STRONG",{});var bKr=s(fne);OAo=r(bKr,"squeezebert"),bKr.forEach(t),GAo=r(Pye," \u2014 "),Vj=n(Pye,"A",{href:!0});var vKr=s(Vj);XAo=r(vKr,"SqueezeBertForMultipleChoice"),vKr.forEach(t),VAo=r(Pye," (SqueezeBERT model)"),Pye.forEach(t),zAo=i(G),mb=n(G,"LI",{});var $ye=s(mb);mne=n($ye,"STRONG",{});var TKr=s(mne);WAo=r(TKr,"xlm"),TKr.forEach(t),QAo=r($ye," \u2014 "),zj=n($ye,"A",{href:!0});var FKr=s(zj);HAo=r(FKr,"XLMForMultipleChoice"),FKr.forEach(t),UAo=r($ye," (XLM model)"),$ye.forEach(t),JAo=i(G),gb=n(G,"LI",{});var Iye=s(gb);gne=n(Iye,"STRONG",{});var CKr=s(gne);YAo=r(CKr,"xlm-roberta"),CKr.forEach(t),KAo=r(Iye," \u2014 "),Wj=n(Iye,"A",{href:!0});var MKr=s(Wj);ZAo=r(MKr,"XLMRobertaForMultipleChoice"),MKr.forEach(t),eLo=r(Iye," (XLM-RoBERTa model)"),Iye.forEach(t),oLo=i(G),hb=n(G,"LI",{});var jye=s(hb);hne=n(jye,"STRONG",{});var EKr=s(hne);rLo=r(EKr,"xlm-roberta-xl"),EKr.forEach(t),tLo=r(jye," \u2014 "),Qj=n(jye,"A",{href:!0});var yKr=s(Qj);aLo=r(yKr,"XLMRobertaXLForMultipleChoice"),yKr.forEach(t),nLo=r(jye," (XLM-RoBERTa-XL model)"),jye.forEach(t),sLo=i(G),pb=n(G,"LI",{});var Nye=s(pb);pne=n(Nye,"STRONG",{});var wKr=s(pne);lLo=r(wKr,"xlnet"),wKr.forEach(t),iLo=r(Nye," \u2014 "),Hj=n(Nye,"A",{href:!0});var AKr=s(Hj);dLo=r(AKr,"XLNetForMultipleChoice"),AKr.forEach(t),cLo=r(Nye," (XLNet model)"),Nye.forEach(t),fLo=i(G),_b=n(G,"LI",{});var Dye=s(_b);_ne=n(Dye,"STRONG",{});var LKr=s(_ne);mLo=r(LKr,"yoso"),LKr.forEach(t),gLo=r(Dye," \u2014 "),Uj=n(Dye,"A",{href:!0});var BKr=s(Uj);hLo=r(BKr,"YosoForMultipleChoice"),BKr.forEach(t),pLo=r(Dye," (YOSO model)"),Dye.forEach(t),G.forEach(t),_Lo=i(Wt),ub=n(Wt,"P",{});var qye=s(ub);uLo=r(qye,"The model is set in evaluation mode by default using "),une=n(qye,"CODE",{});var xKr=s(une);bLo=r(xKr,"model.eval()"),xKr.forEach(t),vLo=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bne=n(qye,"CODE",{});var kKr=s(bne);TLo=r(kKr,"model.train()"),kKr.forEach(t),qye.forEach(t),FLo=i(Wt),vne=n(Wt,"P",{});var RKr=s(vne);CLo=r(RKr,"Examples:"),RKr.forEach(t),MLo=i(Wt),m(B5.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),fke=i(c),bd=n(c,"H2",{class:!0});var TSe=s(bd);bb=n(TSe,"A",{id:!0,class:!0,href:!0});var SKr=s(bb);Tne=n(SKr,"SPAN",{});var PKr=s(Tne);m(x5.$$.fragment,PKr),PKr.forEach(t),SKr.forEach(t),ELo=i(TSe),Fne=n(TSe,"SPAN",{});var $Kr=s(Fne);yLo=r($Kr,"AutoModelForNextSentencePrediction"),$Kr.forEach(t),TSe.forEach(t),mke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(k5.$$.fragment,sl),wLo=i(sl),vd=n(sl,"P",{});var oW=s(vd);ALo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cne=n(oW,"CODE",{});var IKr=s(Cne);LLo=r(IKr,"from_pretrained()"),IKr.forEach(t),BLo=r(oW,"class method or the "),Mne=n(oW,"CODE",{});var jKr=s(Mne);xLo=r(jKr,"from_config()"),jKr.forEach(t),kLo=r(oW,`class
method.`),oW.forEach(t),RLo=i(sl),R5=n(sl,"P",{});var FSe=s(R5);SLo=r(FSe,"This class cannot be instantiated directly using "),Ene=n(FSe,"CODE",{});var NKr=s(Ene);PLo=r(NKr,"__init__()"),NKr.forEach(t),$Lo=r(FSe," (throws an error)."),FSe.forEach(t),ILo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(S5.$$.fragment,ll),jLo=i(ll),yne=n(ll,"P",{});var DKr=s(yne);NLo=r(DKr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DKr.forEach(t),DLo=i(ll),Td=n(ll,"P",{});var rW=s(Td);qLo=r(rW,`Note:
Loading a model from its configuration file does `),wne=n(rW,"STRONG",{});var qKr=s(wne);OLo=r(qKr,"not"),qKr.forEach(t),GLo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ane=n(rW,"CODE",{});var OKr=s(Ane);XLo=r(OKr,"from_pretrained()"),OKr.forEach(t),VLo=r(rW,"to load the model weights."),rW.forEach(t),zLo=i(ll),Lne=n(ll,"P",{});var GKr=s(Lne);WLo=r(GKr,"Examples:"),GKr.forEach(t),QLo=i(ll),m(P5.$$.fragment,ll),ll.forEach(t),HLo=i(sl),ze=n(sl,"DIV",{class:!0});var Qt=s(ze);m($5.$$.fragment,Qt),ULo=i(Qt),Bne=n(Qt,"P",{});var XKr=s(Bne);JLo=r(XKr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XKr.forEach(t),YLo=i(Qt),Ya=n(Qt,"P",{});var mE=s(Ya);KLo=r(mE,"The model class to instantiate is selected based on the "),xne=n(mE,"CODE",{});var VKr=s(xne);ZLo=r(VKr,"model_type"),VKr.forEach(t),e7o=r(mE,` property of the config object (either
passed as an argument or loaded from `),kne=n(mE,"CODE",{});var zKr=s(kne);o7o=r(zKr,"pretrained_model_name_or_path"),zKr.forEach(t),r7o=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=n(mE,"CODE",{});var WKr=s(Rne);t7o=r(WKr,"pretrained_model_name_or_path"),WKr.forEach(t),a7o=r(mE,":"),mE.forEach(t),n7o=i(Qt),da=n(Qt,"UL",{});var il=s(da);vb=n(il,"LI",{});var Oye=s(vb);Sne=n(Oye,"STRONG",{});var QKr=s(Sne);s7o=r(QKr,"bert"),QKr.forEach(t),l7o=r(Oye," \u2014 "),Jj=n(Oye,"A",{href:!0});var HKr=s(Jj);i7o=r(HKr,"BertForNextSentencePrediction"),HKr.forEach(t),d7o=r(Oye," (BERT model)"),Oye.forEach(t),c7o=i(il),Tb=n(il,"LI",{});var Gye=s(Tb);Pne=n(Gye,"STRONG",{});var UKr=s(Pne);f7o=r(UKr,"fnet"),UKr.forEach(t),m7o=r(Gye," \u2014 "),Yj=n(Gye,"A",{href:!0});var JKr=s(Yj);g7o=r(JKr,"FNetForNextSentencePrediction"),JKr.forEach(t),h7o=r(Gye," (FNet model)"),Gye.forEach(t),p7o=i(il),Fb=n(il,"LI",{});var Xye=s(Fb);$ne=n(Xye,"STRONG",{});var YKr=s($ne);_7o=r(YKr,"megatron-bert"),YKr.forEach(t),u7o=r(Xye," \u2014 "),Kj=n(Xye,"A",{href:!0});var KKr=s(Kj);b7o=r(KKr,"MegatronBertForNextSentencePrediction"),KKr.forEach(t),v7o=r(Xye," (MegatronBert model)"),Xye.forEach(t),T7o=i(il),Cb=n(il,"LI",{});var Vye=s(Cb);Ine=n(Vye,"STRONG",{});var ZKr=s(Ine);F7o=r(ZKr,"mobilebert"),ZKr.forEach(t),C7o=r(Vye," \u2014 "),Zj=n(Vye,"A",{href:!0});var eZr=s(Zj);M7o=r(eZr,"MobileBertForNextSentencePrediction"),eZr.forEach(t),E7o=r(Vye," (MobileBERT model)"),Vye.forEach(t),y7o=i(il),Mb=n(il,"LI",{});var zye=s(Mb);jne=n(zye,"STRONG",{});var oZr=s(jne);w7o=r(oZr,"qdqbert"),oZr.forEach(t),A7o=r(zye," \u2014 "),eN=n(zye,"A",{href:!0});var rZr=s(eN);L7o=r(rZr,"QDQBertForNextSentencePrediction"),rZr.forEach(t),B7o=r(zye," (QDQBert model)"),zye.forEach(t),il.forEach(t),x7o=i(Qt),Eb=n(Qt,"P",{});var Wye=s(Eb);k7o=r(Wye,"The model is set in evaluation mode by default using "),Nne=n(Wye,"CODE",{});var tZr=s(Nne);R7o=r(tZr,"model.eval()"),tZr.forEach(t),S7o=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=n(Wye,"CODE",{});var aZr=s(Dne);P7o=r(aZr,"model.train()"),aZr.forEach(t),Wye.forEach(t),$7o=i(Qt),qne=n(Qt,"P",{});var nZr=s(qne);I7o=r(nZr,"Examples:"),nZr.forEach(t),j7o=i(Qt),m(I5.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),gke=i(c),Fd=n(c,"H2",{class:!0});var CSe=s(Fd);yb=n(CSe,"A",{id:!0,class:!0,href:!0});var sZr=s(yb);One=n(sZr,"SPAN",{});var lZr=s(One);m(j5.$$.fragment,lZr),lZr.forEach(t),sZr.forEach(t),N7o=i(CSe),Gne=n(CSe,"SPAN",{});var iZr=s(Gne);D7o=r(iZr,"AutoModelForTokenClassification"),iZr.forEach(t),CSe.forEach(t),hke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(N5.$$.fragment,dl),q7o=i(dl),Cd=n(dl,"P",{});var tW=s(Cd);O7o=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xne=n(tW,"CODE",{});var dZr=s(Xne);G7o=r(dZr,"from_pretrained()"),dZr.forEach(t),X7o=r(tW,"class method or the "),Vne=n(tW,"CODE",{});var cZr=s(Vne);V7o=r(cZr,"from_config()"),cZr.forEach(t),z7o=r(tW,`class
method.`),tW.forEach(t),W7o=i(dl),D5=n(dl,"P",{});var MSe=s(D5);Q7o=r(MSe,"This class cannot be instantiated directly using "),zne=n(MSe,"CODE",{});var fZr=s(zne);H7o=r(fZr,"__init__()"),fZr.forEach(t),U7o=r(MSe," (throws an error)."),MSe.forEach(t),J7o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(q5.$$.fragment,cl),Y7o=i(cl),Wne=n(cl,"P",{});var mZr=s(Wne);K7o=r(mZr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mZr.forEach(t),Z7o=i(cl),Md=n(cl,"P",{});var aW=s(Md);e8o=r(aW,`Note:
Loading a model from its configuration file does `),Qne=n(aW,"STRONG",{});var gZr=s(Qne);o8o=r(gZr,"not"),gZr.forEach(t),r8o=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hne=n(aW,"CODE",{});var hZr=s(Hne);t8o=r(hZr,"from_pretrained()"),hZr.forEach(t),a8o=r(aW,"to load the model weights."),aW.forEach(t),n8o=i(cl),Une=n(cl,"P",{});var pZr=s(Une);s8o=r(pZr,"Examples:"),pZr.forEach(t),l8o=i(cl),m(O5.$$.fragment,cl),cl.forEach(t),i8o=i(dl),We=n(dl,"DIV",{class:!0});var Ht=s(We);m(G5.$$.fragment,Ht),d8o=i(Ht),Jne=n(Ht,"P",{});var _Zr=s(Jne);c8o=r(_Zr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Zr.forEach(t),f8o=i(Ht),Ka=n(Ht,"P",{});var gE=s(Ka);m8o=r(gE,"The model class to instantiate is selected based on the "),Yne=n(gE,"CODE",{});var uZr=s(Yne);g8o=r(uZr,"model_type"),uZr.forEach(t),h8o=r(gE,` property of the config object (either
passed as an argument or loaded from `),Kne=n(gE,"CODE",{});var bZr=s(Kne);p8o=r(bZr,"pretrained_model_name_or_path"),bZr.forEach(t),_8o=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=n(gE,"CODE",{});var vZr=s(Zne);u8o=r(vZr,"pretrained_model_name_or_path"),vZr.forEach(t),b8o=r(gE,":"),gE.forEach(t),v8o=i(Ht),D=n(Ht,"UL",{});var q=s(D);wb=n(q,"LI",{});var Qye=s(wb);ese=n(Qye,"STRONG",{});var TZr=s(ese);T8o=r(TZr,"albert"),TZr.forEach(t),F8o=r(Qye," \u2014 "),oN=n(Qye,"A",{href:!0});var FZr=s(oN);C8o=r(FZr,"AlbertForTokenClassification"),FZr.forEach(t),M8o=r(Qye," (ALBERT model)"),Qye.forEach(t),E8o=i(q),Ab=n(q,"LI",{});var Hye=s(Ab);ose=n(Hye,"STRONG",{});var CZr=s(ose);y8o=r(CZr,"bert"),CZr.forEach(t),w8o=r(Hye," \u2014 "),rN=n(Hye,"A",{href:!0});var MZr=s(rN);A8o=r(MZr,"BertForTokenClassification"),MZr.forEach(t),L8o=r(Hye," (BERT model)"),Hye.forEach(t),B8o=i(q),Lb=n(q,"LI",{});var Uye=s(Lb);rse=n(Uye,"STRONG",{});var EZr=s(rse);x8o=r(EZr,"big_bird"),EZr.forEach(t),k8o=r(Uye," \u2014 "),tN=n(Uye,"A",{href:!0});var yZr=s(tN);R8o=r(yZr,"BigBirdForTokenClassification"),yZr.forEach(t),S8o=r(Uye," (BigBird model)"),Uye.forEach(t),P8o=i(q),Bb=n(q,"LI",{});var Jye=s(Bb);tse=n(Jye,"STRONG",{});var wZr=s(tse);$8o=r(wZr,"camembert"),wZr.forEach(t),I8o=r(Jye," \u2014 "),aN=n(Jye,"A",{href:!0});var AZr=s(aN);j8o=r(AZr,"CamembertForTokenClassification"),AZr.forEach(t),N8o=r(Jye," (CamemBERT model)"),Jye.forEach(t),D8o=i(q),xb=n(q,"LI",{});var Yye=s(xb);ase=n(Yye,"STRONG",{});var LZr=s(ase);q8o=r(LZr,"canine"),LZr.forEach(t),O8o=r(Yye," \u2014 "),nN=n(Yye,"A",{href:!0});var BZr=s(nN);G8o=r(BZr,"CanineForTokenClassification"),BZr.forEach(t),X8o=r(Yye," (Canine model)"),Yye.forEach(t),V8o=i(q),kb=n(q,"LI",{});var Kye=s(kb);nse=n(Kye,"STRONG",{});var xZr=s(nse);z8o=r(xZr,"convbert"),xZr.forEach(t),W8o=r(Kye," \u2014 "),sN=n(Kye,"A",{href:!0});var kZr=s(sN);Q8o=r(kZr,"ConvBertForTokenClassification"),kZr.forEach(t),H8o=r(Kye," (ConvBERT model)"),Kye.forEach(t),U8o=i(q),Rb=n(q,"LI",{});var Zye=s(Rb);sse=n(Zye,"STRONG",{});var RZr=s(sse);J8o=r(RZr,"data2vec-text"),RZr.forEach(t),Y8o=r(Zye," \u2014 "),lN=n(Zye,"A",{href:!0});var SZr=s(lN);K8o=r(SZr,"Data2VecTextForTokenClassification"),SZr.forEach(t),Z8o=r(Zye," (Data2VecText model)"),Zye.forEach(t),e9o=i(q),Sb=n(q,"LI",{});var ewe=s(Sb);lse=n(ewe,"STRONG",{});var PZr=s(lse);o9o=r(PZr,"deberta"),PZr.forEach(t),r9o=r(ewe," \u2014 "),iN=n(ewe,"A",{href:!0});var $Zr=s(iN);t9o=r($Zr,"DebertaForTokenClassification"),$Zr.forEach(t),a9o=r(ewe," (DeBERTa model)"),ewe.forEach(t),n9o=i(q),Pb=n(q,"LI",{});var owe=s(Pb);ise=n(owe,"STRONG",{});var IZr=s(ise);s9o=r(IZr,"deberta-v2"),IZr.forEach(t),l9o=r(owe," \u2014 "),dN=n(owe,"A",{href:!0});var jZr=s(dN);i9o=r(jZr,"DebertaV2ForTokenClassification"),jZr.forEach(t),d9o=r(owe," (DeBERTa-v2 model)"),owe.forEach(t),c9o=i(q),$b=n(q,"LI",{});var rwe=s($b);dse=n(rwe,"STRONG",{});var NZr=s(dse);f9o=r(NZr,"distilbert"),NZr.forEach(t),m9o=r(rwe," \u2014 "),cN=n(rwe,"A",{href:!0});var DZr=s(cN);g9o=r(DZr,"DistilBertForTokenClassification"),DZr.forEach(t),h9o=r(rwe," (DistilBERT model)"),rwe.forEach(t),p9o=i(q),Ib=n(q,"LI",{});var twe=s(Ib);cse=n(twe,"STRONG",{});var qZr=s(cse);_9o=r(qZr,"electra"),qZr.forEach(t),u9o=r(twe," \u2014 "),fN=n(twe,"A",{href:!0});var OZr=s(fN);b9o=r(OZr,"ElectraForTokenClassification"),OZr.forEach(t),v9o=r(twe," (ELECTRA model)"),twe.forEach(t),T9o=i(q),jb=n(q,"LI",{});var awe=s(jb);fse=n(awe,"STRONG",{});var GZr=s(fse);F9o=r(GZr,"flaubert"),GZr.forEach(t),C9o=r(awe," \u2014 "),mN=n(awe,"A",{href:!0});var XZr=s(mN);M9o=r(XZr,"FlaubertForTokenClassification"),XZr.forEach(t),E9o=r(awe," (FlauBERT model)"),awe.forEach(t),y9o=i(q),Nb=n(q,"LI",{});var nwe=s(Nb);mse=n(nwe,"STRONG",{});var VZr=s(mse);w9o=r(VZr,"fnet"),VZr.forEach(t),A9o=r(nwe," \u2014 "),gN=n(nwe,"A",{href:!0});var zZr=s(gN);L9o=r(zZr,"FNetForTokenClassification"),zZr.forEach(t),B9o=r(nwe," (FNet model)"),nwe.forEach(t),x9o=i(q),Db=n(q,"LI",{});var swe=s(Db);gse=n(swe,"STRONG",{});var WZr=s(gse);k9o=r(WZr,"funnel"),WZr.forEach(t),R9o=r(swe," \u2014 "),hN=n(swe,"A",{href:!0});var QZr=s(hN);S9o=r(QZr,"FunnelForTokenClassification"),QZr.forEach(t),P9o=r(swe," (Funnel Transformer model)"),swe.forEach(t),$9o=i(q),qb=n(q,"LI",{});var lwe=s(qb);hse=n(lwe,"STRONG",{});var HZr=s(hse);I9o=r(HZr,"gpt2"),HZr.forEach(t),j9o=r(lwe," \u2014 "),pN=n(lwe,"A",{href:!0});var UZr=s(pN);N9o=r(UZr,"GPT2ForTokenClassification"),UZr.forEach(t),D9o=r(lwe," (OpenAI GPT-2 model)"),lwe.forEach(t),q9o=i(q),Ob=n(q,"LI",{});var iwe=s(Ob);pse=n(iwe,"STRONG",{});var JZr=s(pse);O9o=r(JZr,"ibert"),JZr.forEach(t),G9o=r(iwe," \u2014 "),_N=n(iwe,"A",{href:!0});var YZr=s(_N);X9o=r(YZr,"IBertForTokenClassification"),YZr.forEach(t),V9o=r(iwe," (I-BERT model)"),iwe.forEach(t),z9o=i(q),Gb=n(q,"LI",{});var dwe=s(Gb);_se=n(dwe,"STRONG",{});var KZr=s(_se);W9o=r(KZr,"layoutlm"),KZr.forEach(t),Q9o=r(dwe," \u2014 "),uN=n(dwe,"A",{href:!0});var ZZr=s(uN);H9o=r(ZZr,"LayoutLMForTokenClassification"),ZZr.forEach(t),U9o=r(dwe," (LayoutLM model)"),dwe.forEach(t),J9o=i(q),Xb=n(q,"LI",{});var cwe=s(Xb);use=n(cwe,"STRONG",{});var eet=s(use);Y9o=r(eet,"layoutlmv2"),eet.forEach(t),K9o=r(cwe," \u2014 "),bN=n(cwe,"A",{href:!0});var oet=s(bN);Z9o=r(oet,"LayoutLMv2ForTokenClassification"),oet.forEach(t),eBo=r(cwe," (LayoutLMv2 model)"),cwe.forEach(t),oBo=i(q),Vb=n(q,"LI",{});var fwe=s(Vb);bse=n(fwe,"STRONG",{});var ret=s(bse);rBo=r(ret,"longformer"),ret.forEach(t),tBo=r(fwe," \u2014 "),vN=n(fwe,"A",{href:!0});var tet=s(vN);aBo=r(tet,"LongformerForTokenClassification"),tet.forEach(t),nBo=r(fwe," (Longformer model)"),fwe.forEach(t),sBo=i(q),zb=n(q,"LI",{});var mwe=s(zb);vse=n(mwe,"STRONG",{});var aet=s(vse);lBo=r(aet,"megatron-bert"),aet.forEach(t),iBo=r(mwe," \u2014 "),TN=n(mwe,"A",{href:!0});var net=s(TN);dBo=r(net,"MegatronBertForTokenClassification"),net.forEach(t),cBo=r(mwe," (MegatronBert model)"),mwe.forEach(t),fBo=i(q),Wb=n(q,"LI",{});var gwe=s(Wb);Tse=n(gwe,"STRONG",{});var set=s(Tse);mBo=r(set,"mobilebert"),set.forEach(t),gBo=r(gwe," \u2014 "),FN=n(gwe,"A",{href:!0});var iet=s(FN);hBo=r(iet,"MobileBertForTokenClassification"),iet.forEach(t),pBo=r(gwe," (MobileBERT model)"),gwe.forEach(t),_Bo=i(q),Qb=n(q,"LI",{});var hwe=s(Qb);Fse=n(hwe,"STRONG",{});var det=s(Fse);uBo=r(det,"mpnet"),det.forEach(t),bBo=r(hwe," \u2014 "),CN=n(hwe,"A",{href:!0});var cet=s(CN);vBo=r(cet,"MPNetForTokenClassification"),cet.forEach(t),TBo=r(hwe," (MPNet model)"),hwe.forEach(t),FBo=i(q),Hb=n(q,"LI",{});var pwe=s(Hb);Cse=n(pwe,"STRONG",{});var fet=s(Cse);CBo=r(fet,"nystromformer"),fet.forEach(t),MBo=r(pwe," \u2014 "),MN=n(pwe,"A",{href:!0});var met=s(MN);EBo=r(met,"NystromformerForTokenClassification"),met.forEach(t),yBo=r(pwe," (Nystromformer model)"),pwe.forEach(t),wBo=i(q),Ub=n(q,"LI",{});var _we=s(Ub);Mse=n(_we,"STRONG",{});var get=s(Mse);ABo=r(get,"qdqbert"),get.forEach(t),LBo=r(_we," \u2014 "),EN=n(_we,"A",{href:!0});var het=s(EN);BBo=r(het,"QDQBertForTokenClassification"),het.forEach(t),xBo=r(_we," (QDQBert model)"),_we.forEach(t),kBo=i(q),Jb=n(q,"LI",{});var uwe=s(Jb);Ese=n(uwe,"STRONG",{});var pet=s(Ese);RBo=r(pet,"rembert"),pet.forEach(t),SBo=r(uwe," \u2014 "),yN=n(uwe,"A",{href:!0});var _et=s(yN);PBo=r(_et,"RemBertForTokenClassification"),_et.forEach(t),$Bo=r(uwe," (RemBERT model)"),uwe.forEach(t),IBo=i(q),Yb=n(q,"LI",{});var bwe=s(Yb);yse=n(bwe,"STRONG",{});var uet=s(yse);jBo=r(uet,"roberta"),uet.forEach(t),NBo=r(bwe," \u2014 "),wN=n(bwe,"A",{href:!0});var bet=s(wN);DBo=r(bet,"RobertaForTokenClassification"),bet.forEach(t),qBo=r(bwe," (RoBERTa model)"),bwe.forEach(t),OBo=i(q),Kb=n(q,"LI",{});var vwe=s(Kb);wse=n(vwe,"STRONG",{});var vet=s(wse);GBo=r(vet,"roformer"),vet.forEach(t),XBo=r(vwe," \u2014 "),AN=n(vwe,"A",{href:!0});var Tet=s(AN);VBo=r(Tet,"RoFormerForTokenClassification"),Tet.forEach(t),zBo=r(vwe," (RoFormer model)"),vwe.forEach(t),WBo=i(q),Zb=n(q,"LI",{});var Twe=s(Zb);Ase=n(Twe,"STRONG",{});var Fet=s(Ase);QBo=r(Fet,"squeezebert"),Fet.forEach(t),HBo=r(Twe," \u2014 "),LN=n(Twe,"A",{href:!0});var Cet=s(LN);UBo=r(Cet,"SqueezeBertForTokenClassification"),Cet.forEach(t),JBo=r(Twe," (SqueezeBERT model)"),Twe.forEach(t),YBo=i(q),e2=n(q,"LI",{});var Fwe=s(e2);Lse=n(Fwe,"STRONG",{});var Met=s(Lse);KBo=r(Met,"xlm"),Met.forEach(t),ZBo=r(Fwe," \u2014 "),BN=n(Fwe,"A",{href:!0});var Eet=s(BN);exo=r(Eet,"XLMForTokenClassification"),Eet.forEach(t),oxo=r(Fwe," (XLM model)"),Fwe.forEach(t),rxo=i(q),o2=n(q,"LI",{});var Cwe=s(o2);Bse=n(Cwe,"STRONG",{});var yet=s(Bse);txo=r(yet,"xlm-roberta"),yet.forEach(t),axo=r(Cwe," \u2014 "),xN=n(Cwe,"A",{href:!0});var wet=s(xN);nxo=r(wet,"XLMRobertaForTokenClassification"),wet.forEach(t),sxo=r(Cwe," (XLM-RoBERTa model)"),Cwe.forEach(t),lxo=i(q),r2=n(q,"LI",{});var Mwe=s(r2);xse=n(Mwe,"STRONG",{});var Aet=s(xse);ixo=r(Aet,"xlm-roberta-xl"),Aet.forEach(t),dxo=r(Mwe," \u2014 "),kN=n(Mwe,"A",{href:!0});var Let=s(kN);cxo=r(Let,"XLMRobertaXLForTokenClassification"),Let.forEach(t),fxo=r(Mwe," (XLM-RoBERTa-XL model)"),Mwe.forEach(t),mxo=i(q),t2=n(q,"LI",{});var Ewe=s(t2);kse=n(Ewe,"STRONG",{});var Bet=s(kse);gxo=r(Bet,"xlnet"),Bet.forEach(t),hxo=r(Ewe," \u2014 "),RN=n(Ewe,"A",{href:!0});var xet=s(RN);pxo=r(xet,"XLNetForTokenClassification"),xet.forEach(t),_xo=r(Ewe," (XLNet model)"),Ewe.forEach(t),uxo=i(q),a2=n(q,"LI",{});var ywe=s(a2);Rse=n(ywe,"STRONG",{});var ket=s(Rse);bxo=r(ket,"yoso"),ket.forEach(t),vxo=r(ywe," \u2014 "),SN=n(ywe,"A",{href:!0});var Ret=s(SN);Txo=r(Ret,"YosoForTokenClassification"),Ret.forEach(t),Fxo=r(ywe," (YOSO model)"),ywe.forEach(t),q.forEach(t),Cxo=i(Ht),n2=n(Ht,"P",{});var wwe=s(n2);Mxo=r(wwe,"The model is set in evaluation mode by default using "),Sse=n(wwe,"CODE",{});var Set=s(Sse);Exo=r(Set,"model.eval()"),Set.forEach(t),yxo=r(wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pse=n(wwe,"CODE",{});var Pet=s(Pse);wxo=r(Pet,"model.train()"),Pet.forEach(t),wwe.forEach(t),Axo=i(Ht),$se=n(Ht,"P",{});var $et=s($se);Lxo=r($et,"Examples:"),$et.forEach(t),Bxo=i(Ht),m(X5.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),pke=i(c),Ed=n(c,"H2",{class:!0});var ESe=s(Ed);s2=n(ESe,"A",{id:!0,class:!0,href:!0});var Iet=s(s2);Ise=n(Iet,"SPAN",{});var jet=s(Ise);m(V5.$$.fragment,jet),jet.forEach(t),Iet.forEach(t),xxo=i(ESe),jse=n(ESe,"SPAN",{});var Net=s(jse);kxo=r(Net,"AutoModelForQuestionAnswering"),Net.forEach(t),ESe.forEach(t),_ke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(z5.$$.fragment,fl),Rxo=i(fl),yd=n(fl,"P",{});var nW=s(yd);Sxo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nse=n(nW,"CODE",{});var Det=s(Nse);Pxo=r(Det,"from_pretrained()"),Det.forEach(t),$xo=r(nW,"class method or the "),Dse=n(nW,"CODE",{});var qet=s(Dse);Ixo=r(qet,"from_config()"),qet.forEach(t),jxo=r(nW,`class
method.`),nW.forEach(t),Nxo=i(fl),W5=n(fl,"P",{});var ySe=s(W5);Dxo=r(ySe,"This class cannot be instantiated directly using "),qse=n(ySe,"CODE",{});var Oet=s(qse);qxo=r(Oet,"__init__()"),Oet.forEach(t),Oxo=r(ySe," (throws an error)."),ySe.forEach(t),Gxo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Q5.$$.fragment,ml),Xxo=i(ml),Ose=n(ml,"P",{});var Get=s(Ose);Vxo=r(Get,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Get.forEach(t),zxo=i(ml),wd=n(ml,"P",{});var sW=s(wd);Wxo=r(sW,`Note:
Loading a model from its configuration file does `),Gse=n(sW,"STRONG",{});var Xet=s(Gse);Qxo=r(Xet,"not"),Xet.forEach(t),Hxo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xse=n(sW,"CODE",{});var Vet=s(Xse);Uxo=r(Vet,"from_pretrained()"),Vet.forEach(t),Jxo=r(sW,"to load the model weights."),sW.forEach(t),Yxo=i(ml),Vse=n(ml,"P",{});var zet=s(Vse);Kxo=r(zet,"Examples:"),zet.forEach(t),Zxo=i(ml),m(H5.$$.fragment,ml),ml.forEach(t),eko=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(U5.$$.fragment,Ut),oko=i(Ut),zse=n(Ut,"P",{});var Wet=s(zse);rko=r(Wet,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wet.forEach(t),tko=i(Ut),Za=n(Ut,"P",{});var hE=s(Za);ako=r(hE,"The model class to instantiate is selected based on the "),Wse=n(hE,"CODE",{});var Qet=s(Wse);nko=r(Qet,"model_type"),Qet.forEach(t),sko=r(hE,` property of the config object (either
passed as an argument or loaded from `),Qse=n(hE,"CODE",{});var Het=s(Qse);lko=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),iko=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hse=n(hE,"CODE",{});var Uet=s(Hse);dko=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),cko=r(hE,":"),hE.forEach(t),fko=i(Ut),R=n(Ut,"UL",{});var P=s(R);l2=n(P,"LI",{});var Awe=s(l2);Use=n(Awe,"STRONG",{});var Jet=s(Use);mko=r(Jet,"albert"),Jet.forEach(t),gko=r(Awe," \u2014 "),PN=n(Awe,"A",{href:!0});var Yet=s(PN);hko=r(Yet,"AlbertForQuestionAnswering"),Yet.forEach(t),pko=r(Awe," (ALBERT model)"),Awe.forEach(t),_ko=i(P),i2=n(P,"LI",{});var Lwe=s(i2);Jse=n(Lwe,"STRONG",{});var Ket=s(Jse);uko=r(Ket,"bart"),Ket.forEach(t),bko=r(Lwe," \u2014 "),$N=n(Lwe,"A",{href:!0});var Zet=s($N);vko=r(Zet,"BartForQuestionAnswering"),Zet.forEach(t),Tko=r(Lwe," (BART model)"),Lwe.forEach(t),Fko=i(P),d2=n(P,"LI",{});var Bwe=s(d2);Yse=n(Bwe,"STRONG",{});var eot=s(Yse);Cko=r(eot,"bert"),eot.forEach(t),Mko=r(Bwe," \u2014 "),IN=n(Bwe,"A",{href:!0});var oot=s(IN);Eko=r(oot,"BertForQuestionAnswering"),oot.forEach(t),yko=r(Bwe," (BERT model)"),Bwe.forEach(t),wko=i(P),c2=n(P,"LI",{});var xwe=s(c2);Kse=n(xwe,"STRONG",{});var rot=s(Kse);Ako=r(rot,"big_bird"),rot.forEach(t),Lko=r(xwe," \u2014 "),jN=n(xwe,"A",{href:!0});var tot=s(jN);Bko=r(tot,"BigBirdForQuestionAnswering"),tot.forEach(t),xko=r(xwe," (BigBird model)"),xwe.forEach(t),kko=i(P),f2=n(P,"LI",{});var kwe=s(f2);Zse=n(kwe,"STRONG",{});var aot=s(Zse);Rko=r(aot,"bigbird_pegasus"),aot.forEach(t),Sko=r(kwe," \u2014 "),NN=n(kwe,"A",{href:!0});var not=s(NN);Pko=r(not,"BigBirdPegasusForQuestionAnswering"),not.forEach(t),$ko=r(kwe," (BigBirdPegasus model)"),kwe.forEach(t),Iko=i(P),m2=n(P,"LI",{});var Rwe=s(m2);ele=n(Rwe,"STRONG",{});var sot=s(ele);jko=r(sot,"camembert"),sot.forEach(t),Nko=r(Rwe," \u2014 "),DN=n(Rwe,"A",{href:!0});var lot=s(DN);Dko=r(lot,"CamembertForQuestionAnswering"),lot.forEach(t),qko=r(Rwe," (CamemBERT model)"),Rwe.forEach(t),Oko=i(P),g2=n(P,"LI",{});var Swe=s(g2);ole=n(Swe,"STRONG",{});var iot=s(ole);Gko=r(iot,"canine"),iot.forEach(t),Xko=r(Swe," \u2014 "),qN=n(Swe,"A",{href:!0});var dot=s(qN);Vko=r(dot,"CanineForQuestionAnswering"),dot.forEach(t),zko=r(Swe," (Canine model)"),Swe.forEach(t),Wko=i(P),h2=n(P,"LI",{});var Pwe=s(h2);rle=n(Pwe,"STRONG",{});var cot=s(rle);Qko=r(cot,"convbert"),cot.forEach(t),Hko=r(Pwe," \u2014 "),ON=n(Pwe,"A",{href:!0});var fot=s(ON);Uko=r(fot,"ConvBertForQuestionAnswering"),fot.forEach(t),Jko=r(Pwe," (ConvBERT model)"),Pwe.forEach(t),Yko=i(P),p2=n(P,"LI",{});var $we=s(p2);tle=n($we,"STRONG",{});var mot=s(tle);Kko=r(mot,"data2vec-text"),mot.forEach(t),Zko=r($we," \u2014 "),GN=n($we,"A",{href:!0});var got=s(GN);eRo=r(got,"Data2VecTextForQuestionAnswering"),got.forEach(t),oRo=r($we," (Data2VecText model)"),$we.forEach(t),rRo=i(P),_2=n(P,"LI",{});var Iwe=s(_2);ale=n(Iwe,"STRONG",{});var hot=s(ale);tRo=r(hot,"deberta"),hot.forEach(t),aRo=r(Iwe," \u2014 "),XN=n(Iwe,"A",{href:!0});var pot=s(XN);nRo=r(pot,"DebertaForQuestionAnswering"),pot.forEach(t),sRo=r(Iwe," (DeBERTa model)"),Iwe.forEach(t),lRo=i(P),u2=n(P,"LI",{});var jwe=s(u2);nle=n(jwe,"STRONG",{});var _ot=s(nle);iRo=r(_ot,"deberta-v2"),_ot.forEach(t),dRo=r(jwe," \u2014 "),VN=n(jwe,"A",{href:!0});var uot=s(VN);cRo=r(uot,"DebertaV2ForQuestionAnswering"),uot.forEach(t),fRo=r(jwe," (DeBERTa-v2 model)"),jwe.forEach(t),mRo=i(P),b2=n(P,"LI",{});var Nwe=s(b2);sle=n(Nwe,"STRONG",{});var bot=s(sle);gRo=r(bot,"distilbert"),bot.forEach(t),hRo=r(Nwe," \u2014 "),zN=n(Nwe,"A",{href:!0});var vot=s(zN);pRo=r(vot,"DistilBertForQuestionAnswering"),vot.forEach(t),_Ro=r(Nwe," (DistilBERT model)"),Nwe.forEach(t),uRo=i(P),v2=n(P,"LI",{});var Dwe=s(v2);lle=n(Dwe,"STRONG",{});var Tot=s(lle);bRo=r(Tot,"electra"),Tot.forEach(t),vRo=r(Dwe," \u2014 "),WN=n(Dwe,"A",{href:!0});var Fot=s(WN);TRo=r(Fot,"ElectraForQuestionAnswering"),Fot.forEach(t),FRo=r(Dwe," (ELECTRA model)"),Dwe.forEach(t),CRo=i(P),T2=n(P,"LI",{});var qwe=s(T2);ile=n(qwe,"STRONG",{});var Cot=s(ile);MRo=r(Cot,"flaubert"),Cot.forEach(t),ERo=r(qwe," \u2014 "),QN=n(qwe,"A",{href:!0});var Mot=s(QN);yRo=r(Mot,"FlaubertForQuestionAnsweringSimple"),Mot.forEach(t),wRo=r(qwe," (FlauBERT model)"),qwe.forEach(t),ARo=i(P),F2=n(P,"LI",{});var Owe=s(F2);dle=n(Owe,"STRONG",{});var Eot=s(dle);LRo=r(Eot,"fnet"),Eot.forEach(t),BRo=r(Owe," \u2014 "),HN=n(Owe,"A",{href:!0});var yot=s(HN);xRo=r(yot,"FNetForQuestionAnswering"),yot.forEach(t),kRo=r(Owe," (FNet model)"),Owe.forEach(t),RRo=i(P),C2=n(P,"LI",{});var Gwe=s(C2);cle=n(Gwe,"STRONG",{});var wot=s(cle);SRo=r(wot,"funnel"),wot.forEach(t),PRo=r(Gwe," \u2014 "),UN=n(Gwe,"A",{href:!0});var Aot=s(UN);$Ro=r(Aot,"FunnelForQuestionAnswering"),Aot.forEach(t),IRo=r(Gwe," (Funnel Transformer model)"),Gwe.forEach(t),jRo=i(P),M2=n(P,"LI",{});var Xwe=s(M2);fle=n(Xwe,"STRONG",{});var Lot=s(fle);NRo=r(Lot,"gptj"),Lot.forEach(t),DRo=r(Xwe," \u2014 "),JN=n(Xwe,"A",{href:!0});var Bot=s(JN);qRo=r(Bot,"GPTJForQuestionAnswering"),Bot.forEach(t),ORo=r(Xwe," (GPT-J model)"),Xwe.forEach(t),GRo=i(P),E2=n(P,"LI",{});var Vwe=s(E2);mle=n(Vwe,"STRONG",{});var xot=s(mle);XRo=r(xot,"ibert"),xot.forEach(t),VRo=r(Vwe," \u2014 "),YN=n(Vwe,"A",{href:!0});var kot=s(YN);zRo=r(kot,"IBertForQuestionAnswering"),kot.forEach(t),WRo=r(Vwe," (I-BERT model)"),Vwe.forEach(t),QRo=i(P),y2=n(P,"LI",{});var zwe=s(y2);gle=n(zwe,"STRONG",{});var Rot=s(gle);HRo=r(Rot,"layoutlmv2"),Rot.forEach(t),URo=r(zwe," \u2014 "),KN=n(zwe,"A",{href:!0});var Sot=s(KN);JRo=r(Sot,"LayoutLMv2ForQuestionAnswering"),Sot.forEach(t),YRo=r(zwe," (LayoutLMv2 model)"),zwe.forEach(t),KRo=i(P),w2=n(P,"LI",{});var Wwe=s(w2);hle=n(Wwe,"STRONG",{});var Pot=s(hle);ZRo=r(Pot,"led"),Pot.forEach(t),eSo=r(Wwe," \u2014 "),ZN=n(Wwe,"A",{href:!0});var $ot=s(ZN);oSo=r($ot,"LEDForQuestionAnswering"),$ot.forEach(t),rSo=r(Wwe," (LED model)"),Wwe.forEach(t),tSo=i(P),A2=n(P,"LI",{});var Qwe=s(A2);ple=n(Qwe,"STRONG",{});var Iot=s(ple);aSo=r(Iot,"longformer"),Iot.forEach(t),nSo=r(Qwe," \u2014 "),eD=n(Qwe,"A",{href:!0});var jot=s(eD);sSo=r(jot,"LongformerForQuestionAnswering"),jot.forEach(t),lSo=r(Qwe," (Longformer model)"),Qwe.forEach(t),iSo=i(P),L2=n(P,"LI",{});var Hwe=s(L2);_le=n(Hwe,"STRONG",{});var Not=s(_le);dSo=r(Not,"lxmert"),Not.forEach(t),cSo=r(Hwe," \u2014 "),oD=n(Hwe,"A",{href:!0});var Dot=s(oD);fSo=r(Dot,"LxmertForQuestionAnswering"),Dot.forEach(t),mSo=r(Hwe," (LXMERT model)"),Hwe.forEach(t),gSo=i(P),B2=n(P,"LI",{});var Uwe=s(B2);ule=n(Uwe,"STRONG",{});var qot=s(ule);hSo=r(qot,"mbart"),qot.forEach(t),pSo=r(Uwe," \u2014 "),rD=n(Uwe,"A",{href:!0});var Oot=s(rD);_So=r(Oot,"MBartForQuestionAnswering"),Oot.forEach(t),uSo=r(Uwe," (mBART model)"),Uwe.forEach(t),bSo=i(P),x2=n(P,"LI",{});var Jwe=s(x2);ble=n(Jwe,"STRONG",{});var Got=s(ble);vSo=r(Got,"megatron-bert"),Got.forEach(t),TSo=r(Jwe," \u2014 "),tD=n(Jwe,"A",{href:!0});var Xot=s(tD);FSo=r(Xot,"MegatronBertForQuestionAnswering"),Xot.forEach(t),CSo=r(Jwe," (MegatronBert model)"),Jwe.forEach(t),MSo=i(P),k2=n(P,"LI",{});var Ywe=s(k2);vle=n(Ywe,"STRONG",{});var Vot=s(vle);ESo=r(Vot,"mobilebert"),Vot.forEach(t),ySo=r(Ywe," \u2014 "),aD=n(Ywe,"A",{href:!0});var zot=s(aD);wSo=r(zot,"MobileBertForQuestionAnswering"),zot.forEach(t),ASo=r(Ywe," (MobileBERT model)"),Ywe.forEach(t),LSo=i(P),R2=n(P,"LI",{});var Kwe=s(R2);Tle=n(Kwe,"STRONG",{});var Wot=s(Tle);BSo=r(Wot,"mpnet"),Wot.forEach(t),xSo=r(Kwe," \u2014 "),nD=n(Kwe,"A",{href:!0});var Qot=s(nD);kSo=r(Qot,"MPNetForQuestionAnswering"),Qot.forEach(t),RSo=r(Kwe," (MPNet model)"),Kwe.forEach(t),SSo=i(P),S2=n(P,"LI",{});var Zwe=s(S2);Fle=n(Zwe,"STRONG",{});var Hot=s(Fle);PSo=r(Hot,"nystromformer"),Hot.forEach(t),$So=r(Zwe," \u2014 "),sD=n(Zwe,"A",{href:!0});var Uot=s(sD);ISo=r(Uot,"NystromformerForQuestionAnswering"),Uot.forEach(t),jSo=r(Zwe," (Nystromformer model)"),Zwe.forEach(t),NSo=i(P),P2=n(P,"LI",{});var eAe=s(P2);Cle=n(eAe,"STRONG",{});var Jot=s(Cle);DSo=r(Jot,"qdqbert"),Jot.forEach(t),qSo=r(eAe," \u2014 "),lD=n(eAe,"A",{href:!0});var Yot=s(lD);OSo=r(Yot,"QDQBertForQuestionAnswering"),Yot.forEach(t),GSo=r(eAe," (QDQBert model)"),eAe.forEach(t),XSo=i(P),$2=n(P,"LI",{});var oAe=s($2);Mle=n(oAe,"STRONG",{});var Kot=s(Mle);VSo=r(Kot,"reformer"),Kot.forEach(t),zSo=r(oAe," \u2014 "),iD=n(oAe,"A",{href:!0});var Zot=s(iD);WSo=r(Zot,"ReformerForQuestionAnswering"),Zot.forEach(t),QSo=r(oAe," (Reformer model)"),oAe.forEach(t),HSo=i(P),I2=n(P,"LI",{});var rAe=s(I2);Ele=n(rAe,"STRONG",{});var ert=s(Ele);USo=r(ert,"rembert"),ert.forEach(t),JSo=r(rAe," \u2014 "),dD=n(rAe,"A",{href:!0});var ort=s(dD);YSo=r(ort,"RemBertForQuestionAnswering"),ort.forEach(t),KSo=r(rAe," (RemBERT model)"),rAe.forEach(t),ZSo=i(P),j2=n(P,"LI",{});var tAe=s(j2);yle=n(tAe,"STRONG",{});var rrt=s(yle);ePo=r(rrt,"roberta"),rrt.forEach(t),oPo=r(tAe," \u2014 "),cD=n(tAe,"A",{href:!0});var trt=s(cD);rPo=r(trt,"RobertaForQuestionAnswering"),trt.forEach(t),tPo=r(tAe," (RoBERTa model)"),tAe.forEach(t),aPo=i(P),N2=n(P,"LI",{});var aAe=s(N2);wle=n(aAe,"STRONG",{});var art=s(wle);nPo=r(art,"roformer"),art.forEach(t),sPo=r(aAe," \u2014 "),fD=n(aAe,"A",{href:!0});var nrt=s(fD);lPo=r(nrt,"RoFormerForQuestionAnswering"),nrt.forEach(t),iPo=r(aAe," (RoFormer model)"),aAe.forEach(t),dPo=i(P),D2=n(P,"LI",{});var nAe=s(D2);Ale=n(nAe,"STRONG",{});var srt=s(Ale);cPo=r(srt,"splinter"),srt.forEach(t),fPo=r(nAe," \u2014 "),mD=n(nAe,"A",{href:!0});var lrt=s(mD);mPo=r(lrt,"SplinterForQuestionAnswering"),lrt.forEach(t),gPo=r(nAe," (Splinter model)"),nAe.forEach(t),hPo=i(P),q2=n(P,"LI",{});var sAe=s(q2);Lle=n(sAe,"STRONG",{});var irt=s(Lle);pPo=r(irt,"squeezebert"),irt.forEach(t),_Po=r(sAe," \u2014 "),gD=n(sAe,"A",{href:!0});var drt=s(gD);uPo=r(drt,"SqueezeBertForQuestionAnswering"),drt.forEach(t),bPo=r(sAe," (SqueezeBERT model)"),sAe.forEach(t),vPo=i(P),O2=n(P,"LI",{});var lAe=s(O2);Ble=n(lAe,"STRONG",{});var crt=s(Ble);TPo=r(crt,"xlm"),crt.forEach(t),FPo=r(lAe," \u2014 "),hD=n(lAe,"A",{href:!0});var frt=s(hD);CPo=r(frt,"XLMForQuestionAnsweringSimple"),frt.forEach(t),MPo=r(lAe," (XLM model)"),lAe.forEach(t),EPo=i(P),G2=n(P,"LI",{});var iAe=s(G2);xle=n(iAe,"STRONG",{});var mrt=s(xle);yPo=r(mrt,"xlm-roberta"),mrt.forEach(t),wPo=r(iAe," \u2014 "),pD=n(iAe,"A",{href:!0});var grt=s(pD);APo=r(grt,"XLMRobertaForQuestionAnswering"),grt.forEach(t),LPo=r(iAe," (XLM-RoBERTa model)"),iAe.forEach(t),BPo=i(P),X2=n(P,"LI",{});var dAe=s(X2);kle=n(dAe,"STRONG",{});var hrt=s(kle);xPo=r(hrt,"xlm-roberta-xl"),hrt.forEach(t),kPo=r(dAe," \u2014 "),_D=n(dAe,"A",{href:!0});var prt=s(_D);RPo=r(prt,"XLMRobertaXLForQuestionAnswering"),prt.forEach(t),SPo=r(dAe," (XLM-RoBERTa-XL model)"),dAe.forEach(t),PPo=i(P),V2=n(P,"LI",{});var cAe=s(V2);Rle=n(cAe,"STRONG",{});var _rt=s(Rle);$Po=r(_rt,"xlnet"),_rt.forEach(t),IPo=r(cAe," \u2014 "),uD=n(cAe,"A",{href:!0});var urt=s(uD);jPo=r(urt,"XLNetForQuestionAnsweringSimple"),urt.forEach(t),NPo=r(cAe," (XLNet model)"),cAe.forEach(t),DPo=i(P),z2=n(P,"LI",{});var fAe=s(z2);Sle=n(fAe,"STRONG",{});var brt=s(Sle);qPo=r(brt,"yoso"),brt.forEach(t),OPo=r(fAe," \u2014 "),bD=n(fAe,"A",{href:!0});var vrt=s(bD);GPo=r(vrt,"YosoForQuestionAnswering"),vrt.forEach(t),XPo=r(fAe," (YOSO model)"),fAe.forEach(t),P.forEach(t),VPo=i(Ut),W2=n(Ut,"P",{});var mAe=s(W2);zPo=r(mAe,"The model is set in evaluation mode by default using "),Ple=n(mAe,"CODE",{});var Trt=s(Ple);WPo=r(Trt,"model.eval()"),Trt.forEach(t),QPo=r(mAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=n(mAe,"CODE",{});var Frt=s($le);HPo=r(Frt,"model.train()"),Frt.forEach(t),mAe.forEach(t),UPo=i(Ut),Ile=n(Ut,"P",{});var Crt=s(Ile);JPo=r(Crt,"Examples:"),Crt.forEach(t),YPo=i(Ut),m(J5.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),uke=i(c),Ad=n(c,"H2",{class:!0});var wSe=s(Ad);Q2=n(wSe,"A",{id:!0,class:!0,href:!0});var Mrt=s(Q2);jle=n(Mrt,"SPAN",{});var Ert=s(jle);m(Y5.$$.fragment,Ert),Ert.forEach(t),Mrt.forEach(t),KPo=i(wSe),Nle=n(wSe,"SPAN",{});var yrt=s(Nle);ZPo=r(yrt,"AutoModelForTableQuestionAnswering"),yrt.forEach(t),wSe.forEach(t),bke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(K5.$$.fragment,gl),e$o=i(gl),Ld=n(gl,"P",{});var lW=s(Ld);o$o=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dle=n(lW,"CODE",{});var wrt=s(Dle);r$o=r(wrt,"from_pretrained()"),wrt.forEach(t),t$o=r(lW,"class method or the "),qle=n(lW,"CODE",{});var Art=s(qle);a$o=r(Art,"from_config()"),Art.forEach(t),n$o=r(lW,`class
method.`),lW.forEach(t),s$o=i(gl),Z5=n(gl,"P",{});var ASe=s(Z5);l$o=r(ASe,"This class cannot be instantiated directly using "),Ole=n(ASe,"CODE",{});var Lrt=s(Ole);i$o=r(Lrt,"__init__()"),Lrt.forEach(t),d$o=r(ASe," (throws an error)."),ASe.forEach(t),c$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(ey.$$.fragment,hl),f$o=i(hl),Gle=n(hl,"P",{});var Brt=s(Gle);m$o=r(Brt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Brt.forEach(t),g$o=i(hl),Bd=n(hl,"P",{});var iW=s(Bd);h$o=r(iW,`Note:
Loading a model from its configuration file does `),Xle=n(iW,"STRONG",{});var xrt=s(Xle);p$o=r(xrt,"not"),xrt.forEach(t),_$o=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vle=n(iW,"CODE",{});var krt=s(Vle);u$o=r(krt,"from_pretrained()"),krt.forEach(t),b$o=r(iW,"to load the model weights."),iW.forEach(t),v$o=i(hl),zle=n(hl,"P",{});var Rrt=s(zle);T$o=r(Rrt,"Examples:"),Rrt.forEach(t),F$o=i(hl),m(oy.$$.fragment,hl),hl.forEach(t),C$o=i(gl),He=n(gl,"DIV",{class:!0});var Jt=s(He);m(ry.$$.fragment,Jt),M$o=i(Jt),Wle=n(Jt,"P",{});var Srt=s(Wle);E$o=r(Srt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Srt.forEach(t),y$o=i(Jt),en=n(Jt,"P",{});var pE=s(en);w$o=r(pE,"The model class to instantiate is selected based on the "),Qle=n(pE,"CODE",{});var Prt=s(Qle);A$o=r(Prt,"model_type"),Prt.forEach(t),L$o=r(pE,` property of the config object (either
passed as an argument or loaded from `),Hle=n(pE,"CODE",{});var $rt=s(Hle);B$o=r($rt,"pretrained_model_name_or_path"),$rt.forEach(t),x$o=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ule=n(pE,"CODE",{});var Irt=s(Ule);k$o=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),R$o=r(pE,":"),pE.forEach(t),S$o=i(Jt),Jle=n(Jt,"UL",{});var jrt=s(Jle);H2=n(jrt,"LI",{});var gAe=s(H2);Yle=n(gAe,"STRONG",{});var Nrt=s(Yle);P$o=r(Nrt,"tapas"),Nrt.forEach(t),$$o=r(gAe," \u2014 "),vD=n(gAe,"A",{href:!0});var Drt=s(vD);I$o=r(Drt,"TapasForQuestionAnswering"),Drt.forEach(t),j$o=r(gAe," (TAPAS model)"),gAe.forEach(t),jrt.forEach(t),N$o=i(Jt),U2=n(Jt,"P",{});var hAe=s(U2);D$o=r(hAe,"The model is set in evaluation mode by default using "),Kle=n(hAe,"CODE",{});var qrt=s(Kle);q$o=r(qrt,"model.eval()"),qrt.forEach(t),O$o=r(hAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=n(hAe,"CODE",{});var Ort=s(Zle);G$o=r(Ort,"model.train()"),Ort.forEach(t),hAe.forEach(t),X$o=i(Jt),eie=n(Jt,"P",{});var Grt=s(eie);V$o=r(Grt,"Examples:"),Grt.forEach(t),z$o=i(Jt),m(ty.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),vke=i(c),xd=n(c,"H2",{class:!0});var LSe=s(xd);J2=n(LSe,"A",{id:!0,class:!0,href:!0});var Xrt=s(J2);oie=n(Xrt,"SPAN",{});var Vrt=s(oie);m(ay.$$.fragment,Vrt),Vrt.forEach(t),Xrt.forEach(t),W$o=i(LSe),rie=n(LSe,"SPAN",{});var zrt=s(rie);Q$o=r(zrt,"AutoModelForImageClassification"),zrt.forEach(t),LSe.forEach(t),Tke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(ny.$$.fragment,pl),H$o=i(pl),kd=n(pl,"P",{});var dW=s(kd);U$o=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tie=n(dW,"CODE",{});var Wrt=s(tie);J$o=r(Wrt,"from_pretrained()"),Wrt.forEach(t),Y$o=r(dW,"class method or the "),aie=n(dW,"CODE",{});var Qrt=s(aie);K$o=r(Qrt,"from_config()"),Qrt.forEach(t),Z$o=r(dW,`class
method.`),dW.forEach(t),eIo=i(pl),sy=n(pl,"P",{});var BSe=s(sy);oIo=r(BSe,"This class cannot be instantiated directly using "),nie=n(BSe,"CODE",{});var Hrt=s(nie);rIo=r(Hrt,"__init__()"),Hrt.forEach(t),tIo=r(BSe," (throws an error)."),BSe.forEach(t),aIo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(ly.$$.fragment,_l),nIo=i(_l),sie=n(_l,"P",{});var Urt=s(sie);sIo=r(Urt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Urt.forEach(t),lIo=i(_l),Rd=n(_l,"P",{});var cW=s(Rd);iIo=r(cW,`Note:
Loading a model from its configuration file does `),lie=n(cW,"STRONG",{});var Jrt=s(lie);dIo=r(Jrt,"not"),Jrt.forEach(t),cIo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),iie=n(cW,"CODE",{});var Yrt=s(iie);fIo=r(Yrt,"from_pretrained()"),Yrt.forEach(t),mIo=r(cW,"to load the model weights."),cW.forEach(t),gIo=i(_l),die=n(_l,"P",{});var Krt=s(die);hIo=r(Krt,"Examples:"),Krt.forEach(t),pIo=i(_l),m(iy.$$.fragment,_l),_l.forEach(t),_Io=i(pl),Ue=n(pl,"DIV",{class:!0});var Yt=s(Ue);m(dy.$$.fragment,Yt),uIo=i(Yt),cie=n(Yt,"P",{});var Zrt=s(cie);bIo=r(Zrt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zrt.forEach(t),vIo=i(Yt),on=n(Yt,"P",{});var _E=s(on);TIo=r(_E,"The model class to instantiate is selected based on the "),fie=n(_E,"CODE",{});var ett=s(fie);FIo=r(ett,"model_type"),ett.forEach(t),CIo=r(_E,` property of the config object (either
passed as an argument or loaded from `),mie=n(_E,"CODE",{});var ott=s(mie);MIo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),EIo=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=n(_E,"CODE",{});var rtt=s(gie);yIo=r(rtt,"pretrained_model_name_or_path"),rtt.forEach(t),wIo=r(_E,":"),_E.forEach(t),AIo=i(Yt),me=n(Yt,"UL",{});var Fe=s(me);Y2=n(Fe,"LI",{});var pAe=s(Y2);hie=n(pAe,"STRONG",{});var ttt=s(hie);LIo=r(ttt,"beit"),ttt.forEach(t),BIo=r(pAe," \u2014 "),TD=n(pAe,"A",{href:!0});var att=s(TD);xIo=r(att,"BeitForImageClassification"),att.forEach(t),kIo=r(pAe," (BEiT model)"),pAe.forEach(t),RIo=i(Fe),K2=n(Fe,"LI",{});var _Ae=s(K2);pie=n(_Ae,"STRONG",{});var ntt=s(pie);SIo=r(ntt,"convnext"),ntt.forEach(t),PIo=r(_Ae," \u2014 "),FD=n(_Ae,"A",{href:!0});var stt=s(FD);$Io=r(stt,"ConvNextForImageClassification"),stt.forEach(t),IIo=r(_Ae," (ConvNext model)"),_Ae.forEach(t),jIo=i(Fe),qs=n(Fe,"LI",{});var W8=s(qs);_ie=n(W8,"STRONG",{});var ltt=s(_ie);NIo=r(ltt,"deit"),ltt.forEach(t),DIo=r(W8," \u2014 "),CD=n(W8,"A",{href:!0});var itt=s(CD);qIo=r(itt,"DeiTForImageClassification"),itt.forEach(t),OIo=r(W8," or "),MD=n(W8,"A",{href:!0});var dtt=s(MD);GIo=r(dtt,"DeiTForImageClassificationWithTeacher"),dtt.forEach(t),XIo=r(W8," (DeiT model)"),W8.forEach(t),VIo=i(Fe),Z2=n(Fe,"LI",{});var uAe=s(Z2);uie=n(uAe,"STRONG",{});var ctt=s(uie);zIo=r(ctt,"imagegpt"),ctt.forEach(t),WIo=r(uAe," \u2014 "),ED=n(uAe,"A",{href:!0});var ftt=s(ED);QIo=r(ftt,"ImageGPTForImageClassification"),ftt.forEach(t),HIo=r(uAe," (ImageGPT model)"),uAe.forEach(t),UIo=i(Fe),ma=n(Fe,"LI",{});var $f=s(ma);bie=n($f,"STRONG",{});var mtt=s(bie);JIo=r(mtt,"perceiver"),mtt.forEach(t),YIo=r($f," \u2014 "),yD=n($f,"A",{href:!0});var gtt=s(yD);KIo=r(gtt,"PerceiverForImageClassificationLearned"),gtt.forEach(t),ZIo=r($f," or "),wD=n($f,"A",{href:!0});var htt=s(wD);ejo=r(htt,"PerceiverForImageClassificationFourier"),htt.forEach(t),ojo=r($f," or "),AD=n($f,"A",{href:!0});var ptt=s(AD);rjo=r(ptt,"PerceiverForImageClassificationConvProcessing"),ptt.forEach(t),tjo=r($f," (Perceiver model)"),$f.forEach(t),ajo=i(Fe),ev=n(Fe,"LI",{});var bAe=s(ev);vie=n(bAe,"STRONG",{});var _tt=s(vie);njo=r(_tt,"poolformer"),_tt.forEach(t),sjo=r(bAe," \u2014 "),LD=n(bAe,"A",{href:!0});var utt=s(LD);ljo=r(utt,"PoolFormerForImageClassification"),utt.forEach(t),ijo=r(bAe," (PoolFormer model)"),bAe.forEach(t),djo=i(Fe),ov=n(Fe,"LI",{});var vAe=s(ov);Tie=n(vAe,"STRONG",{});var btt=s(Tie);cjo=r(btt,"resnet"),btt.forEach(t),fjo=r(vAe," \u2014 "),BD=n(vAe,"A",{href:!0});var vtt=s(BD);mjo=r(vtt,"ResNetForImageClassification"),vtt.forEach(t),gjo=r(vAe," (ResNet model)"),vAe.forEach(t),hjo=i(Fe),rv=n(Fe,"LI",{});var TAe=s(rv);Fie=n(TAe,"STRONG",{});var Ttt=s(Fie);pjo=r(Ttt,"segformer"),Ttt.forEach(t),_jo=r(TAe," \u2014 "),xD=n(TAe,"A",{href:!0});var Ftt=s(xD);ujo=r(Ftt,"SegformerForImageClassification"),Ftt.forEach(t),bjo=r(TAe," (SegFormer model)"),TAe.forEach(t),vjo=i(Fe),tv=n(Fe,"LI",{});var FAe=s(tv);Cie=n(FAe,"STRONG",{});var Ctt=s(Cie);Tjo=r(Ctt,"swin"),Ctt.forEach(t),Fjo=r(FAe," \u2014 "),kD=n(FAe,"A",{href:!0});var Mtt=s(kD);Cjo=r(Mtt,"SwinForImageClassification"),Mtt.forEach(t),Mjo=r(FAe," (Swin model)"),FAe.forEach(t),Ejo=i(Fe),av=n(Fe,"LI",{});var CAe=s(av);Mie=n(CAe,"STRONG",{});var Ett=s(Mie);yjo=r(Ett,"van"),Ett.forEach(t),wjo=r(CAe," \u2014 "),RD=n(CAe,"A",{href:!0});var ytt=s(RD);Ajo=r(ytt,"VanForImageClassification"),ytt.forEach(t),Ljo=r(CAe," (VAN model)"),CAe.forEach(t),Bjo=i(Fe),nv=n(Fe,"LI",{});var MAe=s(nv);Eie=n(MAe,"STRONG",{});var wtt=s(Eie);xjo=r(wtt,"vit"),wtt.forEach(t),kjo=r(MAe," \u2014 "),SD=n(MAe,"A",{href:!0});var Att=s(SD);Rjo=r(Att,"ViTForImageClassification"),Att.forEach(t),Sjo=r(MAe," (ViT model)"),MAe.forEach(t),Fe.forEach(t),Pjo=i(Yt),sv=n(Yt,"P",{});var EAe=s(sv);$jo=r(EAe,"The model is set in evaluation mode by default using "),yie=n(EAe,"CODE",{});var Ltt=s(yie);Ijo=r(Ltt,"model.eval()"),Ltt.forEach(t),jjo=r(EAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(EAe,"CODE",{});var Btt=s(wie);Njo=r(Btt,"model.train()"),Btt.forEach(t),EAe.forEach(t),Djo=i(Yt),Aie=n(Yt,"P",{});var xtt=s(Aie);qjo=r(xtt,"Examples:"),xtt.forEach(t),Ojo=i(Yt),m(cy.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Fke=i(c),Sd=n(c,"H2",{class:!0});var xSe=s(Sd);lv=n(xSe,"A",{id:!0,class:!0,href:!0});var ktt=s(lv);Lie=n(ktt,"SPAN",{});var Rtt=s(Lie);m(fy.$$.fragment,Rtt),Rtt.forEach(t),ktt.forEach(t),Gjo=i(xSe),Bie=n(xSe,"SPAN",{});var Stt=s(Bie);Xjo=r(Stt,"AutoModelForVision2Seq"),Stt.forEach(t),xSe.forEach(t),Cke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(my.$$.fragment,ul),Vjo=i(ul),Pd=n(ul,"P",{});var fW=s(Pd);zjo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xie=n(fW,"CODE",{});var Ptt=s(xie);Wjo=r(Ptt,"from_pretrained()"),Ptt.forEach(t),Qjo=r(fW,"class method or the "),kie=n(fW,"CODE",{});var $tt=s(kie);Hjo=r($tt,"from_config()"),$tt.forEach(t),Ujo=r(fW,`class
method.`),fW.forEach(t),Jjo=i(ul),gy=n(ul,"P",{});var kSe=s(gy);Yjo=r(kSe,"This class cannot be instantiated directly using "),Rie=n(kSe,"CODE",{});var Itt=s(Rie);Kjo=r(Itt,"__init__()"),Itt.forEach(t),Zjo=r(kSe," (throws an error)."),kSe.forEach(t),eNo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(hy.$$.fragment,bl),oNo=i(bl),Sie=n(bl,"P",{});var jtt=s(Sie);rNo=r(jtt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jtt.forEach(t),tNo=i(bl),$d=n(bl,"P",{});var mW=s($d);aNo=r(mW,`Note:
Loading a model from its configuration file does `),Pie=n(mW,"STRONG",{});var Ntt=s(Pie);nNo=r(Ntt,"not"),Ntt.forEach(t),sNo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=n(mW,"CODE",{});var Dtt=s($ie);lNo=r(Dtt,"from_pretrained()"),Dtt.forEach(t),iNo=r(mW,"to load the model weights."),mW.forEach(t),dNo=i(bl),Iie=n(bl,"P",{});var qtt=s(Iie);cNo=r(qtt,"Examples:"),qtt.forEach(t),fNo=i(bl),m(py.$$.fragment,bl),bl.forEach(t),mNo=i(ul),Je=n(ul,"DIV",{class:!0});var Kt=s(Je);m(_y.$$.fragment,Kt),gNo=i(Kt),jie=n(Kt,"P",{});var Ott=s(jie);hNo=r(Ott,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ott.forEach(t),pNo=i(Kt),rn=n(Kt,"P",{});var uE=s(rn);_No=r(uE,"The model class to instantiate is selected based on the "),Nie=n(uE,"CODE",{});var Gtt=s(Nie);uNo=r(Gtt,"model_type"),Gtt.forEach(t),bNo=r(uE,` property of the config object (either
passed as an argument or loaded from `),Die=n(uE,"CODE",{});var Xtt=s(Die);vNo=r(Xtt,"pretrained_model_name_or_path"),Xtt.forEach(t),TNo=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(uE,"CODE",{});var Vtt=s(qie);FNo=r(Vtt,"pretrained_model_name_or_path"),Vtt.forEach(t),CNo=r(uE,":"),uE.forEach(t),MNo=i(Kt),Oie=n(Kt,"UL",{});var ztt=s(Oie);iv=n(ztt,"LI",{});var yAe=s(iv);Gie=n(yAe,"STRONG",{});var Wtt=s(Gie);ENo=r(Wtt,"vision-encoder-decoder"),Wtt.forEach(t),yNo=r(yAe," \u2014 "),PD=n(yAe,"A",{href:!0});var Qtt=s(PD);wNo=r(Qtt,"VisionEncoderDecoderModel"),Qtt.forEach(t),ANo=r(yAe," (Vision Encoder decoder model)"),yAe.forEach(t),ztt.forEach(t),LNo=i(Kt),dv=n(Kt,"P",{});var wAe=s(dv);BNo=r(wAe,"The model is set in evaluation mode by default using "),Xie=n(wAe,"CODE",{});var Htt=s(Xie);xNo=r(Htt,"model.eval()"),Htt.forEach(t),kNo=r(wAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=n(wAe,"CODE",{});var Utt=s(Vie);RNo=r(Utt,"model.train()"),Utt.forEach(t),wAe.forEach(t),SNo=i(Kt),zie=n(Kt,"P",{});var Jtt=s(zie);PNo=r(Jtt,"Examples:"),Jtt.forEach(t),$No=i(Kt),m(uy.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),Mke=i(c),Id=n(c,"H2",{class:!0});var RSe=s(Id);cv=n(RSe,"A",{id:!0,class:!0,href:!0});var Ytt=s(cv);Wie=n(Ytt,"SPAN",{});var Ktt=s(Wie);m(by.$$.fragment,Ktt),Ktt.forEach(t),Ytt.forEach(t),INo=i(RSe),Qie=n(RSe,"SPAN",{});var Ztt=s(Qie);jNo=r(Ztt,"AutoModelForAudioClassification"),Ztt.forEach(t),RSe.forEach(t),Eke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(vy.$$.fragment,vl),NNo=i(vl),jd=n(vl,"P",{});var gW=s(jd);DNo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Hie=n(gW,"CODE",{});var eat=s(Hie);qNo=r(eat,"from_pretrained()"),eat.forEach(t),ONo=r(gW,"class method or the "),Uie=n(gW,"CODE",{});var oat=s(Uie);GNo=r(oat,"from_config()"),oat.forEach(t),XNo=r(gW,`class
method.`),gW.forEach(t),VNo=i(vl),Ty=n(vl,"P",{});var SSe=s(Ty);zNo=r(SSe,"This class cannot be instantiated directly using "),Jie=n(SSe,"CODE",{});var rat=s(Jie);WNo=r(rat,"__init__()"),rat.forEach(t),QNo=r(SSe," (throws an error)."),SSe.forEach(t),HNo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(Fy.$$.fragment,Tl),UNo=i(Tl),Yie=n(Tl,"P",{});var tat=s(Yie);JNo=r(tat,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tat.forEach(t),YNo=i(Tl),Nd=n(Tl,"P",{});var hW=s(Nd);KNo=r(hW,`Note:
Loading a model from its configuration file does `),Kie=n(hW,"STRONG",{});var aat=s(Kie);ZNo=r(aat,"not"),aat.forEach(t),eDo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=n(hW,"CODE",{});var nat=s(Zie);oDo=r(nat,"from_pretrained()"),nat.forEach(t),rDo=r(hW,"to load the model weights."),hW.forEach(t),tDo=i(Tl),ede=n(Tl,"P",{});var sat=s(ede);aDo=r(sat,"Examples:"),sat.forEach(t),nDo=i(Tl),m(Cy.$$.fragment,Tl),Tl.forEach(t),sDo=i(vl),Ye=n(vl,"DIV",{class:!0});var Zt=s(Ye);m(My.$$.fragment,Zt),lDo=i(Zt),ode=n(Zt,"P",{});var lat=s(ode);iDo=r(lat,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lat.forEach(t),dDo=i(Zt),tn=n(Zt,"P",{});var bE=s(tn);cDo=r(bE,"The model class to instantiate is selected based on the "),rde=n(bE,"CODE",{});var iat=s(rde);fDo=r(iat,"model_type"),iat.forEach(t),mDo=r(bE,` property of the config object (either
passed as an argument or loaded from `),tde=n(bE,"CODE",{});var dat=s(tde);gDo=r(dat,"pretrained_model_name_or_path"),dat.forEach(t),hDo=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(bE,"CODE",{});var cat=s(ade);pDo=r(cat,"pretrained_model_name_or_path"),cat.forEach(t),_Do=r(bE,":"),bE.forEach(t),uDo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);fv=n(qo,"LI",{});var AAe=s(fv);nde=n(AAe,"STRONG",{});var fat=s(nde);bDo=r(fat,"data2vec-audio"),fat.forEach(t),vDo=r(AAe," \u2014 "),$D=n(AAe,"A",{href:!0});var mat=s($D);TDo=r(mat,"Data2VecAudioForSequenceClassification"),mat.forEach(t),FDo=r(AAe," (Data2VecAudio model)"),AAe.forEach(t),CDo=i(qo),mv=n(qo,"LI",{});var LAe=s(mv);sde=n(LAe,"STRONG",{});var gat=s(sde);MDo=r(gat,"hubert"),gat.forEach(t),EDo=r(LAe," \u2014 "),ID=n(LAe,"A",{href:!0});var hat=s(ID);yDo=r(hat,"HubertForSequenceClassification"),hat.forEach(t),wDo=r(LAe," (Hubert model)"),LAe.forEach(t),ADo=i(qo),gv=n(qo,"LI",{});var BAe=s(gv);lde=n(BAe,"STRONG",{});var pat=s(lde);LDo=r(pat,"sew"),pat.forEach(t),BDo=r(BAe," \u2014 "),jD=n(BAe,"A",{href:!0});var _at=s(jD);xDo=r(_at,"SEWForSequenceClassification"),_at.forEach(t),kDo=r(BAe," (SEW model)"),BAe.forEach(t),RDo=i(qo),hv=n(qo,"LI",{});var xAe=s(hv);ide=n(xAe,"STRONG",{});var uat=s(ide);SDo=r(uat,"sew-d"),uat.forEach(t),PDo=r(xAe," \u2014 "),ND=n(xAe,"A",{href:!0});var bat=s(ND);$Do=r(bat,"SEWDForSequenceClassification"),bat.forEach(t),IDo=r(xAe," (SEW-D model)"),xAe.forEach(t),jDo=i(qo),pv=n(qo,"LI",{});var kAe=s(pv);dde=n(kAe,"STRONG",{});var vat=s(dde);NDo=r(vat,"unispeech"),vat.forEach(t),DDo=r(kAe," \u2014 "),DD=n(kAe,"A",{href:!0});var Tat=s(DD);qDo=r(Tat,"UniSpeechForSequenceClassification"),Tat.forEach(t),ODo=r(kAe," (UniSpeech model)"),kAe.forEach(t),GDo=i(qo),_v=n(qo,"LI",{});var RAe=s(_v);cde=n(RAe,"STRONG",{});var Fat=s(cde);XDo=r(Fat,"unispeech-sat"),Fat.forEach(t),VDo=r(RAe," \u2014 "),qD=n(RAe,"A",{href:!0});var Cat=s(qD);zDo=r(Cat,"UniSpeechSatForSequenceClassification"),Cat.forEach(t),WDo=r(RAe," (UniSpeechSat model)"),RAe.forEach(t),QDo=i(qo),uv=n(qo,"LI",{});var SAe=s(uv);fde=n(SAe,"STRONG",{});var Mat=s(fde);HDo=r(Mat,"wav2vec2"),Mat.forEach(t),UDo=r(SAe," \u2014 "),OD=n(SAe,"A",{href:!0});var Eat=s(OD);JDo=r(Eat,"Wav2Vec2ForSequenceClassification"),Eat.forEach(t),YDo=r(SAe," (Wav2Vec2 model)"),SAe.forEach(t),KDo=i(qo),bv=n(qo,"LI",{});var PAe=s(bv);mde=n(PAe,"STRONG",{});var yat=s(mde);ZDo=r(yat,"wavlm"),yat.forEach(t),eqo=r(PAe," \u2014 "),GD=n(PAe,"A",{href:!0});var wat=s(GD);oqo=r(wat,"WavLMForSequenceClassification"),wat.forEach(t),rqo=r(PAe," (WavLM model)"),PAe.forEach(t),qo.forEach(t),tqo=i(Zt),vv=n(Zt,"P",{});var $Ae=s(vv);aqo=r($Ae,"The model is set in evaluation mode by default using "),gde=n($Ae,"CODE",{});var Aat=s(gde);nqo=r(Aat,"model.eval()"),Aat.forEach(t),sqo=r($Ae,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=n($Ae,"CODE",{});var Lat=s(hde);lqo=r(Lat,"model.train()"),Lat.forEach(t),$Ae.forEach(t),iqo=i(Zt),pde=n(Zt,"P",{});var Bat=s(pde);dqo=r(Bat,"Examples:"),Bat.forEach(t),cqo=i(Zt),m(Ey.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),yke=i(c),Dd=n(c,"H2",{class:!0});var PSe=s(Dd);Tv=n(PSe,"A",{id:!0,class:!0,href:!0});var xat=s(Tv);_de=n(xat,"SPAN",{});var kat=s(_de);m(yy.$$.fragment,kat),kat.forEach(t),xat.forEach(t),fqo=i(PSe),ude=n(PSe,"SPAN",{});var Rat=s(ude);mqo=r(Rat,"AutoModelForAudioFrameClassification"),Rat.forEach(t),PSe.forEach(t),wke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(wy.$$.fragment,Fl),gqo=i(Fl),qd=n(Fl,"P",{});var pW=s(qd);hqo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bde=n(pW,"CODE",{});var Sat=s(bde);pqo=r(Sat,"from_pretrained()"),Sat.forEach(t),_qo=r(pW,"class method or the "),vde=n(pW,"CODE",{});var Pat=s(vde);uqo=r(Pat,"from_config()"),Pat.forEach(t),bqo=r(pW,`class
method.`),pW.forEach(t),vqo=i(Fl),Ay=n(Fl,"P",{});var $Se=s(Ay);Tqo=r($Se,"This class cannot be instantiated directly using "),Tde=n($Se,"CODE",{});var $at=s(Tde);Fqo=r($at,"__init__()"),$at.forEach(t),Cqo=r($Se," (throws an error)."),$Se.forEach(t),Mqo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Ly.$$.fragment,Cl),Eqo=i(Cl),Fde=n(Cl,"P",{});var Iat=s(Fde);yqo=r(Iat,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Iat.forEach(t),wqo=i(Cl),Od=n(Cl,"P",{});var _W=s(Od);Aqo=r(_W,`Note:
Loading a model from its configuration file does `),Cde=n(_W,"STRONG",{});var jat=s(Cde);Lqo=r(jat,"not"),jat.forEach(t),Bqo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=n(_W,"CODE",{});var Nat=s(Mde);xqo=r(Nat,"from_pretrained()"),Nat.forEach(t),kqo=r(_W,"to load the model weights."),_W.forEach(t),Rqo=i(Cl),Ede=n(Cl,"P",{});var Dat=s(Ede);Sqo=r(Dat,"Examples:"),Dat.forEach(t),Pqo=i(Cl),m(By.$$.fragment,Cl),Cl.forEach(t),$qo=i(Fl),Ke=n(Fl,"DIV",{class:!0});var ea=s(Ke);m(xy.$$.fragment,ea),Iqo=i(ea),yde=n(ea,"P",{});var qat=s(yde);jqo=r(qat,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),qat.forEach(t),Nqo=i(ea),an=n(ea,"P",{});var vE=s(an);Dqo=r(vE,"The model class to instantiate is selected based on the "),wde=n(vE,"CODE",{});var Oat=s(wde);qqo=r(Oat,"model_type"),Oat.forEach(t),Oqo=r(vE,` property of the config object (either
passed as an argument or loaded from `),Ade=n(vE,"CODE",{});var Gat=s(Ade);Gqo=r(Gat,"pretrained_model_name_or_path"),Gat.forEach(t),Xqo=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(vE,"CODE",{});var Xat=s(Lde);Vqo=r(Xat,"pretrained_model_name_or_path"),Xat.forEach(t),zqo=r(vE,":"),vE.forEach(t),Wqo=i(ea),nn=n(ea,"UL",{});var TE=s(nn);Fv=n(TE,"LI",{});var IAe=s(Fv);Bde=n(IAe,"STRONG",{});var Vat=s(Bde);Qqo=r(Vat,"data2vec-audio"),Vat.forEach(t),Hqo=r(IAe," \u2014 "),XD=n(IAe,"A",{href:!0});var zat=s(XD);Uqo=r(zat,"Data2VecAudioForAudioFrameClassification"),zat.forEach(t),Jqo=r(IAe," (Data2VecAudio model)"),IAe.forEach(t),Yqo=i(TE),Cv=n(TE,"LI",{});var jAe=s(Cv);xde=n(jAe,"STRONG",{});var Wat=s(xde);Kqo=r(Wat,"unispeech-sat"),Wat.forEach(t),Zqo=r(jAe," \u2014 "),VD=n(jAe,"A",{href:!0});var Qat=s(VD);eOo=r(Qat,"UniSpeechSatForAudioFrameClassification"),Qat.forEach(t),oOo=r(jAe," (UniSpeechSat model)"),jAe.forEach(t),rOo=i(TE),Mv=n(TE,"LI",{});var NAe=s(Mv);kde=n(NAe,"STRONG",{});var Hat=s(kde);tOo=r(Hat,"wav2vec2"),Hat.forEach(t),aOo=r(NAe," \u2014 "),zD=n(NAe,"A",{href:!0});var Uat=s(zD);nOo=r(Uat,"Wav2Vec2ForAudioFrameClassification"),Uat.forEach(t),sOo=r(NAe," (Wav2Vec2 model)"),NAe.forEach(t),lOo=i(TE),Ev=n(TE,"LI",{});var DAe=s(Ev);Rde=n(DAe,"STRONG",{});var Jat=s(Rde);iOo=r(Jat,"wavlm"),Jat.forEach(t),dOo=r(DAe," \u2014 "),WD=n(DAe,"A",{href:!0});var Yat=s(WD);cOo=r(Yat,"WavLMForAudioFrameClassification"),Yat.forEach(t),fOo=r(DAe," (WavLM model)"),DAe.forEach(t),TE.forEach(t),mOo=i(ea),yv=n(ea,"P",{});var qAe=s(yv);gOo=r(qAe,"The model is set in evaluation mode by default using "),Sde=n(qAe,"CODE",{});var Kat=s(Sde);hOo=r(Kat,"model.eval()"),Kat.forEach(t),pOo=r(qAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(qAe,"CODE",{});var Zat=s(Pde);_Oo=r(Zat,"model.train()"),Zat.forEach(t),qAe.forEach(t),uOo=i(ea),$de=n(ea,"P",{});var ent=s($de);bOo=r(ent,"Examples:"),ent.forEach(t),vOo=i(ea),m(ky.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Ake=i(c),Gd=n(c,"H2",{class:!0});var ISe=s(Gd);wv=n(ISe,"A",{id:!0,class:!0,href:!0});var ont=s(wv);Ide=n(ont,"SPAN",{});var rnt=s(Ide);m(Ry.$$.fragment,rnt),rnt.forEach(t),ont.forEach(t),TOo=i(ISe),jde=n(ISe,"SPAN",{});var tnt=s(jde);FOo=r(tnt,"AutoModelForCTC"),tnt.forEach(t),ISe.forEach(t),Lke=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Sy.$$.fragment,Ml),COo=i(Ml),Xd=n(Ml,"P",{});var uW=s(Xd);MOo=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Nde=n(uW,"CODE",{});var ant=s(Nde);EOo=r(ant,"from_pretrained()"),ant.forEach(t),yOo=r(uW,"class method or the "),Dde=n(uW,"CODE",{});var nnt=s(Dde);wOo=r(nnt,"from_config()"),nnt.forEach(t),AOo=r(uW,`class
method.`),uW.forEach(t),LOo=i(Ml),Py=n(Ml,"P",{});var jSe=s(Py);BOo=r(jSe,"This class cannot be instantiated directly using "),qde=n(jSe,"CODE",{});var snt=s(qde);xOo=r(snt,"__init__()"),snt.forEach(t),kOo=r(jSe," (throws an error)."),jSe.forEach(t),ROo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m($y.$$.fragment,El),SOo=i(El),Ode=n(El,"P",{});var lnt=s(Ode);POo=r(lnt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lnt.forEach(t),$Oo=i(El),Vd=n(El,"P",{});var bW=s(Vd);IOo=r(bW,`Note:
Loading a model from its configuration file does `),Gde=n(bW,"STRONG",{});var int=s(Gde);jOo=r(int,"not"),int.forEach(t),NOo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=n(bW,"CODE",{});var dnt=s(Xde);DOo=r(dnt,"from_pretrained()"),dnt.forEach(t),qOo=r(bW,"to load the model weights."),bW.forEach(t),OOo=i(El),Vde=n(El,"P",{});var cnt=s(Vde);GOo=r(cnt,"Examples:"),cnt.forEach(t),XOo=i(El),m(Iy.$$.fragment,El),El.forEach(t),VOo=i(Ml),Ze=n(Ml,"DIV",{class:!0});var oa=s(Ze);m(jy.$$.fragment,oa),zOo=i(oa),zde=n(oa,"P",{});var fnt=s(zde);WOo=r(fnt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fnt.forEach(t),QOo=i(oa),sn=n(oa,"P",{});var FE=s(sn);HOo=r(FE,"The model class to instantiate is selected based on the "),Wde=n(FE,"CODE",{});var mnt=s(Wde);UOo=r(mnt,"model_type"),mnt.forEach(t),JOo=r(FE,` property of the config object (either
passed as an argument or loaded from `),Qde=n(FE,"CODE",{});var gnt=s(Qde);YOo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),KOo=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(FE,"CODE",{});var hnt=s(Hde);ZOo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),eGo=r(FE,":"),FE.forEach(t),oGo=i(oa),Re=n(oa,"UL",{});var Oo=s(Re);Av=n(Oo,"LI",{});var OAe=s(Av);Ude=n(OAe,"STRONG",{});var pnt=s(Ude);rGo=r(pnt,"data2vec-audio"),pnt.forEach(t),tGo=r(OAe," \u2014 "),QD=n(OAe,"A",{href:!0});var _nt=s(QD);aGo=r(_nt,"Data2VecAudioForCTC"),_nt.forEach(t),nGo=r(OAe," (Data2VecAudio model)"),OAe.forEach(t),sGo=i(Oo),Lv=n(Oo,"LI",{});var GAe=s(Lv);Jde=n(GAe,"STRONG",{});var unt=s(Jde);lGo=r(unt,"hubert"),unt.forEach(t),iGo=r(GAe," \u2014 "),HD=n(GAe,"A",{href:!0});var bnt=s(HD);dGo=r(bnt,"HubertForCTC"),bnt.forEach(t),cGo=r(GAe," (Hubert model)"),GAe.forEach(t),fGo=i(Oo),Bv=n(Oo,"LI",{});var XAe=s(Bv);Yde=n(XAe,"STRONG",{});var vnt=s(Yde);mGo=r(vnt,"sew"),vnt.forEach(t),gGo=r(XAe," \u2014 "),UD=n(XAe,"A",{href:!0});var Tnt=s(UD);hGo=r(Tnt,"SEWForCTC"),Tnt.forEach(t),pGo=r(XAe," (SEW model)"),XAe.forEach(t),_Go=i(Oo),xv=n(Oo,"LI",{});var VAe=s(xv);Kde=n(VAe,"STRONG",{});var Fnt=s(Kde);uGo=r(Fnt,"sew-d"),Fnt.forEach(t),bGo=r(VAe," \u2014 "),JD=n(VAe,"A",{href:!0});var Cnt=s(JD);vGo=r(Cnt,"SEWDForCTC"),Cnt.forEach(t),TGo=r(VAe," (SEW-D model)"),VAe.forEach(t),FGo=i(Oo),kv=n(Oo,"LI",{});var zAe=s(kv);Zde=n(zAe,"STRONG",{});var Mnt=s(Zde);CGo=r(Mnt,"unispeech"),Mnt.forEach(t),MGo=r(zAe," \u2014 "),YD=n(zAe,"A",{href:!0});var Ent=s(YD);EGo=r(Ent,"UniSpeechForCTC"),Ent.forEach(t),yGo=r(zAe," (UniSpeech model)"),zAe.forEach(t),wGo=i(Oo),Rv=n(Oo,"LI",{});var WAe=s(Rv);ece=n(WAe,"STRONG",{});var ynt=s(ece);AGo=r(ynt,"unispeech-sat"),ynt.forEach(t),LGo=r(WAe," \u2014 "),KD=n(WAe,"A",{href:!0});var wnt=s(KD);BGo=r(wnt,"UniSpeechSatForCTC"),wnt.forEach(t),xGo=r(WAe," (UniSpeechSat model)"),WAe.forEach(t),kGo=i(Oo),Sv=n(Oo,"LI",{});var QAe=s(Sv);oce=n(QAe,"STRONG",{});var Ant=s(oce);RGo=r(Ant,"wav2vec2"),Ant.forEach(t),SGo=r(QAe," \u2014 "),ZD=n(QAe,"A",{href:!0});var Lnt=s(ZD);PGo=r(Lnt,"Wav2Vec2ForCTC"),Lnt.forEach(t),$Go=r(QAe," (Wav2Vec2 model)"),QAe.forEach(t),IGo=i(Oo),Pv=n(Oo,"LI",{});var HAe=s(Pv);rce=n(HAe,"STRONG",{});var Bnt=s(rce);jGo=r(Bnt,"wavlm"),Bnt.forEach(t),NGo=r(HAe," \u2014 "),eq=n(HAe,"A",{href:!0});var xnt=s(eq);DGo=r(xnt,"WavLMForCTC"),xnt.forEach(t),qGo=r(HAe," (WavLM model)"),HAe.forEach(t),Oo.forEach(t),OGo=i(oa),$v=n(oa,"P",{});var UAe=s($v);GGo=r(UAe,"The model is set in evaluation mode by default using "),tce=n(UAe,"CODE",{});var knt=s(tce);XGo=r(knt,"model.eval()"),knt.forEach(t),VGo=r(UAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(UAe,"CODE",{});var Rnt=s(ace);zGo=r(Rnt,"model.train()"),Rnt.forEach(t),UAe.forEach(t),WGo=i(oa),nce=n(oa,"P",{});var Snt=s(nce);QGo=r(Snt,"Examples:"),Snt.forEach(t),HGo=i(oa),m(Ny.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Bke=i(c),zd=n(c,"H2",{class:!0});var NSe=s(zd);Iv=n(NSe,"A",{id:!0,class:!0,href:!0});var Pnt=s(Iv);sce=n(Pnt,"SPAN",{});var $nt=s(sce);m(Dy.$$.fragment,$nt),$nt.forEach(t),Pnt.forEach(t),UGo=i(NSe),lce=n(NSe,"SPAN",{});var Int=s(lce);JGo=r(Int,"AutoModelForSpeechSeq2Seq"),Int.forEach(t),NSe.forEach(t),xke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(qy.$$.fragment,yl),YGo=i(yl),Wd=n(yl,"P",{});var vW=s(Wd);KGo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ice=n(vW,"CODE",{});var jnt=s(ice);ZGo=r(jnt,"from_pretrained()"),jnt.forEach(t),eXo=r(vW,"class method or the "),dce=n(vW,"CODE",{});var Nnt=s(dce);oXo=r(Nnt,"from_config()"),Nnt.forEach(t),rXo=r(vW,`class
method.`),vW.forEach(t),tXo=i(yl),Oy=n(yl,"P",{});var DSe=s(Oy);aXo=r(DSe,"This class cannot be instantiated directly using "),cce=n(DSe,"CODE",{});var Dnt=s(cce);nXo=r(Dnt,"__init__()"),Dnt.forEach(t),sXo=r(DSe," (throws an error)."),DSe.forEach(t),lXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Gy.$$.fragment,wl),iXo=i(wl),fce=n(wl,"P",{});var qnt=s(fce);dXo=r(qnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qnt.forEach(t),cXo=i(wl),Qd=n(wl,"P",{});var TW=s(Qd);fXo=r(TW,`Note:
Loading a model from its configuration file does `),mce=n(TW,"STRONG",{});var Ont=s(mce);mXo=r(Ont,"not"),Ont.forEach(t),gXo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=n(TW,"CODE",{});var Gnt=s(gce);hXo=r(Gnt,"from_pretrained()"),Gnt.forEach(t),pXo=r(TW,"to load the model weights."),TW.forEach(t),_Xo=i(wl),hce=n(wl,"P",{});var Xnt=s(hce);uXo=r(Xnt,"Examples:"),Xnt.forEach(t),bXo=i(wl),m(Xy.$$.fragment,wl),wl.forEach(t),vXo=i(yl),eo=n(yl,"DIV",{class:!0});var ra=s(eo);m(Vy.$$.fragment,ra),TXo=i(ra),pce=n(ra,"P",{});var Vnt=s(pce);FXo=r(Vnt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vnt.forEach(t),CXo=i(ra),ln=n(ra,"P",{});var CE=s(ln);MXo=r(CE,"The model class to instantiate is selected based on the "),_ce=n(CE,"CODE",{});var znt=s(_ce);EXo=r(znt,"model_type"),znt.forEach(t),yXo=r(CE,` property of the config object (either
passed as an argument or loaded from `),uce=n(CE,"CODE",{});var Wnt=s(uce);wXo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),AXo=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(CE,"CODE",{});var Qnt=s(bce);LXo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),BXo=r(CE,":"),CE.forEach(t),xXo=i(ra),zy=n(ra,"UL",{});var qSe=s(zy);jv=n(qSe,"LI",{});var JAe=s(jv);vce=n(JAe,"STRONG",{});var Hnt=s(vce);kXo=r(Hnt,"speech-encoder-decoder"),Hnt.forEach(t),RXo=r(JAe," \u2014 "),oq=n(JAe,"A",{href:!0});var Unt=s(oq);SXo=r(Unt,"SpeechEncoderDecoderModel"),Unt.forEach(t),PXo=r(JAe," (Speech Encoder decoder model)"),JAe.forEach(t),$Xo=i(qSe),Nv=n(qSe,"LI",{});var YAe=s(Nv);Tce=n(YAe,"STRONG",{});var Jnt=s(Tce);IXo=r(Jnt,"speech_to_text"),Jnt.forEach(t),jXo=r(YAe," \u2014 "),rq=n(YAe,"A",{href:!0});var Ynt=s(rq);NXo=r(Ynt,"Speech2TextForConditionalGeneration"),Ynt.forEach(t),DXo=r(YAe," (Speech2Text model)"),YAe.forEach(t),qSe.forEach(t),qXo=i(ra),Dv=n(ra,"P",{});var KAe=s(Dv);OXo=r(KAe,"The model is set in evaluation mode by default using "),Fce=n(KAe,"CODE",{});var Knt=s(Fce);GXo=r(Knt,"model.eval()"),Knt.forEach(t),XXo=r(KAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(KAe,"CODE",{});var Znt=s(Cce);VXo=r(Znt,"model.train()"),Znt.forEach(t),KAe.forEach(t),zXo=i(ra),Mce=n(ra,"P",{});var est=s(Mce);WXo=r(est,"Examples:"),est.forEach(t),QXo=i(ra),m(Wy.$$.fragment,ra),ra.forEach(t),yl.forEach(t),kke=i(c),Hd=n(c,"H2",{class:!0});var OSe=s(Hd);qv=n(OSe,"A",{id:!0,class:!0,href:!0});var ost=s(qv);Ece=n(ost,"SPAN",{});var rst=s(Ece);m(Qy.$$.fragment,rst),rst.forEach(t),ost.forEach(t),HXo=i(OSe),yce=n(OSe,"SPAN",{});var tst=s(yce);UXo=r(tst,"AutoModelForAudioXVector"),tst.forEach(t),OSe.forEach(t),Rke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(Hy.$$.fragment,Al),JXo=i(Al),Ud=n(Al,"P",{});var FW=s(Ud);YXo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wce=n(FW,"CODE",{});var ast=s(wce);KXo=r(ast,"from_pretrained()"),ast.forEach(t),ZXo=r(FW,"class method or the "),Ace=n(FW,"CODE",{});var nst=s(Ace);eVo=r(nst,"from_config()"),nst.forEach(t),oVo=r(FW,`class
method.`),FW.forEach(t),rVo=i(Al),Uy=n(Al,"P",{});var GSe=s(Uy);tVo=r(GSe,"This class cannot be instantiated directly using "),Lce=n(GSe,"CODE",{});var sst=s(Lce);aVo=r(sst,"__init__()"),sst.forEach(t),nVo=r(GSe," (throws an error)."),GSe.forEach(t),sVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(Jy.$$.fragment,Ll),lVo=i(Ll),Bce=n(Ll,"P",{});var lst=s(Bce);iVo=r(lst,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lst.forEach(t),dVo=i(Ll),Jd=n(Ll,"P",{});var CW=s(Jd);cVo=r(CW,`Note:
Loading a model from its configuration file does `),xce=n(CW,"STRONG",{});var ist=s(xce);fVo=r(ist,"not"),ist.forEach(t),mVo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kce=n(CW,"CODE",{});var dst=s(kce);gVo=r(dst,"from_pretrained()"),dst.forEach(t),hVo=r(CW,"to load the model weights."),CW.forEach(t),pVo=i(Ll),Rce=n(Ll,"P",{});var cst=s(Rce);_Vo=r(cst,"Examples:"),cst.forEach(t),uVo=i(Ll),m(Yy.$$.fragment,Ll),Ll.forEach(t),bVo=i(Al),oo=n(Al,"DIV",{class:!0});var ta=s(oo);m(Ky.$$.fragment,ta),vVo=i(ta),Sce=n(ta,"P",{});var fst=s(Sce);TVo=r(fst,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fst.forEach(t),FVo=i(ta),dn=n(ta,"P",{});var ME=s(dn);CVo=r(ME,"The model class to instantiate is selected based on the "),Pce=n(ME,"CODE",{});var mst=s(Pce);MVo=r(mst,"model_type"),mst.forEach(t),EVo=r(ME,` property of the config object (either
passed as an argument or loaded from `),$ce=n(ME,"CODE",{});var gst=s($ce);yVo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),wVo=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(ME,"CODE",{});var hst=s(Ice);AVo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),LVo=r(ME,":"),ME.forEach(t),BVo=i(ta),cn=n(ta,"UL",{});var EE=s(cn);Ov=n(EE,"LI",{});var ZAe=s(Ov);jce=n(ZAe,"STRONG",{});var pst=s(jce);xVo=r(pst,"data2vec-audio"),pst.forEach(t),kVo=r(ZAe," \u2014 "),tq=n(ZAe,"A",{href:!0});var _st=s(tq);RVo=r(_st,"Data2VecAudioForXVector"),_st.forEach(t),SVo=r(ZAe," (Data2VecAudio model)"),ZAe.forEach(t),PVo=i(EE),Gv=n(EE,"LI",{});var eLe=s(Gv);Nce=n(eLe,"STRONG",{});var ust=s(Nce);$Vo=r(ust,"unispeech-sat"),ust.forEach(t),IVo=r(eLe," \u2014 "),aq=n(eLe,"A",{href:!0});var bst=s(aq);jVo=r(bst,"UniSpeechSatForXVector"),bst.forEach(t),NVo=r(eLe," (UniSpeechSat model)"),eLe.forEach(t),DVo=i(EE),Xv=n(EE,"LI",{});var oLe=s(Xv);Dce=n(oLe,"STRONG",{});var vst=s(Dce);qVo=r(vst,"wav2vec2"),vst.forEach(t),OVo=r(oLe," \u2014 "),nq=n(oLe,"A",{href:!0});var Tst=s(nq);GVo=r(Tst,"Wav2Vec2ForXVector"),Tst.forEach(t),XVo=r(oLe," (Wav2Vec2 model)"),oLe.forEach(t),VVo=i(EE),Vv=n(EE,"LI",{});var rLe=s(Vv);qce=n(rLe,"STRONG",{});var Fst=s(qce);zVo=r(Fst,"wavlm"),Fst.forEach(t),WVo=r(rLe," \u2014 "),sq=n(rLe,"A",{href:!0});var Cst=s(sq);QVo=r(Cst,"WavLMForXVector"),Cst.forEach(t),HVo=r(rLe," (WavLM model)"),rLe.forEach(t),EE.forEach(t),UVo=i(ta),zv=n(ta,"P",{});var tLe=s(zv);JVo=r(tLe,"The model is set in evaluation mode by default using "),Oce=n(tLe,"CODE",{});var Mst=s(Oce);YVo=r(Mst,"model.eval()"),Mst.forEach(t),KVo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=n(tLe,"CODE",{});var Est=s(Gce);ZVo=r(Est,"model.train()"),Est.forEach(t),tLe.forEach(t),ezo=i(ta),Xce=n(ta,"P",{});var yst=s(Xce);ozo=r(yst,"Examples:"),yst.forEach(t),rzo=i(ta),m(Zy.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Ske=i(c),Yd=n(c,"H2",{class:!0});var XSe=s(Yd);Wv=n(XSe,"A",{id:!0,class:!0,href:!0});var wst=s(Wv);Vce=n(wst,"SPAN",{});var Ast=s(Vce);m(ew.$$.fragment,Ast),Ast.forEach(t),wst.forEach(t),tzo=i(XSe),zce=n(XSe,"SPAN",{});var Lst=s(zce);azo=r(Lst,"AutoModelForMaskedImageModeling"),Lst.forEach(t),XSe.forEach(t),Pke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(ow.$$.fragment,Bl),nzo=i(Bl),Kd=n(Bl,"P",{});var MW=s(Kd);szo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Wce=n(MW,"CODE",{});var Bst=s(Wce);lzo=r(Bst,"from_pretrained()"),Bst.forEach(t),izo=r(MW,"class method or the "),Qce=n(MW,"CODE",{});var xst=s(Qce);dzo=r(xst,"from_config()"),xst.forEach(t),czo=r(MW,`class
method.`),MW.forEach(t),fzo=i(Bl),rw=n(Bl,"P",{});var VSe=s(rw);mzo=r(VSe,"This class cannot be instantiated directly using "),Hce=n(VSe,"CODE",{});var kst=s(Hce);gzo=r(kst,"__init__()"),kst.forEach(t),hzo=r(VSe," (throws an error)."),VSe.forEach(t),pzo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(tw.$$.fragment,xl),_zo=i(xl),Uce=n(xl,"P",{});var Rst=s(Uce);uzo=r(Rst,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rst.forEach(t),bzo=i(xl),Zd=n(xl,"P",{});var EW=s(Zd);vzo=r(EW,`Note:
Loading a model from its configuration file does `),Jce=n(EW,"STRONG",{});var Sst=s(Jce);Tzo=r(Sst,"not"),Sst.forEach(t),Fzo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yce=n(EW,"CODE",{});var Pst=s(Yce);Czo=r(Pst,"from_pretrained()"),Pst.forEach(t),Mzo=r(EW,"to load the model weights."),EW.forEach(t),Ezo=i(xl),Kce=n(xl,"P",{});var $st=s(Kce);yzo=r($st,"Examples:"),$st.forEach(t),wzo=i(xl),m(aw.$$.fragment,xl),xl.forEach(t),Azo=i(Bl),ro=n(Bl,"DIV",{class:!0});var aa=s(ro);m(nw.$$.fragment,aa),Lzo=i(aa),Zce=n(aa,"P",{});var Ist=s(Zce);Bzo=r(Ist,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ist.forEach(t),xzo=i(aa),fn=n(aa,"P",{});var yE=s(fn);kzo=r(yE,"The model class to instantiate is selected based on the "),efe=n(yE,"CODE",{});var jst=s(efe);Rzo=r(jst,"model_type"),jst.forEach(t),Szo=r(yE,` property of the config object (either
passed as an argument or loaded from `),ofe=n(yE,"CODE",{});var Nst=s(ofe);Pzo=r(Nst,"pretrained_model_name_or_path"),Nst.forEach(t),$zo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(yE,"CODE",{});var Dst=s(rfe);Izo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),jzo=r(yE,":"),yE.forEach(t),Nzo=i(aa),ec=n(aa,"UL",{});var yW=s(ec);Qv=n(yW,"LI",{});var aLe=s(Qv);tfe=n(aLe,"STRONG",{});var qst=s(tfe);Dzo=r(qst,"deit"),qst.forEach(t),qzo=r(aLe," \u2014 "),lq=n(aLe,"A",{href:!0});var Ost=s(lq);Ozo=r(Ost,"DeiTForMaskedImageModeling"),Ost.forEach(t),Gzo=r(aLe," (DeiT model)"),aLe.forEach(t),Xzo=i(yW),Hv=n(yW,"LI",{});var nLe=s(Hv);afe=n(nLe,"STRONG",{});var Gst=s(afe);Vzo=r(Gst,"swin"),Gst.forEach(t),zzo=r(nLe," \u2014 "),iq=n(nLe,"A",{href:!0});var Xst=s(iq);Wzo=r(Xst,"SwinForMaskedImageModeling"),Xst.forEach(t),Qzo=r(nLe," (Swin model)"),nLe.forEach(t),Hzo=i(yW),Uv=n(yW,"LI",{});var sLe=s(Uv);nfe=n(sLe,"STRONG",{});var Vst=s(nfe);Uzo=r(Vst,"vit"),Vst.forEach(t),Jzo=r(sLe," \u2014 "),dq=n(sLe,"A",{href:!0});var zst=s(dq);Yzo=r(zst,"ViTForMaskedImageModeling"),zst.forEach(t),Kzo=r(sLe," (ViT model)"),sLe.forEach(t),yW.forEach(t),Zzo=i(aa),Jv=n(aa,"P",{});var lLe=s(Jv);eWo=r(lLe,"The model is set in evaluation mode by default using "),sfe=n(lLe,"CODE",{});var Wst=s(sfe);oWo=r(Wst,"model.eval()"),Wst.forEach(t),rWo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=n(lLe,"CODE",{});var Qst=s(lfe);tWo=r(Qst,"model.train()"),Qst.forEach(t),lLe.forEach(t),aWo=i(aa),ife=n(aa,"P",{});var Hst=s(ife);nWo=r(Hst,"Examples:"),Hst.forEach(t),sWo=i(aa),m(sw.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),$ke=i(c),oc=n(c,"H2",{class:!0});var zSe=s(oc);Yv=n(zSe,"A",{id:!0,class:!0,href:!0});var Ust=s(Yv);dfe=n(Ust,"SPAN",{});var Jst=s(dfe);m(lw.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),lWo=i(zSe),cfe=n(zSe,"SPAN",{});var Yst=s(cfe);iWo=r(Yst,"AutoModelForObjectDetection"),Yst.forEach(t),zSe.forEach(t),Ike=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(iw.$$.fragment,kl),dWo=i(kl),rc=n(kl,"P",{});var wW=s(rc);cWo=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ffe=n(wW,"CODE",{});var Kst=s(ffe);fWo=r(Kst,"from_pretrained()"),Kst.forEach(t),mWo=r(wW,"class method or the "),mfe=n(wW,"CODE",{});var Zst=s(mfe);gWo=r(Zst,"from_config()"),Zst.forEach(t),hWo=r(wW,`class
method.`),wW.forEach(t),pWo=i(kl),dw=n(kl,"P",{});var WSe=s(dw);_Wo=r(WSe,"This class cannot be instantiated directly using "),gfe=n(WSe,"CODE",{});var elt=s(gfe);uWo=r(elt,"__init__()"),elt.forEach(t),bWo=r(WSe," (throws an error)."),WSe.forEach(t),vWo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(cw.$$.fragment,Rl),TWo=i(Rl),hfe=n(Rl,"P",{});var olt=s(hfe);FWo=r(olt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),olt.forEach(t),CWo=i(Rl),tc=n(Rl,"P",{});var AW=s(tc);MWo=r(AW,`Note:
Loading a model from its configuration file does `),pfe=n(AW,"STRONG",{});var rlt=s(pfe);EWo=r(rlt,"not"),rlt.forEach(t),yWo=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_fe=n(AW,"CODE",{});var tlt=s(_fe);wWo=r(tlt,"from_pretrained()"),tlt.forEach(t),AWo=r(AW,"to load the model weights."),AW.forEach(t),LWo=i(Rl),ufe=n(Rl,"P",{});var alt=s(ufe);BWo=r(alt,"Examples:"),alt.forEach(t),xWo=i(Rl),m(fw.$$.fragment,Rl),Rl.forEach(t),kWo=i(kl),to=n(kl,"DIV",{class:!0});var na=s(to);m(mw.$$.fragment,na),RWo=i(na),bfe=n(na,"P",{});var nlt=s(bfe);SWo=r(nlt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nlt.forEach(t),PWo=i(na),mn=n(na,"P",{});var wE=s(mn);$Wo=r(wE,"The model class to instantiate is selected based on the "),vfe=n(wE,"CODE",{});var slt=s(vfe);IWo=r(slt,"model_type"),slt.forEach(t),jWo=r(wE,` property of the config object (either
passed as an argument or loaded from `),Tfe=n(wE,"CODE",{});var llt=s(Tfe);NWo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),DWo=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(wE,"CODE",{});var ilt=s(Ffe);qWo=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),OWo=r(wE,":"),wE.forEach(t),GWo=i(na),Cfe=n(na,"UL",{});var dlt=s(Cfe);Kv=n(dlt,"LI",{});var iLe=s(Kv);Mfe=n(iLe,"STRONG",{});var clt=s(Mfe);XWo=r(clt,"detr"),clt.forEach(t),VWo=r(iLe," \u2014 "),cq=n(iLe,"A",{href:!0});var flt=s(cq);zWo=r(flt,"DetrForObjectDetection"),flt.forEach(t),WWo=r(iLe," (DETR model)"),iLe.forEach(t),dlt.forEach(t),QWo=i(na),Zv=n(na,"P",{});var dLe=s(Zv);HWo=r(dLe,"The model is set in evaluation mode by default using "),Efe=n(dLe,"CODE",{});var mlt=s(Efe);UWo=r(mlt,"model.eval()"),mlt.forEach(t),JWo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=n(dLe,"CODE",{});var glt=s(yfe);YWo=r(glt,"model.train()"),glt.forEach(t),dLe.forEach(t),KWo=i(na),wfe=n(na,"P",{});var hlt=s(wfe);ZWo=r(hlt,"Examples:"),hlt.forEach(t),eQo=i(na),m(gw.$$.fragment,na),na.forEach(t),kl.forEach(t),jke=i(c),ac=n(c,"H2",{class:!0});var QSe=s(ac);e6=n(QSe,"A",{id:!0,class:!0,href:!0});var plt=s(e6);Afe=n(plt,"SPAN",{});var _lt=s(Afe);m(hw.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),oQo=i(QSe),Lfe=n(QSe,"SPAN",{});var ult=s(Lfe);rQo=r(ult,"AutoModelForImageSegmentation"),ult.forEach(t),QSe.forEach(t),Nke=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(pw.$$.fragment,Sl),tQo=i(Sl),nc=n(Sl,"P",{});var LW=s(nc);aQo=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Bfe=n(LW,"CODE",{});var blt=s(Bfe);nQo=r(blt,"from_pretrained()"),blt.forEach(t),sQo=r(LW,"class method or the "),xfe=n(LW,"CODE",{});var vlt=s(xfe);lQo=r(vlt,"from_config()"),vlt.forEach(t),iQo=r(LW,`class
method.`),LW.forEach(t),dQo=i(Sl),_w=n(Sl,"P",{});var HSe=s(_w);cQo=r(HSe,"This class cannot be instantiated directly using "),kfe=n(HSe,"CODE",{});var Tlt=s(kfe);fQo=r(Tlt,"__init__()"),Tlt.forEach(t),mQo=r(HSe," (throws an error)."),HSe.forEach(t),gQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(uw.$$.fragment,Pl),hQo=i(Pl),Rfe=n(Pl,"P",{});var Flt=s(Rfe);pQo=r(Flt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Flt.forEach(t),_Qo=i(Pl),sc=n(Pl,"P",{});var BW=s(sc);uQo=r(BW,`Note:
Loading a model from its configuration file does `),Sfe=n(BW,"STRONG",{});var Clt=s(Sfe);bQo=r(Clt,"not"),Clt.forEach(t),vQo=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pfe=n(BW,"CODE",{});var Mlt=s(Pfe);TQo=r(Mlt,"from_pretrained()"),Mlt.forEach(t),FQo=r(BW,"to load the model weights."),BW.forEach(t),CQo=i(Pl),$fe=n(Pl,"P",{});var Elt=s($fe);MQo=r(Elt,"Examples:"),Elt.forEach(t),EQo=i(Pl),m(bw.$$.fragment,Pl),Pl.forEach(t),yQo=i(Sl),ao=n(Sl,"DIV",{class:!0});var sa=s(ao);m(vw.$$.fragment,sa),wQo=i(sa),Ife=n(sa,"P",{});var ylt=s(Ife);AQo=r(ylt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ylt.forEach(t),LQo=i(sa),gn=n(sa,"P",{});var AE=s(gn);BQo=r(AE,"The model class to instantiate is selected based on the "),jfe=n(AE,"CODE",{});var wlt=s(jfe);xQo=r(wlt,"model_type"),wlt.forEach(t),kQo=r(AE,` property of the config object (either
passed as an argument or loaded from `),Nfe=n(AE,"CODE",{});var Alt=s(Nfe);RQo=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),SQo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(AE,"CODE",{});var Llt=s(Dfe);PQo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),$Qo=r(AE,":"),AE.forEach(t),IQo=i(sa),qfe=n(sa,"UL",{});var Blt=s(qfe);o6=n(Blt,"LI",{});var cLe=s(o6);Ofe=n(cLe,"STRONG",{});var xlt=s(Ofe);jQo=r(xlt,"detr"),xlt.forEach(t),NQo=r(cLe," \u2014 "),fq=n(cLe,"A",{href:!0});var klt=s(fq);DQo=r(klt,"DetrForSegmentation"),klt.forEach(t),qQo=r(cLe," (DETR model)"),cLe.forEach(t),Blt.forEach(t),OQo=i(sa),r6=n(sa,"P",{});var fLe=s(r6);GQo=r(fLe,"The model is set in evaluation mode by default using "),Gfe=n(fLe,"CODE",{});var Rlt=s(Gfe);XQo=r(Rlt,"model.eval()"),Rlt.forEach(t),VQo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(fLe,"CODE",{});var Slt=s(Xfe);zQo=r(Slt,"model.train()"),Slt.forEach(t),fLe.forEach(t),WQo=i(sa),Vfe=n(sa,"P",{});var Plt=s(Vfe);QQo=r(Plt,"Examples:"),Plt.forEach(t),HQo=i(sa),m(Tw.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),Dke=i(c),lc=n(c,"H2",{class:!0});var USe=s(lc);t6=n(USe,"A",{id:!0,class:!0,href:!0});var $lt=s(t6);zfe=n($lt,"SPAN",{});var Ilt=s(zfe);m(Fw.$$.fragment,Ilt),Ilt.forEach(t),$lt.forEach(t),UQo=i(USe),Wfe=n(USe,"SPAN",{});var jlt=s(Wfe);JQo=r(jlt,"AutoModelForSemanticSegmentation"),jlt.forEach(t),USe.forEach(t),qke=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(Cw.$$.fragment,$l),YQo=i($l),ic=n($l,"P",{});var xW=s(ic);KQo=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Qfe=n(xW,"CODE",{});var Nlt=s(Qfe);ZQo=r(Nlt,"from_pretrained()"),Nlt.forEach(t),eHo=r(xW,"class method or the "),Hfe=n(xW,"CODE",{});var Dlt=s(Hfe);oHo=r(Dlt,"from_config()"),Dlt.forEach(t),rHo=r(xW,`class
method.`),xW.forEach(t),tHo=i($l),Mw=n($l,"P",{});var JSe=s(Mw);aHo=r(JSe,"This class cannot be instantiated directly using "),Ufe=n(JSe,"CODE",{});var qlt=s(Ufe);nHo=r(qlt,"__init__()"),qlt.forEach(t),sHo=r(JSe," (throws an error)."),JSe.forEach(t),lHo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Ew.$$.fragment,Il),iHo=i(Il),Jfe=n(Il,"P",{});var Olt=s(Jfe);dHo=r(Olt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Olt.forEach(t),cHo=i(Il),dc=n(Il,"P",{});var kW=s(dc);fHo=r(kW,`Note:
Loading a model from its configuration file does `),Yfe=n(kW,"STRONG",{});var Glt=s(Yfe);mHo=r(Glt,"not"),Glt.forEach(t),gHo=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=n(kW,"CODE",{});var Xlt=s(Kfe);hHo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),pHo=r(kW,"to load the model weights."),kW.forEach(t),_Ho=i(Il),Zfe=n(Il,"P",{});var Vlt=s(Zfe);uHo=r(Vlt,"Examples:"),Vlt.forEach(t),bHo=i(Il),m(yw.$$.fragment,Il),Il.forEach(t),vHo=i($l),no=n($l,"DIV",{class:!0});var la=s(no);m(ww.$$.fragment,la),THo=i(la),eme=n(la,"P",{});var zlt=s(eme);FHo=r(zlt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zlt.forEach(t),CHo=i(la),hn=n(la,"P",{});var LE=s(hn);MHo=r(LE,"The model class to instantiate is selected based on the "),ome=n(LE,"CODE",{});var Wlt=s(ome);EHo=r(Wlt,"model_type"),Wlt.forEach(t),yHo=r(LE,` property of the config object (either
passed as an argument or loaded from `),rme=n(LE,"CODE",{});var Qlt=s(rme);wHo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),AHo=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(LE,"CODE",{});var Hlt=s(tme);LHo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),BHo=r(LE,":"),LE.forEach(t),xHo=i(la),Aw=n(la,"UL",{});var YSe=s(Aw);a6=n(YSe,"LI",{});var mLe=s(a6);ame=n(mLe,"STRONG",{});var Ult=s(ame);kHo=r(Ult,"beit"),Ult.forEach(t),RHo=r(mLe," \u2014 "),mq=n(mLe,"A",{href:!0});var Jlt=s(mq);SHo=r(Jlt,"BeitForSemanticSegmentation"),Jlt.forEach(t),PHo=r(mLe," (BEiT model)"),mLe.forEach(t),$Ho=i(YSe),n6=n(YSe,"LI",{});var gLe=s(n6);nme=n(gLe,"STRONG",{});var Ylt=s(nme);IHo=r(Ylt,"segformer"),Ylt.forEach(t),jHo=r(gLe," \u2014 "),gq=n(gLe,"A",{href:!0});var Klt=s(gq);NHo=r(Klt,"SegformerForSemanticSegmentation"),Klt.forEach(t),DHo=r(gLe," (SegFormer model)"),gLe.forEach(t),YSe.forEach(t),qHo=i(la),s6=n(la,"P",{});var hLe=s(s6);OHo=r(hLe,"The model is set in evaluation mode by default using "),sme=n(hLe,"CODE",{});var Zlt=s(sme);GHo=r(Zlt,"model.eval()"),Zlt.forEach(t),XHo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(hLe,"CODE",{});var eit=s(lme);VHo=r(eit,"model.train()"),eit.forEach(t),hLe.forEach(t),zHo=i(la),ime=n(la,"P",{});var oit=s(ime);WHo=r(oit,"Examples:"),oit.forEach(t),QHo=i(la),m(Lw.$$.fragment,la),la.forEach(t),$l.forEach(t),Oke=i(c),cc=n(c,"H2",{class:!0});var KSe=s(cc);l6=n(KSe,"A",{id:!0,class:!0,href:!0});var rit=s(l6);dme=n(rit,"SPAN",{});var tit=s(dme);m(Bw.$$.fragment,tit),tit.forEach(t),rit.forEach(t),HHo=i(KSe),cme=n(KSe,"SPAN",{});var ait=s(cme);UHo=r(ait,"AutoModelForInstanceSegmentation"),ait.forEach(t),KSe.forEach(t),Gke=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(xw.$$.fragment,jl),JHo=i(jl),fc=n(jl,"P",{});var RW=s(fc);YHo=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fme=n(RW,"CODE",{});var nit=s(fme);KHo=r(nit,"from_pretrained()"),nit.forEach(t),ZHo=r(RW,"class method or the "),mme=n(RW,"CODE",{});var sit=s(mme);eUo=r(sit,"from_config()"),sit.forEach(t),oUo=r(RW,`class
method.`),RW.forEach(t),rUo=i(jl),kw=n(jl,"P",{});var ZSe=s(kw);tUo=r(ZSe,"This class cannot be instantiated directly using "),gme=n(ZSe,"CODE",{});var lit=s(gme);aUo=r(lit,"__init__()"),lit.forEach(t),nUo=r(ZSe," (throws an error)."),ZSe.forEach(t),sUo=i(jl),mt=n(jl,"DIV",{class:!0});var Nl=s(mt);m(Rw.$$.fragment,Nl),lUo=i(Nl),hme=n(Nl,"P",{});var iit=s(hme);iUo=r(iit,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),iit.forEach(t),dUo=i(Nl),mc=n(Nl,"P",{});var SW=s(mc);cUo=r(SW,`Note:
Loading a model from its configuration file does `),pme=n(SW,"STRONG",{});var dit=s(pme);fUo=r(dit,"not"),dit.forEach(t),mUo=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_me=n(SW,"CODE",{});var cit=s(_me);gUo=r(cit,"from_pretrained()"),cit.forEach(t),hUo=r(SW,"to load the model weights."),SW.forEach(t),pUo=i(Nl),ume=n(Nl,"P",{});var fit=s(ume);_Uo=r(fit,"Examples:"),fit.forEach(t),uUo=i(Nl),m(Sw.$$.fragment,Nl),Nl.forEach(t),bUo=i(jl),so=n(jl,"DIV",{class:!0});var ia=s(so);m(Pw.$$.fragment,ia),vUo=i(ia),bme=n(ia,"P",{});var mit=s(bme);TUo=r(mit,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mit.forEach(t),FUo=i(ia),pn=n(ia,"P",{});var BE=s(pn);CUo=r(BE,"The model class to instantiate is selected based on the "),vme=n(BE,"CODE",{});var git=s(vme);MUo=r(git,"model_type"),git.forEach(t),EUo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Tme=n(BE,"CODE",{});var hit=s(Tme);yUo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),wUo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(BE,"CODE",{});var pit=s(Fme);AUo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),LUo=r(BE,":"),BE.forEach(t),BUo=i(ia),Cme=n(ia,"UL",{});var _it=s(Cme);i6=n(_it,"LI",{});var pLe=s(i6);Mme=n(pLe,"STRONG",{});var uit=s(Mme);xUo=r(uit,"maskformer"),uit.forEach(t),kUo=r(pLe," \u2014 "),hq=n(pLe,"A",{href:!0});var bit=s(hq);RUo=r(bit,"MaskFormerForInstanceSegmentation"),bit.forEach(t),SUo=r(pLe," (MaskFormer model)"),pLe.forEach(t),_it.forEach(t),PUo=i(ia),d6=n(ia,"P",{});var _Le=s(d6);$Uo=r(_Le,"The model is set in evaluation mode by default using "),Eme=n(_Le,"CODE",{});var vit=s(Eme);IUo=r(vit,"model.eval()"),vit.forEach(t),jUo=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(_Le,"CODE",{});var Tit=s(yme);NUo=r(Tit,"model.train()"),Tit.forEach(t),_Le.forEach(t),DUo=i(ia),wme=n(ia,"P",{});var Fit=s(wme);qUo=r(Fit,"Examples:"),Fit.forEach(t),OUo=i(ia),m($w.$$.fragment,ia),ia.forEach(t),jl.forEach(t),Xke=i(c),gc=n(c,"H2",{class:!0});var ePe=s(gc);c6=n(ePe,"A",{id:!0,class:!0,href:!0});var Cit=s(c6);Ame=n(Cit,"SPAN",{});var Mit=s(Ame);m(Iw.$$.fragment,Mit),Mit.forEach(t),Cit.forEach(t),GUo=i(ePe),Lme=n(ePe,"SPAN",{});var Eit=s(Lme);XUo=r(Eit,"TFAutoModel"),Eit.forEach(t),ePe.forEach(t),Vke=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(jw.$$.fragment,Dl),VUo=i(Dl),hc=n(Dl,"P",{});var PW=s(hc);zUo=r(PW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bme=n(PW,"CODE",{});var yit=s(Bme);WUo=r(yit,"from_pretrained()"),yit.forEach(t),QUo=r(PW,"class method or the "),xme=n(PW,"CODE",{});var wit=s(xme);HUo=r(wit,"from_config()"),wit.forEach(t),UUo=r(PW,`class
method.`),PW.forEach(t),JUo=i(Dl),Nw=n(Dl,"P",{});var oPe=s(Nw);YUo=r(oPe,"This class cannot be instantiated directly using "),kme=n(oPe,"CODE",{});var Ait=s(kme);KUo=r(Ait,"__init__()"),Ait.forEach(t),ZUo=r(oPe," (throws an error)."),oPe.forEach(t),eJo=i(Dl),gt=n(Dl,"DIV",{class:!0});var ql=s(gt);m(Dw.$$.fragment,ql),oJo=i(ql),Rme=n(ql,"P",{});var Lit=s(Rme);rJo=r(Lit,"Instantiates one of the base model classes of the library from a configuration."),Lit.forEach(t),tJo=i(ql),pc=n(ql,"P",{});var $W=s(pc);aJo=r($W,`Note:
Loading a model from its configuration file does `),Sme=n($W,"STRONG",{});var Bit=s(Sme);nJo=r(Bit,"not"),Bit.forEach(t),sJo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pme=n($W,"CODE",{});var xit=s(Pme);lJo=r(xit,"from_pretrained()"),xit.forEach(t),iJo=r($W,"to load the model weights."),$W.forEach(t),dJo=i(ql),$me=n(ql,"P",{});var kit=s($me);cJo=r(kit,"Examples:"),kit.forEach(t),fJo=i(ql),m(qw.$$.fragment,ql),ql.forEach(t),mJo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(Ow.$$.fragment,pa),gJo=i(pa),Ime=n(pa,"P",{});var Rit=s(Ime);hJo=r(Rit,"Instantiate one of the base model classes of the library from a pretrained model."),Rit.forEach(t),pJo=i(pa),_n=n(pa,"P",{});var xE=s(_n);_Jo=r(xE,"The model class to instantiate is selected based on the "),jme=n(xE,"CODE",{});var Sit=s(jme);uJo=r(Sit,"model_type"),Sit.forEach(t),bJo=r(xE,` property of the config object (either
passed as an argument or loaded from `),Nme=n(xE,"CODE",{});var Pit=s(Nme);vJo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),TJo=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(xE,"CODE",{});var $it=s(Dme);FJo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),CJo=r(xE,":"),xE.forEach(t),MJo=i(pa),B=n(pa,"UL",{});var x=s(B);f6=n(x,"LI",{});var uLe=s(f6);qme=n(uLe,"STRONG",{});var Iit=s(qme);EJo=r(Iit,"albert"),Iit.forEach(t),yJo=r(uLe," \u2014 "),pq=n(uLe,"A",{href:!0});var jit=s(pq);wJo=r(jit,"TFAlbertModel"),jit.forEach(t),AJo=r(uLe," (ALBERT model)"),uLe.forEach(t),LJo=i(x),m6=n(x,"LI",{});var bLe=s(m6);Ome=n(bLe,"STRONG",{});var Nit=s(Ome);BJo=r(Nit,"bart"),Nit.forEach(t),xJo=r(bLe," \u2014 "),_q=n(bLe,"A",{href:!0});var Dit=s(_q);kJo=r(Dit,"TFBartModel"),Dit.forEach(t),RJo=r(bLe," (BART model)"),bLe.forEach(t),SJo=i(x),g6=n(x,"LI",{});var vLe=s(g6);Gme=n(vLe,"STRONG",{});var qit=s(Gme);PJo=r(qit,"bert"),qit.forEach(t),$Jo=r(vLe," \u2014 "),uq=n(vLe,"A",{href:!0});var Oit=s(uq);IJo=r(Oit,"TFBertModel"),Oit.forEach(t),jJo=r(vLe," (BERT model)"),vLe.forEach(t),NJo=i(x),h6=n(x,"LI",{});var TLe=s(h6);Xme=n(TLe,"STRONG",{});var Git=s(Xme);DJo=r(Git,"blenderbot"),Git.forEach(t),qJo=r(TLe," \u2014 "),bq=n(TLe,"A",{href:!0});var Xit=s(bq);OJo=r(Xit,"TFBlenderbotModel"),Xit.forEach(t),GJo=r(TLe," (Blenderbot model)"),TLe.forEach(t),XJo=i(x),p6=n(x,"LI",{});var FLe=s(p6);Vme=n(FLe,"STRONG",{});var Vit=s(Vme);VJo=r(Vit,"blenderbot-small"),Vit.forEach(t),zJo=r(FLe," \u2014 "),vq=n(FLe,"A",{href:!0});var zit=s(vq);WJo=r(zit,"TFBlenderbotSmallModel"),zit.forEach(t),QJo=r(FLe," (BlenderbotSmall model)"),FLe.forEach(t),HJo=i(x),_6=n(x,"LI",{});var CLe=s(_6);zme=n(CLe,"STRONG",{});var Wit=s(zme);UJo=r(Wit,"camembert"),Wit.forEach(t),JJo=r(CLe," \u2014 "),Tq=n(CLe,"A",{href:!0});var Qit=s(Tq);YJo=r(Qit,"TFCamembertModel"),Qit.forEach(t),KJo=r(CLe," (CamemBERT model)"),CLe.forEach(t),ZJo=i(x),u6=n(x,"LI",{});var MLe=s(u6);Wme=n(MLe,"STRONG",{});var Hit=s(Wme);eYo=r(Hit,"clip"),Hit.forEach(t),oYo=r(MLe," \u2014 "),Fq=n(MLe,"A",{href:!0});var Uit=s(Fq);rYo=r(Uit,"TFCLIPModel"),Uit.forEach(t),tYo=r(MLe," (CLIP model)"),MLe.forEach(t),aYo=i(x),b6=n(x,"LI",{});var ELe=s(b6);Qme=n(ELe,"STRONG",{});var Jit=s(Qme);nYo=r(Jit,"convbert"),Jit.forEach(t),sYo=r(ELe," \u2014 "),Cq=n(ELe,"A",{href:!0});var Yit=s(Cq);lYo=r(Yit,"TFConvBertModel"),Yit.forEach(t),iYo=r(ELe," (ConvBERT model)"),ELe.forEach(t),dYo=i(x),v6=n(x,"LI",{});var yLe=s(v6);Hme=n(yLe,"STRONG",{});var Kit=s(Hme);cYo=r(Kit,"convnext"),Kit.forEach(t),fYo=r(yLe," \u2014 "),Mq=n(yLe,"A",{href:!0});var Zit=s(Mq);mYo=r(Zit,"TFConvNextModel"),Zit.forEach(t),gYo=r(yLe," (ConvNext model)"),yLe.forEach(t),hYo=i(x),T6=n(x,"LI",{});var wLe=s(T6);Ume=n(wLe,"STRONG",{});var edt=s(Ume);pYo=r(edt,"ctrl"),edt.forEach(t),_Yo=r(wLe," \u2014 "),Eq=n(wLe,"A",{href:!0});var odt=s(Eq);uYo=r(odt,"TFCTRLModel"),odt.forEach(t),bYo=r(wLe," (CTRL model)"),wLe.forEach(t),vYo=i(x),F6=n(x,"LI",{});var ALe=s(F6);Jme=n(ALe,"STRONG",{});var rdt=s(Jme);TYo=r(rdt,"deberta"),rdt.forEach(t),FYo=r(ALe," \u2014 "),yq=n(ALe,"A",{href:!0});var tdt=s(yq);CYo=r(tdt,"TFDebertaModel"),tdt.forEach(t),MYo=r(ALe," (DeBERTa model)"),ALe.forEach(t),EYo=i(x),C6=n(x,"LI",{});var LLe=s(C6);Yme=n(LLe,"STRONG",{});var adt=s(Yme);yYo=r(adt,"deberta-v2"),adt.forEach(t),wYo=r(LLe," \u2014 "),wq=n(LLe,"A",{href:!0});var ndt=s(wq);AYo=r(ndt,"TFDebertaV2Model"),ndt.forEach(t),LYo=r(LLe," (DeBERTa-v2 model)"),LLe.forEach(t),BYo=i(x),M6=n(x,"LI",{});var BLe=s(M6);Kme=n(BLe,"STRONG",{});var sdt=s(Kme);xYo=r(sdt,"distilbert"),sdt.forEach(t),kYo=r(BLe," \u2014 "),Aq=n(BLe,"A",{href:!0});var ldt=s(Aq);RYo=r(ldt,"TFDistilBertModel"),ldt.forEach(t),SYo=r(BLe," (DistilBERT model)"),BLe.forEach(t),PYo=i(x),E6=n(x,"LI",{});var xLe=s(E6);Zme=n(xLe,"STRONG",{});var idt=s(Zme);$Yo=r(idt,"dpr"),idt.forEach(t),IYo=r(xLe," \u2014 "),Lq=n(xLe,"A",{href:!0});var ddt=s(Lq);jYo=r(ddt,"TFDPRQuestionEncoder"),ddt.forEach(t),NYo=r(xLe," (DPR model)"),xLe.forEach(t),DYo=i(x),y6=n(x,"LI",{});var kLe=s(y6);ege=n(kLe,"STRONG",{});var cdt=s(ege);qYo=r(cdt,"electra"),cdt.forEach(t),OYo=r(kLe," \u2014 "),Bq=n(kLe,"A",{href:!0});var fdt=s(Bq);GYo=r(fdt,"TFElectraModel"),fdt.forEach(t),XYo=r(kLe," (ELECTRA model)"),kLe.forEach(t),VYo=i(x),w6=n(x,"LI",{});var RLe=s(w6);oge=n(RLe,"STRONG",{});var mdt=s(oge);zYo=r(mdt,"flaubert"),mdt.forEach(t),WYo=r(RLe," \u2014 "),xq=n(RLe,"A",{href:!0});var gdt=s(xq);QYo=r(gdt,"TFFlaubertModel"),gdt.forEach(t),HYo=r(RLe," (FlauBERT model)"),RLe.forEach(t),UYo=i(x),Os=n(x,"LI",{});var Q8=s(Os);rge=n(Q8,"STRONG",{});var hdt=s(rge);JYo=r(hdt,"funnel"),hdt.forEach(t),YYo=r(Q8," \u2014 "),kq=n(Q8,"A",{href:!0});var pdt=s(kq);KYo=r(pdt,"TFFunnelModel"),pdt.forEach(t),ZYo=r(Q8," or "),Rq=n(Q8,"A",{href:!0});var _dt=s(Rq);eKo=r(_dt,"TFFunnelBaseModel"),_dt.forEach(t),oKo=r(Q8," (Funnel Transformer model)"),Q8.forEach(t),rKo=i(x),A6=n(x,"LI",{});var SLe=s(A6);tge=n(SLe,"STRONG",{});var udt=s(tge);tKo=r(udt,"gpt2"),udt.forEach(t),aKo=r(SLe," \u2014 "),Sq=n(SLe,"A",{href:!0});var bdt=s(Sq);nKo=r(bdt,"TFGPT2Model"),bdt.forEach(t),sKo=r(SLe," (OpenAI GPT-2 model)"),SLe.forEach(t),lKo=i(x),L6=n(x,"LI",{});var PLe=s(L6);age=n(PLe,"STRONG",{});var vdt=s(age);iKo=r(vdt,"hubert"),vdt.forEach(t),dKo=r(PLe," \u2014 "),Pq=n(PLe,"A",{href:!0});var Tdt=s(Pq);cKo=r(Tdt,"TFHubertModel"),Tdt.forEach(t),fKo=r(PLe," (Hubert model)"),PLe.forEach(t),mKo=i(x),B6=n(x,"LI",{});var $Le=s(B6);nge=n($Le,"STRONG",{});var Fdt=s(nge);gKo=r(Fdt,"layoutlm"),Fdt.forEach(t),hKo=r($Le," \u2014 "),$q=n($Le,"A",{href:!0});var Cdt=s($q);pKo=r(Cdt,"TFLayoutLMModel"),Cdt.forEach(t),_Ko=r($Le," (LayoutLM model)"),$Le.forEach(t),uKo=i(x),x6=n(x,"LI",{});var ILe=s(x6);sge=n(ILe,"STRONG",{});var Mdt=s(sge);bKo=r(Mdt,"led"),Mdt.forEach(t),vKo=r(ILe," \u2014 "),Iq=n(ILe,"A",{href:!0});var Edt=s(Iq);TKo=r(Edt,"TFLEDModel"),Edt.forEach(t),FKo=r(ILe," (LED model)"),ILe.forEach(t),CKo=i(x),k6=n(x,"LI",{});var jLe=s(k6);lge=n(jLe,"STRONG",{});var ydt=s(lge);MKo=r(ydt,"longformer"),ydt.forEach(t),EKo=r(jLe," \u2014 "),jq=n(jLe,"A",{href:!0});var wdt=s(jq);yKo=r(wdt,"TFLongformerModel"),wdt.forEach(t),wKo=r(jLe," (Longformer model)"),jLe.forEach(t),AKo=i(x),R6=n(x,"LI",{});var NLe=s(R6);ige=n(NLe,"STRONG",{});var Adt=s(ige);LKo=r(Adt,"lxmert"),Adt.forEach(t),BKo=r(NLe," \u2014 "),Nq=n(NLe,"A",{href:!0});var Ldt=s(Nq);xKo=r(Ldt,"TFLxmertModel"),Ldt.forEach(t),kKo=r(NLe," (LXMERT model)"),NLe.forEach(t),RKo=i(x),S6=n(x,"LI",{});var DLe=s(S6);dge=n(DLe,"STRONG",{});var Bdt=s(dge);SKo=r(Bdt,"marian"),Bdt.forEach(t),PKo=r(DLe," \u2014 "),Dq=n(DLe,"A",{href:!0});var xdt=s(Dq);$Ko=r(xdt,"TFMarianModel"),xdt.forEach(t),IKo=r(DLe," (Marian model)"),DLe.forEach(t),jKo=i(x),P6=n(x,"LI",{});var qLe=s(P6);cge=n(qLe,"STRONG",{});var kdt=s(cge);NKo=r(kdt,"mbart"),kdt.forEach(t),DKo=r(qLe," \u2014 "),qq=n(qLe,"A",{href:!0});var Rdt=s(qq);qKo=r(Rdt,"TFMBartModel"),Rdt.forEach(t),OKo=r(qLe," (mBART model)"),qLe.forEach(t),GKo=i(x),$6=n(x,"LI",{});var OLe=s($6);fge=n(OLe,"STRONG",{});var Sdt=s(fge);XKo=r(Sdt,"mobilebert"),Sdt.forEach(t),VKo=r(OLe," \u2014 "),Oq=n(OLe,"A",{href:!0});var Pdt=s(Oq);zKo=r(Pdt,"TFMobileBertModel"),Pdt.forEach(t),WKo=r(OLe," (MobileBERT model)"),OLe.forEach(t),QKo=i(x),I6=n(x,"LI",{});var GLe=s(I6);mge=n(GLe,"STRONG",{});var $dt=s(mge);HKo=r($dt,"mpnet"),$dt.forEach(t),UKo=r(GLe," \u2014 "),Gq=n(GLe,"A",{href:!0});var Idt=s(Gq);JKo=r(Idt,"TFMPNetModel"),Idt.forEach(t),YKo=r(GLe," (MPNet model)"),GLe.forEach(t),KKo=i(x),j6=n(x,"LI",{});var XLe=s(j6);gge=n(XLe,"STRONG",{});var jdt=s(gge);ZKo=r(jdt,"mt5"),jdt.forEach(t),eZo=r(XLe," \u2014 "),Xq=n(XLe,"A",{href:!0});var Ndt=s(Xq);oZo=r(Ndt,"TFMT5Model"),Ndt.forEach(t),rZo=r(XLe," (mT5 model)"),XLe.forEach(t),tZo=i(x),N6=n(x,"LI",{});var VLe=s(N6);hge=n(VLe,"STRONG",{});var Ddt=s(hge);aZo=r(Ddt,"openai-gpt"),Ddt.forEach(t),nZo=r(VLe," \u2014 "),Vq=n(VLe,"A",{href:!0});var qdt=s(Vq);sZo=r(qdt,"TFOpenAIGPTModel"),qdt.forEach(t),lZo=r(VLe," (OpenAI GPT model)"),VLe.forEach(t),iZo=i(x),D6=n(x,"LI",{});var zLe=s(D6);pge=n(zLe,"STRONG",{});var Odt=s(pge);dZo=r(Odt,"pegasus"),Odt.forEach(t),cZo=r(zLe," \u2014 "),zq=n(zLe,"A",{href:!0});var Gdt=s(zq);fZo=r(Gdt,"TFPegasusModel"),Gdt.forEach(t),mZo=r(zLe," (Pegasus model)"),zLe.forEach(t),gZo=i(x),q6=n(x,"LI",{});var WLe=s(q6);_ge=n(WLe,"STRONG",{});var Xdt=s(_ge);hZo=r(Xdt,"rembert"),Xdt.forEach(t),pZo=r(WLe," \u2014 "),Wq=n(WLe,"A",{href:!0});var Vdt=s(Wq);_Zo=r(Vdt,"TFRemBertModel"),Vdt.forEach(t),uZo=r(WLe," (RemBERT model)"),WLe.forEach(t),bZo=i(x),O6=n(x,"LI",{});var QLe=s(O6);uge=n(QLe,"STRONG",{});var zdt=s(uge);vZo=r(zdt,"roberta"),zdt.forEach(t),TZo=r(QLe," \u2014 "),Qq=n(QLe,"A",{href:!0});var Wdt=s(Qq);FZo=r(Wdt,"TFRobertaModel"),Wdt.forEach(t),CZo=r(QLe," (RoBERTa model)"),QLe.forEach(t),MZo=i(x),G6=n(x,"LI",{});var HLe=s(G6);bge=n(HLe,"STRONG",{});var Qdt=s(bge);EZo=r(Qdt,"roformer"),Qdt.forEach(t),yZo=r(HLe," \u2014 "),Hq=n(HLe,"A",{href:!0});var Hdt=s(Hq);wZo=r(Hdt,"TFRoFormerModel"),Hdt.forEach(t),AZo=r(HLe," (RoFormer model)"),HLe.forEach(t),LZo=i(x),X6=n(x,"LI",{});var ULe=s(X6);vge=n(ULe,"STRONG",{});var Udt=s(vge);BZo=r(Udt,"speech_to_text"),Udt.forEach(t),xZo=r(ULe," \u2014 "),Uq=n(ULe,"A",{href:!0});var Jdt=s(Uq);kZo=r(Jdt,"TFSpeech2TextModel"),Jdt.forEach(t),RZo=r(ULe," (Speech2Text model)"),ULe.forEach(t),SZo=i(x),V6=n(x,"LI",{});var JLe=s(V6);Tge=n(JLe,"STRONG",{});var Ydt=s(Tge);PZo=r(Ydt,"t5"),Ydt.forEach(t),$Zo=r(JLe," \u2014 "),Jq=n(JLe,"A",{href:!0});var Kdt=s(Jq);IZo=r(Kdt,"TFT5Model"),Kdt.forEach(t),jZo=r(JLe," (T5 model)"),JLe.forEach(t),NZo=i(x),z6=n(x,"LI",{});var YLe=s(z6);Fge=n(YLe,"STRONG",{});var Zdt=s(Fge);DZo=r(Zdt,"tapas"),Zdt.forEach(t),qZo=r(YLe," \u2014 "),Yq=n(YLe,"A",{href:!0});var ect=s(Yq);OZo=r(ect,"TFTapasModel"),ect.forEach(t),GZo=r(YLe," (TAPAS model)"),YLe.forEach(t),XZo=i(x),W6=n(x,"LI",{});var KLe=s(W6);Cge=n(KLe,"STRONG",{});var oct=s(Cge);VZo=r(oct,"transfo-xl"),oct.forEach(t),zZo=r(KLe," \u2014 "),Kq=n(KLe,"A",{href:!0});var rct=s(Kq);WZo=r(rct,"TFTransfoXLModel"),rct.forEach(t),QZo=r(KLe," (Transformer-XL model)"),KLe.forEach(t),HZo=i(x),Q6=n(x,"LI",{});var ZLe=s(Q6);Mge=n(ZLe,"STRONG",{});var tct=s(Mge);UZo=r(tct,"vit"),tct.forEach(t),JZo=r(ZLe," \u2014 "),Zq=n(ZLe,"A",{href:!0});var act=s(Zq);YZo=r(act,"TFViTModel"),act.forEach(t),KZo=r(ZLe," (ViT model)"),ZLe.forEach(t),ZZo=i(x),H6=n(x,"LI",{});var e7e=s(H6);Ege=n(e7e,"STRONG",{});var nct=s(Ege);eer=r(nct,"wav2vec2"),nct.forEach(t),oer=r(e7e," \u2014 "),eO=n(e7e,"A",{href:!0});var sct=s(eO);rer=r(sct,"TFWav2Vec2Model"),sct.forEach(t),ter=r(e7e," (Wav2Vec2 model)"),e7e.forEach(t),aer=i(x),U6=n(x,"LI",{});var o7e=s(U6);yge=n(o7e,"STRONG",{});var lct=s(yge);ner=r(lct,"xlm"),lct.forEach(t),ser=r(o7e," \u2014 "),oO=n(o7e,"A",{href:!0});var ict=s(oO);ler=r(ict,"TFXLMModel"),ict.forEach(t),ier=r(o7e," (XLM model)"),o7e.forEach(t),der=i(x),J6=n(x,"LI",{});var r7e=s(J6);wge=n(r7e,"STRONG",{});var dct=s(wge);cer=r(dct,"xlm-roberta"),dct.forEach(t),fer=r(r7e," \u2014 "),rO=n(r7e,"A",{href:!0});var cct=s(rO);mer=r(cct,"TFXLMRobertaModel"),cct.forEach(t),ger=r(r7e," (XLM-RoBERTa model)"),r7e.forEach(t),her=i(x),Y6=n(x,"LI",{});var t7e=s(Y6);Age=n(t7e,"STRONG",{});var fct=s(Age);per=r(fct,"xlnet"),fct.forEach(t),_er=r(t7e," \u2014 "),tO=n(t7e,"A",{href:!0});var mct=s(tO);uer=r(mct,"TFXLNetModel"),mct.forEach(t),ber=r(t7e," (XLNet model)"),t7e.forEach(t),x.forEach(t),ver=i(pa),Lge=n(pa,"P",{});var gct=s(Lge);Ter=r(gct,"Examples:"),gct.forEach(t),Fer=i(pa),m(Gw.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),zke=i(c),_c=n(c,"H2",{class:!0});var rPe=s(_c);K6=n(rPe,"A",{id:!0,class:!0,href:!0});var hct=s(K6);Bge=n(hct,"SPAN",{});var pct=s(Bge);m(Xw.$$.fragment,pct),pct.forEach(t),hct.forEach(t),Cer=i(rPe),xge=n(rPe,"SPAN",{});var _ct=s(xge);Mer=r(_ct,"TFAutoModelForPreTraining"),_ct.forEach(t),rPe.forEach(t),Wke=i(c),Tr=n(c,"DIV",{class:!0});var Ol=s(Tr);m(Vw.$$.fragment,Ol),Eer=i(Ol),uc=n(Ol,"P",{});var IW=s(uc);yer=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kge=n(IW,"CODE",{});var uct=s(kge);wer=r(uct,"from_pretrained()"),uct.forEach(t),Aer=r(IW,"class method or the "),Rge=n(IW,"CODE",{});var bct=s(Rge);Ler=r(bct,"from_config()"),bct.forEach(t),Ber=r(IW,`class
method.`),IW.forEach(t),xer=i(Ol),zw=n(Ol,"P",{});var tPe=s(zw);ker=r(tPe,"This class cannot be instantiated directly using "),Sge=n(tPe,"CODE",{});var vct=s(Sge);Rer=r(vct,"__init__()"),vct.forEach(t),Ser=r(tPe," (throws an error)."),tPe.forEach(t),Per=i(Ol),ht=n(Ol,"DIV",{class:!0});var Gl=s(ht);m(Ww.$$.fragment,Gl),$er=i(Gl),Pge=n(Gl,"P",{});var Tct=s(Pge);Ier=r(Tct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tct.forEach(t),jer=i(Gl),bc=n(Gl,"P",{});var jW=s(bc);Ner=r(jW,`Note:
Loading a model from its configuration file does `),$ge=n(jW,"STRONG",{});var Fct=s($ge);Der=r(Fct,"not"),Fct.forEach(t),qer=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ige=n(jW,"CODE",{});var Cct=s(Ige);Oer=r(Cct,"from_pretrained()"),Cct.forEach(t),Ger=r(jW,"to load the model weights."),jW.forEach(t),Xer=i(Gl),jge=n(Gl,"P",{});var Mct=s(jge);Ver=r(Mct,"Examples:"),Mct.forEach(t),zer=i(Gl),m(Qw.$$.fragment,Gl),Gl.forEach(t),Wer=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(Hw.$$.fragment,_a),Qer=i(_a),Nge=n(_a,"P",{});var Ect=s(Nge);Her=r(Ect,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ect.forEach(t),Uer=i(_a),un=n(_a,"P",{});var kE=s(un);Jer=r(kE,"The model class to instantiate is selected based on the "),Dge=n(kE,"CODE",{});var yct=s(Dge);Yer=r(yct,"model_type"),yct.forEach(t),Ker=r(kE,` property of the config object (either
passed as an argument or loaded from `),qge=n(kE,"CODE",{});var wct=s(qge);Zer=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),eor=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(kE,"CODE",{});var Act=s(Oge);oor=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),ror=r(kE,":"),kE.forEach(t),tor=i(_a),H=n(_a,"UL",{});var U=s(H);Z6=n(U,"LI",{});var a7e=s(Z6);Gge=n(a7e,"STRONG",{});var Lct=s(Gge);aor=r(Lct,"albert"),Lct.forEach(t),nor=r(a7e," \u2014 "),aO=n(a7e,"A",{href:!0});var Bct=s(aO);sor=r(Bct,"TFAlbertForPreTraining"),Bct.forEach(t),lor=r(a7e," (ALBERT model)"),a7e.forEach(t),ior=i(U),e0=n(U,"LI",{});var n7e=s(e0);Xge=n(n7e,"STRONG",{});var xct=s(Xge);dor=r(xct,"bart"),xct.forEach(t),cor=r(n7e," \u2014 "),nO=n(n7e,"A",{href:!0});var kct=s(nO);mor=r(kct,"TFBartForConditionalGeneration"),kct.forEach(t),gor=r(n7e," (BART model)"),n7e.forEach(t),hor=i(U),o0=n(U,"LI",{});var s7e=s(o0);Vge=n(s7e,"STRONG",{});var Rct=s(Vge);por=r(Rct,"bert"),Rct.forEach(t),_or=r(s7e," \u2014 "),sO=n(s7e,"A",{href:!0});var Sct=s(sO);uor=r(Sct,"TFBertForPreTraining"),Sct.forEach(t),bor=r(s7e," (BERT model)"),s7e.forEach(t),vor=i(U),r0=n(U,"LI",{});var l7e=s(r0);zge=n(l7e,"STRONG",{});var Pct=s(zge);Tor=r(Pct,"camembert"),Pct.forEach(t),For=r(l7e," \u2014 "),lO=n(l7e,"A",{href:!0});var $ct=s(lO);Cor=r($ct,"TFCamembertForMaskedLM"),$ct.forEach(t),Mor=r(l7e," (CamemBERT model)"),l7e.forEach(t),Eor=i(U),t0=n(U,"LI",{});var i7e=s(t0);Wge=n(i7e,"STRONG",{});var Ict=s(Wge);yor=r(Ict,"ctrl"),Ict.forEach(t),wor=r(i7e," \u2014 "),iO=n(i7e,"A",{href:!0});var jct=s(iO);Aor=r(jct,"TFCTRLLMHeadModel"),jct.forEach(t),Lor=r(i7e," (CTRL model)"),i7e.forEach(t),Bor=i(U),a0=n(U,"LI",{});var d7e=s(a0);Qge=n(d7e,"STRONG",{});var Nct=s(Qge);xor=r(Nct,"distilbert"),Nct.forEach(t),kor=r(d7e," \u2014 "),dO=n(d7e,"A",{href:!0});var Dct=s(dO);Ror=r(Dct,"TFDistilBertForMaskedLM"),Dct.forEach(t),Sor=r(d7e," (DistilBERT model)"),d7e.forEach(t),Por=i(U),n0=n(U,"LI",{});var c7e=s(n0);Hge=n(c7e,"STRONG",{});var qct=s(Hge);$or=r(qct,"electra"),qct.forEach(t),Ior=r(c7e," \u2014 "),cO=n(c7e,"A",{href:!0});var Oct=s(cO);jor=r(Oct,"TFElectraForPreTraining"),Oct.forEach(t),Nor=r(c7e," (ELECTRA model)"),c7e.forEach(t),Dor=i(U),s0=n(U,"LI",{});var f7e=s(s0);Uge=n(f7e,"STRONG",{});var Gct=s(Uge);qor=r(Gct,"flaubert"),Gct.forEach(t),Oor=r(f7e," \u2014 "),fO=n(f7e,"A",{href:!0});var Xct=s(fO);Gor=r(Xct,"TFFlaubertWithLMHeadModel"),Xct.forEach(t),Xor=r(f7e," (FlauBERT model)"),f7e.forEach(t),Vor=i(U),l0=n(U,"LI",{});var m7e=s(l0);Jge=n(m7e,"STRONG",{});var Vct=s(Jge);zor=r(Vct,"funnel"),Vct.forEach(t),Wor=r(m7e," \u2014 "),mO=n(m7e,"A",{href:!0});var zct=s(mO);Qor=r(zct,"TFFunnelForPreTraining"),zct.forEach(t),Hor=r(m7e," (Funnel Transformer model)"),m7e.forEach(t),Uor=i(U),i0=n(U,"LI",{});var g7e=s(i0);Yge=n(g7e,"STRONG",{});var Wct=s(Yge);Jor=r(Wct,"gpt2"),Wct.forEach(t),Yor=r(g7e," \u2014 "),gO=n(g7e,"A",{href:!0});var Qct=s(gO);Kor=r(Qct,"TFGPT2LMHeadModel"),Qct.forEach(t),Zor=r(g7e," (OpenAI GPT-2 model)"),g7e.forEach(t),err=i(U),d0=n(U,"LI",{});var h7e=s(d0);Kge=n(h7e,"STRONG",{});var Hct=s(Kge);orr=r(Hct,"layoutlm"),Hct.forEach(t),rrr=r(h7e," \u2014 "),hO=n(h7e,"A",{href:!0});var Uct=s(hO);trr=r(Uct,"TFLayoutLMForMaskedLM"),Uct.forEach(t),arr=r(h7e," (LayoutLM model)"),h7e.forEach(t),nrr=i(U),c0=n(U,"LI",{});var p7e=s(c0);Zge=n(p7e,"STRONG",{});var Jct=s(Zge);srr=r(Jct,"lxmert"),Jct.forEach(t),lrr=r(p7e," \u2014 "),pO=n(p7e,"A",{href:!0});var Yct=s(pO);irr=r(Yct,"TFLxmertForPreTraining"),Yct.forEach(t),drr=r(p7e," (LXMERT model)"),p7e.forEach(t),crr=i(U),f0=n(U,"LI",{});var _7e=s(f0);ehe=n(_7e,"STRONG",{});var Kct=s(ehe);frr=r(Kct,"mobilebert"),Kct.forEach(t),mrr=r(_7e," \u2014 "),_O=n(_7e,"A",{href:!0});var Zct=s(_O);grr=r(Zct,"TFMobileBertForPreTraining"),Zct.forEach(t),hrr=r(_7e," (MobileBERT model)"),_7e.forEach(t),prr=i(U),m0=n(U,"LI",{});var u7e=s(m0);ohe=n(u7e,"STRONG",{});var eft=s(ohe);_rr=r(eft,"mpnet"),eft.forEach(t),urr=r(u7e," \u2014 "),uO=n(u7e,"A",{href:!0});var oft=s(uO);brr=r(oft,"TFMPNetForMaskedLM"),oft.forEach(t),vrr=r(u7e," (MPNet model)"),u7e.forEach(t),Trr=i(U),g0=n(U,"LI",{});var b7e=s(g0);rhe=n(b7e,"STRONG",{});var rft=s(rhe);Frr=r(rft,"openai-gpt"),rft.forEach(t),Crr=r(b7e," \u2014 "),bO=n(b7e,"A",{href:!0});var tft=s(bO);Mrr=r(tft,"TFOpenAIGPTLMHeadModel"),tft.forEach(t),Err=r(b7e," (OpenAI GPT model)"),b7e.forEach(t),yrr=i(U),h0=n(U,"LI",{});var v7e=s(h0);the=n(v7e,"STRONG",{});var aft=s(the);wrr=r(aft,"roberta"),aft.forEach(t),Arr=r(v7e," \u2014 "),vO=n(v7e,"A",{href:!0});var nft=s(vO);Lrr=r(nft,"TFRobertaForMaskedLM"),nft.forEach(t),Brr=r(v7e," (RoBERTa model)"),v7e.forEach(t),xrr=i(U),p0=n(U,"LI",{});var T7e=s(p0);ahe=n(T7e,"STRONG",{});var sft=s(ahe);krr=r(sft,"t5"),sft.forEach(t),Rrr=r(T7e," \u2014 "),TO=n(T7e,"A",{href:!0});var lft=s(TO);Srr=r(lft,"TFT5ForConditionalGeneration"),lft.forEach(t),Prr=r(T7e," (T5 model)"),T7e.forEach(t),$rr=i(U),_0=n(U,"LI",{});var F7e=s(_0);nhe=n(F7e,"STRONG",{});var ift=s(nhe);Irr=r(ift,"tapas"),ift.forEach(t),jrr=r(F7e," \u2014 "),FO=n(F7e,"A",{href:!0});var dft=s(FO);Nrr=r(dft,"TFTapasForMaskedLM"),dft.forEach(t),Drr=r(F7e," (TAPAS model)"),F7e.forEach(t),qrr=i(U),u0=n(U,"LI",{});var C7e=s(u0);she=n(C7e,"STRONG",{});var cft=s(she);Orr=r(cft,"transfo-xl"),cft.forEach(t),Grr=r(C7e," \u2014 "),CO=n(C7e,"A",{href:!0});var fft=s(CO);Xrr=r(fft,"TFTransfoXLLMHeadModel"),fft.forEach(t),Vrr=r(C7e," (Transformer-XL model)"),C7e.forEach(t),zrr=i(U),b0=n(U,"LI",{});var M7e=s(b0);lhe=n(M7e,"STRONG",{});var mft=s(lhe);Wrr=r(mft,"xlm"),mft.forEach(t),Qrr=r(M7e," \u2014 "),MO=n(M7e,"A",{href:!0});var gft=s(MO);Hrr=r(gft,"TFXLMWithLMHeadModel"),gft.forEach(t),Urr=r(M7e," (XLM model)"),M7e.forEach(t),Jrr=i(U),v0=n(U,"LI",{});var E7e=s(v0);ihe=n(E7e,"STRONG",{});var hft=s(ihe);Yrr=r(hft,"xlm-roberta"),hft.forEach(t),Krr=r(E7e," \u2014 "),EO=n(E7e,"A",{href:!0});var pft=s(EO);Zrr=r(pft,"TFXLMRobertaForMaskedLM"),pft.forEach(t),etr=r(E7e," (XLM-RoBERTa model)"),E7e.forEach(t),otr=i(U),T0=n(U,"LI",{});var y7e=s(T0);dhe=n(y7e,"STRONG",{});var _ft=s(dhe);rtr=r(_ft,"xlnet"),_ft.forEach(t),ttr=r(y7e," \u2014 "),yO=n(y7e,"A",{href:!0});var uft=s(yO);atr=r(uft,"TFXLNetLMHeadModel"),uft.forEach(t),ntr=r(y7e," (XLNet model)"),y7e.forEach(t),U.forEach(t),str=i(_a),che=n(_a,"P",{});var bft=s(che);ltr=r(bft,"Examples:"),bft.forEach(t),itr=i(_a),m(Uw.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),Qke=i(c),vc=n(c,"H2",{class:!0});var aPe=s(vc);F0=n(aPe,"A",{id:!0,class:!0,href:!0});var vft=s(F0);fhe=n(vft,"SPAN",{});var Tft=s(fhe);m(Jw.$$.fragment,Tft),Tft.forEach(t),vft.forEach(t),dtr=i(aPe),mhe=n(aPe,"SPAN",{});var Fft=s(mhe);ctr=r(Fft,"TFAutoModelForCausalLM"),Fft.forEach(t),aPe.forEach(t),Hke=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(Yw.$$.fragment,Xl),ftr=i(Xl),Tc=n(Xl,"P",{});var NW=s(Tc);mtr=r(NW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ghe=n(NW,"CODE",{});var Cft=s(ghe);gtr=r(Cft,"from_pretrained()"),Cft.forEach(t),htr=r(NW,"class method or the "),hhe=n(NW,"CODE",{});var Mft=s(hhe);ptr=r(Mft,"from_config()"),Mft.forEach(t),_tr=r(NW,`class
method.`),NW.forEach(t),utr=i(Xl),Kw=n(Xl,"P",{});var nPe=s(Kw);btr=r(nPe,"This class cannot be instantiated directly using "),phe=n(nPe,"CODE",{});var Eft=s(phe);vtr=r(Eft,"__init__()"),Eft.forEach(t),Ttr=r(nPe," (throws an error)."),nPe.forEach(t),Ftr=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(Zw.$$.fragment,Vl),Ctr=i(Vl),_he=n(Vl,"P",{});var yft=s(_he);Mtr=r(yft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yft.forEach(t),Etr=i(Vl),Fc=n(Vl,"P",{});var DW=s(Fc);ytr=r(DW,`Note:
Loading a model from its configuration file does `),uhe=n(DW,"STRONG",{});var wft=s(uhe);wtr=r(wft,"not"),wft.forEach(t),Atr=r(DW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bhe=n(DW,"CODE",{});var Aft=s(bhe);Ltr=r(Aft,"from_pretrained()"),Aft.forEach(t),Btr=r(DW,"to load the model weights."),DW.forEach(t),xtr=i(Vl),vhe=n(Vl,"P",{});var Lft=s(vhe);ktr=r(Lft,"Examples:"),Lft.forEach(t),Rtr=i(Vl),m(eA.$$.fragment,Vl),Vl.forEach(t),Str=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(oA.$$.fragment,ua),Ptr=i(ua),The=n(ua,"P",{});var Bft=s(The);$tr=r(Bft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bft.forEach(t),Itr=i(ua),bn=n(ua,"P",{});var RE=s(bn);jtr=r(RE,"The model class to instantiate is selected based on the "),Fhe=n(RE,"CODE",{});var xft=s(Fhe);Ntr=r(xft,"model_type"),xft.forEach(t),Dtr=r(RE,` property of the config object (either
passed as an argument or loaded from `),Che=n(RE,"CODE",{});var kft=s(Che);qtr=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Otr=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(RE,"CODE",{});var Rft=s(Mhe);Gtr=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),Xtr=r(RE,":"),RE.forEach(t),Vtr=i(ua),ge=n(ua,"UL",{});var Ce=s(ge);C0=n(Ce,"LI",{});var w7e=s(C0);Ehe=n(w7e,"STRONG",{});var Sft=s(Ehe);ztr=r(Sft,"bert"),Sft.forEach(t),Wtr=r(w7e," \u2014 "),wO=n(w7e,"A",{href:!0});var Pft=s(wO);Qtr=r(Pft,"TFBertLMHeadModel"),Pft.forEach(t),Htr=r(w7e," (BERT model)"),w7e.forEach(t),Utr=i(Ce),M0=n(Ce,"LI",{});var A7e=s(M0);yhe=n(A7e,"STRONG",{});var $ft=s(yhe);Jtr=r($ft,"camembert"),$ft.forEach(t),Ytr=r(A7e," \u2014 "),AO=n(A7e,"A",{href:!0});var Ift=s(AO);Ktr=r(Ift,"TFCamembertForCausalLM"),Ift.forEach(t),Ztr=r(A7e," (CamemBERT model)"),A7e.forEach(t),ear=i(Ce),E0=n(Ce,"LI",{});var L7e=s(E0);whe=n(L7e,"STRONG",{});var jft=s(whe);oar=r(jft,"ctrl"),jft.forEach(t),rar=r(L7e," \u2014 "),LO=n(L7e,"A",{href:!0});var Nft=s(LO);tar=r(Nft,"TFCTRLLMHeadModel"),Nft.forEach(t),aar=r(L7e," (CTRL model)"),L7e.forEach(t),nar=i(Ce),y0=n(Ce,"LI",{});var B7e=s(y0);Ahe=n(B7e,"STRONG",{});var Dft=s(Ahe);sar=r(Dft,"gpt2"),Dft.forEach(t),lar=r(B7e," \u2014 "),BO=n(B7e,"A",{href:!0});var qft=s(BO);iar=r(qft,"TFGPT2LMHeadModel"),qft.forEach(t),dar=r(B7e," (OpenAI GPT-2 model)"),B7e.forEach(t),car=i(Ce),w0=n(Ce,"LI",{});var x7e=s(w0);Lhe=n(x7e,"STRONG",{});var Oft=s(Lhe);far=r(Oft,"openai-gpt"),Oft.forEach(t),mar=r(x7e," \u2014 "),xO=n(x7e,"A",{href:!0});var Gft=s(xO);gar=r(Gft,"TFOpenAIGPTLMHeadModel"),Gft.forEach(t),har=r(x7e," (OpenAI GPT model)"),x7e.forEach(t),par=i(Ce),A0=n(Ce,"LI",{});var k7e=s(A0);Bhe=n(k7e,"STRONG",{});var Xft=s(Bhe);_ar=r(Xft,"rembert"),Xft.forEach(t),uar=r(k7e," \u2014 "),kO=n(k7e,"A",{href:!0});var Vft=s(kO);bar=r(Vft,"TFRemBertForCausalLM"),Vft.forEach(t),Tar=r(k7e," (RemBERT model)"),k7e.forEach(t),Far=i(Ce),L0=n(Ce,"LI",{});var R7e=s(L0);xhe=n(R7e,"STRONG",{});var zft=s(xhe);Car=r(zft,"roberta"),zft.forEach(t),Mar=r(R7e," \u2014 "),RO=n(R7e,"A",{href:!0});var Wft=s(RO);Ear=r(Wft,"TFRobertaForCausalLM"),Wft.forEach(t),yar=r(R7e," (RoBERTa model)"),R7e.forEach(t),war=i(Ce),B0=n(Ce,"LI",{});var S7e=s(B0);khe=n(S7e,"STRONG",{});var Qft=s(khe);Aar=r(Qft,"roformer"),Qft.forEach(t),Lar=r(S7e," \u2014 "),SO=n(S7e,"A",{href:!0});var Hft=s(SO);Bar=r(Hft,"TFRoFormerForCausalLM"),Hft.forEach(t),xar=r(S7e," (RoFormer model)"),S7e.forEach(t),kar=i(Ce),x0=n(Ce,"LI",{});var P7e=s(x0);Rhe=n(P7e,"STRONG",{});var Uft=s(Rhe);Rar=r(Uft,"transfo-xl"),Uft.forEach(t),Sar=r(P7e," \u2014 "),PO=n(P7e,"A",{href:!0});var Jft=s(PO);Par=r(Jft,"TFTransfoXLLMHeadModel"),Jft.forEach(t),$ar=r(P7e," (Transformer-XL model)"),P7e.forEach(t),Iar=i(Ce),k0=n(Ce,"LI",{});var $7e=s(k0);She=n($7e,"STRONG",{});var Yft=s(She);jar=r(Yft,"xlm"),Yft.forEach(t),Nar=r($7e," \u2014 "),$O=n($7e,"A",{href:!0});var Kft=s($O);Dar=r(Kft,"TFXLMWithLMHeadModel"),Kft.forEach(t),qar=r($7e," (XLM model)"),$7e.forEach(t),Oar=i(Ce),R0=n(Ce,"LI",{});var I7e=s(R0);Phe=n(I7e,"STRONG",{});var Zft=s(Phe);Gar=r(Zft,"xlnet"),Zft.forEach(t),Xar=r(I7e," \u2014 "),IO=n(I7e,"A",{href:!0});var emt=s(IO);Var=r(emt,"TFXLNetLMHeadModel"),emt.forEach(t),zar=r(I7e," (XLNet model)"),I7e.forEach(t),Ce.forEach(t),War=i(ua),$he=n(ua,"P",{});var omt=s($he);Qar=r(omt,"Examples:"),omt.forEach(t),Har=i(ua),m(rA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),Uke=i(c),Cc=n(c,"H2",{class:!0});var sPe=s(Cc);S0=n(sPe,"A",{id:!0,class:!0,href:!0});var rmt=s(S0);Ihe=n(rmt,"SPAN",{});var tmt=s(Ihe);m(tA.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),Uar=i(sPe),jhe=n(sPe,"SPAN",{});var amt=s(jhe);Jar=r(amt,"TFAutoModelForImageClassification"),amt.forEach(t),sPe.forEach(t),Jke=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(aA.$$.fragment,zl),Yar=i(zl),Mc=n(zl,"P",{});var qW=s(Mc);Kar=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nhe=n(qW,"CODE",{});var nmt=s(Nhe);Zar=r(nmt,"from_pretrained()"),nmt.forEach(t),enr=r(qW,"class method or the "),Dhe=n(qW,"CODE",{});var smt=s(Dhe);onr=r(smt,"from_config()"),smt.forEach(t),rnr=r(qW,`class
method.`),qW.forEach(t),tnr=i(zl),nA=n(zl,"P",{});var lPe=s(nA);anr=r(lPe,"This class cannot be instantiated directly using "),qhe=n(lPe,"CODE",{});var lmt=s(qhe);nnr=r(lmt,"__init__()"),lmt.forEach(t),snr=r(lPe," (throws an error)."),lPe.forEach(t),lnr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(sA.$$.fragment,Wl),inr=i(Wl),Ohe=n(Wl,"P",{});var imt=s(Ohe);dnr=r(imt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),imt.forEach(t),cnr=i(Wl),Ec=n(Wl,"P",{});var OW=s(Ec);fnr=r(OW,`Note:
Loading a model from its configuration file does `),Ghe=n(OW,"STRONG",{});var dmt=s(Ghe);mnr=r(dmt,"not"),dmt.forEach(t),gnr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=n(OW,"CODE",{});var cmt=s(Xhe);hnr=r(cmt,"from_pretrained()"),cmt.forEach(t),pnr=r(OW,"to load the model weights."),OW.forEach(t),_nr=i(Wl),Vhe=n(Wl,"P",{});var fmt=s(Vhe);unr=r(fmt,"Examples:"),fmt.forEach(t),bnr=i(Wl),m(lA.$$.fragment,Wl),Wl.forEach(t),vnr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(iA.$$.fragment,ba),Tnr=i(ba),zhe=n(ba,"P",{});var mmt=s(zhe);Fnr=r(mmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mmt.forEach(t),Cnr=i(ba),vn=n(ba,"P",{});var SE=s(vn);Mnr=r(SE,"The model class to instantiate is selected based on the "),Whe=n(SE,"CODE",{});var gmt=s(Whe);Enr=r(gmt,"model_type"),gmt.forEach(t),ynr=r(SE,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(SE,"CODE",{});var hmt=s(Qhe);wnr=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),Anr=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(SE,"CODE",{});var pmt=s(Hhe);Lnr=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),Bnr=r(SE,":"),SE.forEach(t),xnr=i(ba),dA=n(ba,"UL",{});var iPe=s(dA);P0=n(iPe,"LI",{});var j7e=s(P0);Uhe=n(j7e,"STRONG",{});var _mt=s(Uhe);knr=r(_mt,"convnext"),_mt.forEach(t),Rnr=r(j7e," \u2014 "),jO=n(j7e,"A",{href:!0});var umt=s(jO);Snr=r(umt,"TFConvNextForImageClassification"),umt.forEach(t),Pnr=r(j7e," (ConvNext model)"),j7e.forEach(t),$nr=i(iPe),$0=n(iPe,"LI",{});var N7e=s($0);Jhe=n(N7e,"STRONG",{});var bmt=s(Jhe);Inr=r(bmt,"vit"),bmt.forEach(t),jnr=r(N7e," \u2014 "),NO=n(N7e,"A",{href:!0});var vmt=s(NO);Nnr=r(vmt,"TFViTForImageClassification"),vmt.forEach(t),Dnr=r(N7e," (ViT model)"),N7e.forEach(t),iPe.forEach(t),qnr=i(ba),Yhe=n(ba,"P",{});var Tmt=s(Yhe);Onr=r(Tmt,"Examples:"),Tmt.forEach(t),Gnr=i(ba),m(cA.$$.fragment,ba),ba.forEach(t),zl.forEach(t),Yke=i(c),yc=n(c,"H2",{class:!0});var dPe=s(yc);I0=n(dPe,"A",{id:!0,class:!0,href:!0});var Fmt=s(I0);Khe=n(Fmt,"SPAN",{});var Cmt=s(Khe);m(fA.$$.fragment,Cmt),Cmt.forEach(t),Fmt.forEach(t),Xnr=i(dPe),Zhe=n(dPe,"SPAN",{});var Mmt=s(Zhe);Vnr=r(Mmt,"TFAutoModelForMaskedLM"),Mmt.forEach(t),dPe.forEach(t),Kke=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(mA.$$.fragment,Ql),znr=i(Ql),wc=n(Ql,"P",{});var GW=s(wc);Wnr=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),epe=n(GW,"CODE",{});var Emt=s(epe);Qnr=r(Emt,"from_pretrained()"),Emt.forEach(t),Hnr=r(GW,"class method or the "),ope=n(GW,"CODE",{});var ymt=s(ope);Unr=r(ymt,"from_config()"),ymt.forEach(t),Jnr=r(GW,`class
method.`),GW.forEach(t),Ynr=i(Ql),gA=n(Ql,"P",{});var cPe=s(gA);Knr=r(cPe,"This class cannot be instantiated directly using "),rpe=n(cPe,"CODE",{});var wmt=s(rpe);Znr=r(wmt,"__init__()"),wmt.forEach(t),esr=r(cPe," (throws an error)."),cPe.forEach(t),osr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(hA.$$.fragment,Hl),rsr=i(Hl),tpe=n(Hl,"P",{});var Amt=s(tpe);tsr=r(Amt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Amt.forEach(t),asr=i(Hl),Ac=n(Hl,"P",{});var XW=s(Ac);nsr=r(XW,`Note:
Loading a model from its configuration file does `),ape=n(XW,"STRONG",{});var Lmt=s(ape);ssr=r(Lmt,"not"),Lmt.forEach(t),lsr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=n(XW,"CODE",{});var Bmt=s(npe);isr=r(Bmt,"from_pretrained()"),Bmt.forEach(t),dsr=r(XW,"to load the model weights."),XW.forEach(t),csr=i(Hl),spe=n(Hl,"P",{});var xmt=s(spe);fsr=r(xmt,"Examples:"),xmt.forEach(t),msr=i(Hl),m(pA.$$.fragment,Hl),Hl.forEach(t),gsr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(_A.$$.fragment,va),hsr=i(va),lpe=n(va,"P",{});var kmt=s(lpe);psr=r(kmt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kmt.forEach(t),_sr=i(va),Tn=n(va,"P",{});var PE=s(Tn);usr=r(PE,"The model class to instantiate is selected based on the "),ipe=n(PE,"CODE",{});var Rmt=s(ipe);bsr=r(Rmt,"model_type"),Rmt.forEach(t),vsr=r(PE,` property of the config object (either
passed as an argument or loaded from `),dpe=n(PE,"CODE",{});var Smt=s(dpe);Tsr=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),Fsr=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(PE,"CODE",{});var Pmt=s(cpe);Csr=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),Msr=r(PE,":"),PE.forEach(t),Esr=i(va),Y=n(va,"UL",{});var ee=s(Y);j0=n(ee,"LI",{});var D7e=s(j0);fpe=n(D7e,"STRONG",{});var $mt=s(fpe);ysr=r($mt,"albert"),$mt.forEach(t),wsr=r(D7e," \u2014 "),DO=n(D7e,"A",{href:!0});var Imt=s(DO);Asr=r(Imt,"TFAlbertForMaskedLM"),Imt.forEach(t),Lsr=r(D7e," (ALBERT model)"),D7e.forEach(t),Bsr=i(ee),N0=n(ee,"LI",{});var q7e=s(N0);mpe=n(q7e,"STRONG",{});var jmt=s(mpe);xsr=r(jmt,"bert"),jmt.forEach(t),ksr=r(q7e," \u2014 "),qO=n(q7e,"A",{href:!0});var Nmt=s(qO);Rsr=r(Nmt,"TFBertForMaskedLM"),Nmt.forEach(t),Ssr=r(q7e," (BERT model)"),q7e.forEach(t),Psr=i(ee),D0=n(ee,"LI",{});var O7e=s(D0);gpe=n(O7e,"STRONG",{});var Dmt=s(gpe);$sr=r(Dmt,"camembert"),Dmt.forEach(t),Isr=r(O7e," \u2014 "),OO=n(O7e,"A",{href:!0});var qmt=s(OO);jsr=r(qmt,"TFCamembertForMaskedLM"),qmt.forEach(t),Nsr=r(O7e," (CamemBERT model)"),O7e.forEach(t),Dsr=i(ee),q0=n(ee,"LI",{});var G7e=s(q0);hpe=n(G7e,"STRONG",{});var Omt=s(hpe);qsr=r(Omt,"convbert"),Omt.forEach(t),Osr=r(G7e," \u2014 "),GO=n(G7e,"A",{href:!0});var Gmt=s(GO);Gsr=r(Gmt,"TFConvBertForMaskedLM"),Gmt.forEach(t),Xsr=r(G7e," (ConvBERT model)"),G7e.forEach(t),Vsr=i(ee),O0=n(ee,"LI",{});var X7e=s(O0);ppe=n(X7e,"STRONG",{});var Xmt=s(ppe);zsr=r(Xmt,"deberta"),Xmt.forEach(t),Wsr=r(X7e," \u2014 "),XO=n(X7e,"A",{href:!0});var Vmt=s(XO);Qsr=r(Vmt,"TFDebertaForMaskedLM"),Vmt.forEach(t),Hsr=r(X7e," (DeBERTa model)"),X7e.forEach(t),Usr=i(ee),G0=n(ee,"LI",{});var V7e=s(G0);_pe=n(V7e,"STRONG",{});var zmt=s(_pe);Jsr=r(zmt,"deberta-v2"),zmt.forEach(t),Ysr=r(V7e," \u2014 "),VO=n(V7e,"A",{href:!0});var Wmt=s(VO);Ksr=r(Wmt,"TFDebertaV2ForMaskedLM"),Wmt.forEach(t),Zsr=r(V7e," (DeBERTa-v2 model)"),V7e.forEach(t),elr=i(ee),X0=n(ee,"LI",{});var z7e=s(X0);upe=n(z7e,"STRONG",{});var Qmt=s(upe);olr=r(Qmt,"distilbert"),Qmt.forEach(t),rlr=r(z7e," \u2014 "),zO=n(z7e,"A",{href:!0});var Hmt=s(zO);tlr=r(Hmt,"TFDistilBertForMaskedLM"),Hmt.forEach(t),alr=r(z7e," (DistilBERT model)"),z7e.forEach(t),nlr=i(ee),V0=n(ee,"LI",{});var W7e=s(V0);bpe=n(W7e,"STRONG",{});var Umt=s(bpe);slr=r(Umt,"electra"),Umt.forEach(t),llr=r(W7e," \u2014 "),WO=n(W7e,"A",{href:!0});var Jmt=s(WO);ilr=r(Jmt,"TFElectraForMaskedLM"),Jmt.forEach(t),dlr=r(W7e," (ELECTRA model)"),W7e.forEach(t),clr=i(ee),z0=n(ee,"LI",{});var Q7e=s(z0);vpe=n(Q7e,"STRONG",{});var Ymt=s(vpe);flr=r(Ymt,"flaubert"),Ymt.forEach(t),mlr=r(Q7e," \u2014 "),QO=n(Q7e,"A",{href:!0});var Kmt=s(QO);glr=r(Kmt,"TFFlaubertWithLMHeadModel"),Kmt.forEach(t),hlr=r(Q7e," (FlauBERT model)"),Q7e.forEach(t),plr=i(ee),W0=n(ee,"LI",{});var H7e=s(W0);Tpe=n(H7e,"STRONG",{});var Zmt=s(Tpe);_lr=r(Zmt,"funnel"),Zmt.forEach(t),ulr=r(H7e," \u2014 "),HO=n(H7e,"A",{href:!0});var egt=s(HO);blr=r(egt,"TFFunnelForMaskedLM"),egt.forEach(t),vlr=r(H7e," (Funnel Transformer model)"),H7e.forEach(t),Tlr=i(ee),Q0=n(ee,"LI",{});var U7e=s(Q0);Fpe=n(U7e,"STRONG",{});var ogt=s(Fpe);Flr=r(ogt,"layoutlm"),ogt.forEach(t),Clr=r(U7e," \u2014 "),UO=n(U7e,"A",{href:!0});var rgt=s(UO);Mlr=r(rgt,"TFLayoutLMForMaskedLM"),rgt.forEach(t),Elr=r(U7e," (LayoutLM model)"),U7e.forEach(t),ylr=i(ee),H0=n(ee,"LI",{});var J7e=s(H0);Cpe=n(J7e,"STRONG",{});var tgt=s(Cpe);wlr=r(tgt,"longformer"),tgt.forEach(t),Alr=r(J7e," \u2014 "),JO=n(J7e,"A",{href:!0});var agt=s(JO);Llr=r(agt,"TFLongformerForMaskedLM"),agt.forEach(t),Blr=r(J7e," (Longformer model)"),J7e.forEach(t),xlr=i(ee),U0=n(ee,"LI",{});var Y7e=s(U0);Mpe=n(Y7e,"STRONG",{});var ngt=s(Mpe);klr=r(ngt,"mobilebert"),ngt.forEach(t),Rlr=r(Y7e," \u2014 "),YO=n(Y7e,"A",{href:!0});var sgt=s(YO);Slr=r(sgt,"TFMobileBertForMaskedLM"),sgt.forEach(t),Plr=r(Y7e," (MobileBERT model)"),Y7e.forEach(t),$lr=i(ee),J0=n(ee,"LI",{});var K7e=s(J0);Epe=n(K7e,"STRONG",{});var lgt=s(Epe);Ilr=r(lgt,"mpnet"),lgt.forEach(t),jlr=r(K7e," \u2014 "),KO=n(K7e,"A",{href:!0});var igt=s(KO);Nlr=r(igt,"TFMPNetForMaskedLM"),igt.forEach(t),Dlr=r(K7e," (MPNet model)"),K7e.forEach(t),qlr=i(ee),Y0=n(ee,"LI",{});var Z7e=s(Y0);ype=n(Z7e,"STRONG",{});var dgt=s(ype);Olr=r(dgt,"rembert"),dgt.forEach(t),Glr=r(Z7e," \u2014 "),ZO=n(Z7e,"A",{href:!0});var cgt=s(ZO);Xlr=r(cgt,"TFRemBertForMaskedLM"),cgt.forEach(t),Vlr=r(Z7e," (RemBERT model)"),Z7e.forEach(t),zlr=i(ee),K0=n(ee,"LI",{});var e8e=s(K0);wpe=n(e8e,"STRONG",{});var fgt=s(wpe);Wlr=r(fgt,"roberta"),fgt.forEach(t),Qlr=r(e8e," \u2014 "),eG=n(e8e,"A",{href:!0});var mgt=s(eG);Hlr=r(mgt,"TFRobertaForMaskedLM"),mgt.forEach(t),Ulr=r(e8e," (RoBERTa model)"),e8e.forEach(t),Jlr=i(ee),Z0=n(ee,"LI",{});var o8e=s(Z0);Ape=n(o8e,"STRONG",{});var ggt=s(Ape);Ylr=r(ggt,"roformer"),ggt.forEach(t),Klr=r(o8e," \u2014 "),oG=n(o8e,"A",{href:!0});var hgt=s(oG);Zlr=r(hgt,"TFRoFormerForMaskedLM"),hgt.forEach(t),eir=r(o8e," (RoFormer model)"),o8e.forEach(t),oir=i(ee),eT=n(ee,"LI",{});var r8e=s(eT);Lpe=n(r8e,"STRONG",{});var pgt=s(Lpe);rir=r(pgt,"tapas"),pgt.forEach(t),tir=r(r8e," \u2014 "),rG=n(r8e,"A",{href:!0});var _gt=s(rG);air=r(_gt,"TFTapasForMaskedLM"),_gt.forEach(t),nir=r(r8e," (TAPAS model)"),r8e.forEach(t),sir=i(ee),oT=n(ee,"LI",{});var t8e=s(oT);Bpe=n(t8e,"STRONG",{});var ugt=s(Bpe);lir=r(ugt,"xlm"),ugt.forEach(t),iir=r(t8e," \u2014 "),tG=n(t8e,"A",{href:!0});var bgt=s(tG);dir=r(bgt,"TFXLMWithLMHeadModel"),bgt.forEach(t),cir=r(t8e," (XLM model)"),t8e.forEach(t),fir=i(ee),rT=n(ee,"LI",{});var a8e=s(rT);xpe=n(a8e,"STRONG",{});var vgt=s(xpe);mir=r(vgt,"xlm-roberta"),vgt.forEach(t),gir=r(a8e," \u2014 "),aG=n(a8e,"A",{href:!0});var Tgt=s(aG);hir=r(Tgt,"TFXLMRobertaForMaskedLM"),Tgt.forEach(t),pir=r(a8e," (XLM-RoBERTa model)"),a8e.forEach(t),ee.forEach(t),_ir=i(va),kpe=n(va,"P",{});var Fgt=s(kpe);uir=r(Fgt,"Examples:"),Fgt.forEach(t),bir=i(va),m(uA.$$.fragment,va),va.forEach(t),Ql.forEach(t),Zke=i(c),Lc=n(c,"H2",{class:!0});var fPe=s(Lc);tT=n(fPe,"A",{id:!0,class:!0,href:!0});var Cgt=s(tT);Rpe=n(Cgt,"SPAN",{});var Mgt=s(Rpe);m(bA.$$.fragment,Mgt),Mgt.forEach(t),Cgt.forEach(t),vir=i(fPe),Spe=n(fPe,"SPAN",{});var Egt=s(Spe);Tir=r(Egt,"TFAutoModelForSeq2SeqLM"),Egt.forEach(t),fPe.forEach(t),eRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(vA.$$.fragment,Ul),Fir=i(Ul),Bc=n(Ul,"P",{});var VW=s(Bc);Cir=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ppe=n(VW,"CODE",{});var ygt=s(Ppe);Mir=r(ygt,"from_pretrained()"),ygt.forEach(t),Eir=r(VW,"class method or the "),$pe=n(VW,"CODE",{});var wgt=s($pe);yir=r(wgt,"from_config()"),wgt.forEach(t),wir=r(VW,`class
method.`),VW.forEach(t),Air=i(Ul),TA=n(Ul,"P",{});var mPe=s(TA);Lir=r(mPe,"This class cannot be instantiated directly using "),Ipe=n(mPe,"CODE",{});var Agt=s(Ipe);Bir=r(Agt,"__init__()"),Agt.forEach(t),xir=r(mPe," (throws an error)."),mPe.forEach(t),kir=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(FA.$$.fragment,Jl),Rir=i(Jl),jpe=n(Jl,"P",{});var Lgt=s(jpe);Sir=r(Lgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lgt.forEach(t),Pir=i(Jl),xc=n(Jl,"P",{});var zW=s(xc);$ir=r(zW,`Note:
Loading a model from its configuration file does `),Npe=n(zW,"STRONG",{});var Bgt=s(Npe);Iir=r(Bgt,"not"),Bgt.forEach(t),jir=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=n(zW,"CODE",{});var xgt=s(Dpe);Nir=r(xgt,"from_pretrained()"),xgt.forEach(t),Dir=r(zW,"to load the model weights."),zW.forEach(t),qir=i(Jl),qpe=n(Jl,"P",{});var kgt=s(qpe);Oir=r(kgt,"Examples:"),kgt.forEach(t),Gir=i(Jl),m(CA.$$.fragment,Jl),Jl.forEach(t),Xir=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(MA.$$.fragment,Ta),Vir=i(Ta),Ope=n(Ta,"P",{});var Rgt=s(Ope);zir=r(Rgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rgt.forEach(t),Wir=i(Ta),Fn=n(Ta,"P",{});var $E=s(Fn);Qir=r($E,"The model class to instantiate is selected based on the "),Gpe=n($E,"CODE",{});var Sgt=s(Gpe);Hir=r(Sgt,"model_type"),Sgt.forEach(t),Uir=r($E,` property of the config object (either
passed as an argument or loaded from `),Xpe=n($E,"CODE",{});var Pgt=s(Xpe);Jir=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),Yir=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n($E,"CODE",{});var $gt=s(Vpe);Kir=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),Zir=r($E,":"),$E.forEach(t),edr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);aT=n(ye,"LI",{});var n8e=s(aT);zpe=n(n8e,"STRONG",{});var Igt=s(zpe);odr=r(Igt,"bart"),Igt.forEach(t),rdr=r(n8e," \u2014 "),nG=n(n8e,"A",{href:!0});var jgt=s(nG);tdr=r(jgt,"TFBartForConditionalGeneration"),jgt.forEach(t),adr=r(n8e," (BART model)"),n8e.forEach(t),ndr=i(ye),nT=n(ye,"LI",{});var s8e=s(nT);Wpe=n(s8e,"STRONG",{});var Ngt=s(Wpe);sdr=r(Ngt,"blenderbot"),Ngt.forEach(t),ldr=r(s8e," \u2014 "),sG=n(s8e,"A",{href:!0});var Dgt=s(sG);idr=r(Dgt,"TFBlenderbotForConditionalGeneration"),Dgt.forEach(t),ddr=r(s8e," (Blenderbot model)"),s8e.forEach(t),cdr=i(ye),sT=n(ye,"LI",{});var l8e=s(sT);Qpe=n(l8e,"STRONG",{});var qgt=s(Qpe);fdr=r(qgt,"blenderbot-small"),qgt.forEach(t),mdr=r(l8e," \u2014 "),lG=n(l8e,"A",{href:!0});var Ogt=s(lG);gdr=r(Ogt,"TFBlenderbotSmallForConditionalGeneration"),Ogt.forEach(t),hdr=r(l8e," (BlenderbotSmall model)"),l8e.forEach(t),pdr=i(ye),lT=n(ye,"LI",{});var i8e=s(lT);Hpe=n(i8e,"STRONG",{});var Ggt=s(Hpe);_dr=r(Ggt,"encoder-decoder"),Ggt.forEach(t),udr=r(i8e," \u2014 "),iG=n(i8e,"A",{href:!0});var Xgt=s(iG);bdr=r(Xgt,"TFEncoderDecoderModel"),Xgt.forEach(t),vdr=r(i8e," (Encoder decoder model)"),i8e.forEach(t),Tdr=i(ye),iT=n(ye,"LI",{});var d8e=s(iT);Upe=n(d8e,"STRONG",{});var Vgt=s(Upe);Fdr=r(Vgt,"led"),Vgt.forEach(t),Cdr=r(d8e," \u2014 "),dG=n(d8e,"A",{href:!0});var zgt=s(dG);Mdr=r(zgt,"TFLEDForConditionalGeneration"),zgt.forEach(t),Edr=r(d8e," (LED model)"),d8e.forEach(t),ydr=i(ye),dT=n(ye,"LI",{});var c8e=s(dT);Jpe=n(c8e,"STRONG",{});var Wgt=s(Jpe);wdr=r(Wgt,"marian"),Wgt.forEach(t),Adr=r(c8e," \u2014 "),cG=n(c8e,"A",{href:!0});var Qgt=s(cG);Ldr=r(Qgt,"TFMarianMTModel"),Qgt.forEach(t),Bdr=r(c8e," (Marian model)"),c8e.forEach(t),xdr=i(ye),cT=n(ye,"LI",{});var f8e=s(cT);Ype=n(f8e,"STRONG",{});var Hgt=s(Ype);kdr=r(Hgt,"mbart"),Hgt.forEach(t),Rdr=r(f8e," \u2014 "),fG=n(f8e,"A",{href:!0});var Ugt=s(fG);Sdr=r(Ugt,"TFMBartForConditionalGeneration"),Ugt.forEach(t),Pdr=r(f8e," (mBART model)"),f8e.forEach(t),$dr=i(ye),fT=n(ye,"LI",{});var m8e=s(fT);Kpe=n(m8e,"STRONG",{});var Jgt=s(Kpe);Idr=r(Jgt,"mt5"),Jgt.forEach(t),jdr=r(m8e," \u2014 "),mG=n(m8e,"A",{href:!0});var Ygt=s(mG);Ndr=r(Ygt,"TFMT5ForConditionalGeneration"),Ygt.forEach(t),Ddr=r(m8e," (mT5 model)"),m8e.forEach(t),qdr=i(ye),mT=n(ye,"LI",{});var g8e=s(mT);Zpe=n(g8e,"STRONG",{});var Kgt=s(Zpe);Odr=r(Kgt,"pegasus"),Kgt.forEach(t),Gdr=r(g8e," \u2014 "),gG=n(g8e,"A",{href:!0});var Zgt=s(gG);Xdr=r(Zgt,"TFPegasusForConditionalGeneration"),Zgt.forEach(t),Vdr=r(g8e," (Pegasus model)"),g8e.forEach(t),zdr=i(ye),gT=n(ye,"LI",{});var h8e=s(gT);e_e=n(h8e,"STRONG",{});var eht=s(e_e);Wdr=r(eht,"t5"),eht.forEach(t),Qdr=r(h8e," \u2014 "),hG=n(h8e,"A",{href:!0});var oht=s(hG);Hdr=r(oht,"TFT5ForConditionalGeneration"),oht.forEach(t),Udr=r(h8e," (T5 model)"),h8e.forEach(t),ye.forEach(t),Jdr=i(Ta),o_e=n(Ta,"P",{});var rht=s(o_e);Ydr=r(rht,"Examples:"),rht.forEach(t),Kdr=i(Ta),m(EA.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),oRe=i(c),kc=n(c,"H2",{class:!0});var gPe=s(kc);hT=n(gPe,"A",{id:!0,class:!0,href:!0});var tht=s(hT);r_e=n(tht,"SPAN",{});var aht=s(r_e);m(yA.$$.fragment,aht),aht.forEach(t),tht.forEach(t),Zdr=i(gPe),t_e=n(gPe,"SPAN",{});var nht=s(t_e);ecr=r(nht,"TFAutoModelForSequenceClassification"),nht.forEach(t),gPe.forEach(t),rRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(wA.$$.fragment,Yl),ocr=i(Yl),Rc=n(Yl,"P",{});var WW=s(Rc);rcr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),a_e=n(WW,"CODE",{});var sht=s(a_e);tcr=r(sht,"from_pretrained()"),sht.forEach(t),acr=r(WW,"class method or the "),n_e=n(WW,"CODE",{});var lht=s(n_e);ncr=r(lht,"from_config()"),lht.forEach(t),scr=r(WW,`class
method.`),WW.forEach(t),lcr=i(Yl),AA=n(Yl,"P",{});var hPe=s(AA);icr=r(hPe,"This class cannot be instantiated directly using "),s_e=n(hPe,"CODE",{});var iht=s(s_e);dcr=r(iht,"__init__()"),iht.forEach(t),ccr=r(hPe," (throws an error)."),hPe.forEach(t),fcr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(LA.$$.fragment,Kl),mcr=i(Kl),l_e=n(Kl,"P",{});var dht=s(l_e);gcr=r(dht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dht.forEach(t),hcr=i(Kl),Sc=n(Kl,"P",{});var QW=s(Sc);pcr=r(QW,`Note:
Loading a model from its configuration file does `),i_e=n(QW,"STRONG",{});var cht=s(i_e);_cr=r(cht,"not"),cht.forEach(t),ucr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),d_e=n(QW,"CODE",{});var fht=s(d_e);bcr=r(fht,"from_pretrained()"),fht.forEach(t),vcr=r(QW,"to load the model weights."),QW.forEach(t),Tcr=i(Kl),c_e=n(Kl,"P",{});var mht=s(c_e);Fcr=r(mht,"Examples:"),mht.forEach(t),Ccr=i(Kl),m(BA.$$.fragment,Kl),Kl.forEach(t),Mcr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(xA.$$.fragment,Fa),Ecr=i(Fa),f_e=n(Fa,"P",{});var ght=s(f_e);ycr=r(ght,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ght.forEach(t),wcr=i(Fa),Cn=n(Fa,"P",{});var IE=s(Cn);Acr=r(IE,"The model class to instantiate is selected based on the "),m_e=n(IE,"CODE",{});var hht=s(m_e);Lcr=r(hht,"model_type"),hht.forEach(t),Bcr=r(IE,` property of the config object (either
passed as an argument or loaded from `),g_e=n(IE,"CODE",{});var pht=s(g_e);xcr=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),kcr=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(IE,"CODE",{});var _ht=s(h_e);Rcr=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),Scr=r(IE,":"),IE.forEach(t),Pcr=i(Fa),V=n(Fa,"UL",{});var W=s(V);pT=n(W,"LI",{});var p8e=s(pT);p_e=n(p8e,"STRONG",{});var uht=s(p_e);$cr=r(uht,"albert"),uht.forEach(t),Icr=r(p8e," \u2014 "),pG=n(p8e,"A",{href:!0});var bht=s(pG);jcr=r(bht,"TFAlbertForSequenceClassification"),bht.forEach(t),Ncr=r(p8e," (ALBERT model)"),p8e.forEach(t),Dcr=i(W),_T=n(W,"LI",{});var _8e=s(_T);__e=n(_8e,"STRONG",{});var vht=s(__e);qcr=r(vht,"bert"),vht.forEach(t),Ocr=r(_8e," \u2014 "),_G=n(_8e,"A",{href:!0});var Tht=s(_G);Gcr=r(Tht,"TFBertForSequenceClassification"),Tht.forEach(t),Xcr=r(_8e," (BERT model)"),_8e.forEach(t),Vcr=i(W),uT=n(W,"LI",{});var u8e=s(uT);u_e=n(u8e,"STRONG",{});var Fht=s(u_e);zcr=r(Fht,"camembert"),Fht.forEach(t),Wcr=r(u8e," \u2014 "),uG=n(u8e,"A",{href:!0});var Cht=s(uG);Qcr=r(Cht,"TFCamembertForSequenceClassification"),Cht.forEach(t),Hcr=r(u8e," (CamemBERT model)"),u8e.forEach(t),Ucr=i(W),bT=n(W,"LI",{});var b8e=s(bT);b_e=n(b8e,"STRONG",{});var Mht=s(b_e);Jcr=r(Mht,"convbert"),Mht.forEach(t),Ycr=r(b8e," \u2014 "),bG=n(b8e,"A",{href:!0});var Eht=s(bG);Kcr=r(Eht,"TFConvBertForSequenceClassification"),Eht.forEach(t),Zcr=r(b8e," (ConvBERT model)"),b8e.forEach(t),efr=i(W),vT=n(W,"LI",{});var v8e=s(vT);v_e=n(v8e,"STRONG",{});var yht=s(v_e);ofr=r(yht,"ctrl"),yht.forEach(t),rfr=r(v8e," \u2014 "),vG=n(v8e,"A",{href:!0});var wht=s(vG);tfr=r(wht,"TFCTRLForSequenceClassification"),wht.forEach(t),afr=r(v8e," (CTRL model)"),v8e.forEach(t),nfr=i(W),TT=n(W,"LI",{});var T8e=s(TT);T_e=n(T8e,"STRONG",{});var Aht=s(T_e);sfr=r(Aht,"deberta"),Aht.forEach(t),lfr=r(T8e," \u2014 "),TG=n(T8e,"A",{href:!0});var Lht=s(TG);ifr=r(Lht,"TFDebertaForSequenceClassification"),Lht.forEach(t),dfr=r(T8e," (DeBERTa model)"),T8e.forEach(t),cfr=i(W),FT=n(W,"LI",{});var F8e=s(FT);F_e=n(F8e,"STRONG",{});var Bht=s(F_e);ffr=r(Bht,"deberta-v2"),Bht.forEach(t),mfr=r(F8e," \u2014 "),FG=n(F8e,"A",{href:!0});var xht=s(FG);gfr=r(xht,"TFDebertaV2ForSequenceClassification"),xht.forEach(t),hfr=r(F8e," (DeBERTa-v2 model)"),F8e.forEach(t),pfr=i(W),CT=n(W,"LI",{});var C8e=s(CT);C_e=n(C8e,"STRONG",{});var kht=s(C_e);_fr=r(kht,"distilbert"),kht.forEach(t),ufr=r(C8e," \u2014 "),CG=n(C8e,"A",{href:!0});var Rht=s(CG);bfr=r(Rht,"TFDistilBertForSequenceClassification"),Rht.forEach(t),vfr=r(C8e," (DistilBERT model)"),C8e.forEach(t),Tfr=i(W),MT=n(W,"LI",{});var M8e=s(MT);M_e=n(M8e,"STRONG",{});var Sht=s(M_e);Ffr=r(Sht,"electra"),Sht.forEach(t),Cfr=r(M8e," \u2014 "),MG=n(M8e,"A",{href:!0});var Pht=s(MG);Mfr=r(Pht,"TFElectraForSequenceClassification"),Pht.forEach(t),Efr=r(M8e," (ELECTRA model)"),M8e.forEach(t),yfr=i(W),ET=n(W,"LI",{});var E8e=s(ET);E_e=n(E8e,"STRONG",{});var $ht=s(E_e);wfr=r($ht,"flaubert"),$ht.forEach(t),Afr=r(E8e," \u2014 "),EG=n(E8e,"A",{href:!0});var Iht=s(EG);Lfr=r(Iht,"TFFlaubertForSequenceClassification"),Iht.forEach(t),Bfr=r(E8e," (FlauBERT model)"),E8e.forEach(t),xfr=i(W),yT=n(W,"LI",{});var y8e=s(yT);y_e=n(y8e,"STRONG",{});var jht=s(y_e);kfr=r(jht,"funnel"),jht.forEach(t),Rfr=r(y8e," \u2014 "),yG=n(y8e,"A",{href:!0});var Nht=s(yG);Sfr=r(Nht,"TFFunnelForSequenceClassification"),Nht.forEach(t),Pfr=r(y8e," (Funnel Transformer model)"),y8e.forEach(t),$fr=i(W),wT=n(W,"LI",{});var w8e=s(wT);w_e=n(w8e,"STRONG",{});var Dht=s(w_e);Ifr=r(Dht,"gpt2"),Dht.forEach(t),jfr=r(w8e," \u2014 "),wG=n(w8e,"A",{href:!0});var qht=s(wG);Nfr=r(qht,"TFGPT2ForSequenceClassification"),qht.forEach(t),Dfr=r(w8e," (OpenAI GPT-2 model)"),w8e.forEach(t),qfr=i(W),AT=n(W,"LI",{});var A8e=s(AT);A_e=n(A8e,"STRONG",{});var Oht=s(A_e);Ofr=r(Oht,"layoutlm"),Oht.forEach(t),Gfr=r(A8e," \u2014 "),AG=n(A8e,"A",{href:!0});var Ght=s(AG);Xfr=r(Ght,"TFLayoutLMForSequenceClassification"),Ght.forEach(t),Vfr=r(A8e," (LayoutLM model)"),A8e.forEach(t),zfr=i(W),LT=n(W,"LI",{});var L8e=s(LT);L_e=n(L8e,"STRONG",{});var Xht=s(L_e);Wfr=r(Xht,"longformer"),Xht.forEach(t),Qfr=r(L8e," \u2014 "),LG=n(L8e,"A",{href:!0});var Vht=s(LG);Hfr=r(Vht,"TFLongformerForSequenceClassification"),Vht.forEach(t),Ufr=r(L8e," (Longformer model)"),L8e.forEach(t),Jfr=i(W),BT=n(W,"LI",{});var B8e=s(BT);B_e=n(B8e,"STRONG",{});var zht=s(B_e);Yfr=r(zht,"mobilebert"),zht.forEach(t),Kfr=r(B8e," \u2014 "),BG=n(B8e,"A",{href:!0});var Wht=s(BG);Zfr=r(Wht,"TFMobileBertForSequenceClassification"),Wht.forEach(t),emr=r(B8e," (MobileBERT model)"),B8e.forEach(t),omr=i(W),xT=n(W,"LI",{});var x8e=s(xT);x_e=n(x8e,"STRONG",{});var Qht=s(x_e);rmr=r(Qht,"mpnet"),Qht.forEach(t),tmr=r(x8e," \u2014 "),xG=n(x8e,"A",{href:!0});var Hht=s(xG);amr=r(Hht,"TFMPNetForSequenceClassification"),Hht.forEach(t),nmr=r(x8e," (MPNet model)"),x8e.forEach(t),smr=i(W),kT=n(W,"LI",{});var k8e=s(kT);k_e=n(k8e,"STRONG",{});var Uht=s(k_e);lmr=r(Uht,"openai-gpt"),Uht.forEach(t),imr=r(k8e," \u2014 "),kG=n(k8e,"A",{href:!0});var Jht=s(kG);dmr=r(Jht,"TFOpenAIGPTForSequenceClassification"),Jht.forEach(t),cmr=r(k8e," (OpenAI GPT model)"),k8e.forEach(t),fmr=i(W),RT=n(W,"LI",{});var R8e=s(RT);R_e=n(R8e,"STRONG",{});var Yht=s(R_e);mmr=r(Yht,"rembert"),Yht.forEach(t),gmr=r(R8e," \u2014 "),RG=n(R8e,"A",{href:!0});var Kht=s(RG);hmr=r(Kht,"TFRemBertForSequenceClassification"),Kht.forEach(t),pmr=r(R8e," (RemBERT model)"),R8e.forEach(t),_mr=i(W),ST=n(W,"LI",{});var S8e=s(ST);S_e=n(S8e,"STRONG",{});var Zht=s(S_e);umr=r(Zht,"roberta"),Zht.forEach(t),bmr=r(S8e," \u2014 "),SG=n(S8e,"A",{href:!0});var ept=s(SG);vmr=r(ept,"TFRobertaForSequenceClassification"),ept.forEach(t),Tmr=r(S8e," (RoBERTa model)"),S8e.forEach(t),Fmr=i(W),PT=n(W,"LI",{});var P8e=s(PT);P_e=n(P8e,"STRONG",{});var opt=s(P_e);Cmr=r(opt,"roformer"),opt.forEach(t),Mmr=r(P8e," \u2014 "),PG=n(P8e,"A",{href:!0});var rpt=s(PG);Emr=r(rpt,"TFRoFormerForSequenceClassification"),rpt.forEach(t),ymr=r(P8e," (RoFormer model)"),P8e.forEach(t),wmr=i(W),$T=n(W,"LI",{});var $8e=s($T);$_e=n($8e,"STRONG",{});var tpt=s($_e);Amr=r(tpt,"tapas"),tpt.forEach(t),Lmr=r($8e," \u2014 "),$G=n($8e,"A",{href:!0});var apt=s($G);Bmr=r(apt,"TFTapasForSequenceClassification"),apt.forEach(t),xmr=r($8e," (TAPAS model)"),$8e.forEach(t),kmr=i(W),IT=n(W,"LI",{});var I8e=s(IT);I_e=n(I8e,"STRONG",{});var npt=s(I_e);Rmr=r(npt,"transfo-xl"),npt.forEach(t),Smr=r(I8e," \u2014 "),IG=n(I8e,"A",{href:!0});var spt=s(IG);Pmr=r(spt,"TFTransfoXLForSequenceClassification"),spt.forEach(t),$mr=r(I8e," (Transformer-XL model)"),I8e.forEach(t),Imr=i(W),jT=n(W,"LI",{});var j8e=s(jT);j_e=n(j8e,"STRONG",{});var lpt=s(j_e);jmr=r(lpt,"xlm"),lpt.forEach(t),Nmr=r(j8e," \u2014 "),jG=n(j8e,"A",{href:!0});var ipt=s(jG);Dmr=r(ipt,"TFXLMForSequenceClassification"),ipt.forEach(t),qmr=r(j8e," (XLM model)"),j8e.forEach(t),Omr=i(W),NT=n(W,"LI",{});var N8e=s(NT);N_e=n(N8e,"STRONG",{});var dpt=s(N_e);Gmr=r(dpt,"xlm-roberta"),dpt.forEach(t),Xmr=r(N8e," \u2014 "),NG=n(N8e,"A",{href:!0});var cpt=s(NG);Vmr=r(cpt,"TFXLMRobertaForSequenceClassification"),cpt.forEach(t),zmr=r(N8e," (XLM-RoBERTa model)"),N8e.forEach(t),Wmr=i(W),DT=n(W,"LI",{});var D8e=s(DT);D_e=n(D8e,"STRONG",{});var fpt=s(D_e);Qmr=r(fpt,"xlnet"),fpt.forEach(t),Hmr=r(D8e," \u2014 "),DG=n(D8e,"A",{href:!0});var mpt=s(DG);Umr=r(mpt,"TFXLNetForSequenceClassification"),mpt.forEach(t),Jmr=r(D8e," (XLNet model)"),D8e.forEach(t),W.forEach(t),Ymr=i(Fa),q_e=n(Fa,"P",{});var gpt=s(q_e);Kmr=r(gpt,"Examples:"),gpt.forEach(t),Zmr=i(Fa),m(kA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),tRe=i(c),Pc=n(c,"H2",{class:!0});var pPe=s(Pc);qT=n(pPe,"A",{id:!0,class:!0,href:!0});var hpt=s(qT);O_e=n(hpt,"SPAN",{});var ppt=s(O_e);m(RA.$$.fragment,ppt),ppt.forEach(t),hpt.forEach(t),egr=i(pPe),G_e=n(pPe,"SPAN",{});var _pt=s(G_e);ogr=r(_pt,"TFAutoModelForMultipleChoice"),_pt.forEach(t),pPe.forEach(t),aRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(SA.$$.fragment,Zl),rgr=i(Zl),$c=n(Zl,"P",{});var HW=s($c);tgr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),X_e=n(HW,"CODE",{});var upt=s(X_e);agr=r(upt,"from_pretrained()"),upt.forEach(t),ngr=r(HW,"class method or the "),V_e=n(HW,"CODE",{});var bpt=s(V_e);sgr=r(bpt,"from_config()"),bpt.forEach(t),lgr=r(HW,`class
method.`),HW.forEach(t),igr=i(Zl),PA=n(Zl,"P",{});var _Pe=s(PA);dgr=r(_Pe,"This class cannot be instantiated directly using "),z_e=n(_Pe,"CODE",{});var vpt=s(z_e);cgr=r(vpt,"__init__()"),vpt.forEach(t),fgr=r(_Pe," (throws an error)."),_Pe.forEach(t),mgr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m($A.$$.fragment,ei),ggr=i(ei),W_e=n(ei,"P",{});var Tpt=s(W_e);hgr=r(Tpt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tpt.forEach(t),pgr=i(ei),Ic=n(ei,"P",{});var UW=s(Ic);_gr=r(UW,`Note:
Loading a model from its configuration file does `),Q_e=n(UW,"STRONG",{});var Fpt=s(Q_e);ugr=r(Fpt,"not"),Fpt.forEach(t),bgr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=n(UW,"CODE",{});var Cpt=s(H_e);vgr=r(Cpt,"from_pretrained()"),Cpt.forEach(t),Tgr=r(UW,"to load the model weights."),UW.forEach(t),Fgr=i(ei),U_e=n(ei,"P",{});var Mpt=s(U_e);Cgr=r(Mpt,"Examples:"),Mpt.forEach(t),Mgr=i(ei),m(IA.$$.fragment,ei),ei.forEach(t),Egr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(jA.$$.fragment,Ca),ygr=i(Ca),J_e=n(Ca,"P",{});var Ept=s(J_e);wgr=r(Ept,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ept.forEach(t),Agr=i(Ca),Mn=n(Ca,"P",{});var jE=s(Mn);Lgr=r(jE,"The model class to instantiate is selected based on the "),Y_e=n(jE,"CODE",{});var ypt=s(Y_e);Bgr=r(ypt,"model_type"),ypt.forEach(t),xgr=r(jE,` property of the config object (either
passed as an argument or loaded from `),K_e=n(jE,"CODE",{});var wpt=s(K_e);kgr=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),Rgr=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(jE,"CODE",{});var Apt=s(Z_e);Sgr=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),Pgr=r(jE,":"),jE.forEach(t),$gr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);OT=n(le,"LI",{});var q8e=s(OT);eue=n(q8e,"STRONG",{});var Lpt=s(eue);Igr=r(Lpt,"albert"),Lpt.forEach(t),jgr=r(q8e," \u2014 "),qG=n(q8e,"A",{href:!0});var Bpt=s(qG);Ngr=r(Bpt,"TFAlbertForMultipleChoice"),Bpt.forEach(t),Dgr=r(q8e," (ALBERT model)"),q8e.forEach(t),qgr=i(le),GT=n(le,"LI",{});var O8e=s(GT);oue=n(O8e,"STRONG",{});var xpt=s(oue);Ogr=r(xpt,"bert"),xpt.forEach(t),Ggr=r(O8e," \u2014 "),OG=n(O8e,"A",{href:!0});var kpt=s(OG);Xgr=r(kpt,"TFBertForMultipleChoice"),kpt.forEach(t),Vgr=r(O8e," (BERT model)"),O8e.forEach(t),zgr=i(le),XT=n(le,"LI",{});var G8e=s(XT);rue=n(G8e,"STRONG",{});var Rpt=s(rue);Wgr=r(Rpt,"camembert"),Rpt.forEach(t),Qgr=r(G8e," \u2014 "),GG=n(G8e,"A",{href:!0});var Spt=s(GG);Hgr=r(Spt,"TFCamembertForMultipleChoice"),Spt.forEach(t),Ugr=r(G8e," (CamemBERT model)"),G8e.forEach(t),Jgr=i(le),VT=n(le,"LI",{});var X8e=s(VT);tue=n(X8e,"STRONG",{});var Ppt=s(tue);Ygr=r(Ppt,"convbert"),Ppt.forEach(t),Kgr=r(X8e," \u2014 "),XG=n(X8e,"A",{href:!0});var $pt=s(XG);Zgr=r($pt,"TFConvBertForMultipleChoice"),$pt.forEach(t),ehr=r(X8e," (ConvBERT model)"),X8e.forEach(t),ohr=i(le),zT=n(le,"LI",{});var V8e=s(zT);aue=n(V8e,"STRONG",{});var Ipt=s(aue);rhr=r(Ipt,"distilbert"),Ipt.forEach(t),thr=r(V8e," \u2014 "),VG=n(V8e,"A",{href:!0});var jpt=s(VG);ahr=r(jpt,"TFDistilBertForMultipleChoice"),jpt.forEach(t),nhr=r(V8e," (DistilBERT model)"),V8e.forEach(t),shr=i(le),WT=n(le,"LI",{});var z8e=s(WT);nue=n(z8e,"STRONG",{});var Npt=s(nue);lhr=r(Npt,"electra"),Npt.forEach(t),ihr=r(z8e," \u2014 "),zG=n(z8e,"A",{href:!0});var Dpt=s(zG);dhr=r(Dpt,"TFElectraForMultipleChoice"),Dpt.forEach(t),chr=r(z8e," (ELECTRA model)"),z8e.forEach(t),fhr=i(le),QT=n(le,"LI",{});var W8e=s(QT);sue=n(W8e,"STRONG",{});var qpt=s(sue);mhr=r(qpt,"flaubert"),qpt.forEach(t),ghr=r(W8e," \u2014 "),WG=n(W8e,"A",{href:!0});var Opt=s(WG);hhr=r(Opt,"TFFlaubertForMultipleChoice"),Opt.forEach(t),phr=r(W8e," (FlauBERT model)"),W8e.forEach(t),_hr=i(le),HT=n(le,"LI",{});var Q8e=s(HT);lue=n(Q8e,"STRONG",{});var Gpt=s(lue);uhr=r(Gpt,"funnel"),Gpt.forEach(t),bhr=r(Q8e," \u2014 "),QG=n(Q8e,"A",{href:!0});var Xpt=s(QG);vhr=r(Xpt,"TFFunnelForMultipleChoice"),Xpt.forEach(t),Thr=r(Q8e," (Funnel Transformer model)"),Q8e.forEach(t),Fhr=i(le),UT=n(le,"LI",{});var H8e=s(UT);iue=n(H8e,"STRONG",{});var Vpt=s(iue);Chr=r(Vpt,"longformer"),Vpt.forEach(t),Mhr=r(H8e," \u2014 "),HG=n(H8e,"A",{href:!0});var zpt=s(HG);Ehr=r(zpt,"TFLongformerForMultipleChoice"),zpt.forEach(t),yhr=r(H8e," (Longformer model)"),H8e.forEach(t),whr=i(le),JT=n(le,"LI",{});var U8e=s(JT);due=n(U8e,"STRONG",{});var Wpt=s(due);Ahr=r(Wpt,"mobilebert"),Wpt.forEach(t),Lhr=r(U8e," \u2014 "),UG=n(U8e,"A",{href:!0});var Qpt=s(UG);Bhr=r(Qpt,"TFMobileBertForMultipleChoice"),Qpt.forEach(t),xhr=r(U8e," (MobileBERT model)"),U8e.forEach(t),khr=i(le),YT=n(le,"LI",{});var J8e=s(YT);cue=n(J8e,"STRONG",{});var Hpt=s(cue);Rhr=r(Hpt,"mpnet"),Hpt.forEach(t),Shr=r(J8e," \u2014 "),JG=n(J8e,"A",{href:!0});var Upt=s(JG);Phr=r(Upt,"TFMPNetForMultipleChoice"),Upt.forEach(t),$hr=r(J8e," (MPNet model)"),J8e.forEach(t),Ihr=i(le),KT=n(le,"LI",{});var Y8e=s(KT);fue=n(Y8e,"STRONG",{});var Jpt=s(fue);jhr=r(Jpt,"rembert"),Jpt.forEach(t),Nhr=r(Y8e," \u2014 "),YG=n(Y8e,"A",{href:!0});var Ypt=s(YG);Dhr=r(Ypt,"TFRemBertForMultipleChoice"),Ypt.forEach(t),qhr=r(Y8e," (RemBERT model)"),Y8e.forEach(t),Ohr=i(le),ZT=n(le,"LI",{});var K8e=s(ZT);mue=n(K8e,"STRONG",{});var Kpt=s(mue);Ghr=r(Kpt,"roberta"),Kpt.forEach(t),Xhr=r(K8e," \u2014 "),KG=n(K8e,"A",{href:!0});var Zpt=s(KG);Vhr=r(Zpt,"TFRobertaForMultipleChoice"),Zpt.forEach(t),zhr=r(K8e," (RoBERTa model)"),K8e.forEach(t),Whr=i(le),eF=n(le,"LI",{});var Z8e=s(eF);gue=n(Z8e,"STRONG",{});var e_t=s(gue);Qhr=r(e_t,"roformer"),e_t.forEach(t),Hhr=r(Z8e," \u2014 "),ZG=n(Z8e,"A",{href:!0});var o_t=s(ZG);Uhr=r(o_t,"TFRoFormerForMultipleChoice"),o_t.forEach(t),Jhr=r(Z8e," (RoFormer model)"),Z8e.forEach(t),Yhr=i(le),oF=n(le,"LI",{});var e9e=s(oF);hue=n(e9e,"STRONG",{});var r_t=s(hue);Khr=r(r_t,"xlm"),r_t.forEach(t),Zhr=r(e9e," \u2014 "),eX=n(e9e,"A",{href:!0});var t_t=s(eX);epr=r(t_t,"TFXLMForMultipleChoice"),t_t.forEach(t),opr=r(e9e," (XLM model)"),e9e.forEach(t),rpr=i(le),rF=n(le,"LI",{});var o9e=s(rF);pue=n(o9e,"STRONG",{});var a_t=s(pue);tpr=r(a_t,"xlm-roberta"),a_t.forEach(t),apr=r(o9e," \u2014 "),oX=n(o9e,"A",{href:!0});var n_t=s(oX);npr=r(n_t,"TFXLMRobertaForMultipleChoice"),n_t.forEach(t),spr=r(o9e," (XLM-RoBERTa model)"),o9e.forEach(t),lpr=i(le),tF=n(le,"LI",{});var r9e=s(tF);_ue=n(r9e,"STRONG",{});var s_t=s(_ue);ipr=r(s_t,"xlnet"),s_t.forEach(t),dpr=r(r9e," \u2014 "),rX=n(r9e,"A",{href:!0});var l_t=s(rX);cpr=r(l_t,"TFXLNetForMultipleChoice"),l_t.forEach(t),fpr=r(r9e," (XLNet model)"),r9e.forEach(t),le.forEach(t),mpr=i(Ca),uue=n(Ca,"P",{});var i_t=s(uue);gpr=r(i_t,"Examples:"),i_t.forEach(t),hpr=i(Ca),m(NA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),nRe=i(c),jc=n(c,"H2",{class:!0});var uPe=s(jc);aF=n(uPe,"A",{id:!0,class:!0,href:!0});var d_t=s(aF);bue=n(d_t,"SPAN",{});var c_t=s(bue);m(DA.$$.fragment,c_t),c_t.forEach(t),d_t.forEach(t),ppr=i(uPe),vue=n(uPe,"SPAN",{});var f_t=s(vue);_pr=r(f_t,"TFAutoModelForTableQuestionAnswering"),f_t.forEach(t),uPe.forEach(t),sRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(qA.$$.fragment,oi),upr=i(oi),Nc=n(oi,"P",{});var JW=s(Nc);bpr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tue=n(JW,"CODE",{});var m_t=s(Tue);vpr=r(m_t,"from_pretrained()"),m_t.forEach(t),Tpr=r(JW,"class method or the "),Fue=n(JW,"CODE",{});var g_t=s(Fue);Fpr=r(g_t,"from_config()"),g_t.forEach(t),Cpr=r(JW,`class
method.`),JW.forEach(t),Mpr=i(oi),OA=n(oi,"P",{});var bPe=s(OA);Epr=r(bPe,"This class cannot be instantiated directly using "),Cue=n(bPe,"CODE",{});var h_t=s(Cue);ypr=r(h_t,"__init__()"),h_t.forEach(t),wpr=r(bPe," (throws an error)."),bPe.forEach(t),Apr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(GA.$$.fragment,ri),Lpr=i(ri),Mue=n(ri,"P",{});var p_t=s(Mue);Bpr=r(p_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),p_t.forEach(t),xpr=i(ri),Dc=n(ri,"P",{});var YW=s(Dc);kpr=r(YW,`Note:
Loading a model from its configuration file does `),Eue=n(YW,"STRONG",{});var __t=s(Eue);Rpr=r(__t,"not"),__t.forEach(t),Spr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yue=n(YW,"CODE",{});var u_t=s(yue);Ppr=r(u_t,"from_pretrained()"),u_t.forEach(t),$pr=r(YW,"to load the model weights."),YW.forEach(t),Ipr=i(ri),wue=n(ri,"P",{});var b_t=s(wue);jpr=r(b_t,"Examples:"),b_t.forEach(t),Npr=i(ri),m(XA.$$.fragment,ri),ri.forEach(t),Dpr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(VA.$$.fragment,Ma),qpr=i(Ma),Aue=n(Ma,"P",{});var v_t=s(Aue);Opr=r(v_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v_t.forEach(t),Gpr=i(Ma),En=n(Ma,"P",{});var NE=s(En);Xpr=r(NE,"The model class to instantiate is selected based on the "),Lue=n(NE,"CODE",{});var T_t=s(Lue);Vpr=r(T_t,"model_type"),T_t.forEach(t),zpr=r(NE,` property of the config object (either
passed as an argument or loaded from `),Bue=n(NE,"CODE",{});var F_t=s(Bue);Wpr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),Qpr=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(NE,"CODE",{});var C_t=s(xue);Hpr=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),Upr=r(NE,":"),NE.forEach(t),Jpr=i(Ma),kue=n(Ma,"UL",{});var M_t=s(kue);nF=n(M_t,"LI",{});var t9e=s(nF);Rue=n(t9e,"STRONG",{});var E_t=s(Rue);Ypr=r(E_t,"tapas"),E_t.forEach(t),Kpr=r(t9e," \u2014 "),tX=n(t9e,"A",{href:!0});var y_t=s(tX);Zpr=r(y_t,"TFTapasForQuestionAnswering"),y_t.forEach(t),e_r=r(t9e," (TAPAS model)"),t9e.forEach(t),M_t.forEach(t),o_r=i(Ma),Sue=n(Ma,"P",{});var w_t=s(Sue);r_r=r(w_t,"Examples:"),w_t.forEach(t),t_r=i(Ma),m(zA.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),lRe=i(c),qc=n(c,"H2",{class:!0});var vPe=s(qc);sF=n(vPe,"A",{id:!0,class:!0,href:!0});var A_t=s(sF);Pue=n(A_t,"SPAN",{});var L_t=s(Pue);m(WA.$$.fragment,L_t),L_t.forEach(t),A_t.forEach(t),a_r=i(vPe),$ue=n(vPe,"SPAN",{});var B_t=s($ue);n_r=r(B_t,"TFAutoModelForTokenClassification"),B_t.forEach(t),vPe.forEach(t),iRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(QA.$$.fragment,ti),s_r=i(ti),Oc=n(ti,"P",{});var KW=s(Oc);l_r=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Iue=n(KW,"CODE",{});var x_t=s(Iue);i_r=r(x_t,"from_pretrained()"),x_t.forEach(t),d_r=r(KW,"class method or the "),jue=n(KW,"CODE",{});var k_t=s(jue);c_r=r(k_t,"from_config()"),k_t.forEach(t),f_r=r(KW,`class
method.`),KW.forEach(t),m_r=i(ti),HA=n(ti,"P",{});var TPe=s(HA);g_r=r(TPe,"This class cannot be instantiated directly using "),Nue=n(TPe,"CODE",{});var R_t=s(Nue);h_r=r(R_t,"__init__()"),R_t.forEach(t),p_r=r(TPe," (throws an error)."),TPe.forEach(t),__r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(UA.$$.fragment,ai),u_r=i(ai),Due=n(ai,"P",{});var S_t=s(Due);b_r=r(S_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S_t.forEach(t),v_r=i(ai),Gc=n(ai,"P",{});var ZW=s(Gc);T_r=r(ZW,`Note:
Loading a model from its configuration file does `),que=n(ZW,"STRONG",{});var P_t=s(que);F_r=r(P_t,"not"),P_t.forEach(t),C_r=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oue=n(ZW,"CODE",{});var $_t=s(Oue);M_r=r($_t,"from_pretrained()"),$_t.forEach(t),E_r=r(ZW,"to load the model weights."),ZW.forEach(t),y_r=i(ai),Gue=n(ai,"P",{});var I_t=s(Gue);w_r=r(I_t,"Examples:"),I_t.forEach(t),A_r=i(ai),m(JA.$$.fragment,ai),ai.forEach(t),L_r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(YA.$$.fragment,Ea),B_r=i(Ea),Xue=n(Ea,"P",{});var j_t=s(Xue);x_r=r(j_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j_t.forEach(t),k_r=i(Ea),yn=n(Ea,"P",{});var DE=s(yn);R_r=r(DE,"The model class to instantiate is selected based on the "),Vue=n(DE,"CODE",{});var N_t=s(Vue);S_r=r(N_t,"model_type"),N_t.forEach(t),P_r=r(DE,` property of the config object (either
passed as an argument or loaded from `),zue=n(DE,"CODE",{});var D_t=s(zue);$_r=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),I_r=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(DE,"CODE",{});var q_t=s(Wue);j_r=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),N_r=r(DE,":"),DE.forEach(t),D_r=i(Ea),K=n(Ea,"UL",{});var oe=s(K);lF=n(oe,"LI",{});var a9e=s(lF);Que=n(a9e,"STRONG",{});var O_t=s(Que);q_r=r(O_t,"albert"),O_t.forEach(t),O_r=r(a9e," \u2014 "),aX=n(a9e,"A",{href:!0});var G_t=s(aX);G_r=r(G_t,"TFAlbertForTokenClassification"),G_t.forEach(t),X_r=r(a9e," (ALBERT model)"),a9e.forEach(t),V_r=i(oe),iF=n(oe,"LI",{});var n9e=s(iF);Hue=n(n9e,"STRONG",{});var X_t=s(Hue);z_r=r(X_t,"bert"),X_t.forEach(t),W_r=r(n9e," \u2014 "),nX=n(n9e,"A",{href:!0});var V_t=s(nX);Q_r=r(V_t,"TFBertForTokenClassification"),V_t.forEach(t),H_r=r(n9e," (BERT model)"),n9e.forEach(t),U_r=i(oe),dF=n(oe,"LI",{});var s9e=s(dF);Uue=n(s9e,"STRONG",{});var z_t=s(Uue);J_r=r(z_t,"camembert"),z_t.forEach(t),Y_r=r(s9e," \u2014 "),sX=n(s9e,"A",{href:!0});var W_t=s(sX);K_r=r(W_t,"TFCamembertForTokenClassification"),W_t.forEach(t),Z_r=r(s9e," (CamemBERT model)"),s9e.forEach(t),eur=i(oe),cF=n(oe,"LI",{});var l9e=s(cF);Jue=n(l9e,"STRONG",{});var Q_t=s(Jue);our=r(Q_t,"convbert"),Q_t.forEach(t),rur=r(l9e," \u2014 "),lX=n(l9e,"A",{href:!0});var H_t=s(lX);tur=r(H_t,"TFConvBertForTokenClassification"),H_t.forEach(t),aur=r(l9e," (ConvBERT model)"),l9e.forEach(t),nur=i(oe),fF=n(oe,"LI",{});var i9e=s(fF);Yue=n(i9e,"STRONG",{});var U_t=s(Yue);sur=r(U_t,"deberta"),U_t.forEach(t),lur=r(i9e," \u2014 "),iX=n(i9e,"A",{href:!0});var J_t=s(iX);iur=r(J_t,"TFDebertaForTokenClassification"),J_t.forEach(t),dur=r(i9e," (DeBERTa model)"),i9e.forEach(t),cur=i(oe),mF=n(oe,"LI",{});var d9e=s(mF);Kue=n(d9e,"STRONG",{});var Y_t=s(Kue);fur=r(Y_t,"deberta-v2"),Y_t.forEach(t),mur=r(d9e," \u2014 "),dX=n(d9e,"A",{href:!0});var K_t=s(dX);gur=r(K_t,"TFDebertaV2ForTokenClassification"),K_t.forEach(t),hur=r(d9e," (DeBERTa-v2 model)"),d9e.forEach(t),pur=i(oe),gF=n(oe,"LI",{});var c9e=s(gF);Zue=n(c9e,"STRONG",{});var Z_t=s(Zue);_ur=r(Z_t,"distilbert"),Z_t.forEach(t),uur=r(c9e," \u2014 "),cX=n(c9e,"A",{href:!0});var eut=s(cX);bur=r(eut,"TFDistilBertForTokenClassification"),eut.forEach(t),vur=r(c9e," (DistilBERT model)"),c9e.forEach(t),Tur=i(oe),hF=n(oe,"LI",{});var f9e=s(hF);e4e=n(f9e,"STRONG",{});var out=s(e4e);Fur=r(out,"electra"),out.forEach(t),Cur=r(f9e," \u2014 "),fX=n(f9e,"A",{href:!0});var rut=s(fX);Mur=r(rut,"TFElectraForTokenClassification"),rut.forEach(t),Eur=r(f9e," (ELECTRA model)"),f9e.forEach(t),yur=i(oe),pF=n(oe,"LI",{});var m9e=s(pF);o4e=n(m9e,"STRONG",{});var tut=s(o4e);wur=r(tut,"flaubert"),tut.forEach(t),Aur=r(m9e," \u2014 "),mX=n(m9e,"A",{href:!0});var aut=s(mX);Lur=r(aut,"TFFlaubertForTokenClassification"),aut.forEach(t),Bur=r(m9e," (FlauBERT model)"),m9e.forEach(t),xur=i(oe),_F=n(oe,"LI",{});var g9e=s(_F);r4e=n(g9e,"STRONG",{});var nut=s(r4e);kur=r(nut,"funnel"),nut.forEach(t),Rur=r(g9e," \u2014 "),gX=n(g9e,"A",{href:!0});var sut=s(gX);Sur=r(sut,"TFFunnelForTokenClassification"),sut.forEach(t),Pur=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),$ur=i(oe),uF=n(oe,"LI",{});var h9e=s(uF);t4e=n(h9e,"STRONG",{});var lut=s(t4e);Iur=r(lut,"layoutlm"),lut.forEach(t),jur=r(h9e," \u2014 "),hX=n(h9e,"A",{href:!0});var iut=s(hX);Nur=r(iut,"TFLayoutLMForTokenClassification"),iut.forEach(t),Dur=r(h9e," (LayoutLM model)"),h9e.forEach(t),qur=i(oe),bF=n(oe,"LI",{});var p9e=s(bF);a4e=n(p9e,"STRONG",{});var dut=s(a4e);Our=r(dut,"longformer"),dut.forEach(t),Gur=r(p9e," \u2014 "),pX=n(p9e,"A",{href:!0});var cut=s(pX);Xur=r(cut,"TFLongformerForTokenClassification"),cut.forEach(t),Vur=r(p9e," (Longformer model)"),p9e.forEach(t),zur=i(oe),vF=n(oe,"LI",{});var _9e=s(vF);n4e=n(_9e,"STRONG",{});var fut=s(n4e);Wur=r(fut,"mobilebert"),fut.forEach(t),Qur=r(_9e," \u2014 "),_X=n(_9e,"A",{href:!0});var mut=s(_X);Hur=r(mut,"TFMobileBertForTokenClassification"),mut.forEach(t),Uur=r(_9e," (MobileBERT model)"),_9e.forEach(t),Jur=i(oe),TF=n(oe,"LI",{});var u9e=s(TF);s4e=n(u9e,"STRONG",{});var gut=s(s4e);Yur=r(gut,"mpnet"),gut.forEach(t),Kur=r(u9e," \u2014 "),uX=n(u9e,"A",{href:!0});var hut=s(uX);Zur=r(hut,"TFMPNetForTokenClassification"),hut.forEach(t),e4r=r(u9e," (MPNet model)"),u9e.forEach(t),o4r=i(oe),FF=n(oe,"LI",{});var b9e=s(FF);l4e=n(b9e,"STRONG",{});var put=s(l4e);r4r=r(put,"rembert"),put.forEach(t),t4r=r(b9e," \u2014 "),bX=n(b9e,"A",{href:!0});var _ut=s(bX);a4r=r(_ut,"TFRemBertForTokenClassification"),_ut.forEach(t),n4r=r(b9e," (RemBERT model)"),b9e.forEach(t),s4r=i(oe),CF=n(oe,"LI",{});var v9e=s(CF);i4e=n(v9e,"STRONG",{});var uut=s(i4e);l4r=r(uut,"roberta"),uut.forEach(t),i4r=r(v9e," \u2014 "),vX=n(v9e,"A",{href:!0});var but=s(vX);d4r=r(but,"TFRobertaForTokenClassification"),but.forEach(t),c4r=r(v9e," (RoBERTa model)"),v9e.forEach(t),f4r=i(oe),MF=n(oe,"LI",{});var T9e=s(MF);d4e=n(T9e,"STRONG",{});var vut=s(d4e);m4r=r(vut,"roformer"),vut.forEach(t),g4r=r(T9e," \u2014 "),TX=n(T9e,"A",{href:!0});var Tut=s(TX);h4r=r(Tut,"TFRoFormerForTokenClassification"),Tut.forEach(t),p4r=r(T9e," (RoFormer model)"),T9e.forEach(t),_4r=i(oe),EF=n(oe,"LI",{});var F9e=s(EF);c4e=n(F9e,"STRONG",{});var Fut=s(c4e);u4r=r(Fut,"xlm"),Fut.forEach(t),b4r=r(F9e," \u2014 "),FX=n(F9e,"A",{href:!0});var Cut=s(FX);v4r=r(Cut,"TFXLMForTokenClassification"),Cut.forEach(t),T4r=r(F9e," (XLM model)"),F9e.forEach(t),F4r=i(oe),yF=n(oe,"LI",{});var C9e=s(yF);f4e=n(C9e,"STRONG",{});var Mut=s(f4e);C4r=r(Mut,"xlm-roberta"),Mut.forEach(t),M4r=r(C9e," \u2014 "),CX=n(C9e,"A",{href:!0});var Eut=s(CX);E4r=r(Eut,"TFXLMRobertaForTokenClassification"),Eut.forEach(t),y4r=r(C9e," (XLM-RoBERTa model)"),C9e.forEach(t),w4r=i(oe),wF=n(oe,"LI",{});var M9e=s(wF);m4e=n(M9e,"STRONG",{});var yut=s(m4e);A4r=r(yut,"xlnet"),yut.forEach(t),L4r=r(M9e," \u2014 "),MX=n(M9e,"A",{href:!0});var wut=s(MX);B4r=r(wut,"TFXLNetForTokenClassification"),wut.forEach(t),x4r=r(M9e," (XLNet model)"),M9e.forEach(t),oe.forEach(t),k4r=i(Ea),g4e=n(Ea,"P",{});var Aut=s(g4e);R4r=r(Aut,"Examples:"),Aut.forEach(t),S4r=i(Ea),m(KA.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),dRe=i(c),Xc=n(c,"H2",{class:!0});var FPe=s(Xc);AF=n(FPe,"A",{id:!0,class:!0,href:!0});var Lut=s(AF);h4e=n(Lut,"SPAN",{});var But=s(h4e);m(ZA.$$.fragment,But),But.forEach(t),Lut.forEach(t),P4r=i(FPe),p4e=n(FPe,"SPAN",{});var xut=s(p4e);$4r=r(xut,"TFAutoModelForQuestionAnswering"),xut.forEach(t),FPe.forEach(t),cRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(eL.$$.fragment,ni),I4r=i(ni),Vc=n(ni,"P",{});var eQ=s(Vc);j4r=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_4e=n(eQ,"CODE",{});var kut=s(_4e);N4r=r(kut,"from_pretrained()"),kut.forEach(t),D4r=r(eQ,"class method or the "),u4e=n(eQ,"CODE",{});var Rut=s(u4e);q4r=r(Rut,"from_config()"),Rut.forEach(t),O4r=r(eQ,`class
method.`),eQ.forEach(t),G4r=i(ni),oL=n(ni,"P",{});var CPe=s(oL);X4r=r(CPe,"This class cannot be instantiated directly using "),b4e=n(CPe,"CODE",{});var Sut=s(b4e);V4r=r(Sut,"__init__()"),Sut.forEach(t),z4r=r(CPe," (throws an error)."),CPe.forEach(t),W4r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(rL.$$.fragment,si),Q4r=i(si),v4e=n(si,"P",{});var Put=s(v4e);H4r=r(Put,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Put.forEach(t),U4r=i(si),zc=n(si,"P",{});var oQ=s(zc);J4r=r(oQ,`Note:
Loading a model from its configuration file does `),T4e=n(oQ,"STRONG",{});var $ut=s(T4e);Y4r=r($ut,"not"),$ut.forEach(t),K4r=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),F4e=n(oQ,"CODE",{});var Iut=s(F4e);Z4r=r(Iut,"from_pretrained()"),Iut.forEach(t),e1r=r(oQ,"to load the model weights."),oQ.forEach(t),o1r=i(si),C4e=n(si,"P",{});var jut=s(C4e);r1r=r(jut,"Examples:"),jut.forEach(t),t1r=i(si),m(tL.$$.fragment,si),si.forEach(t),a1r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(aL.$$.fragment,ya),n1r=i(ya),M4e=n(ya,"P",{});var Nut=s(M4e);s1r=r(Nut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nut.forEach(t),l1r=i(ya),wn=n(ya,"P",{});var qE=s(wn);i1r=r(qE,"The model class to instantiate is selected based on the "),E4e=n(qE,"CODE",{});var Dut=s(E4e);d1r=r(Dut,"model_type"),Dut.forEach(t),c1r=r(qE,` property of the config object (either
passed as an argument or loaded from `),y4e=n(qE,"CODE",{});var qut=s(y4e);f1r=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),m1r=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(qE,"CODE",{});var Out=s(w4e);g1r=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),h1r=r(qE,":"),qE.forEach(t),p1r=i(ya),Z=n(ya,"UL",{});var te=s(Z);LF=n(te,"LI",{});var E9e=s(LF);A4e=n(E9e,"STRONG",{});var Gut=s(A4e);_1r=r(Gut,"albert"),Gut.forEach(t),u1r=r(E9e," \u2014 "),EX=n(E9e,"A",{href:!0});var Xut=s(EX);b1r=r(Xut,"TFAlbertForQuestionAnswering"),Xut.forEach(t),v1r=r(E9e," (ALBERT model)"),E9e.forEach(t),T1r=i(te),BF=n(te,"LI",{});var y9e=s(BF);L4e=n(y9e,"STRONG",{});var Vut=s(L4e);F1r=r(Vut,"bert"),Vut.forEach(t),C1r=r(y9e," \u2014 "),yX=n(y9e,"A",{href:!0});var zut=s(yX);M1r=r(zut,"TFBertForQuestionAnswering"),zut.forEach(t),E1r=r(y9e," (BERT model)"),y9e.forEach(t),y1r=i(te),xF=n(te,"LI",{});var w9e=s(xF);B4e=n(w9e,"STRONG",{});var Wut=s(B4e);w1r=r(Wut,"camembert"),Wut.forEach(t),A1r=r(w9e," \u2014 "),wX=n(w9e,"A",{href:!0});var Qut=s(wX);L1r=r(Qut,"TFCamembertForQuestionAnswering"),Qut.forEach(t),B1r=r(w9e," (CamemBERT model)"),w9e.forEach(t),x1r=i(te),kF=n(te,"LI",{});var A9e=s(kF);x4e=n(A9e,"STRONG",{});var Hut=s(x4e);k1r=r(Hut,"convbert"),Hut.forEach(t),R1r=r(A9e," \u2014 "),AX=n(A9e,"A",{href:!0});var Uut=s(AX);S1r=r(Uut,"TFConvBertForQuestionAnswering"),Uut.forEach(t),P1r=r(A9e," (ConvBERT model)"),A9e.forEach(t),$1r=i(te),RF=n(te,"LI",{});var L9e=s(RF);k4e=n(L9e,"STRONG",{});var Jut=s(k4e);I1r=r(Jut,"deberta"),Jut.forEach(t),j1r=r(L9e," \u2014 "),LX=n(L9e,"A",{href:!0});var Yut=s(LX);N1r=r(Yut,"TFDebertaForQuestionAnswering"),Yut.forEach(t),D1r=r(L9e," (DeBERTa model)"),L9e.forEach(t),q1r=i(te),SF=n(te,"LI",{});var B9e=s(SF);R4e=n(B9e,"STRONG",{});var Kut=s(R4e);O1r=r(Kut,"deberta-v2"),Kut.forEach(t),G1r=r(B9e," \u2014 "),BX=n(B9e,"A",{href:!0});var Zut=s(BX);X1r=r(Zut,"TFDebertaV2ForQuestionAnswering"),Zut.forEach(t),V1r=r(B9e," (DeBERTa-v2 model)"),B9e.forEach(t),z1r=i(te),PF=n(te,"LI",{});var x9e=s(PF);S4e=n(x9e,"STRONG",{});var e4t=s(S4e);W1r=r(e4t,"distilbert"),e4t.forEach(t),Q1r=r(x9e," \u2014 "),xX=n(x9e,"A",{href:!0});var o4t=s(xX);H1r=r(o4t,"TFDistilBertForQuestionAnswering"),o4t.forEach(t),U1r=r(x9e," (DistilBERT model)"),x9e.forEach(t),J1r=i(te),$F=n(te,"LI",{});var k9e=s($F);P4e=n(k9e,"STRONG",{});var r4t=s(P4e);Y1r=r(r4t,"electra"),r4t.forEach(t),K1r=r(k9e," \u2014 "),kX=n(k9e,"A",{href:!0});var t4t=s(kX);Z1r=r(t4t,"TFElectraForQuestionAnswering"),t4t.forEach(t),ebr=r(k9e," (ELECTRA model)"),k9e.forEach(t),obr=i(te),IF=n(te,"LI",{});var R9e=s(IF);$4e=n(R9e,"STRONG",{});var a4t=s($4e);rbr=r(a4t,"flaubert"),a4t.forEach(t),tbr=r(R9e," \u2014 "),RX=n(R9e,"A",{href:!0});var n4t=s(RX);abr=r(n4t,"TFFlaubertForQuestionAnsweringSimple"),n4t.forEach(t),nbr=r(R9e," (FlauBERT model)"),R9e.forEach(t),sbr=i(te),jF=n(te,"LI",{});var S9e=s(jF);I4e=n(S9e,"STRONG",{});var s4t=s(I4e);lbr=r(s4t,"funnel"),s4t.forEach(t),ibr=r(S9e," \u2014 "),SX=n(S9e,"A",{href:!0});var l4t=s(SX);dbr=r(l4t,"TFFunnelForQuestionAnswering"),l4t.forEach(t),cbr=r(S9e," (Funnel Transformer model)"),S9e.forEach(t),fbr=i(te),NF=n(te,"LI",{});var P9e=s(NF);j4e=n(P9e,"STRONG",{});var i4t=s(j4e);mbr=r(i4t,"longformer"),i4t.forEach(t),gbr=r(P9e," \u2014 "),PX=n(P9e,"A",{href:!0});var d4t=s(PX);hbr=r(d4t,"TFLongformerForQuestionAnswering"),d4t.forEach(t),pbr=r(P9e," (Longformer model)"),P9e.forEach(t),_br=i(te),DF=n(te,"LI",{});var $9e=s(DF);N4e=n($9e,"STRONG",{});var c4t=s(N4e);ubr=r(c4t,"mobilebert"),c4t.forEach(t),bbr=r($9e," \u2014 "),$X=n($9e,"A",{href:!0});var f4t=s($X);vbr=r(f4t,"TFMobileBertForQuestionAnswering"),f4t.forEach(t),Tbr=r($9e," (MobileBERT model)"),$9e.forEach(t),Fbr=i(te),qF=n(te,"LI",{});var I9e=s(qF);D4e=n(I9e,"STRONG",{});var m4t=s(D4e);Cbr=r(m4t,"mpnet"),m4t.forEach(t),Mbr=r(I9e," \u2014 "),IX=n(I9e,"A",{href:!0});var g4t=s(IX);Ebr=r(g4t,"TFMPNetForQuestionAnswering"),g4t.forEach(t),ybr=r(I9e," (MPNet model)"),I9e.forEach(t),wbr=i(te),OF=n(te,"LI",{});var j9e=s(OF);q4e=n(j9e,"STRONG",{});var h4t=s(q4e);Abr=r(h4t,"rembert"),h4t.forEach(t),Lbr=r(j9e," \u2014 "),jX=n(j9e,"A",{href:!0});var p4t=s(jX);Bbr=r(p4t,"TFRemBertForQuestionAnswering"),p4t.forEach(t),xbr=r(j9e," (RemBERT model)"),j9e.forEach(t),kbr=i(te),GF=n(te,"LI",{});var N9e=s(GF);O4e=n(N9e,"STRONG",{});var _4t=s(O4e);Rbr=r(_4t,"roberta"),_4t.forEach(t),Sbr=r(N9e," \u2014 "),NX=n(N9e,"A",{href:!0});var u4t=s(NX);Pbr=r(u4t,"TFRobertaForQuestionAnswering"),u4t.forEach(t),$br=r(N9e," (RoBERTa model)"),N9e.forEach(t),Ibr=i(te),XF=n(te,"LI",{});var D9e=s(XF);G4e=n(D9e,"STRONG",{});var b4t=s(G4e);jbr=r(b4t,"roformer"),b4t.forEach(t),Nbr=r(D9e," \u2014 "),DX=n(D9e,"A",{href:!0});var v4t=s(DX);Dbr=r(v4t,"TFRoFormerForQuestionAnswering"),v4t.forEach(t),qbr=r(D9e," (RoFormer model)"),D9e.forEach(t),Obr=i(te),VF=n(te,"LI",{});var q9e=s(VF);X4e=n(q9e,"STRONG",{});var T4t=s(X4e);Gbr=r(T4t,"xlm"),T4t.forEach(t),Xbr=r(q9e," \u2014 "),qX=n(q9e,"A",{href:!0});var F4t=s(qX);Vbr=r(F4t,"TFXLMForQuestionAnsweringSimple"),F4t.forEach(t),zbr=r(q9e," (XLM model)"),q9e.forEach(t),Wbr=i(te),zF=n(te,"LI",{});var O9e=s(zF);V4e=n(O9e,"STRONG",{});var C4t=s(V4e);Qbr=r(C4t,"xlm-roberta"),C4t.forEach(t),Hbr=r(O9e," \u2014 "),OX=n(O9e,"A",{href:!0});var M4t=s(OX);Ubr=r(M4t,"TFXLMRobertaForQuestionAnswering"),M4t.forEach(t),Jbr=r(O9e," (XLM-RoBERTa model)"),O9e.forEach(t),Ybr=i(te),WF=n(te,"LI",{});var G9e=s(WF);z4e=n(G9e,"STRONG",{});var E4t=s(z4e);Kbr=r(E4t,"xlnet"),E4t.forEach(t),Zbr=r(G9e," \u2014 "),GX=n(G9e,"A",{href:!0});var y4t=s(GX);e2r=r(y4t,"TFXLNetForQuestionAnsweringSimple"),y4t.forEach(t),o2r=r(G9e," (XLNet model)"),G9e.forEach(t),te.forEach(t),r2r=i(ya),W4e=n(ya,"P",{});var w4t=s(W4e);t2r=r(w4t,"Examples:"),w4t.forEach(t),a2r=i(ya),m(nL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),fRe=i(c),Wc=n(c,"H2",{class:!0});var MPe=s(Wc);QF=n(MPe,"A",{id:!0,class:!0,href:!0});var A4t=s(QF);Q4e=n(A4t,"SPAN",{});var L4t=s(Q4e);m(sL.$$.fragment,L4t),L4t.forEach(t),A4t.forEach(t),n2r=i(MPe),H4e=n(MPe,"SPAN",{});var B4t=s(H4e);s2r=r(B4t,"TFAutoModelForVision2Seq"),B4t.forEach(t),MPe.forEach(t),mRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(lL.$$.fragment,li),l2r=i(li),Qc=n(li,"P",{});var rQ=s(Qc);i2r=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),U4e=n(rQ,"CODE",{});var x4t=s(U4e);d2r=r(x4t,"from_pretrained()"),x4t.forEach(t),c2r=r(rQ,"class method or the "),J4e=n(rQ,"CODE",{});var k4t=s(J4e);f2r=r(k4t,"from_config()"),k4t.forEach(t),m2r=r(rQ,`class
method.`),rQ.forEach(t),g2r=i(li),iL=n(li,"P",{});var EPe=s(iL);h2r=r(EPe,"This class cannot be instantiated directly using "),Y4e=n(EPe,"CODE",{});var R4t=s(Y4e);p2r=r(R4t,"__init__()"),R4t.forEach(t),_2r=r(EPe," (throws an error)."),EPe.forEach(t),u2r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(dL.$$.fragment,ii),b2r=i(ii),K4e=n(ii,"P",{});var S4t=s(K4e);v2r=r(S4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),S4t.forEach(t),T2r=i(ii),Hc=n(ii,"P",{});var tQ=s(Hc);F2r=r(tQ,`Note:
Loading a model from its configuration file does `),Z4e=n(tQ,"STRONG",{});var P4t=s(Z4e);C2r=r(P4t,"not"),P4t.forEach(t),M2r=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e1e=n(tQ,"CODE",{});var $4t=s(e1e);E2r=r($4t,"from_pretrained()"),$4t.forEach(t),y2r=r(tQ,"to load the model weights."),tQ.forEach(t),w2r=i(ii),o1e=n(ii,"P",{});var I4t=s(o1e);A2r=r(I4t,"Examples:"),I4t.forEach(t),L2r=i(ii),m(cL.$$.fragment,ii),ii.forEach(t),B2r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(fL.$$.fragment,wa),x2r=i(wa),r1e=n(wa,"P",{});var j4t=s(r1e);k2r=r(j4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),j4t.forEach(t),R2r=i(wa),An=n(wa,"P",{});var OE=s(An);S2r=r(OE,"The model class to instantiate is selected based on the "),t1e=n(OE,"CODE",{});var N4t=s(t1e);P2r=r(N4t,"model_type"),N4t.forEach(t),$2r=r(OE,` property of the config object (either
passed as an argument or loaded from `),a1e=n(OE,"CODE",{});var D4t=s(a1e);I2r=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),j2r=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(OE,"CODE",{});var q4t=s(n1e);N2r=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),D2r=r(OE,":"),OE.forEach(t),q2r=i(wa),s1e=n(wa,"UL",{});var O4t=s(s1e);HF=n(O4t,"LI",{});var X9e=s(HF);l1e=n(X9e,"STRONG",{});var G4t=s(l1e);O2r=r(G4t,"vision-encoder-decoder"),G4t.forEach(t),G2r=r(X9e," \u2014 "),XX=n(X9e,"A",{href:!0});var X4t=s(XX);X2r=r(X4t,"TFVisionEncoderDecoderModel"),X4t.forEach(t),V2r=r(X9e," (Vision Encoder decoder model)"),X9e.forEach(t),O4t.forEach(t),z2r=i(wa),i1e=n(wa,"P",{});var V4t=s(i1e);W2r=r(V4t,"Examples:"),V4t.forEach(t),Q2r=i(wa),m(mL.$$.fragment,wa),wa.forEach(t),li.forEach(t),gRe=i(c),Uc=n(c,"H2",{class:!0});var yPe=s(Uc);UF=n(yPe,"A",{id:!0,class:!0,href:!0});var z4t=s(UF);d1e=n(z4t,"SPAN",{});var W4t=s(d1e);m(gL.$$.fragment,W4t),W4t.forEach(t),z4t.forEach(t),H2r=i(yPe),c1e=n(yPe,"SPAN",{});var Q4t=s(c1e);U2r=r(Q4t,"TFAutoModelForSpeechSeq2Seq"),Q4t.forEach(t),yPe.forEach(t),hRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(hL.$$.fragment,di),J2r=i(di),Jc=n(di,"P",{});var aQ=s(Jc);Y2r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),f1e=n(aQ,"CODE",{});var H4t=s(f1e);K2r=r(H4t,"from_pretrained()"),H4t.forEach(t),Z2r=r(aQ,"class method or the "),m1e=n(aQ,"CODE",{});var U4t=s(m1e);evr=r(U4t,"from_config()"),U4t.forEach(t),ovr=r(aQ,`class
method.`),aQ.forEach(t),rvr=i(di),pL=n(di,"P",{});var wPe=s(pL);tvr=r(wPe,"This class cannot be instantiated directly using "),g1e=n(wPe,"CODE",{});var J4t=s(g1e);avr=r(J4t,"__init__()"),J4t.forEach(t),nvr=r(wPe," (throws an error)."),wPe.forEach(t),svr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(_L.$$.fragment,ci),lvr=i(ci),h1e=n(ci,"P",{});var Y4t=s(h1e);ivr=r(Y4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Y4t.forEach(t),dvr=i(ci),Yc=n(ci,"P",{});var nQ=s(Yc);cvr=r(nQ,`Note:
Loading a model from its configuration file does `),p1e=n(nQ,"STRONG",{});var K4t=s(p1e);fvr=r(K4t,"not"),K4t.forEach(t),mvr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_1e=n(nQ,"CODE",{});var Z4t=s(_1e);gvr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),hvr=r(nQ,"to load the model weights."),nQ.forEach(t),pvr=i(ci),u1e=n(ci,"P",{});var e1t=s(u1e);_vr=r(e1t,"Examples:"),e1t.forEach(t),uvr=i(ci),m(uL.$$.fragment,ci),ci.forEach(t),bvr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(bL.$$.fragment,Aa),vvr=i(Aa),b1e=n(Aa,"P",{});var o1t=s(b1e);Tvr=r(o1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),o1t.forEach(t),Fvr=i(Aa),Ln=n(Aa,"P",{});var GE=s(Ln);Cvr=r(GE,"The model class to instantiate is selected based on the "),v1e=n(GE,"CODE",{});var r1t=s(v1e);Mvr=r(r1t,"model_type"),r1t.forEach(t),Evr=r(GE,` property of the config object (either
passed as an argument or loaded from `),T1e=n(GE,"CODE",{});var t1t=s(T1e);yvr=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),wvr=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(GE,"CODE",{});var a1t=s(F1e);Avr=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),Lvr=r(GE,":"),GE.forEach(t),Bvr=i(Aa),C1e=n(Aa,"UL",{});var n1t=s(C1e);JF=n(n1t,"LI",{});var V9e=s(JF);M1e=n(V9e,"STRONG",{});var s1t=s(M1e);xvr=r(s1t,"speech_to_text"),s1t.forEach(t),kvr=r(V9e," \u2014 "),VX=n(V9e,"A",{href:!0});var l1t=s(VX);Rvr=r(l1t,"TFSpeech2TextForConditionalGeneration"),l1t.forEach(t),Svr=r(V9e," (Speech2Text model)"),V9e.forEach(t),n1t.forEach(t),Pvr=i(Aa),E1e=n(Aa,"P",{});var i1t=s(E1e);$vr=r(i1t,"Examples:"),i1t.forEach(t),Ivr=i(Aa),m(vL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),pRe=i(c),Kc=n(c,"H2",{class:!0});var APe=s(Kc);YF=n(APe,"A",{id:!0,class:!0,href:!0});var d1t=s(YF);y1e=n(d1t,"SPAN",{});var c1t=s(y1e);m(TL.$$.fragment,c1t),c1t.forEach(t),d1t.forEach(t),jvr=i(APe),w1e=n(APe,"SPAN",{});var f1t=s(w1e);Nvr=r(f1t,"FlaxAutoModel"),f1t.forEach(t),APe.forEach(t),_Re=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(FL.$$.fragment,fi),Dvr=i(fi),Zc=n(fi,"P",{});var sQ=s(Zc);qvr=r(sQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),A1e=n(sQ,"CODE",{});var m1t=s(A1e);Ovr=r(m1t,"from_pretrained()"),m1t.forEach(t),Gvr=r(sQ,"class method or the "),L1e=n(sQ,"CODE",{});var g1t=s(L1e);Xvr=r(g1t,"from_config()"),g1t.forEach(t),Vvr=r(sQ,`class
method.`),sQ.forEach(t),zvr=i(fi),CL=n(fi,"P",{});var LPe=s(CL);Wvr=r(LPe,"This class cannot be instantiated directly using "),B1e=n(LPe,"CODE",{});var h1t=s(B1e);Qvr=r(h1t,"__init__()"),h1t.forEach(t),Hvr=r(LPe," (throws an error)."),LPe.forEach(t),Uvr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(ML.$$.fragment,mi),Jvr=i(mi),x1e=n(mi,"P",{});var p1t=s(x1e);Yvr=r(p1t,"Instantiates one of the base model classes of the library from a configuration."),p1t.forEach(t),Kvr=i(mi),ef=n(mi,"P",{});var lQ=s(ef);Zvr=r(lQ,`Note:
Loading a model from its configuration file does `),k1e=n(lQ,"STRONG",{});var _1t=s(k1e);e6r=r(_1t,"not"),_1t.forEach(t),o6r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),R1e=n(lQ,"CODE",{});var u1t=s(R1e);r6r=r(u1t,"from_pretrained()"),u1t.forEach(t),t6r=r(lQ,"to load the model weights."),lQ.forEach(t),a6r=i(mi),S1e=n(mi,"P",{});var b1t=s(S1e);n6r=r(b1t,"Examples:"),b1t.forEach(t),s6r=i(mi),m(EL.$$.fragment,mi),mi.forEach(t),l6r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(yL.$$.fragment,La),i6r=i(La),P1e=n(La,"P",{});var v1t=s(P1e);d6r=r(v1t,"Instantiate one of the base model classes of the library from a pretrained model."),v1t.forEach(t),c6r=i(La),Bn=n(La,"P",{});var XE=s(Bn);f6r=r(XE,"The model class to instantiate is selected based on the "),$1e=n(XE,"CODE",{});var T1t=s($1e);m6r=r(T1t,"model_type"),T1t.forEach(t),g6r=r(XE,` property of the config object (either
passed as an argument or loaded from `),I1e=n(XE,"CODE",{});var F1t=s(I1e);h6r=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),p6r=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(XE,"CODE",{});var C1t=s(j1e);_6r=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),u6r=r(XE,":"),XE.forEach(t),b6r=i(La),z=n(La,"UL",{});var Q=s(z);KF=n(Q,"LI",{});var z9e=s(KF);N1e=n(z9e,"STRONG",{});var M1t=s(N1e);v6r=r(M1t,"albert"),M1t.forEach(t),T6r=r(z9e," \u2014 "),zX=n(z9e,"A",{href:!0});var E1t=s(zX);F6r=r(E1t,"FlaxAlbertModel"),E1t.forEach(t),C6r=r(z9e," (ALBERT model)"),z9e.forEach(t),M6r=i(Q),ZF=n(Q,"LI",{});var W9e=s(ZF);D1e=n(W9e,"STRONG",{});var y1t=s(D1e);E6r=r(y1t,"bart"),y1t.forEach(t),y6r=r(W9e," \u2014 "),WX=n(W9e,"A",{href:!0});var w1t=s(WX);w6r=r(w1t,"FlaxBartModel"),w1t.forEach(t),A6r=r(W9e," (BART model)"),W9e.forEach(t),L6r=i(Q),eC=n(Q,"LI",{});var Q9e=s(eC);q1e=n(Q9e,"STRONG",{});var A1t=s(q1e);B6r=r(A1t,"beit"),A1t.forEach(t),x6r=r(Q9e," \u2014 "),QX=n(Q9e,"A",{href:!0});var L1t=s(QX);k6r=r(L1t,"FlaxBeitModel"),L1t.forEach(t),R6r=r(Q9e," (BEiT model)"),Q9e.forEach(t),S6r=i(Q),oC=n(Q,"LI",{});var H9e=s(oC);O1e=n(H9e,"STRONG",{});var B1t=s(O1e);P6r=r(B1t,"bert"),B1t.forEach(t),$6r=r(H9e," \u2014 "),HX=n(H9e,"A",{href:!0});var x1t=s(HX);I6r=r(x1t,"FlaxBertModel"),x1t.forEach(t),j6r=r(H9e," (BERT model)"),H9e.forEach(t),N6r=i(Q),rC=n(Q,"LI",{});var U9e=s(rC);G1e=n(U9e,"STRONG",{});var k1t=s(G1e);D6r=r(k1t,"big_bird"),k1t.forEach(t),q6r=r(U9e," \u2014 "),UX=n(U9e,"A",{href:!0});var R1t=s(UX);O6r=r(R1t,"FlaxBigBirdModel"),R1t.forEach(t),G6r=r(U9e," (BigBird model)"),U9e.forEach(t),X6r=i(Q),tC=n(Q,"LI",{});var J9e=s(tC);X1e=n(J9e,"STRONG",{});var S1t=s(X1e);V6r=r(S1t,"blenderbot"),S1t.forEach(t),z6r=r(J9e," \u2014 "),JX=n(J9e,"A",{href:!0});var P1t=s(JX);W6r=r(P1t,"FlaxBlenderbotModel"),P1t.forEach(t),Q6r=r(J9e," (Blenderbot model)"),J9e.forEach(t),H6r=i(Q),aC=n(Q,"LI",{});var Y9e=s(aC);V1e=n(Y9e,"STRONG",{});var $1t=s(V1e);U6r=r($1t,"blenderbot-small"),$1t.forEach(t),J6r=r(Y9e," \u2014 "),YX=n(Y9e,"A",{href:!0});var I1t=s(YX);Y6r=r(I1t,"FlaxBlenderbotSmallModel"),I1t.forEach(t),K6r=r(Y9e," (BlenderbotSmall model)"),Y9e.forEach(t),Z6r=i(Q),nC=n(Q,"LI",{});var K9e=s(nC);z1e=n(K9e,"STRONG",{});var j1t=s(z1e);e0r=r(j1t,"clip"),j1t.forEach(t),o0r=r(K9e," \u2014 "),KX=n(K9e,"A",{href:!0});var N1t=s(KX);r0r=r(N1t,"FlaxCLIPModel"),N1t.forEach(t),t0r=r(K9e," (CLIP model)"),K9e.forEach(t),a0r=i(Q),sC=n(Q,"LI",{});var Z9e=s(sC);W1e=n(Z9e,"STRONG",{});var D1t=s(W1e);n0r=r(D1t,"distilbert"),D1t.forEach(t),s0r=r(Z9e," \u2014 "),ZX=n(Z9e,"A",{href:!0});var q1t=s(ZX);l0r=r(q1t,"FlaxDistilBertModel"),q1t.forEach(t),i0r=r(Z9e," (DistilBERT model)"),Z9e.forEach(t),d0r=i(Q),lC=n(Q,"LI",{});var eBe=s(lC);Q1e=n(eBe,"STRONG",{});var O1t=s(Q1e);c0r=r(O1t,"electra"),O1t.forEach(t),f0r=r(eBe," \u2014 "),eV=n(eBe,"A",{href:!0});var G1t=s(eV);m0r=r(G1t,"FlaxElectraModel"),G1t.forEach(t),g0r=r(eBe," (ELECTRA model)"),eBe.forEach(t),h0r=i(Q),iC=n(Q,"LI",{});var oBe=s(iC);H1e=n(oBe,"STRONG",{});var X1t=s(H1e);p0r=r(X1t,"gpt2"),X1t.forEach(t),_0r=r(oBe," \u2014 "),oV=n(oBe,"A",{href:!0});var V1t=s(oV);u0r=r(V1t,"FlaxGPT2Model"),V1t.forEach(t),b0r=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),v0r=i(Q),dC=n(Q,"LI",{});var rBe=s(dC);U1e=n(rBe,"STRONG",{});var z1t=s(U1e);T0r=r(z1t,"gpt_neo"),z1t.forEach(t),F0r=r(rBe," \u2014 "),rV=n(rBe,"A",{href:!0});var W1t=s(rV);C0r=r(W1t,"FlaxGPTNeoModel"),W1t.forEach(t),M0r=r(rBe," (GPT Neo model)"),rBe.forEach(t),E0r=i(Q),cC=n(Q,"LI",{});var tBe=s(cC);J1e=n(tBe,"STRONG",{});var Q1t=s(J1e);y0r=r(Q1t,"gptj"),Q1t.forEach(t),w0r=r(tBe," \u2014 "),tV=n(tBe,"A",{href:!0});var H1t=s(tV);A0r=r(H1t,"FlaxGPTJModel"),H1t.forEach(t),L0r=r(tBe," (GPT-J model)"),tBe.forEach(t),B0r=i(Q),fC=n(Q,"LI",{});var aBe=s(fC);Y1e=n(aBe,"STRONG",{});var U1t=s(Y1e);x0r=r(U1t,"marian"),U1t.forEach(t),k0r=r(aBe," \u2014 "),aV=n(aBe,"A",{href:!0});var J1t=s(aV);R0r=r(J1t,"FlaxMarianModel"),J1t.forEach(t),S0r=r(aBe," (Marian model)"),aBe.forEach(t),P0r=i(Q),mC=n(Q,"LI",{});var nBe=s(mC);K1e=n(nBe,"STRONG",{});var Y1t=s(K1e);$0r=r(Y1t,"mbart"),Y1t.forEach(t),I0r=r(nBe," \u2014 "),nV=n(nBe,"A",{href:!0});var K1t=s(nV);j0r=r(K1t,"FlaxMBartModel"),K1t.forEach(t),N0r=r(nBe," (mBART model)"),nBe.forEach(t),D0r=i(Q),gC=n(Q,"LI",{});var sBe=s(gC);Z1e=n(sBe,"STRONG",{});var Z1t=s(Z1e);q0r=r(Z1t,"mt5"),Z1t.forEach(t),O0r=r(sBe," \u2014 "),sV=n(sBe,"A",{href:!0});var ebt=s(sV);G0r=r(ebt,"FlaxMT5Model"),ebt.forEach(t),X0r=r(sBe," (mT5 model)"),sBe.forEach(t),V0r=i(Q),hC=n(Q,"LI",{});var lBe=s(hC);ebe=n(lBe,"STRONG",{});var obt=s(ebe);z0r=r(obt,"pegasus"),obt.forEach(t),W0r=r(lBe," \u2014 "),lV=n(lBe,"A",{href:!0});var rbt=s(lV);Q0r=r(rbt,"FlaxPegasusModel"),rbt.forEach(t),H0r=r(lBe," (Pegasus model)"),lBe.forEach(t),U0r=i(Q),pC=n(Q,"LI",{});var iBe=s(pC);obe=n(iBe,"STRONG",{});var tbt=s(obe);J0r=r(tbt,"roberta"),tbt.forEach(t),Y0r=r(iBe," \u2014 "),iV=n(iBe,"A",{href:!0});var abt=s(iV);K0r=r(abt,"FlaxRobertaModel"),abt.forEach(t),Z0r=r(iBe," (RoBERTa model)"),iBe.forEach(t),eTr=i(Q),_C=n(Q,"LI",{});var dBe=s(_C);rbe=n(dBe,"STRONG",{});var nbt=s(rbe);oTr=r(nbt,"roformer"),nbt.forEach(t),rTr=r(dBe," \u2014 "),dV=n(dBe,"A",{href:!0});var sbt=s(dV);tTr=r(sbt,"FlaxRoFormerModel"),sbt.forEach(t),aTr=r(dBe," (RoFormer model)"),dBe.forEach(t),nTr=i(Q),uC=n(Q,"LI",{});var cBe=s(uC);tbe=n(cBe,"STRONG",{});var lbt=s(tbe);sTr=r(lbt,"t5"),lbt.forEach(t),lTr=r(cBe," \u2014 "),cV=n(cBe,"A",{href:!0});var ibt=s(cV);iTr=r(ibt,"FlaxT5Model"),ibt.forEach(t),dTr=r(cBe," (T5 model)"),cBe.forEach(t),cTr=i(Q),bC=n(Q,"LI",{});var fBe=s(bC);abe=n(fBe,"STRONG",{});var dbt=s(abe);fTr=r(dbt,"vision-text-dual-encoder"),dbt.forEach(t),mTr=r(fBe," \u2014 "),fV=n(fBe,"A",{href:!0});var cbt=s(fV);gTr=r(cbt,"FlaxVisionTextDualEncoderModel"),cbt.forEach(t),hTr=r(fBe," (VisionTextDualEncoder model)"),fBe.forEach(t),pTr=i(Q),vC=n(Q,"LI",{});var mBe=s(vC);nbe=n(mBe,"STRONG",{});var fbt=s(nbe);_Tr=r(fbt,"vit"),fbt.forEach(t),uTr=r(mBe," \u2014 "),mV=n(mBe,"A",{href:!0});var mbt=s(mV);bTr=r(mbt,"FlaxViTModel"),mbt.forEach(t),vTr=r(mBe," (ViT model)"),mBe.forEach(t),TTr=i(Q),TC=n(Q,"LI",{});var gBe=s(TC);sbe=n(gBe,"STRONG",{});var gbt=s(sbe);FTr=r(gbt,"wav2vec2"),gbt.forEach(t),CTr=r(gBe," \u2014 "),gV=n(gBe,"A",{href:!0});var hbt=s(gV);MTr=r(hbt,"FlaxWav2Vec2Model"),hbt.forEach(t),ETr=r(gBe," (Wav2Vec2 model)"),gBe.forEach(t),yTr=i(Q),FC=n(Q,"LI",{});var hBe=s(FC);lbe=n(hBe,"STRONG",{});var pbt=s(lbe);wTr=r(pbt,"xglm"),pbt.forEach(t),ATr=r(hBe," \u2014 "),hV=n(hBe,"A",{href:!0});var _bt=s(hV);LTr=r(_bt,"FlaxXGLMModel"),_bt.forEach(t),BTr=r(hBe," (XGLM model)"),hBe.forEach(t),xTr=i(Q),CC=n(Q,"LI",{});var pBe=s(CC);ibe=n(pBe,"STRONG",{});var ubt=s(ibe);kTr=r(ubt,"xlm-roberta"),ubt.forEach(t),RTr=r(pBe," \u2014 "),pV=n(pBe,"A",{href:!0});var bbt=s(pV);STr=r(bbt,"FlaxXLMRobertaModel"),bbt.forEach(t),PTr=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),Q.forEach(t),$Tr=i(La),dbe=n(La,"P",{});var vbt=s(dbe);ITr=r(vbt,"Examples:"),vbt.forEach(t),jTr=i(La),m(wL.$$.fragment,La),La.forEach(t),fi.forEach(t),uRe=i(c),of=n(c,"H2",{class:!0});var BPe=s(of);MC=n(BPe,"A",{id:!0,class:!0,href:!0});var Tbt=s(MC);cbe=n(Tbt,"SPAN",{});var Fbt=s(cbe);m(AL.$$.fragment,Fbt),Fbt.forEach(t),Tbt.forEach(t),NTr=i(BPe),fbe=n(BPe,"SPAN",{});var Cbt=s(fbe);DTr=r(Cbt,"FlaxAutoModelForCausalLM"),Cbt.forEach(t),BPe.forEach(t),bRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(LL.$$.fragment,gi),qTr=i(gi),rf=n(gi,"P",{});var iQ=s(rf);OTr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mbe=n(iQ,"CODE",{});var Mbt=s(mbe);GTr=r(Mbt,"from_pretrained()"),Mbt.forEach(t),XTr=r(iQ,"class method or the "),gbe=n(iQ,"CODE",{});var Ebt=s(gbe);VTr=r(Ebt,"from_config()"),Ebt.forEach(t),zTr=r(iQ,`class
method.`),iQ.forEach(t),WTr=i(gi),BL=n(gi,"P",{});var xPe=s(BL);QTr=r(xPe,"This class cannot be instantiated directly using "),hbe=n(xPe,"CODE",{});var ybt=s(hbe);HTr=r(ybt,"__init__()"),ybt.forEach(t),UTr=r(xPe," (throws an error)."),xPe.forEach(t),JTr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(xL.$$.fragment,hi),YTr=i(hi),pbe=n(hi,"P",{});var wbt=s(pbe);KTr=r(wbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wbt.forEach(t),ZTr=i(hi),tf=n(hi,"P",{});var dQ=s(tf);eFr=r(dQ,`Note:
Loading a model from its configuration file does `),_be=n(dQ,"STRONG",{});var Abt=s(_be);oFr=r(Abt,"not"),Abt.forEach(t),rFr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ube=n(dQ,"CODE",{});var Lbt=s(ube);tFr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),aFr=r(dQ,"to load the model weights."),dQ.forEach(t),nFr=i(hi),bbe=n(hi,"P",{});var Bbt=s(bbe);sFr=r(Bbt,"Examples:"),Bbt.forEach(t),lFr=i(hi),m(kL.$$.fragment,hi),hi.forEach(t),iFr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(RL.$$.fragment,Ba),dFr=i(Ba),vbe=n(Ba,"P",{});var xbt=s(vbe);cFr=r(xbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xbt.forEach(t),fFr=i(Ba),xn=n(Ba,"P",{});var VE=s(xn);mFr=r(VE,"The model class to instantiate is selected based on the "),Tbe=n(VE,"CODE",{});var kbt=s(Tbe);gFr=r(kbt,"model_type"),kbt.forEach(t),hFr=r(VE,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(VE,"CODE",{});var Rbt=s(Fbe);pFr=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),_Fr=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(VE,"CODE",{});var Sbt=s(Cbe);uFr=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),bFr=r(VE,":"),VE.forEach(t),vFr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);EC=n(pi,"LI",{});var _Be=s(EC);Mbe=n(_Be,"STRONG",{});var Pbt=s(Mbe);TFr=r(Pbt,"bart"),Pbt.forEach(t),FFr=r(_Be," \u2014 "),_V=n(_Be,"A",{href:!0});var $bt=s(_V);CFr=r($bt,"FlaxBartForCausalLM"),$bt.forEach(t),MFr=r(_Be," (BART model)"),_Be.forEach(t),EFr=i(pi),yC=n(pi,"LI",{});var uBe=s(yC);Ebe=n(uBe,"STRONG",{});var Ibt=s(Ebe);yFr=r(Ibt,"gpt2"),Ibt.forEach(t),wFr=r(uBe," \u2014 "),uV=n(uBe,"A",{href:!0});var jbt=s(uV);AFr=r(jbt,"FlaxGPT2LMHeadModel"),jbt.forEach(t),LFr=r(uBe," (OpenAI GPT-2 model)"),uBe.forEach(t),BFr=i(pi),wC=n(pi,"LI",{});var bBe=s(wC);ybe=n(bBe,"STRONG",{});var Nbt=s(ybe);xFr=r(Nbt,"gpt_neo"),Nbt.forEach(t),kFr=r(bBe," \u2014 "),bV=n(bBe,"A",{href:!0});var Dbt=s(bV);RFr=r(Dbt,"FlaxGPTNeoForCausalLM"),Dbt.forEach(t),SFr=r(bBe," (GPT Neo model)"),bBe.forEach(t),PFr=i(pi),AC=n(pi,"LI",{});var vBe=s(AC);wbe=n(vBe,"STRONG",{});var qbt=s(wbe);$Fr=r(qbt,"gptj"),qbt.forEach(t),IFr=r(vBe," \u2014 "),vV=n(vBe,"A",{href:!0});var Obt=s(vV);jFr=r(Obt,"FlaxGPTJForCausalLM"),Obt.forEach(t),NFr=r(vBe," (GPT-J model)"),vBe.forEach(t),DFr=i(pi),LC=n(pi,"LI",{});var TBe=s(LC);Abe=n(TBe,"STRONG",{});var Gbt=s(Abe);qFr=r(Gbt,"xglm"),Gbt.forEach(t),OFr=r(TBe," \u2014 "),TV=n(TBe,"A",{href:!0});var Xbt=s(TV);GFr=r(Xbt,"FlaxXGLMForCausalLM"),Xbt.forEach(t),XFr=r(TBe," (XGLM model)"),TBe.forEach(t),pi.forEach(t),VFr=i(Ba),Lbe=n(Ba,"P",{});var Vbt=s(Lbe);zFr=r(Vbt,"Examples:"),Vbt.forEach(t),WFr=i(Ba),m(SL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),vRe=i(c),af=n(c,"H2",{class:!0});var kPe=s(af);BC=n(kPe,"A",{id:!0,class:!0,href:!0});var zbt=s(BC);Bbe=n(zbt,"SPAN",{});var Wbt=s(Bbe);m(PL.$$.fragment,Wbt),Wbt.forEach(t),zbt.forEach(t),QFr=i(kPe),xbe=n(kPe,"SPAN",{});var Qbt=s(xbe);HFr=r(Qbt,"FlaxAutoModelForPreTraining"),Qbt.forEach(t),kPe.forEach(t),TRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m($L.$$.fragment,_i),UFr=i(_i),nf=n(_i,"P",{});var cQ=s(nf);JFr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kbe=n(cQ,"CODE",{});var Hbt=s(kbe);YFr=r(Hbt,"from_pretrained()"),Hbt.forEach(t),KFr=r(cQ,"class method or the "),Rbe=n(cQ,"CODE",{});var Ubt=s(Rbe);ZFr=r(Ubt,"from_config()"),Ubt.forEach(t),eCr=r(cQ,`class
method.`),cQ.forEach(t),oCr=i(_i),IL=n(_i,"P",{});var RPe=s(IL);rCr=r(RPe,"This class cannot be instantiated directly using "),Sbe=n(RPe,"CODE",{});var Jbt=s(Sbe);tCr=r(Jbt,"__init__()"),Jbt.forEach(t),aCr=r(RPe," (throws an error)."),RPe.forEach(t),nCr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(jL.$$.fragment,ui),sCr=i(ui),Pbe=n(ui,"P",{});var Ybt=s(Pbe);lCr=r(Ybt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ybt.forEach(t),iCr=i(ui),sf=n(ui,"P",{});var fQ=s(sf);dCr=r(fQ,`Note:
Loading a model from its configuration file does `),$be=n(fQ,"STRONG",{});var Kbt=s($be);cCr=r(Kbt,"not"),Kbt.forEach(t),fCr=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ibe=n(fQ,"CODE",{});var Zbt=s(Ibe);mCr=r(Zbt,"from_pretrained()"),Zbt.forEach(t),gCr=r(fQ,"to load the model weights."),fQ.forEach(t),hCr=i(ui),jbe=n(ui,"P",{});var e2t=s(jbe);pCr=r(e2t,"Examples:"),e2t.forEach(t),_Cr=i(ui),m(NL.$$.fragment,ui),ui.forEach(t),uCr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(DL.$$.fragment,xa),bCr=i(xa),Nbe=n(xa,"P",{});var o2t=s(Nbe);vCr=r(o2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o2t.forEach(t),TCr=i(xa),kn=n(xa,"P",{});var zE=s(kn);FCr=r(zE,"The model class to instantiate is selected based on the "),Dbe=n(zE,"CODE",{});var r2t=s(Dbe);CCr=r(r2t,"model_type"),r2t.forEach(t),MCr=r(zE,` property of the config object (either
passed as an argument or loaded from `),qbe=n(zE,"CODE",{});var t2t=s(qbe);ECr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),yCr=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(zE,"CODE",{});var a2t=s(Obe);wCr=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),ACr=r(zE,":"),zE.forEach(t),LCr=i(xa),ce=n(xa,"UL",{});var he=s(ce);xC=n(he,"LI",{});var FBe=s(xC);Gbe=n(FBe,"STRONG",{});var n2t=s(Gbe);BCr=r(n2t,"albert"),n2t.forEach(t),xCr=r(FBe," \u2014 "),FV=n(FBe,"A",{href:!0});var s2t=s(FV);kCr=r(s2t,"FlaxAlbertForPreTraining"),s2t.forEach(t),RCr=r(FBe," (ALBERT model)"),FBe.forEach(t),SCr=i(he),kC=n(he,"LI",{});var CBe=s(kC);Xbe=n(CBe,"STRONG",{});var l2t=s(Xbe);PCr=r(l2t,"bart"),l2t.forEach(t),$Cr=r(CBe," \u2014 "),CV=n(CBe,"A",{href:!0});var i2t=s(CV);ICr=r(i2t,"FlaxBartForConditionalGeneration"),i2t.forEach(t),jCr=r(CBe," (BART model)"),CBe.forEach(t),NCr=i(he),RC=n(he,"LI",{});var MBe=s(RC);Vbe=n(MBe,"STRONG",{});var d2t=s(Vbe);DCr=r(d2t,"bert"),d2t.forEach(t),qCr=r(MBe," \u2014 "),MV=n(MBe,"A",{href:!0});var c2t=s(MV);OCr=r(c2t,"FlaxBertForPreTraining"),c2t.forEach(t),GCr=r(MBe," (BERT model)"),MBe.forEach(t),XCr=i(he),SC=n(he,"LI",{});var EBe=s(SC);zbe=n(EBe,"STRONG",{});var f2t=s(zbe);VCr=r(f2t,"big_bird"),f2t.forEach(t),zCr=r(EBe," \u2014 "),EV=n(EBe,"A",{href:!0});var m2t=s(EV);WCr=r(m2t,"FlaxBigBirdForPreTraining"),m2t.forEach(t),QCr=r(EBe," (BigBird model)"),EBe.forEach(t),HCr=i(he),PC=n(he,"LI",{});var yBe=s(PC);Wbe=n(yBe,"STRONG",{});var g2t=s(Wbe);UCr=r(g2t,"electra"),g2t.forEach(t),JCr=r(yBe," \u2014 "),yV=n(yBe,"A",{href:!0});var h2t=s(yV);YCr=r(h2t,"FlaxElectraForPreTraining"),h2t.forEach(t),KCr=r(yBe," (ELECTRA model)"),yBe.forEach(t),ZCr=i(he),$C=n(he,"LI",{});var wBe=s($C);Qbe=n(wBe,"STRONG",{});var p2t=s(Qbe);eMr=r(p2t,"mbart"),p2t.forEach(t),oMr=r(wBe," \u2014 "),wV=n(wBe,"A",{href:!0});var _2t=s(wV);rMr=r(_2t,"FlaxMBartForConditionalGeneration"),_2t.forEach(t),tMr=r(wBe," (mBART model)"),wBe.forEach(t),aMr=i(he),IC=n(he,"LI",{});var ABe=s(IC);Hbe=n(ABe,"STRONG",{});var u2t=s(Hbe);nMr=r(u2t,"mt5"),u2t.forEach(t),sMr=r(ABe," \u2014 "),AV=n(ABe,"A",{href:!0});var b2t=s(AV);lMr=r(b2t,"FlaxMT5ForConditionalGeneration"),b2t.forEach(t),iMr=r(ABe," (mT5 model)"),ABe.forEach(t),dMr=i(he),jC=n(he,"LI",{});var LBe=s(jC);Ube=n(LBe,"STRONG",{});var v2t=s(Ube);cMr=r(v2t,"roberta"),v2t.forEach(t),fMr=r(LBe," \u2014 "),LV=n(LBe,"A",{href:!0});var T2t=s(LV);mMr=r(T2t,"FlaxRobertaForMaskedLM"),T2t.forEach(t),gMr=r(LBe," (RoBERTa model)"),LBe.forEach(t),hMr=i(he),NC=n(he,"LI",{});var BBe=s(NC);Jbe=n(BBe,"STRONG",{});var F2t=s(Jbe);pMr=r(F2t,"roformer"),F2t.forEach(t),_Mr=r(BBe," \u2014 "),BV=n(BBe,"A",{href:!0});var C2t=s(BV);uMr=r(C2t,"FlaxRoFormerForMaskedLM"),C2t.forEach(t),bMr=r(BBe," (RoFormer model)"),BBe.forEach(t),vMr=i(he),DC=n(he,"LI",{});var xBe=s(DC);Ybe=n(xBe,"STRONG",{});var M2t=s(Ybe);TMr=r(M2t,"t5"),M2t.forEach(t),FMr=r(xBe," \u2014 "),xV=n(xBe,"A",{href:!0});var E2t=s(xV);CMr=r(E2t,"FlaxT5ForConditionalGeneration"),E2t.forEach(t),MMr=r(xBe," (T5 model)"),xBe.forEach(t),EMr=i(he),qC=n(he,"LI",{});var kBe=s(qC);Kbe=n(kBe,"STRONG",{});var y2t=s(Kbe);yMr=r(y2t,"wav2vec2"),y2t.forEach(t),wMr=r(kBe," \u2014 "),kV=n(kBe,"A",{href:!0});var w2t=s(kV);AMr=r(w2t,"FlaxWav2Vec2ForPreTraining"),w2t.forEach(t),LMr=r(kBe," (Wav2Vec2 model)"),kBe.forEach(t),BMr=i(he),OC=n(he,"LI",{});var RBe=s(OC);Zbe=n(RBe,"STRONG",{});var A2t=s(Zbe);xMr=r(A2t,"xlm-roberta"),A2t.forEach(t),kMr=r(RBe," \u2014 "),RV=n(RBe,"A",{href:!0});var L2t=s(RV);RMr=r(L2t,"FlaxXLMRobertaForMaskedLM"),L2t.forEach(t),SMr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),he.forEach(t),PMr=i(xa),e2e=n(xa,"P",{});var B2t=s(e2e);$Mr=r(B2t,"Examples:"),B2t.forEach(t),IMr=i(xa),m(qL.$$.fragment,xa),xa.forEach(t),_i.forEach(t),FRe=i(c),lf=n(c,"H2",{class:!0});var SPe=s(lf);GC=n(SPe,"A",{id:!0,class:!0,href:!0});var x2t=s(GC);o2e=n(x2t,"SPAN",{});var k2t=s(o2e);m(OL.$$.fragment,k2t),k2t.forEach(t),x2t.forEach(t),jMr=i(SPe),r2e=n(SPe,"SPAN",{});var R2t=s(r2e);NMr=r(R2t,"FlaxAutoModelForMaskedLM"),R2t.forEach(t),SPe.forEach(t),CRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(GL.$$.fragment,bi),DMr=i(bi),df=n(bi,"P",{});var mQ=s(df);qMr=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),t2e=n(mQ,"CODE",{});var S2t=s(t2e);OMr=r(S2t,"from_pretrained()"),S2t.forEach(t),GMr=r(mQ,"class method or the "),a2e=n(mQ,"CODE",{});var P2t=s(a2e);XMr=r(P2t,"from_config()"),P2t.forEach(t),VMr=r(mQ,`class
method.`),mQ.forEach(t),zMr=i(bi),XL=n(bi,"P",{});var PPe=s(XL);WMr=r(PPe,"This class cannot be instantiated directly using "),n2e=n(PPe,"CODE",{});var $2t=s(n2e);QMr=r($2t,"__init__()"),$2t.forEach(t),HMr=r(PPe," (throws an error)."),PPe.forEach(t),UMr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(VL.$$.fragment,vi),JMr=i(vi),s2e=n(vi,"P",{});var I2t=s(s2e);YMr=r(I2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I2t.forEach(t),KMr=i(vi),cf=n(vi,"P",{});var gQ=s(cf);ZMr=r(gQ,`Note:
Loading a model from its configuration file does `),l2e=n(gQ,"STRONG",{});var j2t=s(l2e);eEr=r(j2t,"not"),j2t.forEach(t),oEr=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),i2e=n(gQ,"CODE",{});var N2t=s(i2e);rEr=r(N2t,"from_pretrained()"),N2t.forEach(t),tEr=r(gQ,"to load the model weights."),gQ.forEach(t),aEr=i(vi),d2e=n(vi,"P",{});var D2t=s(d2e);nEr=r(D2t,"Examples:"),D2t.forEach(t),sEr=i(vi),m(zL.$$.fragment,vi),vi.forEach(t),lEr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(WL.$$.fragment,ka),iEr=i(ka),c2e=n(ka,"P",{});var q2t=s(c2e);dEr=r(q2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q2t.forEach(t),cEr=i(ka),Rn=n(ka,"P",{});var WE=s(Rn);fEr=r(WE,"The model class to instantiate is selected based on the "),f2e=n(WE,"CODE",{});var O2t=s(f2e);mEr=r(O2t,"model_type"),O2t.forEach(t),gEr=r(WE,` property of the config object (either
passed as an argument or loaded from `),m2e=n(WE,"CODE",{});var G2t=s(m2e);hEr=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),pEr=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(WE,"CODE",{});var X2t=s(g2e);_Er=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),uEr=r(WE,":"),WE.forEach(t),bEr=i(ka),be=n(ka,"UL",{});var we=s(be);XC=n(we,"LI",{});var SBe=s(XC);h2e=n(SBe,"STRONG",{});var V2t=s(h2e);vEr=r(V2t,"albert"),V2t.forEach(t),TEr=r(SBe," \u2014 "),SV=n(SBe,"A",{href:!0});var z2t=s(SV);FEr=r(z2t,"FlaxAlbertForMaskedLM"),z2t.forEach(t),CEr=r(SBe," (ALBERT model)"),SBe.forEach(t),MEr=i(we),VC=n(we,"LI",{});var PBe=s(VC);p2e=n(PBe,"STRONG",{});var W2t=s(p2e);EEr=r(W2t,"bart"),W2t.forEach(t),yEr=r(PBe," \u2014 "),PV=n(PBe,"A",{href:!0});var Q2t=s(PV);wEr=r(Q2t,"FlaxBartForConditionalGeneration"),Q2t.forEach(t),AEr=r(PBe," (BART model)"),PBe.forEach(t),LEr=i(we),zC=n(we,"LI",{});var $Be=s(zC);_2e=n($Be,"STRONG",{});var H2t=s(_2e);BEr=r(H2t,"bert"),H2t.forEach(t),xEr=r($Be," \u2014 "),$V=n($Be,"A",{href:!0});var U2t=s($V);kEr=r(U2t,"FlaxBertForMaskedLM"),U2t.forEach(t),REr=r($Be," (BERT model)"),$Be.forEach(t),SEr=i(we),WC=n(we,"LI",{});var IBe=s(WC);u2e=n(IBe,"STRONG",{});var J2t=s(u2e);PEr=r(J2t,"big_bird"),J2t.forEach(t),$Er=r(IBe," \u2014 "),IV=n(IBe,"A",{href:!0});var Y2t=s(IV);IEr=r(Y2t,"FlaxBigBirdForMaskedLM"),Y2t.forEach(t),jEr=r(IBe," (BigBird model)"),IBe.forEach(t),NEr=i(we),QC=n(we,"LI",{});var jBe=s(QC);b2e=n(jBe,"STRONG",{});var K2t=s(b2e);DEr=r(K2t,"distilbert"),K2t.forEach(t),qEr=r(jBe," \u2014 "),jV=n(jBe,"A",{href:!0});var Z2t=s(jV);OEr=r(Z2t,"FlaxDistilBertForMaskedLM"),Z2t.forEach(t),GEr=r(jBe," (DistilBERT model)"),jBe.forEach(t),XEr=i(we),HC=n(we,"LI",{});var NBe=s(HC);v2e=n(NBe,"STRONG",{});var evt=s(v2e);VEr=r(evt,"electra"),evt.forEach(t),zEr=r(NBe," \u2014 "),NV=n(NBe,"A",{href:!0});var ovt=s(NV);WEr=r(ovt,"FlaxElectraForMaskedLM"),ovt.forEach(t),QEr=r(NBe," (ELECTRA model)"),NBe.forEach(t),HEr=i(we),UC=n(we,"LI",{});var DBe=s(UC);T2e=n(DBe,"STRONG",{});var rvt=s(T2e);UEr=r(rvt,"mbart"),rvt.forEach(t),JEr=r(DBe," \u2014 "),DV=n(DBe,"A",{href:!0});var tvt=s(DV);YEr=r(tvt,"FlaxMBartForConditionalGeneration"),tvt.forEach(t),KEr=r(DBe," (mBART model)"),DBe.forEach(t),ZEr=i(we),JC=n(we,"LI",{});var qBe=s(JC);F2e=n(qBe,"STRONG",{});var avt=s(F2e);e3r=r(avt,"roberta"),avt.forEach(t),o3r=r(qBe," \u2014 "),qV=n(qBe,"A",{href:!0});var nvt=s(qV);r3r=r(nvt,"FlaxRobertaForMaskedLM"),nvt.forEach(t),t3r=r(qBe," (RoBERTa model)"),qBe.forEach(t),a3r=i(we),YC=n(we,"LI",{});var OBe=s(YC);C2e=n(OBe,"STRONG",{});var svt=s(C2e);n3r=r(svt,"roformer"),svt.forEach(t),s3r=r(OBe," \u2014 "),OV=n(OBe,"A",{href:!0});var lvt=s(OV);l3r=r(lvt,"FlaxRoFormerForMaskedLM"),lvt.forEach(t),i3r=r(OBe," (RoFormer model)"),OBe.forEach(t),d3r=i(we),KC=n(we,"LI",{});var GBe=s(KC);M2e=n(GBe,"STRONG",{});var ivt=s(M2e);c3r=r(ivt,"xlm-roberta"),ivt.forEach(t),f3r=r(GBe," \u2014 "),GV=n(GBe,"A",{href:!0});var dvt=s(GV);m3r=r(dvt,"FlaxXLMRobertaForMaskedLM"),dvt.forEach(t),g3r=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),we.forEach(t),h3r=i(ka),E2e=n(ka,"P",{});var cvt=s(E2e);p3r=r(cvt,"Examples:"),cvt.forEach(t),_3r=i(ka),m(QL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),MRe=i(c),ff=n(c,"H2",{class:!0});var $Pe=s(ff);ZC=n($Pe,"A",{id:!0,class:!0,href:!0});var fvt=s(ZC);y2e=n(fvt,"SPAN",{});var mvt=s(y2e);m(HL.$$.fragment,mvt),mvt.forEach(t),fvt.forEach(t),u3r=i($Pe),w2e=n($Pe,"SPAN",{});var gvt=s(w2e);b3r=r(gvt,"FlaxAutoModelForSeq2SeqLM"),gvt.forEach(t),$Pe.forEach(t),ERe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(UL.$$.fragment,Ti),v3r=i(Ti),mf=n(Ti,"P",{});var hQ=s(mf);T3r=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),A2e=n(hQ,"CODE",{});var hvt=s(A2e);F3r=r(hvt,"from_pretrained()"),hvt.forEach(t),C3r=r(hQ,"class method or the "),L2e=n(hQ,"CODE",{});var pvt=s(L2e);M3r=r(pvt,"from_config()"),pvt.forEach(t),E3r=r(hQ,`class
method.`),hQ.forEach(t),y3r=i(Ti),JL=n(Ti,"P",{});var IPe=s(JL);w3r=r(IPe,"This class cannot be instantiated directly using "),B2e=n(IPe,"CODE",{});var _vt=s(B2e);A3r=r(_vt,"__init__()"),_vt.forEach(t),L3r=r(IPe," (throws an error)."),IPe.forEach(t),B3r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(YL.$$.fragment,Fi),x3r=i(Fi),x2e=n(Fi,"P",{});var uvt=s(x2e);k3r=r(uvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uvt.forEach(t),R3r=i(Fi),gf=n(Fi,"P",{});var pQ=s(gf);S3r=r(pQ,`Note:
Loading a model from its configuration file does `),k2e=n(pQ,"STRONG",{});var bvt=s(k2e);P3r=r(bvt,"not"),bvt.forEach(t),$3r=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),R2e=n(pQ,"CODE",{});var vvt=s(R2e);I3r=r(vvt,"from_pretrained()"),vvt.forEach(t),j3r=r(pQ,"to load the model weights."),pQ.forEach(t),N3r=i(Fi),S2e=n(Fi,"P",{});var Tvt=s(S2e);D3r=r(Tvt,"Examples:"),Tvt.forEach(t),q3r=i(Fi),m(KL.$$.fragment,Fi),Fi.forEach(t),O3r=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(ZL.$$.fragment,Ra),G3r=i(Ra),P2e=n(Ra,"P",{});var Fvt=s(P2e);X3r=r(Fvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Fvt.forEach(t),V3r=i(Ra),Sn=n(Ra,"P",{});var QE=s(Sn);z3r=r(QE,"The model class to instantiate is selected based on the "),$2e=n(QE,"CODE",{});var Cvt=s($2e);W3r=r(Cvt,"model_type"),Cvt.forEach(t),Q3r=r(QE,` property of the config object (either
passed as an argument or loaded from `),I2e=n(QE,"CODE",{});var Mvt=s(I2e);H3r=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),U3r=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(QE,"CODE",{});var Evt=s(j2e);J3r=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),Y3r=r(QE,":"),QE.forEach(t),K3r=i(Ra),Ee=n(Ra,"UL",{});var lo=s(Ee);eM=n(lo,"LI",{});var XBe=s(eM);N2e=n(XBe,"STRONG",{});var yvt=s(N2e);Z3r=r(yvt,"bart"),yvt.forEach(t),e5r=r(XBe," \u2014 "),XV=n(XBe,"A",{href:!0});var wvt=s(XV);o5r=r(wvt,"FlaxBartForConditionalGeneration"),wvt.forEach(t),r5r=r(XBe," (BART model)"),XBe.forEach(t),t5r=i(lo),oM=n(lo,"LI",{});var VBe=s(oM);D2e=n(VBe,"STRONG",{});var Avt=s(D2e);a5r=r(Avt,"blenderbot"),Avt.forEach(t),n5r=r(VBe," \u2014 "),VV=n(VBe,"A",{href:!0});var Lvt=s(VV);s5r=r(Lvt,"FlaxBlenderbotForConditionalGeneration"),Lvt.forEach(t),l5r=r(VBe," (Blenderbot model)"),VBe.forEach(t),i5r=i(lo),rM=n(lo,"LI",{});var zBe=s(rM);q2e=n(zBe,"STRONG",{});var Bvt=s(q2e);d5r=r(Bvt,"blenderbot-small"),Bvt.forEach(t),c5r=r(zBe," \u2014 "),zV=n(zBe,"A",{href:!0});var xvt=s(zV);f5r=r(xvt,"FlaxBlenderbotSmallForConditionalGeneration"),xvt.forEach(t),m5r=r(zBe," (BlenderbotSmall model)"),zBe.forEach(t),g5r=i(lo),tM=n(lo,"LI",{});var WBe=s(tM);O2e=n(WBe,"STRONG",{});var kvt=s(O2e);h5r=r(kvt,"encoder-decoder"),kvt.forEach(t),p5r=r(WBe," \u2014 "),WV=n(WBe,"A",{href:!0});var Rvt=s(WV);_5r=r(Rvt,"FlaxEncoderDecoderModel"),Rvt.forEach(t),u5r=r(WBe," (Encoder decoder model)"),WBe.forEach(t),b5r=i(lo),aM=n(lo,"LI",{});var QBe=s(aM);G2e=n(QBe,"STRONG",{});var Svt=s(G2e);v5r=r(Svt,"marian"),Svt.forEach(t),T5r=r(QBe," \u2014 "),QV=n(QBe,"A",{href:!0});var Pvt=s(QV);F5r=r(Pvt,"FlaxMarianMTModel"),Pvt.forEach(t),C5r=r(QBe," (Marian model)"),QBe.forEach(t),M5r=i(lo),nM=n(lo,"LI",{});var HBe=s(nM);X2e=n(HBe,"STRONG",{});var $vt=s(X2e);E5r=r($vt,"mbart"),$vt.forEach(t),y5r=r(HBe," \u2014 "),HV=n(HBe,"A",{href:!0});var Ivt=s(HV);w5r=r(Ivt,"FlaxMBartForConditionalGeneration"),Ivt.forEach(t),A5r=r(HBe," (mBART model)"),HBe.forEach(t),L5r=i(lo),sM=n(lo,"LI",{});var UBe=s(sM);V2e=n(UBe,"STRONG",{});var jvt=s(V2e);B5r=r(jvt,"mt5"),jvt.forEach(t),x5r=r(UBe," \u2014 "),UV=n(UBe,"A",{href:!0});var Nvt=s(UV);k5r=r(Nvt,"FlaxMT5ForConditionalGeneration"),Nvt.forEach(t),R5r=r(UBe," (mT5 model)"),UBe.forEach(t),S5r=i(lo),lM=n(lo,"LI",{});var JBe=s(lM);z2e=n(JBe,"STRONG",{});var Dvt=s(z2e);P5r=r(Dvt,"pegasus"),Dvt.forEach(t),$5r=r(JBe," \u2014 "),JV=n(JBe,"A",{href:!0});var qvt=s(JV);I5r=r(qvt,"FlaxPegasusForConditionalGeneration"),qvt.forEach(t),j5r=r(JBe," (Pegasus model)"),JBe.forEach(t),N5r=i(lo),iM=n(lo,"LI",{});var YBe=s(iM);W2e=n(YBe,"STRONG",{});var Ovt=s(W2e);D5r=r(Ovt,"t5"),Ovt.forEach(t),q5r=r(YBe," \u2014 "),YV=n(YBe,"A",{href:!0});var Gvt=s(YV);O5r=r(Gvt,"FlaxT5ForConditionalGeneration"),Gvt.forEach(t),G5r=r(YBe," (T5 model)"),YBe.forEach(t),lo.forEach(t),X5r=i(Ra),Q2e=n(Ra,"P",{});var Xvt=s(Q2e);V5r=r(Xvt,"Examples:"),Xvt.forEach(t),z5r=i(Ra),m(e7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),yRe=i(c),hf=n(c,"H2",{class:!0});var jPe=s(hf);dM=n(jPe,"A",{id:!0,class:!0,href:!0});var Vvt=s(dM);H2e=n(Vvt,"SPAN",{});var zvt=s(H2e);m(o7.$$.fragment,zvt),zvt.forEach(t),Vvt.forEach(t),W5r=i(jPe),U2e=n(jPe,"SPAN",{});var Wvt=s(U2e);Q5r=r(Wvt,"FlaxAutoModelForSequenceClassification"),Wvt.forEach(t),jPe.forEach(t),wRe=i(c),jr=n(c,"DIV",{class:!0});var Ci=s(jr);m(r7.$$.fragment,Ci),H5r=i(Ci),pf=n(Ci,"P",{});var _Q=s(pf);U5r=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),J2e=n(_Q,"CODE",{});var Qvt=s(J2e);J5r=r(Qvt,"from_pretrained()"),Qvt.forEach(t),Y5r=r(_Q,"class method or the "),Y2e=n(_Q,"CODE",{});var Hvt=s(Y2e);K5r=r(Hvt,"from_config()"),Hvt.forEach(t),Z5r=r(_Q,`class
method.`),_Q.forEach(t),eyr=i(Ci),t7=n(Ci,"P",{});var NPe=s(t7);oyr=r(NPe,"This class cannot be instantiated directly using "),K2e=n(NPe,"CODE",{});var Uvt=s(K2e);ryr=r(Uvt,"__init__()"),Uvt.forEach(t),tyr=r(NPe," (throws an error)."),NPe.forEach(t),ayr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(a7.$$.fragment,Mi),nyr=i(Mi),Z2e=n(Mi,"P",{});var Jvt=s(Z2e);syr=r(Jvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jvt.forEach(t),lyr=i(Mi),_f=n(Mi,"P",{});var uQ=s(_f);iyr=r(uQ,`Note:
Loading a model from its configuration file does `),eve=n(uQ,"STRONG",{});var Yvt=s(eve);dyr=r(Yvt,"not"),Yvt.forEach(t),cyr=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ove=n(uQ,"CODE",{});var Kvt=s(ove);fyr=r(Kvt,"from_pretrained()"),Kvt.forEach(t),myr=r(uQ,"to load the model weights."),uQ.forEach(t),gyr=i(Mi),rve=n(Mi,"P",{});var Zvt=s(rve);hyr=r(Zvt,"Examples:"),Zvt.forEach(t),pyr=i(Mi),m(n7.$$.fragment,Mi),Mi.forEach(t),_yr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(s7.$$.fragment,Sa),uyr=i(Sa),tve=n(Sa,"P",{});var e6t=s(tve);byr=r(e6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e6t.forEach(t),vyr=i(Sa),Pn=n(Sa,"P",{});var HE=s(Pn);Tyr=r(HE,"The model class to instantiate is selected based on the "),ave=n(HE,"CODE",{});var o6t=s(ave);Fyr=r(o6t,"model_type"),o6t.forEach(t),Cyr=r(HE,` property of the config object (either
passed as an argument or loaded from `),nve=n(HE,"CODE",{});var r6t=s(nve);Myr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),Eyr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(HE,"CODE",{});var t6t=s(sve);yyr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),wyr=r(HE,":"),HE.forEach(t),Ayr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);cM=n(Ae,"LI",{});var KBe=s(cM);lve=n(KBe,"STRONG",{});var a6t=s(lve);Lyr=r(a6t,"albert"),a6t.forEach(t),Byr=r(KBe," \u2014 "),KV=n(KBe,"A",{href:!0});var n6t=s(KV);xyr=r(n6t,"FlaxAlbertForSequenceClassification"),n6t.forEach(t),kyr=r(KBe," (ALBERT model)"),KBe.forEach(t),Ryr=i(Ae),fM=n(Ae,"LI",{});var ZBe=s(fM);ive=n(ZBe,"STRONG",{});var s6t=s(ive);Syr=r(s6t,"bart"),s6t.forEach(t),Pyr=r(ZBe," \u2014 "),ZV=n(ZBe,"A",{href:!0});var l6t=s(ZV);$yr=r(l6t,"FlaxBartForSequenceClassification"),l6t.forEach(t),Iyr=r(ZBe," (BART model)"),ZBe.forEach(t),jyr=i(Ae),mM=n(Ae,"LI",{});var exe=s(mM);dve=n(exe,"STRONG",{});var i6t=s(dve);Nyr=r(i6t,"bert"),i6t.forEach(t),Dyr=r(exe," \u2014 "),ez=n(exe,"A",{href:!0});var d6t=s(ez);qyr=r(d6t,"FlaxBertForSequenceClassification"),d6t.forEach(t),Oyr=r(exe," (BERT model)"),exe.forEach(t),Gyr=i(Ae),gM=n(Ae,"LI",{});var oxe=s(gM);cve=n(oxe,"STRONG",{});var c6t=s(cve);Xyr=r(c6t,"big_bird"),c6t.forEach(t),Vyr=r(oxe," \u2014 "),oz=n(oxe,"A",{href:!0});var f6t=s(oz);zyr=r(f6t,"FlaxBigBirdForSequenceClassification"),f6t.forEach(t),Wyr=r(oxe," (BigBird model)"),oxe.forEach(t),Qyr=i(Ae),hM=n(Ae,"LI",{});var rxe=s(hM);fve=n(rxe,"STRONG",{});var m6t=s(fve);Hyr=r(m6t,"distilbert"),m6t.forEach(t),Uyr=r(rxe," \u2014 "),rz=n(rxe,"A",{href:!0});var g6t=s(rz);Jyr=r(g6t,"FlaxDistilBertForSequenceClassification"),g6t.forEach(t),Yyr=r(rxe," (DistilBERT model)"),rxe.forEach(t),Kyr=i(Ae),pM=n(Ae,"LI",{});var txe=s(pM);mve=n(txe,"STRONG",{});var h6t=s(mve);Zyr=r(h6t,"electra"),h6t.forEach(t),ewr=r(txe," \u2014 "),tz=n(txe,"A",{href:!0});var p6t=s(tz);owr=r(p6t,"FlaxElectraForSequenceClassification"),p6t.forEach(t),rwr=r(txe," (ELECTRA model)"),txe.forEach(t),twr=i(Ae),_M=n(Ae,"LI",{});var axe=s(_M);gve=n(axe,"STRONG",{});var _6t=s(gve);awr=r(_6t,"mbart"),_6t.forEach(t),nwr=r(axe," \u2014 "),az=n(axe,"A",{href:!0});var u6t=s(az);swr=r(u6t,"FlaxMBartForSequenceClassification"),u6t.forEach(t),lwr=r(axe," (mBART model)"),axe.forEach(t),iwr=i(Ae),uM=n(Ae,"LI",{});var nxe=s(uM);hve=n(nxe,"STRONG",{});var b6t=s(hve);dwr=r(b6t,"roberta"),b6t.forEach(t),cwr=r(nxe," \u2014 "),nz=n(nxe,"A",{href:!0});var v6t=s(nz);fwr=r(v6t,"FlaxRobertaForSequenceClassification"),v6t.forEach(t),mwr=r(nxe," (RoBERTa model)"),nxe.forEach(t),gwr=i(Ae),bM=n(Ae,"LI",{});var sxe=s(bM);pve=n(sxe,"STRONG",{});var T6t=s(pve);hwr=r(T6t,"roformer"),T6t.forEach(t),pwr=r(sxe," \u2014 "),sz=n(sxe,"A",{href:!0});var F6t=s(sz);_wr=r(F6t,"FlaxRoFormerForSequenceClassification"),F6t.forEach(t),uwr=r(sxe," (RoFormer model)"),sxe.forEach(t),bwr=i(Ae),vM=n(Ae,"LI",{});var lxe=s(vM);_ve=n(lxe,"STRONG",{});var C6t=s(_ve);vwr=r(C6t,"xlm-roberta"),C6t.forEach(t),Twr=r(lxe," \u2014 "),lz=n(lxe,"A",{href:!0});var M6t=s(lz);Fwr=r(M6t,"FlaxXLMRobertaForSequenceClassification"),M6t.forEach(t),Cwr=r(lxe," (XLM-RoBERTa model)"),lxe.forEach(t),Ae.forEach(t),Mwr=i(Sa),uve=n(Sa,"P",{});var E6t=s(uve);Ewr=r(E6t,"Examples:"),E6t.forEach(t),ywr=i(Sa),m(l7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),ARe=i(c),uf=n(c,"H2",{class:!0});var DPe=s(uf);TM=n(DPe,"A",{id:!0,class:!0,href:!0});var y6t=s(TM);bve=n(y6t,"SPAN",{});var w6t=s(bve);m(i7.$$.fragment,w6t),w6t.forEach(t),y6t.forEach(t),wwr=i(DPe),vve=n(DPe,"SPAN",{});var A6t=s(vve);Awr=r(A6t,"FlaxAutoModelForQuestionAnswering"),A6t.forEach(t),DPe.forEach(t),LRe=i(c),Nr=n(c,"DIV",{class:!0});var Ei=s(Nr);m(d7.$$.fragment,Ei),Lwr=i(Ei),bf=n(Ei,"P",{});var bQ=s(bf);Bwr=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tve=n(bQ,"CODE",{});var L6t=s(Tve);xwr=r(L6t,"from_pretrained()"),L6t.forEach(t),kwr=r(bQ,"class method or the "),Fve=n(bQ,"CODE",{});var B6t=s(Fve);Rwr=r(B6t,"from_config()"),B6t.forEach(t),Swr=r(bQ,`class
method.`),bQ.forEach(t),Pwr=i(Ei),c7=n(Ei,"P",{});var qPe=s(c7);$wr=r(qPe,"This class cannot be instantiated directly using "),Cve=n(qPe,"CODE",{});var x6t=s(Cve);Iwr=r(x6t,"__init__()"),x6t.forEach(t),jwr=r(qPe," (throws an error)."),qPe.forEach(t),Nwr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(f7.$$.fragment,yi),Dwr=i(yi),Mve=n(yi,"P",{});var k6t=s(Mve);qwr=r(k6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k6t.forEach(t),Owr=i(yi),vf=n(yi,"P",{});var vQ=s(vf);Gwr=r(vQ,`Note:
Loading a model from its configuration file does `),Eve=n(vQ,"STRONG",{});var R6t=s(Eve);Xwr=r(R6t,"not"),R6t.forEach(t),Vwr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yve=n(vQ,"CODE",{});var S6t=s(yve);zwr=r(S6t,"from_pretrained()"),S6t.forEach(t),Wwr=r(vQ,"to load the model weights."),vQ.forEach(t),Qwr=i(yi),wve=n(yi,"P",{});var P6t=s(wve);Hwr=r(P6t,"Examples:"),P6t.forEach(t),Uwr=i(yi),m(m7.$$.fragment,yi),yi.forEach(t),Jwr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(g7.$$.fragment,Pa),Ywr=i(Pa),Ave=n(Pa,"P",{});var $6t=s(Ave);Kwr=r($6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$6t.forEach(t),Zwr=i(Pa),$n=n(Pa,"P",{});var UE=s($n);eAr=r(UE,"The model class to instantiate is selected based on the "),Lve=n(UE,"CODE",{});var I6t=s(Lve);oAr=r(I6t,"model_type"),I6t.forEach(t),rAr=r(UE,` property of the config object (either
passed as an argument or loaded from `),Bve=n(UE,"CODE",{});var j6t=s(Bve);tAr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),aAr=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(UE,"CODE",{});var N6t=s(xve);nAr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),sAr=r(UE,":"),UE.forEach(t),lAr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);FM=n(Le,"LI",{});var ixe=s(FM);kve=n(ixe,"STRONG",{});var D6t=s(kve);iAr=r(D6t,"albert"),D6t.forEach(t),dAr=r(ixe," \u2014 "),iz=n(ixe,"A",{href:!0});var q6t=s(iz);cAr=r(q6t,"FlaxAlbertForQuestionAnswering"),q6t.forEach(t),fAr=r(ixe," (ALBERT model)"),ixe.forEach(t),mAr=i(Le),CM=n(Le,"LI",{});var dxe=s(CM);Rve=n(dxe,"STRONG",{});var O6t=s(Rve);gAr=r(O6t,"bart"),O6t.forEach(t),hAr=r(dxe," \u2014 "),dz=n(dxe,"A",{href:!0});var G6t=s(dz);pAr=r(G6t,"FlaxBartForQuestionAnswering"),G6t.forEach(t),_Ar=r(dxe," (BART model)"),dxe.forEach(t),uAr=i(Le),MM=n(Le,"LI",{});var cxe=s(MM);Sve=n(cxe,"STRONG",{});var X6t=s(Sve);bAr=r(X6t,"bert"),X6t.forEach(t),vAr=r(cxe," \u2014 "),cz=n(cxe,"A",{href:!0});var V6t=s(cz);TAr=r(V6t,"FlaxBertForQuestionAnswering"),V6t.forEach(t),FAr=r(cxe," (BERT model)"),cxe.forEach(t),CAr=i(Le),EM=n(Le,"LI",{});var fxe=s(EM);Pve=n(fxe,"STRONG",{});var z6t=s(Pve);MAr=r(z6t,"big_bird"),z6t.forEach(t),EAr=r(fxe," \u2014 "),fz=n(fxe,"A",{href:!0});var W6t=s(fz);yAr=r(W6t,"FlaxBigBirdForQuestionAnswering"),W6t.forEach(t),wAr=r(fxe," (BigBird model)"),fxe.forEach(t),AAr=i(Le),yM=n(Le,"LI",{});var mxe=s(yM);$ve=n(mxe,"STRONG",{});var Q6t=s($ve);LAr=r(Q6t,"distilbert"),Q6t.forEach(t),BAr=r(mxe," \u2014 "),mz=n(mxe,"A",{href:!0});var H6t=s(mz);xAr=r(H6t,"FlaxDistilBertForQuestionAnswering"),H6t.forEach(t),kAr=r(mxe," (DistilBERT model)"),mxe.forEach(t),RAr=i(Le),wM=n(Le,"LI",{});var gxe=s(wM);Ive=n(gxe,"STRONG",{});var U6t=s(Ive);SAr=r(U6t,"electra"),U6t.forEach(t),PAr=r(gxe," \u2014 "),gz=n(gxe,"A",{href:!0});var J6t=s(gz);$Ar=r(J6t,"FlaxElectraForQuestionAnswering"),J6t.forEach(t),IAr=r(gxe," (ELECTRA model)"),gxe.forEach(t),jAr=i(Le),AM=n(Le,"LI",{});var hxe=s(AM);jve=n(hxe,"STRONG",{});var Y6t=s(jve);NAr=r(Y6t,"mbart"),Y6t.forEach(t),DAr=r(hxe," \u2014 "),hz=n(hxe,"A",{href:!0});var K6t=s(hz);qAr=r(K6t,"FlaxMBartForQuestionAnswering"),K6t.forEach(t),OAr=r(hxe," (mBART model)"),hxe.forEach(t),GAr=i(Le),LM=n(Le,"LI",{});var pxe=s(LM);Nve=n(pxe,"STRONG",{});var Z6t=s(Nve);XAr=r(Z6t,"roberta"),Z6t.forEach(t),VAr=r(pxe," \u2014 "),pz=n(pxe,"A",{href:!0});var e0t=s(pz);zAr=r(e0t,"FlaxRobertaForQuestionAnswering"),e0t.forEach(t),WAr=r(pxe," (RoBERTa model)"),pxe.forEach(t),QAr=i(Le),BM=n(Le,"LI",{});var _xe=s(BM);Dve=n(_xe,"STRONG",{});var o0t=s(Dve);HAr=r(o0t,"roformer"),o0t.forEach(t),UAr=r(_xe," \u2014 "),_z=n(_xe,"A",{href:!0});var r0t=s(_z);JAr=r(r0t,"FlaxRoFormerForQuestionAnswering"),r0t.forEach(t),YAr=r(_xe," (RoFormer model)"),_xe.forEach(t),KAr=i(Le),xM=n(Le,"LI",{});var uxe=s(xM);qve=n(uxe,"STRONG",{});var t0t=s(qve);ZAr=r(t0t,"xlm-roberta"),t0t.forEach(t),eLr=r(uxe," \u2014 "),uz=n(uxe,"A",{href:!0});var a0t=s(uz);oLr=r(a0t,"FlaxXLMRobertaForQuestionAnswering"),a0t.forEach(t),rLr=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),Le.forEach(t),tLr=i(Pa),Ove=n(Pa,"P",{});var n0t=s(Ove);aLr=r(n0t,"Examples:"),n0t.forEach(t),nLr=i(Pa),m(h7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),BRe=i(c),Tf=n(c,"H2",{class:!0});var OPe=s(Tf);kM=n(OPe,"A",{id:!0,class:!0,href:!0});var s0t=s(kM);Gve=n(s0t,"SPAN",{});var l0t=s(Gve);m(p7.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),sLr=i(OPe),Xve=n(OPe,"SPAN",{});var i0t=s(Xve);lLr=r(i0t,"FlaxAutoModelForTokenClassification"),i0t.forEach(t),OPe.forEach(t),xRe=i(c),Dr=n(c,"DIV",{class:!0});var wi=s(Dr);m(_7.$$.fragment,wi),iLr=i(wi),Ff=n(wi,"P",{});var TQ=s(Ff);dLr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vve=n(TQ,"CODE",{});var d0t=s(Vve);cLr=r(d0t,"from_pretrained()"),d0t.forEach(t),fLr=r(TQ,"class method or the "),zve=n(TQ,"CODE",{});var c0t=s(zve);mLr=r(c0t,"from_config()"),c0t.forEach(t),gLr=r(TQ,`class
method.`),TQ.forEach(t),hLr=i(wi),u7=n(wi,"P",{});var GPe=s(u7);pLr=r(GPe,"This class cannot be instantiated directly using "),Wve=n(GPe,"CODE",{});var f0t=s(Wve);_Lr=r(f0t,"__init__()"),f0t.forEach(t),uLr=r(GPe," (throws an error)."),GPe.forEach(t),bLr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(b7.$$.fragment,Ai),vLr=i(Ai),Qve=n(Ai,"P",{});var m0t=s(Qve);TLr=r(m0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m0t.forEach(t),FLr=i(Ai),Cf=n(Ai,"P",{});var FQ=s(Cf);CLr=r(FQ,`Note:
Loading a model from its configuration file does `),Hve=n(FQ,"STRONG",{});var g0t=s(Hve);MLr=r(g0t,"not"),g0t.forEach(t),ELr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uve=n(FQ,"CODE",{});var h0t=s(Uve);yLr=r(h0t,"from_pretrained()"),h0t.forEach(t),wLr=r(FQ,"to load the model weights."),FQ.forEach(t),ALr=i(Ai),Jve=n(Ai,"P",{});var p0t=s(Jve);LLr=r(p0t,"Examples:"),p0t.forEach(t),BLr=i(Ai),m(v7.$$.fragment,Ai),Ai.forEach(t),xLr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(T7.$$.fragment,$a),kLr=i($a),Yve=n($a,"P",{});var _0t=s(Yve);RLr=r(_0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_0t.forEach(t),SLr=i($a),In=n($a,"P",{});var JE=s(In);PLr=r(JE,"The model class to instantiate is selected based on the "),Kve=n(JE,"CODE",{});var u0t=s(Kve);$Lr=r(u0t,"model_type"),u0t.forEach(t),ILr=r(JE,` property of the config object (either
passed as an argument or loaded from `),Zve=n(JE,"CODE",{});var b0t=s(Zve);jLr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),NLr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=n(JE,"CODE",{});var v0t=s(e6e);DLr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),qLr=r(JE,":"),JE.forEach(t),OLr=i($a),Se=n($a,"UL",{});var Go=s(Se);RM=n(Go,"LI",{});var bxe=s(RM);o6e=n(bxe,"STRONG",{});var T0t=s(o6e);GLr=r(T0t,"albert"),T0t.forEach(t),XLr=r(bxe," \u2014 "),bz=n(bxe,"A",{href:!0});var F0t=s(bz);VLr=r(F0t,"FlaxAlbertForTokenClassification"),F0t.forEach(t),zLr=r(bxe," (ALBERT model)"),bxe.forEach(t),WLr=i(Go),SM=n(Go,"LI",{});var vxe=s(SM);r6e=n(vxe,"STRONG",{});var C0t=s(r6e);QLr=r(C0t,"bert"),C0t.forEach(t),HLr=r(vxe," \u2014 "),vz=n(vxe,"A",{href:!0});var M0t=s(vz);ULr=r(M0t,"FlaxBertForTokenClassification"),M0t.forEach(t),JLr=r(vxe," (BERT model)"),vxe.forEach(t),YLr=i(Go),PM=n(Go,"LI",{});var Txe=s(PM);t6e=n(Txe,"STRONG",{});var E0t=s(t6e);KLr=r(E0t,"big_bird"),E0t.forEach(t),ZLr=r(Txe," \u2014 "),Tz=n(Txe,"A",{href:!0});var y0t=s(Tz);e7r=r(y0t,"FlaxBigBirdForTokenClassification"),y0t.forEach(t),o7r=r(Txe," (BigBird model)"),Txe.forEach(t),r7r=i(Go),$M=n(Go,"LI",{});var Fxe=s($M);a6e=n(Fxe,"STRONG",{});var w0t=s(a6e);t7r=r(w0t,"distilbert"),w0t.forEach(t),a7r=r(Fxe," \u2014 "),Fz=n(Fxe,"A",{href:!0});var A0t=s(Fz);n7r=r(A0t,"FlaxDistilBertForTokenClassification"),A0t.forEach(t),s7r=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),l7r=i(Go),IM=n(Go,"LI",{});var Cxe=s(IM);n6e=n(Cxe,"STRONG",{});var L0t=s(n6e);i7r=r(L0t,"electra"),L0t.forEach(t),d7r=r(Cxe," \u2014 "),Cz=n(Cxe,"A",{href:!0});var B0t=s(Cz);c7r=r(B0t,"FlaxElectraForTokenClassification"),B0t.forEach(t),f7r=r(Cxe," (ELECTRA model)"),Cxe.forEach(t),m7r=i(Go),jM=n(Go,"LI",{});var Mxe=s(jM);s6e=n(Mxe,"STRONG",{});var x0t=s(s6e);g7r=r(x0t,"roberta"),x0t.forEach(t),h7r=r(Mxe," \u2014 "),Mz=n(Mxe,"A",{href:!0});var k0t=s(Mz);p7r=r(k0t,"FlaxRobertaForTokenClassification"),k0t.forEach(t),_7r=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),u7r=i(Go),NM=n(Go,"LI",{});var Exe=s(NM);l6e=n(Exe,"STRONG",{});var R0t=s(l6e);b7r=r(R0t,"roformer"),R0t.forEach(t),v7r=r(Exe," \u2014 "),Ez=n(Exe,"A",{href:!0});var S0t=s(Ez);T7r=r(S0t,"FlaxRoFormerForTokenClassification"),S0t.forEach(t),F7r=r(Exe," (RoFormer model)"),Exe.forEach(t),C7r=i(Go),DM=n(Go,"LI",{});var yxe=s(DM);i6e=n(yxe,"STRONG",{});var P0t=s(i6e);M7r=r(P0t,"xlm-roberta"),P0t.forEach(t),E7r=r(yxe," \u2014 "),yz=n(yxe,"A",{href:!0});var $0t=s(yz);y7r=r($0t,"FlaxXLMRobertaForTokenClassification"),$0t.forEach(t),w7r=r(yxe," (XLM-RoBERTa model)"),yxe.forEach(t),Go.forEach(t),A7r=i($a),d6e=n($a,"P",{});var I0t=s(d6e);L7r=r(I0t,"Examples:"),I0t.forEach(t),B7r=i($a),m(F7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),kRe=i(c),Mf=n(c,"H2",{class:!0});var XPe=s(Mf);qM=n(XPe,"A",{id:!0,class:!0,href:!0});var j0t=s(qM);c6e=n(j0t,"SPAN",{});var N0t=s(c6e);m(C7.$$.fragment,N0t),N0t.forEach(t),j0t.forEach(t),x7r=i(XPe),f6e=n(XPe,"SPAN",{});var D0t=s(f6e);k7r=r(D0t,"FlaxAutoModelForMultipleChoice"),D0t.forEach(t),XPe.forEach(t),RRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(M7.$$.fragment,Li),R7r=i(Li),Ef=n(Li,"P",{});var CQ=s(Ef);S7r=r(CQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),m6e=n(CQ,"CODE",{});var q0t=s(m6e);P7r=r(q0t,"from_pretrained()"),q0t.forEach(t),$7r=r(CQ,"class method or the "),g6e=n(CQ,"CODE",{});var O0t=s(g6e);I7r=r(O0t,"from_config()"),O0t.forEach(t),j7r=r(CQ,`class
method.`),CQ.forEach(t),N7r=i(Li),E7=n(Li,"P",{});var VPe=s(E7);D7r=r(VPe,"This class cannot be instantiated directly using "),h6e=n(VPe,"CODE",{});var G0t=s(h6e);q7r=r(G0t,"__init__()"),G0t.forEach(t),O7r=r(VPe," (throws an error)."),VPe.forEach(t),G7r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(y7.$$.fragment,Bi),X7r=i(Bi),p6e=n(Bi,"P",{});var X0t=s(p6e);V7r=r(X0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),X0t.forEach(t),z7r=i(Bi),yf=n(Bi,"P",{});var MQ=s(yf);W7r=r(MQ,`Note:
Loading a model from its configuration file does `),_6e=n(MQ,"STRONG",{});var V0t=s(_6e);Q7r=r(V0t,"not"),V0t.forEach(t),H7r=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u6e=n(MQ,"CODE",{});var z0t=s(u6e);U7r=r(z0t,"from_pretrained()"),z0t.forEach(t),J7r=r(MQ,"to load the model weights."),MQ.forEach(t),Y7r=i(Bi),b6e=n(Bi,"P",{});var W0t=s(b6e);K7r=r(W0t,"Examples:"),W0t.forEach(t),Z7r=i(Bi),m(w7.$$.fragment,Bi),Bi.forEach(t),e8r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(A7.$$.fragment,Ia),o8r=i(Ia),v6e=n(Ia,"P",{});var Q0t=s(v6e);r8r=r(Q0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q0t.forEach(t),t8r=i(Ia),jn=n(Ia,"P",{});var YE=s(jn);a8r=r(YE,"The model class to instantiate is selected based on the "),T6e=n(YE,"CODE",{});var H0t=s(T6e);n8r=r(H0t,"model_type"),H0t.forEach(t),s8r=r(YE,` property of the config object (either
passed as an argument or loaded from `),F6e=n(YE,"CODE",{});var U0t=s(F6e);l8r=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),i8r=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(YE,"CODE",{});var J0t=s(C6e);d8r=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),c8r=r(YE,":"),YE.forEach(t),f8r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);OM=n(Xo,"LI",{});var wxe=s(OM);M6e=n(wxe,"STRONG",{});var Y0t=s(M6e);m8r=r(Y0t,"albert"),Y0t.forEach(t),g8r=r(wxe," \u2014 "),wz=n(wxe,"A",{href:!0});var K0t=s(wz);h8r=r(K0t,"FlaxAlbertForMultipleChoice"),K0t.forEach(t),p8r=r(wxe," (ALBERT model)"),wxe.forEach(t),_8r=i(Xo),GM=n(Xo,"LI",{});var Axe=s(GM);E6e=n(Axe,"STRONG",{});var Z0t=s(E6e);u8r=r(Z0t,"bert"),Z0t.forEach(t),b8r=r(Axe," \u2014 "),Az=n(Axe,"A",{href:!0});var eTt=s(Az);v8r=r(eTt,"FlaxBertForMultipleChoice"),eTt.forEach(t),T8r=r(Axe," (BERT model)"),Axe.forEach(t),F8r=i(Xo),XM=n(Xo,"LI",{});var Lxe=s(XM);y6e=n(Lxe,"STRONG",{});var oTt=s(y6e);C8r=r(oTt,"big_bird"),oTt.forEach(t),M8r=r(Lxe," \u2014 "),Lz=n(Lxe,"A",{href:!0});var rTt=s(Lz);E8r=r(rTt,"FlaxBigBirdForMultipleChoice"),rTt.forEach(t),y8r=r(Lxe," (BigBird model)"),Lxe.forEach(t),w8r=i(Xo),VM=n(Xo,"LI",{});var Bxe=s(VM);w6e=n(Bxe,"STRONG",{});var tTt=s(w6e);A8r=r(tTt,"distilbert"),tTt.forEach(t),L8r=r(Bxe," \u2014 "),Bz=n(Bxe,"A",{href:!0});var aTt=s(Bz);B8r=r(aTt,"FlaxDistilBertForMultipleChoice"),aTt.forEach(t),x8r=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),k8r=i(Xo),zM=n(Xo,"LI",{});var xxe=s(zM);A6e=n(xxe,"STRONG",{});var nTt=s(A6e);R8r=r(nTt,"electra"),nTt.forEach(t),S8r=r(xxe," \u2014 "),xz=n(xxe,"A",{href:!0});var sTt=s(xz);P8r=r(sTt,"FlaxElectraForMultipleChoice"),sTt.forEach(t),$8r=r(xxe," (ELECTRA model)"),xxe.forEach(t),I8r=i(Xo),WM=n(Xo,"LI",{});var kxe=s(WM);L6e=n(kxe,"STRONG",{});var lTt=s(L6e);j8r=r(lTt,"roberta"),lTt.forEach(t),N8r=r(kxe," \u2014 "),kz=n(kxe,"A",{href:!0});var iTt=s(kz);D8r=r(iTt,"FlaxRobertaForMultipleChoice"),iTt.forEach(t),q8r=r(kxe," (RoBERTa model)"),kxe.forEach(t),O8r=i(Xo),QM=n(Xo,"LI",{});var Rxe=s(QM);B6e=n(Rxe,"STRONG",{});var dTt=s(B6e);G8r=r(dTt,"roformer"),dTt.forEach(t),X8r=r(Rxe," \u2014 "),Rz=n(Rxe,"A",{href:!0});var cTt=s(Rz);V8r=r(cTt,"FlaxRoFormerForMultipleChoice"),cTt.forEach(t),z8r=r(Rxe," (RoFormer model)"),Rxe.forEach(t),W8r=i(Xo),HM=n(Xo,"LI",{});var Sxe=s(HM);x6e=n(Sxe,"STRONG",{});var fTt=s(x6e);Q8r=r(fTt,"xlm-roberta"),fTt.forEach(t),H8r=r(Sxe," \u2014 "),Sz=n(Sxe,"A",{href:!0});var mTt=s(Sz);U8r=r(mTt,"FlaxXLMRobertaForMultipleChoice"),mTt.forEach(t),J8r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Xo.forEach(t),Y8r=i(Ia),k6e=n(Ia,"P",{});var gTt=s(k6e);K8r=r(gTt,"Examples:"),gTt.forEach(t),Z8r=i(Ia),m(L7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),SRe=i(c),wf=n(c,"H2",{class:!0});var zPe=s(wf);UM=n(zPe,"A",{id:!0,class:!0,href:!0});var hTt=s(UM);R6e=n(hTt,"SPAN",{});var pTt=s(R6e);m(B7.$$.fragment,pTt),pTt.forEach(t),hTt.forEach(t),e9r=i(zPe),S6e=n(zPe,"SPAN",{});var _Tt=s(S6e);o9r=r(_Tt,"FlaxAutoModelForNextSentencePrediction"),_Tt.forEach(t),zPe.forEach(t),PRe=i(c),Or=n(c,"DIV",{class:!0});var xi=s(Or);m(x7.$$.fragment,xi),r9r=i(xi),Af=n(xi,"P",{});var EQ=s(Af);t9r=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),P6e=n(EQ,"CODE",{});var uTt=s(P6e);a9r=r(uTt,"from_pretrained()"),uTt.forEach(t),n9r=r(EQ,"class method or the "),$6e=n(EQ,"CODE",{});var bTt=s($6e);s9r=r(bTt,"from_config()"),bTt.forEach(t),l9r=r(EQ,`class
method.`),EQ.forEach(t),i9r=i(xi),k7=n(xi,"P",{});var WPe=s(k7);d9r=r(WPe,"This class cannot be instantiated directly using "),I6e=n(WPe,"CODE",{});var vTt=s(I6e);c9r=r(vTt,"__init__()"),vTt.forEach(t),f9r=r(WPe," (throws an error)."),WPe.forEach(t),m9r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(R7.$$.fragment,ki),g9r=i(ki),j6e=n(ki,"P",{});var TTt=s(j6e);h9r=r(TTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TTt.forEach(t),p9r=i(ki),Lf=n(ki,"P",{});var yQ=s(Lf);_9r=r(yQ,`Note:
Loading a model from its configuration file does `),N6e=n(yQ,"STRONG",{});var FTt=s(N6e);u9r=r(FTt,"not"),FTt.forEach(t),b9r=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),D6e=n(yQ,"CODE",{});var CTt=s(D6e);v9r=r(CTt,"from_pretrained()"),CTt.forEach(t),T9r=r(yQ,"to load the model weights."),yQ.forEach(t),F9r=i(ki),q6e=n(ki,"P",{});var MTt=s(q6e);C9r=r(MTt,"Examples:"),MTt.forEach(t),M9r=i(ki),m(S7.$$.fragment,ki),ki.forEach(t),E9r=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);m(P7.$$.fragment,ja),y9r=i(ja),O6e=n(ja,"P",{});var ETt=s(O6e);w9r=r(ETt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ETt.forEach(t),A9r=i(ja),Nn=n(ja,"P",{});var KE=s(Nn);L9r=r(KE,"The model class to instantiate is selected based on the "),G6e=n(KE,"CODE",{});var yTt=s(G6e);B9r=r(yTt,"model_type"),yTt.forEach(t),x9r=r(KE,` property of the config object (either
passed as an argument or loaded from `),X6e=n(KE,"CODE",{});var wTt=s(X6e);k9r=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),R9r=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=n(KE,"CODE",{});var ATt=s(V6e);S9r=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),P9r=r(KE,":"),KE.forEach(t),$9r=i(ja),z6e=n(ja,"UL",{});var LTt=s(z6e);JM=n(LTt,"LI",{});var Pxe=s(JM);W6e=n(Pxe,"STRONG",{});var BTt=s(W6e);I9r=r(BTt,"bert"),BTt.forEach(t),j9r=r(Pxe," \u2014 "),Pz=n(Pxe,"A",{href:!0});var xTt=s(Pz);N9r=r(xTt,"FlaxBertForNextSentencePrediction"),xTt.forEach(t),D9r=r(Pxe," (BERT model)"),Pxe.forEach(t),LTt.forEach(t),q9r=i(ja),Q6e=n(ja,"P",{});var kTt=s(Q6e);O9r=r(kTt,"Examples:"),kTt.forEach(t),G9r=i(ja),m($7.$$.fragment,ja),ja.forEach(t),xi.forEach(t),$Re=i(c),Bf=n(c,"H2",{class:!0});var QPe=s(Bf);YM=n(QPe,"A",{id:!0,class:!0,href:!0});var RTt=s(YM);H6e=n(RTt,"SPAN",{});var STt=s(H6e);m(I7.$$.fragment,STt),STt.forEach(t),RTt.forEach(t),X9r=i(QPe),U6e=n(QPe,"SPAN",{});var PTt=s(U6e);V9r=r(PTt,"FlaxAutoModelForImageClassification"),PTt.forEach(t),QPe.forEach(t),IRe=i(c),Gr=n(c,"DIV",{class:!0});var Ri=s(Gr);m(j7.$$.fragment,Ri),z9r=i(Ri),xf=n(Ri,"P",{});var wQ=s(xf);W9r=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),J6e=n(wQ,"CODE",{});var $Tt=s(J6e);Q9r=r($Tt,"from_pretrained()"),$Tt.forEach(t),H9r=r(wQ,"class method or the "),Y6e=n(wQ,"CODE",{});var ITt=s(Y6e);U9r=r(ITt,"from_config()"),ITt.forEach(t),J9r=r(wQ,`class
method.`),wQ.forEach(t),Y9r=i(Ri),N7=n(Ri,"P",{});var HPe=s(N7);K9r=r(HPe,"This class cannot be instantiated directly using "),K6e=n(HPe,"CODE",{});var jTt=s(K6e);Z9r=r(jTt,"__init__()"),jTt.forEach(t),eBr=r(HPe," (throws an error)."),HPe.forEach(t),oBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(D7.$$.fragment,Si),rBr=i(Si),Z6e=n(Si,"P",{});var NTt=s(Z6e);tBr=r(NTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NTt.forEach(t),aBr=i(Si),kf=n(Si,"P",{});var AQ=s(kf);nBr=r(AQ,`Note:
Loading a model from its configuration file does `),e0e=n(AQ,"STRONG",{});var DTt=s(e0e);sBr=r(DTt,"not"),DTt.forEach(t),lBr=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),o0e=n(AQ,"CODE",{});var qTt=s(o0e);iBr=r(qTt,"from_pretrained()"),qTt.forEach(t),dBr=r(AQ,"to load the model weights."),AQ.forEach(t),cBr=i(Si),r0e=n(Si,"P",{});var OTt=s(r0e);fBr=r(OTt,"Examples:"),OTt.forEach(t),mBr=i(Si),m(q7.$$.fragment,Si),Si.forEach(t),gBr=i(Ri),jo=n(Ri,"DIV",{class:!0});var Na=s(jo);m(O7.$$.fragment,Na),hBr=i(Na),t0e=n(Na,"P",{});var GTt=s(t0e);pBr=r(GTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GTt.forEach(t),_Br=i(Na),Dn=n(Na,"P",{});var ZE=s(Dn);uBr=r(ZE,"The model class to instantiate is selected based on the "),a0e=n(ZE,"CODE",{});var XTt=s(a0e);bBr=r(XTt,"model_type"),XTt.forEach(t),vBr=r(ZE,` property of the config object (either
passed as an argument or loaded from `),n0e=n(ZE,"CODE",{});var VTt=s(n0e);TBr=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),FBr=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=n(ZE,"CODE",{});var zTt=s(s0e);CBr=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),MBr=r(ZE,":"),ZE.forEach(t),EBr=i(Na),G7=n(Na,"UL",{});var UPe=s(G7);KM=n(UPe,"LI",{});var $xe=s(KM);l0e=n($xe,"STRONG",{});var WTt=s(l0e);yBr=r(WTt,"beit"),WTt.forEach(t),wBr=r($xe," \u2014 "),$z=n($xe,"A",{href:!0});var QTt=s($z);ABr=r(QTt,"FlaxBeitForImageClassification"),QTt.forEach(t),LBr=r($xe," (BEiT model)"),$xe.forEach(t),BBr=i(UPe),ZM=n(UPe,"LI",{});var Ixe=s(ZM);i0e=n(Ixe,"STRONG",{});var HTt=s(i0e);xBr=r(HTt,"vit"),HTt.forEach(t),kBr=r(Ixe," \u2014 "),Iz=n(Ixe,"A",{href:!0});var UTt=s(Iz);RBr=r(UTt,"FlaxViTForImageClassification"),UTt.forEach(t),SBr=r(Ixe," (ViT model)"),Ixe.forEach(t),UPe.forEach(t),PBr=i(Na),d0e=n(Na,"P",{});var JTt=s(d0e);$Br=r(JTt,"Examples:"),JTt.forEach(t),IBr=i(Na),m(X7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),jRe=i(c),Rf=n(c,"H2",{class:!0});var JPe=s(Rf);eE=n(JPe,"A",{id:!0,class:!0,href:!0});var YTt=s(eE);c0e=n(YTt,"SPAN",{});var KTt=s(c0e);m(V7.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),jBr=i(JPe),f0e=n(JPe,"SPAN",{});var ZTt=s(f0e);NBr=r(ZTt,"FlaxAutoModelForVision2Seq"),ZTt.forEach(t),JPe.forEach(t),NRe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(z7.$$.fragment,Pi),DBr=i(Pi),Sf=n(Pi,"P",{});var LQ=s(Sf);qBr=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),m0e=n(LQ,"CODE",{});var eFt=s(m0e);OBr=r(eFt,"from_pretrained()"),eFt.forEach(t),GBr=r(LQ,"class method or the "),g0e=n(LQ,"CODE",{});var oFt=s(g0e);XBr=r(oFt,"from_config()"),oFt.forEach(t),VBr=r(LQ,`class
method.`),LQ.forEach(t),zBr=i(Pi),W7=n(Pi,"P",{});var YPe=s(W7);WBr=r(YPe,"This class cannot be instantiated directly using "),h0e=n(YPe,"CODE",{});var rFt=s(h0e);QBr=r(rFt,"__init__()"),rFt.forEach(t),HBr=r(YPe," (throws an error)."),YPe.forEach(t),UBr=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(Q7.$$.fragment,$i),JBr=i($i),p0e=n($i,"P",{});var tFt=s(p0e);YBr=r(tFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tFt.forEach(t),KBr=i($i),Pf=n($i,"P",{});var BQ=s(Pf);ZBr=r(BQ,`Note:
Loading a model from its configuration file does `),_0e=n(BQ,"STRONG",{});var aFt=s(_0e);exr=r(aFt,"not"),aFt.forEach(t),oxr=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u0e=n(BQ,"CODE",{});var nFt=s(u0e);rxr=r(nFt,"from_pretrained()"),nFt.forEach(t),txr=r(BQ,"to load the model weights."),BQ.forEach(t),axr=i($i),b0e=n($i,"P",{});var sFt=s(b0e);nxr=r(sFt,"Examples:"),sFt.forEach(t),sxr=i($i),m(H7.$$.fragment,$i),$i.forEach(t),lxr=i(Pi),No=n(Pi,"DIV",{class:!0});var Da=s(No);m(U7.$$.fragment,Da),ixr=i(Da),v0e=n(Da,"P",{});var lFt=s(v0e);dxr=r(lFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lFt.forEach(t),cxr=i(Da),qn=n(Da,"P",{});var e3=s(qn);fxr=r(e3,"The model class to instantiate is selected based on the "),T0e=n(e3,"CODE",{});var iFt=s(T0e);mxr=r(iFt,"model_type"),iFt.forEach(t),gxr=r(e3,` property of the config object (either
passed as an argument or loaded from `),F0e=n(e3,"CODE",{});var dFt=s(F0e);hxr=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),pxr=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=n(e3,"CODE",{});var cFt=s(C0e);_xr=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),uxr=r(e3,":"),e3.forEach(t),bxr=i(Da),M0e=n(Da,"UL",{});var fFt=s(M0e);oE=n(fFt,"LI",{});var jxe=s(oE);E0e=n(jxe,"STRONG",{});var mFt=s(E0e);vxr=r(mFt,"vision-encoder-decoder"),mFt.forEach(t),Txr=r(jxe," \u2014 "),jz=n(jxe,"A",{href:!0});var gFt=s(jz);Fxr=r(gFt,"FlaxVisionEncoderDecoderModel"),gFt.forEach(t),Cxr=r(jxe," (Vision Encoder decoder model)"),jxe.forEach(t),fFt.forEach(t),Mxr=i(Da),y0e=n(Da,"P",{});var hFt=s(y0e);Exr=r(hFt,"Examples:"),hFt.forEach(t),yxr=i(Da),m(J7.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(MFt)),d(pe,"id","auto-classes"),d(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pe,"href","#auto-classes"),d(de,"class","relative group"),d(On,"href","/docs/transformers/pr_16044/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16044/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16044/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Gf,"id","transformers.AutoConfig"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(e9,"href","/docs/transformers/pr_16044/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(o9,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertConfig"),d(r9,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartConfig"),d(t9,"href","/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitConfig"),d(a9,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertConfig"),d(n9,"href","/docs/transformers/pr_16044/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(s9,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdConfig"),d(l9,"href","/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(i9,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(d9,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(c9,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertConfig"),d(f9,"href","/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineConfig"),d(m9,"href","/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPConfig"),d(g9,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertConfig"),d(h9,"href","/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextConfig"),d(p9,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLConfig"),d(_9,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(u9,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(b9,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaConfig"),d(v9,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(T9,"href","/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTConfig"),d(F9,"href","/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrConfig"),d(C9,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertConfig"),d(M9,"href","/docs/transformers/pr_16044/en/model_doc/dpr#transformers.DPRConfig"),d(E9,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraConfig"),d(y9,"href","/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(w9,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertConfig"),d(A9,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetConfig"),d(L9,"href","/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTConfig"),d(B9,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelConfig"),d(x9,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Config"),d(k9,"href","/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(R9,"href","/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJConfig"),d(S9,"href","/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertConfig"),d(P9,"href","/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertConfig"),d($9,"href","/docs/transformers/pr_16044/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(I9,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(j9,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(N9,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDConfig"),d(D9,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerConfig"),d(q9,"href","/docs/transformers/pr_16044/en/model_doc/luke#transformers.LukeConfig"),d(O9,"href","/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertConfig"),d(G9,"href","/docs/transformers/pr_16044/en/model_doc/m2m_100#transformers.M2M100Config"),d(X9,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianConfig"),d(V9,"href","/docs/transformers/pr_16044/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(z9,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartConfig"),d(W9,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Q9,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(H9,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetConfig"),d(U9,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Config"),d(J9,"href","/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Y9,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(K9,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusConfig"),d(Z9,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverConfig"),d(eB,"href","/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartConfig"),d(oB,"href","/docs/transformers/pr_16044/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(rB,"href","/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(tB,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(aB,"href","/docs/transformers/pr_16044/en/model_doc/rag#transformers.RagConfig"),d(nB,"href","/docs/transformers/pr_16044/en/model_doc/realm#transformers.RealmConfig"),d(sB,"href","/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerConfig"),d(lB,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertConfig"),d(iB,"href","/docs/transformers/pr_16044/en/model_doc/resnet#transformers.ResNetConfig"),d(dB,"href","/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertConfig"),d(cB,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaConfig"),d(fB,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerConfig"),d(mB,"href","/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerConfig"),d(gB,"href","/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWConfig"),d(hB,"href","/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDConfig"),d(pB,"href","/docs/transformers/pr_16044/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(_B,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(uB,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(bB,"href","/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterConfig"),d(vB,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(TB,"href","/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinConfig"),d(FB,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Config"),d(CB,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasConfig"),d(MB,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(EB,"href","/docs/transformers/pr_16044/en/model_doc/trocr#transformers.TrOCRConfig"),d(yB,"href","/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(wB,"href","/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(AB,"href","/docs/transformers/pr_16044/en/model_doc/van#transformers.VanConfig"),d(LB,"href","/docs/transformers/pr_16044/en/model_doc/vilt#transformers.ViltConfig"),d(BB,"href","/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(xB,"href","/docs/transformers/pr_16044/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(kB,"href","/docs/transformers/pr_16044/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(RB,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTConfig"),d(SB,"href","/docs/transformers/pr_16044/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(PB,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d($B,"href","/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMConfig"),d(IB,"href","/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMConfig"),d(jB,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMConfig"),d(NB,"href","/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(DB,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(qB,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(OB,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetConfig"),d(GB,"href","/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(kg,"class","docstring"),d(Wo,"class","docstring"),d(Rg,"id","transformers.AutoTokenizer"),d(Rg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(XB,"href","/docs/transformers/pr_16044/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(VB,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertTokenizer"),d(zB,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(WB,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartTokenizer"),d(QB,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartTokenizerFast"),d(HB,"href","/docs/transformers/pr_16044/en/model_doc/barthez#transformers.BarthezTokenizer"),d(UB,"href","/docs/transformers/pr_16044/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(JB,"href","/docs/transformers/pr_16044/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(YB,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertTokenizer"),d(KB,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertTokenizerFast"),d(ZB,"href","/docs/transformers/pr_16044/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(ex,"href","/docs/transformers/pr_16044/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(ox,"href","/docs/transformers/pr_16044/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(rx,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(tx,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(ax,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(nx,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(sx,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(lx,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(ix,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(dx,"href","/docs/transformers/pr_16044/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(cx,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertTokenizer"),d(fx,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(mx,"href","/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineTokenizer"),d(gx,"href","/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPTokenizer"),d(hx,"href","/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(px,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(_x,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(ux,"href","/docs/transformers/pr_16044/en/model_doc/cpm#transformers.CpmTokenizer"),d(bx,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(vx,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Tx,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Fx,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Cx,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Mx,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Ex,"href","/docs/transformers/pr_16044/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(yx,"href","/docs/transformers/pr_16044/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(wx,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraTokenizer"),d(Ax,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Lx,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Bx,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetTokenizer"),d(xx,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(kx,"href","/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Rx,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Sx,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Px,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d($x,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Ix,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(jx,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Nx,"href","/docs/transformers/pr_16044/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Dx,"href","/docs/transformers/pr_16044/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(qx,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Ox,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Gx,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Xx,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Vx,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(zx,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Wx,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Qx,"href","/docs/transformers/pr_16044/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Hx,"href","/docs/transformers/pr_16044/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(Ux,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDTokenizer"),d(Jx,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDTokenizerFast"),d(Yx,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerTokenizer"),d(Kx,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(Zx,"href","/docs/transformers/pr_16044/en/model_doc/luke#transformers.LukeTokenizer"),d(ek,"href","/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(ok,"href","/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(rk,"href","/docs/transformers/pr_16044/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(tk,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianTokenizer"),d(ak,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartTokenizer"),d(nk,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(sk,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(lk,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(ik,"href","/docs/transformers/pr_16044/en/model_doc/mluke#transformers.MLukeTokenizer"),d(dk,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(ck,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(fk,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(mk,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(gk,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.T5Tokenizer"),d(hk,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.T5TokenizerFast"),d(pk,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(_k,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(uk,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(bk,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(vk,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Tk,"href","/docs/transformers/pr_16044/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Fk,"href","/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Ck,"href","/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Mk,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertTokenizer"),d(Ek,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertTokenizerFast"),d(yk,"href","/docs/transformers/pr_16044/en/model_doc/rag#transformers.RagTokenizer"),d(wk,"href","/docs/transformers/pr_16044/en/model_doc/realm#transformers.RealmTokenizer"),d(Ak,"href","/docs/transformers/pr_16044/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Bk,"href","/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(xk,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertTokenizer"),d(kk,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Sk,"href","/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaTokenizer"),d($k,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(jk,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Dk,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(qk,"href","/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Ok,"href","/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Xk,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.T5Tokenizer"),d(zk,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Wk,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasTokenizer"),d(Qk,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Hk,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Uk,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(Jk,"href","/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMTokenizer"),d(Yk,"href","/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMTokenizer"),d(Zk,"href","/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(eR,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(oR,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(rR,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(tR,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ih,"class","docstring"),d(Qo,"class","docstring"),d(dh,"id","transformers.AutoFeatureExtractor"),d(dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(aR,"href","/docs/transformers/pr_16044/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(nR,"href","/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(sR,"href","/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(lR,"href","/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(iR,"href","/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(dR,"href","/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(cR,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(fR,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(mR,"href","/docs/transformers/pr_16044/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(gR,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(hR,"href","/docs/transformers/pr_16044/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(pR,"href","/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(_R,"href","/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(uR,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(bR,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(vR,"href","/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(FR,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring"),d(Bh,"class","docstring"),d(Ho,"class","docstring"),d(xh,"id","transformers.AutoProcessor"),d(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(MR,"href","/docs/transformers/pr_16044/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(ER,"href","/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPProcessor"),d(yR,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(wR,"href","/docs/transformers/pr_16044/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(AR,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(LR,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(BR,"href","/docs/transformers/pr_16044/en/model_doc/trocr#transformers.TrOCRProcessor"),d(xR,"href","/docs/transformers/pr_16044/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(kR,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(je,"class","docstring"),d(qh,"class","docstring"),d(Uo,"class","docstring"),d(Oh,"id","transformers.AutoModel"),d(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d(RR,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertModel"),d(SR,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartModel"),d(PR,"href","/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitModel"),d($R,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertModel"),d(IR,"href","/docs/transformers/pr_16044/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(jR,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdModel"),d(NR,"href","/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(DR,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(qR,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(OR,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertModel"),d(GR,"href","/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineModel"),d(XR,"href","/docs/transformers/pr_16044/en/model_doc/clip#transformers.CLIPModel"),d(VR,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertModel"),d(zR,"href","/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextModel"),d(WR,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLModel"),d(QR,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(HR,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(UR,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaModel"),d(JR,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(YR,"href","/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTModel"),d(KR,"href","/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrModel"),d(ZR,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertModel"),d(eS,"href","/docs/transformers/pr_16044/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(oS,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraModel"),d(rS,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertModel"),d(tS,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetModel"),d(aS,"href","/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTModel"),d(nS,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelModel"),d(sS,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelBaseModel"),d(lS,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2Model"),d(iS,"href","/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(dS,"href","/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJModel"),d(cS,"href","/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertModel"),d(fS,"href","/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertModel"),d(mS,"href","/docs/transformers/pr_16044/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(gS,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(hS,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(pS,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDModel"),d(_S,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerModel"),d(uS,"href","/docs/transformers/pr_16044/en/model_doc/luke#transformers.LukeModel"),d(bS,"href","/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertModel"),d(vS,"href","/docs/transformers/pr_16044/en/model_doc/m2m_100#transformers.M2M100Model"),d(TS,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianModel"),d(FS,"href","/docs/transformers/pr_16044/en/model_doc/maskformer#transformers.MaskFormerModel"),d(CS,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartModel"),d(MS,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(ES,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertModel"),d(yS,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetModel"),d(wS,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5Model"),d(AS,"href","/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerModel"),d(LS,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(BS,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusModel"),d(xS,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverModel"),d(kS,"href","/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartModel"),d(RS,"href","/docs/transformers/pr_16044/en/model_doc/poolformer#transformers.PoolFormerModel"),d(SS,"href","/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(PS,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertModel"),d($S,"href","/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerModel"),d(IS,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertModel"),d(jS,"href","/docs/transformers/pr_16044/en/model_doc/resnet#transformers.ResNetModel"),d(NS,"href","/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertModel"),d(DS,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaModel"),d(qS,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerModel"),d(OS,"href","/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerModel"),d(GS,"href","/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWModel"),d(XS,"href","/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDModel"),d(VS,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(zS,"href","/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterModel"),d(WS,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(QS,"href","/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinModel"),d(HS,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5Model"),d(US,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasModel"),d(JS,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(YS,"href","/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechModel"),d(KS,"href","/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(ZS,"href","/docs/transformers/pr_16044/en/model_doc/van#transformers.VanModel"),d(eP,"href","/docs/transformers/pr_16044/en/model_doc/vilt#transformers.ViltModel"),d(oP,"href","/docs/transformers/pr_16044/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(rP,"href","/docs/transformers/pr_16044/en/model_doc/visual_bert#transformers.VisualBertModel"),d(tP,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTModel"),d(aP,"href","/docs/transformers/pr_16044/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(nP,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(sP,"href","/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMModel"),d(lP,"href","/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMModel"),d(iP,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMModel"),d(dP,"href","/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(cP,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(fP,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(mP,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetModel"),d(gP,"href","/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring"),d(Jo,"class","docstring"),d(M_,"id","transformers.AutoModelForPreTraining"),d(M_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(hP,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForPreTraining"),d(pP,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(_P,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForPreTraining"),d(uP,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(bP,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(vP,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(TP,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(FP,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(CP,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(MP,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(EP,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForPreTraining"),d(yP,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(wP,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForPreTraining"),d(AP,"href","/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(LP,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(BP,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(xP,"href","/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(kP,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(RP,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(SP,"href","/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(PP,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d($P,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(IP,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(jP,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(NP,"href","/docs/transformers/pr_16044/en/model_doc/retribert#transformers.RetriBertModel"),d(DP,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(qP,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(OP,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(GP,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(XP,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(VP,"href","/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(zP,"href","/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(WP,"href","/docs/transformers/pr_16044/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(QP,"href","/docs/transformers/pr_16044/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(HP,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(UP,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(JP,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(YP,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(KP,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(cu,"id","transformers.AutoModelForCausalLM"),d(cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(ZP,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForCausalLM"),d(e$,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertLMHeadModel"),d(o$,"href","/docs/transformers/pr_16044/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(r$,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(t$,"href","/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(a$,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(n$,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(s$,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(l$,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(i$,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(d$,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForCausalLM"),d(c$,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(f$,"href","/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(m$,"href","/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(g$,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianForCausalLM"),d(h$,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForCausalLM"),d(p$,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(_$,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(u$,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(b$,"href","/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(v$,"href","/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(T$,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(F$,"href","/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(C$,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(M$,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(E$,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(y$,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(w$,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(A$,"href","/docs/transformers/pr_16044/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(L$,"href","/docs/transformers/pr_16044/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(B$,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(x$,"href","/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(k$,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(R$,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(S$,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(qe,"class","docstring"),d(Ko,"class","docstring"),d(Qu,"id","transformers.AutoModelForMaskedLM"),d(Qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qu,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(Qr,"class","docstring"),d(P$,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForMaskedLM"),d($$,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(I$,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForMaskedLM"),d(j$,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(N$,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(D$,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(q$,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(O$,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(G$,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(X$,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(V$,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(z$,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(W$,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(H$,"href","/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(U$,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(J$,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(K$,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(eI,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(oI,"href","/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(rI,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(tI,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(aI,"href","/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(nI,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(sI,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(lI,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(iI,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(dI,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(cI,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(fI,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(mI,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(gI,"href","/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Oe,"class","docstring"),d(Zo,"class","docstring"),d(x4,"id","transformers.AutoModelForSeq2SeqLM"),d(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x4,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(hI,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(_I,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(bI,"href","/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(vI,"href","/docs/transformers/pr_16044/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(TI,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(FI,"href","/docs/transformers/pr_16044/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(CI,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.MarianMTModel"),d(MI,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(EI,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(yI,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(wI,"href","/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_16044/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_16044/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(H4,"id","transformers.AutoModelForSequenceClassification"),d(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H4,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(xI,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(kI,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForSequenceClassification"),d(RI,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForSequenceClassification"),d(SI,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(PI,"href","/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d($I,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(II,"href","/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(jI,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(NI,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(DI,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(qI,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(OI,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(GI,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(XI,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(VI,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDForSequenceClassification"),d(ej,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(oj,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(rj,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(tj,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(aj,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(nj,"href","/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(sj,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(lj,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(ij,"href","/docs/transformers/pr_16044/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(dj,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(cj,"href","/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(fj,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(mj,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(gj,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(hj,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(pj,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(_j,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(uj,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(bj,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(vj,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Tj,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Fj,"href","/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Xe,"class","docstring"),d(or,"class","docstring"),d(G1,"id","transformers.AutoModelForMultipleChoice"),d(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G1,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(Jr,"class","docstring"),d(Cj,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(Mj,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Ej,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(yj,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(wj,"href","/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Aj,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Lj,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(xj,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(kj,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d($j,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(jj,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(qj,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Gj,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Xj,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Vj,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(zj,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Wj,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Qj,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Hj,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Uj,"href","/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(bb,"id","transformers.AutoModelForNextSentencePrediction"),d(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(Jj,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Yj,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Kj,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Zj,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(eN,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring"),d(tr,"class","docstring"),d(yb,"id","transformers.AutoModelForTokenClassification"),d(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yb,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(oN,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(rN,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForTokenClassification"),d(tN,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(aN,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(nN,"href","/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineForTokenClassification"),d(sN,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(lN,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(iN,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(dN,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(cN,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(fN,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(mN,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(gN,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(hN,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(pN,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(_N,"href","/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(uN,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(bN,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(vN,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(TN,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(FN,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(CN,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(MN,"href","/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(EN,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(yN,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(wN,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(AN,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(LN,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(BN,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(xN,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(kN,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(RN,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(SN,"href","/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(We,"class","docstring"),d(ar,"class","docstring"),d(s2,"id","transformers.AutoModelForQuestionAnswering"),d(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s2,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(PN,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d($N,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(IN,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(jN,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(NN,"href","/docs/transformers/pr_16044/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(DN,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(qN,"href","/docs/transformers/pr_16044/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(ON,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(GN,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(XN,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(VN,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(zN,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(WN,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(QN,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(HN,"href","/docs/transformers/pr_16044/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(UN,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(JN,"href","/docs/transformers/pr_16044/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(YN,"href","/docs/transformers/pr_16044/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(KN,"href","/docs/transformers/pr_16044/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(ZN,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16044/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16044/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16044/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16044/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16044/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16044/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(pD,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(bD,"href","/docs/transformers/pr_16044/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(Q2,"id","transformers.AutoModelForTableQuestionAnswering"),d(Q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(vD,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring"),d(sr,"class","docstring"),d(J2,"id","transformers.AutoModelForImageClassification"),d(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(TD,"href","/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitForImageClassification"),d(FD,"href","/docs/transformers/pr_16044/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(CD,"href","/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTForImageClassification"),d(MD,"href","/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(ED,"href","/docs/transformers/pr_16044/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(yD,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(wD,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(AD,"href","/docs/transformers/pr_16044/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(LD,"href","/docs/transformers/pr_16044/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(BD,"href","/docs/transformers/pr_16044/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(xD,"href","/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(kD,"href","/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinForImageClassification"),d(RD,"href","/docs/transformers/pr_16044/en/model_doc/van#transformers.VanForImageClassification"),d(SD,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring"),d(lr,"class","docstring"),d(lv,"id","transformers.AutoModelForVision2Seq"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(PD,"href","/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring"),d(ir,"class","docstring"),d(cv,"id","transformers.AutoModelForAudioClassification"),d(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cv,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d($D,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(ID,"href","/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(jD,"href","/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(ND,"href","/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(DD,"href","/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(qD,"href","/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(OD,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(GD,"href","/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring"),d(dr,"class","docstring"),d(Tv,"id","transformers.AutoModelForAudioFrameClassification"),d(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tv,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(at,"class","docstring"),d(XD,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(VD,"href","/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(zD,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(WD,"href","/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring"),d(cr,"class","docstring"),d(wv,"id","transformers.AutoModelForCTC"),d(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wv,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(QD,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(HD,"href","/docs/transformers/pr_16044/en/model_doc/hubert#transformers.HubertForCTC"),d(UD,"href","/docs/transformers/pr_16044/en/model_doc/sew#transformers.SEWForCTC"),d(JD,"href","/docs/transformers/pr_16044/en/model_doc/sew-d#transformers.SEWDForCTC"),d(YD,"href","/docs/transformers/pr_16044/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(KD,"href","/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(ZD,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(eq,"href","/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(Iv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Iv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(st,"class","docstring"),d(oq,"href","/docs/transformers/pr_16044/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(rq,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring"),d(mr,"class","docstring"),d(qv,"id","transformers.AutoModelForAudioXVector"),d(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qv,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(tq,"href","/docs/transformers/pr_16044/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(aq,"href","/docs/transformers/pr_16044/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(nq,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(sq,"href","/docs/transformers/pr_16044/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring"),d(gr,"class","docstring"),d(Wv,"id","transformers.AutoModelForMaskedImageModeling"),d(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(lq,"href","/docs/transformers/pr_16044/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(iq,"href","/docs/transformers/pr_16044/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(dq,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring"),d(hr,"class","docstring"),d(Yv,"id","transformers.AutoModelForObjectDetection"),d(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yv,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(cq,"href","/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring"),d(pr,"class","docstring"),d(e6,"id","transformers.AutoModelForImageSegmentation"),d(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e6,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(fq,"href","/docs/transformers/pr_16044/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(t6,"id","transformers.AutoModelForSemanticSegmentation"),d(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t6,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(ft,"class","docstring"),d(mq,"href","/docs/transformers/pr_16044/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(gq,"href","/docs/transformers/pr_16044/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring"),d(ur,"class","docstring"),d(l6,"id","transformers.AutoModelForInstanceSegmentation"),d(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l6,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(hq,"href","/docs/transformers/pr_16044/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring"),d(br,"class","docstring"),d(c6,"id","transformers.TFAutoModel"),d(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c6,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(pq,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertModel"),d(_q,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.TFBartModel"),d(uq,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertModel"),d(bq,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(vq,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Tq,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertModel"),d(Fq,"href","/docs/transformers/pr_16044/en/model_doc/clip#transformers.TFCLIPModel"),d(Cq,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertModel"),d(Mq,"href","/docs/transformers/pr_16044/en/model_doc/convnext#transformers.TFConvNextModel"),d(Eq,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.TFCTRLModel"),d(yq,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaModel"),d(wq,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Aq,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Lq,"href","/docs/transformers/pr_16044/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Bq,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraModel"),d(xq,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(kq,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelModel"),d(Rq,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Sq,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Pq,"href","/docs/transformers/pr_16044/en/model_doc/hubert#transformers.TFHubertModel"),d($q,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Iq,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.TFLEDModel"),d(jq,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerModel"),d(Nq,"href","/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Dq,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.TFMarianModel"),d(qq,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.TFMBartModel"),d(Oq,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Gq,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Xq,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.TFMT5Model"),d(Vq,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(zq,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Wq,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertModel"),d(Qq,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaModel"),d(Hq,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerModel"),d(Uq,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(Jq,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.TFT5Model"),d(Yq,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasModel"),d(Kq,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(Zq,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.TFViTModel"),d(eO,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(oO,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMModel"),d(rO,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(tO,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(K6,"id","transformers.TFAutoModelForPreTraining"),d(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K6,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(aO,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(nO,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(sO,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForPreTraining"),d(lO,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(iO,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(dO,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(cO,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(fO,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(mO,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(gO,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(hO,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(pO,"href","/docs/transformers/pr_16044/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(_O,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(uO,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(bO,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(vO,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(TO,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(FO,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(CO,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(MO,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(EO,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(yO,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(F0,"id","transformers.TFAutoModelForCausalLM"),d(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F0,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(wO,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(AO,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(LO,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(BO,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(xO,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(kO,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(RO,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(SO,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(PO,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($O,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(IO,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(S0,"id","transformers.TFAutoModelForImageClassification"),d(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S0,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(jO,"href","/docs/transformers/pr_16044/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(NO,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(I0,"id","transformers.TFAutoModelForMaskedLM"),d(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I0,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(DO,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(qO,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(OO,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(GO,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(XO,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(VO,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(zO,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(WO,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(QO,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(HO,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(UO,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(JO,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(YO,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(KO,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(ZO,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(eG,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(oG,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(rG,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(tG,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(aG,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(tT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(nG,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(sG,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(lG,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(iG,"href","/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(dG,"href","/docs/transformers/pr_16044/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(cG,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.TFMarianMTModel"),d(fG,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(mG,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(gG,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(hG,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(hT,"id","transformers.TFAutoModelForSequenceClassification"),d(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hT,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(pG,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(_G,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(uG,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(bG,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(vG,"href","/docs/transformers/pr_16044/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(TG,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(FG,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(CG,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(MG,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(EG,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yG,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(wG,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(AG,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(LG,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(BG,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(xG,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(kG,"href","/docs/transformers/pr_16044/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(RG,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(SG,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(PG,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d($G,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(IG,"href","/docs/transformers/pr_16044/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(jG,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(NG,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(DG,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(qT,"id","transformers.TFAutoModelForMultipleChoice"),d(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(qG,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(OG,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(GG,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(XG,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(VG,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(zG,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(WG,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(QG,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(HG,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(UG,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(JG,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(YG,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(KG,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(ZG,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(eX,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(oX,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(rX,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(aF,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aF,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Ft,"class","docstring"),d(tX,"href","/docs/transformers/pr_16044/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(sF,"id","transformers.TFAutoModelForTokenClassification"),d(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sF,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(aX,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(nX,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(sX,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(lX,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(iX,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(dX,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(cX,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(fX,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(mX,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(gX,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(hX,"href","/docs/transformers/pr_16044/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(pX,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(_X,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(uX,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(bX,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(vX,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(TX,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(FX,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(CX,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(MX,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(AF,"id","transformers.TFAutoModelForQuestionAnswering"),d(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AF,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(EX,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(yX,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(wX,"href","/docs/transformers/pr_16044/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(AX,"href","/docs/transformers/pr_16044/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(LX,"href","/docs/transformers/pr_16044/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(BX,"href","/docs/transformers/pr_16044/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(xX,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(kX,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(RX,"href","/docs/transformers/pr_16044/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(SX,"href","/docs/transformers/pr_16044/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(PX,"href","/docs/transformers/pr_16044/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d($X,"href","/docs/transformers/pr_16044/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(IX,"href","/docs/transformers/pr_16044/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(jX,"href","/docs/transformers/pr_16044/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(NX,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(DX,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_16044/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(OX,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(GX,"href","/docs/transformers/pr_16044/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(QF,"id","transformers.TFAutoModelForVision2Seq"),d(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QF,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(XX,"href","/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(UF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(VX,"href","/docs/transformers/pr_16044/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(YF,"id","transformers.FlaxAutoModel"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(zX,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertModel"),d(WX,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartModel"),d(QX,"href","/docs/transformers/pr_16044/en/model_doc/beit#transformers.FlaxBeitModel"),d(HX,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertModel"),d(UX,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(JX,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(YX,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(KX,"href","/docs/transformers/pr_16044/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ZX,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(eV,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraModel"),d(oV,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(rV,"href","/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(tV,"href","/docs/transformers/pr_16044/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(aV,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.FlaxMarianModel"),d(nV,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartModel"),d(sV,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.FlaxMT5Model"),d(lV,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(iV,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(dV,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(cV,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.FlaxT5Model"),d(fV,"href","/docs/transformers/pr_16044/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(mV,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.FlaxViTModel"),d(gV,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hV,"href","/docs/transformers/pr_16044/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(pV,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(MC,"id","transformers.FlaxAutoModelForCausalLM"),d(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MC,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(_V,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(uV,"href","/docs/transformers/pr_16044/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(bV,"href","/docs/transformers/pr_16044/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(vV,"href","/docs/transformers/pr_16044/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(TV,"href","/docs/transformers/pr_16044/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(BC,"id","transformers.FlaxAutoModelForPreTraining"),d(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BC,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(FV,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(CV,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(MV,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(EV,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(yV,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(wV,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(LV,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(BV,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(xV,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(kV,"href","/docs/transformers/pr_16044/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(RV,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(GC,"id","transformers.FlaxAutoModelForMaskedLM"),d(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(SV,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(PV,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($V,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(IV,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(jV,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(NV,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(DV,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(qV,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(OV,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(GV,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(ZC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(XV,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(VV,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(zV,"href","/docs/transformers/pr_16044/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(WV,"href","/docs/transformers/pr_16044/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(QV,"href","/docs/transformers/pr_16044/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(HV,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UV,"href","/docs/transformers/pr_16044/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_16044/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_16044/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(dM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(KV,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(ZV,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(az,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(TM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(iz,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(dz,"href","/docs/transformers/pr_16044/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(cz,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(fz,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(mz,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(gz,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(hz,"href","/docs/transformers/pr_16044/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(pz,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(_z,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(uz,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Nr,"class","docstring"),d(kM,"id","transformers.FlaxAutoModelForTokenClassification"),d(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(bz,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(vz,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Tz,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Fz,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Cz,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Mz,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Ez,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(yz,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(qM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(wz,"href","/docs/transformers/pr_16044/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16044/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16044/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16044/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16044/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16044/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16044/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(UM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(Pz,"href","/docs/transformers/pr_16044/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Or,"class","docstring"),d(YM,"id","transformers.FlaxAutoModelForImageClassification"),d(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YM,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d($z,"href","/docs/transformers/pr_16044/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Iz,"href","/docs/transformers/pr_16044/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Gr,"class","docstring"),d(eE,"id","transformers.FlaxAutoModelForVision2Seq"),d(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(jt,"class","docstring"),d(jz,"href","/docs/transformers/pr_16044/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,J),b(c,$e,u),b(c,de,u),e(de,pe),e(pe,io),g(fe,io,null),e(de,Me),e(de,Vo),e(Vo,ji),b(c,If,u),b(c,fa,u),e(fa,Ni),e(fa,Di),e(Di,o3),e(fa,jf),b(c,Be,u),b(c,co,u),e(co,qi),e(co,On),e(On,r3),e(co,Gn),e(co,Xn),e(Xn,t3),e(co,Oi),e(co,Vn),e(Vn,a3),e(co,Gi),b(c,Nf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,H8),e(_e,Xi),e(Xi,U8),e(_e,J8),b(c,zo,u),b(c,Oa,u),e(Oa,Y8),e(Oa,Df),e(Df,K8),e(Oa,KPe),b(c,Nxe,u),b(c,Vi,u),e(Vi,qf),e(qf,xQ),g(n3,xQ,null),e(Vi,ZPe),e(Vi,kQ),e(kQ,e$e),b(c,Dxe,u),b(c,zn,u),e(zn,o$e),e(zn,RQ),e(RQ,r$e),e(zn,t$e),e(zn,SQ),e(SQ,a$e),e(zn,n$e),b(c,qxe,u),g(s3,c,u),b(c,Oxe,u),b(c,Z8,u),e(Z8,s$e),b(c,Gxe,u),g(Of,c,u),b(c,Xxe,u),b(c,zi,u),e(zi,Gf),e(Gf,PQ),g(l3,PQ,null),e(zi,l$e),e(zi,$Q),e($Q,i$e),b(c,Vxe,u),b(c,Wo,u),g(i3,Wo,null),e(Wo,d$e),e(Wo,d3),e(d3,c$e),e(d3,e9),e(e9,f$e),e(d3,m$e),e(Wo,g$e),e(Wo,c3),e(c3,h$e),e(c3,IQ),e(IQ,p$e),e(c3,_$e),e(Wo,u$e),e(Wo,mo),g(f3,mo,null),e(mo,b$e),e(mo,jQ),e(jQ,v$e),e(mo,T$e),e(mo,Wi),e(Wi,F$e),e(Wi,NQ),e(NQ,C$e),e(Wi,M$e),e(Wi,DQ),e(DQ,E$e),e(Wi,y$e),e(mo,w$e),e(mo,v),e(v,Xf),e(Xf,qQ),e(qQ,A$e),e(Xf,L$e),e(Xf,o9),e(o9,B$e),e(Xf,x$e),e(v,k$e),e(v,Vf),e(Vf,OQ),e(OQ,R$e),e(Vf,S$e),e(Vf,r9),e(r9,P$e),e(Vf,$$e),e(v,I$e),e(v,zf),e(zf,GQ),e(GQ,j$e),e(zf,N$e),e(zf,t9),e(t9,D$e),e(zf,q$e),e(v,O$e),e(v,Wf),e(Wf,XQ),e(XQ,G$e),e(Wf,X$e),e(Wf,a9),e(a9,V$e),e(Wf,z$e),e(v,W$e),e(v,Qf),e(Qf,VQ),e(VQ,Q$e),e(Qf,H$e),e(Qf,n9),e(n9,U$e),e(Qf,J$e),e(v,Y$e),e(v,Hf),e(Hf,zQ),e(zQ,K$e),e(Hf,Z$e),e(Hf,s9),e(s9,eIe),e(Hf,oIe),e(v,rIe),e(v,Uf),e(Uf,WQ),e(WQ,tIe),e(Uf,aIe),e(Uf,l9),e(l9,nIe),e(Uf,sIe),e(v,lIe),e(v,Jf),e(Jf,QQ),e(QQ,iIe),e(Jf,dIe),e(Jf,i9),e(i9,cIe),e(Jf,fIe),e(v,mIe),e(v,Yf),e(Yf,HQ),e(HQ,gIe),e(Yf,hIe),e(Yf,d9),e(d9,pIe),e(Yf,_Ie),e(v,uIe),e(v,Kf),e(Kf,UQ),e(UQ,bIe),e(Kf,vIe),e(Kf,c9),e(c9,TIe),e(Kf,FIe),e(v,CIe),e(v,Zf),e(Zf,JQ),e(JQ,MIe),e(Zf,EIe),e(Zf,f9),e(f9,yIe),e(Zf,wIe),e(v,AIe),e(v,em),e(em,YQ),e(YQ,LIe),e(em,BIe),e(em,m9),e(m9,xIe),e(em,kIe),e(v,RIe),e(v,om),e(om,KQ),e(KQ,SIe),e(om,PIe),e(om,g9),e(g9,$Ie),e(om,IIe),e(v,jIe),e(v,rm),e(rm,ZQ),e(ZQ,NIe),e(rm,DIe),e(rm,h9),e(h9,qIe),e(rm,OIe),e(v,GIe),e(v,tm),e(tm,eH),e(eH,XIe),e(tm,VIe),e(tm,p9),e(p9,zIe),e(tm,WIe),e(v,QIe),e(v,am),e(am,oH),e(oH,HIe),e(am,UIe),e(am,_9),e(_9,JIe),e(am,YIe),e(v,KIe),e(v,nm),e(nm,rH),e(rH,ZIe),e(nm,eje),e(nm,u9),e(u9,oje),e(nm,rje),e(v,tje),e(v,sm),e(sm,tH),e(tH,aje),e(sm,nje),e(sm,b9),e(b9,sje),e(sm,lje),e(v,ije),e(v,lm),e(lm,aH),e(aH,dje),e(lm,cje),e(lm,v9),e(v9,fje),e(lm,mje),e(v,gje),e(v,im),e(im,nH),e(nH,hje),e(im,pje),e(im,T9),e(T9,_je),e(im,uje),e(v,bje),e(v,dm),e(dm,sH),e(sH,vje),e(dm,Tje),e(dm,F9),e(F9,Fje),e(dm,Cje),e(v,Mje),e(v,cm),e(cm,lH),e(lH,Eje),e(cm,yje),e(cm,C9),e(C9,wje),e(cm,Aje),e(v,Lje),e(v,fm),e(fm,iH),e(iH,Bje),e(fm,xje),e(fm,M9),e(M9,kje),e(fm,Rje),e(v,Sje),e(v,mm),e(mm,dH),e(dH,Pje),e(mm,$je),e(mm,E9),e(E9,Ije),e(mm,jje),e(v,Nje),e(v,gm),e(gm,cH),e(cH,Dje),e(gm,qje),e(gm,y9),e(y9,Oje),e(gm,Gje),e(v,Xje),e(v,hm),e(hm,fH),e(fH,Vje),e(hm,zje),e(hm,w9),e(w9,Wje),e(hm,Qje),e(v,Hje),e(v,pm),e(pm,mH),e(mH,Uje),e(pm,Jje),e(pm,A9),e(A9,Yje),e(pm,Kje),e(v,Zje),e(v,_m),e(_m,gH),e(gH,eNe),e(_m,oNe),e(_m,L9),e(L9,rNe),e(_m,tNe),e(v,aNe),e(v,um),e(um,hH),e(hH,nNe),e(um,sNe),e(um,B9),e(B9,lNe),e(um,iNe),e(v,dNe),e(v,bm),e(bm,pH),e(pH,cNe),e(bm,fNe),e(bm,x9),e(x9,mNe),e(bm,gNe),e(v,hNe),e(v,vm),e(vm,_H),e(_H,pNe),e(vm,_Ne),e(vm,k9),e(k9,uNe),e(vm,bNe),e(v,vNe),e(v,Tm),e(Tm,uH),e(uH,TNe),e(Tm,FNe),e(Tm,R9),e(R9,CNe),e(Tm,MNe),e(v,ENe),e(v,Fm),e(Fm,bH),e(bH,yNe),e(Fm,wNe),e(Fm,S9),e(S9,ANe),e(Fm,LNe),e(v,BNe),e(v,Cm),e(Cm,vH),e(vH,xNe),e(Cm,kNe),e(Cm,P9),e(P9,RNe),e(Cm,SNe),e(v,PNe),e(v,Mm),e(Mm,TH),e(TH,$Ne),e(Mm,INe),e(Mm,$9),e($9,jNe),e(Mm,NNe),e(v,DNe),e(v,Em),e(Em,FH),e(FH,qNe),e(Em,ONe),e(Em,I9),e(I9,GNe),e(Em,XNe),e(v,VNe),e(v,ym),e(ym,CH),e(CH,zNe),e(ym,WNe),e(ym,j9),e(j9,QNe),e(ym,HNe),e(v,UNe),e(v,wm),e(wm,MH),e(MH,JNe),e(wm,YNe),e(wm,N9),e(N9,KNe),e(wm,ZNe),e(v,eDe),e(v,Am),e(Am,EH),e(EH,oDe),e(Am,rDe),e(Am,D9),e(D9,tDe),e(Am,aDe),e(v,nDe),e(v,Lm),e(Lm,yH),e(yH,sDe),e(Lm,lDe),e(Lm,q9),e(q9,iDe),e(Lm,dDe),e(v,cDe),e(v,Bm),e(Bm,wH),e(wH,fDe),e(Bm,mDe),e(Bm,O9),e(O9,gDe),e(Bm,hDe),e(v,pDe),e(v,xm),e(xm,AH),e(AH,_De),e(xm,uDe),e(xm,G9),e(G9,bDe),e(xm,vDe),e(v,TDe),e(v,km),e(km,LH),e(LH,FDe),e(km,CDe),e(km,X9),e(X9,MDe),e(km,EDe),e(v,yDe),e(v,Rm),e(Rm,BH),e(BH,wDe),e(Rm,ADe),e(Rm,V9),e(V9,LDe),e(Rm,BDe),e(v,xDe),e(v,Sm),e(Sm,xH),e(xH,kDe),e(Sm,RDe),e(Sm,z9),e(z9,SDe),e(Sm,PDe),e(v,$De),e(v,Pm),e(Pm,kH),e(kH,IDe),e(Pm,jDe),e(Pm,W9),e(W9,NDe),e(Pm,DDe),e(v,qDe),e(v,$m),e($m,RH),e(RH,ODe),e($m,GDe),e($m,Q9),e(Q9,XDe),e($m,VDe),e(v,zDe),e(v,Im),e(Im,SH),e(SH,WDe),e(Im,QDe),e(Im,H9),e(H9,HDe),e(Im,UDe),e(v,JDe),e(v,jm),e(jm,PH),e(PH,YDe),e(jm,KDe),e(jm,U9),e(U9,ZDe),e(jm,eqe),e(v,oqe),e(v,Nm),e(Nm,$H),e($H,rqe),e(Nm,tqe),e(Nm,J9),e(J9,aqe),e(Nm,nqe),e(v,sqe),e(v,Dm),e(Dm,IH),e(IH,lqe),e(Dm,iqe),e(Dm,Y9),e(Y9,dqe),e(Dm,cqe),e(v,fqe),e(v,qm),e(qm,jH),e(jH,mqe),e(qm,gqe),e(qm,K9),e(K9,hqe),e(qm,pqe),e(v,_qe),e(v,Om),e(Om,NH),e(NH,uqe),e(Om,bqe),e(Om,Z9),e(Z9,vqe),e(Om,Tqe),e(v,Fqe),e(v,Gm),e(Gm,DH),e(DH,Cqe),e(Gm,Mqe),e(Gm,eB),e(eB,Eqe),e(Gm,yqe),e(v,wqe),e(v,Xm),e(Xm,qH),e(qH,Aqe),e(Xm,Lqe),e(Xm,oB),e(oB,Bqe),e(Xm,xqe),e(v,kqe),e(v,Vm),e(Vm,OH),e(OH,Rqe),e(Vm,Sqe),e(Vm,rB),e(rB,Pqe),e(Vm,$qe),e(v,Iqe),e(v,zm),e(zm,GH),e(GH,jqe),e(zm,Nqe),e(zm,tB),e(tB,Dqe),e(zm,qqe),e(v,Oqe),e(v,Wm),e(Wm,XH),e(XH,Gqe),e(Wm,Xqe),e(Wm,aB),e(aB,Vqe),e(Wm,zqe),e(v,Wqe),e(v,Qm),e(Qm,VH),e(VH,Qqe),e(Qm,Hqe),e(Qm,nB),e(nB,Uqe),e(Qm,Jqe),e(v,Yqe),e(v,Hm),e(Hm,zH),e(zH,Kqe),e(Hm,Zqe),e(Hm,sB),e(sB,eOe),e(Hm,oOe),e(v,rOe),e(v,Um),e(Um,WH),e(WH,tOe),e(Um,aOe),e(Um,lB),e(lB,nOe),e(Um,sOe),e(v,lOe),e(v,Jm),e(Jm,QH),e(QH,iOe),e(Jm,dOe),e(Jm,iB),e(iB,cOe),e(Jm,fOe),e(v,mOe),e(v,Ym),e(Ym,HH),e(HH,gOe),e(Ym,hOe),e(Ym,dB),e(dB,pOe),e(Ym,_Oe),e(v,uOe),e(v,Km),e(Km,UH),e(UH,bOe),e(Km,vOe),e(Km,cB),e(cB,TOe),e(Km,FOe),e(v,COe),e(v,Zm),e(Zm,JH),e(JH,MOe),e(Zm,EOe),e(Zm,fB),e(fB,yOe),e(Zm,wOe),e(v,AOe),e(v,eg),e(eg,YH),e(YH,LOe),e(eg,BOe),e(eg,mB),e(mB,xOe),e(eg,kOe),e(v,ROe),e(v,og),e(og,KH),e(KH,SOe),e(og,POe),e(og,gB),e(gB,$Oe),e(og,IOe),e(v,jOe),e(v,rg),e(rg,ZH),e(ZH,NOe),e(rg,DOe),e(rg,hB),e(hB,qOe),e(rg,OOe),e(v,GOe),e(v,tg),e(tg,eU),e(eU,XOe),e(tg,VOe),e(tg,pB),e(pB,zOe),e(tg,WOe),e(v,QOe),e(v,ag),e(ag,oU),e(oU,HOe),e(ag,UOe),e(ag,_B),e(_B,JOe),e(ag,YOe),e(v,KOe),e(v,ng),e(ng,rU),e(rU,ZOe),e(ng,eGe),e(ng,uB),e(uB,oGe),e(ng,rGe),e(v,tGe),e(v,sg),e(sg,tU),e(tU,aGe),e(sg,nGe),e(sg,bB),e(bB,sGe),e(sg,lGe),e(v,iGe),e(v,lg),e(lg,aU),e(aU,dGe),e(lg,cGe),e(lg,vB),e(vB,fGe),e(lg,mGe),e(v,gGe),e(v,ig),e(ig,nU),e(nU,hGe),e(ig,pGe),e(ig,TB),e(TB,_Ge),e(ig,uGe),e(v,bGe),e(v,dg),e(dg,sU),e(sU,vGe),e(dg,TGe),e(dg,FB),e(FB,FGe),e(dg,CGe),e(v,MGe),e(v,cg),e(cg,lU),e(lU,EGe),e(cg,yGe),e(cg,CB),e(CB,wGe),e(cg,AGe),e(v,LGe),e(v,fg),e(fg,iU),e(iU,BGe),e(fg,xGe),e(fg,MB),e(MB,kGe),e(fg,RGe),e(v,SGe),e(v,mg),e(mg,dU),e(dU,PGe),e(mg,$Ge),e(mg,EB),e(EB,IGe),e(mg,jGe),e(v,NGe),e(v,gg),e(gg,cU),e(cU,DGe),e(gg,qGe),e(gg,yB),e(yB,OGe),e(gg,GGe),e(v,XGe),e(v,hg),e(hg,fU),e(fU,VGe),e(hg,zGe),e(hg,wB),e(wB,WGe),e(hg,QGe),e(v,HGe),e(v,pg),e(pg,mU),e(mU,UGe),e(pg,JGe),e(pg,AB),e(AB,YGe),e(pg,KGe),e(v,ZGe),e(v,_g),e(_g,gU),e(gU,eXe),e(_g,oXe),e(_g,LB),e(LB,rXe),e(_g,tXe),e(v,aXe),e(v,ug),e(ug,hU),e(hU,nXe),e(ug,sXe),e(ug,BB),e(BB,lXe),e(ug,iXe),e(v,dXe),e(v,bg),e(bg,pU),e(pU,cXe),e(bg,fXe),e(bg,xB),e(xB,mXe),e(bg,gXe),e(v,hXe),e(v,vg),e(vg,_U),e(_U,pXe),e(vg,_Xe),e(vg,kB),e(kB,uXe),e(vg,bXe),e(v,vXe),e(v,Tg),e(Tg,uU),e(uU,TXe),e(Tg,FXe),e(Tg,RB),e(RB,CXe),e(Tg,MXe),e(v,EXe),e(v,Fg),e(Fg,bU),e(bU,yXe),e(Fg,wXe),e(Fg,SB),e(SB,AXe),e(Fg,LXe),e(v,BXe),e(v,Cg),e(Cg,vU),e(vU,xXe),e(Cg,kXe),e(Cg,PB),e(PB,RXe),e(Cg,SXe),e(v,PXe),e(v,Mg),e(Mg,TU),e(TU,$Xe),e(Mg,IXe),e(Mg,$B),e($B,jXe),e(Mg,NXe),e(v,DXe),e(v,Eg),e(Eg,FU),e(FU,qXe),e(Eg,OXe),e(Eg,IB),e(IB,GXe),e(Eg,XXe),e(v,VXe),e(v,yg),e(yg,CU),e(CU,zXe),e(yg,WXe),e(yg,jB),e(jB,QXe),e(yg,HXe),e(v,UXe),e(v,wg),e(wg,MU),e(MU,JXe),e(wg,YXe),e(wg,NB),e(NB,KXe),e(wg,ZXe),e(v,eVe),e(v,Ag),e(Ag,EU),e(EU,oVe),e(Ag,rVe),e(Ag,DB),e(DB,tVe),e(Ag,aVe),e(v,nVe),e(v,Lg),e(Lg,yU),e(yU,sVe),e(Lg,lVe),e(Lg,qB),e(qB,iVe),e(Lg,dVe),e(v,cVe),e(v,Bg),e(Bg,wU),e(wU,fVe),e(Bg,mVe),e(Bg,OB),e(OB,gVe),e(Bg,hVe),e(v,pVe),e(v,xg),e(xg,AU),e(AU,_Ve),e(xg,uVe),e(xg,GB),e(GB,bVe),e(xg,vVe),e(mo,TVe),e(mo,LU),e(LU,FVe),e(mo,CVe),g(m3,mo,null),e(Wo,MVe),e(Wo,kg),g(g3,kg,null),e(kg,EVe),e(kg,BU),e(BU,yVe),b(c,zxe,u),b(c,Qi,u),e(Qi,Rg),e(Rg,xU),g(h3,xU,null),e(Qi,wVe),e(Qi,kU),e(kU,AVe),b(c,Wxe,u),b(c,Qo,u),g(p3,Qo,null),e(Qo,LVe),e(Qo,_3),e(_3,BVe),e(_3,XB),e(XB,xVe),e(_3,kVe),e(Qo,RVe),e(Qo,u3),e(u3,SVe),e(u3,RU),e(RU,PVe),e(u3,$Ve),e(Qo,IVe),e(Qo,go),g(b3,go,null),e(go,jVe),e(go,SU),e(SU,NVe),e(go,DVe),e(go,Ga),e(Ga,qVe),e(Ga,PU),e(PU,OVe),e(Ga,GVe),e(Ga,$U),e($U,XVe),e(Ga,VVe),e(Ga,IU),e(IU,zVe),e(Ga,WVe),e(go,QVe),e(go,E),e(E,Wn),e(Wn,jU),e(jU,HVe),e(Wn,UVe),e(Wn,VB),e(VB,JVe),e(Wn,YVe),e(Wn,zB),e(zB,KVe),e(Wn,ZVe),e(E,eze),e(E,Qn),e(Qn,NU),e(NU,oze),e(Qn,rze),e(Qn,WB),e(WB,tze),e(Qn,aze),e(Qn,QB),e(QB,nze),e(Qn,sze),e(E,lze),e(E,Hn),e(Hn,DU),e(DU,ize),e(Hn,dze),e(Hn,HB),e(HB,cze),e(Hn,fze),e(Hn,UB),e(UB,mze),e(Hn,gze),e(E,hze),e(E,Sg),e(Sg,qU),e(qU,pze),e(Sg,_ze),e(Sg,JB),e(JB,uze),e(Sg,bze),e(E,vze),e(E,Un),e(Un,OU),e(OU,Tze),e(Un,Fze),e(Un,YB),e(YB,Cze),e(Un,Mze),e(Un,KB),e(KB,Eze),e(Un,yze),e(E,wze),e(E,Pg),e(Pg,GU),e(GU,Aze),e(Pg,Lze),e(Pg,ZB),e(ZB,Bze),e(Pg,xze),e(E,kze),e(E,$g),e($g,XU),e(XU,Rze),e($g,Sze),e($g,ex),e(ex,Pze),e($g,$ze),e(E,Ize),e(E,Ig),e(Ig,VU),e(VU,jze),e(Ig,Nze),e(Ig,ox),e(ox,Dze),e(Ig,qze),e(E,Oze),e(E,Jn),e(Jn,zU),e(zU,Gze),e(Jn,Xze),e(Jn,rx),e(rx,Vze),e(Jn,zze),e(Jn,tx),e(tx,Wze),e(Jn,Qze),e(E,Hze),e(E,Yn),e(Yn,WU),e(WU,Uze),e(Yn,Jze),e(Yn,ax),e(ax,Yze),e(Yn,Kze),e(Yn,nx),e(nx,Zze),e(Yn,eWe),e(E,oWe),e(E,Kn),e(Kn,QU),e(QU,rWe),e(Kn,tWe),e(Kn,sx),e(sx,aWe),e(Kn,nWe),e(Kn,lx),e(lx,sWe),e(Kn,lWe),e(E,iWe),e(E,jg),e(jg,HU),e(HU,dWe),e(jg,cWe),e(jg,ix),e(ix,fWe),e(jg,mWe),e(E,gWe),e(E,Ng),e(Ng,UU),e(UU,hWe),e(Ng,pWe),e(Ng,dx),e(dx,_We),e(Ng,uWe),e(E,bWe),e(E,Zn),e(Zn,JU),e(JU,vWe),e(Zn,TWe),e(Zn,cx),e(cx,FWe),e(Zn,CWe),e(Zn,fx),e(fx,MWe),e(Zn,EWe),e(E,yWe),e(E,Dg),e(Dg,YU),e(YU,wWe),e(Dg,AWe),e(Dg,mx),e(mx,LWe),e(Dg,BWe),e(E,xWe),e(E,es),e(es,KU),e(KU,kWe),e(es,RWe),e(es,gx),e(gx,SWe),e(es,PWe),e(es,hx),e(hx,$We),e(es,IWe),e(E,jWe),e(E,os),e(os,ZU),e(ZU,NWe),e(os,DWe),e(os,px),e(px,qWe),e(os,OWe),e(os,_x),e(_x,GWe),e(os,XWe),e(E,VWe),e(E,rs),e(rs,eJ),e(eJ,zWe),e(rs,WWe),e(rs,ux),e(ux,QWe),e(rs,HWe),e(rs,oJ),e(oJ,UWe),e(rs,JWe),e(E,YWe),e(E,qg),e(qg,rJ),e(rJ,KWe),e(qg,ZWe),e(qg,bx),e(bx,eQe),e(qg,oQe),e(E,rQe),e(E,ts),e(ts,tJ),e(tJ,tQe),e(ts,aQe),e(ts,vx),e(vx,nQe),e(ts,sQe),e(ts,Tx),e(Tx,lQe),e(ts,iQe),e(E,dQe),e(E,Og),e(Og,aJ),e(aJ,cQe),e(Og,fQe),e(Og,Fx),e(Fx,mQe),e(Og,gQe),e(E,hQe),e(E,as),e(as,nJ),e(nJ,pQe),e(as,_Qe),e(as,Cx),e(Cx,uQe),e(as,bQe),e(as,Mx),e(Mx,vQe),e(as,TQe),e(E,FQe),e(E,ns),e(ns,sJ),e(sJ,CQe),e(ns,MQe),e(ns,Ex),e(Ex,EQe),e(ns,yQe),e(ns,yx),e(yx,wQe),e(ns,AQe),e(E,LQe),e(E,ss),e(ss,lJ),e(lJ,BQe),e(ss,xQe),e(ss,wx),e(wx,kQe),e(ss,RQe),e(ss,Ax),e(Ax,SQe),e(ss,PQe),e(E,$Qe),e(E,Gg),e(Gg,iJ),e(iJ,IQe),e(Gg,jQe),e(Gg,Lx),e(Lx,NQe),e(Gg,DQe),e(E,qQe),e(E,ls),e(ls,dJ),e(dJ,OQe),e(ls,GQe),e(ls,Bx),e(Bx,XQe),e(ls,VQe),e(ls,xx),e(xx,zQe),e(ls,WQe),e(E,QQe),e(E,Xg),e(Xg,cJ),e(cJ,HQe),e(Xg,UQe),e(Xg,kx),e(kx,JQe),e(Xg,YQe),e(E,KQe),e(E,is),e(is,fJ),e(fJ,ZQe),e(is,eHe),e(is,Rx),e(Rx,oHe),e(is,rHe),e(is,Sx),e(Sx,tHe),e(is,aHe),e(E,nHe),e(E,ds),e(ds,mJ),e(mJ,sHe),e(ds,lHe),e(ds,Px),e(Px,iHe),e(ds,dHe),e(ds,$x),e($x,cHe),e(ds,fHe),e(E,mHe),e(E,cs),e(cs,gJ),e(gJ,gHe),e(cs,hHe),e(cs,Ix),e(Ix,pHe),e(cs,_He),e(cs,jx),e(jx,uHe),e(cs,bHe),e(E,vHe),e(E,fs),e(fs,hJ),e(hJ,THe),e(fs,FHe),e(fs,Nx),e(Nx,CHe),e(fs,MHe),e(fs,Dx),e(Dx,EHe),e(fs,yHe),e(E,wHe),e(E,Vg),e(Vg,pJ),e(pJ,AHe),e(Vg,LHe),e(Vg,qx),e(qx,BHe),e(Vg,xHe),e(E,kHe),e(E,ms),e(ms,_J),e(_J,RHe),e(ms,SHe),e(ms,Ox),e(Ox,PHe),e(ms,$He),e(ms,Gx),e(Gx,IHe),e(ms,jHe),e(E,NHe),e(E,gs),e(gs,uJ),e(uJ,DHe),e(gs,qHe),e(gs,Xx),e(Xx,OHe),e(gs,GHe),e(gs,Vx),e(Vx,XHe),e(gs,VHe),e(E,zHe),e(E,hs),e(hs,bJ),e(bJ,WHe),e(hs,QHe),e(hs,zx),e(zx,HHe),e(hs,UHe),e(hs,Wx),e(Wx,JHe),e(hs,YHe),e(E,KHe),e(E,ps),e(ps,vJ),e(vJ,ZHe),e(ps,eUe),e(ps,Qx),e(Qx,oUe),e(ps,rUe),e(ps,Hx),e(Hx,tUe),e(ps,aUe),e(E,nUe),e(E,_s),e(_s,TJ),e(TJ,sUe),e(_s,lUe),e(_s,Ux),e(Ux,iUe),e(_s,dUe),e(_s,Jx),e(Jx,cUe),e(_s,fUe),e(E,mUe),e(E,us),e(us,FJ),e(FJ,gUe),e(us,hUe),e(us,Yx),e(Yx,pUe),e(us,_Ue),e(us,Kx),e(Kx,uUe),e(us,bUe),e(E,vUe),e(E,zg),e(zg,CJ),e(CJ,TUe),e(zg,FUe),e(zg,Zx),e(Zx,CUe),e(zg,MUe),e(E,EUe),e(E,bs),e(bs,MJ),e(MJ,yUe),e(bs,wUe),e(bs,ek),e(ek,AUe),e(bs,LUe),e(bs,ok),e(ok,BUe),e(bs,xUe),e(E,kUe),e(E,Wg),e(Wg,EJ),e(EJ,RUe),e(Wg,SUe),e(Wg,rk),e(rk,PUe),e(Wg,$Ue),e(E,IUe),e(E,Qg),e(Qg,yJ),e(yJ,jUe),e(Qg,NUe),e(Qg,tk),e(tk,DUe),e(Qg,qUe),e(E,OUe),e(E,vs),e(vs,wJ),e(wJ,GUe),e(vs,XUe),e(vs,ak),e(ak,VUe),e(vs,zUe),e(vs,nk),e(nk,WUe),e(vs,QUe),e(E,HUe),e(E,Ts),e(Ts,AJ),e(AJ,UUe),e(Ts,JUe),e(Ts,sk),e(sk,YUe),e(Ts,KUe),e(Ts,lk),e(lk,ZUe),e(Ts,eJe),e(E,oJe),e(E,Hg),e(Hg,LJ),e(LJ,rJe),e(Hg,tJe),e(Hg,ik),e(ik,aJe),e(Hg,nJe),e(E,sJe),e(E,Fs),e(Fs,BJ),e(BJ,lJe),e(Fs,iJe),e(Fs,dk),e(dk,dJe),e(Fs,cJe),e(Fs,ck),e(ck,fJe),e(Fs,mJe),e(E,gJe),e(E,Cs),e(Cs,xJ),e(xJ,hJe),e(Cs,pJe),e(Cs,fk),e(fk,_Je),e(Cs,uJe),e(Cs,mk),e(mk,bJe),e(Cs,vJe),e(E,TJe),e(E,Ms),e(Ms,kJ),e(kJ,FJe),e(Ms,CJe),e(Ms,gk),e(gk,MJe),e(Ms,EJe),e(Ms,hk),e(hk,yJe),e(Ms,wJe),e(E,AJe),e(E,Es),e(Es,RJ),e(RJ,LJe),e(Es,BJe),e(Es,pk),e(pk,xJe),e(Es,kJe),e(Es,_k),e(_k,RJe),e(Es,SJe),e(E,PJe),e(E,ys),e(ys,SJ),e(SJ,$Je),e(ys,IJe),e(ys,uk),e(uk,jJe),e(ys,NJe),e(ys,bk),e(bk,DJe),e(ys,qJe),e(E,OJe),e(E,Ug),e(Ug,PJ),e(PJ,GJe),e(Ug,XJe),e(Ug,vk),e(vk,VJe),e(Ug,zJe),e(E,WJe),e(E,Jg),e(Jg,$J),e($J,QJe),e(Jg,HJe),e(Jg,Tk),e(Tk,UJe),e(Jg,JJe),e(E,YJe),e(E,Yg),e(Yg,IJ),e(IJ,KJe),e(Yg,ZJe),e(Yg,Fk),e(Fk,eYe),e(Yg,oYe),e(E,rYe),e(E,Kg),e(Kg,jJ),e(jJ,tYe),e(Kg,aYe),e(Kg,Ck),e(Ck,nYe),e(Kg,sYe),e(E,lYe),e(E,ws),e(ws,NJ),e(NJ,iYe),e(ws,dYe),e(ws,Mk),e(Mk,cYe),e(ws,fYe),e(ws,Ek),e(Ek,mYe),e(ws,gYe),e(E,hYe),e(E,Zg),e(Zg,DJ),e(DJ,pYe),e(Zg,_Ye),e(Zg,yk),e(yk,uYe),e(Zg,bYe),e(E,vYe),e(E,As),e(As,qJ),e(qJ,TYe),e(As,FYe),e(As,wk),e(wk,CYe),e(As,MYe),e(As,Ak),e(Ak,EYe),e(As,yYe),e(E,wYe),e(E,Ls),e(Ls,OJ),e(OJ,AYe),e(Ls,LYe),e(Ls,Lk),e(Lk,BYe),e(Ls,xYe),e(Ls,Bk),e(Bk,kYe),e(Ls,RYe),e(E,SYe),e(E,Bs),e(Bs,GJ),e(GJ,PYe),e(Bs,$Ye),e(Bs,xk),e(xk,IYe),e(Bs,jYe),e(Bs,kk),e(kk,NYe),e(Bs,DYe),e(E,qYe),e(E,xs),e(xs,XJ),e(XJ,OYe),e(xs,GYe),e(xs,Rk),e(Rk,XYe),e(xs,VYe),e(xs,Sk),e(Sk,zYe),e(xs,WYe),e(E,QYe),e(E,ks),e(ks,VJ),e(VJ,HYe),e(ks,UYe),e(ks,Pk),e(Pk,JYe),e(ks,YYe),e(ks,$k),e($k,KYe),e(ks,ZYe),e(E,eKe),e(E,Rs),e(Rs,zJ),e(zJ,oKe),e(Rs,rKe),e(Rs,Ik),e(Ik,tKe),e(Rs,aKe),e(Rs,jk),e(jk,nKe),e(Rs,sKe),e(E,lKe),e(E,eh),e(eh,WJ),e(WJ,iKe),e(eh,dKe),e(eh,Nk),e(Nk,cKe),e(eh,fKe),e(E,mKe),e(E,oh),e(oh,QJ),e(QJ,gKe),e(oh,hKe),e(oh,Dk),e(Dk,pKe),e(oh,_Ke),e(E,uKe),e(E,Ss),e(Ss,HJ),e(HJ,bKe),e(Ss,vKe),e(Ss,qk),e(qk,TKe),e(Ss,FKe),e(Ss,Ok),e(Ok,CKe),e(Ss,MKe),e(E,EKe),e(E,Ps),e(Ps,UJ),e(UJ,yKe),e(Ps,wKe),e(Ps,Gk),e(Gk,AKe),e(Ps,LKe),e(Ps,Xk),e(Xk,BKe),e(Ps,xKe),e(E,kKe),e(E,$s),e($s,JJ),e(JJ,RKe),e($s,SKe),e($s,Vk),e(Vk,PKe),e($s,$Ke),e($s,zk),e(zk,IKe),e($s,jKe),e(E,NKe),e(E,rh),e(rh,YJ),e(YJ,DKe),e(rh,qKe),e(rh,Wk),e(Wk,OKe),e(rh,GKe),e(E,XKe),e(E,th),e(th,KJ),e(KJ,VKe),e(th,zKe),e(th,Qk),e(Qk,WKe),e(th,QKe),e(E,HKe),e(E,ah),e(ah,ZJ),e(ZJ,UKe),e(ah,JKe),e(ah,Hk),e(Hk,YKe),e(ah,KKe),e(E,ZKe),e(E,nh),e(nh,eY),e(eY,eZe),e(nh,oZe),e(nh,Uk),e(Uk,rZe),e(nh,tZe),e(E,aZe),e(E,Is),e(Is,oY),e(oY,nZe),e(Is,sZe),e(Is,Jk),e(Jk,lZe),e(Is,iZe),e(Is,Yk),e(Yk,dZe),e(Is,cZe),e(E,fZe),e(E,sh),e(sh,rY),e(rY,mZe),e(sh,gZe),e(sh,Kk),e(Kk,hZe),e(sh,pZe),e(E,_Ze),e(E,lh),e(lh,tY),e(tY,uZe),e(lh,bZe),e(lh,Zk),e(Zk,vZe),e(lh,TZe),e(E,FZe),e(E,js),e(js,aY),e(aY,CZe),e(js,MZe),e(js,eR),e(eR,EZe),e(js,yZe),e(js,oR),e(oR,wZe),e(js,AZe),e(E,LZe),e(E,Ns),e(Ns,nY),e(nY,BZe),e(Ns,xZe),e(Ns,rR),e(rR,kZe),e(Ns,RZe),e(Ns,tR),e(tR,SZe),e(Ns,PZe),e(go,$Ze),e(go,sY),e(sY,IZe),e(go,jZe),g(v3,go,null),e(Qo,NZe),e(Qo,ih),g(T3,ih,null),e(ih,DZe),e(ih,lY),e(lY,qZe),b(c,Qxe,u),b(c,Hi,u),e(Hi,dh),e(dh,iY),g(F3,iY,null),e(Hi,OZe),e(Hi,dY),e(dY,GZe),b(c,Hxe,u),b(c,Ho,u),g(C3,Ho,null),e(Ho,XZe),e(Ho,M3),e(M3,VZe),e(M3,aR),e(aR,zZe),e(M3,WZe),e(Ho,QZe),e(Ho,E3),e(E3,HZe),e(E3,cY),e(cY,UZe),e(E3,JZe),e(Ho,YZe),e(Ho,Ie),g(y3,Ie,null),e(Ie,KZe),e(Ie,fY),e(fY,ZZe),e(Ie,eeo),e(Ie,Xa),e(Xa,oeo),e(Xa,mY),e(mY,reo),e(Xa,teo),e(Xa,gY),e(gY,aeo),e(Xa,neo),e(Xa,hY),e(hY,seo),e(Xa,leo),e(Ie,ieo),e(Ie,re),e(re,ch),e(ch,pY),e(pY,deo),e(ch,ceo),e(ch,nR),e(nR,feo),e(ch,meo),e(re,geo),e(re,fh),e(fh,_Y),e(_Y,heo),e(fh,peo),e(fh,sR),e(sR,_eo),e(fh,ueo),e(re,beo),e(re,mh),e(mh,uY),e(uY,veo),e(mh,Teo),e(mh,lR),e(lR,Feo),e(mh,Ceo),e(re,Meo),e(re,gh),e(gh,bY),e(bY,Eeo),e(gh,yeo),e(gh,iR),e(iR,weo),e(gh,Aeo),e(re,Leo),e(re,hh),e(hh,vY),e(vY,Beo),e(hh,xeo),e(hh,dR),e(dR,keo),e(hh,Reo),e(re,Seo),e(re,ph),e(ph,TY),e(TY,Peo),e(ph,$eo),e(ph,cR),e(cR,Ieo),e(ph,jeo),e(re,Neo),e(re,_h),e(_h,FY),e(FY,Deo),e(_h,qeo),e(_h,fR),e(fR,Oeo),e(_h,Geo),e(re,Xeo),e(re,uh),e(uh,CY),e(CY,Veo),e(uh,zeo),e(uh,mR),e(mR,Weo),e(uh,Qeo),e(re,Heo),e(re,bh),e(bh,MY),e(MY,Ueo),e(bh,Jeo),e(bh,gR),e(gR,Yeo),e(bh,Keo),e(re,Zeo),e(re,vh),e(vh,EY),e(EY,eoo),e(vh,ooo),e(vh,hR),e(hR,roo),e(vh,too),e(re,aoo),e(re,Th),e(Th,yY),e(yY,noo),e(Th,soo),e(Th,pR),e(pR,loo),e(Th,ioo),e(re,doo),e(re,Fh),e(Fh,wY),e(wY,coo),e(Fh,foo),e(Fh,_R),e(_R,moo),e(Fh,goo),e(re,hoo),e(re,Ch),e(Ch,AY),e(AY,poo),e(Ch,_oo),e(Ch,uR),e(uR,uoo),e(Ch,boo),e(re,voo),e(re,Mh),e(Mh,LY),e(LY,Too),e(Mh,Foo),e(Mh,bR),e(bR,Coo),e(Mh,Moo),e(re,Eoo),e(re,Eh),e(Eh,BY),e(BY,yoo),e(Eh,woo),e(Eh,vR),e(vR,Aoo),e(Eh,Loo),e(re,Boo),e(re,yh),e(yh,xY),e(xY,xoo),e(yh,koo),e(yh,TR),e(TR,Roo),e(yh,Soo),e(re,Poo),e(re,wh),e(wh,kY),e(kY,$oo),e(wh,Ioo),e(wh,FR),e(FR,joo),e(wh,Noo),e(re,Doo),e(re,Ah),e(Ah,RY),e(RY,qoo),e(Ah,Ooo),e(Ah,CR),e(CR,Goo),e(Ah,Xoo),e(Ie,Voo),g(Lh,Ie,null),e(Ie,zoo),e(Ie,SY),e(SY,Woo),e(Ie,Qoo),g(w3,Ie,null),e(Ho,Hoo),e(Ho,Bh),g(A3,Bh,null),e(Bh,Uoo),e(Bh,PY),e(PY,Joo),b(c,Uxe,u),b(c,Ui,u),e(Ui,xh),e(xh,$Y),g(L3,$Y,null),e(Ui,Yoo),e(Ui,IY),e(IY,Koo),b(c,Jxe,u),b(c,Uo,u),g(B3,Uo,null),e(Uo,Zoo),e(Uo,x3),e(x3,ero),e(x3,MR),e(MR,oro),e(x3,rro),e(Uo,tro),e(Uo,k3),e(k3,aro),e(k3,jY),e(jY,nro),e(k3,sro),e(Uo,lro),e(Uo,je),g(R3,je,null),e(je,iro),e(je,NY),e(NY,dro),e(je,cro),e(je,Ji),e(Ji,fro),e(Ji,DY),e(DY,mro),e(Ji,gro),e(Ji,qY),e(qY,hro),e(Ji,pro),e(je,_ro),e(je,xe),e(xe,kh),e(kh,OY),e(OY,uro),e(kh,bro),e(kh,ER),e(ER,vro),e(kh,Tro),e(xe,Fro),e(xe,Rh),e(Rh,GY),e(GY,Cro),e(Rh,Mro),e(Rh,yR),e(yR,Ero),e(Rh,yro),e(xe,wro),e(xe,Sh),e(Sh,XY),e(XY,Aro),e(Sh,Lro),e(Sh,wR),e(wR,Bro),e(Sh,xro),e(xe,kro),e(xe,Ph),e(Ph,VY),e(VY,Rro),e(Ph,Sro),e(Ph,AR),e(AR,Pro),e(Ph,$ro),e(xe,Iro),e(xe,$h),e($h,zY),e(zY,jro),e($h,Nro),e($h,LR),e(LR,Dro),e($h,qro),e(xe,Oro),e(xe,Ih),e(Ih,WY),e(WY,Gro),e(Ih,Xro),e(Ih,BR),e(BR,Vro),e(Ih,zro),e(xe,Wro),e(xe,jh),e(jh,QY),e(QY,Qro),e(jh,Hro),e(jh,xR),e(xR,Uro),e(jh,Jro),e(xe,Yro),e(xe,Nh),e(Nh,HY),e(HY,Kro),e(Nh,Zro),e(Nh,kR),e(kR,eto),e(Nh,oto),e(je,rto),g(Dh,je,null),e(je,tto),e(je,UY),e(UY,ato),e(je,nto),g(S3,je,null),e(Uo,sto),e(Uo,qh),g(P3,qh,null),e(qh,lto),e(qh,JY),e(JY,ito),b(c,Yxe,u),b(c,Yi,u),e(Yi,Oh),e(Oh,YY),g($3,YY,null),e(Yi,dto),e(Yi,KY),e(KY,cto),b(c,Kxe,u),b(c,Jo,u),g(I3,Jo,null),e(Jo,fto),e(Jo,Ki),e(Ki,mto),e(Ki,ZY),e(ZY,gto),e(Ki,hto),e(Ki,eK),e(eK,pto),e(Ki,_to),e(Jo,uto),e(Jo,j3),e(j3,bto),e(j3,oK),e(oK,vto),e(j3,Tto),e(Jo,Fto),e(Jo,Vr),g(N3,Vr,null),e(Vr,Cto),e(Vr,rK),e(rK,Mto),e(Vr,Eto),e(Vr,Zi),e(Zi,yto),e(Zi,tK),e(tK,wto),e(Zi,Ato),e(Zi,aK),e(aK,Lto),e(Zi,Bto),e(Vr,xto),e(Vr,nK),e(nK,kto),e(Vr,Rto),g(D3,Vr,null),e(Jo,Sto),e(Jo,Ne),g(q3,Ne,null),e(Ne,Pto),e(Ne,sK),e(sK,$to),e(Ne,Ito),e(Ne,Va),e(Va,jto),e(Va,lK),e(lK,Nto),e(Va,Dto),e(Va,iK),e(iK,qto),e(Va,Oto),e(Va,dK),e(dK,Gto),e(Va,Xto),e(Ne,Vto),e(Ne,F),e(F,Gh),e(Gh,cK),e(cK,zto),e(Gh,Wto),e(Gh,RR),e(RR,Qto),e(Gh,Hto),e(F,Uto),e(F,Xh),e(Xh,fK),e(fK,Jto),e(Xh,Yto),e(Xh,SR),e(SR,Kto),e(Xh,Zto),e(F,eao),e(F,Vh),e(Vh,mK),e(mK,oao),e(Vh,rao),e(Vh,PR),e(PR,tao),e(Vh,aao),e(F,nao),e(F,zh),e(zh,gK),e(gK,sao),e(zh,lao),e(zh,$R),e($R,iao),e(zh,dao),e(F,cao),e(F,Wh),e(Wh,hK),e(hK,fao),e(Wh,mao),e(Wh,IR),e(IR,gao),e(Wh,hao),e(F,pao),e(F,Qh),e(Qh,pK),e(pK,_ao),e(Qh,uao),e(Qh,jR),e(jR,bao),e(Qh,vao),e(F,Tao),e(F,Hh),e(Hh,_K),e(_K,Fao),e(Hh,Cao),e(Hh,NR),e(NR,Mao),e(Hh,Eao),e(F,yao),e(F,Uh),e(Uh,uK),e(uK,wao),e(Uh,Aao),e(Uh,DR),e(DR,Lao),e(Uh,Bao),e(F,xao),e(F,Jh),e(Jh,bK),e(bK,kao),e(Jh,Rao),e(Jh,qR),e(qR,Sao),e(Jh,Pao),e(F,$ao),e(F,Yh),e(Yh,vK),e(vK,Iao),e(Yh,jao),e(Yh,OR),e(OR,Nao),e(Yh,Dao),e(F,qao),e(F,Kh),e(Kh,TK),e(TK,Oao),e(Kh,Gao),e(Kh,GR),e(GR,Xao),e(Kh,Vao),e(F,zao),e(F,Zh),e(Zh,FK),e(FK,Wao),e(Zh,Qao),e(Zh,XR),e(XR,Hao),e(Zh,Uao),e(F,Jao),e(F,ep),e(ep,CK),e(CK,Yao),e(ep,Kao),e(ep,VR),e(VR,Zao),e(ep,eno),e(F,ono),e(F,op),e(op,MK),e(MK,rno),e(op,tno),e(op,zR),e(zR,ano),e(op,nno),e(F,sno),e(F,rp),e(rp,EK),e(EK,lno),e(rp,ino),e(rp,WR),e(WR,dno),e(rp,cno),e(F,fno),e(F,tp),e(tp,yK),e(yK,mno),e(tp,gno),e(tp,QR),e(QR,hno),e(tp,pno),e(F,_no),e(F,ap),e(ap,wK),e(wK,uno),e(ap,bno),e(ap,HR),e(HR,vno),e(ap,Tno),e(F,Fno),e(F,np),e(np,AK),e(AK,Cno),e(np,Mno),e(np,UR),e(UR,Eno),e(np,yno),e(F,wno),e(F,sp),e(sp,LK),e(LK,Ano),e(sp,Lno),e(sp,JR),e(JR,Bno),e(sp,xno),e(F,kno),e(F,lp),e(lp,BK),e(BK,Rno),e(lp,Sno),e(lp,YR),e(YR,Pno),e(lp,$no),e(F,Ino),e(F,ip),e(ip,xK),e(xK,jno),e(ip,Nno),e(ip,KR),e(KR,Dno),e(ip,qno),e(F,Ono),e(F,dp),e(dp,kK),e(kK,Gno),e(dp,Xno),e(dp,ZR),e(ZR,Vno),e(dp,zno),e(F,Wno),e(F,cp),e(cp,RK),e(RK,Qno),e(cp,Hno),e(cp,eS),e(eS,Uno),e(cp,Jno),e(F,Yno),e(F,fp),e(fp,SK),e(SK,Kno),e(fp,Zno),e(fp,oS),e(oS,eso),e(fp,oso),e(F,rso),e(F,mp),e(mp,PK),e(PK,tso),e(mp,aso),e(mp,rS),e(rS,nso),e(mp,sso),e(F,lso),e(F,gp),e(gp,$K),e($K,iso),e(gp,dso),e(gp,tS),e(tS,cso),e(gp,fso),e(F,mso),e(F,hp),e(hp,IK),e(IK,gso),e(hp,hso),e(hp,aS),e(aS,pso),e(hp,_so),e(F,uso),e(F,Ds),e(Ds,jK),e(jK,bso),e(Ds,vso),e(Ds,nS),e(nS,Tso),e(Ds,Fso),e(Ds,sS),e(sS,Cso),e(Ds,Mso),e(F,Eso),e(F,pp),e(pp,NK),e(NK,yso),e(pp,wso),e(pp,lS),e(lS,Aso),e(pp,Lso),e(F,Bso),e(F,_p),e(_p,DK),e(DK,xso),e(_p,kso),e(_p,iS),e(iS,Rso),e(_p,Sso),e(F,Pso),e(F,up),e(up,qK),e(qK,$so),e(up,Iso),e(up,dS),e(dS,jso),e(up,Nso),e(F,Dso),e(F,bp),e(bp,OK),e(OK,qso),e(bp,Oso),e(bp,cS),e(cS,Gso),e(bp,Xso),e(F,Vso),e(F,vp),e(vp,GK),e(GK,zso),e(vp,Wso),e(vp,fS),e(fS,Qso),e(vp,Hso),e(F,Uso),e(F,Tp),e(Tp,XK),e(XK,Jso),e(Tp,Yso),e(Tp,mS),e(mS,Kso),e(Tp,Zso),e(F,elo),e(F,Fp),e(Fp,VK),e(VK,olo),e(Fp,rlo),e(Fp,gS),e(gS,tlo),e(Fp,alo),e(F,nlo),e(F,Cp),e(Cp,zK),e(zK,slo),e(Cp,llo),e(Cp,hS),e(hS,ilo),e(Cp,dlo),e(F,clo),e(F,Mp),e(Mp,WK),e(WK,flo),e(Mp,mlo),e(Mp,pS),e(pS,glo),e(Mp,hlo),e(F,plo),e(F,Ep),e(Ep,QK),e(QK,_lo),e(Ep,ulo),e(Ep,_S),e(_S,blo),e(Ep,vlo),e(F,Tlo),e(F,yp),e(yp,HK),e(HK,Flo),e(yp,Clo),e(yp,uS),e(uS,Mlo),e(yp,Elo),e(F,ylo),e(F,wp),e(wp,UK),e(UK,wlo),e(wp,Alo),e(wp,bS),e(bS,Llo),e(wp,Blo),e(F,xlo),e(F,Ap),e(Ap,JK),e(JK,klo),e(Ap,Rlo),e(Ap,vS),e(vS,Slo),e(Ap,Plo),e(F,$lo),e(F,Lp),e(Lp,YK),e(YK,Ilo),e(Lp,jlo),e(Lp,TS),e(TS,Nlo),e(Lp,Dlo),e(F,qlo),e(F,Bp),e(Bp,KK),e(KK,Olo),e(Bp,Glo),e(Bp,FS),e(FS,Xlo),e(Bp,Vlo),e(F,zlo),e(F,xp),e(xp,ZK),e(ZK,Wlo),e(xp,Qlo),e(xp,CS),e(CS,Hlo),e(xp,Ulo),e(F,Jlo),e(F,kp),e(kp,eZ),e(eZ,Ylo),e(kp,Klo),e(kp,MS),e(MS,Zlo),e(kp,eio),e(F,oio),e(F,Rp),e(Rp,oZ),e(oZ,rio),e(Rp,tio),e(Rp,ES),e(ES,aio),e(Rp,nio),e(F,sio),e(F,Sp),e(Sp,rZ),e(rZ,lio),e(Sp,iio),e(Sp,yS),e(yS,dio),e(Sp,cio),e(F,fio),e(F,Pp),e(Pp,tZ),e(tZ,mio),e(Pp,gio),e(Pp,wS),e(wS,hio),e(Pp,pio),e(F,_io),e(F,$p),e($p,aZ),e(aZ,uio),e($p,bio),e($p,AS),e(AS,vio),e($p,Tio),e(F,Fio),e(F,Ip),e(Ip,nZ),e(nZ,Cio),e(Ip,Mio),e(Ip,LS),e(LS,Eio),e(Ip,yio),e(F,wio),e(F,jp),e(jp,sZ),e(sZ,Aio),e(jp,Lio),e(jp,BS),e(BS,Bio),e(jp,xio),e(F,kio),e(F,Np),e(Np,lZ),e(lZ,Rio),e(Np,Sio),e(Np,xS),e(xS,Pio),e(Np,$io),e(F,Iio),e(F,Dp),e(Dp,iZ),e(iZ,jio),e(Dp,Nio),e(Dp,kS),e(kS,Dio),e(Dp,qio),e(F,Oio),e(F,qp),e(qp,dZ),e(dZ,Gio),e(qp,Xio),e(qp,RS),e(RS,Vio),e(qp,zio),e(F,Wio),e(F,Op),e(Op,cZ),e(cZ,Qio),e(Op,Hio),e(Op,SS),e(SS,Uio),e(Op,Jio),e(F,Yio),e(F,Gp),e(Gp,fZ),e(fZ,Kio),e(Gp,Zio),e(Gp,PS),e(PS,edo),e(Gp,odo),e(F,rdo),e(F,Xp),e(Xp,mZ),e(mZ,tdo),e(Xp,ado),e(Xp,$S),e($S,ndo),e(Xp,sdo),e(F,ldo),e(F,Vp),e(Vp,gZ),e(gZ,ido),e(Vp,ddo),e(Vp,IS),e(IS,cdo),e(Vp,fdo),e(F,mdo),e(F,zp),e(zp,hZ),e(hZ,gdo),e(zp,hdo),e(zp,jS),e(jS,pdo),e(zp,_do),e(F,udo),e(F,Wp),e(Wp,pZ),e(pZ,bdo),e(Wp,vdo),e(Wp,NS),e(NS,Tdo),e(Wp,Fdo),e(F,Cdo),e(F,Qp),e(Qp,_Z),e(_Z,Mdo),e(Qp,Edo),e(Qp,DS),e(DS,ydo),e(Qp,wdo),e(F,Ado),e(F,Hp),e(Hp,uZ),e(uZ,Ldo),e(Hp,Bdo),e(Hp,qS),e(qS,xdo),e(Hp,kdo),e(F,Rdo),e(F,Up),e(Up,bZ),e(bZ,Sdo),e(Up,Pdo),e(Up,OS),e(OS,$do),e(Up,Ido),e(F,jdo),e(F,Jp),e(Jp,vZ),e(vZ,Ndo),e(Jp,Ddo),e(Jp,GS),e(GS,qdo),e(Jp,Odo),e(F,Gdo),e(F,Yp),e(Yp,TZ),e(TZ,Xdo),e(Yp,Vdo),e(Yp,XS),e(XS,zdo),e(Yp,Wdo),e(F,Qdo),e(F,Kp),e(Kp,FZ),e(FZ,Hdo),e(Kp,Udo),e(Kp,VS),e(VS,Jdo),e(Kp,Ydo),e(F,Kdo),e(F,Zp),e(Zp,CZ),e(CZ,Zdo),e(Zp,eco),e(Zp,zS),e(zS,oco),e(Zp,rco),e(F,tco),e(F,e_),e(e_,MZ),e(MZ,aco),e(e_,nco),e(e_,WS),e(WS,sco),e(e_,lco),e(F,ico),e(F,o_),e(o_,EZ),e(EZ,dco),e(o_,cco),e(o_,QS),e(QS,fco),e(o_,mco),e(F,gco),e(F,r_),e(r_,yZ),e(yZ,hco),e(r_,pco),e(r_,HS),e(HS,_co),e(r_,uco),e(F,bco),e(F,t_),e(t_,wZ),e(wZ,vco),e(t_,Tco),e(t_,US),e(US,Fco),e(t_,Cco),e(F,Mco),e(F,a_),e(a_,AZ),e(AZ,Eco),e(a_,yco),e(a_,JS),e(JS,wco),e(a_,Aco),e(F,Lco),e(F,n_),e(n_,LZ),e(LZ,Bco),e(n_,xco),e(n_,YS),e(YS,kco),e(n_,Rco),e(F,Sco),e(F,s_),e(s_,BZ),e(BZ,Pco),e(s_,$co),e(s_,KS),e(KS,Ico),e(s_,jco),e(F,Nco),e(F,l_),e(l_,xZ),e(xZ,Dco),e(l_,qco),e(l_,ZS),e(ZS,Oco),e(l_,Gco),e(F,Xco),e(F,i_),e(i_,kZ),e(kZ,Vco),e(i_,zco),e(i_,eP),e(eP,Wco),e(i_,Qco),e(F,Hco),e(F,d_),e(d_,RZ),e(RZ,Uco),e(d_,Jco),e(d_,oP),e(oP,Yco),e(d_,Kco),e(F,Zco),e(F,c_),e(c_,SZ),e(SZ,efo),e(c_,ofo),e(c_,rP),e(rP,rfo),e(c_,tfo),e(F,afo),e(F,f_),e(f_,PZ),e(PZ,nfo),e(f_,sfo),e(f_,tP),e(tP,lfo),e(f_,ifo),e(F,dfo),e(F,m_),e(m_,$Z),e($Z,cfo),e(m_,ffo),e(m_,aP),e(aP,mfo),e(m_,gfo),e(F,hfo),e(F,g_),e(g_,IZ),e(IZ,pfo),e(g_,_fo),e(g_,nP),e(nP,ufo),e(g_,bfo),e(F,vfo),e(F,h_),e(h_,jZ),e(jZ,Tfo),e(h_,Ffo),e(h_,sP),e(sP,Cfo),e(h_,Mfo),e(F,Efo),e(F,p_),e(p_,NZ),e(NZ,yfo),e(p_,wfo),e(p_,lP),e(lP,Afo),e(p_,Lfo),e(F,Bfo),e(F,__),e(__,DZ),e(DZ,xfo),e(__,kfo),e(__,iP),e(iP,Rfo),e(__,Sfo),e(F,Pfo),e(F,u_),e(u_,qZ),e(qZ,$fo),e(u_,Ifo),e(u_,dP),e(dP,jfo),e(u_,Nfo),e(F,Dfo),e(F,b_),e(b_,OZ),e(OZ,qfo),e(b_,Ofo),e(b_,cP),e(cP,Gfo),e(b_,Xfo),e(F,Vfo),e(F,v_),e(v_,GZ),e(GZ,zfo),e(v_,Wfo),e(v_,fP),e(fP,Qfo),e(v_,Hfo),e(F,Ufo),e(F,T_),e(T_,XZ),e(XZ,Jfo),e(T_,Yfo),e(T_,mP),e(mP,Kfo),e(T_,Zfo),e(F,emo),e(F,F_),e(F_,VZ),e(VZ,omo),e(F_,rmo),e(F_,gP),e(gP,tmo),e(F_,amo),e(Ne,nmo),e(Ne,C_),e(C_,smo),e(C_,zZ),e(zZ,lmo),e(C_,imo),e(C_,WZ),e(WZ,dmo),e(Ne,cmo),e(Ne,QZ),e(QZ,fmo),e(Ne,mmo),g(O3,Ne,null),b(c,Zxe,u),b(c,ed,u),e(ed,M_),e(M_,HZ),g(G3,HZ,null),e(ed,gmo),e(ed,UZ),e(UZ,hmo),b(c,eke,u),b(c,Yo,u),g(X3,Yo,null),e(Yo,pmo),e(Yo,od),e(od,_mo),e(od,JZ),e(JZ,umo),e(od,bmo),e(od,YZ),e(YZ,vmo),e(od,Tmo),e(Yo,Fmo),e(Yo,V3),e(V3,Cmo),e(V3,KZ),e(KZ,Mmo),e(V3,Emo),e(Yo,ymo),e(Yo,zr),g(z3,zr,null),e(zr,wmo),e(zr,ZZ),e(ZZ,Amo),e(zr,Lmo),e(zr,rd),e(rd,Bmo),e(rd,eee),e(eee,xmo),e(rd,kmo),e(rd,oee),e(oee,Rmo),e(rd,Smo),e(zr,Pmo),e(zr,ree),e(ree,$mo),e(zr,Imo),g(W3,zr,null),e(Yo,jmo),e(Yo,De),g(Q3,De,null),e(De,Nmo),e(De,tee),e(tee,Dmo),e(De,qmo),e(De,za),e(za,Omo),e(za,aee),e(aee,Gmo),e(za,Xmo),e(za,nee),e(nee,Vmo),e(za,zmo),e(za,see),e(see,Wmo),e(za,Qmo),e(De,Hmo),e(De,k),e(k,E_),e(E_,lee),e(lee,Umo),e(E_,Jmo),e(E_,hP),e(hP,Ymo),e(E_,Kmo),e(k,Zmo),e(k,y_),e(y_,iee),e(iee,ego),e(y_,ogo),e(y_,pP),e(pP,rgo),e(y_,tgo),e(k,ago),e(k,w_),e(w_,dee),e(dee,ngo),e(w_,sgo),e(w_,_P),e(_P,lgo),e(w_,igo),e(k,dgo),e(k,A_),e(A_,cee),e(cee,cgo),e(A_,fgo),e(A_,uP),e(uP,mgo),e(A_,ggo),e(k,hgo),e(k,L_),e(L_,fee),e(fee,pgo),e(L_,_go),e(L_,bP),e(bP,ugo),e(L_,bgo),e(k,vgo),e(k,B_),e(B_,mee),e(mee,Tgo),e(B_,Fgo),e(B_,vP),e(vP,Cgo),e(B_,Mgo),e(k,Ego),e(k,x_),e(x_,gee),e(gee,ygo),e(x_,wgo),e(x_,TP),e(TP,Ago),e(x_,Lgo),e(k,Bgo),e(k,k_),e(k_,hee),e(hee,xgo),e(k_,kgo),e(k_,FP),e(FP,Rgo),e(k_,Sgo),e(k,Pgo),e(k,R_),e(R_,pee),e(pee,$go),e(R_,Igo),e(R_,CP),e(CP,jgo),e(R_,Ngo),e(k,Dgo),e(k,S_),e(S_,_ee),e(_ee,qgo),e(S_,Ogo),e(S_,MP),e(MP,Ggo),e(S_,Xgo),e(k,Vgo),e(k,P_),e(P_,uee),e(uee,zgo),e(P_,Wgo),e(P_,EP),e(EP,Qgo),e(P_,Hgo),e(k,Ugo),e(k,$_),e($_,bee),e(bee,Jgo),e($_,Ygo),e($_,yP),e(yP,Kgo),e($_,Zgo),e(k,eho),e(k,I_),e(I_,vee),e(vee,oho),e(I_,rho),e(I_,wP),e(wP,tho),e(I_,aho),e(k,nho),e(k,j_),e(j_,Tee),e(Tee,sho),e(j_,lho),e(j_,AP),e(AP,iho),e(j_,dho),e(k,cho),e(k,N_),e(N_,Fee),e(Fee,fho),e(N_,mho),e(N_,LP),e(LP,gho),e(N_,hho),e(k,pho),e(k,D_),e(D_,Cee),e(Cee,_ho),e(D_,uho),e(D_,BP),e(BP,bho),e(D_,vho),e(k,Tho),e(k,q_),e(q_,Mee),e(Mee,Fho),e(q_,Cho),e(q_,xP),e(xP,Mho),e(q_,Eho),e(k,yho),e(k,O_),e(O_,Eee),e(Eee,who),e(O_,Aho),e(O_,kP),e(kP,Lho),e(O_,Bho),e(k,xho),e(k,G_),e(G_,yee),e(yee,kho),e(G_,Rho),e(G_,RP),e(RP,Sho),e(G_,Pho),e(k,$ho),e(k,X_),e(X_,wee),e(wee,Iho),e(X_,jho),e(X_,SP),e(SP,Nho),e(X_,Dho),e(k,qho),e(k,V_),e(V_,Aee),e(Aee,Oho),e(V_,Gho),e(V_,PP),e(PP,Xho),e(V_,Vho),e(k,zho),e(k,z_),e(z_,Lee),e(Lee,Who),e(z_,Qho),e(z_,$P),e($P,Hho),e(z_,Uho),e(k,Jho),e(k,W_),e(W_,Bee),e(Bee,Yho),e(W_,Kho),e(W_,IP),e(IP,Zho),e(W_,epo),e(k,opo),e(k,Q_),e(Q_,xee),e(xee,rpo),e(Q_,tpo),e(Q_,jP),e(jP,apo),e(Q_,npo),e(k,spo),e(k,H_),e(H_,kee),e(kee,lpo),e(H_,ipo),e(H_,NP),e(NP,dpo),e(H_,cpo),e(k,fpo),e(k,U_),e(U_,Ree),e(Ree,mpo),e(U_,gpo),e(U_,DP),e(DP,hpo),e(U_,ppo),e(k,_po),e(k,J_),e(J_,See),e(See,upo),e(J_,bpo),e(J_,qP),e(qP,vpo),e(J_,Tpo),e(k,Fpo),e(k,Y_),e(Y_,Pee),e(Pee,Cpo),e(Y_,Mpo),e(Y_,OP),e(OP,Epo),e(Y_,ypo),e(k,wpo),e(k,K_),e(K_,$ee),e($ee,Apo),e(K_,Lpo),e(K_,GP),e(GP,Bpo),e(K_,xpo),e(k,kpo),e(k,Z_),e(Z_,Iee),e(Iee,Rpo),e(Z_,Spo),e(Z_,XP),e(XP,Ppo),e(Z_,$po),e(k,Ipo),e(k,eu),e(eu,jee),e(jee,jpo),e(eu,Npo),e(eu,VP),e(VP,Dpo),e(eu,qpo),e(k,Opo),e(k,ou),e(ou,Nee),e(Nee,Gpo),e(ou,Xpo),e(ou,zP),e(zP,Vpo),e(ou,zpo),e(k,Wpo),e(k,ru),e(ru,Dee),e(Dee,Qpo),e(ru,Hpo),e(ru,WP),e(WP,Upo),e(ru,Jpo),e(k,Ypo),e(k,tu),e(tu,qee),e(qee,Kpo),e(tu,Zpo),e(tu,QP),e(QP,e_o),e(tu,o_o),e(k,r_o),e(k,au),e(au,Oee),e(Oee,t_o),e(au,a_o),e(au,HP),e(HP,n_o),e(au,s_o),e(k,l_o),e(k,nu),e(nu,Gee),e(Gee,i_o),e(nu,d_o),e(nu,UP),e(UP,c_o),e(nu,f_o),e(k,m_o),e(k,su),e(su,Xee),e(Xee,g_o),e(su,h_o),e(su,JP),e(JP,p_o),e(su,__o),e(k,u_o),e(k,lu),e(lu,Vee),e(Vee,b_o),e(lu,v_o),e(lu,YP),e(YP,T_o),e(lu,F_o),e(k,C_o),e(k,iu),e(iu,zee),e(zee,M_o),e(iu,E_o),e(iu,KP),e(KP,y_o),e(iu,w_o),e(De,A_o),e(De,du),e(du,L_o),e(du,Wee),e(Wee,B_o),e(du,x_o),e(du,Qee),e(Qee,k_o),e(De,R_o),e(De,Hee),e(Hee,S_o),e(De,P_o),g(H3,De,null),b(c,oke,u),b(c,td,u),e(td,cu),e(cu,Uee),g(U3,Uee,null),e(td,$_o),e(td,Jee),e(Jee,I_o),b(c,rke,u),b(c,Ko,u),g(J3,Ko,null),e(Ko,j_o),e(Ko,ad),e(ad,N_o),e(ad,Yee),e(Yee,D_o),e(ad,q_o),e(ad,Kee),e(Kee,O_o),e(ad,G_o),e(Ko,X_o),e(Ko,Y3),e(Y3,V_o),e(Y3,Zee),e(Zee,z_o),e(Y3,W_o),e(Ko,Q_o),e(Ko,Wr),g(K3,Wr,null),e(Wr,H_o),e(Wr,eoe),e(eoe,U_o),e(Wr,J_o),e(Wr,nd),e(nd,Y_o),e(nd,ooe),e(ooe,K_o),e(nd,Z_o),e(nd,roe),e(roe,euo),e(nd,ouo),e(Wr,ruo),e(Wr,toe),e(toe,tuo),e(Wr,auo),g(Z3,Wr,null),e(Ko,nuo),e(Ko,qe),g(e5,qe,null),e(qe,suo),e(qe,aoe),e(aoe,luo),e(qe,iuo),e(qe,Wa),e(Wa,duo),e(Wa,noe),e(noe,cuo),e(Wa,fuo),e(Wa,soe),e(soe,muo),e(Wa,guo),e(Wa,loe),e(loe,huo),e(Wa,puo),e(qe,_uo),e(qe,$),e($,fu),e(fu,ioe),e(ioe,uuo),e(fu,buo),e(fu,ZP),e(ZP,vuo),e(fu,Tuo),e($,Fuo),e($,mu),e(mu,doe),e(doe,Cuo),e(mu,Muo),e(mu,e$),e(e$,Euo),e(mu,yuo),e($,wuo),e($,gu),e(gu,coe),e(coe,Auo),e(gu,Luo),e(gu,o$),e(o$,Buo),e(gu,xuo),e($,kuo),e($,hu),e(hu,foe),e(foe,Ruo),e(hu,Suo),e(hu,r$),e(r$,Puo),e(hu,$uo),e($,Iuo),e($,pu),e(pu,moe),e(moe,juo),e(pu,Nuo),e(pu,t$),e(t$,Duo),e(pu,quo),e($,Ouo),e($,_u),e(_u,goe),e(goe,Guo),e(_u,Xuo),e(_u,a$),e(a$,Vuo),e(_u,zuo),e($,Wuo),e($,uu),e(uu,hoe),e(hoe,Quo),e(uu,Huo),e(uu,n$),e(n$,Uuo),e(uu,Juo),e($,Yuo),e($,bu),e(bu,poe),e(poe,Kuo),e(bu,Zuo),e(bu,s$),e(s$,e4o),e(bu,o4o),e($,r4o),e($,vu),e(vu,_oe),e(_oe,t4o),e(vu,a4o),e(vu,l$),e(l$,n4o),e(vu,s4o),e($,l4o),e($,Tu),e(Tu,uoe),e(uoe,i4o),e(Tu,d4o),e(Tu,i$),e(i$,c4o),e(Tu,f4o),e($,m4o),e($,Fu),e(Fu,boe),e(boe,g4o),e(Fu,h4o),e(Fu,d$),e(d$,p4o),e(Fu,_4o),e($,u4o),e($,Cu),e(Cu,voe),e(voe,b4o),e(Cu,v4o),e(Cu,c$),e(c$,T4o),e(Cu,F4o),e($,C4o),e($,Mu),e(Mu,Toe),e(Toe,M4o),e(Mu,E4o),e(Mu,f$),e(f$,y4o),e(Mu,w4o),e($,A4o),e($,Eu),e(Eu,Foe),e(Foe,L4o),e(Eu,B4o),e(Eu,m$),e(m$,x4o),e(Eu,k4o),e($,R4o),e($,yu),e(yu,Coe),e(Coe,S4o),e(yu,P4o),e(yu,g$),e(g$,$4o),e(yu,I4o),e($,j4o),e($,wu),e(wu,Moe),e(Moe,N4o),e(wu,D4o),e(wu,h$),e(h$,q4o),e(wu,O4o),e($,G4o),e($,Au),e(Au,Eoe),e(Eoe,X4o),e(Au,V4o),e(Au,p$),e(p$,z4o),e(Au,W4o),e($,Q4o),e($,Lu),e(Lu,yoe),e(yoe,H4o),e(Lu,U4o),e(Lu,_$),e(_$,J4o),e(Lu,Y4o),e($,K4o),e($,Bu),e(Bu,woe),e(woe,Z4o),e(Bu,e1o),e(Bu,u$),e(u$,o1o),e(Bu,r1o),e($,t1o),e($,xu),e(xu,Aoe),e(Aoe,a1o),e(xu,n1o),e(xu,b$),e(b$,s1o),e(xu,l1o),e($,i1o),e($,ku),e(ku,Loe),e(Loe,d1o),e(ku,c1o),e(ku,v$),e(v$,f1o),e(ku,m1o),e($,g1o),e($,Ru),e(Ru,Boe),e(Boe,h1o),e(Ru,p1o),e(Ru,T$),e(T$,_1o),e(Ru,u1o),e($,b1o),e($,Su),e(Su,xoe),e(xoe,v1o),e(Su,T1o),e(Su,F$),e(F$,F1o),e(Su,C1o),e($,M1o),e($,Pu),e(Pu,koe),e(koe,E1o),e(Pu,y1o),e(Pu,C$),e(C$,w1o),e(Pu,A1o),e($,L1o),e($,$u),e($u,Roe),e(Roe,B1o),e($u,x1o),e($u,M$),e(M$,k1o),e($u,R1o),e($,S1o),e($,Iu),e(Iu,Soe),e(Soe,P1o),e(Iu,$1o),e(Iu,E$),e(E$,I1o),e(Iu,j1o),e($,N1o),e($,ju),e(ju,Poe),e(Poe,D1o),e(ju,q1o),e(ju,y$),e(y$,O1o),e(ju,G1o),e($,X1o),e($,Nu),e(Nu,$oe),e($oe,V1o),e(Nu,z1o),e(Nu,w$),e(w$,W1o),e(Nu,Q1o),e($,H1o),e($,Du),e(Du,Ioe),e(Ioe,U1o),e(Du,J1o),e(Du,A$),e(A$,Y1o),e(Du,K1o),e($,Z1o),e($,qu),e(qu,joe),e(joe,ebo),e(qu,obo),e(qu,L$),e(L$,rbo),e(qu,tbo),e($,abo),e($,Ou),e(Ou,Noe),e(Noe,nbo),e(Ou,sbo),e(Ou,B$),e(B$,lbo),e(Ou,ibo),e($,dbo),e($,Gu),e(Gu,Doe),e(Doe,cbo),e(Gu,fbo),e(Gu,x$),e(x$,mbo),e(Gu,gbo),e($,hbo),e($,Xu),e(Xu,qoe),e(qoe,pbo),e(Xu,_bo),e(Xu,k$),e(k$,ubo),e(Xu,bbo),e($,vbo),e($,Vu),e(Vu,Ooe),e(Ooe,Tbo),e(Vu,Fbo),e(Vu,R$),e(R$,Cbo),e(Vu,Mbo),e($,Ebo),e($,zu),e(zu,Goe),e(Goe,ybo),e(zu,wbo),e(zu,S$),e(S$,Abo),e(zu,Lbo),e(qe,Bbo),e(qe,Wu),e(Wu,xbo),e(Wu,Xoe),e(Xoe,kbo),e(Wu,Rbo),e(Wu,Voe),e(Voe,Sbo),e(qe,Pbo),e(qe,zoe),e(zoe,$bo),e(qe,Ibo),g(o5,qe,null),b(c,tke,u),b(c,sd,u),e(sd,Qu),e(Qu,Woe),g(r5,Woe,null),e(sd,jbo),e(sd,Qoe),e(Qoe,Nbo),b(c,ake,u),b(c,Zo,u),g(t5,Zo,null),e(Zo,Dbo),e(Zo,ld),e(ld,qbo),e(ld,Hoe),e(Hoe,Obo),e(ld,Gbo),e(ld,Uoe),e(Uoe,Xbo),e(ld,Vbo),e(Zo,zbo),e(Zo,a5),e(a5,Wbo),e(a5,Joe),e(Joe,Qbo),e(a5,Hbo),e(Zo,Ubo),e(Zo,Qr),g(n5,Qr,null),e(Qr,Jbo),e(Qr,Yoe),e(Yoe,Ybo),e(Qr,Kbo),e(Qr,id),e(id,Zbo),e(id,Koe),e(Koe,e2o),e(id,o2o),e(id,Zoe),e(Zoe,r2o),e(id,t2o),e(Qr,a2o),e(Qr,ere),e(ere,n2o),e(Qr,s2o),g(s5,Qr,null),e(Zo,l2o),e(Zo,Oe),g(l5,Oe,null),e(Oe,i2o),e(Oe,ore),e(ore,d2o),e(Oe,c2o),e(Oe,Qa),e(Qa,f2o),e(Qa,rre),e(rre,m2o),e(Qa,g2o),e(Qa,tre),e(tre,h2o),e(Qa,p2o),e(Qa,are),e(are,_2o),e(Qa,u2o),e(Oe,b2o),e(Oe,I),e(I,Hu),e(Hu,nre),e(nre,v2o),e(Hu,T2o),e(Hu,P$),e(P$,F2o),e(Hu,C2o),e(I,M2o),e(I,Uu),e(Uu,sre),e(sre,E2o),e(Uu,y2o),e(Uu,$$),e($$,w2o),e(Uu,A2o),e(I,L2o),e(I,Ju),e(Ju,lre),e(lre,B2o),e(Ju,x2o),e(Ju,I$),e(I$,k2o),e(Ju,R2o),e(I,S2o),e(I,Yu),e(Yu,ire),e(ire,P2o),e(Yu,$2o),e(Yu,j$),e(j$,I2o),e(Yu,j2o),e(I,N2o),e(I,Ku),e(Ku,dre),e(dre,D2o),e(Ku,q2o),e(Ku,N$),e(N$,O2o),e(Ku,G2o),e(I,X2o),e(I,Zu),e(Zu,cre),e(cre,V2o),e(Zu,z2o),e(Zu,D$),e(D$,W2o),e(Zu,Q2o),e(I,H2o),e(I,e4),e(e4,fre),e(fre,U2o),e(e4,J2o),e(e4,q$),e(q$,Y2o),e(e4,K2o),e(I,Z2o),e(I,o4),e(o4,mre),e(mre,evo),e(o4,ovo),e(o4,O$),e(O$,rvo),e(o4,tvo),e(I,avo),e(I,r4),e(r4,gre),e(gre,nvo),e(r4,svo),e(r4,G$),e(G$,lvo),e(r4,ivo),e(I,dvo),e(I,t4),e(t4,hre),e(hre,cvo),e(t4,fvo),e(t4,X$),e(X$,mvo),e(t4,gvo),e(I,hvo),e(I,a4),e(a4,pre),e(pre,pvo),e(a4,_vo),e(a4,V$),e(V$,uvo),e(a4,bvo),e(I,vvo),e(I,n4),e(n4,_re),e(_re,Tvo),e(n4,Fvo),e(n4,z$),e(z$,Cvo),e(n4,Mvo),e(I,Evo),e(I,s4),e(s4,ure),e(ure,yvo),e(s4,wvo),e(s4,W$),e(W$,Avo),e(s4,Lvo),e(I,Bvo),e(I,l4),e(l4,bre),e(bre,xvo),e(l4,kvo),e(l4,Q$),e(Q$,Rvo),e(l4,Svo),e(I,Pvo),e(I,i4),e(i4,vre),e(vre,$vo),e(i4,Ivo),e(i4,H$),e(H$,jvo),e(i4,Nvo),e(I,Dvo),e(I,d4),e(d4,Tre),e(Tre,qvo),e(d4,Ovo),e(d4,U$),e(U$,Gvo),e(d4,Xvo),e(I,Vvo),e(I,c4),e(c4,Fre),e(Fre,zvo),e(c4,Wvo),e(c4,J$),e(J$,Qvo),e(c4,Hvo),e(I,Uvo),e(I,f4),e(f4,Cre),e(Cre,Jvo),e(f4,Yvo),e(f4,Y$),e(Y$,Kvo),e(f4,Zvo),e(I,e6o),e(I,m4),e(m4,Mre),e(Mre,o6o),e(m4,r6o),e(m4,K$),e(K$,t6o),e(m4,a6o),e(I,n6o),e(I,g4),e(g4,Ere),e(Ere,s6o),e(g4,l6o),e(g4,Z$),e(Z$,i6o),e(g4,d6o),e(I,c6o),e(I,h4),e(h4,yre),e(yre,f6o),e(h4,m6o),e(h4,eI),e(eI,g6o),e(h4,h6o),e(I,p6o),e(I,p4),e(p4,wre),e(wre,_6o),e(p4,u6o),e(p4,oI),e(oI,b6o),e(p4,v6o),e(I,T6o),e(I,_4),e(_4,Are),e(Are,F6o),e(_4,C6o),e(_4,rI),e(rI,M6o),e(_4,E6o),e(I,y6o),e(I,u4),e(u4,Lre),e(Lre,w6o),e(u4,A6o),e(u4,tI),e(tI,L6o),e(u4,B6o),e(I,x6o),e(I,b4),e(b4,Bre),e(Bre,k6o),e(b4,R6o),e(b4,aI),e(aI,S6o),e(b4,P6o),e(I,$6o),e(I,v4),e(v4,xre),e(xre,I6o),e(v4,j6o),e(v4,nI),e(nI,N6o),e(v4,D6o),e(I,q6o),e(I,T4),e(T4,kre),e(kre,O6o),e(T4,G6o),e(T4,sI),e(sI,X6o),e(T4,V6o),e(I,z6o),e(I,F4),e(F4,Rre),e(Rre,W6o),e(F4,Q6o),e(F4,lI),e(lI,H6o),e(F4,U6o),e(I,J6o),e(I,C4),e(C4,Sre),e(Sre,Y6o),e(C4,K6o),e(C4,iI),e(iI,Z6o),e(C4,e0o),e(I,o0o),e(I,M4),e(M4,Pre),e(Pre,r0o),e(M4,t0o),e(M4,dI),e(dI,a0o),e(M4,n0o),e(I,s0o),e(I,E4),e(E4,$re),e($re,l0o),e(E4,i0o),e(E4,Ire),e(Ire,d0o),e(E4,c0o),e(I,f0o),e(I,y4),e(y4,jre),e(jre,m0o),e(y4,g0o),e(y4,cI),e(cI,h0o),e(y4,p0o),e(I,_0o),e(I,w4),e(w4,Nre),e(Nre,u0o),e(w4,b0o),e(w4,fI),e(fI,v0o),e(w4,T0o),e(I,F0o),e(I,A4),e(A4,Dre),e(Dre,C0o),e(A4,M0o),e(A4,mI),e(mI,E0o),e(A4,y0o),e(I,w0o),e(I,L4),e(L4,qre),e(qre,A0o),e(L4,L0o),e(L4,gI),e(gI,B0o),e(L4,x0o),e(Oe,k0o),e(Oe,B4),e(B4,R0o),e(B4,Ore),e(Ore,S0o),e(B4,P0o),e(B4,Gre),e(Gre,$0o),e(Oe,I0o),e(Oe,Xre),e(Xre,j0o),e(Oe,N0o),g(i5,Oe,null),b(c,nke,u),b(c,dd,u),e(dd,x4),e(x4,Vre),g(d5,Vre,null),e(dd,D0o),e(dd,zre),e(zre,q0o),b(c,ske,u),b(c,er,u),g(c5,er,null),e(er,O0o),e(er,cd),e(cd,G0o),e(cd,Wre),e(Wre,X0o),e(cd,V0o),e(cd,Qre),e(Qre,z0o),e(cd,W0o),e(er,Q0o),e(er,f5),e(f5,H0o),e(f5,Hre),e(Hre,U0o),e(f5,J0o),e(er,Y0o),e(er,Hr),g(m5,Hr,null),e(Hr,K0o),e(Hr,Ure),e(Ure,Z0o),e(Hr,eTo),e(Hr,fd),e(fd,oTo),e(fd,Jre),e(Jre,rTo),e(fd,tTo),e(fd,Yre),e(Yre,aTo),e(fd,nTo),e(Hr,sTo),e(Hr,Kre),e(Kre,lTo),e(Hr,iTo),g(g5,Hr,null),e(er,dTo),e(er,Ge),g(h5,Ge,null),e(Ge,cTo),e(Ge,Zre),e(Zre,fTo),e(Ge,mTo),e(Ge,Ha),e(Ha,gTo),e(Ha,ete),e(ete,hTo),e(Ha,pTo),e(Ha,ote),e(ote,_To),e(Ha,uTo),e(Ha,rte),e(rte,bTo),e(Ha,vTo),e(Ge,TTo),e(Ge,se),e(se,k4),e(k4,tte),e(tte,FTo),e(k4,CTo),e(k4,hI),e(hI,MTo),e(k4,ETo),e(se,yTo),e(se,R4),e(R4,ate),e(ate,wTo),e(R4,ATo),e(R4,pI),e(pI,LTo),e(R4,BTo),e(se,xTo),e(se,S4),e(S4,nte),e(nte,kTo),e(S4,RTo),e(S4,_I),e(_I,STo),e(S4,PTo),e(se,$To),e(se,P4),e(P4,ste),e(ste,ITo),e(P4,jTo),e(P4,uI),e(uI,NTo),e(P4,DTo),e(se,qTo),e(se,$4),e($4,lte),e(lte,OTo),e($4,GTo),e($4,bI),e(bI,XTo),e($4,VTo),e(se,zTo),e(se,I4),e(I4,ite),e(ite,WTo),e(I4,QTo),e(I4,vI),e(vI,HTo),e(I4,UTo),e(se,JTo),e(se,j4),e(j4,dte),e(dte,YTo),e(j4,KTo),e(j4,TI),e(TI,ZTo),e(j4,eFo),e(se,oFo),e(se,N4),e(N4,cte),e(cte,rFo),e(N4,tFo),e(N4,FI),e(FI,aFo),e(N4,nFo),e(se,sFo),e(se,D4),e(D4,fte),e(fte,lFo),e(D4,iFo),e(D4,CI),e(CI,dFo),e(D4,cFo),e(se,fFo),e(se,q4),e(q4,mte),e(mte,mFo),e(q4,gFo),e(q4,MI),e(MI,hFo),e(q4,pFo),e(se,_Fo),e(se,O4),e(O4,gte),e(gte,uFo),e(O4,bFo),e(O4,EI),e(EI,vFo),e(O4,TFo),e(se,FFo),e(se,G4),e(G4,hte),e(hte,CFo),e(G4,MFo),e(G4,yI),e(yI,EFo),e(G4,yFo),e(se,wFo),e(se,X4),e(X4,pte),e(pte,AFo),e(X4,LFo),e(X4,wI),e(wI,BFo),e(X4,xFo),e(se,kFo),e(se,V4),e(V4,_te),e(_te,RFo),e(V4,SFo),e(V4,AI),e(AI,PFo),e(V4,$Fo),e(se,IFo),e(se,z4),e(z4,ute),e(ute,jFo),e(z4,NFo),e(z4,LI),e(LI,DFo),e(z4,qFo),e(se,OFo),e(se,W4),e(W4,bte),e(bte,GFo),e(W4,XFo),e(W4,BI),e(BI,VFo),e(W4,zFo),e(Ge,WFo),e(Ge,Q4),e(Q4,QFo),e(Q4,vte),e(vte,HFo),e(Q4,UFo),e(Q4,Tte),e(Tte,JFo),e(Ge,YFo),e(Ge,Fte),e(Fte,KFo),e(Ge,ZFo),g(p5,Ge,null),b(c,lke,u),b(c,md,u),e(md,H4),e(H4,Cte),g(_5,Cte,null),e(md,eCo),e(md,Mte),e(Mte,oCo),b(c,ike,u),b(c,or,u),g(u5,or,null),e(or,rCo),e(or,gd),e(gd,tCo),e(gd,Ete),e(Ete,aCo),e(gd,nCo),e(gd,yte),e(yte,sCo),e(gd,lCo),e(or,iCo),e(or,b5),e(b5,dCo),e(b5,wte),e(wte,cCo),e(b5,fCo),e(or,mCo),e(or,Ur),g(v5,Ur,null),e(Ur,gCo),e(Ur,Ate),e(Ate,hCo),e(Ur,pCo),e(Ur,hd),e(hd,_Co),e(hd,Lte),e(Lte,uCo),e(hd,bCo),e(hd,Bte),e(Bte,vCo),e(hd,TCo),e(Ur,FCo),e(Ur,xte),e(xte,CCo),e(Ur,MCo),g(T5,Ur,null),e(or,ECo),e(or,Xe),g(F5,Xe,null),e(Xe,yCo),e(Xe,kte),e(kte,wCo),e(Xe,ACo),e(Xe,Ua),e(Ua,LCo),e(Ua,Rte),e(Rte,BCo),e(Ua,xCo),e(Ua,Ste),e(Ste,kCo),e(Ua,RCo),e(Ua,Pte),e(Pte,SCo),e(Ua,PCo),e(Xe,$Co),e(Xe,A),e(A,U4),e(U4,$te),e($te,ICo),e(U4,jCo),e(U4,xI),e(xI,NCo),e(U4,DCo),e(A,qCo),e(A,J4),e(J4,Ite),e(Ite,OCo),e(J4,GCo),e(J4,kI),e(kI,XCo),e(J4,VCo),e(A,zCo),e(A,Y4),e(Y4,jte),e(jte,WCo),e(Y4,QCo),e(Y4,RI),e(RI,HCo),e(Y4,UCo),e(A,JCo),e(A,K4),e(K4,Nte),e(Nte,YCo),e(K4,KCo),e(K4,SI),e(SI,ZCo),e(K4,eMo),e(A,oMo),e(A,Z4),e(Z4,Dte),e(Dte,rMo),e(Z4,tMo),e(Z4,PI),e(PI,aMo),e(Z4,nMo),e(A,sMo),e(A,e1),e(e1,qte),e(qte,lMo),e(e1,iMo),e(e1,$I),e($I,dMo),e(e1,cMo),e(A,fMo),e(A,o1),e(o1,Ote),e(Ote,mMo),e(o1,gMo),e(o1,II),e(II,hMo),e(o1,pMo),e(A,_Mo),e(A,r1),e(r1,Gte),e(Gte,uMo),e(r1,bMo),e(r1,jI),e(jI,vMo),e(r1,TMo),e(A,FMo),e(A,t1),e(t1,Xte),e(Xte,CMo),e(t1,MMo),e(t1,NI),e(NI,EMo),e(t1,yMo),e(A,wMo),e(A,a1),e(a1,Vte),e(Vte,AMo),e(a1,LMo),e(a1,DI),e(DI,BMo),e(a1,xMo),e(A,kMo),e(A,n1),e(n1,zte),e(zte,RMo),e(n1,SMo),e(n1,qI),e(qI,PMo),e(n1,$Mo),e(A,IMo),e(A,s1),e(s1,Wte),e(Wte,jMo),e(s1,NMo),e(s1,OI),e(OI,DMo),e(s1,qMo),e(A,OMo),e(A,l1),e(l1,Qte),e(Qte,GMo),e(l1,XMo),e(l1,GI),e(GI,VMo),e(l1,zMo),e(A,WMo),e(A,i1),e(i1,Hte),e(Hte,QMo),e(i1,HMo),e(i1,XI),e(XI,UMo),e(i1,JMo),e(A,YMo),e(A,d1),e(d1,Ute),e(Ute,KMo),e(d1,ZMo),e(d1,VI),e(VI,eEo),e(d1,oEo),e(A,rEo),e(A,c1),e(c1,Jte),e(Jte,tEo),e(c1,aEo),e(c1,zI),e(zI,nEo),e(c1,sEo),e(A,lEo),e(A,f1),e(f1,Yte),e(Yte,iEo),e(f1,dEo),e(f1,WI),e(WI,cEo),e(f1,fEo),e(A,mEo),e(A,m1),e(m1,Kte),e(Kte,gEo),e(m1,hEo),e(m1,QI),e(QI,pEo),e(m1,_Eo),e(A,uEo),e(A,g1),e(g1,Zte),e(Zte,bEo),e(g1,vEo),e(g1,HI),e(HI,TEo),e(g1,FEo),e(A,CEo),e(A,h1),e(h1,eae),e(eae,MEo),e(h1,EEo),e(h1,UI),e(UI,yEo),e(h1,wEo),e(A,AEo),e(A,p1),e(p1,oae),e(oae,LEo),e(p1,BEo),e(p1,JI),e(JI,xEo),e(p1,kEo),e(A,REo),e(A,_1),e(_1,rae),e(rae,SEo),e(_1,PEo),e(_1,YI),e(YI,$Eo),e(_1,IEo),e(A,jEo),e(A,u1),e(u1,tae),e(tae,NEo),e(u1,DEo),e(u1,KI),e(KI,qEo),e(u1,OEo),e(A,GEo),e(A,b1),e(b1,aae),e(aae,XEo),e(b1,VEo),e(b1,ZI),e(ZI,zEo),e(b1,WEo),e(A,QEo),e(A,v1),e(v1,nae),e(nae,HEo),e(v1,UEo),e(v1,ej),e(ej,JEo),e(v1,YEo),e(A,KEo),e(A,T1),e(T1,sae),e(sae,ZEo),e(T1,e3o),e(T1,oj),e(oj,o3o),e(T1,r3o),e(A,t3o),e(A,F1),e(F1,lae),e(lae,a3o),e(F1,n3o),e(F1,rj),e(rj,s3o),e(F1,l3o),e(A,i3o),e(A,C1),e(C1,iae),e(iae,d3o),e(C1,c3o),e(C1,tj),e(tj,f3o),e(C1,m3o),e(A,g3o),e(A,M1),e(M1,dae),e(dae,h3o),e(M1,p3o),e(M1,aj),e(aj,_3o),e(M1,u3o),e(A,b3o),e(A,E1),e(E1,cae),e(cae,v3o),e(E1,T3o),e(E1,nj),e(nj,F3o),e(E1,C3o),e(A,M3o),e(A,y1),e(y1,fae),e(fae,E3o),e(y1,y3o),e(y1,sj),e(sj,w3o),e(y1,A3o),e(A,L3o),e(A,w1),e(w1,mae),e(mae,B3o),e(w1,x3o),e(w1,lj),e(lj,k3o),e(w1,R3o),e(A,S3o),e(A,A1),e(A1,gae),e(gae,P3o),e(A1,$3o),e(A1,ij),e(ij,I3o),e(A1,j3o),e(A,N3o),e(A,L1),e(L1,hae),e(hae,D3o),e(L1,q3o),e(L1,dj),e(dj,O3o),e(L1,G3o),e(A,X3o),e(A,B1),e(B1,pae),e(pae,V3o),e(B1,z3o),e(B1,cj),e(cj,W3o),e(B1,Q3o),e(A,H3o),e(A,x1),e(x1,_ae),e(_ae,U3o),e(x1,J3o),e(x1,fj),e(fj,Y3o),e(x1,K3o),e(A,Z3o),e(A,k1),e(k1,uae),e(uae,e5o),e(k1,o5o),e(k1,mj),e(mj,r5o),e(k1,t5o),e(A,a5o),e(A,R1),e(R1,bae),e(bae,n5o),e(R1,s5o),e(R1,gj),e(gj,l5o),e(R1,i5o),e(A,d5o),e(A,S1),e(S1,vae),e(vae,c5o),e(S1,f5o),e(S1,hj),e(hj,m5o),e(S1,g5o),e(A,h5o),e(A,P1),e(P1,Tae),e(Tae,p5o),e(P1,_5o),e(P1,pj),e(pj,u5o),e(P1,b5o),e(A,v5o),e(A,$1),e($1,Fae),e(Fae,T5o),e($1,F5o),e($1,_j),e(_j,C5o),e($1,M5o),e(A,E5o),e(A,I1),e(I1,Cae),e(Cae,y5o),e(I1,w5o),e(I1,uj),e(uj,A5o),e(I1,L5o),e(A,B5o),e(A,j1),e(j1,Mae),e(Mae,x5o),e(j1,k5o),e(j1,bj),e(bj,R5o),e(j1,S5o),e(A,P5o),e(A,N1),e(N1,Eae),e(Eae,$5o),e(N1,I5o),e(N1,vj),e(vj,j5o),e(N1,N5o),e(A,D5o),e(A,D1),e(D1,yae),e(yae,q5o),e(D1,O5o),e(D1,Tj),e(Tj,G5o),e(D1,X5o),e(A,V5o),e(A,q1),e(q1,wae),e(wae,z5o),e(q1,W5o),e(q1,Fj),e(Fj,Q5o),e(q1,H5o),e(Xe,U5o),e(Xe,O1),e(O1,J5o),e(O1,Aae),e(Aae,Y5o),e(O1,K5o),e(O1,Lae),e(Lae,Z5o),e(Xe,eyo),e(Xe,Bae),e(Bae,oyo),e(Xe,ryo),g(C5,Xe,null),b(c,dke,u),b(c,pd,u),e(pd,G1),e(G1,xae),g(M5,xae,null),e(pd,tyo),e(pd,kae),e(kae,ayo),b(c,cke,u),b(c,rr,u),g(E5,rr,null),e(rr,nyo),e(rr,_d),e(_d,syo),e(_d,Rae),e(Rae,lyo),e(_d,iyo),e(_d,Sae),e(Sae,dyo),e(_d,cyo),e(rr,fyo),e(rr,y5),e(y5,myo),e(y5,Pae),e(Pae,gyo),e(y5,hyo),e(rr,pyo),e(rr,Jr),g(w5,Jr,null),e(Jr,_yo),e(Jr,$ae),e($ae,uyo),e(Jr,byo),e(Jr,ud),e(ud,vyo),e(ud,Iae),e(Iae,Tyo),e(ud,Fyo),e(ud,jae),e(jae,Cyo),e(ud,Myo),e(Jr,Eyo),e(Jr,Nae),e(Nae,yyo),e(Jr,wyo),g(A5,Jr,null),e(rr,Ayo),e(rr,Ve),g(L5,Ve,null),e(Ve,Lyo),e(Ve,Dae),e(Dae,Byo),e(Ve,xyo),e(Ve,Ja),e(Ja,kyo),e(Ja,qae),e(qae,Ryo),e(Ja,Syo),e(Ja,Oae),e(Oae,Pyo),e(Ja,$yo),e(Ja,Gae),e(Gae,Iyo),e(Ja,jyo),e(Ve,Nyo),e(Ve,O),e(O,X1),e(X1,Xae),e(Xae,Dyo),e(X1,qyo),e(X1,Cj),e(Cj,Oyo),e(X1,Gyo),e(O,Xyo),e(O,V1),e(V1,Vae),e(Vae,Vyo),e(V1,zyo),e(V1,Mj),e(Mj,Wyo),e(V1,Qyo),e(O,Hyo),e(O,z1),e(z1,zae),e(zae,Uyo),e(z1,Jyo),e(z1,Ej),e(Ej,Yyo),e(z1,Kyo),e(O,Zyo),e(O,W1),e(W1,Wae),e(Wae,ewo),e(W1,owo),e(W1,yj),e(yj,rwo),e(W1,two),e(O,awo),e(O,Q1),e(Q1,Qae),e(Qae,nwo),e(Q1,swo),e(Q1,wj),e(wj,lwo),e(Q1,iwo),e(O,dwo),e(O,H1),e(H1,Hae),e(Hae,cwo),e(H1,fwo),e(H1,Aj),e(Aj,mwo),e(H1,gwo),e(O,hwo),e(O,U1),e(U1,Uae),e(Uae,pwo),e(U1,_wo),e(U1,Lj),e(Lj,uwo),e(U1,bwo),e(O,vwo),e(O,J1),e(J1,Jae),e(Jae,Two),e(J1,Fwo),e(J1,Bj),e(Bj,Cwo),e(J1,Mwo),e(O,Ewo),e(O,Y1),e(Y1,Yae),e(Yae,ywo),e(Y1,wwo),e(Y1,xj),e(xj,Awo),e(Y1,Lwo),e(O,Bwo),e(O,K1),e(K1,Kae),e(Kae,xwo),e(K1,kwo),e(K1,kj),e(kj,Rwo),e(K1,Swo),e(O,Pwo),e(O,Z1),e(Z1,Zae),e(Zae,$wo),e(Z1,Iwo),e(Z1,Rj),e(Rj,jwo),e(Z1,Nwo),e(O,Dwo),e(O,eb),e(eb,ene),e(ene,qwo),e(eb,Owo),e(eb,Sj),e(Sj,Gwo),e(eb,Xwo),e(O,Vwo),e(O,ob),e(ob,one),e(one,zwo),e(ob,Wwo),e(ob,Pj),e(Pj,Qwo),e(ob,Hwo),e(O,Uwo),e(O,rb),e(rb,rne),e(rne,Jwo),e(rb,Ywo),e(rb,$j),e($j,Kwo),e(rb,Zwo),e(O,eAo),e(O,tb),e(tb,tne),e(tne,oAo),e(tb,rAo),e(tb,Ij),e(Ij,tAo),e(tb,aAo),e(O,nAo),e(O,ab),e(ab,ane),e(ane,sAo),e(ab,lAo),e(ab,jj),e(jj,iAo),e(ab,dAo),e(O,cAo),e(O,nb),e(nb,nne),e(nne,fAo),e(nb,mAo),e(nb,Nj),e(Nj,gAo),e(nb,hAo),e(O,pAo),e(O,sb),e(sb,sne),e(sne,_Ao),e(sb,uAo),e(sb,Dj),e(Dj,bAo),e(sb,vAo),e(O,TAo),e(O,lb),e(lb,lne),e(lne,FAo),e(lb,CAo),e(lb,qj),e(qj,MAo),e(lb,EAo),e(O,yAo),e(O,ib),e(ib,ine),e(ine,wAo),e(ib,AAo),e(ib,Oj),e(Oj,LAo),e(ib,BAo),e(O,xAo),e(O,db),e(db,dne),e(dne,kAo),e(db,RAo),e(db,Gj),e(Gj,SAo),e(db,PAo),e(O,$Ao),e(O,cb),e(cb,cne),e(cne,IAo),e(cb,jAo),e(cb,Xj),e(Xj,NAo),e(cb,DAo),e(O,qAo),e(O,fb),e(fb,fne),e(fne,OAo),e(fb,GAo),e(fb,Vj),e(Vj,XAo),e(fb,VAo),e(O,zAo),e(O,mb),e(mb,mne),e(mne,WAo),e(mb,QAo),e(mb,zj),e(zj,HAo),e(mb,UAo),e(O,JAo),e(O,gb),e(gb,gne),e(gne,YAo),e(gb,KAo),e(gb,Wj),e(Wj,ZAo),e(gb,eLo),e(O,oLo),e(O,hb),e(hb,hne),e(hne,rLo),e(hb,tLo),e(hb,Qj),e(Qj,aLo),e(hb,nLo),e(O,sLo),e(O,pb),e(pb,pne),e(pne,lLo),e(pb,iLo),e(pb,Hj),e(Hj,dLo),e(pb,cLo),e(O,fLo),e(O,_b),e(_b,_ne),e(_ne,mLo),e(_b,gLo),e(_b,Uj),e(Uj,hLo),e(_b,pLo),e(Ve,_Lo),e(Ve,ub),e(ub,uLo),e(ub,une),e(une,bLo),e(ub,vLo),e(ub,bne),e(bne,TLo),e(Ve,FLo),e(Ve,vne),e(vne,CLo),e(Ve,MLo),g(B5,Ve,null),b(c,fke,u),b(c,bd,u),e(bd,bb),e(bb,Tne),g(x5,Tne,null),e(bd,ELo),e(bd,Fne),e(Fne,yLo),b(c,mke,u),b(c,tr,u),g(k5,tr,null),e(tr,wLo),e(tr,vd),e(vd,ALo),e(vd,Cne),e(Cne,LLo),e(vd,BLo),e(vd,Mne),e(Mne,xLo),e(vd,kLo),e(tr,RLo),e(tr,R5),e(R5,SLo),e(R5,Ene),e(Ene,PLo),e(R5,$Lo),e(tr,ILo),e(tr,Yr),g(S5,Yr,null),e(Yr,jLo),e(Yr,yne),e(yne,NLo),e(Yr,DLo),e(Yr,Td),e(Td,qLo),e(Td,wne),e(wne,OLo),e(Td,GLo),e(Td,Ane),e(Ane,XLo),e(Td,VLo),e(Yr,zLo),e(Yr,Lne),e(Lne,WLo),e(Yr,QLo),g(P5,Yr,null),e(tr,HLo),e(tr,ze),g($5,ze,null),e(ze,ULo),e(ze,Bne),e(Bne,JLo),e(ze,YLo),e(ze,Ya),e(Ya,KLo),e(Ya,xne),e(xne,ZLo),e(Ya,e7o),e(Ya,kne),e(kne,o7o),e(Ya,r7o),e(Ya,Rne),e(Rne,t7o),e(Ya,a7o),e(ze,n7o),e(ze,da),e(da,vb),e(vb,Sne),e(Sne,s7o),e(vb,l7o),e(vb,Jj),e(Jj,i7o),e(vb,d7o),e(da,c7o),e(da,Tb),e(Tb,Pne),e(Pne,f7o),e(Tb,m7o),e(Tb,Yj),e(Yj,g7o),e(Tb,h7o),e(da,p7o),e(da,Fb),e(Fb,$ne),e($ne,_7o),e(Fb,u7o),e(Fb,Kj),e(Kj,b7o),e(Fb,v7o),e(da,T7o),e(da,Cb),e(Cb,Ine),e(Ine,F7o),e(Cb,C7o),e(Cb,Zj),e(Zj,M7o),e(Cb,E7o),e(da,y7o),e(da,Mb),e(Mb,jne),e(jne,w7o),e(Mb,A7o),e(Mb,eN),e(eN,L7o),e(Mb,B7o),e(ze,x7o),e(ze,Eb),e(Eb,k7o),e(Eb,Nne),e(Nne,R7o),e(Eb,S7o),e(Eb,Dne),e(Dne,P7o),e(ze,$7o),e(ze,qne),e(qne,I7o),e(ze,j7o),g(I5,ze,null),b(c,gke,u),b(c,Fd,u),e(Fd,yb),e(yb,One),g(j5,One,null),e(Fd,N7o),e(Fd,Gne),e(Gne,D7o),b(c,hke,u),b(c,ar,u),g(N5,ar,null),e(ar,q7o),e(ar,Cd),e(Cd,O7o),e(Cd,Xne),e(Xne,G7o),e(Cd,X7o),e(Cd,Vne),e(Vne,V7o),e(Cd,z7o),e(ar,W7o),e(ar,D5),e(D5,Q7o),e(D5,zne),e(zne,H7o),e(D5,U7o),e(ar,J7o),e(ar,Kr),g(q5,Kr,null),e(Kr,Y7o),e(Kr,Wne),e(Wne,K7o),e(Kr,Z7o),e(Kr,Md),e(Md,e8o),e(Md,Qne),e(Qne,o8o),e(Md,r8o),e(Md,Hne),e(Hne,t8o),e(Md,a8o),e(Kr,n8o),e(Kr,Une),e(Une,s8o),e(Kr,l8o),g(O5,Kr,null),e(ar,i8o),e(ar,We),g(G5,We,null),e(We,d8o),e(We,Jne),e(Jne,c8o),e(We,f8o),e(We,Ka),e(Ka,m8o),e(Ka,Yne),e(Yne,g8o),e(Ka,h8o),e(Ka,Kne),e(Kne,p8o),e(Ka,_8o),e(Ka,Zne),e(Zne,u8o),e(Ka,b8o),e(We,v8o),e(We,D),e(D,wb),e(wb,ese),e(ese,T8o),e(wb,F8o),e(wb,oN),e(oN,C8o),e(wb,M8o),e(D,E8o),e(D,Ab),e(Ab,ose),e(ose,y8o),e(Ab,w8o),e(Ab,rN),e(rN,A8o),e(Ab,L8o),e(D,B8o),e(D,Lb),e(Lb,rse),e(rse,x8o),e(Lb,k8o),e(Lb,tN),e(tN,R8o),e(Lb,S8o),e(D,P8o),e(D,Bb),e(Bb,tse),e(tse,$8o),e(Bb,I8o),e(Bb,aN),e(aN,j8o),e(Bb,N8o),e(D,D8o),e(D,xb),e(xb,ase),e(ase,q8o),e(xb,O8o),e(xb,nN),e(nN,G8o),e(xb,X8o),e(D,V8o),e(D,kb),e(kb,nse),e(nse,z8o),e(kb,W8o),e(kb,sN),e(sN,Q8o),e(kb,H8o),e(D,U8o),e(D,Rb),e(Rb,sse),e(sse,J8o),e(Rb,Y8o),e(Rb,lN),e(lN,K8o),e(Rb,Z8o),e(D,e9o),e(D,Sb),e(Sb,lse),e(lse,o9o),e(Sb,r9o),e(Sb,iN),e(iN,t9o),e(Sb,a9o),e(D,n9o),e(D,Pb),e(Pb,ise),e(ise,s9o),e(Pb,l9o),e(Pb,dN),e(dN,i9o),e(Pb,d9o),e(D,c9o),e(D,$b),e($b,dse),e(dse,f9o),e($b,m9o),e($b,cN),e(cN,g9o),e($b,h9o),e(D,p9o),e(D,Ib),e(Ib,cse),e(cse,_9o),e(Ib,u9o),e(Ib,fN),e(fN,b9o),e(Ib,v9o),e(D,T9o),e(D,jb),e(jb,fse),e(fse,F9o),e(jb,C9o),e(jb,mN),e(mN,M9o),e(jb,E9o),e(D,y9o),e(D,Nb),e(Nb,mse),e(mse,w9o),e(Nb,A9o),e(Nb,gN),e(gN,L9o),e(Nb,B9o),e(D,x9o),e(D,Db),e(Db,gse),e(gse,k9o),e(Db,R9o),e(Db,hN),e(hN,S9o),e(Db,P9o),e(D,$9o),e(D,qb),e(qb,hse),e(hse,I9o),e(qb,j9o),e(qb,pN),e(pN,N9o),e(qb,D9o),e(D,q9o),e(D,Ob),e(Ob,pse),e(pse,O9o),e(Ob,G9o),e(Ob,_N),e(_N,X9o),e(Ob,V9o),e(D,z9o),e(D,Gb),e(Gb,_se),e(_se,W9o),e(Gb,Q9o),e(Gb,uN),e(uN,H9o),e(Gb,U9o),e(D,J9o),e(D,Xb),e(Xb,use),e(use,Y9o),e(Xb,K9o),e(Xb,bN),e(bN,Z9o),e(Xb,eBo),e(D,oBo),e(D,Vb),e(Vb,bse),e(bse,rBo),e(Vb,tBo),e(Vb,vN),e(vN,aBo),e(Vb,nBo),e(D,sBo),e(D,zb),e(zb,vse),e(vse,lBo),e(zb,iBo),e(zb,TN),e(TN,dBo),e(zb,cBo),e(D,fBo),e(D,Wb),e(Wb,Tse),e(Tse,mBo),e(Wb,gBo),e(Wb,FN),e(FN,hBo),e(Wb,pBo),e(D,_Bo),e(D,Qb),e(Qb,Fse),e(Fse,uBo),e(Qb,bBo),e(Qb,CN),e(CN,vBo),e(Qb,TBo),e(D,FBo),e(D,Hb),e(Hb,Cse),e(Cse,CBo),e(Hb,MBo),e(Hb,MN),e(MN,EBo),e(Hb,yBo),e(D,wBo),e(D,Ub),e(Ub,Mse),e(Mse,ABo),e(Ub,LBo),e(Ub,EN),e(EN,BBo),e(Ub,xBo),e(D,kBo),e(D,Jb),e(Jb,Ese),e(Ese,RBo),e(Jb,SBo),e(Jb,yN),e(yN,PBo),e(Jb,$Bo),e(D,IBo),e(D,Yb),e(Yb,yse),e(yse,jBo),e(Yb,NBo),e(Yb,wN),e(wN,DBo),e(Yb,qBo),e(D,OBo),e(D,Kb),e(Kb,wse),e(wse,GBo),e(Kb,XBo),e(Kb,AN),e(AN,VBo),e(Kb,zBo),e(D,WBo),e(D,Zb),e(Zb,Ase),e(Ase,QBo),e(Zb,HBo),e(Zb,LN),e(LN,UBo),e(Zb,JBo),e(D,YBo),e(D,e2),e(e2,Lse),e(Lse,KBo),e(e2,ZBo),e(e2,BN),e(BN,exo),e(e2,oxo),e(D,rxo),e(D,o2),e(o2,Bse),e(Bse,txo),e(o2,axo),e(o2,xN),e(xN,nxo),e(o2,sxo),e(D,lxo),e(D,r2),e(r2,xse),e(xse,ixo),e(r2,dxo),e(r2,kN),e(kN,cxo),e(r2,fxo),e(D,mxo),e(D,t2),e(t2,kse),e(kse,gxo),e(t2,hxo),e(t2,RN),e(RN,pxo),e(t2,_xo),e(D,uxo),e(D,a2),e(a2,Rse),e(Rse,bxo),e(a2,vxo),e(a2,SN),e(SN,Txo),e(a2,Fxo),e(We,Cxo),e(We,n2),e(n2,Mxo),e(n2,Sse),e(Sse,Exo),e(n2,yxo),e(n2,Pse),e(Pse,wxo),e(We,Axo),e(We,$se),e($se,Lxo),e(We,Bxo),g(X5,We,null),b(c,pke,u),b(c,Ed,u),e(Ed,s2),e(s2,Ise),g(V5,Ise,null),e(Ed,xxo),e(Ed,jse),e(jse,kxo),b(c,_ke,u),b(c,nr,u),g(z5,nr,null),e(nr,Rxo),e(nr,yd),e(yd,Sxo),e(yd,Nse),e(Nse,Pxo),e(yd,$xo),e(yd,Dse),e(Dse,Ixo),e(yd,jxo),e(nr,Nxo),e(nr,W5),e(W5,Dxo),e(W5,qse),e(qse,qxo),e(W5,Oxo),e(nr,Gxo),e(nr,Zr),g(Q5,Zr,null),e(Zr,Xxo),e(Zr,Ose),e(Ose,Vxo),e(Zr,zxo),e(Zr,wd),e(wd,Wxo),e(wd,Gse),e(Gse,Qxo),e(wd,Hxo),e(wd,Xse),e(Xse,Uxo),e(wd,Jxo),e(Zr,Yxo),e(Zr,Vse),e(Vse,Kxo),e(Zr,Zxo),g(H5,Zr,null),e(nr,eko),e(nr,Qe),g(U5,Qe,null),e(Qe,oko),e(Qe,zse),e(zse,rko),e(Qe,tko),e(Qe,Za),e(Za,ako),e(Za,Wse),e(Wse,nko),e(Za,sko),e(Za,Qse),e(Qse,lko),e(Za,iko),e(Za,Hse),e(Hse,dko),e(Za,cko),e(Qe,fko),e(Qe,R),e(R,l2),e(l2,Use),e(Use,mko),e(l2,gko),e(l2,PN),e(PN,hko),e(l2,pko),e(R,_ko),e(R,i2),e(i2,Jse),e(Jse,uko),e(i2,bko),e(i2,$N),e($N,vko),e(i2,Tko),e(R,Fko),e(R,d2),e(d2,Yse),e(Yse,Cko),e(d2,Mko),e(d2,IN),e(IN,Eko),e(d2,yko),e(R,wko),e(R,c2),e(c2,Kse),e(Kse,Ako),e(c2,Lko),e(c2,jN),e(jN,Bko),e(c2,xko),e(R,kko),e(R,f2),e(f2,Zse),e(Zse,Rko),e(f2,Sko),e(f2,NN),e(NN,Pko),e(f2,$ko),e(R,Iko),e(R,m2),e(m2,ele),e(ele,jko),e(m2,Nko),e(m2,DN),e(DN,Dko),e(m2,qko),e(R,Oko),e(R,g2),e(g2,ole),e(ole,Gko),e(g2,Xko),e(g2,qN),e(qN,Vko),e(g2,zko),e(R,Wko),e(R,h2),e(h2,rle),e(rle,Qko),e(h2,Hko),e(h2,ON),e(ON,Uko),e(h2,Jko),e(R,Yko),e(R,p2),e(p2,tle),e(tle,Kko),e(p2,Zko),e(p2,GN),e(GN,eRo),e(p2,oRo),e(R,rRo),e(R,_2),e(_2,ale),e(ale,tRo),e(_2,aRo),e(_2,XN),e(XN,nRo),e(_2,sRo),e(R,lRo),e(R,u2),e(u2,nle),e(nle,iRo),e(u2,dRo),e(u2,VN),e(VN,cRo),e(u2,fRo),e(R,mRo),e(R,b2),e(b2,sle),e(sle,gRo),e(b2,hRo),e(b2,zN),e(zN,pRo),e(b2,_Ro),e(R,uRo),e(R,v2),e(v2,lle),e(lle,bRo),e(v2,vRo),e(v2,WN),e(WN,TRo),e(v2,FRo),e(R,CRo),e(R,T2),e(T2,ile),e(ile,MRo),e(T2,ERo),e(T2,QN),e(QN,yRo),e(T2,wRo),e(R,ARo),e(R,F2),e(F2,dle),e(dle,LRo),e(F2,BRo),e(F2,HN),e(HN,xRo),e(F2,kRo),e(R,RRo),e(R,C2),e(C2,cle),e(cle,SRo),e(C2,PRo),e(C2,UN),e(UN,$Ro),e(C2,IRo),e(R,jRo),e(R,M2),e(M2,fle),e(fle,NRo),e(M2,DRo),e(M2,JN),e(JN,qRo),e(M2,ORo),e(R,GRo),e(R,E2),e(E2,mle),e(mle,XRo),e(E2,VRo),e(E2,YN),e(YN,zRo),e(E2,WRo),e(R,QRo),e(R,y2),e(y2,gle),e(gle,HRo),e(y2,URo),e(y2,KN),e(KN,JRo),e(y2,YRo),e(R,KRo),e(R,w2),e(w2,hle),e(hle,ZRo),e(w2,eSo),e(w2,ZN),e(ZN,oSo),e(w2,rSo),e(R,tSo),e(R,A2),e(A2,ple),e(ple,aSo),e(A2,nSo),e(A2,eD),e(eD,sSo),e(A2,lSo),e(R,iSo),e(R,L2),e(L2,_le),e(_le,dSo),e(L2,cSo),e(L2,oD),e(oD,fSo),e(L2,mSo),e(R,gSo),e(R,B2),e(B2,ule),e(ule,hSo),e(B2,pSo),e(B2,rD),e(rD,_So),e(B2,uSo),e(R,bSo),e(R,x2),e(x2,ble),e(ble,vSo),e(x2,TSo),e(x2,tD),e(tD,FSo),e(x2,CSo),e(R,MSo),e(R,k2),e(k2,vle),e(vle,ESo),e(k2,ySo),e(k2,aD),e(aD,wSo),e(k2,ASo),e(R,LSo),e(R,R2),e(R2,Tle),e(Tle,BSo),e(R2,xSo),e(R2,nD),e(nD,kSo),e(R2,RSo),e(R,SSo),e(R,S2),e(S2,Fle),e(Fle,PSo),e(S2,$So),e(S2,sD),e(sD,ISo),e(S2,jSo),e(R,NSo),e(R,P2),e(P2,Cle),e(Cle,DSo),e(P2,qSo),e(P2,lD),e(lD,OSo),e(P2,GSo),e(R,XSo),e(R,$2),e($2,Mle),e(Mle,VSo),e($2,zSo),e($2,iD),e(iD,WSo),e($2,QSo),e(R,HSo),e(R,I2),e(I2,Ele),e(Ele,USo),e(I2,JSo),e(I2,dD),e(dD,YSo),e(I2,KSo),e(R,ZSo),e(R,j2),e(j2,yle),e(yle,ePo),e(j2,oPo),e(j2,cD),e(cD,rPo),e(j2,tPo),e(R,aPo),e(R,N2),e(N2,wle),e(wle,nPo),e(N2,sPo),e(N2,fD),e(fD,lPo),e(N2,iPo),e(R,dPo),e(R,D2),e(D2,Ale),e(Ale,cPo),e(D2,fPo),e(D2,mD),e(mD,mPo),e(D2,gPo),e(R,hPo),e(R,q2),e(q2,Lle),e(Lle,pPo),e(q2,_Po),e(q2,gD),e(gD,uPo),e(q2,bPo),e(R,vPo),e(R,O2),e(O2,Ble),e(Ble,TPo),e(O2,FPo),e(O2,hD),e(hD,CPo),e(O2,MPo),e(R,EPo),e(R,G2),e(G2,xle),e(xle,yPo),e(G2,wPo),e(G2,pD),e(pD,APo),e(G2,LPo),e(R,BPo),e(R,X2),e(X2,kle),e(kle,xPo),e(X2,kPo),e(X2,_D),e(_D,RPo),e(X2,SPo),e(R,PPo),e(R,V2),e(V2,Rle),e(Rle,$Po),e(V2,IPo),e(V2,uD),e(uD,jPo),e(V2,NPo),e(R,DPo),e(R,z2),e(z2,Sle),e(Sle,qPo),e(z2,OPo),e(z2,bD),e(bD,GPo),e(z2,XPo),e(Qe,VPo),e(Qe,W2),e(W2,zPo),e(W2,Ple),e(Ple,WPo),e(W2,QPo),e(W2,$le),e($le,HPo),e(Qe,UPo),e(Qe,Ile),e(Ile,JPo),e(Qe,YPo),g(J5,Qe,null),b(c,uke,u),b(c,Ad,u),e(Ad,Q2),e(Q2,jle),g(Y5,jle,null),e(Ad,KPo),e(Ad,Nle),e(Nle,ZPo),b(c,bke,u),b(c,sr,u),g(K5,sr,null),e(sr,e$o),e(sr,Ld),e(Ld,o$o),e(Ld,Dle),e(Dle,r$o),e(Ld,t$o),e(Ld,qle),e(qle,a$o),e(Ld,n$o),e(sr,s$o),e(sr,Z5),e(Z5,l$o),e(Z5,Ole),e(Ole,i$o),e(Z5,d$o),e(sr,c$o),e(sr,et),g(ey,et,null),e(et,f$o),e(et,Gle),e(Gle,m$o),e(et,g$o),e(et,Bd),e(Bd,h$o),e(Bd,Xle),e(Xle,p$o),e(Bd,_$o),e(Bd,Vle),e(Vle,u$o),e(Bd,b$o),e(et,v$o),e(et,zle),e(zle,T$o),e(et,F$o),g(oy,et,null),e(sr,C$o),e(sr,He),g(ry,He,null),e(He,M$o),e(He,Wle),e(Wle,E$o),e(He,y$o),e(He,en),e(en,w$o),e(en,Qle),e(Qle,A$o),e(en,L$o),e(en,Hle),e(Hle,B$o),e(en,x$o),e(en,Ule),e(Ule,k$o),e(en,R$o),e(He,S$o),e(He,Jle),e(Jle,H2),e(H2,Yle),e(Yle,P$o),e(H2,$$o),e(H2,vD),e(vD,I$o),e(H2,j$o),e(He,N$o),e(He,U2),e(U2,D$o),e(U2,Kle),e(Kle,q$o),e(U2,O$o),e(U2,Zle),e(Zle,G$o),e(He,X$o),e(He,eie),e(eie,V$o),e(He,z$o),g(ty,He,null),b(c,vke,u),b(c,xd,u),e(xd,J2),e(J2,oie),g(ay,oie,null),e(xd,W$o),e(xd,rie),e(rie,Q$o),b(c,Tke,u),b(c,lr,u),g(ny,lr,null),e(lr,H$o),e(lr,kd),e(kd,U$o),e(kd,tie),e(tie,J$o),e(kd,Y$o),e(kd,aie),e(aie,K$o),e(kd,Z$o),e(lr,eIo),e(lr,sy),e(sy,oIo),e(sy,nie),e(nie,rIo),e(sy,tIo),e(lr,aIo),e(lr,ot),g(ly,ot,null),e(ot,nIo),e(ot,sie),e(sie,sIo),e(ot,lIo),e(ot,Rd),e(Rd,iIo),e(Rd,lie),e(lie,dIo),e(Rd,cIo),e(Rd,iie),e(iie,fIo),e(Rd,mIo),e(ot,gIo),e(ot,die),e(die,hIo),e(ot,pIo),g(iy,ot,null),e(lr,_Io),e(lr,Ue),g(dy,Ue,null),e(Ue,uIo),e(Ue,cie),e(cie,bIo),e(Ue,vIo),e(Ue,on),e(on,TIo),e(on,fie),e(fie,FIo),e(on,CIo),e(on,mie),e(mie,MIo),e(on,EIo),e(on,gie),e(gie,yIo),e(on,wIo),e(Ue,AIo),e(Ue,me),e(me,Y2),e(Y2,hie),e(hie,LIo),e(Y2,BIo),e(Y2,TD),e(TD,xIo),e(Y2,kIo),e(me,RIo),e(me,K2),e(K2,pie),e(pie,SIo),e(K2,PIo),e(K2,FD),e(FD,$Io),e(K2,IIo),e(me,jIo),e(me,qs),e(qs,_ie),e(_ie,NIo),e(qs,DIo),e(qs,CD),e(CD,qIo),e(qs,OIo),e(qs,MD),e(MD,GIo),e(qs,XIo),e(me,VIo),e(me,Z2),e(Z2,uie),e(uie,zIo),e(Z2,WIo),e(Z2,ED),e(ED,QIo),e(Z2,HIo),e(me,UIo),e(me,ma),e(ma,bie),e(bie,JIo),e(ma,YIo),e(ma,yD),e(yD,KIo),e(ma,ZIo),e(ma,wD),e(wD,ejo),e(ma,ojo),e(ma,AD),e(AD,rjo),e(ma,tjo),e(me,ajo),e(me,ev),e(ev,vie),e(vie,njo),e(ev,sjo),e(ev,LD),e(LD,ljo),e(ev,ijo),e(me,djo),e(me,ov),e(ov,Tie),e(Tie,cjo),e(ov,fjo),e(ov,BD),e(BD,mjo),e(ov,gjo),e(me,hjo),e(me,rv),e(rv,Fie),e(Fie,pjo),e(rv,_jo),e(rv,xD),e(xD,ujo),e(rv,bjo),e(me,vjo),e(me,tv),e(tv,Cie),e(Cie,Tjo),e(tv,Fjo),e(tv,kD),e(kD,Cjo),e(tv,Mjo),e(me,Ejo),e(me,av),e(av,Mie),e(Mie,yjo),e(av,wjo),e(av,RD),e(RD,Ajo),e(av,Ljo),e(me,Bjo),e(me,nv),e(nv,Eie),e(Eie,xjo),e(nv,kjo),e(nv,SD),e(SD,Rjo),e(nv,Sjo),e(Ue,Pjo),e(Ue,sv),e(sv,$jo),e(sv,yie),e(yie,Ijo),e(sv,jjo),e(sv,wie),e(wie,Njo),e(Ue,Djo),e(Ue,Aie),e(Aie,qjo),e(Ue,Ojo),g(cy,Ue,null),b(c,Fke,u),b(c,Sd,u),e(Sd,lv),e(lv,Lie),g(fy,Lie,null),e(Sd,Gjo),e(Sd,Bie),e(Bie,Xjo),b(c,Cke,u),b(c,ir,u),g(my,ir,null),e(ir,Vjo),e(ir,Pd),e(Pd,zjo),e(Pd,xie),e(xie,Wjo),e(Pd,Qjo),e(Pd,kie),e(kie,Hjo),e(Pd,Ujo),e(ir,Jjo),e(ir,gy),e(gy,Yjo),e(gy,Rie),e(Rie,Kjo),e(gy,Zjo),e(ir,eNo),e(ir,rt),g(hy,rt,null),e(rt,oNo),e(rt,Sie),e(Sie,rNo),e(rt,tNo),e(rt,$d),e($d,aNo),e($d,Pie),e(Pie,nNo),e($d,sNo),e($d,$ie),e($ie,lNo),e($d,iNo),e(rt,dNo),e(rt,Iie),e(Iie,cNo),e(rt,fNo),g(py,rt,null),e(ir,mNo),e(ir,Je),g(_y,Je,null),e(Je,gNo),e(Je,jie),e(jie,hNo),e(Je,pNo),e(Je,rn),e(rn,_No),e(rn,Nie),e(Nie,uNo),e(rn,bNo),e(rn,Die),e(Die,vNo),e(rn,TNo),e(rn,qie),e(qie,FNo),e(rn,CNo),e(Je,MNo),e(Je,Oie),e(Oie,iv),e(iv,Gie),e(Gie,ENo),e(iv,yNo),e(iv,PD),e(PD,wNo),e(iv,ANo),e(Je,LNo),e(Je,dv),e(dv,BNo),e(dv,Xie),e(Xie,xNo),e(dv,kNo),e(dv,Vie),e(Vie,RNo),e(Je,SNo),e(Je,zie),e(zie,PNo),e(Je,$No),g(uy,Je,null),b(c,Mke,u),b(c,Id,u),e(Id,cv),e(cv,Wie),g(by,Wie,null),e(Id,INo),e(Id,Qie),e(Qie,jNo),b(c,Eke,u),b(c,dr,u),g(vy,dr,null),e(dr,NNo),e(dr,jd),e(jd,DNo),e(jd,Hie),e(Hie,qNo),e(jd,ONo),e(jd,Uie),e(Uie,GNo),e(jd,XNo),e(dr,VNo),e(dr,Ty),e(Ty,zNo),e(Ty,Jie),e(Jie,WNo),e(Ty,QNo),e(dr,HNo),e(dr,tt),g(Fy,tt,null),e(tt,UNo),e(tt,Yie),e(Yie,JNo),e(tt,YNo),e(tt,Nd),e(Nd,KNo),e(Nd,Kie),e(Kie,ZNo),e(Nd,eDo),e(Nd,Zie),e(Zie,oDo),e(Nd,rDo),e(tt,tDo),e(tt,ede),e(ede,aDo),e(tt,nDo),g(Cy,tt,null),e(dr,sDo),e(dr,Ye),g(My,Ye,null),e(Ye,lDo),e(Ye,ode),e(ode,iDo),e(Ye,dDo),e(Ye,tn),e(tn,cDo),e(tn,rde),e(rde,fDo),e(tn,mDo),e(tn,tde),e(tde,gDo),e(tn,hDo),e(tn,ade),e(ade,pDo),e(tn,_Do),e(Ye,uDo),e(Ye,ke),e(ke,fv),e(fv,nde),e(nde,bDo),e(fv,vDo),e(fv,$D),e($D,TDo),e(fv,FDo),e(ke,CDo),e(ke,mv),e(mv,sde),e(sde,MDo),e(mv,EDo),e(mv,ID),e(ID,yDo),e(mv,wDo),e(ke,ADo),e(ke,gv),e(gv,lde),e(lde,LDo),e(gv,BDo),e(gv,jD),e(jD,xDo),e(gv,kDo),e(ke,RDo),e(ke,hv),e(hv,ide),e(ide,SDo),e(hv,PDo),e(hv,ND),e(ND,$Do),e(hv,IDo),e(ke,jDo),e(ke,pv),e(pv,dde),e(dde,NDo),e(pv,DDo),e(pv,DD),e(DD,qDo),e(pv,ODo),e(ke,GDo),e(ke,_v),e(_v,cde),e(cde,XDo),e(_v,VDo),e(_v,qD),e(qD,zDo),e(_v,WDo),e(ke,QDo),e(ke,uv),e(uv,fde),e(fde,HDo),e(uv,UDo),e(uv,OD),e(OD,JDo),e(uv,YDo),e(ke,KDo),e(ke,bv),e(bv,mde),e(mde,ZDo),e(bv,eqo),e(bv,GD),e(GD,oqo),e(bv,rqo),e(Ye,tqo),e(Ye,vv),e(vv,aqo),e(vv,gde),e(gde,nqo),e(vv,sqo),e(vv,hde),e(hde,lqo),e(Ye,iqo),e(Ye,pde),e(pde,dqo),e(Ye,cqo),g(Ey,Ye,null),b(c,yke,u),b(c,Dd,u),e(Dd,Tv),e(Tv,_de),g(yy,_de,null),e(Dd,fqo),e(Dd,ude),e(ude,mqo),b(c,wke,u),b(c,cr,u),g(wy,cr,null),e(cr,gqo),e(cr,qd),e(qd,hqo),e(qd,bde),e(bde,pqo),e(qd,_qo),e(qd,vde),e(vde,uqo),e(qd,bqo),e(cr,vqo),e(cr,Ay),e(Ay,Tqo),e(Ay,Tde),e(Tde,Fqo),e(Ay,Cqo),e(cr,Mqo),e(cr,at),g(Ly,at,null),e(at,Eqo),e(at,Fde),e(Fde,yqo),e(at,wqo),e(at,Od),e(Od,Aqo),e(Od,Cde),e(Cde,Lqo),e(Od,Bqo),e(Od,Mde),e(Mde,xqo),e(Od,kqo),e(at,Rqo),e(at,Ede),e(Ede,Sqo),e(at,Pqo),g(By,at,null),e(cr,$qo),e(cr,Ke),g(xy,Ke,null),e(Ke,Iqo),e(Ke,yde),e(yde,jqo),e(Ke,Nqo),e(Ke,an),e(an,Dqo),e(an,wde),e(wde,qqo),e(an,Oqo),e(an,Ade),e(Ade,Gqo),e(an,Xqo),e(an,Lde),e(Lde,Vqo),e(an,zqo),e(Ke,Wqo),e(Ke,nn),e(nn,Fv),e(Fv,Bde),e(Bde,Qqo),e(Fv,Hqo),e(Fv,XD),e(XD,Uqo),e(Fv,Jqo),e(nn,Yqo),e(nn,Cv),e(Cv,xde),e(xde,Kqo),e(Cv,Zqo),e(Cv,VD),e(VD,eOo),e(Cv,oOo),e(nn,rOo),e(nn,Mv),e(Mv,kde),e(kde,tOo),e(Mv,aOo),e(Mv,zD),e(zD,nOo),e(Mv,sOo),e(nn,lOo),e(nn,Ev),e(Ev,Rde),e(Rde,iOo),e(Ev,dOo),e(Ev,WD),e(WD,cOo),e(Ev,fOo),e(Ke,mOo),e(Ke,yv),e(yv,gOo),e(yv,Sde),e(Sde,hOo),e(yv,pOo),e(yv,Pde),e(Pde,_Oo),e(Ke,uOo),e(Ke,$de),e($de,bOo),e(Ke,vOo),g(ky,Ke,null),b(c,Ake,u),b(c,Gd,u),e(Gd,wv),e(wv,Ide),g(Ry,Ide,null),e(Gd,TOo),e(Gd,jde),e(jde,FOo),b(c,Lke,u),b(c,fr,u),g(Sy,fr,null),e(fr,COo),e(fr,Xd),e(Xd,MOo),e(Xd,Nde),e(Nde,EOo),e(Xd,yOo),e(Xd,Dde),e(Dde,wOo),e(Xd,AOo),e(fr,LOo),e(fr,Py),e(Py,BOo),e(Py,qde),e(qde,xOo),e(Py,kOo),e(fr,ROo),e(fr,nt),g($y,nt,null),e(nt,SOo),e(nt,Ode),e(Ode,POo),e(nt,$Oo),e(nt,Vd),e(Vd,IOo),e(Vd,Gde),e(Gde,jOo),e(Vd,NOo),e(Vd,Xde),e(Xde,DOo),e(Vd,qOo),e(nt,OOo),e(nt,Vde),e(Vde,GOo),e(nt,XOo),g(Iy,nt,null),e(fr,VOo),e(fr,Ze),g(jy,Ze,null),e(Ze,zOo),e(Ze,zde),e(zde,WOo),e(Ze,QOo),e(Ze,sn),e(sn,HOo),e(sn,Wde),e(Wde,UOo),e(sn,JOo),e(sn,Qde),e(Qde,YOo),e(sn,KOo),e(sn,Hde),e(Hde,ZOo),e(sn,eGo),e(Ze,oGo),e(Ze,Re),e(Re,Av),e(Av,Ude),e(Ude,rGo),e(Av,tGo),e(Av,QD),e(QD,aGo),e(Av,nGo),e(Re,sGo),e(Re,Lv),e(Lv,Jde),e(Jde,lGo),e(Lv,iGo),e(Lv,HD),e(HD,dGo),e(Lv,cGo),e(Re,fGo),e(Re,Bv),e(Bv,Yde),e(Yde,mGo),e(Bv,gGo),e(Bv,UD),e(UD,hGo),e(Bv,pGo),e(Re,_Go),e(Re,xv),e(xv,Kde),e(Kde,uGo),e(xv,bGo),e(xv,JD),e(JD,vGo),e(xv,TGo),e(Re,FGo),e(Re,kv),e(kv,Zde),e(Zde,CGo),e(kv,MGo),e(kv,YD),e(YD,EGo),e(kv,yGo),e(Re,wGo),e(Re,Rv),e(Rv,ece),e(ece,AGo),e(Rv,LGo),e(Rv,KD),e(KD,BGo),e(Rv,xGo),e(Re,kGo),e(Re,Sv),e(Sv,oce),e(oce,RGo),e(Sv,SGo),e(Sv,ZD),e(ZD,PGo),e(Sv,$Go),e(Re,IGo),e(Re,Pv),e(Pv,rce),e(rce,jGo),e(Pv,NGo),e(Pv,eq),e(eq,DGo),e(Pv,qGo),e(Ze,OGo),e(Ze,$v),e($v,GGo),e($v,tce),e(tce,XGo),e($v,VGo),e($v,ace),e(ace,zGo),e(Ze,WGo),e(Ze,nce),e(nce,QGo),e(Ze,HGo),g(Ny,Ze,null),b(c,Bke,u),b(c,zd,u),e(zd,Iv),e(Iv,sce),g(Dy,sce,null),e(zd,UGo),e(zd,lce),e(lce,JGo),b(c,xke,u),b(c,mr,u),g(qy,mr,null),e(mr,YGo),e(mr,Wd),e(Wd,KGo),e(Wd,ice),e(ice,ZGo),e(Wd,eXo),e(Wd,dce),e(dce,oXo),e(Wd,rXo),e(mr,tXo),e(mr,Oy),e(Oy,aXo),e(Oy,cce),e(cce,nXo),e(Oy,sXo),e(mr,lXo),e(mr,st),g(Gy,st,null),e(st,iXo),e(st,fce),e(fce,dXo),e(st,cXo),e(st,Qd),e(Qd,fXo),e(Qd,mce),e(mce,mXo),e(Qd,gXo),e(Qd,gce),e(gce,hXo),e(Qd,pXo),e(st,_Xo),e(st,hce),e(hce,uXo),e(st,bXo),g(Xy,st,null),e(mr,vXo),e(mr,eo),g(Vy,eo,null),e(eo,TXo),e(eo,pce),e(pce,FXo),e(eo,CXo),e(eo,ln),e(ln,MXo),e(ln,_ce),e(_ce,EXo),e(ln,yXo),e(ln,uce),e(uce,wXo),e(ln,AXo),e(ln,bce),e(bce,LXo),e(ln,BXo),e(eo,xXo),e(eo,zy),e(zy,jv),e(jv,vce),e(vce,kXo),e(jv,RXo),e(jv,oq),e(oq,SXo),e(jv,PXo),e(zy,$Xo),e(zy,Nv),e(Nv,Tce),e(Tce,IXo),e(Nv,jXo),e(Nv,rq),e(rq,NXo),e(Nv,DXo),e(eo,qXo),e(eo,Dv),e(Dv,OXo),e(Dv,Fce),e(Fce,GXo),e(Dv,XXo),e(Dv,Cce),e(Cce,VXo),e(eo,zXo),e(eo,Mce),e(Mce,WXo),e(eo,QXo),g(Wy,eo,null),b(c,kke,u),b(c,Hd,u),e(Hd,qv),e(qv,Ece),g(Qy,Ece,null),e(Hd,HXo),e(Hd,yce),e(yce,UXo),b(c,Rke,u),b(c,gr,u),g(Hy,gr,null),e(gr,JXo),e(gr,Ud),e(Ud,YXo),e(Ud,wce),e(wce,KXo),e(Ud,ZXo),e(Ud,Ace),e(Ace,eVo),e(Ud,oVo),e(gr,rVo),e(gr,Uy),e(Uy,tVo),e(Uy,Lce),e(Lce,aVo),e(Uy,nVo),e(gr,sVo),e(gr,lt),g(Jy,lt,null),e(lt,lVo),e(lt,Bce),e(Bce,iVo),e(lt,dVo),e(lt,Jd),e(Jd,cVo),e(Jd,xce),e(xce,fVo),e(Jd,mVo),e(Jd,kce),e(kce,gVo),e(Jd,hVo),e(lt,pVo),e(lt,Rce),e(Rce,_Vo),e(lt,uVo),g(Yy,lt,null),e(gr,bVo),e(gr,oo),g(Ky,oo,null),e(oo,vVo),e(oo,Sce),e(Sce,TVo),e(oo,FVo),e(oo,dn),e(dn,CVo),e(dn,Pce),e(Pce,MVo),e(dn,EVo),e(dn,$ce),e($ce,yVo),e(dn,wVo),e(dn,Ice),e(Ice,AVo),e(dn,LVo),e(oo,BVo),e(oo,cn),e(cn,Ov),e(Ov,jce),e(jce,xVo),e(Ov,kVo),e(Ov,tq),e(tq,RVo),e(Ov,SVo),e(cn,PVo),e(cn,Gv),e(Gv,Nce),e(Nce,$Vo),e(Gv,IVo),e(Gv,aq),e(aq,jVo),e(Gv,NVo),e(cn,DVo),e(cn,Xv),e(Xv,Dce),e(Dce,qVo),e(Xv,OVo),e(Xv,nq),e(nq,GVo),e(Xv,XVo),e(cn,VVo),e(cn,Vv),e(Vv,qce),e(qce,zVo),e(Vv,WVo),e(Vv,sq),e(sq,QVo),e(Vv,HVo),e(oo,UVo),e(oo,zv),e(zv,JVo),e(zv,Oce),e(Oce,YVo),e(zv,KVo),e(zv,Gce),e(Gce,ZVo),e(oo,ezo),e(oo,Xce),e(Xce,ozo),e(oo,rzo),g(Zy,oo,null),b(c,Ske,u),b(c,Yd,u),e(Yd,Wv),e(Wv,Vce),g(ew,Vce,null),e(Yd,tzo),e(Yd,zce),e(zce,azo),b(c,Pke,u),b(c,hr,u),g(ow,hr,null),e(hr,nzo),e(hr,Kd),e(Kd,szo),e(Kd,Wce),e(Wce,lzo),e(Kd,izo),e(Kd,Qce),e(Qce,dzo),e(Kd,czo),e(hr,fzo),e(hr,rw),e(rw,mzo),e(rw,Hce),e(Hce,gzo),e(rw,hzo),e(hr,pzo),e(hr,it),g(tw,it,null),e(it,_zo),e(it,Uce),e(Uce,uzo),e(it,bzo),e(it,Zd),e(Zd,vzo),e(Zd,Jce),e(Jce,Tzo),e(Zd,Fzo),e(Zd,Yce),e(Yce,Czo),e(Zd,Mzo),e(it,Ezo),e(it,Kce),e(Kce,yzo),e(it,wzo),g(aw,it,null),e(hr,Azo),e(hr,ro),g(nw,ro,null),e(ro,Lzo),e(ro,Zce),e(Zce,Bzo),e(ro,xzo),e(ro,fn),e(fn,kzo),e(fn,efe),e(efe,Rzo),e(fn,Szo),e(fn,ofe),e(ofe,Pzo),e(fn,$zo),e(fn,rfe),e(rfe,Izo),e(fn,jzo),e(ro,Nzo),e(ro,ec),e(ec,Qv),e(Qv,tfe),e(tfe,Dzo),e(Qv,qzo),e(Qv,lq),e(lq,Ozo),e(Qv,Gzo),e(ec,Xzo),e(ec,Hv),e(Hv,afe),e(afe,Vzo),e(Hv,zzo),e(Hv,iq),e(iq,Wzo),e(Hv,Qzo),e(ec,Hzo),e(ec,Uv),e(Uv,nfe),e(nfe,Uzo),e(Uv,Jzo),e(Uv,dq),e(dq,Yzo),e(Uv,Kzo),e(ro,Zzo),e(ro,Jv),e(Jv,eWo),e(Jv,sfe),e(sfe,oWo),e(Jv,rWo),e(Jv,lfe),e(lfe,tWo),e(ro,aWo),e(ro,ife),e(ife,nWo),e(ro,sWo),g(sw,ro,null),b(c,$ke,u),b(c,oc,u),e(oc,Yv),e(Yv,dfe),g(lw,dfe,null),e(oc,lWo),e(oc,cfe),e(cfe,iWo),b(c,Ike,u),b(c,pr,u),g(iw,pr,null),e(pr,dWo),e(pr,rc),e(rc,cWo),e(rc,ffe),e(ffe,fWo),e(rc,mWo),e(rc,mfe),e(mfe,gWo),e(rc,hWo),e(pr,pWo),e(pr,dw),e(dw,_Wo),e(dw,gfe),e(gfe,uWo),e(dw,bWo),e(pr,vWo),e(pr,dt),g(cw,dt,null),e(dt,TWo),e(dt,hfe),e(hfe,FWo),e(dt,CWo),e(dt,tc),e(tc,MWo),e(tc,pfe),e(pfe,EWo),e(tc,yWo),e(tc,_fe),e(_fe,wWo),e(tc,AWo),e(dt,LWo),e(dt,ufe),e(ufe,BWo),e(dt,xWo),g(fw,dt,null),e(pr,kWo),e(pr,to),g(mw,to,null),e(to,RWo),e(to,bfe),e(bfe,SWo),e(to,PWo),e(to,mn),e(mn,$Wo),e(mn,vfe),e(vfe,IWo),e(mn,jWo),e(mn,Tfe),e(Tfe,NWo),e(mn,DWo),e(mn,Ffe),e(Ffe,qWo),e(mn,OWo),e(to,GWo),e(to,Cfe),e(Cfe,Kv),e(Kv,Mfe),e(Mfe,XWo),e(Kv,VWo),e(Kv,cq),e(cq,zWo),e(Kv,WWo),e(to,QWo),e(to,Zv),e(Zv,HWo),e(Zv,Efe),e(Efe,UWo),e(Zv,JWo),e(Zv,yfe),e(yfe,YWo),e(to,KWo),e(to,wfe),e(wfe,ZWo),e(to,eQo),g(gw,to,null),b(c,jke,u),b(c,ac,u),e(ac,e6),e(e6,Afe),g(hw,Afe,null),e(ac,oQo),e(ac,Lfe),e(Lfe,rQo),b(c,Nke,u),b(c,_r,u),g(pw,_r,null),e(_r,tQo),e(_r,nc),e(nc,aQo),e(nc,Bfe),e(Bfe,nQo),e(nc,sQo),e(nc,xfe),e(xfe,lQo),e(nc,iQo),e(_r,dQo),e(_r,_w),e(_w,cQo),e(_w,kfe),e(kfe,fQo),e(_w,mQo),e(_r,gQo),e(_r,ct),g(uw,ct,null),e(ct,hQo),e(ct,Rfe),e(Rfe,pQo),e(ct,_Qo),e(ct,sc),e(sc,uQo),e(sc,Sfe),e(Sfe,bQo),e(sc,vQo),e(sc,Pfe),e(Pfe,TQo),e(sc,FQo),e(ct,CQo),e(ct,$fe),e($fe,MQo),e(ct,EQo),g(bw,ct,null),e(_r,yQo),e(_r,ao),g(vw,ao,null),e(ao,wQo),e(ao,Ife),e(Ife,AQo),e(ao,LQo),e(ao,gn),e(gn,BQo),e(gn,jfe),e(jfe,xQo),e(gn,kQo),e(gn,Nfe),e(Nfe,RQo),e(gn,SQo),e(gn,Dfe),e(Dfe,PQo),e(gn,$Qo),e(ao,IQo),e(ao,qfe),e(qfe,o6),e(o6,Ofe),e(Ofe,jQo),e(o6,NQo),e(o6,fq),e(fq,DQo),e(o6,qQo),e(ao,OQo),e(ao,r6),e(r6,GQo),e(r6,Gfe),e(Gfe,XQo),e(r6,VQo),e(r6,Xfe),e(Xfe,zQo),e(ao,WQo),e(ao,Vfe),e(Vfe,QQo),e(ao,HQo),g(Tw,ao,null),b(c,Dke,u),b(c,lc,u),e(lc,t6),e(t6,zfe),g(Fw,zfe,null),e(lc,UQo),e(lc,Wfe),e(Wfe,JQo),b(c,qke,u),b(c,ur,u),g(Cw,ur,null),e(ur,YQo),e(ur,ic),e(ic,KQo),e(ic,Qfe),e(Qfe,ZQo),e(ic,eHo),e(ic,Hfe),e(Hfe,oHo),e(ic,rHo),e(ur,tHo),e(ur,Mw),e(Mw,aHo),e(Mw,Ufe),e(Ufe,nHo),e(Mw,sHo),e(ur,lHo),e(ur,ft),g(Ew,ft,null),e(ft,iHo),e(ft,Jfe),e(Jfe,dHo),e(ft,cHo),e(ft,dc),e(dc,fHo),e(dc,Yfe),e(Yfe,mHo),e(dc,gHo),e(dc,Kfe),e(Kfe,hHo),e(dc,pHo),e(ft,_Ho),e(ft,Zfe),e(Zfe,uHo),e(ft,bHo),g(yw,ft,null),e(ur,vHo),e(ur,no),g(ww,no,null),e(no,THo),e(no,eme),e(eme,FHo),e(no,CHo),e(no,hn),e(hn,MHo),e(hn,ome),e(ome,EHo),e(hn,yHo),e(hn,rme),e(rme,wHo),e(hn,AHo),e(hn,tme),e(tme,LHo),e(hn,BHo),e(no,xHo),e(no,Aw),e(Aw,a6),e(a6,ame),e(ame,kHo),e(a6,RHo),e(a6,mq),e(mq,SHo),e(a6,PHo),e(Aw,$Ho),e(Aw,n6),e(n6,nme),e(nme,IHo),e(n6,jHo),e(n6,gq),e(gq,NHo),e(n6,DHo),e(no,qHo),e(no,s6),e(s6,OHo),e(s6,sme),e(sme,GHo),e(s6,XHo),e(s6,lme),e(lme,VHo),e(no,zHo),e(no,ime),e(ime,WHo),e(no,QHo),g(Lw,no,null),b(c,Oke,u),b(c,cc,u),e(cc,l6),e(l6,dme),g(Bw,dme,null),e(cc,HHo),e(cc,cme),e(cme,UHo),b(c,Gke,u),b(c,br,u),g(xw,br,null),e(br,JHo),e(br,fc),e(fc,YHo),e(fc,fme),e(fme,KHo),e(fc,ZHo),e(fc,mme),e(mme,eUo),e(fc,oUo),e(br,rUo),e(br,kw),e(kw,tUo),e(kw,gme),e(gme,aUo),e(kw,nUo),e(br,sUo),e(br,mt),g(Rw,mt,null),e(mt,lUo),e(mt,hme),e(hme,iUo),e(mt,dUo),e(mt,mc),e(mc,cUo),e(mc,pme),e(pme,fUo),e(mc,mUo),e(mc,_me),e(_me,gUo),e(mc,hUo),e(mt,pUo),e(mt,ume),e(ume,_Uo),e(mt,uUo),g(Sw,mt,null),e(br,bUo),e(br,so),g(Pw,so,null),e(so,vUo),e(so,bme),e(bme,TUo),e(so,FUo),e(so,pn),e(pn,CUo),e(pn,vme),e(vme,MUo),e(pn,EUo),e(pn,Tme),e(Tme,yUo),e(pn,wUo),e(pn,Fme),e(Fme,AUo),e(pn,LUo),e(so,BUo),e(so,Cme),e(Cme,i6),e(i6,Mme),e(Mme,xUo),e(i6,kUo),e(i6,hq),e(hq,RUo),e(i6,SUo),e(so,PUo),e(so,d6),e(d6,$Uo),e(d6,Eme),e(Eme,IUo),e(d6,jUo),e(d6,yme),e(yme,NUo),e(so,DUo),e(so,wme),e(wme,qUo),e(so,OUo),g($w,so,null),b(c,Xke,u),b(c,gc,u),e(gc,c6),e(c6,Ame),g(Iw,Ame,null),e(gc,GUo),e(gc,Lme),e(Lme,XUo),b(c,Vke,u),b(c,vr,u),g(jw,vr,null),e(vr,VUo),e(vr,hc),e(hc,zUo),e(hc,Bme),e(Bme,WUo),e(hc,QUo),e(hc,xme),e(xme,HUo),e(hc,UUo),e(vr,JUo),e(vr,Nw),e(Nw,YUo),e(Nw,kme),e(kme,KUo),e(Nw,ZUo),e(vr,eJo),e(vr,gt),g(Dw,gt,null),e(gt,oJo),e(gt,Rme),e(Rme,rJo),e(gt,tJo),e(gt,pc),e(pc,aJo),e(pc,Sme),e(Sme,nJo),e(pc,sJo),e(pc,Pme),e(Pme,lJo),e(pc,iJo),e(gt,dJo),e(gt,$me),e($me,cJo),e(gt,fJo),g(qw,gt,null),e(vr,mJo),e(vr,ho),g(Ow,ho,null),e(ho,gJo),e(ho,Ime),e(Ime,hJo),e(ho,pJo),e(ho,_n),e(_n,_Jo),e(_n,jme),e(jme,uJo),e(_n,bJo),e(_n,Nme),e(Nme,vJo),e(_n,TJo),e(_n,Dme),e(Dme,FJo),e(_n,CJo),e(ho,MJo),e(ho,B),e(B,f6),e(f6,qme),e(qme,EJo),e(f6,yJo),e(f6,pq),e(pq,wJo),e(f6,AJo),e(B,LJo),e(B,m6),e(m6,Ome),e(Ome,BJo),e(m6,xJo),e(m6,_q),e(_q,kJo),e(m6,RJo),e(B,SJo),e(B,g6),e(g6,Gme),e(Gme,PJo),e(g6,$Jo),e(g6,uq),e(uq,IJo),e(g6,jJo),e(B,NJo),e(B,h6),e(h6,Xme),e(Xme,DJo),e(h6,qJo),e(h6,bq),e(bq,OJo),e(h6,GJo),e(B,XJo),e(B,p6),e(p6,Vme),e(Vme,VJo),e(p6,zJo),e(p6,vq),e(vq,WJo),e(p6,QJo),e(B,HJo),e(B,_6),e(_6,zme),e(zme,UJo),e(_6,JJo),e(_6,Tq),e(Tq,YJo),e(_6,KJo),e(B,ZJo),e(B,u6),e(u6,Wme),e(Wme,eYo),e(u6,oYo),e(u6,Fq),e(Fq,rYo),e(u6,tYo),e(B,aYo),e(B,b6),e(b6,Qme),e(Qme,nYo),e(b6,sYo),e(b6,Cq),e(Cq,lYo),e(b6,iYo),e(B,dYo),e(B,v6),e(v6,Hme),e(Hme,cYo),e(v6,fYo),e(v6,Mq),e(Mq,mYo),e(v6,gYo),e(B,hYo),e(B,T6),e(T6,Ume),e(Ume,pYo),e(T6,_Yo),e(T6,Eq),e(Eq,uYo),e(T6,bYo),e(B,vYo),e(B,F6),e(F6,Jme),e(Jme,TYo),e(F6,FYo),e(F6,yq),e(yq,CYo),e(F6,MYo),e(B,EYo),e(B,C6),e(C6,Yme),e(Yme,yYo),e(C6,wYo),e(C6,wq),e(wq,AYo),e(C6,LYo),e(B,BYo),e(B,M6),e(M6,Kme),e(Kme,xYo),e(M6,kYo),e(M6,Aq),e(Aq,RYo),e(M6,SYo),e(B,PYo),e(B,E6),e(E6,Zme),e(Zme,$Yo),e(E6,IYo),e(E6,Lq),e(Lq,jYo),e(E6,NYo),e(B,DYo),e(B,y6),e(y6,ege),e(ege,qYo),e(y6,OYo),e(y6,Bq),e(Bq,GYo),e(y6,XYo),e(B,VYo),e(B,w6),e(w6,oge),e(oge,zYo),e(w6,WYo),e(w6,xq),e(xq,QYo),e(w6,HYo),e(B,UYo),e(B,Os),e(Os,rge),e(rge,JYo),e(Os,YYo),e(Os,kq),e(kq,KYo),e(Os,ZYo),e(Os,Rq),e(Rq,eKo),e(Os,oKo),e(B,rKo),e(B,A6),e(A6,tge),e(tge,tKo),e(A6,aKo),e(A6,Sq),e(Sq,nKo),e(A6,sKo),e(B,lKo),e(B,L6),e(L6,age),e(age,iKo),e(L6,dKo),e(L6,Pq),e(Pq,cKo),e(L6,fKo),e(B,mKo),e(B,B6),e(B6,nge),e(nge,gKo),e(B6,hKo),e(B6,$q),e($q,pKo),e(B6,_Ko),e(B,uKo),e(B,x6),e(x6,sge),e(sge,bKo),e(x6,vKo),e(x6,Iq),e(Iq,TKo),e(x6,FKo),e(B,CKo),e(B,k6),e(k6,lge),e(lge,MKo),e(k6,EKo),e(k6,jq),e(jq,yKo),e(k6,wKo),e(B,AKo),e(B,R6),e(R6,ige),e(ige,LKo),e(R6,BKo),e(R6,Nq),e(Nq,xKo),e(R6,kKo),e(B,RKo),e(B,S6),e(S6,dge),e(dge,SKo),e(S6,PKo),e(S6,Dq),e(Dq,$Ko),e(S6,IKo),e(B,jKo),e(B,P6),e(P6,cge),e(cge,NKo),e(P6,DKo),e(P6,qq),e(qq,qKo),e(P6,OKo),e(B,GKo),e(B,$6),e($6,fge),e(fge,XKo),e($6,VKo),e($6,Oq),e(Oq,zKo),e($6,WKo),e(B,QKo),e(B,I6),e(I6,mge),e(mge,HKo),e(I6,UKo),e(I6,Gq),e(Gq,JKo),e(I6,YKo),e(B,KKo),e(B,j6),e(j6,gge),e(gge,ZKo),e(j6,eZo),e(j6,Xq),e(Xq,oZo),e(j6,rZo),e(B,tZo),e(B,N6),e(N6,hge),e(hge,aZo),e(N6,nZo),e(N6,Vq),e(Vq,sZo),e(N6,lZo),e(B,iZo),e(B,D6),e(D6,pge),e(pge,dZo),e(D6,cZo),e(D6,zq),e(zq,fZo),e(D6,mZo),e(B,gZo),e(B,q6),e(q6,_ge),e(_ge,hZo),e(q6,pZo),e(q6,Wq),e(Wq,_Zo),e(q6,uZo),e(B,bZo),e(B,O6),e(O6,uge),e(uge,vZo),e(O6,TZo),e(O6,Qq),e(Qq,FZo),e(O6,CZo),e(B,MZo),e(B,G6),e(G6,bge),e(bge,EZo),e(G6,yZo),e(G6,Hq),e(Hq,wZo),e(G6,AZo),e(B,LZo),e(B,X6),e(X6,vge),e(vge,BZo),e(X6,xZo),e(X6,Uq),e(Uq,kZo),e(X6,RZo),e(B,SZo),e(B,V6),e(V6,Tge),e(Tge,PZo),e(V6,$Zo),e(V6,Jq),e(Jq,IZo),e(V6,jZo),e(B,NZo),e(B,z6),e(z6,Fge),e(Fge,DZo),e(z6,qZo),e(z6,Yq),e(Yq,OZo),e(z6,GZo),e(B,XZo),e(B,W6),e(W6,Cge),e(Cge,VZo),e(W6,zZo),e(W6,Kq),e(Kq,WZo),e(W6,QZo),e(B,HZo),e(B,Q6),e(Q6,Mge),e(Mge,UZo),e(Q6,JZo),e(Q6,Zq),e(Zq,YZo),e(Q6,KZo),e(B,ZZo),e(B,H6),e(H6,Ege),e(Ege,eer),e(H6,oer),e(H6,eO),e(eO,rer),e(H6,ter),e(B,aer),e(B,U6),e(U6,yge),e(yge,ner),e(U6,ser),e(U6,oO),e(oO,ler),e(U6,ier),e(B,der),e(B,J6),e(J6,wge),e(wge,cer),e(J6,fer),e(J6,rO),e(rO,mer),e(J6,ger),e(B,her),e(B,Y6),e(Y6,Age),e(Age,per),e(Y6,_er),e(Y6,tO),e(tO,uer),e(Y6,ber),e(ho,ver),e(ho,Lge),e(Lge,Ter),e(ho,Fer),g(Gw,ho,null),b(c,zke,u),b(c,_c,u),e(_c,K6),e(K6,Bge),g(Xw,Bge,null),e(_c,Cer),e(_c,xge),e(xge,Mer),b(c,Wke,u),b(c,Tr,u),g(Vw,Tr,null),e(Tr,Eer),e(Tr,uc),e(uc,yer),e(uc,kge),e(kge,wer),e(uc,Aer),e(uc,Rge),e(Rge,Ler),e(uc,Ber),e(Tr,xer),e(Tr,zw),e(zw,ker),e(zw,Sge),e(Sge,Rer),e(zw,Ser),e(Tr,Per),e(Tr,ht),g(Ww,ht,null),e(ht,$er),e(ht,Pge),e(Pge,Ier),e(ht,jer),e(ht,bc),e(bc,Ner),e(bc,$ge),e($ge,Der),e(bc,qer),e(bc,Ige),e(Ige,Oer),e(bc,Ger),e(ht,Xer),e(ht,jge),e(jge,Ver),e(ht,zer),g(Qw,ht,null),e(Tr,Wer),e(Tr,po),g(Hw,po,null),e(po,Qer),e(po,Nge),e(Nge,Her),e(po,Uer),e(po,un),e(un,Jer),e(un,Dge),e(Dge,Yer),e(un,Ker),e(un,qge),e(qge,Zer),e(un,eor),e(un,Oge),e(Oge,oor),e(un,ror),e(po,tor),e(po,H),e(H,Z6),e(Z6,Gge),e(Gge,aor),e(Z6,nor),e(Z6,aO),e(aO,sor),e(Z6,lor),e(H,ior),e(H,e0),e(e0,Xge),e(Xge,dor),e(e0,cor),e(e0,nO),e(nO,mor),e(e0,gor),e(H,hor),e(H,o0),e(o0,Vge),e(Vge,por),e(o0,_or),e(o0,sO),e(sO,uor),e(o0,bor),e(H,vor),e(H,r0),e(r0,zge),e(zge,Tor),e(r0,For),e(r0,lO),e(lO,Cor),e(r0,Mor),e(H,Eor),e(H,t0),e(t0,Wge),e(Wge,yor),e(t0,wor),e(t0,iO),e(iO,Aor),e(t0,Lor),e(H,Bor),e(H,a0),e(a0,Qge),e(Qge,xor),e(a0,kor),e(a0,dO),e(dO,Ror),e(a0,Sor),e(H,Por),e(H,n0),e(n0,Hge),e(Hge,$or),e(n0,Ior),e(n0,cO),e(cO,jor),e(n0,Nor),e(H,Dor),e(H,s0),e(s0,Uge),e(Uge,qor),e(s0,Oor),e(s0,fO),e(fO,Gor),e(s0,Xor),e(H,Vor),e(H,l0),e(l0,Jge),e(Jge,zor),e(l0,Wor),e(l0,mO),e(mO,Qor),e(l0,Hor),e(H,Uor),e(H,i0),e(i0,Yge),e(Yge,Jor),e(i0,Yor),e(i0,gO),e(gO,Kor),e(i0,Zor),e(H,err),e(H,d0),e(d0,Kge),e(Kge,orr),e(d0,rrr),e(d0,hO),e(hO,trr),e(d0,arr),e(H,nrr),e(H,c0),e(c0,Zge),e(Zge,srr),e(c0,lrr),e(c0,pO),e(pO,irr),e(c0,drr),e(H,crr),e(H,f0),e(f0,ehe),e(ehe,frr),e(f0,mrr),e(f0,_O),e(_O,grr),e(f0,hrr),e(H,prr),e(H,m0),e(m0,ohe),e(ohe,_rr),e(m0,urr),e(m0,uO),e(uO,brr),e(m0,vrr),e(H,Trr),e(H,g0),e(g0,rhe),e(rhe,Frr),e(g0,Crr),e(g0,bO),e(bO,Mrr),e(g0,Err),e(H,yrr),e(H,h0),e(h0,the),e(the,wrr),e(h0,Arr),e(h0,vO),e(vO,Lrr),e(h0,Brr),e(H,xrr),e(H,p0),e(p0,ahe),e(ahe,krr),e(p0,Rrr),e(p0,TO),e(TO,Srr),e(p0,Prr),e(H,$rr),e(H,_0),e(_0,nhe),e(nhe,Irr),e(_0,jrr),e(_0,FO),e(FO,Nrr),e(_0,Drr),e(H,qrr),e(H,u0),e(u0,she),e(she,Orr),e(u0,Grr),e(u0,CO),e(CO,Xrr),e(u0,Vrr),e(H,zrr),e(H,b0),e(b0,lhe),e(lhe,Wrr),e(b0,Qrr),e(b0,MO),e(MO,Hrr),e(b0,Urr),e(H,Jrr),e(H,v0),e(v0,ihe),e(ihe,Yrr),e(v0,Krr),e(v0,EO),e(EO,Zrr),e(v0,etr),e(H,otr),e(H,T0),e(T0,dhe),e(dhe,rtr),e(T0,ttr),e(T0,yO),e(yO,atr),e(T0,ntr),e(po,str),e(po,che),e(che,ltr),e(po,itr),g(Uw,po,null),b(c,Qke,u),b(c,vc,u),e(vc,F0),e(F0,fhe),g(Jw,fhe,null),e(vc,dtr),e(vc,mhe),e(mhe,ctr),b(c,Hke,u),b(c,Fr,u),g(Yw,Fr,null),e(Fr,ftr),e(Fr,Tc),e(Tc,mtr),e(Tc,ghe),e(ghe,gtr),e(Tc,htr),e(Tc,hhe),e(hhe,ptr),e(Tc,_tr),e(Fr,utr),e(Fr,Kw),e(Kw,btr),e(Kw,phe),e(phe,vtr),e(Kw,Ttr),e(Fr,Ftr),e(Fr,pt),g(Zw,pt,null),e(pt,Ctr),e(pt,_he),e(_he,Mtr),e(pt,Etr),e(pt,Fc),e(Fc,ytr),e(Fc,uhe),e(uhe,wtr),e(Fc,Atr),e(Fc,bhe),e(bhe,Ltr),e(Fc,Btr),e(pt,xtr),e(pt,vhe),e(vhe,ktr),e(pt,Rtr),g(eA,pt,null),e(Fr,Str),e(Fr,_o),g(oA,_o,null),e(_o,Ptr),e(_o,The),e(The,$tr),e(_o,Itr),e(_o,bn),e(bn,jtr),e(bn,Fhe),e(Fhe,Ntr),e(bn,Dtr),e(bn,Che),e(Che,qtr),e(bn,Otr),e(bn,Mhe),e(Mhe,Gtr),e(bn,Xtr),e(_o,Vtr),e(_o,ge),e(ge,C0),e(C0,Ehe),e(Ehe,ztr),e(C0,Wtr),e(C0,wO),e(wO,Qtr),e(C0,Htr),e(ge,Utr),e(ge,M0),e(M0,yhe),e(yhe,Jtr),e(M0,Ytr),e(M0,AO),e(AO,Ktr),e(M0,Ztr),e(ge,ear),e(ge,E0),e(E0,whe),e(whe,oar),e(E0,rar),e(E0,LO),e(LO,tar),e(E0,aar),e(ge,nar),e(ge,y0),e(y0,Ahe),e(Ahe,sar),e(y0,lar),e(y0,BO),e(BO,iar),e(y0,dar),e(ge,car),e(ge,w0),e(w0,Lhe),e(Lhe,far),e(w0,mar),e(w0,xO),e(xO,gar),e(w0,har),e(ge,par),e(ge,A0),e(A0,Bhe),e(Bhe,_ar),e(A0,uar),e(A0,kO),e(kO,bar),e(A0,Tar),e(ge,Far),e(ge,L0),e(L0,xhe),e(xhe,Car),e(L0,Mar),e(L0,RO),e(RO,Ear),e(L0,yar),e(ge,war),e(ge,B0),e(B0,khe),e(khe,Aar),e(B0,Lar),e(B0,SO),e(SO,Bar),e(B0,xar),e(ge,kar),e(ge,x0),e(x0,Rhe),e(Rhe,Rar),e(x0,Sar),e(x0,PO),e(PO,Par),e(x0,$ar),e(ge,Iar),e(ge,k0),e(k0,She),e(She,jar),e(k0,Nar),e(k0,$O),e($O,Dar),e(k0,qar),e(ge,Oar),e(ge,R0),e(R0,Phe),e(Phe,Gar),e(R0,Xar),e(R0,IO),e(IO,Var),e(R0,zar),e(_o,War),e(_o,$he),e($he,Qar),e(_o,Har),g(rA,_o,null),b(c,Uke,u),b(c,Cc,u),e(Cc,S0),e(S0,Ihe),g(tA,Ihe,null),e(Cc,Uar),e(Cc,jhe),e(jhe,Jar),b(c,Jke,u),b(c,Cr,u),g(aA,Cr,null),e(Cr,Yar),e(Cr,Mc),e(Mc,Kar),e(Mc,Nhe),e(Nhe,Zar),e(Mc,enr),e(Mc,Dhe),e(Dhe,onr),e(Mc,rnr),e(Cr,tnr),e(Cr,nA),e(nA,anr),e(nA,qhe),e(qhe,nnr),e(nA,snr),e(Cr,lnr),e(Cr,_t),g(sA,_t,null),e(_t,inr),e(_t,Ohe),e(Ohe,dnr),e(_t,cnr),e(_t,Ec),e(Ec,fnr),e(Ec,Ghe),e(Ghe,mnr),e(Ec,gnr),e(Ec,Xhe),e(Xhe,hnr),e(Ec,pnr),e(_t,_nr),e(_t,Vhe),e(Vhe,unr),e(_t,bnr),g(lA,_t,null),e(Cr,vnr),e(Cr,uo),g(iA,uo,null),e(uo,Tnr),e(uo,zhe),e(zhe,Fnr),e(uo,Cnr),e(uo,vn),e(vn,Mnr),e(vn,Whe),e(Whe,Enr),e(vn,ynr),e(vn,Qhe),e(Qhe,wnr),e(vn,Anr),e(vn,Hhe),e(Hhe,Lnr),e(vn,Bnr),e(uo,xnr),e(uo,dA),e(dA,P0),e(P0,Uhe),e(Uhe,knr),e(P0,Rnr),e(P0,jO),e(jO,Snr),e(P0,Pnr),e(dA,$nr),e(dA,$0),e($0,Jhe),e(Jhe,Inr),e($0,jnr),e($0,NO),e(NO,Nnr),e($0,Dnr),e(uo,qnr),e(uo,Yhe),e(Yhe,Onr),e(uo,Gnr),g(cA,uo,null),b(c,Yke,u),b(c,yc,u),e(yc,I0),e(I0,Khe),g(fA,Khe,null),e(yc,Xnr),e(yc,Zhe),e(Zhe,Vnr),b(c,Kke,u),b(c,Mr,u),g(mA,Mr,null),e(Mr,znr),e(Mr,wc),e(wc,Wnr),e(wc,epe),e(epe,Qnr),e(wc,Hnr),e(wc,ope),e(ope,Unr),e(wc,Jnr),e(Mr,Ynr),e(Mr,gA),e(gA,Knr),e(gA,rpe),e(rpe,Znr),e(gA,esr),e(Mr,osr),e(Mr,ut),g(hA,ut,null),e(ut,rsr),e(ut,tpe),e(tpe,tsr),e(ut,asr),e(ut,Ac),e(Ac,nsr),e(Ac,ape),e(ape,ssr),e(Ac,lsr),e(Ac,npe),e(npe,isr),e(Ac,dsr),e(ut,csr),e(ut,spe),e(spe,fsr),e(ut,msr),g(pA,ut,null),e(Mr,gsr),e(Mr,bo),g(_A,bo,null),e(bo,hsr),e(bo,lpe),e(lpe,psr),e(bo,_sr),e(bo,Tn),e(Tn,usr),e(Tn,ipe),e(ipe,bsr),e(Tn,vsr),e(Tn,dpe),e(dpe,Tsr),e(Tn,Fsr),e(Tn,cpe),e(cpe,Csr),e(Tn,Msr),e(bo,Esr),e(bo,Y),e(Y,j0),e(j0,fpe),e(fpe,ysr),e(j0,wsr),e(j0,DO),e(DO,Asr),e(j0,Lsr),e(Y,Bsr),e(Y,N0),e(N0,mpe),e(mpe,xsr),e(N0,ksr),e(N0,qO),e(qO,Rsr),e(N0,Ssr),e(Y,Psr),e(Y,D0),e(D0,gpe),e(gpe,$sr),e(D0,Isr),e(D0,OO),e(OO,jsr),e(D0,Nsr),e(Y,Dsr),e(Y,q0),e(q0,hpe),e(hpe,qsr),e(q0,Osr),e(q0,GO),e(GO,Gsr),e(q0,Xsr),e(Y,Vsr),e(Y,O0),e(O0,ppe),e(ppe,zsr),e(O0,Wsr),e(O0,XO),e(XO,Qsr),e(O0,Hsr),e(Y,Usr),e(Y,G0),e(G0,_pe),e(_pe,Jsr),e(G0,Ysr),e(G0,VO),e(VO,Ksr),e(G0,Zsr),e(Y,elr),e(Y,X0),e(X0,upe),e(upe,olr),e(X0,rlr),e(X0,zO),e(zO,tlr),e(X0,alr),e(Y,nlr),e(Y,V0),e(V0,bpe),e(bpe,slr),e(V0,llr),e(V0,WO),e(WO,ilr),e(V0,dlr),e(Y,clr),e(Y,z0),e(z0,vpe),e(vpe,flr),e(z0,mlr),e(z0,QO),e(QO,glr),e(z0,hlr),e(Y,plr),e(Y,W0),e(W0,Tpe),e(Tpe,_lr),e(W0,ulr),e(W0,HO),e(HO,blr),e(W0,vlr),e(Y,Tlr),e(Y,Q0),e(Q0,Fpe),e(Fpe,Flr),e(Q0,Clr),e(Q0,UO),e(UO,Mlr),e(Q0,Elr),e(Y,ylr),e(Y,H0),e(H0,Cpe),e(Cpe,wlr),e(H0,Alr),e(H0,JO),e(JO,Llr),e(H0,Blr),e(Y,xlr),e(Y,U0),e(U0,Mpe),e(Mpe,klr),e(U0,Rlr),e(U0,YO),e(YO,Slr),e(U0,Plr),e(Y,$lr),e(Y,J0),e(J0,Epe),e(Epe,Ilr),e(J0,jlr),e(J0,KO),e(KO,Nlr),e(J0,Dlr),e(Y,qlr),e(Y,Y0),e(Y0,ype),e(ype,Olr),e(Y0,Glr),e(Y0,ZO),e(ZO,Xlr),e(Y0,Vlr),e(Y,zlr),e(Y,K0),e(K0,wpe),e(wpe,Wlr),e(K0,Qlr),e(K0,eG),e(eG,Hlr),e(K0,Ulr),e(Y,Jlr),e(Y,Z0),e(Z0,Ape),e(Ape,Ylr),e(Z0,Klr),e(Z0,oG),e(oG,Zlr),e(Z0,eir),e(Y,oir),e(Y,eT),e(eT,Lpe),e(Lpe,rir),e(eT,tir),e(eT,rG),e(rG,air),e(eT,nir),e(Y,sir),e(Y,oT),e(oT,Bpe),e(Bpe,lir),e(oT,iir),e(oT,tG),e(tG,dir),e(oT,cir),e(Y,fir),e(Y,rT),e(rT,xpe),e(xpe,mir),e(rT,gir),e(rT,aG),e(aG,hir),e(rT,pir),e(bo,_ir),e(bo,kpe),e(kpe,uir),e(bo,bir),g(uA,bo,null),b(c,Zke,u),b(c,Lc,u),e(Lc,tT),e(tT,Rpe),g(bA,Rpe,null),e(Lc,vir),e(Lc,Spe),e(Spe,Tir),b(c,eRe,u),b(c,Er,u),g(vA,Er,null),e(Er,Fir),e(Er,Bc),e(Bc,Cir),e(Bc,Ppe),e(Ppe,Mir),e(Bc,Eir),e(Bc,$pe),e($pe,yir),e(Bc,wir),e(Er,Air),e(Er,TA),e(TA,Lir),e(TA,Ipe),e(Ipe,Bir),e(TA,xir),e(Er,kir),e(Er,bt),g(FA,bt,null),e(bt,Rir),e(bt,jpe),e(jpe,Sir),e(bt,Pir),e(bt,xc),e(xc,$ir),e(xc,Npe),e(Npe,Iir),e(xc,jir),e(xc,Dpe),e(Dpe,Nir),e(xc,Dir),e(bt,qir),e(bt,qpe),e(qpe,Oir),e(bt,Gir),g(CA,bt,null),e(Er,Xir),e(Er,vo),g(MA,vo,null),e(vo,Vir),e(vo,Ope),e(Ope,zir),e(vo,Wir),e(vo,Fn),e(Fn,Qir),e(Fn,Gpe),e(Gpe,Hir),e(Fn,Uir),e(Fn,Xpe),e(Xpe,Jir),e(Fn,Yir),e(Fn,Vpe),e(Vpe,Kir),e(Fn,Zir),e(vo,edr),e(vo,ue),e(ue,aT),e(aT,zpe),e(zpe,odr),e(aT,rdr),e(aT,nG),e(nG,tdr),e(aT,adr),e(ue,ndr),e(ue,nT),e(nT,Wpe),e(Wpe,sdr),e(nT,ldr),e(nT,sG),e(sG,idr),e(nT,ddr),e(ue,cdr),e(ue,sT),e(sT,Qpe),e(Qpe,fdr),e(sT,mdr),e(sT,lG),e(lG,gdr),e(sT,hdr),e(ue,pdr),e(ue,lT),e(lT,Hpe),e(Hpe,_dr),e(lT,udr),e(lT,iG),e(iG,bdr),e(lT,vdr),e(ue,Tdr),e(ue,iT),e(iT,Upe),e(Upe,Fdr),e(iT,Cdr),e(iT,dG),e(dG,Mdr),e(iT,Edr),e(ue,ydr),e(ue,dT),e(dT,Jpe),e(Jpe,wdr),e(dT,Adr),e(dT,cG),e(cG,Ldr),e(dT,Bdr),e(ue,xdr),e(ue,cT),e(cT,Ype),e(Ype,kdr),e(cT,Rdr),e(cT,fG),e(fG,Sdr),e(cT,Pdr),e(ue,$dr),e(ue,fT),e(fT,Kpe),e(Kpe,Idr),e(fT,jdr),e(fT,mG),e(mG,Ndr),e(fT,Ddr),e(ue,qdr),e(ue,mT),e(mT,Zpe),e(Zpe,Odr),e(mT,Gdr),e(mT,gG),e(gG,Xdr),e(mT,Vdr),e(ue,zdr),e(ue,gT),e(gT,e_e),e(e_e,Wdr),e(gT,Qdr),e(gT,hG),e(hG,Hdr),e(gT,Udr),e(vo,Jdr),e(vo,o_e),e(o_e,Ydr),e(vo,Kdr),g(EA,vo,null),b(c,oRe,u),b(c,kc,u),e(kc,hT),e(hT,r_e),g(yA,r_e,null),e(kc,Zdr),e(kc,t_e),e(t_e,ecr),b(c,rRe,u),b(c,yr,u),g(wA,yr,null),e(yr,ocr),e(yr,Rc),e(Rc,rcr),e(Rc,a_e),e(a_e,tcr),e(Rc,acr),e(Rc,n_e),e(n_e,ncr),e(Rc,scr),e(yr,lcr),e(yr,AA),e(AA,icr),e(AA,s_e),e(s_e,dcr),e(AA,ccr),e(yr,fcr),e(yr,vt),g(LA,vt,null),e(vt,mcr),e(vt,l_e),e(l_e,gcr),e(vt,hcr),e(vt,Sc),e(Sc,pcr),e(Sc,i_e),e(i_e,_cr),e(Sc,ucr),e(Sc,d_e),e(d_e,bcr),e(Sc,vcr),e(vt,Tcr),e(vt,c_e),e(c_e,Fcr),e(vt,Ccr),g(BA,vt,null),e(yr,Mcr),e(yr,To),g(xA,To,null),e(To,Ecr),e(To,f_e),e(f_e,ycr),e(To,wcr),e(To,Cn),e(Cn,Acr),e(Cn,m_e),e(m_e,Lcr),e(Cn,Bcr),e(Cn,g_e),e(g_e,xcr),e(Cn,kcr),e(Cn,h_e),e(h_e,Rcr),e(Cn,Scr),e(To,Pcr),e(To,V),e(V,pT),e(pT,p_e),e(p_e,$cr),e(pT,Icr),e(pT,pG),e(pG,jcr),e(pT,Ncr),e(V,Dcr),e(V,_T),e(_T,__e),e(__e,qcr),e(_T,Ocr),e(_T,_G),e(_G,Gcr),e(_T,Xcr),e(V,Vcr),e(V,uT),e(uT,u_e),e(u_e,zcr),e(uT,Wcr),e(uT,uG),e(uG,Qcr),e(uT,Hcr),e(V,Ucr),e(V,bT),e(bT,b_e),e(b_e,Jcr),e(bT,Ycr),e(bT,bG),e(bG,Kcr),e(bT,Zcr),e(V,efr),e(V,vT),e(vT,v_e),e(v_e,ofr),e(vT,rfr),e(vT,vG),e(vG,tfr),e(vT,afr),e(V,nfr),e(V,TT),e(TT,T_e),e(T_e,sfr),e(TT,lfr),e(TT,TG),e(TG,ifr),e(TT,dfr),e(V,cfr),e(V,FT),e(FT,F_e),e(F_e,ffr),e(FT,mfr),e(FT,FG),e(FG,gfr),e(FT,hfr),e(V,pfr),e(V,CT),e(CT,C_e),e(C_e,_fr),e(CT,ufr),e(CT,CG),e(CG,bfr),e(CT,vfr),e(V,Tfr),e(V,MT),e(MT,M_e),e(M_e,Ffr),e(MT,Cfr),e(MT,MG),e(MG,Mfr),e(MT,Efr),e(V,yfr),e(V,ET),e(ET,E_e),e(E_e,wfr),e(ET,Afr),e(ET,EG),e(EG,Lfr),e(ET,Bfr),e(V,xfr),e(V,yT),e(yT,y_e),e(y_e,kfr),e(yT,Rfr),e(yT,yG),e(yG,Sfr),e(yT,Pfr),e(V,$fr),e(V,wT),e(wT,w_e),e(w_e,Ifr),e(wT,jfr),e(wT,wG),e(wG,Nfr),e(wT,Dfr),e(V,qfr),e(V,AT),e(AT,A_e),e(A_e,Ofr),e(AT,Gfr),e(AT,AG),e(AG,Xfr),e(AT,Vfr),e(V,zfr),e(V,LT),e(LT,L_e),e(L_e,Wfr),e(LT,Qfr),e(LT,LG),e(LG,Hfr),e(LT,Ufr),e(V,Jfr),e(V,BT),e(BT,B_e),e(B_e,Yfr),e(BT,Kfr),e(BT,BG),e(BG,Zfr),e(BT,emr),e(V,omr),e(V,xT),e(xT,x_e),e(x_e,rmr),e(xT,tmr),e(xT,xG),e(xG,amr),e(xT,nmr),e(V,smr),e(V,kT),e(kT,k_e),e(k_e,lmr),e(kT,imr),e(kT,kG),e(kG,dmr),e(kT,cmr),e(V,fmr),e(V,RT),e(RT,R_e),e(R_e,mmr),e(RT,gmr),e(RT,RG),e(RG,hmr),e(RT,pmr),e(V,_mr),e(V,ST),e(ST,S_e),e(S_e,umr),e(ST,bmr),e(ST,SG),e(SG,vmr),e(ST,Tmr),e(V,Fmr),e(V,PT),e(PT,P_e),e(P_e,Cmr),e(PT,Mmr),e(PT,PG),e(PG,Emr),e(PT,ymr),e(V,wmr),e(V,$T),e($T,$_e),e($_e,Amr),e($T,Lmr),e($T,$G),e($G,Bmr),e($T,xmr),e(V,kmr),e(V,IT),e(IT,I_e),e(I_e,Rmr),e(IT,Smr),e(IT,IG),e(IG,Pmr),e(IT,$mr),e(V,Imr),e(V,jT),e(jT,j_e),e(j_e,jmr),e(jT,Nmr),e(jT,jG),e(jG,Dmr),e(jT,qmr),e(V,Omr),e(V,NT),e(NT,N_e),e(N_e,Gmr),e(NT,Xmr),e(NT,NG),e(NG,Vmr),e(NT,zmr),e(V,Wmr),e(V,DT),e(DT,D_e),e(D_e,Qmr),e(DT,Hmr),e(DT,DG),e(DG,Umr),e(DT,Jmr),e(To,Ymr),e(To,q_e),e(q_e,Kmr),e(To,Zmr),g(kA,To,null),b(c,tRe,u),b(c,Pc,u),e(Pc,qT),e(qT,O_e),g(RA,O_e,null),e(Pc,egr),e(Pc,G_e),e(G_e,ogr),b(c,aRe,u),b(c,wr,u),g(SA,wr,null),e(wr,rgr),e(wr,$c),e($c,tgr),e($c,X_e),e(X_e,agr),e($c,ngr),e($c,V_e),e(V_e,sgr),e($c,lgr),e(wr,igr),e(wr,PA),e(PA,dgr),e(PA,z_e),e(z_e,cgr),e(PA,fgr),e(wr,mgr),e(wr,Tt),g($A,Tt,null),e(Tt,ggr),e(Tt,W_e),e(W_e,hgr),e(Tt,pgr),e(Tt,Ic),e(Ic,_gr),e(Ic,Q_e),e(Q_e,ugr),e(Ic,bgr),e(Ic,H_e),e(H_e,vgr),e(Ic,Tgr),e(Tt,Fgr),e(Tt,U_e),e(U_e,Cgr),e(Tt,Mgr),g(IA,Tt,null),e(wr,Egr),e(wr,Fo),g(jA,Fo,null),e(Fo,ygr),e(Fo,J_e),e(J_e,wgr),e(Fo,Agr),e(Fo,Mn),e(Mn,Lgr),e(Mn,Y_e),e(Y_e,Bgr),e(Mn,xgr),e(Mn,K_e),e(K_e,kgr),e(Mn,Rgr),e(Mn,Z_e),e(Z_e,Sgr),e(Mn,Pgr),e(Fo,$gr),e(Fo,ae),e(ae,OT),e(OT,eue),e(eue,Igr),e(OT,jgr),e(OT,qG),e(qG,Ngr),e(OT,Dgr),e(ae,qgr),e(ae,GT),e(GT,oue),e(oue,Ogr),e(GT,Ggr),e(GT,OG),e(OG,Xgr),e(GT,Vgr),e(ae,zgr),e(ae,XT),e(XT,rue),e(rue,Wgr),e(XT,Qgr),e(XT,GG),e(GG,Hgr),e(XT,Ugr),e(ae,Jgr),e(ae,VT),e(VT,tue),e(tue,Ygr),e(VT,Kgr),e(VT,XG),e(XG,Zgr),e(VT,ehr),e(ae,ohr),e(ae,zT),e(zT,aue),e(aue,rhr),e(zT,thr),e(zT,VG),e(VG,ahr),e(zT,nhr),e(ae,shr),e(ae,WT),e(WT,nue),e(nue,lhr),e(WT,ihr),e(WT,zG),e(zG,dhr),e(WT,chr),e(ae,fhr),e(ae,QT),e(QT,sue),e(sue,mhr),e(QT,ghr),e(QT,WG),e(WG,hhr),e(QT,phr),e(ae,_hr),e(ae,HT),e(HT,lue),e(lue,uhr),e(HT,bhr),e(HT,QG),e(QG,vhr),e(HT,Thr),e(ae,Fhr),e(ae,UT),e(UT,iue),e(iue,Chr),e(UT,Mhr),e(UT,HG),e(HG,Ehr),e(UT,yhr),e(ae,whr),e(ae,JT),e(JT,due),e(due,Ahr),e(JT,Lhr),e(JT,UG),e(UG,Bhr),e(JT,xhr),e(ae,khr),e(ae,YT),e(YT,cue),e(cue,Rhr),e(YT,Shr),e(YT,JG),e(JG,Phr),e(YT,$hr),e(ae,Ihr),e(ae,KT),e(KT,fue),e(fue,jhr),e(KT,Nhr),e(KT,YG),e(YG,Dhr),e(KT,qhr),e(ae,Ohr),e(ae,ZT),e(ZT,mue),e(mue,Ghr),e(ZT,Xhr),e(ZT,KG),e(KG,Vhr),e(ZT,zhr),e(ae,Whr),e(ae,eF),e(eF,gue),e(gue,Qhr),e(eF,Hhr),e(eF,ZG),e(ZG,Uhr),e(eF,Jhr),e(ae,Yhr),e(ae,oF),e(oF,hue),e(hue,Khr),e(oF,Zhr),e(oF,eX),e(eX,epr),e(oF,opr),e(ae,rpr),e(ae,rF),e(rF,pue),e(pue,tpr),e(rF,apr),e(rF,oX),e(oX,npr),e(rF,spr),e(ae,lpr),e(ae,tF),e(tF,_ue),e(_ue,ipr),e(tF,dpr),e(tF,rX),e(rX,cpr),e(tF,fpr),e(Fo,mpr),e(Fo,uue),e(uue,gpr),e(Fo,hpr),g(NA,Fo,null),b(c,nRe,u),b(c,jc,u),e(jc,aF),e(aF,bue),g(DA,bue,null),e(jc,ppr),e(jc,vue),e(vue,_pr),b(c,sRe,u),b(c,Ar,u),g(qA,Ar,null),e(Ar,upr),e(Ar,Nc),e(Nc,bpr),e(Nc,Tue),e(Tue,vpr),e(Nc,Tpr),e(Nc,Fue),e(Fue,Fpr),e(Nc,Cpr),e(Ar,Mpr),e(Ar,OA),e(OA,Epr),e(OA,Cue),e(Cue,ypr),e(OA,wpr),e(Ar,Apr),e(Ar,Ft),g(GA,Ft,null),e(Ft,Lpr),e(Ft,Mue),e(Mue,Bpr),e(Ft,xpr),e(Ft,Dc),e(Dc,kpr),e(Dc,Eue),e(Eue,Rpr),e(Dc,Spr),e(Dc,yue),e(yue,Ppr),e(Dc,$pr),e(Ft,Ipr),e(Ft,wue),e(wue,jpr),e(Ft,Npr),g(XA,Ft,null),e(Ar,Dpr),e(Ar,Co),g(VA,Co,null),e(Co,qpr),e(Co,Aue),e(Aue,Opr),e(Co,Gpr),e(Co,En),e(En,Xpr),e(En,Lue),e(Lue,Vpr),e(En,zpr),e(En,Bue),e(Bue,Wpr),e(En,Qpr),e(En,xue),e(xue,Hpr),e(En,Upr),e(Co,Jpr),e(Co,kue),e(kue,nF),e(nF,Rue),e(Rue,Ypr),e(nF,Kpr),e(nF,tX),e(tX,Zpr),e(nF,e_r),e(Co,o_r),e(Co,Sue),e(Sue,r_r),e(Co,t_r),g(zA,Co,null),b(c,lRe,u),b(c,qc,u),e(qc,sF),e(sF,Pue),g(WA,Pue,null),e(qc,a_r),e(qc,$ue),e($ue,n_r),b(c,iRe,u),b(c,Lr,u),g(QA,Lr,null),e(Lr,s_r),e(Lr,Oc),e(Oc,l_r),e(Oc,Iue),e(Iue,i_r),e(Oc,d_r),e(Oc,jue),e(jue,c_r),e(Oc,f_r),e(Lr,m_r),e(Lr,HA),e(HA,g_r),e(HA,Nue),e(Nue,h_r),e(HA,p_r),e(Lr,__r),e(Lr,Ct),g(UA,Ct,null),e(Ct,u_r),e(Ct,Due),e(Due,b_r),e(Ct,v_r),e(Ct,Gc),e(Gc,T_r),e(Gc,que),e(que,F_r),e(Gc,C_r),e(Gc,Oue),e(Oue,M_r),e(Gc,E_r),e(Ct,y_r),e(Ct,Gue),e(Gue,w_r),e(Ct,A_r),g(JA,Ct,null),e(Lr,L_r),e(Lr,Mo),g(YA,Mo,null),e(Mo,B_r),e(Mo,Xue),e(Xue,x_r),e(Mo,k_r),e(Mo,yn),e(yn,R_r),e(yn,Vue),e(Vue,S_r),e(yn,P_r),e(yn,zue),e(zue,$_r),e(yn,I_r),e(yn,Wue),e(Wue,j_r),e(yn,N_r),e(Mo,D_r),e(Mo,K),e(K,lF),e(lF,Que),e(Que,q_r),e(lF,O_r),e(lF,aX),e(aX,G_r),e(lF,X_r),e(K,V_r),e(K,iF),e(iF,Hue),e(Hue,z_r),e(iF,W_r),e(iF,nX),e(nX,Q_r),e(iF,H_r),e(K,U_r),e(K,dF),e(dF,Uue),e(Uue,J_r),e(dF,Y_r),e(dF,sX),e(sX,K_r),e(dF,Z_r),e(K,eur),e(K,cF),e(cF,Jue),e(Jue,our),e(cF,rur),e(cF,lX),e(lX,tur),e(cF,aur),e(K,nur),e(K,fF),e(fF,Yue),e(Yue,sur),e(fF,lur),e(fF,iX),e(iX,iur),e(fF,dur),e(K,cur),e(K,mF),e(mF,Kue),e(Kue,fur),e(mF,mur),e(mF,dX),e(dX,gur),e(mF,hur),e(K,pur),e(K,gF),e(gF,Zue),e(Zue,_ur),e(gF,uur),e(gF,cX),e(cX,bur),e(gF,vur),e(K,Tur),e(K,hF),e(hF,e4e),e(e4e,Fur),e(hF,Cur),e(hF,fX),e(fX,Mur),e(hF,Eur),e(K,yur),e(K,pF),e(pF,o4e),e(o4e,wur),e(pF,Aur),e(pF,mX),e(mX,Lur),e(pF,Bur),e(K,xur),e(K,_F),e(_F,r4e),e(r4e,kur),e(_F,Rur),e(_F,gX),e(gX,Sur),e(_F,Pur),e(K,$ur),e(K,uF),e(uF,t4e),e(t4e,Iur),e(uF,jur),e(uF,hX),e(hX,Nur),e(uF,Dur),e(K,qur),e(K,bF),e(bF,a4e),e(a4e,Our),e(bF,Gur),e(bF,pX),e(pX,Xur),e(bF,Vur),e(K,zur),e(K,vF),e(vF,n4e),e(n4e,Wur),e(vF,Qur),e(vF,_X),e(_X,Hur),e(vF,Uur),e(K,Jur),e(K,TF),e(TF,s4e),e(s4e,Yur),e(TF,Kur),e(TF,uX),e(uX,Zur),e(TF,e4r),e(K,o4r),e(K,FF),e(FF,l4e),e(l4e,r4r),e(FF,t4r),e(FF,bX),e(bX,a4r),e(FF,n4r),e(K,s4r),e(K,CF),e(CF,i4e),e(i4e,l4r),e(CF,i4r),e(CF,vX),e(vX,d4r),e(CF,c4r),e(K,f4r),e(K,MF),e(MF,d4e),e(d4e,m4r),e(MF,g4r),e(MF,TX),e(TX,h4r),e(MF,p4r),e(K,_4r),e(K,EF),e(EF,c4e),e(c4e,u4r),e(EF,b4r),e(EF,FX),e(FX,v4r),e(EF,T4r),e(K,F4r),e(K,yF),e(yF,f4e),e(f4e,C4r),e(yF,M4r),e(yF,CX),e(CX,E4r),e(yF,y4r),e(K,w4r),e(K,wF),e(wF,m4e),e(m4e,A4r),e(wF,L4r),e(wF,MX),e(MX,B4r),e(wF,x4r),e(Mo,k4r),e(Mo,g4e),e(g4e,R4r),e(Mo,S4r),g(KA,Mo,null),b(c,dRe,u),b(c,Xc,u),e(Xc,AF),e(AF,h4e),g(ZA,h4e,null),e(Xc,P4r),e(Xc,p4e),e(p4e,$4r),b(c,cRe,u),b(c,Br,u),g(eL,Br,null),e(Br,I4r),e(Br,Vc),e(Vc,j4r),e(Vc,_4e),e(_4e,N4r),e(Vc,D4r),e(Vc,u4e),e(u4e,q4r),e(Vc,O4r),e(Br,G4r),e(Br,oL),e(oL,X4r),e(oL,b4e),e(b4e,V4r),e(oL,z4r),e(Br,W4r),e(Br,Mt),g(rL,Mt,null),e(Mt,Q4r),e(Mt,v4e),e(v4e,H4r),e(Mt,U4r),e(Mt,zc),e(zc,J4r),e(zc,T4e),e(T4e,Y4r),e(zc,K4r),e(zc,F4e),e(F4e,Z4r),e(zc,e1r),e(Mt,o1r),e(Mt,C4e),e(C4e,r1r),e(Mt,t1r),g(tL,Mt,null),e(Br,a1r),e(Br,Eo),g(aL,Eo,null),e(Eo,n1r),e(Eo,M4e),e(M4e,s1r),e(Eo,l1r),e(Eo,wn),e(wn,i1r),e(wn,E4e),e(E4e,d1r),e(wn,c1r),e(wn,y4e),e(y4e,f1r),e(wn,m1r),e(wn,w4e),e(w4e,g1r),e(wn,h1r),e(Eo,p1r),e(Eo,Z),e(Z,LF),e(LF,A4e),e(A4e,_1r),e(LF,u1r),e(LF,EX),e(EX,b1r),e(LF,v1r),e(Z,T1r),e(Z,BF),e(BF,L4e),e(L4e,F1r),e(BF,C1r),e(BF,yX),e(yX,M1r),e(BF,E1r),e(Z,y1r),e(Z,xF),e(xF,B4e),e(B4e,w1r),e(xF,A1r),e(xF,wX),e(wX,L1r),e(xF,B1r),e(Z,x1r),e(Z,kF),e(kF,x4e),e(x4e,k1r),e(kF,R1r),e(kF,AX),e(AX,S1r),e(kF,P1r),e(Z,$1r),e(Z,RF),e(RF,k4e),e(k4e,I1r),e(RF,j1r),e(RF,LX),e(LX,N1r),e(RF,D1r),e(Z,q1r),e(Z,SF),e(SF,R4e),e(R4e,O1r),e(SF,G1r),e(SF,BX),e(BX,X1r),e(SF,V1r),e(Z,z1r),e(Z,PF),e(PF,S4e),e(S4e,W1r),e(PF,Q1r),e(PF,xX),e(xX,H1r),e(PF,U1r),e(Z,J1r),e(Z,$F),e($F,P4e),e(P4e,Y1r),e($F,K1r),e($F,kX),e(kX,Z1r),e($F,ebr),e(Z,obr),e(Z,IF),e(IF,$4e),e($4e,rbr),e(IF,tbr),e(IF,RX),e(RX,abr),e(IF,nbr),e(Z,sbr),e(Z,jF),e(jF,I4e),e(I4e,lbr),e(jF,ibr),e(jF,SX),e(SX,dbr),e(jF,cbr),e(Z,fbr),e(Z,NF),e(NF,j4e),e(j4e,mbr),e(NF,gbr),e(NF,PX),e(PX,hbr),e(NF,pbr),e(Z,_br),e(Z,DF),e(DF,N4e),e(N4e,ubr),e(DF,bbr),e(DF,$X),e($X,vbr),e(DF,Tbr),e(Z,Fbr),e(Z,qF),e(qF,D4e),e(D4e,Cbr),e(qF,Mbr),e(qF,IX),e(IX,Ebr),e(qF,ybr),e(Z,wbr),e(Z,OF),e(OF,q4e),e(q4e,Abr),e(OF,Lbr),e(OF,jX),e(jX,Bbr),e(OF,xbr),e(Z,kbr),e(Z,GF),e(GF,O4e),e(O4e,Rbr),e(GF,Sbr),e(GF,NX),e(NX,Pbr),e(GF,$br),e(Z,Ibr),e(Z,XF),e(XF,G4e),e(G4e,jbr),e(XF,Nbr),e(XF,DX),e(DX,Dbr),e(XF,qbr),e(Z,Obr),e(Z,VF),e(VF,X4e),e(X4e,Gbr),e(VF,Xbr),e(VF,qX),e(qX,Vbr),e(VF,zbr),e(Z,Wbr),e(Z,zF),e(zF,V4e),e(V4e,Qbr),e(zF,Hbr),e(zF,OX),e(OX,Ubr),e(zF,Jbr),e(Z,Ybr),e(Z,WF),e(WF,z4e),e(z4e,Kbr),e(WF,Zbr),e(WF,GX),e(GX,e2r),e(WF,o2r),e(Eo,r2r),e(Eo,W4e),e(W4e,t2r),e(Eo,a2r),g(nL,Eo,null),b(c,fRe,u),b(c,Wc,u),e(Wc,QF),e(QF,Q4e),g(sL,Q4e,null),e(Wc,n2r),e(Wc,H4e),e(H4e,s2r),b(c,mRe,u),b(c,xr,u),g(lL,xr,null),e(xr,l2r),e(xr,Qc),e(Qc,i2r),e(Qc,U4e),e(U4e,d2r),e(Qc,c2r),e(Qc,J4e),e(J4e,f2r),e(Qc,m2r),e(xr,g2r),e(xr,iL),e(iL,h2r),e(iL,Y4e),e(Y4e,p2r),e(iL,_2r),e(xr,u2r),e(xr,Et),g(dL,Et,null),e(Et,b2r),e(Et,K4e),e(K4e,v2r),e(Et,T2r),e(Et,Hc),e(Hc,F2r),e(Hc,Z4e),e(Z4e,C2r),e(Hc,M2r),e(Hc,e1e),e(e1e,E2r),e(Hc,y2r),e(Et,w2r),e(Et,o1e),e(o1e,A2r),e(Et,L2r),g(cL,Et,null),e(xr,B2r),e(xr,yo),g(fL,yo,null),e(yo,x2r),e(yo,r1e),e(r1e,k2r),e(yo,R2r),e(yo,An),e(An,S2r),e(An,t1e),e(t1e,P2r),e(An,$2r),e(An,a1e),e(a1e,I2r),e(An,j2r),e(An,n1e),e(n1e,N2r),e(An,D2r),e(yo,q2r),e(yo,s1e),e(s1e,HF),e(HF,l1e),e(l1e,O2r),e(HF,G2r),e(HF,XX),e(XX,X2r),e(HF,V2r),e(yo,z2r),e(yo,i1e),e(i1e,W2r),e(yo,Q2r),g(mL,yo,null),b(c,gRe,u),b(c,Uc,u),e(Uc,UF),e(UF,d1e),g(gL,d1e,null),e(Uc,H2r),e(Uc,c1e),e(c1e,U2r),b(c,hRe,u),b(c,kr,u),g(hL,kr,null),e(kr,J2r),e(kr,Jc),e(Jc,Y2r),e(Jc,f1e),e(f1e,K2r),e(Jc,Z2r),e(Jc,m1e),e(m1e,evr),e(Jc,ovr),e(kr,rvr),e(kr,pL),e(pL,tvr),e(pL,g1e),e(g1e,avr),e(pL,nvr),e(kr,svr),e(kr,yt),g(_L,yt,null),e(yt,lvr),e(yt,h1e),e(h1e,ivr),e(yt,dvr),e(yt,Yc),e(Yc,cvr),e(Yc,p1e),e(p1e,fvr),e(Yc,mvr),e(Yc,_1e),e(_1e,gvr),e(Yc,hvr),e(yt,pvr),e(yt,u1e),e(u1e,_vr),e(yt,uvr),g(uL,yt,null),e(kr,bvr),e(kr,wo),g(bL,wo,null),e(wo,vvr),e(wo,b1e),e(b1e,Tvr),e(wo,Fvr),e(wo,Ln),e(Ln,Cvr),e(Ln,v1e),e(v1e,Mvr),e(Ln,Evr),e(Ln,T1e),e(T1e,yvr),e(Ln,wvr),e(Ln,F1e),e(F1e,Avr),e(Ln,Lvr),e(wo,Bvr),e(wo,C1e),e(C1e,JF),e(JF,M1e),e(M1e,xvr),e(JF,kvr),e(JF,VX),e(VX,Rvr),e(JF,Svr),e(wo,Pvr),e(wo,E1e),e(E1e,$vr),e(wo,Ivr),g(vL,wo,null),b(c,pRe,u),b(c,Kc,u),e(Kc,YF),e(YF,y1e),g(TL,y1e,null),e(Kc,jvr),e(Kc,w1e),e(w1e,Nvr),b(c,_Re,u),b(c,Rr,u),g(FL,Rr,null),e(Rr,Dvr),e(Rr,Zc),e(Zc,qvr),e(Zc,A1e),e(A1e,Ovr),e(Zc,Gvr),e(Zc,L1e),e(L1e,Xvr),e(Zc,Vvr),e(Rr,zvr),e(Rr,CL),e(CL,Wvr),e(CL,B1e),e(B1e,Qvr),e(CL,Hvr),e(Rr,Uvr),e(Rr,wt),g(ML,wt,null),e(wt,Jvr),e(wt,x1e),e(x1e,Yvr),e(wt,Kvr),e(wt,ef),e(ef,Zvr),e(ef,k1e),e(k1e,e6r),e(ef,o6r),e(ef,R1e),e(R1e,r6r),e(ef,t6r),e(wt,a6r),e(wt,S1e),e(S1e,n6r),e(wt,s6r),g(EL,wt,null),e(Rr,l6r),e(Rr,Ao),g(yL,Ao,null),e(Ao,i6r),e(Ao,P1e),e(P1e,d6r),e(Ao,c6r),e(Ao,Bn),e(Bn,f6r),e(Bn,$1e),e($1e,m6r),e(Bn,g6r),e(Bn,I1e),e(I1e,h6r),e(Bn,p6r),e(Bn,j1e),e(j1e,_6r),e(Bn,u6r),e(Ao,b6r),e(Ao,z),e(z,KF),e(KF,N1e),e(N1e,v6r),e(KF,T6r),e(KF,zX),e(zX,F6r),e(KF,C6r),e(z,M6r),e(z,ZF),e(ZF,D1e),e(D1e,E6r),e(ZF,y6r),e(ZF,WX),e(WX,w6r),e(ZF,A6r),e(z,L6r),e(z,eC),e(eC,q1e),e(q1e,B6r),e(eC,x6r),e(eC,QX),e(QX,k6r),e(eC,R6r),e(z,S6r),e(z,oC),e(oC,O1e),e(O1e,P6r),e(oC,$6r),e(oC,HX),e(HX,I6r),e(oC,j6r),e(z,N6r),e(z,rC),e(rC,G1e),e(G1e,D6r),e(rC,q6r),e(rC,UX),e(UX,O6r),e(rC,G6r),e(z,X6r),e(z,tC),e(tC,X1e),e(X1e,V6r),e(tC,z6r),e(tC,JX),e(JX,W6r),e(tC,Q6r),e(z,H6r),e(z,aC),e(aC,V1e),e(V1e,U6r),e(aC,J6r),e(aC,YX),e(YX,Y6r),e(aC,K6r),e(z,Z6r),e(z,nC),e(nC,z1e),e(z1e,e0r),e(nC,o0r),e(nC,KX),e(KX,r0r),e(nC,t0r),e(z,a0r),e(z,sC),e(sC,W1e),e(W1e,n0r),e(sC,s0r),e(sC,ZX),e(ZX,l0r),e(sC,i0r),e(z,d0r),e(z,lC),e(lC,Q1e),e(Q1e,c0r),e(lC,f0r),e(lC,eV),e(eV,m0r),e(lC,g0r),e(z,h0r),e(z,iC),e(iC,H1e),e(H1e,p0r),e(iC,_0r),e(iC,oV),e(oV,u0r),e(iC,b0r),e(z,v0r),e(z,dC),e(dC,U1e),e(U1e,T0r),e(dC,F0r),e(dC,rV),e(rV,C0r),e(dC,M0r),e(z,E0r),e(z,cC),e(cC,J1e),e(J1e,y0r),e(cC,w0r),e(cC,tV),e(tV,A0r),e(cC,L0r),e(z,B0r),e(z,fC),e(fC,Y1e),e(Y1e,x0r),e(fC,k0r),e(fC,aV),e(aV,R0r),e(fC,S0r),e(z,P0r),e(z,mC),e(mC,K1e),e(K1e,$0r),e(mC,I0r),e(mC,nV),e(nV,j0r),e(mC,N0r),e(z,D0r),e(z,gC),e(gC,Z1e),e(Z1e,q0r),e(gC,O0r),e(gC,sV),e(sV,G0r),e(gC,X0r),e(z,V0r),e(z,hC),e(hC,ebe),e(ebe,z0r),e(hC,W0r),e(hC,lV),e(lV,Q0r),e(hC,H0r),e(z,U0r),e(z,pC),e(pC,obe),e(obe,J0r),e(pC,Y0r),e(pC,iV),e(iV,K0r),e(pC,Z0r),e(z,eTr),e(z,_C),e(_C,rbe),e(rbe,oTr),e(_C,rTr),e(_C,dV),e(dV,tTr),e(_C,aTr),e(z,nTr),e(z,uC),e(uC,tbe),e(tbe,sTr),e(uC,lTr),e(uC,cV),e(cV,iTr),e(uC,dTr),e(z,cTr),e(z,bC),e(bC,abe),e(abe,fTr),e(bC,mTr),e(bC,fV),e(fV,gTr),e(bC,hTr),e(z,pTr),e(z,vC),e(vC,nbe),e(nbe,_Tr),e(vC,uTr),e(vC,mV),e(mV,bTr),e(vC,vTr),e(z,TTr),e(z,TC),e(TC,sbe),e(sbe,FTr),e(TC,CTr),e(TC,gV),e(gV,MTr),e(TC,ETr),e(z,yTr),e(z,FC),e(FC,lbe),e(lbe,wTr),e(FC,ATr),e(FC,hV),e(hV,LTr),e(FC,BTr),e(z,xTr),e(z,CC),e(CC,ibe),e(ibe,kTr),e(CC,RTr),e(CC,pV),e(pV,STr),e(CC,PTr),e(Ao,$Tr),e(Ao,dbe),e(dbe,ITr),e(Ao,jTr),g(wL,Ao,null),b(c,uRe,u),b(c,of,u),e(of,MC),e(MC,cbe),g(AL,cbe,null),e(of,NTr),e(of,fbe),e(fbe,DTr),b(c,bRe,u),b(c,Sr,u),g(LL,Sr,null),e(Sr,qTr),e(Sr,rf),e(rf,OTr),e(rf,mbe),e(mbe,GTr),e(rf,XTr),e(rf,gbe),e(gbe,VTr),e(rf,zTr),e(Sr,WTr),e(Sr,BL),e(BL,QTr),e(BL,hbe),e(hbe,HTr),e(BL,UTr),e(Sr,JTr),e(Sr,At),g(xL,At,null),e(At,YTr),e(At,pbe),e(pbe,KTr),e(At,ZTr),e(At,tf),e(tf,eFr),e(tf,_be),e(_be,oFr),e(tf,rFr),e(tf,ube),e(ube,tFr),e(tf,aFr),e(At,nFr),e(At,bbe),e(bbe,sFr),e(At,lFr),g(kL,At,null),e(Sr,iFr),e(Sr,Lo),g(RL,Lo,null),e(Lo,dFr),e(Lo,vbe),e(vbe,cFr),e(Lo,fFr),e(Lo,xn),e(xn,mFr),e(xn,Tbe),e(Tbe,gFr),e(xn,hFr),e(xn,Fbe),e(Fbe,pFr),e(xn,_Fr),e(xn,Cbe),e(Cbe,uFr),e(xn,bFr),e(Lo,vFr),e(Lo,ca),e(ca,EC),e(EC,Mbe),e(Mbe,TFr),e(EC,FFr),e(EC,_V),e(_V,CFr),e(EC,MFr),e(ca,EFr),e(ca,yC),e(yC,Ebe),e(Ebe,yFr),e(yC,wFr),e(yC,uV),e(uV,AFr),e(yC,LFr),e(ca,BFr),e(ca,wC),e(wC,ybe),e(ybe,xFr),e(wC,kFr),e(wC,bV),e(bV,RFr),e(wC,SFr),e(ca,PFr),e(ca,AC),e(AC,wbe),e(wbe,$Fr),e(AC,IFr),e(AC,vV),e(vV,jFr),e(AC,NFr),e(ca,DFr),e(ca,LC),e(LC,Abe),e(Abe,qFr),e(LC,OFr),e(LC,TV),e(TV,GFr),e(LC,XFr),e(Lo,VFr),e(Lo,Lbe),e(Lbe,zFr),e(Lo,WFr),g(SL,Lo,null),b(c,vRe,u),b(c,af,u),e(af,BC),e(BC,Bbe),g(PL,Bbe,null),e(af,QFr),e(af,xbe),e(xbe,HFr),b(c,TRe,u),b(c,Pr,u),g($L,Pr,null),e(Pr,UFr),e(Pr,nf),e(nf,JFr),e(nf,kbe),e(kbe,YFr),e(nf,KFr),e(nf,Rbe),e(Rbe,ZFr),e(nf,eCr),e(Pr,oCr),e(Pr,IL),e(IL,rCr),e(IL,Sbe),e(Sbe,tCr),e(IL,aCr),e(Pr,nCr),e(Pr,Lt),g(jL,Lt,null),e(Lt,sCr),e(Lt,Pbe),e(Pbe,lCr),e(Lt,iCr),e(Lt,sf),e(sf,dCr),e(sf,$be),e($be,cCr),e(sf,fCr),e(sf,Ibe),e(Ibe,mCr),e(sf,gCr),e(Lt,hCr),e(Lt,jbe),e(jbe,pCr),e(Lt,_Cr),g(NL,Lt,null),e(Pr,uCr),e(Pr,Bo),g(DL,Bo,null),e(Bo,bCr),e(Bo,Nbe),e(Nbe,vCr),e(Bo,TCr),e(Bo,kn),e(kn,FCr),e(kn,Dbe),e(Dbe,CCr),e(kn,MCr),e(kn,qbe),e(qbe,ECr),e(kn,yCr),e(kn,Obe),e(Obe,wCr),e(kn,ACr),e(Bo,LCr),e(Bo,ce),e(ce,xC),e(xC,Gbe),e(Gbe,BCr),e(xC,xCr),e(xC,FV),e(FV,kCr),e(xC,RCr),e(ce,SCr),e(ce,kC),e(kC,Xbe),e(Xbe,PCr),e(kC,$Cr),e(kC,CV),e(CV,ICr),e(kC,jCr),e(ce,NCr),e(ce,RC),e(RC,Vbe),e(Vbe,DCr),e(RC,qCr),e(RC,MV),e(MV,OCr),e(RC,GCr),e(ce,XCr),e(ce,SC),e(SC,zbe),e(zbe,VCr),e(SC,zCr),e(SC,EV),e(EV,WCr),e(SC,QCr),e(ce,HCr),e(ce,PC),e(PC,Wbe),e(Wbe,UCr),e(PC,JCr),e(PC,yV),e(yV,YCr),e(PC,KCr),e(ce,ZCr),e(ce,$C),e($C,Qbe),e(Qbe,eMr),e($C,oMr),e($C,wV),e(wV,rMr),e($C,tMr),e(ce,aMr),e(ce,IC),e(IC,Hbe),e(Hbe,nMr),e(IC,sMr),e(IC,AV),e(AV,lMr),e(IC,iMr),e(ce,dMr),e(ce,jC),e(jC,Ube),e(Ube,cMr),e(jC,fMr),e(jC,LV),e(LV,mMr),e(jC,gMr),e(ce,hMr),e(ce,NC),e(NC,Jbe),e(Jbe,pMr),e(NC,_Mr),e(NC,BV),e(BV,uMr),e(NC,bMr),e(ce,vMr),e(ce,DC),e(DC,Ybe),e(Ybe,TMr),e(DC,FMr),e(DC,xV),e(xV,CMr),e(DC,MMr),e(ce,EMr),e(ce,qC),e(qC,Kbe),e(Kbe,yMr),e(qC,wMr),e(qC,kV),e(kV,AMr),e(qC,LMr),e(ce,BMr),e(ce,OC),e(OC,Zbe),e(Zbe,xMr),e(OC,kMr),e(OC,RV),e(RV,RMr),e(OC,SMr),e(Bo,PMr),e(Bo,e2e),e(e2e,$Mr),e(Bo,IMr),g(qL,Bo,null),b(c,FRe,u),b(c,lf,u),e(lf,GC),e(GC,o2e),g(OL,o2e,null),e(lf,jMr),e(lf,r2e),e(r2e,NMr),b(c,CRe,u),b(c,$r,u),g(GL,$r,null),e($r,DMr),e($r,df),e(df,qMr),e(df,t2e),e(t2e,OMr),e(df,GMr),e(df,a2e),e(a2e,XMr),e(df,VMr),e($r,zMr),e($r,XL),e(XL,WMr),e(XL,n2e),e(n2e,QMr),e(XL,HMr),e($r,UMr),e($r,Bt),g(VL,Bt,null),e(Bt,JMr),e(Bt,s2e),e(s2e,YMr),e(Bt,KMr),e(Bt,cf),e(cf,ZMr),e(cf,l2e),e(l2e,eEr),e(cf,oEr),e(cf,i2e),e(i2e,rEr),e(cf,tEr),e(Bt,aEr),e(Bt,d2e),e(d2e,nEr),e(Bt,sEr),g(zL,Bt,null),e($r,lEr),e($r,xo),g(WL,xo,null),e(xo,iEr),e(xo,c2e),e(c2e,dEr),e(xo,cEr),e(xo,Rn),e(Rn,fEr),e(Rn,f2e),e(f2e,mEr),e(Rn,gEr),e(Rn,m2e),e(m2e,hEr),e(Rn,pEr),e(Rn,g2e),e(g2e,_Er),e(Rn,uEr),e(xo,bEr),e(xo,be),e(be,XC),e(XC,h2e),e(h2e,vEr),e(XC,TEr),e(XC,SV),e(SV,FEr),e(XC,CEr),e(be,MEr),e(be,VC),e(VC,p2e),e(p2e,EEr),e(VC,yEr),e(VC,PV),e(PV,wEr),e(VC,AEr),e(be,LEr),e(be,zC),e(zC,_2e),e(_2e,BEr),e(zC,xEr),e(zC,$V),e($V,kEr),e(zC,REr),e(be,SEr),e(be,WC),e(WC,u2e),e(u2e,PEr),e(WC,$Er),e(WC,IV),e(IV,IEr),e(WC,jEr),e(be,NEr),e(be,QC),e(QC,b2e),e(b2e,DEr),e(QC,qEr),e(QC,jV),e(jV,OEr),e(QC,GEr),e(be,XEr),e(be,HC),e(HC,v2e),e(v2e,VEr),e(HC,zEr),e(HC,NV),e(NV,WEr),e(HC,QEr),e(be,HEr),e(be,UC),e(UC,T2e),e(T2e,UEr),e(UC,JEr),e(UC,DV),e(DV,YEr),e(UC,KEr),e(be,ZEr),e(be,JC),e(JC,F2e),e(F2e,e3r),e(JC,o3r),e(JC,qV),e(qV,r3r),e(JC,t3r),e(be,a3r),e(be,YC),e(YC,C2e),e(C2e,n3r),e(YC,s3r),e(YC,OV),e(OV,l3r),e(YC,i3r),e(be,d3r),e(be,KC),e(KC,M2e),e(M2e,c3r),e(KC,f3r),e(KC,GV),e(GV,m3r),e(KC,g3r),e(xo,h3r),e(xo,E2e),e(E2e,p3r),e(xo,_3r),g(QL,xo,null),b(c,MRe,u),b(c,ff,u),e(ff,ZC),e(ZC,y2e),g(HL,y2e,null),e(ff,u3r),e(ff,w2e),e(w2e,b3r),b(c,ERe,u),b(c,Ir,u),g(UL,Ir,null),e(Ir,v3r),e(Ir,mf),e(mf,T3r),e(mf,A2e),e(A2e,F3r),e(mf,C3r),e(mf,L2e),e(L2e,M3r),e(mf,E3r),e(Ir,y3r),e(Ir,JL),e(JL,w3r),e(JL,B2e),e(B2e,A3r),e(JL,L3r),e(Ir,B3r),e(Ir,xt),g(YL,xt,null),e(xt,x3r),e(xt,x2e),e(x2e,k3r),e(xt,R3r),e(xt,gf),e(gf,S3r),e(gf,k2e),e(k2e,P3r),e(gf,$3r),e(gf,R2e),e(R2e,I3r),e(gf,j3r),e(xt,N3r),e(xt,S2e),e(S2e,D3r),e(xt,q3r),g(KL,xt,null),e(Ir,O3r),e(Ir,ko),g(ZL,ko,null),e(ko,G3r),e(ko,P2e),e(P2e,X3r),e(ko,V3r),e(ko,Sn),e(Sn,z3r),e(Sn,$2e),e($2e,W3r),e(Sn,Q3r),e(Sn,I2e),e(I2e,H3r),e(Sn,U3r),e(Sn,j2e),e(j2e,J3r),e(Sn,Y3r),e(ko,K3r),e(ko,Ee),e(Ee,eM),e(eM,N2e),e(N2e,Z3r),e(eM,e5r),e(eM,XV),e(XV,o5r),e(eM,r5r),e(Ee,t5r),e(Ee,oM),e(oM,D2e),e(D2e,a5r),e(oM,n5r),e(oM,VV),e(VV,s5r),e(oM,l5r),e(Ee,i5r),e(Ee,rM),e(rM,q2e),e(q2e,d5r),e(rM,c5r),e(rM,zV),e(zV,f5r),e(rM,m5r),e(Ee,g5r),e(Ee,tM),e(tM,O2e),e(O2e,h5r),e(tM,p5r),e(tM,WV),e(WV,_5r),e(tM,u5r),e(Ee,b5r),e(Ee,aM),e(aM,G2e),e(G2e,v5r),e(aM,T5r),e(aM,QV),e(QV,F5r),e(aM,C5r),e(Ee,M5r),e(Ee,nM),e(nM,X2e),e(X2e,E5r),e(nM,y5r),e(nM,HV),e(HV,w5r),e(nM,A5r),e(Ee,L5r),e(Ee,sM),e(sM,V2e),e(V2e,B5r),e(sM,x5r),e(sM,UV),e(UV,k5r),e(sM,R5r),e(Ee,S5r),e(Ee,lM),e(lM,z2e),e(z2e,P5r),e(lM,$5r),e(lM,JV),e(JV,I5r),e(lM,j5r),e(Ee,N5r),e(Ee,iM),e(iM,W2e),e(W2e,D5r),e(iM,q5r),e(iM,YV),e(YV,O5r),e(iM,G5r),e(ko,X5r),e(ko,Q2e),e(Q2e,V5r),e(ko,z5r),g(e7,ko,null),b(c,yRe,u),b(c,hf,u),e(hf,dM),e(dM,H2e),g(o7,H2e,null),e(hf,W5r),e(hf,U2e),e(U2e,Q5r),b(c,wRe,u),b(c,jr,u),g(r7,jr,null),e(jr,H5r),e(jr,pf),e(pf,U5r),e(pf,J2e),e(J2e,J5r),e(pf,Y5r),e(pf,Y2e),e(Y2e,K5r),e(pf,Z5r),e(jr,eyr),e(jr,t7),e(t7,oyr),e(t7,K2e),e(K2e,ryr),e(t7,tyr),e(jr,ayr),e(jr,kt),g(a7,kt,null),e(kt,nyr),e(kt,Z2e),e(Z2e,syr),e(kt,lyr),e(kt,_f),e(_f,iyr),e(_f,eve),e(eve,dyr),e(_f,cyr),e(_f,ove),e(ove,fyr),e(_f,myr),e(kt,gyr),e(kt,rve),e(rve,hyr),e(kt,pyr),g(n7,kt,null),e(jr,_yr),e(jr,Ro),g(s7,Ro,null),e(Ro,uyr),e(Ro,tve),e(tve,byr),e(Ro,vyr),e(Ro,Pn),e(Pn,Tyr),e(Pn,ave),e(ave,Fyr),e(Pn,Cyr),e(Pn,nve),e(nve,Myr),e(Pn,Eyr),e(Pn,sve),e(sve,yyr),e(Pn,wyr),e(Ro,Ayr),e(Ro,ve),e(ve,cM),e(cM,lve),e(lve,Lyr),e(cM,Byr),e(cM,KV),e(KV,xyr),e(cM,kyr),e(ve,Ryr),e(ve,fM),e(fM,ive),e(ive,Syr),e(fM,Pyr),e(fM,ZV),e(ZV,$yr),e(fM,Iyr),e(ve,jyr),e(ve,mM),e(mM,dve),e(dve,Nyr),e(mM,Dyr),e(mM,ez),e(ez,qyr),e(mM,Oyr),e(ve,Gyr),e(ve,gM),e(gM,cve),e(cve,Xyr),e(gM,Vyr),e(gM,oz),e(oz,zyr),e(gM,Wyr),e(ve,Qyr),e(ve,hM),e(hM,fve),e(fve,Hyr),e(hM,Uyr),e(hM,rz),e(rz,Jyr),e(hM,Yyr),e(ve,Kyr),e(ve,pM),e(pM,mve),e(mve,Zyr),e(pM,ewr),e(pM,tz),e(tz,owr),e(pM,rwr),e(ve,twr),e(ve,_M),e(_M,gve),e(gve,awr),e(_M,nwr),e(_M,az),e(az,swr),e(_M,lwr),e(ve,iwr),e(ve,uM),e(uM,hve),e(hve,dwr),e(uM,cwr),e(uM,nz),e(nz,fwr),e(uM,mwr),e(ve,gwr),e(ve,bM),e(bM,pve),e(pve,hwr),e(bM,pwr),e(bM,sz),e(sz,_wr),e(bM,uwr),e(ve,bwr),e(ve,vM),e(vM,_ve),e(_ve,vwr),e(vM,Twr),e(vM,lz),e(lz,Fwr),e(vM,Cwr),e(Ro,Mwr),e(Ro,uve),e(uve,Ewr),e(Ro,ywr),g(l7,Ro,null),b(c,ARe,u),b(c,uf,u),e(uf,TM),e(TM,bve),g(i7,bve,null),e(uf,wwr),e(uf,vve),e(vve,Awr),b(c,LRe,u),b(c,Nr,u),g(d7,Nr,null),e(Nr,Lwr),e(Nr,bf),e(bf,Bwr),e(bf,Tve),e(Tve,xwr),e(bf,kwr),e(bf,Fve),e(Fve,Rwr),e(bf,Swr),e(Nr,Pwr),e(Nr,c7),e(c7,$wr),e(c7,Cve),e(Cve,Iwr),e(c7,jwr),e(Nr,Nwr),e(Nr,Rt),g(f7,Rt,null),e(Rt,Dwr),e(Rt,Mve),e(Mve,qwr),e(Rt,Owr),e(Rt,vf),e(vf,Gwr),e(vf,Eve),e(Eve,Xwr),e(vf,Vwr),e(vf,yve),e(yve,zwr),e(vf,Wwr),e(Rt,Qwr),e(Rt,wve),e(wve,Hwr),e(Rt,Uwr),g(m7,Rt,null),e(Nr,Jwr),e(Nr,So),g(g7,So,null),e(So,Ywr),e(So,Ave),e(Ave,Kwr),e(So,Zwr),e(So,$n),e($n,eAr),e($n,Lve),e(Lve,oAr),e($n,rAr),e($n,Bve),e(Bve,tAr),e($n,aAr),e($n,xve),e(xve,nAr),e($n,sAr),e(So,lAr),e(So,Te),e(Te,FM),e(FM,kve),e(kve,iAr),e(FM,dAr),e(FM,iz),e(iz,cAr),e(FM,fAr),e(Te,mAr),e(Te,CM),e(CM,Rve),e(Rve,gAr),e(CM,hAr),e(CM,dz),e(dz,pAr),e(CM,_Ar),e(Te,uAr),e(Te,MM),e(MM,Sve),e(Sve,bAr),e(MM,vAr),e(MM,cz),e(cz,TAr),e(MM,FAr),e(Te,CAr),e(Te,EM),e(EM,Pve),e(Pve,MAr),e(EM,EAr),e(EM,fz),e(fz,yAr),e(EM,wAr),e(Te,AAr),e(Te,yM),e(yM,$ve),e($ve,LAr),e(yM,BAr),e(yM,mz),e(mz,xAr),e(yM,kAr),e(Te,RAr),e(Te,wM),e(wM,Ive),e(Ive,SAr),e(wM,PAr),e(wM,gz),e(gz,$Ar),e(wM,IAr),e(Te,jAr),e(Te,AM),e(AM,jve),e(jve,NAr),e(AM,DAr),e(AM,hz),e(hz,qAr),e(AM,OAr),e(Te,GAr),e(Te,LM),e(LM,Nve),e(Nve,XAr),e(LM,VAr),e(LM,pz),e(pz,zAr),e(LM,WAr),e(Te,QAr),e(Te,BM),e(BM,Dve),e(Dve,HAr),e(BM,UAr),e(BM,_z),e(_z,JAr),e(BM,YAr),e(Te,KAr),e(Te,xM),e(xM,qve),e(qve,ZAr),e(xM,eLr),e(xM,uz),e(uz,oLr),e(xM,rLr),e(So,tLr),e(So,Ove),e(Ove,aLr),e(So,nLr),g(h7,So,null),b(c,BRe,u),b(c,Tf,u),e(Tf,kM),e(kM,Gve),g(p7,Gve,null),e(Tf,sLr),e(Tf,Xve),e(Xve,lLr),b(c,xRe,u),b(c,Dr,u),g(_7,Dr,null),e(Dr,iLr),e(Dr,Ff),e(Ff,dLr),e(Ff,Vve),e(Vve,cLr),e(Ff,fLr),e(Ff,zve),e(zve,mLr),e(Ff,gLr),e(Dr,hLr),e(Dr,u7),e(u7,pLr),e(u7,Wve),e(Wve,_Lr),e(u7,uLr),e(Dr,bLr),e(Dr,St),g(b7,St,null),e(St,vLr),e(St,Qve),e(Qve,TLr),e(St,FLr),e(St,Cf),e(Cf,CLr),e(Cf,Hve),e(Hve,MLr),e(Cf,ELr),e(Cf,Uve),e(Uve,yLr),e(Cf,wLr),e(St,ALr),e(St,Jve),e(Jve,LLr),e(St,BLr),g(v7,St,null),e(Dr,xLr),e(Dr,Po),g(T7,Po,null),e(Po,kLr),e(Po,Yve),e(Yve,RLr),e(Po,SLr),e(Po,In),e(In,PLr),e(In,Kve),e(Kve,$Lr),e(In,ILr),e(In,Zve),e(Zve,jLr),e(In,NLr),e(In,e6e),e(e6e,DLr),e(In,qLr),e(Po,OLr),e(Po,Se),e(Se,RM),e(RM,o6e),e(o6e,GLr),e(RM,XLr),e(RM,bz),e(bz,VLr),e(RM,zLr),e(Se,WLr),e(Se,SM),e(SM,r6e),e(r6e,QLr),e(SM,HLr),e(SM,vz),e(vz,ULr),e(SM,JLr),e(Se,YLr),e(Se,PM),e(PM,t6e),e(t6e,KLr),e(PM,ZLr),e(PM,Tz),e(Tz,e7r),e(PM,o7r),e(Se,r7r),e(Se,$M),e($M,a6e),e(a6e,t7r),e($M,a7r),e($M,Fz),e(Fz,n7r),e($M,s7r),e(Se,l7r),e(Se,IM),e(IM,n6e),e(n6e,i7r),e(IM,d7r),e(IM,Cz),e(Cz,c7r),e(IM,f7r),e(Se,m7r),e(Se,jM),e(jM,s6e),e(s6e,g7r),e(jM,h7r),e(jM,Mz),e(Mz,p7r),e(jM,_7r),e(Se,u7r),e(Se,NM),e(NM,l6e),e(l6e,b7r),e(NM,v7r),e(NM,Ez),e(Ez,T7r),e(NM,F7r),e(Se,C7r),e(Se,DM),e(DM,i6e),e(i6e,M7r),e(DM,E7r),e(DM,yz),e(yz,y7r),e(DM,w7r),e(Po,A7r),e(Po,d6e),e(d6e,L7r),e(Po,B7r),g(F7,Po,null),b(c,kRe,u),b(c,Mf,u),e(Mf,qM),e(qM,c6e),g(C7,c6e,null),e(Mf,x7r),e(Mf,f6e),e(f6e,k7r),b(c,RRe,u),b(c,qr,u),g(M7,qr,null),e(qr,R7r),e(qr,Ef),e(Ef,S7r),e(Ef,m6e),e(m6e,P7r),e(Ef,$7r),e(Ef,g6e),e(g6e,I7r),e(Ef,j7r),e(qr,N7r),e(qr,E7),e(E7,D7r),e(E7,h6e),e(h6e,q7r),e(E7,O7r),e(qr,G7r),e(qr,Pt),g(y7,Pt,null),e(Pt,X7r),e(Pt,p6e),e(p6e,V7r),e(Pt,z7r),e(Pt,yf),e(yf,W7r),e(yf,_6e),e(_6e,Q7r),e(yf,H7r),e(yf,u6e),e(u6e,U7r),e(yf,J7r),e(Pt,Y7r),e(Pt,b6e),e(b6e,K7r),e(Pt,Z7r),g(w7,Pt,null),e(qr,e8r),e(qr,$o),g(A7,$o,null),e($o,o8r),e($o,v6e),e(v6e,r8r),e($o,t8r),e($o,jn),e(jn,a8r),e(jn,T6e),e(T6e,n8r),e(jn,s8r),e(jn,F6e),e(F6e,l8r),e(jn,i8r),e(jn,C6e),e(C6e,d8r),e(jn,c8r),e($o,f8r),e($o,Pe),e(Pe,OM),e(OM,M6e),e(M6e,m8r),e(OM,g8r),e(OM,wz),e(wz,h8r),e(OM,p8r),e(Pe,_8r),e(Pe,GM),e(GM,E6e),e(E6e,u8r),e(GM,b8r),e(GM,Az),e(Az,v8r),e(GM,T8r),e(Pe,F8r),e(Pe,XM),e(XM,y6e),e(y6e,C8r),e(XM,M8r),e(XM,Lz),e(Lz,E8r),e(XM,y8r),e(Pe,w8r),e(Pe,VM),e(VM,w6e),e(w6e,A8r),e(VM,L8r),e(VM,Bz),e(Bz,B8r),e(VM,x8r),e(Pe,k8r),e(Pe,zM),e(zM,A6e),e(A6e,R8r),e(zM,S8r),e(zM,xz),e(xz,P8r),e(zM,$8r),e(Pe,I8r),e(Pe,WM),e(WM,L6e),e(L6e,j8r),e(WM,N8r),e(WM,kz),e(kz,D8r),e(WM,q8r),e(Pe,O8r),e(Pe,QM),e(QM,B6e),e(B6e,G8r),e(QM,X8r),e(QM,Rz),e(Rz,V8r),e(QM,z8r),e(Pe,W8r),e(Pe,HM),e(HM,x6e),e(x6e,Q8r),e(HM,H8r),e(HM,Sz),e(Sz,U8r),e(HM,J8r),e($o,Y8r),e($o,k6e),e(k6e,K8r),e($o,Z8r),g(L7,$o,null),b(c,SRe,u),b(c,wf,u),e(wf,UM),e(UM,R6e),g(B7,R6e,null),e(wf,e9r),e(wf,S6e),e(S6e,o9r),b(c,PRe,u),b(c,Or,u),g(x7,Or,null),e(Or,r9r),e(Or,Af),e(Af,t9r),e(Af,P6e),e(P6e,a9r),e(Af,n9r),e(Af,$6e),e($6e,s9r),e(Af,l9r),e(Or,i9r),e(Or,k7),e(k7,d9r),e(k7,I6e),e(I6e,c9r),e(k7,f9r),e(Or,m9r),e(Or,$t),g(R7,$t,null),e($t,g9r),e($t,j6e),e(j6e,h9r),e($t,p9r),e($t,Lf),e(Lf,_9r),e(Lf,N6e),e(N6e,u9r),e(Lf,b9r),e(Lf,D6e),e(D6e,v9r),e(Lf,T9r),e($t,F9r),e($t,q6e),e(q6e,C9r),e($t,M9r),g(S7,$t,null),e(Or,E9r),e(Or,Io),g(P7,Io,null),e(Io,y9r),e(Io,O6e),e(O6e,w9r),e(Io,A9r),e(Io,Nn),e(Nn,L9r),e(Nn,G6e),e(G6e,B9r),e(Nn,x9r),e(Nn,X6e),e(X6e,k9r),e(Nn,R9r),e(Nn,V6e),e(V6e,S9r),e(Nn,P9r),e(Io,$9r),e(Io,z6e),e(z6e,JM),e(JM,W6e),e(W6e,I9r),e(JM,j9r),e(JM,Pz),e(Pz,N9r),e(JM,D9r),e(Io,q9r),e(Io,Q6e),e(Q6e,O9r),e(Io,G9r),g($7,Io,null),b(c,$Re,u),b(c,Bf,u),e(Bf,YM),e(YM,H6e),g(I7,H6e,null),e(Bf,X9r),e(Bf,U6e),e(U6e,V9r),b(c,IRe,u),b(c,Gr,u),g(j7,Gr,null),e(Gr,z9r),e(Gr,xf),e(xf,W9r),e(xf,J6e),e(J6e,Q9r),e(xf,H9r),e(xf,Y6e),e(Y6e,U9r),e(xf,J9r),e(Gr,Y9r),e(Gr,N7),e(N7,K9r),e(N7,K6e),e(K6e,Z9r),e(N7,eBr),e(Gr,oBr),e(Gr,It),g(D7,It,null),e(It,rBr),e(It,Z6e),e(Z6e,tBr),e(It,aBr),e(It,kf),e(kf,nBr),e(kf,e0e),e(e0e,sBr),e(kf,lBr),e(kf,o0e),e(o0e,iBr),e(kf,dBr),e(It,cBr),e(It,r0e),e(r0e,fBr),e(It,mBr),g(q7,It,null),e(Gr,gBr),e(Gr,jo),g(O7,jo,null),e(jo,hBr),e(jo,t0e),e(t0e,pBr),e(jo,_Br),e(jo,Dn),e(Dn,uBr),e(Dn,a0e),e(a0e,bBr),e(Dn,vBr),e(Dn,n0e),e(n0e,TBr),e(Dn,FBr),e(Dn,s0e),e(s0e,CBr),e(Dn,MBr),e(jo,EBr),e(jo,G7),e(G7,KM),e(KM,l0e),e(l0e,yBr),e(KM,wBr),e(KM,$z),e($z,ABr),e(KM,LBr),e(G7,BBr),e(G7,ZM),e(ZM,i0e),e(i0e,xBr),e(ZM,kBr),e(ZM,Iz),e(Iz,RBr),e(ZM,SBr),e(jo,PBr),e(jo,d0e),e(d0e,$Br),e(jo,IBr),g(X7,jo,null),b(c,jRe,u),b(c,Rf,u),e(Rf,eE),e(eE,c0e),g(V7,c0e,null),e(Rf,jBr),e(Rf,f0e),e(f0e,NBr),b(c,NRe,u),b(c,Xr,u),g(z7,Xr,null),e(Xr,DBr),e(Xr,Sf),e(Sf,qBr),e(Sf,m0e),e(m0e,OBr),e(Sf,GBr),e(Sf,g0e),e(g0e,XBr),e(Sf,VBr),e(Xr,zBr),e(Xr,W7),e(W7,WBr),e(W7,h0e),e(h0e,QBr),e(W7,HBr),e(Xr,UBr),e(Xr,jt),g(Q7,jt,null),e(jt,JBr),e(jt,p0e),e(p0e,YBr),e(jt,KBr),e(jt,Pf),e(Pf,ZBr),e(Pf,_0e),e(_0e,exr),e(Pf,oxr),e(Pf,u0e),e(u0e,rxr),e(Pf,txr),e(jt,axr),e(jt,b0e),e(b0e,nxr),e(jt,sxr),g(H7,jt,null),e(Xr,lxr),e(Xr,No),g(U7,No,null),e(No,ixr),e(No,v0e),e(v0e,dxr),e(No,cxr),e(No,qn),e(qn,fxr),e(qn,T0e),e(T0e,mxr),e(qn,gxr),e(qn,F0e),e(F0e,hxr),e(qn,pxr),e(qn,C0e),e(C0e,_xr),e(qn,uxr),e(No,bxr),e(No,M0e),e(M0e,oE),e(oE,E0e),e(E0e,vxr),e(oE,Txr),e(oE,jz),e(jz,Fxr),e(oE,Cxr),e(No,Mxr),e(No,y0e),e(y0e,Exr),e(No,yxr),g(J7,No,null),DRe=!0},p(c,[u]){const Y7={};u&2&&(Y7.$$scope={dirty:u,ctx:c}),Of.$set(Y7);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:c}),Lh.$set(w0e);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:c}),Dh.$set(A0e)},i(c){DRe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(Of.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(y3.$$.fragment,c),h(Lh.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(R3.$$.fragment,c),h(Dh.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(N3.$$.fragment,c),h(D3.$$.fragment,c),h(q3.$$.fragment,c),h(O3.$$.fragment,c),h(G3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(F5.$$.fragment,c),h(C5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(L5.$$.fragment,c),h(B5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(S5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(j5.$$.fragment,c),h(N5.$$.fragment,c),h(q5.$$.fragment,c),h(O5.$$.fragment,c),h(G5.$$.fragment,c),h(X5.$$.fragment,c),h(V5.$$.fragment,c),h(z5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Gw.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(jL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(qL.$$.fragment,c),h(OL.$$.fragment,c),h(GL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(v7.$$.fragment,c),h(T7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(y7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(R7.$$.fragment,c),h(S7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(j7.$$.fragment,c),h(D7.$$.fragment,c),h(q7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),h(Q7.$$.fragment,c),h(H7.$$.fragment,c),h(U7.$$.fragment,c),h(J7.$$.fragment,c),DRe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(Of.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(C3.$$.fragment,c),p(y3.$$.fragment,c),p(Lh.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(B3.$$.fragment,c),p(R3.$$.fragment,c),p(Dh.$$.fragment,c),p(S3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(N3.$$.fragment,c),p(D3.$$.fragment,c),p(q3.$$.fragment,c),p(O3.$$.fragment,c),p(G3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(F5.$$.fragment,c),p(C5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(L5.$$.fragment,c),p(B5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(S5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(j5.$$.fragment,c),p(N5.$$.fragment,c),p(q5.$$.fragment,c),p(O5.$$.fragment,c),p(G5.$$.fragment,c),p(X5.$$.fragment,c),p(V5.$$.fragment,c),p(z5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(jy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(qw.$$.fragment,c),p(Ow.$$.fragment,c),p(Gw.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(jL.$$.fragment,c),p(NL.$$.fragment,c),p(DL.$$.fragment,c),p(qL.$$.fragment,c),p(OL.$$.fragment,c),p(GL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(b7.$$.fragment,c),p(v7.$$.fragment,c),p(T7.$$.fragment,c),p(F7.$$.fragment,c),p(C7.$$.fragment,c),p(M7.$$.fragment,c),p(y7.$$.fragment,c),p(w7.$$.fragment,c),p(A7.$$.fragment,c),p(L7.$$.fragment,c),p(B7.$$.fragment,c),p(x7.$$.fragment,c),p(R7.$$.fragment,c),p(S7.$$.fragment,c),p(P7.$$.fragment,c),p($7.$$.fragment,c),p(I7.$$.fragment,c),p(j7.$$.fragment,c),p(D7.$$.fragment,c),p(q7.$$.fragment,c),p(O7.$$.fragment,c),p(X7.$$.fragment,c),p(V7.$$.fragment,c),p(z7.$$.fragment,c),p(Q7.$$.fragment,c),p(H7.$$.fragment,c),p(U7.$$.fragment,c),p(J7.$$.fragment,c),DRe=!1},d(c){t(J),c&&t($e),c&&t(de),_(fe),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(Nf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Oa),c&&t(Nxe),c&&t(Vi),_(n3),c&&t(Dxe),c&&t(zn),c&&t(qxe),_(s3,c),c&&t(Oxe),c&&t(Z8),c&&t(Gxe),_(Of,c),c&&t(Xxe),c&&t(zi),_(l3),c&&t(Vxe),c&&t(Wo),_(i3),_(f3),_(m3),_(g3),c&&t(zxe),c&&t(Qi),_(h3),c&&t(Wxe),c&&t(Qo),_(p3),_(b3),_(v3),_(T3),c&&t(Qxe),c&&t(Hi),_(F3),c&&t(Hxe),c&&t(Ho),_(C3),_(y3),_(Lh),_(w3),_(A3),c&&t(Uxe),c&&t(Ui),_(L3),c&&t(Jxe),c&&t(Uo),_(B3),_(R3),_(Dh),_(S3),_(P3),c&&t(Yxe),c&&t(Yi),_($3),c&&t(Kxe),c&&t(Jo),_(I3),_(N3),_(D3),_(q3),_(O3),c&&t(Zxe),c&&t(ed),_(G3),c&&t(eke),c&&t(Yo),_(X3),_(z3),_(W3),_(Q3),_(H3),c&&t(oke),c&&t(td),_(U3),c&&t(rke),c&&t(Ko),_(J3),_(K3),_(Z3),_(e5),_(o5),c&&t(tke),c&&t(sd),_(r5),c&&t(ake),c&&t(Zo),_(t5),_(n5),_(s5),_(l5),_(i5),c&&t(nke),c&&t(dd),_(d5),c&&t(ske),c&&t(er),_(c5),_(m5),_(g5),_(h5),_(p5),c&&t(lke),c&&t(md),_(_5),c&&t(ike),c&&t(or),_(u5),_(v5),_(T5),_(F5),_(C5),c&&t(dke),c&&t(pd),_(M5),c&&t(cke),c&&t(rr),_(E5),_(w5),_(A5),_(L5),_(B5),c&&t(fke),c&&t(bd),_(x5),c&&t(mke),c&&t(tr),_(k5),_(S5),_(P5),_($5),_(I5),c&&t(gke),c&&t(Fd),_(j5),c&&t(hke),c&&t(ar),_(N5),_(q5),_(O5),_(G5),_(X5),c&&t(pke),c&&t(Ed),_(V5),c&&t(_ke),c&&t(nr),_(z5),_(Q5),_(H5),_(U5),_(J5),c&&t(uke),c&&t(Ad),_(Y5),c&&t(bke),c&&t(sr),_(K5),_(ey),_(oy),_(ry),_(ty),c&&t(vke),c&&t(xd),_(ay),c&&t(Tke),c&&t(lr),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(Fke),c&&t(Sd),_(fy),c&&t(Cke),c&&t(ir),_(my),_(hy),_(py),_(_y),_(uy),c&&t(Mke),c&&t(Id),_(by),c&&t(Eke),c&&t(dr),_(vy),_(Fy),_(Cy),_(My),_(Ey),c&&t(yke),c&&t(Dd),_(yy),c&&t(wke),c&&t(cr),_(wy),_(Ly),_(By),_(xy),_(ky),c&&t(Ake),c&&t(Gd),_(Ry),c&&t(Lke),c&&t(fr),_(Sy),_($y),_(Iy),_(jy),_(Ny),c&&t(Bke),c&&t(zd),_(Dy),c&&t(xke),c&&t(mr),_(qy),_(Gy),_(Xy),_(Vy),_(Wy),c&&t(kke),c&&t(Hd),_(Qy),c&&t(Rke),c&&t(gr),_(Hy),_(Jy),_(Yy),_(Ky),_(Zy),c&&t(Ske),c&&t(Yd),_(ew),c&&t(Pke),c&&t(hr),_(ow),_(tw),_(aw),_(nw),_(sw),c&&t($ke),c&&t(oc),_(lw),c&&t(Ike),c&&t(pr),_(iw),_(cw),_(fw),_(mw),_(gw),c&&t(jke),c&&t(ac),_(hw),c&&t(Nke),c&&t(_r),_(pw),_(uw),_(bw),_(vw),_(Tw),c&&t(Dke),c&&t(lc),_(Fw),c&&t(qke),c&&t(ur),_(Cw),_(Ew),_(yw),_(ww),_(Lw),c&&t(Oke),c&&t(cc),_(Bw),c&&t(Gke),c&&t(br),_(xw),_(Rw),_(Sw),_(Pw),_($w),c&&t(Xke),c&&t(gc),_(Iw),c&&t(Vke),c&&t(vr),_(jw),_(Dw),_(qw),_(Ow),_(Gw),c&&t(zke),c&&t(_c),_(Xw),c&&t(Wke),c&&t(Tr),_(Vw),_(Ww),_(Qw),_(Hw),_(Uw),c&&t(Qke),c&&t(vc),_(Jw),c&&t(Hke),c&&t(Fr),_(Yw),_(Zw),_(eA),_(oA),_(rA),c&&t(Uke),c&&t(Cc),_(tA),c&&t(Jke),c&&t(Cr),_(aA),_(sA),_(lA),_(iA),_(cA),c&&t(Yke),c&&t(yc),_(fA),c&&t(Kke),c&&t(Mr),_(mA),_(hA),_(pA),_(_A),_(uA),c&&t(Zke),c&&t(Lc),_(bA),c&&t(eRe),c&&t(Er),_(vA),_(FA),_(CA),_(MA),_(EA),c&&t(oRe),c&&t(kc),_(yA),c&&t(rRe),c&&t(yr),_(wA),_(LA),_(BA),_(xA),_(kA),c&&t(tRe),c&&t(Pc),_(RA),c&&t(aRe),c&&t(wr),_(SA),_($A),_(IA),_(jA),_(NA),c&&t(nRe),c&&t(jc),_(DA),c&&t(sRe),c&&t(Ar),_(qA),_(GA),_(XA),_(VA),_(zA),c&&t(lRe),c&&t(qc),_(WA),c&&t(iRe),c&&t(Lr),_(QA),_(UA),_(JA),_(YA),_(KA),c&&t(dRe),c&&t(Xc),_(ZA),c&&t(cRe),c&&t(Br),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(fRe),c&&t(Wc),_(sL),c&&t(mRe),c&&t(xr),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(gRe),c&&t(Uc),_(gL),c&&t(hRe),c&&t(kr),_(hL),_(_L),_(uL),_(bL),_(vL),c&&t(pRe),c&&t(Kc),_(TL),c&&t(_Re),c&&t(Rr),_(FL),_(ML),_(EL),_(yL),_(wL),c&&t(uRe),c&&t(of),_(AL),c&&t(bRe),c&&t(Sr),_(LL),_(xL),_(kL),_(RL),_(SL),c&&t(vRe),c&&t(af),_(PL),c&&t(TRe),c&&t(Pr),_($L),_(jL),_(NL),_(DL),_(qL),c&&t(FRe),c&&t(lf),_(OL),c&&t(CRe),c&&t($r),_(GL),_(VL),_(zL),_(WL),_(QL),c&&t(MRe),c&&t(ff),_(HL),c&&t(ERe),c&&t(Ir),_(UL),_(YL),_(KL),_(ZL),_(e7),c&&t(yRe),c&&t(hf),_(o7),c&&t(wRe),c&&t(jr),_(r7),_(a7),_(n7),_(s7),_(l7),c&&t(ARe),c&&t(uf),_(i7),c&&t(LRe),c&&t(Nr),_(d7),_(f7),_(m7),_(g7),_(h7),c&&t(BRe),c&&t(Tf),_(p7),c&&t(xRe),c&&t(Dr),_(_7),_(b7),_(v7),_(T7),_(F7),c&&t(kRe),c&&t(Mf),_(C7),c&&t(RRe),c&&t(qr),_(M7),_(y7),_(w7),_(A7),_(L7),c&&t(SRe),c&&t(wf),_(B7),c&&t(PRe),c&&t(Or),_(x7),_(R7),_(S7),_(P7),_($7),c&&t($Re),c&&t(Bf),_(I7),c&&t(IRe),c&&t(Gr),_(j7),_(D7),_(q7),_(O7),_(X7),c&&t(jRe),c&&t(Rf),_(V7),c&&t(NRe),c&&t(Xr),_(z7),_(Q7),_(H7),_(U7),_(J7)}}}const MFt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function EFt(Ii,J,$e){let{fw:de}=J;return Ii.$$set=pe=>{"fw"in pe&&$e(0,de=pe.fw)},[de]}class xFt extends pFt{constructor(J){super();_Ft(this,J,EFt,CFt,uFt,{fw:0})}}export{xFt as default,MFt as metadata};
