import{S as O1t,i as X1t,s as V1t,e as a,k as l,w as f,t as o,M as z1t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as iAr}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-44c5af16.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function W1t(Ai){let J,Be,ie,me,no,ce,ue,Go,Li,Ef,sa,Bi,xi,TM,yf,ye,io,ki,In,FM,Dn,jn,CM,Ri,Nn,MM,Si,wf,$a;return{c(){J=a("p"),Be=o("If your "),ie=a("code"),me=o("NewModelConfig"),no=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Go=o(`, make sure its
`),Li=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Bi=a("code"),xi=o('"new-model"'),TM=o(")."),yf=l(),ye=a("p"),io=o("Likewise, if your "),ki=a("code"),In=o("NewModel"),FM=o(" is a subclass of "),Dn=a("a"),jn=o("PreTrainedModel"),CM=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),MM=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Be=r(ge,"If your "),ie=n(ge,"CODE",{});var nL=s(ie);me=r(nL,"NewModelConfig"),nL.forEach(t),no=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Pi=s(ce);ue=r(Pi,"PretrainedConfig"),Pi.forEach(t),Go=r(ge,`, make sure its
`),Li=n(ge,"CODE",{});var sL=s(Li);Ef=r(sL,"model_type"),sL.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Bi=n(ge,"CODE",{});var lL=s(Bi);xi=r(lL,'"new-model"'),lL.forEach(t),TM=r(ge,")."),ge.forEach(t),yf=i(co),ye=n(co,"P",{});var Oo=s(ye);io=r(Oo,"Likewise, if your "),ki=n(Oo,"CODE",{});var Ia=s(ki);In=r(Ia,"NewModel"),Ia.forEach(t),FM=r(Oo," is a subclass of "),Dn=n(Oo,"A",{href:!0});var iL=s(Dn);jn=r(iL,"PreTrainedModel"),iL.forEach(t),CM=r(Oo,`, make sure its
`),Ri=n(Oo,"CODE",{});var Af=s(Ri);Nn=r(Af,"config_class"),Af.forEach(t),MM=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Si=n(Oo,"CODE",{});var dL=s(Si);wf=r(dL,"NewModelConfig"),dL.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){d(Dn,"href","/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Be),e(J,ie),e(ie,me),e(J,no),e(J,ce),e(ce,ue),e(J,Go),e(J,Li),e(Li,Ef),e(J,sa),e(J,Bi),e(Bi,xi),e(J,TM),b(co,yf,ge),b(co,ye,ge),e(ye,io),e(ye,ki),e(ki,In),e(ye,FM),e(ye,Dn),e(Dn,jn),e(ye,CM),e(ye,Ri),e(Ri,Nn),e(ye,MM),e(ye,Si),e(Si,wf),e(ye,$a)},d(co){co&&t(J),co&&t(yf),co&&t(ye)}}}function Q1t(Ai){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),ie=n(ue,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function H1t(Ai){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),ie=n(ue,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function U1t(Ai){let J,Be,ie,me,no,ce,ue,Go,Li,Ef,sa,Bi,xi,TM,yf,ye,io,ki,In,FM,Dn,jn,CM,Ri,Nn,MM,Si,wf,$a,co,ge,nL,Pi,sL,lL,Oo,Ia,iL,Af,dL,ARe,u8e,$i,Lf,_W,EM,LRe,uW,BRe,b8e,qn,xRe,bW,kRe,RRe,vW,SRe,PRe,v8e,yM,T8e,cL,$Re,F8e,Bf,C8e,Ii,xf,TW,wM,IRe,FW,DRe,M8e,Xo,AM,jRe,LM,NRe,fL,qRe,GRe,ORe,BM,XRe,CW,VRe,zRe,WRe,fo,xM,QRe,MW,HRe,URe,Di,JRe,EW,YRe,KRe,yW,ZRe,eSe,oSe,v,kf,wW,rSe,tSe,mL,aSe,nSe,sSe,Rf,AW,lSe,iSe,gL,dSe,cSe,fSe,Sf,LW,mSe,gSe,hL,hSe,pSe,_Se,Pf,BW,uSe,bSe,pL,vSe,TSe,FSe,$f,xW,CSe,MSe,_L,ESe,ySe,wSe,If,kW,ASe,LSe,uL,BSe,xSe,kSe,Df,RW,RSe,SSe,bL,PSe,$Se,ISe,jf,SW,DSe,jSe,vL,NSe,qSe,GSe,Nf,PW,OSe,XSe,TL,VSe,zSe,WSe,qf,$W,QSe,HSe,FL,USe,JSe,YSe,Gf,IW,KSe,ZSe,CL,ePe,oPe,rPe,Of,DW,tPe,aPe,ML,nPe,sPe,lPe,Xf,jW,iPe,dPe,EL,cPe,fPe,mPe,Vf,NW,gPe,hPe,yL,pPe,_Pe,uPe,zf,qW,bPe,vPe,wL,TPe,FPe,CPe,Wf,GW,MPe,EPe,AL,yPe,wPe,APe,Qf,OW,LPe,BPe,LL,xPe,kPe,RPe,Hf,XW,SPe,PPe,BL,$Pe,IPe,DPe,Uf,VW,jPe,NPe,xL,qPe,GPe,OPe,Jf,zW,XPe,VPe,kL,zPe,WPe,QPe,Yf,WW,HPe,UPe,RL,JPe,YPe,KPe,Kf,QW,ZPe,e$e,SL,o$e,r$e,t$e,Zf,HW,a$e,n$e,PL,s$e,l$e,i$e,em,UW,d$e,c$e,$L,f$e,m$e,g$e,om,JW,h$e,p$e,IL,_$e,u$e,b$e,rm,YW,v$e,T$e,DL,F$e,C$e,M$e,tm,KW,E$e,y$e,jL,w$e,A$e,L$e,am,ZW,B$e,x$e,NL,k$e,R$e,S$e,nm,eQ,P$e,$$e,qL,I$e,D$e,j$e,sm,oQ,N$e,q$e,GL,G$e,O$e,X$e,lm,rQ,V$e,z$e,OL,W$e,Q$e,H$e,im,tQ,U$e,J$e,XL,Y$e,K$e,Z$e,dm,aQ,eIe,oIe,VL,rIe,tIe,aIe,cm,nQ,nIe,sIe,zL,lIe,iIe,dIe,fm,sQ,cIe,fIe,WL,mIe,gIe,hIe,mm,lQ,pIe,_Ie,QL,uIe,bIe,vIe,gm,iQ,TIe,FIe,HL,CIe,MIe,EIe,hm,dQ,yIe,wIe,UL,AIe,LIe,BIe,pm,cQ,xIe,kIe,JL,RIe,SIe,PIe,_m,fQ,$Ie,IIe,YL,DIe,jIe,NIe,um,mQ,qIe,GIe,KL,OIe,XIe,VIe,bm,gQ,zIe,WIe,ZL,QIe,HIe,UIe,vm,hQ,JIe,YIe,e8,KIe,ZIe,eDe,Tm,pQ,oDe,rDe,o8,tDe,aDe,nDe,Fm,_Q,sDe,lDe,r8,iDe,dDe,cDe,Cm,uQ,fDe,mDe,t8,gDe,hDe,pDe,Mm,bQ,_De,uDe,a8,bDe,vDe,TDe,Em,vQ,FDe,CDe,n8,MDe,EDe,yDe,ym,TQ,wDe,ADe,s8,LDe,BDe,xDe,wm,FQ,kDe,RDe,l8,SDe,PDe,$De,Am,CQ,IDe,DDe,i8,jDe,NDe,qDe,Lm,MQ,GDe,ODe,d8,XDe,VDe,zDe,Bm,EQ,WDe,QDe,c8,HDe,UDe,JDe,xm,yQ,YDe,KDe,f8,ZDe,eje,oje,km,wQ,rje,tje,m8,aje,nje,sje,Rm,AQ,lje,ije,g8,dje,cje,fje,Sm,LQ,mje,gje,h8,hje,pje,_je,Pm,BQ,uje,bje,p8,vje,Tje,Fje,$m,xQ,Cje,Mje,_8,Eje,yje,wje,Im,kQ,Aje,Lje,u8,Bje,xje,kje,Dm,RQ,Rje,Sje,b8,Pje,$je,Ije,jm,SQ,Dje,jje,v8,Nje,qje,Gje,Nm,PQ,Oje,Xje,T8,Vje,zje,Wje,qm,$Q,Qje,Hje,F8,Uje,Jje,Yje,Gm,IQ,Kje,Zje,C8,eNe,oNe,rNe,Om,DQ,tNe,aNe,M8,nNe,sNe,lNe,Xm,jQ,iNe,dNe,E8,cNe,fNe,mNe,Vm,NQ,gNe,hNe,y8,pNe,_Ne,uNe,zm,qQ,bNe,vNe,w8,TNe,FNe,CNe,Wm,GQ,MNe,ENe,A8,yNe,wNe,ANe,Qm,OQ,LNe,BNe,L8,xNe,kNe,RNe,Hm,XQ,SNe,PNe,B8,$Ne,INe,DNe,Um,VQ,jNe,NNe,x8,qNe,GNe,ONe,Jm,zQ,XNe,VNe,k8,zNe,WNe,QNe,Ym,WQ,HNe,UNe,R8,JNe,YNe,KNe,Km,QQ,ZNe,eqe,S8,oqe,rqe,tqe,Zm,HQ,aqe,nqe,P8,sqe,lqe,iqe,eg,UQ,dqe,cqe,$8,fqe,mqe,gqe,og,JQ,hqe,pqe,I8,_qe,uqe,bqe,rg,YQ,vqe,Tqe,D8,Fqe,Cqe,Mqe,tg,KQ,Eqe,yqe,j8,wqe,Aqe,Lqe,ag,ZQ,Bqe,xqe,N8,kqe,Rqe,Sqe,ng,eH,Pqe,$qe,q8,Iqe,Dqe,jqe,sg,oH,Nqe,qqe,G8,Gqe,Oqe,Xqe,lg,rH,Vqe,zqe,O8,Wqe,Qqe,Hqe,ig,tH,Uqe,Jqe,X8,Yqe,Kqe,Zqe,dg,aH,eGe,oGe,V8,rGe,tGe,aGe,cg,nH,nGe,sGe,z8,lGe,iGe,dGe,fg,sH,cGe,fGe,W8,mGe,gGe,hGe,mg,lH,pGe,_Ge,Q8,uGe,bGe,vGe,gg,iH,TGe,FGe,H8,CGe,MGe,EGe,hg,dH,yGe,wGe,U8,AGe,LGe,BGe,pg,cH,xGe,kGe,J8,RGe,SGe,PGe,fH,$Ge,IGe,kM,DGe,_g,RM,jGe,mH,NGe,E8e,ji,ug,gH,SM,qGe,hH,GGe,y8e,Vo,PM,OGe,$M,XGe,Y8,VGe,zGe,WGe,IM,QGe,pH,HGe,UGe,JGe,mo,DM,YGe,_H,KGe,ZGe,Da,eOe,uH,oOe,rOe,bH,tOe,aOe,vH,nOe,sOe,lOe,M,Gn,TH,iOe,dOe,K8,cOe,fOe,Z8,mOe,gOe,hOe,On,FH,pOe,_Oe,eB,uOe,bOe,oB,vOe,TOe,FOe,Xn,CH,COe,MOe,rB,EOe,yOe,tB,wOe,AOe,LOe,bg,MH,BOe,xOe,aB,kOe,ROe,SOe,Vn,EH,POe,$Oe,nB,IOe,DOe,sB,jOe,NOe,qOe,vg,yH,GOe,OOe,lB,XOe,VOe,zOe,Tg,wH,WOe,QOe,iB,HOe,UOe,JOe,Fg,AH,YOe,KOe,dB,ZOe,eXe,oXe,zn,LH,rXe,tXe,cB,aXe,nXe,fB,sXe,lXe,iXe,Wn,BH,dXe,cXe,mB,fXe,mXe,gB,gXe,hXe,pXe,Qn,xH,_Xe,uXe,hB,bXe,vXe,pB,TXe,FXe,CXe,Cg,kH,MXe,EXe,_B,yXe,wXe,AXe,Mg,RH,LXe,BXe,uB,xXe,kXe,RXe,Hn,SH,SXe,PXe,bB,$Xe,IXe,vB,DXe,jXe,NXe,Eg,PH,qXe,GXe,TB,OXe,XXe,VXe,Un,$H,zXe,WXe,FB,QXe,HXe,CB,UXe,JXe,YXe,Jn,IH,KXe,ZXe,MB,eVe,oVe,EB,rVe,tVe,aVe,Yn,DH,nVe,sVe,yB,lVe,iVe,jH,dVe,cVe,fVe,yg,NH,mVe,gVe,wB,hVe,pVe,_Ve,Kn,qH,uVe,bVe,AB,vVe,TVe,LB,FVe,CVe,MVe,wg,GH,EVe,yVe,BB,wVe,AVe,LVe,Zn,OH,BVe,xVe,xB,kVe,RVe,kB,SVe,PVe,$Ve,es,XH,IVe,DVe,RB,jVe,NVe,SB,qVe,GVe,OVe,os,VH,XVe,VVe,PB,zVe,WVe,$B,QVe,HVe,UVe,Ag,zH,JVe,YVe,IB,KVe,ZVe,eze,rs,WH,oze,rze,DB,tze,aze,jB,nze,sze,lze,Lg,QH,ize,dze,NB,cze,fze,mze,ts,HH,gze,hze,qB,pze,_ze,GB,uze,bze,vze,as,UH,Tze,Fze,OB,Cze,Mze,XB,Eze,yze,wze,ns,JH,Aze,Lze,VB,Bze,xze,zB,kze,Rze,Sze,ss,YH,Pze,$ze,WB,Ize,Dze,QB,jze,Nze,qze,Bg,KH,Gze,Oze,HB,Xze,Vze,zze,ls,ZH,Wze,Qze,UB,Hze,Uze,JB,Jze,Yze,Kze,is,eU,Zze,eWe,YB,oWe,rWe,KB,tWe,aWe,nWe,ds,oU,sWe,lWe,ZB,iWe,dWe,ex,cWe,fWe,mWe,cs,rU,gWe,hWe,ox,pWe,_We,rx,uWe,bWe,vWe,fs,tU,TWe,FWe,tx,CWe,MWe,ax,EWe,yWe,wWe,ms,aU,AWe,LWe,nx,BWe,xWe,sx,kWe,RWe,SWe,xg,nU,PWe,$We,lx,IWe,DWe,jWe,gs,sU,NWe,qWe,ix,GWe,OWe,dx,XWe,VWe,zWe,kg,lU,WWe,QWe,cx,HWe,UWe,JWe,Rg,iU,YWe,KWe,fx,ZWe,eQe,oQe,hs,dU,rQe,tQe,mx,aQe,nQe,gx,sQe,lQe,iQe,ps,cU,dQe,cQe,hx,fQe,mQe,px,gQe,hQe,pQe,Sg,fU,_Qe,uQe,_x,bQe,vQe,TQe,_s,mU,FQe,CQe,ux,MQe,EQe,bx,yQe,wQe,AQe,us,gU,LQe,BQe,vx,xQe,kQe,Tx,RQe,SQe,PQe,bs,hU,$Qe,IQe,Fx,DQe,jQe,Cx,NQe,qQe,GQe,vs,pU,OQe,XQe,Mx,VQe,zQe,Ex,WQe,QQe,HQe,Ts,_U,UQe,JQe,yx,YQe,KQe,wx,ZQe,eHe,oHe,Pg,uU,rHe,tHe,Ax,aHe,nHe,sHe,$g,bU,lHe,iHe,Lx,dHe,cHe,fHe,Ig,vU,mHe,gHe,Bx,hHe,pHe,_He,Dg,TU,uHe,bHe,xx,vHe,THe,FHe,Fs,FU,CHe,MHe,kx,EHe,yHe,Rx,wHe,AHe,LHe,jg,CU,BHe,xHe,Sx,kHe,RHe,SHe,Cs,MU,PHe,$He,Px,IHe,DHe,$x,jHe,NHe,qHe,Ms,EU,GHe,OHe,Ix,XHe,VHe,Dx,zHe,WHe,QHe,Es,yU,HHe,UHe,jx,JHe,YHe,Nx,KHe,ZHe,eUe,ys,wU,oUe,rUe,qx,tUe,aUe,Gx,nUe,sUe,lUe,ws,AU,iUe,dUe,Ox,cUe,fUe,Xx,mUe,gUe,hUe,Ng,LU,pUe,_Ue,Vx,uUe,bUe,vUe,qg,BU,TUe,FUe,zx,CUe,MUe,EUe,As,xU,yUe,wUe,Wx,AUe,LUe,Qx,BUe,xUe,kUe,Ls,kU,RUe,SUe,Hx,PUe,$Ue,Ux,IUe,DUe,jUe,Bs,RU,NUe,qUe,Jx,GUe,OUe,Yx,XUe,VUe,zUe,Gg,SU,WUe,QUe,Kx,HUe,UUe,JUe,Og,PU,YUe,KUe,Zx,ZUe,eJe,oJe,Xg,$U,rJe,tJe,ek,aJe,nJe,sJe,Vg,IU,lJe,iJe,ok,dJe,cJe,fJe,xs,DU,mJe,gJe,rk,hJe,pJe,tk,_Je,uJe,bJe,zg,jU,vJe,TJe,ak,FJe,CJe,MJe,Wg,NU,EJe,yJe,nk,wJe,AJe,LJe,ks,qU,BJe,xJe,sk,kJe,RJe,lk,SJe,PJe,$Je,Rs,GU,IJe,DJe,ik,jJe,NJe,dk,qJe,GJe,OJe,OU,XJe,VJe,jM,zJe,Qg,NM,WJe,XU,QJe,w8e,Ni,Hg,VU,qM,HJe,zU,UJe,A8e,zo,GM,JJe,OM,YJe,ck,KJe,ZJe,eYe,XM,oYe,WU,rYe,tYe,aYe,xe,VM,nYe,QU,sYe,lYe,ja,iYe,HU,dYe,cYe,UU,fYe,mYe,JU,gYe,hYe,pYe,se,Ug,YU,_Ye,uYe,fk,bYe,vYe,TYe,Jg,KU,FYe,CYe,mk,MYe,EYe,yYe,Yg,ZU,wYe,AYe,gk,LYe,BYe,xYe,Kg,eJ,kYe,RYe,hk,SYe,PYe,$Ye,Zg,oJ,IYe,DYe,pk,jYe,NYe,qYe,eh,rJ,GYe,OYe,_k,XYe,VYe,zYe,oh,tJ,WYe,QYe,uk,HYe,UYe,JYe,rh,aJ,YYe,KYe,bk,ZYe,eKe,oKe,th,nJ,rKe,tKe,vk,aKe,nKe,sKe,ah,sJ,lKe,iKe,Tk,dKe,cKe,fKe,nh,lJ,mKe,gKe,Fk,hKe,pKe,_Ke,sh,iJ,uKe,bKe,Ck,vKe,TKe,FKe,lh,dJ,CKe,MKe,Mk,EKe,yKe,wKe,ih,cJ,AKe,LKe,Ek,BKe,xKe,kKe,dh,fJ,RKe,SKe,yk,PKe,$Ke,IKe,ch,DKe,mJ,jKe,NKe,zM,qKe,fh,WM,GKe,gJ,OKe,L8e,qi,mh,hJ,QM,XKe,pJ,VKe,B8e,Wo,HM,zKe,UM,WKe,wk,QKe,HKe,UKe,JM,JKe,_J,YKe,KKe,ZKe,ke,YM,eZe,uJ,oZe,rZe,Gi,tZe,bJ,aZe,nZe,vJ,sZe,lZe,iZe,we,gh,TJ,dZe,cZe,Ak,fZe,mZe,gZe,hh,FJ,hZe,pZe,Lk,_Ze,uZe,bZe,ph,CJ,vZe,TZe,Bk,FZe,CZe,MZe,_h,MJ,EZe,yZe,xk,wZe,AZe,LZe,uh,EJ,BZe,xZe,kk,kZe,RZe,SZe,bh,yJ,PZe,$Ze,Rk,IZe,DZe,jZe,vh,wJ,NZe,qZe,Sk,GZe,OZe,XZe,Th,AJ,VZe,zZe,Pk,WZe,QZe,HZe,Fh,UZe,LJ,JZe,YZe,KM,KZe,Ch,ZM,ZZe,BJ,eeo,x8e,Oi,Mh,xJ,eE,oeo,kJ,reo,k8e,Qo,oE,teo,Xi,aeo,RJ,neo,seo,SJ,leo,ieo,deo,rE,ceo,PJ,feo,meo,geo,qr,tE,heo,$J,peo,_eo,Vi,ueo,IJ,beo,veo,DJ,Teo,Feo,Ceo,jJ,Meo,Eeo,aE,yeo,Re,nE,weo,NJ,Aeo,Leo,Na,Beo,qJ,xeo,keo,GJ,Reo,Seo,OJ,Peo,$eo,Ieo,F,Eh,XJ,Deo,jeo,$k,Neo,qeo,Geo,yh,VJ,Oeo,Xeo,Ik,Veo,zeo,Weo,wh,zJ,Qeo,Heo,Dk,Ueo,Jeo,Yeo,Ah,WJ,Keo,Zeo,jk,eoo,ooo,roo,Lh,QJ,too,aoo,Nk,noo,soo,loo,Bh,HJ,ioo,doo,qk,coo,foo,moo,xh,UJ,goo,hoo,Gk,poo,_oo,uoo,kh,JJ,boo,voo,Ok,Too,Foo,Coo,Rh,YJ,Moo,Eoo,Xk,yoo,woo,Aoo,Sh,KJ,Loo,Boo,Vk,xoo,koo,Roo,Ph,ZJ,Soo,Poo,zk,$oo,Ioo,Doo,$h,eY,joo,Noo,Wk,qoo,Goo,Ooo,Ih,oY,Xoo,Voo,Qk,zoo,Woo,Qoo,Dh,rY,Hoo,Uoo,Hk,Joo,Yoo,Koo,jh,tY,Zoo,ero,Uk,oro,rro,tro,Nh,aY,aro,nro,Jk,sro,lro,iro,qh,nY,dro,cro,Yk,fro,mro,gro,Gh,sY,hro,pro,Kk,_ro,uro,bro,Oh,lY,vro,Tro,Zk,Fro,Cro,Mro,Xh,iY,Ero,yro,eR,wro,Aro,Lro,Vh,dY,Bro,xro,oR,kro,Rro,Sro,zh,cY,Pro,$ro,rR,Iro,Dro,jro,Wh,fY,Nro,qro,tR,Gro,Oro,Xro,Qh,mY,Vro,zro,aR,Wro,Qro,Hro,Hh,gY,Uro,Jro,nR,Yro,Kro,Zro,Uh,hY,eto,oto,sR,rto,tto,ato,Jh,pY,nto,sto,lR,lto,ito,dto,Ss,_Y,cto,fto,iR,mto,gto,dR,hto,pto,_to,Yh,uY,uto,bto,cR,vto,Tto,Fto,Kh,bY,Cto,Mto,fR,Eto,yto,wto,Zh,vY,Ato,Lto,mR,Bto,xto,kto,ep,TY,Rto,Sto,gR,Pto,$to,Ito,op,FY,Dto,jto,hR,Nto,qto,Gto,rp,CY,Oto,Xto,pR,Vto,zto,Wto,tp,MY,Qto,Hto,_R,Uto,Jto,Yto,ap,EY,Kto,Zto,uR,eao,oao,rao,np,yY,tao,aao,bR,nao,sao,lao,sp,wY,iao,dao,vR,cao,fao,mao,lp,AY,gao,hao,TR,pao,_ao,uao,ip,LY,bao,vao,FR,Tao,Fao,Cao,dp,BY,Mao,Eao,CR,yao,wao,Aao,cp,xY,Lao,Bao,MR,xao,kao,Rao,fp,kY,Sao,Pao,ER,$ao,Iao,Dao,mp,RY,jao,Nao,yR,qao,Gao,Oao,gp,SY,Xao,Vao,wR,zao,Wao,Qao,hp,PY,Hao,Uao,AR,Jao,Yao,Kao,pp,$Y,Zao,eno,LR,ono,rno,tno,_p,IY,ano,nno,BR,sno,lno,ino,up,DY,dno,cno,xR,fno,mno,gno,bp,jY,hno,pno,kR,_no,uno,bno,vp,NY,vno,Tno,RR,Fno,Cno,Mno,Tp,qY,Eno,yno,SR,wno,Ano,Lno,Fp,GY,Bno,xno,PR,kno,Rno,Sno,Cp,OY,Pno,$no,$R,Ino,Dno,jno,Mp,XY,Nno,qno,IR,Gno,Ono,Xno,Ep,VY,Vno,zno,DR,Wno,Qno,Hno,yp,zY,Uno,Jno,jR,Yno,Kno,Zno,wp,WY,eso,oso,NR,rso,tso,aso,Ap,QY,nso,sso,qR,lso,iso,dso,Lp,HY,cso,fso,GR,mso,gso,hso,Bp,UY,pso,_so,OR,uso,bso,vso,xp,JY,Tso,Fso,XR,Cso,Mso,Eso,kp,YY,yso,wso,VR,Aso,Lso,Bso,Rp,KY,xso,kso,zR,Rso,Sso,Pso,Sp,ZY,$so,Iso,WR,Dso,jso,Nso,Pp,eK,qso,Gso,QR,Oso,Xso,Vso,$p,oK,zso,Wso,HR,Qso,Hso,Uso,Ip,rK,Jso,Yso,UR,Kso,Zso,elo,Dp,tK,olo,rlo,JR,tlo,alo,nlo,jp,aK,slo,llo,YR,ilo,dlo,clo,Np,nK,flo,mlo,KR,glo,hlo,plo,qp,sK,_lo,ulo,ZR,blo,vlo,Tlo,Gp,lK,Flo,Clo,eS,Mlo,Elo,ylo,Op,iK,wlo,Alo,oS,Llo,Blo,xlo,Xp,dK,klo,Rlo,rS,Slo,Plo,$lo,Vp,cK,Ilo,Dlo,tS,jlo,Nlo,qlo,zp,fK,Glo,Olo,aS,Xlo,Vlo,zlo,Wp,mK,Wlo,Qlo,nS,Hlo,Ulo,Jlo,Qp,gK,Ylo,Klo,sS,Zlo,eio,oio,Hp,hK,rio,tio,lS,aio,nio,sio,Up,pK,lio,iio,iS,dio,cio,fio,Jp,_K,mio,gio,dS,hio,pio,_io,Yp,uK,uio,bio,cS,vio,Tio,Fio,Kp,bK,Cio,Mio,fS,Eio,yio,wio,Zp,vK,Aio,Lio,mS,Bio,xio,kio,e_,TK,Rio,Sio,gS,Pio,$io,Iio,o_,Dio,FK,jio,Nio,CK,qio,Gio,MK,Oio,Xio,sE,R8e,zi,r_,EK,lE,Vio,yK,zio,S8e,Ho,iE,Wio,Wi,Qio,wK,Hio,Uio,AK,Jio,Yio,Kio,dE,Zio,LK,edo,odo,rdo,Gr,cE,tdo,BK,ado,ndo,Qi,sdo,xK,ldo,ido,kK,ddo,cdo,fdo,RK,mdo,gdo,fE,hdo,Se,mE,pdo,SK,_do,udo,qa,bdo,PK,vdo,Tdo,$K,Fdo,Cdo,IK,Mdo,Edo,ydo,k,t_,DK,wdo,Ado,hS,Ldo,Bdo,xdo,a_,jK,kdo,Rdo,pS,Sdo,Pdo,$do,n_,NK,Ido,Ddo,_S,jdo,Ndo,qdo,s_,qK,Gdo,Odo,uS,Xdo,Vdo,zdo,l_,GK,Wdo,Qdo,bS,Hdo,Udo,Jdo,i_,OK,Ydo,Kdo,vS,Zdo,eco,oco,d_,XK,rco,tco,TS,aco,nco,sco,c_,VK,lco,ico,FS,dco,cco,fco,f_,zK,mco,gco,CS,hco,pco,_co,m_,WK,uco,bco,MS,vco,Tco,Fco,g_,QK,Cco,Mco,ES,Eco,yco,wco,h_,HK,Aco,Lco,yS,Bco,xco,kco,p_,UK,Rco,Sco,wS,Pco,$co,Ico,__,JK,Dco,jco,AS,Nco,qco,Gco,u_,YK,Oco,Xco,LS,Vco,zco,Wco,b_,KK,Qco,Hco,BS,Uco,Jco,Yco,v_,ZK,Kco,Zco,xS,efo,ofo,rfo,T_,eZ,tfo,afo,kS,nfo,sfo,lfo,F_,oZ,ifo,dfo,RS,cfo,ffo,mfo,C_,rZ,gfo,hfo,SS,pfo,_fo,ufo,M_,tZ,bfo,vfo,PS,Tfo,Ffo,Cfo,E_,aZ,Mfo,Efo,$S,yfo,wfo,Afo,y_,nZ,Lfo,Bfo,IS,xfo,kfo,Rfo,w_,sZ,Sfo,Pfo,DS,$fo,Ifo,Dfo,A_,lZ,jfo,Nfo,jS,qfo,Gfo,Ofo,L_,iZ,Xfo,Vfo,NS,zfo,Wfo,Qfo,B_,dZ,Hfo,Ufo,qS,Jfo,Yfo,Kfo,x_,cZ,Zfo,emo,GS,omo,rmo,tmo,k_,fZ,amo,nmo,OS,smo,lmo,imo,R_,mZ,dmo,cmo,XS,fmo,mmo,gmo,S_,gZ,hmo,pmo,VS,_mo,umo,bmo,P_,hZ,vmo,Tmo,zS,Fmo,Cmo,Mmo,$_,pZ,Emo,ymo,WS,wmo,Amo,Lmo,I_,_Z,Bmo,xmo,QS,kmo,Rmo,Smo,D_,uZ,Pmo,$mo,HS,Imo,Dmo,jmo,j_,bZ,Nmo,qmo,US,Gmo,Omo,Xmo,N_,vZ,Vmo,zmo,JS,Wmo,Qmo,Hmo,q_,TZ,Umo,Jmo,YS,Ymo,Kmo,Zmo,G_,FZ,ego,ogo,KS,rgo,tgo,ago,O_,ngo,CZ,sgo,lgo,MZ,igo,dgo,EZ,cgo,fgo,gE,P8e,Hi,X_,yZ,hE,mgo,wZ,ggo,$8e,Uo,pE,hgo,Ui,pgo,AZ,_go,ugo,LZ,bgo,vgo,Tgo,_E,Fgo,BZ,Cgo,Mgo,Ego,Or,uE,ygo,xZ,wgo,Ago,Ji,Lgo,kZ,Bgo,xgo,RZ,kgo,Rgo,Sgo,SZ,Pgo,$go,bE,Igo,Pe,vE,Dgo,PZ,jgo,Ngo,Ga,qgo,$Z,Ggo,Ogo,IZ,Xgo,Vgo,DZ,zgo,Wgo,Qgo,$,V_,jZ,Hgo,Ugo,ZS,Jgo,Ygo,Kgo,z_,NZ,Zgo,eho,eP,oho,rho,tho,W_,qZ,aho,nho,oP,sho,lho,iho,Q_,GZ,dho,cho,rP,fho,mho,gho,H_,OZ,hho,pho,tP,_ho,uho,bho,U_,XZ,vho,Tho,aP,Fho,Cho,Mho,J_,VZ,Eho,yho,nP,who,Aho,Lho,Y_,zZ,Bho,xho,sP,kho,Rho,Sho,K_,WZ,Pho,$ho,lP,Iho,Dho,jho,Z_,QZ,Nho,qho,iP,Gho,Oho,Xho,eu,HZ,Vho,zho,dP,Who,Qho,Hho,ou,UZ,Uho,Jho,cP,Yho,Kho,Zho,ru,JZ,epo,opo,fP,rpo,tpo,apo,tu,YZ,npo,spo,mP,lpo,ipo,dpo,au,KZ,cpo,fpo,gP,mpo,gpo,hpo,nu,ZZ,ppo,_po,hP,upo,bpo,vpo,su,eee,Tpo,Fpo,pP,Cpo,Mpo,Epo,lu,oee,ypo,wpo,_P,Apo,Lpo,Bpo,iu,ree,xpo,kpo,uP,Rpo,Spo,Ppo,du,tee,$po,Ipo,bP,Dpo,jpo,Npo,cu,aee,qpo,Gpo,vP,Opo,Xpo,Vpo,fu,nee,zpo,Wpo,TP,Qpo,Hpo,Upo,mu,see,Jpo,Ypo,FP,Kpo,Zpo,e_o,gu,lee,o_o,r_o,CP,t_o,a_o,n_o,hu,iee,s_o,l_o,MP,i_o,d_o,c_o,pu,dee,f_o,m_o,EP,g_o,h_o,p_o,_u,cee,__o,u_o,yP,b_o,v_o,T_o,uu,fee,F_o,C_o,wP,M_o,E_o,y_o,bu,mee,w_o,A_o,AP,L_o,B_o,x_o,vu,gee,k_o,R_o,LP,S_o,P_o,$_o,Tu,hee,I_o,D_o,BP,j_o,N_o,q_o,Fu,pee,G_o,O_o,xP,X_o,V_o,z_o,Cu,_ee,W_o,Q_o,kP,H_o,U_o,J_o,Mu,uee,Y_o,K_o,RP,Z_o,euo,ouo,Eu,bee,ruo,tuo,SP,auo,nuo,suo,yu,luo,vee,iuo,duo,Tee,cuo,fuo,Fee,muo,guo,TE,I8e,Yi,wu,Cee,FE,huo,Mee,puo,D8e,Jo,CE,_uo,Ki,uuo,Eee,buo,vuo,yee,Tuo,Fuo,Cuo,ME,Muo,wee,Euo,yuo,wuo,Xr,EE,Auo,Aee,Luo,Buo,Zi,xuo,Lee,kuo,Ruo,Bee,Suo,Puo,$uo,xee,Iuo,Duo,yE,juo,$e,wE,Nuo,kee,quo,Guo,Oa,Ouo,Ree,Xuo,Vuo,See,zuo,Wuo,Pee,Quo,Huo,Uuo,I,Au,$ee,Juo,Yuo,PP,Kuo,Zuo,e5o,Lu,Iee,o5o,r5o,$P,t5o,a5o,n5o,Bu,Dee,s5o,l5o,IP,i5o,d5o,c5o,xu,jee,f5o,m5o,DP,g5o,h5o,p5o,ku,Nee,_5o,u5o,jP,b5o,v5o,T5o,Ru,qee,F5o,C5o,NP,M5o,E5o,y5o,Su,Gee,w5o,A5o,qP,L5o,B5o,x5o,Pu,Oee,k5o,R5o,GP,S5o,P5o,$5o,$u,Xee,I5o,D5o,OP,j5o,N5o,q5o,Iu,Vee,G5o,O5o,XP,X5o,V5o,z5o,Du,zee,W5o,Q5o,VP,H5o,U5o,J5o,ju,Wee,Y5o,K5o,zP,Z5o,e1o,o1o,Nu,Qee,r1o,t1o,WP,a1o,n1o,s1o,qu,Hee,l1o,i1o,QP,d1o,c1o,f1o,Gu,Uee,m1o,g1o,HP,h1o,p1o,_1o,Ou,Jee,u1o,b1o,UP,v1o,T1o,F1o,Xu,Yee,C1o,M1o,JP,E1o,y1o,w1o,Vu,Kee,A1o,L1o,YP,B1o,x1o,k1o,zu,Zee,R1o,S1o,KP,P1o,$1o,I1o,Wu,eoe,D1o,j1o,ZP,N1o,q1o,G1o,Qu,ooe,O1o,X1o,e$,V1o,z1o,W1o,Hu,roe,Q1o,H1o,o$,U1o,J1o,Y1o,Uu,toe,K1o,Z1o,r$,ebo,obo,rbo,Ju,aoe,tbo,abo,t$,nbo,sbo,lbo,Yu,noe,ibo,dbo,a$,cbo,fbo,mbo,Ku,soe,gbo,hbo,n$,pbo,_bo,ubo,Zu,loe,bbo,vbo,s$,Tbo,Fbo,Cbo,e5,ioe,Mbo,Ebo,l$,ybo,wbo,Abo,o5,doe,Lbo,Bbo,i$,xbo,kbo,Rbo,r5,coe,Sbo,Pbo,d$,$bo,Ibo,Dbo,t5,foe,jbo,Nbo,moe,qbo,Gbo,Obo,a5,goe,Xbo,Vbo,c$,zbo,Wbo,Qbo,n5,hoe,Hbo,Ubo,f$,Jbo,Ybo,Kbo,s5,poe,Zbo,e2o,m$,o2o,r2o,t2o,l5,_oe,a2o,n2o,g$,s2o,l2o,i2o,i5,d2o,uoe,c2o,f2o,boe,m2o,g2o,voe,h2o,p2o,AE,j8e,ed,d5,Toe,LE,_2o,Foe,u2o,N8e,Yo,BE,b2o,od,v2o,Coe,T2o,F2o,Moe,C2o,M2o,E2o,xE,y2o,Eoe,w2o,A2o,L2o,Vr,kE,B2o,yoe,x2o,k2o,rd,R2o,woe,S2o,P2o,Aoe,$2o,I2o,D2o,Loe,j2o,N2o,RE,q2o,Ie,SE,G2o,Boe,O2o,X2o,Xa,V2o,xoe,z2o,W2o,koe,Q2o,H2o,Roe,U2o,J2o,Y2o,ae,c5,Soe,K2o,Z2o,h$,evo,ovo,rvo,f5,Poe,tvo,avo,p$,nvo,svo,lvo,m5,$oe,ivo,dvo,_$,cvo,fvo,mvo,g5,Ioe,gvo,hvo,u$,pvo,_vo,uvo,h5,Doe,bvo,vvo,b$,Tvo,Fvo,Cvo,p5,joe,Mvo,Evo,v$,yvo,wvo,Avo,_5,Noe,Lvo,Bvo,T$,xvo,kvo,Rvo,u5,qoe,Svo,Pvo,F$,$vo,Ivo,Dvo,b5,Goe,jvo,Nvo,C$,qvo,Gvo,Ovo,v5,Ooe,Xvo,Vvo,M$,zvo,Wvo,Qvo,T5,Xoe,Hvo,Uvo,E$,Jvo,Yvo,Kvo,F5,Voe,Zvo,eTo,y$,oTo,rTo,tTo,C5,zoe,aTo,nTo,w$,sTo,lTo,iTo,M5,Woe,dTo,cTo,A$,fTo,mTo,gTo,E5,Qoe,hTo,pTo,L$,_To,uTo,bTo,y5,Hoe,vTo,TTo,B$,FTo,CTo,MTo,w5,ETo,Uoe,yTo,wTo,Joe,ATo,LTo,Yoe,BTo,xTo,PE,q8e,td,A5,Koe,$E,kTo,Zoe,RTo,G8e,Ko,IE,STo,ad,PTo,ere,$To,ITo,ore,DTo,jTo,NTo,DE,qTo,rre,GTo,OTo,XTo,zr,jE,VTo,tre,zTo,WTo,nd,QTo,are,HTo,UTo,nre,JTo,YTo,KTo,sre,ZTo,e7o,NE,o7o,De,qE,r7o,lre,t7o,a7o,Va,n7o,ire,s7o,l7o,dre,i7o,d7o,cre,c7o,f7o,m7o,A,L5,fre,g7o,h7o,x$,p7o,_7o,u7o,B5,mre,b7o,v7o,k$,T7o,F7o,C7o,x5,gre,M7o,E7o,R$,y7o,w7o,A7o,k5,hre,L7o,B7o,S$,x7o,k7o,R7o,R5,pre,S7o,P7o,P$,$7o,I7o,D7o,S5,_re,j7o,N7o,$$,q7o,G7o,O7o,P5,ure,X7o,V7o,I$,z7o,W7o,Q7o,$5,bre,H7o,U7o,D$,J7o,Y7o,K7o,I5,vre,Z7o,eFo,j$,oFo,rFo,tFo,D5,Tre,aFo,nFo,N$,sFo,lFo,iFo,j5,Fre,dFo,cFo,q$,fFo,mFo,gFo,N5,Cre,hFo,pFo,G$,_Fo,uFo,bFo,q5,Mre,vFo,TFo,O$,FFo,CFo,MFo,G5,Ere,EFo,yFo,X$,wFo,AFo,LFo,O5,yre,BFo,xFo,V$,kFo,RFo,SFo,X5,wre,PFo,$Fo,z$,IFo,DFo,jFo,V5,Are,NFo,qFo,W$,GFo,OFo,XFo,z5,Lre,VFo,zFo,Q$,WFo,QFo,HFo,W5,Bre,UFo,JFo,H$,YFo,KFo,ZFo,Q5,xre,e9o,o9o,U$,r9o,t9o,a9o,H5,kre,n9o,s9o,J$,l9o,i9o,d9o,U5,Rre,c9o,f9o,Y$,m9o,g9o,h9o,J5,Sre,p9o,_9o,K$,u9o,b9o,v9o,Y5,Pre,T9o,F9o,Z$,C9o,M9o,E9o,K5,$re,y9o,w9o,eI,A9o,L9o,B9o,Z5,Ire,x9o,k9o,oI,R9o,S9o,P9o,e1,Dre,$9o,I9o,rI,D9o,j9o,N9o,o1,jre,q9o,G9o,tI,O9o,X9o,V9o,r1,Nre,z9o,W9o,aI,Q9o,H9o,U9o,t1,qre,J9o,Y9o,nI,K9o,Z9o,eCo,a1,Gre,oCo,rCo,sI,tCo,aCo,nCo,n1,Ore,sCo,lCo,lI,iCo,dCo,cCo,s1,Xre,fCo,mCo,iI,gCo,hCo,pCo,l1,Vre,_Co,uCo,dI,bCo,vCo,TCo,i1,zre,FCo,CCo,cI,MCo,ECo,yCo,d1,Wre,wCo,ACo,fI,LCo,BCo,xCo,c1,Qre,kCo,RCo,mI,SCo,PCo,$Co,f1,Hre,ICo,DCo,gI,jCo,NCo,qCo,m1,Ure,GCo,OCo,hI,XCo,VCo,zCo,g1,Jre,WCo,QCo,pI,HCo,UCo,JCo,h1,Yre,YCo,KCo,_I,ZCo,e4o,o4o,p1,Kre,r4o,t4o,uI,a4o,n4o,s4o,_1,Zre,l4o,i4o,bI,d4o,c4o,f4o,u1,ete,m4o,g4o,vI,h4o,p4o,_4o,b1,ote,u4o,b4o,TI,v4o,T4o,F4o,v1,rte,C4o,M4o,FI,E4o,y4o,w4o,T1,A4o,tte,L4o,B4o,ate,x4o,k4o,nte,R4o,S4o,GE,O8e,sd,F1,ste,OE,P4o,lte,$4o,X8e,Zo,XE,I4o,ld,D4o,ite,j4o,N4o,dte,q4o,G4o,O4o,VE,X4o,cte,V4o,z4o,W4o,Wr,zE,Q4o,fte,H4o,U4o,id,J4o,mte,Y4o,K4o,gte,Z4o,eMo,oMo,hte,rMo,tMo,WE,aMo,je,QE,nMo,pte,sMo,lMo,za,iMo,_te,dMo,cMo,ute,fMo,mMo,bte,gMo,hMo,pMo,G,C1,vte,_Mo,uMo,CI,bMo,vMo,TMo,M1,Tte,FMo,CMo,MI,MMo,EMo,yMo,E1,Fte,wMo,AMo,EI,LMo,BMo,xMo,y1,Cte,kMo,RMo,yI,SMo,PMo,$Mo,w1,Mte,IMo,DMo,wI,jMo,NMo,qMo,A1,Ete,GMo,OMo,AI,XMo,VMo,zMo,L1,yte,WMo,QMo,LI,HMo,UMo,JMo,B1,wte,YMo,KMo,BI,ZMo,eEo,oEo,x1,Ate,rEo,tEo,xI,aEo,nEo,sEo,k1,Lte,lEo,iEo,kI,dEo,cEo,fEo,R1,Bte,mEo,gEo,RI,hEo,pEo,_Eo,S1,xte,uEo,bEo,SI,vEo,TEo,FEo,P1,kte,CEo,MEo,PI,EEo,yEo,wEo,$1,Rte,AEo,LEo,$I,BEo,xEo,kEo,I1,Ste,REo,SEo,II,PEo,$Eo,IEo,D1,Pte,DEo,jEo,DI,NEo,qEo,GEo,j1,$te,OEo,XEo,jI,VEo,zEo,WEo,N1,Ite,QEo,HEo,NI,UEo,JEo,YEo,q1,Dte,KEo,ZEo,qI,e3o,o3o,r3o,G1,jte,t3o,a3o,GI,n3o,s3o,l3o,O1,Nte,i3o,d3o,OI,c3o,f3o,m3o,X1,qte,g3o,h3o,XI,p3o,_3o,u3o,V1,Gte,b3o,v3o,VI,T3o,F3o,C3o,z1,Ote,M3o,E3o,zI,y3o,w3o,A3o,W1,Xte,L3o,B3o,WI,x3o,k3o,R3o,Q1,Vte,S3o,P3o,QI,$3o,I3o,D3o,H1,zte,j3o,N3o,HI,q3o,G3o,O3o,U1,Wte,X3o,V3o,UI,z3o,W3o,Q3o,J1,H3o,Qte,U3o,J3o,Hte,Y3o,K3o,Ute,Z3o,eyo,HE,V8e,dd,Y1,Jte,UE,oyo,Yte,ryo,z8e,er,JE,tyo,cd,ayo,Kte,nyo,syo,Zte,lyo,iyo,dyo,YE,cyo,eae,fyo,myo,gyo,Qr,KE,hyo,oae,pyo,_yo,fd,uyo,rae,byo,vyo,tae,Tyo,Fyo,Cyo,aae,Myo,Eyo,ZE,yyo,Ne,e3,wyo,nae,Ayo,Lyo,Wa,Byo,sae,xyo,kyo,lae,Ryo,Syo,iae,Pyo,$yo,Iyo,na,K1,dae,Dyo,jyo,JI,Nyo,qyo,Gyo,Z1,cae,Oyo,Xyo,YI,Vyo,zyo,Wyo,eb,fae,Qyo,Hyo,KI,Uyo,Jyo,Yyo,ob,mae,Kyo,Zyo,ZI,ewo,owo,rwo,rb,gae,two,awo,eD,nwo,swo,lwo,tb,iwo,hae,dwo,cwo,pae,fwo,mwo,_ae,gwo,hwo,o3,W8e,md,ab,uae,r3,pwo,bae,_wo,Q8e,or,t3,uwo,gd,bwo,vae,vwo,Two,Tae,Fwo,Cwo,Mwo,a3,Ewo,Fae,ywo,wwo,Awo,Hr,n3,Lwo,Cae,Bwo,xwo,hd,kwo,Mae,Rwo,Swo,Eae,Pwo,$wo,Iwo,yae,Dwo,jwo,s3,Nwo,qe,l3,qwo,wae,Gwo,Owo,Qa,Xwo,Aae,Vwo,zwo,Lae,Wwo,Qwo,Bae,Hwo,Uwo,Jwo,N,nb,xae,Ywo,Kwo,oD,Zwo,e6o,o6o,sb,kae,r6o,t6o,rD,a6o,n6o,s6o,lb,Rae,l6o,i6o,tD,d6o,c6o,f6o,ib,Sae,m6o,g6o,aD,h6o,p6o,_6o,db,Pae,u6o,b6o,nD,v6o,T6o,F6o,cb,$ae,C6o,M6o,sD,E6o,y6o,w6o,fb,Iae,A6o,L6o,lD,B6o,x6o,k6o,mb,Dae,R6o,S6o,iD,P6o,$6o,I6o,gb,jae,D6o,j6o,dD,N6o,q6o,G6o,hb,Nae,O6o,X6o,cD,V6o,z6o,W6o,pb,qae,Q6o,H6o,fD,U6o,J6o,Y6o,_b,Gae,K6o,Z6o,mD,eAo,oAo,rAo,ub,Oae,tAo,aAo,gD,nAo,sAo,lAo,bb,Xae,iAo,dAo,hD,cAo,fAo,mAo,vb,Vae,gAo,hAo,pD,pAo,_Ao,uAo,Tb,zae,bAo,vAo,_D,TAo,FAo,CAo,Fb,Wae,MAo,EAo,uD,yAo,wAo,AAo,Cb,Qae,LAo,BAo,bD,xAo,kAo,RAo,Mb,Hae,SAo,PAo,vD,$Ao,IAo,DAo,Eb,Uae,jAo,NAo,TD,qAo,GAo,OAo,yb,Jae,XAo,VAo,FD,zAo,WAo,QAo,wb,Yae,HAo,UAo,CD,JAo,YAo,KAo,Ab,Kae,ZAo,e0o,MD,o0o,r0o,t0o,Lb,Zae,a0o,n0o,ED,s0o,l0o,i0o,Bb,ene,d0o,c0o,yD,f0o,m0o,g0o,xb,one,h0o,p0o,wD,_0o,u0o,b0o,kb,rne,v0o,T0o,AD,F0o,C0o,M0o,Rb,tne,E0o,y0o,LD,w0o,A0o,L0o,Sb,ane,B0o,x0o,BD,k0o,R0o,S0o,Pb,nne,P0o,$0o,xD,I0o,D0o,j0o,$b,sne,N0o,q0o,kD,G0o,O0o,X0o,Ib,lne,V0o,z0o,RD,W0o,Q0o,H0o,Db,ine,U0o,J0o,SD,Y0o,K0o,Z0o,jb,eLo,dne,oLo,rLo,cne,tLo,aLo,fne,nLo,sLo,i3,H8e,pd,Nb,mne,d3,lLo,gne,iLo,U8e,rr,c3,dLo,_d,cLo,hne,fLo,mLo,pne,gLo,hLo,pLo,f3,_Lo,_ne,uLo,bLo,vLo,Ur,m3,TLo,une,FLo,CLo,ud,MLo,bne,ELo,yLo,vne,wLo,ALo,LLo,Tne,BLo,xLo,g3,kLo,Ge,h3,RLo,Fne,SLo,PLo,Ha,$Lo,Cne,ILo,DLo,Mne,jLo,NLo,Ene,qLo,GLo,OLo,R,qb,yne,XLo,VLo,PD,zLo,WLo,QLo,Gb,wne,HLo,ULo,$D,JLo,YLo,KLo,Ob,Ane,ZLo,e8o,ID,o8o,r8o,t8o,Xb,Lne,a8o,n8o,DD,s8o,l8o,i8o,Vb,Bne,d8o,c8o,jD,f8o,m8o,g8o,zb,xne,h8o,p8o,ND,_8o,u8o,b8o,Wb,kne,v8o,T8o,qD,F8o,C8o,M8o,Qb,Rne,E8o,y8o,GD,w8o,A8o,L8o,Hb,Sne,B8o,x8o,OD,k8o,R8o,S8o,Ub,Pne,P8o,$8o,XD,I8o,D8o,j8o,Jb,$ne,N8o,q8o,VD,G8o,O8o,X8o,Yb,Ine,V8o,z8o,zD,W8o,Q8o,H8o,Kb,Dne,U8o,J8o,WD,Y8o,K8o,Z8o,Zb,jne,eBo,oBo,QD,rBo,tBo,aBo,e2,Nne,nBo,sBo,HD,lBo,iBo,dBo,o2,qne,cBo,fBo,UD,mBo,gBo,hBo,r2,Gne,pBo,_Bo,JD,uBo,bBo,vBo,t2,One,TBo,FBo,YD,CBo,MBo,EBo,a2,Xne,yBo,wBo,KD,ABo,LBo,BBo,n2,Vne,xBo,kBo,ZD,RBo,SBo,PBo,s2,zne,$Bo,IBo,ej,DBo,jBo,NBo,l2,Wne,qBo,GBo,oj,OBo,XBo,VBo,i2,Qne,zBo,WBo,rj,QBo,HBo,UBo,d2,Hne,JBo,YBo,tj,KBo,ZBo,exo,c2,Une,oxo,rxo,aj,txo,axo,nxo,f2,Jne,sxo,lxo,nj,ixo,dxo,cxo,m2,Yne,fxo,mxo,sj,gxo,hxo,pxo,g2,Kne,_xo,uxo,lj,bxo,vxo,Txo,h2,Zne,Fxo,Cxo,ij,Mxo,Exo,yxo,p2,ese,wxo,Axo,dj,Lxo,Bxo,xxo,_2,ose,kxo,Rxo,cj,Sxo,Pxo,$xo,u2,rse,Ixo,Dxo,fj,jxo,Nxo,qxo,b2,tse,Gxo,Oxo,mj,Xxo,Vxo,zxo,v2,ase,Wxo,Qxo,gj,Hxo,Uxo,Jxo,T2,nse,Yxo,Kxo,hj,Zxo,eko,oko,F2,sse,rko,tko,pj,ako,nko,sko,C2,lse,lko,iko,_j,dko,cko,fko,M2,ise,mko,gko,uj,hko,pko,_ko,E2,dse,uko,bko,bj,vko,Tko,Fko,y2,Cko,cse,Mko,Eko,fse,yko,wko,mse,Ako,Lko,p3,J8e,bd,w2,gse,_3,Bko,hse,xko,Y8e,tr,u3,kko,vd,Rko,pse,Sko,Pko,_se,$ko,Iko,Dko,b3,jko,use,Nko,qko,Gko,Jr,v3,Oko,bse,Xko,Vko,Td,zko,vse,Wko,Qko,Tse,Hko,Uko,Jko,Fse,Yko,Kko,T3,Zko,Oe,F3,eRo,Cse,oRo,rRo,Ua,tRo,Mse,aRo,nRo,Ese,sRo,lRo,yse,iRo,dRo,cRo,wse,A2,Ase,fRo,mRo,vj,gRo,hRo,pRo,L2,_Ro,Lse,uRo,bRo,Bse,vRo,TRo,xse,FRo,CRo,C3,K8e,Fd,B2,kse,M3,MRo,Rse,ERo,Z8e,ar,E3,yRo,Cd,wRo,Sse,ARo,LRo,Pse,BRo,xRo,kRo,y3,RRo,$se,SRo,PRo,$Ro,Yr,w3,IRo,Ise,DRo,jRo,Md,NRo,Dse,qRo,GRo,jse,ORo,XRo,VRo,Nse,zRo,WRo,A3,QRo,Xe,L3,HRo,qse,URo,JRo,Ja,YRo,Gse,KRo,ZRo,Ose,eSo,oSo,Xse,rSo,tSo,aSo,be,x2,Vse,nSo,sSo,Tj,lSo,iSo,dSo,k2,zse,cSo,fSo,Fj,mSo,gSo,hSo,Ps,Wse,pSo,_So,Cj,uSo,bSo,Mj,vSo,TSo,FSo,R2,Qse,CSo,MSo,Ej,ESo,ySo,wSo,la,Hse,ASo,LSo,yj,BSo,xSo,wj,kSo,RSo,Aj,SSo,PSo,$So,S2,Use,ISo,DSo,Lj,jSo,NSo,qSo,P2,Jse,GSo,OSo,Bj,XSo,VSo,zSo,$2,Yse,WSo,QSo,xj,HSo,USo,JSo,I2,Kse,YSo,KSo,kj,ZSo,ePo,oPo,D2,rPo,Zse,tPo,aPo,ele,nPo,sPo,ole,lPo,iPo,B3,eBe,Ed,j2,rle,x3,dPo,tle,cPo,oBe,nr,k3,fPo,yd,mPo,ale,gPo,hPo,nle,pPo,_Po,uPo,R3,bPo,sle,vPo,TPo,FPo,Kr,S3,CPo,lle,MPo,EPo,wd,yPo,ile,wPo,APo,dle,LPo,BPo,xPo,cle,kPo,RPo,P3,SPo,Ve,$3,PPo,fle,$Po,IPo,Ya,DPo,mle,jPo,NPo,gle,qPo,GPo,hle,OPo,XPo,VPo,ple,N2,_le,zPo,WPo,Rj,QPo,HPo,UPo,q2,JPo,ule,YPo,KPo,ble,ZPo,e$o,vle,o$o,r$o,I3,rBe,Ad,G2,Tle,D3,t$o,Fle,a$o,tBe,sr,j3,n$o,Ld,s$o,Cle,l$o,i$o,Mle,d$o,c$o,f$o,N3,m$o,Ele,g$o,h$o,p$o,Zr,q3,_$o,yle,u$o,b$o,Bd,v$o,wle,T$o,F$o,Ale,C$o,M$o,E$o,Lle,y$o,w$o,G3,A$o,ze,O3,L$o,Ble,B$o,x$o,Ka,k$o,xle,R$o,S$o,kle,P$o,$$o,Rle,I$o,D$o,j$o,Ae,O2,Sle,N$o,q$o,Sj,G$o,O$o,X$o,X2,Ple,V$o,z$o,Pj,W$o,Q$o,H$o,V2,$le,U$o,J$o,$j,Y$o,K$o,Z$o,z2,Ile,eIo,oIo,Ij,rIo,tIo,aIo,W2,Dle,nIo,sIo,Dj,lIo,iIo,dIo,Q2,jle,cIo,fIo,jj,mIo,gIo,hIo,H2,Nle,pIo,_Io,Nj,uIo,bIo,vIo,U2,qle,TIo,FIo,qj,CIo,MIo,EIo,J2,yIo,Gle,wIo,AIo,Ole,LIo,BIo,Xle,xIo,kIo,X3,aBe,xd,Y2,Vle,V3,RIo,zle,SIo,nBe,lr,z3,PIo,kd,$Io,Wle,IIo,DIo,Qle,jIo,NIo,qIo,W3,GIo,Hle,OIo,XIo,VIo,et,Q3,zIo,Ule,WIo,QIo,Rd,HIo,Jle,UIo,JIo,Yle,YIo,KIo,ZIo,Kle,eDo,oDo,H3,rDo,We,U3,tDo,Zle,aDo,nDo,Za,sDo,eie,lDo,iDo,oie,dDo,cDo,rie,fDo,mDo,gDo,en,K2,tie,hDo,pDo,Gj,_Do,uDo,bDo,Z2,aie,vDo,TDo,Oj,FDo,CDo,MDo,ev,nie,EDo,yDo,Xj,wDo,ADo,LDo,ov,sie,BDo,xDo,Vj,kDo,RDo,SDo,rv,PDo,lie,$Do,IDo,iie,DDo,jDo,die,NDo,qDo,J3,sBe,Sd,tv,cie,Y3,GDo,fie,ODo,lBe,ir,K3,XDo,Pd,VDo,mie,zDo,WDo,gie,QDo,HDo,UDo,Z3,JDo,hie,YDo,KDo,ZDo,ot,ey,ejo,pie,ojo,rjo,$d,tjo,_ie,ajo,njo,uie,sjo,ljo,ijo,bie,djo,cjo,oy,fjo,Qe,ry,mjo,vie,gjo,hjo,on,pjo,Tie,_jo,ujo,Fie,bjo,vjo,Cie,Tjo,Fjo,Cjo,Le,av,Mie,Mjo,Ejo,zj,yjo,wjo,Ajo,nv,Eie,Ljo,Bjo,Wj,xjo,kjo,Rjo,sv,yie,Sjo,Pjo,Qj,$jo,Ijo,Djo,lv,wie,jjo,Njo,Hj,qjo,Gjo,Ojo,iv,Aie,Xjo,Vjo,Uj,zjo,Wjo,Qjo,dv,Lie,Hjo,Ujo,Jj,Jjo,Yjo,Kjo,cv,Bie,Zjo,eNo,Yj,oNo,rNo,tNo,fv,xie,aNo,nNo,Kj,sNo,lNo,iNo,mv,dNo,kie,cNo,fNo,Rie,mNo,gNo,Sie,hNo,pNo,ty,iBe,Id,gv,Pie,ay,_No,$ie,uNo,dBe,dr,ny,bNo,Dd,vNo,Iie,TNo,FNo,Die,CNo,MNo,ENo,sy,yNo,jie,wNo,ANo,LNo,rt,ly,BNo,Nie,xNo,kNo,jd,RNo,qie,SNo,PNo,Gie,$No,INo,DNo,Oie,jNo,NNo,iy,qNo,He,dy,GNo,Xie,ONo,XNo,rn,VNo,Vie,zNo,WNo,zie,QNo,HNo,Wie,UNo,JNo,YNo,cy,hv,Qie,KNo,ZNo,Zj,eqo,oqo,rqo,pv,Hie,tqo,aqo,eN,nqo,sqo,lqo,_v,iqo,Uie,dqo,cqo,Jie,fqo,mqo,Yie,gqo,hqo,fy,cBe,Nd,uv,Kie,my,pqo,Zie,_qo,fBe,cr,gy,uqo,qd,bqo,ede,vqo,Tqo,ode,Fqo,Cqo,Mqo,hy,Eqo,rde,yqo,wqo,Aqo,tt,py,Lqo,tde,Bqo,xqo,Gd,kqo,ade,Rqo,Sqo,nde,Pqo,$qo,Iqo,sde,Dqo,jqo,_y,Nqo,Ue,uy,qqo,lde,Gqo,Oqo,tn,Xqo,ide,Vqo,zqo,dde,Wqo,Qqo,cde,Hqo,Uqo,Jqo,an,bv,fde,Yqo,Kqo,oN,Zqo,eGo,oGo,vv,mde,rGo,tGo,rN,aGo,nGo,sGo,Tv,gde,lGo,iGo,tN,dGo,cGo,fGo,Fv,hde,mGo,gGo,aN,hGo,pGo,_Go,Cv,uGo,pde,bGo,vGo,_de,TGo,FGo,ude,CGo,MGo,by,mBe,Od,Mv,bde,vy,EGo,vde,yGo,gBe,fr,Ty,wGo,Xd,AGo,Tde,LGo,BGo,Fde,xGo,kGo,RGo,Fy,SGo,Cde,PGo,$Go,IGo,at,Cy,DGo,Mde,jGo,NGo,Vd,qGo,Ede,GGo,OGo,yde,XGo,VGo,zGo,wde,WGo,QGo,My,HGo,Je,Ey,UGo,Ade,JGo,YGo,nn,KGo,Lde,ZGo,eOo,Bde,oOo,rOo,xde,tOo,aOo,nOo,zd,Ev,kde,sOo,lOo,nN,iOo,dOo,cOo,yv,Rde,fOo,mOo,sN,gOo,hOo,pOo,wv,Sde,_Oo,uOo,lN,bOo,vOo,TOo,Av,FOo,Pde,COo,MOo,$de,EOo,yOo,Ide,wOo,AOo,yy,hBe,Wd,Lv,Dde,wy,LOo,jde,BOo,pBe,mr,Ay,xOo,Qd,kOo,Nde,ROo,SOo,qde,POo,$Oo,IOo,Ly,DOo,Gde,jOo,NOo,qOo,nt,By,GOo,Ode,OOo,XOo,Hd,VOo,Xde,zOo,WOo,Vde,QOo,HOo,UOo,zde,JOo,YOo,xy,KOo,Ye,ky,ZOo,Wde,eXo,oXo,sn,rXo,Qde,tXo,aXo,Hde,nXo,sXo,Ude,lXo,iXo,dXo,Jde,Bv,Yde,cXo,fXo,iN,mXo,gXo,hXo,xv,pXo,Kde,_Xo,uXo,Zde,bXo,vXo,ece,TXo,FXo,Ry,_Be,Ud,kv,oce,Sy,CXo,rce,MXo,uBe,gr,Py,EXo,Jd,yXo,tce,wXo,AXo,ace,LXo,BXo,xXo,$y,kXo,nce,RXo,SXo,PXo,st,Iy,$Xo,sce,IXo,DXo,Yd,jXo,lce,NXo,qXo,ice,GXo,OXo,XXo,dce,VXo,zXo,Dy,WXo,Ke,jy,QXo,cce,HXo,UXo,ln,JXo,fce,YXo,KXo,mce,ZXo,eVo,gce,oVo,rVo,tVo,hce,Rv,pce,aVo,nVo,dN,sVo,lVo,iVo,Sv,dVo,_ce,cVo,fVo,uce,mVo,gVo,bce,hVo,pVo,Ny,bBe,Kd,Pv,vce,qy,_Vo,Tce,uVo,vBe,hr,Gy,bVo,Zd,vVo,Fce,TVo,FVo,Cce,CVo,MVo,EVo,Oy,yVo,Mce,wVo,AVo,LVo,lt,Xy,BVo,Ece,xVo,kVo,ec,RVo,yce,SVo,PVo,wce,$Vo,IVo,DVo,Ace,jVo,NVo,Vy,qVo,Ze,zy,GVo,Lce,OVo,XVo,dn,VVo,Bce,zVo,WVo,xce,QVo,HVo,kce,UVo,JVo,YVo,Wy,$v,Rce,KVo,ZVo,cN,ezo,ozo,rzo,Iv,Sce,tzo,azo,fN,nzo,szo,lzo,Dv,izo,Pce,dzo,czo,$ce,fzo,mzo,Ice,gzo,hzo,Qy,TBe,oc,jv,Dce,Hy,pzo,jce,_zo,FBe,pr,Uy,uzo,rc,bzo,Nce,vzo,Tzo,qce,Fzo,Czo,Mzo,Jy,Ezo,Gce,yzo,wzo,Azo,it,Yy,Lzo,Oce,Bzo,xzo,tc,kzo,Xce,Rzo,Szo,Vce,Pzo,$zo,Izo,zce,Dzo,jzo,Ky,Nzo,go,Zy,qzo,Wce,Gzo,Ozo,cn,Xzo,Qce,Vzo,zzo,Hce,Wzo,Qzo,Uce,Hzo,Uzo,Jzo,B,Nv,Jce,Yzo,Kzo,mN,Zzo,eWo,oWo,qv,Yce,rWo,tWo,gN,aWo,nWo,sWo,Gv,Kce,lWo,iWo,hN,dWo,cWo,fWo,Ov,Zce,mWo,gWo,pN,hWo,pWo,_Wo,Xv,efe,uWo,bWo,_N,vWo,TWo,FWo,Vv,ofe,CWo,MWo,uN,EWo,yWo,wWo,zv,rfe,AWo,LWo,bN,BWo,xWo,kWo,Wv,tfe,RWo,SWo,vN,PWo,$Wo,IWo,Qv,afe,DWo,jWo,TN,NWo,qWo,GWo,Hv,nfe,OWo,XWo,FN,VWo,zWo,WWo,Uv,sfe,QWo,HWo,CN,UWo,JWo,YWo,Jv,lfe,KWo,ZWo,MN,eQo,oQo,rQo,Yv,ife,tQo,aQo,EN,nQo,sQo,lQo,Kv,dfe,iQo,dQo,yN,cQo,fQo,mQo,Zv,cfe,gQo,hQo,wN,pQo,_Qo,uQo,eT,ffe,bQo,vQo,AN,TQo,FQo,CQo,$s,mfe,MQo,EQo,LN,yQo,wQo,BN,AQo,LQo,BQo,oT,gfe,xQo,kQo,xN,RQo,SQo,PQo,rT,hfe,$Qo,IQo,kN,DQo,jQo,NQo,tT,pfe,qQo,GQo,RN,OQo,XQo,VQo,aT,_fe,zQo,WQo,SN,QQo,HQo,UQo,nT,ufe,JQo,YQo,PN,KQo,ZQo,eHo,sT,bfe,oHo,rHo,$N,tHo,aHo,nHo,lT,vfe,sHo,lHo,IN,iHo,dHo,cHo,iT,Tfe,fHo,mHo,DN,gHo,hHo,pHo,dT,Ffe,_Ho,uHo,jN,bHo,vHo,THo,cT,Cfe,FHo,CHo,NN,MHo,EHo,yHo,fT,Mfe,wHo,AHo,qN,LHo,BHo,xHo,mT,Efe,kHo,RHo,GN,SHo,PHo,$Ho,gT,yfe,IHo,DHo,ON,jHo,NHo,qHo,hT,wfe,GHo,OHo,XN,XHo,VHo,zHo,pT,Afe,WHo,QHo,VN,HHo,UHo,JHo,_T,Lfe,YHo,KHo,zN,ZHo,eUo,oUo,uT,Bfe,rUo,tUo,WN,aUo,nUo,sUo,bT,xfe,lUo,iUo,QN,dUo,cUo,fUo,vT,kfe,mUo,gUo,HN,hUo,pUo,_Uo,TT,Rfe,uUo,bUo,UN,vUo,TUo,FUo,FT,Sfe,CUo,MUo,JN,EUo,yUo,wUo,CT,Pfe,AUo,LUo,YN,BUo,xUo,kUo,MT,$fe,RUo,SUo,KN,PUo,$Uo,IUo,ET,Ife,DUo,jUo,ZN,NUo,qUo,GUo,yT,Dfe,OUo,XUo,eq,VUo,zUo,WUo,jfe,QUo,HUo,ew,CBe,ac,wT,Nfe,ow,UUo,qfe,JUo,MBe,_r,rw,YUo,nc,KUo,Gfe,ZUo,eJo,Ofe,oJo,rJo,tJo,tw,aJo,Xfe,nJo,sJo,lJo,dt,aw,iJo,Vfe,dJo,cJo,sc,fJo,zfe,mJo,gJo,Wfe,hJo,pJo,_Jo,Qfe,uJo,bJo,nw,vJo,ho,sw,TJo,Hfe,FJo,CJo,fn,MJo,Ufe,EJo,yJo,Jfe,wJo,AJo,Yfe,LJo,BJo,xJo,H,AT,Kfe,kJo,RJo,oq,SJo,PJo,$Jo,LT,Zfe,IJo,DJo,rq,jJo,NJo,qJo,BT,eme,GJo,OJo,tq,XJo,VJo,zJo,xT,ome,WJo,QJo,aq,HJo,UJo,JJo,kT,rme,YJo,KJo,nq,ZJo,eYo,oYo,RT,tme,rYo,tYo,sq,aYo,nYo,sYo,ST,ame,lYo,iYo,lq,dYo,cYo,fYo,PT,nme,mYo,gYo,iq,hYo,pYo,_Yo,$T,sme,uYo,bYo,dq,vYo,TYo,FYo,IT,lme,CYo,MYo,cq,EYo,yYo,wYo,DT,ime,AYo,LYo,fq,BYo,xYo,kYo,jT,dme,RYo,SYo,mq,PYo,$Yo,IYo,NT,cme,DYo,jYo,gq,NYo,qYo,GYo,qT,fme,OYo,XYo,hq,VYo,zYo,WYo,GT,mme,QYo,HYo,pq,UYo,JYo,YYo,OT,gme,KYo,ZYo,_q,eKo,oKo,rKo,XT,hme,tKo,aKo,uq,nKo,sKo,lKo,VT,pme,iKo,dKo,bq,cKo,fKo,mKo,zT,_me,gKo,hKo,vq,pKo,_Ko,uKo,WT,ume,bKo,vKo,Tq,TKo,FKo,CKo,QT,bme,MKo,EKo,Fq,yKo,wKo,AKo,HT,vme,LKo,BKo,Cq,xKo,kKo,RKo,Tme,SKo,PKo,lw,EBe,lc,UT,Fme,iw,$Ko,Cme,IKo,yBe,ur,dw,DKo,ic,jKo,Mme,NKo,qKo,Eme,GKo,OKo,XKo,cw,VKo,yme,zKo,WKo,QKo,ct,fw,HKo,wme,UKo,JKo,dc,YKo,Ame,KKo,ZKo,Lme,eZo,oZo,rZo,Bme,tZo,aZo,mw,nZo,po,gw,sZo,xme,lZo,iZo,mn,dZo,kme,cZo,fZo,Rme,mZo,gZo,Sme,hZo,pZo,_Zo,he,JT,Pme,uZo,bZo,Mq,vZo,TZo,FZo,YT,$me,CZo,MZo,Eq,EZo,yZo,wZo,KT,Ime,AZo,LZo,yq,BZo,xZo,kZo,ZT,Dme,RZo,SZo,wq,PZo,$Zo,IZo,e7,jme,DZo,jZo,Aq,NZo,qZo,GZo,o7,Nme,OZo,XZo,Lq,VZo,zZo,WZo,r7,qme,QZo,HZo,Bq,UZo,JZo,YZo,t7,Gme,KZo,ZZo,xq,eer,oer,rer,a7,Ome,ter,aer,kq,ner,ser,ler,n7,Xme,ier,der,Rq,cer,fer,mer,Vme,ger,her,hw,wBe,cc,s7,zme,pw,per,Wme,_er,ABe,br,_w,uer,fc,ber,Qme,ver,Ter,Hme,Fer,Cer,Mer,uw,Eer,Ume,yer,wer,Aer,ft,bw,Ler,Jme,Ber,xer,mc,ker,Yme,Rer,Ser,Kme,Per,$er,Ier,Zme,Der,jer,vw,Ner,_o,Tw,qer,ege,Ger,Oer,gn,Xer,oge,Ver,zer,rge,Wer,Qer,tge,Her,Uer,Jer,Fw,l7,age,Yer,Ker,Sq,Zer,eor,oor,i7,nge,ror,tor,Pq,aor,nor,sor,sge,lor,ior,Cw,LBe,gc,d7,lge,Mw,dor,ige,cor,BBe,vr,Ew,mor,hc,gor,dge,hor,por,cge,_or,uor,bor,yw,vor,fge,Tor,For,Cor,mt,ww,Mor,mge,Eor,yor,pc,wor,gge,Aor,Lor,hge,Bor,xor,kor,pge,Ror,Sor,Aw,Por,uo,Lw,$or,_ge,Ior,Dor,hn,jor,uge,Nor,qor,bge,Gor,Oor,vge,Xor,Vor,zor,Y,c7,Tge,Wor,Qor,$q,Hor,Uor,Jor,f7,Fge,Yor,Kor,Iq,Zor,err,orr,m7,Cge,rrr,trr,Dq,arr,nrr,srr,g7,Mge,lrr,irr,jq,drr,crr,frr,h7,Ege,mrr,grr,Nq,hrr,prr,_rr,p7,yge,urr,brr,qq,vrr,Trr,Frr,_7,wge,Crr,Mrr,Gq,Err,yrr,wrr,u7,Age,Arr,Lrr,Oq,Brr,xrr,krr,b7,Lge,Rrr,Srr,Xq,Prr,$rr,Irr,v7,Bge,Drr,jrr,Vq,Nrr,qrr,Grr,T7,xge,Orr,Xrr,zq,Vrr,zrr,Wrr,F7,kge,Qrr,Hrr,Wq,Urr,Jrr,Yrr,C7,Rge,Krr,Zrr,Qq,etr,otr,rtr,M7,Sge,ttr,atr,Hq,ntr,str,ltr,E7,Pge,itr,dtr,Uq,ctr,ftr,mtr,y7,$ge,gtr,htr,Jq,ptr,_tr,utr,w7,Ige,btr,vtr,Yq,Ttr,Ftr,Ctr,A7,Dge,Mtr,Etr,Kq,ytr,wtr,Atr,L7,jge,Ltr,Btr,Zq,xtr,ktr,Rtr,B7,Nge,Str,Ptr,eG,$tr,Itr,Dtr,qge,jtr,Ntr,Bw,xBe,_c,x7,Gge,xw,qtr,Oge,Gtr,kBe,Tr,kw,Otr,uc,Xtr,Xge,Vtr,ztr,Vge,Wtr,Qtr,Htr,Rw,Utr,zge,Jtr,Ytr,Ktr,gt,Sw,Ztr,Wge,ear,oar,bc,rar,Qge,tar,aar,Hge,nar,sar,lar,Uge,iar,dar,Pw,car,bo,$w,far,Jge,mar,gar,pn,har,Yge,par,_ar,Kge,uar,bar,Zge,Tar,Far,Car,pe,k7,ehe,Mar,Ear,oG,yar,war,Aar,R7,ohe,Lar,Bar,rG,xar,kar,Rar,S7,rhe,Sar,Par,tG,$ar,Iar,Dar,P7,the,jar,Nar,aG,qar,Gar,Oar,$7,ahe,Xar,Var,nG,zar,War,Qar,I7,nhe,Har,Uar,sG,Jar,Yar,Kar,D7,she,Zar,enr,lG,onr,rnr,tnr,j7,lhe,anr,nnr,iG,snr,lnr,inr,N7,ihe,dnr,cnr,dG,fnr,mnr,gnr,q7,dhe,hnr,pnr,cG,_nr,unr,bnr,che,vnr,Tnr,Iw,RBe,vc,G7,fhe,Dw,Fnr,mhe,Cnr,SBe,Fr,jw,Mnr,Tc,Enr,ghe,ynr,wnr,hhe,Anr,Lnr,Bnr,Nw,xnr,phe,knr,Rnr,Snr,ht,qw,Pnr,_he,$nr,Inr,Fc,Dnr,uhe,jnr,Nnr,bhe,qnr,Gnr,Onr,vhe,Xnr,Vnr,Gw,znr,vo,Ow,Wnr,The,Qnr,Hnr,_n,Unr,Fhe,Jnr,Ynr,Che,Knr,Znr,Mhe,esr,osr,rsr,X,O7,Ehe,tsr,asr,fG,nsr,ssr,lsr,X7,yhe,isr,dsr,mG,csr,fsr,msr,V7,whe,gsr,hsr,gG,psr,_sr,usr,z7,Ahe,bsr,vsr,hG,Tsr,Fsr,Csr,W7,Lhe,Msr,Esr,pG,ysr,wsr,Asr,Q7,Bhe,Lsr,Bsr,_G,xsr,ksr,Rsr,H7,xhe,Ssr,Psr,uG,$sr,Isr,Dsr,U7,khe,jsr,Nsr,bG,qsr,Gsr,Osr,J7,Rhe,Xsr,Vsr,vG,zsr,Wsr,Qsr,Y7,She,Hsr,Usr,TG,Jsr,Ysr,Ksr,K7,Phe,Zsr,elr,FG,olr,rlr,tlr,Z7,$he,alr,nlr,CG,slr,llr,ilr,eF,Ihe,dlr,clr,MG,flr,mlr,glr,oF,Dhe,hlr,plr,EG,_lr,ulr,blr,rF,jhe,vlr,Tlr,yG,Flr,Clr,Mlr,tF,Nhe,Elr,ylr,wG,wlr,Alr,Llr,aF,qhe,Blr,xlr,AG,klr,Rlr,Slr,nF,Ghe,Plr,$lr,LG,Ilr,Dlr,jlr,sF,Ohe,Nlr,qlr,BG,Glr,Olr,Xlr,lF,Xhe,Vlr,zlr,xG,Wlr,Qlr,Hlr,iF,Vhe,Ulr,Jlr,kG,Ylr,Klr,Zlr,dF,zhe,eir,oir,RG,rir,tir,air,cF,Whe,nir,sir,SG,lir,iir,dir,fF,Qhe,cir,fir,PG,mir,gir,hir,mF,Hhe,pir,_ir,$G,uir,bir,vir,Uhe,Tir,Fir,Xw,PBe,Cc,gF,Jhe,Vw,Cir,Yhe,Mir,$Be,Cr,zw,Eir,Mc,yir,Khe,wir,Air,Zhe,Lir,Bir,xir,Ww,kir,epe,Rir,Sir,Pir,pt,Qw,$ir,ope,Iir,Dir,Ec,jir,rpe,Nir,qir,tpe,Gir,Oir,Xir,ape,Vir,zir,Hw,Wir,To,Uw,Qir,npe,Hir,Uir,un,Jir,spe,Yir,Kir,lpe,Zir,edr,ipe,odr,rdr,tdr,te,hF,dpe,adr,ndr,IG,sdr,ldr,idr,pF,cpe,ddr,cdr,DG,fdr,mdr,gdr,_F,fpe,hdr,pdr,jG,_dr,udr,bdr,uF,mpe,vdr,Tdr,NG,Fdr,Cdr,Mdr,bF,gpe,Edr,ydr,qG,wdr,Adr,Ldr,vF,hpe,Bdr,xdr,GG,kdr,Rdr,Sdr,TF,ppe,Pdr,$dr,OG,Idr,Ddr,jdr,FF,_pe,Ndr,qdr,XG,Gdr,Odr,Xdr,CF,upe,Vdr,zdr,VG,Wdr,Qdr,Hdr,MF,bpe,Udr,Jdr,zG,Ydr,Kdr,Zdr,EF,vpe,ecr,ocr,WG,rcr,tcr,acr,yF,Tpe,ncr,scr,QG,lcr,icr,dcr,wF,Fpe,ccr,fcr,HG,mcr,gcr,hcr,AF,Cpe,pcr,_cr,UG,ucr,bcr,vcr,LF,Mpe,Tcr,Fcr,JG,Ccr,Mcr,Ecr,BF,Epe,ycr,wcr,YG,Acr,Lcr,Bcr,xF,ype,xcr,kcr,KG,Rcr,Scr,Pcr,wpe,$cr,Icr,Jw,IBe,yc,kF,Ape,Yw,Dcr,Lpe,jcr,DBe,Mr,Kw,Ncr,wc,qcr,Bpe,Gcr,Ocr,xpe,Xcr,Vcr,zcr,Zw,Wcr,kpe,Qcr,Hcr,Ucr,_t,e6,Jcr,Rpe,Ycr,Kcr,Ac,Zcr,Spe,efr,ofr,Ppe,rfr,tfr,afr,$pe,nfr,sfr,o6,lfr,Fo,r6,ifr,Ipe,dfr,cfr,bn,ffr,Dpe,mfr,gfr,jpe,hfr,pfr,Npe,_fr,ufr,bfr,qpe,RF,Gpe,vfr,Tfr,ZG,Ffr,Cfr,Mfr,Ope,Efr,yfr,t6,jBe,Lc,SF,Xpe,a6,wfr,Vpe,Afr,NBe,Er,n6,Lfr,Bc,Bfr,zpe,xfr,kfr,Wpe,Rfr,Sfr,Pfr,s6,$fr,Qpe,Ifr,Dfr,jfr,ut,l6,Nfr,Hpe,qfr,Gfr,xc,Ofr,Upe,Xfr,Vfr,Jpe,zfr,Wfr,Qfr,Ype,Hfr,Ufr,i6,Jfr,Co,d6,Yfr,Kpe,Kfr,Zfr,vn,emr,Zpe,omr,rmr,e_e,tmr,amr,o_e,nmr,smr,lmr,K,PF,r_e,imr,dmr,eO,cmr,fmr,mmr,$F,t_e,gmr,hmr,oO,pmr,_mr,umr,IF,a_e,bmr,vmr,rO,Tmr,Fmr,Cmr,DF,n_e,Mmr,Emr,tO,ymr,wmr,Amr,jF,s_e,Lmr,Bmr,aO,xmr,kmr,Rmr,NF,l_e,Smr,Pmr,nO,$mr,Imr,Dmr,qF,i_e,jmr,Nmr,sO,qmr,Gmr,Omr,GF,d_e,Xmr,Vmr,lO,zmr,Wmr,Qmr,OF,c_e,Hmr,Umr,iO,Jmr,Ymr,Kmr,XF,f_e,Zmr,egr,dO,ogr,rgr,tgr,VF,m_e,agr,ngr,cO,sgr,lgr,igr,zF,g_e,dgr,cgr,fO,fgr,mgr,ggr,WF,h_e,hgr,pgr,mO,_gr,ugr,bgr,QF,p_e,vgr,Tgr,gO,Fgr,Cgr,Mgr,HF,__e,Egr,ygr,hO,wgr,Agr,Lgr,UF,u_e,Bgr,xgr,pO,kgr,Rgr,Sgr,JF,b_e,Pgr,$gr,_O,Igr,Dgr,jgr,YF,v_e,Ngr,qgr,uO,Ggr,Ogr,Xgr,KF,T_e,Vgr,zgr,bO,Wgr,Qgr,Hgr,ZF,F_e,Ugr,Jgr,vO,Ygr,Kgr,Zgr,C_e,ehr,ohr,c6,qBe,kc,e9,M_e,f6,rhr,E_e,thr,GBe,yr,m6,ahr,Rc,nhr,y_e,shr,lhr,w_e,ihr,dhr,chr,g6,fhr,A_e,mhr,ghr,hhr,bt,h6,phr,L_e,_hr,uhr,Sc,bhr,B_e,vhr,Thr,x_e,Fhr,Chr,Mhr,k_e,Ehr,yhr,p6,whr,Mo,_6,Ahr,R_e,Lhr,Bhr,Tn,xhr,S_e,khr,Rhr,P_e,Shr,Phr,$_e,$hr,Ihr,Dhr,Z,o9,I_e,jhr,Nhr,TO,qhr,Ghr,Ohr,r9,D_e,Xhr,Vhr,FO,zhr,Whr,Qhr,t9,j_e,Hhr,Uhr,CO,Jhr,Yhr,Khr,a9,N_e,Zhr,epr,MO,opr,rpr,tpr,n9,q_e,apr,npr,EO,spr,lpr,ipr,s9,G_e,dpr,cpr,yO,fpr,mpr,gpr,l9,O_e,hpr,ppr,wO,_pr,upr,bpr,i9,X_e,vpr,Tpr,AO,Fpr,Cpr,Mpr,d9,V_e,Epr,ypr,LO,wpr,Apr,Lpr,c9,z_e,Bpr,xpr,BO,kpr,Rpr,Spr,f9,W_e,Ppr,$pr,xO,Ipr,Dpr,jpr,m9,Q_e,Npr,qpr,kO,Gpr,Opr,Xpr,g9,H_e,Vpr,zpr,RO,Wpr,Qpr,Hpr,h9,U_e,Upr,Jpr,SO,Ypr,Kpr,Zpr,p9,J_e,e_r,o_r,PO,r_r,t_r,a_r,_9,Y_e,n_r,s_r,$O,l_r,i_r,d_r,u9,K_e,c_r,f_r,IO,m_r,g_r,h_r,b9,Z_e,p_r,__r,DO,u_r,b_r,v_r,v9,eue,T_r,F_r,jO,C_r,M_r,E_r,oue,y_r,w_r,u6,OBe,Pc,T9,rue,b6,A_r,tue,L_r,XBe,wr,v6,B_r,$c,x_r,aue,k_r,R_r,nue,S_r,P_r,$_r,T6,I_r,sue,D_r,j_r,N_r,vt,F6,q_r,lue,G_r,O_r,Ic,X_r,iue,V_r,z_r,due,W_r,Q_r,H_r,cue,U_r,J_r,C6,Y_r,Eo,M6,K_r,fue,Z_r,eur,Fn,our,mue,rur,tur,gue,aur,nur,hue,sur,lur,iur,pue,F9,_ue,dur,cur,NO,fur,mur,gur,uue,hur,pur,E6,VBe,Dc,C9,bue,y6,_ur,vue,uur,zBe,Ar,w6,bur,jc,vur,Tue,Tur,Fur,Fue,Cur,Mur,Eur,A6,yur,Cue,wur,Aur,Lur,Tt,L6,Bur,Mue,xur,kur,Nc,Rur,Eue,Sur,Pur,yue,$ur,Iur,Dur,wue,jur,Nur,B6,qur,yo,x6,Gur,Aue,Our,Xur,Cn,Vur,Lue,zur,Wur,Bue,Qur,Hur,xue,Uur,Jur,Yur,kue,M9,Rue,Kur,Zur,qO,e5r,o5r,r5r,Sue,t5r,a5r,k6,WBe,qc,E9,Pue,R6,n5r,$ue,s5r,QBe,Lr,S6,l5r,Gc,i5r,Iue,d5r,c5r,Due,f5r,m5r,g5r,P6,h5r,jue,p5r,_5r,u5r,Ft,$6,b5r,Nue,v5r,T5r,Oc,F5r,que,C5r,M5r,Gue,E5r,y5r,w5r,Oue,A5r,L5r,I6,B5r,wo,D6,x5r,Xue,k5r,R5r,Mn,S5r,Vue,P5r,$5r,zue,I5r,D5r,Wue,j5r,N5r,q5r,z,y9,Que,G5r,O5r,GO,X5r,V5r,z5r,w9,Hue,W5r,Q5r,OO,H5r,U5r,J5r,A9,Uue,Y5r,K5r,XO,Z5r,e1r,o1r,L9,Jue,r1r,t1r,VO,a1r,n1r,s1r,B9,Yue,l1r,i1r,zO,d1r,c1r,f1r,x9,Kue,m1r,g1r,WO,h1r,p1r,_1r,k9,Zue,u1r,b1r,QO,v1r,T1r,F1r,R9,e5e,C1r,M1r,HO,E1r,y1r,w1r,S9,o5e,A1r,L1r,UO,B1r,x1r,k1r,P9,r5e,R1r,S1r,JO,P1r,$1r,I1r,$9,t5e,D1r,j1r,YO,N1r,q1r,G1r,I9,a5e,O1r,X1r,KO,V1r,z1r,W1r,D9,n5e,Q1r,H1r,ZO,U1r,J1r,Y1r,j9,s5e,K1r,Z1r,eX,ebr,obr,rbr,N9,l5e,tbr,abr,oX,nbr,sbr,lbr,q9,i5e,ibr,dbr,rX,cbr,fbr,mbr,G9,d5e,gbr,hbr,tX,pbr,_br,ubr,O9,c5e,bbr,vbr,aX,Tbr,Fbr,Cbr,X9,f5e,Mbr,Ebr,nX,ybr,wbr,Abr,V9,m5e,Lbr,Bbr,sX,xbr,kbr,Rbr,z9,g5e,Sbr,Pbr,lX,$br,Ibr,Dbr,W9,h5e,jbr,Nbr,iX,qbr,Gbr,Obr,Q9,p5e,Xbr,Vbr,dX,zbr,Wbr,Qbr,H9,_5e,Hbr,Ubr,cX,Jbr,Ybr,Kbr,u5e,Zbr,e2r,j6,HBe,Xc,U9,b5e,N6,o2r,v5e,r2r,UBe,Br,q6,t2r,Vc,a2r,T5e,n2r,s2r,F5e,l2r,i2r,d2r,G6,c2r,C5e,f2r,m2r,g2r,Ct,O6,h2r,M5e,p2r,_2r,zc,u2r,E5e,b2r,v2r,y5e,T2r,F2r,C2r,w5e,M2r,E2r,X6,y2r,Ao,V6,w2r,A5e,A2r,L2r,En,B2r,L5e,x2r,k2r,B5e,R2r,S2r,x5e,P2r,$2r,I2r,yn,J9,k5e,D2r,j2r,fX,N2r,q2r,G2r,Y9,R5e,O2r,X2r,mX,V2r,z2r,W2r,K9,S5e,Q2r,H2r,gX,U2r,J2r,Y2r,Z9,P5e,K2r,Z2r,hX,evr,ovr,rvr,$5e,tvr,avr,z6,JBe,Wc,eC,I5e,W6,nvr,D5e,svr,YBe,xr,Q6,lvr,Qc,ivr,j5e,dvr,cvr,N5e,fvr,mvr,gvr,H6,hvr,q5e,pvr,_vr,uvr,Mt,U6,bvr,G5e,vvr,Tvr,Hc,Fvr,O5e,Cvr,Mvr,X5e,Evr,yvr,wvr,V5e,Avr,Lvr,J6,Bvr,Lo,Y6,xvr,z5e,kvr,Rvr,wn,Svr,W5e,Pvr,$vr,Q5e,Ivr,Dvr,H5e,jvr,Nvr,qvr,fe,oC,U5e,Gvr,Ovr,pX,Xvr,Vvr,zvr,rC,J5e,Wvr,Qvr,_X,Hvr,Uvr,Jvr,tC,Y5e,Yvr,Kvr,uX,Zvr,eTr,oTr,aC,K5e,rTr,tTr,bX,aTr,nTr,sTr,nC,Z5e,lTr,iTr,vX,dTr,cTr,fTr,sC,e1e,mTr,gTr,TX,hTr,pTr,_Tr,lC,o1e,uTr,bTr,FX,vTr,TTr,FTr,iC,r1e,CTr,MTr,CX,ETr,yTr,wTr,dC,t1e,ATr,LTr,MX,BTr,xTr,kTr,cC,a1e,RTr,STr,EX,PTr,$Tr,ITr,fC,n1e,DTr,jTr,yX,NTr,qTr,GTr,s1e,OTr,XTr,K6,KBe,Uc,mC,l1e,Z6,VTr,i1e,zTr,ZBe,kr,eA,WTr,Jc,QTr,d1e,HTr,UTr,c1e,JTr,YTr,KTr,oA,ZTr,f1e,e7r,o7r,r7r,Et,rA,t7r,m1e,a7r,n7r,Yc,s7r,g1e,l7r,i7r,h1e,d7r,c7r,f7r,p1e,m7r,g7r,tA,h7r,Bo,aA,p7r,_1e,_7r,u7r,An,b7r,u1e,v7r,T7r,b1e,F7r,C7r,v1e,M7r,E7r,y7r,ve,gC,T1e,w7r,A7r,wX,L7r,B7r,x7r,hC,F1e,k7r,R7r,AX,S7r,P7r,$7r,pC,C1e,I7r,D7r,LX,j7r,N7r,q7r,_C,M1e,G7r,O7r,BX,X7r,V7r,z7r,uC,E1e,W7r,Q7r,xX,H7r,U7r,J7r,bC,y1e,Y7r,K7r,kX,Z7r,eFr,oFr,vC,w1e,rFr,tFr,RX,aFr,nFr,sFr,TC,A1e,lFr,iFr,SX,dFr,cFr,fFr,FC,L1e,mFr,gFr,PX,hFr,pFr,_Fr,B1e,uFr,bFr,nA,exe,Kc,CC,x1e,sA,vFr,k1e,TFr,oxe,Rr,lA,FFr,Zc,CFr,R1e,MFr,EFr,S1e,yFr,wFr,AFr,iA,LFr,P1e,BFr,xFr,kFr,yt,dA,RFr,$1e,SFr,PFr,ef,$Fr,I1e,IFr,DFr,D1e,jFr,NFr,qFr,j1e,GFr,OFr,cA,XFr,xo,fA,VFr,N1e,zFr,WFr,Ln,QFr,q1e,HFr,UFr,G1e,JFr,YFr,O1e,KFr,ZFr,e9r,Te,MC,X1e,o9r,r9r,$X,t9r,a9r,n9r,EC,V1e,s9r,l9r,IX,i9r,d9r,c9r,yC,z1e,f9r,m9r,DX,g9r,h9r,p9r,wC,W1e,_9r,u9r,jX,b9r,v9r,T9r,AC,Q1e,F9r,C9r,NX,M9r,E9r,y9r,LC,H1e,w9r,A9r,qX,L9r,B9r,x9r,BC,U1e,k9r,R9r,GX,S9r,P9r,$9r,xC,J1e,I9r,D9r,OX,j9r,N9r,q9r,kC,Y1e,G9r,O9r,XX,X9r,V9r,z9r,K1e,W9r,Q9r,mA,rxe,of,RC,Z1e,gA,H9r,ebe,U9r,txe,Sr,hA,J9r,rf,Y9r,obe,K9r,Z9r,rbe,eCr,oCr,rCr,pA,tCr,tbe,aCr,nCr,sCr,wt,_A,lCr,abe,iCr,dCr,tf,cCr,nbe,fCr,mCr,sbe,gCr,hCr,pCr,lbe,_Cr,uCr,uA,bCr,ko,bA,vCr,ibe,TCr,FCr,Bn,CCr,dbe,MCr,ECr,cbe,yCr,wCr,fbe,ACr,LCr,BCr,Fe,SC,mbe,xCr,kCr,VX,RCr,SCr,PCr,PC,gbe,$Cr,ICr,zX,DCr,jCr,NCr,$C,hbe,qCr,GCr,WX,OCr,XCr,VCr,IC,pbe,zCr,WCr,QX,QCr,HCr,UCr,DC,_be,JCr,YCr,HX,KCr,ZCr,e4r,jC,ube,o4r,r4r,UX,t4r,a4r,n4r,NC,bbe,s4r,l4r,JX,i4r,d4r,c4r,qC,vbe,f4r,m4r,YX,g4r,h4r,p4r,GC,Tbe,_4r,u4r,KX,b4r,v4r,T4r,Fbe,F4r,C4r,vA,axe,af,OC,Cbe,TA,M4r,Mbe,E4r,nxe,Pr,FA,y4r,nf,w4r,Ebe,A4r,L4r,ybe,B4r,x4r,k4r,CA,R4r,wbe,S4r,P4r,$4r,At,MA,I4r,Abe,D4r,j4r,sf,N4r,Lbe,q4r,G4r,Bbe,O4r,X4r,V4r,xbe,z4r,W4r,EA,Q4r,Ro,yA,H4r,kbe,U4r,J4r,xn,Y4r,Rbe,K4r,Z4r,Sbe,eMr,oMr,Pbe,rMr,tMr,aMr,Ce,XC,$be,nMr,sMr,ZX,lMr,iMr,dMr,VC,Ibe,cMr,fMr,eV,mMr,gMr,hMr,zC,Dbe,pMr,_Mr,oV,uMr,bMr,vMr,WC,jbe,TMr,FMr,rV,CMr,MMr,EMr,QC,Nbe,yMr,wMr,tV,AMr,LMr,BMr,HC,qbe,xMr,kMr,aV,RMr,SMr,PMr,UC,Gbe,$Mr,IMr,nV,DMr,jMr,NMr,JC,Obe,qMr,GMr,sV,OMr,XMr,VMr,YC,Xbe,zMr,WMr,lV,QMr,HMr,UMr,Vbe,JMr,YMr,wA,sxe,lf,KC,zbe,AA,KMr,Wbe,ZMr,lxe,$r,LA,eEr,df,oEr,Qbe,rEr,tEr,Hbe,aEr,nEr,sEr,BA,lEr,Ube,iEr,dEr,cEr,Lt,xA,fEr,Jbe,mEr,gEr,cf,hEr,Ybe,pEr,_Er,Kbe,uEr,bEr,vEr,Zbe,TEr,FEr,kA,CEr,So,RA,MEr,e2e,EEr,yEr,kn,wEr,o2e,AEr,LEr,r2e,BEr,xEr,t2e,kEr,REr,SEr,so,ZC,a2e,PEr,$Er,iV,IEr,DEr,jEr,e4,n2e,NEr,qEr,dV,GEr,OEr,XEr,o4,s2e,VEr,zEr,cV,WEr,QEr,HEr,r4,l2e,UEr,JEr,fV,YEr,KEr,ZEr,t4,i2e,e3r,o3r,mV,r3r,t3r,a3r,a4,d2e,n3r,s3r,gV,l3r,i3r,d3r,n4,c2e,c3r,f3r,hV,m3r,g3r,h3r,f2e,p3r,_3r,SA,ixe,ff,s4,m2e,PA,u3r,g2e,b3r,dxe,Ir,$A,v3r,mf,T3r,h2e,F3r,C3r,p2e,M3r,E3r,y3r,IA,w3r,_2e,A3r,L3r,B3r,Bt,DA,x3r,u2e,k3r,R3r,gf,S3r,b2e,P3r,$3r,v2e,I3r,D3r,j3r,T2e,N3r,q3r,jA,G3r,Po,NA,O3r,F2e,X3r,V3r,Rn,z3r,C2e,W3r,Q3r,M2e,H3r,U3r,E2e,J3r,Y3r,K3r,lo,l4,y2e,Z3r,eyr,pV,oyr,ryr,tyr,i4,w2e,ayr,nyr,_V,syr,lyr,iyr,d4,A2e,dyr,cyr,uV,fyr,myr,gyr,c4,L2e,hyr,pyr,bV,_yr,uyr,byr,f4,B2e,vyr,Tyr,vV,Fyr,Cyr,Myr,m4,x2e,Eyr,yyr,TV,wyr,Ayr,Lyr,g4,k2e,Byr,xyr,FV,kyr,Ryr,Syr,R2e,Pyr,$yr,qA,cxe,hf,h4,S2e,GA,Iyr,P2e,Dyr,fxe,Dr,OA,jyr,pf,Nyr,$2e,qyr,Gyr,I2e,Oyr,Xyr,Vyr,XA,zyr,D2e,Wyr,Qyr,Hyr,xt,VA,Uyr,j2e,Jyr,Yyr,_f,Kyr,N2e,Zyr,ewr,q2e,owr,rwr,twr,G2e,awr,nwr,zA,swr,$o,WA,lwr,O2e,iwr,dwr,Sn,cwr,X2e,fwr,mwr,V2e,gwr,hwr,z2e,pwr,_wr,uwr,W2e,p4,Q2e,bwr,vwr,CV,Twr,Fwr,Cwr,H2e,Mwr,Ewr,QA,mxe,uf,_4,U2e,HA,ywr,J2e,wwr,gxe,jr,UA,Awr,bf,Lwr,Y2e,Bwr,xwr,K2e,kwr,Rwr,Swr,JA,Pwr,Z2e,$wr,Iwr,Dwr,kt,YA,jwr,eve,Nwr,qwr,vf,Gwr,ove,Owr,Xwr,rve,Vwr,zwr,Wwr,tve,Qwr,Hwr,KA,Uwr,Io,ZA,Jwr,ave,Ywr,Kwr,Pn,Zwr,nve,e6r,o6r,sve,r6r,t6r,lve,a6r,n6r,s6r,e0,u4,ive,l6r,i6r,MV,d6r,c6r,f6r,b4,dve,m6r,g6r,EV,h6r,p6r,_6r,cve,u6r,b6r,o0,hxe,Tf,v4,fve,r0,v6r,mve,T6r,pxe,Nr,t0,F6r,Ff,C6r,gve,M6r,E6r,hve,y6r,w6r,A6r,a0,L6r,pve,B6r,x6r,k6r,Rt,n0,R6r,_ve,S6r,P6r,Cf,$6r,uve,I6r,D6r,bve,j6r,N6r,q6r,vve,G6r,O6r,s0,X6r,Do,l0,V6r,Tve,z6r,W6r,$n,Q6r,Fve,H6r,U6r,Cve,J6r,Y6r,Mve,K6r,Z6r,eAr,Eve,T4,yve,oAr,rAr,yV,tAr,aAr,nAr,wve,sAr,lAr,i0,_xe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),EM=new V({}),yM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new iAr({props:{warning:"&lcub;true}",$$slots:{default:[W1t]},$$scope:{ctx:Ai}}}),wM=new V({}),AM=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/configuration_auto.py#L523"}}),xM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/configuration_auto.py#L546",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),kM=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),RM=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/configuration_auto.py#L668",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),SM=new V({}),PM=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/tokenization_auto.py#L351"}}),DM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15795/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),jM=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),NM=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),qM=new V({}),GM=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),VM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15795/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),ch=new iAr({props:{$$slots:{default:[Q1t]},$$scope:{ctx:Ai}}}),zM=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),WM=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),QM=new V({}),HM=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/processing_auto.py#L71"}}),YM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Fh=new iAr({props:{$$slots:{default:[H1t]},$$scope:{ctx:Ai}}}),KM=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),ZM=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),eE=new V({}),oE=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L686"}}),tE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),aE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),nE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lE=new V({}),iE=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L693"}}),cE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),mE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hE=new V({}),pE=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L708"}}),uE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),bE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),vE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FE=new V({}),CE=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L715"}}),EE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),yE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),wE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LE=new V({}),BE=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L722"}}),kE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),RE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),SE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$E=new V({}),IE=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L731"}}),jE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),NE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),qE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OE=new V({}),XE=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L765"}}),zE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),WE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),QE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UE=new V({}),JE=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L772"}}),KE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),ZE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),e3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r3=new V({}),t3=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L758"}}),n3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),s3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),l3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d3=new V({}),c3=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L740"}}),m3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),g3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),h3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_3=new V({}),u3=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L747"}}),v3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),T3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),F3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M3=new V({}),E3=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L781"}}),w3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),L3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x3=new V({}),k3=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L811"}}),S3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),P3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),$3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D3=new V({}),j3=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L818"}}),q3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),O3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V3=new V({}),z3=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L841"}}),Q3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),U3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new V({}),K3=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L825"}}),ey=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),ry=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new V({}),ny=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L832"}}),ly=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),dy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new V({}),gy=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L850"}}),py=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),uy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),by=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new V({}),Ty=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L857"}}),Cy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Ey=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new V({}),Ay=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L804"}}),By=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),ky=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new V({}),Py=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L788"}}),Iy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),jy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new V({}),Gy=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_auto.py#L795"}}),Xy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),zy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new V({}),Uy=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),Yy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Zy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new V({}),rw=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),aw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),sw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new V({}),dw=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),fw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),gw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new V({}),_w=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),bw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Tw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new V({}),Ew=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),ww=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Lw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new V({}),kw=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),Sw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),$w=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new V({}),jw=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),qw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Ow=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new V({}),zw=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),Qw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Uw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new V({}),Kw=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),e6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),r6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a6=new V({}),n6=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),l6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),i6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),d6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f6=new V({}),m6=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),h6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),_6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b6=new V({}),v6=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),F6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),C6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),M6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y6=new V({}),w6=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),L6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),B6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),x6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R6=new V({}),S6=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),$6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),I6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),D6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N6=new V({}),q6=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),O6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),V6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W6=new V({}),Q6=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),U6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),J6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Y6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z6=new V({}),eA=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),rA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),aA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new V({}),lA=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),dA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),fA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new V({}),hA=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),_A=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),bA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new V({}),FA=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),MA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),yA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new V({}),LA=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),xA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),RA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PA=new V({}),$A=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),DA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),NA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GA=new V({}),OA=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),VA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),WA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HA=new V({}),UA=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),YA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),ZA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r0=new V({}),t0=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),n0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),s0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),l0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15795/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15795/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15795/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Be=l(),ie=a("h1"),me=a("a"),no=a("span"),f(ce.$$.fragment),ue=l(),Go=a("span"),Li=o("Auto Classes"),Ef=l(),sa=a("p"),Bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),TM=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),ki=o("Instantiating one of "),In=a("a"),FM=o("AutoConfig"),Dn=o(", "),jn=a("a"),CM=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),MM=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),nL=o("will create a model that is an instance of "),Pi=a("a"),sL=o("BertModel"),lL=o("."),Oo=l(),Ia=a("p"),iL=o("There is one class of "),Af=a("code"),dL=o("AutoModel"),ARe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),u8e=l(),$i=a("h2"),Lf=a("a"),_W=a("span"),f(EM.$$.fragment),LRe=l(),uW=a("span"),BRe=o("Extending the Auto Classes"),b8e=l(),qn=a("p"),xRe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),bW=a("code"),kRe=o("NewModel"),RRe=o(", make sure you have a "),vW=a("code"),SRe=o("NewModelConfig"),PRe=o(` then you can add those to the auto
classes like this:`),v8e=l(),f(yM.$$.fragment),T8e=l(),cL=a("p"),$Re=o("You will then be able to use the auto classes like you would usually do!"),F8e=l(),f(Bf.$$.fragment),C8e=l(),Ii=a("h2"),xf=a("a"),TW=a("span"),f(wM.$$.fragment),IRe=l(),FW=a("span"),DRe=o("AutoConfig"),M8e=l(),Xo=a("div"),f(AM.$$.fragment),jRe=l(),LM=a("p"),NRe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fL=a("a"),qRe=o("from_pretrained()"),GRe=o(" class method."),ORe=l(),BM=a("p"),XRe=o("This class cannot be instantiated directly using "),CW=a("code"),VRe=o("__init__()"),zRe=o(" (throws an error)."),WRe=l(),fo=a("div"),f(xM.$$.fragment),QRe=l(),MW=a("p"),HRe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),URe=l(),Di=a("p"),JRe=o("The configuration class to instantiate is selected based on the "),EW=a("code"),YRe=o("model_type"),KRe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yW=a("code"),ZRe=o("pretrained_model_name_or_path"),eSe=o(":"),oSe=l(),v=a("ul"),kf=a("li"),wW=a("strong"),rSe=o("albert"),tSe=o(" \u2014 "),mL=a("a"),aSe=o("AlbertConfig"),nSe=o(" (ALBERT model)"),sSe=l(),Rf=a("li"),AW=a("strong"),lSe=o("bart"),iSe=o(" \u2014 "),gL=a("a"),dSe=o("BartConfig"),cSe=o(" (BART model)"),fSe=l(),Sf=a("li"),LW=a("strong"),mSe=o("beit"),gSe=o(" \u2014 "),hL=a("a"),hSe=o("BeitConfig"),pSe=o(" (BEiT model)"),_Se=l(),Pf=a("li"),BW=a("strong"),uSe=o("bert"),bSe=o(" \u2014 "),pL=a("a"),vSe=o("BertConfig"),TSe=o(" (BERT model)"),FSe=l(),$f=a("li"),xW=a("strong"),CSe=o("bert-generation"),MSe=o(" \u2014 "),_L=a("a"),ESe=o("BertGenerationConfig"),ySe=o(" (Bert Generation model)"),wSe=l(),If=a("li"),kW=a("strong"),ASe=o("big_bird"),LSe=o(" \u2014 "),uL=a("a"),BSe=o("BigBirdConfig"),xSe=o(" (BigBird model)"),kSe=l(),Df=a("li"),RW=a("strong"),RSe=o("bigbird_pegasus"),SSe=o(" \u2014 "),bL=a("a"),PSe=o("BigBirdPegasusConfig"),$Se=o(" (BigBirdPegasus model)"),ISe=l(),jf=a("li"),SW=a("strong"),DSe=o("blenderbot"),jSe=o(" \u2014 "),vL=a("a"),NSe=o("BlenderbotConfig"),qSe=o(" (Blenderbot model)"),GSe=l(),Nf=a("li"),PW=a("strong"),OSe=o("blenderbot-small"),XSe=o(" \u2014 "),TL=a("a"),VSe=o("BlenderbotSmallConfig"),zSe=o(" (BlenderbotSmall model)"),WSe=l(),qf=a("li"),$W=a("strong"),QSe=o("camembert"),HSe=o(" \u2014 "),FL=a("a"),USe=o("CamembertConfig"),JSe=o(" (CamemBERT model)"),YSe=l(),Gf=a("li"),IW=a("strong"),KSe=o("canine"),ZSe=o(" \u2014 "),CL=a("a"),ePe=o("CanineConfig"),oPe=o(" (Canine model)"),rPe=l(),Of=a("li"),DW=a("strong"),tPe=o("clip"),aPe=o(" \u2014 "),ML=a("a"),nPe=o("CLIPConfig"),sPe=o(" (CLIP model)"),lPe=l(),Xf=a("li"),jW=a("strong"),iPe=o("convbert"),dPe=o(" \u2014 "),EL=a("a"),cPe=o("ConvBertConfig"),fPe=o(" (ConvBERT model)"),mPe=l(),Vf=a("li"),NW=a("strong"),gPe=o("convnext"),hPe=o(" \u2014 "),yL=a("a"),pPe=o("ConvNextConfig"),_Pe=o(" (ConvNext model)"),uPe=l(),zf=a("li"),qW=a("strong"),bPe=o("ctrl"),vPe=o(" \u2014 "),wL=a("a"),TPe=o("CTRLConfig"),FPe=o(" (CTRL model)"),CPe=l(),Wf=a("li"),GW=a("strong"),MPe=o("data2vec-audio"),EPe=o(" \u2014 "),AL=a("a"),yPe=o("Data2VecAudioConfig"),wPe=o(" (Data2VecAudio model)"),APe=l(),Qf=a("li"),OW=a("strong"),LPe=o("data2vec-text"),BPe=o(" \u2014 "),LL=a("a"),xPe=o("Data2VecTextConfig"),kPe=o(" (Data2VecText model)"),RPe=l(),Hf=a("li"),XW=a("strong"),SPe=o("deberta"),PPe=o(" \u2014 "),BL=a("a"),$Pe=o("DebertaConfig"),IPe=o(" (DeBERTa model)"),DPe=l(),Uf=a("li"),VW=a("strong"),jPe=o("deberta-v2"),NPe=o(" \u2014 "),xL=a("a"),qPe=o("DebertaV2Config"),GPe=o(" (DeBERTa-v2 model)"),OPe=l(),Jf=a("li"),zW=a("strong"),XPe=o("deit"),VPe=o(" \u2014 "),kL=a("a"),zPe=o("DeiTConfig"),WPe=o(" (DeiT model)"),QPe=l(),Yf=a("li"),WW=a("strong"),HPe=o("detr"),UPe=o(" \u2014 "),RL=a("a"),JPe=o("DetrConfig"),YPe=o(" (DETR model)"),KPe=l(),Kf=a("li"),QW=a("strong"),ZPe=o("distilbert"),e$e=o(" \u2014 "),SL=a("a"),o$e=o("DistilBertConfig"),r$e=o(" (DistilBERT model)"),t$e=l(),Zf=a("li"),HW=a("strong"),a$e=o("dpr"),n$e=o(" \u2014 "),PL=a("a"),s$e=o("DPRConfig"),l$e=o(" (DPR model)"),i$e=l(),em=a("li"),UW=a("strong"),d$e=o("electra"),c$e=o(" \u2014 "),$L=a("a"),f$e=o("ElectraConfig"),m$e=o(" (ELECTRA model)"),g$e=l(),om=a("li"),JW=a("strong"),h$e=o("encoder-decoder"),p$e=o(" \u2014 "),IL=a("a"),_$e=o("EncoderDecoderConfig"),u$e=o(" (Encoder decoder model)"),b$e=l(),rm=a("li"),YW=a("strong"),v$e=o("flaubert"),T$e=o(" \u2014 "),DL=a("a"),F$e=o("FlaubertConfig"),C$e=o(" (FlauBERT model)"),M$e=l(),tm=a("li"),KW=a("strong"),E$e=o("fnet"),y$e=o(" \u2014 "),jL=a("a"),w$e=o("FNetConfig"),A$e=o(" (FNet model)"),L$e=l(),am=a("li"),ZW=a("strong"),B$e=o("fsmt"),x$e=o(" \u2014 "),NL=a("a"),k$e=o("FSMTConfig"),R$e=o(" (FairSeq Machine-Translation model)"),S$e=l(),nm=a("li"),eQ=a("strong"),P$e=o("funnel"),$$e=o(" \u2014 "),qL=a("a"),I$e=o("FunnelConfig"),D$e=o(" (Funnel Transformer model)"),j$e=l(),sm=a("li"),oQ=a("strong"),N$e=o("gpt2"),q$e=o(" \u2014 "),GL=a("a"),G$e=o("GPT2Config"),O$e=o(" (OpenAI GPT-2 model)"),X$e=l(),lm=a("li"),rQ=a("strong"),V$e=o("gpt_neo"),z$e=o(" \u2014 "),OL=a("a"),W$e=o("GPTNeoConfig"),Q$e=o(" (GPT Neo model)"),H$e=l(),im=a("li"),tQ=a("strong"),U$e=o("gptj"),J$e=o(" \u2014 "),XL=a("a"),Y$e=o("GPTJConfig"),K$e=o(" (GPT-J model)"),Z$e=l(),dm=a("li"),aQ=a("strong"),eIe=o("hubert"),oIe=o(" \u2014 "),VL=a("a"),rIe=o("HubertConfig"),tIe=o(" (Hubert model)"),aIe=l(),cm=a("li"),nQ=a("strong"),nIe=o("ibert"),sIe=o(" \u2014 "),zL=a("a"),lIe=o("IBertConfig"),iIe=o(" (I-BERT model)"),dIe=l(),fm=a("li"),sQ=a("strong"),cIe=o("imagegpt"),fIe=o(" \u2014 "),WL=a("a"),mIe=o("ImageGPTConfig"),gIe=o(" (ImageGPT model)"),hIe=l(),mm=a("li"),lQ=a("strong"),pIe=o("layoutlm"),_Ie=o(" \u2014 "),QL=a("a"),uIe=o("LayoutLMConfig"),bIe=o(" (LayoutLM model)"),vIe=l(),gm=a("li"),iQ=a("strong"),TIe=o("layoutlmv2"),FIe=o(" \u2014 "),HL=a("a"),CIe=o("LayoutLMv2Config"),MIe=o(" (LayoutLMv2 model)"),EIe=l(),hm=a("li"),dQ=a("strong"),yIe=o("led"),wIe=o(" \u2014 "),UL=a("a"),AIe=o("LEDConfig"),LIe=o(" (LED model)"),BIe=l(),pm=a("li"),cQ=a("strong"),xIe=o("longformer"),kIe=o(" \u2014 "),JL=a("a"),RIe=o("LongformerConfig"),SIe=o(" (Longformer model)"),PIe=l(),_m=a("li"),fQ=a("strong"),$Ie=o("luke"),IIe=o(" \u2014 "),YL=a("a"),DIe=o("LukeConfig"),jIe=o(" (LUKE model)"),NIe=l(),um=a("li"),mQ=a("strong"),qIe=o("lxmert"),GIe=o(" \u2014 "),KL=a("a"),OIe=o("LxmertConfig"),XIe=o(" (LXMERT model)"),VIe=l(),bm=a("li"),gQ=a("strong"),zIe=o("m2m_100"),WIe=o(" \u2014 "),ZL=a("a"),QIe=o("M2M100Config"),HIe=o(" (M2M100 model)"),UIe=l(),vm=a("li"),hQ=a("strong"),JIe=o("marian"),YIe=o(" \u2014 "),e8=a("a"),KIe=o("MarianConfig"),ZIe=o(" (Marian model)"),eDe=l(),Tm=a("li"),pQ=a("strong"),oDe=o("mbart"),rDe=o(" \u2014 "),o8=a("a"),tDe=o("MBartConfig"),aDe=o(" (mBART model)"),nDe=l(),Fm=a("li"),_Q=a("strong"),sDe=o("megatron-bert"),lDe=o(" \u2014 "),r8=a("a"),iDe=o("MegatronBertConfig"),dDe=o(" (MegatronBert model)"),cDe=l(),Cm=a("li"),uQ=a("strong"),fDe=o("mobilebert"),mDe=o(" \u2014 "),t8=a("a"),gDe=o("MobileBertConfig"),hDe=o(" (MobileBERT model)"),pDe=l(),Mm=a("li"),bQ=a("strong"),_De=o("mpnet"),uDe=o(" \u2014 "),a8=a("a"),bDe=o("MPNetConfig"),vDe=o(" (MPNet model)"),TDe=l(),Em=a("li"),vQ=a("strong"),FDe=o("mt5"),CDe=o(" \u2014 "),n8=a("a"),MDe=o("MT5Config"),EDe=o(" (mT5 model)"),yDe=l(),ym=a("li"),TQ=a("strong"),wDe=o("nystromformer"),ADe=o(" \u2014 "),s8=a("a"),LDe=o("NystromformerConfig"),BDe=o(" (Nystromformer model)"),xDe=l(),wm=a("li"),FQ=a("strong"),kDe=o("openai-gpt"),RDe=o(" \u2014 "),l8=a("a"),SDe=o("OpenAIGPTConfig"),PDe=o(" (OpenAI GPT model)"),$De=l(),Am=a("li"),CQ=a("strong"),IDe=o("pegasus"),DDe=o(" \u2014 "),i8=a("a"),jDe=o("PegasusConfig"),NDe=o(" (Pegasus model)"),qDe=l(),Lm=a("li"),MQ=a("strong"),GDe=o("perceiver"),ODe=o(" \u2014 "),d8=a("a"),XDe=o("PerceiverConfig"),VDe=o(" (Perceiver model)"),zDe=l(),Bm=a("li"),EQ=a("strong"),WDe=o("plbart"),QDe=o(" \u2014 "),c8=a("a"),HDe=o("PLBartConfig"),UDe=o(" (PLBart model)"),JDe=l(),xm=a("li"),yQ=a("strong"),YDe=o("poolformer"),KDe=o(" \u2014 "),f8=a("a"),ZDe=o("PoolFormerConfig"),eje=o(" (PoolFormer model)"),oje=l(),km=a("li"),wQ=a("strong"),rje=o("prophetnet"),tje=o(" \u2014 "),m8=a("a"),aje=o("ProphetNetConfig"),nje=o(" (ProphetNet model)"),sje=l(),Rm=a("li"),AQ=a("strong"),lje=o("qdqbert"),ije=o(" \u2014 "),g8=a("a"),dje=o("QDQBertConfig"),cje=o(" (QDQBert model)"),fje=l(),Sm=a("li"),LQ=a("strong"),mje=o("rag"),gje=o(" \u2014 "),h8=a("a"),hje=o("RagConfig"),pje=o(" (RAG model)"),_je=l(),Pm=a("li"),BQ=a("strong"),uje=o("realm"),bje=o(" \u2014 "),p8=a("a"),vje=o("RealmConfig"),Tje=o(" (Realm model)"),Fje=l(),$m=a("li"),xQ=a("strong"),Cje=o("reformer"),Mje=o(" \u2014 "),_8=a("a"),Eje=o("ReformerConfig"),yje=o(" (Reformer model)"),wje=l(),Im=a("li"),kQ=a("strong"),Aje=o("rembert"),Lje=o(" \u2014 "),u8=a("a"),Bje=o("RemBertConfig"),xje=o(" (RemBERT model)"),kje=l(),Dm=a("li"),RQ=a("strong"),Rje=o("retribert"),Sje=o(" \u2014 "),b8=a("a"),Pje=o("RetriBertConfig"),$je=o(" (RetriBERT model)"),Ije=l(),jm=a("li"),SQ=a("strong"),Dje=o("roberta"),jje=o(" \u2014 "),v8=a("a"),Nje=o("RobertaConfig"),qje=o(" (RoBERTa model)"),Gje=l(),Nm=a("li"),PQ=a("strong"),Oje=o("roformer"),Xje=o(" \u2014 "),T8=a("a"),Vje=o("RoFormerConfig"),zje=o(" (RoFormer model)"),Wje=l(),qm=a("li"),$Q=a("strong"),Qje=o("segformer"),Hje=o(" \u2014 "),F8=a("a"),Uje=o("SegformerConfig"),Jje=o(" (SegFormer model)"),Yje=l(),Gm=a("li"),IQ=a("strong"),Kje=o("sew"),Zje=o(" \u2014 "),C8=a("a"),eNe=o("SEWConfig"),oNe=o(" (SEW model)"),rNe=l(),Om=a("li"),DQ=a("strong"),tNe=o("sew-d"),aNe=o(" \u2014 "),M8=a("a"),nNe=o("SEWDConfig"),sNe=o(" (SEW-D model)"),lNe=l(),Xm=a("li"),jQ=a("strong"),iNe=o("speech-encoder-decoder"),dNe=o(" \u2014 "),E8=a("a"),cNe=o("SpeechEncoderDecoderConfig"),fNe=o(" (Speech Encoder decoder model)"),mNe=l(),Vm=a("li"),NQ=a("strong"),gNe=o("speech_to_text"),hNe=o(" \u2014 "),y8=a("a"),pNe=o("Speech2TextConfig"),_Ne=o(" (Speech2Text model)"),uNe=l(),zm=a("li"),qQ=a("strong"),bNe=o("speech_to_text_2"),vNe=o(" \u2014 "),w8=a("a"),TNe=o("Speech2Text2Config"),FNe=o(" (Speech2Text2 model)"),CNe=l(),Wm=a("li"),GQ=a("strong"),MNe=o("splinter"),ENe=o(" \u2014 "),A8=a("a"),yNe=o("SplinterConfig"),wNe=o(" (Splinter model)"),ANe=l(),Qm=a("li"),OQ=a("strong"),LNe=o("squeezebert"),BNe=o(" \u2014 "),L8=a("a"),xNe=o("SqueezeBertConfig"),kNe=o(" (SqueezeBERT model)"),RNe=l(),Hm=a("li"),XQ=a("strong"),SNe=o("swin"),PNe=o(" \u2014 "),B8=a("a"),$Ne=o("SwinConfig"),INe=o(" (Swin model)"),DNe=l(),Um=a("li"),VQ=a("strong"),jNe=o("t5"),NNe=o(" \u2014 "),x8=a("a"),qNe=o("T5Config"),GNe=o(" (T5 model)"),ONe=l(),Jm=a("li"),zQ=a("strong"),XNe=o("tapas"),VNe=o(" \u2014 "),k8=a("a"),zNe=o("TapasConfig"),WNe=o(" (TAPAS model)"),QNe=l(),Ym=a("li"),WQ=a("strong"),HNe=o("transfo-xl"),UNe=o(" \u2014 "),R8=a("a"),JNe=o("TransfoXLConfig"),YNe=o(" (Transformer-XL model)"),KNe=l(),Km=a("li"),QQ=a("strong"),ZNe=o("trocr"),eqe=o(" \u2014 "),S8=a("a"),oqe=o("TrOCRConfig"),rqe=o(" (TrOCR model)"),tqe=l(),Zm=a("li"),HQ=a("strong"),aqe=o("unispeech"),nqe=o(" \u2014 "),P8=a("a"),sqe=o("UniSpeechConfig"),lqe=o(" (UniSpeech model)"),iqe=l(),eg=a("li"),UQ=a("strong"),dqe=o("unispeech-sat"),cqe=o(" \u2014 "),$8=a("a"),fqe=o("UniSpeechSatConfig"),mqe=o(" (UniSpeechSat model)"),gqe=l(),og=a("li"),JQ=a("strong"),hqe=o("vilt"),pqe=o(" \u2014 "),I8=a("a"),_qe=o("ViltConfig"),uqe=o(" (ViLT model)"),bqe=l(),rg=a("li"),YQ=a("strong"),vqe=o("vision-encoder-decoder"),Tqe=o(" \u2014 "),D8=a("a"),Fqe=o("VisionEncoderDecoderConfig"),Cqe=o(" (Vision Encoder decoder model)"),Mqe=l(),tg=a("li"),KQ=a("strong"),Eqe=o("vision-text-dual-encoder"),yqe=o(" \u2014 "),j8=a("a"),wqe=o("VisionTextDualEncoderConfig"),Aqe=o(" (VisionTextDualEncoder model)"),Lqe=l(),ag=a("li"),ZQ=a("strong"),Bqe=o("visual_bert"),xqe=o(" \u2014 "),N8=a("a"),kqe=o("VisualBertConfig"),Rqe=o(" (VisualBert model)"),Sqe=l(),ng=a("li"),eH=a("strong"),Pqe=o("vit"),$qe=o(" \u2014 "),q8=a("a"),Iqe=o("ViTConfig"),Dqe=o(" (ViT model)"),jqe=l(),sg=a("li"),oH=a("strong"),Nqe=o("vit_mae"),qqe=o(" \u2014 "),G8=a("a"),Gqe=o("ViTMAEConfig"),Oqe=o(" (ViTMAE model)"),Xqe=l(),lg=a("li"),rH=a("strong"),Vqe=o("wav2vec2"),zqe=o(" \u2014 "),O8=a("a"),Wqe=o("Wav2Vec2Config"),Qqe=o(" (Wav2Vec2 model)"),Hqe=l(),ig=a("li"),tH=a("strong"),Uqe=o("wavlm"),Jqe=o(" \u2014 "),X8=a("a"),Yqe=o("WavLMConfig"),Kqe=o(" (WavLM model)"),Zqe=l(),dg=a("li"),aH=a("strong"),eGe=o("xglm"),oGe=o(" \u2014 "),V8=a("a"),rGe=o("XGLMConfig"),tGe=o(" (XGLM model)"),aGe=l(),cg=a("li"),nH=a("strong"),nGe=o("xlm"),sGe=o(" \u2014 "),z8=a("a"),lGe=o("XLMConfig"),iGe=o(" (XLM model)"),dGe=l(),fg=a("li"),sH=a("strong"),cGe=o("xlm-prophetnet"),fGe=o(" \u2014 "),W8=a("a"),mGe=o("XLMProphetNetConfig"),gGe=o(" (XLMProphetNet model)"),hGe=l(),mg=a("li"),lH=a("strong"),pGe=o("xlm-roberta"),_Ge=o(" \u2014 "),Q8=a("a"),uGe=o("XLMRobertaConfig"),bGe=o(" (XLM-RoBERTa model)"),vGe=l(),gg=a("li"),iH=a("strong"),TGe=o("xlm-roberta-xl"),FGe=o(" \u2014 "),H8=a("a"),CGe=o("XLMRobertaXLConfig"),MGe=o(" (XLM-RoBERTa-XL model)"),EGe=l(),hg=a("li"),dH=a("strong"),yGe=o("xlnet"),wGe=o(" \u2014 "),U8=a("a"),AGe=o("XLNetConfig"),LGe=o(" (XLNet model)"),BGe=l(),pg=a("li"),cH=a("strong"),xGe=o("yoso"),kGe=o(" \u2014 "),J8=a("a"),RGe=o("YosoConfig"),SGe=o(" (YOSO model)"),PGe=l(),fH=a("p"),$Ge=o("Examples:"),IGe=l(),f(kM.$$.fragment),DGe=l(),_g=a("div"),f(RM.$$.fragment),jGe=l(),mH=a("p"),NGe=o("Register a new configuration for this class."),E8e=l(),ji=a("h2"),ug=a("a"),gH=a("span"),f(SM.$$.fragment),qGe=l(),hH=a("span"),GGe=o("AutoTokenizer"),y8e=l(),Vo=a("div"),f(PM.$$.fragment),OGe=l(),$M=a("p"),XGe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Y8=a("a"),VGe=o("AutoTokenizer.from_pretrained()"),zGe=o(" class method."),WGe=l(),IM=a("p"),QGe=o("This class cannot be instantiated directly using "),pH=a("code"),HGe=o("__init__()"),UGe=o(" (throws an error)."),JGe=l(),mo=a("div"),f(DM.$$.fragment),YGe=l(),_H=a("p"),KGe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZGe=l(),Da=a("p"),eOe=o("The tokenizer class to instantiate is selected based on the "),uH=a("code"),oOe=o("model_type"),rOe=o(` property of the config object (either
passed as an argument or loaded from `),bH=a("code"),tOe=o("pretrained_model_name_or_path"),aOe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vH=a("code"),nOe=o("pretrained_model_name_or_path"),sOe=o(":"),lOe=l(),M=a("ul"),Gn=a("li"),TH=a("strong"),iOe=o("albert"),dOe=o(" \u2014 "),K8=a("a"),cOe=o("AlbertTokenizer"),fOe=o(" or "),Z8=a("a"),mOe=o("AlbertTokenizerFast"),gOe=o(" (ALBERT model)"),hOe=l(),On=a("li"),FH=a("strong"),pOe=o("bart"),_Oe=o(" \u2014 "),eB=a("a"),uOe=o("BartTokenizer"),bOe=o(" or "),oB=a("a"),vOe=o("BartTokenizerFast"),TOe=o(" (BART model)"),FOe=l(),Xn=a("li"),CH=a("strong"),COe=o("barthez"),MOe=o(" \u2014 "),rB=a("a"),EOe=o("BarthezTokenizer"),yOe=o(" or "),tB=a("a"),wOe=o("BarthezTokenizerFast"),AOe=o(" (BARThez model)"),LOe=l(),bg=a("li"),MH=a("strong"),BOe=o("bartpho"),xOe=o(" \u2014 "),aB=a("a"),kOe=o("BartphoTokenizer"),ROe=o(" (BARTpho model)"),SOe=l(),Vn=a("li"),EH=a("strong"),POe=o("bert"),$Oe=o(" \u2014 "),nB=a("a"),IOe=o("BertTokenizer"),DOe=o(" or "),sB=a("a"),jOe=o("BertTokenizerFast"),NOe=o(" (BERT model)"),qOe=l(),vg=a("li"),yH=a("strong"),GOe=o("bert-generation"),OOe=o(" \u2014 "),lB=a("a"),XOe=o("BertGenerationTokenizer"),VOe=o(" (Bert Generation model)"),zOe=l(),Tg=a("li"),wH=a("strong"),WOe=o("bert-japanese"),QOe=o(" \u2014 "),iB=a("a"),HOe=o("BertJapaneseTokenizer"),UOe=o(" (BertJapanese model)"),JOe=l(),Fg=a("li"),AH=a("strong"),YOe=o("bertweet"),KOe=o(" \u2014 "),dB=a("a"),ZOe=o("BertweetTokenizer"),eXe=o(" (Bertweet model)"),oXe=l(),zn=a("li"),LH=a("strong"),rXe=o("big_bird"),tXe=o(" \u2014 "),cB=a("a"),aXe=o("BigBirdTokenizer"),nXe=o(" or "),fB=a("a"),sXe=o("BigBirdTokenizerFast"),lXe=o(" (BigBird model)"),iXe=l(),Wn=a("li"),BH=a("strong"),dXe=o("bigbird_pegasus"),cXe=o(" \u2014 "),mB=a("a"),fXe=o("PegasusTokenizer"),mXe=o(" or "),gB=a("a"),gXe=o("PegasusTokenizerFast"),hXe=o(" (BigBirdPegasus model)"),pXe=l(),Qn=a("li"),xH=a("strong"),_Xe=o("blenderbot"),uXe=o(" \u2014 "),hB=a("a"),bXe=o("BlenderbotTokenizer"),vXe=o(" or "),pB=a("a"),TXe=o("BlenderbotTokenizerFast"),FXe=o(" (Blenderbot model)"),CXe=l(),Cg=a("li"),kH=a("strong"),MXe=o("blenderbot-small"),EXe=o(" \u2014 "),_B=a("a"),yXe=o("BlenderbotSmallTokenizer"),wXe=o(" (BlenderbotSmall model)"),AXe=l(),Mg=a("li"),RH=a("strong"),LXe=o("byt5"),BXe=o(" \u2014 "),uB=a("a"),xXe=o("ByT5Tokenizer"),kXe=o(" (ByT5 model)"),RXe=l(),Hn=a("li"),SH=a("strong"),SXe=o("camembert"),PXe=o(" \u2014 "),bB=a("a"),$Xe=o("CamembertTokenizer"),IXe=o(" or "),vB=a("a"),DXe=o("CamembertTokenizerFast"),jXe=o(" (CamemBERT model)"),NXe=l(),Eg=a("li"),PH=a("strong"),qXe=o("canine"),GXe=o(" \u2014 "),TB=a("a"),OXe=o("CanineTokenizer"),XXe=o(" (Canine model)"),VXe=l(),Un=a("li"),$H=a("strong"),zXe=o("clip"),WXe=o(" \u2014 "),FB=a("a"),QXe=o("CLIPTokenizer"),HXe=o(" or "),CB=a("a"),UXe=o("CLIPTokenizerFast"),JXe=o(" (CLIP model)"),YXe=l(),Jn=a("li"),IH=a("strong"),KXe=o("convbert"),ZXe=o(" \u2014 "),MB=a("a"),eVe=o("ConvBertTokenizer"),oVe=o(" or "),EB=a("a"),rVe=o("ConvBertTokenizerFast"),tVe=o(" (ConvBERT model)"),aVe=l(),Yn=a("li"),DH=a("strong"),nVe=o("cpm"),sVe=o(" \u2014 "),yB=a("a"),lVe=o("CpmTokenizer"),iVe=o(" or "),jH=a("code"),dVe=o("CpmTokenizerFast"),cVe=o(" (CPM model)"),fVe=l(),yg=a("li"),NH=a("strong"),mVe=o("ctrl"),gVe=o(" \u2014 "),wB=a("a"),hVe=o("CTRLTokenizer"),pVe=o(" (CTRL model)"),_Ve=l(),Kn=a("li"),qH=a("strong"),uVe=o("deberta"),bVe=o(" \u2014 "),AB=a("a"),vVe=o("DebertaTokenizer"),TVe=o(" or "),LB=a("a"),FVe=o("DebertaTokenizerFast"),CVe=o(" (DeBERTa model)"),MVe=l(),wg=a("li"),GH=a("strong"),EVe=o("deberta-v2"),yVe=o(" \u2014 "),BB=a("a"),wVe=o("DebertaV2Tokenizer"),AVe=o(" (DeBERTa-v2 model)"),LVe=l(),Zn=a("li"),OH=a("strong"),BVe=o("distilbert"),xVe=o(" \u2014 "),xB=a("a"),kVe=o("DistilBertTokenizer"),RVe=o(" or "),kB=a("a"),SVe=o("DistilBertTokenizerFast"),PVe=o(" (DistilBERT model)"),$Ve=l(),es=a("li"),XH=a("strong"),IVe=o("dpr"),DVe=o(" \u2014 "),RB=a("a"),jVe=o("DPRQuestionEncoderTokenizer"),NVe=o(" or "),SB=a("a"),qVe=o("DPRQuestionEncoderTokenizerFast"),GVe=o(" (DPR model)"),OVe=l(),os=a("li"),VH=a("strong"),XVe=o("electra"),VVe=o(" \u2014 "),PB=a("a"),zVe=o("ElectraTokenizer"),WVe=o(" or "),$B=a("a"),QVe=o("ElectraTokenizerFast"),HVe=o(" (ELECTRA model)"),UVe=l(),Ag=a("li"),zH=a("strong"),JVe=o("flaubert"),YVe=o(" \u2014 "),IB=a("a"),KVe=o("FlaubertTokenizer"),ZVe=o(" (FlauBERT model)"),eze=l(),rs=a("li"),WH=a("strong"),oze=o("fnet"),rze=o(" \u2014 "),DB=a("a"),tze=o("FNetTokenizer"),aze=o(" or "),jB=a("a"),nze=o("FNetTokenizerFast"),sze=o(" (FNet model)"),lze=l(),Lg=a("li"),QH=a("strong"),ize=o("fsmt"),dze=o(" \u2014 "),NB=a("a"),cze=o("FSMTTokenizer"),fze=o(" (FairSeq Machine-Translation model)"),mze=l(),ts=a("li"),HH=a("strong"),gze=o("funnel"),hze=o(" \u2014 "),qB=a("a"),pze=o("FunnelTokenizer"),_ze=o(" or "),GB=a("a"),uze=o("FunnelTokenizerFast"),bze=o(" (Funnel Transformer model)"),vze=l(),as=a("li"),UH=a("strong"),Tze=o("gpt2"),Fze=o(" \u2014 "),OB=a("a"),Cze=o("GPT2Tokenizer"),Mze=o(" or "),XB=a("a"),Eze=o("GPT2TokenizerFast"),yze=o(" (OpenAI GPT-2 model)"),wze=l(),ns=a("li"),JH=a("strong"),Aze=o("gpt_neo"),Lze=o(" \u2014 "),VB=a("a"),Bze=o("GPT2Tokenizer"),xze=o(" or "),zB=a("a"),kze=o("GPT2TokenizerFast"),Rze=o(" (GPT Neo model)"),Sze=l(),ss=a("li"),YH=a("strong"),Pze=o("herbert"),$ze=o(" \u2014 "),WB=a("a"),Ize=o("HerbertTokenizer"),Dze=o(" or "),QB=a("a"),jze=o("HerbertTokenizerFast"),Nze=o(" (HerBERT model)"),qze=l(),Bg=a("li"),KH=a("strong"),Gze=o("hubert"),Oze=o(" \u2014 "),HB=a("a"),Xze=o("Wav2Vec2CTCTokenizer"),Vze=o(" (Hubert model)"),zze=l(),ls=a("li"),ZH=a("strong"),Wze=o("ibert"),Qze=o(" \u2014 "),UB=a("a"),Hze=o("RobertaTokenizer"),Uze=o(" or "),JB=a("a"),Jze=o("RobertaTokenizerFast"),Yze=o(" (I-BERT model)"),Kze=l(),is=a("li"),eU=a("strong"),Zze=o("layoutlm"),eWe=o(" \u2014 "),YB=a("a"),oWe=o("LayoutLMTokenizer"),rWe=o(" or "),KB=a("a"),tWe=o("LayoutLMTokenizerFast"),aWe=o(" (LayoutLM model)"),nWe=l(),ds=a("li"),oU=a("strong"),sWe=o("layoutlmv2"),lWe=o(" \u2014 "),ZB=a("a"),iWe=o("LayoutLMv2Tokenizer"),dWe=o(" or "),ex=a("a"),cWe=o("LayoutLMv2TokenizerFast"),fWe=o(" (LayoutLMv2 model)"),mWe=l(),cs=a("li"),rU=a("strong"),gWe=o("layoutxlm"),hWe=o(" \u2014 "),ox=a("a"),pWe=o("LayoutXLMTokenizer"),_We=o(" or "),rx=a("a"),uWe=o("LayoutXLMTokenizerFast"),bWe=o(" (LayoutXLM model)"),vWe=l(),fs=a("li"),tU=a("strong"),TWe=o("led"),FWe=o(" \u2014 "),tx=a("a"),CWe=o("LEDTokenizer"),MWe=o(" or "),ax=a("a"),EWe=o("LEDTokenizerFast"),yWe=o(" (LED model)"),wWe=l(),ms=a("li"),aU=a("strong"),AWe=o("longformer"),LWe=o(" \u2014 "),nx=a("a"),BWe=o("LongformerTokenizer"),xWe=o(" or "),sx=a("a"),kWe=o("LongformerTokenizerFast"),RWe=o(" (Longformer model)"),SWe=l(),xg=a("li"),nU=a("strong"),PWe=o("luke"),$We=o(" \u2014 "),lx=a("a"),IWe=o("LukeTokenizer"),DWe=o(" (LUKE model)"),jWe=l(),gs=a("li"),sU=a("strong"),NWe=o("lxmert"),qWe=o(" \u2014 "),ix=a("a"),GWe=o("LxmertTokenizer"),OWe=o(" or "),dx=a("a"),XWe=o("LxmertTokenizerFast"),VWe=o(" (LXMERT model)"),zWe=l(),kg=a("li"),lU=a("strong"),WWe=o("m2m_100"),QWe=o(" \u2014 "),cx=a("a"),HWe=o("M2M100Tokenizer"),UWe=o(" (M2M100 model)"),JWe=l(),Rg=a("li"),iU=a("strong"),YWe=o("marian"),KWe=o(" \u2014 "),fx=a("a"),ZWe=o("MarianTokenizer"),eQe=o(" (Marian model)"),oQe=l(),hs=a("li"),dU=a("strong"),rQe=o("mbart"),tQe=o(" \u2014 "),mx=a("a"),aQe=o("MBartTokenizer"),nQe=o(" or "),gx=a("a"),sQe=o("MBartTokenizerFast"),lQe=o(" (mBART model)"),iQe=l(),ps=a("li"),cU=a("strong"),dQe=o("mbart50"),cQe=o(" \u2014 "),hx=a("a"),fQe=o("MBart50Tokenizer"),mQe=o(" or "),px=a("a"),gQe=o("MBart50TokenizerFast"),hQe=o(" (mBART-50 model)"),pQe=l(),Sg=a("li"),fU=a("strong"),_Qe=o("mluke"),uQe=o(" \u2014 "),_x=a("a"),bQe=o("MLukeTokenizer"),vQe=o(" (mLUKE model)"),TQe=l(),_s=a("li"),mU=a("strong"),FQe=o("mobilebert"),CQe=o(" \u2014 "),ux=a("a"),MQe=o("MobileBertTokenizer"),EQe=o(" or "),bx=a("a"),yQe=o("MobileBertTokenizerFast"),wQe=o(" (MobileBERT model)"),AQe=l(),us=a("li"),gU=a("strong"),LQe=o("mpnet"),BQe=o(" \u2014 "),vx=a("a"),xQe=o("MPNetTokenizer"),kQe=o(" or "),Tx=a("a"),RQe=o("MPNetTokenizerFast"),SQe=o(" (MPNet model)"),PQe=l(),bs=a("li"),hU=a("strong"),$Qe=o("mt5"),IQe=o(" \u2014 "),Fx=a("a"),DQe=o("MT5Tokenizer"),jQe=o(" or "),Cx=a("a"),NQe=o("MT5TokenizerFast"),qQe=o(" (mT5 model)"),GQe=l(),vs=a("li"),pU=a("strong"),OQe=o("openai-gpt"),XQe=o(" \u2014 "),Mx=a("a"),VQe=o("OpenAIGPTTokenizer"),zQe=o(" or "),Ex=a("a"),WQe=o("OpenAIGPTTokenizerFast"),QQe=o(" (OpenAI GPT model)"),HQe=l(),Ts=a("li"),_U=a("strong"),UQe=o("pegasus"),JQe=o(" \u2014 "),yx=a("a"),YQe=o("PegasusTokenizer"),KQe=o(" or "),wx=a("a"),ZQe=o("PegasusTokenizerFast"),eHe=o(" (Pegasus model)"),oHe=l(),Pg=a("li"),uU=a("strong"),rHe=o("perceiver"),tHe=o(" \u2014 "),Ax=a("a"),aHe=o("PerceiverTokenizer"),nHe=o(" (Perceiver model)"),sHe=l(),$g=a("li"),bU=a("strong"),lHe=o("phobert"),iHe=o(" \u2014 "),Lx=a("a"),dHe=o("PhobertTokenizer"),cHe=o(" (PhoBERT model)"),fHe=l(),Ig=a("li"),vU=a("strong"),mHe=o("plbart"),gHe=o(" \u2014 "),Bx=a("a"),hHe=o("PLBartTokenizer"),pHe=o(" (PLBart model)"),_He=l(),Dg=a("li"),TU=a("strong"),uHe=o("prophetnet"),bHe=o(" \u2014 "),xx=a("a"),vHe=o("ProphetNetTokenizer"),THe=o(" (ProphetNet model)"),FHe=l(),Fs=a("li"),FU=a("strong"),CHe=o("qdqbert"),MHe=o(" \u2014 "),kx=a("a"),EHe=o("BertTokenizer"),yHe=o(" or "),Rx=a("a"),wHe=o("BertTokenizerFast"),AHe=o(" (QDQBert model)"),LHe=l(),jg=a("li"),CU=a("strong"),BHe=o("rag"),xHe=o(" \u2014 "),Sx=a("a"),kHe=o("RagTokenizer"),RHe=o(" (RAG model)"),SHe=l(),Cs=a("li"),MU=a("strong"),PHe=o("reformer"),$He=o(" \u2014 "),Px=a("a"),IHe=o("ReformerTokenizer"),DHe=o(" or "),$x=a("a"),jHe=o("ReformerTokenizerFast"),NHe=o(" (Reformer model)"),qHe=l(),Ms=a("li"),EU=a("strong"),GHe=o("rembert"),OHe=o(" \u2014 "),Ix=a("a"),XHe=o("RemBertTokenizer"),VHe=o(" or "),Dx=a("a"),zHe=o("RemBertTokenizerFast"),WHe=o(" (RemBERT model)"),QHe=l(),Es=a("li"),yU=a("strong"),HHe=o("retribert"),UHe=o(" \u2014 "),jx=a("a"),JHe=o("RetriBertTokenizer"),YHe=o(" or "),Nx=a("a"),KHe=o("RetriBertTokenizerFast"),ZHe=o(" (RetriBERT model)"),eUe=l(),ys=a("li"),wU=a("strong"),oUe=o("roberta"),rUe=o(" \u2014 "),qx=a("a"),tUe=o("RobertaTokenizer"),aUe=o(" or "),Gx=a("a"),nUe=o("RobertaTokenizerFast"),sUe=o(" (RoBERTa model)"),lUe=l(),ws=a("li"),AU=a("strong"),iUe=o("roformer"),dUe=o(" \u2014 "),Ox=a("a"),cUe=o("RoFormerTokenizer"),fUe=o(" or "),Xx=a("a"),mUe=o("RoFormerTokenizerFast"),gUe=o(" (RoFormer model)"),hUe=l(),Ng=a("li"),LU=a("strong"),pUe=o("speech_to_text"),_Ue=o(" \u2014 "),Vx=a("a"),uUe=o("Speech2TextTokenizer"),bUe=o(" (Speech2Text model)"),vUe=l(),qg=a("li"),BU=a("strong"),TUe=o("speech_to_text_2"),FUe=o(" \u2014 "),zx=a("a"),CUe=o("Speech2Text2Tokenizer"),MUe=o(" (Speech2Text2 model)"),EUe=l(),As=a("li"),xU=a("strong"),yUe=o("splinter"),wUe=o(" \u2014 "),Wx=a("a"),AUe=o("SplinterTokenizer"),LUe=o(" or "),Qx=a("a"),BUe=o("SplinterTokenizerFast"),xUe=o(" (Splinter model)"),kUe=l(),Ls=a("li"),kU=a("strong"),RUe=o("squeezebert"),SUe=o(" \u2014 "),Hx=a("a"),PUe=o("SqueezeBertTokenizer"),$Ue=o(" or "),Ux=a("a"),IUe=o("SqueezeBertTokenizerFast"),DUe=o(" (SqueezeBERT model)"),jUe=l(),Bs=a("li"),RU=a("strong"),NUe=o("t5"),qUe=o(" \u2014 "),Jx=a("a"),GUe=o("T5Tokenizer"),OUe=o(" or "),Yx=a("a"),XUe=o("T5TokenizerFast"),VUe=o(" (T5 model)"),zUe=l(),Gg=a("li"),SU=a("strong"),WUe=o("tapas"),QUe=o(" \u2014 "),Kx=a("a"),HUe=o("TapasTokenizer"),UUe=o(" (TAPAS model)"),JUe=l(),Og=a("li"),PU=a("strong"),YUe=o("transfo-xl"),KUe=o(" \u2014 "),Zx=a("a"),ZUe=o("TransfoXLTokenizer"),eJe=o(" (Transformer-XL model)"),oJe=l(),Xg=a("li"),$U=a("strong"),rJe=o("wav2vec2"),tJe=o(" \u2014 "),ek=a("a"),aJe=o("Wav2Vec2CTCTokenizer"),nJe=o(" (Wav2Vec2 model)"),sJe=l(),Vg=a("li"),IU=a("strong"),lJe=o("wav2vec2_phoneme"),iJe=o(" \u2014 "),ok=a("a"),dJe=o("Wav2Vec2PhonemeCTCTokenizer"),cJe=o(" (Wav2Vec2Phoneme model)"),fJe=l(),xs=a("li"),DU=a("strong"),mJe=o("xglm"),gJe=o(" \u2014 "),rk=a("a"),hJe=o("XGLMTokenizer"),pJe=o(" or "),tk=a("a"),_Je=o("XGLMTokenizerFast"),uJe=o(" (XGLM model)"),bJe=l(),zg=a("li"),jU=a("strong"),vJe=o("xlm"),TJe=o(" \u2014 "),ak=a("a"),FJe=o("XLMTokenizer"),CJe=o(" (XLM model)"),MJe=l(),Wg=a("li"),NU=a("strong"),EJe=o("xlm-prophetnet"),yJe=o(" \u2014 "),nk=a("a"),wJe=o("XLMProphetNetTokenizer"),AJe=o(" (XLMProphetNet model)"),LJe=l(),ks=a("li"),qU=a("strong"),BJe=o("xlm-roberta"),xJe=o(" \u2014 "),sk=a("a"),kJe=o("XLMRobertaTokenizer"),RJe=o(" or "),lk=a("a"),SJe=o("XLMRobertaTokenizerFast"),PJe=o(" (XLM-RoBERTa model)"),$Je=l(),Rs=a("li"),GU=a("strong"),IJe=o("xlnet"),DJe=o(" \u2014 "),ik=a("a"),jJe=o("XLNetTokenizer"),NJe=o(" or "),dk=a("a"),qJe=o("XLNetTokenizerFast"),GJe=o(" (XLNet model)"),OJe=l(),OU=a("p"),XJe=o("Examples:"),VJe=l(),f(jM.$$.fragment),zJe=l(),Qg=a("div"),f(NM.$$.fragment),WJe=l(),XU=a("p"),QJe=o("Register a new tokenizer in this mapping."),w8e=l(),Ni=a("h2"),Hg=a("a"),VU=a("span"),f(qM.$$.fragment),HJe=l(),zU=a("span"),UJe=o("AutoFeatureExtractor"),A8e=l(),zo=a("div"),f(GM.$$.fragment),JJe=l(),OM=a("p"),YJe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ck=a("a"),KJe=o("AutoFeatureExtractor.from_pretrained()"),ZJe=o(" class method."),eYe=l(),XM=a("p"),oYe=o("This class cannot be instantiated directly using "),WU=a("code"),rYe=o("__init__()"),tYe=o(" (throws an error)."),aYe=l(),xe=a("div"),f(VM.$$.fragment),nYe=l(),QU=a("p"),sYe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lYe=l(),ja=a("p"),iYe=o("The feature extractor class to instantiate is selected based on the "),HU=a("code"),dYe=o("model_type"),cYe=o(` property of the config object
(either passed as an argument or loaded from `),UU=a("code"),fYe=o("pretrained_model_name_or_path"),mYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),JU=a("code"),gYe=o("pretrained_model_name_or_path"),hYe=o(":"),pYe=l(),se=a("ul"),Ug=a("li"),YU=a("strong"),_Ye=o("beit"),uYe=o(" \u2014 "),fk=a("a"),bYe=o("BeitFeatureExtractor"),vYe=o(" (BEiT model)"),TYe=l(),Jg=a("li"),KU=a("strong"),FYe=o("clip"),CYe=o(" \u2014 "),mk=a("a"),MYe=o("CLIPFeatureExtractor"),EYe=o(" (CLIP model)"),yYe=l(),Yg=a("li"),ZU=a("strong"),wYe=o("convnext"),AYe=o(" \u2014 "),gk=a("a"),LYe=o("ConvNextFeatureExtractor"),BYe=o(" (ConvNext model)"),xYe=l(),Kg=a("li"),eJ=a("strong"),kYe=o("deit"),RYe=o(" \u2014 "),hk=a("a"),SYe=o("DeiTFeatureExtractor"),PYe=o(" (DeiT model)"),$Ye=l(),Zg=a("li"),oJ=a("strong"),IYe=o("detr"),DYe=o(" \u2014 "),pk=a("a"),jYe=o("DetrFeatureExtractor"),NYe=o(" (DETR model)"),qYe=l(),eh=a("li"),rJ=a("strong"),GYe=o("hubert"),OYe=o(" \u2014 "),_k=a("a"),XYe=o("Wav2Vec2FeatureExtractor"),VYe=o(" (Hubert model)"),zYe=l(),oh=a("li"),tJ=a("strong"),WYe=o("layoutlmv2"),QYe=o(" \u2014 "),uk=a("a"),HYe=o("LayoutLMv2FeatureExtractor"),UYe=o(" (LayoutLMv2 model)"),JYe=l(),rh=a("li"),aJ=a("strong"),YYe=o("perceiver"),KYe=o(" \u2014 "),bk=a("a"),ZYe=o("PerceiverFeatureExtractor"),eKe=o(" (Perceiver model)"),oKe=l(),th=a("li"),nJ=a("strong"),rKe=o("poolformer"),tKe=o(" \u2014 "),vk=a("a"),aKe=o("PoolFormerFeatureExtractor"),nKe=o(" (PoolFormer model)"),sKe=l(),ah=a("li"),sJ=a("strong"),lKe=o("segformer"),iKe=o(" \u2014 "),Tk=a("a"),dKe=o("SegformerFeatureExtractor"),cKe=o(" (SegFormer model)"),fKe=l(),nh=a("li"),lJ=a("strong"),mKe=o("speech_to_text"),gKe=o(" \u2014 "),Fk=a("a"),hKe=o("Speech2TextFeatureExtractor"),pKe=o(" (Speech2Text model)"),_Ke=l(),sh=a("li"),iJ=a("strong"),uKe=o("swin"),bKe=o(" \u2014 "),Ck=a("a"),vKe=o("ViTFeatureExtractor"),TKe=o(" (Swin model)"),FKe=l(),lh=a("li"),dJ=a("strong"),CKe=o("vit"),MKe=o(" \u2014 "),Mk=a("a"),EKe=o("ViTFeatureExtractor"),yKe=o(" (ViT model)"),wKe=l(),ih=a("li"),cJ=a("strong"),AKe=o("vit_mae"),LKe=o(" \u2014 "),Ek=a("a"),BKe=o("ViTFeatureExtractor"),xKe=o(" (ViTMAE model)"),kKe=l(),dh=a("li"),fJ=a("strong"),RKe=o("wav2vec2"),SKe=o(" \u2014 "),yk=a("a"),PKe=o("Wav2Vec2FeatureExtractor"),$Ke=o(" (Wav2Vec2 model)"),IKe=l(),f(ch.$$.fragment),DKe=l(),mJ=a("p"),jKe=o("Examples:"),NKe=l(),f(zM.$$.fragment),qKe=l(),fh=a("div"),f(WM.$$.fragment),GKe=l(),gJ=a("p"),OKe=o("Register a new feature extractor for this class."),L8e=l(),qi=a("h2"),mh=a("a"),hJ=a("span"),f(QM.$$.fragment),XKe=l(),pJ=a("span"),VKe=o("AutoProcessor"),B8e=l(),Wo=a("div"),f(HM.$$.fragment),zKe=l(),UM=a("p"),WKe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wk=a("a"),QKe=o("AutoProcessor.from_pretrained()"),HKe=o(" class method."),UKe=l(),JM=a("p"),JKe=o("This class cannot be instantiated directly using "),_J=a("code"),YKe=o("__init__()"),KKe=o(" (throws an error)."),ZKe=l(),ke=a("div"),f(YM.$$.fragment),eZe=l(),uJ=a("p"),oZe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),rZe=l(),Gi=a("p"),tZe=o("The processor class to instantiate is selected based on the "),bJ=a("code"),aZe=o("model_type"),nZe=o(` property of the config object (either
passed as an argument or loaded from `),vJ=a("code"),sZe=o("pretrained_model_name_or_path"),lZe=o(" if possible):"),iZe=l(),we=a("ul"),gh=a("li"),TJ=a("strong"),dZe=o("clip"),cZe=o(" \u2014 "),Ak=a("a"),fZe=o("CLIPProcessor"),mZe=o(" (CLIP model)"),gZe=l(),hh=a("li"),FJ=a("strong"),hZe=o("layoutlmv2"),pZe=o(" \u2014 "),Lk=a("a"),_Ze=o("LayoutLMv2Processor"),uZe=o(" (LayoutLMv2 model)"),bZe=l(),ph=a("li"),CJ=a("strong"),vZe=o("layoutxlm"),TZe=o(" \u2014 "),Bk=a("a"),FZe=o("LayoutXLMProcessor"),CZe=o(" (LayoutXLM model)"),MZe=l(),_h=a("li"),MJ=a("strong"),EZe=o("speech_to_text"),yZe=o(" \u2014 "),xk=a("a"),wZe=o("Speech2TextProcessor"),AZe=o(" (Speech2Text model)"),LZe=l(),uh=a("li"),EJ=a("strong"),BZe=o("speech_to_text_2"),xZe=o(" \u2014 "),kk=a("a"),kZe=o("Speech2Text2Processor"),RZe=o(" (Speech2Text2 model)"),SZe=l(),bh=a("li"),yJ=a("strong"),PZe=o("trocr"),$Ze=o(" \u2014 "),Rk=a("a"),IZe=o("TrOCRProcessor"),DZe=o(" (TrOCR model)"),jZe=l(),vh=a("li"),wJ=a("strong"),NZe=o("vision-text-dual-encoder"),qZe=o(" \u2014 "),Sk=a("a"),GZe=o("VisionTextDualEncoderProcessor"),OZe=o(" (VisionTextDualEncoder model)"),XZe=l(),Th=a("li"),AJ=a("strong"),VZe=o("wav2vec2"),zZe=o(" \u2014 "),Pk=a("a"),WZe=o("Wav2Vec2Processor"),QZe=o(" (Wav2Vec2 model)"),HZe=l(),f(Fh.$$.fragment),UZe=l(),LJ=a("p"),JZe=o("Examples:"),YZe=l(),f(KM.$$.fragment),KZe=l(),Ch=a("div"),f(ZM.$$.fragment),ZZe=l(),BJ=a("p"),eeo=o("Register a new processor for this class."),x8e=l(),Oi=a("h2"),Mh=a("a"),xJ=a("span"),f(eE.$$.fragment),oeo=l(),kJ=a("span"),reo=o("AutoModel"),k8e=l(),Qo=a("div"),f(oE.$$.fragment),teo=l(),Xi=a("p"),aeo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RJ=a("code"),neo=o("from_pretrained()"),seo=o("class method or the "),SJ=a("code"),leo=o("from_config()"),ieo=o(`class
method.`),deo=l(),rE=a("p"),ceo=o("This class cannot be instantiated directly using "),PJ=a("code"),feo=o("__init__()"),meo=o(" (throws an error)."),geo=l(),qr=a("div"),f(tE.$$.fragment),heo=l(),$J=a("p"),peo=o("Instantiates one of the base model classes of the library from a configuration."),_eo=l(),Vi=a("p"),ueo=o(`Note:
Loading a model from its configuration file does `),IJ=a("strong"),beo=o("not"),veo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("code"),Teo=o("from_pretrained()"),Feo=o("to load the model weights."),Ceo=l(),jJ=a("p"),Meo=o("Examples:"),Eeo=l(),f(aE.$$.fragment),yeo=l(),Re=a("div"),f(nE.$$.fragment),weo=l(),NJ=a("p"),Aeo=o("Instantiate one of the base model classes of the library from a pretrained model."),Leo=l(),Na=a("p"),Beo=o("The model class to instantiate is selected based on the "),qJ=a("code"),xeo=o("model_type"),keo=o(` property of the config object (either
passed as an argument or loaded from `),GJ=a("code"),Reo=o("pretrained_model_name_or_path"),Seo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OJ=a("code"),Peo=o("pretrained_model_name_or_path"),$eo=o(":"),Ieo=l(),F=a("ul"),Eh=a("li"),XJ=a("strong"),Deo=o("albert"),jeo=o(" \u2014 "),$k=a("a"),Neo=o("AlbertModel"),qeo=o(" (ALBERT model)"),Geo=l(),yh=a("li"),VJ=a("strong"),Oeo=o("bart"),Xeo=o(" \u2014 "),Ik=a("a"),Veo=o("BartModel"),zeo=o(" (BART model)"),Weo=l(),wh=a("li"),zJ=a("strong"),Qeo=o("beit"),Heo=o(" \u2014 "),Dk=a("a"),Ueo=o("BeitModel"),Jeo=o(" (BEiT model)"),Yeo=l(),Ah=a("li"),WJ=a("strong"),Keo=o("bert"),Zeo=o(" \u2014 "),jk=a("a"),eoo=o("BertModel"),ooo=o(" (BERT model)"),roo=l(),Lh=a("li"),QJ=a("strong"),too=o("bert-generation"),aoo=o(" \u2014 "),Nk=a("a"),noo=o("BertGenerationEncoder"),soo=o(" (Bert Generation model)"),loo=l(),Bh=a("li"),HJ=a("strong"),ioo=o("big_bird"),doo=o(" \u2014 "),qk=a("a"),coo=o("BigBirdModel"),foo=o(" (BigBird model)"),moo=l(),xh=a("li"),UJ=a("strong"),goo=o("bigbird_pegasus"),hoo=o(" \u2014 "),Gk=a("a"),poo=o("BigBirdPegasusModel"),_oo=o(" (BigBirdPegasus model)"),uoo=l(),kh=a("li"),JJ=a("strong"),boo=o("blenderbot"),voo=o(" \u2014 "),Ok=a("a"),Too=o("BlenderbotModel"),Foo=o(" (Blenderbot model)"),Coo=l(),Rh=a("li"),YJ=a("strong"),Moo=o("blenderbot-small"),Eoo=o(" \u2014 "),Xk=a("a"),yoo=o("BlenderbotSmallModel"),woo=o(" (BlenderbotSmall model)"),Aoo=l(),Sh=a("li"),KJ=a("strong"),Loo=o("camembert"),Boo=o(" \u2014 "),Vk=a("a"),xoo=o("CamembertModel"),koo=o(" (CamemBERT model)"),Roo=l(),Ph=a("li"),ZJ=a("strong"),Soo=o("canine"),Poo=o(" \u2014 "),zk=a("a"),$oo=o("CanineModel"),Ioo=o(" (Canine model)"),Doo=l(),$h=a("li"),eY=a("strong"),joo=o("clip"),Noo=o(" \u2014 "),Wk=a("a"),qoo=o("CLIPModel"),Goo=o(" (CLIP model)"),Ooo=l(),Ih=a("li"),oY=a("strong"),Xoo=o("convbert"),Voo=o(" \u2014 "),Qk=a("a"),zoo=o("ConvBertModel"),Woo=o(" (ConvBERT model)"),Qoo=l(),Dh=a("li"),rY=a("strong"),Hoo=o("convnext"),Uoo=o(" \u2014 "),Hk=a("a"),Joo=o("ConvNextModel"),Yoo=o(" (ConvNext model)"),Koo=l(),jh=a("li"),tY=a("strong"),Zoo=o("ctrl"),ero=o(" \u2014 "),Uk=a("a"),oro=o("CTRLModel"),rro=o(" (CTRL model)"),tro=l(),Nh=a("li"),aY=a("strong"),aro=o("data2vec-audio"),nro=o(" \u2014 "),Jk=a("a"),sro=o("Data2VecAudioModel"),lro=o(" (Data2VecAudio model)"),iro=l(),qh=a("li"),nY=a("strong"),dro=o("data2vec-text"),cro=o(" \u2014 "),Yk=a("a"),fro=o("Data2VecTextModel"),mro=o(" (Data2VecText model)"),gro=l(),Gh=a("li"),sY=a("strong"),hro=o("deberta"),pro=o(" \u2014 "),Kk=a("a"),_ro=o("DebertaModel"),uro=o(" (DeBERTa model)"),bro=l(),Oh=a("li"),lY=a("strong"),vro=o("deberta-v2"),Tro=o(" \u2014 "),Zk=a("a"),Fro=o("DebertaV2Model"),Cro=o(" (DeBERTa-v2 model)"),Mro=l(),Xh=a("li"),iY=a("strong"),Ero=o("deit"),yro=o(" \u2014 "),eR=a("a"),wro=o("DeiTModel"),Aro=o(" (DeiT model)"),Lro=l(),Vh=a("li"),dY=a("strong"),Bro=o("detr"),xro=o(" \u2014 "),oR=a("a"),kro=o("DetrModel"),Rro=o(" (DETR model)"),Sro=l(),zh=a("li"),cY=a("strong"),Pro=o("distilbert"),$ro=o(" \u2014 "),rR=a("a"),Iro=o("DistilBertModel"),Dro=o(" (DistilBERT model)"),jro=l(),Wh=a("li"),fY=a("strong"),Nro=o("dpr"),qro=o(" \u2014 "),tR=a("a"),Gro=o("DPRQuestionEncoder"),Oro=o(" (DPR model)"),Xro=l(),Qh=a("li"),mY=a("strong"),Vro=o("electra"),zro=o(" \u2014 "),aR=a("a"),Wro=o("ElectraModel"),Qro=o(" (ELECTRA model)"),Hro=l(),Hh=a("li"),gY=a("strong"),Uro=o("flaubert"),Jro=o(" \u2014 "),nR=a("a"),Yro=o("FlaubertModel"),Kro=o(" (FlauBERT model)"),Zro=l(),Uh=a("li"),hY=a("strong"),eto=o("fnet"),oto=o(" \u2014 "),sR=a("a"),rto=o("FNetModel"),tto=o(" (FNet model)"),ato=l(),Jh=a("li"),pY=a("strong"),nto=o("fsmt"),sto=o(" \u2014 "),lR=a("a"),lto=o("FSMTModel"),ito=o(" (FairSeq Machine-Translation model)"),dto=l(),Ss=a("li"),_Y=a("strong"),cto=o("funnel"),fto=o(" \u2014 "),iR=a("a"),mto=o("FunnelModel"),gto=o(" or "),dR=a("a"),hto=o("FunnelBaseModel"),pto=o(" (Funnel Transformer model)"),_to=l(),Yh=a("li"),uY=a("strong"),uto=o("gpt2"),bto=o(" \u2014 "),cR=a("a"),vto=o("GPT2Model"),Tto=o(" (OpenAI GPT-2 model)"),Fto=l(),Kh=a("li"),bY=a("strong"),Cto=o("gpt_neo"),Mto=o(" \u2014 "),fR=a("a"),Eto=o("GPTNeoModel"),yto=o(" (GPT Neo model)"),wto=l(),Zh=a("li"),vY=a("strong"),Ato=o("gptj"),Lto=o(" \u2014 "),mR=a("a"),Bto=o("GPTJModel"),xto=o(" (GPT-J model)"),kto=l(),ep=a("li"),TY=a("strong"),Rto=o("hubert"),Sto=o(" \u2014 "),gR=a("a"),Pto=o("HubertModel"),$to=o(" (Hubert model)"),Ito=l(),op=a("li"),FY=a("strong"),Dto=o("ibert"),jto=o(" \u2014 "),hR=a("a"),Nto=o("IBertModel"),qto=o(" (I-BERT model)"),Gto=l(),rp=a("li"),CY=a("strong"),Oto=o("imagegpt"),Xto=o(" \u2014 "),pR=a("a"),Vto=o("ImageGPTModel"),zto=o(" (ImageGPT model)"),Wto=l(),tp=a("li"),MY=a("strong"),Qto=o("layoutlm"),Hto=o(" \u2014 "),_R=a("a"),Uto=o("LayoutLMModel"),Jto=o(" (LayoutLM model)"),Yto=l(),ap=a("li"),EY=a("strong"),Kto=o("layoutlmv2"),Zto=o(" \u2014 "),uR=a("a"),eao=o("LayoutLMv2Model"),oao=o(" (LayoutLMv2 model)"),rao=l(),np=a("li"),yY=a("strong"),tao=o("led"),aao=o(" \u2014 "),bR=a("a"),nao=o("LEDModel"),sao=o(" (LED model)"),lao=l(),sp=a("li"),wY=a("strong"),iao=o("longformer"),dao=o(" \u2014 "),vR=a("a"),cao=o("LongformerModel"),fao=o(" (Longformer model)"),mao=l(),lp=a("li"),AY=a("strong"),gao=o("luke"),hao=o(" \u2014 "),TR=a("a"),pao=o("LukeModel"),_ao=o(" (LUKE model)"),uao=l(),ip=a("li"),LY=a("strong"),bao=o("lxmert"),vao=o(" \u2014 "),FR=a("a"),Tao=o("LxmertModel"),Fao=o(" (LXMERT model)"),Cao=l(),dp=a("li"),BY=a("strong"),Mao=o("m2m_100"),Eao=o(" \u2014 "),CR=a("a"),yao=o("M2M100Model"),wao=o(" (M2M100 model)"),Aao=l(),cp=a("li"),xY=a("strong"),Lao=o("marian"),Bao=o(" \u2014 "),MR=a("a"),xao=o("MarianModel"),kao=o(" (Marian model)"),Rao=l(),fp=a("li"),kY=a("strong"),Sao=o("mbart"),Pao=o(" \u2014 "),ER=a("a"),$ao=o("MBartModel"),Iao=o(" (mBART model)"),Dao=l(),mp=a("li"),RY=a("strong"),jao=o("megatron-bert"),Nao=o(" \u2014 "),yR=a("a"),qao=o("MegatronBertModel"),Gao=o(" (MegatronBert model)"),Oao=l(),gp=a("li"),SY=a("strong"),Xao=o("mobilebert"),Vao=o(" \u2014 "),wR=a("a"),zao=o("MobileBertModel"),Wao=o(" (MobileBERT model)"),Qao=l(),hp=a("li"),PY=a("strong"),Hao=o("mpnet"),Uao=o(" \u2014 "),AR=a("a"),Jao=o("MPNetModel"),Yao=o(" (MPNet model)"),Kao=l(),pp=a("li"),$Y=a("strong"),Zao=o("mt5"),eno=o(" \u2014 "),LR=a("a"),ono=o("MT5Model"),rno=o(" (mT5 model)"),tno=l(),_p=a("li"),IY=a("strong"),ano=o("nystromformer"),nno=o(" \u2014 "),BR=a("a"),sno=o("NystromformerModel"),lno=o(" (Nystromformer model)"),ino=l(),up=a("li"),DY=a("strong"),dno=o("openai-gpt"),cno=o(" \u2014 "),xR=a("a"),fno=o("OpenAIGPTModel"),mno=o(" (OpenAI GPT model)"),gno=l(),bp=a("li"),jY=a("strong"),hno=o("pegasus"),pno=o(" \u2014 "),kR=a("a"),_no=o("PegasusModel"),uno=o(" (Pegasus model)"),bno=l(),vp=a("li"),NY=a("strong"),vno=o("perceiver"),Tno=o(" \u2014 "),RR=a("a"),Fno=o("PerceiverModel"),Cno=o(" (Perceiver model)"),Mno=l(),Tp=a("li"),qY=a("strong"),Eno=o("plbart"),yno=o(" \u2014 "),SR=a("a"),wno=o("PLBartModel"),Ano=o(" (PLBart model)"),Lno=l(),Fp=a("li"),GY=a("strong"),Bno=o("poolformer"),xno=o(" \u2014 "),PR=a("a"),kno=o("PoolFormerModel"),Rno=o(" (PoolFormer model)"),Sno=l(),Cp=a("li"),OY=a("strong"),Pno=o("prophetnet"),$no=o(" \u2014 "),$R=a("a"),Ino=o("ProphetNetModel"),Dno=o(" (ProphetNet model)"),jno=l(),Mp=a("li"),XY=a("strong"),Nno=o("qdqbert"),qno=o(" \u2014 "),IR=a("a"),Gno=o("QDQBertModel"),Ono=o(" (QDQBert model)"),Xno=l(),Ep=a("li"),VY=a("strong"),Vno=o("reformer"),zno=o(" \u2014 "),DR=a("a"),Wno=o("ReformerModel"),Qno=o(" (Reformer model)"),Hno=l(),yp=a("li"),zY=a("strong"),Uno=o("rembert"),Jno=o(" \u2014 "),jR=a("a"),Yno=o("RemBertModel"),Kno=o(" (RemBERT model)"),Zno=l(),wp=a("li"),WY=a("strong"),eso=o("retribert"),oso=o(" \u2014 "),NR=a("a"),rso=o("RetriBertModel"),tso=o(" (RetriBERT model)"),aso=l(),Ap=a("li"),QY=a("strong"),nso=o("roberta"),sso=o(" \u2014 "),qR=a("a"),lso=o("RobertaModel"),iso=o(" (RoBERTa model)"),dso=l(),Lp=a("li"),HY=a("strong"),cso=o("roformer"),fso=o(" \u2014 "),GR=a("a"),mso=o("RoFormerModel"),gso=o(" (RoFormer model)"),hso=l(),Bp=a("li"),UY=a("strong"),pso=o("segformer"),_so=o(" \u2014 "),OR=a("a"),uso=o("SegformerModel"),bso=o(" (SegFormer model)"),vso=l(),xp=a("li"),JY=a("strong"),Tso=o("sew"),Fso=o(" \u2014 "),XR=a("a"),Cso=o("SEWModel"),Mso=o(" (SEW model)"),Eso=l(),kp=a("li"),YY=a("strong"),yso=o("sew-d"),wso=o(" \u2014 "),VR=a("a"),Aso=o("SEWDModel"),Lso=o(" (SEW-D model)"),Bso=l(),Rp=a("li"),KY=a("strong"),xso=o("speech_to_text"),kso=o(" \u2014 "),zR=a("a"),Rso=o("Speech2TextModel"),Sso=o(" (Speech2Text model)"),Pso=l(),Sp=a("li"),ZY=a("strong"),$so=o("splinter"),Iso=o(" \u2014 "),WR=a("a"),Dso=o("SplinterModel"),jso=o(" (Splinter model)"),Nso=l(),Pp=a("li"),eK=a("strong"),qso=o("squeezebert"),Gso=o(" \u2014 "),QR=a("a"),Oso=o("SqueezeBertModel"),Xso=o(" (SqueezeBERT model)"),Vso=l(),$p=a("li"),oK=a("strong"),zso=o("swin"),Wso=o(" \u2014 "),HR=a("a"),Qso=o("SwinModel"),Hso=o(" (Swin model)"),Uso=l(),Ip=a("li"),rK=a("strong"),Jso=o("t5"),Yso=o(" \u2014 "),UR=a("a"),Kso=o("T5Model"),Zso=o(" (T5 model)"),elo=l(),Dp=a("li"),tK=a("strong"),olo=o("tapas"),rlo=o(" \u2014 "),JR=a("a"),tlo=o("TapasModel"),alo=o(" (TAPAS model)"),nlo=l(),jp=a("li"),aK=a("strong"),slo=o("transfo-xl"),llo=o(" \u2014 "),YR=a("a"),ilo=o("TransfoXLModel"),dlo=o(" (Transformer-XL model)"),clo=l(),Np=a("li"),nK=a("strong"),flo=o("unispeech"),mlo=o(" \u2014 "),KR=a("a"),glo=o("UniSpeechModel"),hlo=o(" (UniSpeech model)"),plo=l(),qp=a("li"),sK=a("strong"),_lo=o("unispeech-sat"),ulo=o(" \u2014 "),ZR=a("a"),blo=o("UniSpeechSatModel"),vlo=o(" (UniSpeechSat model)"),Tlo=l(),Gp=a("li"),lK=a("strong"),Flo=o("vilt"),Clo=o(" \u2014 "),eS=a("a"),Mlo=o("ViltModel"),Elo=o(" (ViLT model)"),ylo=l(),Op=a("li"),iK=a("strong"),wlo=o("vision-text-dual-encoder"),Alo=o(" \u2014 "),oS=a("a"),Llo=o("VisionTextDualEncoderModel"),Blo=o(" (VisionTextDualEncoder model)"),xlo=l(),Xp=a("li"),dK=a("strong"),klo=o("visual_bert"),Rlo=o(" \u2014 "),rS=a("a"),Slo=o("VisualBertModel"),Plo=o(" (VisualBert model)"),$lo=l(),Vp=a("li"),cK=a("strong"),Ilo=o("vit"),Dlo=o(" \u2014 "),tS=a("a"),jlo=o("ViTModel"),Nlo=o(" (ViT model)"),qlo=l(),zp=a("li"),fK=a("strong"),Glo=o("vit_mae"),Olo=o(" \u2014 "),aS=a("a"),Xlo=o("ViTMAEModel"),Vlo=o(" (ViTMAE model)"),zlo=l(),Wp=a("li"),mK=a("strong"),Wlo=o("wav2vec2"),Qlo=o(" \u2014 "),nS=a("a"),Hlo=o("Wav2Vec2Model"),Ulo=o(" (Wav2Vec2 model)"),Jlo=l(),Qp=a("li"),gK=a("strong"),Ylo=o("wavlm"),Klo=o(" \u2014 "),sS=a("a"),Zlo=o("WavLMModel"),eio=o(" (WavLM model)"),oio=l(),Hp=a("li"),hK=a("strong"),rio=o("xglm"),tio=o(" \u2014 "),lS=a("a"),aio=o("XGLMModel"),nio=o(" (XGLM model)"),sio=l(),Up=a("li"),pK=a("strong"),lio=o("xlm"),iio=o(" \u2014 "),iS=a("a"),dio=o("XLMModel"),cio=o(" (XLM model)"),fio=l(),Jp=a("li"),_K=a("strong"),mio=o("xlm-prophetnet"),gio=o(" \u2014 "),dS=a("a"),hio=o("XLMProphetNetModel"),pio=o(" (XLMProphetNet model)"),_io=l(),Yp=a("li"),uK=a("strong"),uio=o("xlm-roberta"),bio=o(" \u2014 "),cS=a("a"),vio=o("XLMRobertaModel"),Tio=o(" (XLM-RoBERTa model)"),Fio=l(),Kp=a("li"),bK=a("strong"),Cio=o("xlm-roberta-xl"),Mio=o(" \u2014 "),fS=a("a"),Eio=o("XLMRobertaXLModel"),yio=o(" (XLM-RoBERTa-XL model)"),wio=l(),Zp=a("li"),vK=a("strong"),Aio=o("xlnet"),Lio=o(" \u2014 "),mS=a("a"),Bio=o("XLNetModel"),xio=o(" (XLNet model)"),kio=l(),e_=a("li"),TK=a("strong"),Rio=o("yoso"),Sio=o(" \u2014 "),gS=a("a"),Pio=o("YosoModel"),$io=o(" (YOSO model)"),Iio=l(),o_=a("p"),Dio=o("The model is set in evaluation mode by default using "),FK=a("code"),jio=o("model.eval()"),Nio=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CK=a("code"),qio=o("model.train()"),Gio=l(),MK=a("p"),Oio=o("Examples:"),Xio=l(),f(sE.$$.fragment),R8e=l(),zi=a("h2"),r_=a("a"),EK=a("span"),f(lE.$$.fragment),Vio=l(),yK=a("span"),zio=o("AutoModelForPreTraining"),S8e=l(),Ho=a("div"),f(iE.$$.fragment),Wio=l(),Wi=a("p"),Qio=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wK=a("code"),Hio=o("from_pretrained()"),Uio=o("class method or the "),AK=a("code"),Jio=o("from_config()"),Yio=o(`class
method.`),Kio=l(),dE=a("p"),Zio=o("This class cannot be instantiated directly using "),LK=a("code"),edo=o("__init__()"),odo=o(" (throws an error)."),rdo=l(),Gr=a("div"),f(cE.$$.fragment),tdo=l(),BK=a("p"),ado=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ndo=l(),Qi=a("p"),sdo=o(`Note:
Loading a model from its configuration file does `),xK=a("strong"),ldo=o("not"),ido=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("code"),ddo=o("from_pretrained()"),cdo=o("to load the model weights."),fdo=l(),RK=a("p"),mdo=o("Examples:"),gdo=l(),f(fE.$$.fragment),hdo=l(),Se=a("div"),f(mE.$$.fragment),pdo=l(),SK=a("p"),_do=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),udo=l(),qa=a("p"),bdo=o("The model class to instantiate is selected based on the "),PK=a("code"),vdo=o("model_type"),Tdo=o(` property of the config object (either
passed as an argument or loaded from `),$K=a("code"),Fdo=o("pretrained_model_name_or_path"),Cdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IK=a("code"),Mdo=o("pretrained_model_name_or_path"),Edo=o(":"),ydo=l(),k=a("ul"),t_=a("li"),DK=a("strong"),wdo=o("albert"),Ado=o(" \u2014 "),hS=a("a"),Ldo=o("AlbertForPreTraining"),Bdo=o(" (ALBERT model)"),xdo=l(),a_=a("li"),jK=a("strong"),kdo=o("bart"),Rdo=o(" \u2014 "),pS=a("a"),Sdo=o("BartForConditionalGeneration"),Pdo=o(" (BART model)"),$do=l(),n_=a("li"),NK=a("strong"),Ido=o("bert"),Ddo=o(" \u2014 "),_S=a("a"),jdo=o("BertForPreTraining"),Ndo=o(" (BERT model)"),qdo=l(),s_=a("li"),qK=a("strong"),Gdo=o("big_bird"),Odo=o(" \u2014 "),uS=a("a"),Xdo=o("BigBirdForPreTraining"),Vdo=o(" (BigBird model)"),zdo=l(),l_=a("li"),GK=a("strong"),Wdo=o("camembert"),Qdo=o(" \u2014 "),bS=a("a"),Hdo=o("CamembertForMaskedLM"),Udo=o(" (CamemBERT model)"),Jdo=l(),i_=a("li"),OK=a("strong"),Ydo=o("ctrl"),Kdo=o(" \u2014 "),vS=a("a"),Zdo=o("CTRLLMHeadModel"),eco=o(" (CTRL model)"),oco=l(),d_=a("li"),XK=a("strong"),rco=o("data2vec-text"),tco=o(" \u2014 "),TS=a("a"),aco=o("Data2VecTextForMaskedLM"),nco=o(" (Data2VecText model)"),sco=l(),c_=a("li"),VK=a("strong"),lco=o("deberta"),ico=o(" \u2014 "),FS=a("a"),dco=o("DebertaForMaskedLM"),cco=o(" (DeBERTa model)"),fco=l(),f_=a("li"),zK=a("strong"),mco=o("deberta-v2"),gco=o(" \u2014 "),CS=a("a"),hco=o("DebertaV2ForMaskedLM"),pco=o(" (DeBERTa-v2 model)"),_co=l(),m_=a("li"),WK=a("strong"),uco=o("distilbert"),bco=o(" \u2014 "),MS=a("a"),vco=o("DistilBertForMaskedLM"),Tco=o(" (DistilBERT model)"),Fco=l(),g_=a("li"),QK=a("strong"),Cco=o("electra"),Mco=o(" \u2014 "),ES=a("a"),Eco=o("ElectraForPreTraining"),yco=o(" (ELECTRA model)"),wco=l(),h_=a("li"),HK=a("strong"),Aco=o("flaubert"),Lco=o(" \u2014 "),yS=a("a"),Bco=o("FlaubertWithLMHeadModel"),xco=o(" (FlauBERT model)"),kco=l(),p_=a("li"),UK=a("strong"),Rco=o("fnet"),Sco=o(" \u2014 "),wS=a("a"),Pco=o("FNetForPreTraining"),$co=o(" (FNet model)"),Ico=l(),__=a("li"),JK=a("strong"),Dco=o("fsmt"),jco=o(" \u2014 "),AS=a("a"),Nco=o("FSMTForConditionalGeneration"),qco=o(" (FairSeq Machine-Translation model)"),Gco=l(),u_=a("li"),YK=a("strong"),Oco=o("funnel"),Xco=o(" \u2014 "),LS=a("a"),Vco=o("FunnelForPreTraining"),zco=o(" (Funnel Transformer model)"),Wco=l(),b_=a("li"),KK=a("strong"),Qco=o("gpt2"),Hco=o(" \u2014 "),BS=a("a"),Uco=o("GPT2LMHeadModel"),Jco=o(" (OpenAI GPT-2 model)"),Yco=l(),v_=a("li"),ZK=a("strong"),Kco=o("ibert"),Zco=o(" \u2014 "),xS=a("a"),efo=o("IBertForMaskedLM"),ofo=o(" (I-BERT model)"),rfo=l(),T_=a("li"),eZ=a("strong"),tfo=o("layoutlm"),afo=o(" \u2014 "),kS=a("a"),nfo=o("LayoutLMForMaskedLM"),sfo=o(" (LayoutLM model)"),lfo=l(),F_=a("li"),oZ=a("strong"),ifo=o("longformer"),dfo=o(" \u2014 "),RS=a("a"),cfo=o("LongformerForMaskedLM"),ffo=o(" (Longformer model)"),mfo=l(),C_=a("li"),rZ=a("strong"),gfo=o("lxmert"),hfo=o(" \u2014 "),SS=a("a"),pfo=o("LxmertForPreTraining"),_fo=o(" (LXMERT model)"),ufo=l(),M_=a("li"),tZ=a("strong"),bfo=o("megatron-bert"),vfo=o(" \u2014 "),PS=a("a"),Tfo=o("MegatronBertForPreTraining"),Ffo=o(" (MegatronBert model)"),Cfo=l(),E_=a("li"),aZ=a("strong"),Mfo=o("mobilebert"),Efo=o(" \u2014 "),$S=a("a"),yfo=o("MobileBertForPreTraining"),wfo=o(" (MobileBERT model)"),Afo=l(),y_=a("li"),nZ=a("strong"),Lfo=o("mpnet"),Bfo=o(" \u2014 "),IS=a("a"),xfo=o("MPNetForMaskedLM"),kfo=o(" (MPNet model)"),Rfo=l(),w_=a("li"),sZ=a("strong"),Sfo=o("openai-gpt"),Pfo=o(" \u2014 "),DS=a("a"),$fo=o("OpenAIGPTLMHeadModel"),Ifo=o(" (OpenAI GPT model)"),Dfo=l(),A_=a("li"),lZ=a("strong"),jfo=o("retribert"),Nfo=o(" \u2014 "),jS=a("a"),qfo=o("RetriBertModel"),Gfo=o(" (RetriBERT model)"),Ofo=l(),L_=a("li"),iZ=a("strong"),Xfo=o("roberta"),Vfo=o(" \u2014 "),NS=a("a"),zfo=o("RobertaForMaskedLM"),Wfo=o(" (RoBERTa model)"),Qfo=l(),B_=a("li"),dZ=a("strong"),Hfo=o("squeezebert"),Ufo=o(" \u2014 "),qS=a("a"),Jfo=o("SqueezeBertForMaskedLM"),Yfo=o(" (SqueezeBERT model)"),Kfo=l(),x_=a("li"),cZ=a("strong"),Zfo=o("t5"),emo=o(" \u2014 "),GS=a("a"),omo=o("T5ForConditionalGeneration"),rmo=o(" (T5 model)"),tmo=l(),k_=a("li"),fZ=a("strong"),amo=o("tapas"),nmo=o(" \u2014 "),OS=a("a"),smo=o("TapasForMaskedLM"),lmo=o(" (TAPAS model)"),imo=l(),R_=a("li"),mZ=a("strong"),dmo=o("transfo-xl"),cmo=o(" \u2014 "),XS=a("a"),fmo=o("TransfoXLLMHeadModel"),mmo=o(" (Transformer-XL model)"),gmo=l(),S_=a("li"),gZ=a("strong"),hmo=o("unispeech"),pmo=o(" \u2014 "),VS=a("a"),_mo=o("UniSpeechForPreTraining"),umo=o(" (UniSpeech model)"),bmo=l(),P_=a("li"),hZ=a("strong"),vmo=o("unispeech-sat"),Tmo=o(" \u2014 "),zS=a("a"),Fmo=o("UniSpeechSatForPreTraining"),Cmo=o(" (UniSpeechSat model)"),Mmo=l(),$_=a("li"),pZ=a("strong"),Emo=o("visual_bert"),ymo=o(" \u2014 "),WS=a("a"),wmo=o("VisualBertForPreTraining"),Amo=o(" (VisualBert model)"),Lmo=l(),I_=a("li"),_Z=a("strong"),Bmo=o("vit_mae"),xmo=o(" \u2014 "),QS=a("a"),kmo=o("ViTMAEForPreTraining"),Rmo=o(" (ViTMAE model)"),Smo=l(),D_=a("li"),uZ=a("strong"),Pmo=o("wav2vec2"),$mo=o(" \u2014 "),HS=a("a"),Imo=o("Wav2Vec2ForPreTraining"),Dmo=o(" (Wav2Vec2 model)"),jmo=l(),j_=a("li"),bZ=a("strong"),Nmo=o("xlm"),qmo=o(" \u2014 "),US=a("a"),Gmo=o("XLMWithLMHeadModel"),Omo=o(" (XLM model)"),Xmo=l(),N_=a("li"),vZ=a("strong"),Vmo=o("xlm-roberta"),zmo=o(" \u2014 "),JS=a("a"),Wmo=o("XLMRobertaForMaskedLM"),Qmo=o(" (XLM-RoBERTa model)"),Hmo=l(),q_=a("li"),TZ=a("strong"),Umo=o("xlm-roberta-xl"),Jmo=o(" \u2014 "),YS=a("a"),Ymo=o("XLMRobertaXLForMaskedLM"),Kmo=o(" (XLM-RoBERTa-XL model)"),Zmo=l(),G_=a("li"),FZ=a("strong"),ego=o("xlnet"),ogo=o(" \u2014 "),KS=a("a"),rgo=o("XLNetLMHeadModel"),tgo=o(" (XLNet model)"),ago=l(),O_=a("p"),ngo=o("The model is set in evaluation mode by default using "),CZ=a("code"),sgo=o("model.eval()"),lgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MZ=a("code"),igo=o("model.train()"),dgo=l(),EZ=a("p"),cgo=o("Examples:"),fgo=l(),f(gE.$$.fragment),P8e=l(),Hi=a("h2"),X_=a("a"),yZ=a("span"),f(hE.$$.fragment),mgo=l(),wZ=a("span"),ggo=o("AutoModelForCausalLM"),$8e=l(),Uo=a("div"),f(pE.$$.fragment),hgo=l(),Ui=a("p"),pgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AZ=a("code"),_go=o("from_pretrained()"),ugo=o("class method or the "),LZ=a("code"),bgo=o("from_config()"),vgo=o(`class
method.`),Tgo=l(),_E=a("p"),Fgo=o("This class cannot be instantiated directly using "),BZ=a("code"),Cgo=o("__init__()"),Mgo=o(" (throws an error)."),Ego=l(),Or=a("div"),f(uE.$$.fragment),ygo=l(),xZ=a("p"),wgo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ago=l(),Ji=a("p"),Lgo=o(`Note:
Loading a model from its configuration file does `),kZ=a("strong"),Bgo=o("not"),xgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=a("code"),kgo=o("from_pretrained()"),Rgo=o("to load the model weights."),Sgo=l(),SZ=a("p"),Pgo=o("Examples:"),$go=l(),f(bE.$$.fragment),Igo=l(),Pe=a("div"),f(vE.$$.fragment),Dgo=l(),PZ=a("p"),jgo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ngo=l(),Ga=a("p"),qgo=o("The model class to instantiate is selected based on the "),$Z=a("code"),Ggo=o("model_type"),Ogo=o(` property of the config object (either
passed as an argument or loaded from `),IZ=a("code"),Xgo=o("pretrained_model_name_or_path"),Vgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DZ=a("code"),zgo=o("pretrained_model_name_or_path"),Wgo=o(":"),Qgo=l(),$=a("ul"),V_=a("li"),jZ=a("strong"),Hgo=o("bart"),Ugo=o(" \u2014 "),ZS=a("a"),Jgo=o("BartForCausalLM"),Ygo=o(" (BART model)"),Kgo=l(),z_=a("li"),NZ=a("strong"),Zgo=o("bert"),eho=o(" \u2014 "),eP=a("a"),oho=o("BertLMHeadModel"),rho=o(" (BERT model)"),tho=l(),W_=a("li"),qZ=a("strong"),aho=o("bert-generation"),nho=o(" \u2014 "),oP=a("a"),sho=o("BertGenerationDecoder"),lho=o(" (Bert Generation model)"),iho=l(),Q_=a("li"),GZ=a("strong"),dho=o("big_bird"),cho=o(" \u2014 "),rP=a("a"),fho=o("BigBirdForCausalLM"),mho=o(" (BigBird model)"),gho=l(),H_=a("li"),OZ=a("strong"),hho=o("bigbird_pegasus"),pho=o(" \u2014 "),tP=a("a"),_ho=o("BigBirdPegasusForCausalLM"),uho=o(" (BigBirdPegasus model)"),bho=l(),U_=a("li"),XZ=a("strong"),vho=o("blenderbot"),Tho=o(" \u2014 "),aP=a("a"),Fho=o("BlenderbotForCausalLM"),Cho=o(" (Blenderbot model)"),Mho=l(),J_=a("li"),VZ=a("strong"),Eho=o("blenderbot-small"),yho=o(" \u2014 "),nP=a("a"),who=o("BlenderbotSmallForCausalLM"),Aho=o(" (BlenderbotSmall model)"),Lho=l(),Y_=a("li"),zZ=a("strong"),Bho=o("camembert"),xho=o(" \u2014 "),sP=a("a"),kho=o("CamembertForCausalLM"),Rho=o(" (CamemBERT model)"),Sho=l(),K_=a("li"),WZ=a("strong"),Pho=o("ctrl"),$ho=o(" \u2014 "),lP=a("a"),Iho=o("CTRLLMHeadModel"),Dho=o(" (CTRL model)"),jho=l(),Z_=a("li"),QZ=a("strong"),Nho=o("data2vec-text"),qho=o(" \u2014 "),iP=a("a"),Gho=o("Data2VecTextForCausalLM"),Oho=o(" (Data2VecText model)"),Xho=l(),eu=a("li"),HZ=a("strong"),Vho=o("electra"),zho=o(" \u2014 "),dP=a("a"),Who=o("ElectraForCausalLM"),Qho=o(" (ELECTRA model)"),Hho=l(),ou=a("li"),UZ=a("strong"),Uho=o("gpt2"),Jho=o(" \u2014 "),cP=a("a"),Yho=o("GPT2LMHeadModel"),Kho=o(" (OpenAI GPT-2 model)"),Zho=l(),ru=a("li"),JZ=a("strong"),epo=o("gpt_neo"),opo=o(" \u2014 "),fP=a("a"),rpo=o("GPTNeoForCausalLM"),tpo=o(" (GPT Neo model)"),apo=l(),tu=a("li"),YZ=a("strong"),npo=o("gptj"),spo=o(" \u2014 "),mP=a("a"),lpo=o("GPTJForCausalLM"),ipo=o(" (GPT-J model)"),dpo=l(),au=a("li"),KZ=a("strong"),cpo=o("marian"),fpo=o(" \u2014 "),gP=a("a"),mpo=o("MarianForCausalLM"),gpo=o(" (Marian model)"),hpo=l(),nu=a("li"),ZZ=a("strong"),ppo=o("mbart"),_po=o(" \u2014 "),hP=a("a"),upo=o("MBartForCausalLM"),bpo=o(" (mBART model)"),vpo=l(),su=a("li"),eee=a("strong"),Tpo=o("megatron-bert"),Fpo=o(" \u2014 "),pP=a("a"),Cpo=o("MegatronBertForCausalLM"),Mpo=o(" (MegatronBert model)"),Epo=l(),lu=a("li"),oee=a("strong"),ypo=o("openai-gpt"),wpo=o(" \u2014 "),_P=a("a"),Apo=o("OpenAIGPTLMHeadModel"),Lpo=o(" (OpenAI GPT model)"),Bpo=l(),iu=a("li"),ree=a("strong"),xpo=o("pegasus"),kpo=o(" \u2014 "),uP=a("a"),Rpo=o("PegasusForCausalLM"),Spo=o(" (Pegasus model)"),Ppo=l(),du=a("li"),tee=a("strong"),$po=o("plbart"),Ipo=o(" \u2014 "),bP=a("a"),Dpo=o("PLBartForCausalLM"),jpo=o(" (PLBart model)"),Npo=l(),cu=a("li"),aee=a("strong"),qpo=o("prophetnet"),Gpo=o(" \u2014 "),vP=a("a"),Opo=o("ProphetNetForCausalLM"),Xpo=o(" (ProphetNet model)"),Vpo=l(),fu=a("li"),nee=a("strong"),zpo=o("qdqbert"),Wpo=o(" \u2014 "),TP=a("a"),Qpo=o("QDQBertLMHeadModel"),Hpo=o(" (QDQBert model)"),Upo=l(),mu=a("li"),see=a("strong"),Jpo=o("reformer"),Ypo=o(" \u2014 "),FP=a("a"),Kpo=o("ReformerModelWithLMHead"),Zpo=o(" (Reformer model)"),e_o=l(),gu=a("li"),lee=a("strong"),o_o=o("rembert"),r_o=o(" \u2014 "),CP=a("a"),t_o=o("RemBertForCausalLM"),a_o=o(" (RemBERT model)"),n_o=l(),hu=a("li"),iee=a("strong"),s_o=o("roberta"),l_o=o(" \u2014 "),MP=a("a"),i_o=o("RobertaForCausalLM"),d_o=o(" (RoBERTa model)"),c_o=l(),pu=a("li"),dee=a("strong"),f_o=o("roformer"),m_o=o(" \u2014 "),EP=a("a"),g_o=o("RoFormerForCausalLM"),h_o=o(" (RoFormer model)"),p_o=l(),_u=a("li"),cee=a("strong"),__o=o("speech_to_text_2"),u_o=o(" \u2014 "),yP=a("a"),b_o=o("Speech2Text2ForCausalLM"),v_o=o(" (Speech2Text2 model)"),T_o=l(),uu=a("li"),fee=a("strong"),F_o=o("transfo-xl"),C_o=o(" \u2014 "),wP=a("a"),M_o=o("TransfoXLLMHeadModel"),E_o=o(" (Transformer-XL model)"),y_o=l(),bu=a("li"),mee=a("strong"),w_o=o("trocr"),A_o=o(" \u2014 "),AP=a("a"),L_o=o("TrOCRForCausalLM"),B_o=o(" (TrOCR model)"),x_o=l(),vu=a("li"),gee=a("strong"),k_o=o("xglm"),R_o=o(" \u2014 "),LP=a("a"),S_o=o("XGLMForCausalLM"),P_o=o(" (XGLM model)"),$_o=l(),Tu=a("li"),hee=a("strong"),I_o=o("xlm"),D_o=o(" \u2014 "),BP=a("a"),j_o=o("XLMWithLMHeadModel"),N_o=o(" (XLM model)"),q_o=l(),Fu=a("li"),pee=a("strong"),G_o=o("xlm-prophetnet"),O_o=o(" \u2014 "),xP=a("a"),X_o=o("XLMProphetNetForCausalLM"),V_o=o(" (XLMProphetNet model)"),z_o=l(),Cu=a("li"),_ee=a("strong"),W_o=o("xlm-roberta"),Q_o=o(" \u2014 "),kP=a("a"),H_o=o("XLMRobertaForCausalLM"),U_o=o(" (XLM-RoBERTa model)"),J_o=l(),Mu=a("li"),uee=a("strong"),Y_o=o("xlm-roberta-xl"),K_o=o(" \u2014 "),RP=a("a"),Z_o=o("XLMRobertaXLForCausalLM"),euo=o(" (XLM-RoBERTa-XL model)"),ouo=l(),Eu=a("li"),bee=a("strong"),ruo=o("xlnet"),tuo=o(" \u2014 "),SP=a("a"),auo=o("XLNetLMHeadModel"),nuo=o(" (XLNet model)"),suo=l(),yu=a("p"),luo=o("The model is set in evaluation mode by default using "),vee=a("code"),iuo=o("model.eval()"),duo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tee=a("code"),cuo=o("model.train()"),fuo=l(),Fee=a("p"),muo=o("Examples:"),guo=l(),f(TE.$$.fragment),I8e=l(),Yi=a("h2"),wu=a("a"),Cee=a("span"),f(FE.$$.fragment),huo=l(),Mee=a("span"),puo=o("AutoModelForMaskedLM"),D8e=l(),Jo=a("div"),f(CE.$$.fragment),_uo=l(),Ki=a("p"),uuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Eee=a("code"),buo=o("from_pretrained()"),vuo=o("class method or the "),yee=a("code"),Tuo=o("from_config()"),Fuo=o(`class
method.`),Cuo=l(),ME=a("p"),Muo=o("This class cannot be instantiated directly using "),wee=a("code"),Euo=o("__init__()"),yuo=o(" (throws an error)."),wuo=l(),Xr=a("div"),f(EE.$$.fragment),Auo=l(),Aee=a("p"),Luo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Buo=l(),Zi=a("p"),xuo=o(`Note:
Loading a model from its configuration file does `),Lee=a("strong"),kuo=o("not"),Ruo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("code"),Suo=o("from_pretrained()"),Puo=o("to load the model weights."),$uo=l(),xee=a("p"),Iuo=o("Examples:"),Duo=l(),f(yE.$$.fragment),juo=l(),$e=a("div"),f(wE.$$.fragment),Nuo=l(),kee=a("p"),quo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Guo=l(),Oa=a("p"),Ouo=o("The model class to instantiate is selected based on the "),Ree=a("code"),Xuo=o("model_type"),Vuo=o(` property of the config object (either
passed as an argument or loaded from `),See=a("code"),zuo=o("pretrained_model_name_or_path"),Wuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pee=a("code"),Quo=o("pretrained_model_name_or_path"),Huo=o(":"),Uuo=l(),I=a("ul"),Au=a("li"),$ee=a("strong"),Juo=o("albert"),Yuo=o(" \u2014 "),PP=a("a"),Kuo=o("AlbertForMaskedLM"),Zuo=o(" (ALBERT model)"),e5o=l(),Lu=a("li"),Iee=a("strong"),o5o=o("bart"),r5o=o(" \u2014 "),$P=a("a"),t5o=o("BartForConditionalGeneration"),a5o=o(" (BART model)"),n5o=l(),Bu=a("li"),Dee=a("strong"),s5o=o("bert"),l5o=o(" \u2014 "),IP=a("a"),i5o=o("BertForMaskedLM"),d5o=o(" (BERT model)"),c5o=l(),xu=a("li"),jee=a("strong"),f5o=o("big_bird"),m5o=o(" \u2014 "),DP=a("a"),g5o=o("BigBirdForMaskedLM"),h5o=o(" (BigBird model)"),p5o=l(),ku=a("li"),Nee=a("strong"),_5o=o("camembert"),u5o=o(" \u2014 "),jP=a("a"),b5o=o("CamembertForMaskedLM"),v5o=o(" (CamemBERT model)"),T5o=l(),Ru=a("li"),qee=a("strong"),F5o=o("convbert"),C5o=o(" \u2014 "),NP=a("a"),M5o=o("ConvBertForMaskedLM"),E5o=o(" (ConvBERT model)"),y5o=l(),Su=a("li"),Gee=a("strong"),w5o=o("data2vec-text"),A5o=o(" \u2014 "),qP=a("a"),L5o=o("Data2VecTextForMaskedLM"),B5o=o(" (Data2VecText model)"),x5o=l(),Pu=a("li"),Oee=a("strong"),k5o=o("deberta"),R5o=o(" \u2014 "),GP=a("a"),S5o=o("DebertaForMaskedLM"),P5o=o(" (DeBERTa model)"),$5o=l(),$u=a("li"),Xee=a("strong"),I5o=o("deberta-v2"),D5o=o(" \u2014 "),OP=a("a"),j5o=o("DebertaV2ForMaskedLM"),N5o=o(" (DeBERTa-v2 model)"),q5o=l(),Iu=a("li"),Vee=a("strong"),G5o=o("distilbert"),O5o=o(" \u2014 "),XP=a("a"),X5o=o("DistilBertForMaskedLM"),V5o=o(" (DistilBERT model)"),z5o=l(),Du=a("li"),zee=a("strong"),W5o=o("electra"),Q5o=o(" \u2014 "),VP=a("a"),H5o=o("ElectraForMaskedLM"),U5o=o(" (ELECTRA model)"),J5o=l(),ju=a("li"),Wee=a("strong"),Y5o=o("flaubert"),K5o=o(" \u2014 "),zP=a("a"),Z5o=o("FlaubertWithLMHeadModel"),e1o=o(" (FlauBERT model)"),o1o=l(),Nu=a("li"),Qee=a("strong"),r1o=o("fnet"),t1o=o(" \u2014 "),WP=a("a"),a1o=o("FNetForMaskedLM"),n1o=o(" (FNet model)"),s1o=l(),qu=a("li"),Hee=a("strong"),l1o=o("funnel"),i1o=o(" \u2014 "),QP=a("a"),d1o=o("FunnelForMaskedLM"),c1o=o(" (Funnel Transformer model)"),f1o=l(),Gu=a("li"),Uee=a("strong"),m1o=o("ibert"),g1o=o(" \u2014 "),HP=a("a"),h1o=o("IBertForMaskedLM"),p1o=o(" (I-BERT model)"),_1o=l(),Ou=a("li"),Jee=a("strong"),u1o=o("layoutlm"),b1o=o(" \u2014 "),UP=a("a"),v1o=o("LayoutLMForMaskedLM"),T1o=o(" (LayoutLM model)"),F1o=l(),Xu=a("li"),Yee=a("strong"),C1o=o("longformer"),M1o=o(" \u2014 "),JP=a("a"),E1o=o("LongformerForMaskedLM"),y1o=o(" (Longformer model)"),w1o=l(),Vu=a("li"),Kee=a("strong"),A1o=o("mbart"),L1o=o(" \u2014 "),YP=a("a"),B1o=o("MBartForConditionalGeneration"),x1o=o(" (mBART model)"),k1o=l(),zu=a("li"),Zee=a("strong"),R1o=o("megatron-bert"),S1o=o(" \u2014 "),KP=a("a"),P1o=o("MegatronBertForMaskedLM"),$1o=o(" (MegatronBert model)"),I1o=l(),Wu=a("li"),eoe=a("strong"),D1o=o("mobilebert"),j1o=o(" \u2014 "),ZP=a("a"),N1o=o("MobileBertForMaskedLM"),q1o=o(" (MobileBERT model)"),G1o=l(),Qu=a("li"),ooe=a("strong"),O1o=o("mpnet"),X1o=o(" \u2014 "),e$=a("a"),V1o=o("MPNetForMaskedLM"),z1o=o(" (MPNet model)"),W1o=l(),Hu=a("li"),roe=a("strong"),Q1o=o("nystromformer"),H1o=o(" \u2014 "),o$=a("a"),U1o=o("NystromformerForMaskedLM"),J1o=o(" (Nystromformer model)"),Y1o=l(),Uu=a("li"),toe=a("strong"),K1o=o("perceiver"),Z1o=o(" \u2014 "),r$=a("a"),ebo=o("PerceiverForMaskedLM"),obo=o(" (Perceiver model)"),rbo=l(),Ju=a("li"),aoe=a("strong"),tbo=o("qdqbert"),abo=o(" \u2014 "),t$=a("a"),nbo=o("QDQBertForMaskedLM"),sbo=o(" (QDQBert model)"),lbo=l(),Yu=a("li"),noe=a("strong"),ibo=o("reformer"),dbo=o(" \u2014 "),a$=a("a"),cbo=o("ReformerForMaskedLM"),fbo=o(" (Reformer model)"),mbo=l(),Ku=a("li"),soe=a("strong"),gbo=o("rembert"),hbo=o(" \u2014 "),n$=a("a"),pbo=o("RemBertForMaskedLM"),_bo=o(" (RemBERT model)"),ubo=l(),Zu=a("li"),loe=a("strong"),bbo=o("roberta"),vbo=o(" \u2014 "),s$=a("a"),Tbo=o("RobertaForMaskedLM"),Fbo=o(" (RoBERTa model)"),Cbo=l(),e5=a("li"),ioe=a("strong"),Mbo=o("roformer"),Ebo=o(" \u2014 "),l$=a("a"),ybo=o("RoFormerForMaskedLM"),wbo=o(" (RoFormer model)"),Abo=l(),o5=a("li"),doe=a("strong"),Lbo=o("squeezebert"),Bbo=o(" \u2014 "),i$=a("a"),xbo=o("SqueezeBertForMaskedLM"),kbo=o(" (SqueezeBERT model)"),Rbo=l(),r5=a("li"),coe=a("strong"),Sbo=o("tapas"),Pbo=o(" \u2014 "),d$=a("a"),$bo=o("TapasForMaskedLM"),Ibo=o(" (TAPAS model)"),Dbo=l(),t5=a("li"),foe=a("strong"),jbo=o("wav2vec2"),Nbo=o(" \u2014 "),moe=a("code"),qbo=o("Wav2Vec2ForMaskedLM"),Gbo=o("(Wav2Vec2 model)"),Obo=l(),a5=a("li"),goe=a("strong"),Xbo=o("xlm"),Vbo=o(" \u2014 "),c$=a("a"),zbo=o("XLMWithLMHeadModel"),Wbo=o(" (XLM model)"),Qbo=l(),n5=a("li"),hoe=a("strong"),Hbo=o("xlm-roberta"),Ubo=o(" \u2014 "),f$=a("a"),Jbo=o("XLMRobertaForMaskedLM"),Ybo=o(" (XLM-RoBERTa model)"),Kbo=l(),s5=a("li"),poe=a("strong"),Zbo=o("xlm-roberta-xl"),e2o=o(" \u2014 "),m$=a("a"),o2o=o("XLMRobertaXLForMaskedLM"),r2o=o(" (XLM-RoBERTa-XL model)"),t2o=l(),l5=a("li"),_oe=a("strong"),a2o=o("yoso"),n2o=o(" \u2014 "),g$=a("a"),s2o=o("YosoForMaskedLM"),l2o=o(" (YOSO model)"),i2o=l(),i5=a("p"),d2o=o("The model is set in evaluation mode by default using "),uoe=a("code"),c2o=o("model.eval()"),f2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),boe=a("code"),m2o=o("model.train()"),g2o=l(),voe=a("p"),h2o=o("Examples:"),p2o=l(),f(AE.$$.fragment),j8e=l(),ed=a("h2"),d5=a("a"),Toe=a("span"),f(LE.$$.fragment),_2o=l(),Foe=a("span"),u2o=o("AutoModelForSeq2SeqLM"),N8e=l(),Yo=a("div"),f(BE.$$.fragment),b2o=l(),od=a("p"),v2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Coe=a("code"),T2o=o("from_pretrained()"),F2o=o("class method or the "),Moe=a("code"),C2o=o("from_config()"),M2o=o(`class
method.`),E2o=l(),xE=a("p"),y2o=o("This class cannot be instantiated directly using "),Eoe=a("code"),w2o=o("__init__()"),A2o=o(" (throws an error)."),L2o=l(),Vr=a("div"),f(kE.$$.fragment),B2o=l(),yoe=a("p"),x2o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),k2o=l(),rd=a("p"),R2o=o(`Note:
Loading a model from its configuration file does `),woe=a("strong"),S2o=o("not"),P2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("code"),$2o=o("from_pretrained()"),I2o=o("to load the model weights."),D2o=l(),Loe=a("p"),j2o=o("Examples:"),N2o=l(),f(RE.$$.fragment),q2o=l(),Ie=a("div"),f(SE.$$.fragment),G2o=l(),Boe=a("p"),O2o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X2o=l(),Xa=a("p"),V2o=o("The model class to instantiate is selected based on the "),xoe=a("code"),z2o=o("model_type"),W2o=o(` property of the config object (either
passed as an argument or loaded from `),koe=a("code"),Q2o=o("pretrained_model_name_or_path"),H2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Roe=a("code"),U2o=o("pretrained_model_name_or_path"),J2o=o(":"),Y2o=l(),ae=a("ul"),c5=a("li"),Soe=a("strong"),K2o=o("bart"),Z2o=o(" \u2014 "),h$=a("a"),evo=o("BartForConditionalGeneration"),ovo=o(" (BART model)"),rvo=l(),f5=a("li"),Poe=a("strong"),tvo=o("bigbird_pegasus"),avo=o(" \u2014 "),p$=a("a"),nvo=o("BigBirdPegasusForConditionalGeneration"),svo=o(" (BigBirdPegasus model)"),lvo=l(),m5=a("li"),$oe=a("strong"),ivo=o("blenderbot"),dvo=o(" \u2014 "),_$=a("a"),cvo=o("BlenderbotForConditionalGeneration"),fvo=o(" (Blenderbot model)"),mvo=l(),g5=a("li"),Ioe=a("strong"),gvo=o("blenderbot-small"),hvo=o(" \u2014 "),u$=a("a"),pvo=o("BlenderbotSmallForConditionalGeneration"),_vo=o(" (BlenderbotSmall model)"),uvo=l(),h5=a("li"),Doe=a("strong"),bvo=o("encoder-decoder"),vvo=o(" \u2014 "),b$=a("a"),Tvo=o("EncoderDecoderModel"),Fvo=o(" (Encoder decoder model)"),Cvo=l(),p5=a("li"),joe=a("strong"),Mvo=o("fsmt"),Evo=o(" \u2014 "),v$=a("a"),yvo=o("FSMTForConditionalGeneration"),wvo=o(" (FairSeq Machine-Translation model)"),Avo=l(),_5=a("li"),Noe=a("strong"),Lvo=o("led"),Bvo=o(" \u2014 "),T$=a("a"),xvo=o("LEDForConditionalGeneration"),kvo=o(" (LED model)"),Rvo=l(),u5=a("li"),qoe=a("strong"),Svo=o("m2m_100"),Pvo=o(" \u2014 "),F$=a("a"),$vo=o("M2M100ForConditionalGeneration"),Ivo=o(" (M2M100 model)"),Dvo=l(),b5=a("li"),Goe=a("strong"),jvo=o("marian"),Nvo=o(" \u2014 "),C$=a("a"),qvo=o("MarianMTModel"),Gvo=o(" (Marian model)"),Ovo=l(),v5=a("li"),Ooe=a("strong"),Xvo=o("mbart"),Vvo=o(" \u2014 "),M$=a("a"),zvo=o("MBartForConditionalGeneration"),Wvo=o(" (mBART model)"),Qvo=l(),T5=a("li"),Xoe=a("strong"),Hvo=o("mt5"),Uvo=o(" \u2014 "),E$=a("a"),Jvo=o("MT5ForConditionalGeneration"),Yvo=o(" (mT5 model)"),Kvo=l(),F5=a("li"),Voe=a("strong"),Zvo=o("pegasus"),eTo=o(" \u2014 "),y$=a("a"),oTo=o("PegasusForConditionalGeneration"),rTo=o(" (Pegasus model)"),tTo=l(),C5=a("li"),zoe=a("strong"),aTo=o("plbart"),nTo=o(" \u2014 "),w$=a("a"),sTo=o("PLBartForConditionalGeneration"),lTo=o(" (PLBart model)"),iTo=l(),M5=a("li"),Woe=a("strong"),dTo=o("prophetnet"),cTo=o(" \u2014 "),A$=a("a"),fTo=o("ProphetNetForConditionalGeneration"),mTo=o(" (ProphetNet model)"),gTo=l(),E5=a("li"),Qoe=a("strong"),hTo=o("t5"),pTo=o(" \u2014 "),L$=a("a"),_To=o("T5ForConditionalGeneration"),uTo=o(" (T5 model)"),bTo=l(),y5=a("li"),Hoe=a("strong"),vTo=o("xlm-prophetnet"),TTo=o(" \u2014 "),B$=a("a"),FTo=o("XLMProphetNetForConditionalGeneration"),CTo=o(" (XLMProphetNet model)"),MTo=l(),w5=a("p"),ETo=o("The model is set in evaluation mode by default using "),Uoe=a("code"),yTo=o("model.eval()"),wTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=a("code"),ATo=o("model.train()"),LTo=l(),Yoe=a("p"),BTo=o("Examples:"),xTo=l(),f(PE.$$.fragment),q8e=l(),td=a("h2"),A5=a("a"),Koe=a("span"),f($E.$$.fragment),kTo=l(),Zoe=a("span"),RTo=o("AutoModelForSequenceClassification"),G8e=l(),Ko=a("div"),f(IE.$$.fragment),STo=l(),ad=a("p"),PTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ere=a("code"),$To=o("from_pretrained()"),ITo=o("class method or the "),ore=a("code"),DTo=o("from_config()"),jTo=o(`class
method.`),NTo=l(),DE=a("p"),qTo=o("This class cannot be instantiated directly using "),rre=a("code"),GTo=o("__init__()"),OTo=o(" (throws an error)."),XTo=l(),zr=a("div"),f(jE.$$.fragment),VTo=l(),tre=a("p"),zTo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WTo=l(),nd=a("p"),QTo=o(`Note:
Loading a model from its configuration file does `),are=a("strong"),HTo=o("not"),UTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("code"),JTo=o("from_pretrained()"),YTo=o("to load the model weights."),KTo=l(),sre=a("p"),ZTo=o("Examples:"),e7o=l(),f(NE.$$.fragment),o7o=l(),De=a("div"),f(qE.$$.fragment),r7o=l(),lre=a("p"),t7o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a7o=l(),Va=a("p"),n7o=o("The model class to instantiate is selected based on the "),ire=a("code"),s7o=o("model_type"),l7o=o(` property of the config object (either
passed as an argument or loaded from `),dre=a("code"),i7o=o("pretrained_model_name_or_path"),d7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=a("code"),c7o=o("pretrained_model_name_or_path"),f7o=o(":"),m7o=l(),A=a("ul"),L5=a("li"),fre=a("strong"),g7o=o("albert"),h7o=o(" \u2014 "),x$=a("a"),p7o=o("AlbertForSequenceClassification"),_7o=o(" (ALBERT model)"),u7o=l(),B5=a("li"),mre=a("strong"),b7o=o("bart"),v7o=o(" \u2014 "),k$=a("a"),T7o=o("BartForSequenceClassification"),F7o=o(" (BART model)"),C7o=l(),x5=a("li"),gre=a("strong"),M7o=o("bert"),E7o=o(" \u2014 "),R$=a("a"),y7o=o("BertForSequenceClassification"),w7o=o(" (BERT model)"),A7o=l(),k5=a("li"),hre=a("strong"),L7o=o("big_bird"),B7o=o(" \u2014 "),S$=a("a"),x7o=o("BigBirdForSequenceClassification"),k7o=o(" (BigBird model)"),R7o=l(),R5=a("li"),pre=a("strong"),S7o=o("bigbird_pegasus"),P7o=o(" \u2014 "),P$=a("a"),$7o=o("BigBirdPegasusForSequenceClassification"),I7o=o(" (BigBirdPegasus model)"),D7o=l(),S5=a("li"),_re=a("strong"),j7o=o("camembert"),N7o=o(" \u2014 "),$$=a("a"),q7o=o("CamembertForSequenceClassification"),G7o=o(" (CamemBERT model)"),O7o=l(),P5=a("li"),ure=a("strong"),X7o=o("canine"),V7o=o(" \u2014 "),I$=a("a"),z7o=o("CanineForSequenceClassification"),W7o=o(" (Canine model)"),Q7o=l(),$5=a("li"),bre=a("strong"),H7o=o("convbert"),U7o=o(" \u2014 "),D$=a("a"),J7o=o("ConvBertForSequenceClassification"),Y7o=o(" (ConvBERT model)"),K7o=l(),I5=a("li"),vre=a("strong"),Z7o=o("ctrl"),eFo=o(" \u2014 "),j$=a("a"),oFo=o("CTRLForSequenceClassification"),rFo=o(" (CTRL model)"),tFo=l(),D5=a("li"),Tre=a("strong"),aFo=o("data2vec-text"),nFo=o(" \u2014 "),N$=a("a"),sFo=o("Data2VecTextForSequenceClassification"),lFo=o(" (Data2VecText model)"),iFo=l(),j5=a("li"),Fre=a("strong"),dFo=o("deberta"),cFo=o(" \u2014 "),q$=a("a"),fFo=o("DebertaForSequenceClassification"),mFo=o(" (DeBERTa model)"),gFo=l(),N5=a("li"),Cre=a("strong"),hFo=o("deberta-v2"),pFo=o(" \u2014 "),G$=a("a"),_Fo=o("DebertaV2ForSequenceClassification"),uFo=o(" (DeBERTa-v2 model)"),bFo=l(),q5=a("li"),Mre=a("strong"),vFo=o("distilbert"),TFo=o(" \u2014 "),O$=a("a"),FFo=o("DistilBertForSequenceClassification"),CFo=o(" (DistilBERT model)"),MFo=l(),G5=a("li"),Ere=a("strong"),EFo=o("electra"),yFo=o(" \u2014 "),X$=a("a"),wFo=o("ElectraForSequenceClassification"),AFo=o(" (ELECTRA model)"),LFo=l(),O5=a("li"),yre=a("strong"),BFo=o("flaubert"),xFo=o(" \u2014 "),V$=a("a"),kFo=o("FlaubertForSequenceClassification"),RFo=o(" (FlauBERT model)"),SFo=l(),X5=a("li"),wre=a("strong"),PFo=o("fnet"),$Fo=o(" \u2014 "),z$=a("a"),IFo=o("FNetForSequenceClassification"),DFo=o(" (FNet model)"),jFo=l(),V5=a("li"),Are=a("strong"),NFo=o("funnel"),qFo=o(" \u2014 "),W$=a("a"),GFo=o("FunnelForSequenceClassification"),OFo=o(" (Funnel Transformer model)"),XFo=l(),z5=a("li"),Lre=a("strong"),VFo=o("gpt2"),zFo=o(" \u2014 "),Q$=a("a"),WFo=o("GPT2ForSequenceClassification"),QFo=o(" (OpenAI GPT-2 model)"),HFo=l(),W5=a("li"),Bre=a("strong"),UFo=o("gpt_neo"),JFo=o(" \u2014 "),H$=a("a"),YFo=o("GPTNeoForSequenceClassification"),KFo=o(" (GPT Neo model)"),ZFo=l(),Q5=a("li"),xre=a("strong"),e9o=o("gptj"),o9o=o(" \u2014 "),U$=a("a"),r9o=o("GPTJForSequenceClassification"),t9o=o(" (GPT-J model)"),a9o=l(),H5=a("li"),kre=a("strong"),n9o=o("ibert"),s9o=o(" \u2014 "),J$=a("a"),l9o=o("IBertForSequenceClassification"),i9o=o(" (I-BERT model)"),d9o=l(),U5=a("li"),Rre=a("strong"),c9o=o("layoutlm"),f9o=o(" \u2014 "),Y$=a("a"),m9o=o("LayoutLMForSequenceClassification"),g9o=o(" (LayoutLM model)"),h9o=l(),J5=a("li"),Sre=a("strong"),p9o=o("layoutlmv2"),_9o=o(" \u2014 "),K$=a("a"),u9o=o("LayoutLMv2ForSequenceClassification"),b9o=o(" (LayoutLMv2 model)"),v9o=l(),Y5=a("li"),Pre=a("strong"),T9o=o("led"),F9o=o(" \u2014 "),Z$=a("a"),C9o=o("LEDForSequenceClassification"),M9o=o(" (LED model)"),E9o=l(),K5=a("li"),$re=a("strong"),y9o=o("longformer"),w9o=o(" \u2014 "),eI=a("a"),A9o=o("LongformerForSequenceClassification"),L9o=o(" (Longformer model)"),B9o=l(),Z5=a("li"),Ire=a("strong"),x9o=o("mbart"),k9o=o(" \u2014 "),oI=a("a"),R9o=o("MBartForSequenceClassification"),S9o=o(" (mBART model)"),P9o=l(),e1=a("li"),Dre=a("strong"),$9o=o("megatron-bert"),I9o=o(" \u2014 "),rI=a("a"),D9o=o("MegatronBertForSequenceClassification"),j9o=o(" (MegatronBert model)"),N9o=l(),o1=a("li"),jre=a("strong"),q9o=o("mobilebert"),G9o=o(" \u2014 "),tI=a("a"),O9o=o("MobileBertForSequenceClassification"),X9o=o(" (MobileBERT model)"),V9o=l(),r1=a("li"),Nre=a("strong"),z9o=o("mpnet"),W9o=o(" \u2014 "),aI=a("a"),Q9o=o("MPNetForSequenceClassification"),H9o=o(" (MPNet model)"),U9o=l(),t1=a("li"),qre=a("strong"),J9o=o("nystromformer"),Y9o=o(" \u2014 "),nI=a("a"),K9o=o("NystromformerForSequenceClassification"),Z9o=o(" (Nystromformer model)"),eCo=l(),a1=a("li"),Gre=a("strong"),oCo=o("openai-gpt"),rCo=o(" \u2014 "),sI=a("a"),tCo=o("OpenAIGPTForSequenceClassification"),aCo=o(" (OpenAI GPT model)"),nCo=l(),n1=a("li"),Ore=a("strong"),sCo=o("perceiver"),lCo=o(" \u2014 "),lI=a("a"),iCo=o("PerceiverForSequenceClassification"),dCo=o(" (Perceiver model)"),cCo=l(),s1=a("li"),Xre=a("strong"),fCo=o("plbart"),mCo=o(" \u2014 "),iI=a("a"),gCo=o("PLBartForSequenceClassification"),hCo=o(" (PLBart model)"),pCo=l(),l1=a("li"),Vre=a("strong"),_Co=o("qdqbert"),uCo=o(" \u2014 "),dI=a("a"),bCo=o("QDQBertForSequenceClassification"),vCo=o(" (QDQBert model)"),TCo=l(),i1=a("li"),zre=a("strong"),FCo=o("reformer"),CCo=o(" \u2014 "),cI=a("a"),MCo=o("ReformerForSequenceClassification"),ECo=o(" (Reformer model)"),yCo=l(),d1=a("li"),Wre=a("strong"),wCo=o("rembert"),ACo=o(" \u2014 "),fI=a("a"),LCo=o("RemBertForSequenceClassification"),BCo=o(" (RemBERT model)"),xCo=l(),c1=a("li"),Qre=a("strong"),kCo=o("roberta"),RCo=o(" \u2014 "),mI=a("a"),SCo=o("RobertaForSequenceClassification"),PCo=o(" (RoBERTa model)"),$Co=l(),f1=a("li"),Hre=a("strong"),ICo=o("roformer"),DCo=o(" \u2014 "),gI=a("a"),jCo=o("RoFormerForSequenceClassification"),NCo=o(" (RoFormer model)"),qCo=l(),m1=a("li"),Ure=a("strong"),GCo=o("squeezebert"),OCo=o(" \u2014 "),hI=a("a"),XCo=o("SqueezeBertForSequenceClassification"),VCo=o(" (SqueezeBERT model)"),zCo=l(),g1=a("li"),Jre=a("strong"),WCo=o("tapas"),QCo=o(" \u2014 "),pI=a("a"),HCo=o("TapasForSequenceClassification"),UCo=o(" (TAPAS model)"),JCo=l(),h1=a("li"),Yre=a("strong"),YCo=o("transfo-xl"),KCo=o(" \u2014 "),_I=a("a"),ZCo=o("TransfoXLForSequenceClassification"),e4o=o(" (Transformer-XL model)"),o4o=l(),p1=a("li"),Kre=a("strong"),r4o=o("xlm"),t4o=o(" \u2014 "),uI=a("a"),a4o=o("XLMForSequenceClassification"),n4o=o(" (XLM model)"),s4o=l(),_1=a("li"),Zre=a("strong"),l4o=o("xlm-roberta"),i4o=o(" \u2014 "),bI=a("a"),d4o=o("XLMRobertaForSequenceClassification"),c4o=o(" (XLM-RoBERTa model)"),f4o=l(),u1=a("li"),ete=a("strong"),m4o=o("xlm-roberta-xl"),g4o=o(" \u2014 "),vI=a("a"),h4o=o("XLMRobertaXLForSequenceClassification"),p4o=o(" (XLM-RoBERTa-XL model)"),_4o=l(),b1=a("li"),ote=a("strong"),u4o=o("xlnet"),b4o=o(" \u2014 "),TI=a("a"),v4o=o("XLNetForSequenceClassification"),T4o=o(" (XLNet model)"),F4o=l(),v1=a("li"),rte=a("strong"),C4o=o("yoso"),M4o=o(" \u2014 "),FI=a("a"),E4o=o("YosoForSequenceClassification"),y4o=o(" (YOSO model)"),w4o=l(),T1=a("p"),A4o=o("The model is set in evaluation mode by default using "),tte=a("code"),L4o=o("model.eval()"),B4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=a("code"),x4o=o("model.train()"),k4o=l(),nte=a("p"),R4o=o("Examples:"),S4o=l(),f(GE.$$.fragment),O8e=l(),sd=a("h2"),F1=a("a"),ste=a("span"),f(OE.$$.fragment),P4o=l(),lte=a("span"),$4o=o("AutoModelForMultipleChoice"),X8e=l(),Zo=a("div"),f(XE.$$.fragment),I4o=l(),ld=a("p"),D4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ite=a("code"),j4o=o("from_pretrained()"),N4o=o("class method or the "),dte=a("code"),q4o=o("from_config()"),G4o=o(`class
method.`),O4o=l(),VE=a("p"),X4o=o("This class cannot be instantiated directly using "),cte=a("code"),V4o=o("__init__()"),z4o=o(" (throws an error)."),W4o=l(),Wr=a("div"),f(zE.$$.fragment),Q4o=l(),fte=a("p"),H4o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),U4o=l(),id=a("p"),J4o=o(`Note:
Loading a model from its configuration file does `),mte=a("strong"),Y4o=o("not"),K4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=a("code"),Z4o=o("from_pretrained()"),eMo=o("to load the model weights."),oMo=l(),hte=a("p"),rMo=o("Examples:"),tMo=l(),f(WE.$$.fragment),aMo=l(),je=a("div"),f(QE.$$.fragment),nMo=l(),pte=a("p"),sMo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lMo=l(),za=a("p"),iMo=o("The model class to instantiate is selected based on the "),_te=a("code"),dMo=o("model_type"),cMo=o(` property of the config object (either
passed as an argument or loaded from `),ute=a("code"),fMo=o("pretrained_model_name_or_path"),mMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bte=a("code"),gMo=o("pretrained_model_name_or_path"),hMo=o(":"),pMo=l(),G=a("ul"),C1=a("li"),vte=a("strong"),_Mo=o("albert"),uMo=o(" \u2014 "),CI=a("a"),bMo=o("AlbertForMultipleChoice"),vMo=o(" (ALBERT model)"),TMo=l(),M1=a("li"),Tte=a("strong"),FMo=o("bert"),CMo=o(" \u2014 "),MI=a("a"),MMo=o("BertForMultipleChoice"),EMo=o(" (BERT model)"),yMo=l(),E1=a("li"),Fte=a("strong"),wMo=o("big_bird"),AMo=o(" \u2014 "),EI=a("a"),LMo=o("BigBirdForMultipleChoice"),BMo=o(" (BigBird model)"),xMo=l(),y1=a("li"),Cte=a("strong"),kMo=o("camembert"),RMo=o(" \u2014 "),yI=a("a"),SMo=o("CamembertForMultipleChoice"),PMo=o(" (CamemBERT model)"),$Mo=l(),w1=a("li"),Mte=a("strong"),IMo=o("canine"),DMo=o(" \u2014 "),wI=a("a"),jMo=o("CanineForMultipleChoice"),NMo=o(" (Canine model)"),qMo=l(),A1=a("li"),Ete=a("strong"),GMo=o("convbert"),OMo=o(" \u2014 "),AI=a("a"),XMo=o("ConvBertForMultipleChoice"),VMo=o(" (ConvBERT model)"),zMo=l(),L1=a("li"),yte=a("strong"),WMo=o("data2vec-text"),QMo=o(" \u2014 "),LI=a("a"),HMo=o("Data2VecTextForMultipleChoice"),UMo=o(" (Data2VecText model)"),JMo=l(),B1=a("li"),wte=a("strong"),YMo=o("distilbert"),KMo=o(" \u2014 "),BI=a("a"),ZMo=o("DistilBertForMultipleChoice"),eEo=o(" (DistilBERT model)"),oEo=l(),x1=a("li"),Ate=a("strong"),rEo=o("electra"),tEo=o(" \u2014 "),xI=a("a"),aEo=o("ElectraForMultipleChoice"),nEo=o(" (ELECTRA model)"),sEo=l(),k1=a("li"),Lte=a("strong"),lEo=o("flaubert"),iEo=o(" \u2014 "),kI=a("a"),dEo=o("FlaubertForMultipleChoice"),cEo=o(" (FlauBERT model)"),fEo=l(),R1=a("li"),Bte=a("strong"),mEo=o("fnet"),gEo=o(" \u2014 "),RI=a("a"),hEo=o("FNetForMultipleChoice"),pEo=o(" (FNet model)"),_Eo=l(),S1=a("li"),xte=a("strong"),uEo=o("funnel"),bEo=o(" \u2014 "),SI=a("a"),vEo=o("FunnelForMultipleChoice"),TEo=o(" (Funnel Transformer model)"),FEo=l(),P1=a("li"),kte=a("strong"),CEo=o("ibert"),MEo=o(" \u2014 "),PI=a("a"),EEo=o("IBertForMultipleChoice"),yEo=o(" (I-BERT model)"),wEo=l(),$1=a("li"),Rte=a("strong"),AEo=o("longformer"),LEo=o(" \u2014 "),$I=a("a"),BEo=o("LongformerForMultipleChoice"),xEo=o(" (Longformer model)"),kEo=l(),I1=a("li"),Ste=a("strong"),REo=o("megatron-bert"),SEo=o(" \u2014 "),II=a("a"),PEo=o("MegatronBertForMultipleChoice"),$Eo=o(" (MegatronBert model)"),IEo=l(),D1=a("li"),Pte=a("strong"),DEo=o("mobilebert"),jEo=o(" \u2014 "),DI=a("a"),NEo=o("MobileBertForMultipleChoice"),qEo=o(" (MobileBERT model)"),GEo=l(),j1=a("li"),$te=a("strong"),OEo=o("mpnet"),XEo=o(" \u2014 "),jI=a("a"),VEo=o("MPNetForMultipleChoice"),zEo=o(" (MPNet model)"),WEo=l(),N1=a("li"),Ite=a("strong"),QEo=o("nystromformer"),HEo=o(" \u2014 "),NI=a("a"),UEo=o("NystromformerForMultipleChoice"),JEo=o(" (Nystromformer model)"),YEo=l(),q1=a("li"),Dte=a("strong"),KEo=o("qdqbert"),ZEo=o(" \u2014 "),qI=a("a"),e3o=o("QDQBertForMultipleChoice"),o3o=o(" (QDQBert model)"),r3o=l(),G1=a("li"),jte=a("strong"),t3o=o("rembert"),a3o=o(" \u2014 "),GI=a("a"),n3o=o("RemBertForMultipleChoice"),s3o=o(" (RemBERT model)"),l3o=l(),O1=a("li"),Nte=a("strong"),i3o=o("roberta"),d3o=o(" \u2014 "),OI=a("a"),c3o=o("RobertaForMultipleChoice"),f3o=o(" (RoBERTa model)"),m3o=l(),X1=a("li"),qte=a("strong"),g3o=o("roformer"),h3o=o(" \u2014 "),XI=a("a"),p3o=o("RoFormerForMultipleChoice"),_3o=o(" (RoFormer model)"),u3o=l(),V1=a("li"),Gte=a("strong"),b3o=o("squeezebert"),v3o=o(" \u2014 "),VI=a("a"),T3o=o("SqueezeBertForMultipleChoice"),F3o=o(" (SqueezeBERT model)"),C3o=l(),z1=a("li"),Ote=a("strong"),M3o=o("xlm"),E3o=o(" \u2014 "),zI=a("a"),y3o=o("XLMForMultipleChoice"),w3o=o(" (XLM model)"),A3o=l(),W1=a("li"),Xte=a("strong"),L3o=o("xlm-roberta"),B3o=o(" \u2014 "),WI=a("a"),x3o=o("XLMRobertaForMultipleChoice"),k3o=o(" (XLM-RoBERTa model)"),R3o=l(),Q1=a("li"),Vte=a("strong"),S3o=o("xlm-roberta-xl"),P3o=o(" \u2014 "),QI=a("a"),$3o=o("XLMRobertaXLForMultipleChoice"),I3o=o(" (XLM-RoBERTa-XL model)"),D3o=l(),H1=a("li"),zte=a("strong"),j3o=o("xlnet"),N3o=o(" \u2014 "),HI=a("a"),q3o=o("XLNetForMultipleChoice"),G3o=o(" (XLNet model)"),O3o=l(),U1=a("li"),Wte=a("strong"),X3o=o("yoso"),V3o=o(" \u2014 "),UI=a("a"),z3o=o("YosoForMultipleChoice"),W3o=o(" (YOSO model)"),Q3o=l(),J1=a("p"),H3o=o("The model is set in evaluation mode by default using "),Qte=a("code"),U3o=o("model.eval()"),J3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hte=a("code"),Y3o=o("model.train()"),K3o=l(),Ute=a("p"),Z3o=o("Examples:"),eyo=l(),f(HE.$$.fragment),V8e=l(),dd=a("h2"),Y1=a("a"),Jte=a("span"),f(UE.$$.fragment),oyo=l(),Yte=a("span"),ryo=o("AutoModelForNextSentencePrediction"),z8e=l(),er=a("div"),f(JE.$$.fragment),tyo=l(),cd=a("p"),ayo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kte=a("code"),nyo=o("from_pretrained()"),syo=o("class method or the "),Zte=a("code"),lyo=o("from_config()"),iyo=o(`class
method.`),dyo=l(),YE=a("p"),cyo=o("This class cannot be instantiated directly using "),eae=a("code"),fyo=o("__init__()"),myo=o(" (throws an error)."),gyo=l(),Qr=a("div"),f(KE.$$.fragment),hyo=l(),oae=a("p"),pyo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_yo=l(),fd=a("p"),uyo=o(`Note:
Loading a model from its configuration file does `),rae=a("strong"),byo=o("not"),vyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tae=a("code"),Tyo=o("from_pretrained()"),Fyo=o("to load the model weights."),Cyo=l(),aae=a("p"),Myo=o("Examples:"),Eyo=l(),f(ZE.$$.fragment),yyo=l(),Ne=a("div"),f(e3.$$.fragment),wyo=l(),nae=a("p"),Ayo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Lyo=l(),Wa=a("p"),Byo=o("The model class to instantiate is selected based on the "),sae=a("code"),xyo=o("model_type"),kyo=o(` property of the config object (either
passed as an argument or loaded from `),lae=a("code"),Ryo=o("pretrained_model_name_or_path"),Syo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iae=a("code"),Pyo=o("pretrained_model_name_or_path"),$yo=o(":"),Iyo=l(),na=a("ul"),K1=a("li"),dae=a("strong"),Dyo=o("bert"),jyo=o(" \u2014 "),JI=a("a"),Nyo=o("BertForNextSentencePrediction"),qyo=o(" (BERT model)"),Gyo=l(),Z1=a("li"),cae=a("strong"),Oyo=o("fnet"),Xyo=o(" \u2014 "),YI=a("a"),Vyo=o("FNetForNextSentencePrediction"),zyo=o(" (FNet model)"),Wyo=l(),eb=a("li"),fae=a("strong"),Qyo=o("megatron-bert"),Hyo=o(" \u2014 "),KI=a("a"),Uyo=o("MegatronBertForNextSentencePrediction"),Jyo=o(" (MegatronBert model)"),Yyo=l(),ob=a("li"),mae=a("strong"),Kyo=o("mobilebert"),Zyo=o(" \u2014 "),ZI=a("a"),ewo=o("MobileBertForNextSentencePrediction"),owo=o(" (MobileBERT model)"),rwo=l(),rb=a("li"),gae=a("strong"),two=o("qdqbert"),awo=o(" \u2014 "),eD=a("a"),nwo=o("QDQBertForNextSentencePrediction"),swo=o(" (QDQBert model)"),lwo=l(),tb=a("p"),iwo=o("The model is set in evaluation mode by default using "),hae=a("code"),dwo=o("model.eval()"),cwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pae=a("code"),fwo=o("model.train()"),mwo=l(),_ae=a("p"),gwo=o("Examples:"),hwo=l(),f(o3.$$.fragment),W8e=l(),md=a("h2"),ab=a("a"),uae=a("span"),f(r3.$$.fragment),pwo=l(),bae=a("span"),_wo=o("AutoModelForTokenClassification"),Q8e=l(),or=a("div"),f(t3.$$.fragment),uwo=l(),gd=a("p"),bwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vae=a("code"),vwo=o("from_pretrained()"),Two=o("class method or the "),Tae=a("code"),Fwo=o("from_config()"),Cwo=o(`class
method.`),Mwo=l(),a3=a("p"),Ewo=o("This class cannot be instantiated directly using "),Fae=a("code"),ywo=o("__init__()"),wwo=o(" (throws an error)."),Awo=l(),Hr=a("div"),f(n3.$$.fragment),Lwo=l(),Cae=a("p"),Bwo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xwo=l(),hd=a("p"),kwo=o(`Note:
Loading a model from its configuration file does `),Mae=a("strong"),Rwo=o("not"),Swo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=a("code"),Pwo=o("from_pretrained()"),$wo=o("to load the model weights."),Iwo=l(),yae=a("p"),Dwo=o("Examples:"),jwo=l(),f(s3.$$.fragment),Nwo=l(),qe=a("div"),f(l3.$$.fragment),qwo=l(),wae=a("p"),Gwo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Owo=l(),Qa=a("p"),Xwo=o("The model class to instantiate is selected based on the "),Aae=a("code"),Vwo=o("model_type"),zwo=o(` property of the config object (either
passed as an argument or loaded from `),Lae=a("code"),Wwo=o("pretrained_model_name_or_path"),Qwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=a("code"),Hwo=o("pretrained_model_name_or_path"),Uwo=o(":"),Jwo=l(),N=a("ul"),nb=a("li"),xae=a("strong"),Ywo=o("albert"),Kwo=o(" \u2014 "),oD=a("a"),Zwo=o("AlbertForTokenClassification"),e6o=o(" (ALBERT model)"),o6o=l(),sb=a("li"),kae=a("strong"),r6o=o("bert"),t6o=o(" \u2014 "),rD=a("a"),a6o=o("BertForTokenClassification"),n6o=o(" (BERT model)"),s6o=l(),lb=a("li"),Rae=a("strong"),l6o=o("big_bird"),i6o=o(" \u2014 "),tD=a("a"),d6o=o("BigBirdForTokenClassification"),c6o=o(" (BigBird model)"),f6o=l(),ib=a("li"),Sae=a("strong"),m6o=o("camembert"),g6o=o(" \u2014 "),aD=a("a"),h6o=o("CamembertForTokenClassification"),p6o=o(" (CamemBERT model)"),_6o=l(),db=a("li"),Pae=a("strong"),u6o=o("canine"),b6o=o(" \u2014 "),nD=a("a"),v6o=o("CanineForTokenClassification"),T6o=o(" (Canine model)"),F6o=l(),cb=a("li"),$ae=a("strong"),C6o=o("convbert"),M6o=o(" \u2014 "),sD=a("a"),E6o=o("ConvBertForTokenClassification"),y6o=o(" (ConvBERT model)"),w6o=l(),fb=a("li"),Iae=a("strong"),A6o=o("data2vec-text"),L6o=o(" \u2014 "),lD=a("a"),B6o=o("Data2VecTextForTokenClassification"),x6o=o(" (Data2VecText model)"),k6o=l(),mb=a("li"),Dae=a("strong"),R6o=o("deberta"),S6o=o(" \u2014 "),iD=a("a"),P6o=o("DebertaForTokenClassification"),$6o=o(" (DeBERTa model)"),I6o=l(),gb=a("li"),jae=a("strong"),D6o=o("deberta-v2"),j6o=o(" \u2014 "),dD=a("a"),N6o=o("DebertaV2ForTokenClassification"),q6o=o(" (DeBERTa-v2 model)"),G6o=l(),hb=a("li"),Nae=a("strong"),O6o=o("distilbert"),X6o=o(" \u2014 "),cD=a("a"),V6o=o("DistilBertForTokenClassification"),z6o=o(" (DistilBERT model)"),W6o=l(),pb=a("li"),qae=a("strong"),Q6o=o("electra"),H6o=o(" \u2014 "),fD=a("a"),U6o=o("ElectraForTokenClassification"),J6o=o(" (ELECTRA model)"),Y6o=l(),_b=a("li"),Gae=a("strong"),K6o=o("flaubert"),Z6o=o(" \u2014 "),mD=a("a"),eAo=o("FlaubertForTokenClassification"),oAo=o(" (FlauBERT model)"),rAo=l(),ub=a("li"),Oae=a("strong"),tAo=o("fnet"),aAo=o(" \u2014 "),gD=a("a"),nAo=o("FNetForTokenClassification"),sAo=o(" (FNet model)"),lAo=l(),bb=a("li"),Xae=a("strong"),iAo=o("funnel"),dAo=o(" \u2014 "),hD=a("a"),cAo=o("FunnelForTokenClassification"),fAo=o(" (Funnel Transformer model)"),mAo=l(),vb=a("li"),Vae=a("strong"),gAo=o("gpt2"),hAo=o(" \u2014 "),pD=a("a"),pAo=o("GPT2ForTokenClassification"),_Ao=o(" (OpenAI GPT-2 model)"),uAo=l(),Tb=a("li"),zae=a("strong"),bAo=o("ibert"),vAo=o(" \u2014 "),_D=a("a"),TAo=o("IBertForTokenClassification"),FAo=o(" (I-BERT model)"),CAo=l(),Fb=a("li"),Wae=a("strong"),MAo=o("layoutlm"),EAo=o(" \u2014 "),uD=a("a"),yAo=o("LayoutLMForTokenClassification"),wAo=o(" (LayoutLM model)"),AAo=l(),Cb=a("li"),Qae=a("strong"),LAo=o("layoutlmv2"),BAo=o(" \u2014 "),bD=a("a"),xAo=o("LayoutLMv2ForTokenClassification"),kAo=o(" (LayoutLMv2 model)"),RAo=l(),Mb=a("li"),Hae=a("strong"),SAo=o("longformer"),PAo=o(" \u2014 "),vD=a("a"),$Ao=o("LongformerForTokenClassification"),IAo=o(" (Longformer model)"),DAo=l(),Eb=a("li"),Uae=a("strong"),jAo=o("megatron-bert"),NAo=o(" \u2014 "),TD=a("a"),qAo=o("MegatronBertForTokenClassification"),GAo=o(" (MegatronBert model)"),OAo=l(),yb=a("li"),Jae=a("strong"),XAo=o("mobilebert"),VAo=o(" \u2014 "),FD=a("a"),zAo=o("MobileBertForTokenClassification"),WAo=o(" (MobileBERT model)"),QAo=l(),wb=a("li"),Yae=a("strong"),HAo=o("mpnet"),UAo=o(" \u2014 "),CD=a("a"),JAo=o("MPNetForTokenClassification"),YAo=o(" (MPNet model)"),KAo=l(),Ab=a("li"),Kae=a("strong"),ZAo=o("nystromformer"),e0o=o(" \u2014 "),MD=a("a"),o0o=o("NystromformerForTokenClassification"),r0o=o(" (Nystromformer model)"),t0o=l(),Lb=a("li"),Zae=a("strong"),a0o=o("qdqbert"),n0o=o(" \u2014 "),ED=a("a"),s0o=o("QDQBertForTokenClassification"),l0o=o(" (QDQBert model)"),i0o=l(),Bb=a("li"),ene=a("strong"),d0o=o("rembert"),c0o=o(" \u2014 "),yD=a("a"),f0o=o("RemBertForTokenClassification"),m0o=o(" (RemBERT model)"),g0o=l(),xb=a("li"),one=a("strong"),h0o=o("roberta"),p0o=o(" \u2014 "),wD=a("a"),_0o=o("RobertaForTokenClassification"),u0o=o(" (RoBERTa model)"),b0o=l(),kb=a("li"),rne=a("strong"),v0o=o("roformer"),T0o=o(" \u2014 "),AD=a("a"),F0o=o("RoFormerForTokenClassification"),C0o=o(" (RoFormer model)"),M0o=l(),Rb=a("li"),tne=a("strong"),E0o=o("squeezebert"),y0o=o(" \u2014 "),LD=a("a"),w0o=o("SqueezeBertForTokenClassification"),A0o=o(" (SqueezeBERT model)"),L0o=l(),Sb=a("li"),ane=a("strong"),B0o=o("xlm"),x0o=o(" \u2014 "),BD=a("a"),k0o=o("XLMForTokenClassification"),R0o=o(" (XLM model)"),S0o=l(),Pb=a("li"),nne=a("strong"),P0o=o("xlm-roberta"),$0o=o(" \u2014 "),xD=a("a"),I0o=o("XLMRobertaForTokenClassification"),D0o=o(" (XLM-RoBERTa model)"),j0o=l(),$b=a("li"),sne=a("strong"),N0o=o("xlm-roberta-xl"),q0o=o(" \u2014 "),kD=a("a"),G0o=o("XLMRobertaXLForTokenClassification"),O0o=o(" (XLM-RoBERTa-XL model)"),X0o=l(),Ib=a("li"),lne=a("strong"),V0o=o("xlnet"),z0o=o(" \u2014 "),RD=a("a"),W0o=o("XLNetForTokenClassification"),Q0o=o(" (XLNet model)"),H0o=l(),Db=a("li"),ine=a("strong"),U0o=o("yoso"),J0o=o(" \u2014 "),SD=a("a"),Y0o=o("YosoForTokenClassification"),K0o=o(" (YOSO model)"),Z0o=l(),jb=a("p"),eLo=o("The model is set in evaluation mode by default using "),dne=a("code"),oLo=o("model.eval()"),rLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cne=a("code"),tLo=o("model.train()"),aLo=l(),fne=a("p"),nLo=o("Examples:"),sLo=l(),f(i3.$$.fragment),H8e=l(),pd=a("h2"),Nb=a("a"),mne=a("span"),f(d3.$$.fragment),lLo=l(),gne=a("span"),iLo=o("AutoModelForQuestionAnswering"),U8e=l(),rr=a("div"),f(c3.$$.fragment),dLo=l(),_d=a("p"),cLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hne=a("code"),fLo=o("from_pretrained()"),mLo=o("class method or the "),pne=a("code"),gLo=o("from_config()"),hLo=o(`class
method.`),pLo=l(),f3=a("p"),_Lo=o("This class cannot be instantiated directly using "),_ne=a("code"),uLo=o("__init__()"),bLo=o(" (throws an error)."),vLo=l(),Ur=a("div"),f(m3.$$.fragment),TLo=l(),une=a("p"),FLo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CLo=l(),ud=a("p"),MLo=o(`Note:
Loading a model from its configuration file does `),bne=a("strong"),ELo=o("not"),yLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vne=a("code"),wLo=o("from_pretrained()"),ALo=o("to load the model weights."),LLo=l(),Tne=a("p"),BLo=o("Examples:"),xLo=l(),f(g3.$$.fragment),kLo=l(),Ge=a("div"),f(h3.$$.fragment),RLo=l(),Fne=a("p"),SLo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PLo=l(),Ha=a("p"),$Lo=o("The model class to instantiate is selected based on the "),Cne=a("code"),ILo=o("model_type"),DLo=o(` property of the config object (either
passed as an argument or loaded from `),Mne=a("code"),jLo=o("pretrained_model_name_or_path"),NLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ene=a("code"),qLo=o("pretrained_model_name_or_path"),GLo=o(":"),OLo=l(),R=a("ul"),qb=a("li"),yne=a("strong"),XLo=o("albert"),VLo=o(" \u2014 "),PD=a("a"),zLo=o("AlbertForQuestionAnswering"),WLo=o(" (ALBERT model)"),QLo=l(),Gb=a("li"),wne=a("strong"),HLo=o("bart"),ULo=o(" \u2014 "),$D=a("a"),JLo=o("BartForQuestionAnswering"),YLo=o(" (BART model)"),KLo=l(),Ob=a("li"),Ane=a("strong"),ZLo=o("bert"),e8o=o(" \u2014 "),ID=a("a"),o8o=o("BertForQuestionAnswering"),r8o=o(" (BERT model)"),t8o=l(),Xb=a("li"),Lne=a("strong"),a8o=o("big_bird"),n8o=o(" \u2014 "),DD=a("a"),s8o=o("BigBirdForQuestionAnswering"),l8o=o(" (BigBird model)"),i8o=l(),Vb=a("li"),Bne=a("strong"),d8o=o("bigbird_pegasus"),c8o=o(" \u2014 "),jD=a("a"),f8o=o("BigBirdPegasusForQuestionAnswering"),m8o=o(" (BigBirdPegasus model)"),g8o=l(),zb=a("li"),xne=a("strong"),h8o=o("camembert"),p8o=o(" \u2014 "),ND=a("a"),_8o=o("CamembertForQuestionAnswering"),u8o=o(" (CamemBERT model)"),b8o=l(),Wb=a("li"),kne=a("strong"),v8o=o("canine"),T8o=o(" \u2014 "),qD=a("a"),F8o=o("CanineForQuestionAnswering"),C8o=o(" (Canine model)"),M8o=l(),Qb=a("li"),Rne=a("strong"),E8o=o("convbert"),y8o=o(" \u2014 "),GD=a("a"),w8o=o("ConvBertForQuestionAnswering"),A8o=o(" (ConvBERT model)"),L8o=l(),Hb=a("li"),Sne=a("strong"),B8o=o("data2vec-text"),x8o=o(" \u2014 "),OD=a("a"),k8o=o("Data2VecTextForQuestionAnswering"),R8o=o(" (Data2VecText model)"),S8o=l(),Ub=a("li"),Pne=a("strong"),P8o=o("deberta"),$8o=o(" \u2014 "),XD=a("a"),I8o=o("DebertaForQuestionAnswering"),D8o=o(" (DeBERTa model)"),j8o=l(),Jb=a("li"),$ne=a("strong"),N8o=o("deberta-v2"),q8o=o(" \u2014 "),VD=a("a"),G8o=o("DebertaV2ForQuestionAnswering"),O8o=o(" (DeBERTa-v2 model)"),X8o=l(),Yb=a("li"),Ine=a("strong"),V8o=o("distilbert"),z8o=o(" \u2014 "),zD=a("a"),W8o=o("DistilBertForQuestionAnswering"),Q8o=o(" (DistilBERT model)"),H8o=l(),Kb=a("li"),Dne=a("strong"),U8o=o("electra"),J8o=o(" \u2014 "),WD=a("a"),Y8o=o("ElectraForQuestionAnswering"),K8o=o(" (ELECTRA model)"),Z8o=l(),Zb=a("li"),jne=a("strong"),eBo=o("flaubert"),oBo=o(" \u2014 "),QD=a("a"),rBo=o("FlaubertForQuestionAnsweringSimple"),tBo=o(" (FlauBERT model)"),aBo=l(),e2=a("li"),Nne=a("strong"),nBo=o("fnet"),sBo=o(" \u2014 "),HD=a("a"),lBo=o("FNetForQuestionAnswering"),iBo=o(" (FNet model)"),dBo=l(),o2=a("li"),qne=a("strong"),cBo=o("funnel"),fBo=o(" \u2014 "),UD=a("a"),mBo=o("FunnelForQuestionAnswering"),gBo=o(" (Funnel Transformer model)"),hBo=l(),r2=a("li"),Gne=a("strong"),pBo=o("gptj"),_Bo=o(" \u2014 "),JD=a("a"),uBo=o("GPTJForQuestionAnswering"),bBo=o(" (GPT-J model)"),vBo=l(),t2=a("li"),One=a("strong"),TBo=o("ibert"),FBo=o(" \u2014 "),YD=a("a"),CBo=o("IBertForQuestionAnswering"),MBo=o(" (I-BERT model)"),EBo=l(),a2=a("li"),Xne=a("strong"),yBo=o("layoutlmv2"),wBo=o(" \u2014 "),KD=a("a"),ABo=o("LayoutLMv2ForQuestionAnswering"),LBo=o(" (LayoutLMv2 model)"),BBo=l(),n2=a("li"),Vne=a("strong"),xBo=o("led"),kBo=o(" \u2014 "),ZD=a("a"),RBo=o("LEDForQuestionAnswering"),SBo=o(" (LED model)"),PBo=l(),s2=a("li"),zne=a("strong"),$Bo=o("longformer"),IBo=o(" \u2014 "),ej=a("a"),DBo=o("LongformerForQuestionAnswering"),jBo=o(" (Longformer model)"),NBo=l(),l2=a("li"),Wne=a("strong"),qBo=o("lxmert"),GBo=o(" \u2014 "),oj=a("a"),OBo=o("LxmertForQuestionAnswering"),XBo=o(" (LXMERT model)"),VBo=l(),i2=a("li"),Qne=a("strong"),zBo=o("mbart"),WBo=o(" \u2014 "),rj=a("a"),QBo=o("MBartForQuestionAnswering"),HBo=o(" (mBART model)"),UBo=l(),d2=a("li"),Hne=a("strong"),JBo=o("megatron-bert"),YBo=o(" \u2014 "),tj=a("a"),KBo=o("MegatronBertForQuestionAnswering"),ZBo=o(" (MegatronBert model)"),exo=l(),c2=a("li"),Une=a("strong"),oxo=o("mobilebert"),rxo=o(" \u2014 "),aj=a("a"),txo=o("MobileBertForQuestionAnswering"),axo=o(" (MobileBERT model)"),nxo=l(),f2=a("li"),Jne=a("strong"),sxo=o("mpnet"),lxo=o(" \u2014 "),nj=a("a"),ixo=o("MPNetForQuestionAnswering"),dxo=o(" (MPNet model)"),cxo=l(),m2=a("li"),Yne=a("strong"),fxo=o("nystromformer"),mxo=o(" \u2014 "),sj=a("a"),gxo=o("NystromformerForQuestionAnswering"),hxo=o(" (Nystromformer model)"),pxo=l(),g2=a("li"),Kne=a("strong"),_xo=o("qdqbert"),uxo=o(" \u2014 "),lj=a("a"),bxo=o("QDQBertForQuestionAnswering"),vxo=o(" (QDQBert model)"),Txo=l(),h2=a("li"),Zne=a("strong"),Fxo=o("reformer"),Cxo=o(" \u2014 "),ij=a("a"),Mxo=o("ReformerForQuestionAnswering"),Exo=o(" (Reformer model)"),yxo=l(),p2=a("li"),ese=a("strong"),wxo=o("rembert"),Axo=o(" \u2014 "),dj=a("a"),Lxo=o("RemBertForQuestionAnswering"),Bxo=o(" (RemBERT model)"),xxo=l(),_2=a("li"),ose=a("strong"),kxo=o("roberta"),Rxo=o(" \u2014 "),cj=a("a"),Sxo=o("RobertaForQuestionAnswering"),Pxo=o(" (RoBERTa model)"),$xo=l(),u2=a("li"),rse=a("strong"),Ixo=o("roformer"),Dxo=o(" \u2014 "),fj=a("a"),jxo=o("RoFormerForQuestionAnswering"),Nxo=o(" (RoFormer model)"),qxo=l(),b2=a("li"),tse=a("strong"),Gxo=o("splinter"),Oxo=o(" \u2014 "),mj=a("a"),Xxo=o("SplinterForQuestionAnswering"),Vxo=o(" (Splinter model)"),zxo=l(),v2=a("li"),ase=a("strong"),Wxo=o("squeezebert"),Qxo=o(" \u2014 "),gj=a("a"),Hxo=o("SqueezeBertForQuestionAnswering"),Uxo=o(" (SqueezeBERT model)"),Jxo=l(),T2=a("li"),nse=a("strong"),Yxo=o("xlm"),Kxo=o(" \u2014 "),hj=a("a"),Zxo=o("XLMForQuestionAnsweringSimple"),eko=o(" (XLM model)"),oko=l(),F2=a("li"),sse=a("strong"),rko=o("xlm-roberta"),tko=o(" \u2014 "),pj=a("a"),ako=o("XLMRobertaForQuestionAnswering"),nko=o(" (XLM-RoBERTa model)"),sko=l(),C2=a("li"),lse=a("strong"),lko=o("xlm-roberta-xl"),iko=o(" \u2014 "),_j=a("a"),dko=o("XLMRobertaXLForQuestionAnswering"),cko=o(" (XLM-RoBERTa-XL model)"),fko=l(),M2=a("li"),ise=a("strong"),mko=o("xlnet"),gko=o(" \u2014 "),uj=a("a"),hko=o("XLNetForQuestionAnsweringSimple"),pko=o(" (XLNet model)"),_ko=l(),E2=a("li"),dse=a("strong"),uko=o("yoso"),bko=o(" \u2014 "),bj=a("a"),vko=o("YosoForQuestionAnswering"),Tko=o(" (YOSO model)"),Fko=l(),y2=a("p"),Cko=o("The model is set in evaluation mode by default using "),cse=a("code"),Mko=o("model.eval()"),Eko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fse=a("code"),yko=o("model.train()"),wko=l(),mse=a("p"),Ako=o("Examples:"),Lko=l(),f(p3.$$.fragment),J8e=l(),bd=a("h2"),w2=a("a"),gse=a("span"),f(_3.$$.fragment),Bko=l(),hse=a("span"),xko=o("AutoModelForTableQuestionAnswering"),Y8e=l(),tr=a("div"),f(u3.$$.fragment),kko=l(),vd=a("p"),Rko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pse=a("code"),Sko=o("from_pretrained()"),Pko=o("class method or the "),_se=a("code"),$ko=o("from_config()"),Iko=o(`class
method.`),Dko=l(),b3=a("p"),jko=o("This class cannot be instantiated directly using "),use=a("code"),Nko=o("__init__()"),qko=o(" (throws an error)."),Gko=l(),Jr=a("div"),f(v3.$$.fragment),Oko=l(),bse=a("p"),Xko=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vko=l(),Td=a("p"),zko=o(`Note:
Loading a model from its configuration file does `),vse=a("strong"),Wko=o("not"),Qko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tse=a("code"),Hko=o("from_pretrained()"),Uko=o("to load the model weights."),Jko=l(),Fse=a("p"),Yko=o("Examples:"),Kko=l(),f(T3.$$.fragment),Zko=l(),Oe=a("div"),f(F3.$$.fragment),eRo=l(),Cse=a("p"),oRo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rRo=l(),Ua=a("p"),tRo=o("The model class to instantiate is selected based on the "),Mse=a("code"),aRo=o("model_type"),nRo=o(` property of the config object (either
passed as an argument or loaded from `),Ese=a("code"),sRo=o("pretrained_model_name_or_path"),lRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=a("code"),iRo=o("pretrained_model_name_or_path"),dRo=o(":"),cRo=l(),wse=a("ul"),A2=a("li"),Ase=a("strong"),fRo=o("tapas"),mRo=o(" \u2014 "),vj=a("a"),gRo=o("TapasForQuestionAnswering"),hRo=o(" (TAPAS model)"),pRo=l(),L2=a("p"),_Ro=o("The model is set in evaluation mode by default using "),Lse=a("code"),uRo=o("model.eval()"),bRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bse=a("code"),vRo=o("model.train()"),TRo=l(),xse=a("p"),FRo=o("Examples:"),CRo=l(),f(C3.$$.fragment),K8e=l(),Fd=a("h2"),B2=a("a"),kse=a("span"),f(M3.$$.fragment),MRo=l(),Rse=a("span"),ERo=o("AutoModelForImageClassification"),Z8e=l(),ar=a("div"),f(E3.$$.fragment),yRo=l(),Cd=a("p"),wRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sse=a("code"),ARo=o("from_pretrained()"),LRo=o("class method or the "),Pse=a("code"),BRo=o("from_config()"),xRo=o(`class
method.`),kRo=l(),y3=a("p"),RRo=o("This class cannot be instantiated directly using "),$se=a("code"),SRo=o("__init__()"),PRo=o(" (throws an error)."),$Ro=l(),Yr=a("div"),f(w3.$$.fragment),IRo=l(),Ise=a("p"),DRo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jRo=l(),Md=a("p"),NRo=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),qRo=o("not"),GRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jse=a("code"),ORo=o("from_pretrained()"),XRo=o("to load the model weights."),VRo=l(),Nse=a("p"),zRo=o("Examples:"),WRo=l(),f(A3.$$.fragment),QRo=l(),Xe=a("div"),f(L3.$$.fragment),HRo=l(),qse=a("p"),URo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JRo=l(),Ja=a("p"),YRo=o("The model class to instantiate is selected based on the "),Gse=a("code"),KRo=o("model_type"),ZRo=o(` property of the config object (either
passed as an argument or loaded from `),Ose=a("code"),eSo=o("pretrained_model_name_or_path"),oSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=a("code"),rSo=o("pretrained_model_name_or_path"),tSo=o(":"),aSo=l(),be=a("ul"),x2=a("li"),Vse=a("strong"),nSo=o("beit"),sSo=o(" \u2014 "),Tj=a("a"),lSo=o("BeitForImageClassification"),iSo=o(" (BEiT model)"),dSo=l(),k2=a("li"),zse=a("strong"),cSo=o("convnext"),fSo=o(" \u2014 "),Fj=a("a"),mSo=o("ConvNextForImageClassification"),gSo=o(" (ConvNext model)"),hSo=l(),Ps=a("li"),Wse=a("strong"),pSo=o("deit"),_So=o(" \u2014 "),Cj=a("a"),uSo=o("DeiTForImageClassification"),bSo=o(" or "),Mj=a("a"),vSo=o("DeiTForImageClassificationWithTeacher"),TSo=o(" (DeiT model)"),FSo=l(),R2=a("li"),Qse=a("strong"),CSo=o("imagegpt"),MSo=o(" \u2014 "),Ej=a("a"),ESo=o("ImageGPTForImageClassification"),ySo=o(" (ImageGPT model)"),wSo=l(),la=a("li"),Hse=a("strong"),ASo=o("perceiver"),LSo=o(" \u2014 "),yj=a("a"),BSo=o("PerceiverForImageClassificationLearned"),xSo=o(" or "),wj=a("a"),kSo=o("PerceiverForImageClassificationFourier"),RSo=o(" or "),Aj=a("a"),SSo=o("PerceiverForImageClassificationConvProcessing"),PSo=o(" (Perceiver model)"),$So=l(),S2=a("li"),Use=a("strong"),ISo=o("poolformer"),DSo=o(" \u2014 "),Lj=a("a"),jSo=o("PoolFormerForImageClassification"),NSo=o(" (PoolFormer model)"),qSo=l(),P2=a("li"),Jse=a("strong"),GSo=o("segformer"),OSo=o(" \u2014 "),Bj=a("a"),XSo=o("SegformerForImageClassification"),VSo=o(" (SegFormer model)"),zSo=l(),$2=a("li"),Yse=a("strong"),WSo=o("swin"),QSo=o(" \u2014 "),xj=a("a"),HSo=o("SwinForImageClassification"),USo=o(" (Swin model)"),JSo=l(),I2=a("li"),Kse=a("strong"),YSo=o("vit"),KSo=o(" \u2014 "),kj=a("a"),ZSo=o("ViTForImageClassification"),ePo=o(" (ViT model)"),oPo=l(),D2=a("p"),rPo=o("The model is set in evaluation mode by default using "),Zse=a("code"),tPo=o("model.eval()"),aPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),nPo=o("model.train()"),sPo=l(),ole=a("p"),lPo=o("Examples:"),iPo=l(),f(B3.$$.fragment),eBe=l(),Ed=a("h2"),j2=a("a"),rle=a("span"),f(x3.$$.fragment),dPo=l(),tle=a("span"),cPo=o("AutoModelForVision2Seq"),oBe=l(),nr=a("div"),f(k3.$$.fragment),fPo=l(),yd=a("p"),mPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ale=a("code"),gPo=o("from_pretrained()"),hPo=o("class method or the "),nle=a("code"),pPo=o("from_config()"),_Po=o(`class
method.`),uPo=l(),R3=a("p"),bPo=o("This class cannot be instantiated directly using "),sle=a("code"),vPo=o("__init__()"),TPo=o(" (throws an error)."),FPo=l(),Kr=a("div"),f(S3.$$.fragment),CPo=l(),lle=a("p"),MPo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),EPo=l(),wd=a("p"),yPo=o(`Note:
Loading a model from its configuration file does `),ile=a("strong"),wPo=o("not"),APo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=a("code"),LPo=o("from_pretrained()"),BPo=o("to load the model weights."),xPo=l(),cle=a("p"),kPo=o("Examples:"),RPo=l(),f(P3.$$.fragment),SPo=l(),Ve=a("div"),f($3.$$.fragment),PPo=l(),fle=a("p"),$Po=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IPo=l(),Ya=a("p"),DPo=o("The model class to instantiate is selected based on the "),mle=a("code"),jPo=o("model_type"),NPo=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),qPo=o("pretrained_model_name_or_path"),GPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),OPo=o("pretrained_model_name_or_path"),XPo=o(":"),VPo=l(),ple=a("ul"),N2=a("li"),_le=a("strong"),zPo=o("vision-encoder-decoder"),WPo=o(" \u2014 "),Rj=a("a"),QPo=o("VisionEncoderDecoderModel"),HPo=o(" (Vision Encoder decoder model)"),UPo=l(),q2=a("p"),JPo=o("The model is set in evaluation mode by default using "),ule=a("code"),YPo=o("model.eval()"),KPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=a("code"),ZPo=o("model.train()"),e$o=l(),vle=a("p"),o$o=o("Examples:"),r$o=l(),f(I3.$$.fragment),rBe=l(),Ad=a("h2"),G2=a("a"),Tle=a("span"),f(D3.$$.fragment),t$o=l(),Fle=a("span"),a$o=o("AutoModelForAudioClassification"),tBe=l(),sr=a("div"),f(j3.$$.fragment),n$o=l(),Ld=a("p"),s$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Cle=a("code"),l$o=o("from_pretrained()"),i$o=o("class method or the "),Mle=a("code"),d$o=o("from_config()"),c$o=o(`class
method.`),f$o=l(),N3=a("p"),m$o=o("This class cannot be instantiated directly using "),Ele=a("code"),g$o=o("__init__()"),h$o=o(" (throws an error)."),p$o=l(),Zr=a("div"),f(q3.$$.fragment),_$o=l(),yle=a("p"),u$o=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),b$o=l(),Bd=a("p"),v$o=o(`Note:
Loading a model from its configuration file does `),wle=a("strong"),T$o=o("not"),F$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=a("code"),C$o=o("from_pretrained()"),M$o=o("to load the model weights."),E$o=l(),Lle=a("p"),y$o=o("Examples:"),w$o=l(),f(G3.$$.fragment),A$o=l(),ze=a("div"),f(O3.$$.fragment),L$o=l(),Ble=a("p"),B$o=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),x$o=l(),Ka=a("p"),k$o=o("The model class to instantiate is selected based on the "),xle=a("code"),R$o=o("model_type"),S$o=o(` property of the config object (either
passed as an argument or loaded from `),kle=a("code"),P$o=o("pretrained_model_name_or_path"),$$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=a("code"),I$o=o("pretrained_model_name_or_path"),D$o=o(":"),j$o=l(),Ae=a("ul"),O2=a("li"),Sle=a("strong"),N$o=o("data2vec-audio"),q$o=o(" \u2014 "),Sj=a("a"),G$o=o("Data2VecAudioForSequenceClassification"),O$o=o(" (Data2VecAudio model)"),X$o=l(),X2=a("li"),Ple=a("strong"),V$o=o("hubert"),z$o=o(" \u2014 "),Pj=a("a"),W$o=o("HubertForSequenceClassification"),Q$o=o(" (Hubert model)"),H$o=l(),V2=a("li"),$le=a("strong"),U$o=o("sew"),J$o=o(" \u2014 "),$j=a("a"),Y$o=o("SEWForSequenceClassification"),K$o=o(" (SEW model)"),Z$o=l(),z2=a("li"),Ile=a("strong"),eIo=o("sew-d"),oIo=o(" \u2014 "),Ij=a("a"),rIo=o("SEWDForSequenceClassification"),tIo=o(" (SEW-D model)"),aIo=l(),W2=a("li"),Dle=a("strong"),nIo=o("unispeech"),sIo=o(" \u2014 "),Dj=a("a"),lIo=o("UniSpeechForSequenceClassification"),iIo=o(" (UniSpeech model)"),dIo=l(),Q2=a("li"),jle=a("strong"),cIo=o("unispeech-sat"),fIo=o(" \u2014 "),jj=a("a"),mIo=o("UniSpeechSatForSequenceClassification"),gIo=o(" (UniSpeechSat model)"),hIo=l(),H2=a("li"),Nle=a("strong"),pIo=o("wav2vec2"),_Io=o(" \u2014 "),Nj=a("a"),uIo=o("Wav2Vec2ForSequenceClassification"),bIo=o(" (Wav2Vec2 model)"),vIo=l(),U2=a("li"),qle=a("strong"),TIo=o("wavlm"),FIo=o(" \u2014 "),qj=a("a"),CIo=o("WavLMForSequenceClassification"),MIo=o(" (WavLM model)"),EIo=l(),J2=a("p"),yIo=o("The model is set in evaluation mode by default using "),Gle=a("code"),wIo=o("model.eval()"),AIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),LIo=o("model.train()"),BIo=l(),Xle=a("p"),xIo=o("Examples:"),kIo=l(),f(X3.$$.fragment),aBe=l(),xd=a("h2"),Y2=a("a"),Vle=a("span"),f(V3.$$.fragment),RIo=l(),zle=a("span"),SIo=o("AutoModelForAudioFrameClassification"),nBe=l(),lr=a("div"),f(z3.$$.fragment),PIo=l(),kd=a("p"),$Io=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wle=a("code"),IIo=o("from_pretrained()"),DIo=o("class method or the "),Qle=a("code"),jIo=o("from_config()"),NIo=o(`class
method.`),qIo=l(),W3=a("p"),GIo=o("This class cannot be instantiated directly using "),Hle=a("code"),OIo=o("__init__()"),XIo=o(" (throws an error)."),VIo=l(),et=a("div"),f(Q3.$$.fragment),zIo=l(),Ule=a("p"),WIo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QIo=l(),Rd=a("p"),HIo=o(`Note:
Loading a model from its configuration file does `),Jle=a("strong"),UIo=o("not"),JIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=a("code"),YIo=o("from_pretrained()"),KIo=o("to load the model weights."),ZIo=l(),Kle=a("p"),eDo=o("Examples:"),oDo=l(),f(H3.$$.fragment),rDo=l(),We=a("div"),f(U3.$$.fragment),tDo=l(),Zle=a("p"),aDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),nDo=l(),Za=a("p"),sDo=o("The model class to instantiate is selected based on the "),eie=a("code"),lDo=o("model_type"),iDo=o(` property of the config object (either
passed as an argument or loaded from `),oie=a("code"),dDo=o("pretrained_model_name_or_path"),cDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=a("code"),fDo=o("pretrained_model_name_or_path"),mDo=o(":"),gDo=l(),en=a("ul"),K2=a("li"),tie=a("strong"),hDo=o("data2vec-audio"),pDo=o(" \u2014 "),Gj=a("a"),_Do=o("Data2VecAudioForAudioFrameClassification"),uDo=o(" (Data2VecAudio model)"),bDo=l(),Z2=a("li"),aie=a("strong"),vDo=o("unispeech-sat"),TDo=o(" \u2014 "),Oj=a("a"),FDo=o("UniSpeechSatForAudioFrameClassification"),CDo=o(" (UniSpeechSat model)"),MDo=l(),ev=a("li"),nie=a("strong"),EDo=o("wav2vec2"),yDo=o(" \u2014 "),Xj=a("a"),wDo=o("Wav2Vec2ForAudioFrameClassification"),ADo=o(" (Wav2Vec2 model)"),LDo=l(),ov=a("li"),sie=a("strong"),BDo=o("wavlm"),xDo=o(" \u2014 "),Vj=a("a"),kDo=o("WavLMForAudioFrameClassification"),RDo=o(" (WavLM model)"),SDo=l(),rv=a("p"),PDo=o("The model is set in evaluation mode by default using "),lie=a("code"),$Do=o("model.eval()"),IDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=a("code"),DDo=o("model.train()"),jDo=l(),die=a("p"),NDo=o("Examples:"),qDo=l(),f(J3.$$.fragment),sBe=l(),Sd=a("h2"),tv=a("a"),cie=a("span"),f(Y3.$$.fragment),GDo=l(),fie=a("span"),ODo=o("AutoModelForCTC"),lBe=l(),ir=a("div"),f(K3.$$.fragment),XDo=l(),Pd=a("p"),VDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mie=a("code"),zDo=o("from_pretrained()"),WDo=o("class method or the "),gie=a("code"),QDo=o("from_config()"),HDo=o(`class
method.`),UDo=l(),Z3=a("p"),JDo=o("This class cannot be instantiated directly using "),hie=a("code"),YDo=o("__init__()"),KDo=o(" (throws an error)."),ZDo=l(),ot=a("div"),f(ey.$$.fragment),ejo=l(),pie=a("p"),ojo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rjo=l(),$d=a("p"),tjo=o(`Note:
Loading a model from its configuration file does `),_ie=a("strong"),ajo=o("not"),njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=a("code"),sjo=o("from_pretrained()"),ljo=o("to load the model weights."),ijo=l(),bie=a("p"),djo=o("Examples:"),cjo=l(),f(oy.$$.fragment),fjo=l(),Qe=a("div"),f(ry.$$.fragment),mjo=l(),vie=a("p"),gjo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hjo=l(),on=a("p"),pjo=o("The model class to instantiate is selected based on the "),Tie=a("code"),_jo=o("model_type"),ujo=o(` property of the config object (either
passed as an argument or loaded from `),Fie=a("code"),bjo=o("pretrained_model_name_or_path"),vjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cie=a("code"),Tjo=o("pretrained_model_name_or_path"),Fjo=o(":"),Cjo=l(),Le=a("ul"),av=a("li"),Mie=a("strong"),Mjo=o("data2vec-audio"),Ejo=o(" \u2014 "),zj=a("a"),yjo=o("Data2VecAudioForCTC"),wjo=o(" (Data2VecAudio model)"),Ajo=l(),nv=a("li"),Eie=a("strong"),Ljo=o("hubert"),Bjo=o(" \u2014 "),Wj=a("a"),xjo=o("HubertForCTC"),kjo=o(" (Hubert model)"),Rjo=l(),sv=a("li"),yie=a("strong"),Sjo=o("sew"),Pjo=o(" \u2014 "),Qj=a("a"),$jo=o("SEWForCTC"),Ijo=o(" (SEW model)"),Djo=l(),lv=a("li"),wie=a("strong"),jjo=o("sew-d"),Njo=o(" \u2014 "),Hj=a("a"),qjo=o("SEWDForCTC"),Gjo=o(" (SEW-D model)"),Ojo=l(),iv=a("li"),Aie=a("strong"),Xjo=o("unispeech"),Vjo=o(" \u2014 "),Uj=a("a"),zjo=o("UniSpeechForCTC"),Wjo=o(" (UniSpeech model)"),Qjo=l(),dv=a("li"),Lie=a("strong"),Hjo=o("unispeech-sat"),Ujo=o(" \u2014 "),Jj=a("a"),Jjo=o("UniSpeechSatForCTC"),Yjo=o(" (UniSpeechSat model)"),Kjo=l(),cv=a("li"),Bie=a("strong"),Zjo=o("wav2vec2"),eNo=o(" \u2014 "),Yj=a("a"),oNo=o("Wav2Vec2ForCTC"),rNo=o(" (Wav2Vec2 model)"),tNo=l(),fv=a("li"),xie=a("strong"),aNo=o("wavlm"),nNo=o(" \u2014 "),Kj=a("a"),sNo=o("WavLMForCTC"),lNo=o(" (WavLM model)"),iNo=l(),mv=a("p"),dNo=o("The model is set in evaluation mode by default using "),kie=a("code"),cNo=o("model.eval()"),fNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=a("code"),mNo=o("model.train()"),gNo=l(),Sie=a("p"),hNo=o("Examples:"),pNo=l(),f(ty.$$.fragment),iBe=l(),Id=a("h2"),gv=a("a"),Pie=a("span"),f(ay.$$.fragment),_No=l(),$ie=a("span"),uNo=o("AutoModelForSpeechSeq2Seq"),dBe=l(),dr=a("div"),f(ny.$$.fragment),bNo=l(),Dd=a("p"),vNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iie=a("code"),TNo=o("from_pretrained()"),FNo=o("class method or the "),Die=a("code"),CNo=o("from_config()"),MNo=o(`class
method.`),ENo=l(),sy=a("p"),yNo=o("This class cannot be instantiated directly using "),jie=a("code"),wNo=o("__init__()"),ANo=o(" (throws an error)."),LNo=l(),rt=a("div"),f(ly.$$.fragment),BNo=l(),Nie=a("p"),xNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kNo=l(),jd=a("p"),RNo=o(`Note:
Loading a model from its configuration file does `),qie=a("strong"),SNo=o("not"),PNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gie=a("code"),$No=o("from_pretrained()"),INo=o("to load the model weights."),DNo=l(),Oie=a("p"),jNo=o("Examples:"),NNo=l(),f(iy.$$.fragment),qNo=l(),He=a("div"),f(dy.$$.fragment),GNo=l(),Xie=a("p"),ONo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),XNo=l(),rn=a("p"),VNo=o("The model class to instantiate is selected based on the "),Vie=a("code"),zNo=o("model_type"),WNo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),QNo=o("pretrained_model_name_or_path"),HNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),UNo=o("pretrained_model_name_or_path"),JNo=o(":"),YNo=l(),cy=a("ul"),hv=a("li"),Qie=a("strong"),KNo=o("speech-encoder-decoder"),ZNo=o(" \u2014 "),Zj=a("a"),eqo=o("SpeechEncoderDecoderModel"),oqo=o(" (Speech Encoder decoder model)"),rqo=l(),pv=a("li"),Hie=a("strong"),tqo=o("speech_to_text"),aqo=o(" \u2014 "),eN=a("a"),nqo=o("Speech2TextForConditionalGeneration"),sqo=o(" (Speech2Text model)"),lqo=l(),_v=a("p"),iqo=o("The model is set in evaluation mode by default using "),Uie=a("code"),dqo=o("model.eval()"),cqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),fqo=o("model.train()"),mqo=l(),Yie=a("p"),gqo=o("Examples:"),hqo=l(),f(fy.$$.fragment),cBe=l(),Nd=a("h2"),uv=a("a"),Kie=a("span"),f(my.$$.fragment),pqo=l(),Zie=a("span"),_qo=o("AutoModelForAudioXVector"),fBe=l(),cr=a("div"),f(gy.$$.fragment),uqo=l(),qd=a("p"),bqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ede=a("code"),vqo=o("from_pretrained()"),Tqo=o("class method or the "),ode=a("code"),Fqo=o("from_config()"),Cqo=o(`class
method.`),Mqo=l(),hy=a("p"),Eqo=o("This class cannot be instantiated directly using "),rde=a("code"),yqo=o("__init__()"),wqo=o(" (throws an error)."),Aqo=l(),tt=a("div"),f(py.$$.fragment),Lqo=l(),tde=a("p"),Bqo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xqo=l(),Gd=a("p"),kqo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),Rqo=o("not"),Sqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=a("code"),Pqo=o("from_pretrained()"),$qo=o("to load the model weights."),Iqo=l(),sde=a("p"),Dqo=o("Examples:"),jqo=l(),f(_y.$$.fragment),Nqo=l(),Ue=a("div"),f(uy.$$.fragment),qqo=l(),lde=a("p"),Gqo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Oqo=l(),tn=a("p"),Xqo=o("The model class to instantiate is selected based on the "),ide=a("code"),Vqo=o("model_type"),zqo=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),Wqo=o("pretrained_model_name_or_path"),Qqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),Hqo=o("pretrained_model_name_or_path"),Uqo=o(":"),Jqo=l(),an=a("ul"),bv=a("li"),fde=a("strong"),Yqo=o("data2vec-audio"),Kqo=o(" \u2014 "),oN=a("a"),Zqo=o("Data2VecAudioForXVector"),eGo=o(" (Data2VecAudio model)"),oGo=l(),vv=a("li"),mde=a("strong"),rGo=o("unispeech-sat"),tGo=o(" \u2014 "),rN=a("a"),aGo=o("UniSpeechSatForXVector"),nGo=o(" (UniSpeechSat model)"),sGo=l(),Tv=a("li"),gde=a("strong"),lGo=o("wav2vec2"),iGo=o(" \u2014 "),tN=a("a"),dGo=o("Wav2Vec2ForXVector"),cGo=o(" (Wav2Vec2 model)"),fGo=l(),Fv=a("li"),hde=a("strong"),mGo=o("wavlm"),gGo=o(" \u2014 "),aN=a("a"),hGo=o("WavLMForXVector"),pGo=o(" (WavLM model)"),_Go=l(),Cv=a("p"),uGo=o("The model is set in evaluation mode by default using "),pde=a("code"),bGo=o("model.eval()"),vGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),TGo=o("model.train()"),FGo=l(),ude=a("p"),CGo=o("Examples:"),MGo=l(),f(by.$$.fragment),mBe=l(),Od=a("h2"),Mv=a("a"),bde=a("span"),f(vy.$$.fragment),EGo=l(),vde=a("span"),yGo=o("AutoModelForMaskedImageModeling"),gBe=l(),fr=a("div"),f(Ty.$$.fragment),wGo=l(),Xd=a("p"),AGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Tde=a("code"),LGo=o("from_pretrained()"),BGo=o("class method or the "),Fde=a("code"),xGo=o("from_config()"),kGo=o(`class
method.`),RGo=l(),Fy=a("p"),SGo=o("This class cannot be instantiated directly using "),Cde=a("code"),PGo=o("__init__()"),$Go=o(" (throws an error)."),IGo=l(),at=a("div"),f(Cy.$$.fragment),DGo=l(),Mde=a("p"),jGo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NGo=l(),Vd=a("p"),qGo=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),GGo=o("not"),OGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yde=a("code"),XGo=o("from_pretrained()"),VGo=o("to load the model weights."),zGo=l(),wde=a("p"),WGo=o("Examples:"),QGo=l(),f(My.$$.fragment),HGo=l(),Je=a("div"),f(Ey.$$.fragment),UGo=l(),Ade=a("p"),JGo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),YGo=l(),nn=a("p"),KGo=o("The model class to instantiate is selected based on the "),Lde=a("code"),ZGo=o("model_type"),eOo=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),oOo=o("pretrained_model_name_or_path"),rOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=a("code"),tOo=o("pretrained_model_name_or_path"),aOo=o(":"),nOo=l(),zd=a("ul"),Ev=a("li"),kde=a("strong"),sOo=o("deit"),lOo=o(" \u2014 "),nN=a("a"),iOo=o("DeiTForMaskedImageModeling"),dOo=o(" (DeiT model)"),cOo=l(),yv=a("li"),Rde=a("strong"),fOo=o("swin"),mOo=o(" \u2014 "),sN=a("a"),gOo=o("SwinForMaskedImageModeling"),hOo=o(" (Swin model)"),pOo=l(),wv=a("li"),Sde=a("strong"),_Oo=o("vit"),uOo=o(" \u2014 "),lN=a("a"),bOo=o("ViTForMaskedImageModeling"),vOo=o(" (ViT model)"),TOo=l(),Av=a("p"),FOo=o("The model is set in evaluation mode by default using "),Pde=a("code"),COo=o("model.eval()"),MOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),EOo=o("model.train()"),yOo=l(),Ide=a("p"),wOo=o("Examples:"),AOo=l(),f(yy.$$.fragment),hBe=l(),Wd=a("h2"),Lv=a("a"),Dde=a("span"),f(wy.$$.fragment),LOo=l(),jde=a("span"),BOo=o("AutoModelForObjectDetection"),pBe=l(),mr=a("div"),f(Ay.$$.fragment),xOo=l(),Qd=a("p"),kOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Nde=a("code"),ROo=o("from_pretrained()"),SOo=o("class method or the "),qde=a("code"),POo=o("from_config()"),$Oo=o(`class
method.`),IOo=l(),Ly=a("p"),DOo=o("This class cannot be instantiated directly using "),Gde=a("code"),jOo=o("__init__()"),NOo=o(" (throws an error)."),qOo=l(),nt=a("div"),f(By.$$.fragment),GOo=l(),Ode=a("p"),OOo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),XOo=l(),Hd=a("p"),VOo=o(`Note:
Loading a model from its configuration file does `),Xde=a("strong"),zOo=o("not"),WOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vde=a("code"),QOo=o("from_pretrained()"),HOo=o("to load the model weights."),UOo=l(),zde=a("p"),JOo=o("Examples:"),YOo=l(),f(xy.$$.fragment),KOo=l(),Ye=a("div"),f(ky.$$.fragment),ZOo=l(),Wde=a("p"),eXo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),oXo=l(),sn=a("p"),rXo=o("The model class to instantiate is selected based on the "),Qde=a("code"),tXo=o("model_type"),aXo=o(` property of the config object (either
passed as an argument or loaded from `),Hde=a("code"),nXo=o("pretrained_model_name_or_path"),sXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(":"),dXo=l(),Jde=a("ul"),Bv=a("li"),Yde=a("strong"),cXo=o("detr"),fXo=o(" \u2014 "),iN=a("a"),mXo=o("DetrForObjectDetection"),gXo=o(" (DETR model)"),hXo=l(),xv=a("p"),pXo=o("The model is set in evaluation mode by default using "),Kde=a("code"),_Xo=o("model.eval()"),uXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=a("code"),bXo=o("model.train()"),vXo=l(),ece=a("p"),TXo=o("Examples:"),FXo=l(),f(Ry.$$.fragment),_Be=l(),Ud=a("h2"),kv=a("a"),oce=a("span"),f(Sy.$$.fragment),CXo=l(),rce=a("span"),MXo=o("AutoModelForImageSegmentation"),uBe=l(),gr=a("div"),f(Py.$$.fragment),EXo=l(),Jd=a("p"),yXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tce=a("code"),wXo=o("from_pretrained()"),AXo=o("class method or the "),ace=a("code"),LXo=o("from_config()"),BXo=o(`class
method.`),xXo=l(),$y=a("p"),kXo=o("This class cannot be instantiated directly using "),nce=a("code"),RXo=o("__init__()"),SXo=o(" (throws an error)."),PXo=l(),st=a("div"),f(Iy.$$.fragment),$Xo=l(),sce=a("p"),IXo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),DXo=l(),Yd=a("p"),jXo=o(`Note:
Loading a model from its configuration file does `),lce=a("strong"),NXo=o("not"),qXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ice=a("code"),GXo=o("from_pretrained()"),OXo=o("to load the model weights."),XXo=l(),dce=a("p"),VXo=o("Examples:"),zXo=l(),f(Dy.$$.fragment),WXo=l(),Ke=a("div"),f(jy.$$.fragment),QXo=l(),cce=a("p"),HXo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),UXo=l(),ln=a("p"),JXo=o("The model class to instantiate is selected based on the "),fce=a("code"),YXo=o("model_type"),KXo=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),ZXo=o("pretrained_model_name_or_path"),eVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=a("code"),oVo=o("pretrained_model_name_or_path"),rVo=o(":"),tVo=l(),hce=a("ul"),Rv=a("li"),pce=a("strong"),aVo=o("detr"),nVo=o(" \u2014 "),dN=a("a"),sVo=o("DetrForSegmentation"),lVo=o(" (DETR model)"),iVo=l(),Sv=a("p"),dVo=o("The model is set in evaluation mode by default using "),_ce=a("code"),cVo=o("model.eval()"),fVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=a("code"),mVo=o("model.train()"),gVo=l(),bce=a("p"),hVo=o("Examples:"),pVo=l(),f(Ny.$$.fragment),bBe=l(),Kd=a("h2"),Pv=a("a"),vce=a("span"),f(qy.$$.fragment),_Vo=l(),Tce=a("span"),uVo=o("AutoModelForSemanticSegmentation"),vBe=l(),hr=a("div"),f(Gy.$$.fragment),bVo=l(),Zd=a("p"),vVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fce=a("code"),TVo=o("from_pretrained()"),FVo=o("class method or the "),Cce=a("code"),CVo=o("from_config()"),MVo=o(`class
method.`),EVo=l(),Oy=a("p"),yVo=o("This class cannot be instantiated directly using "),Mce=a("code"),wVo=o("__init__()"),AVo=o(" (throws an error)."),LVo=l(),lt=a("div"),f(Xy.$$.fragment),BVo=l(),Ece=a("p"),xVo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kVo=l(),ec=a("p"),RVo=o(`Note:
Loading a model from its configuration file does `),yce=a("strong"),SVo=o("not"),PVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wce=a("code"),$Vo=o("from_pretrained()"),IVo=o("to load the model weights."),DVo=l(),Ace=a("p"),jVo=o("Examples:"),NVo=l(),f(Vy.$$.fragment),qVo=l(),Ze=a("div"),f(zy.$$.fragment),GVo=l(),Lce=a("p"),OVo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XVo=l(),dn=a("p"),VVo=o("The model class to instantiate is selected based on the "),Bce=a("code"),zVo=o("model_type"),WVo=o(` property of the config object (either
passed as an argument or loaded from `),xce=a("code"),QVo=o("pretrained_model_name_or_path"),HVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),UVo=o("pretrained_model_name_or_path"),JVo=o(":"),YVo=l(),Wy=a("ul"),$v=a("li"),Rce=a("strong"),KVo=o("beit"),ZVo=o(" \u2014 "),cN=a("a"),ezo=o("BeitForSemanticSegmentation"),ozo=o(" (BEiT model)"),rzo=l(),Iv=a("li"),Sce=a("strong"),tzo=o("segformer"),azo=o(" \u2014 "),fN=a("a"),nzo=o("SegformerForSemanticSegmentation"),szo=o(" (SegFormer model)"),lzo=l(),Dv=a("p"),izo=o("The model is set in evaluation mode by default using "),Pce=a("code"),dzo=o("model.eval()"),czo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),fzo=o("model.train()"),mzo=l(),Ice=a("p"),gzo=o("Examples:"),hzo=l(),f(Qy.$$.fragment),TBe=l(),oc=a("h2"),jv=a("a"),Dce=a("span"),f(Hy.$$.fragment),pzo=l(),jce=a("span"),_zo=o("TFAutoModel"),FBe=l(),pr=a("div"),f(Uy.$$.fragment),uzo=l(),rc=a("p"),bzo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Nce=a("code"),vzo=o("from_pretrained()"),Tzo=o("class method or the "),qce=a("code"),Fzo=o("from_config()"),Czo=o(`class
method.`),Mzo=l(),Jy=a("p"),Ezo=o("This class cannot be instantiated directly using "),Gce=a("code"),yzo=o("__init__()"),wzo=o(" (throws an error)."),Azo=l(),it=a("div"),f(Yy.$$.fragment),Lzo=l(),Oce=a("p"),Bzo=o("Instantiates one of the base model classes of the library from a configuration."),xzo=l(),tc=a("p"),kzo=o(`Note:
Loading a model from its configuration file does `),Xce=a("strong"),Rzo=o("not"),Szo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=a("code"),Pzo=o("from_pretrained()"),$zo=o("to load the model weights."),Izo=l(),zce=a("p"),Dzo=o("Examples:"),jzo=l(),f(Ky.$$.fragment),Nzo=l(),go=a("div"),f(Zy.$$.fragment),qzo=l(),Wce=a("p"),Gzo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ozo=l(),cn=a("p"),Xzo=o("The model class to instantiate is selected based on the "),Qce=a("code"),Vzo=o("model_type"),zzo=o(` property of the config object (either
passed as an argument or loaded from `),Hce=a("code"),Wzo=o("pretrained_model_name_or_path"),Qzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=a("code"),Hzo=o("pretrained_model_name_or_path"),Uzo=o(":"),Jzo=l(),B=a("ul"),Nv=a("li"),Jce=a("strong"),Yzo=o("albert"),Kzo=o(" \u2014 "),mN=a("a"),Zzo=o("TFAlbertModel"),eWo=o(" (ALBERT model)"),oWo=l(),qv=a("li"),Yce=a("strong"),rWo=o("bart"),tWo=o(" \u2014 "),gN=a("a"),aWo=o("TFBartModel"),nWo=o(" (BART model)"),sWo=l(),Gv=a("li"),Kce=a("strong"),lWo=o("bert"),iWo=o(" \u2014 "),hN=a("a"),dWo=o("TFBertModel"),cWo=o(" (BERT model)"),fWo=l(),Ov=a("li"),Zce=a("strong"),mWo=o("blenderbot"),gWo=o(" \u2014 "),pN=a("a"),hWo=o("TFBlenderbotModel"),pWo=o(" (Blenderbot model)"),_Wo=l(),Xv=a("li"),efe=a("strong"),uWo=o("blenderbot-small"),bWo=o(" \u2014 "),_N=a("a"),vWo=o("TFBlenderbotSmallModel"),TWo=o(" (BlenderbotSmall model)"),FWo=l(),Vv=a("li"),ofe=a("strong"),CWo=o("camembert"),MWo=o(" \u2014 "),uN=a("a"),EWo=o("TFCamembertModel"),yWo=o(" (CamemBERT model)"),wWo=l(),zv=a("li"),rfe=a("strong"),AWo=o("clip"),LWo=o(" \u2014 "),bN=a("a"),BWo=o("TFCLIPModel"),xWo=o(" (CLIP model)"),kWo=l(),Wv=a("li"),tfe=a("strong"),RWo=o("convbert"),SWo=o(" \u2014 "),vN=a("a"),PWo=o("TFConvBertModel"),$Wo=o(" (ConvBERT model)"),IWo=l(),Qv=a("li"),afe=a("strong"),DWo=o("convnext"),jWo=o(" \u2014 "),TN=a("a"),NWo=o("TFConvNextModel"),qWo=o(" (ConvNext model)"),GWo=l(),Hv=a("li"),nfe=a("strong"),OWo=o("ctrl"),XWo=o(" \u2014 "),FN=a("a"),VWo=o("TFCTRLModel"),zWo=o(" (CTRL model)"),WWo=l(),Uv=a("li"),sfe=a("strong"),QWo=o("deberta"),HWo=o(" \u2014 "),CN=a("a"),UWo=o("TFDebertaModel"),JWo=o(" (DeBERTa model)"),YWo=l(),Jv=a("li"),lfe=a("strong"),KWo=o("deberta-v2"),ZWo=o(" \u2014 "),MN=a("a"),eQo=o("TFDebertaV2Model"),oQo=o(" (DeBERTa-v2 model)"),rQo=l(),Yv=a("li"),ife=a("strong"),tQo=o("distilbert"),aQo=o(" \u2014 "),EN=a("a"),nQo=o("TFDistilBertModel"),sQo=o(" (DistilBERT model)"),lQo=l(),Kv=a("li"),dfe=a("strong"),iQo=o("dpr"),dQo=o(" \u2014 "),yN=a("a"),cQo=o("TFDPRQuestionEncoder"),fQo=o(" (DPR model)"),mQo=l(),Zv=a("li"),cfe=a("strong"),gQo=o("electra"),hQo=o(" \u2014 "),wN=a("a"),pQo=o("TFElectraModel"),_Qo=o(" (ELECTRA model)"),uQo=l(),eT=a("li"),ffe=a("strong"),bQo=o("flaubert"),vQo=o(" \u2014 "),AN=a("a"),TQo=o("TFFlaubertModel"),FQo=o(" (FlauBERT model)"),CQo=l(),$s=a("li"),mfe=a("strong"),MQo=o("funnel"),EQo=o(" \u2014 "),LN=a("a"),yQo=o("TFFunnelModel"),wQo=o(" or "),BN=a("a"),AQo=o("TFFunnelBaseModel"),LQo=o(" (Funnel Transformer model)"),BQo=l(),oT=a("li"),gfe=a("strong"),xQo=o("gpt2"),kQo=o(" \u2014 "),xN=a("a"),RQo=o("TFGPT2Model"),SQo=o(" (OpenAI GPT-2 model)"),PQo=l(),rT=a("li"),hfe=a("strong"),$Qo=o("hubert"),IQo=o(" \u2014 "),kN=a("a"),DQo=o("TFHubertModel"),jQo=o(" (Hubert model)"),NQo=l(),tT=a("li"),pfe=a("strong"),qQo=o("layoutlm"),GQo=o(" \u2014 "),RN=a("a"),OQo=o("TFLayoutLMModel"),XQo=o(" (LayoutLM model)"),VQo=l(),aT=a("li"),_fe=a("strong"),zQo=o("led"),WQo=o(" \u2014 "),SN=a("a"),QQo=o("TFLEDModel"),HQo=o(" (LED model)"),UQo=l(),nT=a("li"),ufe=a("strong"),JQo=o("longformer"),YQo=o(" \u2014 "),PN=a("a"),KQo=o("TFLongformerModel"),ZQo=o(" (Longformer model)"),eHo=l(),sT=a("li"),bfe=a("strong"),oHo=o("lxmert"),rHo=o(" \u2014 "),$N=a("a"),tHo=o("TFLxmertModel"),aHo=o(" (LXMERT model)"),nHo=l(),lT=a("li"),vfe=a("strong"),sHo=o("marian"),lHo=o(" \u2014 "),IN=a("a"),iHo=o("TFMarianModel"),dHo=o(" (Marian model)"),cHo=l(),iT=a("li"),Tfe=a("strong"),fHo=o("mbart"),mHo=o(" \u2014 "),DN=a("a"),gHo=o("TFMBartModel"),hHo=o(" (mBART model)"),pHo=l(),dT=a("li"),Ffe=a("strong"),_Ho=o("mobilebert"),uHo=o(" \u2014 "),jN=a("a"),bHo=o("TFMobileBertModel"),vHo=o(" (MobileBERT model)"),THo=l(),cT=a("li"),Cfe=a("strong"),FHo=o("mpnet"),CHo=o(" \u2014 "),NN=a("a"),MHo=o("TFMPNetModel"),EHo=o(" (MPNet model)"),yHo=l(),fT=a("li"),Mfe=a("strong"),wHo=o("mt5"),AHo=o(" \u2014 "),qN=a("a"),LHo=o("TFMT5Model"),BHo=o(" (mT5 model)"),xHo=l(),mT=a("li"),Efe=a("strong"),kHo=o("openai-gpt"),RHo=o(" \u2014 "),GN=a("a"),SHo=o("TFOpenAIGPTModel"),PHo=o(" (OpenAI GPT model)"),$Ho=l(),gT=a("li"),yfe=a("strong"),IHo=o("pegasus"),DHo=o(" \u2014 "),ON=a("a"),jHo=o("TFPegasusModel"),NHo=o(" (Pegasus model)"),qHo=l(),hT=a("li"),wfe=a("strong"),GHo=o("rembert"),OHo=o(" \u2014 "),XN=a("a"),XHo=o("TFRemBertModel"),VHo=o(" (RemBERT model)"),zHo=l(),pT=a("li"),Afe=a("strong"),WHo=o("roberta"),QHo=o(" \u2014 "),VN=a("a"),HHo=o("TFRobertaModel"),UHo=o(" (RoBERTa model)"),JHo=l(),_T=a("li"),Lfe=a("strong"),YHo=o("roformer"),KHo=o(" \u2014 "),zN=a("a"),ZHo=o("TFRoFormerModel"),eUo=o(" (RoFormer model)"),oUo=l(),uT=a("li"),Bfe=a("strong"),rUo=o("speech_to_text"),tUo=o(" \u2014 "),WN=a("a"),aUo=o("TFSpeech2TextModel"),nUo=o(" (Speech2Text model)"),sUo=l(),bT=a("li"),xfe=a("strong"),lUo=o("t5"),iUo=o(" \u2014 "),QN=a("a"),dUo=o("TFT5Model"),cUo=o(" (T5 model)"),fUo=l(),vT=a("li"),kfe=a("strong"),mUo=o("tapas"),gUo=o(" \u2014 "),HN=a("a"),hUo=o("TFTapasModel"),pUo=o(" (TAPAS model)"),_Uo=l(),TT=a("li"),Rfe=a("strong"),uUo=o("transfo-xl"),bUo=o(" \u2014 "),UN=a("a"),vUo=o("TFTransfoXLModel"),TUo=o(" (Transformer-XL model)"),FUo=l(),FT=a("li"),Sfe=a("strong"),CUo=o("vit"),MUo=o(" \u2014 "),JN=a("a"),EUo=o("TFViTModel"),yUo=o(" (ViT model)"),wUo=l(),CT=a("li"),Pfe=a("strong"),AUo=o("wav2vec2"),LUo=o(" \u2014 "),YN=a("a"),BUo=o("TFWav2Vec2Model"),xUo=o(" (Wav2Vec2 model)"),kUo=l(),MT=a("li"),$fe=a("strong"),RUo=o("xlm"),SUo=o(" \u2014 "),KN=a("a"),PUo=o("TFXLMModel"),$Uo=o(" (XLM model)"),IUo=l(),ET=a("li"),Ife=a("strong"),DUo=o("xlm-roberta"),jUo=o(" \u2014 "),ZN=a("a"),NUo=o("TFXLMRobertaModel"),qUo=o(" (XLM-RoBERTa model)"),GUo=l(),yT=a("li"),Dfe=a("strong"),OUo=o("xlnet"),XUo=o(" \u2014 "),eq=a("a"),VUo=o("TFXLNetModel"),zUo=o(" (XLNet model)"),WUo=l(),jfe=a("p"),QUo=o("Examples:"),HUo=l(),f(ew.$$.fragment),CBe=l(),ac=a("h2"),wT=a("a"),Nfe=a("span"),f(ow.$$.fragment),UUo=l(),qfe=a("span"),JUo=o("TFAutoModelForPreTraining"),MBe=l(),_r=a("div"),f(rw.$$.fragment),YUo=l(),nc=a("p"),KUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gfe=a("code"),ZUo=o("from_pretrained()"),eJo=o("class method or the "),Ofe=a("code"),oJo=o("from_config()"),rJo=o(`class
method.`),tJo=l(),tw=a("p"),aJo=o("This class cannot be instantiated directly using "),Xfe=a("code"),nJo=o("__init__()"),sJo=o(" (throws an error)."),lJo=l(),dt=a("div"),f(aw.$$.fragment),iJo=l(),Vfe=a("p"),dJo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cJo=l(),sc=a("p"),fJo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),mJo=o("not"),gJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=a("code"),hJo=o("from_pretrained()"),pJo=o("to load the model weights."),_Jo=l(),Qfe=a("p"),uJo=o("Examples:"),bJo=l(),f(nw.$$.fragment),vJo=l(),ho=a("div"),f(sw.$$.fragment),TJo=l(),Hfe=a("p"),FJo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CJo=l(),fn=a("p"),MJo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),EJo=o("model_type"),yJo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),wJo=o("pretrained_model_name_or_path"),AJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),LJo=o("pretrained_model_name_or_path"),BJo=o(":"),xJo=l(),H=a("ul"),AT=a("li"),Kfe=a("strong"),kJo=o("albert"),RJo=o(" \u2014 "),oq=a("a"),SJo=o("TFAlbertForPreTraining"),PJo=o(" (ALBERT model)"),$Jo=l(),LT=a("li"),Zfe=a("strong"),IJo=o("bart"),DJo=o(" \u2014 "),rq=a("a"),jJo=o("TFBartForConditionalGeneration"),NJo=o(" (BART model)"),qJo=l(),BT=a("li"),eme=a("strong"),GJo=o("bert"),OJo=o(" \u2014 "),tq=a("a"),XJo=o("TFBertForPreTraining"),VJo=o(" (BERT model)"),zJo=l(),xT=a("li"),ome=a("strong"),WJo=o("camembert"),QJo=o(" \u2014 "),aq=a("a"),HJo=o("TFCamembertForMaskedLM"),UJo=o(" (CamemBERT model)"),JJo=l(),kT=a("li"),rme=a("strong"),YJo=o("ctrl"),KJo=o(" \u2014 "),nq=a("a"),ZJo=o("TFCTRLLMHeadModel"),eYo=o(" (CTRL model)"),oYo=l(),RT=a("li"),tme=a("strong"),rYo=o("distilbert"),tYo=o(" \u2014 "),sq=a("a"),aYo=o("TFDistilBertForMaskedLM"),nYo=o(" (DistilBERT model)"),sYo=l(),ST=a("li"),ame=a("strong"),lYo=o("electra"),iYo=o(" \u2014 "),lq=a("a"),dYo=o("TFElectraForPreTraining"),cYo=o(" (ELECTRA model)"),fYo=l(),PT=a("li"),nme=a("strong"),mYo=o("flaubert"),gYo=o(" \u2014 "),iq=a("a"),hYo=o("TFFlaubertWithLMHeadModel"),pYo=o(" (FlauBERT model)"),_Yo=l(),$T=a("li"),sme=a("strong"),uYo=o("funnel"),bYo=o(" \u2014 "),dq=a("a"),vYo=o("TFFunnelForPreTraining"),TYo=o(" (Funnel Transformer model)"),FYo=l(),IT=a("li"),lme=a("strong"),CYo=o("gpt2"),MYo=o(" \u2014 "),cq=a("a"),EYo=o("TFGPT2LMHeadModel"),yYo=o(" (OpenAI GPT-2 model)"),wYo=l(),DT=a("li"),ime=a("strong"),AYo=o("layoutlm"),LYo=o(" \u2014 "),fq=a("a"),BYo=o("TFLayoutLMForMaskedLM"),xYo=o(" (LayoutLM model)"),kYo=l(),jT=a("li"),dme=a("strong"),RYo=o("lxmert"),SYo=o(" \u2014 "),mq=a("a"),PYo=o("TFLxmertForPreTraining"),$Yo=o(" (LXMERT model)"),IYo=l(),NT=a("li"),cme=a("strong"),DYo=o("mobilebert"),jYo=o(" \u2014 "),gq=a("a"),NYo=o("TFMobileBertForPreTraining"),qYo=o(" (MobileBERT model)"),GYo=l(),qT=a("li"),fme=a("strong"),OYo=o("mpnet"),XYo=o(" \u2014 "),hq=a("a"),VYo=o("TFMPNetForMaskedLM"),zYo=o(" (MPNet model)"),WYo=l(),GT=a("li"),mme=a("strong"),QYo=o("openai-gpt"),HYo=o(" \u2014 "),pq=a("a"),UYo=o("TFOpenAIGPTLMHeadModel"),JYo=o(" (OpenAI GPT model)"),YYo=l(),OT=a("li"),gme=a("strong"),KYo=o("roberta"),ZYo=o(" \u2014 "),_q=a("a"),eKo=o("TFRobertaForMaskedLM"),oKo=o(" (RoBERTa model)"),rKo=l(),XT=a("li"),hme=a("strong"),tKo=o("t5"),aKo=o(" \u2014 "),uq=a("a"),nKo=o("TFT5ForConditionalGeneration"),sKo=o(" (T5 model)"),lKo=l(),VT=a("li"),pme=a("strong"),iKo=o("tapas"),dKo=o(" \u2014 "),bq=a("a"),cKo=o("TFTapasForMaskedLM"),fKo=o(" (TAPAS model)"),mKo=l(),zT=a("li"),_me=a("strong"),gKo=o("transfo-xl"),hKo=o(" \u2014 "),vq=a("a"),pKo=o("TFTransfoXLLMHeadModel"),_Ko=o(" (Transformer-XL model)"),uKo=l(),WT=a("li"),ume=a("strong"),bKo=o("xlm"),vKo=o(" \u2014 "),Tq=a("a"),TKo=o("TFXLMWithLMHeadModel"),FKo=o(" (XLM model)"),CKo=l(),QT=a("li"),bme=a("strong"),MKo=o("xlm-roberta"),EKo=o(" \u2014 "),Fq=a("a"),yKo=o("TFXLMRobertaForMaskedLM"),wKo=o(" (XLM-RoBERTa model)"),AKo=l(),HT=a("li"),vme=a("strong"),LKo=o("xlnet"),BKo=o(" \u2014 "),Cq=a("a"),xKo=o("TFXLNetLMHeadModel"),kKo=o(" (XLNet model)"),RKo=l(),Tme=a("p"),SKo=o("Examples:"),PKo=l(),f(lw.$$.fragment),EBe=l(),lc=a("h2"),UT=a("a"),Fme=a("span"),f(iw.$$.fragment),$Ko=l(),Cme=a("span"),IKo=o("TFAutoModelForCausalLM"),yBe=l(),ur=a("div"),f(dw.$$.fragment),DKo=l(),ic=a("p"),jKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mme=a("code"),NKo=o("from_pretrained()"),qKo=o("class method or the "),Eme=a("code"),GKo=o("from_config()"),OKo=o(`class
method.`),XKo=l(),cw=a("p"),VKo=o("This class cannot be instantiated directly using "),yme=a("code"),zKo=o("__init__()"),WKo=o(" (throws an error)."),QKo=l(),ct=a("div"),f(fw.$$.fragment),HKo=l(),wme=a("p"),UKo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JKo=l(),dc=a("p"),YKo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),KKo=o("not"),ZKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lme=a("code"),eZo=o("from_pretrained()"),oZo=o("to load the model weights."),rZo=l(),Bme=a("p"),tZo=o("Examples:"),aZo=l(),f(mw.$$.fragment),nZo=l(),po=a("div"),f(gw.$$.fragment),sZo=l(),xme=a("p"),lZo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iZo=l(),mn=a("p"),dZo=o("The model class to instantiate is selected based on the "),kme=a("code"),cZo=o("model_type"),fZo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),mZo=o("pretrained_model_name_or_path"),gZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=a("code"),hZo=o("pretrained_model_name_or_path"),pZo=o(":"),_Zo=l(),he=a("ul"),JT=a("li"),Pme=a("strong"),uZo=o("bert"),bZo=o(" \u2014 "),Mq=a("a"),vZo=o("TFBertLMHeadModel"),TZo=o(" (BERT model)"),FZo=l(),YT=a("li"),$me=a("strong"),CZo=o("ctrl"),MZo=o(" \u2014 "),Eq=a("a"),EZo=o("TFCTRLLMHeadModel"),yZo=o(" (CTRL model)"),wZo=l(),KT=a("li"),Ime=a("strong"),AZo=o("gpt2"),LZo=o(" \u2014 "),yq=a("a"),BZo=o("TFGPT2LMHeadModel"),xZo=o(" (OpenAI GPT-2 model)"),kZo=l(),ZT=a("li"),Dme=a("strong"),RZo=o("openai-gpt"),SZo=o(" \u2014 "),wq=a("a"),PZo=o("TFOpenAIGPTLMHeadModel"),$Zo=o(" (OpenAI GPT model)"),IZo=l(),e7=a("li"),jme=a("strong"),DZo=o("rembert"),jZo=o(" \u2014 "),Aq=a("a"),NZo=o("TFRemBertForCausalLM"),qZo=o(" (RemBERT model)"),GZo=l(),o7=a("li"),Nme=a("strong"),OZo=o("roberta"),XZo=o(" \u2014 "),Lq=a("a"),VZo=o("TFRobertaForCausalLM"),zZo=o(" (RoBERTa model)"),WZo=l(),r7=a("li"),qme=a("strong"),QZo=o("roformer"),HZo=o(" \u2014 "),Bq=a("a"),UZo=o("TFRoFormerForCausalLM"),JZo=o(" (RoFormer model)"),YZo=l(),t7=a("li"),Gme=a("strong"),KZo=o("transfo-xl"),ZZo=o(" \u2014 "),xq=a("a"),eer=o("TFTransfoXLLMHeadModel"),oer=o(" (Transformer-XL model)"),rer=l(),a7=a("li"),Ome=a("strong"),ter=o("xlm"),aer=o(" \u2014 "),kq=a("a"),ner=o("TFXLMWithLMHeadModel"),ser=o(" (XLM model)"),ler=l(),n7=a("li"),Xme=a("strong"),ier=o("xlnet"),der=o(" \u2014 "),Rq=a("a"),cer=o("TFXLNetLMHeadModel"),fer=o(" (XLNet model)"),mer=l(),Vme=a("p"),ger=o("Examples:"),her=l(),f(hw.$$.fragment),wBe=l(),cc=a("h2"),s7=a("a"),zme=a("span"),f(pw.$$.fragment),per=l(),Wme=a("span"),_er=o("TFAutoModelForImageClassification"),ABe=l(),br=a("div"),f(_w.$$.fragment),uer=l(),fc=a("p"),ber=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Qme=a("code"),ver=o("from_pretrained()"),Ter=o("class method or the "),Hme=a("code"),Fer=o("from_config()"),Cer=o(`class
method.`),Mer=l(),uw=a("p"),Eer=o("This class cannot be instantiated directly using "),Ume=a("code"),yer=o("__init__()"),wer=o(" (throws an error)."),Aer=l(),ft=a("div"),f(bw.$$.fragment),Ler=l(),Jme=a("p"),Ber=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xer=l(),mc=a("p"),ker=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),Rer=o("not"),Ser=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kme=a("code"),Per=o("from_pretrained()"),$er=o("to load the model weights."),Ier=l(),Zme=a("p"),Der=o("Examples:"),jer=l(),f(vw.$$.fragment),Ner=l(),_o=a("div"),f(Tw.$$.fragment),qer=l(),ege=a("p"),Ger=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Oer=l(),gn=a("p"),Xer=o("The model class to instantiate is selected based on the "),oge=a("code"),Ver=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Fw=a("ul"),l7=a("li"),age=a("strong"),Yer=o("convnext"),Ker=o(" \u2014 "),Sq=a("a"),Zer=o("TFConvNextForImageClassification"),eor=o(" (ConvNext model)"),oor=l(),i7=a("li"),nge=a("strong"),ror=o("vit"),tor=o(" \u2014 "),Pq=a("a"),aor=o("TFViTForImageClassification"),nor=o(" (ViT model)"),sor=l(),sge=a("p"),lor=o("Examples:"),ior=l(),f(Cw.$$.fragment),LBe=l(),gc=a("h2"),d7=a("a"),lge=a("span"),f(Mw.$$.fragment),dor=l(),ige=a("span"),cor=o("TFAutoModelForMaskedLM"),BBe=l(),vr=a("div"),f(Ew.$$.fragment),mor=l(),hc=a("p"),gor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dge=a("code"),hor=o("from_pretrained()"),por=o("class method or the "),cge=a("code"),_or=o("from_config()"),uor=o(`class
method.`),bor=l(),yw=a("p"),vor=o("This class cannot be instantiated directly using "),fge=a("code"),Tor=o("__init__()"),For=o(" (throws an error)."),Cor=l(),mt=a("div"),f(ww.$$.fragment),Mor=l(),mge=a("p"),Eor=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yor=l(),pc=a("p"),wor=o(`Note:
Loading a model from its configuration file does `),gge=a("strong"),Aor=o("not"),Lor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hge=a("code"),Bor=o("from_pretrained()"),xor=o("to load the model weights."),kor=l(),pge=a("p"),Ror=o("Examples:"),Sor=l(),f(Aw.$$.fragment),Por=l(),uo=a("div"),f(Lw.$$.fragment),$or=l(),_ge=a("p"),Ior=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dor=l(),hn=a("p"),jor=o("The model class to instantiate is selected based on the "),uge=a("code"),Nor=o("model_type"),qor=o(` property of the config object (either
passed as an argument or loaded from `),bge=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=a("code"),Xor=o("pretrained_model_name_or_path"),Vor=o(":"),zor=l(),Y=a("ul"),c7=a("li"),Tge=a("strong"),Wor=o("albert"),Qor=o(" \u2014 "),$q=a("a"),Hor=o("TFAlbertForMaskedLM"),Uor=o(" (ALBERT model)"),Jor=l(),f7=a("li"),Fge=a("strong"),Yor=o("bert"),Kor=o(" \u2014 "),Iq=a("a"),Zor=o("TFBertForMaskedLM"),err=o(" (BERT model)"),orr=l(),m7=a("li"),Cge=a("strong"),rrr=o("camembert"),trr=o(" \u2014 "),Dq=a("a"),arr=o("TFCamembertForMaskedLM"),nrr=o(" (CamemBERT model)"),srr=l(),g7=a("li"),Mge=a("strong"),lrr=o("convbert"),irr=o(" \u2014 "),jq=a("a"),drr=o("TFConvBertForMaskedLM"),crr=o(" (ConvBERT model)"),frr=l(),h7=a("li"),Ege=a("strong"),mrr=o("deberta"),grr=o(" \u2014 "),Nq=a("a"),hrr=o("TFDebertaForMaskedLM"),prr=o(" (DeBERTa model)"),_rr=l(),p7=a("li"),yge=a("strong"),urr=o("deberta-v2"),brr=o(" \u2014 "),qq=a("a"),vrr=o("TFDebertaV2ForMaskedLM"),Trr=o(" (DeBERTa-v2 model)"),Frr=l(),_7=a("li"),wge=a("strong"),Crr=o("distilbert"),Mrr=o(" \u2014 "),Gq=a("a"),Err=o("TFDistilBertForMaskedLM"),yrr=o(" (DistilBERT model)"),wrr=l(),u7=a("li"),Age=a("strong"),Arr=o("electra"),Lrr=o(" \u2014 "),Oq=a("a"),Brr=o("TFElectraForMaskedLM"),xrr=o(" (ELECTRA model)"),krr=l(),b7=a("li"),Lge=a("strong"),Rrr=o("flaubert"),Srr=o(" \u2014 "),Xq=a("a"),Prr=o("TFFlaubertWithLMHeadModel"),$rr=o(" (FlauBERT model)"),Irr=l(),v7=a("li"),Bge=a("strong"),Drr=o("funnel"),jrr=o(" \u2014 "),Vq=a("a"),Nrr=o("TFFunnelForMaskedLM"),qrr=o(" (Funnel Transformer model)"),Grr=l(),T7=a("li"),xge=a("strong"),Orr=o("layoutlm"),Xrr=o(" \u2014 "),zq=a("a"),Vrr=o("TFLayoutLMForMaskedLM"),zrr=o(" (LayoutLM model)"),Wrr=l(),F7=a("li"),kge=a("strong"),Qrr=o("longformer"),Hrr=o(" \u2014 "),Wq=a("a"),Urr=o("TFLongformerForMaskedLM"),Jrr=o(" (Longformer model)"),Yrr=l(),C7=a("li"),Rge=a("strong"),Krr=o("mobilebert"),Zrr=o(" \u2014 "),Qq=a("a"),etr=o("TFMobileBertForMaskedLM"),otr=o(" (MobileBERT model)"),rtr=l(),M7=a("li"),Sge=a("strong"),ttr=o("mpnet"),atr=o(" \u2014 "),Hq=a("a"),ntr=o("TFMPNetForMaskedLM"),str=o(" (MPNet model)"),ltr=l(),E7=a("li"),Pge=a("strong"),itr=o("rembert"),dtr=o(" \u2014 "),Uq=a("a"),ctr=o("TFRemBertForMaskedLM"),ftr=o(" (RemBERT model)"),mtr=l(),y7=a("li"),$ge=a("strong"),gtr=o("roberta"),htr=o(" \u2014 "),Jq=a("a"),ptr=o("TFRobertaForMaskedLM"),_tr=o(" (RoBERTa model)"),utr=l(),w7=a("li"),Ige=a("strong"),btr=o("roformer"),vtr=o(" \u2014 "),Yq=a("a"),Ttr=o("TFRoFormerForMaskedLM"),Ftr=o(" (RoFormer model)"),Ctr=l(),A7=a("li"),Dge=a("strong"),Mtr=o("tapas"),Etr=o(" \u2014 "),Kq=a("a"),ytr=o("TFTapasForMaskedLM"),wtr=o(" (TAPAS model)"),Atr=l(),L7=a("li"),jge=a("strong"),Ltr=o("xlm"),Btr=o(" \u2014 "),Zq=a("a"),xtr=o("TFXLMWithLMHeadModel"),ktr=o(" (XLM model)"),Rtr=l(),B7=a("li"),Nge=a("strong"),Str=o("xlm-roberta"),Ptr=o(" \u2014 "),eG=a("a"),$tr=o("TFXLMRobertaForMaskedLM"),Itr=o(" (XLM-RoBERTa model)"),Dtr=l(),qge=a("p"),jtr=o("Examples:"),Ntr=l(),f(Bw.$$.fragment),xBe=l(),_c=a("h2"),x7=a("a"),Gge=a("span"),f(xw.$$.fragment),qtr=l(),Oge=a("span"),Gtr=o("TFAutoModelForSeq2SeqLM"),kBe=l(),Tr=a("div"),f(kw.$$.fragment),Otr=l(),uc=a("p"),Xtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xge=a("code"),Vtr=o("from_pretrained()"),ztr=o("class method or the "),Vge=a("code"),Wtr=o("from_config()"),Qtr=o(`class
method.`),Htr=l(),Rw=a("p"),Utr=o("This class cannot be instantiated directly using "),zge=a("code"),Jtr=o("__init__()"),Ytr=o(" (throws an error)."),Ktr=l(),gt=a("div"),f(Sw.$$.fragment),Ztr=l(),Wge=a("p"),ear=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oar=l(),bc=a("p"),rar=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),tar=o("not"),aar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=a("code"),nar=o("from_pretrained()"),sar=o("to load the model weights."),lar=l(),Uge=a("p"),iar=o("Examples:"),dar=l(),f(Pw.$$.fragment),car=l(),bo=a("div"),f($w.$$.fragment),far=l(),Jge=a("p"),mar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gar=l(),pn=a("p"),har=o("The model class to instantiate is selected based on the "),Yge=a("code"),par=o("model_type"),_ar=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),uar=o("pretrained_model_name_or_path"),bar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),Tar=o("pretrained_model_name_or_path"),Far=o(":"),Car=l(),pe=a("ul"),k7=a("li"),ehe=a("strong"),Mar=o("bart"),Ear=o(" \u2014 "),oG=a("a"),yar=o("TFBartForConditionalGeneration"),war=o(" (BART model)"),Aar=l(),R7=a("li"),ohe=a("strong"),Lar=o("blenderbot"),Bar=o(" \u2014 "),rG=a("a"),xar=o("TFBlenderbotForConditionalGeneration"),kar=o(" (Blenderbot model)"),Rar=l(),S7=a("li"),rhe=a("strong"),Sar=o("blenderbot-small"),Par=o(" \u2014 "),tG=a("a"),$ar=o("TFBlenderbotSmallForConditionalGeneration"),Iar=o(" (BlenderbotSmall model)"),Dar=l(),P7=a("li"),the=a("strong"),jar=o("encoder-decoder"),Nar=o(" \u2014 "),aG=a("a"),qar=o("TFEncoderDecoderModel"),Gar=o(" (Encoder decoder model)"),Oar=l(),$7=a("li"),ahe=a("strong"),Xar=o("led"),Var=o(" \u2014 "),nG=a("a"),zar=o("TFLEDForConditionalGeneration"),War=o(" (LED model)"),Qar=l(),I7=a("li"),nhe=a("strong"),Har=o("marian"),Uar=o(" \u2014 "),sG=a("a"),Jar=o("TFMarianMTModel"),Yar=o(" (Marian model)"),Kar=l(),D7=a("li"),she=a("strong"),Zar=o("mbart"),enr=o(" \u2014 "),lG=a("a"),onr=o("TFMBartForConditionalGeneration"),rnr=o(" (mBART model)"),tnr=l(),j7=a("li"),lhe=a("strong"),anr=o("mt5"),nnr=o(" \u2014 "),iG=a("a"),snr=o("TFMT5ForConditionalGeneration"),lnr=o(" (mT5 model)"),inr=l(),N7=a("li"),ihe=a("strong"),dnr=o("pegasus"),cnr=o(" \u2014 "),dG=a("a"),fnr=o("TFPegasusForConditionalGeneration"),mnr=o(" (Pegasus model)"),gnr=l(),q7=a("li"),dhe=a("strong"),hnr=o("t5"),pnr=o(" \u2014 "),cG=a("a"),_nr=o("TFT5ForConditionalGeneration"),unr=o(" (T5 model)"),bnr=l(),che=a("p"),vnr=o("Examples:"),Tnr=l(),f(Iw.$$.fragment),RBe=l(),vc=a("h2"),G7=a("a"),fhe=a("span"),f(Dw.$$.fragment),Fnr=l(),mhe=a("span"),Cnr=o("TFAutoModelForSequenceClassification"),SBe=l(),Fr=a("div"),f(jw.$$.fragment),Mnr=l(),Tc=a("p"),Enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ghe=a("code"),ynr=o("from_pretrained()"),wnr=o("class method or the "),hhe=a("code"),Anr=o("from_config()"),Lnr=o(`class
method.`),Bnr=l(),Nw=a("p"),xnr=o("This class cannot be instantiated directly using "),phe=a("code"),knr=o("__init__()"),Rnr=o(" (throws an error)."),Snr=l(),ht=a("div"),f(qw.$$.fragment),Pnr=l(),_he=a("p"),$nr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Inr=l(),Fc=a("p"),Dnr=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),jnr=o("not"),Nnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bhe=a("code"),qnr=o("from_pretrained()"),Gnr=o("to load the model weights."),Onr=l(),vhe=a("p"),Xnr=o("Examples:"),Vnr=l(),f(Gw.$$.fragment),znr=l(),vo=a("div"),f(Ow.$$.fragment),Wnr=l(),The=a("p"),Qnr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hnr=l(),_n=a("p"),Unr=o("The model class to instantiate is selected based on the "),Fhe=a("code"),Jnr=o("model_type"),Ynr=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),Knr=o("pretrained_model_name_or_path"),Znr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),esr=o("pretrained_model_name_or_path"),osr=o(":"),rsr=l(),X=a("ul"),O7=a("li"),Ehe=a("strong"),tsr=o("albert"),asr=o(" \u2014 "),fG=a("a"),nsr=o("TFAlbertForSequenceClassification"),ssr=o(" (ALBERT model)"),lsr=l(),X7=a("li"),yhe=a("strong"),isr=o("bert"),dsr=o(" \u2014 "),mG=a("a"),csr=o("TFBertForSequenceClassification"),fsr=o(" (BERT model)"),msr=l(),V7=a("li"),whe=a("strong"),gsr=o("camembert"),hsr=o(" \u2014 "),gG=a("a"),psr=o("TFCamembertForSequenceClassification"),_sr=o(" (CamemBERT model)"),usr=l(),z7=a("li"),Ahe=a("strong"),bsr=o("convbert"),vsr=o(" \u2014 "),hG=a("a"),Tsr=o("TFConvBertForSequenceClassification"),Fsr=o(" (ConvBERT model)"),Csr=l(),W7=a("li"),Lhe=a("strong"),Msr=o("ctrl"),Esr=o(" \u2014 "),pG=a("a"),ysr=o("TFCTRLForSequenceClassification"),wsr=o(" (CTRL model)"),Asr=l(),Q7=a("li"),Bhe=a("strong"),Lsr=o("deberta"),Bsr=o(" \u2014 "),_G=a("a"),xsr=o("TFDebertaForSequenceClassification"),ksr=o(" (DeBERTa model)"),Rsr=l(),H7=a("li"),xhe=a("strong"),Ssr=o("deberta-v2"),Psr=o(" \u2014 "),uG=a("a"),$sr=o("TFDebertaV2ForSequenceClassification"),Isr=o(" (DeBERTa-v2 model)"),Dsr=l(),U7=a("li"),khe=a("strong"),jsr=o("distilbert"),Nsr=o(" \u2014 "),bG=a("a"),qsr=o("TFDistilBertForSequenceClassification"),Gsr=o(" (DistilBERT model)"),Osr=l(),J7=a("li"),Rhe=a("strong"),Xsr=o("electra"),Vsr=o(" \u2014 "),vG=a("a"),zsr=o("TFElectraForSequenceClassification"),Wsr=o(" (ELECTRA model)"),Qsr=l(),Y7=a("li"),She=a("strong"),Hsr=o("flaubert"),Usr=o(" \u2014 "),TG=a("a"),Jsr=o("TFFlaubertForSequenceClassification"),Ysr=o(" (FlauBERT model)"),Ksr=l(),K7=a("li"),Phe=a("strong"),Zsr=o("funnel"),elr=o(" \u2014 "),FG=a("a"),olr=o("TFFunnelForSequenceClassification"),rlr=o(" (Funnel Transformer model)"),tlr=l(),Z7=a("li"),$he=a("strong"),alr=o("gpt2"),nlr=o(" \u2014 "),CG=a("a"),slr=o("TFGPT2ForSequenceClassification"),llr=o(" (OpenAI GPT-2 model)"),ilr=l(),eF=a("li"),Ihe=a("strong"),dlr=o("layoutlm"),clr=o(" \u2014 "),MG=a("a"),flr=o("TFLayoutLMForSequenceClassification"),mlr=o(" (LayoutLM model)"),glr=l(),oF=a("li"),Dhe=a("strong"),hlr=o("longformer"),plr=o(" \u2014 "),EG=a("a"),_lr=o("TFLongformerForSequenceClassification"),ulr=o(" (Longformer model)"),blr=l(),rF=a("li"),jhe=a("strong"),vlr=o("mobilebert"),Tlr=o(" \u2014 "),yG=a("a"),Flr=o("TFMobileBertForSequenceClassification"),Clr=o(" (MobileBERT model)"),Mlr=l(),tF=a("li"),Nhe=a("strong"),Elr=o("mpnet"),ylr=o(" \u2014 "),wG=a("a"),wlr=o("TFMPNetForSequenceClassification"),Alr=o(" (MPNet model)"),Llr=l(),aF=a("li"),qhe=a("strong"),Blr=o("openai-gpt"),xlr=o(" \u2014 "),AG=a("a"),klr=o("TFOpenAIGPTForSequenceClassification"),Rlr=o(" (OpenAI GPT model)"),Slr=l(),nF=a("li"),Ghe=a("strong"),Plr=o("rembert"),$lr=o(" \u2014 "),LG=a("a"),Ilr=o("TFRemBertForSequenceClassification"),Dlr=o(" (RemBERT model)"),jlr=l(),sF=a("li"),Ohe=a("strong"),Nlr=o("roberta"),qlr=o(" \u2014 "),BG=a("a"),Glr=o("TFRobertaForSequenceClassification"),Olr=o(" (RoBERTa model)"),Xlr=l(),lF=a("li"),Xhe=a("strong"),Vlr=o("roformer"),zlr=o(" \u2014 "),xG=a("a"),Wlr=o("TFRoFormerForSequenceClassification"),Qlr=o(" (RoFormer model)"),Hlr=l(),iF=a("li"),Vhe=a("strong"),Ulr=o("tapas"),Jlr=o(" \u2014 "),kG=a("a"),Ylr=o("TFTapasForSequenceClassification"),Klr=o(" (TAPAS model)"),Zlr=l(),dF=a("li"),zhe=a("strong"),eir=o("transfo-xl"),oir=o(" \u2014 "),RG=a("a"),rir=o("TFTransfoXLForSequenceClassification"),tir=o(" (Transformer-XL model)"),air=l(),cF=a("li"),Whe=a("strong"),nir=o("xlm"),sir=o(" \u2014 "),SG=a("a"),lir=o("TFXLMForSequenceClassification"),iir=o(" (XLM model)"),dir=l(),fF=a("li"),Qhe=a("strong"),cir=o("xlm-roberta"),fir=o(" \u2014 "),PG=a("a"),mir=o("TFXLMRobertaForSequenceClassification"),gir=o(" (XLM-RoBERTa model)"),hir=l(),mF=a("li"),Hhe=a("strong"),pir=o("xlnet"),_ir=o(" \u2014 "),$G=a("a"),uir=o("TFXLNetForSequenceClassification"),bir=o(" (XLNet model)"),vir=l(),Uhe=a("p"),Tir=o("Examples:"),Fir=l(),f(Xw.$$.fragment),PBe=l(),Cc=a("h2"),gF=a("a"),Jhe=a("span"),f(Vw.$$.fragment),Cir=l(),Yhe=a("span"),Mir=o("TFAutoModelForMultipleChoice"),$Be=l(),Cr=a("div"),f(zw.$$.fragment),Eir=l(),Mc=a("p"),yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Khe=a("code"),wir=o("from_pretrained()"),Air=o("class method or the "),Zhe=a("code"),Lir=o("from_config()"),Bir=o(`class
method.`),xir=l(),Ww=a("p"),kir=o("This class cannot be instantiated directly using "),epe=a("code"),Rir=o("__init__()"),Sir=o(" (throws an error)."),Pir=l(),pt=a("div"),f(Qw.$$.fragment),$ir=l(),ope=a("p"),Iir=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dir=l(),Ec=a("p"),jir=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),Nir=o("not"),qir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tpe=a("code"),Gir=o("from_pretrained()"),Oir=o("to load the model weights."),Xir=l(),ape=a("p"),Vir=o("Examples:"),zir=l(),f(Hw.$$.fragment),Wir=l(),To=a("div"),f(Uw.$$.fragment),Qir=l(),npe=a("p"),Hir=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Uir=l(),un=a("p"),Jir=o("The model class to instantiate is selected based on the "),spe=a("code"),Yir=o("model_type"),Kir=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(":"),tdr=l(),te=a("ul"),hF=a("li"),dpe=a("strong"),adr=o("albert"),ndr=o(" \u2014 "),IG=a("a"),sdr=o("TFAlbertForMultipleChoice"),ldr=o(" (ALBERT model)"),idr=l(),pF=a("li"),cpe=a("strong"),ddr=o("bert"),cdr=o(" \u2014 "),DG=a("a"),fdr=o("TFBertForMultipleChoice"),mdr=o(" (BERT model)"),gdr=l(),_F=a("li"),fpe=a("strong"),hdr=o("camembert"),pdr=o(" \u2014 "),jG=a("a"),_dr=o("TFCamembertForMultipleChoice"),udr=o(" (CamemBERT model)"),bdr=l(),uF=a("li"),mpe=a("strong"),vdr=o("convbert"),Tdr=o(" \u2014 "),NG=a("a"),Fdr=o("TFConvBertForMultipleChoice"),Cdr=o(" (ConvBERT model)"),Mdr=l(),bF=a("li"),gpe=a("strong"),Edr=o("distilbert"),ydr=o(" \u2014 "),qG=a("a"),wdr=o("TFDistilBertForMultipleChoice"),Adr=o(" (DistilBERT model)"),Ldr=l(),vF=a("li"),hpe=a("strong"),Bdr=o("electra"),xdr=o(" \u2014 "),GG=a("a"),kdr=o("TFElectraForMultipleChoice"),Rdr=o(" (ELECTRA model)"),Sdr=l(),TF=a("li"),ppe=a("strong"),Pdr=o("flaubert"),$dr=o(" \u2014 "),OG=a("a"),Idr=o("TFFlaubertForMultipleChoice"),Ddr=o(" (FlauBERT model)"),jdr=l(),FF=a("li"),_pe=a("strong"),Ndr=o("funnel"),qdr=o(" \u2014 "),XG=a("a"),Gdr=o("TFFunnelForMultipleChoice"),Odr=o(" (Funnel Transformer model)"),Xdr=l(),CF=a("li"),upe=a("strong"),Vdr=o("longformer"),zdr=o(" \u2014 "),VG=a("a"),Wdr=o("TFLongformerForMultipleChoice"),Qdr=o(" (Longformer model)"),Hdr=l(),MF=a("li"),bpe=a("strong"),Udr=o("mobilebert"),Jdr=o(" \u2014 "),zG=a("a"),Ydr=o("TFMobileBertForMultipleChoice"),Kdr=o(" (MobileBERT model)"),Zdr=l(),EF=a("li"),vpe=a("strong"),ecr=o("mpnet"),ocr=o(" \u2014 "),WG=a("a"),rcr=o("TFMPNetForMultipleChoice"),tcr=o(" (MPNet model)"),acr=l(),yF=a("li"),Tpe=a("strong"),ncr=o("rembert"),scr=o(" \u2014 "),QG=a("a"),lcr=o("TFRemBertForMultipleChoice"),icr=o(" (RemBERT model)"),dcr=l(),wF=a("li"),Fpe=a("strong"),ccr=o("roberta"),fcr=o(" \u2014 "),HG=a("a"),mcr=o("TFRobertaForMultipleChoice"),gcr=o(" (RoBERTa model)"),hcr=l(),AF=a("li"),Cpe=a("strong"),pcr=o("roformer"),_cr=o(" \u2014 "),UG=a("a"),ucr=o("TFRoFormerForMultipleChoice"),bcr=o(" (RoFormer model)"),vcr=l(),LF=a("li"),Mpe=a("strong"),Tcr=o("xlm"),Fcr=o(" \u2014 "),JG=a("a"),Ccr=o("TFXLMForMultipleChoice"),Mcr=o(" (XLM model)"),Ecr=l(),BF=a("li"),Epe=a("strong"),ycr=o("xlm-roberta"),wcr=o(" \u2014 "),YG=a("a"),Acr=o("TFXLMRobertaForMultipleChoice"),Lcr=o(" (XLM-RoBERTa model)"),Bcr=l(),xF=a("li"),ype=a("strong"),xcr=o("xlnet"),kcr=o(" \u2014 "),KG=a("a"),Rcr=o("TFXLNetForMultipleChoice"),Scr=o(" (XLNet model)"),Pcr=l(),wpe=a("p"),$cr=o("Examples:"),Icr=l(),f(Jw.$$.fragment),IBe=l(),yc=a("h2"),kF=a("a"),Ape=a("span"),f(Yw.$$.fragment),Dcr=l(),Lpe=a("span"),jcr=o("TFAutoModelForTableQuestionAnswering"),DBe=l(),Mr=a("div"),f(Kw.$$.fragment),Ncr=l(),wc=a("p"),qcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bpe=a("code"),Gcr=o("from_pretrained()"),Ocr=o("class method or the "),xpe=a("code"),Xcr=o("from_config()"),Vcr=o(`class
method.`),zcr=l(),Zw=a("p"),Wcr=o("This class cannot be instantiated directly using "),kpe=a("code"),Qcr=o("__init__()"),Hcr=o(" (throws an error)."),Ucr=l(),_t=a("div"),f(e6.$$.fragment),Jcr=l(),Rpe=a("p"),Ycr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kcr=l(),Ac=a("p"),Zcr=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),efr=o("not"),ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ppe=a("code"),rfr=o("from_pretrained()"),tfr=o("to load the model weights."),afr=l(),$pe=a("p"),nfr=o("Examples:"),sfr=l(),f(o6.$$.fragment),lfr=l(),Fo=a("div"),f(r6.$$.fragment),ifr=l(),Ipe=a("p"),dfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cfr=l(),bn=a("p"),ffr=o("The model class to instantiate is selected based on the "),Dpe=a("code"),mfr=o("model_type"),gfr=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),hfr=o("pretrained_model_name_or_path"),pfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),_fr=o("pretrained_model_name_or_path"),ufr=o(":"),bfr=l(),qpe=a("ul"),RF=a("li"),Gpe=a("strong"),vfr=o("tapas"),Tfr=o(" \u2014 "),ZG=a("a"),Ffr=o("TFTapasForQuestionAnswering"),Cfr=o(" (TAPAS model)"),Mfr=l(),Ope=a("p"),Efr=o("Examples:"),yfr=l(),f(t6.$$.fragment),jBe=l(),Lc=a("h2"),SF=a("a"),Xpe=a("span"),f(a6.$$.fragment),wfr=l(),Vpe=a("span"),Afr=o("TFAutoModelForTokenClassification"),NBe=l(),Er=a("div"),f(n6.$$.fragment),Lfr=l(),Bc=a("p"),Bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zpe=a("code"),xfr=o("from_pretrained()"),kfr=o("class method or the "),Wpe=a("code"),Rfr=o("from_config()"),Sfr=o(`class
method.`),Pfr=l(),s6=a("p"),$fr=o("This class cannot be instantiated directly using "),Qpe=a("code"),Ifr=o("__init__()"),Dfr=o(" (throws an error)."),jfr=l(),ut=a("div"),f(l6.$$.fragment),Nfr=l(),Hpe=a("p"),qfr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Gfr=l(),xc=a("p"),Ofr=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),Xfr=o("not"),Vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jpe=a("code"),zfr=o("from_pretrained()"),Wfr=o("to load the model weights."),Qfr=l(),Ype=a("p"),Hfr=o("Examples:"),Ufr=l(),f(i6.$$.fragment),Jfr=l(),Co=a("div"),f(d6.$$.fragment),Yfr=l(),Kpe=a("p"),Kfr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zfr=l(),vn=a("p"),emr=o("The model class to instantiate is selected based on the "),Zpe=a("code"),omr=o("model_type"),rmr=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),tmr=o("pretrained_model_name_or_path"),amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),nmr=o("pretrained_model_name_or_path"),smr=o(":"),lmr=l(),K=a("ul"),PF=a("li"),r_e=a("strong"),imr=o("albert"),dmr=o(" \u2014 "),eO=a("a"),cmr=o("TFAlbertForTokenClassification"),fmr=o(" (ALBERT model)"),mmr=l(),$F=a("li"),t_e=a("strong"),gmr=o("bert"),hmr=o(" \u2014 "),oO=a("a"),pmr=o("TFBertForTokenClassification"),_mr=o(" (BERT model)"),umr=l(),IF=a("li"),a_e=a("strong"),bmr=o("camembert"),vmr=o(" \u2014 "),rO=a("a"),Tmr=o("TFCamembertForTokenClassification"),Fmr=o(" (CamemBERT model)"),Cmr=l(),DF=a("li"),n_e=a("strong"),Mmr=o("convbert"),Emr=o(" \u2014 "),tO=a("a"),ymr=o("TFConvBertForTokenClassification"),wmr=o(" (ConvBERT model)"),Amr=l(),jF=a("li"),s_e=a("strong"),Lmr=o("deberta"),Bmr=o(" \u2014 "),aO=a("a"),xmr=o("TFDebertaForTokenClassification"),kmr=o(" (DeBERTa model)"),Rmr=l(),NF=a("li"),l_e=a("strong"),Smr=o("deberta-v2"),Pmr=o(" \u2014 "),nO=a("a"),$mr=o("TFDebertaV2ForTokenClassification"),Imr=o(" (DeBERTa-v2 model)"),Dmr=l(),qF=a("li"),i_e=a("strong"),jmr=o("distilbert"),Nmr=o(" \u2014 "),sO=a("a"),qmr=o("TFDistilBertForTokenClassification"),Gmr=o(" (DistilBERT model)"),Omr=l(),GF=a("li"),d_e=a("strong"),Xmr=o("electra"),Vmr=o(" \u2014 "),lO=a("a"),zmr=o("TFElectraForTokenClassification"),Wmr=o(" (ELECTRA model)"),Qmr=l(),OF=a("li"),c_e=a("strong"),Hmr=o("flaubert"),Umr=o(" \u2014 "),iO=a("a"),Jmr=o("TFFlaubertForTokenClassification"),Ymr=o(" (FlauBERT model)"),Kmr=l(),XF=a("li"),f_e=a("strong"),Zmr=o("funnel"),egr=o(" \u2014 "),dO=a("a"),ogr=o("TFFunnelForTokenClassification"),rgr=o(" (Funnel Transformer model)"),tgr=l(),VF=a("li"),m_e=a("strong"),agr=o("layoutlm"),ngr=o(" \u2014 "),cO=a("a"),sgr=o("TFLayoutLMForTokenClassification"),lgr=o(" (LayoutLM model)"),igr=l(),zF=a("li"),g_e=a("strong"),dgr=o("longformer"),cgr=o(" \u2014 "),fO=a("a"),fgr=o("TFLongformerForTokenClassification"),mgr=o(" (Longformer model)"),ggr=l(),WF=a("li"),h_e=a("strong"),hgr=o("mobilebert"),pgr=o(" \u2014 "),mO=a("a"),_gr=o("TFMobileBertForTokenClassification"),ugr=o(" (MobileBERT model)"),bgr=l(),QF=a("li"),p_e=a("strong"),vgr=o("mpnet"),Tgr=o(" \u2014 "),gO=a("a"),Fgr=o("TFMPNetForTokenClassification"),Cgr=o(" (MPNet model)"),Mgr=l(),HF=a("li"),__e=a("strong"),Egr=o("rembert"),ygr=o(" \u2014 "),hO=a("a"),wgr=o("TFRemBertForTokenClassification"),Agr=o(" (RemBERT model)"),Lgr=l(),UF=a("li"),u_e=a("strong"),Bgr=o("roberta"),xgr=o(" \u2014 "),pO=a("a"),kgr=o("TFRobertaForTokenClassification"),Rgr=o(" (RoBERTa model)"),Sgr=l(),JF=a("li"),b_e=a("strong"),Pgr=o("roformer"),$gr=o(" \u2014 "),_O=a("a"),Igr=o("TFRoFormerForTokenClassification"),Dgr=o(" (RoFormer model)"),jgr=l(),YF=a("li"),v_e=a("strong"),Ngr=o("xlm"),qgr=o(" \u2014 "),uO=a("a"),Ggr=o("TFXLMForTokenClassification"),Ogr=o(" (XLM model)"),Xgr=l(),KF=a("li"),T_e=a("strong"),Vgr=o("xlm-roberta"),zgr=o(" \u2014 "),bO=a("a"),Wgr=o("TFXLMRobertaForTokenClassification"),Qgr=o(" (XLM-RoBERTa model)"),Hgr=l(),ZF=a("li"),F_e=a("strong"),Ugr=o("xlnet"),Jgr=o(" \u2014 "),vO=a("a"),Ygr=o("TFXLNetForTokenClassification"),Kgr=o(" (XLNet model)"),Zgr=l(),C_e=a("p"),ehr=o("Examples:"),ohr=l(),f(c6.$$.fragment),qBe=l(),kc=a("h2"),e9=a("a"),M_e=a("span"),f(f6.$$.fragment),rhr=l(),E_e=a("span"),thr=o("TFAutoModelForQuestionAnswering"),GBe=l(),yr=a("div"),f(m6.$$.fragment),ahr=l(),Rc=a("p"),nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),y_e=a("code"),shr=o("from_pretrained()"),lhr=o("class method or the "),w_e=a("code"),ihr=o("from_config()"),dhr=o(`class
method.`),chr=l(),g6=a("p"),fhr=o("This class cannot be instantiated directly using "),A_e=a("code"),mhr=o("__init__()"),ghr=o(" (throws an error)."),hhr=l(),bt=a("div"),f(h6.$$.fragment),phr=l(),L_e=a("p"),_hr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uhr=l(),Sc=a("p"),bhr=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),vhr=o("not"),Thr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x_e=a("code"),Fhr=o("from_pretrained()"),Chr=o("to load the model weights."),Mhr=l(),k_e=a("p"),Ehr=o("Examples:"),yhr=l(),f(p6.$$.fragment),whr=l(),Mo=a("div"),f(_6.$$.fragment),Ahr=l(),R_e=a("p"),Lhr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bhr=l(),Tn=a("p"),xhr=o("The model class to instantiate is selected based on the "),S_e=a("code"),khr=o("model_type"),Rhr=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),Shr=o("pretrained_model_name_or_path"),Phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),$hr=o("pretrained_model_name_or_path"),Ihr=o(":"),Dhr=l(),Z=a("ul"),o9=a("li"),I_e=a("strong"),jhr=o("albert"),Nhr=o(" \u2014 "),TO=a("a"),qhr=o("TFAlbertForQuestionAnswering"),Ghr=o(" (ALBERT model)"),Ohr=l(),r9=a("li"),D_e=a("strong"),Xhr=o("bert"),Vhr=o(" \u2014 "),FO=a("a"),zhr=o("TFBertForQuestionAnswering"),Whr=o(" (BERT model)"),Qhr=l(),t9=a("li"),j_e=a("strong"),Hhr=o("camembert"),Uhr=o(" \u2014 "),CO=a("a"),Jhr=o("TFCamembertForQuestionAnswering"),Yhr=o(" (CamemBERT model)"),Khr=l(),a9=a("li"),N_e=a("strong"),Zhr=o("convbert"),epr=o(" \u2014 "),MO=a("a"),opr=o("TFConvBertForQuestionAnswering"),rpr=o(" (ConvBERT model)"),tpr=l(),n9=a("li"),q_e=a("strong"),apr=o("deberta"),npr=o(" \u2014 "),EO=a("a"),spr=o("TFDebertaForQuestionAnswering"),lpr=o(" (DeBERTa model)"),ipr=l(),s9=a("li"),G_e=a("strong"),dpr=o("deberta-v2"),cpr=o(" \u2014 "),yO=a("a"),fpr=o("TFDebertaV2ForQuestionAnswering"),mpr=o(" (DeBERTa-v2 model)"),gpr=l(),l9=a("li"),O_e=a("strong"),hpr=o("distilbert"),ppr=o(" \u2014 "),wO=a("a"),_pr=o("TFDistilBertForQuestionAnswering"),upr=o(" (DistilBERT model)"),bpr=l(),i9=a("li"),X_e=a("strong"),vpr=o("electra"),Tpr=o(" \u2014 "),AO=a("a"),Fpr=o("TFElectraForQuestionAnswering"),Cpr=o(" (ELECTRA model)"),Mpr=l(),d9=a("li"),V_e=a("strong"),Epr=o("flaubert"),ypr=o(" \u2014 "),LO=a("a"),wpr=o("TFFlaubertForQuestionAnsweringSimple"),Apr=o(" (FlauBERT model)"),Lpr=l(),c9=a("li"),z_e=a("strong"),Bpr=o("funnel"),xpr=o(" \u2014 "),BO=a("a"),kpr=o("TFFunnelForQuestionAnswering"),Rpr=o(" (Funnel Transformer model)"),Spr=l(),f9=a("li"),W_e=a("strong"),Ppr=o("longformer"),$pr=o(" \u2014 "),xO=a("a"),Ipr=o("TFLongformerForQuestionAnswering"),Dpr=o(" (Longformer model)"),jpr=l(),m9=a("li"),Q_e=a("strong"),Npr=o("mobilebert"),qpr=o(" \u2014 "),kO=a("a"),Gpr=o("TFMobileBertForQuestionAnswering"),Opr=o(" (MobileBERT model)"),Xpr=l(),g9=a("li"),H_e=a("strong"),Vpr=o("mpnet"),zpr=o(" \u2014 "),RO=a("a"),Wpr=o("TFMPNetForQuestionAnswering"),Qpr=o(" (MPNet model)"),Hpr=l(),h9=a("li"),U_e=a("strong"),Upr=o("rembert"),Jpr=o(" \u2014 "),SO=a("a"),Ypr=o("TFRemBertForQuestionAnswering"),Kpr=o(" (RemBERT model)"),Zpr=l(),p9=a("li"),J_e=a("strong"),e_r=o("roberta"),o_r=o(" \u2014 "),PO=a("a"),r_r=o("TFRobertaForQuestionAnswering"),t_r=o(" (RoBERTa model)"),a_r=l(),_9=a("li"),Y_e=a("strong"),n_r=o("roformer"),s_r=o(" \u2014 "),$O=a("a"),l_r=o("TFRoFormerForQuestionAnswering"),i_r=o(" (RoFormer model)"),d_r=l(),u9=a("li"),K_e=a("strong"),c_r=o("xlm"),f_r=o(" \u2014 "),IO=a("a"),m_r=o("TFXLMForQuestionAnsweringSimple"),g_r=o(" (XLM model)"),h_r=l(),b9=a("li"),Z_e=a("strong"),p_r=o("xlm-roberta"),__r=o(" \u2014 "),DO=a("a"),u_r=o("TFXLMRobertaForQuestionAnswering"),b_r=o(" (XLM-RoBERTa model)"),v_r=l(),v9=a("li"),eue=a("strong"),T_r=o("xlnet"),F_r=o(" \u2014 "),jO=a("a"),C_r=o("TFXLNetForQuestionAnsweringSimple"),M_r=o(" (XLNet model)"),E_r=l(),oue=a("p"),y_r=o("Examples:"),w_r=l(),f(u6.$$.fragment),OBe=l(),Pc=a("h2"),T9=a("a"),rue=a("span"),f(b6.$$.fragment),A_r=l(),tue=a("span"),L_r=o("TFAutoModelForVision2Seq"),XBe=l(),wr=a("div"),f(v6.$$.fragment),B_r=l(),$c=a("p"),x_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aue=a("code"),k_r=o("from_pretrained()"),R_r=o("class method or the "),nue=a("code"),S_r=o("from_config()"),P_r=o(`class
method.`),$_r=l(),T6=a("p"),I_r=o("This class cannot be instantiated directly using "),sue=a("code"),D_r=o("__init__()"),j_r=o(" (throws an error)."),N_r=l(),vt=a("div"),f(F6.$$.fragment),q_r=l(),lue=a("p"),G_r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),O_r=l(),Ic=a("p"),X_r=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),V_r=o("not"),z_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),due=a("code"),W_r=o("from_pretrained()"),Q_r=o("to load the model weights."),H_r=l(),cue=a("p"),U_r=o("Examples:"),J_r=l(),f(C6.$$.fragment),Y_r=l(),Eo=a("div"),f(M6.$$.fragment),K_r=l(),fue=a("p"),Z_r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eur=l(),Fn=a("p"),our=o("The model class to instantiate is selected based on the "),mue=a("code"),rur=o("model_type"),tur=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),sur=o("pretrained_model_name_or_path"),lur=o(":"),iur=l(),pue=a("ul"),F9=a("li"),_ue=a("strong"),dur=o("vision-encoder-decoder"),cur=o(" \u2014 "),NO=a("a"),fur=o("TFVisionEncoderDecoderModel"),mur=o(" (Vision Encoder decoder model)"),gur=l(),uue=a("p"),hur=o("Examples:"),pur=l(),f(E6.$$.fragment),VBe=l(),Dc=a("h2"),C9=a("a"),bue=a("span"),f(y6.$$.fragment),_ur=l(),vue=a("span"),uur=o("TFAutoModelForSpeechSeq2Seq"),zBe=l(),Ar=a("div"),f(w6.$$.fragment),bur=l(),jc=a("p"),vur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tue=a("code"),Tur=o("from_pretrained()"),Fur=o("class method or the "),Fue=a("code"),Cur=o("from_config()"),Mur=o(`class
method.`),Eur=l(),A6=a("p"),yur=o("This class cannot be instantiated directly using "),Cue=a("code"),wur=o("__init__()"),Aur=o(" (throws an error)."),Lur=l(),Tt=a("div"),f(L6.$$.fragment),Bur=l(),Mue=a("p"),xur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kur=l(),Nc=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),Sur=o("not"),Pur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yue=a("code"),$ur=o("from_pretrained()"),Iur=o("to load the model weights."),Dur=l(),wue=a("p"),jur=o("Examples:"),Nur=l(),f(B6.$$.fragment),qur=l(),yo=a("div"),f(x6.$$.fragment),Gur=l(),Aue=a("p"),Our=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xur=l(),Cn=a("p"),Vur=o("The model class to instantiate is selected based on the "),Lue=a("code"),zur=o("model_type"),Wur=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Qur=o("pretrained_model_name_or_path"),Hur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Uur=o("pretrained_model_name_or_path"),Jur=o(":"),Yur=l(),kue=a("ul"),M9=a("li"),Rue=a("strong"),Kur=o("speech_to_text"),Zur=o(" \u2014 "),qO=a("a"),e5r=o("TFSpeech2TextForConditionalGeneration"),o5r=o(" (Speech2Text model)"),r5r=l(),Sue=a("p"),t5r=o("Examples:"),a5r=l(),f(k6.$$.fragment),WBe=l(),qc=a("h2"),E9=a("a"),Pue=a("span"),f(R6.$$.fragment),n5r=l(),$ue=a("span"),s5r=o("FlaxAutoModel"),QBe=l(),Lr=a("div"),f(S6.$$.fragment),l5r=l(),Gc=a("p"),i5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Iue=a("code"),d5r=o("from_pretrained()"),c5r=o("class method or the "),Due=a("code"),f5r=o("from_config()"),m5r=o(`class
method.`),g5r=l(),P6=a("p"),h5r=o("This class cannot be instantiated directly using "),jue=a("code"),p5r=o("__init__()"),_5r=o(" (throws an error)."),u5r=l(),Ft=a("div"),f($6.$$.fragment),b5r=l(),Nue=a("p"),v5r=o("Instantiates one of the base model classes of the library from a configuration."),T5r=l(),Oc=a("p"),F5r=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),C5r=o("not"),M5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gue=a("code"),E5r=o("from_pretrained()"),y5r=o("to load the model weights."),w5r=l(),Oue=a("p"),A5r=o("Examples:"),L5r=l(),f(I6.$$.fragment),B5r=l(),wo=a("div"),f(D6.$$.fragment),x5r=l(),Xue=a("p"),k5r=o("Instantiate one of the base model classes of the library from a pretrained model."),R5r=l(),Mn=a("p"),S5r=o("The model class to instantiate is selected based on the "),Vue=a("code"),P5r=o("model_type"),$5r=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),I5r=o("pretrained_model_name_or_path"),D5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),j5r=o("pretrained_model_name_or_path"),N5r=o(":"),q5r=l(),z=a("ul"),y9=a("li"),Que=a("strong"),G5r=o("albert"),O5r=o(" \u2014 "),GO=a("a"),X5r=o("FlaxAlbertModel"),V5r=o(" (ALBERT model)"),z5r=l(),w9=a("li"),Hue=a("strong"),W5r=o("bart"),Q5r=o(" \u2014 "),OO=a("a"),H5r=o("FlaxBartModel"),U5r=o(" (BART model)"),J5r=l(),A9=a("li"),Uue=a("strong"),Y5r=o("beit"),K5r=o(" \u2014 "),XO=a("a"),Z5r=o("FlaxBeitModel"),e1r=o(" (BEiT model)"),o1r=l(),L9=a("li"),Jue=a("strong"),r1r=o("bert"),t1r=o(" \u2014 "),VO=a("a"),a1r=o("FlaxBertModel"),n1r=o(" (BERT model)"),s1r=l(),B9=a("li"),Yue=a("strong"),l1r=o("big_bird"),i1r=o(" \u2014 "),zO=a("a"),d1r=o("FlaxBigBirdModel"),c1r=o(" (BigBird model)"),f1r=l(),x9=a("li"),Kue=a("strong"),m1r=o("blenderbot"),g1r=o(" \u2014 "),WO=a("a"),h1r=o("FlaxBlenderbotModel"),p1r=o(" (Blenderbot model)"),_1r=l(),k9=a("li"),Zue=a("strong"),u1r=o("blenderbot-small"),b1r=o(" \u2014 "),QO=a("a"),v1r=o("FlaxBlenderbotSmallModel"),T1r=o(" (BlenderbotSmall model)"),F1r=l(),R9=a("li"),e5e=a("strong"),C1r=o("clip"),M1r=o(" \u2014 "),HO=a("a"),E1r=o("FlaxCLIPModel"),y1r=o(" (CLIP model)"),w1r=l(),S9=a("li"),o5e=a("strong"),A1r=o("distilbert"),L1r=o(" \u2014 "),UO=a("a"),B1r=o("FlaxDistilBertModel"),x1r=o(" (DistilBERT model)"),k1r=l(),P9=a("li"),r5e=a("strong"),R1r=o("electra"),S1r=o(" \u2014 "),JO=a("a"),P1r=o("FlaxElectraModel"),$1r=o(" (ELECTRA model)"),I1r=l(),$9=a("li"),t5e=a("strong"),D1r=o("gpt2"),j1r=o(" \u2014 "),YO=a("a"),N1r=o("FlaxGPT2Model"),q1r=o(" (OpenAI GPT-2 model)"),G1r=l(),I9=a("li"),a5e=a("strong"),O1r=o("gpt_neo"),X1r=o(" \u2014 "),KO=a("a"),V1r=o("FlaxGPTNeoModel"),z1r=o(" (GPT Neo model)"),W1r=l(),D9=a("li"),n5e=a("strong"),Q1r=o("gptj"),H1r=o(" \u2014 "),ZO=a("a"),U1r=o("FlaxGPTJModel"),J1r=o(" (GPT-J model)"),Y1r=l(),j9=a("li"),s5e=a("strong"),K1r=o("marian"),Z1r=o(" \u2014 "),eX=a("a"),ebr=o("FlaxMarianModel"),obr=o(" (Marian model)"),rbr=l(),N9=a("li"),l5e=a("strong"),tbr=o("mbart"),abr=o(" \u2014 "),oX=a("a"),nbr=o("FlaxMBartModel"),sbr=o(" (mBART model)"),lbr=l(),q9=a("li"),i5e=a("strong"),ibr=o("mt5"),dbr=o(" \u2014 "),rX=a("a"),cbr=o("FlaxMT5Model"),fbr=o(" (mT5 model)"),mbr=l(),G9=a("li"),d5e=a("strong"),gbr=o("pegasus"),hbr=o(" \u2014 "),tX=a("a"),pbr=o("FlaxPegasusModel"),_br=o(" (Pegasus model)"),ubr=l(),O9=a("li"),c5e=a("strong"),bbr=o("roberta"),vbr=o(" \u2014 "),aX=a("a"),Tbr=o("FlaxRobertaModel"),Fbr=o(" (RoBERTa model)"),Cbr=l(),X9=a("li"),f5e=a("strong"),Mbr=o("roformer"),Ebr=o(" \u2014 "),nX=a("a"),ybr=o("FlaxRoFormerModel"),wbr=o(" (RoFormer model)"),Abr=l(),V9=a("li"),m5e=a("strong"),Lbr=o("t5"),Bbr=o(" \u2014 "),sX=a("a"),xbr=o("FlaxT5Model"),kbr=o(" (T5 model)"),Rbr=l(),z9=a("li"),g5e=a("strong"),Sbr=o("vision-text-dual-encoder"),Pbr=o(" \u2014 "),lX=a("a"),$br=o("FlaxVisionTextDualEncoderModel"),Ibr=o(" (VisionTextDualEncoder model)"),Dbr=l(),W9=a("li"),h5e=a("strong"),jbr=o("vit"),Nbr=o(" \u2014 "),iX=a("a"),qbr=o("FlaxViTModel"),Gbr=o(" (ViT model)"),Obr=l(),Q9=a("li"),p5e=a("strong"),Xbr=o("wav2vec2"),Vbr=o(" \u2014 "),dX=a("a"),zbr=o("FlaxWav2Vec2Model"),Wbr=o(" (Wav2Vec2 model)"),Qbr=l(),H9=a("li"),_5e=a("strong"),Hbr=o("xglm"),Ubr=o(" \u2014 "),cX=a("a"),Jbr=o("FlaxXGLMModel"),Ybr=o(" (XGLM model)"),Kbr=l(),u5e=a("p"),Zbr=o("Examples:"),e2r=l(),f(j6.$$.fragment),HBe=l(),Xc=a("h2"),U9=a("a"),b5e=a("span"),f(N6.$$.fragment),o2r=l(),v5e=a("span"),r2r=o("FlaxAutoModelForCausalLM"),UBe=l(),Br=a("div"),f(q6.$$.fragment),t2r=l(),Vc=a("p"),a2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),T5e=a("code"),n2r=o("from_pretrained()"),s2r=o("class method or the "),F5e=a("code"),l2r=o("from_config()"),i2r=o(`class
method.`),d2r=l(),G6=a("p"),c2r=o("This class cannot be instantiated directly using "),C5e=a("code"),f2r=o("__init__()"),m2r=o(" (throws an error)."),g2r=l(),Ct=a("div"),f(O6.$$.fragment),h2r=l(),M5e=a("p"),p2r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_2r=l(),zc=a("p"),u2r=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),b2r=o("not"),v2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y5e=a("code"),T2r=o("from_pretrained()"),F2r=o("to load the model weights."),C2r=l(),w5e=a("p"),M2r=o("Examples:"),E2r=l(),f(X6.$$.fragment),y2r=l(),Ao=a("div"),f(V6.$$.fragment),w2r=l(),A5e=a("p"),A2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L2r=l(),En=a("p"),B2r=o("The model class to instantiate is selected based on the "),L5e=a("code"),x2r=o("model_type"),k2r=o(` property of the config object (either
passed as an argument or loaded from `),B5e=a("code"),R2r=o("pretrained_model_name_or_path"),S2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),P2r=o("pretrained_model_name_or_path"),$2r=o(":"),I2r=l(),yn=a("ul"),J9=a("li"),k5e=a("strong"),D2r=o("gpt2"),j2r=o(" \u2014 "),fX=a("a"),N2r=o("FlaxGPT2LMHeadModel"),q2r=o(" (OpenAI GPT-2 model)"),G2r=l(),Y9=a("li"),R5e=a("strong"),O2r=o("gpt_neo"),X2r=o(" \u2014 "),mX=a("a"),V2r=o("FlaxGPTNeoForCausalLM"),z2r=o(" (GPT Neo model)"),W2r=l(),K9=a("li"),S5e=a("strong"),Q2r=o("gptj"),H2r=o(" \u2014 "),gX=a("a"),U2r=o("FlaxGPTJForCausalLM"),J2r=o(" (GPT-J model)"),Y2r=l(),Z9=a("li"),P5e=a("strong"),K2r=o("xglm"),Z2r=o(" \u2014 "),hX=a("a"),evr=o("FlaxXGLMForCausalLM"),ovr=o(" (XGLM model)"),rvr=l(),$5e=a("p"),tvr=o("Examples:"),avr=l(),f(z6.$$.fragment),JBe=l(),Wc=a("h2"),eC=a("a"),I5e=a("span"),f(W6.$$.fragment),nvr=l(),D5e=a("span"),svr=o("FlaxAutoModelForPreTraining"),YBe=l(),xr=a("div"),f(Q6.$$.fragment),lvr=l(),Qc=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),j5e=a("code"),dvr=o("from_pretrained()"),cvr=o("class method or the "),N5e=a("code"),fvr=o("from_config()"),mvr=o(`class
method.`),gvr=l(),H6=a("p"),hvr=o("This class cannot be instantiated directly using "),q5e=a("code"),pvr=o("__init__()"),_vr=o(" (throws an error)."),uvr=l(),Mt=a("div"),f(U6.$$.fragment),bvr=l(),G5e=a("p"),vvr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tvr=l(),Hc=a("p"),Fvr=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),Cvr=o("not"),Mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X5e=a("code"),Evr=o("from_pretrained()"),yvr=o("to load the model weights."),wvr=l(),V5e=a("p"),Avr=o("Examples:"),Lvr=l(),f(J6.$$.fragment),Bvr=l(),Lo=a("div"),f(Y6.$$.fragment),xvr=l(),z5e=a("p"),kvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rvr=l(),wn=a("p"),Svr=o("The model class to instantiate is selected based on the "),W5e=a("code"),Pvr=o("model_type"),$vr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),Ivr=o("pretrained_model_name_or_path"),Dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),jvr=o("pretrained_model_name_or_path"),Nvr=o(":"),qvr=l(),fe=a("ul"),oC=a("li"),U5e=a("strong"),Gvr=o("albert"),Ovr=o(" \u2014 "),pX=a("a"),Xvr=o("FlaxAlbertForPreTraining"),Vvr=o(" (ALBERT model)"),zvr=l(),rC=a("li"),J5e=a("strong"),Wvr=o("bart"),Qvr=o(" \u2014 "),_X=a("a"),Hvr=o("FlaxBartForConditionalGeneration"),Uvr=o(" (BART model)"),Jvr=l(),tC=a("li"),Y5e=a("strong"),Yvr=o("bert"),Kvr=o(" \u2014 "),uX=a("a"),Zvr=o("FlaxBertForPreTraining"),eTr=o(" (BERT model)"),oTr=l(),aC=a("li"),K5e=a("strong"),rTr=o("big_bird"),tTr=o(" \u2014 "),bX=a("a"),aTr=o("FlaxBigBirdForPreTraining"),nTr=o(" (BigBird model)"),sTr=l(),nC=a("li"),Z5e=a("strong"),lTr=o("electra"),iTr=o(" \u2014 "),vX=a("a"),dTr=o("FlaxElectraForPreTraining"),cTr=o(" (ELECTRA model)"),fTr=l(),sC=a("li"),e1e=a("strong"),mTr=o("mbart"),gTr=o(" \u2014 "),TX=a("a"),hTr=o("FlaxMBartForConditionalGeneration"),pTr=o(" (mBART model)"),_Tr=l(),lC=a("li"),o1e=a("strong"),uTr=o("mt5"),bTr=o(" \u2014 "),FX=a("a"),vTr=o("FlaxMT5ForConditionalGeneration"),TTr=o(" (mT5 model)"),FTr=l(),iC=a("li"),r1e=a("strong"),CTr=o("roberta"),MTr=o(" \u2014 "),CX=a("a"),ETr=o("FlaxRobertaForMaskedLM"),yTr=o(" (RoBERTa model)"),wTr=l(),dC=a("li"),t1e=a("strong"),ATr=o("roformer"),LTr=o(" \u2014 "),MX=a("a"),BTr=o("FlaxRoFormerForMaskedLM"),xTr=o(" (RoFormer model)"),kTr=l(),cC=a("li"),a1e=a("strong"),RTr=o("t5"),STr=o(" \u2014 "),EX=a("a"),PTr=o("FlaxT5ForConditionalGeneration"),$Tr=o(" (T5 model)"),ITr=l(),fC=a("li"),n1e=a("strong"),DTr=o("wav2vec2"),jTr=o(" \u2014 "),yX=a("a"),NTr=o("FlaxWav2Vec2ForPreTraining"),qTr=o(" (Wav2Vec2 model)"),GTr=l(),s1e=a("p"),OTr=o("Examples:"),XTr=l(),f(K6.$$.fragment),KBe=l(),Uc=a("h2"),mC=a("a"),l1e=a("span"),f(Z6.$$.fragment),VTr=l(),i1e=a("span"),zTr=o("FlaxAutoModelForMaskedLM"),ZBe=l(),kr=a("div"),f(eA.$$.fragment),WTr=l(),Jc=a("p"),QTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),d1e=a("code"),HTr=o("from_pretrained()"),UTr=o("class method or the "),c1e=a("code"),JTr=o("from_config()"),YTr=o(`class
method.`),KTr=l(),oA=a("p"),ZTr=o("This class cannot be instantiated directly using "),f1e=a("code"),e7r=o("__init__()"),o7r=o(" (throws an error)."),r7r=l(),Et=a("div"),f(rA.$$.fragment),t7r=l(),m1e=a("p"),a7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),n7r=l(),Yc=a("p"),s7r=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),l7r=o("not"),i7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),h1e=a("code"),d7r=o("from_pretrained()"),c7r=o("to load the model weights."),f7r=l(),p1e=a("p"),m7r=o("Examples:"),g7r=l(),f(tA.$$.fragment),h7r=l(),Bo=a("div"),f(aA.$$.fragment),p7r=l(),_1e=a("p"),_7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u7r=l(),An=a("p"),b7r=o("The model class to instantiate is selected based on the "),u1e=a("code"),v7r=o("model_type"),T7r=o(` property of the config object (either
passed as an argument or loaded from `),b1e=a("code"),F7r=o("pretrained_model_name_or_path"),C7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=a("code"),M7r=o("pretrained_model_name_or_path"),E7r=o(":"),y7r=l(),ve=a("ul"),gC=a("li"),T1e=a("strong"),w7r=o("albert"),A7r=o(" \u2014 "),wX=a("a"),L7r=o("FlaxAlbertForMaskedLM"),B7r=o(" (ALBERT model)"),x7r=l(),hC=a("li"),F1e=a("strong"),k7r=o("bart"),R7r=o(" \u2014 "),AX=a("a"),S7r=o("FlaxBartForConditionalGeneration"),P7r=o(" (BART model)"),$7r=l(),pC=a("li"),C1e=a("strong"),I7r=o("bert"),D7r=o(" \u2014 "),LX=a("a"),j7r=o("FlaxBertForMaskedLM"),N7r=o(" (BERT model)"),q7r=l(),_C=a("li"),M1e=a("strong"),G7r=o("big_bird"),O7r=o(" \u2014 "),BX=a("a"),X7r=o("FlaxBigBirdForMaskedLM"),V7r=o(" (BigBird model)"),z7r=l(),uC=a("li"),E1e=a("strong"),W7r=o("distilbert"),Q7r=o(" \u2014 "),xX=a("a"),H7r=o("FlaxDistilBertForMaskedLM"),U7r=o(" (DistilBERT model)"),J7r=l(),bC=a("li"),y1e=a("strong"),Y7r=o("electra"),K7r=o(" \u2014 "),kX=a("a"),Z7r=o("FlaxElectraForMaskedLM"),eFr=o(" (ELECTRA model)"),oFr=l(),vC=a("li"),w1e=a("strong"),rFr=o("mbart"),tFr=o(" \u2014 "),RX=a("a"),aFr=o("FlaxMBartForConditionalGeneration"),nFr=o(" (mBART model)"),sFr=l(),TC=a("li"),A1e=a("strong"),lFr=o("roberta"),iFr=o(" \u2014 "),SX=a("a"),dFr=o("FlaxRobertaForMaskedLM"),cFr=o(" (RoBERTa model)"),fFr=l(),FC=a("li"),L1e=a("strong"),mFr=o("roformer"),gFr=o(" \u2014 "),PX=a("a"),hFr=o("FlaxRoFormerForMaskedLM"),pFr=o(" (RoFormer model)"),_Fr=l(),B1e=a("p"),uFr=o("Examples:"),bFr=l(),f(nA.$$.fragment),exe=l(),Kc=a("h2"),CC=a("a"),x1e=a("span"),f(sA.$$.fragment),vFr=l(),k1e=a("span"),TFr=o("FlaxAutoModelForSeq2SeqLM"),oxe=l(),Rr=a("div"),f(lA.$$.fragment),FFr=l(),Zc=a("p"),CFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),R1e=a("code"),MFr=o("from_pretrained()"),EFr=o("class method or the "),S1e=a("code"),yFr=o("from_config()"),wFr=o(`class
method.`),AFr=l(),iA=a("p"),LFr=o("This class cannot be instantiated directly using "),P1e=a("code"),BFr=o("__init__()"),xFr=o(" (throws an error)."),kFr=l(),yt=a("div"),f(dA.$$.fragment),RFr=l(),$1e=a("p"),SFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PFr=l(),ef=a("p"),$Fr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),IFr=o("not"),DFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),D1e=a("code"),jFr=o("from_pretrained()"),NFr=o("to load the model weights."),qFr=l(),j1e=a("p"),GFr=o("Examples:"),OFr=l(),f(cA.$$.fragment),XFr=l(),xo=a("div"),f(fA.$$.fragment),VFr=l(),N1e=a("p"),zFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WFr=l(),Ln=a("p"),QFr=o("The model class to instantiate is selected based on the "),q1e=a("code"),HFr=o("model_type"),UFr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),JFr=o("pretrained_model_name_or_path"),YFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),KFr=o("pretrained_model_name_or_path"),ZFr=o(":"),e9r=l(),Te=a("ul"),MC=a("li"),X1e=a("strong"),o9r=o("bart"),r9r=o(" \u2014 "),$X=a("a"),t9r=o("FlaxBartForConditionalGeneration"),a9r=o(" (BART model)"),n9r=l(),EC=a("li"),V1e=a("strong"),s9r=o("blenderbot"),l9r=o(" \u2014 "),IX=a("a"),i9r=o("FlaxBlenderbotForConditionalGeneration"),d9r=o(" (Blenderbot model)"),c9r=l(),yC=a("li"),z1e=a("strong"),f9r=o("blenderbot-small"),m9r=o(" \u2014 "),DX=a("a"),g9r=o("FlaxBlenderbotSmallForConditionalGeneration"),h9r=o(" (BlenderbotSmall model)"),p9r=l(),wC=a("li"),W1e=a("strong"),_9r=o("encoder-decoder"),u9r=o(" \u2014 "),jX=a("a"),b9r=o("FlaxEncoderDecoderModel"),v9r=o(" (Encoder decoder model)"),T9r=l(),AC=a("li"),Q1e=a("strong"),F9r=o("marian"),C9r=o(" \u2014 "),NX=a("a"),M9r=o("FlaxMarianMTModel"),E9r=o(" (Marian model)"),y9r=l(),LC=a("li"),H1e=a("strong"),w9r=o("mbart"),A9r=o(" \u2014 "),qX=a("a"),L9r=o("FlaxMBartForConditionalGeneration"),B9r=o(" (mBART model)"),x9r=l(),BC=a("li"),U1e=a("strong"),k9r=o("mt5"),R9r=o(" \u2014 "),GX=a("a"),S9r=o("FlaxMT5ForConditionalGeneration"),P9r=o(" (mT5 model)"),$9r=l(),xC=a("li"),J1e=a("strong"),I9r=o("pegasus"),D9r=o(" \u2014 "),OX=a("a"),j9r=o("FlaxPegasusForConditionalGeneration"),N9r=o(" (Pegasus model)"),q9r=l(),kC=a("li"),Y1e=a("strong"),G9r=o("t5"),O9r=o(" \u2014 "),XX=a("a"),X9r=o("FlaxT5ForConditionalGeneration"),V9r=o(" (T5 model)"),z9r=l(),K1e=a("p"),W9r=o("Examples:"),Q9r=l(),f(mA.$$.fragment),rxe=l(),of=a("h2"),RC=a("a"),Z1e=a("span"),f(gA.$$.fragment),H9r=l(),ebe=a("span"),U9r=o("FlaxAutoModelForSequenceClassification"),txe=l(),Sr=a("div"),f(hA.$$.fragment),J9r=l(),rf=a("p"),Y9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),obe=a("code"),K9r=o("from_pretrained()"),Z9r=o("class method or the "),rbe=a("code"),eCr=o("from_config()"),oCr=o(`class
method.`),rCr=l(),pA=a("p"),tCr=o("This class cannot be instantiated directly using "),tbe=a("code"),aCr=o("__init__()"),nCr=o(" (throws an error)."),sCr=l(),wt=a("div"),f(_A.$$.fragment),lCr=l(),abe=a("p"),iCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dCr=l(),tf=a("p"),cCr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),fCr=o("not"),mCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sbe=a("code"),gCr=o("from_pretrained()"),hCr=o("to load the model weights."),pCr=l(),lbe=a("p"),_Cr=o("Examples:"),uCr=l(),f(uA.$$.fragment),bCr=l(),ko=a("div"),f(bA.$$.fragment),vCr=l(),ibe=a("p"),TCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FCr=l(),Bn=a("p"),CCr=o("The model class to instantiate is selected based on the "),dbe=a("code"),MCr=o("model_type"),ECr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),yCr=o("pretrained_model_name_or_path"),wCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),ACr=o("pretrained_model_name_or_path"),LCr=o(":"),BCr=l(),Fe=a("ul"),SC=a("li"),mbe=a("strong"),xCr=o("albert"),kCr=o(" \u2014 "),VX=a("a"),RCr=o("FlaxAlbertForSequenceClassification"),SCr=o(" (ALBERT model)"),PCr=l(),PC=a("li"),gbe=a("strong"),$Cr=o("bart"),ICr=o(" \u2014 "),zX=a("a"),DCr=o("FlaxBartForSequenceClassification"),jCr=o(" (BART model)"),NCr=l(),$C=a("li"),hbe=a("strong"),qCr=o("bert"),GCr=o(" \u2014 "),WX=a("a"),OCr=o("FlaxBertForSequenceClassification"),XCr=o(" (BERT model)"),VCr=l(),IC=a("li"),pbe=a("strong"),zCr=o("big_bird"),WCr=o(" \u2014 "),QX=a("a"),QCr=o("FlaxBigBirdForSequenceClassification"),HCr=o(" (BigBird model)"),UCr=l(),DC=a("li"),_be=a("strong"),JCr=o("distilbert"),YCr=o(" \u2014 "),HX=a("a"),KCr=o("FlaxDistilBertForSequenceClassification"),ZCr=o(" (DistilBERT model)"),e4r=l(),jC=a("li"),ube=a("strong"),o4r=o("electra"),r4r=o(" \u2014 "),UX=a("a"),t4r=o("FlaxElectraForSequenceClassification"),a4r=o(" (ELECTRA model)"),n4r=l(),NC=a("li"),bbe=a("strong"),s4r=o("mbart"),l4r=o(" \u2014 "),JX=a("a"),i4r=o("FlaxMBartForSequenceClassification"),d4r=o(" (mBART model)"),c4r=l(),qC=a("li"),vbe=a("strong"),f4r=o("roberta"),m4r=o(" \u2014 "),YX=a("a"),g4r=o("FlaxRobertaForSequenceClassification"),h4r=o(" (RoBERTa model)"),p4r=l(),GC=a("li"),Tbe=a("strong"),_4r=o("roformer"),u4r=o(" \u2014 "),KX=a("a"),b4r=o("FlaxRoFormerForSequenceClassification"),v4r=o(" (RoFormer model)"),T4r=l(),Fbe=a("p"),F4r=o("Examples:"),C4r=l(),f(vA.$$.fragment),axe=l(),af=a("h2"),OC=a("a"),Cbe=a("span"),f(TA.$$.fragment),M4r=l(),Mbe=a("span"),E4r=o("FlaxAutoModelForQuestionAnswering"),nxe=l(),Pr=a("div"),f(FA.$$.fragment),y4r=l(),nf=a("p"),w4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ebe=a("code"),A4r=o("from_pretrained()"),L4r=o("class method or the "),ybe=a("code"),B4r=o("from_config()"),x4r=o(`class
method.`),k4r=l(),CA=a("p"),R4r=o("This class cannot be instantiated directly using "),wbe=a("code"),S4r=o("__init__()"),P4r=o(" (throws an error)."),$4r=l(),At=a("div"),f(MA.$$.fragment),I4r=l(),Abe=a("p"),D4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),j4r=l(),sf=a("p"),N4r=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),q4r=o("not"),G4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bbe=a("code"),O4r=o("from_pretrained()"),X4r=o("to load the model weights."),V4r=l(),xbe=a("p"),z4r=o("Examples:"),W4r=l(),f(EA.$$.fragment),Q4r=l(),Ro=a("div"),f(yA.$$.fragment),H4r=l(),kbe=a("p"),U4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),J4r=l(),xn=a("p"),Y4r=o("The model class to instantiate is selected based on the "),Rbe=a("code"),K4r=o("model_type"),Z4r=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),Ce=a("ul"),XC=a("li"),$be=a("strong"),nMr=o("albert"),sMr=o(" \u2014 "),ZX=a("a"),lMr=o("FlaxAlbertForQuestionAnswering"),iMr=o(" (ALBERT model)"),dMr=l(),VC=a("li"),Ibe=a("strong"),cMr=o("bart"),fMr=o(" \u2014 "),eV=a("a"),mMr=o("FlaxBartForQuestionAnswering"),gMr=o(" (BART model)"),hMr=l(),zC=a("li"),Dbe=a("strong"),pMr=o("bert"),_Mr=o(" \u2014 "),oV=a("a"),uMr=o("FlaxBertForQuestionAnswering"),bMr=o(" (BERT model)"),vMr=l(),WC=a("li"),jbe=a("strong"),TMr=o("big_bird"),FMr=o(" \u2014 "),rV=a("a"),CMr=o("FlaxBigBirdForQuestionAnswering"),MMr=o(" (BigBird model)"),EMr=l(),QC=a("li"),Nbe=a("strong"),yMr=o("distilbert"),wMr=o(" \u2014 "),tV=a("a"),AMr=o("FlaxDistilBertForQuestionAnswering"),LMr=o(" (DistilBERT model)"),BMr=l(),HC=a("li"),qbe=a("strong"),xMr=o("electra"),kMr=o(" \u2014 "),aV=a("a"),RMr=o("FlaxElectraForQuestionAnswering"),SMr=o(" (ELECTRA model)"),PMr=l(),UC=a("li"),Gbe=a("strong"),$Mr=o("mbart"),IMr=o(" \u2014 "),nV=a("a"),DMr=o("FlaxMBartForQuestionAnswering"),jMr=o(" (mBART model)"),NMr=l(),JC=a("li"),Obe=a("strong"),qMr=o("roberta"),GMr=o(" \u2014 "),sV=a("a"),OMr=o("FlaxRobertaForQuestionAnswering"),XMr=o(" (RoBERTa model)"),VMr=l(),YC=a("li"),Xbe=a("strong"),zMr=o("roformer"),WMr=o(" \u2014 "),lV=a("a"),QMr=o("FlaxRoFormerForQuestionAnswering"),HMr=o(" (RoFormer model)"),UMr=l(),Vbe=a("p"),JMr=o("Examples:"),YMr=l(),f(wA.$$.fragment),sxe=l(),lf=a("h2"),KC=a("a"),zbe=a("span"),f(AA.$$.fragment),KMr=l(),Wbe=a("span"),ZMr=o("FlaxAutoModelForTokenClassification"),lxe=l(),$r=a("div"),f(LA.$$.fragment),eEr=l(),df=a("p"),oEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qbe=a("code"),rEr=o("from_pretrained()"),tEr=o("class method or the "),Hbe=a("code"),aEr=o("from_config()"),nEr=o(`class
method.`),sEr=l(),BA=a("p"),lEr=o("This class cannot be instantiated directly using "),Ube=a("code"),iEr=o("__init__()"),dEr=o(" (throws an error)."),cEr=l(),Lt=a("div"),f(xA.$$.fragment),fEr=l(),Jbe=a("p"),mEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gEr=l(),cf=a("p"),hEr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),pEr=o("not"),_Er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kbe=a("code"),uEr=o("from_pretrained()"),bEr=o("to load the model weights."),vEr=l(),Zbe=a("p"),TEr=o("Examples:"),FEr=l(),f(kA.$$.fragment),CEr=l(),So=a("div"),f(RA.$$.fragment),MEr=l(),e2e=a("p"),EEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yEr=l(),kn=a("p"),wEr=o("The model class to instantiate is selected based on the "),o2e=a("code"),AEr=o("model_type"),LEr=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),BEr=o("pretrained_model_name_or_path"),xEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),kEr=o("pretrained_model_name_or_path"),REr=o(":"),SEr=l(),so=a("ul"),ZC=a("li"),a2e=a("strong"),PEr=o("albert"),$Er=o(" \u2014 "),iV=a("a"),IEr=o("FlaxAlbertForTokenClassification"),DEr=o(" (ALBERT model)"),jEr=l(),e4=a("li"),n2e=a("strong"),NEr=o("bert"),qEr=o(" \u2014 "),dV=a("a"),GEr=o("FlaxBertForTokenClassification"),OEr=o(" (BERT model)"),XEr=l(),o4=a("li"),s2e=a("strong"),VEr=o("big_bird"),zEr=o(" \u2014 "),cV=a("a"),WEr=o("FlaxBigBirdForTokenClassification"),QEr=o(" (BigBird model)"),HEr=l(),r4=a("li"),l2e=a("strong"),UEr=o("distilbert"),JEr=o(" \u2014 "),fV=a("a"),YEr=o("FlaxDistilBertForTokenClassification"),KEr=o(" (DistilBERT model)"),ZEr=l(),t4=a("li"),i2e=a("strong"),e3r=o("electra"),o3r=o(" \u2014 "),mV=a("a"),r3r=o("FlaxElectraForTokenClassification"),t3r=o(" (ELECTRA model)"),a3r=l(),a4=a("li"),d2e=a("strong"),n3r=o("roberta"),s3r=o(" \u2014 "),gV=a("a"),l3r=o("FlaxRobertaForTokenClassification"),i3r=o(" (RoBERTa model)"),d3r=l(),n4=a("li"),c2e=a("strong"),c3r=o("roformer"),f3r=o(" \u2014 "),hV=a("a"),m3r=o("FlaxRoFormerForTokenClassification"),g3r=o(" (RoFormer model)"),h3r=l(),f2e=a("p"),p3r=o("Examples:"),_3r=l(),f(SA.$$.fragment),ixe=l(),ff=a("h2"),s4=a("a"),m2e=a("span"),f(PA.$$.fragment),u3r=l(),g2e=a("span"),b3r=o("FlaxAutoModelForMultipleChoice"),dxe=l(),Ir=a("div"),f($A.$$.fragment),v3r=l(),mf=a("p"),T3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),h2e=a("code"),F3r=o("from_pretrained()"),C3r=o("class method or the "),p2e=a("code"),M3r=o("from_config()"),E3r=o(`class
method.`),y3r=l(),IA=a("p"),w3r=o("This class cannot be instantiated directly using "),_2e=a("code"),A3r=o("__init__()"),L3r=o(" (throws an error)."),B3r=l(),Bt=a("div"),f(DA.$$.fragment),x3r=l(),u2e=a("p"),k3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),R3r=l(),gf=a("p"),S3r=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),P3r=o("not"),$3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),v2e=a("code"),I3r=o("from_pretrained()"),D3r=o("to load the model weights."),j3r=l(),T2e=a("p"),N3r=o("Examples:"),q3r=l(),f(jA.$$.fragment),G3r=l(),Po=a("div"),f(NA.$$.fragment),O3r=l(),F2e=a("p"),X3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),V3r=l(),Rn=a("p"),z3r=o("The model class to instantiate is selected based on the "),C2e=a("code"),W3r=o("model_type"),Q3r=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),H3r=o("pretrained_model_name_or_path"),U3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),J3r=o("pretrained_model_name_or_path"),Y3r=o(":"),K3r=l(),lo=a("ul"),l4=a("li"),y2e=a("strong"),Z3r=o("albert"),eyr=o(" \u2014 "),pV=a("a"),oyr=o("FlaxAlbertForMultipleChoice"),ryr=o(" (ALBERT model)"),tyr=l(),i4=a("li"),w2e=a("strong"),ayr=o("bert"),nyr=o(" \u2014 "),_V=a("a"),syr=o("FlaxBertForMultipleChoice"),lyr=o(" (BERT model)"),iyr=l(),d4=a("li"),A2e=a("strong"),dyr=o("big_bird"),cyr=o(" \u2014 "),uV=a("a"),fyr=o("FlaxBigBirdForMultipleChoice"),myr=o(" (BigBird model)"),gyr=l(),c4=a("li"),L2e=a("strong"),hyr=o("distilbert"),pyr=o(" \u2014 "),bV=a("a"),_yr=o("FlaxDistilBertForMultipleChoice"),uyr=o(" (DistilBERT model)"),byr=l(),f4=a("li"),B2e=a("strong"),vyr=o("electra"),Tyr=o(" \u2014 "),vV=a("a"),Fyr=o("FlaxElectraForMultipleChoice"),Cyr=o(" (ELECTRA model)"),Myr=l(),m4=a("li"),x2e=a("strong"),Eyr=o("roberta"),yyr=o(" \u2014 "),TV=a("a"),wyr=o("FlaxRobertaForMultipleChoice"),Ayr=o(" (RoBERTa model)"),Lyr=l(),g4=a("li"),k2e=a("strong"),Byr=o("roformer"),xyr=o(" \u2014 "),FV=a("a"),kyr=o("FlaxRoFormerForMultipleChoice"),Ryr=o(" (RoFormer model)"),Syr=l(),R2e=a("p"),Pyr=o("Examples:"),$yr=l(),f(qA.$$.fragment),cxe=l(),hf=a("h2"),h4=a("a"),S2e=a("span"),f(GA.$$.fragment),Iyr=l(),P2e=a("span"),Dyr=o("FlaxAutoModelForNextSentencePrediction"),fxe=l(),Dr=a("div"),f(OA.$$.fragment),jyr=l(),pf=a("p"),Nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$2e=a("code"),qyr=o("from_pretrained()"),Gyr=o("class method or the "),I2e=a("code"),Oyr=o("from_config()"),Xyr=o(`class
method.`),Vyr=l(),XA=a("p"),zyr=o("This class cannot be instantiated directly using "),D2e=a("code"),Wyr=o("__init__()"),Qyr=o(" (throws an error)."),Hyr=l(),xt=a("div"),f(VA.$$.fragment),Uyr=l(),j2e=a("p"),Jyr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yyr=l(),_f=a("p"),Kyr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),Zyr=o("not"),ewr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q2e=a("code"),owr=o("from_pretrained()"),rwr=o("to load the model weights."),twr=l(),G2e=a("p"),awr=o("Examples:"),nwr=l(),f(zA.$$.fragment),swr=l(),$o=a("div"),f(WA.$$.fragment),lwr=l(),O2e=a("p"),iwr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dwr=l(),Sn=a("p"),cwr=o("The model class to instantiate is selected based on the "),X2e=a("code"),fwr=o("model_type"),mwr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),gwr=o("pretrained_model_name_or_path"),hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),pwr=o("pretrained_model_name_or_path"),_wr=o(":"),uwr=l(),W2e=a("ul"),p4=a("li"),Q2e=a("strong"),bwr=o("bert"),vwr=o(" \u2014 "),CV=a("a"),Twr=o("FlaxBertForNextSentencePrediction"),Fwr=o(" (BERT model)"),Cwr=l(),H2e=a("p"),Mwr=o("Examples:"),Ewr=l(),f(QA.$$.fragment),mxe=l(),uf=a("h2"),_4=a("a"),U2e=a("span"),f(HA.$$.fragment),ywr=l(),J2e=a("span"),wwr=o("FlaxAutoModelForImageClassification"),gxe=l(),jr=a("div"),f(UA.$$.fragment),Awr=l(),bf=a("p"),Lwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Y2e=a("code"),Bwr=o("from_pretrained()"),xwr=o("class method or the "),K2e=a("code"),kwr=o("from_config()"),Rwr=o(`class
method.`),Swr=l(),JA=a("p"),Pwr=o("This class cannot be instantiated directly using "),Z2e=a("code"),$wr=o("__init__()"),Iwr=o(" (throws an error)."),Dwr=l(),kt=a("div"),f(YA.$$.fragment),jwr=l(),eve=a("p"),Nwr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qwr=l(),vf=a("p"),Gwr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),Owr=o("not"),Xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rve=a("code"),Vwr=o("from_pretrained()"),zwr=o("to load the model weights."),Wwr=l(),tve=a("p"),Qwr=o("Examples:"),Hwr=l(),f(KA.$$.fragment),Uwr=l(),Io=a("div"),f(ZA.$$.fragment),Jwr=l(),ave=a("p"),Ywr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kwr=l(),Pn=a("p"),Zwr=o("The model class to instantiate is selected based on the "),nve=a("code"),e6r=o("model_type"),o6r=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),a6r=o("pretrained_model_name_or_path"),n6r=o(":"),s6r=l(),e0=a("ul"),u4=a("li"),ive=a("strong"),l6r=o("beit"),i6r=o(" \u2014 "),MV=a("a"),d6r=o("FlaxBeitForImageClassification"),c6r=o(" (BEiT model)"),f6r=l(),b4=a("li"),dve=a("strong"),m6r=o("vit"),g6r=o(" \u2014 "),EV=a("a"),h6r=o("FlaxViTForImageClassification"),p6r=o(" (ViT model)"),_6r=l(),cve=a("p"),u6r=o("Examples:"),b6r=l(),f(o0.$$.fragment),hxe=l(),Tf=a("h2"),v4=a("a"),fve=a("span"),f(r0.$$.fragment),v6r=l(),mve=a("span"),T6r=o("FlaxAutoModelForVision2Seq"),pxe=l(),Nr=a("div"),f(t0.$$.fragment),F6r=l(),Ff=a("p"),C6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gve=a("code"),M6r=o("from_pretrained()"),E6r=o("class method or the "),hve=a("code"),y6r=o("from_config()"),w6r=o(`class
method.`),A6r=l(),a0=a("p"),L6r=o("This class cannot be instantiated directly using "),pve=a("code"),B6r=o("__init__()"),x6r=o(" (throws an error)."),k6r=l(),Rt=a("div"),f(n0.$$.fragment),R6r=l(),_ve=a("p"),S6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),P6r=l(),Cf=a("p"),$6r=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),I6r=o("not"),D6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bve=a("code"),j6r=o("from_pretrained()"),N6r=o("to load the model weights."),q6r=l(),vve=a("p"),G6r=o("Examples:"),O6r=l(),f(s0.$$.fragment),X6r=l(),Do=a("div"),f(l0.$$.fragment),V6r=l(),Tve=a("p"),z6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W6r=l(),$n=a("p"),Q6r=o("The model class to instantiate is selected based on the "),Fve=a("code"),H6r=o("model_type"),U6r=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(":"),eAr=l(),Eve=a("ul"),T4=a("li"),yve=a("strong"),oAr=o("vision-encoder-decoder"),rAr=o(" \u2014 "),yV=a("a"),tAr=o("FlaxVisionEncoderDecoderModel"),aAr=o(" (Vision Encoder decoder model)"),nAr=l(),wve=a("p"),sAr=o("Examples:"),lAr=l(),f(i0.$$.fragment),this.h()},l(c){const u=z1t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Be=i(c),ie=n(c,"H1",{class:!0});var d0=s(ie);me=n(d0,"A",{id:!0,class:!0,href:!0});var Ave=s(me);no=n(Ave,"SPAN",{});var Lve=s(no);m(ce.$$.fragment,Lve),Lve.forEach(t),Ave.forEach(t),ue=i(d0),Go=n(d0,"SPAN",{});var dAr=s(Go);Li=r(dAr,"Auto Classes"),dAr.forEach(t),d0.forEach(t),Ef=i(c),sa=n(c,"P",{});var uxe=s(sa);Bi=r(uxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(uxe,"CODE",{});var cAr=s(xi);TM=r(cAr,"from_pretrained()"),cAr.forEach(t),yf=r(uxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),uxe.forEach(t),ye=i(c),io=n(c,"P",{});var F4=s(io);ki=r(F4,"Instantiating one of "),In=n(F4,"A",{href:!0});var fAr=s(In);FM=r(fAr,"AutoConfig"),fAr.forEach(t),Dn=r(F4,", "),jn=n(F4,"A",{href:!0});var mAr=s(jn);CM=r(mAr,"AutoModel"),mAr.forEach(t),Ri=r(F4,`, and
`),Nn=n(F4,"A",{href:!0});var gAr=s(Nn);MM=r(gAr,"AutoTokenizer"),gAr.forEach(t),Si=r(F4," will directly create a class of the relevant architecture. For instance"),F4.forEach(t),wf=i(c),m($a.$$.fragment,c),co=i(c),ge=n(c,"P",{});var bxe=s(ge);nL=r(bxe,"will create a model that is an instance of "),Pi=n(bxe,"A",{href:!0});var hAr=s(Pi);sL=r(hAr,"BertModel"),hAr.forEach(t),lL=r(bxe,"."),bxe.forEach(t),Oo=i(c),Ia=n(c,"P",{});var vxe=s(Ia);iL=r(vxe,"There is one class of "),Af=n(vxe,"CODE",{});var pAr=s(Af);dL=r(pAr,"AutoModel"),pAr.forEach(t),ARe=r(vxe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vxe.forEach(t),u8e=i(c),$i=n(c,"H2",{class:!0});var Txe=s($i);Lf=n(Txe,"A",{id:!0,class:!0,href:!0});var _Ar=s(Lf);_W=n(_Ar,"SPAN",{});var uAr=s(_W);m(EM.$$.fragment,uAr),uAr.forEach(t),_Ar.forEach(t),LRe=i(Txe),uW=n(Txe,"SPAN",{});var bAr=s(uW);BRe=r(bAr,"Extending the Auto Classes"),bAr.forEach(t),Txe.forEach(t),b8e=i(c),qn=n(c,"P",{});var wV=s(qn);xRe=r(wV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),bW=n(wV,"CODE",{});var vAr=s(bW);kRe=r(vAr,"NewModel"),vAr.forEach(t),RRe=r(wV,", make sure you have a "),vW=n(wV,"CODE",{});var TAr=s(vW);SRe=r(TAr,"NewModelConfig"),TAr.forEach(t),PRe=r(wV,` then you can add those to the auto
classes like this:`),wV.forEach(t),v8e=i(c),m(yM.$$.fragment,c),T8e=i(c),cL=n(c,"P",{});var FAr=s(cL);$Re=r(FAr,"You will then be able to use the auto classes like you would usually do!"),FAr.forEach(t),F8e=i(c),m(Bf.$$.fragment,c),C8e=i(c),Ii=n(c,"H2",{class:!0});var Fxe=s(Ii);xf=n(Fxe,"A",{id:!0,class:!0,href:!0});var CAr=s(xf);TW=n(CAr,"SPAN",{});var MAr=s(TW);m(wM.$$.fragment,MAr),MAr.forEach(t),CAr.forEach(t),IRe=i(Fxe),FW=n(Fxe,"SPAN",{});var EAr=s(FW);DRe=r(EAr,"AutoConfig"),EAr.forEach(t),Fxe.forEach(t),M8e=i(c),Xo=n(c,"DIV",{class:!0});var Is=s(Xo);m(AM.$$.fragment,Is),jRe=i(Is),LM=n(Is,"P",{});var Cxe=s(LM);NRe=r(Cxe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fL=n(Cxe,"A",{href:!0});var yAr=s(fL);qRe=r(yAr,"from_pretrained()"),yAr.forEach(t),GRe=r(Cxe," class method."),Cxe.forEach(t),ORe=i(Is),BM=n(Is,"P",{});var Mxe=s(BM);XRe=r(Mxe,"This class cannot be instantiated directly using "),CW=n(Mxe,"CODE",{});var wAr=s(CW);VRe=r(wAr,"__init__()"),wAr.forEach(t),zRe=r(Mxe," (throws an error)."),Mxe.forEach(t),WRe=i(Is),fo=n(Is,"DIV",{class:!0});var ia=s(fo);m(xM.$$.fragment,ia),QRe=i(ia),MW=n(ia,"P",{});var AAr=s(MW);HRe=r(AAr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),AAr.forEach(t),URe=i(ia),Di=n(ia,"P",{});var AV=s(Di);JRe=r(AV,"The configuration class to instantiate is selected based on the "),EW=n(AV,"CODE",{});var LAr=s(EW);YRe=r(LAr,"model_type"),LAr.forEach(t),KRe=r(AV,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),yW=n(AV,"CODE",{});var BAr=s(yW);ZRe=r(BAr,"pretrained_model_name_or_path"),BAr.forEach(t),eSe=r(AV,":"),AV.forEach(t),oSe=i(ia),v=n(ia,"UL",{});var T=s(v);kf=n(T,"LI",{});var Bve=s(kf);wW=n(Bve,"STRONG",{});var xAr=s(wW);rSe=r(xAr,"albert"),xAr.forEach(t),tSe=r(Bve," \u2014 "),mL=n(Bve,"A",{href:!0});var kAr=s(mL);aSe=r(kAr,"AlbertConfig"),kAr.forEach(t),nSe=r(Bve," (ALBERT model)"),Bve.forEach(t),sSe=i(T),Rf=n(T,"LI",{});var xve=s(Rf);AW=n(xve,"STRONG",{});var RAr=s(AW);lSe=r(RAr,"bart"),RAr.forEach(t),iSe=r(xve," \u2014 "),gL=n(xve,"A",{href:!0});var SAr=s(gL);dSe=r(SAr,"BartConfig"),SAr.forEach(t),cSe=r(xve," (BART model)"),xve.forEach(t),fSe=i(T),Sf=n(T,"LI",{});var kve=s(Sf);LW=n(kve,"STRONG",{});var PAr=s(LW);mSe=r(PAr,"beit"),PAr.forEach(t),gSe=r(kve," \u2014 "),hL=n(kve,"A",{href:!0});var $Ar=s(hL);hSe=r($Ar,"BeitConfig"),$Ar.forEach(t),pSe=r(kve," (BEiT model)"),kve.forEach(t),_Se=i(T),Pf=n(T,"LI",{});var Rve=s(Pf);BW=n(Rve,"STRONG",{});var IAr=s(BW);uSe=r(IAr,"bert"),IAr.forEach(t),bSe=r(Rve," \u2014 "),pL=n(Rve,"A",{href:!0});var DAr=s(pL);vSe=r(DAr,"BertConfig"),DAr.forEach(t),TSe=r(Rve," (BERT model)"),Rve.forEach(t),FSe=i(T),$f=n(T,"LI",{});var Sve=s($f);xW=n(Sve,"STRONG",{});var jAr=s(xW);CSe=r(jAr,"bert-generation"),jAr.forEach(t),MSe=r(Sve," \u2014 "),_L=n(Sve,"A",{href:!0});var NAr=s(_L);ESe=r(NAr,"BertGenerationConfig"),NAr.forEach(t),ySe=r(Sve," (Bert Generation model)"),Sve.forEach(t),wSe=i(T),If=n(T,"LI",{});var Pve=s(If);kW=n(Pve,"STRONG",{});var qAr=s(kW);ASe=r(qAr,"big_bird"),qAr.forEach(t),LSe=r(Pve," \u2014 "),uL=n(Pve,"A",{href:!0});var GAr=s(uL);BSe=r(GAr,"BigBirdConfig"),GAr.forEach(t),xSe=r(Pve," (BigBird model)"),Pve.forEach(t),kSe=i(T),Df=n(T,"LI",{});var $ve=s(Df);RW=n($ve,"STRONG",{});var OAr=s(RW);RSe=r(OAr,"bigbird_pegasus"),OAr.forEach(t),SSe=r($ve," \u2014 "),bL=n($ve,"A",{href:!0});var XAr=s(bL);PSe=r(XAr,"BigBirdPegasusConfig"),XAr.forEach(t),$Se=r($ve," (BigBirdPegasus model)"),$ve.forEach(t),ISe=i(T),jf=n(T,"LI",{});var Ive=s(jf);SW=n(Ive,"STRONG",{});var VAr=s(SW);DSe=r(VAr,"blenderbot"),VAr.forEach(t),jSe=r(Ive," \u2014 "),vL=n(Ive,"A",{href:!0});var zAr=s(vL);NSe=r(zAr,"BlenderbotConfig"),zAr.forEach(t),qSe=r(Ive," (Blenderbot model)"),Ive.forEach(t),GSe=i(T),Nf=n(T,"LI",{});var Dve=s(Nf);PW=n(Dve,"STRONG",{});var WAr=s(PW);OSe=r(WAr,"blenderbot-small"),WAr.forEach(t),XSe=r(Dve," \u2014 "),TL=n(Dve,"A",{href:!0});var QAr=s(TL);VSe=r(QAr,"BlenderbotSmallConfig"),QAr.forEach(t),zSe=r(Dve," (BlenderbotSmall model)"),Dve.forEach(t),WSe=i(T),qf=n(T,"LI",{});var jve=s(qf);$W=n(jve,"STRONG",{});var HAr=s($W);QSe=r(HAr,"camembert"),HAr.forEach(t),HSe=r(jve," \u2014 "),FL=n(jve,"A",{href:!0});var UAr=s(FL);USe=r(UAr,"CamembertConfig"),UAr.forEach(t),JSe=r(jve," (CamemBERT model)"),jve.forEach(t),YSe=i(T),Gf=n(T,"LI",{});var Nve=s(Gf);IW=n(Nve,"STRONG",{});var JAr=s(IW);KSe=r(JAr,"canine"),JAr.forEach(t),ZSe=r(Nve," \u2014 "),CL=n(Nve,"A",{href:!0});var YAr=s(CL);ePe=r(YAr,"CanineConfig"),YAr.forEach(t),oPe=r(Nve," (Canine model)"),Nve.forEach(t),rPe=i(T),Of=n(T,"LI",{});var qve=s(Of);DW=n(qve,"STRONG",{});var KAr=s(DW);tPe=r(KAr,"clip"),KAr.forEach(t),aPe=r(qve," \u2014 "),ML=n(qve,"A",{href:!0});var ZAr=s(ML);nPe=r(ZAr,"CLIPConfig"),ZAr.forEach(t),sPe=r(qve," (CLIP model)"),qve.forEach(t),lPe=i(T),Xf=n(T,"LI",{});var Gve=s(Xf);jW=n(Gve,"STRONG",{});var e0r=s(jW);iPe=r(e0r,"convbert"),e0r.forEach(t),dPe=r(Gve," \u2014 "),EL=n(Gve,"A",{href:!0});var o0r=s(EL);cPe=r(o0r,"ConvBertConfig"),o0r.forEach(t),fPe=r(Gve," (ConvBERT model)"),Gve.forEach(t),mPe=i(T),Vf=n(T,"LI",{});var Ove=s(Vf);NW=n(Ove,"STRONG",{});var r0r=s(NW);gPe=r(r0r,"convnext"),r0r.forEach(t),hPe=r(Ove," \u2014 "),yL=n(Ove,"A",{href:!0});var t0r=s(yL);pPe=r(t0r,"ConvNextConfig"),t0r.forEach(t),_Pe=r(Ove," (ConvNext model)"),Ove.forEach(t),uPe=i(T),zf=n(T,"LI",{});var Xve=s(zf);qW=n(Xve,"STRONG",{});var a0r=s(qW);bPe=r(a0r,"ctrl"),a0r.forEach(t),vPe=r(Xve," \u2014 "),wL=n(Xve,"A",{href:!0});var n0r=s(wL);TPe=r(n0r,"CTRLConfig"),n0r.forEach(t),FPe=r(Xve," (CTRL model)"),Xve.forEach(t),CPe=i(T),Wf=n(T,"LI",{});var Vve=s(Wf);GW=n(Vve,"STRONG",{});var s0r=s(GW);MPe=r(s0r,"data2vec-audio"),s0r.forEach(t),EPe=r(Vve," \u2014 "),AL=n(Vve,"A",{href:!0});var l0r=s(AL);yPe=r(l0r,"Data2VecAudioConfig"),l0r.forEach(t),wPe=r(Vve," (Data2VecAudio model)"),Vve.forEach(t),APe=i(T),Qf=n(T,"LI",{});var zve=s(Qf);OW=n(zve,"STRONG",{});var i0r=s(OW);LPe=r(i0r,"data2vec-text"),i0r.forEach(t),BPe=r(zve," \u2014 "),LL=n(zve,"A",{href:!0});var d0r=s(LL);xPe=r(d0r,"Data2VecTextConfig"),d0r.forEach(t),kPe=r(zve," (Data2VecText model)"),zve.forEach(t),RPe=i(T),Hf=n(T,"LI",{});var Wve=s(Hf);XW=n(Wve,"STRONG",{});var c0r=s(XW);SPe=r(c0r,"deberta"),c0r.forEach(t),PPe=r(Wve," \u2014 "),BL=n(Wve,"A",{href:!0});var f0r=s(BL);$Pe=r(f0r,"DebertaConfig"),f0r.forEach(t),IPe=r(Wve," (DeBERTa model)"),Wve.forEach(t),DPe=i(T),Uf=n(T,"LI",{});var Qve=s(Uf);VW=n(Qve,"STRONG",{});var m0r=s(VW);jPe=r(m0r,"deberta-v2"),m0r.forEach(t),NPe=r(Qve," \u2014 "),xL=n(Qve,"A",{href:!0});var g0r=s(xL);qPe=r(g0r,"DebertaV2Config"),g0r.forEach(t),GPe=r(Qve," (DeBERTa-v2 model)"),Qve.forEach(t),OPe=i(T),Jf=n(T,"LI",{});var Hve=s(Jf);zW=n(Hve,"STRONG",{});var h0r=s(zW);XPe=r(h0r,"deit"),h0r.forEach(t),VPe=r(Hve," \u2014 "),kL=n(Hve,"A",{href:!0});var p0r=s(kL);zPe=r(p0r,"DeiTConfig"),p0r.forEach(t),WPe=r(Hve," (DeiT model)"),Hve.forEach(t),QPe=i(T),Yf=n(T,"LI",{});var Uve=s(Yf);WW=n(Uve,"STRONG",{});var _0r=s(WW);HPe=r(_0r,"detr"),_0r.forEach(t),UPe=r(Uve," \u2014 "),RL=n(Uve,"A",{href:!0});var u0r=s(RL);JPe=r(u0r,"DetrConfig"),u0r.forEach(t),YPe=r(Uve," (DETR model)"),Uve.forEach(t),KPe=i(T),Kf=n(T,"LI",{});var Jve=s(Kf);QW=n(Jve,"STRONG",{});var b0r=s(QW);ZPe=r(b0r,"distilbert"),b0r.forEach(t),e$e=r(Jve," \u2014 "),SL=n(Jve,"A",{href:!0});var v0r=s(SL);o$e=r(v0r,"DistilBertConfig"),v0r.forEach(t),r$e=r(Jve," (DistilBERT model)"),Jve.forEach(t),t$e=i(T),Zf=n(T,"LI",{});var Yve=s(Zf);HW=n(Yve,"STRONG",{});var T0r=s(HW);a$e=r(T0r,"dpr"),T0r.forEach(t),n$e=r(Yve," \u2014 "),PL=n(Yve,"A",{href:!0});var F0r=s(PL);s$e=r(F0r,"DPRConfig"),F0r.forEach(t),l$e=r(Yve," (DPR model)"),Yve.forEach(t),i$e=i(T),em=n(T,"LI",{});var Kve=s(em);UW=n(Kve,"STRONG",{});var C0r=s(UW);d$e=r(C0r,"electra"),C0r.forEach(t),c$e=r(Kve," \u2014 "),$L=n(Kve,"A",{href:!0});var M0r=s($L);f$e=r(M0r,"ElectraConfig"),M0r.forEach(t),m$e=r(Kve," (ELECTRA model)"),Kve.forEach(t),g$e=i(T),om=n(T,"LI",{});var Zve=s(om);JW=n(Zve,"STRONG",{});var E0r=s(JW);h$e=r(E0r,"encoder-decoder"),E0r.forEach(t),p$e=r(Zve," \u2014 "),IL=n(Zve,"A",{href:!0});var y0r=s(IL);_$e=r(y0r,"EncoderDecoderConfig"),y0r.forEach(t),u$e=r(Zve," (Encoder decoder model)"),Zve.forEach(t),b$e=i(T),rm=n(T,"LI",{});var eTe=s(rm);YW=n(eTe,"STRONG",{});var w0r=s(YW);v$e=r(w0r,"flaubert"),w0r.forEach(t),T$e=r(eTe," \u2014 "),DL=n(eTe,"A",{href:!0});var A0r=s(DL);F$e=r(A0r,"FlaubertConfig"),A0r.forEach(t),C$e=r(eTe," (FlauBERT model)"),eTe.forEach(t),M$e=i(T),tm=n(T,"LI",{});var oTe=s(tm);KW=n(oTe,"STRONG",{});var L0r=s(KW);E$e=r(L0r,"fnet"),L0r.forEach(t),y$e=r(oTe," \u2014 "),jL=n(oTe,"A",{href:!0});var B0r=s(jL);w$e=r(B0r,"FNetConfig"),B0r.forEach(t),A$e=r(oTe," (FNet model)"),oTe.forEach(t),L$e=i(T),am=n(T,"LI",{});var rTe=s(am);ZW=n(rTe,"STRONG",{});var x0r=s(ZW);B$e=r(x0r,"fsmt"),x0r.forEach(t),x$e=r(rTe," \u2014 "),NL=n(rTe,"A",{href:!0});var k0r=s(NL);k$e=r(k0r,"FSMTConfig"),k0r.forEach(t),R$e=r(rTe," (FairSeq Machine-Translation model)"),rTe.forEach(t),S$e=i(T),nm=n(T,"LI",{});var tTe=s(nm);eQ=n(tTe,"STRONG",{});var R0r=s(eQ);P$e=r(R0r,"funnel"),R0r.forEach(t),$$e=r(tTe," \u2014 "),qL=n(tTe,"A",{href:!0});var S0r=s(qL);I$e=r(S0r,"FunnelConfig"),S0r.forEach(t),D$e=r(tTe," (Funnel Transformer model)"),tTe.forEach(t),j$e=i(T),sm=n(T,"LI",{});var aTe=s(sm);oQ=n(aTe,"STRONG",{});var P0r=s(oQ);N$e=r(P0r,"gpt2"),P0r.forEach(t),q$e=r(aTe," \u2014 "),GL=n(aTe,"A",{href:!0});var $0r=s(GL);G$e=r($0r,"GPT2Config"),$0r.forEach(t),O$e=r(aTe," (OpenAI GPT-2 model)"),aTe.forEach(t),X$e=i(T),lm=n(T,"LI",{});var nTe=s(lm);rQ=n(nTe,"STRONG",{});var I0r=s(rQ);V$e=r(I0r,"gpt_neo"),I0r.forEach(t),z$e=r(nTe," \u2014 "),OL=n(nTe,"A",{href:!0});var D0r=s(OL);W$e=r(D0r,"GPTNeoConfig"),D0r.forEach(t),Q$e=r(nTe," (GPT Neo model)"),nTe.forEach(t),H$e=i(T),im=n(T,"LI",{});var sTe=s(im);tQ=n(sTe,"STRONG",{});var j0r=s(tQ);U$e=r(j0r,"gptj"),j0r.forEach(t),J$e=r(sTe," \u2014 "),XL=n(sTe,"A",{href:!0});var N0r=s(XL);Y$e=r(N0r,"GPTJConfig"),N0r.forEach(t),K$e=r(sTe," (GPT-J model)"),sTe.forEach(t),Z$e=i(T),dm=n(T,"LI",{});var lTe=s(dm);aQ=n(lTe,"STRONG",{});var q0r=s(aQ);eIe=r(q0r,"hubert"),q0r.forEach(t),oIe=r(lTe," \u2014 "),VL=n(lTe,"A",{href:!0});var G0r=s(VL);rIe=r(G0r,"HubertConfig"),G0r.forEach(t),tIe=r(lTe," (Hubert model)"),lTe.forEach(t),aIe=i(T),cm=n(T,"LI",{});var iTe=s(cm);nQ=n(iTe,"STRONG",{});var O0r=s(nQ);nIe=r(O0r,"ibert"),O0r.forEach(t),sIe=r(iTe," \u2014 "),zL=n(iTe,"A",{href:!0});var X0r=s(zL);lIe=r(X0r,"IBertConfig"),X0r.forEach(t),iIe=r(iTe," (I-BERT model)"),iTe.forEach(t),dIe=i(T),fm=n(T,"LI",{});var dTe=s(fm);sQ=n(dTe,"STRONG",{});var V0r=s(sQ);cIe=r(V0r,"imagegpt"),V0r.forEach(t),fIe=r(dTe," \u2014 "),WL=n(dTe,"A",{href:!0});var z0r=s(WL);mIe=r(z0r,"ImageGPTConfig"),z0r.forEach(t),gIe=r(dTe," (ImageGPT model)"),dTe.forEach(t),hIe=i(T),mm=n(T,"LI",{});var cTe=s(mm);lQ=n(cTe,"STRONG",{});var W0r=s(lQ);pIe=r(W0r,"layoutlm"),W0r.forEach(t),_Ie=r(cTe," \u2014 "),QL=n(cTe,"A",{href:!0});var Q0r=s(QL);uIe=r(Q0r,"LayoutLMConfig"),Q0r.forEach(t),bIe=r(cTe," (LayoutLM model)"),cTe.forEach(t),vIe=i(T),gm=n(T,"LI",{});var fTe=s(gm);iQ=n(fTe,"STRONG",{});var H0r=s(iQ);TIe=r(H0r,"layoutlmv2"),H0r.forEach(t),FIe=r(fTe," \u2014 "),HL=n(fTe,"A",{href:!0});var U0r=s(HL);CIe=r(U0r,"LayoutLMv2Config"),U0r.forEach(t),MIe=r(fTe," (LayoutLMv2 model)"),fTe.forEach(t),EIe=i(T),hm=n(T,"LI",{});var mTe=s(hm);dQ=n(mTe,"STRONG",{});var J0r=s(dQ);yIe=r(J0r,"led"),J0r.forEach(t),wIe=r(mTe," \u2014 "),UL=n(mTe,"A",{href:!0});var Y0r=s(UL);AIe=r(Y0r,"LEDConfig"),Y0r.forEach(t),LIe=r(mTe," (LED model)"),mTe.forEach(t),BIe=i(T),pm=n(T,"LI",{});var gTe=s(pm);cQ=n(gTe,"STRONG",{});var K0r=s(cQ);xIe=r(K0r,"longformer"),K0r.forEach(t),kIe=r(gTe," \u2014 "),JL=n(gTe,"A",{href:!0});var Z0r=s(JL);RIe=r(Z0r,"LongformerConfig"),Z0r.forEach(t),SIe=r(gTe," (Longformer model)"),gTe.forEach(t),PIe=i(T),_m=n(T,"LI",{});var hTe=s(_m);fQ=n(hTe,"STRONG",{});var eLr=s(fQ);$Ie=r(eLr,"luke"),eLr.forEach(t),IIe=r(hTe," \u2014 "),YL=n(hTe,"A",{href:!0});var oLr=s(YL);DIe=r(oLr,"LukeConfig"),oLr.forEach(t),jIe=r(hTe," (LUKE model)"),hTe.forEach(t),NIe=i(T),um=n(T,"LI",{});var pTe=s(um);mQ=n(pTe,"STRONG",{});var rLr=s(mQ);qIe=r(rLr,"lxmert"),rLr.forEach(t),GIe=r(pTe," \u2014 "),KL=n(pTe,"A",{href:!0});var tLr=s(KL);OIe=r(tLr,"LxmertConfig"),tLr.forEach(t),XIe=r(pTe," (LXMERT model)"),pTe.forEach(t),VIe=i(T),bm=n(T,"LI",{});var _Te=s(bm);gQ=n(_Te,"STRONG",{});var aLr=s(gQ);zIe=r(aLr,"m2m_100"),aLr.forEach(t),WIe=r(_Te," \u2014 "),ZL=n(_Te,"A",{href:!0});var nLr=s(ZL);QIe=r(nLr,"M2M100Config"),nLr.forEach(t),HIe=r(_Te," (M2M100 model)"),_Te.forEach(t),UIe=i(T),vm=n(T,"LI",{});var uTe=s(vm);hQ=n(uTe,"STRONG",{});var sLr=s(hQ);JIe=r(sLr,"marian"),sLr.forEach(t),YIe=r(uTe," \u2014 "),e8=n(uTe,"A",{href:!0});var lLr=s(e8);KIe=r(lLr,"MarianConfig"),lLr.forEach(t),ZIe=r(uTe," (Marian model)"),uTe.forEach(t),eDe=i(T),Tm=n(T,"LI",{});var bTe=s(Tm);pQ=n(bTe,"STRONG",{});var iLr=s(pQ);oDe=r(iLr,"mbart"),iLr.forEach(t),rDe=r(bTe," \u2014 "),o8=n(bTe,"A",{href:!0});var dLr=s(o8);tDe=r(dLr,"MBartConfig"),dLr.forEach(t),aDe=r(bTe," (mBART model)"),bTe.forEach(t),nDe=i(T),Fm=n(T,"LI",{});var vTe=s(Fm);_Q=n(vTe,"STRONG",{});var cLr=s(_Q);sDe=r(cLr,"megatron-bert"),cLr.forEach(t),lDe=r(vTe," \u2014 "),r8=n(vTe,"A",{href:!0});var fLr=s(r8);iDe=r(fLr,"MegatronBertConfig"),fLr.forEach(t),dDe=r(vTe," (MegatronBert model)"),vTe.forEach(t),cDe=i(T),Cm=n(T,"LI",{});var TTe=s(Cm);uQ=n(TTe,"STRONG",{});var mLr=s(uQ);fDe=r(mLr,"mobilebert"),mLr.forEach(t),mDe=r(TTe," \u2014 "),t8=n(TTe,"A",{href:!0});var gLr=s(t8);gDe=r(gLr,"MobileBertConfig"),gLr.forEach(t),hDe=r(TTe," (MobileBERT model)"),TTe.forEach(t),pDe=i(T),Mm=n(T,"LI",{});var FTe=s(Mm);bQ=n(FTe,"STRONG",{});var hLr=s(bQ);_De=r(hLr,"mpnet"),hLr.forEach(t),uDe=r(FTe," \u2014 "),a8=n(FTe,"A",{href:!0});var pLr=s(a8);bDe=r(pLr,"MPNetConfig"),pLr.forEach(t),vDe=r(FTe," (MPNet model)"),FTe.forEach(t),TDe=i(T),Em=n(T,"LI",{});var CTe=s(Em);vQ=n(CTe,"STRONG",{});var _Lr=s(vQ);FDe=r(_Lr,"mt5"),_Lr.forEach(t),CDe=r(CTe," \u2014 "),n8=n(CTe,"A",{href:!0});var uLr=s(n8);MDe=r(uLr,"MT5Config"),uLr.forEach(t),EDe=r(CTe," (mT5 model)"),CTe.forEach(t),yDe=i(T),ym=n(T,"LI",{});var MTe=s(ym);TQ=n(MTe,"STRONG",{});var bLr=s(TQ);wDe=r(bLr,"nystromformer"),bLr.forEach(t),ADe=r(MTe," \u2014 "),s8=n(MTe,"A",{href:!0});var vLr=s(s8);LDe=r(vLr,"NystromformerConfig"),vLr.forEach(t),BDe=r(MTe," (Nystromformer model)"),MTe.forEach(t),xDe=i(T),wm=n(T,"LI",{});var ETe=s(wm);FQ=n(ETe,"STRONG",{});var TLr=s(FQ);kDe=r(TLr,"openai-gpt"),TLr.forEach(t),RDe=r(ETe," \u2014 "),l8=n(ETe,"A",{href:!0});var FLr=s(l8);SDe=r(FLr,"OpenAIGPTConfig"),FLr.forEach(t),PDe=r(ETe," (OpenAI GPT model)"),ETe.forEach(t),$De=i(T),Am=n(T,"LI",{});var yTe=s(Am);CQ=n(yTe,"STRONG",{});var CLr=s(CQ);IDe=r(CLr,"pegasus"),CLr.forEach(t),DDe=r(yTe," \u2014 "),i8=n(yTe,"A",{href:!0});var MLr=s(i8);jDe=r(MLr,"PegasusConfig"),MLr.forEach(t),NDe=r(yTe," (Pegasus model)"),yTe.forEach(t),qDe=i(T),Lm=n(T,"LI",{});var wTe=s(Lm);MQ=n(wTe,"STRONG",{});var ELr=s(MQ);GDe=r(ELr,"perceiver"),ELr.forEach(t),ODe=r(wTe," \u2014 "),d8=n(wTe,"A",{href:!0});var yLr=s(d8);XDe=r(yLr,"PerceiverConfig"),yLr.forEach(t),VDe=r(wTe," (Perceiver model)"),wTe.forEach(t),zDe=i(T),Bm=n(T,"LI",{});var ATe=s(Bm);EQ=n(ATe,"STRONG",{});var wLr=s(EQ);WDe=r(wLr,"plbart"),wLr.forEach(t),QDe=r(ATe," \u2014 "),c8=n(ATe,"A",{href:!0});var ALr=s(c8);HDe=r(ALr,"PLBartConfig"),ALr.forEach(t),UDe=r(ATe," (PLBart model)"),ATe.forEach(t),JDe=i(T),xm=n(T,"LI",{});var LTe=s(xm);yQ=n(LTe,"STRONG",{});var LLr=s(yQ);YDe=r(LLr,"poolformer"),LLr.forEach(t),KDe=r(LTe," \u2014 "),f8=n(LTe,"A",{href:!0});var BLr=s(f8);ZDe=r(BLr,"PoolFormerConfig"),BLr.forEach(t),eje=r(LTe," (PoolFormer model)"),LTe.forEach(t),oje=i(T),km=n(T,"LI",{});var BTe=s(km);wQ=n(BTe,"STRONG",{});var xLr=s(wQ);rje=r(xLr,"prophetnet"),xLr.forEach(t),tje=r(BTe," \u2014 "),m8=n(BTe,"A",{href:!0});var kLr=s(m8);aje=r(kLr,"ProphetNetConfig"),kLr.forEach(t),nje=r(BTe," (ProphetNet model)"),BTe.forEach(t),sje=i(T),Rm=n(T,"LI",{});var xTe=s(Rm);AQ=n(xTe,"STRONG",{});var RLr=s(AQ);lje=r(RLr,"qdqbert"),RLr.forEach(t),ije=r(xTe," \u2014 "),g8=n(xTe,"A",{href:!0});var SLr=s(g8);dje=r(SLr,"QDQBertConfig"),SLr.forEach(t),cje=r(xTe," (QDQBert model)"),xTe.forEach(t),fje=i(T),Sm=n(T,"LI",{});var kTe=s(Sm);LQ=n(kTe,"STRONG",{});var PLr=s(LQ);mje=r(PLr,"rag"),PLr.forEach(t),gje=r(kTe," \u2014 "),h8=n(kTe,"A",{href:!0});var $Lr=s(h8);hje=r($Lr,"RagConfig"),$Lr.forEach(t),pje=r(kTe," (RAG model)"),kTe.forEach(t),_je=i(T),Pm=n(T,"LI",{});var RTe=s(Pm);BQ=n(RTe,"STRONG",{});var ILr=s(BQ);uje=r(ILr,"realm"),ILr.forEach(t),bje=r(RTe," \u2014 "),p8=n(RTe,"A",{href:!0});var DLr=s(p8);vje=r(DLr,"RealmConfig"),DLr.forEach(t),Tje=r(RTe," (Realm model)"),RTe.forEach(t),Fje=i(T),$m=n(T,"LI",{});var STe=s($m);xQ=n(STe,"STRONG",{});var jLr=s(xQ);Cje=r(jLr,"reformer"),jLr.forEach(t),Mje=r(STe," \u2014 "),_8=n(STe,"A",{href:!0});var NLr=s(_8);Eje=r(NLr,"ReformerConfig"),NLr.forEach(t),yje=r(STe," (Reformer model)"),STe.forEach(t),wje=i(T),Im=n(T,"LI",{});var PTe=s(Im);kQ=n(PTe,"STRONG",{});var qLr=s(kQ);Aje=r(qLr,"rembert"),qLr.forEach(t),Lje=r(PTe," \u2014 "),u8=n(PTe,"A",{href:!0});var GLr=s(u8);Bje=r(GLr,"RemBertConfig"),GLr.forEach(t),xje=r(PTe," (RemBERT model)"),PTe.forEach(t),kje=i(T),Dm=n(T,"LI",{});var $Te=s(Dm);RQ=n($Te,"STRONG",{});var OLr=s(RQ);Rje=r(OLr,"retribert"),OLr.forEach(t),Sje=r($Te," \u2014 "),b8=n($Te,"A",{href:!0});var XLr=s(b8);Pje=r(XLr,"RetriBertConfig"),XLr.forEach(t),$je=r($Te," (RetriBERT model)"),$Te.forEach(t),Ije=i(T),jm=n(T,"LI",{});var ITe=s(jm);SQ=n(ITe,"STRONG",{});var VLr=s(SQ);Dje=r(VLr,"roberta"),VLr.forEach(t),jje=r(ITe," \u2014 "),v8=n(ITe,"A",{href:!0});var zLr=s(v8);Nje=r(zLr,"RobertaConfig"),zLr.forEach(t),qje=r(ITe," (RoBERTa model)"),ITe.forEach(t),Gje=i(T),Nm=n(T,"LI",{});var DTe=s(Nm);PQ=n(DTe,"STRONG",{});var WLr=s(PQ);Oje=r(WLr,"roformer"),WLr.forEach(t),Xje=r(DTe," \u2014 "),T8=n(DTe,"A",{href:!0});var QLr=s(T8);Vje=r(QLr,"RoFormerConfig"),QLr.forEach(t),zje=r(DTe," (RoFormer model)"),DTe.forEach(t),Wje=i(T),qm=n(T,"LI",{});var jTe=s(qm);$Q=n(jTe,"STRONG",{});var HLr=s($Q);Qje=r(HLr,"segformer"),HLr.forEach(t),Hje=r(jTe," \u2014 "),F8=n(jTe,"A",{href:!0});var ULr=s(F8);Uje=r(ULr,"SegformerConfig"),ULr.forEach(t),Jje=r(jTe," (SegFormer model)"),jTe.forEach(t),Yje=i(T),Gm=n(T,"LI",{});var NTe=s(Gm);IQ=n(NTe,"STRONG",{});var JLr=s(IQ);Kje=r(JLr,"sew"),JLr.forEach(t),Zje=r(NTe," \u2014 "),C8=n(NTe,"A",{href:!0});var YLr=s(C8);eNe=r(YLr,"SEWConfig"),YLr.forEach(t),oNe=r(NTe," (SEW model)"),NTe.forEach(t),rNe=i(T),Om=n(T,"LI",{});var qTe=s(Om);DQ=n(qTe,"STRONG",{});var KLr=s(DQ);tNe=r(KLr,"sew-d"),KLr.forEach(t),aNe=r(qTe," \u2014 "),M8=n(qTe,"A",{href:!0});var ZLr=s(M8);nNe=r(ZLr,"SEWDConfig"),ZLr.forEach(t),sNe=r(qTe," (SEW-D model)"),qTe.forEach(t),lNe=i(T),Xm=n(T,"LI",{});var GTe=s(Xm);jQ=n(GTe,"STRONG",{});var e8r=s(jQ);iNe=r(e8r,"speech-encoder-decoder"),e8r.forEach(t),dNe=r(GTe," \u2014 "),E8=n(GTe,"A",{href:!0});var o8r=s(E8);cNe=r(o8r,"SpeechEncoderDecoderConfig"),o8r.forEach(t),fNe=r(GTe," (Speech Encoder decoder model)"),GTe.forEach(t),mNe=i(T),Vm=n(T,"LI",{});var OTe=s(Vm);NQ=n(OTe,"STRONG",{});var r8r=s(NQ);gNe=r(r8r,"speech_to_text"),r8r.forEach(t),hNe=r(OTe," \u2014 "),y8=n(OTe,"A",{href:!0});var t8r=s(y8);pNe=r(t8r,"Speech2TextConfig"),t8r.forEach(t),_Ne=r(OTe," (Speech2Text model)"),OTe.forEach(t),uNe=i(T),zm=n(T,"LI",{});var XTe=s(zm);qQ=n(XTe,"STRONG",{});var a8r=s(qQ);bNe=r(a8r,"speech_to_text_2"),a8r.forEach(t),vNe=r(XTe," \u2014 "),w8=n(XTe,"A",{href:!0});var n8r=s(w8);TNe=r(n8r,"Speech2Text2Config"),n8r.forEach(t),FNe=r(XTe," (Speech2Text2 model)"),XTe.forEach(t),CNe=i(T),Wm=n(T,"LI",{});var VTe=s(Wm);GQ=n(VTe,"STRONG",{});var s8r=s(GQ);MNe=r(s8r,"splinter"),s8r.forEach(t),ENe=r(VTe," \u2014 "),A8=n(VTe,"A",{href:!0});var l8r=s(A8);yNe=r(l8r,"SplinterConfig"),l8r.forEach(t),wNe=r(VTe," (Splinter model)"),VTe.forEach(t),ANe=i(T),Qm=n(T,"LI",{});var zTe=s(Qm);OQ=n(zTe,"STRONG",{});var i8r=s(OQ);LNe=r(i8r,"squeezebert"),i8r.forEach(t),BNe=r(zTe," \u2014 "),L8=n(zTe,"A",{href:!0});var d8r=s(L8);xNe=r(d8r,"SqueezeBertConfig"),d8r.forEach(t),kNe=r(zTe," (SqueezeBERT model)"),zTe.forEach(t),RNe=i(T),Hm=n(T,"LI",{});var WTe=s(Hm);XQ=n(WTe,"STRONG",{});var c8r=s(XQ);SNe=r(c8r,"swin"),c8r.forEach(t),PNe=r(WTe," \u2014 "),B8=n(WTe,"A",{href:!0});var f8r=s(B8);$Ne=r(f8r,"SwinConfig"),f8r.forEach(t),INe=r(WTe," (Swin model)"),WTe.forEach(t),DNe=i(T),Um=n(T,"LI",{});var QTe=s(Um);VQ=n(QTe,"STRONG",{});var m8r=s(VQ);jNe=r(m8r,"t5"),m8r.forEach(t),NNe=r(QTe," \u2014 "),x8=n(QTe,"A",{href:!0});var g8r=s(x8);qNe=r(g8r,"T5Config"),g8r.forEach(t),GNe=r(QTe," (T5 model)"),QTe.forEach(t),ONe=i(T),Jm=n(T,"LI",{});var HTe=s(Jm);zQ=n(HTe,"STRONG",{});var h8r=s(zQ);XNe=r(h8r,"tapas"),h8r.forEach(t),VNe=r(HTe," \u2014 "),k8=n(HTe,"A",{href:!0});var p8r=s(k8);zNe=r(p8r,"TapasConfig"),p8r.forEach(t),WNe=r(HTe," (TAPAS model)"),HTe.forEach(t),QNe=i(T),Ym=n(T,"LI",{});var UTe=s(Ym);WQ=n(UTe,"STRONG",{});var _8r=s(WQ);HNe=r(_8r,"transfo-xl"),_8r.forEach(t),UNe=r(UTe," \u2014 "),R8=n(UTe,"A",{href:!0});var u8r=s(R8);JNe=r(u8r,"TransfoXLConfig"),u8r.forEach(t),YNe=r(UTe," (Transformer-XL model)"),UTe.forEach(t),KNe=i(T),Km=n(T,"LI",{});var JTe=s(Km);QQ=n(JTe,"STRONG",{});var b8r=s(QQ);ZNe=r(b8r,"trocr"),b8r.forEach(t),eqe=r(JTe," \u2014 "),S8=n(JTe,"A",{href:!0});var v8r=s(S8);oqe=r(v8r,"TrOCRConfig"),v8r.forEach(t),rqe=r(JTe," (TrOCR model)"),JTe.forEach(t),tqe=i(T),Zm=n(T,"LI",{});var YTe=s(Zm);HQ=n(YTe,"STRONG",{});var T8r=s(HQ);aqe=r(T8r,"unispeech"),T8r.forEach(t),nqe=r(YTe," \u2014 "),P8=n(YTe,"A",{href:!0});var F8r=s(P8);sqe=r(F8r,"UniSpeechConfig"),F8r.forEach(t),lqe=r(YTe," (UniSpeech model)"),YTe.forEach(t),iqe=i(T),eg=n(T,"LI",{});var KTe=s(eg);UQ=n(KTe,"STRONG",{});var C8r=s(UQ);dqe=r(C8r,"unispeech-sat"),C8r.forEach(t),cqe=r(KTe," \u2014 "),$8=n(KTe,"A",{href:!0});var M8r=s($8);fqe=r(M8r,"UniSpeechSatConfig"),M8r.forEach(t),mqe=r(KTe," (UniSpeechSat model)"),KTe.forEach(t),gqe=i(T),og=n(T,"LI",{});var ZTe=s(og);JQ=n(ZTe,"STRONG",{});var E8r=s(JQ);hqe=r(E8r,"vilt"),E8r.forEach(t),pqe=r(ZTe," \u2014 "),I8=n(ZTe,"A",{href:!0});var y8r=s(I8);_qe=r(y8r,"ViltConfig"),y8r.forEach(t),uqe=r(ZTe," (ViLT model)"),ZTe.forEach(t),bqe=i(T),rg=n(T,"LI",{});var e7e=s(rg);YQ=n(e7e,"STRONG",{});var w8r=s(YQ);vqe=r(w8r,"vision-encoder-decoder"),w8r.forEach(t),Tqe=r(e7e," \u2014 "),D8=n(e7e,"A",{href:!0});var A8r=s(D8);Fqe=r(A8r,"VisionEncoderDecoderConfig"),A8r.forEach(t),Cqe=r(e7e," (Vision Encoder decoder model)"),e7e.forEach(t),Mqe=i(T),tg=n(T,"LI",{});var o7e=s(tg);KQ=n(o7e,"STRONG",{});var L8r=s(KQ);Eqe=r(L8r,"vision-text-dual-encoder"),L8r.forEach(t),yqe=r(o7e," \u2014 "),j8=n(o7e,"A",{href:!0});var B8r=s(j8);wqe=r(B8r,"VisionTextDualEncoderConfig"),B8r.forEach(t),Aqe=r(o7e," (VisionTextDualEncoder model)"),o7e.forEach(t),Lqe=i(T),ag=n(T,"LI",{});var r7e=s(ag);ZQ=n(r7e,"STRONG",{});var x8r=s(ZQ);Bqe=r(x8r,"visual_bert"),x8r.forEach(t),xqe=r(r7e," \u2014 "),N8=n(r7e,"A",{href:!0});var k8r=s(N8);kqe=r(k8r,"VisualBertConfig"),k8r.forEach(t),Rqe=r(r7e," (VisualBert model)"),r7e.forEach(t),Sqe=i(T),ng=n(T,"LI",{});var t7e=s(ng);eH=n(t7e,"STRONG",{});var R8r=s(eH);Pqe=r(R8r,"vit"),R8r.forEach(t),$qe=r(t7e," \u2014 "),q8=n(t7e,"A",{href:!0});var S8r=s(q8);Iqe=r(S8r,"ViTConfig"),S8r.forEach(t),Dqe=r(t7e," (ViT model)"),t7e.forEach(t),jqe=i(T),sg=n(T,"LI",{});var a7e=s(sg);oH=n(a7e,"STRONG",{});var P8r=s(oH);Nqe=r(P8r,"vit_mae"),P8r.forEach(t),qqe=r(a7e," \u2014 "),G8=n(a7e,"A",{href:!0});var $8r=s(G8);Gqe=r($8r,"ViTMAEConfig"),$8r.forEach(t),Oqe=r(a7e," (ViTMAE model)"),a7e.forEach(t),Xqe=i(T),lg=n(T,"LI",{});var n7e=s(lg);rH=n(n7e,"STRONG",{});var I8r=s(rH);Vqe=r(I8r,"wav2vec2"),I8r.forEach(t),zqe=r(n7e," \u2014 "),O8=n(n7e,"A",{href:!0});var D8r=s(O8);Wqe=r(D8r,"Wav2Vec2Config"),D8r.forEach(t),Qqe=r(n7e," (Wav2Vec2 model)"),n7e.forEach(t),Hqe=i(T),ig=n(T,"LI",{});var s7e=s(ig);tH=n(s7e,"STRONG",{});var j8r=s(tH);Uqe=r(j8r,"wavlm"),j8r.forEach(t),Jqe=r(s7e," \u2014 "),X8=n(s7e,"A",{href:!0});var N8r=s(X8);Yqe=r(N8r,"WavLMConfig"),N8r.forEach(t),Kqe=r(s7e," (WavLM model)"),s7e.forEach(t),Zqe=i(T),dg=n(T,"LI",{});var l7e=s(dg);aH=n(l7e,"STRONG",{});var q8r=s(aH);eGe=r(q8r,"xglm"),q8r.forEach(t),oGe=r(l7e," \u2014 "),V8=n(l7e,"A",{href:!0});var G8r=s(V8);rGe=r(G8r,"XGLMConfig"),G8r.forEach(t),tGe=r(l7e," (XGLM model)"),l7e.forEach(t),aGe=i(T),cg=n(T,"LI",{});var i7e=s(cg);nH=n(i7e,"STRONG",{});var O8r=s(nH);nGe=r(O8r,"xlm"),O8r.forEach(t),sGe=r(i7e," \u2014 "),z8=n(i7e,"A",{href:!0});var X8r=s(z8);lGe=r(X8r,"XLMConfig"),X8r.forEach(t),iGe=r(i7e," (XLM model)"),i7e.forEach(t),dGe=i(T),fg=n(T,"LI",{});var d7e=s(fg);sH=n(d7e,"STRONG",{});var V8r=s(sH);cGe=r(V8r,"xlm-prophetnet"),V8r.forEach(t),fGe=r(d7e," \u2014 "),W8=n(d7e,"A",{href:!0});var z8r=s(W8);mGe=r(z8r,"XLMProphetNetConfig"),z8r.forEach(t),gGe=r(d7e," (XLMProphetNet model)"),d7e.forEach(t),hGe=i(T),mg=n(T,"LI",{});var c7e=s(mg);lH=n(c7e,"STRONG",{});var W8r=s(lH);pGe=r(W8r,"xlm-roberta"),W8r.forEach(t),_Ge=r(c7e," \u2014 "),Q8=n(c7e,"A",{href:!0});var Q8r=s(Q8);uGe=r(Q8r,"XLMRobertaConfig"),Q8r.forEach(t),bGe=r(c7e," (XLM-RoBERTa model)"),c7e.forEach(t),vGe=i(T),gg=n(T,"LI",{});var f7e=s(gg);iH=n(f7e,"STRONG",{});var H8r=s(iH);TGe=r(H8r,"xlm-roberta-xl"),H8r.forEach(t),FGe=r(f7e," \u2014 "),H8=n(f7e,"A",{href:!0});var U8r=s(H8);CGe=r(U8r,"XLMRobertaXLConfig"),U8r.forEach(t),MGe=r(f7e," (XLM-RoBERTa-XL model)"),f7e.forEach(t),EGe=i(T),hg=n(T,"LI",{});var m7e=s(hg);dH=n(m7e,"STRONG",{});var J8r=s(dH);yGe=r(J8r,"xlnet"),J8r.forEach(t),wGe=r(m7e," \u2014 "),U8=n(m7e,"A",{href:!0});var Y8r=s(U8);AGe=r(Y8r,"XLNetConfig"),Y8r.forEach(t),LGe=r(m7e," (XLNet model)"),m7e.forEach(t),BGe=i(T),pg=n(T,"LI",{});var g7e=s(pg);cH=n(g7e,"STRONG",{});var K8r=s(cH);xGe=r(K8r,"yoso"),K8r.forEach(t),kGe=r(g7e," \u2014 "),J8=n(g7e,"A",{href:!0});var Z8r=s(J8);RGe=r(Z8r,"YosoConfig"),Z8r.forEach(t),SGe=r(g7e," (YOSO model)"),g7e.forEach(t),T.forEach(t),PGe=i(ia),fH=n(ia,"P",{});var eBr=s(fH);$Ge=r(eBr,"Examples:"),eBr.forEach(t),IGe=i(ia),m(kM.$$.fragment,ia),ia.forEach(t),DGe=i(Is),_g=n(Is,"DIV",{class:!0});var Exe=s(_g);m(RM.$$.fragment,Exe),jGe=i(Exe),mH=n(Exe,"P",{});var oBr=s(mH);NGe=r(oBr,"Register a new configuration for this class."),oBr.forEach(t),Exe.forEach(t),Is.forEach(t),E8e=i(c),ji=n(c,"H2",{class:!0});var yxe=s(ji);ug=n(yxe,"A",{id:!0,class:!0,href:!0});var rBr=s(ug);gH=n(rBr,"SPAN",{});var tBr=s(gH);m(SM.$$.fragment,tBr),tBr.forEach(t),rBr.forEach(t),qGe=i(yxe),hH=n(yxe,"SPAN",{});var aBr=s(hH);GGe=r(aBr,"AutoTokenizer"),aBr.forEach(t),yxe.forEach(t),y8e=i(c),Vo=n(c,"DIV",{class:!0});var Ds=s(Vo);m(PM.$$.fragment,Ds),OGe=i(Ds),$M=n(Ds,"P",{});var wxe=s($M);XGe=r(wxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Y8=n(wxe,"A",{href:!0});var nBr=s(Y8);VGe=r(nBr,"AutoTokenizer.from_pretrained()"),nBr.forEach(t),zGe=r(wxe," class method."),wxe.forEach(t),WGe=i(Ds),IM=n(Ds,"P",{});var Axe=s(IM);QGe=r(Axe,"This class cannot be instantiated directly using "),pH=n(Axe,"CODE",{});var sBr=s(pH);HGe=r(sBr,"__init__()"),sBr.forEach(t),UGe=r(Axe," (throws an error)."),Axe.forEach(t),JGe=i(Ds),mo=n(Ds,"DIV",{class:!0});var da=s(mo);m(DM.$$.fragment,da),YGe=i(da),_H=n(da,"P",{});var lBr=s(_H);KGe=r(lBr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lBr.forEach(t),ZGe=i(da),Da=n(da,"P",{});var C4=s(Da);eOe=r(C4,"The tokenizer class to instantiate is selected based on the "),uH=n(C4,"CODE",{});var iBr=s(uH);oOe=r(iBr,"model_type"),iBr.forEach(t),rOe=r(C4,` property of the config object (either
passed as an argument or loaded from `),bH=n(C4,"CODE",{});var dBr=s(bH);tOe=r(dBr,"pretrained_model_name_or_path"),dBr.forEach(t),aOe=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vH=n(C4,"CODE",{});var cBr=s(vH);nOe=r(cBr,"pretrained_model_name_or_path"),cBr.forEach(t),sOe=r(C4,":"),C4.forEach(t),lOe=i(da),M=n(da,"UL",{});var y=s(M);Gn=n(y,"LI",{});var c0=s(Gn);TH=n(c0,"STRONG",{});var fBr=s(TH);iOe=r(fBr,"albert"),fBr.forEach(t),dOe=r(c0," \u2014 "),K8=n(c0,"A",{href:!0});var mBr=s(K8);cOe=r(mBr,"AlbertTokenizer"),mBr.forEach(t),fOe=r(c0," or "),Z8=n(c0,"A",{href:!0});var gBr=s(Z8);mOe=r(gBr,"AlbertTokenizerFast"),gBr.forEach(t),gOe=r(c0," (ALBERT model)"),c0.forEach(t),hOe=i(y),On=n(y,"LI",{});var f0=s(On);FH=n(f0,"STRONG",{});var hBr=s(FH);pOe=r(hBr,"bart"),hBr.forEach(t),_Oe=r(f0," \u2014 "),eB=n(f0,"A",{href:!0});var pBr=s(eB);uOe=r(pBr,"BartTokenizer"),pBr.forEach(t),bOe=r(f0," or "),oB=n(f0,"A",{href:!0});var _Br=s(oB);vOe=r(_Br,"BartTokenizerFast"),_Br.forEach(t),TOe=r(f0," (BART model)"),f0.forEach(t),FOe=i(y),Xn=n(y,"LI",{});var m0=s(Xn);CH=n(m0,"STRONG",{});var uBr=s(CH);COe=r(uBr,"barthez"),uBr.forEach(t),MOe=r(m0," \u2014 "),rB=n(m0,"A",{href:!0});var bBr=s(rB);EOe=r(bBr,"BarthezTokenizer"),bBr.forEach(t),yOe=r(m0," or "),tB=n(m0,"A",{href:!0});var vBr=s(tB);wOe=r(vBr,"BarthezTokenizerFast"),vBr.forEach(t),AOe=r(m0," (BARThez model)"),m0.forEach(t),LOe=i(y),bg=n(y,"LI",{});var h7e=s(bg);MH=n(h7e,"STRONG",{});var TBr=s(MH);BOe=r(TBr,"bartpho"),TBr.forEach(t),xOe=r(h7e," \u2014 "),aB=n(h7e,"A",{href:!0});var FBr=s(aB);kOe=r(FBr,"BartphoTokenizer"),FBr.forEach(t),ROe=r(h7e," (BARTpho model)"),h7e.forEach(t),SOe=i(y),Vn=n(y,"LI",{});var g0=s(Vn);EH=n(g0,"STRONG",{});var CBr=s(EH);POe=r(CBr,"bert"),CBr.forEach(t),$Oe=r(g0," \u2014 "),nB=n(g0,"A",{href:!0});var MBr=s(nB);IOe=r(MBr,"BertTokenizer"),MBr.forEach(t),DOe=r(g0," or "),sB=n(g0,"A",{href:!0});var EBr=s(sB);jOe=r(EBr,"BertTokenizerFast"),EBr.forEach(t),NOe=r(g0," (BERT model)"),g0.forEach(t),qOe=i(y),vg=n(y,"LI",{});var p7e=s(vg);yH=n(p7e,"STRONG",{});var yBr=s(yH);GOe=r(yBr,"bert-generation"),yBr.forEach(t),OOe=r(p7e," \u2014 "),lB=n(p7e,"A",{href:!0});var wBr=s(lB);XOe=r(wBr,"BertGenerationTokenizer"),wBr.forEach(t),VOe=r(p7e," (Bert Generation model)"),p7e.forEach(t),zOe=i(y),Tg=n(y,"LI",{});var _7e=s(Tg);wH=n(_7e,"STRONG",{});var ABr=s(wH);WOe=r(ABr,"bert-japanese"),ABr.forEach(t),QOe=r(_7e," \u2014 "),iB=n(_7e,"A",{href:!0});var LBr=s(iB);HOe=r(LBr,"BertJapaneseTokenizer"),LBr.forEach(t),UOe=r(_7e," (BertJapanese model)"),_7e.forEach(t),JOe=i(y),Fg=n(y,"LI",{});var u7e=s(Fg);AH=n(u7e,"STRONG",{});var BBr=s(AH);YOe=r(BBr,"bertweet"),BBr.forEach(t),KOe=r(u7e," \u2014 "),dB=n(u7e,"A",{href:!0});var xBr=s(dB);ZOe=r(xBr,"BertweetTokenizer"),xBr.forEach(t),eXe=r(u7e," (Bertweet model)"),u7e.forEach(t),oXe=i(y),zn=n(y,"LI",{});var h0=s(zn);LH=n(h0,"STRONG",{});var kBr=s(LH);rXe=r(kBr,"big_bird"),kBr.forEach(t),tXe=r(h0," \u2014 "),cB=n(h0,"A",{href:!0});var RBr=s(cB);aXe=r(RBr,"BigBirdTokenizer"),RBr.forEach(t),nXe=r(h0," or "),fB=n(h0,"A",{href:!0});var SBr=s(fB);sXe=r(SBr,"BigBirdTokenizerFast"),SBr.forEach(t),lXe=r(h0," (BigBird model)"),h0.forEach(t),iXe=i(y),Wn=n(y,"LI",{});var p0=s(Wn);BH=n(p0,"STRONG",{});var PBr=s(BH);dXe=r(PBr,"bigbird_pegasus"),PBr.forEach(t),cXe=r(p0," \u2014 "),mB=n(p0,"A",{href:!0});var $Br=s(mB);fXe=r($Br,"PegasusTokenizer"),$Br.forEach(t),mXe=r(p0," or "),gB=n(p0,"A",{href:!0});var IBr=s(gB);gXe=r(IBr,"PegasusTokenizerFast"),IBr.forEach(t),hXe=r(p0," (BigBirdPegasus model)"),p0.forEach(t),pXe=i(y),Qn=n(y,"LI",{});var _0=s(Qn);xH=n(_0,"STRONG",{});var DBr=s(xH);_Xe=r(DBr,"blenderbot"),DBr.forEach(t),uXe=r(_0," \u2014 "),hB=n(_0,"A",{href:!0});var jBr=s(hB);bXe=r(jBr,"BlenderbotTokenizer"),jBr.forEach(t),vXe=r(_0," or "),pB=n(_0,"A",{href:!0});var NBr=s(pB);TXe=r(NBr,"BlenderbotTokenizerFast"),NBr.forEach(t),FXe=r(_0," (Blenderbot model)"),_0.forEach(t),CXe=i(y),Cg=n(y,"LI",{});var b7e=s(Cg);kH=n(b7e,"STRONG",{});var qBr=s(kH);MXe=r(qBr,"blenderbot-small"),qBr.forEach(t),EXe=r(b7e," \u2014 "),_B=n(b7e,"A",{href:!0});var GBr=s(_B);yXe=r(GBr,"BlenderbotSmallTokenizer"),GBr.forEach(t),wXe=r(b7e," (BlenderbotSmall model)"),b7e.forEach(t),AXe=i(y),Mg=n(y,"LI",{});var v7e=s(Mg);RH=n(v7e,"STRONG",{});var OBr=s(RH);LXe=r(OBr,"byt5"),OBr.forEach(t),BXe=r(v7e," \u2014 "),uB=n(v7e,"A",{href:!0});var XBr=s(uB);xXe=r(XBr,"ByT5Tokenizer"),XBr.forEach(t),kXe=r(v7e," (ByT5 model)"),v7e.forEach(t),RXe=i(y),Hn=n(y,"LI",{});var u0=s(Hn);SH=n(u0,"STRONG",{});var VBr=s(SH);SXe=r(VBr,"camembert"),VBr.forEach(t),PXe=r(u0," \u2014 "),bB=n(u0,"A",{href:!0});var zBr=s(bB);$Xe=r(zBr,"CamembertTokenizer"),zBr.forEach(t),IXe=r(u0," or "),vB=n(u0,"A",{href:!0});var WBr=s(vB);DXe=r(WBr,"CamembertTokenizerFast"),WBr.forEach(t),jXe=r(u0," (CamemBERT model)"),u0.forEach(t),NXe=i(y),Eg=n(y,"LI",{});var T7e=s(Eg);PH=n(T7e,"STRONG",{});var QBr=s(PH);qXe=r(QBr,"canine"),QBr.forEach(t),GXe=r(T7e," \u2014 "),TB=n(T7e,"A",{href:!0});var HBr=s(TB);OXe=r(HBr,"CanineTokenizer"),HBr.forEach(t),XXe=r(T7e," (Canine model)"),T7e.forEach(t),VXe=i(y),Un=n(y,"LI",{});var b0=s(Un);$H=n(b0,"STRONG",{});var UBr=s($H);zXe=r(UBr,"clip"),UBr.forEach(t),WXe=r(b0," \u2014 "),FB=n(b0,"A",{href:!0});var JBr=s(FB);QXe=r(JBr,"CLIPTokenizer"),JBr.forEach(t),HXe=r(b0," or "),CB=n(b0,"A",{href:!0});var YBr=s(CB);UXe=r(YBr,"CLIPTokenizerFast"),YBr.forEach(t),JXe=r(b0," (CLIP model)"),b0.forEach(t),YXe=i(y),Jn=n(y,"LI",{});var v0=s(Jn);IH=n(v0,"STRONG",{});var KBr=s(IH);KXe=r(KBr,"convbert"),KBr.forEach(t),ZXe=r(v0," \u2014 "),MB=n(v0,"A",{href:!0});var ZBr=s(MB);eVe=r(ZBr,"ConvBertTokenizer"),ZBr.forEach(t),oVe=r(v0," or "),EB=n(v0,"A",{href:!0});var exr=s(EB);rVe=r(exr,"ConvBertTokenizerFast"),exr.forEach(t),tVe=r(v0," (ConvBERT model)"),v0.forEach(t),aVe=i(y),Yn=n(y,"LI",{});var T0=s(Yn);DH=n(T0,"STRONG",{});var oxr=s(DH);nVe=r(oxr,"cpm"),oxr.forEach(t),sVe=r(T0," \u2014 "),yB=n(T0,"A",{href:!0});var rxr=s(yB);lVe=r(rxr,"CpmTokenizer"),rxr.forEach(t),iVe=r(T0," or "),jH=n(T0,"CODE",{});var txr=s(jH);dVe=r(txr,"CpmTokenizerFast"),txr.forEach(t),cVe=r(T0," (CPM model)"),T0.forEach(t),fVe=i(y),yg=n(y,"LI",{});var F7e=s(yg);NH=n(F7e,"STRONG",{});var axr=s(NH);mVe=r(axr,"ctrl"),axr.forEach(t),gVe=r(F7e," \u2014 "),wB=n(F7e,"A",{href:!0});var nxr=s(wB);hVe=r(nxr,"CTRLTokenizer"),nxr.forEach(t),pVe=r(F7e," (CTRL model)"),F7e.forEach(t),_Ve=i(y),Kn=n(y,"LI",{});var F0=s(Kn);qH=n(F0,"STRONG",{});var sxr=s(qH);uVe=r(sxr,"deberta"),sxr.forEach(t),bVe=r(F0," \u2014 "),AB=n(F0,"A",{href:!0});var lxr=s(AB);vVe=r(lxr,"DebertaTokenizer"),lxr.forEach(t),TVe=r(F0," or "),LB=n(F0,"A",{href:!0});var ixr=s(LB);FVe=r(ixr,"DebertaTokenizerFast"),ixr.forEach(t),CVe=r(F0," (DeBERTa model)"),F0.forEach(t),MVe=i(y),wg=n(y,"LI",{});var C7e=s(wg);GH=n(C7e,"STRONG",{});var dxr=s(GH);EVe=r(dxr,"deberta-v2"),dxr.forEach(t),yVe=r(C7e," \u2014 "),BB=n(C7e,"A",{href:!0});var cxr=s(BB);wVe=r(cxr,"DebertaV2Tokenizer"),cxr.forEach(t),AVe=r(C7e," (DeBERTa-v2 model)"),C7e.forEach(t),LVe=i(y),Zn=n(y,"LI",{});var C0=s(Zn);OH=n(C0,"STRONG",{});var fxr=s(OH);BVe=r(fxr,"distilbert"),fxr.forEach(t),xVe=r(C0," \u2014 "),xB=n(C0,"A",{href:!0});var mxr=s(xB);kVe=r(mxr,"DistilBertTokenizer"),mxr.forEach(t),RVe=r(C0," or "),kB=n(C0,"A",{href:!0});var gxr=s(kB);SVe=r(gxr,"DistilBertTokenizerFast"),gxr.forEach(t),PVe=r(C0," (DistilBERT model)"),C0.forEach(t),$Ve=i(y),es=n(y,"LI",{});var M0=s(es);XH=n(M0,"STRONG",{});var hxr=s(XH);IVe=r(hxr,"dpr"),hxr.forEach(t),DVe=r(M0," \u2014 "),RB=n(M0,"A",{href:!0});var pxr=s(RB);jVe=r(pxr,"DPRQuestionEncoderTokenizer"),pxr.forEach(t),NVe=r(M0," or "),SB=n(M0,"A",{href:!0});var _xr=s(SB);qVe=r(_xr,"DPRQuestionEncoderTokenizerFast"),_xr.forEach(t),GVe=r(M0," (DPR model)"),M0.forEach(t),OVe=i(y),os=n(y,"LI",{});var E0=s(os);VH=n(E0,"STRONG",{});var uxr=s(VH);XVe=r(uxr,"electra"),uxr.forEach(t),VVe=r(E0," \u2014 "),PB=n(E0,"A",{href:!0});var bxr=s(PB);zVe=r(bxr,"ElectraTokenizer"),bxr.forEach(t),WVe=r(E0," or "),$B=n(E0,"A",{href:!0});var vxr=s($B);QVe=r(vxr,"ElectraTokenizerFast"),vxr.forEach(t),HVe=r(E0," (ELECTRA model)"),E0.forEach(t),UVe=i(y),Ag=n(y,"LI",{});var M7e=s(Ag);zH=n(M7e,"STRONG",{});var Txr=s(zH);JVe=r(Txr,"flaubert"),Txr.forEach(t),YVe=r(M7e," \u2014 "),IB=n(M7e,"A",{href:!0});var Fxr=s(IB);KVe=r(Fxr,"FlaubertTokenizer"),Fxr.forEach(t),ZVe=r(M7e," (FlauBERT model)"),M7e.forEach(t),eze=i(y),rs=n(y,"LI",{});var y0=s(rs);WH=n(y0,"STRONG",{});var Cxr=s(WH);oze=r(Cxr,"fnet"),Cxr.forEach(t),rze=r(y0," \u2014 "),DB=n(y0,"A",{href:!0});var Mxr=s(DB);tze=r(Mxr,"FNetTokenizer"),Mxr.forEach(t),aze=r(y0," or "),jB=n(y0,"A",{href:!0});var Exr=s(jB);nze=r(Exr,"FNetTokenizerFast"),Exr.forEach(t),sze=r(y0," (FNet model)"),y0.forEach(t),lze=i(y),Lg=n(y,"LI",{});var E7e=s(Lg);QH=n(E7e,"STRONG",{});var yxr=s(QH);ize=r(yxr,"fsmt"),yxr.forEach(t),dze=r(E7e," \u2014 "),NB=n(E7e,"A",{href:!0});var wxr=s(NB);cze=r(wxr,"FSMTTokenizer"),wxr.forEach(t),fze=r(E7e," (FairSeq Machine-Translation model)"),E7e.forEach(t),mze=i(y),ts=n(y,"LI",{});var w0=s(ts);HH=n(w0,"STRONG",{});var Axr=s(HH);gze=r(Axr,"funnel"),Axr.forEach(t),hze=r(w0," \u2014 "),qB=n(w0,"A",{href:!0});var Lxr=s(qB);pze=r(Lxr,"FunnelTokenizer"),Lxr.forEach(t),_ze=r(w0," or "),GB=n(w0,"A",{href:!0});var Bxr=s(GB);uze=r(Bxr,"FunnelTokenizerFast"),Bxr.forEach(t),bze=r(w0," (Funnel Transformer model)"),w0.forEach(t),vze=i(y),as=n(y,"LI",{});var A0=s(as);UH=n(A0,"STRONG",{});var xxr=s(UH);Tze=r(xxr,"gpt2"),xxr.forEach(t),Fze=r(A0," \u2014 "),OB=n(A0,"A",{href:!0});var kxr=s(OB);Cze=r(kxr,"GPT2Tokenizer"),kxr.forEach(t),Mze=r(A0," or "),XB=n(A0,"A",{href:!0});var Rxr=s(XB);Eze=r(Rxr,"GPT2TokenizerFast"),Rxr.forEach(t),yze=r(A0," (OpenAI GPT-2 model)"),A0.forEach(t),wze=i(y),ns=n(y,"LI",{});var L0=s(ns);JH=n(L0,"STRONG",{});var Sxr=s(JH);Aze=r(Sxr,"gpt_neo"),Sxr.forEach(t),Lze=r(L0," \u2014 "),VB=n(L0,"A",{href:!0});var Pxr=s(VB);Bze=r(Pxr,"GPT2Tokenizer"),Pxr.forEach(t),xze=r(L0," or "),zB=n(L0,"A",{href:!0});var $xr=s(zB);kze=r($xr,"GPT2TokenizerFast"),$xr.forEach(t),Rze=r(L0," (GPT Neo model)"),L0.forEach(t),Sze=i(y),ss=n(y,"LI",{});var B0=s(ss);YH=n(B0,"STRONG",{});var Ixr=s(YH);Pze=r(Ixr,"herbert"),Ixr.forEach(t),$ze=r(B0," \u2014 "),WB=n(B0,"A",{href:!0});var Dxr=s(WB);Ize=r(Dxr,"HerbertTokenizer"),Dxr.forEach(t),Dze=r(B0," or "),QB=n(B0,"A",{href:!0});var jxr=s(QB);jze=r(jxr,"HerbertTokenizerFast"),jxr.forEach(t),Nze=r(B0," (HerBERT model)"),B0.forEach(t),qze=i(y),Bg=n(y,"LI",{});var y7e=s(Bg);KH=n(y7e,"STRONG",{});var Nxr=s(KH);Gze=r(Nxr,"hubert"),Nxr.forEach(t),Oze=r(y7e," \u2014 "),HB=n(y7e,"A",{href:!0});var qxr=s(HB);Xze=r(qxr,"Wav2Vec2CTCTokenizer"),qxr.forEach(t),Vze=r(y7e," (Hubert model)"),y7e.forEach(t),zze=i(y),ls=n(y,"LI",{});var x0=s(ls);ZH=n(x0,"STRONG",{});var Gxr=s(ZH);Wze=r(Gxr,"ibert"),Gxr.forEach(t),Qze=r(x0," \u2014 "),UB=n(x0,"A",{href:!0});var Oxr=s(UB);Hze=r(Oxr,"RobertaTokenizer"),Oxr.forEach(t),Uze=r(x0," or "),JB=n(x0,"A",{href:!0});var Xxr=s(JB);Jze=r(Xxr,"RobertaTokenizerFast"),Xxr.forEach(t),Yze=r(x0," (I-BERT model)"),x0.forEach(t),Kze=i(y),is=n(y,"LI",{});var k0=s(is);eU=n(k0,"STRONG",{});var Vxr=s(eU);Zze=r(Vxr,"layoutlm"),Vxr.forEach(t),eWe=r(k0," \u2014 "),YB=n(k0,"A",{href:!0});var zxr=s(YB);oWe=r(zxr,"LayoutLMTokenizer"),zxr.forEach(t),rWe=r(k0," or "),KB=n(k0,"A",{href:!0});var Wxr=s(KB);tWe=r(Wxr,"LayoutLMTokenizerFast"),Wxr.forEach(t),aWe=r(k0," (LayoutLM model)"),k0.forEach(t),nWe=i(y),ds=n(y,"LI",{});var R0=s(ds);oU=n(R0,"STRONG",{});var Qxr=s(oU);sWe=r(Qxr,"layoutlmv2"),Qxr.forEach(t),lWe=r(R0," \u2014 "),ZB=n(R0,"A",{href:!0});var Hxr=s(ZB);iWe=r(Hxr,"LayoutLMv2Tokenizer"),Hxr.forEach(t),dWe=r(R0," or "),ex=n(R0,"A",{href:!0});var Uxr=s(ex);cWe=r(Uxr,"LayoutLMv2TokenizerFast"),Uxr.forEach(t),fWe=r(R0," (LayoutLMv2 model)"),R0.forEach(t),mWe=i(y),cs=n(y,"LI",{});var S0=s(cs);rU=n(S0,"STRONG",{});var Jxr=s(rU);gWe=r(Jxr,"layoutxlm"),Jxr.forEach(t),hWe=r(S0," \u2014 "),ox=n(S0,"A",{href:!0});var Yxr=s(ox);pWe=r(Yxr,"LayoutXLMTokenizer"),Yxr.forEach(t),_We=r(S0," or "),rx=n(S0,"A",{href:!0});var Kxr=s(rx);uWe=r(Kxr,"LayoutXLMTokenizerFast"),Kxr.forEach(t),bWe=r(S0," (LayoutXLM model)"),S0.forEach(t),vWe=i(y),fs=n(y,"LI",{});var P0=s(fs);tU=n(P0,"STRONG",{});var Zxr=s(tU);TWe=r(Zxr,"led"),Zxr.forEach(t),FWe=r(P0," \u2014 "),tx=n(P0,"A",{href:!0});var ekr=s(tx);CWe=r(ekr,"LEDTokenizer"),ekr.forEach(t),MWe=r(P0," or "),ax=n(P0,"A",{href:!0});var okr=s(ax);EWe=r(okr,"LEDTokenizerFast"),okr.forEach(t),yWe=r(P0," (LED model)"),P0.forEach(t),wWe=i(y),ms=n(y,"LI",{});var $0=s(ms);aU=n($0,"STRONG",{});var rkr=s(aU);AWe=r(rkr,"longformer"),rkr.forEach(t),LWe=r($0," \u2014 "),nx=n($0,"A",{href:!0});var tkr=s(nx);BWe=r(tkr,"LongformerTokenizer"),tkr.forEach(t),xWe=r($0," or "),sx=n($0,"A",{href:!0});var akr=s(sx);kWe=r(akr,"LongformerTokenizerFast"),akr.forEach(t),RWe=r($0," (Longformer model)"),$0.forEach(t),SWe=i(y),xg=n(y,"LI",{});var w7e=s(xg);nU=n(w7e,"STRONG",{});var nkr=s(nU);PWe=r(nkr,"luke"),nkr.forEach(t),$We=r(w7e," \u2014 "),lx=n(w7e,"A",{href:!0});var skr=s(lx);IWe=r(skr,"LukeTokenizer"),skr.forEach(t),DWe=r(w7e," (LUKE model)"),w7e.forEach(t),jWe=i(y),gs=n(y,"LI",{});var I0=s(gs);sU=n(I0,"STRONG",{});var lkr=s(sU);NWe=r(lkr,"lxmert"),lkr.forEach(t),qWe=r(I0," \u2014 "),ix=n(I0,"A",{href:!0});var ikr=s(ix);GWe=r(ikr,"LxmertTokenizer"),ikr.forEach(t),OWe=r(I0," or "),dx=n(I0,"A",{href:!0});var dkr=s(dx);XWe=r(dkr,"LxmertTokenizerFast"),dkr.forEach(t),VWe=r(I0," (LXMERT model)"),I0.forEach(t),zWe=i(y),kg=n(y,"LI",{});var A7e=s(kg);lU=n(A7e,"STRONG",{});var ckr=s(lU);WWe=r(ckr,"m2m_100"),ckr.forEach(t),QWe=r(A7e," \u2014 "),cx=n(A7e,"A",{href:!0});var fkr=s(cx);HWe=r(fkr,"M2M100Tokenizer"),fkr.forEach(t),UWe=r(A7e," (M2M100 model)"),A7e.forEach(t),JWe=i(y),Rg=n(y,"LI",{});var L7e=s(Rg);iU=n(L7e,"STRONG",{});var mkr=s(iU);YWe=r(mkr,"marian"),mkr.forEach(t),KWe=r(L7e," \u2014 "),fx=n(L7e,"A",{href:!0});var gkr=s(fx);ZWe=r(gkr,"MarianTokenizer"),gkr.forEach(t),eQe=r(L7e," (Marian model)"),L7e.forEach(t),oQe=i(y),hs=n(y,"LI",{});var D0=s(hs);dU=n(D0,"STRONG",{});var hkr=s(dU);rQe=r(hkr,"mbart"),hkr.forEach(t),tQe=r(D0," \u2014 "),mx=n(D0,"A",{href:!0});var pkr=s(mx);aQe=r(pkr,"MBartTokenizer"),pkr.forEach(t),nQe=r(D0," or "),gx=n(D0,"A",{href:!0});var _kr=s(gx);sQe=r(_kr,"MBartTokenizerFast"),_kr.forEach(t),lQe=r(D0," (mBART model)"),D0.forEach(t),iQe=i(y),ps=n(y,"LI",{});var j0=s(ps);cU=n(j0,"STRONG",{});var ukr=s(cU);dQe=r(ukr,"mbart50"),ukr.forEach(t),cQe=r(j0," \u2014 "),hx=n(j0,"A",{href:!0});var bkr=s(hx);fQe=r(bkr,"MBart50Tokenizer"),bkr.forEach(t),mQe=r(j0," or "),px=n(j0,"A",{href:!0});var vkr=s(px);gQe=r(vkr,"MBart50TokenizerFast"),vkr.forEach(t),hQe=r(j0," (mBART-50 model)"),j0.forEach(t),pQe=i(y),Sg=n(y,"LI",{});var B7e=s(Sg);fU=n(B7e,"STRONG",{});var Tkr=s(fU);_Qe=r(Tkr,"mluke"),Tkr.forEach(t),uQe=r(B7e," \u2014 "),_x=n(B7e,"A",{href:!0});var Fkr=s(_x);bQe=r(Fkr,"MLukeTokenizer"),Fkr.forEach(t),vQe=r(B7e," (mLUKE model)"),B7e.forEach(t),TQe=i(y),_s=n(y,"LI",{});var N0=s(_s);mU=n(N0,"STRONG",{});var Ckr=s(mU);FQe=r(Ckr,"mobilebert"),Ckr.forEach(t),CQe=r(N0," \u2014 "),ux=n(N0,"A",{href:!0});var Mkr=s(ux);MQe=r(Mkr,"MobileBertTokenizer"),Mkr.forEach(t),EQe=r(N0," or "),bx=n(N0,"A",{href:!0});var Ekr=s(bx);yQe=r(Ekr,"MobileBertTokenizerFast"),Ekr.forEach(t),wQe=r(N0," (MobileBERT model)"),N0.forEach(t),AQe=i(y),us=n(y,"LI",{});var q0=s(us);gU=n(q0,"STRONG",{});var ykr=s(gU);LQe=r(ykr,"mpnet"),ykr.forEach(t),BQe=r(q0," \u2014 "),vx=n(q0,"A",{href:!0});var wkr=s(vx);xQe=r(wkr,"MPNetTokenizer"),wkr.forEach(t),kQe=r(q0," or "),Tx=n(q0,"A",{href:!0});var Akr=s(Tx);RQe=r(Akr,"MPNetTokenizerFast"),Akr.forEach(t),SQe=r(q0," (MPNet model)"),q0.forEach(t),PQe=i(y),bs=n(y,"LI",{});var G0=s(bs);hU=n(G0,"STRONG",{});var Lkr=s(hU);$Qe=r(Lkr,"mt5"),Lkr.forEach(t),IQe=r(G0," \u2014 "),Fx=n(G0,"A",{href:!0});var Bkr=s(Fx);DQe=r(Bkr,"MT5Tokenizer"),Bkr.forEach(t),jQe=r(G0," or "),Cx=n(G0,"A",{href:!0});var xkr=s(Cx);NQe=r(xkr,"MT5TokenizerFast"),xkr.forEach(t),qQe=r(G0," (mT5 model)"),G0.forEach(t),GQe=i(y),vs=n(y,"LI",{});var O0=s(vs);pU=n(O0,"STRONG",{});var kkr=s(pU);OQe=r(kkr,"openai-gpt"),kkr.forEach(t),XQe=r(O0," \u2014 "),Mx=n(O0,"A",{href:!0});var Rkr=s(Mx);VQe=r(Rkr,"OpenAIGPTTokenizer"),Rkr.forEach(t),zQe=r(O0," or "),Ex=n(O0,"A",{href:!0});var Skr=s(Ex);WQe=r(Skr,"OpenAIGPTTokenizerFast"),Skr.forEach(t),QQe=r(O0," (OpenAI GPT model)"),O0.forEach(t),HQe=i(y),Ts=n(y,"LI",{});var X0=s(Ts);_U=n(X0,"STRONG",{});var Pkr=s(_U);UQe=r(Pkr,"pegasus"),Pkr.forEach(t),JQe=r(X0," \u2014 "),yx=n(X0,"A",{href:!0});var $kr=s(yx);YQe=r($kr,"PegasusTokenizer"),$kr.forEach(t),KQe=r(X0," or "),wx=n(X0,"A",{href:!0});var Ikr=s(wx);ZQe=r(Ikr,"PegasusTokenizerFast"),Ikr.forEach(t),eHe=r(X0," (Pegasus model)"),X0.forEach(t),oHe=i(y),Pg=n(y,"LI",{});var x7e=s(Pg);uU=n(x7e,"STRONG",{});var Dkr=s(uU);rHe=r(Dkr,"perceiver"),Dkr.forEach(t),tHe=r(x7e," \u2014 "),Ax=n(x7e,"A",{href:!0});var jkr=s(Ax);aHe=r(jkr,"PerceiverTokenizer"),jkr.forEach(t),nHe=r(x7e," (Perceiver model)"),x7e.forEach(t),sHe=i(y),$g=n(y,"LI",{});var k7e=s($g);bU=n(k7e,"STRONG",{});var Nkr=s(bU);lHe=r(Nkr,"phobert"),Nkr.forEach(t),iHe=r(k7e," \u2014 "),Lx=n(k7e,"A",{href:!0});var qkr=s(Lx);dHe=r(qkr,"PhobertTokenizer"),qkr.forEach(t),cHe=r(k7e," (PhoBERT model)"),k7e.forEach(t),fHe=i(y),Ig=n(y,"LI",{});var R7e=s(Ig);vU=n(R7e,"STRONG",{});var Gkr=s(vU);mHe=r(Gkr,"plbart"),Gkr.forEach(t),gHe=r(R7e," \u2014 "),Bx=n(R7e,"A",{href:!0});var Okr=s(Bx);hHe=r(Okr,"PLBartTokenizer"),Okr.forEach(t),pHe=r(R7e," (PLBart model)"),R7e.forEach(t),_He=i(y),Dg=n(y,"LI",{});var S7e=s(Dg);TU=n(S7e,"STRONG",{});var Xkr=s(TU);uHe=r(Xkr,"prophetnet"),Xkr.forEach(t),bHe=r(S7e," \u2014 "),xx=n(S7e,"A",{href:!0});var Vkr=s(xx);vHe=r(Vkr,"ProphetNetTokenizer"),Vkr.forEach(t),THe=r(S7e," (ProphetNet model)"),S7e.forEach(t),FHe=i(y),Fs=n(y,"LI",{});var V0=s(Fs);FU=n(V0,"STRONG",{});var zkr=s(FU);CHe=r(zkr,"qdqbert"),zkr.forEach(t),MHe=r(V0," \u2014 "),kx=n(V0,"A",{href:!0});var Wkr=s(kx);EHe=r(Wkr,"BertTokenizer"),Wkr.forEach(t),yHe=r(V0," or "),Rx=n(V0,"A",{href:!0});var Qkr=s(Rx);wHe=r(Qkr,"BertTokenizerFast"),Qkr.forEach(t),AHe=r(V0," (QDQBert model)"),V0.forEach(t),LHe=i(y),jg=n(y,"LI",{});var P7e=s(jg);CU=n(P7e,"STRONG",{});var Hkr=s(CU);BHe=r(Hkr,"rag"),Hkr.forEach(t),xHe=r(P7e," \u2014 "),Sx=n(P7e,"A",{href:!0});var Ukr=s(Sx);kHe=r(Ukr,"RagTokenizer"),Ukr.forEach(t),RHe=r(P7e," (RAG model)"),P7e.forEach(t),SHe=i(y),Cs=n(y,"LI",{});var z0=s(Cs);MU=n(z0,"STRONG",{});var Jkr=s(MU);PHe=r(Jkr,"reformer"),Jkr.forEach(t),$He=r(z0," \u2014 "),Px=n(z0,"A",{href:!0});var Ykr=s(Px);IHe=r(Ykr,"ReformerTokenizer"),Ykr.forEach(t),DHe=r(z0," or "),$x=n(z0,"A",{href:!0});var Kkr=s($x);jHe=r(Kkr,"ReformerTokenizerFast"),Kkr.forEach(t),NHe=r(z0," (Reformer model)"),z0.forEach(t),qHe=i(y),Ms=n(y,"LI",{});var W0=s(Ms);EU=n(W0,"STRONG",{});var Zkr=s(EU);GHe=r(Zkr,"rembert"),Zkr.forEach(t),OHe=r(W0," \u2014 "),Ix=n(W0,"A",{href:!0});var eRr=s(Ix);XHe=r(eRr,"RemBertTokenizer"),eRr.forEach(t),VHe=r(W0," or "),Dx=n(W0,"A",{href:!0});var oRr=s(Dx);zHe=r(oRr,"RemBertTokenizerFast"),oRr.forEach(t),WHe=r(W0," (RemBERT model)"),W0.forEach(t),QHe=i(y),Es=n(y,"LI",{});var Q0=s(Es);yU=n(Q0,"STRONG",{});var rRr=s(yU);HHe=r(rRr,"retribert"),rRr.forEach(t),UHe=r(Q0," \u2014 "),jx=n(Q0,"A",{href:!0});var tRr=s(jx);JHe=r(tRr,"RetriBertTokenizer"),tRr.forEach(t),YHe=r(Q0," or "),Nx=n(Q0,"A",{href:!0});var aRr=s(Nx);KHe=r(aRr,"RetriBertTokenizerFast"),aRr.forEach(t),ZHe=r(Q0," (RetriBERT model)"),Q0.forEach(t),eUe=i(y),ys=n(y,"LI",{});var H0=s(ys);wU=n(H0,"STRONG",{});var nRr=s(wU);oUe=r(nRr,"roberta"),nRr.forEach(t),rUe=r(H0," \u2014 "),qx=n(H0,"A",{href:!0});var sRr=s(qx);tUe=r(sRr,"RobertaTokenizer"),sRr.forEach(t),aUe=r(H0," or "),Gx=n(H0,"A",{href:!0});var lRr=s(Gx);nUe=r(lRr,"RobertaTokenizerFast"),lRr.forEach(t),sUe=r(H0," (RoBERTa model)"),H0.forEach(t),lUe=i(y),ws=n(y,"LI",{});var U0=s(ws);AU=n(U0,"STRONG",{});var iRr=s(AU);iUe=r(iRr,"roformer"),iRr.forEach(t),dUe=r(U0," \u2014 "),Ox=n(U0,"A",{href:!0});var dRr=s(Ox);cUe=r(dRr,"RoFormerTokenizer"),dRr.forEach(t),fUe=r(U0," or "),Xx=n(U0,"A",{href:!0});var cRr=s(Xx);mUe=r(cRr,"RoFormerTokenizerFast"),cRr.forEach(t),gUe=r(U0," (RoFormer model)"),U0.forEach(t),hUe=i(y),Ng=n(y,"LI",{});var $7e=s(Ng);LU=n($7e,"STRONG",{});var fRr=s(LU);pUe=r(fRr,"speech_to_text"),fRr.forEach(t),_Ue=r($7e," \u2014 "),Vx=n($7e,"A",{href:!0});var mRr=s(Vx);uUe=r(mRr,"Speech2TextTokenizer"),mRr.forEach(t),bUe=r($7e," (Speech2Text model)"),$7e.forEach(t),vUe=i(y),qg=n(y,"LI",{});var I7e=s(qg);BU=n(I7e,"STRONG",{});var gRr=s(BU);TUe=r(gRr,"speech_to_text_2"),gRr.forEach(t),FUe=r(I7e," \u2014 "),zx=n(I7e,"A",{href:!0});var hRr=s(zx);CUe=r(hRr,"Speech2Text2Tokenizer"),hRr.forEach(t),MUe=r(I7e," (Speech2Text2 model)"),I7e.forEach(t),EUe=i(y),As=n(y,"LI",{});var J0=s(As);xU=n(J0,"STRONG",{});var pRr=s(xU);yUe=r(pRr,"splinter"),pRr.forEach(t),wUe=r(J0," \u2014 "),Wx=n(J0,"A",{href:!0});var _Rr=s(Wx);AUe=r(_Rr,"SplinterTokenizer"),_Rr.forEach(t),LUe=r(J0," or "),Qx=n(J0,"A",{href:!0});var uRr=s(Qx);BUe=r(uRr,"SplinterTokenizerFast"),uRr.forEach(t),xUe=r(J0," (Splinter model)"),J0.forEach(t),kUe=i(y),Ls=n(y,"LI",{});var Y0=s(Ls);kU=n(Y0,"STRONG",{});var bRr=s(kU);RUe=r(bRr,"squeezebert"),bRr.forEach(t),SUe=r(Y0," \u2014 "),Hx=n(Y0,"A",{href:!0});var vRr=s(Hx);PUe=r(vRr,"SqueezeBertTokenizer"),vRr.forEach(t),$Ue=r(Y0," or "),Ux=n(Y0,"A",{href:!0});var TRr=s(Ux);IUe=r(TRr,"SqueezeBertTokenizerFast"),TRr.forEach(t),DUe=r(Y0," (SqueezeBERT model)"),Y0.forEach(t),jUe=i(y),Bs=n(y,"LI",{});var K0=s(Bs);RU=n(K0,"STRONG",{});var FRr=s(RU);NUe=r(FRr,"t5"),FRr.forEach(t),qUe=r(K0," \u2014 "),Jx=n(K0,"A",{href:!0});var CRr=s(Jx);GUe=r(CRr,"T5Tokenizer"),CRr.forEach(t),OUe=r(K0," or "),Yx=n(K0,"A",{href:!0});var MRr=s(Yx);XUe=r(MRr,"T5TokenizerFast"),MRr.forEach(t),VUe=r(K0," (T5 model)"),K0.forEach(t),zUe=i(y),Gg=n(y,"LI",{});var D7e=s(Gg);SU=n(D7e,"STRONG",{});var ERr=s(SU);WUe=r(ERr,"tapas"),ERr.forEach(t),QUe=r(D7e," \u2014 "),Kx=n(D7e,"A",{href:!0});var yRr=s(Kx);HUe=r(yRr,"TapasTokenizer"),yRr.forEach(t),UUe=r(D7e," (TAPAS model)"),D7e.forEach(t),JUe=i(y),Og=n(y,"LI",{});var j7e=s(Og);PU=n(j7e,"STRONG",{});var wRr=s(PU);YUe=r(wRr,"transfo-xl"),wRr.forEach(t),KUe=r(j7e," \u2014 "),Zx=n(j7e,"A",{href:!0});var ARr=s(Zx);ZUe=r(ARr,"TransfoXLTokenizer"),ARr.forEach(t),eJe=r(j7e," (Transformer-XL model)"),j7e.forEach(t),oJe=i(y),Xg=n(y,"LI",{});var N7e=s(Xg);$U=n(N7e,"STRONG",{});var LRr=s($U);rJe=r(LRr,"wav2vec2"),LRr.forEach(t),tJe=r(N7e," \u2014 "),ek=n(N7e,"A",{href:!0});var BRr=s(ek);aJe=r(BRr,"Wav2Vec2CTCTokenizer"),BRr.forEach(t),nJe=r(N7e," (Wav2Vec2 model)"),N7e.forEach(t),sJe=i(y),Vg=n(y,"LI",{});var q7e=s(Vg);IU=n(q7e,"STRONG",{});var xRr=s(IU);lJe=r(xRr,"wav2vec2_phoneme"),xRr.forEach(t),iJe=r(q7e," \u2014 "),ok=n(q7e,"A",{href:!0});var kRr=s(ok);dJe=r(kRr,"Wav2Vec2PhonemeCTCTokenizer"),kRr.forEach(t),cJe=r(q7e," (Wav2Vec2Phoneme model)"),q7e.forEach(t),fJe=i(y),xs=n(y,"LI",{});var Z0=s(xs);DU=n(Z0,"STRONG",{});var RRr=s(DU);mJe=r(RRr,"xglm"),RRr.forEach(t),gJe=r(Z0," \u2014 "),rk=n(Z0,"A",{href:!0});var SRr=s(rk);hJe=r(SRr,"XGLMTokenizer"),SRr.forEach(t),pJe=r(Z0," or "),tk=n(Z0,"A",{href:!0});var PRr=s(tk);_Je=r(PRr,"XGLMTokenizerFast"),PRr.forEach(t),uJe=r(Z0," (XGLM model)"),Z0.forEach(t),bJe=i(y),zg=n(y,"LI",{});var G7e=s(zg);jU=n(G7e,"STRONG",{});var $Rr=s(jU);vJe=r($Rr,"xlm"),$Rr.forEach(t),TJe=r(G7e," \u2014 "),ak=n(G7e,"A",{href:!0});var IRr=s(ak);FJe=r(IRr,"XLMTokenizer"),IRr.forEach(t),CJe=r(G7e," (XLM model)"),G7e.forEach(t),MJe=i(y),Wg=n(y,"LI",{});var O7e=s(Wg);NU=n(O7e,"STRONG",{});var DRr=s(NU);EJe=r(DRr,"xlm-prophetnet"),DRr.forEach(t),yJe=r(O7e," \u2014 "),nk=n(O7e,"A",{href:!0});var jRr=s(nk);wJe=r(jRr,"XLMProphetNetTokenizer"),jRr.forEach(t),AJe=r(O7e," (XLMProphetNet model)"),O7e.forEach(t),LJe=i(y),ks=n(y,"LI",{});var eL=s(ks);qU=n(eL,"STRONG",{});var NRr=s(qU);BJe=r(NRr,"xlm-roberta"),NRr.forEach(t),xJe=r(eL," \u2014 "),sk=n(eL,"A",{href:!0});var qRr=s(sk);kJe=r(qRr,"XLMRobertaTokenizer"),qRr.forEach(t),RJe=r(eL," or "),lk=n(eL,"A",{href:!0});var GRr=s(lk);SJe=r(GRr,"XLMRobertaTokenizerFast"),GRr.forEach(t),PJe=r(eL," (XLM-RoBERTa model)"),eL.forEach(t),$Je=i(y),Rs=n(y,"LI",{});var oL=s(Rs);GU=n(oL,"STRONG",{});var ORr=s(GU);IJe=r(ORr,"xlnet"),ORr.forEach(t),DJe=r(oL," \u2014 "),ik=n(oL,"A",{href:!0});var XRr=s(ik);jJe=r(XRr,"XLNetTokenizer"),XRr.forEach(t),NJe=r(oL," or "),dk=n(oL,"A",{href:!0});var VRr=s(dk);qJe=r(VRr,"XLNetTokenizerFast"),VRr.forEach(t),GJe=r(oL," (XLNet model)"),oL.forEach(t),y.forEach(t),OJe=i(da),OU=n(da,"P",{});var zRr=s(OU);XJe=r(zRr,"Examples:"),zRr.forEach(t),VJe=i(da),m(jM.$$.fragment,da),da.forEach(t),zJe=i(Ds),Qg=n(Ds,"DIV",{class:!0});var Lxe=s(Qg);m(NM.$$.fragment,Lxe),WJe=i(Lxe),XU=n(Lxe,"P",{});var WRr=s(XU);QJe=r(WRr,"Register a new tokenizer in this mapping."),WRr.forEach(t),Lxe.forEach(t),Ds.forEach(t),w8e=i(c),Ni=n(c,"H2",{class:!0});var Bxe=s(Ni);Hg=n(Bxe,"A",{id:!0,class:!0,href:!0});var QRr=s(Hg);VU=n(QRr,"SPAN",{});var HRr=s(VU);m(qM.$$.fragment,HRr),HRr.forEach(t),QRr.forEach(t),HJe=i(Bxe),zU=n(Bxe,"SPAN",{});var URr=s(zU);UJe=r(URr,"AutoFeatureExtractor"),URr.forEach(t),Bxe.forEach(t),A8e=i(c),zo=n(c,"DIV",{class:!0});var js=s(zo);m(GM.$$.fragment,js),JJe=i(js),OM=n(js,"P",{});var xxe=s(OM);YJe=r(xxe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ck=n(xxe,"A",{href:!0});var JRr=s(ck);KJe=r(JRr,"AutoFeatureExtractor.from_pretrained()"),JRr.forEach(t),ZJe=r(xxe," class method."),xxe.forEach(t),eYe=i(js),XM=n(js,"P",{});var kxe=s(XM);oYe=r(kxe,"This class cannot be instantiated directly using "),WU=n(kxe,"CODE",{});var YRr=s(WU);rYe=r(YRr,"__init__()"),YRr.forEach(t),tYe=r(kxe," (throws an error)."),kxe.forEach(t),aYe=i(js),xe=n(js,"DIV",{class:!0});var St=s(xe);m(VM.$$.fragment,St),nYe=i(St),QU=n(St,"P",{});var KRr=s(QU);sYe=r(KRr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KRr.forEach(t),lYe=i(St),ja=n(St,"P",{});var M4=s(ja);iYe=r(M4,"The feature extractor class to instantiate is selected based on the "),HU=n(M4,"CODE",{});var ZRr=s(HU);dYe=r(ZRr,"model_type"),ZRr.forEach(t),cYe=r(M4,` property of the config object
(either passed as an argument or loaded from `),UU=n(M4,"CODE",{});var eSr=s(UU);fYe=r(eSr,"pretrained_model_name_or_path"),eSr.forEach(t),mYe=r(M4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),JU=n(M4,"CODE",{});var oSr=s(JU);gYe=r(oSr,"pretrained_model_name_or_path"),oSr.forEach(t),hYe=r(M4,":"),M4.forEach(t),pYe=i(St),se=n(St,"UL",{});var de=s(se);Ug=n(de,"LI",{});var X7e=s(Ug);YU=n(X7e,"STRONG",{});var rSr=s(YU);_Ye=r(rSr,"beit"),rSr.forEach(t),uYe=r(X7e," \u2014 "),fk=n(X7e,"A",{href:!0});var tSr=s(fk);bYe=r(tSr,"BeitFeatureExtractor"),tSr.forEach(t),vYe=r(X7e," (BEiT model)"),X7e.forEach(t),TYe=i(de),Jg=n(de,"LI",{});var V7e=s(Jg);KU=n(V7e,"STRONG",{});var aSr=s(KU);FYe=r(aSr,"clip"),aSr.forEach(t),CYe=r(V7e," \u2014 "),mk=n(V7e,"A",{href:!0});var nSr=s(mk);MYe=r(nSr,"CLIPFeatureExtractor"),nSr.forEach(t),EYe=r(V7e," (CLIP model)"),V7e.forEach(t),yYe=i(de),Yg=n(de,"LI",{});var z7e=s(Yg);ZU=n(z7e,"STRONG",{});var sSr=s(ZU);wYe=r(sSr,"convnext"),sSr.forEach(t),AYe=r(z7e," \u2014 "),gk=n(z7e,"A",{href:!0});var lSr=s(gk);LYe=r(lSr,"ConvNextFeatureExtractor"),lSr.forEach(t),BYe=r(z7e," (ConvNext model)"),z7e.forEach(t),xYe=i(de),Kg=n(de,"LI",{});var W7e=s(Kg);eJ=n(W7e,"STRONG",{});var iSr=s(eJ);kYe=r(iSr,"deit"),iSr.forEach(t),RYe=r(W7e," \u2014 "),hk=n(W7e,"A",{href:!0});var dSr=s(hk);SYe=r(dSr,"DeiTFeatureExtractor"),dSr.forEach(t),PYe=r(W7e," (DeiT model)"),W7e.forEach(t),$Ye=i(de),Zg=n(de,"LI",{});var Q7e=s(Zg);oJ=n(Q7e,"STRONG",{});var cSr=s(oJ);IYe=r(cSr,"detr"),cSr.forEach(t),DYe=r(Q7e," \u2014 "),pk=n(Q7e,"A",{href:!0});var fSr=s(pk);jYe=r(fSr,"DetrFeatureExtractor"),fSr.forEach(t),NYe=r(Q7e," (DETR model)"),Q7e.forEach(t),qYe=i(de),eh=n(de,"LI",{});var H7e=s(eh);rJ=n(H7e,"STRONG",{});var mSr=s(rJ);GYe=r(mSr,"hubert"),mSr.forEach(t),OYe=r(H7e," \u2014 "),_k=n(H7e,"A",{href:!0});var gSr=s(_k);XYe=r(gSr,"Wav2Vec2FeatureExtractor"),gSr.forEach(t),VYe=r(H7e," (Hubert model)"),H7e.forEach(t),zYe=i(de),oh=n(de,"LI",{});var U7e=s(oh);tJ=n(U7e,"STRONG",{});var hSr=s(tJ);WYe=r(hSr,"layoutlmv2"),hSr.forEach(t),QYe=r(U7e," \u2014 "),uk=n(U7e,"A",{href:!0});var pSr=s(uk);HYe=r(pSr,"LayoutLMv2FeatureExtractor"),pSr.forEach(t),UYe=r(U7e," (LayoutLMv2 model)"),U7e.forEach(t),JYe=i(de),rh=n(de,"LI",{});var J7e=s(rh);aJ=n(J7e,"STRONG",{});var _Sr=s(aJ);YYe=r(_Sr,"perceiver"),_Sr.forEach(t),KYe=r(J7e," \u2014 "),bk=n(J7e,"A",{href:!0});var uSr=s(bk);ZYe=r(uSr,"PerceiverFeatureExtractor"),uSr.forEach(t),eKe=r(J7e," (Perceiver model)"),J7e.forEach(t),oKe=i(de),th=n(de,"LI",{});var Y7e=s(th);nJ=n(Y7e,"STRONG",{});var bSr=s(nJ);rKe=r(bSr,"poolformer"),bSr.forEach(t),tKe=r(Y7e," \u2014 "),vk=n(Y7e,"A",{href:!0});var vSr=s(vk);aKe=r(vSr,"PoolFormerFeatureExtractor"),vSr.forEach(t),nKe=r(Y7e," (PoolFormer model)"),Y7e.forEach(t),sKe=i(de),ah=n(de,"LI",{});var K7e=s(ah);sJ=n(K7e,"STRONG",{});var TSr=s(sJ);lKe=r(TSr,"segformer"),TSr.forEach(t),iKe=r(K7e," \u2014 "),Tk=n(K7e,"A",{href:!0});var FSr=s(Tk);dKe=r(FSr,"SegformerFeatureExtractor"),FSr.forEach(t),cKe=r(K7e," (SegFormer model)"),K7e.forEach(t),fKe=i(de),nh=n(de,"LI",{});var Z7e=s(nh);lJ=n(Z7e,"STRONG",{});var CSr=s(lJ);mKe=r(CSr,"speech_to_text"),CSr.forEach(t),gKe=r(Z7e," \u2014 "),Fk=n(Z7e,"A",{href:!0});var MSr=s(Fk);hKe=r(MSr,"Speech2TextFeatureExtractor"),MSr.forEach(t),pKe=r(Z7e," (Speech2Text model)"),Z7e.forEach(t),_Ke=i(de),sh=n(de,"LI",{});var eFe=s(sh);iJ=n(eFe,"STRONG",{});var ESr=s(iJ);uKe=r(ESr,"swin"),ESr.forEach(t),bKe=r(eFe," \u2014 "),Ck=n(eFe,"A",{href:!0});var ySr=s(Ck);vKe=r(ySr,"ViTFeatureExtractor"),ySr.forEach(t),TKe=r(eFe," (Swin model)"),eFe.forEach(t),FKe=i(de),lh=n(de,"LI",{});var oFe=s(lh);dJ=n(oFe,"STRONG",{});var wSr=s(dJ);CKe=r(wSr,"vit"),wSr.forEach(t),MKe=r(oFe," \u2014 "),Mk=n(oFe,"A",{href:!0});var ASr=s(Mk);EKe=r(ASr,"ViTFeatureExtractor"),ASr.forEach(t),yKe=r(oFe," (ViT model)"),oFe.forEach(t),wKe=i(de),ih=n(de,"LI",{});var rFe=s(ih);cJ=n(rFe,"STRONG",{});var LSr=s(cJ);AKe=r(LSr,"vit_mae"),LSr.forEach(t),LKe=r(rFe," \u2014 "),Ek=n(rFe,"A",{href:!0});var BSr=s(Ek);BKe=r(BSr,"ViTFeatureExtractor"),BSr.forEach(t),xKe=r(rFe," (ViTMAE model)"),rFe.forEach(t),kKe=i(de),dh=n(de,"LI",{});var tFe=s(dh);fJ=n(tFe,"STRONG",{});var xSr=s(fJ);RKe=r(xSr,"wav2vec2"),xSr.forEach(t),SKe=r(tFe," \u2014 "),yk=n(tFe,"A",{href:!0});var kSr=s(yk);PKe=r(kSr,"Wav2Vec2FeatureExtractor"),kSr.forEach(t),$Ke=r(tFe," (Wav2Vec2 model)"),tFe.forEach(t),de.forEach(t),IKe=i(St),m(ch.$$.fragment,St),DKe=i(St),mJ=n(St,"P",{});var RSr=s(mJ);jKe=r(RSr,"Examples:"),RSr.forEach(t),NKe=i(St),m(zM.$$.fragment,St),St.forEach(t),qKe=i(js),fh=n(js,"DIV",{class:!0});var Rxe=s(fh);m(WM.$$.fragment,Rxe),GKe=i(Rxe),gJ=n(Rxe,"P",{});var SSr=s(gJ);OKe=r(SSr,"Register a new feature extractor for this class."),SSr.forEach(t),Rxe.forEach(t),js.forEach(t),L8e=i(c),qi=n(c,"H2",{class:!0});var Sxe=s(qi);mh=n(Sxe,"A",{id:!0,class:!0,href:!0});var PSr=s(mh);hJ=n(PSr,"SPAN",{});var $Sr=s(hJ);m(QM.$$.fragment,$Sr),$Sr.forEach(t),PSr.forEach(t),XKe=i(Sxe),pJ=n(Sxe,"SPAN",{});var ISr=s(pJ);VKe=r(ISr,"AutoProcessor"),ISr.forEach(t),Sxe.forEach(t),B8e=i(c),Wo=n(c,"DIV",{class:!0});var Ns=s(Wo);m(HM.$$.fragment,Ns),zKe=i(Ns),UM=n(Ns,"P",{});var Pxe=s(UM);WKe=r(Pxe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wk=n(Pxe,"A",{href:!0});var DSr=s(wk);QKe=r(DSr,"AutoProcessor.from_pretrained()"),DSr.forEach(t),HKe=r(Pxe," class method."),Pxe.forEach(t),UKe=i(Ns),JM=n(Ns,"P",{});var $xe=s(JM);JKe=r($xe,"This class cannot be instantiated directly using "),_J=n($xe,"CODE",{});var jSr=s(_J);YKe=r(jSr,"__init__()"),jSr.forEach(t),KKe=r($xe," (throws an error)."),$xe.forEach(t),ZKe=i(Ns),ke=n(Ns,"DIV",{class:!0});var Pt=s(ke);m(YM.$$.fragment,Pt),eZe=i(Pt),uJ=n(Pt,"P",{});var NSr=s(uJ);oZe=r(NSr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),NSr.forEach(t),rZe=i(Pt),Gi=n(Pt,"P",{});var LV=s(Gi);tZe=r(LV,"The processor class to instantiate is selected based on the "),bJ=n(LV,"CODE",{});var qSr=s(bJ);aZe=r(qSr,"model_type"),qSr.forEach(t),nZe=r(LV,` property of the config object (either
passed as an argument or loaded from `),vJ=n(LV,"CODE",{});var GSr=s(vJ);sZe=r(GSr,"pretrained_model_name_or_path"),GSr.forEach(t),lZe=r(LV," if possible):"),LV.forEach(t),iZe=i(Pt),we=n(Pt,"UL",{});var jo=s(we);gh=n(jo,"LI",{});var aFe=s(gh);TJ=n(aFe,"STRONG",{});var OSr=s(TJ);dZe=r(OSr,"clip"),OSr.forEach(t),cZe=r(aFe," \u2014 "),Ak=n(aFe,"A",{href:!0});var XSr=s(Ak);fZe=r(XSr,"CLIPProcessor"),XSr.forEach(t),mZe=r(aFe," (CLIP model)"),aFe.forEach(t),gZe=i(jo),hh=n(jo,"LI",{});var nFe=s(hh);FJ=n(nFe,"STRONG",{});var VSr=s(FJ);hZe=r(VSr,"layoutlmv2"),VSr.forEach(t),pZe=r(nFe," \u2014 "),Lk=n(nFe,"A",{href:!0});var zSr=s(Lk);_Ze=r(zSr,"LayoutLMv2Processor"),zSr.forEach(t),uZe=r(nFe," (LayoutLMv2 model)"),nFe.forEach(t),bZe=i(jo),ph=n(jo,"LI",{});var sFe=s(ph);CJ=n(sFe,"STRONG",{});var WSr=s(CJ);vZe=r(WSr,"layoutxlm"),WSr.forEach(t),TZe=r(sFe," \u2014 "),Bk=n(sFe,"A",{href:!0});var QSr=s(Bk);FZe=r(QSr,"LayoutXLMProcessor"),QSr.forEach(t),CZe=r(sFe," (LayoutXLM model)"),sFe.forEach(t),MZe=i(jo),_h=n(jo,"LI",{});var lFe=s(_h);MJ=n(lFe,"STRONG",{});var HSr=s(MJ);EZe=r(HSr,"speech_to_text"),HSr.forEach(t),yZe=r(lFe," \u2014 "),xk=n(lFe,"A",{href:!0});var USr=s(xk);wZe=r(USr,"Speech2TextProcessor"),USr.forEach(t),AZe=r(lFe," (Speech2Text model)"),lFe.forEach(t),LZe=i(jo),uh=n(jo,"LI",{});var iFe=s(uh);EJ=n(iFe,"STRONG",{});var JSr=s(EJ);BZe=r(JSr,"speech_to_text_2"),JSr.forEach(t),xZe=r(iFe," \u2014 "),kk=n(iFe,"A",{href:!0});var YSr=s(kk);kZe=r(YSr,"Speech2Text2Processor"),YSr.forEach(t),RZe=r(iFe," (Speech2Text2 model)"),iFe.forEach(t),SZe=i(jo),bh=n(jo,"LI",{});var dFe=s(bh);yJ=n(dFe,"STRONG",{});var KSr=s(yJ);PZe=r(KSr,"trocr"),KSr.forEach(t),$Ze=r(dFe," \u2014 "),Rk=n(dFe,"A",{href:!0});var ZSr=s(Rk);IZe=r(ZSr,"TrOCRProcessor"),ZSr.forEach(t),DZe=r(dFe," (TrOCR model)"),dFe.forEach(t),jZe=i(jo),vh=n(jo,"LI",{});var cFe=s(vh);wJ=n(cFe,"STRONG",{});var ePr=s(wJ);NZe=r(ePr,"vision-text-dual-encoder"),ePr.forEach(t),qZe=r(cFe," \u2014 "),Sk=n(cFe,"A",{href:!0});var oPr=s(Sk);GZe=r(oPr,"VisionTextDualEncoderProcessor"),oPr.forEach(t),OZe=r(cFe," (VisionTextDualEncoder model)"),cFe.forEach(t),XZe=i(jo),Th=n(jo,"LI",{});var fFe=s(Th);AJ=n(fFe,"STRONG",{});var rPr=s(AJ);VZe=r(rPr,"wav2vec2"),rPr.forEach(t),zZe=r(fFe," \u2014 "),Pk=n(fFe,"A",{href:!0});var tPr=s(Pk);WZe=r(tPr,"Wav2Vec2Processor"),tPr.forEach(t),QZe=r(fFe," (Wav2Vec2 model)"),fFe.forEach(t),jo.forEach(t),HZe=i(Pt),m(Fh.$$.fragment,Pt),UZe=i(Pt),LJ=n(Pt,"P",{});var aPr=s(LJ);JZe=r(aPr,"Examples:"),aPr.forEach(t),YZe=i(Pt),m(KM.$$.fragment,Pt),Pt.forEach(t),KZe=i(Ns),Ch=n(Ns,"DIV",{class:!0});var Ixe=s(Ch);m(ZM.$$.fragment,Ixe),ZZe=i(Ixe),BJ=n(Ixe,"P",{});var nPr=s(BJ);eeo=r(nPr,"Register a new processor for this class."),nPr.forEach(t),Ixe.forEach(t),Ns.forEach(t),x8e=i(c),Oi=n(c,"H2",{class:!0});var Dxe=s(Oi);Mh=n(Dxe,"A",{id:!0,class:!0,href:!0});var sPr=s(Mh);xJ=n(sPr,"SPAN",{});var lPr=s(xJ);m(eE.$$.fragment,lPr),lPr.forEach(t),sPr.forEach(t),oeo=i(Dxe),kJ=n(Dxe,"SPAN",{});var iPr=s(kJ);reo=r(iPr,"AutoModel"),iPr.forEach(t),Dxe.forEach(t),k8e=i(c),Qo=n(c,"DIV",{class:!0});var qs=s(Qo);m(oE.$$.fragment,qs),teo=i(qs),Xi=n(qs,"P",{});var BV=s(Xi);aeo=r(BV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RJ=n(BV,"CODE",{});var dPr=s(RJ);neo=r(dPr,"from_pretrained()"),dPr.forEach(t),seo=r(BV,"class method or the "),SJ=n(BV,"CODE",{});var cPr=s(SJ);leo=r(cPr,"from_config()"),cPr.forEach(t),ieo=r(BV,`class
method.`),BV.forEach(t),deo=i(qs),rE=n(qs,"P",{});var jxe=s(rE);ceo=r(jxe,"This class cannot be instantiated directly using "),PJ=n(jxe,"CODE",{});var fPr=s(PJ);feo=r(fPr,"__init__()"),fPr.forEach(t),meo=r(jxe," (throws an error)."),jxe.forEach(t),geo=i(qs),qr=n(qs,"DIV",{class:!0});var Gs=s(qr);m(tE.$$.fragment,Gs),heo=i(Gs),$J=n(Gs,"P",{});var mPr=s($J);peo=r(mPr,"Instantiates one of the base model classes of the library from a configuration."),mPr.forEach(t),_eo=i(Gs),Vi=n(Gs,"P",{});var xV=s(Vi);ueo=r(xV,`Note:
Loading a model from its configuration file does `),IJ=n(xV,"STRONG",{});var gPr=s(IJ);beo=r(gPr,"not"),gPr.forEach(t),veo=r(xV,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(xV,"CODE",{});var hPr=s(DJ);Teo=r(hPr,"from_pretrained()"),hPr.forEach(t),Feo=r(xV,"to load the model weights."),xV.forEach(t),Ceo=i(Gs),jJ=n(Gs,"P",{});var pPr=s(jJ);Meo=r(pPr,"Examples:"),pPr.forEach(t),Eeo=i(Gs),m(aE.$$.fragment,Gs),Gs.forEach(t),yeo=i(qs),Re=n(qs,"DIV",{class:!0});var $t=s(Re);m(nE.$$.fragment,$t),weo=i($t),NJ=n($t,"P",{});var _Pr=s(NJ);Aeo=r(_Pr,"Instantiate one of the base model classes of the library from a pretrained model."),_Pr.forEach(t),Leo=i($t),Na=n($t,"P",{});var E4=s(Na);Beo=r(E4,"The model class to instantiate is selected based on the "),qJ=n(E4,"CODE",{});var uPr=s(qJ);xeo=r(uPr,"model_type"),uPr.forEach(t),keo=r(E4,` property of the config object (either
passed as an argument or loaded from `),GJ=n(E4,"CODE",{});var bPr=s(GJ);Reo=r(bPr,"pretrained_model_name_or_path"),bPr.forEach(t),Seo=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OJ=n(E4,"CODE",{});var vPr=s(OJ);Peo=r(vPr,"pretrained_model_name_or_path"),vPr.forEach(t),$eo=r(E4,":"),E4.forEach(t),Ieo=i($t),F=n($t,"UL",{});var C=s(F);Eh=n(C,"LI",{});var mFe=s(Eh);XJ=n(mFe,"STRONG",{});var TPr=s(XJ);Deo=r(TPr,"albert"),TPr.forEach(t),jeo=r(mFe," \u2014 "),$k=n(mFe,"A",{href:!0});var FPr=s($k);Neo=r(FPr,"AlbertModel"),FPr.forEach(t),qeo=r(mFe," (ALBERT model)"),mFe.forEach(t),Geo=i(C),yh=n(C,"LI",{});var gFe=s(yh);VJ=n(gFe,"STRONG",{});var CPr=s(VJ);Oeo=r(CPr,"bart"),CPr.forEach(t),Xeo=r(gFe," \u2014 "),Ik=n(gFe,"A",{href:!0});var MPr=s(Ik);Veo=r(MPr,"BartModel"),MPr.forEach(t),zeo=r(gFe," (BART model)"),gFe.forEach(t),Weo=i(C),wh=n(C,"LI",{});var hFe=s(wh);zJ=n(hFe,"STRONG",{});var EPr=s(zJ);Qeo=r(EPr,"beit"),EPr.forEach(t),Heo=r(hFe," \u2014 "),Dk=n(hFe,"A",{href:!0});var yPr=s(Dk);Ueo=r(yPr,"BeitModel"),yPr.forEach(t),Jeo=r(hFe," (BEiT model)"),hFe.forEach(t),Yeo=i(C),Ah=n(C,"LI",{});var pFe=s(Ah);WJ=n(pFe,"STRONG",{});var wPr=s(WJ);Keo=r(wPr,"bert"),wPr.forEach(t),Zeo=r(pFe," \u2014 "),jk=n(pFe,"A",{href:!0});var APr=s(jk);eoo=r(APr,"BertModel"),APr.forEach(t),ooo=r(pFe," (BERT model)"),pFe.forEach(t),roo=i(C),Lh=n(C,"LI",{});var _Fe=s(Lh);QJ=n(_Fe,"STRONG",{});var LPr=s(QJ);too=r(LPr,"bert-generation"),LPr.forEach(t),aoo=r(_Fe," \u2014 "),Nk=n(_Fe,"A",{href:!0});var BPr=s(Nk);noo=r(BPr,"BertGenerationEncoder"),BPr.forEach(t),soo=r(_Fe," (Bert Generation model)"),_Fe.forEach(t),loo=i(C),Bh=n(C,"LI",{});var uFe=s(Bh);HJ=n(uFe,"STRONG",{});var xPr=s(HJ);ioo=r(xPr,"big_bird"),xPr.forEach(t),doo=r(uFe," \u2014 "),qk=n(uFe,"A",{href:!0});var kPr=s(qk);coo=r(kPr,"BigBirdModel"),kPr.forEach(t),foo=r(uFe," (BigBird model)"),uFe.forEach(t),moo=i(C),xh=n(C,"LI",{});var bFe=s(xh);UJ=n(bFe,"STRONG",{});var RPr=s(UJ);goo=r(RPr,"bigbird_pegasus"),RPr.forEach(t),hoo=r(bFe," \u2014 "),Gk=n(bFe,"A",{href:!0});var SPr=s(Gk);poo=r(SPr,"BigBirdPegasusModel"),SPr.forEach(t),_oo=r(bFe," (BigBirdPegasus model)"),bFe.forEach(t),uoo=i(C),kh=n(C,"LI",{});var vFe=s(kh);JJ=n(vFe,"STRONG",{});var PPr=s(JJ);boo=r(PPr,"blenderbot"),PPr.forEach(t),voo=r(vFe," \u2014 "),Ok=n(vFe,"A",{href:!0});var $Pr=s(Ok);Too=r($Pr,"BlenderbotModel"),$Pr.forEach(t),Foo=r(vFe," (Blenderbot model)"),vFe.forEach(t),Coo=i(C),Rh=n(C,"LI",{});var TFe=s(Rh);YJ=n(TFe,"STRONG",{});var IPr=s(YJ);Moo=r(IPr,"blenderbot-small"),IPr.forEach(t),Eoo=r(TFe," \u2014 "),Xk=n(TFe,"A",{href:!0});var DPr=s(Xk);yoo=r(DPr,"BlenderbotSmallModel"),DPr.forEach(t),woo=r(TFe," (BlenderbotSmall model)"),TFe.forEach(t),Aoo=i(C),Sh=n(C,"LI",{});var FFe=s(Sh);KJ=n(FFe,"STRONG",{});var jPr=s(KJ);Loo=r(jPr,"camembert"),jPr.forEach(t),Boo=r(FFe," \u2014 "),Vk=n(FFe,"A",{href:!0});var NPr=s(Vk);xoo=r(NPr,"CamembertModel"),NPr.forEach(t),koo=r(FFe," (CamemBERT model)"),FFe.forEach(t),Roo=i(C),Ph=n(C,"LI",{});var CFe=s(Ph);ZJ=n(CFe,"STRONG",{});var qPr=s(ZJ);Soo=r(qPr,"canine"),qPr.forEach(t),Poo=r(CFe," \u2014 "),zk=n(CFe,"A",{href:!0});var GPr=s(zk);$oo=r(GPr,"CanineModel"),GPr.forEach(t),Ioo=r(CFe," (Canine model)"),CFe.forEach(t),Doo=i(C),$h=n(C,"LI",{});var MFe=s($h);eY=n(MFe,"STRONG",{});var OPr=s(eY);joo=r(OPr,"clip"),OPr.forEach(t),Noo=r(MFe," \u2014 "),Wk=n(MFe,"A",{href:!0});var XPr=s(Wk);qoo=r(XPr,"CLIPModel"),XPr.forEach(t),Goo=r(MFe," (CLIP model)"),MFe.forEach(t),Ooo=i(C),Ih=n(C,"LI",{});var EFe=s(Ih);oY=n(EFe,"STRONG",{});var VPr=s(oY);Xoo=r(VPr,"convbert"),VPr.forEach(t),Voo=r(EFe," \u2014 "),Qk=n(EFe,"A",{href:!0});var zPr=s(Qk);zoo=r(zPr,"ConvBertModel"),zPr.forEach(t),Woo=r(EFe," (ConvBERT model)"),EFe.forEach(t),Qoo=i(C),Dh=n(C,"LI",{});var yFe=s(Dh);rY=n(yFe,"STRONG",{});var WPr=s(rY);Hoo=r(WPr,"convnext"),WPr.forEach(t),Uoo=r(yFe," \u2014 "),Hk=n(yFe,"A",{href:!0});var QPr=s(Hk);Joo=r(QPr,"ConvNextModel"),QPr.forEach(t),Yoo=r(yFe," (ConvNext model)"),yFe.forEach(t),Koo=i(C),jh=n(C,"LI",{});var wFe=s(jh);tY=n(wFe,"STRONG",{});var HPr=s(tY);Zoo=r(HPr,"ctrl"),HPr.forEach(t),ero=r(wFe," \u2014 "),Uk=n(wFe,"A",{href:!0});var UPr=s(Uk);oro=r(UPr,"CTRLModel"),UPr.forEach(t),rro=r(wFe," (CTRL model)"),wFe.forEach(t),tro=i(C),Nh=n(C,"LI",{});var AFe=s(Nh);aY=n(AFe,"STRONG",{});var JPr=s(aY);aro=r(JPr,"data2vec-audio"),JPr.forEach(t),nro=r(AFe," \u2014 "),Jk=n(AFe,"A",{href:!0});var YPr=s(Jk);sro=r(YPr,"Data2VecAudioModel"),YPr.forEach(t),lro=r(AFe," (Data2VecAudio model)"),AFe.forEach(t),iro=i(C),qh=n(C,"LI",{});var LFe=s(qh);nY=n(LFe,"STRONG",{});var KPr=s(nY);dro=r(KPr,"data2vec-text"),KPr.forEach(t),cro=r(LFe," \u2014 "),Yk=n(LFe,"A",{href:!0});var ZPr=s(Yk);fro=r(ZPr,"Data2VecTextModel"),ZPr.forEach(t),mro=r(LFe," (Data2VecText model)"),LFe.forEach(t),gro=i(C),Gh=n(C,"LI",{});var BFe=s(Gh);sY=n(BFe,"STRONG",{});var e$r=s(sY);hro=r(e$r,"deberta"),e$r.forEach(t),pro=r(BFe," \u2014 "),Kk=n(BFe,"A",{href:!0});var o$r=s(Kk);_ro=r(o$r,"DebertaModel"),o$r.forEach(t),uro=r(BFe," (DeBERTa model)"),BFe.forEach(t),bro=i(C),Oh=n(C,"LI",{});var xFe=s(Oh);lY=n(xFe,"STRONG",{});var r$r=s(lY);vro=r(r$r,"deberta-v2"),r$r.forEach(t),Tro=r(xFe," \u2014 "),Zk=n(xFe,"A",{href:!0});var t$r=s(Zk);Fro=r(t$r,"DebertaV2Model"),t$r.forEach(t),Cro=r(xFe," (DeBERTa-v2 model)"),xFe.forEach(t),Mro=i(C),Xh=n(C,"LI",{});var kFe=s(Xh);iY=n(kFe,"STRONG",{});var a$r=s(iY);Ero=r(a$r,"deit"),a$r.forEach(t),yro=r(kFe," \u2014 "),eR=n(kFe,"A",{href:!0});var n$r=s(eR);wro=r(n$r,"DeiTModel"),n$r.forEach(t),Aro=r(kFe," (DeiT model)"),kFe.forEach(t),Lro=i(C),Vh=n(C,"LI",{});var RFe=s(Vh);dY=n(RFe,"STRONG",{});var s$r=s(dY);Bro=r(s$r,"detr"),s$r.forEach(t),xro=r(RFe," \u2014 "),oR=n(RFe,"A",{href:!0});var l$r=s(oR);kro=r(l$r,"DetrModel"),l$r.forEach(t),Rro=r(RFe," (DETR model)"),RFe.forEach(t),Sro=i(C),zh=n(C,"LI",{});var SFe=s(zh);cY=n(SFe,"STRONG",{});var i$r=s(cY);Pro=r(i$r,"distilbert"),i$r.forEach(t),$ro=r(SFe," \u2014 "),rR=n(SFe,"A",{href:!0});var d$r=s(rR);Iro=r(d$r,"DistilBertModel"),d$r.forEach(t),Dro=r(SFe," (DistilBERT model)"),SFe.forEach(t),jro=i(C),Wh=n(C,"LI",{});var PFe=s(Wh);fY=n(PFe,"STRONG",{});var c$r=s(fY);Nro=r(c$r,"dpr"),c$r.forEach(t),qro=r(PFe," \u2014 "),tR=n(PFe,"A",{href:!0});var f$r=s(tR);Gro=r(f$r,"DPRQuestionEncoder"),f$r.forEach(t),Oro=r(PFe," (DPR model)"),PFe.forEach(t),Xro=i(C),Qh=n(C,"LI",{});var $Fe=s(Qh);mY=n($Fe,"STRONG",{});var m$r=s(mY);Vro=r(m$r,"electra"),m$r.forEach(t),zro=r($Fe," \u2014 "),aR=n($Fe,"A",{href:!0});var g$r=s(aR);Wro=r(g$r,"ElectraModel"),g$r.forEach(t),Qro=r($Fe," (ELECTRA model)"),$Fe.forEach(t),Hro=i(C),Hh=n(C,"LI",{});var IFe=s(Hh);gY=n(IFe,"STRONG",{});var h$r=s(gY);Uro=r(h$r,"flaubert"),h$r.forEach(t),Jro=r(IFe," \u2014 "),nR=n(IFe,"A",{href:!0});var p$r=s(nR);Yro=r(p$r,"FlaubertModel"),p$r.forEach(t),Kro=r(IFe," (FlauBERT model)"),IFe.forEach(t),Zro=i(C),Uh=n(C,"LI",{});var DFe=s(Uh);hY=n(DFe,"STRONG",{});var _$r=s(hY);eto=r(_$r,"fnet"),_$r.forEach(t),oto=r(DFe," \u2014 "),sR=n(DFe,"A",{href:!0});var u$r=s(sR);rto=r(u$r,"FNetModel"),u$r.forEach(t),tto=r(DFe," (FNet model)"),DFe.forEach(t),ato=i(C),Jh=n(C,"LI",{});var jFe=s(Jh);pY=n(jFe,"STRONG",{});var b$r=s(pY);nto=r(b$r,"fsmt"),b$r.forEach(t),sto=r(jFe," \u2014 "),lR=n(jFe,"A",{href:!0});var v$r=s(lR);lto=r(v$r,"FSMTModel"),v$r.forEach(t),ito=r(jFe," (FairSeq Machine-Translation model)"),jFe.forEach(t),dto=i(C),Ss=n(C,"LI",{});var rL=s(Ss);_Y=n(rL,"STRONG",{});var T$r=s(_Y);cto=r(T$r,"funnel"),T$r.forEach(t),fto=r(rL," \u2014 "),iR=n(rL,"A",{href:!0});var F$r=s(iR);mto=r(F$r,"FunnelModel"),F$r.forEach(t),gto=r(rL," or "),dR=n(rL,"A",{href:!0});var C$r=s(dR);hto=r(C$r,"FunnelBaseModel"),C$r.forEach(t),pto=r(rL," (Funnel Transformer model)"),rL.forEach(t),_to=i(C),Yh=n(C,"LI",{});var NFe=s(Yh);uY=n(NFe,"STRONG",{});var M$r=s(uY);uto=r(M$r,"gpt2"),M$r.forEach(t),bto=r(NFe," \u2014 "),cR=n(NFe,"A",{href:!0});var E$r=s(cR);vto=r(E$r,"GPT2Model"),E$r.forEach(t),Tto=r(NFe," (OpenAI GPT-2 model)"),NFe.forEach(t),Fto=i(C),Kh=n(C,"LI",{});var qFe=s(Kh);bY=n(qFe,"STRONG",{});var y$r=s(bY);Cto=r(y$r,"gpt_neo"),y$r.forEach(t),Mto=r(qFe," \u2014 "),fR=n(qFe,"A",{href:!0});var w$r=s(fR);Eto=r(w$r,"GPTNeoModel"),w$r.forEach(t),yto=r(qFe," (GPT Neo model)"),qFe.forEach(t),wto=i(C),Zh=n(C,"LI",{});var GFe=s(Zh);vY=n(GFe,"STRONG",{});var A$r=s(vY);Ato=r(A$r,"gptj"),A$r.forEach(t),Lto=r(GFe," \u2014 "),mR=n(GFe,"A",{href:!0});var L$r=s(mR);Bto=r(L$r,"GPTJModel"),L$r.forEach(t),xto=r(GFe," (GPT-J model)"),GFe.forEach(t),kto=i(C),ep=n(C,"LI",{});var OFe=s(ep);TY=n(OFe,"STRONG",{});var B$r=s(TY);Rto=r(B$r,"hubert"),B$r.forEach(t),Sto=r(OFe," \u2014 "),gR=n(OFe,"A",{href:!0});var x$r=s(gR);Pto=r(x$r,"HubertModel"),x$r.forEach(t),$to=r(OFe," (Hubert model)"),OFe.forEach(t),Ito=i(C),op=n(C,"LI",{});var XFe=s(op);FY=n(XFe,"STRONG",{});var k$r=s(FY);Dto=r(k$r,"ibert"),k$r.forEach(t),jto=r(XFe," \u2014 "),hR=n(XFe,"A",{href:!0});var R$r=s(hR);Nto=r(R$r,"IBertModel"),R$r.forEach(t),qto=r(XFe," (I-BERT model)"),XFe.forEach(t),Gto=i(C),rp=n(C,"LI",{});var VFe=s(rp);CY=n(VFe,"STRONG",{});var S$r=s(CY);Oto=r(S$r,"imagegpt"),S$r.forEach(t),Xto=r(VFe," \u2014 "),pR=n(VFe,"A",{href:!0});var P$r=s(pR);Vto=r(P$r,"ImageGPTModel"),P$r.forEach(t),zto=r(VFe," (ImageGPT model)"),VFe.forEach(t),Wto=i(C),tp=n(C,"LI",{});var zFe=s(tp);MY=n(zFe,"STRONG",{});var $$r=s(MY);Qto=r($$r,"layoutlm"),$$r.forEach(t),Hto=r(zFe," \u2014 "),_R=n(zFe,"A",{href:!0});var I$r=s(_R);Uto=r(I$r,"LayoutLMModel"),I$r.forEach(t),Jto=r(zFe," (LayoutLM model)"),zFe.forEach(t),Yto=i(C),ap=n(C,"LI",{});var WFe=s(ap);EY=n(WFe,"STRONG",{});var D$r=s(EY);Kto=r(D$r,"layoutlmv2"),D$r.forEach(t),Zto=r(WFe," \u2014 "),uR=n(WFe,"A",{href:!0});var j$r=s(uR);eao=r(j$r,"LayoutLMv2Model"),j$r.forEach(t),oao=r(WFe," (LayoutLMv2 model)"),WFe.forEach(t),rao=i(C),np=n(C,"LI",{});var QFe=s(np);yY=n(QFe,"STRONG",{});var N$r=s(yY);tao=r(N$r,"led"),N$r.forEach(t),aao=r(QFe," \u2014 "),bR=n(QFe,"A",{href:!0});var q$r=s(bR);nao=r(q$r,"LEDModel"),q$r.forEach(t),sao=r(QFe," (LED model)"),QFe.forEach(t),lao=i(C),sp=n(C,"LI",{});var HFe=s(sp);wY=n(HFe,"STRONG",{});var G$r=s(wY);iao=r(G$r,"longformer"),G$r.forEach(t),dao=r(HFe," \u2014 "),vR=n(HFe,"A",{href:!0});var O$r=s(vR);cao=r(O$r,"LongformerModel"),O$r.forEach(t),fao=r(HFe," (Longformer model)"),HFe.forEach(t),mao=i(C),lp=n(C,"LI",{});var UFe=s(lp);AY=n(UFe,"STRONG",{});var X$r=s(AY);gao=r(X$r,"luke"),X$r.forEach(t),hao=r(UFe," \u2014 "),TR=n(UFe,"A",{href:!0});var V$r=s(TR);pao=r(V$r,"LukeModel"),V$r.forEach(t),_ao=r(UFe," (LUKE model)"),UFe.forEach(t),uao=i(C),ip=n(C,"LI",{});var JFe=s(ip);LY=n(JFe,"STRONG",{});var z$r=s(LY);bao=r(z$r,"lxmert"),z$r.forEach(t),vao=r(JFe," \u2014 "),FR=n(JFe,"A",{href:!0});var W$r=s(FR);Tao=r(W$r,"LxmertModel"),W$r.forEach(t),Fao=r(JFe," (LXMERT model)"),JFe.forEach(t),Cao=i(C),dp=n(C,"LI",{});var YFe=s(dp);BY=n(YFe,"STRONG",{});var Q$r=s(BY);Mao=r(Q$r,"m2m_100"),Q$r.forEach(t),Eao=r(YFe," \u2014 "),CR=n(YFe,"A",{href:!0});var H$r=s(CR);yao=r(H$r,"M2M100Model"),H$r.forEach(t),wao=r(YFe," (M2M100 model)"),YFe.forEach(t),Aao=i(C),cp=n(C,"LI",{});var KFe=s(cp);xY=n(KFe,"STRONG",{});var U$r=s(xY);Lao=r(U$r,"marian"),U$r.forEach(t),Bao=r(KFe," \u2014 "),MR=n(KFe,"A",{href:!0});var J$r=s(MR);xao=r(J$r,"MarianModel"),J$r.forEach(t),kao=r(KFe," (Marian model)"),KFe.forEach(t),Rao=i(C),fp=n(C,"LI",{});var ZFe=s(fp);kY=n(ZFe,"STRONG",{});var Y$r=s(kY);Sao=r(Y$r,"mbart"),Y$r.forEach(t),Pao=r(ZFe," \u2014 "),ER=n(ZFe,"A",{href:!0});var K$r=s(ER);$ao=r(K$r,"MBartModel"),K$r.forEach(t),Iao=r(ZFe," (mBART model)"),ZFe.forEach(t),Dao=i(C),mp=n(C,"LI",{});var e9e=s(mp);RY=n(e9e,"STRONG",{});var Z$r=s(RY);jao=r(Z$r,"megatron-bert"),Z$r.forEach(t),Nao=r(e9e," \u2014 "),yR=n(e9e,"A",{href:!0});var eIr=s(yR);qao=r(eIr,"MegatronBertModel"),eIr.forEach(t),Gao=r(e9e," (MegatronBert model)"),e9e.forEach(t),Oao=i(C),gp=n(C,"LI",{});var o9e=s(gp);SY=n(o9e,"STRONG",{});var oIr=s(SY);Xao=r(oIr,"mobilebert"),oIr.forEach(t),Vao=r(o9e," \u2014 "),wR=n(o9e,"A",{href:!0});var rIr=s(wR);zao=r(rIr,"MobileBertModel"),rIr.forEach(t),Wao=r(o9e," (MobileBERT model)"),o9e.forEach(t),Qao=i(C),hp=n(C,"LI",{});var r9e=s(hp);PY=n(r9e,"STRONG",{});var tIr=s(PY);Hao=r(tIr,"mpnet"),tIr.forEach(t),Uao=r(r9e," \u2014 "),AR=n(r9e,"A",{href:!0});var aIr=s(AR);Jao=r(aIr,"MPNetModel"),aIr.forEach(t),Yao=r(r9e," (MPNet model)"),r9e.forEach(t),Kao=i(C),pp=n(C,"LI",{});var t9e=s(pp);$Y=n(t9e,"STRONG",{});var nIr=s($Y);Zao=r(nIr,"mt5"),nIr.forEach(t),eno=r(t9e," \u2014 "),LR=n(t9e,"A",{href:!0});var sIr=s(LR);ono=r(sIr,"MT5Model"),sIr.forEach(t),rno=r(t9e," (mT5 model)"),t9e.forEach(t),tno=i(C),_p=n(C,"LI",{});var a9e=s(_p);IY=n(a9e,"STRONG",{});var lIr=s(IY);ano=r(lIr,"nystromformer"),lIr.forEach(t),nno=r(a9e," \u2014 "),BR=n(a9e,"A",{href:!0});var iIr=s(BR);sno=r(iIr,"NystromformerModel"),iIr.forEach(t),lno=r(a9e," (Nystromformer model)"),a9e.forEach(t),ino=i(C),up=n(C,"LI",{});var n9e=s(up);DY=n(n9e,"STRONG",{});var dIr=s(DY);dno=r(dIr,"openai-gpt"),dIr.forEach(t),cno=r(n9e," \u2014 "),xR=n(n9e,"A",{href:!0});var cIr=s(xR);fno=r(cIr,"OpenAIGPTModel"),cIr.forEach(t),mno=r(n9e," (OpenAI GPT model)"),n9e.forEach(t),gno=i(C),bp=n(C,"LI",{});var s9e=s(bp);jY=n(s9e,"STRONG",{});var fIr=s(jY);hno=r(fIr,"pegasus"),fIr.forEach(t),pno=r(s9e," \u2014 "),kR=n(s9e,"A",{href:!0});var mIr=s(kR);_no=r(mIr,"PegasusModel"),mIr.forEach(t),uno=r(s9e," (Pegasus model)"),s9e.forEach(t),bno=i(C),vp=n(C,"LI",{});var l9e=s(vp);NY=n(l9e,"STRONG",{});var gIr=s(NY);vno=r(gIr,"perceiver"),gIr.forEach(t),Tno=r(l9e," \u2014 "),RR=n(l9e,"A",{href:!0});var hIr=s(RR);Fno=r(hIr,"PerceiverModel"),hIr.forEach(t),Cno=r(l9e," (Perceiver model)"),l9e.forEach(t),Mno=i(C),Tp=n(C,"LI",{});var i9e=s(Tp);qY=n(i9e,"STRONG",{});var pIr=s(qY);Eno=r(pIr,"plbart"),pIr.forEach(t),yno=r(i9e," \u2014 "),SR=n(i9e,"A",{href:!0});var _Ir=s(SR);wno=r(_Ir,"PLBartModel"),_Ir.forEach(t),Ano=r(i9e," (PLBart model)"),i9e.forEach(t),Lno=i(C),Fp=n(C,"LI",{});var d9e=s(Fp);GY=n(d9e,"STRONG",{});var uIr=s(GY);Bno=r(uIr,"poolformer"),uIr.forEach(t),xno=r(d9e," \u2014 "),PR=n(d9e,"A",{href:!0});var bIr=s(PR);kno=r(bIr,"PoolFormerModel"),bIr.forEach(t),Rno=r(d9e," (PoolFormer model)"),d9e.forEach(t),Sno=i(C),Cp=n(C,"LI",{});var c9e=s(Cp);OY=n(c9e,"STRONG",{});var vIr=s(OY);Pno=r(vIr,"prophetnet"),vIr.forEach(t),$no=r(c9e," \u2014 "),$R=n(c9e,"A",{href:!0});var TIr=s($R);Ino=r(TIr,"ProphetNetModel"),TIr.forEach(t),Dno=r(c9e," (ProphetNet model)"),c9e.forEach(t),jno=i(C),Mp=n(C,"LI",{});var f9e=s(Mp);XY=n(f9e,"STRONG",{});var FIr=s(XY);Nno=r(FIr,"qdqbert"),FIr.forEach(t),qno=r(f9e," \u2014 "),IR=n(f9e,"A",{href:!0});var CIr=s(IR);Gno=r(CIr,"QDQBertModel"),CIr.forEach(t),Ono=r(f9e," (QDQBert model)"),f9e.forEach(t),Xno=i(C),Ep=n(C,"LI",{});var m9e=s(Ep);VY=n(m9e,"STRONG",{});var MIr=s(VY);Vno=r(MIr,"reformer"),MIr.forEach(t),zno=r(m9e," \u2014 "),DR=n(m9e,"A",{href:!0});var EIr=s(DR);Wno=r(EIr,"ReformerModel"),EIr.forEach(t),Qno=r(m9e," (Reformer model)"),m9e.forEach(t),Hno=i(C),yp=n(C,"LI",{});var g9e=s(yp);zY=n(g9e,"STRONG",{});var yIr=s(zY);Uno=r(yIr,"rembert"),yIr.forEach(t),Jno=r(g9e," \u2014 "),jR=n(g9e,"A",{href:!0});var wIr=s(jR);Yno=r(wIr,"RemBertModel"),wIr.forEach(t),Kno=r(g9e," (RemBERT model)"),g9e.forEach(t),Zno=i(C),wp=n(C,"LI",{});var h9e=s(wp);WY=n(h9e,"STRONG",{});var AIr=s(WY);eso=r(AIr,"retribert"),AIr.forEach(t),oso=r(h9e," \u2014 "),NR=n(h9e,"A",{href:!0});var LIr=s(NR);rso=r(LIr,"RetriBertModel"),LIr.forEach(t),tso=r(h9e," (RetriBERT model)"),h9e.forEach(t),aso=i(C),Ap=n(C,"LI",{});var p9e=s(Ap);QY=n(p9e,"STRONG",{});var BIr=s(QY);nso=r(BIr,"roberta"),BIr.forEach(t),sso=r(p9e," \u2014 "),qR=n(p9e,"A",{href:!0});var xIr=s(qR);lso=r(xIr,"RobertaModel"),xIr.forEach(t),iso=r(p9e," (RoBERTa model)"),p9e.forEach(t),dso=i(C),Lp=n(C,"LI",{});var _9e=s(Lp);HY=n(_9e,"STRONG",{});var kIr=s(HY);cso=r(kIr,"roformer"),kIr.forEach(t),fso=r(_9e," \u2014 "),GR=n(_9e,"A",{href:!0});var RIr=s(GR);mso=r(RIr,"RoFormerModel"),RIr.forEach(t),gso=r(_9e," (RoFormer model)"),_9e.forEach(t),hso=i(C),Bp=n(C,"LI",{});var u9e=s(Bp);UY=n(u9e,"STRONG",{});var SIr=s(UY);pso=r(SIr,"segformer"),SIr.forEach(t),_so=r(u9e," \u2014 "),OR=n(u9e,"A",{href:!0});var PIr=s(OR);uso=r(PIr,"SegformerModel"),PIr.forEach(t),bso=r(u9e," (SegFormer model)"),u9e.forEach(t),vso=i(C),xp=n(C,"LI",{});var b9e=s(xp);JY=n(b9e,"STRONG",{});var $Ir=s(JY);Tso=r($Ir,"sew"),$Ir.forEach(t),Fso=r(b9e," \u2014 "),XR=n(b9e,"A",{href:!0});var IIr=s(XR);Cso=r(IIr,"SEWModel"),IIr.forEach(t),Mso=r(b9e," (SEW model)"),b9e.forEach(t),Eso=i(C),kp=n(C,"LI",{});var v9e=s(kp);YY=n(v9e,"STRONG",{});var DIr=s(YY);yso=r(DIr,"sew-d"),DIr.forEach(t),wso=r(v9e," \u2014 "),VR=n(v9e,"A",{href:!0});var jIr=s(VR);Aso=r(jIr,"SEWDModel"),jIr.forEach(t),Lso=r(v9e," (SEW-D model)"),v9e.forEach(t),Bso=i(C),Rp=n(C,"LI",{});var T9e=s(Rp);KY=n(T9e,"STRONG",{});var NIr=s(KY);xso=r(NIr,"speech_to_text"),NIr.forEach(t),kso=r(T9e," \u2014 "),zR=n(T9e,"A",{href:!0});var qIr=s(zR);Rso=r(qIr,"Speech2TextModel"),qIr.forEach(t),Sso=r(T9e," (Speech2Text model)"),T9e.forEach(t),Pso=i(C),Sp=n(C,"LI",{});var F9e=s(Sp);ZY=n(F9e,"STRONG",{});var GIr=s(ZY);$so=r(GIr,"splinter"),GIr.forEach(t),Iso=r(F9e," \u2014 "),WR=n(F9e,"A",{href:!0});var OIr=s(WR);Dso=r(OIr,"SplinterModel"),OIr.forEach(t),jso=r(F9e," (Splinter model)"),F9e.forEach(t),Nso=i(C),Pp=n(C,"LI",{});var C9e=s(Pp);eK=n(C9e,"STRONG",{});var XIr=s(eK);qso=r(XIr,"squeezebert"),XIr.forEach(t),Gso=r(C9e," \u2014 "),QR=n(C9e,"A",{href:!0});var VIr=s(QR);Oso=r(VIr,"SqueezeBertModel"),VIr.forEach(t),Xso=r(C9e," (SqueezeBERT model)"),C9e.forEach(t),Vso=i(C),$p=n(C,"LI",{});var M9e=s($p);oK=n(M9e,"STRONG",{});var zIr=s(oK);zso=r(zIr,"swin"),zIr.forEach(t),Wso=r(M9e," \u2014 "),HR=n(M9e,"A",{href:!0});var WIr=s(HR);Qso=r(WIr,"SwinModel"),WIr.forEach(t),Hso=r(M9e," (Swin model)"),M9e.forEach(t),Uso=i(C),Ip=n(C,"LI",{});var E9e=s(Ip);rK=n(E9e,"STRONG",{});var QIr=s(rK);Jso=r(QIr,"t5"),QIr.forEach(t),Yso=r(E9e," \u2014 "),UR=n(E9e,"A",{href:!0});var HIr=s(UR);Kso=r(HIr,"T5Model"),HIr.forEach(t),Zso=r(E9e," (T5 model)"),E9e.forEach(t),elo=i(C),Dp=n(C,"LI",{});var y9e=s(Dp);tK=n(y9e,"STRONG",{});var UIr=s(tK);olo=r(UIr,"tapas"),UIr.forEach(t),rlo=r(y9e," \u2014 "),JR=n(y9e,"A",{href:!0});var JIr=s(JR);tlo=r(JIr,"TapasModel"),JIr.forEach(t),alo=r(y9e," (TAPAS model)"),y9e.forEach(t),nlo=i(C),jp=n(C,"LI",{});var w9e=s(jp);aK=n(w9e,"STRONG",{});var YIr=s(aK);slo=r(YIr,"transfo-xl"),YIr.forEach(t),llo=r(w9e," \u2014 "),YR=n(w9e,"A",{href:!0});var KIr=s(YR);ilo=r(KIr,"TransfoXLModel"),KIr.forEach(t),dlo=r(w9e," (Transformer-XL model)"),w9e.forEach(t),clo=i(C),Np=n(C,"LI",{});var A9e=s(Np);nK=n(A9e,"STRONG",{});var ZIr=s(nK);flo=r(ZIr,"unispeech"),ZIr.forEach(t),mlo=r(A9e," \u2014 "),KR=n(A9e,"A",{href:!0});var eDr=s(KR);glo=r(eDr,"UniSpeechModel"),eDr.forEach(t),hlo=r(A9e," (UniSpeech model)"),A9e.forEach(t),plo=i(C),qp=n(C,"LI",{});var L9e=s(qp);sK=n(L9e,"STRONG",{});var oDr=s(sK);_lo=r(oDr,"unispeech-sat"),oDr.forEach(t),ulo=r(L9e," \u2014 "),ZR=n(L9e,"A",{href:!0});var rDr=s(ZR);blo=r(rDr,"UniSpeechSatModel"),rDr.forEach(t),vlo=r(L9e," (UniSpeechSat model)"),L9e.forEach(t),Tlo=i(C),Gp=n(C,"LI",{});var B9e=s(Gp);lK=n(B9e,"STRONG",{});var tDr=s(lK);Flo=r(tDr,"vilt"),tDr.forEach(t),Clo=r(B9e," \u2014 "),eS=n(B9e,"A",{href:!0});var aDr=s(eS);Mlo=r(aDr,"ViltModel"),aDr.forEach(t),Elo=r(B9e," (ViLT model)"),B9e.forEach(t),ylo=i(C),Op=n(C,"LI",{});var x9e=s(Op);iK=n(x9e,"STRONG",{});var nDr=s(iK);wlo=r(nDr,"vision-text-dual-encoder"),nDr.forEach(t),Alo=r(x9e," \u2014 "),oS=n(x9e,"A",{href:!0});var sDr=s(oS);Llo=r(sDr,"VisionTextDualEncoderModel"),sDr.forEach(t),Blo=r(x9e," (VisionTextDualEncoder model)"),x9e.forEach(t),xlo=i(C),Xp=n(C,"LI",{});var k9e=s(Xp);dK=n(k9e,"STRONG",{});var lDr=s(dK);klo=r(lDr,"visual_bert"),lDr.forEach(t),Rlo=r(k9e," \u2014 "),rS=n(k9e,"A",{href:!0});var iDr=s(rS);Slo=r(iDr,"VisualBertModel"),iDr.forEach(t),Plo=r(k9e," (VisualBert model)"),k9e.forEach(t),$lo=i(C),Vp=n(C,"LI",{});var R9e=s(Vp);cK=n(R9e,"STRONG",{});var dDr=s(cK);Ilo=r(dDr,"vit"),dDr.forEach(t),Dlo=r(R9e," \u2014 "),tS=n(R9e,"A",{href:!0});var cDr=s(tS);jlo=r(cDr,"ViTModel"),cDr.forEach(t),Nlo=r(R9e," (ViT model)"),R9e.forEach(t),qlo=i(C),zp=n(C,"LI",{});var S9e=s(zp);fK=n(S9e,"STRONG",{});var fDr=s(fK);Glo=r(fDr,"vit_mae"),fDr.forEach(t),Olo=r(S9e," \u2014 "),aS=n(S9e,"A",{href:!0});var mDr=s(aS);Xlo=r(mDr,"ViTMAEModel"),mDr.forEach(t),Vlo=r(S9e," (ViTMAE model)"),S9e.forEach(t),zlo=i(C),Wp=n(C,"LI",{});var P9e=s(Wp);mK=n(P9e,"STRONG",{});var gDr=s(mK);Wlo=r(gDr,"wav2vec2"),gDr.forEach(t),Qlo=r(P9e," \u2014 "),nS=n(P9e,"A",{href:!0});var hDr=s(nS);Hlo=r(hDr,"Wav2Vec2Model"),hDr.forEach(t),Ulo=r(P9e," (Wav2Vec2 model)"),P9e.forEach(t),Jlo=i(C),Qp=n(C,"LI",{});var $9e=s(Qp);gK=n($9e,"STRONG",{});var pDr=s(gK);Ylo=r(pDr,"wavlm"),pDr.forEach(t),Klo=r($9e," \u2014 "),sS=n($9e,"A",{href:!0});var _Dr=s(sS);Zlo=r(_Dr,"WavLMModel"),_Dr.forEach(t),eio=r($9e," (WavLM model)"),$9e.forEach(t),oio=i(C),Hp=n(C,"LI",{});var I9e=s(Hp);hK=n(I9e,"STRONG",{});var uDr=s(hK);rio=r(uDr,"xglm"),uDr.forEach(t),tio=r(I9e," \u2014 "),lS=n(I9e,"A",{href:!0});var bDr=s(lS);aio=r(bDr,"XGLMModel"),bDr.forEach(t),nio=r(I9e," (XGLM model)"),I9e.forEach(t),sio=i(C),Up=n(C,"LI",{});var D9e=s(Up);pK=n(D9e,"STRONG",{});var vDr=s(pK);lio=r(vDr,"xlm"),vDr.forEach(t),iio=r(D9e," \u2014 "),iS=n(D9e,"A",{href:!0});var TDr=s(iS);dio=r(TDr,"XLMModel"),TDr.forEach(t),cio=r(D9e," (XLM model)"),D9e.forEach(t),fio=i(C),Jp=n(C,"LI",{});var j9e=s(Jp);_K=n(j9e,"STRONG",{});var FDr=s(_K);mio=r(FDr,"xlm-prophetnet"),FDr.forEach(t),gio=r(j9e," \u2014 "),dS=n(j9e,"A",{href:!0});var CDr=s(dS);hio=r(CDr,"XLMProphetNetModel"),CDr.forEach(t),pio=r(j9e," (XLMProphetNet model)"),j9e.forEach(t),_io=i(C),Yp=n(C,"LI",{});var N9e=s(Yp);uK=n(N9e,"STRONG",{});var MDr=s(uK);uio=r(MDr,"xlm-roberta"),MDr.forEach(t),bio=r(N9e," \u2014 "),cS=n(N9e,"A",{href:!0});var EDr=s(cS);vio=r(EDr,"XLMRobertaModel"),EDr.forEach(t),Tio=r(N9e," (XLM-RoBERTa model)"),N9e.forEach(t),Fio=i(C),Kp=n(C,"LI",{});var q9e=s(Kp);bK=n(q9e,"STRONG",{});var yDr=s(bK);Cio=r(yDr,"xlm-roberta-xl"),yDr.forEach(t),Mio=r(q9e," \u2014 "),fS=n(q9e,"A",{href:!0});var wDr=s(fS);Eio=r(wDr,"XLMRobertaXLModel"),wDr.forEach(t),yio=r(q9e," (XLM-RoBERTa-XL model)"),q9e.forEach(t),wio=i(C),Zp=n(C,"LI",{});var G9e=s(Zp);vK=n(G9e,"STRONG",{});var ADr=s(vK);Aio=r(ADr,"xlnet"),ADr.forEach(t),Lio=r(G9e," \u2014 "),mS=n(G9e,"A",{href:!0});var LDr=s(mS);Bio=r(LDr,"XLNetModel"),LDr.forEach(t),xio=r(G9e," (XLNet model)"),G9e.forEach(t),kio=i(C),e_=n(C,"LI",{});var O9e=s(e_);TK=n(O9e,"STRONG",{});var BDr=s(TK);Rio=r(BDr,"yoso"),BDr.forEach(t),Sio=r(O9e," \u2014 "),gS=n(O9e,"A",{href:!0});var xDr=s(gS);Pio=r(xDr,"YosoModel"),xDr.forEach(t),$io=r(O9e," (YOSO model)"),O9e.forEach(t),C.forEach(t),Iio=i($t),o_=n($t,"P",{});var X9e=s(o_);Dio=r(X9e,"The model is set in evaluation mode by default using "),FK=n(X9e,"CODE",{});var kDr=s(FK);jio=r(kDr,"model.eval()"),kDr.forEach(t),Nio=r(X9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CK=n(X9e,"CODE",{});var RDr=s(CK);qio=r(RDr,"model.train()"),RDr.forEach(t),X9e.forEach(t),Gio=i($t),MK=n($t,"P",{});var SDr=s(MK);Oio=r(SDr,"Examples:"),SDr.forEach(t),Xio=i($t),m(sE.$$.fragment,$t),$t.forEach(t),qs.forEach(t),R8e=i(c),zi=n(c,"H2",{class:!0});var Nxe=s(zi);r_=n(Nxe,"A",{id:!0,class:!0,href:!0});var PDr=s(r_);EK=n(PDr,"SPAN",{});var $Dr=s(EK);m(lE.$$.fragment,$Dr),$Dr.forEach(t),PDr.forEach(t),Vio=i(Nxe),yK=n(Nxe,"SPAN",{});var IDr=s(yK);zio=r(IDr,"AutoModelForPreTraining"),IDr.forEach(t),Nxe.forEach(t),S8e=i(c),Ho=n(c,"DIV",{class:!0});var Os=s(Ho);m(iE.$$.fragment,Os),Wio=i(Os),Wi=n(Os,"P",{});var kV=s(Wi);Qio=r(kV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wK=n(kV,"CODE",{});var DDr=s(wK);Hio=r(DDr,"from_pretrained()"),DDr.forEach(t),Uio=r(kV,"class method or the "),AK=n(kV,"CODE",{});var jDr=s(AK);Jio=r(jDr,"from_config()"),jDr.forEach(t),Yio=r(kV,`class
method.`),kV.forEach(t),Kio=i(Os),dE=n(Os,"P",{});var qxe=s(dE);Zio=r(qxe,"This class cannot be instantiated directly using "),LK=n(qxe,"CODE",{});var NDr=s(LK);edo=r(NDr,"__init__()"),NDr.forEach(t),odo=r(qxe," (throws an error)."),qxe.forEach(t),rdo=i(Os),Gr=n(Os,"DIV",{class:!0});var Xs=s(Gr);m(cE.$$.fragment,Xs),tdo=i(Xs),BK=n(Xs,"P",{});var qDr=s(BK);ado=r(qDr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qDr.forEach(t),ndo=i(Xs),Qi=n(Xs,"P",{});var RV=s(Qi);sdo=r(RV,`Note:
Loading a model from its configuration file does `),xK=n(RV,"STRONG",{});var GDr=s(xK);ldo=r(GDr,"not"),GDr.forEach(t),ido=r(RV,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(RV,"CODE",{});var ODr=s(kK);ddo=r(ODr,"from_pretrained()"),ODr.forEach(t),cdo=r(RV,"to load the model weights."),RV.forEach(t),fdo=i(Xs),RK=n(Xs,"P",{});var XDr=s(RK);mdo=r(XDr,"Examples:"),XDr.forEach(t),gdo=i(Xs),m(fE.$$.fragment,Xs),Xs.forEach(t),hdo=i(Os),Se=n(Os,"DIV",{class:!0});var It=s(Se);m(mE.$$.fragment,It),pdo=i(It),SK=n(It,"P",{});var VDr=s(SK);_do=r(VDr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VDr.forEach(t),udo=i(It),qa=n(It,"P",{});var y4=s(qa);bdo=r(y4,"The model class to instantiate is selected based on the "),PK=n(y4,"CODE",{});var zDr=s(PK);vdo=r(zDr,"model_type"),zDr.forEach(t),Tdo=r(y4,` property of the config object (either
passed as an argument or loaded from `),$K=n(y4,"CODE",{});var WDr=s($K);Fdo=r(WDr,"pretrained_model_name_or_path"),WDr.forEach(t),Cdo=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IK=n(y4,"CODE",{});var QDr=s(IK);Mdo=r(QDr,"pretrained_model_name_or_path"),QDr.forEach(t),Edo=r(y4,":"),y4.forEach(t),ydo=i(It),k=n(It,"UL",{});var S=s(k);t_=n(S,"LI",{});var V9e=s(t_);DK=n(V9e,"STRONG",{});var HDr=s(DK);wdo=r(HDr,"albert"),HDr.forEach(t),Ado=r(V9e," \u2014 "),hS=n(V9e,"A",{href:!0});var UDr=s(hS);Ldo=r(UDr,"AlbertForPreTraining"),UDr.forEach(t),Bdo=r(V9e," (ALBERT model)"),V9e.forEach(t),xdo=i(S),a_=n(S,"LI",{});var z9e=s(a_);jK=n(z9e,"STRONG",{});var JDr=s(jK);kdo=r(JDr,"bart"),JDr.forEach(t),Rdo=r(z9e," \u2014 "),pS=n(z9e,"A",{href:!0});var YDr=s(pS);Sdo=r(YDr,"BartForConditionalGeneration"),YDr.forEach(t),Pdo=r(z9e," (BART model)"),z9e.forEach(t),$do=i(S),n_=n(S,"LI",{});var W9e=s(n_);NK=n(W9e,"STRONG",{});var KDr=s(NK);Ido=r(KDr,"bert"),KDr.forEach(t),Ddo=r(W9e," \u2014 "),_S=n(W9e,"A",{href:!0});var ZDr=s(_S);jdo=r(ZDr,"BertForPreTraining"),ZDr.forEach(t),Ndo=r(W9e," (BERT model)"),W9e.forEach(t),qdo=i(S),s_=n(S,"LI",{});var Q9e=s(s_);qK=n(Q9e,"STRONG",{});var ejr=s(qK);Gdo=r(ejr,"big_bird"),ejr.forEach(t),Odo=r(Q9e," \u2014 "),uS=n(Q9e,"A",{href:!0});var ojr=s(uS);Xdo=r(ojr,"BigBirdForPreTraining"),ojr.forEach(t),Vdo=r(Q9e," (BigBird model)"),Q9e.forEach(t),zdo=i(S),l_=n(S,"LI",{});var H9e=s(l_);GK=n(H9e,"STRONG",{});var rjr=s(GK);Wdo=r(rjr,"camembert"),rjr.forEach(t),Qdo=r(H9e," \u2014 "),bS=n(H9e,"A",{href:!0});var tjr=s(bS);Hdo=r(tjr,"CamembertForMaskedLM"),tjr.forEach(t),Udo=r(H9e," (CamemBERT model)"),H9e.forEach(t),Jdo=i(S),i_=n(S,"LI",{});var U9e=s(i_);OK=n(U9e,"STRONG",{});var ajr=s(OK);Ydo=r(ajr,"ctrl"),ajr.forEach(t),Kdo=r(U9e," \u2014 "),vS=n(U9e,"A",{href:!0});var njr=s(vS);Zdo=r(njr,"CTRLLMHeadModel"),njr.forEach(t),eco=r(U9e," (CTRL model)"),U9e.forEach(t),oco=i(S),d_=n(S,"LI",{});var J9e=s(d_);XK=n(J9e,"STRONG",{});var sjr=s(XK);rco=r(sjr,"data2vec-text"),sjr.forEach(t),tco=r(J9e," \u2014 "),TS=n(J9e,"A",{href:!0});var ljr=s(TS);aco=r(ljr,"Data2VecTextForMaskedLM"),ljr.forEach(t),nco=r(J9e," (Data2VecText model)"),J9e.forEach(t),sco=i(S),c_=n(S,"LI",{});var Y9e=s(c_);VK=n(Y9e,"STRONG",{});var ijr=s(VK);lco=r(ijr,"deberta"),ijr.forEach(t),ico=r(Y9e," \u2014 "),FS=n(Y9e,"A",{href:!0});var djr=s(FS);dco=r(djr,"DebertaForMaskedLM"),djr.forEach(t),cco=r(Y9e," (DeBERTa model)"),Y9e.forEach(t),fco=i(S),f_=n(S,"LI",{});var K9e=s(f_);zK=n(K9e,"STRONG",{});var cjr=s(zK);mco=r(cjr,"deberta-v2"),cjr.forEach(t),gco=r(K9e," \u2014 "),CS=n(K9e,"A",{href:!0});var fjr=s(CS);hco=r(fjr,"DebertaV2ForMaskedLM"),fjr.forEach(t),pco=r(K9e," (DeBERTa-v2 model)"),K9e.forEach(t),_co=i(S),m_=n(S,"LI",{});var Z9e=s(m_);WK=n(Z9e,"STRONG",{});var mjr=s(WK);uco=r(mjr,"distilbert"),mjr.forEach(t),bco=r(Z9e," \u2014 "),MS=n(Z9e,"A",{href:!0});var gjr=s(MS);vco=r(gjr,"DistilBertForMaskedLM"),gjr.forEach(t),Tco=r(Z9e," (DistilBERT model)"),Z9e.forEach(t),Fco=i(S),g_=n(S,"LI",{});var eCe=s(g_);QK=n(eCe,"STRONG",{});var hjr=s(QK);Cco=r(hjr,"electra"),hjr.forEach(t),Mco=r(eCe," \u2014 "),ES=n(eCe,"A",{href:!0});var pjr=s(ES);Eco=r(pjr,"ElectraForPreTraining"),pjr.forEach(t),yco=r(eCe," (ELECTRA model)"),eCe.forEach(t),wco=i(S),h_=n(S,"LI",{});var oCe=s(h_);HK=n(oCe,"STRONG",{});var _jr=s(HK);Aco=r(_jr,"flaubert"),_jr.forEach(t),Lco=r(oCe," \u2014 "),yS=n(oCe,"A",{href:!0});var ujr=s(yS);Bco=r(ujr,"FlaubertWithLMHeadModel"),ujr.forEach(t),xco=r(oCe," (FlauBERT model)"),oCe.forEach(t),kco=i(S),p_=n(S,"LI",{});var rCe=s(p_);UK=n(rCe,"STRONG",{});var bjr=s(UK);Rco=r(bjr,"fnet"),bjr.forEach(t),Sco=r(rCe," \u2014 "),wS=n(rCe,"A",{href:!0});var vjr=s(wS);Pco=r(vjr,"FNetForPreTraining"),vjr.forEach(t),$co=r(rCe," (FNet model)"),rCe.forEach(t),Ico=i(S),__=n(S,"LI",{});var tCe=s(__);JK=n(tCe,"STRONG",{});var Tjr=s(JK);Dco=r(Tjr,"fsmt"),Tjr.forEach(t),jco=r(tCe," \u2014 "),AS=n(tCe,"A",{href:!0});var Fjr=s(AS);Nco=r(Fjr,"FSMTForConditionalGeneration"),Fjr.forEach(t),qco=r(tCe," (FairSeq Machine-Translation model)"),tCe.forEach(t),Gco=i(S),u_=n(S,"LI",{});var aCe=s(u_);YK=n(aCe,"STRONG",{});var Cjr=s(YK);Oco=r(Cjr,"funnel"),Cjr.forEach(t),Xco=r(aCe," \u2014 "),LS=n(aCe,"A",{href:!0});var Mjr=s(LS);Vco=r(Mjr,"FunnelForPreTraining"),Mjr.forEach(t),zco=r(aCe," (Funnel Transformer model)"),aCe.forEach(t),Wco=i(S),b_=n(S,"LI",{});var nCe=s(b_);KK=n(nCe,"STRONG",{});var Ejr=s(KK);Qco=r(Ejr,"gpt2"),Ejr.forEach(t),Hco=r(nCe," \u2014 "),BS=n(nCe,"A",{href:!0});var yjr=s(BS);Uco=r(yjr,"GPT2LMHeadModel"),yjr.forEach(t),Jco=r(nCe," (OpenAI GPT-2 model)"),nCe.forEach(t),Yco=i(S),v_=n(S,"LI",{});var sCe=s(v_);ZK=n(sCe,"STRONG",{});var wjr=s(ZK);Kco=r(wjr,"ibert"),wjr.forEach(t),Zco=r(sCe," \u2014 "),xS=n(sCe,"A",{href:!0});var Ajr=s(xS);efo=r(Ajr,"IBertForMaskedLM"),Ajr.forEach(t),ofo=r(sCe," (I-BERT model)"),sCe.forEach(t),rfo=i(S),T_=n(S,"LI",{});var lCe=s(T_);eZ=n(lCe,"STRONG",{});var Ljr=s(eZ);tfo=r(Ljr,"layoutlm"),Ljr.forEach(t),afo=r(lCe," \u2014 "),kS=n(lCe,"A",{href:!0});var Bjr=s(kS);nfo=r(Bjr,"LayoutLMForMaskedLM"),Bjr.forEach(t),sfo=r(lCe," (LayoutLM model)"),lCe.forEach(t),lfo=i(S),F_=n(S,"LI",{});var iCe=s(F_);oZ=n(iCe,"STRONG",{});var xjr=s(oZ);ifo=r(xjr,"longformer"),xjr.forEach(t),dfo=r(iCe," \u2014 "),RS=n(iCe,"A",{href:!0});var kjr=s(RS);cfo=r(kjr,"LongformerForMaskedLM"),kjr.forEach(t),ffo=r(iCe," (Longformer model)"),iCe.forEach(t),mfo=i(S),C_=n(S,"LI",{});var dCe=s(C_);rZ=n(dCe,"STRONG",{});var Rjr=s(rZ);gfo=r(Rjr,"lxmert"),Rjr.forEach(t),hfo=r(dCe," \u2014 "),SS=n(dCe,"A",{href:!0});var Sjr=s(SS);pfo=r(Sjr,"LxmertForPreTraining"),Sjr.forEach(t),_fo=r(dCe," (LXMERT model)"),dCe.forEach(t),ufo=i(S),M_=n(S,"LI",{});var cCe=s(M_);tZ=n(cCe,"STRONG",{});var Pjr=s(tZ);bfo=r(Pjr,"megatron-bert"),Pjr.forEach(t),vfo=r(cCe," \u2014 "),PS=n(cCe,"A",{href:!0});var $jr=s(PS);Tfo=r($jr,"MegatronBertForPreTraining"),$jr.forEach(t),Ffo=r(cCe," (MegatronBert model)"),cCe.forEach(t),Cfo=i(S),E_=n(S,"LI",{});var fCe=s(E_);aZ=n(fCe,"STRONG",{});var Ijr=s(aZ);Mfo=r(Ijr,"mobilebert"),Ijr.forEach(t),Efo=r(fCe," \u2014 "),$S=n(fCe,"A",{href:!0});var Djr=s($S);yfo=r(Djr,"MobileBertForPreTraining"),Djr.forEach(t),wfo=r(fCe," (MobileBERT model)"),fCe.forEach(t),Afo=i(S),y_=n(S,"LI",{});var mCe=s(y_);nZ=n(mCe,"STRONG",{});var jjr=s(nZ);Lfo=r(jjr,"mpnet"),jjr.forEach(t),Bfo=r(mCe," \u2014 "),IS=n(mCe,"A",{href:!0});var Njr=s(IS);xfo=r(Njr,"MPNetForMaskedLM"),Njr.forEach(t),kfo=r(mCe," (MPNet model)"),mCe.forEach(t),Rfo=i(S),w_=n(S,"LI",{});var gCe=s(w_);sZ=n(gCe,"STRONG",{});var qjr=s(sZ);Sfo=r(qjr,"openai-gpt"),qjr.forEach(t),Pfo=r(gCe," \u2014 "),DS=n(gCe,"A",{href:!0});var Gjr=s(DS);$fo=r(Gjr,"OpenAIGPTLMHeadModel"),Gjr.forEach(t),Ifo=r(gCe," (OpenAI GPT model)"),gCe.forEach(t),Dfo=i(S),A_=n(S,"LI",{});var hCe=s(A_);lZ=n(hCe,"STRONG",{});var Ojr=s(lZ);jfo=r(Ojr,"retribert"),Ojr.forEach(t),Nfo=r(hCe," \u2014 "),jS=n(hCe,"A",{href:!0});var Xjr=s(jS);qfo=r(Xjr,"RetriBertModel"),Xjr.forEach(t),Gfo=r(hCe," (RetriBERT model)"),hCe.forEach(t),Ofo=i(S),L_=n(S,"LI",{});var pCe=s(L_);iZ=n(pCe,"STRONG",{});var Vjr=s(iZ);Xfo=r(Vjr,"roberta"),Vjr.forEach(t),Vfo=r(pCe," \u2014 "),NS=n(pCe,"A",{href:!0});var zjr=s(NS);zfo=r(zjr,"RobertaForMaskedLM"),zjr.forEach(t),Wfo=r(pCe," (RoBERTa model)"),pCe.forEach(t),Qfo=i(S),B_=n(S,"LI",{});var _Ce=s(B_);dZ=n(_Ce,"STRONG",{});var Wjr=s(dZ);Hfo=r(Wjr,"squeezebert"),Wjr.forEach(t),Ufo=r(_Ce," \u2014 "),qS=n(_Ce,"A",{href:!0});var Qjr=s(qS);Jfo=r(Qjr,"SqueezeBertForMaskedLM"),Qjr.forEach(t),Yfo=r(_Ce," (SqueezeBERT model)"),_Ce.forEach(t),Kfo=i(S),x_=n(S,"LI",{});var uCe=s(x_);cZ=n(uCe,"STRONG",{});var Hjr=s(cZ);Zfo=r(Hjr,"t5"),Hjr.forEach(t),emo=r(uCe," \u2014 "),GS=n(uCe,"A",{href:!0});var Ujr=s(GS);omo=r(Ujr,"T5ForConditionalGeneration"),Ujr.forEach(t),rmo=r(uCe," (T5 model)"),uCe.forEach(t),tmo=i(S),k_=n(S,"LI",{});var bCe=s(k_);fZ=n(bCe,"STRONG",{});var Jjr=s(fZ);amo=r(Jjr,"tapas"),Jjr.forEach(t),nmo=r(bCe," \u2014 "),OS=n(bCe,"A",{href:!0});var Yjr=s(OS);smo=r(Yjr,"TapasForMaskedLM"),Yjr.forEach(t),lmo=r(bCe," (TAPAS model)"),bCe.forEach(t),imo=i(S),R_=n(S,"LI",{});var vCe=s(R_);mZ=n(vCe,"STRONG",{});var Kjr=s(mZ);dmo=r(Kjr,"transfo-xl"),Kjr.forEach(t),cmo=r(vCe," \u2014 "),XS=n(vCe,"A",{href:!0});var Zjr=s(XS);fmo=r(Zjr,"TransfoXLLMHeadModel"),Zjr.forEach(t),mmo=r(vCe," (Transformer-XL model)"),vCe.forEach(t),gmo=i(S),S_=n(S,"LI",{});var TCe=s(S_);gZ=n(TCe,"STRONG",{});var eNr=s(gZ);hmo=r(eNr,"unispeech"),eNr.forEach(t),pmo=r(TCe," \u2014 "),VS=n(TCe,"A",{href:!0});var oNr=s(VS);_mo=r(oNr,"UniSpeechForPreTraining"),oNr.forEach(t),umo=r(TCe," (UniSpeech model)"),TCe.forEach(t),bmo=i(S),P_=n(S,"LI",{});var FCe=s(P_);hZ=n(FCe,"STRONG",{});var rNr=s(hZ);vmo=r(rNr,"unispeech-sat"),rNr.forEach(t),Tmo=r(FCe," \u2014 "),zS=n(FCe,"A",{href:!0});var tNr=s(zS);Fmo=r(tNr,"UniSpeechSatForPreTraining"),tNr.forEach(t),Cmo=r(FCe," (UniSpeechSat model)"),FCe.forEach(t),Mmo=i(S),$_=n(S,"LI",{});var CCe=s($_);pZ=n(CCe,"STRONG",{});var aNr=s(pZ);Emo=r(aNr,"visual_bert"),aNr.forEach(t),ymo=r(CCe," \u2014 "),WS=n(CCe,"A",{href:!0});var nNr=s(WS);wmo=r(nNr,"VisualBertForPreTraining"),nNr.forEach(t),Amo=r(CCe," (VisualBert model)"),CCe.forEach(t),Lmo=i(S),I_=n(S,"LI",{});var MCe=s(I_);_Z=n(MCe,"STRONG",{});var sNr=s(_Z);Bmo=r(sNr,"vit_mae"),sNr.forEach(t),xmo=r(MCe," \u2014 "),QS=n(MCe,"A",{href:!0});var lNr=s(QS);kmo=r(lNr,"ViTMAEForPreTraining"),lNr.forEach(t),Rmo=r(MCe," (ViTMAE model)"),MCe.forEach(t),Smo=i(S),D_=n(S,"LI",{});var ECe=s(D_);uZ=n(ECe,"STRONG",{});var iNr=s(uZ);Pmo=r(iNr,"wav2vec2"),iNr.forEach(t),$mo=r(ECe," \u2014 "),HS=n(ECe,"A",{href:!0});var dNr=s(HS);Imo=r(dNr,"Wav2Vec2ForPreTraining"),dNr.forEach(t),Dmo=r(ECe," (Wav2Vec2 model)"),ECe.forEach(t),jmo=i(S),j_=n(S,"LI",{});var yCe=s(j_);bZ=n(yCe,"STRONG",{});var cNr=s(bZ);Nmo=r(cNr,"xlm"),cNr.forEach(t),qmo=r(yCe," \u2014 "),US=n(yCe,"A",{href:!0});var fNr=s(US);Gmo=r(fNr,"XLMWithLMHeadModel"),fNr.forEach(t),Omo=r(yCe," (XLM model)"),yCe.forEach(t),Xmo=i(S),N_=n(S,"LI",{});var wCe=s(N_);vZ=n(wCe,"STRONG",{});var mNr=s(vZ);Vmo=r(mNr,"xlm-roberta"),mNr.forEach(t),zmo=r(wCe," \u2014 "),JS=n(wCe,"A",{href:!0});var gNr=s(JS);Wmo=r(gNr,"XLMRobertaForMaskedLM"),gNr.forEach(t),Qmo=r(wCe," (XLM-RoBERTa model)"),wCe.forEach(t),Hmo=i(S),q_=n(S,"LI",{});var ACe=s(q_);TZ=n(ACe,"STRONG",{});var hNr=s(TZ);Umo=r(hNr,"xlm-roberta-xl"),hNr.forEach(t),Jmo=r(ACe," \u2014 "),YS=n(ACe,"A",{href:!0});var pNr=s(YS);Ymo=r(pNr,"XLMRobertaXLForMaskedLM"),pNr.forEach(t),Kmo=r(ACe," (XLM-RoBERTa-XL model)"),ACe.forEach(t),Zmo=i(S),G_=n(S,"LI",{});var LCe=s(G_);FZ=n(LCe,"STRONG",{});var _Nr=s(FZ);ego=r(_Nr,"xlnet"),_Nr.forEach(t),ogo=r(LCe," \u2014 "),KS=n(LCe,"A",{href:!0});var uNr=s(KS);rgo=r(uNr,"XLNetLMHeadModel"),uNr.forEach(t),tgo=r(LCe," (XLNet model)"),LCe.forEach(t),S.forEach(t),ago=i(It),O_=n(It,"P",{});var BCe=s(O_);ngo=r(BCe,"The model is set in evaluation mode by default using "),CZ=n(BCe,"CODE",{});var bNr=s(CZ);sgo=r(bNr,"model.eval()"),bNr.forEach(t),lgo=r(BCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MZ=n(BCe,"CODE",{});var vNr=s(MZ);igo=r(vNr,"model.train()"),vNr.forEach(t),BCe.forEach(t),dgo=i(It),EZ=n(It,"P",{});var TNr=s(EZ);cgo=r(TNr,"Examples:"),TNr.forEach(t),fgo=i(It),m(gE.$$.fragment,It),It.forEach(t),Os.forEach(t),P8e=i(c),Hi=n(c,"H2",{class:!0});var Gxe=s(Hi);X_=n(Gxe,"A",{id:!0,class:!0,href:!0});var FNr=s(X_);yZ=n(FNr,"SPAN",{});var CNr=s(yZ);m(hE.$$.fragment,CNr),CNr.forEach(t),FNr.forEach(t),mgo=i(Gxe),wZ=n(Gxe,"SPAN",{});var MNr=s(wZ);ggo=r(MNr,"AutoModelForCausalLM"),MNr.forEach(t),Gxe.forEach(t),$8e=i(c),Uo=n(c,"DIV",{class:!0});var Vs=s(Uo);m(pE.$$.fragment,Vs),hgo=i(Vs),Ui=n(Vs,"P",{});var SV=s(Ui);pgo=r(SV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AZ=n(SV,"CODE",{});var ENr=s(AZ);_go=r(ENr,"from_pretrained()"),ENr.forEach(t),ugo=r(SV,"class method or the "),LZ=n(SV,"CODE",{});var yNr=s(LZ);bgo=r(yNr,"from_config()"),yNr.forEach(t),vgo=r(SV,`class
method.`),SV.forEach(t),Tgo=i(Vs),_E=n(Vs,"P",{});var Oxe=s(_E);Fgo=r(Oxe,"This class cannot be instantiated directly using "),BZ=n(Oxe,"CODE",{});var wNr=s(BZ);Cgo=r(wNr,"__init__()"),wNr.forEach(t),Mgo=r(Oxe," (throws an error)."),Oxe.forEach(t),Ego=i(Vs),Or=n(Vs,"DIV",{class:!0});var zs=s(Or);m(uE.$$.fragment,zs),ygo=i(zs),xZ=n(zs,"P",{});var ANr=s(xZ);wgo=r(ANr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ANr.forEach(t),Ago=i(zs),Ji=n(zs,"P",{});var PV=s(Ji);Lgo=r(PV,`Note:
Loading a model from its configuration file does `),kZ=n(PV,"STRONG",{});var LNr=s(kZ);Bgo=r(LNr,"not"),LNr.forEach(t),xgo=r(PV,` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=n(PV,"CODE",{});var BNr=s(RZ);kgo=r(BNr,"from_pretrained()"),BNr.forEach(t),Rgo=r(PV,"to load the model weights."),PV.forEach(t),Sgo=i(zs),SZ=n(zs,"P",{});var xNr=s(SZ);Pgo=r(xNr,"Examples:"),xNr.forEach(t),$go=i(zs),m(bE.$$.fragment,zs),zs.forEach(t),Igo=i(Vs),Pe=n(Vs,"DIV",{class:!0});var Dt=s(Pe);m(vE.$$.fragment,Dt),Dgo=i(Dt),PZ=n(Dt,"P",{});var kNr=s(PZ);jgo=r(kNr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kNr.forEach(t),Ngo=i(Dt),Ga=n(Dt,"P",{});var w4=s(Ga);qgo=r(w4,"The model class to instantiate is selected based on the "),$Z=n(w4,"CODE",{});var RNr=s($Z);Ggo=r(RNr,"model_type"),RNr.forEach(t),Ogo=r(w4,` property of the config object (either
passed as an argument or loaded from `),IZ=n(w4,"CODE",{});var SNr=s(IZ);Xgo=r(SNr,"pretrained_model_name_or_path"),SNr.forEach(t),Vgo=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DZ=n(w4,"CODE",{});var PNr=s(DZ);zgo=r(PNr,"pretrained_model_name_or_path"),PNr.forEach(t),Wgo=r(w4,":"),w4.forEach(t),Qgo=i(Dt),$=n(Dt,"UL",{});var D=s($);V_=n(D,"LI",{});var xCe=s(V_);jZ=n(xCe,"STRONG",{});var $Nr=s(jZ);Hgo=r($Nr,"bart"),$Nr.forEach(t),Ugo=r(xCe," \u2014 "),ZS=n(xCe,"A",{href:!0});var INr=s(ZS);Jgo=r(INr,"BartForCausalLM"),INr.forEach(t),Ygo=r(xCe," (BART model)"),xCe.forEach(t),Kgo=i(D),z_=n(D,"LI",{});var kCe=s(z_);NZ=n(kCe,"STRONG",{});var DNr=s(NZ);Zgo=r(DNr,"bert"),DNr.forEach(t),eho=r(kCe," \u2014 "),eP=n(kCe,"A",{href:!0});var jNr=s(eP);oho=r(jNr,"BertLMHeadModel"),jNr.forEach(t),rho=r(kCe," (BERT model)"),kCe.forEach(t),tho=i(D),W_=n(D,"LI",{});var RCe=s(W_);qZ=n(RCe,"STRONG",{});var NNr=s(qZ);aho=r(NNr,"bert-generation"),NNr.forEach(t),nho=r(RCe," \u2014 "),oP=n(RCe,"A",{href:!0});var qNr=s(oP);sho=r(qNr,"BertGenerationDecoder"),qNr.forEach(t),lho=r(RCe," (Bert Generation model)"),RCe.forEach(t),iho=i(D),Q_=n(D,"LI",{});var SCe=s(Q_);GZ=n(SCe,"STRONG",{});var GNr=s(GZ);dho=r(GNr,"big_bird"),GNr.forEach(t),cho=r(SCe," \u2014 "),rP=n(SCe,"A",{href:!0});var ONr=s(rP);fho=r(ONr,"BigBirdForCausalLM"),ONr.forEach(t),mho=r(SCe," (BigBird model)"),SCe.forEach(t),gho=i(D),H_=n(D,"LI",{});var PCe=s(H_);OZ=n(PCe,"STRONG",{});var XNr=s(OZ);hho=r(XNr,"bigbird_pegasus"),XNr.forEach(t),pho=r(PCe," \u2014 "),tP=n(PCe,"A",{href:!0});var VNr=s(tP);_ho=r(VNr,"BigBirdPegasusForCausalLM"),VNr.forEach(t),uho=r(PCe," (BigBirdPegasus model)"),PCe.forEach(t),bho=i(D),U_=n(D,"LI",{});var $Ce=s(U_);XZ=n($Ce,"STRONG",{});var zNr=s(XZ);vho=r(zNr,"blenderbot"),zNr.forEach(t),Tho=r($Ce," \u2014 "),aP=n($Ce,"A",{href:!0});var WNr=s(aP);Fho=r(WNr,"BlenderbotForCausalLM"),WNr.forEach(t),Cho=r($Ce," (Blenderbot model)"),$Ce.forEach(t),Mho=i(D),J_=n(D,"LI",{});var ICe=s(J_);VZ=n(ICe,"STRONG",{});var QNr=s(VZ);Eho=r(QNr,"blenderbot-small"),QNr.forEach(t),yho=r(ICe," \u2014 "),nP=n(ICe,"A",{href:!0});var HNr=s(nP);who=r(HNr,"BlenderbotSmallForCausalLM"),HNr.forEach(t),Aho=r(ICe," (BlenderbotSmall model)"),ICe.forEach(t),Lho=i(D),Y_=n(D,"LI",{});var DCe=s(Y_);zZ=n(DCe,"STRONG",{});var UNr=s(zZ);Bho=r(UNr,"camembert"),UNr.forEach(t),xho=r(DCe," \u2014 "),sP=n(DCe,"A",{href:!0});var JNr=s(sP);kho=r(JNr,"CamembertForCausalLM"),JNr.forEach(t),Rho=r(DCe," (CamemBERT model)"),DCe.forEach(t),Sho=i(D),K_=n(D,"LI",{});var jCe=s(K_);WZ=n(jCe,"STRONG",{});var YNr=s(WZ);Pho=r(YNr,"ctrl"),YNr.forEach(t),$ho=r(jCe," \u2014 "),lP=n(jCe,"A",{href:!0});var KNr=s(lP);Iho=r(KNr,"CTRLLMHeadModel"),KNr.forEach(t),Dho=r(jCe," (CTRL model)"),jCe.forEach(t),jho=i(D),Z_=n(D,"LI",{});var NCe=s(Z_);QZ=n(NCe,"STRONG",{});var ZNr=s(QZ);Nho=r(ZNr,"data2vec-text"),ZNr.forEach(t),qho=r(NCe," \u2014 "),iP=n(NCe,"A",{href:!0});var eqr=s(iP);Gho=r(eqr,"Data2VecTextForCausalLM"),eqr.forEach(t),Oho=r(NCe," (Data2VecText model)"),NCe.forEach(t),Xho=i(D),eu=n(D,"LI",{});var qCe=s(eu);HZ=n(qCe,"STRONG",{});var oqr=s(HZ);Vho=r(oqr,"electra"),oqr.forEach(t),zho=r(qCe," \u2014 "),dP=n(qCe,"A",{href:!0});var rqr=s(dP);Who=r(rqr,"ElectraForCausalLM"),rqr.forEach(t),Qho=r(qCe," (ELECTRA model)"),qCe.forEach(t),Hho=i(D),ou=n(D,"LI",{});var GCe=s(ou);UZ=n(GCe,"STRONG",{});var tqr=s(UZ);Uho=r(tqr,"gpt2"),tqr.forEach(t),Jho=r(GCe," \u2014 "),cP=n(GCe,"A",{href:!0});var aqr=s(cP);Yho=r(aqr,"GPT2LMHeadModel"),aqr.forEach(t),Kho=r(GCe," (OpenAI GPT-2 model)"),GCe.forEach(t),Zho=i(D),ru=n(D,"LI",{});var OCe=s(ru);JZ=n(OCe,"STRONG",{});var nqr=s(JZ);epo=r(nqr,"gpt_neo"),nqr.forEach(t),opo=r(OCe," \u2014 "),fP=n(OCe,"A",{href:!0});var sqr=s(fP);rpo=r(sqr,"GPTNeoForCausalLM"),sqr.forEach(t),tpo=r(OCe," (GPT Neo model)"),OCe.forEach(t),apo=i(D),tu=n(D,"LI",{});var XCe=s(tu);YZ=n(XCe,"STRONG",{});var lqr=s(YZ);npo=r(lqr,"gptj"),lqr.forEach(t),spo=r(XCe," \u2014 "),mP=n(XCe,"A",{href:!0});var iqr=s(mP);lpo=r(iqr,"GPTJForCausalLM"),iqr.forEach(t),ipo=r(XCe," (GPT-J model)"),XCe.forEach(t),dpo=i(D),au=n(D,"LI",{});var VCe=s(au);KZ=n(VCe,"STRONG",{});var dqr=s(KZ);cpo=r(dqr,"marian"),dqr.forEach(t),fpo=r(VCe," \u2014 "),gP=n(VCe,"A",{href:!0});var cqr=s(gP);mpo=r(cqr,"MarianForCausalLM"),cqr.forEach(t),gpo=r(VCe," (Marian model)"),VCe.forEach(t),hpo=i(D),nu=n(D,"LI",{});var zCe=s(nu);ZZ=n(zCe,"STRONG",{});var fqr=s(ZZ);ppo=r(fqr,"mbart"),fqr.forEach(t),_po=r(zCe," \u2014 "),hP=n(zCe,"A",{href:!0});var mqr=s(hP);upo=r(mqr,"MBartForCausalLM"),mqr.forEach(t),bpo=r(zCe," (mBART model)"),zCe.forEach(t),vpo=i(D),su=n(D,"LI",{});var WCe=s(su);eee=n(WCe,"STRONG",{});var gqr=s(eee);Tpo=r(gqr,"megatron-bert"),gqr.forEach(t),Fpo=r(WCe," \u2014 "),pP=n(WCe,"A",{href:!0});var hqr=s(pP);Cpo=r(hqr,"MegatronBertForCausalLM"),hqr.forEach(t),Mpo=r(WCe," (MegatronBert model)"),WCe.forEach(t),Epo=i(D),lu=n(D,"LI",{});var QCe=s(lu);oee=n(QCe,"STRONG",{});var pqr=s(oee);ypo=r(pqr,"openai-gpt"),pqr.forEach(t),wpo=r(QCe," \u2014 "),_P=n(QCe,"A",{href:!0});var _qr=s(_P);Apo=r(_qr,"OpenAIGPTLMHeadModel"),_qr.forEach(t),Lpo=r(QCe," (OpenAI GPT model)"),QCe.forEach(t),Bpo=i(D),iu=n(D,"LI",{});var HCe=s(iu);ree=n(HCe,"STRONG",{});var uqr=s(ree);xpo=r(uqr,"pegasus"),uqr.forEach(t),kpo=r(HCe," \u2014 "),uP=n(HCe,"A",{href:!0});var bqr=s(uP);Rpo=r(bqr,"PegasusForCausalLM"),bqr.forEach(t),Spo=r(HCe," (Pegasus model)"),HCe.forEach(t),Ppo=i(D),du=n(D,"LI",{});var UCe=s(du);tee=n(UCe,"STRONG",{});var vqr=s(tee);$po=r(vqr,"plbart"),vqr.forEach(t),Ipo=r(UCe," \u2014 "),bP=n(UCe,"A",{href:!0});var Tqr=s(bP);Dpo=r(Tqr,"PLBartForCausalLM"),Tqr.forEach(t),jpo=r(UCe," (PLBart model)"),UCe.forEach(t),Npo=i(D),cu=n(D,"LI",{});var JCe=s(cu);aee=n(JCe,"STRONG",{});var Fqr=s(aee);qpo=r(Fqr,"prophetnet"),Fqr.forEach(t),Gpo=r(JCe," \u2014 "),vP=n(JCe,"A",{href:!0});var Cqr=s(vP);Opo=r(Cqr,"ProphetNetForCausalLM"),Cqr.forEach(t),Xpo=r(JCe," (ProphetNet model)"),JCe.forEach(t),Vpo=i(D),fu=n(D,"LI",{});var YCe=s(fu);nee=n(YCe,"STRONG",{});var Mqr=s(nee);zpo=r(Mqr,"qdqbert"),Mqr.forEach(t),Wpo=r(YCe," \u2014 "),TP=n(YCe,"A",{href:!0});var Eqr=s(TP);Qpo=r(Eqr,"QDQBertLMHeadModel"),Eqr.forEach(t),Hpo=r(YCe," (QDQBert model)"),YCe.forEach(t),Upo=i(D),mu=n(D,"LI",{});var KCe=s(mu);see=n(KCe,"STRONG",{});var yqr=s(see);Jpo=r(yqr,"reformer"),yqr.forEach(t),Ypo=r(KCe," \u2014 "),FP=n(KCe,"A",{href:!0});var wqr=s(FP);Kpo=r(wqr,"ReformerModelWithLMHead"),wqr.forEach(t),Zpo=r(KCe," (Reformer model)"),KCe.forEach(t),e_o=i(D),gu=n(D,"LI",{});var ZCe=s(gu);lee=n(ZCe,"STRONG",{});var Aqr=s(lee);o_o=r(Aqr,"rembert"),Aqr.forEach(t),r_o=r(ZCe," \u2014 "),CP=n(ZCe,"A",{href:!0});var Lqr=s(CP);t_o=r(Lqr,"RemBertForCausalLM"),Lqr.forEach(t),a_o=r(ZCe," (RemBERT model)"),ZCe.forEach(t),n_o=i(D),hu=n(D,"LI",{});var e4e=s(hu);iee=n(e4e,"STRONG",{});var Bqr=s(iee);s_o=r(Bqr,"roberta"),Bqr.forEach(t),l_o=r(e4e," \u2014 "),MP=n(e4e,"A",{href:!0});var xqr=s(MP);i_o=r(xqr,"RobertaForCausalLM"),xqr.forEach(t),d_o=r(e4e," (RoBERTa model)"),e4e.forEach(t),c_o=i(D),pu=n(D,"LI",{});var o4e=s(pu);dee=n(o4e,"STRONG",{});var kqr=s(dee);f_o=r(kqr,"roformer"),kqr.forEach(t),m_o=r(o4e," \u2014 "),EP=n(o4e,"A",{href:!0});var Rqr=s(EP);g_o=r(Rqr,"RoFormerForCausalLM"),Rqr.forEach(t),h_o=r(o4e," (RoFormer model)"),o4e.forEach(t),p_o=i(D),_u=n(D,"LI",{});var r4e=s(_u);cee=n(r4e,"STRONG",{});var Sqr=s(cee);__o=r(Sqr,"speech_to_text_2"),Sqr.forEach(t),u_o=r(r4e," \u2014 "),yP=n(r4e,"A",{href:!0});var Pqr=s(yP);b_o=r(Pqr,"Speech2Text2ForCausalLM"),Pqr.forEach(t),v_o=r(r4e," (Speech2Text2 model)"),r4e.forEach(t),T_o=i(D),uu=n(D,"LI",{});var t4e=s(uu);fee=n(t4e,"STRONG",{});var $qr=s(fee);F_o=r($qr,"transfo-xl"),$qr.forEach(t),C_o=r(t4e," \u2014 "),wP=n(t4e,"A",{href:!0});var Iqr=s(wP);M_o=r(Iqr,"TransfoXLLMHeadModel"),Iqr.forEach(t),E_o=r(t4e," (Transformer-XL model)"),t4e.forEach(t),y_o=i(D),bu=n(D,"LI",{});var a4e=s(bu);mee=n(a4e,"STRONG",{});var Dqr=s(mee);w_o=r(Dqr,"trocr"),Dqr.forEach(t),A_o=r(a4e," \u2014 "),AP=n(a4e,"A",{href:!0});var jqr=s(AP);L_o=r(jqr,"TrOCRForCausalLM"),jqr.forEach(t),B_o=r(a4e," (TrOCR model)"),a4e.forEach(t),x_o=i(D),vu=n(D,"LI",{});var n4e=s(vu);gee=n(n4e,"STRONG",{});var Nqr=s(gee);k_o=r(Nqr,"xglm"),Nqr.forEach(t),R_o=r(n4e," \u2014 "),LP=n(n4e,"A",{href:!0});var qqr=s(LP);S_o=r(qqr,"XGLMForCausalLM"),qqr.forEach(t),P_o=r(n4e," (XGLM model)"),n4e.forEach(t),$_o=i(D),Tu=n(D,"LI",{});var s4e=s(Tu);hee=n(s4e,"STRONG",{});var Gqr=s(hee);I_o=r(Gqr,"xlm"),Gqr.forEach(t),D_o=r(s4e," \u2014 "),BP=n(s4e,"A",{href:!0});var Oqr=s(BP);j_o=r(Oqr,"XLMWithLMHeadModel"),Oqr.forEach(t),N_o=r(s4e," (XLM model)"),s4e.forEach(t),q_o=i(D),Fu=n(D,"LI",{});var l4e=s(Fu);pee=n(l4e,"STRONG",{});var Xqr=s(pee);G_o=r(Xqr,"xlm-prophetnet"),Xqr.forEach(t),O_o=r(l4e," \u2014 "),xP=n(l4e,"A",{href:!0});var Vqr=s(xP);X_o=r(Vqr,"XLMProphetNetForCausalLM"),Vqr.forEach(t),V_o=r(l4e," (XLMProphetNet model)"),l4e.forEach(t),z_o=i(D),Cu=n(D,"LI",{});var i4e=s(Cu);_ee=n(i4e,"STRONG",{});var zqr=s(_ee);W_o=r(zqr,"xlm-roberta"),zqr.forEach(t),Q_o=r(i4e," \u2014 "),kP=n(i4e,"A",{href:!0});var Wqr=s(kP);H_o=r(Wqr,"XLMRobertaForCausalLM"),Wqr.forEach(t),U_o=r(i4e," (XLM-RoBERTa model)"),i4e.forEach(t),J_o=i(D),Mu=n(D,"LI",{});var d4e=s(Mu);uee=n(d4e,"STRONG",{});var Qqr=s(uee);Y_o=r(Qqr,"xlm-roberta-xl"),Qqr.forEach(t),K_o=r(d4e," \u2014 "),RP=n(d4e,"A",{href:!0});var Hqr=s(RP);Z_o=r(Hqr,"XLMRobertaXLForCausalLM"),Hqr.forEach(t),euo=r(d4e," (XLM-RoBERTa-XL model)"),d4e.forEach(t),ouo=i(D),Eu=n(D,"LI",{});var c4e=s(Eu);bee=n(c4e,"STRONG",{});var Uqr=s(bee);ruo=r(Uqr,"xlnet"),Uqr.forEach(t),tuo=r(c4e," \u2014 "),SP=n(c4e,"A",{href:!0});var Jqr=s(SP);auo=r(Jqr,"XLNetLMHeadModel"),Jqr.forEach(t),nuo=r(c4e," (XLNet model)"),c4e.forEach(t),D.forEach(t),suo=i(Dt),yu=n(Dt,"P",{});var f4e=s(yu);luo=r(f4e,"The model is set in evaluation mode by default using "),vee=n(f4e,"CODE",{});var Yqr=s(vee);iuo=r(Yqr,"model.eval()"),Yqr.forEach(t),duo=r(f4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tee=n(f4e,"CODE",{});var Kqr=s(Tee);cuo=r(Kqr,"model.train()"),Kqr.forEach(t),f4e.forEach(t),fuo=i(Dt),Fee=n(Dt,"P",{});var Zqr=s(Fee);muo=r(Zqr,"Examples:"),Zqr.forEach(t),guo=i(Dt),m(TE.$$.fragment,Dt),Dt.forEach(t),Vs.forEach(t),I8e=i(c),Yi=n(c,"H2",{class:!0});var Xxe=s(Yi);wu=n(Xxe,"A",{id:!0,class:!0,href:!0});var eGr=s(wu);Cee=n(eGr,"SPAN",{});var oGr=s(Cee);m(FE.$$.fragment,oGr),oGr.forEach(t),eGr.forEach(t),huo=i(Xxe),Mee=n(Xxe,"SPAN",{});var rGr=s(Mee);puo=r(rGr,"AutoModelForMaskedLM"),rGr.forEach(t),Xxe.forEach(t),D8e=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(CE.$$.fragment,Ws),_uo=i(Ws),Ki=n(Ws,"P",{});var $V=s(Ki);uuo=r($V,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Eee=n($V,"CODE",{});var tGr=s(Eee);buo=r(tGr,"from_pretrained()"),tGr.forEach(t),vuo=r($V,"class method or the "),yee=n($V,"CODE",{});var aGr=s(yee);Tuo=r(aGr,"from_config()"),aGr.forEach(t),Fuo=r($V,`class
method.`),$V.forEach(t),Cuo=i(Ws),ME=n(Ws,"P",{});var Vxe=s(ME);Muo=r(Vxe,"This class cannot be instantiated directly using "),wee=n(Vxe,"CODE",{});var nGr=s(wee);Euo=r(nGr,"__init__()"),nGr.forEach(t),yuo=r(Vxe," (throws an error)."),Vxe.forEach(t),wuo=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Qs=s(Xr);m(EE.$$.fragment,Qs),Auo=i(Qs),Aee=n(Qs,"P",{});var sGr=s(Aee);Luo=r(sGr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sGr.forEach(t),Buo=i(Qs),Zi=n(Qs,"P",{});var IV=s(Zi);xuo=r(IV,`Note:
Loading a model from its configuration file does `),Lee=n(IV,"STRONG",{});var lGr=s(Lee);kuo=r(lGr,"not"),lGr.forEach(t),Ruo=r(IV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(IV,"CODE",{});var iGr=s(Bee);Suo=r(iGr,"from_pretrained()"),iGr.forEach(t),Puo=r(IV,"to load the model weights."),IV.forEach(t),$uo=i(Qs),xee=n(Qs,"P",{});var dGr=s(xee);Iuo=r(dGr,"Examples:"),dGr.forEach(t),Duo=i(Qs),m(yE.$$.fragment,Qs),Qs.forEach(t),juo=i(Ws),$e=n(Ws,"DIV",{class:!0});var jt=s($e);m(wE.$$.fragment,jt),Nuo=i(jt),kee=n(jt,"P",{});var cGr=s(kee);quo=r(cGr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cGr.forEach(t),Guo=i(jt),Oa=n(jt,"P",{});var A4=s(Oa);Ouo=r(A4,"The model class to instantiate is selected based on the "),Ree=n(A4,"CODE",{});var fGr=s(Ree);Xuo=r(fGr,"model_type"),fGr.forEach(t),Vuo=r(A4,` property of the config object (either
passed as an argument or loaded from `),See=n(A4,"CODE",{});var mGr=s(See);zuo=r(mGr,"pretrained_model_name_or_path"),mGr.forEach(t),Wuo=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pee=n(A4,"CODE",{});var gGr=s(Pee);Quo=r(gGr,"pretrained_model_name_or_path"),gGr.forEach(t),Huo=r(A4,":"),A4.forEach(t),Uuo=i(jt),I=n(jt,"UL",{});var j=s(I);Au=n(j,"LI",{});var m4e=s(Au);$ee=n(m4e,"STRONG",{});var hGr=s($ee);Juo=r(hGr,"albert"),hGr.forEach(t),Yuo=r(m4e," \u2014 "),PP=n(m4e,"A",{href:!0});var pGr=s(PP);Kuo=r(pGr,"AlbertForMaskedLM"),pGr.forEach(t),Zuo=r(m4e," (ALBERT model)"),m4e.forEach(t),e5o=i(j),Lu=n(j,"LI",{});var g4e=s(Lu);Iee=n(g4e,"STRONG",{});var _Gr=s(Iee);o5o=r(_Gr,"bart"),_Gr.forEach(t),r5o=r(g4e," \u2014 "),$P=n(g4e,"A",{href:!0});var uGr=s($P);t5o=r(uGr,"BartForConditionalGeneration"),uGr.forEach(t),a5o=r(g4e," (BART model)"),g4e.forEach(t),n5o=i(j),Bu=n(j,"LI",{});var h4e=s(Bu);Dee=n(h4e,"STRONG",{});var bGr=s(Dee);s5o=r(bGr,"bert"),bGr.forEach(t),l5o=r(h4e," \u2014 "),IP=n(h4e,"A",{href:!0});var vGr=s(IP);i5o=r(vGr,"BertForMaskedLM"),vGr.forEach(t),d5o=r(h4e," (BERT model)"),h4e.forEach(t),c5o=i(j),xu=n(j,"LI",{});var p4e=s(xu);jee=n(p4e,"STRONG",{});var TGr=s(jee);f5o=r(TGr,"big_bird"),TGr.forEach(t),m5o=r(p4e," \u2014 "),DP=n(p4e,"A",{href:!0});var FGr=s(DP);g5o=r(FGr,"BigBirdForMaskedLM"),FGr.forEach(t),h5o=r(p4e," (BigBird model)"),p4e.forEach(t),p5o=i(j),ku=n(j,"LI",{});var _4e=s(ku);Nee=n(_4e,"STRONG",{});var CGr=s(Nee);_5o=r(CGr,"camembert"),CGr.forEach(t),u5o=r(_4e," \u2014 "),jP=n(_4e,"A",{href:!0});var MGr=s(jP);b5o=r(MGr,"CamembertForMaskedLM"),MGr.forEach(t),v5o=r(_4e," (CamemBERT model)"),_4e.forEach(t),T5o=i(j),Ru=n(j,"LI",{});var u4e=s(Ru);qee=n(u4e,"STRONG",{});var EGr=s(qee);F5o=r(EGr,"convbert"),EGr.forEach(t),C5o=r(u4e," \u2014 "),NP=n(u4e,"A",{href:!0});var yGr=s(NP);M5o=r(yGr,"ConvBertForMaskedLM"),yGr.forEach(t),E5o=r(u4e," (ConvBERT model)"),u4e.forEach(t),y5o=i(j),Su=n(j,"LI",{});var b4e=s(Su);Gee=n(b4e,"STRONG",{});var wGr=s(Gee);w5o=r(wGr,"data2vec-text"),wGr.forEach(t),A5o=r(b4e," \u2014 "),qP=n(b4e,"A",{href:!0});var AGr=s(qP);L5o=r(AGr,"Data2VecTextForMaskedLM"),AGr.forEach(t),B5o=r(b4e," (Data2VecText model)"),b4e.forEach(t),x5o=i(j),Pu=n(j,"LI",{});var v4e=s(Pu);Oee=n(v4e,"STRONG",{});var LGr=s(Oee);k5o=r(LGr,"deberta"),LGr.forEach(t),R5o=r(v4e," \u2014 "),GP=n(v4e,"A",{href:!0});var BGr=s(GP);S5o=r(BGr,"DebertaForMaskedLM"),BGr.forEach(t),P5o=r(v4e," (DeBERTa model)"),v4e.forEach(t),$5o=i(j),$u=n(j,"LI",{});var T4e=s($u);Xee=n(T4e,"STRONG",{});var xGr=s(Xee);I5o=r(xGr,"deberta-v2"),xGr.forEach(t),D5o=r(T4e," \u2014 "),OP=n(T4e,"A",{href:!0});var kGr=s(OP);j5o=r(kGr,"DebertaV2ForMaskedLM"),kGr.forEach(t),N5o=r(T4e," (DeBERTa-v2 model)"),T4e.forEach(t),q5o=i(j),Iu=n(j,"LI",{});var F4e=s(Iu);Vee=n(F4e,"STRONG",{});var RGr=s(Vee);G5o=r(RGr,"distilbert"),RGr.forEach(t),O5o=r(F4e," \u2014 "),XP=n(F4e,"A",{href:!0});var SGr=s(XP);X5o=r(SGr,"DistilBertForMaskedLM"),SGr.forEach(t),V5o=r(F4e," (DistilBERT model)"),F4e.forEach(t),z5o=i(j),Du=n(j,"LI",{});var C4e=s(Du);zee=n(C4e,"STRONG",{});var PGr=s(zee);W5o=r(PGr,"electra"),PGr.forEach(t),Q5o=r(C4e," \u2014 "),VP=n(C4e,"A",{href:!0});var $Gr=s(VP);H5o=r($Gr,"ElectraForMaskedLM"),$Gr.forEach(t),U5o=r(C4e," (ELECTRA model)"),C4e.forEach(t),J5o=i(j),ju=n(j,"LI",{});var M4e=s(ju);Wee=n(M4e,"STRONG",{});var IGr=s(Wee);Y5o=r(IGr,"flaubert"),IGr.forEach(t),K5o=r(M4e," \u2014 "),zP=n(M4e,"A",{href:!0});var DGr=s(zP);Z5o=r(DGr,"FlaubertWithLMHeadModel"),DGr.forEach(t),e1o=r(M4e," (FlauBERT model)"),M4e.forEach(t),o1o=i(j),Nu=n(j,"LI",{});var E4e=s(Nu);Qee=n(E4e,"STRONG",{});var jGr=s(Qee);r1o=r(jGr,"fnet"),jGr.forEach(t),t1o=r(E4e," \u2014 "),WP=n(E4e,"A",{href:!0});var NGr=s(WP);a1o=r(NGr,"FNetForMaskedLM"),NGr.forEach(t),n1o=r(E4e," (FNet model)"),E4e.forEach(t),s1o=i(j),qu=n(j,"LI",{});var y4e=s(qu);Hee=n(y4e,"STRONG",{});var qGr=s(Hee);l1o=r(qGr,"funnel"),qGr.forEach(t),i1o=r(y4e," \u2014 "),QP=n(y4e,"A",{href:!0});var GGr=s(QP);d1o=r(GGr,"FunnelForMaskedLM"),GGr.forEach(t),c1o=r(y4e," (Funnel Transformer model)"),y4e.forEach(t),f1o=i(j),Gu=n(j,"LI",{});var w4e=s(Gu);Uee=n(w4e,"STRONG",{});var OGr=s(Uee);m1o=r(OGr,"ibert"),OGr.forEach(t),g1o=r(w4e," \u2014 "),HP=n(w4e,"A",{href:!0});var XGr=s(HP);h1o=r(XGr,"IBertForMaskedLM"),XGr.forEach(t),p1o=r(w4e," (I-BERT model)"),w4e.forEach(t),_1o=i(j),Ou=n(j,"LI",{});var A4e=s(Ou);Jee=n(A4e,"STRONG",{});var VGr=s(Jee);u1o=r(VGr,"layoutlm"),VGr.forEach(t),b1o=r(A4e," \u2014 "),UP=n(A4e,"A",{href:!0});var zGr=s(UP);v1o=r(zGr,"LayoutLMForMaskedLM"),zGr.forEach(t),T1o=r(A4e," (LayoutLM model)"),A4e.forEach(t),F1o=i(j),Xu=n(j,"LI",{});var L4e=s(Xu);Yee=n(L4e,"STRONG",{});var WGr=s(Yee);C1o=r(WGr,"longformer"),WGr.forEach(t),M1o=r(L4e," \u2014 "),JP=n(L4e,"A",{href:!0});var QGr=s(JP);E1o=r(QGr,"LongformerForMaskedLM"),QGr.forEach(t),y1o=r(L4e," (Longformer model)"),L4e.forEach(t),w1o=i(j),Vu=n(j,"LI",{});var B4e=s(Vu);Kee=n(B4e,"STRONG",{});var HGr=s(Kee);A1o=r(HGr,"mbart"),HGr.forEach(t),L1o=r(B4e," \u2014 "),YP=n(B4e,"A",{href:!0});var UGr=s(YP);B1o=r(UGr,"MBartForConditionalGeneration"),UGr.forEach(t),x1o=r(B4e," (mBART model)"),B4e.forEach(t),k1o=i(j),zu=n(j,"LI",{});var x4e=s(zu);Zee=n(x4e,"STRONG",{});var JGr=s(Zee);R1o=r(JGr,"megatron-bert"),JGr.forEach(t),S1o=r(x4e," \u2014 "),KP=n(x4e,"A",{href:!0});var YGr=s(KP);P1o=r(YGr,"MegatronBertForMaskedLM"),YGr.forEach(t),$1o=r(x4e," (MegatronBert model)"),x4e.forEach(t),I1o=i(j),Wu=n(j,"LI",{});var k4e=s(Wu);eoe=n(k4e,"STRONG",{});var KGr=s(eoe);D1o=r(KGr,"mobilebert"),KGr.forEach(t),j1o=r(k4e," \u2014 "),ZP=n(k4e,"A",{href:!0});var ZGr=s(ZP);N1o=r(ZGr,"MobileBertForMaskedLM"),ZGr.forEach(t),q1o=r(k4e," (MobileBERT model)"),k4e.forEach(t),G1o=i(j),Qu=n(j,"LI",{});var R4e=s(Qu);ooe=n(R4e,"STRONG",{});var eOr=s(ooe);O1o=r(eOr,"mpnet"),eOr.forEach(t),X1o=r(R4e," \u2014 "),e$=n(R4e,"A",{href:!0});var oOr=s(e$);V1o=r(oOr,"MPNetForMaskedLM"),oOr.forEach(t),z1o=r(R4e," (MPNet model)"),R4e.forEach(t),W1o=i(j),Hu=n(j,"LI",{});var S4e=s(Hu);roe=n(S4e,"STRONG",{});var rOr=s(roe);Q1o=r(rOr,"nystromformer"),rOr.forEach(t),H1o=r(S4e," \u2014 "),o$=n(S4e,"A",{href:!0});var tOr=s(o$);U1o=r(tOr,"NystromformerForMaskedLM"),tOr.forEach(t),J1o=r(S4e," (Nystromformer model)"),S4e.forEach(t),Y1o=i(j),Uu=n(j,"LI",{});var P4e=s(Uu);toe=n(P4e,"STRONG",{});var aOr=s(toe);K1o=r(aOr,"perceiver"),aOr.forEach(t),Z1o=r(P4e," \u2014 "),r$=n(P4e,"A",{href:!0});var nOr=s(r$);ebo=r(nOr,"PerceiverForMaskedLM"),nOr.forEach(t),obo=r(P4e," (Perceiver model)"),P4e.forEach(t),rbo=i(j),Ju=n(j,"LI",{});var $4e=s(Ju);aoe=n($4e,"STRONG",{});var sOr=s(aoe);tbo=r(sOr,"qdqbert"),sOr.forEach(t),abo=r($4e," \u2014 "),t$=n($4e,"A",{href:!0});var lOr=s(t$);nbo=r(lOr,"QDQBertForMaskedLM"),lOr.forEach(t),sbo=r($4e," (QDQBert model)"),$4e.forEach(t),lbo=i(j),Yu=n(j,"LI",{});var I4e=s(Yu);noe=n(I4e,"STRONG",{});var iOr=s(noe);ibo=r(iOr,"reformer"),iOr.forEach(t),dbo=r(I4e," \u2014 "),a$=n(I4e,"A",{href:!0});var dOr=s(a$);cbo=r(dOr,"ReformerForMaskedLM"),dOr.forEach(t),fbo=r(I4e," (Reformer model)"),I4e.forEach(t),mbo=i(j),Ku=n(j,"LI",{});var D4e=s(Ku);soe=n(D4e,"STRONG",{});var cOr=s(soe);gbo=r(cOr,"rembert"),cOr.forEach(t),hbo=r(D4e," \u2014 "),n$=n(D4e,"A",{href:!0});var fOr=s(n$);pbo=r(fOr,"RemBertForMaskedLM"),fOr.forEach(t),_bo=r(D4e," (RemBERT model)"),D4e.forEach(t),ubo=i(j),Zu=n(j,"LI",{});var j4e=s(Zu);loe=n(j4e,"STRONG",{});var mOr=s(loe);bbo=r(mOr,"roberta"),mOr.forEach(t),vbo=r(j4e," \u2014 "),s$=n(j4e,"A",{href:!0});var gOr=s(s$);Tbo=r(gOr,"RobertaForMaskedLM"),gOr.forEach(t),Fbo=r(j4e," (RoBERTa model)"),j4e.forEach(t),Cbo=i(j),e5=n(j,"LI",{});var N4e=s(e5);ioe=n(N4e,"STRONG",{});var hOr=s(ioe);Mbo=r(hOr,"roformer"),hOr.forEach(t),Ebo=r(N4e," \u2014 "),l$=n(N4e,"A",{href:!0});var pOr=s(l$);ybo=r(pOr,"RoFormerForMaskedLM"),pOr.forEach(t),wbo=r(N4e," (RoFormer model)"),N4e.forEach(t),Abo=i(j),o5=n(j,"LI",{});var q4e=s(o5);doe=n(q4e,"STRONG",{});var _Or=s(doe);Lbo=r(_Or,"squeezebert"),_Or.forEach(t),Bbo=r(q4e," \u2014 "),i$=n(q4e,"A",{href:!0});var uOr=s(i$);xbo=r(uOr,"SqueezeBertForMaskedLM"),uOr.forEach(t),kbo=r(q4e," (SqueezeBERT model)"),q4e.forEach(t),Rbo=i(j),r5=n(j,"LI",{});var G4e=s(r5);coe=n(G4e,"STRONG",{});var bOr=s(coe);Sbo=r(bOr,"tapas"),bOr.forEach(t),Pbo=r(G4e," \u2014 "),d$=n(G4e,"A",{href:!0});var vOr=s(d$);$bo=r(vOr,"TapasForMaskedLM"),vOr.forEach(t),Ibo=r(G4e," (TAPAS model)"),G4e.forEach(t),Dbo=i(j),t5=n(j,"LI",{});var O4e=s(t5);foe=n(O4e,"STRONG",{});var TOr=s(foe);jbo=r(TOr,"wav2vec2"),TOr.forEach(t),Nbo=r(O4e," \u2014 "),moe=n(O4e,"CODE",{});var FOr=s(moe);qbo=r(FOr,"Wav2Vec2ForMaskedLM"),FOr.forEach(t),Gbo=r(O4e,"(Wav2Vec2 model)"),O4e.forEach(t),Obo=i(j),a5=n(j,"LI",{});var X4e=s(a5);goe=n(X4e,"STRONG",{});var COr=s(goe);Xbo=r(COr,"xlm"),COr.forEach(t),Vbo=r(X4e," \u2014 "),c$=n(X4e,"A",{href:!0});var MOr=s(c$);zbo=r(MOr,"XLMWithLMHeadModel"),MOr.forEach(t),Wbo=r(X4e," (XLM model)"),X4e.forEach(t),Qbo=i(j),n5=n(j,"LI",{});var V4e=s(n5);hoe=n(V4e,"STRONG",{});var EOr=s(hoe);Hbo=r(EOr,"xlm-roberta"),EOr.forEach(t),Ubo=r(V4e," \u2014 "),f$=n(V4e,"A",{href:!0});var yOr=s(f$);Jbo=r(yOr,"XLMRobertaForMaskedLM"),yOr.forEach(t),Ybo=r(V4e," (XLM-RoBERTa model)"),V4e.forEach(t),Kbo=i(j),s5=n(j,"LI",{});var z4e=s(s5);poe=n(z4e,"STRONG",{});var wOr=s(poe);Zbo=r(wOr,"xlm-roberta-xl"),wOr.forEach(t),e2o=r(z4e," \u2014 "),m$=n(z4e,"A",{href:!0});var AOr=s(m$);o2o=r(AOr,"XLMRobertaXLForMaskedLM"),AOr.forEach(t),r2o=r(z4e," (XLM-RoBERTa-XL model)"),z4e.forEach(t),t2o=i(j),l5=n(j,"LI",{});var W4e=s(l5);_oe=n(W4e,"STRONG",{});var LOr=s(_oe);a2o=r(LOr,"yoso"),LOr.forEach(t),n2o=r(W4e," \u2014 "),g$=n(W4e,"A",{href:!0});var BOr=s(g$);s2o=r(BOr,"YosoForMaskedLM"),BOr.forEach(t),l2o=r(W4e," (YOSO model)"),W4e.forEach(t),j.forEach(t),i2o=i(jt),i5=n(jt,"P",{});var Q4e=s(i5);d2o=r(Q4e,"The model is set in evaluation mode by default using "),uoe=n(Q4e,"CODE",{});var xOr=s(uoe);c2o=r(xOr,"model.eval()"),xOr.forEach(t),f2o=r(Q4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),boe=n(Q4e,"CODE",{});var kOr=s(boe);m2o=r(kOr,"model.train()"),kOr.forEach(t),Q4e.forEach(t),g2o=i(jt),voe=n(jt,"P",{});var ROr=s(voe);h2o=r(ROr,"Examples:"),ROr.forEach(t),p2o=i(jt),m(AE.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),j8e=i(c),ed=n(c,"H2",{class:!0});var zxe=s(ed);d5=n(zxe,"A",{id:!0,class:!0,href:!0});var SOr=s(d5);Toe=n(SOr,"SPAN",{});var POr=s(Toe);m(LE.$$.fragment,POr),POr.forEach(t),SOr.forEach(t),_2o=i(zxe),Foe=n(zxe,"SPAN",{});var $Or=s(Foe);u2o=r($Or,"AutoModelForSeq2SeqLM"),$Or.forEach(t),zxe.forEach(t),N8e=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(BE.$$.fragment,Hs),b2o=i(Hs),od=n(Hs,"P",{});var DV=s(od);v2o=r(DV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Coe=n(DV,"CODE",{});var IOr=s(Coe);T2o=r(IOr,"from_pretrained()"),IOr.forEach(t),F2o=r(DV,"class method or the "),Moe=n(DV,"CODE",{});var DOr=s(Moe);C2o=r(DOr,"from_config()"),DOr.forEach(t),M2o=r(DV,`class
method.`),DV.forEach(t),E2o=i(Hs),xE=n(Hs,"P",{});var Wxe=s(xE);y2o=r(Wxe,"This class cannot be instantiated directly using "),Eoe=n(Wxe,"CODE",{});var jOr=s(Eoe);w2o=r(jOr,"__init__()"),jOr.forEach(t),A2o=r(Wxe," (throws an error)."),Wxe.forEach(t),L2o=i(Hs),Vr=n(Hs,"DIV",{class:!0});var Us=s(Vr);m(kE.$$.fragment,Us),B2o=i(Us),yoe=n(Us,"P",{});var NOr=s(yoe);x2o=r(NOr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NOr.forEach(t),k2o=i(Us),rd=n(Us,"P",{});var jV=s(rd);R2o=r(jV,`Note:
Loading a model from its configuration file does `),woe=n(jV,"STRONG",{});var qOr=s(woe);S2o=r(qOr,"not"),qOr.forEach(t),P2o=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(jV,"CODE",{});var GOr=s(Aoe);$2o=r(GOr,"from_pretrained()"),GOr.forEach(t),I2o=r(jV,"to load the model weights."),jV.forEach(t),D2o=i(Us),Loe=n(Us,"P",{});var OOr=s(Loe);j2o=r(OOr,"Examples:"),OOr.forEach(t),N2o=i(Us),m(RE.$$.fragment,Us),Us.forEach(t),q2o=i(Hs),Ie=n(Hs,"DIV",{class:!0});var Nt=s(Ie);m(SE.$$.fragment,Nt),G2o=i(Nt),Boe=n(Nt,"P",{});var XOr=s(Boe);O2o=r(XOr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XOr.forEach(t),X2o=i(Nt),Xa=n(Nt,"P",{});var L4=s(Xa);V2o=r(L4,"The model class to instantiate is selected based on the "),xoe=n(L4,"CODE",{});var VOr=s(xoe);z2o=r(VOr,"model_type"),VOr.forEach(t),W2o=r(L4,` property of the config object (either
passed as an argument or loaded from `),koe=n(L4,"CODE",{});var zOr=s(koe);Q2o=r(zOr,"pretrained_model_name_or_path"),zOr.forEach(t),H2o=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Roe=n(L4,"CODE",{});var WOr=s(Roe);U2o=r(WOr,"pretrained_model_name_or_path"),WOr.forEach(t),J2o=r(L4,":"),L4.forEach(t),Y2o=i(Nt),ae=n(Nt,"UL",{});var le=s(ae);c5=n(le,"LI",{});var H4e=s(c5);Soe=n(H4e,"STRONG",{});var QOr=s(Soe);K2o=r(QOr,"bart"),QOr.forEach(t),Z2o=r(H4e," \u2014 "),h$=n(H4e,"A",{href:!0});var HOr=s(h$);evo=r(HOr,"BartForConditionalGeneration"),HOr.forEach(t),ovo=r(H4e," (BART model)"),H4e.forEach(t),rvo=i(le),f5=n(le,"LI",{});var U4e=s(f5);Poe=n(U4e,"STRONG",{});var UOr=s(Poe);tvo=r(UOr,"bigbird_pegasus"),UOr.forEach(t),avo=r(U4e," \u2014 "),p$=n(U4e,"A",{href:!0});var JOr=s(p$);nvo=r(JOr,"BigBirdPegasusForConditionalGeneration"),JOr.forEach(t),svo=r(U4e," (BigBirdPegasus model)"),U4e.forEach(t),lvo=i(le),m5=n(le,"LI",{});var J4e=s(m5);$oe=n(J4e,"STRONG",{});var YOr=s($oe);ivo=r(YOr,"blenderbot"),YOr.forEach(t),dvo=r(J4e," \u2014 "),_$=n(J4e,"A",{href:!0});var KOr=s(_$);cvo=r(KOr,"BlenderbotForConditionalGeneration"),KOr.forEach(t),fvo=r(J4e," (Blenderbot model)"),J4e.forEach(t),mvo=i(le),g5=n(le,"LI",{});var Y4e=s(g5);Ioe=n(Y4e,"STRONG",{});var ZOr=s(Ioe);gvo=r(ZOr,"blenderbot-small"),ZOr.forEach(t),hvo=r(Y4e," \u2014 "),u$=n(Y4e,"A",{href:!0});var eXr=s(u$);pvo=r(eXr,"BlenderbotSmallForConditionalGeneration"),eXr.forEach(t),_vo=r(Y4e," (BlenderbotSmall model)"),Y4e.forEach(t),uvo=i(le),h5=n(le,"LI",{});var K4e=s(h5);Doe=n(K4e,"STRONG",{});var oXr=s(Doe);bvo=r(oXr,"encoder-decoder"),oXr.forEach(t),vvo=r(K4e," \u2014 "),b$=n(K4e,"A",{href:!0});var rXr=s(b$);Tvo=r(rXr,"EncoderDecoderModel"),rXr.forEach(t),Fvo=r(K4e," (Encoder decoder model)"),K4e.forEach(t),Cvo=i(le),p5=n(le,"LI",{});var Z4e=s(p5);joe=n(Z4e,"STRONG",{});var tXr=s(joe);Mvo=r(tXr,"fsmt"),tXr.forEach(t),Evo=r(Z4e," \u2014 "),v$=n(Z4e,"A",{href:!0});var aXr=s(v$);yvo=r(aXr,"FSMTForConditionalGeneration"),aXr.forEach(t),wvo=r(Z4e," (FairSeq Machine-Translation model)"),Z4e.forEach(t),Avo=i(le),_5=n(le,"LI",{});var eMe=s(_5);Noe=n(eMe,"STRONG",{});var nXr=s(Noe);Lvo=r(nXr,"led"),nXr.forEach(t),Bvo=r(eMe," \u2014 "),T$=n(eMe,"A",{href:!0});var sXr=s(T$);xvo=r(sXr,"LEDForConditionalGeneration"),sXr.forEach(t),kvo=r(eMe," (LED model)"),eMe.forEach(t),Rvo=i(le),u5=n(le,"LI",{});var oMe=s(u5);qoe=n(oMe,"STRONG",{});var lXr=s(qoe);Svo=r(lXr,"m2m_100"),lXr.forEach(t),Pvo=r(oMe," \u2014 "),F$=n(oMe,"A",{href:!0});var iXr=s(F$);$vo=r(iXr,"M2M100ForConditionalGeneration"),iXr.forEach(t),Ivo=r(oMe," (M2M100 model)"),oMe.forEach(t),Dvo=i(le),b5=n(le,"LI",{});var rMe=s(b5);Goe=n(rMe,"STRONG",{});var dXr=s(Goe);jvo=r(dXr,"marian"),dXr.forEach(t),Nvo=r(rMe," \u2014 "),C$=n(rMe,"A",{href:!0});var cXr=s(C$);qvo=r(cXr,"MarianMTModel"),cXr.forEach(t),Gvo=r(rMe," (Marian model)"),rMe.forEach(t),Ovo=i(le),v5=n(le,"LI",{});var tMe=s(v5);Ooe=n(tMe,"STRONG",{});var fXr=s(Ooe);Xvo=r(fXr,"mbart"),fXr.forEach(t),Vvo=r(tMe," \u2014 "),M$=n(tMe,"A",{href:!0});var mXr=s(M$);zvo=r(mXr,"MBartForConditionalGeneration"),mXr.forEach(t),Wvo=r(tMe," (mBART model)"),tMe.forEach(t),Qvo=i(le),T5=n(le,"LI",{});var aMe=s(T5);Xoe=n(aMe,"STRONG",{});var gXr=s(Xoe);Hvo=r(gXr,"mt5"),gXr.forEach(t),Uvo=r(aMe," \u2014 "),E$=n(aMe,"A",{href:!0});var hXr=s(E$);Jvo=r(hXr,"MT5ForConditionalGeneration"),hXr.forEach(t),Yvo=r(aMe," (mT5 model)"),aMe.forEach(t),Kvo=i(le),F5=n(le,"LI",{});var nMe=s(F5);Voe=n(nMe,"STRONG",{});var pXr=s(Voe);Zvo=r(pXr,"pegasus"),pXr.forEach(t),eTo=r(nMe," \u2014 "),y$=n(nMe,"A",{href:!0});var _Xr=s(y$);oTo=r(_Xr,"PegasusForConditionalGeneration"),_Xr.forEach(t),rTo=r(nMe," (Pegasus model)"),nMe.forEach(t),tTo=i(le),C5=n(le,"LI",{});var sMe=s(C5);zoe=n(sMe,"STRONG",{});var uXr=s(zoe);aTo=r(uXr,"plbart"),uXr.forEach(t),nTo=r(sMe," \u2014 "),w$=n(sMe,"A",{href:!0});var bXr=s(w$);sTo=r(bXr,"PLBartForConditionalGeneration"),bXr.forEach(t),lTo=r(sMe," (PLBart model)"),sMe.forEach(t),iTo=i(le),M5=n(le,"LI",{});var lMe=s(M5);Woe=n(lMe,"STRONG",{});var vXr=s(Woe);dTo=r(vXr,"prophetnet"),vXr.forEach(t),cTo=r(lMe," \u2014 "),A$=n(lMe,"A",{href:!0});var TXr=s(A$);fTo=r(TXr,"ProphetNetForConditionalGeneration"),TXr.forEach(t),mTo=r(lMe," (ProphetNet model)"),lMe.forEach(t),gTo=i(le),E5=n(le,"LI",{});var iMe=s(E5);Qoe=n(iMe,"STRONG",{});var FXr=s(Qoe);hTo=r(FXr,"t5"),FXr.forEach(t),pTo=r(iMe," \u2014 "),L$=n(iMe,"A",{href:!0});var CXr=s(L$);_To=r(CXr,"T5ForConditionalGeneration"),CXr.forEach(t),uTo=r(iMe," (T5 model)"),iMe.forEach(t),bTo=i(le),y5=n(le,"LI",{});var dMe=s(y5);Hoe=n(dMe,"STRONG",{});var MXr=s(Hoe);vTo=r(MXr,"xlm-prophetnet"),MXr.forEach(t),TTo=r(dMe," \u2014 "),B$=n(dMe,"A",{href:!0});var EXr=s(B$);FTo=r(EXr,"XLMProphetNetForConditionalGeneration"),EXr.forEach(t),CTo=r(dMe," (XLMProphetNet model)"),dMe.forEach(t),le.forEach(t),MTo=i(Nt),w5=n(Nt,"P",{});var cMe=s(w5);ETo=r(cMe,"The model is set in evaluation mode by default using "),Uoe=n(cMe,"CODE",{});var yXr=s(Uoe);yTo=r(yXr,"model.eval()"),yXr.forEach(t),wTo=r(cMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=n(cMe,"CODE",{});var wXr=s(Joe);ATo=r(wXr,"model.train()"),wXr.forEach(t),cMe.forEach(t),LTo=i(Nt),Yoe=n(Nt,"P",{});var AXr=s(Yoe);BTo=r(AXr,"Examples:"),AXr.forEach(t),xTo=i(Nt),m(PE.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),q8e=i(c),td=n(c,"H2",{class:!0});var Qxe=s(td);A5=n(Qxe,"A",{id:!0,class:!0,href:!0});var LXr=s(A5);Koe=n(LXr,"SPAN",{});var BXr=s(Koe);m($E.$$.fragment,BXr),BXr.forEach(t),LXr.forEach(t),kTo=i(Qxe),Zoe=n(Qxe,"SPAN",{});var xXr=s(Zoe);RTo=r(xXr,"AutoModelForSequenceClassification"),xXr.forEach(t),Qxe.forEach(t),G8e=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(IE.$$.fragment,Js),STo=i(Js),ad=n(Js,"P",{});var NV=s(ad);PTo=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ere=n(NV,"CODE",{});var kXr=s(ere);$To=r(kXr,"from_pretrained()"),kXr.forEach(t),ITo=r(NV,"class method or the "),ore=n(NV,"CODE",{});var RXr=s(ore);DTo=r(RXr,"from_config()"),RXr.forEach(t),jTo=r(NV,`class
method.`),NV.forEach(t),NTo=i(Js),DE=n(Js,"P",{});var Hxe=s(DE);qTo=r(Hxe,"This class cannot be instantiated directly using "),rre=n(Hxe,"CODE",{});var SXr=s(rre);GTo=r(SXr,"__init__()"),SXr.forEach(t),OTo=r(Hxe," (throws an error)."),Hxe.forEach(t),XTo=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(jE.$$.fragment,Ys),VTo=i(Ys),tre=n(Ys,"P",{});var PXr=s(tre);zTo=r(PXr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PXr.forEach(t),WTo=i(Ys),nd=n(Ys,"P",{});var qV=s(nd);QTo=r(qV,`Note:
Loading a model from its configuration file does `),are=n(qV,"STRONG",{});var $Xr=s(are);HTo=r($Xr,"not"),$Xr.forEach(t),UTo=r(qV,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(qV,"CODE",{});var IXr=s(nre);JTo=r(IXr,"from_pretrained()"),IXr.forEach(t),YTo=r(qV,"to load the model weights."),qV.forEach(t),KTo=i(Ys),sre=n(Ys,"P",{});var DXr=s(sre);ZTo=r(DXr,"Examples:"),DXr.forEach(t),e7o=i(Ys),m(NE.$$.fragment,Ys),Ys.forEach(t),o7o=i(Js),De=n(Js,"DIV",{class:!0});var qt=s(De);m(qE.$$.fragment,qt),r7o=i(qt),lre=n(qt,"P",{});var jXr=s(lre);t7o=r(jXr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jXr.forEach(t),a7o=i(qt),Va=n(qt,"P",{});var B4=s(Va);n7o=r(B4,"The model class to instantiate is selected based on the "),ire=n(B4,"CODE",{});var NXr=s(ire);s7o=r(NXr,"model_type"),NXr.forEach(t),l7o=r(B4,` property of the config object (either
passed as an argument or loaded from `),dre=n(B4,"CODE",{});var qXr=s(dre);i7o=r(qXr,"pretrained_model_name_or_path"),qXr.forEach(t),d7o=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=n(B4,"CODE",{});var GXr=s(cre);c7o=r(GXr,"pretrained_model_name_or_path"),GXr.forEach(t),f7o=r(B4,":"),B4.forEach(t),m7o=i(qt),A=n(qt,"UL",{});var L=s(A);L5=n(L,"LI",{});var fMe=s(L5);fre=n(fMe,"STRONG",{});var OXr=s(fre);g7o=r(OXr,"albert"),OXr.forEach(t),h7o=r(fMe," \u2014 "),x$=n(fMe,"A",{href:!0});var XXr=s(x$);p7o=r(XXr,"AlbertForSequenceClassification"),XXr.forEach(t),_7o=r(fMe," (ALBERT model)"),fMe.forEach(t),u7o=i(L),B5=n(L,"LI",{});var mMe=s(B5);mre=n(mMe,"STRONG",{});var VXr=s(mre);b7o=r(VXr,"bart"),VXr.forEach(t),v7o=r(mMe," \u2014 "),k$=n(mMe,"A",{href:!0});var zXr=s(k$);T7o=r(zXr,"BartForSequenceClassification"),zXr.forEach(t),F7o=r(mMe," (BART model)"),mMe.forEach(t),C7o=i(L),x5=n(L,"LI",{});var gMe=s(x5);gre=n(gMe,"STRONG",{});var WXr=s(gre);M7o=r(WXr,"bert"),WXr.forEach(t),E7o=r(gMe," \u2014 "),R$=n(gMe,"A",{href:!0});var QXr=s(R$);y7o=r(QXr,"BertForSequenceClassification"),QXr.forEach(t),w7o=r(gMe," (BERT model)"),gMe.forEach(t),A7o=i(L),k5=n(L,"LI",{});var hMe=s(k5);hre=n(hMe,"STRONG",{});var HXr=s(hre);L7o=r(HXr,"big_bird"),HXr.forEach(t),B7o=r(hMe," \u2014 "),S$=n(hMe,"A",{href:!0});var UXr=s(S$);x7o=r(UXr,"BigBirdForSequenceClassification"),UXr.forEach(t),k7o=r(hMe," (BigBird model)"),hMe.forEach(t),R7o=i(L),R5=n(L,"LI",{});var pMe=s(R5);pre=n(pMe,"STRONG",{});var JXr=s(pre);S7o=r(JXr,"bigbird_pegasus"),JXr.forEach(t),P7o=r(pMe," \u2014 "),P$=n(pMe,"A",{href:!0});var YXr=s(P$);$7o=r(YXr,"BigBirdPegasusForSequenceClassification"),YXr.forEach(t),I7o=r(pMe," (BigBirdPegasus model)"),pMe.forEach(t),D7o=i(L),S5=n(L,"LI",{});var _Me=s(S5);_re=n(_Me,"STRONG",{});var KXr=s(_re);j7o=r(KXr,"camembert"),KXr.forEach(t),N7o=r(_Me," \u2014 "),$$=n(_Me,"A",{href:!0});var ZXr=s($$);q7o=r(ZXr,"CamembertForSequenceClassification"),ZXr.forEach(t),G7o=r(_Me," (CamemBERT model)"),_Me.forEach(t),O7o=i(L),P5=n(L,"LI",{});var uMe=s(P5);ure=n(uMe,"STRONG",{});var eVr=s(ure);X7o=r(eVr,"canine"),eVr.forEach(t),V7o=r(uMe," \u2014 "),I$=n(uMe,"A",{href:!0});var oVr=s(I$);z7o=r(oVr,"CanineForSequenceClassification"),oVr.forEach(t),W7o=r(uMe," (Canine model)"),uMe.forEach(t),Q7o=i(L),$5=n(L,"LI",{});var bMe=s($5);bre=n(bMe,"STRONG",{});var rVr=s(bre);H7o=r(rVr,"convbert"),rVr.forEach(t),U7o=r(bMe," \u2014 "),D$=n(bMe,"A",{href:!0});var tVr=s(D$);J7o=r(tVr,"ConvBertForSequenceClassification"),tVr.forEach(t),Y7o=r(bMe," (ConvBERT model)"),bMe.forEach(t),K7o=i(L),I5=n(L,"LI",{});var vMe=s(I5);vre=n(vMe,"STRONG",{});var aVr=s(vre);Z7o=r(aVr,"ctrl"),aVr.forEach(t),eFo=r(vMe," \u2014 "),j$=n(vMe,"A",{href:!0});var nVr=s(j$);oFo=r(nVr,"CTRLForSequenceClassification"),nVr.forEach(t),rFo=r(vMe," (CTRL model)"),vMe.forEach(t),tFo=i(L),D5=n(L,"LI",{});var TMe=s(D5);Tre=n(TMe,"STRONG",{});var sVr=s(Tre);aFo=r(sVr,"data2vec-text"),sVr.forEach(t),nFo=r(TMe," \u2014 "),N$=n(TMe,"A",{href:!0});var lVr=s(N$);sFo=r(lVr,"Data2VecTextForSequenceClassification"),lVr.forEach(t),lFo=r(TMe," (Data2VecText model)"),TMe.forEach(t),iFo=i(L),j5=n(L,"LI",{});var FMe=s(j5);Fre=n(FMe,"STRONG",{});var iVr=s(Fre);dFo=r(iVr,"deberta"),iVr.forEach(t),cFo=r(FMe," \u2014 "),q$=n(FMe,"A",{href:!0});var dVr=s(q$);fFo=r(dVr,"DebertaForSequenceClassification"),dVr.forEach(t),mFo=r(FMe," (DeBERTa model)"),FMe.forEach(t),gFo=i(L),N5=n(L,"LI",{});var CMe=s(N5);Cre=n(CMe,"STRONG",{});var cVr=s(Cre);hFo=r(cVr,"deberta-v2"),cVr.forEach(t),pFo=r(CMe," \u2014 "),G$=n(CMe,"A",{href:!0});var fVr=s(G$);_Fo=r(fVr,"DebertaV2ForSequenceClassification"),fVr.forEach(t),uFo=r(CMe," (DeBERTa-v2 model)"),CMe.forEach(t),bFo=i(L),q5=n(L,"LI",{});var MMe=s(q5);Mre=n(MMe,"STRONG",{});var mVr=s(Mre);vFo=r(mVr,"distilbert"),mVr.forEach(t),TFo=r(MMe," \u2014 "),O$=n(MMe,"A",{href:!0});var gVr=s(O$);FFo=r(gVr,"DistilBertForSequenceClassification"),gVr.forEach(t),CFo=r(MMe," (DistilBERT model)"),MMe.forEach(t),MFo=i(L),G5=n(L,"LI",{});var EMe=s(G5);Ere=n(EMe,"STRONG",{});var hVr=s(Ere);EFo=r(hVr,"electra"),hVr.forEach(t),yFo=r(EMe," \u2014 "),X$=n(EMe,"A",{href:!0});var pVr=s(X$);wFo=r(pVr,"ElectraForSequenceClassification"),pVr.forEach(t),AFo=r(EMe," (ELECTRA model)"),EMe.forEach(t),LFo=i(L),O5=n(L,"LI",{});var yMe=s(O5);yre=n(yMe,"STRONG",{});var _Vr=s(yre);BFo=r(_Vr,"flaubert"),_Vr.forEach(t),xFo=r(yMe," \u2014 "),V$=n(yMe,"A",{href:!0});var uVr=s(V$);kFo=r(uVr,"FlaubertForSequenceClassification"),uVr.forEach(t),RFo=r(yMe," (FlauBERT model)"),yMe.forEach(t),SFo=i(L),X5=n(L,"LI",{});var wMe=s(X5);wre=n(wMe,"STRONG",{});var bVr=s(wre);PFo=r(bVr,"fnet"),bVr.forEach(t),$Fo=r(wMe," \u2014 "),z$=n(wMe,"A",{href:!0});var vVr=s(z$);IFo=r(vVr,"FNetForSequenceClassification"),vVr.forEach(t),DFo=r(wMe," (FNet model)"),wMe.forEach(t),jFo=i(L),V5=n(L,"LI",{});var AMe=s(V5);Are=n(AMe,"STRONG",{});var TVr=s(Are);NFo=r(TVr,"funnel"),TVr.forEach(t),qFo=r(AMe," \u2014 "),W$=n(AMe,"A",{href:!0});var FVr=s(W$);GFo=r(FVr,"FunnelForSequenceClassification"),FVr.forEach(t),OFo=r(AMe," (Funnel Transformer model)"),AMe.forEach(t),XFo=i(L),z5=n(L,"LI",{});var LMe=s(z5);Lre=n(LMe,"STRONG",{});var CVr=s(Lre);VFo=r(CVr,"gpt2"),CVr.forEach(t),zFo=r(LMe," \u2014 "),Q$=n(LMe,"A",{href:!0});var MVr=s(Q$);WFo=r(MVr,"GPT2ForSequenceClassification"),MVr.forEach(t),QFo=r(LMe," (OpenAI GPT-2 model)"),LMe.forEach(t),HFo=i(L),W5=n(L,"LI",{});var BMe=s(W5);Bre=n(BMe,"STRONG",{});var EVr=s(Bre);UFo=r(EVr,"gpt_neo"),EVr.forEach(t),JFo=r(BMe," \u2014 "),H$=n(BMe,"A",{href:!0});var yVr=s(H$);YFo=r(yVr,"GPTNeoForSequenceClassification"),yVr.forEach(t),KFo=r(BMe," (GPT Neo model)"),BMe.forEach(t),ZFo=i(L),Q5=n(L,"LI",{});var xMe=s(Q5);xre=n(xMe,"STRONG",{});var wVr=s(xre);e9o=r(wVr,"gptj"),wVr.forEach(t),o9o=r(xMe," \u2014 "),U$=n(xMe,"A",{href:!0});var AVr=s(U$);r9o=r(AVr,"GPTJForSequenceClassification"),AVr.forEach(t),t9o=r(xMe," (GPT-J model)"),xMe.forEach(t),a9o=i(L),H5=n(L,"LI",{});var kMe=s(H5);kre=n(kMe,"STRONG",{});var LVr=s(kre);n9o=r(LVr,"ibert"),LVr.forEach(t),s9o=r(kMe," \u2014 "),J$=n(kMe,"A",{href:!0});var BVr=s(J$);l9o=r(BVr,"IBertForSequenceClassification"),BVr.forEach(t),i9o=r(kMe," (I-BERT model)"),kMe.forEach(t),d9o=i(L),U5=n(L,"LI",{});var RMe=s(U5);Rre=n(RMe,"STRONG",{});var xVr=s(Rre);c9o=r(xVr,"layoutlm"),xVr.forEach(t),f9o=r(RMe," \u2014 "),Y$=n(RMe,"A",{href:!0});var kVr=s(Y$);m9o=r(kVr,"LayoutLMForSequenceClassification"),kVr.forEach(t),g9o=r(RMe," (LayoutLM model)"),RMe.forEach(t),h9o=i(L),J5=n(L,"LI",{});var SMe=s(J5);Sre=n(SMe,"STRONG",{});var RVr=s(Sre);p9o=r(RVr,"layoutlmv2"),RVr.forEach(t),_9o=r(SMe," \u2014 "),K$=n(SMe,"A",{href:!0});var SVr=s(K$);u9o=r(SVr,"LayoutLMv2ForSequenceClassification"),SVr.forEach(t),b9o=r(SMe," (LayoutLMv2 model)"),SMe.forEach(t),v9o=i(L),Y5=n(L,"LI",{});var PMe=s(Y5);Pre=n(PMe,"STRONG",{});var PVr=s(Pre);T9o=r(PVr,"led"),PVr.forEach(t),F9o=r(PMe," \u2014 "),Z$=n(PMe,"A",{href:!0});var $Vr=s(Z$);C9o=r($Vr,"LEDForSequenceClassification"),$Vr.forEach(t),M9o=r(PMe," (LED model)"),PMe.forEach(t),E9o=i(L),K5=n(L,"LI",{});var $Me=s(K5);$re=n($Me,"STRONG",{});var IVr=s($re);y9o=r(IVr,"longformer"),IVr.forEach(t),w9o=r($Me," \u2014 "),eI=n($Me,"A",{href:!0});var DVr=s(eI);A9o=r(DVr,"LongformerForSequenceClassification"),DVr.forEach(t),L9o=r($Me," (Longformer model)"),$Me.forEach(t),B9o=i(L),Z5=n(L,"LI",{});var IMe=s(Z5);Ire=n(IMe,"STRONG",{});var jVr=s(Ire);x9o=r(jVr,"mbart"),jVr.forEach(t),k9o=r(IMe," \u2014 "),oI=n(IMe,"A",{href:!0});var NVr=s(oI);R9o=r(NVr,"MBartForSequenceClassification"),NVr.forEach(t),S9o=r(IMe," (mBART model)"),IMe.forEach(t),P9o=i(L),e1=n(L,"LI",{});var DMe=s(e1);Dre=n(DMe,"STRONG",{});var qVr=s(Dre);$9o=r(qVr,"megatron-bert"),qVr.forEach(t),I9o=r(DMe," \u2014 "),rI=n(DMe,"A",{href:!0});var GVr=s(rI);D9o=r(GVr,"MegatronBertForSequenceClassification"),GVr.forEach(t),j9o=r(DMe," (MegatronBert model)"),DMe.forEach(t),N9o=i(L),o1=n(L,"LI",{});var jMe=s(o1);jre=n(jMe,"STRONG",{});var OVr=s(jre);q9o=r(OVr,"mobilebert"),OVr.forEach(t),G9o=r(jMe," \u2014 "),tI=n(jMe,"A",{href:!0});var XVr=s(tI);O9o=r(XVr,"MobileBertForSequenceClassification"),XVr.forEach(t),X9o=r(jMe," (MobileBERT model)"),jMe.forEach(t),V9o=i(L),r1=n(L,"LI",{});var NMe=s(r1);Nre=n(NMe,"STRONG",{});var VVr=s(Nre);z9o=r(VVr,"mpnet"),VVr.forEach(t),W9o=r(NMe," \u2014 "),aI=n(NMe,"A",{href:!0});var zVr=s(aI);Q9o=r(zVr,"MPNetForSequenceClassification"),zVr.forEach(t),H9o=r(NMe," (MPNet model)"),NMe.forEach(t),U9o=i(L),t1=n(L,"LI",{});var qMe=s(t1);qre=n(qMe,"STRONG",{});var WVr=s(qre);J9o=r(WVr,"nystromformer"),WVr.forEach(t),Y9o=r(qMe," \u2014 "),nI=n(qMe,"A",{href:!0});var QVr=s(nI);K9o=r(QVr,"NystromformerForSequenceClassification"),QVr.forEach(t),Z9o=r(qMe," (Nystromformer model)"),qMe.forEach(t),eCo=i(L),a1=n(L,"LI",{});var GMe=s(a1);Gre=n(GMe,"STRONG",{});var HVr=s(Gre);oCo=r(HVr,"openai-gpt"),HVr.forEach(t),rCo=r(GMe," \u2014 "),sI=n(GMe,"A",{href:!0});var UVr=s(sI);tCo=r(UVr,"OpenAIGPTForSequenceClassification"),UVr.forEach(t),aCo=r(GMe," (OpenAI GPT model)"),GMe.forEach(t),nCo=i(L),n1=n(L,"LI",{});var OMe=s(n1);Ore=n(OMe,"STRONG",{});var JVr=s(Ore);sCo=r(JVr,"perceiver"),JVr.forEach(t),lCo=r(OMe," \u2014 "),lI=n(OMe,"A",{href:!0});var YVr=s(lI);iCo=r(YVr,"PerceiverForSequenceClassification"),YVr.forEach(t),dCo=r(OMe," (Perceiver model)"),OMe.forEach(t),cCo=i(L),s1=n(L,"LI",{});var XMe=s(s1);Xre=n(XMe,"STRONG",{});var KVr=s(Xre);fCo=r(KVr,"plbart"),KVr.forEach(t),mCo=r(XMe," \u2014 "),iI=n(XMe,"A",{href:!0});var ZVr=s(iI);gCo=r(ZVr,"PLBartForSequenceClassification"),ZVr.forEach(t),hCo=r(XMe," (PLBart model)"),XMe.forEach(t),pCo=i(L),l1=n(L,"LI",{});var VMe=s(l1);Vre=n(VMe,"STRONG",{});var ezr=s(Vre);_Co=r(ezr,"qdqbert"),ezr.forEach(t),uCo=r(VMe," \u2014 "),dI=n(VMe,"A",{href:!0});var ozr=s(dI);bCo=r(ozr,"QDQBertForSequenceClassification"),ozr.forEach(t),vCo=r(VMe," (QDQBert model)"),VMe.forEach(t),TCo=i(L),i1=n(L,"LI",{});var zMe=s(i1);zre=n(zMe,"STRONG",{});var rzr=s(zre);FCo=r(rzr,"reformer"),rzr.forEach(t),CCo=r(zMe," \u2014 "),cI=n(zMe,"A",{href:!0});var tzr=s(cI);MCo=r(tzr,"ReformerForSequenceClassification"),tzr.forEach(t),ECo=r(zMe," (Reformer model)"),zMe.forEach(t),yCo=i(L),d1=n(L,"LI",{});var WMe=s(d1);Wre=n(WMe,"STRONG",{});var azr=s(Wre);wCo=r(azr,"rembert"),azr.forEach(t),ACo=r(WMe," \u2014 "),fI=n(WMe,"A",{href:!0});var nzr=s(fI);LCo=r(nzr,"RemBertForSequenceClassification"),nzr.forEach(t),BCo=r(WMe," (RemBERT model)"),WMe.forEach(t),xCo=i(L),c1=n(L,"LI",{});var QMe=s(c1);Qre=n(QMe,"STRONG",{});var szr=s(Qre);kCo=r(szr,"roberta"),szr.forEach(t),RCo=r(QMe," \u2014 "),mI=n(QMe,"A",{href:!0});var lzr=s(mI);SCo=r(lzr,"RobertaForSequenceClassification"),lzr.forEach(t),PCo=r(QMe," (RoBERTa model)"),QMe.forEach(t),$Co=i(L),f1=n(L,"LI",{});var HMe=s(f1);Hre=n(HMe,"STRONG",{});var izr=s(Hre);ICo=r(izr,"roformer"),izr.forEach(t),DCo=r(HMe," \u2014 "),gI=n(HMe,"A",{href:!0});var dzr=s(gI);jCo=r(dzr,"RoFormerForSequenceClassification"),dzr.forEach(t),NCo=r(HMe," (RoFormer model)"),HMe.forEach(t),qCo=i(L),m1=n(L,"LI",{});var UMe=s(m1);Ure=n(UMe,"STRONG",{});var czr=s(Ure);GCo=r(czr,"squeezebert"),czr.forEach(t),OCo=r(UMe," \u2014 "),hI=n(UMe,"A",{href:!0});var fzr=s(hI);XCo=r(fzr,"SqueezeBertForSequenceClassification"),fzr.forEach(t),VCo=r(UMe," (SqueezeBERT model)"),UMe.forEach(t),zCo=i(L),g1=n(L,"LI",{});var JMe=s(g1);Jre=n(JMe,"STRONG",{});var mzr=s(Jre);WCo=r(mzr,"tapas"),mzr.forEach(t),QCo=r(JMe," \u2014 "),pI=n(JMe,"A",{href:!0});var gzr=s(pI);HCo=r(gzr,"TapasForSequenceClassification"),gzr.forEach(t),UCo=r(JMe," (TAPAS model)"),JMe.forEach(t),JCo=i(L),h1=n(L,"LI",{});var YMe=s(h1);Yre=n(YMe,"STRONG",{});var hzr=s(Yre);YCo=r(hzr,"transfo-xl"),hzr.forEach(t),KCo=r(YMe," \u2014 "),_I=n(YMe,"A",{href:!0});var pzr=s(_I);ZCo=r(pzr,"TransfoXLForSequenceClassification"),pzr.forEach(t),e4o=r(YMe," (Transformer-XL model)"),YMe.forEach(t),o4o=i(L),p1=n(L,"LI",{});var KMe=s(p1);Kre=n(KMe,"STRONG",{});var _zr=s(Kre);r4o=r(_zr,"xlm"),_zr.forEach(t),t4o=r(KMe," \u2014 "),uI=n(KMe,"A",{href:!0});var uzr=s(uI);a4o=r(uzr,"XLMForSequenceClassification"),uzr.forEach(t),n4o=r(KMe," (XLM model)"),KMe.forEach(t),s4o=i(L),_1=n(L,"LI",{});var ZMe=s(_1);Zre=n(ZMe,"STRONG",{});var bzr=s(Zre);l4o=r(bzr,"xlm-roberta"),bzr.forEach(t),i4o=r(ZMe," \u2014 "),bI=n(ZMe,"A",{href:!0});var vzr=s(bI);d4o=r(vzr,"XLMRobertaForSequenceClassification"),vzr.forEach(t),c4o=r(ZMe," (XLM-RoBERTa model)"),ZMe.forEach(t),f4o=i(L),u1=n(L,"LI",{});var eEe=s(u1);ete=n(eEe,"STRONG",{});var Tzr=s(ete);m4o=r(Tzr,"xlm-roberta-xl"),Tzr.forEach(t),g4o=r(eEe," \u2014 "),vI=n(eEe,"A",{href:!0});var Fzr=s(vI);h4o=r(Fzr,"XLMRobertaXLForSequenceClassification"),Fzr.forEach(t),p4o=r(eEe," (XLM-RoBERTa-XL model)"),eEe.forEach(t),_4o=i(L),b1=n(L,"LI",{});var oEe=s(b1);ote=n(oEe,"STRONG",{});var Czr=s(ote);u4o=r(Czr,"xlnet"),Czr.forEach(t),b4o=r(oEe," \u2014 "),TI=n(oEe,"A",{href:!0});var Mzr=s(TI);v4o=r(Mzr,"XLNetForSequenceClassification"),Mzr.forEach(t),T4o=r(oEe," (XLNet model)"),oEe.forEach(t),F4o=i(L),v1=n(L,"LI",{});var rEe=s(v1);rte=n(rEe,"STRONG",{});var Ezr=s(rte);C4o=r(Ezr,"yoso"),Ezr.forEach(t),M4o=r(rEe," \u2014 "),FI=n(rEe,"A",{href:!0});var yzr=s(FI);E4o=r(yzr,"YosoForSequenceClassification"),yzr.forEach(t),y4o=r(rEe," (YOSO model)"),rEe.forEach(t),L.forEach(t),w4o=i(qt),T1=n(qt,"P",{});var tEe=s(T1);A4o=r(tEe,"The model is set in evaluation mode by default using "),tte=n(tEe,"CODE",{});var wzr=s(tte);L4o=r(wzr,"model.eval()"),wzr.forEach(t),B4o=r(tEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=n(tEe,"CODE",{});var Azr=s(ate);x4o=r(Azr,"model.train()"),Azr.forEach(t),tEe.forEach(t),k4o=i(qt),nte=n(qt,"P",{});var Lzr=s(nte);R4o=r(Lzr,"Examples:"),Lzr.forEach(t),S4o=i(qt),m(GE.$$.fragment,qt),qt.forEach(t),Js.forEach(t),O8e=i(c),sd=n(c,"H2",{class:!0});var Uxe=s(sd);F1=n(Uxe,"A",{id:!0,class:!0,href:!0});var Bzr=s(F1);ste=n(Bzr,"SPAN",{});var xzr=s(ste);m(OE.$$.fragment,xzr),xzr.forEach(t),Bzr.forEach(t),P4o=i(Uxe),lte=n(Uxe,"SPAN",{});var kzr=s(lte);$4o=r(kzr,"AutoModelForMultipleChoice"),kzr.forEach(t),Uxe.forEach(t),X8e=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(XE.$$.fragment,Ks),I4o=i(Ks),ld=n(Ks,"P",{});var GV=s(ld);D4o=r(GV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ite=n(GV,"CODE",{});var Rzr=s(ite);j4o=r(Rzr,"from_pretrained()"),Rzr.forEach(t),N4o=r(GV,"class method or the "),dte=n(GV,"CODE",{});var Szr=s(dte);q4o=r(Szr,"from_config()"),Szr.forEach(t),G4o=r(GV,`class
method.`),GV.forEach(t),O4o=i(Ks),VE=n(Ks,"P",{});var Jxe=s(VE);X4o=r(Jxe,"This class cannot be instantiated directly using "),cte=n(Jxe,"CODE",{});var Pzr=s(cte);V4o=r(Pzr,"__init__()"),Pzr.forEach(t),z4o=r(Jxe," (throws an error)."),Jxe.forEach(t),W4o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(zE.$$.fragment,Zs),Q4o=i(Zs),fte=n(Zs,"P",{});var $zr=s(fte);H4o=r($zr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$zr.forEach(t),U4o=i(Zs),id=n(Zs,"P",{});var OV=s(id);J4o=r(OV,`Note:
Loading a model from its configuration file does `),mte=n(OV,"STRONG",{});var Izr=s(mte);Y4o=r(Izr,"not"),Izr.forEach(t),K4o=r(OV,` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=n(OV,"CODE",{});var Dzr=s(gte);Z4o=r(Dzr,"from_pretrained()"),Dzr.forEach(t),eMo=r(OV,"to load the model weights."),OV.forEach(t),oMo=i(Zs),hte=n(Zs,"P",{});var jzr=s(hte);rMo=r(jzr,"Examples:"),jzr.forEach(t),tMo=i(Zs),m(WE.$$.fragment,Zs),Zs.forEach(t),aMo=i(Ks),je=n(Ks,"DIV",{class:!0});var Gt=s(je);m(QE.$$.fragment,Gt),nMo=i(Gt),pte=n(Gt,"P",{});var Nzr=s(pte);sMo=r(Nzr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nzr.forEach(t),lMo=i(Gt),za=n(Gt,"P",{});var x4=s(za);iMo=r(x4,"The model class to instantiate is selected based on the "),_te=n(x4,"CODE",{});var qzr=s(_te);dMo=r(qzr,"model_type"),qzr.forEach(t),cMo=r(x4,` property of the config object (either
passed as an argument or loaded from `),ute=n(x4,"CODE",{});var Gzr=s(ute);fMo=r(Gzr,"pretrained_model_name_or_path"),Gzr.forEach(t),mMo=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bte=n(x4,"CODE",{});var Ozr=s(bte);gMo=r(Ozr,"pretrained_model_name_or_path"),Ozr.forEach(t),hMo=r(x4,":"),x4.forEach(t),pMo=i(Gt),G=n(Gt,"UL",{});var O=s(G);C1=n(O,"LI",{});var aEe=s(C1);vte=n(aEe,"STRONG",{});var Xzr=s(vte);_Mo=r(Xzr,"albert"),Xzr.forEach(t),uMo=r(aEe," \u2014 "),CI=n(aEe,"A",{href:!0});var Vzr=s(CI);bMo=r(Vzr,"AlbertForMultipleChoice"),Vzr.forEach(t),vMo=r(aEe," (ALBERT model)"),aEe.forEach(t),TMo=i(O),M1=n(O,"LI",{});var nEe=s(M1);Tte=n(nEe,"STRONG",{});var zzr=s(Tte);FMo=r(zzr,"bert"),zzr.forEach(t),CMo=r(nEe," \u2014 "),MI=n(nEe,"A",{href:!0});var Wzr=s(MI);MMo=r(Wzr,"BertForMultipleChoice"),Wzr.forEach(t),EMo=r(nEe," (BERT model)"),nEe.forEach(t),yMo=i(O),E1=n(O,"LI",{});var sEe=s(E1);Fte=n(sEe,"STRONG",{});var Qzr=s(Fte);wMo=r(Qzr,"big_bird"),Qzr.forEach(t),AMo=r(sEe," \u2014 "),EI=n(sEe,"A",{href:!0});var Hzr=s(EI);LMo=r(Hzr,"BigBirdForMultipleChoice"),Hzr.forEach(t),BMo=r(sEe," (BigBird model)"),sEe.forEach(t),xMo=i(O),y1=n(O,"LI",{});var lEe=s(y1);Cte=n(lEe,"STRONG",{});var Uzr=s(Cte);kMo=r(Uzr,"camembert"),Uzr.forEach(t),RMo=r(lEe," \u2014 "),yI=n(lEe,"A",{href:!0});var Jzr=s(yI);SMo=r(Jzr,"CamembertForMultipleChoice"),Jzr.forEach(t),PMo=r(lEe," (CamemBERT model)"),lEe.forEach(t),$Mo=i(O),w1=n(O,"LI",{});var iEe=s(w1);Mte=n(iEe,"STRONG",{});var Yzr=s(Mte);IMo=r(Yzr,"canine"),Yzr.forEach(t),DMo=r(iEe," \u2014 "),wI=n(iEe,"A",{href:!0});var Kzr=s(wI);jMo=r(Kzr,"CanineForMultipleChoice"),Kzr.forEach(t),NMo=r(iEe," (Canine model)"),iEe.forEach(t),qMo=i(O),A1=n(O,"LI",{});var dEe=s(A1);Ete=n(dEe,"STRONG",{});var Zzr=s(Ete);GMo=r(Zzr,"convbert"),Zzr.forEach(t),OMo=r(dEe," \u2014 "),AI=n(dEe,"A",{href:!0});var eWr=s(AI);XMo=r(eWr,"ConvBertForMultipleChoice"),eWr.forEach(t),VMo=r(dEe," (ConvBERT model)"),dEe.forEach(t),zMo=i(O),L1=n(O,"LI",{});var cEe=s(L1);yte=n(cEe,"STRONG",{});var oWr=s(yte);WMo=r(oWr,"data2vec-text"),oWr.forEach(t),QMo=r(cEe," \u2014 "),LI=n(cEe,"A",{href:!0});var rWr=s(LI);HMo=r(rWr,"Data2VecTextForMultipleChoice"),rWr.forEach(t),UMo=r(cEe," (Data2VecText model)"),cEe.forEach(t),JMo=i(O),B1=n(O,"LI",{});var fEe=s(B1);wte=n(fEe,"STRONG",{});var tWr=s(wte);YMo=r(tWr,"distilbert"),tWr.forEach(t),KMo=r(fEe," \u2014 "),BI=n(fEe,"A",{href:!0});var aWr=s(BI);ZMo=r(aWr,"DistilBertForMultipleChoice"),aWr.forEach(t),eEo=r(fEe," (DistilBERT model)"),fEe.forEach(t),oEo=i(O),x1=n(O,"LI",{});var mEe=s(x1);Ate=n(mEe,"STRONG",{});var nWr=s(Ate);rEo=r(nWr,"electra"),nWr.forEach(t),tEo=r(mEe," \u2014 "),xI=n(mEe,"A",{href:!0});var sWr=s(xI);aEo=r(sWr,"ElectraForMultipleChoice"),sWr.forEach(t),nEo=r(mEe," (ELECTRA model)"),mEe.forEach(t),sEo=i(O),k1=n(O,"LI",{});var gEe=s(k1);Lte=n(gEe,"STRONG",{});var lWr=s(Lte);lEo=r(lWr,"flaubert"),lWr.forEach(t),iEo=r(gEe," \u2014 "),kI=n(gEe,"A",{href:!0});var iWr=s(kI);dEo=r(iWr,"FlaubertForMultipleChoice"),iWr.forEach(t),cEo=r(gEe," (FlauBERT model)"),gEe.forEach(t),fEo=i(O),R1=n(O,"LI",{});var hEe=s(R1);Bte=n(hEe,"STRONG",{});var dWr=s(Bte);mEo=r(dWr,"fnet"),dWr.forEach(t),gEo=r(hEe," \u2014 "),RI=n(hEe,"A",{href:!0});var cWr=s(RI);hEo=r(cWr,"FNetForMultipleChoice"),cWr.forEach(t),pEo=r(hEe," (FNet model)"),hEe.forEach(t),_Eo=i(O),S1=n(O,"LI",{});var pEe=s(S1);xte=n(pEe,"STRONG",{});var fWr=s(xte);uEo=r(fWr,"funnel"),fWr.forEach(t),bEo=r(pEe," \u2014 "),SI=n(pEe,"A",{href:!0});var mWr=s(SI);vEo=r(mWr,"FunnelForMultipleChoice"),mWr.forEach(t),TEo=r(pEe," (Funnel Transformer model)"),pEe.forEach(t),FEo=i(O),P1=n(O,"LI",{});var _Ee=s(P1);kte=n(_Ee,"STRONG",{});var gWr=s(kte);CEo=r(gWr,"ibert"),gWr.forEach(t),MEo=r(_Ee," \u2014 "),PI=n(_Ee,"A",{href:!0});var hWr=s(PI);EEo=r(hWr,"IBertForMultipleChoice"),hWr.forEach(t),yEo=r(_Ee," (I-BERT model)"),_Ee.forEach(t),wEo=i(O),$1=n(O,"LI",{});var uEe=s($1);Rte=n(uEe,"STRONG",{});var pWr=s(Rte);AEo=r(pWr,"longformer"),pWr.forEach(t),LEo=r(uEe," \u2014 "),$I=n(uEe,"A",{href:!0});var _Wr=s($I);BEo=r(_Wr,"LongformerForMultipleChoice"),_Wr.forEach(t),xEo=r(uEe," (Longformer model)"),uEe.forEach(t),kEo=i(O),I1=n(O,"LI",{});var bEe=s(I1);Ste=n(bEe,"STRONG",{});var uWr=s(Ste);REo=r(uWr,"megatron-bert"),uWr.forEach(t),SEo=r(bEe," \u2014 "),II=n(bEe,"A",{href:!0});var bWr=s(II);PEo=r(bWr,"MegatronBertForMultipleChoice"),bWr.forEach(t),$Eo=r(bEe," (MegatronBert model)"),bEe.forEach(t),IEo=i(O),D1=n(O,"LI",{});var vEe=s(D1);Pte=n(vEe,"STRONG",{});var vWr=s(Pte);DEo=r(vWr,"mobilebert"),vWr.forEach(t),jEo=r(vEe," \u2014 "),DI=n(vEe,"A",{href:!0});var TWr=s(DI);NEo=r(TWr,"MobileBertForMultipleChoice"),TWr.forEach(t),qEo=r(vEe," (MobileBERT model)"),vEe.forEach(t),GEo=i(O),j1=n(O,"LI",{});var TEe=s(j1);$te=n(TEe,"STRONG",{});var FWr=s($te);OEo=r(FWr,"mpnet"),FWr.forEach(t),XEo=r(TEe," \u2014 "),jI=n(TEe,"A",{href:!0});var CWr=s(jI);VEo=r(CWr,"MPNetForMultipleChoice"),CWr.forEach(t),zEo=r(TEe," (MPNet model)"),TEe.forEach(t),WEo=i(O),N1=n(O,"LI",{});var FEe=s(N1);Ite=n(FEe,"STRONG",{});var MWr=s(Ite);QEo=r(MWr,"nystromformer"),MWr.forEach(t),HEo=r(FEe," \u2014 "),NI=n(FEe,"A",{href:!0});var EWr=s(NI);UEo=r(EWr,"NystromformerForMultipleChoice"),EWr.forEach(t),JEo=r(FEe," (Nystromformer model)"),FEe.forEach(t),YEo=i(O),q1=n(O,"LI",{});var CEe=s(q1);Dte=n(CEe,"STRONG",{});var yWr=s(Dte);KEo=r(yWr,"qdqbert"),yWr.forEach(t),ZEo=r(CEe," \u2014 "),qI=n(CEe,"A",{href:!0});var wWr=s(qI);e3o=r(wWr,"QDQBertForMultipleChoice"),wWr.forEach(t),o3o=r(CEe," (QDQBert model)"),CEe.forEach(t),r3o=i(O),G1=n(O,"LI",{});var MEe=s(G1);jte=n(MEe,"STRONG",{});var AWr=s(jte);t3o=r(AWr,"rembert"),AWr.forEach(t),a3o=r(MEe," \u2014 "),GI=n(MEe,"A",{href:!0});var LWr=s(GI);n3o=r(LWr,"RemBertForMultipleChoice"),LWr.forEach(t),s3o=r(MEe," (RemBERT model)"),MEe.forEach(t),l3o=i(O),O1=n(O,"LI",{});var EEe=s(O1);Nte=n(EEe,"STRONG",{});var BWr=s(Nte);i3o=r(BWr,"roberta"),BWr.forEach(t),d3o=r(EEe," \u2014 "),OI=n(EEe,"A",{href:!0});var xWr=s(OI);c3o=r(xWr,"RobertaForMultipleChoice"),xWr.forEach(t),f3o=r(EEe," (RoBERTa model)"),EEe.forEach(t),m3o=i(O),X1=n(O,"LI",{});var yEe=s(X1);qte=n(yEe,"STRONG",{});var kWr=s(qte);g3o=r(kWr,"roformer"),kWr.forEach(t),h3o=r(yEe," \u2014 "),XI=n(yEe,"A",{href:!0});var RWr=s(XI);p3o=r(RWr,"RoFormerForMultipleChoice"),RWr.forEach(t),_3o=r(yEe," (RoFormer model)"),yEe.forEach(t),u3o=i(O),V1=n(O,"LI",{});var wEe=s(V1);Gte=n(wEe,"STRONG",{});var SWr=s(Gte);b3o=r(SWr,"squeezebert"),SWr.forEach(t),v3o=r(wEe," \u2014 "),VI=n(wEe,"A",{href:!0});var PWr=s(VI);T3o=r(PWr,"SqueezeBertForMultipleChoice"),PWr.forEach(t),F3o=r(wEe," (SqueezeBERT model)"),wEe.forEach(t),C3o=i(O),z1=n(O,"LI",{});var AEe=s(z1);Ote=n(AEe,"STRONG",{});var $Wr=s(Ote);M3o=r($Wr,"xlm"),$Wr.forEach(t),E3o=r(AEe," \u2014 "),zI=n(AEe,"A",{href:!0});var IWr=s(zI);y3o=r(IWr,"XLMForMultipleChoice"),IWr.forEach(t),w3o=r(AEe," (XLM model)"),AEe.forEach(t),A3o=i(O),W1=n(O,"LI",{});var LEe=s(W1);Xte=n(LEe,"STRONG",{});var DWr=s(Xte);L3o=r(DWr,"xlm-roberta"),DWr.forEach(t),B3o=r(LEe," \u2014 "),WI=n(LEe,"A",{href:!0});var jWr=s(WI);x3o=r(jWr,"XLMRobertaForMultipleChoice"),jWr.forEach(t),k3o=r(LEe," (XLM-RoBERTa model)"),LEe.forEach(t),R3o=i(O),Q1=n(O,"LI",{});var BEe=s(Q1);Vte=n(BEe,"STRONG",{});var NWr=s(Vte);S3o=r(NWr,"xlm-roberta-xl"),NWr.forEach(t),P3o=r(BEe," \u2014 "),QI=n(BEe,"A",{href:!0});var qWr=s(QI);$3o=r(qWr,"XLMRobertaXLForMultipleChoice"),qWr.forEach(t),I3o=r(BEe," (XLM-RoBERTa-XL model)"),BEe.forEach(t),D3o=i(O),H1=n(O,"LI",{});var xEe=s(H1);zte=n(xEe,"STRONG",{});var GWr=s(zte);j3o=r(GWr,"xlnet"),GWr.forEach(t),N3o=r(xEe," \u2014 "),HI=n(xEe,"A",{href:!0});var OWr=s(HI);q3o=r(OWr,"XLNetForMultipleChoice"),OWr.forEach(t),G3o=r(xEe," (XLNet model)"),xEe.forEach(t),O3o=i(O),U1=n(O,"LI",{});var kEe=s(U1);Wte=n(kEe,"STRONG",{});var XWr=s(Wte);X3o=r(XWr,"yoso"),XWr.forEach(t),V3o=r(kEe," \u2014 "),UI=n(kEe,"A",{href:!0});var VWr=s(UI);z3o=r(VWr,"YosoForMultipleChoice"),VWr.forEach(t),W3o=r(kEe," (YOSO model)"),kEe.forEach(t),O.forEach(t),Q3o=i(Gt),J1=n(Gt,"P",{});var REe=s(J1);H3o=r(REe,"The model is set in evaluation mode by default using "),Qte=n(REe,"CODE",{});var zWr=s(Qte);U3o=r(zWr,"model.eval()"),zWr.forEach(t),J3o=r(REe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hte=n(REe,"CODE",{});var WWr=s(Hte);Y3o=r(WWr,"model.train()"),WWr.forEach(t),REe.forEach(t),K3o=i(Gt),Ute=n(Gt,"P",{});var QWr=s(Ute);Z3o=r(QWr,"Examples:"),QWr.forEach(t),eyo=i(Gt),m(HE.$$.fragment,Gt),Gt.forEach(t),Ks.forEach(t),V8e=i(c),dd=n(c,"H2",{class:!0});var Yxe=s(dd);Y1=n(Yxe,"A",{id:!0,class:!0,href:!0});var HWr=s(Y1);Jte=n(HWr,"SPAN",{});var UWr=s(Jte);m(UE.$$.fragment,UWr),UWr.forEach(t),HWr.forEach(t),oyo=i(Yxe),Yte=n(Yxe,"SPAN",{});var JWr=s(Yte);ryo=r(JWr,"AutoModelForNextSentencePrediction"),JWr.forEach(t),Yxe.forEach(t),z8e=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(JE.$$.fragment,el),tyo=i(el),cd=n(el,"P",{});var XV=s(cd);ayo=r(XV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kte=n(XV,"CODE",{});var YWr=s(Kte);nyo=r(YWr,"from_pretrained()"),YWr.forEach(t),syo=r(XV,"class method or the "),Zte=n(XV,"CODE",{});var KWr=s(Zte);lyo=r(KWr,"from_config()"),KWr.forEach(t),iyo=r(XV,`class
method.`),XV.forEach(t),dyo=i(el),YE=n(el,"P",{});var Kxe=s(YE);cyo=r(Kxe,"This class cannot be instantiated directly using "),eae=n(Kxe,"CODE",{});var ZWr=s(eae);fyo=r(ZWr,"__init__()"),ZWr.forEach(t),myo=r(Kxe," (throws an error)."),Kxe.forEach(t),gyo=i(el),Qr=n(el,"DIV",{class:!0});var ol=s(Qr);m(KE.$$.fragment,ol),hyo=i(ol),oae=n(ol,"P",{});var eQr=s(oae);pyo=r(eQr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eQr.forEach(t),_yo=i(ol),fd=n(ol,"P",{});var VV=s(fd);uyo=r(VV,`Note:
Loading a model from its configuration file does `),rae=n(VV,"STRONG",{});var oQr=s(rae);byo=r(oQr,"not"),oQr.forEach(t),vyo=r(VV,` load the model weights. It only affects the
model\u2019s configuration. Use `),tae=n(VV,"CODE",{});var rQr=s(tae);Tyo=r(rQr,"from_pretrained()"),rQr.forEach(t),Fyo=r(VV,"to load the model weights."),VV.forEach(t),Cyo=i(ol),aae=n(ol,"P",{});var tQr=s(aae);Myo=r(tQr,"Examples:"),tQr.forEach(t),Eyo=i(ol),m(ZE.$$.fragment,ol),ol.forEach(t),yyo=i(el),Ne=n(el,"DIV",{class:!0});var Ot=s(Ne);m(e3.$$.fragment,Ot),wyo=i(Ot),nae=n(Ot,"P",{});var aQr=s(nae);Ayo=r(aQr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aQr.forEach(t),Lyo=i(Ot),Wa=n(Ot,"P",{});var k4=s(Wa);Byo=r(k4,"The model class to instantiate is selected based on the "),sae=n(k4,"CODE",{});var nQr=s(sae);xyo=r(nQr,"model_type"),nQr.forEach(t),kyo=r(k4,` property of the config object (either
passed as an argument or loaded from `),lae=n(k4,"CODE",{});var sQr=s(lae);Ryo=r(sQr,"pretrained_model_name_or_path"),sQr.forEach(t),Syo=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iae=n(k4,"CODE",{});var lQr=s(iae);Pyo=r(lQr,"pretrained_model_name_or_path"),lQr.forEach(t),$yo=r(k4,":"),k4.forEach(t),Iyo=i(Ot),na=n(Ot,"UL",{});var rl=s(na);K1=n(rl,"LI",{});var SEe=s(K1);dae=n(SEe,"STRONG",{});var iQr=s(dae);Dyo=r(iQr,"bert"),iQr.forEach(t),jyo=r(SEe," \u2014 "),JI=n(SEe,"A",{href:!0});var dQr=s(JI);Nyo=r(dQr,"BertForNextSentencePrediction"),dQr.forEach(t),qyo=r(SEe," (BERT model)"),SEe.forEach(t),Gyo=i(rl),Z1=n(rl,"LI",{});var PEe=s(Z1);cae=n(PEe,"STRONG",{});var cQr=s(cae);Oyo=r(cQr,"fnet"),cQr.forEach(t),Xyo=r(PEe," \u2014 "),YI=n(PEe,"A",{href:!0});var fQr=s(YI);Vyo=r(fQr,"FNetForNextSentencePrediction"),fQr.forEach(t),zyo=r(PEe," (FNet model)"),PEe.forEach(t),Wyo=i(rl),eb=n(rl,"LI",{});var $Ee=s(eb);fae=n($Ee,"STRONG",{});var mQr=s(fae);Qyo=r(mQr,"megatron-bert"),mQr.forEach(t),Hyo=r($Ee," \u2014 "),KI=n($Ee,"A",{href:!0});var gQr=s(KI);Uyo=r(gQr,"MegatronBertForNextSentencePrediction"),gQr.forEach(t),Jyo=r($Ee," (MegatronBert model)"),$Ee.forEach(t),Yyo=i(rl),ob=n(rl,"LI",{});var IEe=s(ob);mae=n(IEe,"STRONG",{});var hQr=s(mae);Kyo=r(hQr,"mobilebert"),hQr.forEach(t),Zyo=r(IEe," \u2014 "),ZI=n(IEe,"A",{href:!0});var pQr=s(ZI);ewo=r(pQr,"MobileBertForNextSentencePrediction"),pQr.forEach(t),owo=r(IEe," (MobileBERT model)"),IEe.forEach(t),rwo=i(rl),rb=n(rl,"LI",{});var DEe=s(rb);gae=n(DEe,"STRONG",{});var _Qr=s(gae);two=r(_Qr,"qdqbert"),_Qr.forEach(t),awo=r(DEe," \u2014 "),eD=n(DEe,"A",{href:!0});var uQr=s(eD);nwo=r(uQr,"QDQBertForNextSentencePrediction"),uQr.forEach(t),swo=r(DEe," (QDQBert model)"),DEe.forEach(t),rl.forEach(t),lwo=i(Ot),tb=n(Ot,"P",{});var jEe=s(tb);iwo=r(jEe,"The model is set in evaluation mode by default using "),hae=n(jEe,"CODE",{});var bQr=s(hae);dwo=r(bQr,"model.eval()"),bQr.forEach(t),cwo=r(jEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pae=n(jEe,"CODE",{});var vQr=s(pae);fwo=r(vQr,"model.train()"),vQr.forEach(t),jEe.forEach(t),mwo=i(Ot),_ae=n(Ot,"P",{});var TQr=s(_ae);gwo=r(TQr,"Examples:"),TQr.forEach(t),hwo=i(Ot),m(o3.$$.fragment,Ot),Ot.forEach(t),el.forEach(t),W8e=i(c),md=n(c,"H2",{class:!0});var Zxe=s(md);ab=n(Zxe,"A",{id:!0,class:!0,href:!0});var FQr=s(ab);uae=n(FQr,"SPAN",{});var CQr=s(uae);m(r3.$$.fragment,CQr),CQr.forEach(t),FQr.forEach(t),pwo=i(Zxe),bae=n(Zxe,"SPAN",{});var MQr=s(bae);_wo=r(MQr,"AutoModelForTokenClassification"),MQr.forEach(t),Zxe.forEach(t),Q8e=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(t3.$$.fragment,tl),uwo=i(tl),gd=n(tl,"P",{});var zV=s(gd);bwo=r(zV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vae=n(zV,"CODE",{});var EQr=s(vae);vwo=r(EQr,"from_pretrained()"),EQr.forEach(t),Two=r(zV,"class method or the "),Tae=n(zV,"CODE",{});var yQr=s(Tae);Fwo=r(yQr,"from_config()"),yQr.forEach(t),Cwo=r(zV,`class
method.`),zV.forEach(t),Mwo=i(tl),a3=n(tl,"P",{});var eke=s(a3);Ewo=r(eke,"This class cannot be instantiated directly using "),Fae=n(eke,"CODE",{});var wQr=s(Fae);ywo=r(wQr,"__init__()"),wQr.forEach(t),wwo=r(eke," (throws an error)."),eke.forEach(t),Awo=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(n3.$$.fragment,al),Lwo=i(al),Cae=n(al,"P",{});var AQr=s(Cae);Bwo=r(AQr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AQr.forEach(t),xwo=i(al),hd=n(al,"P",{});var WV=s(hd);kwo=r(WV,`Note:
Loading a model from its configuration file does `),Mae=n(WV,"STRONG",{});var LQr=s(Mae);Rwo=r(LQr,"not"),LQr.forEach(t),Swo=r(WV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=n(WV,"CODE",{});var BQr=s(Eae);Pwo=r(BQr,"from_pretrained()"),BQr.forEach(t),$wo=r(WV,"to load the model weights."),WV.forEach(t),Iwo=i(al),yae=n(al,"P",{});var xQr=s(yae);Dwo=r(xQr,"Examples:"),xQr.forEach(t),jwo=i(al),m(s3.$$.fragment,al),al.forEach(t),Nwo=i(tl),qe=n(tl,"DIV",{class:!0});var Xt=s(qe);m(l3.$$.fragment,Xt),qwo=i(Xt),wae=n(Xt,"P",{});var kQr=s(wae);Gwo=r(kQr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kQr.forEach(t),Owo=i(Xt),Qa=n(Xt,"P",{});var R4=s(Qa);Xwo=r(R4,"The model class to instantiate is selected based on the "),Aae=n(R4,"CODE",{});var RQr=s(Aae);Vwo=r(RQr,"model_type"),RQr.forEach(t),zwo=r(R4,` property of the config object (either
passed as an argument or loaded from `),Lae=n(R4,"CODE",{});var SQr=s(Lae);Wwo=r(SQr,"pretrained_model_name_or_path"),SQr.forEach(t),Qwo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=n(R4,"CODE",{});var PQr=s(Bae);Hwo=r(PQr,"pretrained_model_name_or_path"),PQr.forEach(t),Uwo=r(R4,":"),R4.forEach(t),Jwo=i(Xt),N=n(Xt,"UL",{});var q=s(N);nb=n(q,"LI",{});var NEe=s(nb);xae=n(NEe,"STRONG",{});var $Qr=s(xae);Ywo=r($Qr,"albert"),$Qr.forEach(t),Kwo=r(NEe," \u2014 "),oD=n(NEe,"A",{href:!0});var IQr=s(oD);Zwo=r(IQr,"AlbertForTokenClassification"),IQr.forEach(t),e6o=r(NEe," (ALBERT model)"),NEe.forEach(t),o6o=i(q),sb=n(q,"LI",{});var qEe=s(sb);kae=n(qEe,"STRONG",{});var DQr=s(kae);r6o=r(DQr,"bert"),DQr.forEach(t),t6o=r(qEe," \u2014 "),rD=n(qEe,"A",{href:!0});var jQr=s(rD);a6o=r(jQr,"BertForTokenClassification"),jQr.forEach(t),n6o=r(qEe," (BERT model)"),qEe.forEach(t),s6o=i(q),lb=n(q,"LI",{});var GEe=s(lb);Rae=n(GEe,"STRONG",{});var NQr=s(Rae);l6o=r(NQr,"big_bird"),NQr.forEach(t),i6o=r(GEe," \u2014 "),tD=n(GEe,"A",{href:!0});var qQr=s(tD);d6o=r(qQr,"BigBirdForTokenClassification"),qQr.forEach(t),c6o=r(GEe," (BigBird model)"),GEe.forEach(t),f6o=i(q),ib=n(q,"LI",{});var OEe=s(ib);Sae=n(OEe,"STRONG",{});var GQr=s(Sae);m6o=r(GQr,"camembert"),GQr.forEach(t),g6o=r(OEe," \u2014 "),aD=n(OEe,"A",{href:!0});var OQr=s(aD);h6o=r(OQr,"CamembertForTokenClassification"),OQr.forEach(t),p6o=r(OEe," (CamemBERT model)"),OEe.forEach(t),_6o=i(q),db=n(q,"LI",{});var XEe=s(db);Pae=n(XEe,"STRONG",{});var XQr=s(Pae);u6o=r(XQr,"canine"),XQr.forEach(t),b6o=r(XEe," \u2014 "),nD=n(XEe,"A",{href:!0});var VQr=s(nD);v6o=r(VQr,"CanineForTokenClassification"),VQr.forEach(t),T6o=r(XEe," (Canine model)"),XEe.forEach(t),F6o=i(q),cb=n(q,"LI",{});var VEe=s(cb);$ae=n(VEe,"STRONG",{});var zQr=s($ae);C6o=r(zQr,"convbert"),zQr.forEach(t),M6o=r(VEe," \u2014 "),sD=n(VEe,"A",{href:!0});var WQr=s(sD);E6o=r(WQr,"ConvBertForTokenClassification"),WQr.forEach(t),y6o=r(VEe," (ConvBERT model)"),VEe.forEach(t),w6o=i(q),fb=n(q,"LI",{});var zEe=s(fb);Iae=n(zEe,"STRONG",{});var QQr=s(Iae);A6o=r(QQr,"data2vec-text"),QQr.forEach(t),L6o=r(zEe," \u2014 "),lD=n(zEe,"A",{href:!0});var HQr=s(lD);B6o=r(HQr,"Data2VecTextForTokenClassification"),HQr.forEach(t),x6o=r(zEe," (Data2VecText model)"),zEe.forEach(t),k6o=i(q),mb=n(q,"LI",{});var WEe=s(mb);Dae=n(WEe,"STRONG",{});var UQr=s(Dae);R6o=r(UQr,"deberta"),UQr.forEach(t),S6o=r(WEe," \u2014 "),iD=n(WEe,"A",{href:!0});var JQr=s(iD);P6o=r(JQr,"DebertaForTokenClassification"),JQr.forEach(t),$6o=r(WEe," (DeBERTa model)"),WEe.forEach(t),I6o=i(q),gb=n(q,"LI",{});var QEe=s(gb);jae=n(QEe,"STRONG",{});var YQr=s(jae);D6o=r(YQr,"deberta-v2"),YQr.forEach(t),j6o=r(QEe," \u2014 "),dD=n(QEe,"A",{href:!0});var KQr=s(dD);N6o=r(KQr,"DebertaV2ForTokenClassification"),KQr.forEach(t),q6o=r(QEe," (DeBERTa-v2 model)"),QEe.forEach(t),G6o=i(q),hb=n(q,"LI",{});var HEe=s(hb);Nae=n(HEe,"STRONG",{});var ZQr=s(Nae);O6o=r(ZQr,"distilbert"),ZQr.forEach(t),X6o=r(HEe," \u2014 "),cD=n(HEe,"A",{href:!0});var eHr=s(cD);V6o=r(eHr,"DistilBertForTokenClassification"),eHr.forEach(t),z6o=r(HEe," (DistilBERT model)"),HEe.forEach(t),W6o=i(q),pb=n(q,"LI",{});var UEe=s(pb);qae=n(UEe,"STRONG",{});var oHr=s(qae);Q6o=r(oHr,"electra"),oHr.forEach(t),H6o=r(UEe," \u2014 "),fD=n(UEe,"A",{href:!0});var rHr=s(fD);U6o=r(rHr,"ElectraForTokenClassification"),rHr.forEach(t),J6o=r(UEe," (ELECTRA model)"),UEe.forEach(t),Y6o=i(q),_b=n(q,"LI",{});var JEe=s(_b);Gae=n(JEe,"STRONG",{});var tHr=s(Gae);K6o=r(tHr,"flaubert"),tHr.forEach(t),Z6o=r(JEe," \u2014 "),mD=n(JEe,"A",{href:!0});var aHr=s(mD);eAo=r(aHr,"FlaubertForTokenClassification"),aHr.forEach(t),oAo=r(JEe," (FlauBERT model)"),JEe.forEach(t),rAo=i(q),ub=n(q,"LI",{});var YEe=s(ub);Oae=n(YEe,"STRONG",{});var nHr=s(Oae);tAo=r(nHr,"fnet"),nHr.forEach(t),aAo=r(YEe," \u2014 "),gD=n(YEe,"A",{href:!0});var sHr=s(gD);nAo=r(sHr,"FNetForTokenClassification"),sHr.forEach(t),sAo=r(YEe," (FNet model)"),YEe.forEach(t),lAo=i(q),bb=n(q,"LI",{});var KEe=s(bb);Xae=n(KEe,"STRONG",{});var lHr=s(Xae);iAo=r(lHr,"funnel"),lHr.forEach(t),dAo=r(KEe," \u2014 "),hD=n(KEe,"A",{href:!0});var iHr=s(hD);cAo=r(iHr,"FunnelForTokenClassification"),iHr.forEach(t),fAo=r(KEe," (Funnel Transformer model)"),KEe.forEach(t),mAo=i(q),vb=n(q,"LI",{});var ZEe=s(vb);Vae=n(ZEe,"STRONG",{});var dHr=s(Vae);gAo=r(dHr,"gpt2"),dHr.forEach(t),hAo=r(ZEe," \u2014 "),pD=n(ZEe,"A",{href:!0});var cHr=s(pD);pAo=r(cHr,"GPT2ForTokenClassification"),cHr.forEach(t),_Ao=r(ZEe," (OpenAI GPT-2 model)"),ZEe.forEach(t),uAo=i(q),Tb=n(q,"LI",{});var e3e=s(Tb);zae=n(e3e,"STRONG",{});var fHr=s(zae);bAo=r(fHr,"ibert"),fHr.forEach(t),vAo=r(e3e," \u2014 "),_D=n(e3e,"A",{href:!0});var mHr=s(_D);TAo=r(mHr,"IBertForTokenClassification"),mHr.forEach(t),FAo=r(e3e," (I-BERT model)"),e3e.forEach(t),CAo=i(q),Fb=n(q,"LI",{});var o3e=s(Fb);Wae=n(o3e,"STRONG",{});var gHr=s(Wae);MAo=r(gHr,"layoutlm"),gHr.forEach(t),EAo=r(o3e," \u2014 "),uD=n(o3e,"A",{href:!0});var hHr=s(uD);yAo=r(hHr,"LayoutLMForTokenClassification"),hHr.forEach(t),wAo=r(o3e," (LayoutLM model)"),o3e.forEach(t),AAo=i(q),Cb=n(q,"LI",{});var r3e=s(Cb);Qae=n(r3e,"STRONG",{});var pHr=s(Qae);LAo=r(pHr,"layoutlmv2"),pHr.forEach(t),BAo=r(r3e," \u2014 "),bD=n(r3e,"A",{href:!0});var _Hr=s(bD);xAo=r(_Hr,"LayoutLMv2ForTokenClassification"),_Hr.forEach(t),kAo=r(r3e," (LayoutLMv2 model)"),r3e.forEach(t),RAo=i(q),Mb=n(q,"LI",{});var t3e=s(Mb);Hae=n(t3e,"STRONG",{});var uHr=s(Hae);SAo=r(uHr,"longformer"),uHr.forEach(t),PAo=r(t3e," \u2014 "),vD=n(t3e,"A",{href:!0});var bHr=s(vD);$Ao=r(bHr,"LongformerForTokenClassification"),bHr.forEach(t),IAo=r(t3e," (Longformer model)"),t3e.forEach(t),DAo=i(q),Eb=n(q,"LI",{});var a3e=s(Eb);Uae=n(a3e,"STRONG",{});var vHr=s(Uae);jAo=r(vHr,"megatron-bert"),vHr.forEach(t),NAo=r(a3e," \u2014 "),TD=n(a3e,"A",{href:!0});var THr=s(TD);qAo=r(THr,"MegatronBertForTokenClassification"),THr.forEach(t),GAo=r(a3e," (MegatronBert model)"),a3e.forEach(t),OAo=i(q),yb=n(q,"LI",{});var n3e=s(yb);Jae=n(n3e,"STRONG",{});var FHr=s(Jae);XAo=r(FHr,"mobilebert"),FHr.forEach(t),VAo=r(n3e," \u2014 "),FD=n(n3e,"A",{href:!0});var CHr=s(FD);zAo=r(CHr,"MobileBertForTokenClassification"),CHr.forEach(t),WAo=r(n3e," (MobileBERT model)"),n3e.forEach(t),QAo=i(q),wb=n(q,"LI",{});var s3e=s(wb);Yae=n(s3e,"STRONG",{});var MHr=s(Yae);HAo=r(MHr,"mpnet"),MHr.forEach(t),UAo=r(s3e," \u2014 "),CD=n(s3e,"A",{href:!0});var EHr=s(CD);JAo=r(EHr,"MPNetForTokenClassification"),EHr.forEach(t),YAo=r(s3e," (MPNet model)"),s3e.forEach(t),KAo=i(q),Ab=n(q,"LI",{});var l3e=s(Ab);Kae=n(l3e,"STRONG",{});var yHr=s(Kae);ZAo=r(yHr,"nystromformer"),yHr.forEach(t),e0o=r(l3e," \u2014 "),MD=n(l3e,"A",{href:!0});var wHr=s(MD);o0o=r(wHr,"NystromformerForTokenClassification"),wHr.forEach(t),r0o=r(l3e," (Nystromformer model)"),l3e.forEach(t),t0o=i(q),Lb=n(q,"LI",{});var i3e=s(Lb);Zae=n(i3e,"STRONG",{});var AHr=s(Zae);a0o=r(AHr,"qdqbert"),AHr.forEach(t),n0o=r(i3e," \u2014 "),ED=n(i3e,"A",{href:!0});var LHr=s(ED);s0o=r(LHr,"QDQBertForTokenClassification"),LHr.forEach(t),l0o=r(i3e," (QDQBert model)"),i3e.forEach(t),i0o=i(q),Bb=n(q,"LI",{});var d3e=s(Bb);ene=n(d3e,"STRONG",{});var BHr=s(ene);d0o=r(BHr,"rembert"),BHr.forEach(t),c0o=r(d3e," \u2014 "),yD=n(d3e,"A",{href:!0});var xHr=s(yD);f0o=r(xHr,"RemBertForTokenClassification"),xHr.forEach(t),m0o=r(d3e," (RemBERT model)"),d3e.forEach(t),g0o=i(q),xb=n(q,"LI",{});var c3e=s(xb);one=n(c3e,"STRONG",{});var kHr=s(one);h0o=r(kHr,"roberta"),kHr.forEach(t),p0o=r(c3e," \u2014 "),wD=n(c3e,"A",{href:!0});var RHr=s(wD);_0o=r(RHr,"RobertaForTokenClassification"),RHr.forEach(t),u0o=r(c3e," (RoBERTa model)"),c3e.forEach(t),b0o=i(q),kb=n(q,"LI",{});var f3e=s(kb);rne=n(f3e,"STRONG",{});var SHr=s(rne);v0o=r(SHr,"roformer"),SHr.forEach(t),T0o=r(f3e," \u2014 "),AD=n(f3e,"A",{href:!0});var PHr=s(AD);F0o=r(PHr,"RoFormerForTokenClassification"),PHr.forEach(t),C0o=r(f3e," (RoFormer model)"),f3e.forEach(t),M0o=i(q),Rb=n(q,"LI",{});var m3e=s(Rb);tne=n(m3e,"STRONG",{});var $Hr=s(tne);E0o=r($Hr,"squeezebert"),$Hr.forEach(t),y0o=r(m3e," \u2014 "),LD=n(m3e,"A",{href:!0});var IHr=s(LD);w0o=r(IHr,"SqueezeBertForTokenClassification"),IHr.forEach(t),A0o=r(m3e," (SqueezeBERT model)"),m3e.forEach(t),L0o=i(q),Sb=n(q,"LI",{});var g3e=s(Sb);ane=n(g3e,"STRONG",{});var DHr=s(ane);B0o=r(DHr,"xlm"),DHr.forEach(t),x0o=r(g3e," \u2014 "),BD=n(g3e,"A",{href:!0});var jHr=s(BD);k0o=r(jHr,"XLMForTokenClassification"),jHr.forEach(t),R0o=r(g3e," (XLM model)"),g3e.forEach(t),S0o=i(q),Pb=n(q,"LI",{});var h3e=s(Pb);nne=n(h3e,"STRONG",{});var NHr=s(nne);P0o=r(NHr,"xlm-roberta"),NHr.forEach(t),$0o=r(h3e," \u2014 "),xD=n(h3e,"A",{href:!0});var qHr=s(xD);I0o=r(qHr,"XLMRobertaForTokenClassification"),qHr.forEach(t),D0o=r(h3e," (XLM-RoBERTa model)"),h3e.forEach(t),j0o=i(q),$b=n(q,"LI",{});var p3e=s($b);sne=n(p3e,"STRONG",{});var GHr=s(sne);N0o=r(GHr,"xlm-roberta-xl"),GHr.forEach(t),q0o=r(p3e," \u2014 "),kD=n(p3e,"A",{href:!0});var OHr=s(kD);G0o=r(OHr,"XLMRobertaXLForTokenClassification"),OHr.forEach(t),O0o=r(p3e," (XLM-RoBERTa-XL model)"),p3e.forEach(t),X0o=i(q),Ib=n(q,"LI",{});var _3e=s(Ib);lne=n(_3e,"STRONG",{});var XHr=s(lne);V0o=r(XHr,"xlnet"),XHr.forEach(t),z0o=r(_3e," \u2014 "),RD=n(_3e,"A",{href:!0});var VHr=s(RD);W0o=r(VHr,"XLNetForTokenClassification"),VHr.forEach(t),Q0o=r(_3e," (XLNet model)"),_3e.forEach(t),H0o=i(q),Db=n(q,"LI",{});var u3e=s(Db);ine=n(u3e,"STRONG",{});var zHr=s(ine);U0o=r(zHr,"yoso"),zHr.forEach(t),J0o=r(u3e," \u2014 "),SD=n(u3e,"A",{href:!0});var WHr=s(SD);Y0o=r(WHr,"YosoForTokenClassification"),WHr.forEach(t),K0o=r(u3e," (YOSO model)"),u3e.forEach(t),q.forEach(t),Z0o=i(Xt),jb=n(Xt,"P",{});var b3e=s(jb);eLo=r(b3e,"The model is set in evaluation mode by default using "),dne=n(b3e,"CODE",{});var QHr=s(dne);oLo=r(QHr,"model.eval()"),QHr.forEach(t),rLo=r(b3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cne=n(b3e,"CODE",{});var HHr=s(cne);tLo=r(HHr,"model.train()"),HHr.forEach(t),b3e.forEach(t),aLo=i(Xt),fne=n(Xt,"P",{});var UHr=s(fne);nLo=r(UHr,"Examples:"),UHr.forEach(t),sLo=i(Xt),m(i3.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),H8e=i(c),pd=n(c,"H2",{class:!0});var oke=s(pd);Nb=n(oke,"A",{id:!0,class:!0,href:!0});var JHr=s(Nb);mne=n(JHr,"SPAN",{});var YHr=s(mne);m(d3.$$.fragment,YHr),YHr.forEach(t),JHr.forEach(t),lLo=i(oke),gne=n(oke,"SPAN",{});var KHr=s(gne);iLo=r(KHr,"AutoModelForQuestionAnswering"),KHr.forEach(t),oke.forEach(t),U8e=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(c3.$$.fragment,nl),dLo=i(nl),_d=n(nl,"P",{});var QV=s(_d);cLo=r(QV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hne=n(QV,"CODE",{});var ZHr=s(hne);fLo=r(ZHr,"from_pretrained()"),ZHr.forEach(t),mLo=r(QV,"class method or the "),pne=n(QV,"CODE",{});var eUr=s(pne);gLo=r(eUr,"from_config()"),eUr.forEach(t),hLo=r(QV,`class
method.`),QV.forEach(t),pLo=i(nl),f3=n(nl,"P",{});var rke=s(f3);_Lo=r(rke,"This class cannot be instantiated directly using "),_ne=n(rke,"CODE",{});var oUr=s(_ne);uLo=r(oUr,"__init__()"),oUr.forEach(t),bLo=r(rke," (throws an error)."),rke.forEach(t),vLo=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(m3.$$.fragment,sl),TLo=i(sl),une=n(sl,"P",{});var rUr=s(une);FLo=r(rUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rUr.forEach(t),CLo=i(sl),ud=n(sl,"P",{});var HV=s(ud);MLo=r(HV,`Note:
Loading a model from its configuration file does `),bne=n(HV,"STRONG",{});var tUr=s(bne);ELo=r(tUr,"not"),tUr.forEach(t),yLo=r(HV,` load the model weights. It only affects the
model\u2019s configuration. Use `),vne=n(HV,"CODE",{});var aUr=s(vne);wLo=r(aUr,"from_pretrained()"),aUr.forEach(t),ALo=r(HV,"to load the model weights."),HV.forEach(t),LLo=i(sl),Tne=n(sl,"P",{});var nUr=s(Tne);BLo=r(nUr,"Examples:"),nUr.forEach(t),xLo=i(sl),m(g3.$$.fragment,sl),sl.forEach(t),kLo=i(nl),Ge=n(nl,"DIV",{class:!0});var Vt=s(Ge);m(h3.$$.fragment,Vt),RLo=i(Vt),Fne=n(Vt,"P",{});var sUr=s(Fne);SLo=r(sUr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sUr.forEach(t),PLo=i(Vt),Ha=n(Vt,"P",{});var S4=s(Ha);$Lo=r(S4,"The model class to instantiate is selected based on the "),Cne=n(S4,"CODE",{});var lUr=s(Cne);ILo=r(lUr,"model_type"),lUr.forEach(t),DLo=r(S4,` property of the config object (either
passed as an argument or loaded from `),Mne=n(S4,"CODE",{});var iUr=s(Mne);jLo=r(iUr,"pretrained_model_name_or_path"),iUr.forEach(t),NLo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ene=n(S4,"CODE",{});var dUr=s(Ene);qLo=r(dUr,"pretrained_model_name_or_path"),dUr.forEach(t),GLo=r(S4,":"),S4.forEach(t),OLo=i(Vt),R=n(Vt,"UL",{});var P=s(R);qb=n(P,"LI",{});var v3e=s(qb);yne=n(v3e,"STRONG",{});var cUr=s(yne);XLo=r(cUr,"albert"),cUr.forEach(t),VLo=r(v3e," \u2014 "),PD=n(v3e,"A",{href:!0});var fUr=s(PD);zLo=r(fUr,"AlbertForQuestionAnswering"),fUr.forEach(t),WLo=r(v3e," (ALBERT model)"),v3e.forEach(t),QLo=i(P),Gb=n(P,"LI",{});var T3e=s(Gb);wne=n(T3e,"STRONG",{});var mUr=s(wne);HLo=r(mUr,"bart"),mUr.forEach(t),ULo=r(T3e," \u2014 "),$D=n(T3e,"A",{href:!0});var gUr=s($D);JLo=r(gUr,"BartForQuestionAnswering"),gUr.forEach(t),YLo=r(T3e," (BART model)"),T3e.forEach(t),KLo=i(P),Ob=n(P,"LI",{});var F3e=s(Ob);Ane=n(F3e,"STRONG",{});var hUr=s(Ane);ZLo=r(hUr,"bert"),hUr.forEach(t),e8o=r(F3e," \u2014 "),ID=n(F3e,"A",{href:!0});var pUr=s(ID);o8o=r(pUr,"BertForQuestionAnswering"),pUr.forEach(t),r8o=r(F3e," (BERT model)"),F3e.forEach(t),t8o=i(P),Xb=n(P,"LI",{});var C3e=s(Xb);Lne=n(C3e,"STRONG",{});var _Ur=s(Lne);a8o=r(_Ur,"big_bird"),_Ur.forEach(t),n8o=r(C3e," \u2014 "),DD=n(C3e,"A",{href:!0});var uUr=s(DD);s8o=r(uUr,"BigBirdForQuestionAnswering"),uUr.forEach(t),l8o=r(C3e," (BigBird model)"),C3e.forEach(t),i8o=i(P),Vb=n(P,"LI",{});var M3e=s(Vb);Bne=n(M3e,"STRONG",{});var bUr=s(Bne);d8o=r(bUr,"bigbird_pegasus"),bUr.forEach(t),c8o=r(M3e," \u2014 "),jD=n(M3e,"A",{href:!0});var vUr=s(jD);f8o=r(vUr,"BigBirdPegasusForQuestionAnswering"),vUr.forEach(t),m8o=r(M3e," (BigBirdPegasus model)"),M3e.forEach(t),g8o=i(P),zb=n(P,"LI",{});var E3e=s(zb);xne=n(E3e,"STRONG",{});var TUr=s(xne);h8o=r(TUr,"camembert"),TUr.forEach(t),p8o=r(E3e," \u2014 "),ND=n(E3e,"A",{href:!0});var FUr=s(ND);_8o=r(FUr,"CamembertForQuestionAnswering"),FUr.forEach(t),u8o=r(E3e," (CamemBERT model)"),E3e.forEach(t),b8o=i(P),Wb=n(P,"LI",{});var y3e=s(Wb);kne=n(y3e,"STRONG",{});var CUr=s(kne);v8o=r(CUr,"canine"),CUr.forEach(t),T8o=r(y3e," \u2014 "),qD=n(y3e,"A",{href:!0});var MUr=s(qD);F8o=r(MUr,"CanineForQuestionAnswering"),MUr.forEach(t),C8o=r(y3e," (Canine model)"),y3e.forEach(t),M8o=i(P),Qb=n(P,"LI",{});var w3e=s(Qb);Rne=n(w3e,"STRONG",{});var EUr=s(Rne);E8o=r(EUr,"convbert"),EUr.forEach(t),y8o=r(w3e," \u2014 "),GD=n(w3e,"A",{href:!0});var yUr=s(GD);w8o=r(yUr,"ConvBertForQuestionAnswering"),yUr.forEach(t),A8o=r(w3e," (ConvBERT model)"),w3e.forEach(t),L8o=i(P),Hb=n(P,"LI",{});var A3e=s(Hb);Sne=n(A3e,"STRONG",{});var wUr=s(Sne);B8o=r(wUr,"data2vec-text"),wUr.forEach(t),x8o=r(A3e," \u2014 "),OD=n(A3e,"A",{href:!0});var AUr=s(OD);k8o=r(AUr,"Data2VecTextForQuestionAnswering"),AUr.forEach(t),R8o=r(A3e," (Data2VecText model)"),A3e.forEach(t),S8o=i(P),Ub=n(P,"LI",{});var L3e=s(Ub);Pne=n(L3e,"STRONG",{});var LUr=s(Pne);P8o=r(LUr,"deberta"),LUr.forEach(t),$8o=r(L3e," \u2014 "),XD=n(L3e,"A",{href:!0});var BUr=s(XD);I8o=r(BUr,"DebertaForQuestionAnswering"),BUr.forEach(t),D8o=r(L3e," (DeBERTa model)"),L3e.forEach(t),j8o=i(P),Jb=n(P,"LI",{});var B3e=s(Jb);$ne=n(B3e,"STRONG",{});var xUr=s($ne);N8o=r(xUr,"deberta-v2"),xUr.forEach(t),q8o=r(B3e," \u2014 "),VD=n(B3e,"A",{href:!0});var kUr=s(VD);G8o=r(kUr,"DebertaV2ForQuestionAnswering"),kUr.forEach(t),O8o=r(B3e," (DeBERTa-v2 model)"),B3e.forEach(t),X8o=i(P),Yb=n(P,"LI",{});var x3e=s(Yb);Ine=n(x3e,"STRONG",{});var RUr=s(Ine);V8o=r(RUr,"distilbert"),RUr.forEach(t),z8o=r(x3e," \u2014 "),zD=n(x3e,"A",{href:!0});var SUr=s(zD);W8o=r(SUr,"DistilBertForQuestionAnswering"),SUr.forEach(t),Q8o=r(x3e," (DistilBERT model)"),x3e.forEach(t),H8o=i(P),Kb=n(P,"LI",{});var k3e=s(Kb);Dne=n(k3e,"STRONG",{});var PUr=s(Dne);U8o=r(PUr,"electra"),PUr.forEach(t),J8o=r(k3e," \u2014 "),WD=n(k3e,"A",{href:!0});var $Ur=s(WD);Y8o=r($Ur,"ElectraForQuestionAnswering"),$Ur.forEach(t),K8o=r(k3e," (ELECTRA model)"),k3e.forEach(t),Z8o=i(P),Zb=n(P,"LI",{});var R3e=s(Zb);jne=n(R3e,"STRONG",{});var IUr=s(jne);eBo=r(IUr,"flaubert"),IUr.forEach(t),oBo=r(R3e," \u2014 "),QD=n(R3e,"A",{href:!0});var DUr=s(QD);rBo=r(DUr,"FlaubertForQuestionAnsweringSimple"),DUr.forEach(t),tBo=r(R3e," (FlauBERT model)"),R3e.forEach(t),aBo=i(P),e2=n(P,"LI",{});var S3e=s(e2);Nne=n(S3e,"STRONG",{});var jUr=s(Nne);nBo=r(jUr,"fnet"),jUr.forEach(t),sBo=r(S3e," \u2014 "),HD=n(S3e,"A",{href:!0});var NUr=s(HD);lBo=r(NUr,"FNetForQuestionAnswering"),NUr.forEach(t),iBo=r(S3e," (FNet model)"),S3e.forEach(t),dBo=i(P),o2=n(P,"LI",{});var P3e=s(o2);qne=n(P3e,"STRONG",{});var qUr=s(qne);cBo=r(qUr,"funnel"),qUr.forEach(t),fBo=r(P3e," \u2014 "),UD=n(P3e,"A",{href:!0});var GUr=s(UD);mBo=r(GUr,"FunnelForQuestionAnswering"),GUr.forEach(t),gBo=r(P3e," (Funnel Transformer model)"),P3e.forEach(t),hBo=i(P),r2=n(P,"LI",{});var $3e=s(r2);Gne=n($3e,"STRONG",{});var OUr=s(Gne);pBo=r(OUr,"gptj"),OUr.forEach(t),_Bo=r($3e," \u2014 "),JD=n($3e,"A",{href:!0});var XUr=s(JD);uBo=r(XUr,"GPTJForQuestionAnswering"),XUr.forEach(t),bBo=r($3e," (GPT-J model)"),$3e.forEach(t),vBo=i(P),t2=n(P,"LI",{});var I3e=s(t2);One=n(I3e,"STRONG",{});var VUr=s(One);TBo=r(VUr,"ibert"),VUr.forEach(t),FBo=r(I3e," \u2014 "),YD=n(I3e,"A",{href:!0});var zUr=s(YD);CBo=r(zUr,"IBertForQuestionAnswering"),zUr.forEach(t),MBo=r(I3e," (I-BERT model)"),I3e.forEach(t),EBo=i(P),a2=n(P,"LI",{});var D3e=s(a2);Xne=n(D3e,"STRONG",{});var WUr=s(Xne);yBo=r(WUr,"layoutlmv2"),WUr.forEach(t),wBo=r(D3e," \u2014 "),KD=n(D3e,"A",{href:!0});var QUr=s(KD);ABo=r(QUr,"LayoutLMv2ForQuestionAnswering"),QUr.forEach(t),LBo=r(D3e," (LayoutLMv2 model)"),D3e.forEach(t),BBo=i(P),n2=n(P,"LI",{});var j3e=s(n2);Vne=n(j3e,"STRONG",{});var HUr=s(Vne);xBo=r(HUr,"led"),HUr.forEach(t),kBo=r(j3e," \u2014 "),ZD=n(j3e,"A",{href:!0});var UUr=s(ZD);RBo=r(UUr,"LEDForQuestionAnswering"),UUr.forEach(t),SBo=r(j3e," (LED model)"),j3e.forEach(t),PBo=i(P),s2=n(P,"LI",{});var N3e=s(s2);zne=n(N3e,"STRONG",{});var JUr=s(zne);$Bo=r(JUr,"longformer"),JUr.forEach(t),IBo=r(N3e," \u2014 "),ej=n(N3e,"A",{href:!0});var YUr=s(ej);DBo=r(YUr,"LongformerForQuestionAnswering"),YUr.forEach(t),jBo=r(N3e," (Longformer model)"),N3e.forEach(t),NBo=i(P),l2=n(P,"LI",{});var q3e=s(l2);Wne=n(q3e,"STRONG",{});var KUr=s(Wne);qBo=r(KUr,"lxmert"),KUr.forEach(t),GBo=r(q3e," \u2014 "),oj=n(q3e,"A",{href:!0});var ZUr=s(oj);OBo=r(ZUr,"LxmertForQuestionAnswering"),ZUr.forEach(t),XBo=r(q3e," (LXMERT model)"),q3e.forEach(t),VBo=i(P),i2=n(P,"LI",{});var G3e=s(i2);Qne=n(G3e,"STRONG",{});var eJr=s(Qne);zBo=r(eJr,"mbart"),eJr.forEach(t),WBo=r(G3e," \u2014 "),rj=n(G3e,"A",{href:!0});var oJr=s(rj);QBo=r(oJr,"MBartForQuestionAnswering"),oJr.forEach(t),HBo=r(G3e," (mBART model)"),G3e.forEach(t),UBo=i(P),d2=n(P,"LI",{});var O3e=s(d2);Hne=n(O3e,"STRONG",{});var rJr=s(Hne);JBo=r(rJr,"megatron-bert"),rJr.forEach(t),YBo=r(O3e," \u2014 "),tj=n(O3e,"A",{href:!0});var tJr=s(tj);KBo=r(tJr,"MegatronBertForQuestionAnswering"),tJr.forEach(t),ZBo=r(O3e," (MegatronBert model)"),O3e.forEach(t),exo=i(P),c2=n(P,"LI",{});var X3e=s(c2);Une=n(X3e,"STRONG",{});var aJr=s(Une);oxo=r(aJr,"mobilebert"),aJr.forEach(t),rxo=r(X3e," \u2014 "),aj=n(X3e,"A",{href:!0});var nJr=s(aj);txo=r(nJr,"MobileBertForQuestionAnswering"),nJr.forEach(t),axo=r(X3e," (MobileBERT model)"),X3e.forEach(t),nxo=i(P),f2=n(P,"LI",{});var V3e=s(f2);Jne=n(V3e,"STRONG",{});var sJr=s(Jne);sxo=r(sJr,"mpnet"),sJr.forEach(t),lxo=r(V3e," \u2014 "),nj=n(V3e,"A",{href:!0});var lJr=s(nj);ixo=r(lJr,"MPNetForQuestionAnswering"),lJr.forEach(t),dxo=r(V3e," (MPNet model)"),V3e.forEach(t),cxo=i(P),m2=n(P,"LI",{});var z3e=s(m2);Yne=n(z3e,"STRONG",{});var iJr=s(Yne);fxo=r(iJr,"nystromformer"),iJr.forEach(t),mxo=r(z3e," \u2014 "),sj=n(z3e,"A",{href:!0});var dJr=s(sj);gxo=r(dJr,"NystromformerForQuestionAnswering"),dJr.forEach(t),hxo=r(z3e," (Nystromformer model)"),z3e.forEach(t),pxo=i(P),g2=n(P,"LI",{});var W3e=s(g2);Kne=n(W3e,"STRONG",{});var cJr=s(Kne);_xo=r(cJr,"qdqbert"),cJr.forEach(t),uxo=r(W3e," \u2014 "),lj=n(W3e,"A",{href:!0});var fJr=s(lj);bxo=r(fJr,"QDQBertForQuestionAnswering"),fJr.forEach(t),vxo=r(W3e," (QDQBert model)"),W3e.forEach(t),Txo=i(P),h2=n(P,"LI",{});var Q3e=s(h2);Zne=n(Q3e,"STRONG",{});var mJr=s(Zne);Fxo=r(mJr,"reformer"),mJr.forEach(t),Cxo=r(Q3e," \u2014 "),ij=n(Q3e,"A",{href:!0});var gJr=s(ij);Mxo=r(gJr,"ReformerForQuestionAnswering"),gJr.forEach(t),Exo=r(Q3e," (Reformer model)"),Q3e.forEach(t),yxo=i(P),p2=n(P,"LI",{});var H3e=s(p2);ese=n(H3e,"STRONG",{});var hJr=s(ese);wxo=r(hJr,"rembert"),hJr.forEach(t),Axo=r(H3e," \u2014 "),dj=n(H3e,"A",{href:!0});var pJr=s(dj);Lxo=r(pJr,"RemBertForQuestionAnswering"),pJr.forEach(t),Bxo=r(H3e," (RemBERT model)"),H3e.forEach(t),xxo=i(P),_2=n(P,"LI",{});var U3e=s(_2);ose=n(U3e,"STRONG",{});var _Jr=s(ose);kxo=r(_Jr,"roberta"),_Jr.forEach(t),Rxo=r(U3e," \u2014 "),cj=n(U3e,"A",{href:!0});var uJr=s(cj);Sxo=r(uJr,"RobertaForQuestionAnswering"),uJr.forEach(t),Pxo=r(U3e," (RoBERTa model)"),U3e.forEach(t),$xo=i(P),u2=n(P,"LI",{});var J3e=s(u2);rse=n(J3e,"STRONG",{});var bJr=s(rse);Ixo=r(bJr,"roformer"),bJr.forEach(t),Dxo=r(J3e," \u2014 "),fj=n(J3e,"A",{href:!0});var vJr=s(fj);jxo=r(vJr,"RoFormerForQuestionAnswering"),vJr.forEach(t),Nxo=r(J3e," (RoFormer model)"),J3e.forEach(t),qxo=i(P),b2=n(P,"LI",{});var Y3e=s(b2);tse=n(Y3e,"STRONG",{});var TJr=s(tse);Gxo=r(TJr,"splinter"),TJr.forEach(t),Oxo=r(Y3e," \u2014 "),mj=n(Y3e,"A",{href:!0});var FJr=s(mj);Xxo=r(FJr,"SplinterForQuestionAnswering"),FJr.forEach(t),Vxo=r(Y3e," (Splinter model)"),Y3e.forEach(t),zxo=i(P),v2=n(P,"LI",{});var K3e=s(v2);ase=n(K3e,"STRONG",{});var CJr=s(ase);Wxo=r(CJr,"squeezebert"),CJr.forEach(t),Qxo=r(K3e," \u2014 "),gj=n(K3e,"A",{href:!0});var MJr=s(gj);Hxo=r(MJr,"SqueezeBertForQuestionAnswering"),MJr.forEach(t),Uxo=r(K3e," (SqueezeBERT model)"),K3e.forEach(t),Jxo=i(P),T2=n(P,"LI",{});var Z3e=s(T2);nse=n(Z3e,"STRONG",{});var EJr=s(nse);Yxo=r(EJr,"xlm"),EJr.forEach(t),Kxo=r(Z3e," \u2014 "),hj=n(Z3e,"A",{href:!0});var yJr=s(hj);Zxo=r(yJr,"XLMForQuestionAnsweringSimple"),yJr.forEach(t),eko=r(Z3e," (XLM model)"),Z3e.forEach(t),oko=i(P),F2=n(P,"LI",{});var eye=s(F2);sse=n(eye,"STRONG",{});var wJr=s(sse);rko=r(wJr,"xlm-roberta"),wJr.forEach(t),tko=r(eye," \u2014 "),pj=n(eye,"A",{href:!0});var AJr=s(pj);ako=r(AJr,"XLMRobertaForQuestionAnswering"),AJr.forEach(t),nko=r(eye," (XLM-RoBERTa model)"),eye.forEach(t),sko=i(P),C2=n(P,"LI",{});var oye=s(C2);lse=n(oye,"STRONG",{});var LJr=s(lse);lko=r(LJr,"xlm-roberta-xl"),LJr.forEach(t),iko=r(oye," \u2014 "),_j=n(oye,"A",{href:!0});var BJr=s(_j);dko=r(BJr,"XLMRobertaXLForQuestionAnswering"),BJr.forEach(t),cko=r(oye," (XLM-RoBERTa-XL model)"),oye.forEach(t),fko=i(P),M2=n(P,"LI",{});var rye=s(M2);ise=n(rye,"STRONG",{});var xJr=s(ise);mko=r(xJr,"xlnet"),xJr.forEach(t),gko=r(rye," \u2014 "),uj=n(rye,"A",{href:!0});var kJr=s(uj);hko=r(kJr,"XLNetForQuestionAnsweringSimple"),kJr.forEach(t),pko=r(rye," (XLNet model)"),rye.forEach(t),_ko=i(P),E2=n(P,"LI",{});var tye=s(E2);dse=n(tye,"STRONG",{});var RJr=s(dse);uko=r(RJr,"yoso"),RJr.forEach(t),bko=r(tye," \u2014 "),bj=n(tye,"A",{href:!0});var SJr=s(bj);vko=r(SJr,"YosoForQuestionAnswering"),SJr.forEach(t),Tko=r(tye," (YOSO model)"),tye.forEach(t),P.forEach(t),Fko=i(Vt),y2=n(Vt,"P",{});var aye=s(y2);Cko=r(aye,"The model is set in evaluation mode by default using "),cse=n(aye,"CODE",{});var PJr=s(cse);Mko=r(PJr,"model.eval()"),PJr.forEach(t),Eko=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fse=n(aye,"CODE",{});var $Jr=s(fse);yko=r($Jr,"model.train()"),$Jr.forEach(t),aye.forEach(t),wko=i(Vt),mse=n(Vt,"P",{});var IJr=s(mse);Ako=r(IJr,"Examples:"),IJr.forEach(t),Lko=i(Vt),m(p3.$$.fragment,Vt),Vt.forEach(t),nl.forEach(t),J8e=i(c),bd=n(c,"H2",{class:!0});var tke=s(bd);w2=n(tke,"A",{id:!0,class:!0,href:!0});var DJr=s(w2);gse=n(DJr,"SPAN",{});var jJr=s(gse);m(_3.$$.fragment,jJr),jJr.forEach(t),DJr.forEach(t),Bko=i(tke),hse=n(tke,"SPAN",{});var NJr=s(hse);xko=r(NJr,"AutoModelForTableQuestionAnswering"),NJr.forEach(t),tke.forEach(t),Y8e=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(u3.$$.fragment,ll),kko=i(ll),vd=n(ll,"P",{});var UV=s(vd);Rko=r(UV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pse=n(UV,"CODE",{});var qJr=s(pse);Sko=r(qJr,"from_pretrained()"),qJr.forEach(t),Pko=r(UV,"class method or the "),_se=n(UV,"CODE",{});var GJr=s(_se);$ko=r(GJr,"from_config()"),GJr.forEach(t),Iko=r(UV,`class
method.`),UV.forEach(t),Dko=i(ll),b3=n(ll,"P",{});var ake=s(b3);jko=r(ake,"This class cannot be instantiated directly using "),use=n(ake,"CODE",{});var OJr=s(use);Nko=r(OJr,"__init__()"),OJr.forEach(t),qko=r(ake," (throws an error)."),ake.forEach(t),Gko=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(v3.$$.fragment,il),Oko=i(il),bse=n(il,"P",{});var XJr=s(bse);Xko=r(XJr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XJr.forEach(t),Vko=i(il),Td=n(il,"P",{});var JV=s(Td);zko=r(JV,`Note:
Loading a model from its configuration file does `),vse=n(JV,"STRONG",{});var VJr=s(vse);Wko=r(VJr,"not"),VJr.forEach(t),Qko=r(JV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tse=n(JV,"CODE",{});var zJr=s(Tse);Hko=r(zJr,"from_pretrained()"),zJr.forEach(t),Uko=r(JV,"to load the model weights."),JV.forEach(t),Jko=i(il),Fse=n(il,"P",{});var WJr=s(Fse);Yko=r(WJr,"Examples:"),WJr.forEach(t),Kko=i(il),m(T3.$$.fragment,il),il.forEach(t),Zko=i(ll),Oe=n(ll,"DIV",{class:!0});var zt=s(Oe);m(F3.$$.fragment,zt),eRo=i(zt),Cse=n(zt,"P",{});var QJr=s(Cse);oRo=r(QJr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),QJr.forEach(t),rRo=i(zt),Ua=n(zt,"P",{});var P4=s(Ua);tRo=r(P4,"The model class to instantiate is selected based on the "),Mse=n(P4,"CODE",{});var HJr=s(Mse);aRo=r(HJr,"model_type"),HJr.forEach(t),nRo=r(P4,` property of the config object (either
passed as an argument or loaded from `),Ese=n(P4,"CODE",{});var UJr=s(Ese);sRo=r(UJr,"pretrained_model_name_or_path"),UJr.forEach(t),lRo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=n(P4,"CODE",{});var JJr=s(yse);iRo=r(JJr,"pretrained_model_name_or_path"),JJr.forEach(t),dRo=r(P4,":"),P4.forEach(t),cRo=i(zt),wse=n(zt,"UL",{});var YJr=s(wse);A2=n(YJr,"LI",{});var nye=s(A2);Ase=n(nye,"STRONG",{});var KJr=s(Ase);fRo=r(KJr,"tapas"),KJr.forEach(t),mRo=r(nye," \u2014 "),vj=n(nye,"A",{href:!0});var ZJr=s(vj);gRo=r(ZJr,"TapasForQuestionAnswering"),ZJr.forEach(t),hRo=r(nye," (TAPAS model)"),nye.forEach(t),YJr.forEach(t),pRo=i(zt),L2=n(zt,"P",{});var sye=s(L2);_Ro=r(sye,"The model is set in evaluation mode by default using "),Lse=n(sye,"CODE",{});var eYr=s(Lse);uRo=r(eYr,"model.eval()"),eYr.forEach(t),bRo=r(sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bse=n(sye,"CODE",{});var oYr=s(Bse);vRo=r(oYr,"model.train()"),oYr.forEach(t),sye.forEach(t),TRo=i(zt),xse=n(zt,"P",{});var rYr=s(xse);FRo=r(rYr,"Examples:"),rYr.forEach(t),CRo=i(zt),m(C3.$$.fragment,zt),zt.forEach(t),ll.forEach(t),K8e=i(c),Fd=n(c,"H2",{class:!0});var nke=s(Fd);B2=n(nke,"A",{id:!0,class:!0,href:!0});var tYr=s(B2);kse=n(tYr,"SPAN",{});var aYr=s(kse);m(M3.$$.fragment,aYr),aYr.forEach(t),tYr.forEach(t),MRo=i(nke),Rse=n(nke,"SPAN",{});var nYr=s(Rse);ERo=r(nYr,"AutoModelForImageClassification"),nYr.forEach(t),nke.forEach(t),Z8e=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(E3.$$.fragment,dl),yRo=i(dl),Cd=n(dl,"P",{});var YV=s(Cd);wRo=r(YV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sse=n(YV,"CODE",{});var sYr=s(Sse);ARo=r(sYr,"from_pretrained()"),sYr.forEach(t),LRo=r(YV,"class method or the "),Pse=n(YV,"CODE",{});var lYr=s(Pse);BRo=r(lYr,"from_config()"),lYr.forEach(t),xRo=r(YV,`class
method.`),YV.forEach(t),kRo=i(dl),y3=n(dl,"P",{});var ske=s(y3);RRo=r(ske,"This class cannot be instantiated directly using "),$se=n(ske,"CODE",{});var iYr=s($se);SRo=r(iYr,"__init__()"),iYr.forEach(t),PRo=r(ske," (throws an error)."),ske.forEach(t),$Ro=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(w3.$$.fragment,cl),IRo=i(cl),Ise=n(cl,"P",{});var dYr=s(Ise);DRo=r(dYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dYr.forEach(t),jRo=i(cl),Md=n(cl,"P",{});var KV=s(Md);NRo=r(KV,`Note:
Loading a model from its configuration file does `),Dse=n(KV,"STRONG",{});var cYr=s(Dse);qRo=r(cYr,"not"),cYr.forEach(t),GRo=r(KV,` load the model weights. It only affects the
model\u2019s configuration. Use `),jse=n(KV,"CODE",{});var fYr=s(jse);ORo=r(fYr,"from_pretrained()"),fYr.forEach(t),XRo=r(KV,"to load the model weights."),KV.forEach(t),VRo=i(cl),Nse=n(cl,"P",{});var mYr=s(Nse);zRo=r(mYr,"Examples:"),mYr.forEach(t),WRo=i(cl),m(A3.$$.fragment,cl),cl.forEach(t),QRo=i(dl),Xe=n(dl,"DIV",{class:!0});var Wt=s(Xe);m(L3.$$.fragment,Wt),HRo=i(Wt),qse=n(Wt,"P",{});var gYr=s(qse);URo=r(gYr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gYr.forEach(t),JRo=i(Wt),Ja=n(Wt,"P",{});var $4=s(Ja);YRo=r($4,"The model class to instantiate is selected based on the "),Gse=n($4,"CODE",{});var hYr=s(Gse);KRo=r(hYr,"model_type"),hYr.forEach(t),ZRo=r($4,` property of the config object (either
passed as an argument or loaded from `),Ose=n($4,"CODE",{});var pYr=s(Ose);eSo=r(pYr,"pretrained_model_name_or_path"),pYr.forEach(t),oSo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=n($4,"CODE",{});var _Yr=s(Xse);rSo=r(_Yr,"pretrained_model_name_or_path"),_Yr.forEach(t),tSo=r($4,":"),$4.forEach(t),aSo=i(Wt),be=n(Wt,"UL",{});var eo=s(be);x2=n(eo,"LI",{});var lye=s(x2);Vse=n(lye,"STRONG",{});var uYr=s(Vse);nSo=r(uYr,"beit"),uYr.forEach(t),sSo=r(lye," \u2014 "),Tj=n(lye,"A",{href:!0});var bYr=s(Tj);lSo=r(bYr,"BeitForImageClassification"),bYr.forEach(t),iSo=r(lye," (BEiT model)"),lye.forEach(t),dSo=i(eo),k2=n(eo,"LI",{});var iye=s(k2);zse=n(iye,"STRONG",{});var vYr=s(zse);cSo=r(vYr,"convnext"),vYr.forEach(t),fSo=r(iye," \u2014 "),Fj=n(iye,"A",{href:!0});var TYr=s(Fj);mSo=r(TYr,"ConvNextForImageClassification"),TYr.forEach(t),gSo=r(iye," (ConvNext model)"),iye.forEach(t),hSo=i(eo),Ps=n(eo,"LI",{});var tL=s(Ps);Wse=n(tL,"STRONG",{});var FYr=s(Wse);pSo=r(FYr,"deit"),FYr.forEach(t),_So=r(tL," \u2014 "),Cj=n(tL,"A",{href:!0});var CYr=s(Cj);uSo=r(CYr,"DeiTForImageClassification"),CYr.forEach(t),bSo=r(tL," or "),Mj=n(tL,"A",{href:!0});var MYr=s(Mj);vSo=r(MYr,"DeiTForImageClassificationWithTeacher"),MYr.forEach(t),TSo=r(tL," (DeiT model)"),tL.forEach(t),FSo=i(eo),R2=n(eo,"LI",{});var dye=s(R2);Qse=n(dye,"STRONG",{});var EYr=s(Qse);CSo=r(EYr,"imagegpt"),EYr.forEach(t),MSo=r(dye," \u2014 "),Ej=n(dye,"A",{href:!0});var yYr=s(Ej);ESo=r(yYr,"ImageGPTForImageClassification"),yYr.forEach(t),ySo=r(dye," (ImageGPT model)"),dye.forEach(t),wSo=i(eo),la=n(eo,"LI",{});var Mf=s(la);Hse=n(Mf,"STRONG",{});var wYr=s(Hse);ASo=r(wYr,"perceiver"),wYr.forEach(t),LSo=r(Mf," \u2014 "),yj=n(Mf,"A",{href:!0});var AYr=s(yj);BSo=r(AYr,"PerceiverForImageClassificationLearned"),AYr.forEach(t),xSo=r(Mf," or "),wj=n(Mf,"A",{href:!0});var LYr=s(wj);kSo=r(LYr,"PerceiverForImageClassificationFourier"),LYr.forEach(t),RSo=r(Mf," or "),Aj=n(Mf,"A",{href:!0});var BYr=s(Aj);SSo=r(BYr,"PerceiverForImageClassificationConvProcessing"),BYr.forEach(t),PSo=r(Mf," (Perceiver model)"),Mf.forEach(t),$So=i(eo),S2=n(eo,"LI",{});var cye=s(S2);Use=n(cye,"STRONG",{});var xYr=s(Use);ISo=r(xYr,"poolformer"),xYr.forEach(t),DSo=r(cye," \u2014 "),Lj=n(cye,"A",{href:!0});var kYr=s(Lj);jSo=r(kYr,"PoolFormerForImageClassification"),kYr.forEach(t),NSo=r(cye," (PoolFormer model)"),cye.forEach(t),qSo=i(eo),P2=n(eo,"LI",{});var fye=s(P2);Jse=n(fye,"STRONG",{});var RYr=s(Jse);GSo=r(RYr,"segformer"),RYr.forEach(t),OSo=r(fye," \u2014 "),Bj=n(fye,"A",{href:!0});var SYr=s(Bj);XSo=r(SYr,"SegformerForImageClassification"),SYr.forEach(t),VSo=r(fye," (SegFormer model)"),fye.forEach(t),zSo=i(eo),$2=n(eo,"LI",{});var mye=s($2);Yse=n(mye,"STRONG",{});var PYr=s(Yse);WSo=r(PYr,"swin"),PYr.forEach(t),QSo=r(mye," \u2014 "),xj=n(mye,"A",{href:!0});var $Yr=s(xj);HSo=r($Yr,"SwinForImageClassification"),$Yr.forEach(t),USo=r(mye," (Swin model)"),mye.forEach(t),JSo=i(eo),I2=n(eo,"LI",{});var gye=s(I2);Kse=n(gye,"STRONG",{});var IYr=s(Kse);YSo=r(IYr,"vit"),IYr.forEach(t),KSo=r(gye," \u2014 "),kj=n(gye,"A",{href:!0});var DYr=s(kj);ZSo=r(DYr,"ViTForImageClassification"),DYr.forEach(t),ePo=r(gye," (ViT model)"),gye.forEach(t),eo.forEach(t),oPo=i(Wt),D2=n(Wt,"P",{});var hye=s(D2);rPo=r(hye,"The model is set in evaluation mode by default using "),Zse=n(hye,"CODE",{});var jYr=s(Zse);tPo=r(jYr,"model.eval()"),jYr.forEach(t),aPo=r(hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=n(hye,"CODE",{});var NYr=s(ele);nPo=r(NYr,"model.train()"),NYr.forEach(t),hye.forEach(t),sPo=i(Wt),ole=n(Wt,"P",{});var qYr=s(ole);lPo=r(qYr,"Examples:"),qYr.forEach(t),iPo=i(Wt),m(B3.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),eBe=i(c),Ed=n(c,"H2",{class:!0});var lke=s(Ed);j2=n(lke,"A",{id:!0,class:!0,href:!0});var GYr=s(j2);rle=n(GYr,"SPAN",{});var OYr=s(rle);m(x3.$$.fragment,OYr),OYr.forEach(t),GYr.forEach(t),dPo=i(lke),tle=n(lke,"SPAN",{});var XYr=s(tle);cPo=r(XYr,"AutoModelForVision2Seq"),XYr.forEach(t),lke.forEach(t),oBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(k3.$$.fragment,fl),fPo=i(fl),yd=n(fl,"P",{});var ZV=s(yd);mPo=r(ZV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ale=n(ZV,"CODE",{});var VYr=s(ale);gPo=r(VYr,"from_pretrained()"),VYr.forEach(t),hPo=r(ZV,"class method or the "),nle=n(ZV,"CODE",{});var zYr=s(nle);pPo=r(zYr,"from_config()"),zYr.forEach(t),_Po=r(ZV,`class
method.`),ZV.forEach(t),uPo=i(fl),R3=n(fl,"P",{});var ike=s(R3);bPo=r(ike,"This class cannot be instantiated directly using "),sle=n(ike,"CODE",{});var WYr=s(sle);vPo=r(WYr,"__init__()"),WYr.forEach(t),TPo=r(ike," (throws an error)."),ike.forEach(t),FPo=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m(S3.$$.fragment,ml),CPo=i(ml),lle=n(ml,"P",{});var QYr=s(lle);MPo=r(QYr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QYr.forEach(t),EPo=i(ml),wd=n(ml,"P",{});var ez=s(wd);yPo=r(ez,`Note:
Loading a model from its configuration file does `),ile=n(ez,"STRONG",{});var HYr=s(ile);wPo=r(HYr,"not"),HYr.forEach(t),APo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=n(ez,"CODE",{});var UYr=s(dle);LPo=r(UYr,"from_pretrained()"),UYr.forEach(t),BPo=r(ez,"to load the model weights."),ez.forEach(t),xPo=i(ml),cle=n(ml,"P",{});var JYr=s(cle);kPo=r(JYr,"Examples:"),JYr.forEach(t),RPo=i(ml),m(P3.$$.fragment,ml),ml.forEach(t),SPo=i(fl),Ve=n(fl,"DIV",{class:!0});var Qt=s(Ve);m($3.$$.fragment,Qt),PPo=i(Qt),fle=n(Qt,"P",{});var YYr=s(fle);$Po=r(YYr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YYr.forEach(t),IPo=i(Qt),Ya=n(Qt,"P",{});var I4=s(Ya);DPo=r(I4,"The model class to instantiate is selected based on the "),mle=n(I4,"CODE",{});var KYr=s(mle);jPo=r(KYr,"model_type"),KYr.forEach(t),NPo=r(I4,` property of the config object (either
passed as an argument or loaded from `),gle=n(I4,"CODE",{});var ZYr=s(gle);qPo=r(ZYr,"pretrained_model_name_or_path"),ZYr.forEach(t),GPo=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=n(I4,"CODE",{});var eKr=s(hle);OPo=r(eKr,"pretrained_model_name_or_path"),eKr.forEach(t),XPo=r(I4,":"),I4.forEach(t),VPo=i(Qt),ple=n(Qt,"UL",{});var oKr=s(ple);N2=n(oKr,"LI",{});var pye=s(N2);_le=n(pye,"STRONG",{});var rKr=s(_le);zPo=r(rKr,"vision-encoder-decoder"),rKr.forEach(t),WPo=r(pye," \u2014 "),Rj=n(pye,"A",{href:!0});var tKr=s(Rj);QPo=r(tKr,"VisionEncoderDecoderModel"),tKr.forEach(t),HPo=r(pye," (Vision Encoder decoder model)"),pye.forEach(t),oKr.forEach(t),UPo=i(Qt),q2=n(Qt,"P",{});var _ye=s(q2);JPo=r(_ye,"The model is set in evaluation mode by default using "),ule=n(_ye,"CODE",{});var aKr=s(ule);YPo=r(aKr,"model.eval()"),aKr.forEach(t),KPo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=n(_ye,"CODE",{});var nKr=s(ble);ZPo=r(nKr,"model.train()"),nKr.forEach(t),_ye.forEach(t),e$o=i(Qt),vle=n(Qt,"P",{});var sKr=s(vle);o$o=r(sKr,"Examples:"),sKr.forEach(t),r$o=i(Qt),m(I3.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),rBe=i(c),Ad=n(c,"H2",{class:!0});var dke=s(Ad);G2=n(dke,"A",{id:!0,class:!0,href:!0});var lKr=s(G2);Tle=n(lKr,"SPAN",{});var iKr=s(Tle);m(D3.$$.fragment,iKr),iKr.forEach(t),lKr.forEach(t),t$o=i(dke),Fle=n(dke,"SPAN",{});var dKr=s(Fle);a$o=r(dKr,"AutoModelForAudioClassification"),dKr.forEach(t),dke.forEach(t),tBe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(j3.$$.fragment,gl),n$o=i(gl),Ld=n(gl,"P",{});var oz=s(Ld);s$o=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Cle=n(oz,"CODE",{});var cKr=s(Cle);l$o=r(cKr,"from_pretrained()"),cKr.forEach(t),i$o=r(oz,"class method or the "),Mle=n(oz,"CODE",{});var fKr=s(Mle);d$o=r(fKr,"from_config()"),fKr.forEach(t),c$o=r(oz,`class
method.`),oz.forEach(t),f$o=i(gl),N3=n(gl,"P",{});var cke=s(N3);m$o=r(cke,"This class cannot be instantiated directly using "),Ele=n(cke,"CODE",{});var mKr=s(Ele);g$o=r(mKr,"__init__()"),mKr.forEach(t),h$o=r(cke," (throws an error)."),cke.forEach(t),p$o=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(q3.$$.fragment,hl),_$o=i(hl),yle=n(hl,"P",{});var gKr=s(yle);u$o=r(gKr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),gKr.forEach(t),b$o=i(hl),Bd=n(hl,"P",{});var rz=s(Bd);v$o=r(rz,`Note:
Loading a model from its configuration file does `),wle=n(rz,"STRONG",{});var hKr=s(wle);T$o=r(hKr,"not"),hKr.forEach(t),F$o=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=n(rz,"CODE",{});var pKr=s(Ale);C$o=r(pKr,"from_pretrained()"),pKr.forEach(t),M$o=r(rz,"to load the model weights."),rz.forEach(t),E$o=i(hl),Lle=n(hl,"P",{});var _Kr=s(Lle);y$o=r(_Kr,"Examples:"),_Kr.forEach(t),w$o=i(hl),m(G3.$$.fragment,hl),hl.forEach(t),A$o=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(O3.$$.fragment,Ht),L$o=i(Ht),Ble=n(Ht,"P",{});var uKr=s(Ble);B$o=r(uKr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uKr.forEach(t),x$o=i(Ht),Ka=n(Ht,"P",{});var D4=s(Ka);k$o=r(D4,"The model class to instantiate is selected based on the "),xle=n(D4,"CODE",{});var bKr=s(xle);R$o=r(bKr,"model_type"),bKr.forEach(t),S$o=r(D4,` property of the config object (either
passed as an argument or loaded from `),kle=n(D4,"CODE",{});var vKr=s(kle);P$o=r(vKr,"pretrained_model_name_or_path"),vKr.forEach(t),$$o=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=n(D4,"CODE",{});var TKr=s(Rle);I$o=r(TKr,"pretrained_model_name_or_path"),TKr.forEach(t),D$o=r(D4,":"),D4.forEach(t),j$o=i(Ht),Ae=n(Ht,"UL",{});var No=s(Ae);O2=n(No,"LI",{});var uye=s(O2);Sle=n(uye,"STRONG",{});var FKr=s(Sle);N$o=r(FKr,"data2vec-audio"),FKr.forEach(t),q$o=r(uye," \u2014 "),Sj=n(uye,"A",{href:!0});var CKr=s(Sj);G$o=r(CKr,"Data2VecAudioForSequenceClassification"),CKr.forEach(t),O$o=r(uye," (Data2VecAudio model)"),uye.forEach(t),X$o=i(No),X2=n(No,"LI",{});var bye=s(X2);Ple=n(bye,"STRONG",{});var MKr=s(Ple);V$o=r(MKr,"hubert"),MKr.forEach(t),z$o=r(bye," \u2014 "),Pj=n(bye,"A",{href:!0});var EKr=s(Pj);W$o=r(EKr,"HubertForSequenceClassification"),EKr.forEach(t),Q$o=r(bye," (Hubert model)"),bye.forEach(t),H$o=i(No),V2=n(No,"LI",{});var vye=s(V2);$le=n(vye,"STRONG",{});var yKr=s($le);U$o=r(yKr,"sew"),yKr.forEach(t),J$o=r(vye," \u2014 "),$j=n(vye,"A",{href:!0});var wKr=s($j);Y$o=r(wKr,"SEWForSequenceClassification"),wKr.forEach(t),K$o=r(vye," (SEW model)"),vye.forEach(t),Z$o=i(No),z2=n(No,"LI",{});var Tye=s(z2);Ile=n(Tye,"STRONG",{});var AKr=s(Ile);eIo=r(AKr,"sew-d"),AKr.forEach(t),oIo=r(Tye," \u2014 "),Ij=n(Tye,"A",{href:!0});var LKr=s(Ij);rIo=r(LKr,"SEWDForSequenceClassification"),LKr.forEach(t),tIo=r(Tye," (SEW-D model)"),Tye.forEach(t),aIo=i(No),W2=n(No,"LI",{});var Fye=s(W2);Dle=n(Fye,"STRONG",{});var BKr=s(Dle);nIo=r(BKr,"unispeech"),BKr.forEach(t),sIo=r(Fye," \u2014 "),Dj=n(Fye,"A",{href:!0});var xKr=s(Dj);lIo=r(xKr,"UniSpeechForSequenceClassification"),xKr.forEach(t),iIo=r(Fye," (UniSpeech model)"),Fye.forEach(t),dIo=i(No),Q2=n(No,"LI",{});var Cye=s(Q2);jle=n(Cye,"STRONG",{});var kKr=s(jle);cIo=r(kKr,"unispeech-sat"),kKr.forEach(t),fIo=r(Cye," \u2014 "),jj=n(Cye,"A",{href:!0});var RKr=s(jj);mIo=r(RKr,"UniSpeechSatForSequenceClassification"),RKr.forEach(t),gIo=r(Cye," (UniSpeechSat model)"),Cye.forEach(t),hIo=i(No),H2=n(No,"LI",{});var Mye=s(H2);Nle=n(Mye,"STRONG",{});var SKr=s(Nle);pIo=r(SKr,"wav2vec2"),SKr.forEach(t),_Io=r(Mye," \u2014 "),Nj=n(Mye,"A",{href:!0});var PKr=s(Nj);uIo=r(PKr,"Wav2Vec2ForSequenceClassification"),PKr.forEach(t),bIo=r(Mye," (Wav2Vec2 model)"),Mye.forEach(t),vIo=i(No),U2=n(No,"LI",{});var Eye=s(U2);qle=n(Eye,"STRONG",{});var $Kr=s(qle);TIo=r($Kr,"wavlm"),$Kr.forEach(t),FIo=r(Eye," \u2014 "),qj=n(Eye,"A",{href:!0});var IKr=s(qj);CIo=r(IKr,"WavLMForSequenceClassification"),IKr.forEach(t),MIo=r(Eye," (WavLM model)"),Eye.forEach(t),No.forEach(t),EIo=i(Ht),J2=n(Ht,"P",{});var yye=s(J2);yIo=r(yye,"The model is set in evaluation mode by default using "),Gle=n(yye,"CODE",{});var DKr=s(Gle);wIo=r(DKr,"model.eval()"),DKr.forEach(t),AIo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=n(yye,"CODE",{});var jKr=s(Ole);LIo=r(jKr,"model.train()"),jKr.forEach(t),yye.forEach(t),BIo=i(Ht),Xle=n(Ht,"P",{});var NKr=s(Xle);xIo=r(NKr,"Examples:"),NKr.forEach(t),kIo=i(Ht),m(X3.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),aBe=i(c),xd=n(c,"H2",{class:!0});var fke=s(xd);Y2=n(fke,"A",{id:!0,class:!0,href:!0});var qKr=s(Y2);Vle=n(qKr,"SPAN",{});var GKr=s(Vle);m(V3.$$.fragment,GKr),GKr.forEach(t),qKr.forEach(t),RIo=i(fke),zle=n(fke,"SPAN",{});var OKr=s(zle);SIo=r(OKr,"AutoModelForAudioFrameClassification"),OKr.forEach(t),fke.forEach(t),nBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(z3.$$.fragment,pl),PIo=i(pl),kd=n(pl,"P",{});var tz=s(kd);$Io=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wle=n(tz,"CODE",{});var XKr=s(Wle);IIo=r(XKr,"from_pretrained()"),XKr.forEach(t),DIo=r(tz,"class method or the "),Qle=n(tz,"CODE",{});var VKr=s(Qle);jIo=r(VKr,"from_config()"),VKr.forEach(t),NIo=r(tz,`class
method.`),tz.forEach(t),qIo=i(pl),W3=n(pl,"P",{});var mke=s(W3);GIo=r(mke,"This class cannot be instantiated directly using "),Hle=n(mke,"CODE",{});var zKr=s(Hle);OIo=r(zKr,"__init__()"),zKr.forEach(t),XIo=r(mke," (throws an error)."),mke.forEach(t),VIo=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m(Q3.$$.fragment,_l),zIo=i(_l),Ule=n(_l,"P",{});var WKr=s(Ule);WIo=r(WKr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),WKr.forEach(t),QIo=i(_l),Rd=n(_l,"P",{});var az=s(Rd);HIo=r(az,`Note:
Loading a model from its configuration file does `),Jle=n(az,"STRONG",{});var QKr=s(Jle);UIo=r(QKr,"not"),QKr.forEach(t),JIo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=n(az,"CODE",{});var HKr=s(Yle);YIo=r(HKr,"from_pretrained()"),HKr.forEach(t),KIo=r(az,"to load the model weights."),az.forEach(t),ZIo=i(_l),Kle=n(_l,"P",{});var UKr=s(Kle);eDo=r(UKr,"Examples:"),UKr.forEach(t),oDo=i(_l),m(H3.$$.fragment,_l),_l.forEach(t),rDo=i(pl),We=n(pl,"DIV",{class:!0});var Ut=s(We);m(U3.$$.fragment,Ut),tDo=i(Ut),Zle=n(Ut,"P",{});var JKr=s(Zle);aDo=r(JKr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),JKr.forEach(t),nDo=i(Ut),Za=n(Ut,"P",{});var j4=s(Za);sDo=r(j4,"The model class to instantiate is selected based on the "),eie=n(j4,"CODE",{});var YKr=s(eie);lDo=r(YKr,"model_type"),YKr.forEach(t),iDo=r(j4,` property of the config object (either
passed as an argument or loaded from `),oie=n(j4,"CODE",{});var KKr=s(oie);dDo=r(KKr,"pretrained_model_name_or_path"),KKr.forEach(t),cDo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=n(j4,"CODE",{});var ZKr=s(rie);fDo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),mDo=r(j4,":"),j4.forEach(t),gDo=i(Ut),en=n(Ut,"UL",{});var N4=s(en);K2=n(N4,"LI",{});var wye=s(K2);tie=n(wye,"STRONG",{});var eZr=s(tie);hDo=r(eZr,"data2vec-audio"),eZr.forEach(t),pDo=r(wye," \u2014 "),Gj=n(wye,"A",{href:!0});var oZr=s(Gj);_Do=r(oZr,"Data2VecAudioForAudioFrameClassification"),oZr.forEach(t),uDo=r(wye," (Data2VecAudio model)"),wye.forEach(t),bDo=i(N4),Z2=n(N4,"LI",{});var Aye=s(Z2);aie=n(Aye,"STRONG",{});var rZr=s(aie);vDo=r(rZr,"unispeech-sat"),rZr.forEach(t),TDo=r(Aye," \u2014 "),Oj=n(Aye,"A",{href:!0});var tZr=s(Oj);FDo=r(tZr,"UniSpeechSatForAudioFrameClassification"),tZr.forEach(t),CDo=r(Aye," (UniSpeechSat model)"),Aye.forEach(t),MDo=i(N4),ev=n(N4,"LI",{});var Lye=s(ev);nie=n(Lye,"STRONG",{});var aZr=s(nie);EDo=r(aZr,"wav2vec2"),aZr.forEach(t),yDo=r(Lye," \u2014 "),Xj=n(Lye,"A",{href:!0});var nZr=s(Xj);wDo=r(nZr,"Wav2Vec2ForAudioFrameClassification"),nZr.forEach(t),ADo=r(Lye," (Wav2Vec2 model)"),Lye.forEach(t),LDo=i(N4),ov=n(N4,"LI",{});var Bye=s(ov);sie=n(Bye,"STRONG",{});var sZr=s(sie);BDo=r(sZr,"wavlm"),sZr.forEach(t),xDo=r(Bye," \u2014 "),Vj=n(Bye,"A",{href:!0});var lZr=s(Vj);kDo=r(lZr,"WavLMForAudioFrameClassification"),lZr.forEach(t),RDo=r(Bye," (WavLM model)"),Bye.forEach(t),N4.forEach(t),SDo=i(Ut),rv=n(Ut,"P",{});var xye=s(rv);PDo=r(xye,"The model is set in evaluation mode by default using "),lie=n(xye,"CODE",{});var iZr=s(lie);$Do=r(iZr,"model.eval()"),iZr.forEach(t),IDo=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=n(xye,"CODE",{});var dZr=s(iie);DDo=r(dZr,"model.train()"),dZr.forEach(t),xye.forEach(t),jDo=i(Ut),die=n(Ut,"P",{});var cZr=s(die);NDo=r(cZr,"Examples:"),cZr.forEach(t),qDo=i(Ut),m(J3.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),sBe=i(c),Sd=n(c,"H2",{class:!0});var gke=s(Sd);tv=n(gke,"A",{id:!0,class:!0,href:!0});var fZr=s(tv);cie=n(fZr,"SPAN",{});var mZr=s(cie);m(Y3.$$.fragment,mZr),mZr.forEach(t),fZr.forEach(t),GDo=i(gke),fie=n(gke,"SPAN",{});var gZr=s(fie);ODo=r(gZr,"AutoModelForCTC"),gZr.forEach(t),gke.forEach(t),lBe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(K3.$$.fragment,ul),XDo=i(ul),Pd=n(ul,"P",{});var nz=s(Pd);VDo=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mie=n(nz,"CODE",{});var hZr=s(mie);zDo=r(hZr,"from_pretrained()"),hZr.forEach(t),WDo=r(nz,"class method or the "),gie=n(nz,"CODE",{});var pZr=s(gie);QDo=r(pZr,"from_config()"),pZr.forEach(t),HDo=r(nz,`class
method.`),nz.forEach(t),UDo=i(ul),Z3=n(ul,"P",{});var hke=s(Z3);JDo=r(hke,"This class cannot be instantiated directly using "),hie=n(hke,"CODE",{});var _Zr=s(hie);YDo=r(_Zr,"__init__()"),_Zr.forEach(t),KDo=r(hke," (throws an error)."),hke.forEach(t),ZDo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m(ey.$$.fragment,bl),ejo=i(bl),pie=n(bl,"P",{});var uZr=s(pie);ojo=r(uZr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uZr.forEach(t),rjo=i(bl),$d=n(bl,"P",{});var sz=s($d);tjo=r(sz,`Note:
Loading a model from its configuration file does `),_ie=n(sz,"STRONG",{});var bZr=s(_ie);ajo=r(bZr,"not"),bZr.forEach(t),njo=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=n(sz,"CODE",{});var vZr=s(uie);sjo=r(vZr,"from_pretrained()"),vZr.forEach(t),ljo=r(sz,"to load the model weights."),sz.forEach(t),ijo=i(bl),bie=n(bl,"P",{});var TZr=s(bie);djo=r(TZr,"Examples:"),TZr.forEach(t),cjo=i(bl),m(oy.$$.fragment,bl),bl.forEach(t),fjo=i(ul),Qe=n(ul,"DIV",{class:!0});var Jt=s(Qe);m(ry.$$.fragment,Jt),mjo=i(Jt),vie=n(Jt,"P",{});var FZr=s(vie);gjo=r(FZr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),FZr.forEach(t),hjo=i(Jt),on=n(Jt,"P",{});var q4=s(on);pjo=r(q4,"The model class to instantiate is selected based on the "),Tie=n(q4,"CODE",{});var CZr=s(Tie);_jo=r(CZr,"model_type"),CZr.forEach(t),ujo=r(q4,` property of the config object (either
passed as an argument or loaded from `),Fie=n(q4,"CODE",{});var MZr=s(Fie);bjo=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),vjo=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cie=n(q4,"CODE",{});var EZr=s(Cie);Tjo=r(EZr,"pretrained_model_name_or_path"),EZr.forEach(t),Fjo=r(q4,":"),q4.forEach(t),Cjo=i(Jt),Le=n(Jt,"UL",{});var qo=s(Le);av=n(qo,"LI",{});var kye=s(av);Mie=n(kye,"STRONG",{});var yZr=s(Mie);Mjo=r(yZr,"data2vec-audio"),yZr.forEach(t),Ejo=r(kye," \u2014 "),zj=n(kye,"A",{href:!0});var wZr=s(zj);yjo=r(wZr,"Data2VecAudioForCTC"),wZr.forEach(t),wjo=r(kye," (Data2VecAudio model)"),kye.forEach(t),Ajo=i(qo),nv=n(qo,"LI",{});var Rye=s(nv);Eie=n(Rye,"STRONG",{});var AZr=s(Eie);Ljo=r(AZr,"hubert"),AZr.forEach(t),Bjo=r(Rye," \u2014 "),Wj=n(Rye,"A",{href:!0});var LZr=s(Wj);xjo=r(LZr,"HubertForCTC"),LZr.forEach(t),kjo=r(Rye," (Hubert model)"),Rye.forEach(t),Rjo=i(qo),sv=n(qo,"LI",{});var Sye=s(sv);yie=n(Sye,"STRONG",{});var BZr=s(yie);Sjo=r(BZr,"sew"),BZr.forEach(t),Pjo=r(Sye," \u2014 "),Qj=n(Sye,"A",{href:!0});var xZr=s(Qj);$jo=r(xZr,"SEWForCTC"),xZr.forEach(t),Ijo=r(Sye," (SEW model)"),Sye.forEach(t),Djo=i(qo),lv=n(qo,"LI",{});var Pye=s(lv);wie=n(Pye,"STRONG",{});var kZr=s(wie);jjo=r(kZr,"sew-d"),kZr.forEach(t),Njo=r(Pye," \u2014 "),Hj=n(Pye,"A",{href:!0});var RZr=s(Hj);qjo=r(RZr,"SEWDForCTC"),RZr.forEach(t),Gjo=r(Pye," (SEW-D model)"),Pye.forEach(t),Ojo=i(qo),iv=n(qo,"LI",{});var $ye=s(iv);Aie=n($ye,"STRONG",{});var SZr=s(Aie);Xjo=r(SZr,"unispeech"),SZr.forEach(t),Vjo=r($ye," \u2014 "),Uj=n($ye,"A",{href:!0});var PZr=s(Uj);zjo=r(PZr,"UniSpeechForCTC"),PZr.forEach(t),Wjo=r($ye," (UniSpeech model)"),$ye.forEach(t),Qjo=i(qo),dv=n(qo,"LI",{});var Iye=s(dv);Lie=n(Iye,"STRONG",{});var $Zr=s(Lie);Hjo=r($Zr,"unispeech-sat"),$Zr.forEach(t),Ujo=r(Iye," \u2014 "),Jj=n(Iye,"A",{href:!0});var IZr=s(Jj);Jjo=r(IZr,"UniSpeechSatForCTC"),IZr.forEach(t),Yjo=r(Iye," (UniSpeechSat model)"),Iye.forEach(t),Kjo=i(qo),cv=n(qo,"LI",{});var Dye=s(cv);Bie=n(Dye,"STRONG",{});var DZr=s(Bie);Zjo=r(DZr,"wav2vec2"),DZr.forEach(t),eNo=r(Dye," \u2014 "),Yj=n(Dye,"A",{href:!0});var jZr=s(Yj);oNo=r(jZr,"Wav2Vec2ForCTC"),jZr.forEach(t),rNo=r(Dye," (Wav2Vec2 model)"),Dye.forEach(t),tNo=i(qo),fv=n(qo,"LI",{});var jye=s(fv);xie=n(jye,"STRONG",{});var NZr=s(xie);aNo=r(NZr,"wavlm"),NZr.forEach(t),nNo=r(jye," \u2014 "),Kj=n(jye,"A",{href:!0});var qZr=s(Kj);sNo=r(qZr,"WavLMForCTC"),qZr.forEach(t),lNo=r(jye," (WavLM model)"),jye.forEach(t),qo.forEach(t),iNo=i(Jt),mv=n(Jt,"P",{});var Nye=s(mv);dNo=r(Nye,"The model is set in evaluation mode by default using "),kie=n(Nye,"CODE",{});var GZr=s(kie);cNo=r(GZr,"model.eval()"),GZr.forEach(t),fNo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=n(Nye,"CODE",{});var OZr=s(Rie);mNo=r(OZr,"model.train()"),OZr.forEach(t),Nye.forEach(t),gNo=i(Jt),Sie=n(Jt,"P",{});var XZr=s(Sie);hNo=r(XZr,"Examples:"),XZr.forEach(t),pNo=i(Jt),m(ty.$$.fragment,Jt),Jt.forEach(t),ul.forEach(t),iBe=i(c),Id=n(c,"H2",{class:!0});var pke=s(Id);gv=n(pke,"A",{id:!0,class:!0,href:!0});var VZr=s(gv);Pie=n(VZr,"SPAN",{});var zZr=s(Pie);m(ay.$$.fragment,zZr),zZr.forEach(t),VZr.forEach(t),_No=i(pke),$ie=n(pke,"SPAN",{});var WZr=s($ie);uNo=r(WZr,"AutoModelForSpeechSeq2Seq"),WZr.forEach(t),pke.forEach(t),dBe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(ny.$$.fragment,vl),bNo=i(vl),Dd=n(vl,"P",{});var lz=s(Dd);vNo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iie=n(lz,"CODE",{});var QZr=s(Iie);TNo=r(QZr,"from_pretrained()"),QZr.forEach(t),FNo=r(lz,"class method or the "),Die=n(lz,"CODE",{});var HZr=s(Die);CNo=r(HZr,"from_config()"),HZr.forEach(t),MNo=r(lz,`class
method.`),lz.forEach(t),ENo=i(vl),sy=n(vl,"P",{});var _ke=s(sy);yNo=r(_ke,"This class cannot be instantiated directly using "),jie=n(_ke,"CODE",{});var UZr=s(jie);wNo=r(UZr,"__init__()"),UZr.forEach(t),ANo=r(_ke," (throws an error)."),_ke.forEach(t),LNo=i(vl),rt=n(vl,"DIV",{class:!0});var Tl=s(rt);m(ly.$$.fragment,Tl),BNo=i(Tl),Nie=n(Tl,"P",{});var JZr=s(Nie);xNo=r(JZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JZr.forEach(t),kNo=i(Tl),jd=n(Tl,"P",{});var iz=s(jd);RNo=r(iz,`Note:
Loading a model from its configuration file does `),qie=n(iz,"STRONG",{});var YZr=s(qie);SNo=r(YZr,"not"),YZr.forEach(t),PNo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gie=n(iz,"CODE",{});var KZr=s(Gie);$No=r(KZr,"from_pretrained()"),KZr.forEach(t),INo=r(iz,"to load the model weights."),iz.forEach(t),DNo=i(Tl),Oie=n(Tl,"P",{});var ZZr=s(Oie);jNo=r(ZZr,"Examples:"),ZZr.forEach(t),NNo=i(Tl),m(iy.$$.fragment,Tl),Tl.forEach(t),qNo=i(vl),He=n(vl,"DIV",{class:!0});var Yt=s(He);m(dy.$$.fragment,Yt),GNo=i(Yt),Xie=n(Yt,"P",{});var eet=s(Xie);ONo=r(eet,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eet.forEach(t),XNo=i(Yt),rn=n(Yt,"P",{});var G4=s(rn);VNo=r(G4,"The model class to instantiate is selected based on the "),Vie=n(G4,"CODE",{});var oet=s(Vie);zNo=r(oet,"model_type"),oet.forEach(t),WNo=r(G4,` property of the config object (either
passed as an argument or loaded from `),zie=n(G4,"CODE",{});var ret=s(zie);QNo=r(ret,"pretrained_model_name_or_path"),ret.forEach(t),HNo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(G4,"CODE",{});var tet=s(Wie);UNo=r(tet,"pretrained_model_name_or_path"),tet.forEach(t),JNo=r(G4,":"),G4.forEach(t),YNo=i(Yt),cy=n(Yt,"UL",{});var uke=s(cy);hv=n(uke,"LI",{});var qye=s(hv);Qie=n(qye,"STRONG",{});var aet=s(Qie);KNo=r(aet,"speech-encoder-decoder"),aet.forEach(t),ZNo=r(qye," \u2014 "),Zj=n(qye,"A",{href:!0});var net=s(Zj);eqo=r(net,"SpeechEncoderDecoderModel"),net.forEach(t),oqo=r(qye," (Speech Encoder decoder model)"),qye.forEach(t),rqo=i(uke),pv=n(uke,"LI",{});var Gye=s(pv);Hie=n(Gye,"STRONG",{});var set=s(Hie);tqo=r(set,"speech_to_text"),set.forEach(t),aqo=r(Gye," \u2014 "),eN=n(Gye,"A",{href:!0});var iet=s(eN);nqo=r(iet,"Speech2TextForConditionalGeneration"),iet.forEach(t),sqo=r(Gye," (Speech2Text model)"),Gye.forEach(t),uke.forEach(t),lqo=i(Yt),_v=n(Yt,"P",{});var Oye=s(_v);iqo=r(Oye,"The model is set in evaluation mode by default using "),Uie=n(Oye,"CODE",{});var det=s(Uie);dqo=r(det,"model.eval()"),det.forEach(t),cqo=r(Oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(Oye,"CODE",{});var cet=s(Jie);fqo=r(cet,"model.train()"),cet.forEach(t),Oye.forEach(t),mqo=i(Yt),Yie=n(Yt,"P",{});var fet=s(Yie);gqo=r(fet,"Examples:"),fet.forEach(t),hqo=i(Yt),m(fy.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),cBe=i(c),Nd=n(c,"H2",{class:!0});var bke=s(Nd);uv=n(bke,"A",{id:!0,class:!0,href:!0});var met=s(uv);Kie=n(met,"SPAN",{});var get=s(Kie);m(my.$$.fragment,get),get.forEach(t),met.forEach(t),pqo=i(bke),Zie=n(bke,"SPAN",{});var het=s(Zie);_qo=r(het,"AutoModelForAudioXVector"),het.forEach(t),bke.forEach(t),fBe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(gy.$$.fragment,Fl),uqo=i(Fl),qd=n(Fl,"P",{});var dz=s(qd);bqo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ede=n(dz,"CODE",{});var pet=s(ede);vqo=r(pet,"from_pretrained()"),pet.forEach(t),Tqo=r(dz,"class method or the "),ode=n(dz,"CODE",{});var _et=s(ode);Fqo=r(_et,"from_config()"),_et.forEach(t),Cqo=r(dz,`class
method.`),dz.forEach(t),Mqo=i(Fl),hy=n(Fl,"P",{});var vke=s(hy);Eqo=r(vke,"This class cannot be instantiated directly using "),rde=n(vke,"CODE",{});var uet=s(rde);yqo=r(uet,"__init__()"),uet.forEach(t),wqo=r(vke," (throws an error)."),vke.forEach(t),Aqo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Cl=s(tt);m(py.$$.fragment,Cl),Lqo=i(Cl),tde=n(Cl,"P",{});var bet=s(tde);Bqo=r(bet,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bet.forEach(t),xqo=i(Cl),Gd=n(Cl,"P",{});var cz=s(Gd);kqo=r(cz,`Note:
Loading a model from its configuration file does `),ade=n(cz,"STRONG",{});var vet=s(ade);Rqo=r(vet,"not"),vet.forEach(t),Sqo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=n(cz,"CODE",{});var Tet=s(nde);Pqo=r(Tet,"from_pretrained()"),Tet.forEach(t),$qo=r(cz,"to load the model weights."),cz.forEach(t),Iqo=i(Cl),sde=n(Cl,"P",{});var Fet=s(sde);Dqo=r(Fet,"Examples:"),Fet.forEach(t),jqo=i(Cl),m(_y.$$.fragment,Cl),Cl.forEach(t),Nqo=i(Fl),Ue=n(Fl,"DIV",{class:!0});var Kt=s(Ue);m(uy.$$.fragment,Kt),qqo=i(Kt),lde=n(Kt,"P",{});var Cet=s(lde);Gqo=r(Cet,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Cet.forEach(t),Oqo=i(Kt),tn=n(Kt,"P",{});var O4=s(tn);Xqo=r(O4,"The model class to instantiate is selected based on the "),ide=n(O4,"CODE",{});var Met=s(ide);Vqo=r(Met,"model_type"),Met.forEach(t),zqo=r(O4,` property of the config object (either
passed as an argument or loaded from `),dde=n(O4,"CODE",{});var Eet=s(dde);Wqo=r(Eet,"pretrained_model_name_or_path"),Eet.forEach(t),Qqo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(O4,"CODE",{});var yet=s(cde);Hqo=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),Uqo=r(O4,":"),O4.forEach(t),Jqo=i(Kt),an=n(Kt,"UL",{});var X4=s(an);bv=n(X4,"LI",{});var Xye=s(bv);fde=n(Xye,"STRONG",{});var wet=s(fde);Yqo=r(wet,"data2vec-audio"),wet.forEach(t),Kqo=r(Xye," \u2014 "),oN=n(Xye,"A",{href:!0});var Aet=s(oN);Zqo=r(Aet,"Data2VecAudioForXVector"),Aet.forEach(t),eGo=r(Xye," (Data2VecAudio model)"),Xye.forEach(t),oGo=i(X4),vv=n(X4,"LI",{});var Vye=s(vv);mde=n(Vye,"STRONG",{});var Let=s(mde);rGo=r(Let,"unispeech-sat"),Let.forEach(t),tGo=r(Vye," \u2014 "),rN=n(Vye,"A",{href:!0});var Bet=s(rN);aGo=r(Bet,"UniSpeechSatForXVector"),Bet.forEach(t),nGo=r(Vye," (UniSpeechSat model)"),Vye.forEach(t),sGo=i(X4),Tv=n(X4,"LI",{});var zye=s(Tv);gde=n(zye,"STRONG",{});var xet=s(gde);lGo=r(xet,"wav2vec2"),xet.forEach(t),iGo=r(zye," \u2014 "),tN=n(zye,"A",{href:!0});var ket=s(tN);dGo=r(ket,"Wav2Vec2ForXVector"),ket.forEach(t),cGo=r(zye," (Wav2Vec2 model)"),zye.forEach(t),fGo=i(X4),Fv=n(X4,"LI",{});var Wye=s(Fv);hde=n(Wye,"STRONG",{});var Ret=s(hde);mGo=r(Ret,"wavlm"),Ret.forEach(t),gGo=r(Wye," \u2014 "),aN=n(Wye,"A",{href:!0});var Set=s(aN);hGo=r(Set,"WavLMForXVector"),Set.forEach(t),pGo=r(Wye," (WavLM model)"),Wye.forEach(t),X4.forEach(t),_Go=i(Kt),Cv=n(Kt,"P",{});var Qye=s(Cv);uGo=r(Qye,"The model is set in evaluation mode by default using "),pde=n(Qye,"CODE",{});var Pet=s(pde);bGo=r(Pet,"model.eval()"),Pet.forEach(t),vGo=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(Qye,"CODE",{});var $et=s(_de);TGo=r($et,"model.train()"),$et.forEach(t),Qye.forEach(t),FGo=i(Kt),ude=n(Kt,"P",{});var Iet=s(ude);CGo=r(Iet,"Examples:"),Iet.forEach(t),MGo=i(Kt),m(by.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),mBe=i(c),Od=n(c,"H2",{class:!0});var Tke=s(Od);Mv=n(Tke,"A",{id:!0,class:!0,href:!0});var Det=s(Mv);bde=n(Det,"SPAN",{});var jet=s(bde);m(vy.$$.fragment,jet),jet.forEach(t),Det.forEach(t),EGo=i(Tke),vde=n(Tke,"SPAN",{});var Net=s(vde);yGo=r(Net,"AutoModelForMaskedImageModeling"),Net.forEach(t),Tke.forEach(t),gBe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Ty.$$.fragment,Ml),wGo=i(Ml),Xd=n(Ml,"P",{});var fz=s(Xd);AGo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Tde=n(fz,"CODE",{});var qet=s(Tde);LGo=r(qet,"from_pretrained()"),qet.forEach(t),BGo=r(fz,"class method or the "),Fde=n(fz,"CODE",{});var Get=s(Fde);xGo=r(Get,"from_config()"),Get.forEach(t),kGo=r(fz,`class
method.`),fz.forEach(t),RGo=i(Ml),Fy=n(Ml,"P",{});var Fke=s(Fy);SGo=r(Fke,"This class cannot be instantiated directly using "),Cde=n(Fke,"CODE",{});var Oet=s(Cde);PGo=r(Oet,"__init__()"),Oet.forEach(t),$Go=r(Fke," (throws an error)."),Fke.forEach(t),IGo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(Cy.$$.fragment,El),DGo=i(El),Mde=n(El,"P",{});var Xet=s(Mde);jGo=r(Xet,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xet.forEach(t),NGo=i(El),Vd=n(El,"P",{});var mz=s(Vd);qGo=r(mz,`Note:
Loading a model from its configuration file does `),Ede=n(mz,"STRONG",{});var Vet=s(Ede);GGo=r(Vet,"not"),Vet.forEach(t),OGo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yde=n(mz,"CODE",{});var zet=s(yde);XGo=r(zet,"from_pretrained()"),zet.forEach(t),VGo=r(mz,"to load the model weights."),mz.forEach(t),zGo=i(El),wde=n(El,"P",{});var Wet=s(wde);WGo=r(Wet,"Examples:"),Wet.forEach(t),QGo=i(El),m(My.$$.fragment,El),El.forEach(t),HGo=i(Ml),Je=n(Ml,"DIV",{class:!0});var Zt=s(Je);m(Ey.$$.fragment,Zt),UGo=i(Zt),Ade=n(Zt,"P",{});var Qet=s(Ade);JGo=r(Qet,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qet.forEach(t),YGo=i(Zt),nn=n(Zt,"P",{});var V4=s(nn);KGo=r(V4,"The model class to instantiate is selected based on the "),Lde=n(V4,"CODE",{});var Het=s(Lde);ZGo=r(Het,"model_type"),Het.forEach(t),eOo=r(V4,` property of the config object (either
passed as an argument or loaded from `),Bde=n(V4,"CODE",{});var Uet=s(Bde);oOo=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),rOo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=n(V4,"CODE",{});var Jet=s(xde);tOo=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),aOo=r(V4,":"),V4.forEach(t),nOo=i(Zt),zd=n(Zt,"UL",{});var gz=s(zd);Ev=n(gz,"LI",{});var Hye=s(Ev);kde=n(Hye,"STRONG",{});var Yet=s(kde);sOo=r(Yet,"deit"),Yet.forEach(t),lOo=r(Hye," \u2014 "),nN=n(Hye,"A",{href:!0});var Ket=s(nN);iOo=r(Ket,"DeiTForMaskedImageModeling"),Ket.forEach(t),dOo=r(Hye," (DeiT model)"),Hye.forEach(t),cOo=i(gz),yv=n(gz,"LI",{});var Uye=s(yv);Rde=n(Uye,"STRONG",{});var Zet=s(Rde);fOo=r(Zet,"swin"),Zet.forEach(t),mOo=r(Uye," \u2014 "),sN=n(Uye,"A",{href:!0});var eot=s(sN);gOo=r(eot,"SwinForMaskedImageModeling"),eot.forEach(t),hOo=r(Uye," (Swin model)"),Uye.forEach(t),pOo=i(gz),wv=n(gz,"LI",{});var Jye=s(wv);Sde=n(Jye,"STRONG",{});var oot=s(Sde);_Oo=r(oot,"vit"),oot.forEach(t),uOo=r(Jye," \u2014 "),lN=n(Jye,"A",{href:!0});var rot=s(lN);bOo=r(rot,"ViTForMaskedImageModeling"),rot.forEach(t),vOo=r(Jye," (ViT model)"),Jye.forEach(t),gz.forEach(t),TOo=i(Zt),Av=n(Zt,"P",{});var Yye=s(Av);FOo=r(Yye,"The model is set in evaluation mode by default using "),Pde=n(Yye,"CODE",{});var tot=s(Pde);COo=r(tot,"model.eval()"),tot.forEach(t),MOo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(Yye,"CODE",{});var aot=s($de);EOo=r(aot,"model.train()"),aot.forEach(t),Yye.forEach(t),yOo=i(Zt),Ide=n(Zt,"P",{});var not=s(Ide);wOo=r(not,"Examples:"),not.forEach(t),AOo=i(Zt),m(yy.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),hBe=i(c),Wd=n(c,"H2",{class:!0});var Cke=s(Wd);Lv=n(Cke,"A",{id:!0,class:!0,href:!0});var sot=s(Lv);Dde=n(sot,"SPAN",{});var lot=s(Dde);m(wy.$$.fragment,lot),lot.forEach(t),sot.forEach(t),LOo=i(Cke),jde=n(Cke,"SPAN",{});var iot=s(jde);BOo=r(iot,"AutoModelForObjectDetection"),iot.forEach(t),Cke.forEach(t),pBe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Ay.$$.fragment,yl),xOo=i(yl),Qd=n(yl,"P",{});var hz=s(Qd);kOo=r(hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Nde=n(hz,"CODE",{});var dot=s(Nde);ROo=r(dot,"from_pretrained()"),dot.forEach(t),SOo=r(hz,"class method or the "),qde=n(hz,"CODE",{});var cot=s(qde);POo=r(cot,"from_config()"),cot.forEach(t),$Oo=r(hz,`class
method.`),hz.forEach(t),IOo=i(yl),Ly=n(yl,"P",{});var Mke=s(Ly);DOo=r(Mke,"This class cannot be instantiated directly using "),Gde=n(Mke,"CODE",{});var fot=s(Gde);jOo=r(fot,"__init__()"),fot.forEach(t),NOo=r(Mke," (throws an error)."),Mke.forEach(t),qOo=i(yl),nt=n(yl,"DIV",{class:!0});var wl=s(nt);m(By.$$.fragment,wl),GOo=i(wl),Ode=n(wl,"P",{});var mot=s(Ode);OOo=r(mot,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mot.forEach(t),XOo=i(wl),Hd=n(wl,"P",{});var pz=s(Hd);VOo=r(pz,`Note:
Loading a model from its configuration file does `),Xde=n(pz,"STRONG",{});var got=s(Xde);zOo=r(got,"not"),got.forEach(t),WOo=r(pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vde=n(pz,"CODE",{});var hot=s(Vde);QOo=r(hot,"from_pretrained()"),hot.forEach(t),HOo=r(pz,"to load the model weights."),pz.forEach(t),UOo=i(wl),zde=n(wl,"P",{});var pot=s(zde);JOo=r(pot,"Examples:"),pot.forEach(t),YOo=i(wl),m(xy.$$.fragment,wl),wl.forEach(t),KOo=i(yl),Ye=n(yl,"DIV",{class:!0});var ea=s(Ye);m(ky.$$.fragment,ea),ZOo=i(ea),Wde=n(ea,"P",{});var _ot=s(Wde);eXo=r(_ot,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_ot.forEach(t),oXo=i(ea),sn=n(ea,"P",{});var z4=s(sn);rXo=r(z4,"The model class to instantiate is selected based on the "),Qde=n(z4,"CODE",{});var uot=s(Qde);tXo=r(uot,"model_type"),uot.forEach(t),aXo=r(z4,` property of the config object (either
passed as an argument or loaded from `),Hde=n(z4,"CODE",{});var bot=s(Hde);nXo=r(bot,"pretrained_model_name_or_path"),bot.forEach(t),sXo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=n(z4,"CODE",{});var vot=s(Ude);lXo=r(vot,"pretrained_model_name_or_path"),vot.forEach(t),iXo=r(z4,":"),z4.forEach(t),dXo=i(ea),Jde=n(ea,"UL",{});var Tot=s(Jde);Bv=n(Tot,"LI",{});var Kye=s(Bv);Yde=n(Kye,"STRONG",{});var Fot=s(Yde);cXo=r(Fot,"detr"),Fot.forEach(t),fXo=r(Kye," \u2014 "),iN=n(Kye,"A",{href:!0});var Cot=s(iN);mXo=r(Cot,"DetrForObjectDetection"),Cot.forEach(t),gXo=r(Kye," (DETR model)"),Kye.forEach(t),Tot.forEach(t),hXo=i(ea),xv=n(ea,"P",{});var Zye=s(xv);pXo=r(Zye,"The model is set in evaluation mode by default using "),Kde=n(Zye,"CODE",{});var Mot=s(Kde);_Xo=r(Mot,"model.eval()"),Mot.forEach(t),uXo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=n(Zye,"CODE",{});var Eot=s(Zde);bXo=r(Eot,"model.train()"),Eot.forEach(t),Zye.forEach(t),vXo=i(ea),ece=n(ea,"P",{});var yot=s(ece);TXo=r(yot,"Examples:"),yot.forEach(t),FXo=i(ea),m(Ry.$$.fragment,ea),ea.forEach(t),yl.forEach(t),_Be=i(c),Ud=n(c,"H2",{class:!0});var Eke=s(Ud);kv=n(Eke,"A",{id:!0,class:!0,href:!0});var wot=s(kv);oce=n(wot,"SPAN",{});var Aot=s(oce);m(Sy.$$.fragment,Aot),Aot.forEach(t),wot.forEach(t),CXo=i(Eke),rce=n(Eke,"SPAN",{});var Lot=s(rce);MXo=r(Lot,"AutoModelForImageSegmentation"),Lot.forEach(t),Eke.forEach(t),uBe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(Py.$$.fragment,Al),EXo=i(Al),Jd=n(Al,"P",{});var _z=s(Jd);yXo=r(_z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tce=n(_z,"CODE",{});var Bot=s(tce);wXo=r(Bot,"from_pretrained()"),Bot.forEach(t),AXo=r(_z,"class method or the "),ace=n(_z,"CODE",{});var xot=s(ace);LXo=r(xot,"from_config()"),xot.forEach(t),BXo=r(_z,`class
method.`),_z.forEach(t),xXo=i(Al),$y=n(Al,"P",{});var yke=s($y);kXo=r(yke,"This class cannot be instantiated directly using "),nce=n(yke,"CODE",{});var kot=s(nce);RXo=r(kot,"__init__()"),kot.forEach(t),SXo=r(yke," (throws an error)."),yke.forEach(t),PXo=i(Al),st=n(Al,"DIV",{class:!0});var Ll=s(st);m(Iy.$$.fragment,Ll),$Xo=i(Ll),sce=n(Ll,"P",{});var Rot=s(sce);IXo=r(Rot,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rot.forEach(t),DXo=i(Ll),Yd=n(Ll,"P",{});var uz=s(Yd);jXo=r(uz,`Note:
Loading a model from its configuration file does `),lce=n(uz,"STRONG",{});var Sot=s(lce);NXo=r(Sot,"not"),Sot.forEach(t),qXo=r(uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ice=n(uz,"CODE",{});var Pot=s(ice);GXo=r(Pot,"from_pretrained()"),Pot.forEach(t),OXo=r(uz,"to load the model weights."),uz.forEach(t),XXo=i(Ll),dce=n(Ll,"P",{});var $ot=s(dce);VXo=r($ot,"Examples:"),$ot.forEach(t),zXo=i(Ll),m(Dy.$$.fragment,Ll),Ll.forEach(t),WXo=i(Al),Ke=n(Al,"DIV",{class:!0});var oa=s(Ke);m(jy.$$.fragment,oa),QXo=i(oa),cce=n(oa,"P",{});var Iot=s(cce);HXo=r(Iot,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Iot.forEach(t),UXo=i(oa),ln=n(oa,"P",{});var W4=s(ln);JXo=r(W4,"The model class to instantiate is selected based on the "),fce=n(W4,"CODE",{});var Dot=s(fce);YXo=r(Dot,"model_type"),Dot.forEach(t),KXo=r(W4,` property of the config object (either
passed as an argument or loaded from `),mce=n(W4,"CODE",{});var jot=s(mce);ZXo=r(jot,"pretrained_model_name_or_path"),jot.forEach(t),eVo=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=n(W4,"CODE",{});var Not=s(gce);oVo=r(Not,"pretrained_model_name_or_path"),Not.forEach(t),rVo=r(W4,":"),W4.forEach(t),tVo=i(oa),hce=n(oa,"UL",{});var qot=s(hce);Rv=n(qot,"LI",{});var ewe=s(Rv);pce=n(ewe,"STRONG",{});var Got=s(pce);aVo=r(Got,"detr"),Got.forEach(t),nVo=r(ewe," \u2014 "),dN=n(ewe,"A",{href:!0});var Oot=s(dN);sVo=r(Oot,"DetrForSegmentation"),Oot.forEach(t),lVo=r(ewe," (DETR model)"),ewe.forEach(t),qot.forEach(t),iVo=i(oa),Sv=n(oa,"P",{});var owe=s(Sv);dVo=r(owe,"The model is set in evaluation mode by default using "),_ce=n(owe,"CODE",{});var Xot=s(_ce);cVo=r(Xot,"model.eval()"),Xot.forEach(t),fVo=r(owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=n(owe,"CODE",{});var Vot=s(uce);mVo=r(Vot,"model.train()"),Vot.forEach(t),owe.forEach(t),gVo=i(oa),bce=n(oa,"P",{});var zot=s(bce);hVo=r(zot,"Examples:"),zot.forEach(t),pVo=i(oa),m(Ny.$$.fragment,oa),oa.forEach(t),Al.forEach(t),bBe=i(c),Kd=n(c,"H2",{class:!0});var wke=s(Kd);Pv=n(wke,"A",{id:!0,class:!0,href:!0});var Wot=s(Pv);vce=n(Wot,"SPAN",{});var Qot=s(vce);m(qy.$$.fragment,Qot),Qot.forEach(t),Wot.forEach(t),_Vo=i(wke),Tce=n(wke,"SPAN",{});var Hot=s(Tce);uVo=r(Hot,"AutoModelForSemanticSegmentation"),Hot.forEach(t),wke.forEach(t),vBe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(Gy.$$.fragment,Bl),bVo=i(Bl),Zd=n(Bl,"P",{});var bz=s(Zd);vVo=r(bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fce=n(bz,"CODE",{});var Uot=s(Fce);TVo=r(Uot,"from_pretrained()"),Uot.forEach(t),FVo=r(bz,"class method or the "),Cce=n(bz,"CODE",{});var Jot=s(Cce);CVo=r(Jot,"from_config()"),Jot.forEach(t),MVo=r(bz,`class
method.`),bz.forEach(t),EVo=i(Bl),Oy=n(Bl,"P",{});var Ake=s(Oy);yVo=r(Ake,"This class cannot be instantiated directly using "),Mce=n(Ake,"CODE",{});var Yot=s(Mce);wVo=r(Yot,"__init__()"),Yot.forEach(t),AVo=r(Ake," (throws an error)."),Ake.forEach(t),LVo=i(Bl),lt=n(Bl,"DIV",{class:!0});var xl=s(lt);m(Xy.$$.fragment,xl),BVo=i(xl),Ece=n(xl,"P",{});var Kot=s(Ece);xVo=r(Kot,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Kot.forEach(t),kVo=i(xl),ec=n(xl,"P",{});var vz=s(ec);RVo=r(vz,`Note:
Loading a model from its configuration file does `),yce=n(vz,"STRONG",{});var Zot=s(yce);SVo=r(Zot,"not"),Zot.forEach(t),PVo=r(vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),wce=n(vz,"CODE",{});var ert=s(wce);$Vo=r(ert,"from_pretrained()"),ert.forEach(t),IVo=r(vz,"to load the model weights."),vz.forEach(t),DVo=i(xl),Ace=n(xl,"P",{});var ort=s(Ace);jVo=r(ort,"Examples:"),ort.forEach(t),NVo=i(xl),m(Vy.$$.fragment,xl),xl.forEach(t),qVo=i(Bl),Ze=n(Bl,"DIV",{class:!0});var ra=s(Ze);m(zy.$$.fragment,ra),GVo=i(ra),Lce=n(ra,"P",{});var rrt=s(Lce);OVo=r(rrt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rrt.forEach(t),XVo=i(ra),dn=n(ra,"P",{});var Q4=s(dn);VVo=r(Q4,"The model class to instantiate is selected based on the "),Bce=n(Q4,"CODE",{});var trt=s(Bce);zVo=r(trt,"model_type"),trt.forEach(t),WVo=r(Q4,` property of the config object (either
passed as an argument or loaded from `),xce=n(Q4,"CODE",{});var art=s(xce);QVo=r(art,"pretrained_model_name_or_path"),art.forEach(t),HVo=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(Q4,"CODE",{});var nrt=s(kce);UVo=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),JVo=r(Q4,":"),Q4.forEach(t),YVo=i(ra),Wy=n(ra,"UL",{});var Lke=s(Wy);$v=n(Lke,"LI",{});var rwe=s($v);Rce=n(rwe,"STRONG",{});var srt=s(Rce);KVo=r(srt,"beit"),srt.forEach(t),ZVo=r(rwe," \u2014 "),cN=n(rwe,"A",{href:!0});var lrt=s(cN);ezo=r(lrt,"BeitForSemanticSegmentation"),lrt.forEach(t),ozo=r(rwe," (BEiT model)"),rwe.forEach(t),rzo=i(Lke),Iv=n(Lke,"LI",{});var twe=s(Iv);Sce=n(twe,"STRONG",{});var irt=s(Sce);tzo=r(irt,"segformer"),irt.forEach(t),azo=r(twe," \u2014 "),fN=n(twe,"A",{href:!0});var drt=s(fN);nzo=r(drt,"SegformerForSemanticSegmentation"),drt.forEach(t),szo=r(twe," (SegFormer model)"),twe.forEach(t),Lke.forEach(t),lzo=i(ra),Dv=n(ra,"P",{});var awe=s(Dv);izo=r(awe,"The model is set in evaluation mode by default using "),Pce=n(awe,"CODE",{});var crt=s(Pce);dzo=r(crt,"model.eval()"),crt.forEach(t),czo=r(awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(awe,"CODE",{});var frt=s($ce);fzo=r(frt,"model.train()"),frt.forEach(t),awe.forEach(t),mzo=i(ra),Ice=n(ra,"P",{});var mrt=s(Ice);gzo=r(mrt,"Examples:"),mrt.forEach(t),hzo=i(ra),m(Qy.$$.fragment,ra),ra.forEach(t),Bl.forEach(t),TBe=i(c),oc=n(c,"H2",{class:!0});var Bke=s(oc);jv=n(Bke,"A",{id:!0,class:!0,href:!0});var grt=s(jv);Dce=n(grt,"SPAN",{});var hrt=s(Dce);m(Hy.$$.fragment,hrt),hrt.forEach(t),grt.forEach(t),pzo=i(Bke),jce=n(Bke,"SPAN",{});var prt=s(jce);_zo=r(prt,"TFAutoModel"),prt.forEach(t),Bke.forEach(t),FBe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(Uy.$$.fragment,kl),uzo=i(kl),rc=n(kl,"P",{});var Tz=s(rc);bzo=r(Tz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Nce=n(Tz,"CODE",{});var _rt=s(Nce);vzo=r(_rt,"from_pretrained()"),_rt.forEach(t),Tzo=r(Tz,"class method or the "),qce=n(Tz,"CODE",{});var urt=s(qce);Fzo=r(urt,"from_config()"),urt.forEach(t),Czo=r(Tz,`class
method.`),Tz.forEach(t),Mzo=i(kl),Jy=n(kl,"P",{});var xke=s(Jy);Ezo=r(xke,"This class cannot be instantiated directly using "),Gce=n(xke,"CODE",{});var brt=s(Gce);yzo=r(brt,"__init__()"),brt.forEach(t),wzo=r(xke," (throws an error)."),xke.forEach(t),Azo=i(kl),it=n(kl,"DIV",{class:!0});var Rl=s(it);m(Yy.$$.fragment,Rl),Lzo=i(Rl),Oce=n(Rl,"P",{});var vrt=s(Oce);Bzo=r(vrt,"Instantiates one of the base model classes of the library from a configuration."),vrt.forEach(t),xzo=i(Rl),tc=n(Rl,"P",{});var Fz=s(tc);kzo=r(Fz,`Note:
Loading a model from its configuration file does `),Xce=n(Fz,"STRONG",{});var Trt=s(Xce);Rzo=r(Trt,"not"),Trt.forEach(t),Szo=r(Fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=n(Fz,"CODE",{});var Frt=s(Vce);Pzo=r(Frt,"from_pretrained()"),Frt.forEach(t),$zo=r(Fz,"to load the model weights."),Fz.forEach(t),Izo=i(Rl),zce=n(Rl,"P",{});var Crt=s(zce);Dzo=r(Crt,"Examples:"),Crt.forEach(t),jzo=i(Rl),m(Ky.$$.fragment,Rl),Rl.forEach(t),Nzo=i(kl),go=n(kl,"DIV",{class:!0});var ca=s(go);m(Zy.$$.fragment,ca),qzo=i(ca),Wce=n(ca,"P",{});var Mrt=s(Wce);Gzo=r(Mrt,"Instantiate one of the base model classes of the library from a pretrained model."),Mrt.forEach(t),Ozo=i(ca),cn=n(ca,"P",{});var H4=s(cn);Xzo=r(H4,"The model class to instantiate is selected based on the "),Qce=n(H4,"CODE",{});var Ert=s(Qce);Vzo=r(Ert,"model_type"),Ert.forEach(t),zzo=r(H4,` property of the config object (either
passed as an argument or loaded from `),Hce=n(H4,"CODE",{});var yrt=s(Hce);Wzo=r(yrt,"pretrained_model_name_or_path"),yrt.forEach(t),Qzo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=n(H4,"CODE",{});var wrt=s(Uce);Hzo=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),Uzo=r(H4,":"),H4.forEach(t),Jzo=i(ca),B=n(ca,"UL",{});var x=s(B);Nv=n(x,"LI",{});var nwe=s(Nv);Jce=n(nwe,"STRONG",{});var Art=s(Jce);Yzo=r(Art,"albert"),Art.forEach(t),Kzo=r(nwe," \u2014 "),mN=n(nwe,"A",{href:!0});var Lrt=s(mN);Zzo=r(Lrt,"TFAlbertModel"),Lrt.forEach(t),eWo=r(nwe," (ALBERT model)"),nwe.forEach(t),oWo=i(x),qv=n(x,"LI",{});var swe=s(qv);Yce=n(swe,"STRONG",{});var Brt=s(Yce);rWo=r(Brt,"bart"),Brt.forEach(t),tWo=r(swe," \u2014 "),gN=n(swe,"A",{href:!0});var xrt=s(gN);aWo=r(xrt,"TFBartModel"),xrt.forEach(t),nWo=r(swe," (BART model)"),swe.forEach(t),sWo=i(x),Gv=n(x,"LI",{});var lwe=s(Gv);Kce=n(lwe,"STRONG",{});var krt=s(Kce);lWo=r(krt,"bert"),krt.forEach(t),iWo=r(lwe," \u2014 "),hN=n(lwe,"A",{href:!0});var Rrt=s(hN);dWo=r(Rrt,"TFBertModel"),Rrt.forEach(t),cWo=r(lwe," (BERT model)"),lwe.forEach(t),fWo=i(x),Ov=n(x,"LI",{});var iwe=s(Ov);Zce=n(iwe,"STRONG",{});var Srt=s(Zce);mWo=r(Srt,"blenderbot"),Srt.forEach(t),gWo=r(iwe," \u2014 "),pN=n(iwe,"A",{href:!0});var Prt=s(pN);hWo=r(Prt,"TFBlenderbotModel"),Prt.forEach(t),pWo=r(iwe," (Blenderbot model)"),iwe.forEach(t),_Wo=i(x),Xv=n(x,"LI",{});var dwe=s(Xv);efe=n(dwe,"STRONG",{});var $rt=s(efe);uWo=r($rt,"blenderbot-small"),$rt.forEach(t),bWo=r(dwe," \u2014 "),_N=n(dwe,"A",{href:!0});var Irt=s(_N);vWo=r(Irt,"TFBlenderbotSmallModel"),Irt.forEach(t),TWo=r(dwe," (BlenderbotSmall model)"),dwe.forEach(t),FWo=i(x),Vv=n(x,"LI",{});var cwe=s(Vv);ofe=n(cwe,"STRONG",{});var Drt=s(ofe);CWo=r(Drt,"camembert"),Drt.forEach(t),MWo=r(cwe," \u2014 "),uN=n(cwe,"A",{href:!0});var jrt=s(uN);EWo=r(jrt,"TFCamembertModel"),jrt.forEach(t),yWo=r(cwe," (CamemBERT model)"),cwe.forEach(t),wWo=i(x),zv=n(x,"LI",{});var fwe=s(zv);rfe=n(fwe,"STRONG",{});var Nrt=s(rfe);AWo=r(Nrt,"clip"),Nrt.forEach(t),LWo=r(fwe," \u2014 "),bN=n(fwe,"A",{href:!0});var qrt=s(bN);BWo=r(qrt,"TFCLIPModel"),qrt.forEach(t),xWo=r(fwe," (CLIP model)"),fwe.forEach(t),kWo=i(x),Wv=n(x,"LI",{});var mwe=s(Wv);tfe=n(mwe,"STRONG",{});var Grt=s(tfe);RWo=r(Grt,"convbert"),Grt.forEach(t),SWo=r(mwe," \u2014 "),vN=n(mwe,"A",{href:!0});var Ort=s(vN);PWo=r(Ort,"TFConvBertModel"),Ort.forEach(t),$Wo=r(mwe," (ConvBERT model)"),mwe.forEach(t),IWo=i(x),Qv=n(x,"LI",{});var gwe=s(Qv);afe=n(gwe,"STRONG",{});var Xrt=s(afe);DWo=r(Xrt,"convnext"),Xrt.forEach(t),jWo=r(gwe," \u2014 "),TN=n(gwe,"A",{href:!0});var Vrt=s(TN);NWo=r(Vrt,"TFConvNextModel"),Vrt.forEach(t),qWo=r(gwe," (ConvNext model)"),gwe.forEach(t),GWo=i(x),Hv=n(x,"LI",{});var hwe=s(Hv);nfe=n(hwe,"STRONG",{});var zrt=s(nfe);OWo=r(zrt,"ctrl"),zrt.forEach(t),XWo=r(hwe," \u2014 "),FN=n(hwe,"A",{href:!0});var Wrt=s(FN);VWo=r(Wrt,"TFCTRLModel"),Wrt.forEach(t),zWo=r(hwe," (CTRL model)"),hwe.forEach(t),WWo=i(x),Uv=n(x,"LI",{});var pwe=s(Uv);sfe=n(pwe,"STRONG",{});var Qrt=s(sfe);QWo=r(Qrt,"deberta"),Qrt.forEach(t),HWo=r(pwe," \u2014 "),CN=n(pwe,"A",{href:!0});var Hrt=s(CN);UWo=r(Hrt,"TFDebertaModel"),Hrt.forEach(t),JWo=r(pwe," (DeBERTa model)"),pwe.forEach(t),YWo=i(x),Jv=n(x,"LI",{});var _we=s(Jv);lfe=n(_we,"STRONG",{});var Urt=s(lfe);KWo=r(Urt,"deberta-v2"),Urt.forEach(t),ZWo=r(_we," \u2014 "),MN=n(_we,"A",{href:!0});var Jrt=s(MN);eQo=r(Jrt,"TFDebertaV2Model"),Jrt.forEach(t),oQo=r(_we," (DeBERTa-v2 model)"),_we.forEach(t),rQo=i(x),Yv=n(x,"LI",{});var uwe=s(Yv);ife=n(uwe,"STRONG",{});var Yrt=s(ife);tQo=r(Yrt,"distilbert"),Yrt.forEach(t),aQo=r(uwe," \u2014 "),EN=n(uwe,"A",{href:!0});var Krt=s(EN);nQo=r(Krt,"TFDistilBertModel"),Krt.forEach(t),sQo=r(uwe," (DistilBERT model)"),uwe.forEach(t),lQo=i(x),Kv=n(x,"LI",{});var bwe=s(Kv);dfe=n(bwe,"STRONG",{});var Zrt=s(dfe);iQo=r(Zrt,"dpr"),Zrt.forEach(t),dQo=r(bwe," \u2014 "),yN=n(bwe,"A",{href:!0});var ett=s(yN);cQo=r(ett,"TFDPRQuestionEncoder"),ett.forEach(t),fQo=r(bwe," (DPR model)"),bwe.forEach(t),mQo=i(x),Zv=n(x,"LI",{});var vwe=s(Zv);cfe=n(vwe,"STRONG",{});var ott=s(cfe);gQo=r(ott,"electra"),ott.forEach(t),hQo=r(vwe," \u2014 "),wN=n(vwe,"A",{href:!0});var rtt=s(wN);pQo=r(rtt,"TFElectraModel"),rtt.forEach(t),_Qo=r(vwe," (ELECTRA model)"),vwe.forEach(t),uQo=i(x),eT=n(x,"LI",{});var Twe=s(eT);ffe=n(Twe,"STRONG",{});var ttt=s(ffe);bQo=r(ttt,"flaubert"),ttt.forEach(t),vQo=r(Twe," \u2014 "),AN=n(Twe,"A",{href:!0});var att=s(AN);TQo=r(att,"TFFlaubertModel"),att.forEach(t),FQo=r(Twe," (FlauBERT model)"),Twe.forEach(t),CQo=i(x),$s=n(x,"LI",{});var aL=s($s);mfe=n(aL,"STRONG",{});var ntt=s(mfe);MQo=r(ntt,"funnel"),ntt.forEach(t),EQo=r(aL," \u2014 "),LN=n(aL,"A",{href:!0});var stt=s(LN);yQo=r(stt,"TFFunnelModel"),stt.forEach(t),wQo=r(aL," or "),BN=n(aL,"A",{href:!0});var ltt=s(BN);AQo=r(ltt,"TFFunnelBaseModel"),ltt.forEach(t),LQo=r(aL," (Funnel Transformer model)"),aL.forEach(t),BQo=i(x),oT=n(x,"LI",{});var Fwe=s(oT);gfe=n(Fwe,"STRONG",{});var itt=s(gfe);xQo=r(itt,"gpt2"),itt.forEach(t),kQo=r(Fwe," \u2014 "),xN=n(Fwe,"A",{href:!0});var dtt=s(xN);RQo=r(dtt,"TFGPT2Model"),dtt.forEach(t),SQo=r(Fwe," (OpenAI GPT-2 model)"),Fwe.forEach(t),PQo=i(x),rT=n(x,"LI",{});var Cwe=s(rT);hfe=n(Cwe,"STRONG",{});var ctt=s(hfe);$Qo=r(ctt,"hubert"),ctt.forEach(t),IQo=r(Cwe," \u2014 "),kN=n(Cwe,"A",{href:!0});var ftt=s(kN);DQo=r(ftt,"TFHubertModel"),ftt.forEach(t),jQo=r(Cwe," (Hubert model)"),Cwe.forEach(t),NQo=i(x),tT=n(x,"LI",{});var Mwe=s(tT);pfe=n(Mwe,"STRONG",{});var mtt=s(pfe);qQo=r(mtt,"layoutlm"),mtt.forEach(t),GQo=r(Mwe," \u2014 "),RN=n(Mwe,"A",{href:!0});var gtt=s(RN);OQo=r(gtt,"TFLayoutLMModel"),gtt.forEach(t),XQo=r(Mwe," (LayoutLM model)"),Mwe.forEach(t),VQo=i(x),aT=n(x,"LI",{});var Ewe=s(aT);_fe=n(Ewe,"STRONG",{});var htt=s(_fe);zQo=r(htt,"led"),htt.forEach(t),WQo=r(Ewe," \u2014 "),SN=n(Ewe,"A",{href:!0});var ptt=s(SN);QQo=r(ptt,"TFLEDModel"),ptt.forEach(t),HQo=r(Ewe," (LED model)"),Ewe.forEach(t),UQo=i(x),nT=n(x,"LI",{});var ywe=s(nT);ufe=n(ywe,"STRONG",{});var _tt=s(ufe);JQo=r(_tt,"longformer"),_tt.forEach(t),YQo=r(ywe," \u2014 "),PN=n(ywe,"A",{href:!0});var utt=s(PN);KQo=r(utt,"TFLongformerModel"),utt.forEach(t),ZQo=r(ywe," (Longformer model)"),ywe.forEach(t),eHo=i(x),sT=n(x,"LI",{});var wwe=s(sT);bfe=n(wwe,"STRONG",{});var btt=s(bfe);oHo=r(btt,"lxmert"),btt.forEach(t),rHo=r(wwe," \u2014 "),$N=n(wwe,"A",{href:!0});var vtt=s($N);tHo=r(vtt,"TFLxmertModel"),vtt.forEach(t),aHo=r(wwe," (LXMERT model)"),wwe.forEach(t),nHo=i(x),lT=n(x,"LI",{});var Awe=s(lT);vfe=n(Awe,"STRONG",{});var Ttt=s(vfe);sHo=r(Ttt,"marian"),Ttt.forEach(t),lHo=r(Awe," \u2014 "),IN=n(Awe,"A",{href:!0});var Ftt=s(IN);iHo=r(Ftt,"TFMarianModel"),Ftt.forEach(t),dHo=r(Awe," (Marian model)"),Awe.forEach(t),cHo=i(x),iT=n(x,"LI",{});var Lwe=s(iT);Tfe=n(Lwe,"STRONG",{});var Ctt=s(Tfe);fHo=r(Ctt,"mbart"),Ctt.forEach(t),mHo=r(Lwe," \u2014 "),DN=n(Lwe,"A",{href:!0});var Mtt=s(DN);gHo=r(Mtt,"TFMBartModel"),Mtt.forEach(t),hHo=r(Lwe," (mBART model)"),Lwe.forEach(t),pHo=i(x),dT=n(x,"LI",{});var Bwe=s(dT);Ffe=n(Bwe,"STRONG",{});var Ett=s(Ffe);_Ho=r(Ett,"mobilebert"),Ett.forEach(t),uHo=r(Bwe," \u2014 "),jN=n(Bwe,"A",{href:!0});var ytt=s(jN);bHo=r(ytt,"TFMobileBertModel"),ytt.forEach(t),vHo=r(Bwe," (MobileBERT model)"),Bwe.forEach(t),THo=i(x),cT=n(x,"LI",{});var xwe=s(cT);Cfe=n(xwe,"STRONG",{});var wtt=s(Cfe);FHo=r(wtt,"mpnet"),wtt.forEach(t),CHo=r(xwe," \u2014 "),NN=n(xwe,"A",{href:!0});var Att=s(NN);MHo=r(Att,"TFMPNetModel"),Att.forEach(t),EHo=r(xwe," (MPNet model)"),xwe.forEach(t),yHo=i(x),fT=n(x,"LI",{});var kwe=s(fT);Mfe=n(kwe,"STRONG",{});var Ltt=s(Mfe);wHo=r(Ltt,"mt5"),Ltt.forEach(t),AHo=r(kwe," \u2014 "),qN=n(kwe,"A",{href:!0});var Btt=s(qN);LHo=r(Btt,"TFMT5Model"),Btt.forEach(t),BHo=r(kwe," (mT5 model)"),kwe.forEach(t),xHo=i(x),mT=n(x,"LI",{});var Rwe=s(mT);Efe=n(Rwe,"STRONG",{});var xtt=s(Efe);kHo=r(xtt,"openai-gpt"),xtt.forEach(t),RHo=r(Rwe," \u2014 "),GN=n(Rwe,"A",{href:!0});var ktt=s(GN);SHo=r(ktt,"TFOpenAIGPTModel"),ktt.forEach(t),PHo=r(Rwe," (OpenAI GPT model)"),Rwe.forEach(t),$Ho=i(x),gT=n(x,"LI",{});var Swe=s(gT);yfe=n(Swe,"STRONG",{});var Rtt=s(yfe);IHo=r(Rtt,"pegasus"),Rtt.forEach(t),DHo=r(Swe," \u2014 "),ON=n(Swe,"A",{href:!0});var Stt=s(ON);jHo=r(Stt,"TFPegasusModel"),Stt.forEach(t),NHo=r(Swe," (Pegasus model)"),Swe.forEach(t),qHo=i(x),hT=n(x,"LI",{});var Pwe=s(hT);wfe=n(Pwe,"STRONG",{});var Ptt=s(wfe);GHo=r(Ptt,"rembert"),Ptt.forEach(t),OHo=r(Pwe," \u2014 "),XN=n(Pwe,"A",{href:!0});var $tt=s(XN);XHo=r($tt,"TFRemBertModel"),$tt.forEach(t),VHo=r(Pwe," (RemBERT model)"),Pwe.forEach(t),zHo=i(x),pT=n(x,"LI",{});var $we=s(pT);Afe=n($we,"STRONG",{});var Itt=s(Afe);WHo=r(Itt,"roberta"),Itt.forEach(t),QHo=r($we," \u2014 "),VN=n($we,"A",{href:!0});var Dtt=s(VN);HHo=r(Dtt,"TFRobertaModel"),Dtt.forEach(t),UHo=r($we," (RoBERTa model)"),$we.forEach(t),JHo=i(x),_T=n(x,"LI",{});var Iwe=s(_T);Lfe=n(Iwe,"STRONG",{});var jtt=s(Lfe);YHo=r(jtt,"roformer"),jtt.forEach(t),KHo=r(Iwe," \u2014 "),zN=n(Iwe,"A",{href:!0});var Ntt=s(zN);ZHo=r(Ntt,"TFRoFormerModel"),Ntt.forEach(t),eUo=r(Iwe," (RoFormer model)"),Iwe.forEach(t),oUo=i(x),uT=n(x,"LI",{});var Dwe=s(uT);Bfe=n(Dwe,"STRONG",{});var qtt=s(Bfe);rUo=r(qtt,"speech_to_text"),qtt.forEach(t),tUo=r(Dwe," \u2014 "),WN=n(Dwe,"A",{href:!0});var Gtt=s(WN);aUo=r(Gtt,"TFSpeech2TextModel"),Gtt.forEach(t),nUo=r(Dwe," (Speech2Text model)"),Dwe.forEach(t),sUo=i(x),bT=n(x,"LI",{});var jwe=s(bT);xfe=n(jwe,"STRONG",{});var Ott=s(xfe);lUo=r(Ott,"t5"),Ott.forEach(t),iUo=r(jwe," \u2014 "),QN=n(jwe,"A",{href:!0});var Xtt=s(QN);dUo=r(Xtt,"TFT5Model"),Xtt.forEach(t),cUo=r(jwe," (T5 model)"),jwe.forEach(t),fUo=i(x),vT=n(x,"LI",{});var Nwe=s(vT);kfe=n(Nwe,"STRONG",{});var Vtt=s(kfe);mUo=r(Vtt,"tapas"),Vtt.forEach(t),gUo=r(Nwe," \u2014 "),HN=n(Nwe,"A",{href:!0});var ztt=s(HN);hUo=r(ztt,"TFTapasModel"),ztt.forEach(t),pUo=r(Nwe," (TAPAS model)"),Nwe.forEach(t),_Uo=i(x),TT=n(x,"LI",{});var qwe=s(TT);Rfe=n(qwe,"STRONG",{});var Wtt=s(Rfe);uUo=r(Wtt,"transfo-xl"),Wtt.forEach(t),bUo=r(qwe," \u2014 "),UN=n(qwe,"A",{href:!0});var Qtt=s(UN);vUo=r(Qtt,"TFTransfoXLModel"),Qtt.forEach(t),TUo=r(qwe," (Transformer-XL model)"),qwe.forEach(t),FUo=i(x),FT=n(x,"LI",{});var Gwe=s(FT);Sfe=n(Gwe,"STRONG",{});var Htt=s(Sfe);CUo=r(Htt,"vit"),Htt.forEach(t),MUo=r(Gwe," \u2014 "),JN=n(Gwe,"A",{href:!0});var Utt=s(JN);EUo=r(Utt,"TFViTModel"),Utt.forEach(t),yUo=r(Gwe," (ViT model)"),Gwe.forEach(t),wUo=i(x),CT=n(x,"LI",{});var Owe=s(CT);Pfe=n(Owe,"STRONG",{});var Jtt=s(Pfe);AUo=r(Jtt,"wav2vec2"),Jtt.forEach(t),LUo=r(Owe," \u2014 "),YN=n(Owe,"A",{href:!0});var Ytt=s(YN);BUo=r(Ytt,"TFWav2Vec2Model"),Ytt.forEach(t),xUo=r(Owe," (Wav2Vec2 model)"),Owe.forEach(t),kUo=i(x),MT=n(x,"LI",{});var Xwe=s(MT);$fe=n(Xwe,"STRONG",{});var Ktt=s($fe);RUo=r(Ktt,"xlm"),Ktt.forEach(t),SUo=r(Xwe," \u2014 "),KN=n(Xwe,"A",{href:!0});var Ztt=s(KN);PUo=r(Ztt,"TFXLMModel"),Ztt.forEach(t),$Uo=r(Xwe," (XLM model)"),Xwe.forEach(t),IUo=i(x),ET=n(x,"LI",{});var Vwe=s(ET);Ife=n(Vwe,"STRONG",{});var eat=s(Ife);DUo=r(eat,"xlm-roberta"),eat.forEach(t),jUo=r(Vwe," \u2014 "),ZN=n(Vwe,"A",{href:!0});var oat=s(ZN);NUo=r(oat,"TFXLMRobertaModel"),oat.forEach(t),qUo=r(Vwe," (XLM-RoBERTa model)"),Vwe.forEach(t),GUo=i(x),yT=n(x,"LI",{});var zwe=s(yT);Dfe=n(zwe,"STRONG",{});var rat=s(Dfe);OUo=r(rat,"xlnet"),rat.forEach(t),XUo=r(zwe," \u2014 "),eq=n(zwe,"A",{href:!0});var tat=s(eq);VUo=r(tat,"TFXLNetModel"),tat.forEach(t),zUo=r(zwe," (XLNet model)"),zwe.forEach(t),x.forEach(t),WUo=i(ca),jfe=n(ca,"P",{});var aat=s(jfe);QUo=r(aat,"Examples:"),aat.forEach(t),HUo=i(ca),m(ew.$$.fragment,ca),ca.forEach(t),kl.forEach(t),CBe=i(c),ac=n(c,"H2",{class:!0});var kke=s(ac);wT=n(kke,"A",{id:!0,class:!0,href:!0});var nat=s(wT);Nfe=n(nat,"SPAN",{});var sat=s(Nfe);m(ow.$$.fragment,sat),sat.forEach(t),nat.forEach(t),UUo=i(kke),qfe=n(kke,"SPAN",{});var lat=s(qfe);JUo=r(lat,"TFAutoModelForPreTraining"),lat.forEach(t),kke.forEach(t),MBe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(rw.$$.fragment,Sl),YUo=i(Sl),nc=n(Sl,"P",{});var Cz=s(nc);KUo=r(Cz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gfe=n(Cz,"CODE",{});var iat=s(Gfe);ZUo=r(iat,"from_pretrained()"),iat.forEach(t),eJo=r(Cz,"class method or the "),Ofe=n(Cz,"CODE",{});var dat=s(Ofe);oJo=r(dat,"from_config()"),dat.forEach(t),rJo=r(Cz,`class
method.`),Cz.forEach(t),tJo=i(Sl),tw=n(Sl,"P",{});var Rke=s(tw);aJo=r(Rke,"This class cannot be instantiated directly using "),Xfe=n(Rke,"CODE",{});var cat=s(Xfe);nJo=r(cat,"__init__()"),cat.forEach(t),sJo=r(Rke," (throws an error)."),Rke.forEach(t),lJo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Pl=s(dt);m(aw.$$.fragment,Pl),iJo=i(Pl),Vfe=n(Pl,"P",{});var fat=s(Vfe);dJo=r(fat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fat.forEach(t),cJo=i(Pl),sc=n(Pl,"P",{});var Mz=s(sc);fJo=r(Mz,`Note:
Loading a model from its configuration file does `),zfe=n(Mz,"STRONG",{});var mat=s(zfe);mJo=r(mat,"not"),mat.forEach(t),gJo=r(Mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=n(Mz,"CODE",{});var gat=s(Wfe);hJo=r(gat,"from_pretrained()"),gat.forEach(t),pJo=r(Mz,"to load the model weights."),Mz.forEach(t),_Jo=i(Pl),Qfe=n(Pl,"P",{});var hat=s(Qfe);uJo=r(hat,"Examples:"),hat.forEach(t),bJo=i(Pl),m(nw.$$.fragment,Pl),Pl.forEach(t),vJo=i(Sl),ho=n(Sl,"DIV",{class:!0});var fa=s(ho);m(sw.$$.fragment,fa),TJo=i(fa),Hfe=n(fa,"P",{});var pat=s(Hfe);FJo=r(pat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pat.forEach(t),CJo=i(fa),fn=n(fa,"P",{});var U4=s(fn);MJo=r(U4,"The model class to instantiate is selected based on the "),Ufe=n(U4,"CODE",{});var _at=s(Ufe);EJo=r(_at,"model_type"),_at.forEach(t),yJo=r(U4,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(U4,"CODE",{});var uat=s(Jfe);wJo=r(uat,"pretrained_model_name_or_path"),uat.forEach(t),AJo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(U4,"CODE",{});var bat=s(Yfe);LJo=r(bat,"pretrained_model_name_or_path"),bat.forEach(t),BJo=r(U4,":"),U4.forEach(t),xJo=i(fa),H=n(fa,"UL",{});var U=s(H);AT=n(U,"LI",{});var Wwe=s(AT);Kfe=n(Wwe,"STRONG",{});var vat=s(Kfe);kJo=r(vat,"albert"),vat.forEach(t),RJo=r(Wwe," \u2014 "),oq=n(Wwe,"A",{href:!0});var Tat=s(oq);SJo=r(Tat,"TFAlbertForPreTraining"),Tat.forEach(t),PJo=r(Wwe," (ALBERT model)"),Wwe.forEach(t),$Jo=i(U),LT=n(U,"LI",{});var Qwe=s(LT);Zfe=n(Qwe,"STRONG",{});var Fat=s(Zfe);IJo=r(Fat,"bart"),Fat.forEach(t),DJo=r(Qwe," \u2014 "),rq=n(Qwe,"A",{href:!0});var Cat=s(rq);jJo=r(Cat,"TFBartForConditionalGeneration"),Cat.forEach(t),NJo=r(Qwe," (BART model)"),Qwe.forEach(t),qJo=i(U),BT=n(U,"LI",{});var Hwe=s(BT);eme=n(Hwe,"STRONG",{});var Mat=s(eme);GJo=r(Mat,"bert"),Mat.forEach(t),OJo=r(Hwe," \u2014 "),tq=n(Hwe,"A",{href:!0});var Eat=s(tq);XJo=r(Eat,"TFBertForPreTraining"),Eat.forEach(t),VJo=r(Hwe," (BERT model)"),Hwe.forEach(t),zJo=i(U),xT=n(U,"LI",{});var Uwe=s(xT);ome=n(Uwe,"STRONG",{});var yat=s(ome);WJo=r(yat,"camembert"),yat.forEach(t),QJo=r(Uwe," \u2014 "),aq=n(Uwe,"A",{href:!0});var wat=s(aq);HJo=r(wat,"TFCamembertForMaskedLM"),wat.forEach(t),UJo=r(Uwe," (CamemBERT model)"),Uwe.forEach(t),JJo=i(U),kT=n(U,"LI",{});var Jwe=s(kT);rme=n(Jwe,"STRONG",{});var Aat=s(rme);YJo=r(Aat,"ctrl"),Aat.forEach(t),KJo=r(Jwe," \u2014 "),nq=n(Jwe,"A",{href:!0});var Lat=s(nq);ZJo=r(Lat,"TFCTRLLMHeadModel"),Lat.forEach(t),eYo=r(Jwe," (CTRL model)"),Jwe.forEach(t),oYo=i(U),RT=n(U,"LI",{});var Ywe=s(RT);tme=n(Ywe,"STRONG",{});var Bat=s(tme);rYo=r(Bat,"distilbert"),Bat.forEach(t),tYo=r(Ywe," \u2014 "),sq=n(Ywe,"A",{href:!0});var xat=s(sq);aYo=r(xat,"TFDistilBertForMaskedLM"),xat.forEach(t),nYo=r(Ywe," (DistilBERT model)"),Ywe.forEach(t),sYo=i(U),ST=n(U,"LI",{});var Kwe=s(ST);ame=n(Kwe,"STRONG",{});var kat=s(ame);lYo=r(kat,"electra"),kat.forEach(t),iYo=r(Kwe," \u2014 "),lq=n(Kwe,"A",{href:!0});var Rat=s(lq);dYo=r(Rat,"TFElectraForPreTraining"),Rat.forEach(t),cYo=r(Kwe," (ELECTRA model)"),Kwe.forEach(t),fYo=i(U),PT=n(U,"LI",{});var Zwe=s(PT);nme=n(Zwe,"STRONG",{});var Sat=s(nme);mYo=r(Sat,"flaubert"),Sat.forEach(t),gYo=r(Zwe," \u2014 "),iq=n(Zwe,"A",{href:!0});var Pat=s(iq);hYo=r(Pat,"TFFlaubertWithLMHeadModel"),Pat.forEach(t),pYo=r(Zwe," (FlauBERT model)"),Zwe.forEach(t),_Yo=i(U),$T=n(U,"LI",{});var e6e=s($T);sme=n(e6e,"STRONG",{});var $at=s(sme);uYo=r($at,"funnel"),$at.forEach(t),bYo=r(e6e," \u2014 "),dq=n(e6e,"A",{href:!0});var Iat=s(dq);vYo=r(Iat,"TFFunnelForPreTraining"),Iat.forEach(t),TYo=r(e6e," (Funnel Transformer model)"),e6e.forEach(t),FYo=i(U),IT=n(U,"LI",{});var o6e=s(IT);lme=n(o6e,"STRONG",{});var Dat=s(lme);CYo=r(Dat,"gpt2"),Dat.forEach(t),MYo=r(o6e," \u2014 "),cq=n(o6e,"A",{href:!0});var jat=s(cq);EYo=r(jat,"TFGPT2LMHeadModel"),jat.forEach(t),yYo=r(o6e," (OpenAI GPT-2 model)"),o6e.forEach(t),wYo=i(U),DT=n(U,"LI",{});var r6e=s(DT);ime=n(r6e,"STRONG",{});var Nat=s(ime);AYo=r(Nat,"layoutlm"),Nat.forEach(t),LYo=r(r6e," \u2014 "),fq=n(r6e,"A",{href:!0});var qat=s(fq);BYo=r(qat,"TFLayoutLMForMaskedLM"),qat.forEach(t),xYo=r(r6e," (LayoutLM model)"),r6e.forEach(t),kYo=i(U),jT=n(U,"LI",{});var t6e=s(jT);dme=n(t6e,"STRONG",{});var Gat=s(dme);RYo=r(Gat,"lxmert"),Gat.forEach(t),SYo=r(t6e," \u2014 "),mq=n(t6e,"A",{href:!0});var Oat=s(mq);PYo=r(Oat,"TFLxmertForPreTraining"),Oat.forEach(t),$Yo=r(t6e," (LXMERT model)"),t6e.forEach(t),IYo=i(U),NT=n(U,"LI",{});var a6e=s(NT);cme=n(a6e,"STRONG",{});var Xat=s(cme);DYo=r(Xat,"mobilebert"),Xat.forEach(t),jYo=r(a6e," \u2014 "),gq=n(a6e,"A",{href:!0});var Vat=s(gq);NYo=r(Vat,"TFMobileBertForPreTraining"),Vat.forEach(t),qYo=r(a6e," (MobileBERT model)"),a6e.forEach(t),GYo=i(U),qT=n(U,"LI",{});var n6e=s(qT);fme=n(n6e,"STRONG",{});var zat=s(fme);OYo=r(zat,"mpnet"),zat.forEach(t),XYo=r(n6e," \u2014 "),hq=n(n6e,"A",{href:!0});var Wat=s(hq);VYo=r(Wat,"TFMPNetForMaskedLM"),Wat.forEach(t),zYo=r(n6e," (MPNet model)"),n6e.forEach(t),WYo=i(U),GT=n(U,"LI",{});var s6e=s(GT);mme=n(s6e,"STRONG",{});var Qat=s(mme);QYo=r(Qat,"openai-gpt"),Qat.forEach(t),HYo=r(s6e," \u2014 "),pq=n(s6e,"A",{href:!0});var Hat=s(pq);UYo=r(Hat,"TFOpenAIGPTLMHeadModel"),Hat.forEach(t),JYo=r(s6e," (OpenAI GPT model)"),s6e.forEach(t),YYo=i(U),OT=n(U,"LI",{});var l6e=s(OT);gme=n(l6e,"STRONG",{});var Uat=s(gme);KYo=r(Uat,"roberta"),Uat.forEach(t),ZYo=r(l6e," \u2014 "),_q=n(l6e,"A",{href:!0});var Jat=s(_q);eKo=r(Jat,"TFRobertaForMaskedLM"),Jat.forEach(t),oKo=r(l6e," (RoBERTa model)"),l6e.forEach(t),rKo=i(U),XT=n(U,"LI",{});var i6e=s(XT);hme=n(i6e,"STRONG",{});var Yat=s(hme);tKo=r(Yat,"t5"),Yat.forEach(t),aKo=r(i6e," \u2014 "),uq=n(i6e,"A",{href:!0});var Kat=s(uq);nKo=r(Kat,"TFT5ForConditionalGeneration"),Kat.forEach(t),sKo=r(i6e," (T5 model)"),i6e.forEach(t),lKo=i(U),VT=n(U,"LI",{});var d6e=s(VT);pme=n(d6e,"STRONG",{});var Zat=s(pme);iKo=r(Zat,"tapas"),Zat.forEach(t),dKo=r(d6e," \u2014 "),bq=n(d6e,"A",{href:!0});var ent=s(bq);cKo=r(ent,"TFTapasForMaskedLM"),ent.forEach(t),fKo=r(d6e," (TAPAS model)"),d6e.forEach(t),mKo=i(U),zT=n(U,"LI",{});var c6e=s(zT);_me=n(c6e,"STRONG",{});var ont=s(_me);gKo=r(ont,"transfo-xl"),ont.forEach(t),hKo=r(c6e," \u2014 "),vq=n(c6e,"A",{href:!0});var rnt=s(vq);pKo=r(rnt,"TFTransfoXLLMHeadModel"),rnt.forEach(t),_Ko=r(c6e," (Transformer-XL model)"),c6e.forEach(t),uKo=i(U),WT=n(U,"LI",{});var f6e=s(WT);ume=n(f6e,"STRONG",{});var tnt=s(ume);bKo=r(tnt,"xlm"),tnt.forEach(t),vKo=r(f6e," \u2014 "),Tq=n(f6e,"A",{href:!0});var ant=s(Tq);TKo=r(ant,"TFXLMWithLMHeadModel"),ant.forEach(t),FKo=r(f6e," (XLM model)"),f6e.forEach(t),CKo=i(U),QT=n(U,"LI",{});var m6e=s(QT);bme=n(m6e,"STRONG",{});var nnt=s(bme);MKo=r(nnt,"xlm-roberta"),nnt.forEach(t),EKo=r(m6e," \u2014 "),Fq=n(m6e,"A",{href:!0});var snt=s(Fq);yKo=r(snt,"TFXLMRobertaForMaskedLM"),snt.forEach(t),wKo=r(m6e," (XLM-RoBERTa model)"),m6e.forEach(t),AKo=i(U),HT=n(U,"LI",{});var g6e=s(HT);vme=n(g6e,"STRONG",{});var lnt=s(vme);LKo=r(lnt,"xlnet"),lnt.forEach(t),BKo=r(g6e," \u2014 "),Cq=n(g6e,"A",{href:!0});var int=s(Cq);xKo=r(int,"TFXLNetLMHeadModel"),int.forEach(t),kKo=r(g6e," (XLNet model)"),g6e.forEach(t),U.forEach(t),RKo=i(fa),Tme=n(fa,"P",{});var dnt=s(Tme);SKo=r(dnt,"Examples:"),dnt.forEach(t),PKo=i(fa),m(lw.$$.fragment,fa),fa.forEach(t),Sl.forEach(t),EBe=i(c),lc=n(c,"H2",{class:!0});var Ske=s(lc);UT=n(Ske,"A",{id:!0,class:!0,href:!0});var cnt=s(UT);Fme=n(cnt,"SPAN",{});var fnt=s(Fme);m(iw.$$.fragment,fnt),fnt.forEach(t),cnt.forEach(t),$Ko=i(Ske),Cme=n(Ske,"SPAN",{});var mnt=s(Cme);IKo=r(mnt,"TFAutoModelForCausalLM"),mnt.forEach(t),Ske.forEach(t),yBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(dw.$$.fragment,$l),DKo=i($l),ic=n($l,"P",{});var Ez=s(ic);jKo=r(Ez,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mme=n(Ez,"CODE",{});var gnt=s(Mme);NKo=r(gnt,"from_pretrained()"),gnt.forEach(t),qKo=r(Ez,"class method or the "),Eme=n(Ez,"CODE",{});var hnt=s(Eme);GKo=r(hnt,"from_config()"),hnt.forEach(t),OKo=r(Ez,`class
method.`),Ez.forEach(t),XKo=i($l),cw=n($l,"P",{});var Pke=s(cw);VKo=r(Pke,"This class cannot be instantiated directly using "),yme=n(Pke,"CODE",{});var pnt=s(yme);zKo=r(pnt,"__init__()"),pnt.forEach(t),WKo=r(Pke," (throws an error)."),Pke.forEach(t),QKo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(fw.$$.fragment,Il),HKo=i(Il),wme=n(Il,"P",{});var _nt=s(wme);UKo=r(_nt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_nt.forEach(t),JKo=i(Il),dc=n(Il,"P",{});var yz=s(dc);YKo=r(yz,`Note:
Loading a model from its configuration file does `),Ame=n(yz,"STRONG",{});var unt=s(Ame);KKo=r(unt,"not"),unt.forEach(t),ZKo=r(yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lme=n(yz,"CODE",{});var bnt=s(Lme);eZo=r(bnt,"from_pretrained()"),bnt.forEach(t),oZo=r(yz,"to load the model weights."),yz.forEach(t),rZo=i(Il),Bme=n(Il,"P",{});var vnt=s(Bme);tZo=r(vnt,"Examples:"),vnt.forEach(t),aZo=i(Il),m(mw.$$.fragment,Il),Il.forEach(t),nZo=i($l),po=n($l,"DIV",{class:!0});var ma=s(po);m(gw.$$.fragment,ma),sZo=i(ma),xme=n(ma,"P",{});var Tnt=s(xme);lZo=r(Tnt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tnt.forEach(t),iZo=i(ma),mn=n(ma,"P",{});var J4=s(mn);dZo=r(J4,"The model class to instantiate is selected based on the "),kme=n(J4,"CODE",{});var Fnt=s(kme);cZo=r(Fnt,"model_type"),Fnt.forEach(t),fZo=r(J4,` property of the config object (either
passed as an argument or loaded from `),Rme=n(J4,"CODE",{});var Cnt=s(Rme);mZo=r(Cnt,"pretrained_model_name_or_path"),Cnt.forEach(t),gZo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=n(J4,"CODE",{});var Mnt=s(Sme);hZo=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),pZo=r(J4,":"),J4.forEach(t),_Zo=i(ma),he=n(ma,"UL",{});var Me=s(he);JT=n(Me,"LI",{});var h6e=s(JT);Pme=n(h6e,"STRONG",{});var Ent=s(Pme);uZo=r(Ent,"bert"),Ent.forEach(t),bZo=r(h6e," \u2014 "),Mq=n(h6e,"A",{href:!0});var ynt=s(Mq);vZo=r(ynt,"TFBertLMHeadModel"),ynt.forEach(t),TZo=r(h6e," (BERT model)"),h6e.forEach(t),FZo=i(Me),YT=n(Me,"LI",{});var p6e=s(YT);$me=n(p6e,"STRONG",{});var wnt=s($me);CZo=r(wnt,"ctrl"),wnt.forEach(t),MZo=r(p6e," \u2014 "),Eq=n(p6e,"A",{href:!0});var Ant=s(Eq);EZo=r(Ant,"TFCTRLLMHeadModel"),Ant.forEach(t),yZo=r(p6e," (CTRL model)"),p6e.forEach(t),wZo=i(Me),KT=n(Me,"LI",{});var _6e=s(KT);Ime=n(_6e,"STRONG",{});var Lnt=s(Ime);AZo=r(Lnt,"gpt2"),Lnt.forEach(t),LZo=r(_6e," \u2014 "),yq=n(_6e,"A",{href:!0});var Bnt=s(yq);BZo=r(Bnt,"TFGPT2LMHeadModel"),Bnt.forEach(t),xZo=r(_6e," (OpenAI GPT-2 model)"),_6e.forEach(t),kZo=i(Me),ZT=n(Me,"LI",{});var u6e=s(ZT);Dme=n(u6e,"STRONG",{});var xnt=s(Dme);RZo=r(xnt,"openai-gpt"),xnt.forEach(t),SZo=r(u6e," \u2014 "),wq=n(u6e,"A",{href:!0});var knt=s(wq);PZo=r(knt,"TFOpenAIGPTLMHeadModel"),knt.forEach(t),$Zo=r(u6e," (OpenAI GPT model)"),u6e.forEach(t),IZo=i(Me),e7=n(Me,"LI",{});var b6e=s(e7);jme=n(b6e,"STRONG",{});var Rnt=s(jme);DZo=r(Rnt,"rembert"),Rnt.forEach(t),jZo=r(b6e," \u2014 "),Aq=n(b6e,"A",{href:!0});var Snt=s(Aq);NZo=r(Snt,"TFRemBertForCausalLM"),Snt.forEach(t),qZo=r(b6e," (RemBERT model)"),b6e.forEach(t),GZo=i(Me),o7=n(Me,"LI",{});var v6e=s(o7);Nme=n(v6e,"STRONG",{});var Pnt=s(Nme);OZo=r(Pnt,"roberta"),Pnt.forEach(t),XZo=r(v6e," \u2014 "),Lq=n(v6e,"A",{href:!0});var $nt=s(Lq);VZo=r($nt,"TFRobertaForCausalLM"),$nt.forEach(t),zZo=r(v6e," (RoBERTa model)"),v6e.forEach(t),WZo=i(Me),r7=n(Me,"LI",{});var T6e=s(r7);qme=n(T6e,"STRONG",{});var Int=s(qme);QZo=r(Int,"roformer"),Int.forEach(t),HZo=r(T6e," \u2014 "),Bq=n(T6e,"A",{href:!0});var Dnt=s(Bq);UZo=r(Dnt,"TFRoFormerForCausalLM"),Dnt.forEach(t),JZo=r(T6e," (RoFormer model)"),T6e.forEach(t),YZo=i(Me),t7=n(Me,"LI",{});var F6e=s(t7);Gme=n(F6e,"STRONG",{});var jnt=s(Gme);KZo=r(jnt,"transfo-xl"),jnt.forEach(t),ZZo=r(F6e," \u2014 "),xq=n(F6e,"A",{href:!0});var Nnt=s(xq);eer=r(Nnt,"TFTransfoXLLMHeadModel"),Nnt.forEach(t),oer=r(F6e," (Transformer-XL model)"),F6e.forEach(t),rer=i(Me),a7=n(Me,"LI",{});var C6e=s(a7);Ome=n(C6e,"STRONG",{});var qnt=s(Ome);ter=r(qnt,"xlm"),qnt.forEach(t),aer=r(C6e," \u2014 "),kq=n(C6e,"A",{href:!0});var Gnt=s(kq);ner=r(Gnt,"TFXLMWithLMHeadModel"),Gnt.forEach(t),ser=r(C6e," (XLM model)"),C6e.forEach(t),ler=i(Me),n7=n(Me,"LI",{});var M6e=s(n7);Xme=n(M6e,"STRONG",{});var Ont=s(Xme);ier=r(Ont,"xlnet"),Ont.forEach(t),der=r(M6e," \u2014 "),Rq=n(M6e,"A",{href:!0});var Xnt=s(Rq);cer=r(Xnt,"TFXLNetLMHeadModel"),Xnt.forEach(t),fer=r(M6e," (XLNet model)"),M6e.forEach(t),Me.forEach(t),mer=i(ma),Vme=n(ma,"P",{});var Vnt=s(Vme);ger=r(Vnt,"Examples:"),Vnt.forEach(t),her=i(ma),m(hw.$$.fragment,ma),ma.forEach(t),$l.forEach(t),wBe=i(c),cc=n(c,"H2",{class:!0});var $ke=s(cc);s7=n($ke,"A",{id:!0,class:!0,href:!0});var znt=s(s7);zme=n(znt,"SPAN",{});var Wnt=s(zme);m(pw.$$.fragment,Wnt),Wnt.forEach(t),znt.forEach(t),per=i($ke),Wme=n($ke,"SPAN",{});var Qnt=s(Wme);_er=r(Qnt,"TFAutoModelForImageClassification"),Qnt.forEach(t),$ke.forEach(t),ABe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(_w.$$.fragment,Dl),uer=i(Dl),fc=n(Dl,"P",{});var wz=s(fc);ber=r(wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Qme=n(wz,"CODE",{});var Hnt=s(Qme);ver=r(Hnt,"from_pretrained()"),Hnt.forEach(t),Ter=r(wz,"class method or the "),Hme=n(wz,"CODE",{});var Unt=s(Hme);Fer=r(Unt,"from_config()"),Unt.forEach(t),Cer=r(wz,`class
method.`),wz.forEach(t),Mer=i(Dl),uw=n(Dl,"P",{});var Ike=s(uw);Eer=r(Ike,"This class cannot be instantiated directly using "),Ume=n(Ike,"CODE",{});var Jnt=s(Ume);yer=r(Jnt,"__init__()"),Jnt.forEach(t),wer=r(Ike," (throws an error)."),Ike.forEach(t),Aer=i(Dl),ft=n(Dl,"DIV",{class:!0});var jl=s(ft);m(bw.$$.fragment,jl),Ler=i(jl),Jme=n(jl,"P",{});var Ynt=s(Jme);Ber=r(Ynt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ynt.forEach(t),xer=i(jl),mc=n(jl,"P",{});var Az=s(mc);ker=r(Az,`Note:
Loading a model from its configuration file does `),Yme=n(Az,"STRONG",{});var Knt=s(Yme);Rer=r(Knt,"not"),Knt.forEach(t),Ser=r(Az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kme=n(Az,"CODE",{});var Znt=s(Kme);Per=r(Znt,"from_pretrained()"),Znt.forEach(t),$er=r(Az,"to load the model weights."),Az.forEach(t),Ier=i(jl),Zme=n(jl,"P",{});var est=s(Zme);Der=r(est,"Examples:"),est.forEach(t),jer=i(jl),m(vw.$$.fragment,jl),jl.forEach(t),Ner=i(Dl),_o=n(Dl,"DIV",{class:!0});var ga=s(_o);m(Tw.$$.fragment,ga),qer=i(ga),ege=n(ga,"P",{});var ost=s(ege);Ger=r(ost,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ost.forEach(t),Oer=i(ga),gn=n(ga,"P",{});var Y4=s(gn);Xer=r(Y4,"The model class to instantiate is selected based on the "),oge=n(Y4,"CODE",{});var rst=s(oge);Ver=r(rst,"model_type"),rst.forEach(t),zer=r(Y4,` property of the config object (either
passed as an argument or loaded from `),rge=n(Y4,"CODE",{});var tst=s(rge);Wer=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),Qer=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(Y4,"CODE",{});var ast=s(tge);Her=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),Uer=r(Y4,":"),Y4.forEach(t),Jer=i(ga),Fw=n(ga,"UL",{});var Dke=s(Fw);l7=n(Dke,"LI",{});var E6e=s(l7);age=n(E6e,"STRONG",{});var nst=s(age);Yer=r(nst,"convnext"),nst.forEach(t),Ker=r(E6e," \u2014 "),Sq=n(E6e,"A",{href:!0});var sst=s(Sq);Zer=r(sst,"TFConvNextForImageClassification"),sst.forEach(t),eor=r(E6e," (ConvNext model)"),E6e.forEach(t),oor=i(Dke),i7=n(Dke,"LI",{});var y6e=s(i7);nge=n(y6e,"STRONG",{});var lst=s(nge);ror=r(lst,"vit"),lst.forEach(t),tor=r(y6e," \u2014 "),Pq=n(y6e,"A",{href:!0});var ist=s(Pq);aor=r(ist,"TFViTForImageClassification"),ist.forEach(t),nor=r(y6e," (ViT model)"),y6e.forEach(t),Dke.forEach(t),sor=i(ga),sge=n(ga,"P",{});var dst=s(sge);lor=r(dst,"Examples:"),dst.forEach(t),ior=i(ga),m(Cw.$$.fragment,ga),ga.forEach(t),Dl.forEach(t),LBe=i(c),gc=n(c,"H2",{class:!0});var jke=s(gc);d7=n(jke,"A",{id:!0,class:!0,href:!0});var cst=s(d7);lge=n(cst,"SPAN",{});var fst=s(lge);m(Mw.$$.fragment,fst),fst.forEach(t),cst.forEach(t),dor=i(jke),ige=n(jke,"SPAN",{});var mst=s(ige);cor=r(mst,"TFAutoModelForMaskedLM"),mst.forEach(t),jke.forEach(t),BBe=i(c),vr=n(c,"DIV",{class:!0});var Nl=s(vr);m(Ew.$$.fragment,Nl),mor=i(Nl),hc=n(Nl,"P",{});var Lz=s(hc);gor=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dge=n(Lz,"CODE",{});var gst=s(dge);hor=r(gst,"from_pretrained()"),gst.forEach(t),por=r(Lz,"class method or the "),cge=n(Lz,"CODE",{});var hst=s(cge);_or=r(hst,"from_config()"),hst.forEach(t),uor=r(Lz,`class
method.`),Lz.forEach(t),bor=i(Nl),yw=n(Nl,"P",{});var Nke=s(yw);vor=r(Nke,"This class cannot be instantiated directly using "),fge=n(Nke,"CODE",{});var pst=s(fge);Tor=r(pst,"__init__()"),pst.forEach(t),For=r(Nke," (throws an error)."),Nke.forEach(t),Cor=i(Nl),mt=n(Nl,"DIV",{class:!0});var ql=s(mt);m(ww.$$.fragment,ql),Mor=i(ql),mge=n(ql,"P",{});var _st=s(mge);Eor=r(_st,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_st.forEach(t),yor=i(ql),pc=n(ql,"P",{});var Bz=s(pc);wor=r(Bz,`Note:
Loading a model from its configuration file does `),gge=n(Bz,"STRONG",{});var ust=s(gge);Aor=r(ust,"not"),ust.forEach(t),Lor=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),hge=n(Bz,"CODE",{});var bst=s(hge);Bor=r(bst,"from_pretrained()"),bst.forEach(t),xor=r(Bz,"to load the model weights."),Bz.forEach(t),kor=i(ql),pge=n(ql,"P",{});var vst=s(pge);Ror=r(vst,"Examples:"),vst.forEach(t),Sor=i(ql),m(Aw.$$.fragment,ql),ql.forEach(t),Por=i(Nl),uo=n(Nl,"DIV",{class:!0});var ha=s(uo);m(Lw.$$.fragment,ha),$or=i(ha),_ge=n(ha,"P",{});var Tst=s(_ge);Ior=r(Tst,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tst.forEach(t),Dor=i(ha),hn=n(ha,"P",{});var K4=s(hn);jor=r(K4,"The model class to instantiate is selected based on the "),uge=n(K4,"CODE",{});var Fst=s(uge);Nor=r(Fst,"model_type"),Fst.forEach(t),qor=r(K4,` property of the config object (either
passed as an argument or loaded from `),bge=n(K4,"CODE",{});var Cst=s(bge);Gor=r(Cst,"pretrained_model_name_or_path"),Cst.forEach(t),Oor=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=n(K4,"CODE",{});var Mst=s(vge);Xor=r(Mst,"pretrained_model_name_or_path"),Mst.forEach(t),Vor=r(K4,":"),K4.forEach(t),zor=i(ha),Y=n(ha,"UL",{});var ee=s(Y);c7=n(ee,"LI",{});var w6e=s(c7);Tge=n(w6e,"STRONG",{});var Est=s(Tge);Wor=r(Est,"albert"),Est.forEach(t),Qor=r(w6e," \u2014 "),$q=n(w6e,"A",{href:!0});var yst=s($q);Hor=r(yst,"TFAlbertForMaskedLM"),yst.forEach(t),Uor=r(w6e," (ALBERT model)"),w6e.forEach(t),Jor=i(ee),f7=n(ee,"LI",{});var A6e=s(f7);Fge=n(A6e,"STRONG",{});var wst=s(Fge);Yor=r(wst,"bert"),wst.forEach(t),Kor=r(A6e," \u2014 "),Iq=n(A6e,"A",{href:!0});var Ast=s(Iq);Zor=r(Ast,"TFBertForMaskedLM"),Ast.forEach(t),err=r(A6e," (BERT model)"),A6e.forEach(t),orr=i(ee),m7=n(ee,"LI",{});var L6e=s(m7);Cge=n(L6e,"STRONG",{});var Lst=s(Cge);rrr=r(Lst,"camembert"),Lst.forEach(t),trr=r(L6e," \u2014 "),Dq=n(L6e,"A",{href:!0});var Bst=s(Dq);arr=r(Bst,"TFCamembertForMaskedLM"),Bst.forEach(t),nrr=r(L6e," (CamemBERT model)"),L6e.forEach(t),srr=i(ee),g7=n(ee,"LI",{});var B6e=s(g7);Mge=n(B6e,"STRONG",{});var xst=s(Mge);lrr=r(xst,"convbert"),xst.forEach(t),irr=r(B6e," \u2014 "),jq=n(B6e,"A",{href:!0});var kst=s(jq);drr=r(kst,"TFConvBertForMaskedLM"),kst.forEach(t),crr=r(B6e," (ConvBERT model)"),B6e.forEach(t),frr=i(ee),h7=n(ee,"LI",{});var x6e=s(h7);Ege=n(x6e,"STRONG",{});var Rst=s(Ege);mrr=r(Rst,"deberta"),Rst.forEach(t),grr=r(x6e," \u2014 "),Nq=n(x6e,"A",{href:!0});var Sst=s(Nq);hrr=r(Sst,"TFDebertaForMaskedLM"),Sst.forEach(t),prr=r(x6e," (DeBERTa model)"),x6e.forEach(t),_rr=i(ee),p7=n(ee,"LI",{});var k6e=s(p7);yge=n(k6e,"STRONG",{});var Pst=s(yge);urr=r(Pst,"deberta-v2"),Pst.forEach(t),brr=r(k6e," \u2014 "),qq=n(k6e,"A",{href:!0});var $st=s(qq);vrr=r($st,"TFDebertaV2ForMaskedLM"),$st.forEach(t),Trr=r(k6e," (DeBERTa-v2 model)"),k6e.forEach(t),Frr=i(ee),_7=n(ee,"LI",{});var R6e=s(_7);wge=n(R6e,"STRONG",{});var Ist=s(wge);Crr=r(Ist,"distilbert"),Ist.forEach(t),Mrr=r(R6e," \u2014 "),Gq=n(R6e,"A",{href:!0});var Dst=s(Gq);Err=r(Dst,"TFDistilBertForMaskedLM"),Dst.forEach(t),yrr=r(R6e," (DistilBERT model)"),R6e.forEach(t),wrr=i(ee),u7=n(ee,"LI",{});var S6e=s(u7);Age=n(S6e,"STRONG",{});var jst=s(Age);Arr=r(jst,"electra"),jst.forEach(t),Lrr=r(S6e," \u2014 "),Oq=n(S6e,"A",{href:!0});var Nst=s(Oq);Brr=r(Nst,"TFElectraForMaskedLM"),Nst.forEach(t),xrr=r(S6e," (ELECTRA model)"),S6e.forEach(t),krr=i(ee),b7=n(ee,"LI",{});var P6e=s(b7);Lge=n(P6e,"STRONG",{});var qst=s(Lge);Rrr=r(qst,"flaubert"),qst.forEach(t),Srr=r(P6e," \u2014 "),Xq=n(P6e,"A",{href:!0});var Gst=s(Xq);Prr=r(Gst,"TFFlaubertWithLMHeadModel"),Gst.forEach(t),$rr=r(P6e," (FlauBERT model)"),P6e.forEach(t),Irr=i(ee),v7=n(ee,"LI",{});var $6e=s(v7);Bge=n($6e,"STRONG",{});var Ost=s(Bge);Drr=r(Ost,"funnel"),Ost.forEach(t),jrr=r($6e," \u2014 "),Vq=n($6e,"A",{href:!0});var Xst=s(Vq);Nrr=r(Xst,"TFFunnelForMaskedLM"),Xst.forEach(t),qrr=r($6e," (Funnel Transformer model)"),$6e.forEach(t),Grr=i(ee),T7=n(ee,"LI",{});var I6e=s(T7);xge=n(I6e,"STRONG",{});var Vst=s(xge);Orr=r(Vst,"layoutlm"),Vst.forEach(t),Xrr=r(I6e," \u2014 "),zq=n(I6e,"A",{href:!0});var zst=s(zq);Vrr=r(zst,"TFLayoutLMForMaskedLM"),zst.forEach(t),zrr=r(I6e," (LayoutLM model)"),I6e.forEach(t),Wrr=i(ee),F7=n(ee,"LI",{});var D6e=s(F7);kge=n(D6e,"STRONG",{});var Wst=s(kge);Qrr=r(Wst,"longformer"),Wst.forEach(t),Hrr=r(D6e," \u2014 "),Wq=n(D6e,"A",{href:!0});var Qst=s(Wq);Urr=r(Qst,"TFLongformerForMaskedLM"),Qst.forEach(t),Jrr=r(D6e," (Longformer model)"),D6e.forEach(t),Yrr=i(ee),C7=n(ee,"LI",{});var j6e=s(C7);Rge=n(j6e,"STRONG",{});var Hst=s(Rge);Krr=r(Hst,"mobilebert"),Hst.forEach(t),Zrr=r(j6e," \u2014 "),Qq=n(j6e,"A",{href:!0});var Ust=s(Qq);etr=r(Ust,"TFMobileBertForMaskedLM"),Ust.forEach(t),otr=r(j6e," (MobileBERT model)"),j6e.forEach(t),rtr=i(ee),M7=n(ee,"LI",{});var N6e=s(M7);Sge=n(N6e,"STRONG",{});var Jst=s(Sge);ttr=r(Jst,"mpnet"),Jst.forEach(t),atr=r(N6e," \u2014 "),Hq=n(N6e,"A",{href:!0});var Yst=s(Hq);ntr=r(Yst,"TFMPNetForMaskedLM"),Yst.forEach(t),str=r(N6e," (MPNet model)"),N6e.forEach(t),ltr=i(ee),E7=n(ee,"LI",{});var q6e=s(E7);Pge=n(q6e,"STRONG",{});var Kst=s(Pge);itr=r(Kst,"rembert"),Kst.forEach(t),dtr=r(q6e," \u2014 "),Uq=n(q6e,"A",{href:!0});var Zst=s(Uq);ctr=r(Zst,"TFRemBertForMaskedLM"),Zst.forEach(t),ftr=r(q6e," (RemBERT model)"),q6e.forEach(t),mtr=i(ee),y7=n(ee,"LI",{});var G6e=s(y7);$ge=n(G6e,"STRONG",{});var elt=s($ge);gtr=r(elt,"roberta"),elt.forEach(t),htr=r(G6e," \u2014 "),Jq=n(G6e,"A",{href:!0});var olt=s(Jq);ptr=r(olt,"TFRobertaForMaskedLM"),olt.forEach(t),_tr=r(G6e," (RoBERTa model)"),G6e.forEach(t),utr=i(ee),w7=n(ee,"LI",{});var O6e=s(w7);Ige=n(O6e,"STRONG",{});var rlt=s(Ige);btr=r(rlt,"roformer"),rlt.forEach(t),vtr=r(O6e," \u2014 "),Yq=n(O6e,"A",{href:!0});var tlt=s(Yq);Ttr=r(tlt,"TFRoFormerForMaskedLM"),tlt.forEach(t),Ftr=r(O6e," (RoFormer model)"),O6e.forEach(t),Ctr=i(ee),A7=n(ee,"LI",{});var X6e=s(A7);Dge=n(X6e,"STRONG",{});var alt=s(Dge);Mtr=r(alt,"tapas"),alt.forEach(t),Etr=r(X6e," \u2014 "),Kq=n(X6e,"A",{href:!0});var nlt=s(Kq);ytr=r(nlt,"TFTapasForMaskedLM"),nlt.forEach(t),wtr=r(X6e," (TAPAS model)"),X6e.forEach(t),Atr=i(ee),L7=n(ee,"LI",{});var V6e=s(L7);jge=n(V6e,"STRONG",{});var slt=s(jge);Ltr=r(slt,"xlm"),slt.forEach(t),Btr=r(V6e," \u2014 "),Zq=n(V6e,"A",{href:!0});var llt=s(Zq);xtr=r(llt,"TFXLMWithLMHeadModel"),llt.forEach(t),ktr=r(V6e," (XLM model)"),V6e.forEach(t),Rtr=i(ee),B7=n(ee,"LI",{});var z6e=s(B7);Nge=n(z6e,"STRONG",{});var ilt=s(Nge);Str=r(ilt,"xlm-roberta"),ilt.forEach(t),Ptr=r(z6e," \u2014 "),eG=n(z6e,"A",{href:!0});var dlt=s(eG);$tr=r(dlt,"TFXLMRobertaForMaskedLM"),dlt.forEach(t),Itr=r(z6e," (XLM-RoBERTa model)"),z6e.forEach(t),ee.forEach(t),Dtr=i(ha),qge=n(ha,"P",{});var clt=s(qge);jtr=r(clt,"Examples:"),clt.forEach(t),Ntr=i(ha),m(Bw.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),xBe=i(c),_c=n(c,"H2",{class:!0});var qke=s(_c);x7=n(qke,"A",{id:!0,class:!0,href:!0});var flt=s(x7);Gge=n(flt,"SPAN",{});var mlt=s(Gge);m(xw.$$.fragment,mlt),mlt.forEach(t),flt.forEach(t),qtr=i(qke),Oge=n(qke,"SPAN",{});var glt=s(Oge);Gtr=r(glt,"TFAutoModelForSeq2SeqLM"),glt.forEach(t),qke.forEach(t),kBe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(kw.$$.fragment,Gl),Otr=i(Gl),uc=n(Gl,"P",{});var xz=s(uc);Xtr=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xge=n(xz,"CODE",{});var hlt=s(Xge);Vtr=r(hlt,"from_pretrained()"),hlt.forEach(t),ztr=r(xz,"class method or the "),Vge=n(xz,"CODE",{});var plt=s(Vge);Wtr=r(plt,"from_config()"),plt.forEach(t),Qtr=r(xz,`class
method.`),xz.forEach(t),Htr=i(Gl),Rw=n(Gl,"P",{});var Gke=s(Rw);Utr=r(Gke,"This class cannot be instantiated directly using "),zge=n(Gke,"CODE",{});var _lt=s(zge);Jtr=r(_lt,"__init__()"),_lt.forEach(t),Ytr=r(Gke," (throws an error)."),Gke.forEach(t),Ktr=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m(Sw.$$.fragment,Ol),Ztr=i(Ol),Wge=n(Ol,"P",{});var ult=s(Wge);ear=r(ult,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ult.forEach(t),oar=i(Ol),bc=n(Ol,"P",{});var kz=s(bc);rar=r(kz,`Note:
Loading a model from its configuration file does `),Qge=n(kz,"STRONG",{});var blt=s(Qge);tar=r(blt,"not"),blt.forEach(t),aar=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=n(kz,"CODE",{});var vlt=s(Hge);nar=r(vlt,"from_pretrained()"),vlt.forEach(t),sar=r(kz,"to load the model weights."),kz.forEach(t),lar=i(Ol),Uge=n(Ol,"P",{});var Tlt=s(Uge);iar=r(Tlt,"Examples:"),Tlt.forEach(t),dar=i(Ol),m(Pw.$$.fragment,Ol),Ol.forEach(t),car=i(Gl),bo=n(Gl,"DIV",{class:!0});var pa=s(bo);m($w.$$.fragment,pa),far=i(pa),Jge=n(pa,"P",{});var Flt=s(Jge);mar=r(Flt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Flt.forEach(t),gar=i(pa),pn=n(pa,"P",{});var Z4=s(pn);har=r(Z4,"The model class to instantiate is selected based on the "),Yge=n(Z4,"CODE",{});var Clt=s(Yge);par=r(Clt,"model_type"),Clt.forEach(t),_ar=r(Z4,` property of the config object (either
passed as an argument or loaded from `),Kge=n(Z4,"CODE",{});var Mlt=s(Kge);uar=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),bar=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(Z4,"CODE",{});var Elt=s(Zge);Tar=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),Far=r(Z4,":"),Z4.forEach(t),Car=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);k7=n(Ee,"LI",{});var W6e=s(k7);ehe=n(W6e,"STRONG",{});var ylt=s(ehe);Mar=r(ylt,"bart"),ylt.forEach(t),Ear=r(W6e," \u2014 "),oG=n(W6e,"A",{href:!0});var wlt=s(oG);yar=r(wlt,"TFBartForConditionalGeneration"),wlt.forEach(t),war=r(W6e," (BART model)"),W6e.forEach(t),Aar=i(Ee),R7=n(Ee,"LI",{});var Q6e=s(R7);ohe=n(Q6e,"STRONG",{});var Alt=s(ohe);Lar=r(Alt,"blenderbot"),Alt.forEach(t),Bar=r(Q6e," \u2014 "),rG=n(Q6e,"A",{href:!0});var Llt=s(rG);xar=r(Llt,"TFBlenderbotForConditionalGeneration"),Llt.forEach(t),kar=r(Q6e," (Blenderbot model)"),Q6e.forEach(t),Rar=i(Ee),S7=n(Ee,"LI",{});var H6e=s(S7);rhe=n(H6e,"STRONG",{});var Blt=s(rhe);Sar=r(Blt,"blenderbot-small"),Blt.forEach(t),Par=r(H6e," \u2014 "),tG=n(H6e,"A",{href:!0});var xlt=s(tG);$ar=r(xlt,"TFBlenderbotSmallForConditionalGeneration"),xlt.forEach(t),Iar=r(H6e," (BlenderbotSmall model)"),H6e.forEach(t),Dar=i(Ee),P7=n(Ee,"LI",{});var U6e=s(P7);the=n(U6e,"STRONG",{});var klt=s(the);jar=r(klt,"encoder-decoder"),klt.forEach(t),Nar=r(U6e," \u2014 "),aG=n(U6e,"A",{href:!0});var Rlt=s(aG);qar=r(Rlt,"TFEncoderDecoderModel"),Rlt.forEach(t),Gar=r(U6e," (Encoder decoder model)"),U6e.forEach(t),Oar=i(Ee),$7=n(Ee,"LI",{});var J6e=s($7);ahe=n(J6e,"STRONG",{});var Slt=s(ahe);Xar=r(Slt,"led"),Slt.forEach(t),Var=r(J6e," \u2014 "),nG=n(J6e,"A",{href:!0});var Plt=s(nG);zar=r(Plt,"TFLEDForConditionalGeneration"),Plt.forEach(t),War=r(J6e," (LED model)"),J6e.forEach(t),Qar=i(Ee),I7=n(Ee,"LI",{});var Y6e=s(I7);nhe=n(Y6e,"STRONG",{});var $lt=s(nhe);Har=r($lt,"marian"),$lt.forEach(t),Uar=r(Y6e," \u2014 "),sG=n(Y6e,"A",{href:!0});var Ilt=s(sG);Jar=r(Ilt,"TFMarianMTModel"),Ilt.forEach(t),Yar=r(Y6e," (Marian model)"),Y6e.forEach(t),Kar=i(Ee),D7=n(Ee,"LI",{});var K6e=s(D7);she=n(K6e,"STRONG",{});var Dlt=s(she);Zar=r(Dlt,"mbart"),Dlt.forEach(t),enr=r(K6e," \u2014 "),lG=n(K6e,"A",{href:!0});var jlt=s(lG);onr=r(jlt,"TFMBartForConditionalGeneration"),jlt.forEach(t),rnr=r(K6e," (mBART model)"),K6e.forEach(t),tnr=i(Ee),j7=n(Ee,"LI",{});var Z6e=s(j7);lhe=n(Z6e,"STRONG",{});var Nlt=s(lhe);anr=r(Nlt,"mt5"),Nlt.forEach(t),nnr=r(Z6e," \u2014 "),iG=n(Z6e,"A",{href:!0});var qlt=s(iG);snr=r(qlt,"TFMT5ForConditionalGeneration"),qlt.forEach(t),lnr=r(Z6e," (mT5 model)"),Z6e.forEach(t),inr=i(Ee),N7=n(Ee,"LI",{});var eAe=s(N7);ihe=n(eAe,"STRONG",{});var Glt=s(ihe);dnr=r(Glt,"pegasus"),Glt.forEach(t),cnr=r(eAe," \u2014 "),dG=n(eAe,"A",{href:!0});var Olt=s(dG);fnr=r(Olt,"TFPegasusForConditionalGeneration"),Olt.forEach(t),mnr=r(eAe," (Pegasus model)"),eAe.forEach(t),gnr=i(Ee),q7=n(Ee,"LI",{});var oAe=s(q7);dhe=n(oAe,"STRONG",{});var Xlt=s(dhe);hnr=r(Xlt,"t5"),Xlt.forEach(t),pnr=r(oAe," \u2014 "),cG=n(oAe,"A",{href:!0});var Vlt=s(cG);_nr=r(Vlt,"TFT5ForConditionalGeneration"),Vlt.forEach(t),unr=r(oAe," (T5 model)"),oAe.forEach(t),Ee.forEach(t),bnr=i(pa),che=n(pa,"P",{});var zlt=s(che);vnr=r(zlt,"Examples:"),zlt.forEach(t),Tnr=i(pa),m(Iw.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),RBe=i(c),vc=n(c,"H2",{class:!0});var Oke=s(vc);G7=n(Oke,"A",{id:!0,class:!0,href:!0});var Wlt=s(G7);fhe=n(Wlt,"SPAN",{});var Qlt=s(fhe);m(Dw.$$.fragment,Qlt),Qlt.forEach(t),Wlt.forEach(t),Fnr=i(Oke),mhe=n(Oke,"SPAN",{});var Hlt=s(mhe);Cnr=r(Hlt,"TFAutoModelForSequenceClassification"),Hlt.forEach(t),Oke.forEach(t),SBe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(jw.$$.fragment,Xl),Mnr=i(Xl),Tc=n(Xl,"P",{});var Rz=s(Tc);Enr=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ghe=n(Rz,"CODE",{});var Ult=s(ghe);ynr=r(Ult,"from_pretrained()"),Ult.forEach(t),wnr=r(Rz,"class method or the "),hhe=n(Rz,"CODE",{});var Jlt=s(hhe);Anr=r(Jlt,"from_config()"),Jlt.forEach(t),Lnr=r(Rz,`class
method.`),Rz.forEach(t),Bnr=i(Xl),Nw=n(Xl,"P",{});var Xke=s(Nw);xnr=r(Xke,"This class cannot be instantiated directly using "),phe=n(Xke,"CODE",{});var Ylt=s(phe);knr=r(Ylt,"__init__()"),Ylt.forEach(t),Rnr=r(Xke," (throws an error)."),Xke.forEach(t),Snr=i(Xl),ht=n(Xl,"DIV",{class:!0});var Vl=s(ht);m(qw.$$.fragment,Vl),Pnr=i(Vl),_he=n(Vl,"P",{});var Klt=s(_he);$nr=r(Klt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Klt.forEach(t),Inr=i(Vl),Fc=n(Vl,"P",{});var Sz=s(Fc);Dnr=r(Sz,`Note:
Loading a model from its configuration file does `),uhe=n(Sz,"STRONG",{});var Zlt=s(uhe);jnr=r(Zlt,"not"),Zlt.forEach(t),Nnr=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),bhe=n(Sz,"CODE",{});var eit=s(bhe);qnr=r(eit,"from_pretrained()"),eit.forEach(t),Gnr=r(Sz,"to load the model weights."),Sz.forEach(t),Onr=i(Vl),vhe=n(Vl,"P",{});var oit=s(vhe);Xnr=r(oit,"Examples:"),oit.forEach(t),Vnr=i(Vl),m(Gw.$$.fragment,Vl),Vl.forEach(t),znr=i(Xl),vo=n(Xl,"DIV",{class:!0});var _a=s(vo);m(Ow.$$.fragment,_a),Wnr=i(_a),The=n(_a,"P",{});var rit=s(The);Qnr=r(rit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rit.forEach(t),Hnr=i(_a),_n=n(_a,"P",{});var eM=s(_n);Unr=r(eM,"The model class to instantiate is selected based on the "),Fhe=n(eM,"CODE",{});var tit=s(Fhe);Jnr=r(tit,"model_type"),tit.forEach(t),Ynr=r(eM,` property of the config object (either
passed as an argument or loaded from `),Che=n(eM,"CODE",{});var ait=s(Che);Knr=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),Znr=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(eM,"CODE",{});var nit=s(Mhe);esr=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),osr=r(eM,":"),eM.forEach(t),rsr=i(_a),X=n(_a,"UL",{});var W=s(X);O7=n(W,"LI",{});var rAe=s(O7);Ehe=n(rAe,"STRONG",{});var sit=s(Ehe);tsr=r(sit,"albert"),sit.forEach(t),asr=r(rAe," \u2014 "),fG=n(rAe,"A",{href:!0});var lit=s(fG);nsr=r(lit,"TFAlbertForSequenceClassification"),lit.forEach(t),ssr=r(rAe," (ALBERT model)"),rAe.forEach(t),lsr=i(W),X7=n(W,"LI",{});var tAe=s(X7);yhe=n(tAe,"STRONG",{});var iit=s(yhe);isr=r(iit,"bert"),iit.forEach(t),dsr=r(tAe," \u2014 "),mG=n(tAe,"A",{href:!0});var dit=s(mG);csr=r(dit,"TFBertForSequenceClassification"),dit.forEach(t),fsr=r(tAe," (BERT model)"),tAe.forEach(t),msr=i(W),V7=n(W,"LI",{});var aAe=s(V7);whe=n(aAe,"STRONG",{});var cit=s(whe);gsr=r(cit,"camembert"),cit.forEach(t),hsr=r(aAe," \u2014 "),gG=n(aAe,"A",{href:!0});var fit=s(gG);psr=r(fit,"TFCamembertForSequenceClassification"),fit.forEach(t),_sr=r(aAe," (CamemBERT model)"),aAe.forEach(t),usr=i(W),z7=n(W,"LI",{});var nAe=s(z7);Ahe=n(nAe,"STRONG",{});var mit=s(Ahe);bsr=r(mit,"convbert"),mit.forEach(t),vsr=r(nAe," \u2014 "),hG=n(nAe,"A",{href:!0});var git=s(hG);Tsr=r(git,"TFConvBertForSequenceClassification"),git.forEach(t),Fsr=r(nAe," (ConvBERT model)"),nAe.forEach(t),Csr=i(W),W7=n(W,"LI",{});var sAe=s(W7);Lhe=n(sAe,"STRONG",{});var hit=s(Lhe);Msr=r(hit,"ctrl"),hit.forEach(t),Esr=r(sAe," \u2014 "),pG=n(sAe,"A",{href:!0});var pit=s(pG);ysr=r(pit,"TFCTRLForSequenceClassification"),pit.forEach(t),wsr=r(sAe," (CTRL model)"),sAe.forEach(t),Asr=i(W),Q7=n(W,"LI",{});var lAe=s(Q7);Bhe=n(lAe,"STRONG",{});var _it=s(Bhe);Lsr=r(_it,"deberta"),_it.forEach(t),Bsr=r(lAe," \u2014 "),_G=n(lAe,"A",{href:!0});var uit=s(_G);xsr=r(uit,"TFDebertaForSequenceClassification"),uit.forEach(t),ksr=r(lAe," (DeBERTa model)"),lAe.forEach(t),Rsr=i(W),H7=n(W,"LI",{});var iAe=s(H7);xhe=n(iAe,"STRONG",{});var bit=s(xhe);Ssr=r(bit,"deberta-v2"),bit.forEach(t),Psr=r(iAe," \u2014 "),uG=n(iAe,"A",{href:!0});var vit=s(uG);$sr=r(vit,"TFDebertaV2ForSequenceClassification"),vit.forEach(t),Isr=r(iAe," (DeBERTa-v2 model)"),iAe.forEach(t),Dsr=i(W),U7=n(W,"LI",{});var dAe=s(U7);khe=n(dAe,"STRONG",{});var Tit=s(khe);jsr=r(Tit,"distilbert"),Tit.forEach(t),Nsr=r(dAe," \u2014 "),bG=n(dAe,"A",{href:!0});var Fit=s(bG);qsr=r(Fit,"TFDistilBertForSequenceClassification"),Fit.forEach(t),Gsr=r(dAe," (DistilBERT model)"),dAe.forEach(t),Osr=i(W),J7=n(W,"LI",{});var cAe=s(J7);Rhe=n(cAe,"STRONG",{});var Cit=s(Rhe);Xsr=r(Cit,"electra"),Cit.forEach(t),Vsr=r(cAe," \u2014 "),vG=n(cAe,"A",{href:!0});var Mit=s(vG);zsr=r(Mit,"TFElectraForSequenceClassification"),Mit.forEach(t),Wsr=r(cAe," (ELECTRA model)"),cAe.forEach(t),Qsr=i(W),Y7=n(W,"LI",{});var fAe=s(Y7);She=n(fAe,"STRONG",{});var Eit=s(She);Hsr=r(Eit,"flaubert"),Eit.forEach(t),Usr=r(fAe," \u2014 "),TG=n(fAe,"A",{href:!0});var yit=s(TG);Jsr=r(yit,"TFFlaubertForSequenceClassification"),yit.forEach(t),Ysr=r(fAe," (FlauBERT model)"),fAe.forEach(t),Ksr=i(W),K7=n(W,"LI",{});var mAe=s(K7);Phe=n(mAe,"STRONG",{});var wit=s(Phe);Zsr=r(wit,"funnel"),wit.forEach(t),elr=r(mAe," \u2014 "),FG=n(mAe,"A",{href:!0});var Ait=s(FG);olr=r(Ait,"TFFunnelForSequenceClassification"),Ait.forEach(t),rlr=r(mAe," (Funnel Transformer model)"),mAe.forEach(t),tlr=i(W),Z7=n(W,"LI",{});var gAe=s(Z7);$he=n(gAe,"STRONG",{});var Lit=s($he);alr=r(Lit,"gpt2"),Lit.forEach(t),nlr=r(gAe," \u2014 "),CG=n(gAe,"A",{href:!0});var Bit=s(CG);slr=r(Bit,"TFGPT2ForSequenceClassification"),Bit.forEach(t),llr=r(gAe," (OpenAI GPT-2 model)"),gAe.forEach(t),ilr=i(W),eF=n(W,"LI",{});var hAe=s(eF);Ihe=n(hAe,"STRONG",{});var xit=s(Ihe);dlr=r(xit,"layoutlm"),xit.forEach(t),clr=r(hAe," \u2014 "),MG=n(hAe,"A",{href:!0});var kit=s(MG);flr=r(kit,"TFLayoutLMForSequenceClassification"),kit.forEach(t),mlr=r(hAe," (LayoutLM model)"),hAe.forEach(t),glr=i(W),oF=n(W,"LI",{});var pAe=s(oF);Dhe=n(pAe,"STRONG",{});var Rit=s(Dhe);hlr=r(Rit,"longformer"),Rit.forEach(t),plr=r(pAe," \u2014 "),EG=n(pAe,"A",{href:!0});var Sit=s(EG);_lr=r(Sit,"TFLongformerForSequenceClassification"),Sit.forEach(t),ulr=r(pAe," (Longformer model)"),pAe.forEach(t),blr=i(W),rF=n(W,"LI",{});var _Ae=s(rF);jhe=n(_Ae,"STRONG",{});var Pit=s(jhe);vlr=r(Pit,"mobilebert"),Pit.forEach(t),Tlr=r(_Ae," \u2014 "),yG=n(_Ae,"A",{href:!0});var $it=s(yG);Flr=r($it,"TFMobileBertForSequenceClassification"),$it.forEach(t),Clr=r(_Ae," (MobileBERT model)"),_Ae.forEach(t),Mlr=i(W),tF=n(W,"LI",{});var uAe=s(tF);Nhe=n(uAe,"STRONG",{});var Iit=s(Nhe);Elr=r(Iit,"mpnet"),Iit.forEach(t),ylr=r(uAe," \u2014 "),wG=n(uAe,"A",{href:!0});var Dit=s(wG);wlr=r(Dit,"TFMPNetForSequenceClassification"),Dit.forEach(t),Alr=r(uAe," (MPNet model)"),uAe.forEach(t),Llr=i(W),aF=n(W,"LI",{});var bAe=s(aF);qhe=n(bAe,"STRONG",{});var jit=s(qhe);Blr=r(jit,"openai-gpt"),jit.forEach(t),xlr=r(bAe," \u2014 "),AG=n(bAe,"A",{href:!0});var Nit=s(AG);klr=r(Nit,"TFOpenAIGPTForSequenceClassification"),Nit.forEach(t),Rlr=r(bAe," (OpenAI GPT model)"),bAe.forEach(t),Slr=i(W),nF=n(W,"LI",{});var vAe=s(nF);Ghe=n(vAe,"STRONG",{});var qit=s(Ghe);Plr=r(qit,"rembert"),qit.forEach(t),$lr=r(vAe," \u2014 "),LG=n(vAe,"A",{href:!0});var Git=s(LG);Ilr=r(Git,"TFRemBertForSequenceClassification"),Git.forEach(t),Dlr=r(vAe," (RemBERT model)"),vAe.forEach(t),jlr=i(W),sF=n(W,"LI",{});var TAe=s(sF);Ohe=n(TAe,"STRONG",{});var Oit=s(Ohe);Nlr=r(Oit,"roberta"),Oit.forEach(t),qlr=r(TAe," \u2014 "),BG=n(TAe,"A",{href:!0});var Xit=s(BG);Glr=r(Xit,"TFRobertaForSequenceClassification"),Xit.forEach(t),Olr=r(TAe," (RoBERTa model)"),TAe.forEach(t),Xlr=i(W),lF=n(W,"LI",{});var FAe=s(lF);Xhe=n(FAe,"STRONG",{});var Vit=s(Xhe);Vlr=r(Vit,"roformer"),Vit.forEach(t),zlr=r(FAe," \u2014 "),xG=n(FAe,"A",{href:!0});var zit=s(xG);Wlr=r(zit,"TFRoFormerForSequenceClassification"),zit.forEach(t),Qlr=r(FAe," (RoFormer model)"),FAe.forEach(t),Hlr=i(W),iF=n(W,"LI",{});var CAe=s(iF);Vhe=n(CAe,"STRONG",{});var Wit=s(Vhe);Ulr=r(Wit,"tapas"),Wit.forEach(t),Jlr=r(CAe," \u2014 "),kG=n(CAe,"A",{href:!0});var Qit=s(kG);Ylr=r(Qit,"TFTapasForSequenceClassification"),Qit.forEach(t),Klr=r(CAe," (TAPAS model)"),CAe.forEach(t),Zlr=i(W),dF=n(W,"LI",{});var MAe=s(dF);zhe=n(MAe,"STRONG",{});var Hit=s(zhe);eir=r(Hit,"transfo-xl"),Hit.forEach(t),oir=r(MAe," \u2014 "),RG=n(MAe,"A",{href:!0});var Uit=s(RG);rir=r(Uit,"TFTransfoXLForSequenceClassification"),Uit.forEach(t),tir=r(MAe," (Transformer-XL model)"),MAe.forEach(t),air=i(W),cF=n(W,"LI",{});var EAe=s(cF);Whe=n(EAe,"STRONG",{});var Jit=s(Whe);nir=r(Jit,"xlm"),Jit.forEach(t),sir=r(EAe," \u2014 "),SG=n(EAe,"A",{href:!0});var Yit=s(SG);lir=r(Yit,"TFXLMForSequenceClassification"),Yit.forEach(t),iir=r(EAe," (XLM model)"),EAe.forEach(t),dir=i(W),fF=n(W,"LI",{});var yAe=s(fF);Qhe=n(yAe,"STRONG",{});var Kit=s(Qhe);cir=r(Kit,"xlm-roberta"),Kit.forEach(t),fir=r(yAe," \u2014 "),PG=n(yAe,"A",{href:!0});var Zit=s(PG);mir=r(Zit,"TFXLMRobertaForSequenceClassification"),Zit.forEach(t),gir=r(yAe," (XLM-RoBERTa model)"),yAe.forEach(t),hir=i(W),mF=n(W,"LI",{});var wAe=s(mF);Hhe=n(wAe,"STRONG",{});var edt=s(Hhe);pir=r(edt,"xlnet"),edt.forEach(t),_ir=r(wAe," \u2014 "),$G=n(wAe,"A",{href:!0});var odt=s($G);uir=r(odt,"TFXLNetForSequenceClassification"),odt.forEach(t),bir=r(wAe," (XLNet model)"),wAe.forEach(t),W.forEach(t),vir=i(_a),Uhe=n(_a,"P",{});var rdt=s(Uhe);Tir=r(rdt,"Examples:"),rdt.forEach(t),Fir=i(_a),m(Xw.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),PBe=i(c),Cc=n(c,"H2",{class:!0});var Vke=s(Cc);gF=n(Vke,"A",{id:!0,class:!0,href:!0});var tdt=s(gF);Jhe=n(tdt,"SPAN",{});var adt=s(Jhe);m(Vw.$$.fragment,adt),adt.forEach(t),tdt.forEach(t),Cir=i(Vke),Yhe=n(Vke,"SPAN",{});var ndt=s(Yhe);Mir=r(ndt,"TFAutoModelForMultipleChoice"),ndt.forEach(t),Vke.forEach(t),$Be=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(zw.$$.fragment,zl),Eir=i(zl),Mc=n(zl,"P",{});var Pz=s(Mc);yir=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Khe=n(Pz,"CODE",{});var sdt=s(Khe);wir=r(sdt,"from_pretrained()"),sdt.forEach(t),Air=r(Pz,"class method or the "),Zhe=n(Pz,"CODE",{});var ldt=s(Zhe);Lir=r(ldt,"from_config()"),ldt.forEach(t),Bir=r(Pz,`class
method.`),Pz.forEach(t),xir=i(zl),Ww=n(zl,"P",{});var zke=s(Ww);kir=r(zke,"This class cannot be instantiated directly using "),epe=n(zke,"CODE",{});var idt=s(epe);Rir=r(idt,"__init__()"),idt.forEach(t),Sir=r(zke," (throws an error)."),zke.forEach(t),Pir=i(zl),pt=n(zl,"DIV",{class:!0});var Wl=s(pt);m(Qw.$$.fragment,Wl),$ir=i(Wl),ope=n(Wl,"P",{});var ddt=s(ope);Iir=r(ddt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ddt.forEach(t),Dir=i(Wl),Ec=n(Wl,"P",{});var $z=s(Ec);jir=r($z,`Note:
Loading a model from its configuration file does `),rpe=n($z,"STRONG",{});var cdt=s(rpe);Nir=r(cdt,"not"),cdt.forEach(t),qir=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),tpe=n($z,"CODE",{});var fdt=s(tpe);Gir=r(fdt,"from_pretrained()"),fdt.forEach(t),Oir=r($z,"to load the model weights."),$z.forEach(t),Xir=i(Wl),ape=n(Wl,"P",{});var mdt=s(ape);Vir=r(mdt,"Examples:"),mdt.forEach(t),zir=i(Wl),m(Hw.$$.fragment,Wl),Wl.forEach(t),Wir=i(zl),To=n(zl,"DIV",{class:!0});var ua=s(To);m(Uw.$$.fragment,ua),Qir=i(ua),npe=n(ua,"P",{});var gdt=s(npe);Hir=r(gdt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gdt.forEach(t),Uir=i(ua),un=n(ua,"P",{});var oM=s(un);Jir=r(oM,"The model class to instantiate is selected based on the "),spe=n(oM,"CODE",{});var hdt=s(spe);Yir=r(hdt,"model_type"),hdt.forEach(t),Kir=r(oM,` property of the config object (either
passed as an argument or loaded from `),lpe=n(oM,"CODE",{});var pdt=s(lpe);Zir=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),edr=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(oM,"CODE",{});var _dt=s(ipe);odr=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),rdr=r(oM,":"),oM.forEach(t),tdr=i(ua),te=n(ua,"UL",{});var ne=s(te);hF=n(ne,"LI",{});var AAe=s(hF);dpe=n(AAe,"STRONG",{});var udt=s(dpe);adr=r(udt,"albert"),udt.forEach(t),ndr=r(AAe," \u2014 "),IG=n(AAe,"A",{href:!0});var bdt=s(IG);sdr=r(bdt,"TFAlbertForMultipleChoice"),bdt.forEach(t),ldr=r(AAe," (ALBERT model)"),AAe.forEach(t),idr=i(ne),pF=n(ne,"LI",{});var LAe=s(pF);cpe=n(LAe,"STRONG",{});var vdt=s(cpe);ddr=r(vdt,"bert"),vdt.forEach(t),cdr=r(LAe," \u2014 "),DG=n(LAe,"A",{href:!0});var Tdt=s(DG);fdr=r(Tdt,"TFBertForMultipleChoice"),Tdt.forEach(t),mdr=r(LAe," (BERT model)"),LAe.forEach(t),gdr=i(ne),_F=n(ne,"LI",{});var BAe=s(_F);fpe=n(BAe,"STRONG",{});var Fdt=s(fpe);hdr=r(Fdt,"camembert"),Fdt.forEach(t),pdr=r(BAe," \u2014 "),jG=n(BAe,"A",{href:!0});var Cdt=s(jG);_dr=r(Cdt,"TFCamembertForMultipleChoice"),Cdt.forEach(t),udr=r(BAe," (CamemBERT model)"),BAe.forEach(t),bdr=i(ne),uF=n(ne,"LI",{});var xAe=s(uF);mpe=n(xAe,"STRONG",{});var Mdt=s(mpe);vdr=r(Mdt,"convbert"),Mdt.forEach(t),Tdr=r(xAe," \u2014 "),NG=n(xAe,"A",{href:!0});var Edt=s(NG);Fdr=r(Edt,"TFConvBertForMultipleChoice"),Edt.forEach(t),Cdr=r(xAe," (ConvBERT model)"),xAe.forEach(t),Mdr=i(ne),bF=n(ne,"LI",{});var kAe=s(bF);gpe=n(kAe,"STRONG",{});var ydt=s(gpe);Edr=r(ydt,"distilbert"),ydt.forEach(t),ydr=r(kAe," \u2014 "),qG=n(kAe,"A",{href:!0});var wdt=s(qG);wdr=r(wdt,"TFDistilBertForMultipleChoice"),wdt.forEach(t),Adr=r(kAe," (DistilBERT model)"),kAe.forEach(t),Ldr=i(ne),vF=n(ne,"LI",{});var RAe=s(vF);hpe=n(RAe,"STRONG",{});var Adt=s(hpe);Bdr=r(Adt,"electra"),Adt.forEach(t),xdr=r(RAe," \u2014 "),GG=n(RAe,"A",{href:!0});var Ldt=s(GG);kdr=r(Ldt,"TFElectraForMultipleChoice"),Ldt.forEach(t),Rdr=r(RAe," (ELECTRA model)"),RAe.forEach(t),Sdr=i(ne),TF=n(ne,"LI",{});var SAe=s(TF);ppe=n(SAe,"STRONG",{});var Bdt=s(ppe);Pdr=r(Bdt,"flaubert"),Bdt.forEach(t),$dr=r(SAe," \u2014 "),OG=n(SAe,"A",{href:!0});var xdt=s(OG);Idr=r(xdt,"TFFlaubertForMultipleChoice"),xdt.forEach(t),Ddr=r(SAe," (FlauBERT model)"),SAe.forEach(t),jdr=i(ne),FF=n(ne,"LI",{});var PAe=s(FF);_pe=n(PAe,"STRONG",{});var kdt=s(_pe);Ndr=r(kdt,"funnel"),kdt.forEach(t),qdr=r(PAe," \u2014 "),XG=n(PAe,"A",{href:!0});var Rdt=s(XG);Gdr=r(Rdt,"TFFunnelForMultipleChoice"),Rdt.forEach(t),Odr=r(PAe," (Funnel Transformer model)"),PAe.forEach(t),Xdr=i(ne),CF=n(ne,"LI",{});var $Ae=s(CF);upe=n($Ae,"STRONG",{});var Sdt=s(upe);Vdr=r(Sdt,"longformer"),Sdt.forEach(t),zdr=r($Ae," \u2014 "),VG=n($Ae,"A",{href:!0});var Pdt=s(VG);Wdr=r(Pdt,"TFLongformerForMultipleChoice"),Pdt.forEach(t),Qdr=r($Ae," (Longformer model)"),$Ae.forEach(t),Hdr=i(ne),MF=n(ne,"LI",{});var IAe=s(MF);bpe=n(IAe,"STRONG",{});var $dt=s(bpe);Udr=r($dt,"mobilebert"),$dt.forEach(t),Jdr=r(IAe," \u2014 "),zG=n(IAe,"A",{href:!0});var Idt=s(zG);Ydr=r(Idt,"TFMobileBertForMultipleChoice"),Idt.forEach(t),Kdr=r(IAe," (MobileBERT model)"),IAe.forEach(t),Zdr=i(ne),EF=n(ne,"LI",{});var DAe=s(EF);vpe=n(DAe,"STRONG",{});var Ddt=s(vpe);ecr=r(Ddt,"mpnet"),Ddt.forEach(t),ocr=r(DAe," \u2014 "),WG=n(DAe,"A",{href:!0});var jdt=s(WG);rcr=r(jdt,"TFMPNetForMultipleChoice"),jdt.forEach(t),tcr=r(DAe," (MPNet model)"),DAe.forEach(t),acr=i(ne),yF=n(ne,"LI",{});var jAe=s(yF);Tpe=n(jAe,"STRONG",{});var Ndt=s(Tpe);ncr=r(Ndt,"rembert"),Ndt.forEach(t),scr=r(jAe," \u2014 "),QG=n(jAe,"A",{href:!0});var qdt=s(QG);lcr=r(qdt,"TFRemBertForMultipleChoice"),qdt.forEach(t),icr=r(jAe," (RemBERT model)"),jAe.forEach(t),dcr=i(ne),wF=n(ne,"LI",{});var NAe=s(wF);Fpe=n(NAe,"STRONG",{});var Gdt=s(Fpe);ccr=r(Gdt,"roberta"),Gdt.forEach(t),fcr=r(NAe," \u2014 "),HG=n(NAe,"A",{href:!0});var Odt=s(HG);mcr=r(Odt,"TFRobertaForMultipleChoice"),Odt.forEach(t),gcr=r(NAe," (RoBERTa model)"),NAe.forEach(t),hcr=i(ne),AF=n(ne,"LI",{});var qAe=s(AF);Cpe=n(qAe,"STRONG",{});var Xdt=s(Cpe);pcr=r(Xdt,"roformer"),Xdt.forEach(t),_cr=r(qAe," \u2014 "),UG=n(qAe,"A",{href:!0});var Vdt=s(UG);ucr=r(Vdt,"TFRoFormerForMultipleChoice"),Vdt.forEach(t),bcr=r(qAe," (RoFormer model)"),qAe.forEach(t),vcr=i(ne),LF=n(ne,"LI",{});var GAe=s(LF);Mpe=n(GAe,"STRONG",{});var zdt=s(Mpe);Tcr=r(zdt,"xlm"),zdt.forEach(t),Fcr=r(GAe," \u2014 "),JG=n(GAe,"A",{href:!0});var Wdt=s(JG);Ccr=r(Wdt,"TFXLMForMultipleChoice"),Wdt.forEach(t),Mcr=r(GAe," (XLM model)"),GAe.forEach(t),Ecr=i(ne),BF=n(ne,"LI",{});var OAe=s(BF);Epe=n(OAe,"STRONG",{});var Qdt=s(Epe);ycr=r(Qdt,"xlm-roberta"),Qdt.forEach(t),wcr=r(OAe," \u2014 "),YG=n(OAe,"A",{href:!0});var Hdt=s(YG);Acr=r(Hdt,"TFXLMRobertaForMultipleChoice"),Hdt.forEach(t),Lcr=r(OAe," (XLM-RoBERTa model)"),OAe.forEach(t),Bcr=i(ne),xF=n(ne,"LI",{});var XAe=s(xF);ype=n(XAe,"STRONG",{});var Udt=s(ype);xcr=r(Udt,"xlnet"),Udt.forEach(t),kcr=r(XAe," \u2014 "),KG=n(XAe,"A",{href:!0});var Jdt=s(KG);Rcr=r(Jdt,"TFXLNetForMultipleChoice"),Jdt.forEach(t),Scr=r(XAe," (XLNet model)"),XAe.forEach(t),ne.forEach(t),Pcr=i(ua),wpe=n(ua,"P",{});var Ydt=s(wpe);$cr=r(Ydt,"Examples:"),Ydt.forEach(t),Icr=i(ua),m(Jw.$$.fragment,ua),ua.forEach(t),zl.forEach(t),IBe=i(c),yc=n(c,"H2",{class:!0});var Wke=s(yc);kF=n(Wke,"A",{id:!0,class:!0,href:!0});var Kdt=s(kF);Ape=n(Kdt,"SPAN",{});var Zdt=s(Ape);m(Yw.$$.fragment,Zdt),Zdt.forEach(t),Kdt.forEach(t),Dcr=i(Wke),Lpe=n(Wke,"SPAN",{});var ect=s(Lpe);jcr=r(ect,"TFAutoModelForTableQuestionAnswering"),ect.forEach(t),Wke.forEach(t),DBe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(Kw.$$.fragment,Ql),Ncr=i(Ql),wc=n(Ql,"P",{});var Iz=s(wc);qcr=r(Iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bpe=n(Iz,"CODE",{});var oct=s(Bpe);Gcr=r(oct,"from_pretrained()"),oct.forEach(t),Ocr=r(Iz,"class method or the "),xpe=n(Iz,"CODE",{});var rct=s(xpe);Xcr=r(rct,"from_config()"),rct.forEach(t),Vcr=r(Iz,`class
method.`),Iz.forEach(t),zcr=i(Ql),Zw=n(Ql,"P",{});var Qke=s(Zw);Wcr=r(Qke,"This class cannot be instantiated directly using "),kpe=n(Qke,"CODE",{});var tct=s(kpe);Qcr=r(tct,"__init__()"),tct.forEach(t),Hcr=r(Qke," (throws an error)."),Qke.forEach(t),Ucr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);m(e6.$$.fragment,Hl),Jcr=i(Hl),Rpe=n(Hl,"P",{});var act=s(Rpe);Ycr=r(act,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),act.forEach(t),Kcr=i(Hl),Ac=n(Hl,"P",{});var Dz=s(Ac);Zcr=r(Dz,`Note:
Loading a model from its configuration file does `),Spe=n(Dz,"STRONG",{});var nct=s(Spe);efr=r(nct,"not"),nct.forEach(t),ofr=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ppe=n(Dz,"CODE",{});var sct=s(Ppe);rfr=r(sct,"from_pretrained()"),sct.forEach(t),tfr=r(Dz,"to load the model weights."),Dz.forEach(t),afr=i(Hl),$pe=n(Hl,"P",{});var lct=s($pe);nfr=r(lct,"Examples:"),lct.forEach(t),sfr=i(Hl),m(o6.$$.fragment,Hl),Hl.forEach(t),lfr=i(Ql),Fo=n(Ql,"DIV",{class:!0});var ba=s(Fo);m(r6.$$.fragment,ba),ifr=i(ba),Ipe=n(ba,"P",{});var ict=s(Ipe);dfr=r(ict,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ict.forEach(t),cfr=i(ba),bn=n(ba,"P",{});var rM=s(bn);ffr=r(rM,"The model class to instantiate is selected based on the "),Dpe=n(rM,"CODE",{});var dct=s(Dpe);mfr=r(dct,"model_type"),dct.forEach(t),gfr=r(rM,` property of the config object (either
passed as an argument or loaded from `),jpe=n(rM,"CODE",{});var cct=s(jpe);hfr=r(cct,"pretrained_model_name_or_path"),cct.forEach(t),pfr=r(rM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(rM,"CODE",{});var fct=s(Npe);_fr=r(fct,"pretrained_model_name_or_path"),fct.forEach(t),ufr=r(rM,":"),rM.forEach(t),bfr=i(ba),qpe=n(ba,"UL",{});var mct=s(qpe);RF=n(mct,"LI",{});var VAe=s(RF);Gpe=n(VAe,"STRONG",{});var gct=s(Gpe);vfr=r(gct,"tapas"),gct.forEach(t),Tfr=r(VAe," \u2014 "),ZG=n(VAe,"A",{href:!0});var hct=s(ZG);Ffr=r(hct,"TFTapasForQuestionAnswering"),hct.forEach(t),Cfr=r(VAe," (TAPAS model)"),VAe.forEach(t),mct.forEach(t),Mfr=i(ba),Ope=n(ba,"P",{});var pct=s(Ope);Efr=r(pct,"Examples:"),pct.forEach(t),yfr=i(ba),m(t6.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),jBe=i(c),Lc=n(c,"H2",{class:!0});var Hke=s(Lc);SF=n(Hke,"A",{id:!0,class:!0,href:!0});var _ct=s(SF);Xpe=n(_ct,"SPAN",{});var uct=s(Xpe);m(a6.$$.fragment,uct),uct.forEach(t),_ct.forEach(t),wfr=i(Hke),Vpe=n(Hke,"SPAN",{});var bct=s(Vpe);Afr=r(bct,"TFAutoModelForTokenClassification"),bct.forEach(t),Hke.forEach(t),NBe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(n6.$$.fragment,Ul),Lfr=i(Ul),Bc=n(Ul,"P",{});var jz=s(Bc);Bfr=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zpe=n(jz,"CODE",{});var vct=s(zpe);xfr=r(vct,"from_pretrained()"),vct.forEach(t),kfr=r(jz,"class method or the "),Wpe=n(jz,"CODE",{});var Tct=s(Wpe);Rfr=r(Tct,"from_config()"),Tct.forEach(t),Sfr=r(jz,`class
method.`),jz.forEach(t),Pfr=i(Ul),s6=n(Ul,"P",{});var Uke=s(s6);$fr=r(Uke,"This class cannot be instantiated directly using "),Qpe=n(Uke,"CODE",{});var Fct=s(Qpe);Ifr=r(Fct,"__init__()"),Fct.forEach(t),Dfr=r(Uke," (throws an error)."),Uke.forEach(t),jfr=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(l6.$$.fragment,Jl),Nfr=i(Jl),Hpe=n(Jl,"P",{});var Cct=s(Hpe);qfr=r(Cct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Cct.forEach(t),Gfr=i(Jl),xc=n(Jl,"P",{});var Nz=s(xc);Ofr=r(Nz,`Note:
Loading a model from its configuration file does `),Upe=n(Nz,"STRONG",{});var Mct=s(Upe);Xfr=r(Mct,"not"),Mct.forEach(t),Vfr=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jpe=n(Nz,"CODE",{});var Ect=s(Jpe);zfr=r(Ect,"from_pretrained()"),Ect.forEach(t),Wfr=r(Nz,"to load the model weights."),Nz.forEach(t),Qfr=i(Jl),Ype=n(Jl,"P",{});var yct=s(Ype);Hfr=r(yct,"Examples:"),yct.forEach(t),Ufr=i(Jl),m(i6.$$.fragment,Jl),Jl.forEach(t),Jfr=i(Ul),Co=n(Ul,"DIV",{class:!0});var va=s(Co);m(d6.$$.fragment,va),Yfr=i(va),Kpe=n(va,"P",{});var wct=s(Kpe);Kfr=r(wct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wct.forEach(t),Zfr=i(va),vn=n(va,"P",{});var tM=s(vn);emr=r(tM,"The model class to instantiate is selected based on the "),Zpe=n(tM,"CODE",{});var Act=s(Zpe);omr=r(Act,"model_type"),Act.forEach(t),rmr=r(tM,` property of the config object (either
passed as an argument or loaded from `),e_e=n(tM,"CODE",{});var Lct=s(e_e);tmr=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),amr=r(tM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(tM,"CODE",{});var Bct=s(o_e);nmr=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),smr=r(tM,":"),tM.forEach(t),lmr=i(va),K=n(va,"UL",{});var oe=s(K);PF=n(oe,"LI",{});var zAe=s(PF);r_e=n(zAe,"STRONG",{});var xct=s(r_e);imr=r(xct,"albert"),xct.forEach(t),dmr=r(zAe," \u2014 "),eO=n(zAe,"A",{href:!0});var kct=s(eO);cmr=r(kct,"TFAlbertForTokenClassification"),kct.forEach(t),fmr=r(zAe," (ALBERT model)"),zAe.forEach(t),mmr=i(oe),$F=n(oe,"LI",{});var WAe=s($F);t_e=n(WAe,"STRONG",{});var Rct=s(t_e);gmr=r(Rct,"bert"),Rct.forEach(t),hmr=r(WAe," \u2014 "),oO=n(WAe,"A",{href:!0});var Sct=s(oO);pmr=r(Sct,"TFBertForTokenClassification"),Sct.forEach(t),_mr=r(WAe," (BERT model)"),WAe.forEach(t),umr=i(oe),IF=n(oe,"LI",{});var QAe=s(IF);a_e=n(QAe,"STRONG",{});var Pct=s(a_e);bmr=r(Pct,"camembert"),Pct.forEach(t),vmr=r(QAe," \u2014 "),rO=n(QAe,"A",{href:!0});var $ct=s(rO);Tmr=r($ct,"TFCamembertForTokenClassification"),$ct.forEach(t),Fmr=r(QAe," (CamemBERT model)"),QAe.forEach(t),Cmr=i(oe),DF=n(oe,"LI",{});var HAe=s(DF);n_e=n(HAe,"STRONG",{});var Ict=s(n_e);Mmr=r(Ict,"convbert"),Ict.forEach(t),Emr=r(HAe," \u2014 "),tO=n(HAe,"A",{href:!0});var Dct=s(tO);ymr=r(Dct,"TFConvBertForTokenClassification"),Dct.forEach(t),wmr=r(HAe," (ConvBERT model)"),HAe.forEach(t),Amr=i(oe),jF=n(oe,"LI",{});var UAe=s(jF);s_e=n(UAe,"STRONG",{});var jct=s(s_e);Lmr=r(jct,"deberta"),jct.forEach(t),Bmr=r(UAe," \u2014 "),aO=n(UAe,"A",{href:!0});var Nct=s(aO);xmr=r(Nct,"TFDebertaForTokenClassification"),Nct.forEach(t),kmr=r(UAe," (DeBERTa model)"),UAe.forEach(t),Rmr=i(oe),NF=n(oe,"LI",{});var JAe=s(NF);l_e=n(JAe,"STRONG",{});var qct=s(l_e);Smr=r(qct,"deberta-v2"),qct.forEach(t),Pmr=r(JAe," \u2014 "),nO=n(JAe,"A",{href:!0});var Gct=s(nO);$mr=r(Gct,"TFDebertaV2ForTokenClassification"),Gct.forEach(t),Imr=r(JAe," (DeBERTa-v2 model)"),JAe.forEach(t),Dmr=i(oe),qF=n(oe,"LI",{});var YAe=s(qF);i_e=n(YAe,"STRONG",{});var Oct=s(i_e);jmr=r(Oct,"distilbert"),Oct.forEach(t),Nmr=r(YAe," \u2014 "),sO=n(YAe,"A",{href:!0});var Xct=s(sO);qmr=r(Xct,"TFDistilBertForTokenClassification"),Xct.forEach(t),Gmr=r(YAe," (DistilBERT model)"),YAe.forEach(t),Omr=i(oe),GF=n(oe,"LI",{});var KAe=s(GF);d_e=n(KAe,"STRONG",{});var Vct=s(d_e);Xmr=r(Vct,"electra"),Vct.forEach(t),Vmr=r(KAe," \u2014 "),lO=n(KAe,"A",{href:!0});var zct=s(lO);zmr=r(zct,"TFElectraForTokenClassification"),zct.forEach(t),Wmr=r(KAe," (ELECTRA model)"),KAe.forEach(t),Qmr=i(oe),OF=n(oe,"LI",{});var ZAe=s(OF);c_e=n(ZAe,"STRONG",{});var Wct=s(c_e);Hmr=r(Wct,"flaubert"),Wct.forEach(t),Umr=r(ZAe," \u2014 "),iO=n(ZAe,"A",{href:!0});var Qct=s(iO);Jmr=r(Qct,"TFFlaubertForTokenClassification"),Qct.forEach(t),Ymr=r(ZAe," (FlauBERT model)"),ZAe.forEach(t),Kmr=i(oe),XF=n(oe,"LI",{});var e0e=s(XF);f_e=n(e0e,"STRONG",{});var Hct=s(f_e);Zmr=r(Hct,"funnel"),Hct.forEach(t),egr=r(e0e," \u2014 "),dO=n(e0e,"A",{href:!0});var Uct=s(dO);ogr=r(Uct,"TFFunnelForTokenClassification"),Uct.forEach(t),rgr=r(e0e," (Funnel Transformer model)"),e0e.forEach(t),tgr=i(oe),VF=n(oe,"LI",{});var o0e=s(VF);m_e=n(o0e,"STRONG",{});var Jct=s(m_e);agr=r(Jct,"layoutlm"),Jct.forEach(t),ngr=r(o0e," \u2014 "),cO=n(o0e,"A",{href:!0});var Yct=s(cO);sgr=r(Yct,"TFLayoutLMForTokenClassification"),Yct.forEach(t),lgr=r(o0e," (LayoutLM model)"),o0e.forEach(t),igr=i(oe),zF=n(oe,"LI",{});var r0e=s(zF);g_e=n(r0e,"STRONG",{});var Kct=s(g_e);dgr=r(Kct,"longformer"),Kct.forEach(t),cgr=r(r0e," \u2014 "),fO=n(r0e,"A",{href:!0});var Zct=s(fO);fgr=r(Zct,"TFLongformerForTokenClassification"),Zct.forEach(t),mgr=r(r0e," (Longformer model)"),r0e.forEach(t),ggr=i(oe),WF=n(oe,"LI",{});var t0e=s(WF);h_e=n(t0e,"STRONG",{});var eft=s(h_e);hgr=r(eft,"mobilebert"),eft.forEach(t),pgr=r(t0e," \u2014 "),mO=n(t0e,"A",{href:!0});var oft=s(mO);_gr=r(oft,"TFMobileBertForTokenClassification"),oft.forEach(t),ugr=r(t0e," (MobileBERT model)"),t0e.forEach(t),bgr=i(oe),QF=n(oe,"LI",{});var a0e=s(QF);p_e=n(a0e,"STRONG",{});var rft=s(p_e);vgr=r(rft,"mpnet"),rft.forEach(t),Tgr=r(a0e," \u2014 "),gO=n(a0e,"A",{href:!0});var tft=s(gO);Fgr=r(tft,"TFMPNetForTokenClassification"),tft.forEach(t),Cgr=r(a0e," (MPNet model)"),a0e.forEach(t),Mgr=i(oe),HF=n(oe,"LI",{});var n0e=s(HF);__e=n(n0e,"STRONG",{});var aft=s(__e);Egr=r(aft,"rembert"),aft.forEach(t),ygr=r(n0e," \u2014 "),hO=n(n0e,"A",{href:!0});var nft=s(hO);wgr=r(nft,"TFRemBertForTokenClassification"),nft.forEach(t),Agr=r(n0e," (RemBERT model)"),n0e.forEach(t),Lgr=i(oe),UF=n(oe,"LI",{});var s0e=s(UF);u_e=n(s0e,"STRONG",{});var sft=s(u_e);Bgr=r(sft,"roberta"),sft.forEach(t),xgr=r(s0e," \u2014 "),pO=n(s0e,"A",{href:!0});var lft=s(pO);kgr=r(lft,"TFRobertaForTokenClassification"),lft.forEach(t),Rgr=r(s0e," (RoBERTa model)"),s0e.forEach(t),Sgr=i(oe),JF=n(oe,"LI",{});var l0e=s(JF);b_e=n(l0e,"STRONG",{});var ift=s(b_e);Pgr=r(ift,"roformer"),ift.forEach(t),$gr=r(l0e," \u2014 "),_O=n(l0e,"A",{href:!0});var dft=s(_O);Igr=r(dft,"TFRoFormerForTokenClassification"),dft.forEach(t),Dgr=r(l0e," (RoFormer model)"),l0e.forEach(t),jgr=i(oe),YF=n(oe,"LI",{});var i0e=s(YF);v_e=n(i0e,"STRONG",{});var cft=s(v_e);Ngr=r(cft,"xlm"),cft.forEach(t),qgr=r(i0e," \u2014 "),uO=n(i0e,"A",{href:!0});var fft=s(uO);Ggr=r(fft,"TFXLMForTokenClassification"),fft.forEach(t),Ogr=r(i0e," (XLM model)"),i0e.forEach(t),Xgr=i(oe),KF=n(oe,"LI",{});var d0e=s(KF);T_e=n(d0e,"STRONG",{});var mft=s(T_e);Vgr=r(mft,"xlm-roberta"),mft.forEach(t),zgr=r(d0e," \u2014 "),bO=n(d0e,"A",{href:!0});var gft=s(bO);Wgr=r(gft,"TFXLMRobertaForTokenClassification"),gft.forEach(t),Qgr=r(d0e," (XLM-RoBERTa model)"),d0e.forEach(t),Hgr=i(oe),ZF=n(oe,"LI",{});var c0e=s(ZF);F_e=n(c0e,"STRONG",{});var hft=s(F_e);Ugr=r(hft,"xlnet"),hft.forEach(t),Jgr=r(c0e," \u2014 "),vO=n(c0e,"A",{href:!0});var pft=s(vO);Ygr=r(pft,"TFXLNetForTokenClassification"),pft.forEach(t),Kgr=r(c0e," (XLNet model)"),c0e.forEach(t),oe.forEach(t),Zgr=i(va),C_e=n(va,"P",{});var _ft=s(C_e);ehr=r(_ft,"Examples:"),_ft.forEach(t),ohr=i(va),m(c6.$$.fragment,va),va.forEach(t),Ul.forEach(t),qBe=i(c),kc=n(c,"H2",{class:!0});var Jke=s(kc);e9=n(Jke,"A",{id:!0,class:!0,href:!0});var uft=s(e9);M_e=n(uft,"SPAN",{});var bft=s(M_e);m(f6.$$.fragment,bft),bft.forEach(t),uft.forEach(t),rhr=i(Jke),E_e=n(Jke,"SPAN",{});var vft=s(E_e);thr=r(vft,"TFAutoModelForQuestionAnswering"),vft.forEach(t),Jke.forEach(t),GBe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(m6.$$.fragment,Yl),ahr=i(Yl),Rc=n(Yl,"P",{});var qz=s(Rc);nhr=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),y_e=n(qz,"CODE",{});var Tft=s(y_e);shr=r(Tft,"from_pretrained()"),Tft.forEach(t),lhr=r(qz,"class method or the "),w_e=n(qz,"CODE",{});var Fft=s(w_e);ihr=r(Fft,"from_config()"),Fft.forEach(t),dhr=r(qz,`class
method.`),qz.forEach(t),chr=i(Yl),g6=n(Yl,"P",{});var Yke=s(g6);fhr=r(Yke,"This class cannot be instantiated directly using "),A_e=n(Yke,"CODE",{});var Cft=s(A_e);mhr=r(Cft,"__init__()"),Cft.forEach(t),ghr=r(Yke," (throws an error)."),Yke.forEach(t),hhr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(h6.$$.fragment,Kl),phr=i(Kl),L_e=n(Kl,"P",{});var Mft=s(L_e);_hr=r(Mft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mft.forEach(t),uhr=i(Kl),Sc=n(Kl,"P",{});var Gz=s(Sc);bhr=r(Gz,`Note:
Loading a model from its configuration file does `),B_e=n(Gz,"STRONG",{});var Eft=s(B_e);vhr=r(Eft,"not"),Eft.forEach(t),Thr=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),x_e=n(Gz,"CODE",{});var yft=s(x_e);Fhr=r(yft,"from_pretrained()"),yft.forEach(t),Chr=r(Gz,"to load the model weights."),Gz.forEach(t),Mhr=i(Kl),k_e=n(Kl,"P",{});var wft=s(k_e);Ehr=r(wft,"Examples:"),wft.forEach(t),yhr=i(Kl),m(p6.$$.fragment,Kl),Kl.forEach(t),whr=i(Yl),Mo=n(Yl,"DIV",{class:!0});var Ta=s(Mo);m(_6.$$.fragment,Ta),Ahr=i(Ta),R_e=n(Ta,"P",{});var Aft=s(R_e);Lhr=r(Aft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Aft.forEach(t),Bhr=i(Ta),Tn=n(Ta,"P",{});var aM=s(Tn);xhr=r(aM,"The model class to instantiate is selected based on the "),S_e=n(aM,"CODE",{});var Lft=s(S_e);khr=r(Lft,"model_type"),Lft.forEach(t),Rhr=r(aM,` property of the config object (either
passed as an argument or loaded from `),P_e=n(aM,"CODE",{});var Bft=s(P_e);Shr=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),Phr=r(aM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(aM,"CODE",{});var xft=s($_e);$hr=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),Ihr=r(aM,":"),aM.forEach(t),Dhr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);o9=n(re,"LI",{});var f0e=s(o9);I_e=n(f0e,"STRONG",{});var kft=s(I_e);jhr=r(kft,"albert"),kft.forEach(t),Nhr=r(f0e," \u2014 "),TO=n(f0e,"A",{href:!0});var Rft=s(TO);qhr=r(Rft,"TFAlbertForQuestionAnswering"),Rft.forEach(t),Ghr=r(f0e," (ALBERT model)"),f0e.forEach(t),Ohr=i(re),r9=n(re,"LI",{});var m0e=s(r9);D_e=n(m0e,"STRONG",{});var Sft=s(D_e);Xhr=r(Sft,"bert"),Sft.forEach(t),Vhr=r(m0e," \u2014 "),FO=n(m0e,"A",{href:!0});var Pft=s(FO);zhr=r(Pft,"TFBertForQuestionAnswering"),Pft.forEach(t),Whr=r(m0e," (BERT model)"),m0e.forEach(t),Qhr=i(re),t9=n(re,"LI",{});var g0e=s(t9);j_e=n(g0e,"STRONG",{});var $ft=s(j_e);Hhr=r($ft,"camembert"),$ft.forEach(t),Uhr=r(g0e," \u2014 "),CO=n(g0e,"A",{href:!0});var Ift=s(CO);Jhr=r(Ift,"TFCamembertForQuestionAnswering"),Ift.forEach(t),Yhr=r(g0e," (CamemBERT model)"),g0e.forEach(t),Khr=i(re),a9=n(re,"LI",{});var h0e=s(a9);N_e=n(h0e,"STRONG",{});var Dft=s(N_e);Zhr=r(Dft,"convbert"),Dft.forEach(t),epr=r(h0e," \u2014 "),MO=n(h0e,"A",{href:!0});var jft=s(MO);opr=r(jft,"TFConvBertForQuestionAnswering"),jft.forEach(t),rpr=r(h0e," (ConvBERT model)"),h0e.forEach(t),tpr=i(re),n9=n(re,"LI",{});var p0e=s(n9);q_e=n(p0e,"STRONG",{});var Nft=s(q_e);apr=r(Nft,"deberta"),Nft.forEach(t),npr=r(p0e," \u2014 "),EO=n(p0e,"A",{href:!0});var qft=s(EO);spr=r(qft,"TFDebertaForQuestionAnswering"),qft.forEach(t),lpr=r(p0e," (DeBERTa model)"),p0e.forEach(t),ipr=i(re),s9=n(re,"LI",{});var _0e=s(s9);G_e=n(_0e,"STRONG",{});var Gft=s(G_e);dpr=r(Gft,"deberta-v2"),Gft.forEach(t),cpr=r(_0e," \u2014 "),yO=n(_0e,"A",{href:!0});var Oft=s(yO);fpr=r(Oft,"TFDebertaV2ForQuestionAnswering"),Oft.forEach(t),mpr=r(_0e," (DeBERTa-v2 model)"),_0e.forEach(t),gpr=i(re),l9=n(re,"LI",{});var u0e=s(l9);O_e=n(u0e,"STRONG",{});var Xft=s(O_e);hpr=r(Xft,"distilbert"),Xft.forEach(t),ppr=r(u0e," \u2014 "),wO=n(u0e,"A",{href:!0});var Vft=s(wO);_pr=r(Vft,"TFDistilBertForQuestionAnswering"),Vft.forEach(t),upr=r(u0e," (DistilBERT model)"),u0e.forEach(t),bpr=i(re),i9=n(re,"LI",{});var b0e=s(i9);X_e=n(b0e,"STRONG",{});var zft=s(X_e);vpr=r(zft,"electra"),zft.forEach(t),Tpr=r(b0e," \u2014 "),AO=n(b0e,"A",{href:!0});var Wft=s(AO);Fpr=r(Wft,"TFElectraForQuestionAnswering"),Wft.forEach(t),Cpr=r(b0e," (ELECTRA model)"),b0e.forEach(t),Mpr=i(re),d9=n(re,"LI",{});var v0e=s(d9);V_e=n(v0e,"STRONG",{});var Qft=s(V_e);Epr=r(Qft,"flaubert"),Qft.forEach(t),ypr=r(v0e," \u2014 "),LO=n(v0e,"A",{href:!0});var Hft=s(LO);wpr=r(Hft,"TFFlaubertForQuestionAnsweringSimple"),Hft.forEach(t),Apr=r(v0e," (FlauBERT model)"),v0e.forEach(t),Lpr=i(re),c9=n(re,"LI",{});var T0e=s(c9);z_e=n(T0e,"STRONG",{});var Uft=s(z_e);Bpr=r(Uft,"funnel"),Uft.forEach(t),xpr=r(T0e," \u2014 "),BO=n(T0e,"A",{href:!0});var Jft=s(BO);kpr=r(Jft,"TFFunnelForQuestionAnswering"),Jft.forEach(t),Rpr=r(T0e," (Funnel Transformer model)"),T0e.forEach(t),Spr=i(re),f9=n(re,"LI",{});var F0e=s(f9);W_e=n(F0e,"STRONG",{});var Yft=s(W_e);Ppr=r(Yft,"longformer"),Yft.forEach(t),$pr=r(F0e," \u2014 "),xO=n(F0e,"A",{href:!0});var Kft=s(xO);Ipr=r(Kft,"TFLongformerForQuestionAnswering"),Kft.forEach(t),Dpr=r(F0e," (Longformer model)"),F0e.forEach(t),jpr=i(re),m9=n(re,"LI",{});var C0e=s(m9);Q_e=n(C0e,"STRONG",{});var Zft=s(Q_e);Npr=r(Zft,"mobilebert"),Zft.forEach(t),qpr=r(C0e," \u2014 "),kO=n(C0e,"A",{href:!0});var emt=s(kO);Gpr=r(emt,"TFMobileBertForQuestionAnswering"),emt.forEach(t),Opr=r(C0e," (MobileBERT model)"),C0e.forEach(t),Xpr=i(re),g9=n(re,"LI",{});var M0e=s(g9);H_e=n(M0e,"STRONG",{});var omt=s(H_e);Vpr=r(omt,"mpnet"),omt.forEach(t),zpr=r(M0e," \u2014 "),RO=n(M0e,"A",{href:!0});var rmt=s(RO);Wpr=r(rmt,"TFMPNetForQuestionAnswering"),rmt.forEach(t),Qpr=r(M0e," (MPNet model)"),M0e.forEach(t),Hpr=i(re),h9=n(re,"LI",{});var E0e=s(h9);U_e=n(E0e,"STRONG",{});var tmt=s(U_e);Upr=r(tmt,"rembert"),tmt.forEach(t),Jpr=r(E0e," \u2014 "),SO=n(E0e,"A",{href:!0});var amt=s(SO);Ypr=r(amt,"TFRemBertForQuestionAnswering"),amt.forEach(t),Kpr=r(E0e," (RemBERT model)"),E0e.forEach(t),Zpr=i(re),p9=n(re,"LI",{});var y0e=s(p9);J_e=n(y0e,"STRONG",{});var nmt=s(J_e);e_r=r(nmt,"roberta"),nmt.forEach(t),o_r=r(y0e," \u2014 "),PO=n(y0e,"A",{href:!0});var smt=s(PO);r_r=r(smt,"TFRobertaForQuestionAnswering"),smt.forEach(t),t_r=r(y0e," (RoBERTa model)"),y0e.forEach(t),a_r=i(re),_9=n(re,"LI",{});var w0e=s(_9);Y_e=n(w0e,"STRONG",{});var lmt=s(Y_e);n_r=r(lmt,"roformer"),lmt.forEach(t),s_r=r(w0e," \u2014 "),$O=n(w0e,"A",{href:!0});var imt=s($O);l_r=r(imt,"TFRoFormerForQuestionAnswering"),imt.forEach(t),i_r=r(w0e," (RoFormer model)"),w0e.forEach(t),d_r=i(re),u9=n(re,"LI",{});var A0e=s(u9);K_e=n(A0e,"STRONG",{});var dmt=s(K_e);c_r=r(dmt,"xlm"),dmt.forEach(t),f_r=r(A0e," \u2014 "),IO=n(A0e,"A",{href:!0});var cmt=s(IO);m_r=r(cmt,"TFXLMForQuestionAnsweringSimple"),cmt.forEach(t),g_r=r(A0e," (XLM model)"),A0e.forEach(t),h_r=i(re),b9=n(re,"LI",{});var L0e=s(b9);Z_e=n(L0e,"STRONG",{});var fmt=s(Z_e);p_r=r(fmt,"xlm-roberta"),fmt.forEach(t),__r=r(L0e," \u2014 "),DO=n(L0e,"A",{href:!0});var mmt=s(DO);u_r=r(mmt,"TFXLMRobertaForQuestionAnswering"),mmt.forEach(t),b_r=r(L0e," (XLM-RoBERTa model)"),L0e.forEach(t),v_r=i(re),v9=n(re,"LI",{});var B0e=s(v9);eue=n(B0e,"STRONG",{});var gmt=s(eue);T_r=r(gmt,"xlnet"),gmt.forEach(t),F_r=r(B0e," \u2014 "),jO=n(B0e,"A",{href:!0});var hmt=s(jO);C_r=r(hmt,"TFXLNetForQuestionAnsweringSimple"),hmt.forEach(t),M_r=r(B0e," (XLNet model)"),B0e.forEach(t),re.forEach(t),E_r=i(Ta),oue=n(Ta,"P",{});var pmt=s(oue);y_r=r(pmt,"Examples:"),pmt.forEach(t),w_r=i(Ta),m(u6.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),OBe=i(c),Pc=n(c,"H2",{class:!0});var Kke=s(Pc);T9=n(Kke,"A",{id:!0,class:!0,href:!0});var _mt=s(T9);rue=n(_mt,"SPAN",{});var umt=s(rue);m(b6.$$.fragment,umt),umt.forEach(t),_mt.forEach(t),A_r=i(Kke),tue=n(Kke,"SPAN",{});var bmt=s(tue);L_r=r(bmt,"TFAutoModelForVision2Seq"),bmt.forEach(t),Kke.forEach(t),XBe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(v6.$$.fragment,Zl),B_r=i(Zl),$c=n(Zl,"P",{});var Oz=s($c);x_r=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aue=n(Oz,"CODE",{});var vmt=s(aue);k_r=r(vmt,"from_pretrained()"),vmt.forEach(t),R_r=r(Oz,"class method or the "),nue=n(Oz,"CODE",{});var Tmt=s(nue);S_r=r(Tmt,"from_config()"),Tmt.forEach(t),P_r=r(Oz,`class
method.`),Oz.forEach(t),$_r=i(Zl),T6=n(Zl,"P",{});var Zke=s(T6);I_r=r(Zke,"This class cannot be instantiated directly using "),sue=n(Zke,"CODE",{});var Fmt=s(sue);D_r=r(Fmt,"__init__()"),Fmt.forEach(t),j_r=r(Zke," (throws an error)."),Zke.forEach(t),N_r=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(F6.$$.fragment,ei),q_r=i(ei),lue=n(ei,"P",{});var Cmt=s(lue);G_r=r(Cmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cmt.forEach(t),O_r=i(ei),Ic=n(ei,"P",{});var Xz=s(Ic);X_r=r(Xz,`Note:
Loading a model from its configuration file does `),iue=n(Xz,"STRONG",{});var Mmt=s(iue);V_r=r(Mmt,"not"),Mmt.forEach(t),z_r=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),due=n(Xz,"CODE",{});var Emt=s(due);W_r=r(Emt,"from_pretrained()"),Emt.forEach(t),Q_r=r(Xz,"to load the model weights."),Xz.forEach(t),H_r=i(ei),cue=n(ei,"P",{});var ymt=s(cue);U_r=r(ymt,"Examples:"),ymt.forEach(t),J_r=i(ei),m(C6.$$.fragment,ei),ei.forEach(t),Y_r=i(Zl),Eo=n(Zl,"DIV",{class:!0});var Fa=s(Eo);m(M6.$$.fragment,Fa),K_r=i(Fa),fue=n(Fa,"P",{});var wmt=s(fue);Z_r=r(wmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wmt.forEach(t),eur=i(Fa),Fn=n(Fa,"P",{});var nM=s(Fn);our=r(nM,"The model class to instantiate is selected based on the "),mue=n(nM,"CODE",{});var Amt=s(mue);rur=r(Amt,"model_type"),Amt.forEach(t),tur=r(nM,` property of the config object (either
passed as an argument or loaded from `),gue=n(nM,"CODE",{});var Lmt=s(gue);aur=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),nur=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(nM,"CODE",{});var Bmt=s(hue);sur=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),lur=r(nM,":"),nM.forEach(t),iur=i(Fa),pue=n(Fa,"UL",{});var xmt=s(pue);F9=n(xmt,"LI",{});var x0e=s(F9);_ue=n(x0e,"STRONG",{});var kmt=s(_ue);dur=r(kmt,"vision-encoder-decoder"),kmt.forEach(t),cur=r(x0e," \u2014 "),NO=n(x0e,"A",{href:!0});var Rmt=s(NO);fur=r(Rmt,"TFVisionEncoderDecoderModel"),Rmt.forEach(t),mur=r(x0e," (Vision Encoder decoder model)"),x0e.forEach(t),xmt.forEach(t),gur=i(Fa),uue=n(Fa,"P",{});var Smt=s(uue);hur=r(Smt,"Examples:"),Smt.forEach(t),pur=i(Fa),m(E6.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),VBe=i(c),Dc=n(c,"H2",{class:!0});var eRe=s(Dc);C9=n(eRe,"A",{id:!0,class:!0,href:!0});var Pmt=s(C9);bue=n(Pmt,"SPAN",{});var $mt=s(bue);m(y6.$$.fragment,$mt),$mt.forEach(t),Pmt.forEach(t),_ur=i(eRe),vue=n(eRe,"SPAN",{});var Imt=s(vue);uur=r(Imt,"TFAutoModelForSpeechSeq2Seq"),Imt.forEach(t),eRe.forEach(t),zBe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(w6.$$.fragment,oi),bur=i(oi),jc=n(oi,"P",{});var Vz=s(jc);vur=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tue=n(Vz,"CODE",{});var Dmt=s(Tue);Tur=r(Dmt,"from_pretrained()"),Dmt.forEach(t),Fur=r(Vz,"class method or the "),Fue=n(Vz,"CODE",{});var jmt=s(Fue);Cur=r(jmt,"from_config()"),jmt.forEach(t),Mur=r(Vz,`class
method.`),Vz.forEach(t),Eur=i(oi),A6=n(oi,"P",{});var oRe=s(A6);yur=r(oRe,"This class cannot be instantiated directly using "),Cue=n(oRe,"CODE",{});var Nmt=s(Cue);wur=r(Nmt,"__init__()"),Nmt.forEach(t),Aur=r(oRe," (throws an error)."),oRe.forEach(t),Lur=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(L6.$$.fragment,ri),Bur=i(ri),Mue=n(ri,"P",{});var qmt=s(Mue);xur=r(qmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qmt.forEach(t),kur=i(ri),Nc=n(ri,"P",{});var zz=s(Nc);Rur=r(zz,`Note:
Loading a model from its configuration file does `),Eue=n(zz,"STRONG",{});var Gmt=s(Eue);Sur=r(Gmt,"not"),Gmt.forEach(t),Pur=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yue=n(zz,"CODE",{});var Omt=s(yue);$ur=r(Omt,"from_pretrained()"),Omt.forEach(t),Iur=r(zz,"to load the model weights."),zz.forEach(t),Dur=i(ri),wue=n(ri,"P",{});var Xmt=s(wue);jur=r(Xmt,"Examples:"),Xmt.forEach(t),Nur=i(ri),m(B6.$$.fragment,ri),ri.forEach(t),qur=i(oi),yo=n(oi,"DIV",{class:!0});var Ca=s(yo);m(x6.$$.fragment,Ca),Gur=i(Ca),Aue=n(Ca,"P",{});var Vmt=s(Aue);Our=r(Vmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vmt.forEach(t),Xur=i(Ca),Cn=n(Ca,"P",{});var sM=s(Cn);Vur=r(sM,"The model class to instantiate is selected based on the "),Lue=n(sM,"CODE",{});var zmt=s(Lue);zur=r(zmt,"model_type"),zmt.forEach(t),Wur=r(sM,` property of the config object (either
passed as an argument or loaded from `),Bue=n(sM,"CODE",{});var Wmt=s(Bue);Qur=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),Hur=r(sM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(sM,"CODE",{});var Qmt=s(xue);Uur=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),Jur=r(sM,":"),sM.forEach(t),Yur=i(Ca),kue=n(Ca,"UL",{});var Hmt=s(kue);M9=n(Hmt,"LI",{});var k0e=s(M9);Rue=n(k0e,"STRONG",{});var Umt=s(Rue);Kur=r(Umt,"speech_to_text"),Umt.forEach(t),Zur=r(k0e," \u2014 "),qO=n(k0e,"A",{href:!0});var Jmt=s(qO);e5r=r(Jmt,"TFSpeech2TextForConditionalGeneration"),Jmt.forEach(t),o5r=r(k0e," (Speech2Text model)"),k0e.forEach(t),Hmt.forEach(t),r5r=i(Ca),Sue=n(Ca,"P",{});var Ymt=s(Sue);t5r=r(Ymt,"Examples:"),Ymt.forEach(t),a5r=i(Ca),m(k6.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),WBe=i(c),qc=n(c,"H2",{class:!0});var rRe=s(qc);E9=n(rRe,"A",{id:!0,class:!0,href:!0});var Kmt=s(E9);Pue=n(Kmt,"SPAN",{});var Zmt=s(Pue);m(R6.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),n5r=i(rRe),$ue=n(rRe,"SPAN",{});var egt=s($ue);s5r=r(egt,"FlaxAutoModel"),egt.forEach(t),rRe.forEach(t),QBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(S6.$$.fragment,ti),l5r=i(ti),Gc=n(ti,"P",{});var Wz=s(Gc);i5r=r(Wz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Iue=n(Wz,"CODE",{});var ogt=s(Iue);d5r=r(ogt,"from_pretrained()"),ogt.forEach(t),c5r=r(Wz,"class method or the "),Due=n(Wz,"CODE",{});var rgt=s(Due);f5r=r(rgt,"from_config()"),rgt.forEach(t),m5r=r(Wz,`class
method.`),Wz.forEach(t),g5r=i(ti),P6=n(ti,"P",{});var tRe=s(P6);h5r=r(tRe,"This class cannot be instantiated directly using "),jue=n(tRe,"CODE",{});var tgt=s(jue);p5r=r(tgt,"__init__()"),tgt.forEach(t),_5r=r(tRe," (throws an error)."),tRe.forEach(t),u5r=i(ti),Ft=n(ti,"DIV",{class:!0});var ai=s(Ft);m($6.$$.fragment,ai),b5r=i(ai),Nue=n(ai,"P",{});var agt=s(Nue);v5r=r(agt,"Instantiates one of the base model classes of the library from a configuration."),agt.forEach(t),T5r=i(ai),Oc=n(ai,"P",{});var Qz=s(Oc);F5r=r(Qz,`Note:
Loading a model from its configuration file does `),que=n(Qz,"STRONG",{});var ngt=s(que);C5r=r(ngt,"not"),ngt.forEach(t),M5r=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gue=n(Qz,"CODE",{});var sgt=s(Gue);E5r=r(sgt,"from_pretrained()"),sgt.forEach(t),y5r=r(Qz,"to load the model weights."),Qz.forEach(t),w5r=i(ai),Oue=n(ai,"P",{});var lgt=s(Oue);A5r=r(lgt,"Examples:"),lgt.forEach(t),L5r=i(ai),m(I6.$$.fragment,ai),ai.forEach(t),B5r=i(ti),wo=n(ti,"DIV",{class:!0});var Ma=s(wo);m(D6.$$.fragment,Ma),x5r=i(Ma),Xue=n(Ma,"P",{});var igt=s(Xue);k5r=r(igt,"Instantiate one of the base model classes of the library from a pretrained model."),igt.forEach(t),R5r=i(Ma),Mn=n(Ma,"P",{});var lM=s(Mn);S5r=r(lM,"The model class to instantiate is selected based on the "),Vue=n(lM,"CODE",{});var dgt=s(Vue);P5r=r(dgt,"model_type"),dgt.forEach(t),$5r=r(lM,` property of the config object (either
passed as an argument or loaded from `),zue=n(lM,"CODE",{});var cgt=s(zue);I5r=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),D5r=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(lM,"CODE",{});var fgt=s(Wue);j5r=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),N5r=r(lM,":"),lM.forEach(t),q5r=i(Ma),z=n(Ma,"UL",{});var Q=s(z);y9=n(Q,"LI",{});var R0e=s(y9);Que=n(R0e,"STRONG",{});var mgt=s(Que);G5r=r(mgt,"albert"),mgt.forEach(t),O5r=r(R0e," \u2014 "),GO=n(R0e,"A",{href:!0});var ggt=s(GO);X5r=r(ggt,"FlaxAlbertModel"),ggt.forEach(t),V5r=r(R0e," (ALBERT model)"),R0e.forEach(t),z5r=i(Q),w9=n(Q,"LI",{});var S0e=s(w9);Hue=n(S0e,"STRONG",{});var hgt=s(Hue);W5r=r(hgt,"bart"),hgt.forEach(t),Q5r=r(S0e," \u2014 "),OO=n(S0e,"A",{href:!0});var pgt=s(OO);H5r=r(pgt,"FlaxBartModel"),pgt.forEach(t),U5r=r(S0e," (BART model)"),S0e.forEach(t),J5r=i(Q),A9=n(Q,"LI",{});var P0e=s(A9);Uue=n(P0e,"STRONG",{});var _gt=s(Uue);Y5r=r(_gt,"beit"),_gt.forEach(t),K5r=r(P0e," \u2014 "),XO=n(P0e,"A",{href:!0});var ugt=s(XO);Z5r=r(ugt,"FlaxBeitModel"),ugt.forEach(t),e1r=r(P0e," (BEiT model)"),P0e.forEach(t),o1r=i(Q),L9=n(Q,"LI",{});var $0e=s(L9);Jue=n($0e,"STRONG",{});var bgt=s(Jue);r1r=r(bgt,"bert"),bgt.forEach(t),t1r=r($0e," \u2014 "),VO=n($0e,"A",{href:!0});var vgt=s(VO);a1r=r(vgt,"FlaxBertModel"),vgt.forEach(t),n1r=r($0e," (BERT model)"),$0e.forEach(t),s1r=i(Q),B9=n(Q,"LI",{});var I0e=s(B9);Yue=n(I0e,"STRONG",{});var Tgt=s(Yue);l1r=r(Tgt,"big_bird"),Tgt.forEach(t),i1r=r(I0e," \u2014 "),zO=n(I0e,"A",{href:!0});var Fgt=s(zO);d1r=r(Fgt,"FlaxBigBirdModel"),Fgt.forEach(t),c1r=r(I0e," (BigBird model)"),I0e.forEach(t),f1r=i(Q),x9=n(Q,"LI",{});var D0e=s(x9);Kue=n(D0e,"STRONG",{});var Cgt=s(Kue);m1r=r(Cgt,"blenderbot"),Cgt.forEach(t),g1r=r(D0e," \u2014 "),WO=n(D0e,"A",{href:!0});var Mgt=s(WO);h1r=r(Mgt,"FlaxBlenderbotModel"),Mgt.forEach(t),p1r=r(D0e," (Blenderbot model)"),D0e.forEach(t),_1r=i(Q),k9=n(Q,"LI",{});var j0e=s(k9);Zue=n(j0e,"STRONG",{});var Egt=s(Zue);u1r=r(Egt,"blenderbot-small"),Egt.forEach(t),b1r=r(j0e," \u2014 "),QO=n(j0e,"A",{href:!0});var ygt=s(QO);v1r=r(ygt,"FlaxBlenderbotSmallModel"),ygt.forEach(t),T1r=r(j0e," (BlenderbotSmall model)"),j0e.forEach(t),F1r=i(Q),R9=n(Q,"LI",{});var N0e=s(R9);e5e=n(N0e,"STRONG",{});var wgt=s(e5e);C1r=r(wgt,"clip"),wgt.forEach(t),M1r=r(N0e," \u2014 "),HO=n(N0e,"A",{href:!0});var Agt=s(HO);E1r=r(Agt,"FlaxCLIPModel"),Agt.forEach(t),y1r=r(N0e," (CLIP model)"),N0e.forEach(t),w1r=i(Q),S9=n(Q,"LI",{});var q0e=s(S9);o5e=n(q0e,"STRONG",{});var Lgt=s(o5e);A1r=r(Lgt,"distilbert"),Lgt.forEach(t),L1r=r(q0e," \u2014 "),UO=n(q0e,"A",{href:!0});var Bgt=s(UO);B1r=r(Bgt,"FlaxDistilBertModel"),Bgt.forEach(t),x1r=r(q0e," (DistilBERT model)"),q0e.forEach(t),k1r=i(Q),P9=n(Q,"LI",{});var G0e=s(P9);r5e=n(G0e,"STRONG",{});var xgt=s(r5e);R1r=r(xgt,"electra"),xgt.forEach(t),S1r=r(G0e," \u2014 "),JO=n(G0e,"A",{href:!0});var kgt=s(JO);P1r=r(kgt,"FlaxElectraModel"),kgt.forEach(t),$1r=r(G0e," (ELECTRA model)"),G0e.forEach(t),I1r=i(Q),$9=n(Q,"LI",{});var O0e=s($9);t5e=n(O0e,"STRONG",{});var Rgt=s(t5e);D1r=r(Rgt,"gpt2"),Rgt.forEach(t),j1r=r(O0e," \u2014 "),YO=n(O0e,"A",{href:!0});var Sgt=s(YO);N1r=r(Sgt,"FlaxGPT2Model"),Sgt.forEach(t),q1r=r(O0e," (OpenAI GPT-2 model)"),O0e.forEach(t),G1r=i(Q),I9=n(Q,"LI",{});var X0e=s(I9);a5e=n(X0e,"STRONG",{});var Pgt=s(a5e);O1r=r(Pgt,"gpt_neo"),Pgt.forEach(t),X1r=r(X0e," \u2014 "),KO=n(X0e,"A",{href:!0});var $gt=s(KO);V1r=r($gt,"FlaxGPTNeoModel"),$gt.forEach(t),z1r=r(X0e," (GPT Neo model)"),X0e.forEach(t),W1r=i(Q),D9=n(Q,"LI",{});var V0e=s(D9);n5e=n(V0e,"STRONG",{});var Igt=s(n5e);Q1r=r(Igt,"gptj"),Igt.forEach(t),H1r=r(V0e," \u2014 "),ZO=n(V0e,"A",{href:!0});var Dgt=s(ZO);U1r=r(Dgt,"FlaxGPTJModel"),Dgt.forEach(t),J1r=r(V0e," (GPT-J model)"),V0e.forEach(t),Y1r=i(Q),j9=n(Q,"LI",{});var z0e=s(j9);s5e=n(z0e,"STRONG",{});var jgt=s(s5e);K1r=r(jgt,"marian"),jgt.forEach(t),Z1r=r(z0e," \u2014 "),eX=n(z0e,"A",{href:!0});var Ngt=s(eX);ebr=r(Ngt,"FlaxMarianModel"),Ngt.forEach(t),obr=r(z0e," (Marian model)"),z0e.forEach(t),rbr=i(Q),N9=n(Q,"LI",{});var W0e=s(N9);l5e=n(W0e,"STRONG",{});var qgt=s(l5e);tbr=r(qgt,"mbart"),qgt.forEach(t),abr=r(W0e," \u2014 "),oX=n(W0e,"A",{href:!0});var Ggt=s(oX);nbr=r(Ggt,"FlaxMBartModel"),Ggt.forEach(t),sbr=r(W0e," (mBART model)"),W0e.forEach(t),lbr=i(Q),q9=n(Q,"LI",{});var Q0e=s(q9);i5e=n(Q0e,"STRONG",{});var Ogt=s(i5e);ibr=r(Ogt,"mt5"),Ogt.forEach(t),dbr=r(Q0e," \u2014 "),rX=n(Q0e,"A",{href:!0});var Xgt=s(rX);cbr=r(Xgt,"FlaxMT5Model"),Xgt.forEach(t),fbr=r(Q0e," (mT5 model)"),Q0e.forEach(t),mbr=i(Q),G9=n(Q,"LI",{});var H0e=s(G9);d5e=n(H0e,"STRONG",{});var Vgt=s(d5e);gbr=r(Vgt,"pegasus"),Vgt.forEach(t),hbr=r(H0e," \u2014 "),tX=n(H0e,"A",{href:!0});var zgt=s(tX);pbr=r(zgt,"FlaxPegasusModel"),zgt.forEach(t),_br=r(H0e," (Pegasus model)"),H0e.forEach(t),ubr=i(Q),O9=n(Q,"LI",{});var U0e=s(O9);c5e=n(U0e,"STRONG",{});var Wgt=s(c5e);bbr=r(Wgt,"roberta"),Wgt.forEach(t),vbr=r(U0e," \u2014 "),aX=n(U0e,"A",{href:!0});var Qgt=s(aX);Tbr=r(Qgt,"FlaxRobertaModel"),Qgt.forEach(t),Fbr=r(U0e," (RoBERTa model)"),U0e.forEach(t),Cbr=i(Q),X9=n(Q,"LI",{});var J0e=s(X9);f5e=n(J0e,"STRONG",{});var Hgt=s(f5e);Mbr=r(Hgt,"roformer"),Hgt.forEach(t),Ebr=r(J0e," \u2014 "),nX=n(J0e,"A",{href:!0});var Ugt=s(nX);ybr=r(Ugt,"FlaxRoFormerModel"),Ugt.forEach(t),wbr=r(J0e," (RoFormer model)"),J0e.forEach(t),Abr=i(Q),V9=n(Q,"LI",{});var Y0e=s(V9);m5e=n(Y0e,"STRONG",{});var Jgt=s(m5e);Lbr=r(Jgt,"t5"),Jgt.forEach(t),Bbr=r(Y0e," \u2014 "),sX=n(Y0e,"A",{href:!0});var Ygt=s(sX);xbr=r(Ygt,"FlaxT5Model"),Ygt.forEach(t),kbr=r(Y0e," (T5 model)"),Y0e.forEach(t),Rbr=i(Q),z9=n(Q,"LI",{});var K0e=s(z9);g5e=n(K0e,"STRONG",{});var Kgt=s(g5e);Sbr=r(Kgt,"vision-text-dual-encoder"),Kgt.forEach(t),Pbr=r(K0e," \u2014 "),lX=n(K0e,"A",{href:!0});var Zgt=s(lX);$br=r(Zgt,"FlaxVisionTextDualEncoderModel"),Zgt.forEach(t),Ibr=r(K0e," (VisionTextDualEncoder model)"),K0e.forEach(t),Dbr=i(Q),W9=n(Q,"LI",{});var Z0e=s(W9);h5e=n(Z0e,"STRONG",{});var eht=s(h5e);jbr=r(eht,"vit"),eht.forEach(t),Nbr=r(Z0e," \u2014 "),iX=n(Z0e,"A",{href:!0});var oht=s(iX);qbr=r(oht,"FlaxViTModel"),oht.forEach(t),Gbr=r(Z0e," (ViT model)"),Z0e.forEach(t),Obr=i(Q),Q9=n(Q,"LI",{});var eLe=s(Q9);p5e=n(eLe,"STRONG",{});var rht=s(p5e);Xbr=r(rht,"wav2vec2"),rht.forEach(t),Vbr=r(eLe," \u2014 "),dX=n(eLe,"A",{href:!0});var tht=s(dX);zbr=r(tht,"FlaxWav2Vec2Model"),tht.forEach(t),Wbr=r(eLe," (Wav2Vec2 model)"),eLe.forEach(t),Qbr=i(Q),H9=n(Q,"LI",{});var oLe=s(H9);_5e=n(oLe,"STRONG",{});var aht=s(_5e);Hbr=r(aht,"xglm"),aht.forEach(t),Ubr=r(oLe," \u2014 "),cX=n(oLe,"A",{href:!0});var nht=s(cX);Jbr=r(nht,"FlaxXGLMModel"),nht.forEach(t),Ybr=r(oLe," (XGLM model)"),oLe.forEach(t),Q.forEach(t),Kbr=i(Ma),u5e=n(Ma,"P",{});var sht=s(u5e);Zbr=r(sht,"Examples:"),sht.forEach(t),e2r=i(Ma),m(j6.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),HBe=i(c),Xc=n(c,"H2",{class:!0});var aRe=s(Xc);U9=n(aRe,"A",{id:!0,class:!0,href:!0});var lht=s(U9);b5e=n(lht,"SPAN",{});var iht=s(b5e);m(N6.$$.fragment,iht),iht.forEach(t),lht.forEach(t),o2r=i(aRe),v5e=n(aRe,"SPAN",{});var dht=s(v5e);r2r=r(dht,"FlaxAutoModelForCausalLM"),dht.forEach(t),aRe.forEach(t),UBe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(q6.$$.fragment,ni),t2r=i(ni),Vc=n(ni,"P",{});var Hz=s(Vc);a2r=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),T5e=n(Hz,"CODE",{});var cht=s(T5e);n2r=r(cht,"from_pretrained()"),cht.forEach(t),s2r=r(Hz,"class method or the "),F5e=n(Hz,"CODE",{});var fht=s(F5e);l2r=r(fht,"from_config()"),fht.forEach(t),i2r=r(Hz,`class
method.`),Hz.forEach(t),d2r=i(ni),G6=n(ni,"P",{});var nRe=s(G6);c2r=r(nRe,"This class cannot be instantiated directly using "),C5e=n(nRe,"CODE",{});var mht=s(C5e);f2r=r(mht,"__init__()"),mht.forEach(t),m2r=r(nRe," (throws an error)."),nRe.forEach(t),g2r=i(ni),Ct=n(ni,"DIV",{class:!0});var si=s(Ct);m(O6.$$.fragment,si),h2r=i(si),M5e=n(si,"P",{});var ght=s(M5e);p2r=r(ght,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ght.forEach(t),_2r=i(si),zc=n(si,"P",{});var Uz=s(zc);u2r=r(Uz,`Note:
Loading a model from its configuration file does `),E5e=n(Uz,"STRONG",{});var hht=s(E5e);b2r=r(hht,"not"),hht.forEach(t),v2r=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),y5e=n(Uz,"CODE",{});var pht=s(y5e);T2r=r(pht,"from_pretrained()"),pht.forEach(t),F2r=r(Uz,"to load the model weights."),Uz.forEach(t),C2r=i(si),w5e=n(si,"P",{});var _ht=s(w5e);M2r=r(_ht,"Examples:"),_ht.forEach(t),E2r=i(si),m(X6.$$.fragment,si),si.forEach(t),y2r=i(ni),Ao=n(ni,"DIV",{class:!0});var Ea=s(Ao);m(V6.$$.fragment,Ea),w2r=i(Ea),A5e=n(Ea,"P",{});var uht=s(A5e);A2r=r(uht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uht.forEach(t),L2r=i(Ea),En=n(Ea,"P",{});var iM=s(En);B2r=r(iM,"The model class to instantiate is selected based on the "),L5e=n(iM,"CODE",{});var bht=s(L5e);x2r=r(bht,"model_type"),bht.forEach(t),k2r=r(iM,` property of the config object (either
passed as an argument or loaded from `),B5e=n(iM,"CODE",{});var vht=s(B5e);R2r=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),S2r=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(iM,"CODE",{});var Tht=s(x5e);P2r=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),$2r=r(iM,":"),iM.forEach(t),I2r=i(Ea),yn=n(Ea,"UL",{});var dM=s(yn);J9=n(dM,"LI",{});var rLe=s(J9);k5e=n(rLe,"STRONG",{});var Fht=s(k5e);D2r=r(Fht,"gpt2"),Fht.forEach(t),j2r=r(rLe," \u2014 "),fX=n(rLe,"A",{href:!0});var Cht=s(fX);N2r=r(Cht,"FlaxGPT2LMHeadModel"),Cht.forEach(t),q2r=r(rLe," (OpenAI GPT-2 model)"),rLe.forEach(t),G2r=i(dM),Y9=n(dM,"LI",{});var tLe=s(Y9);R5e=n(tLe,"STRONG",{});var Mht=s(R5e);O2r=r(Mht,"gpt_neo"),Mht.forEach(t),X2r=r(tLe," \u2014 "),mX=n(tLe,"A",{href:!0});var Eht=s(mX);V2r=r(Eht,"FlaxGPTNeoForCausalLM"),Eht.forEach(t),z2r=r(tLe," (GPT Neo model)"),tLe.forEach(t),W2r=i(dM),K9=n(dM,"LI",{});var aLe=s(K9);S5e=n(aLe,"STRONG",{});var yht=s(S5e);Q2r=r(yht,"gptj"),yht.forEach(t),H2r=r(aLe," \u2014 "),gX=n(aLe,"A",{href:!0});var wht=s(gX);U2r=r(wht,"FlaxGPTJForCausalLM"),wht.forEach(t),J2r=r(aLe," (GPT-J model)"),aLe.forEach(t),Y2r=i(dM),Z9=n(dM,"LI",{});var nLe=s(Z9);P5e=n(nLe,"STRONG",{});var Aht=s(P5e);K2r=r(Aht,"xglm"),Aht.forEach(t),Z2r=r(nLe," \u2014 "),hX=n(nLe,"A",{href:!0});var Lht=s(hX);evr=r(Lht,"FlaxXGLMForCausalLM"),Lht.forEach(t),ovr=r(nLe," (XGLM model)"),nLe.forEach(t),dM.forEach(t),rvr=i(Ea),$5e=n(Ea,"P",{});var Bht=s($5e);tvr=r(Bht,"Examples:"),Bht.forEach(t),avr=i(Ea),m(z6.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),JBe=i(c),Wc=n(c,"H2",{class:!0});var sRe=s(Wc);eC=n(sRe,"A",{id:!0,class:!0,href:!0});var xht=s(eC);I5e=n(xht,"SPAN",{});var kht=s(I5e);m(W6.$$.fragment,kht),kht.forEach(t),xht.forEach(t),nvr=i(sRe),D5e=n(sRe,"SPAN",{});var Rht=s(D5e);svr=r(Rht,"FlaxAutoModelForPreTraining"),Rht.forEach(t),sRe.forEach(t),YBe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(Q6.$$.fragment,li),lvr=i(li),Qc=n(li,"P",{});var Jz=s(Qc);ivr=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),j5e=n(Jz,"CODE",{});var Sht=s(j5e);dvr=r(Sht,"from_pretrained()"),Sht.forEach(t),cvr=r(Jz,"class method or the "),N5e=n(Jz,"CODE",{});var Pht=s(N5e);fvr=r(Pht,"from_config()"),Pht.forEach(t),mvr=r(Jz,`class
method.`),Jz.forEach(t),gvr=i(li),H6=n(li,"P",{});var lRe=s(H6);hvr=r(lRe,"This class cannot be instantiated directly using "),q5e=n(lRe,"CODE",{});var $ht=s(q5e);pvr=r($ht,"__init__()"),$ht.forEach(t),_vr=r(lRe," (throws an error)."),lRe.forEach(t),uvr=i(li),Mt=n(li,"DIV",{class:!0});var ii=s(Mt);m(U6.$$.fragment,ii),bvr=i(ii),G5e=n(ii,"P",{});var Iht=s(G5e);vvr=r(Iht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Iht.forEach(t),Tvr=i(ii),Hc=n(ii,"P",{});var Yz=s(Hc);Fvr=r(Yz,`Note:
Loading a model from its configuration file does `),O5e=n(Yz,"STRONG",{});var Dht=s(O5e);Cvr=r(Dht,"not"),Dht.forEach(t),Mvr=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),X5e=n(Yz,"CODE",{});var jht=s(X5e);Evr=r(jht,"from_pretrained()"),jht.forEach(t),yvr=r(Yz,"to load the model weights."),Yz.forEach(t),wvr=i(ii),V5e=n(ii,"P",{});var Nht=s(V5e);Avr=r(Nht,"Examples:"),Nht.forEach(t),Lvr=i(ii),m(J6.$$.fragment,ii),ii.forEach(t),Bvr=i(li),Lo=n(li,"DIV",{class:!0});var ya=s(Lo);m(Y6.$$.fragment,ya),xvr=i(ya),z5e=n(ya,"P",{});var qht=s(z5e);kvr=r(qht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qht.forEach(t),Rvr=i(ya),wn=n(ya,"P",{});var cM=s(wn);Svr=r(cM,"The model class to instantiate is selected based on the "),W5e=n(cM,"CODE",{});var Ght=s(W5e);Pvr=r(Ght,"model_type"),Ght.forEach(t),$vr=r(cM,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(cM,"CODE",{});var Oht=s(Q5e);Ivr=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),Dvr=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(cM,"CODE",{});var Xht=s(H5e);jvr=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),Nvr=r(cM,":"),cM.forEach(t),qvr=i(ya),fe=n(ya,"UL",{});var _e=s(fe);oC=n(_e,"LI",{});var sLe=s(oC);U5e=n(sLe,"STRONG",{});var Vht=s(U5e);Gvr=r(Vht,"albert"),Vht.forEach(t),Ovr=r(sLe," \u2014 "),pX=n(sLe,"A",{href:!0});var zht=s(pX);Xvr=r(zht,"FlaxAlbertForPreTraining"),zht.forEach(t),Vvr=r(sLe," (ALBERT model)"),sLe.forEach(t),zvr=i(_e),rC=n(_e,"LI",{});var lLe=s(rC);J5e=n(lLe,"STRONG",{});var Wht=s(J5e);Wvr=r(Wht,"bart"),Wht.forEach(t),Qvr=r(lLe," \u2014 "),_X=n(lLe,"A",{href:!0});var Qht=s(_X);Hvr=r(Qht,"FlaxBartForConditionalGeneration"),Qht.forEach(t),Uvr=r(lLe," (BART model)"),lLe.forEach(t),Jvr=i(_e),tC=n(_e,"LI",{});var iLe=s(tC);Y5e=n(iLe,"STRONG",{});var Hht=s(Y5e);Yvr=r(Hht,"bert"),Hht.forEach(t),Kvr=r(iLe," \u2014 "),uX=n(iLe,"A",{href:!0});var Uht=s(uX);Zvr=r(Uht,"FlaxBertForPreTraining"),Uht.forEach(t),eTr=r(iLe," (BERT model)"),iLe.forEach(t),oTr=i(_e),aC=n(_e,"LI",{});var dLe=s(aC);K5e=n(dLe,"STRONG",{});var Jht=s(K5e);rTr=r(Jht,"big_bird"),Jht.forEach(t),tTr=r(dLe," \u2014 "),bX=n(dLe,"A",{href:!0});var Yht=s(bX);aTr=r(Yht,"FlaxBigBirdForPreTraining"),Yht.forEach(t),nTr=r(dLe," (BigBird model)"),dLe.forEach(t),sTr=i(_e),nC=n(_e,"LI",{});var cLe=s(nC);Z5e=n(cLe,"STRONG",{});var Kht=s(Z5e);lTr=r(Kht,"electra"),Kht.forEach(t),iTr=r(cLe," \u2014 "),vX=n(cLe,"A",{href:!0});var Zht=s(vX);dTr=r(Zht,"FlaxElectraForPreTraining"),Zht.forEach(t),cTr=r(cLe," (ELECTRA model)"),cLe.forEach(t),fTr=i(_e),sC=n(_e,"LI",{});var fLe=s(sC);e1e=n(fLe,"STRONG",{});var ept=s(e1e);mTr=r(ept,"mbart"),ept.forEach(t),gTr=r(fLe," \u2014 "),TX=n(fLe,"A",{href:!0});var opt=s(TX);hTr=r(opt,"FlaxMBartForConditionalGeneration"),opt.forEach(t),pTr=r(fLe," (mBART model)"),fLe.forEach(t),_Tr=i(_e),lC=n(_e,"LI",{});var mLe=s(lC);o1e=n(mLe,"STRONG",{});var rpt=s(o1e);uTr=r(rpt,"mt5"),rpt.forEach(t),bTr=r(mLe," \u2014 "),FX=n(mLe,"A",{href:!0});var tpt=s(FX);vTr=r(tpt,"FlaxMT5ForConditionalGeneration"),tpt.forEach(t),TTr=r(mLe," (mT5 model)"),mLe.forEach(t),FTr=i(_e),iC=n(_e,"LI",{});var gLe=s(iC);r1e=n(gLe,"STRONG",{});var apt=s(r1e);CTr=r(apt,"roberta"),apt.forEach(t),MTr=r(gLe," \u2014 "),CX=n(gLe,"A",{href:!0});var npt=s(CX);ETr=r(npt,"FlaxRobertaForMaskedLM"),npt.forEach(t),yTr=r(gLe," (RoBERTa model)"),gLe.forEach(t),wTr=i(_e),dC=n(_e,"LI",{});var hLe=s(dC);t1e=n(hLe,"STRONG",{});var spt=s(t1e);ATr=r(spt,"roformer"),spt.forEach(t),LTr=r(hLe," \u2014 "),MX=n(hLe,"A",{href:!0});var lpt=s(MX);BTr=r(lpt,"FlaxRoFormerForMaskedLM"),lpt.forEach(t),xTr=r(hLe," (RoFormer model)"),hLe.forEach(t),kTr=i(_e),cC=n(_e,"LI",{});var pLe=s(cC);a1e=n(pLe,"STRONG",{});var ipt=s(a1e);RTr=r(ipt,"t5"),ipt.forEach(t),STr=r(pLe," \u2014 "),EX=n(pLe,"A",{href:!0});var dpt=s(EX);PTr=r(dpt,"FlaxT5ForConditionalGeneration"),dpt.forEach(t),$Tr=r(pLe," (T5 model)"),pLe.forEach(t),ITr=i(_e),fC=n(_e,"LI",{});var _Le=s(fC);n1e=n(_Le,"STRONG",{});var cpt=s(n1e);DTr=r(cpt,"wav2vec2"),cpt.forEach(t),jTr=r(_Le," \u2014 "),yX=n(_Le,"A",{href:!0});var fpt=s(yX);NTr=r(fpt,"FlaxWav2Vec2ForPreTraining"),fpt.forEach(t),qTr=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),_e.forEach(t),GTr=i(ya),s1e=n(ya,"P",{});var mpt=s(s1e);OTr=r(mpt,"Examples:"),mpt.forEach(t),XTr=i(ya),m(K6.$$.fragment,ya),ya.forEach(t),li.forEach(t),KBe=i(c),Uc=n(c,"H2",{class:!0});var iRe=s(Uc);mC=n(iRe,"A",{id:!0,class:!0,href:!0});var gpt=s(mC);l1e=n(gpt,"SPAN",{});var hpt=s(l1e);m(Z6.$$.fragment,hpt),hpt.forEach(t),gpt.forEach(t),VTr=i(iRe),i1e=n(iRe,"SPAN",{});var ppt=s(i1e);zTr=r(ppt,"FlaxAutoModelForMaskedLM"),ppt.forEach(t),iRe.forEach(t),ZBe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(eA.$$.fragment,di),WTr=i(di),Jc=n(di,"P",{});var Kz=s(Jc);QTr=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),d1e=n(Kz,"CODE",{});var _pt=s(d1e);HTr=r(_pt,"from_pretrained()"),_pt.forEach(t),UTr=r(Kz,"class method or the "),c1e=n(Kz,"CODE",{});var upt=s(c1e);JTr=r(upt,"from_config()"),upt.forEach(t),YTr=r(Kz,`class
method.`),Kz.forEach(t),KTr=i(di),oA=n(di,"P",{});var dRe=s(oA);ZTr=r(dRe,"This class cannot be instantiated directly using "),f1e=n(dRe,"CODE",{});var bpt=s(f1e);e7r=r(bpt,"__init__()"),bpt.forEach(t),o7r=r(dRe," (throws an error)."),dRe.forEach(t),r7r=i(di),Et=n(di,"DIV",{class:!0});var ci=s(Et);m(rA.$$.fragment,ci),t7r=i(ci),m1e=n(ci,"P",{});var vpt=s(m1e);a7r=r(vpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vpt.forEach(t),n7r=i(ci),Yc=n(ci,"P",{});var Zz=s(Yc);s7r=r(Zz,`Note:
Loading a model from its configuration file does `),g1e=n(Zz,"STRONG",{});var Tpt=s(g1e);l7r=r(Tpt,"not"),Tpt.forEach(t),i7r=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),h1e=n(Zz,"CODE",{});var Fpt=s(h1e);d7r=r(Fpt,"from_pretrained()"),Fpt.forEach(t),c7r=r(Zz,"to load the model weights."),Zz.forEach(t),f7r=i(ci),p1e=n(ci,"P",{});var Cpt=s(p1e);m7r=r(Cpt,"Examples:"),Cpt.forEach(t),g7r=i(ci),m(tA.$$.fragment,ci),ci.forEach(t),h7r=i(di),Bo=n(di,"DIV",{class:!0});var wa=s(Bo);m(aA.$$.fragment,wa),p7r=i(wa),_1e=n(wa,"P",{});var Mpt=s(_1e);_7r=r(Mpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mpt.forEach(t),u7r=i(wa),An=n(wa,"P",{});var fM=s(An);b7r=r(fM,"The model class to instantiate is selected based on the "),u1e=n(fM,"CODE",{});var Ept=s(u1e);v7r=r(Ept,"model_type"),Ept.forEach(t),T7r=r(fM,` property of the config object (either
passed as an argument or loaded from `),b1e=n(fM,"CODE",{});var ypt=s(b1e);F7r=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),C7r=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=n(fM,"CODE",{});var wpt=s(v1e);M7r=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),E7r=r(fM,":"),fM.forEach(t),y7r=i(wa),ve=n(wa,"UL",{});var oo=s(ve);gC=n(oo,"LI",{});var uLe=s(gC);T1e=n(uLe,"STRONG",{});var Apt=s(T1e);w7r=r(Apt,"albert"),Apt.forEach(t),A7r=r(uLe," \u2014 "),wX=n(uLe,"A",{href:!0});var Lpt=s(wX);L7r=r(Lpt,"FlaxAlbertForMaskedLM"),Lpt.forEach(t),B7r=r(uLe," (ALBERT model)"),uLe.forEach(t),x7r=i(oo),hC=n(oo,"LI",{});var bLe=s(hC);F1e=n(bLe,"STRONG",{});var Bpt=s(F1e);k7r=r(Bpt,"bart"),Bpt.forEach(t),R7r=r(bLe," \u2014 "),AX=n(bLe,"A",{href:!0});var xpt=s(AX);S7r=r(xpt,"FlaxBartForConditionalGeneration"),xpt.forEach(t),P7r=r(bLe," (BART model)"),bLe.forEach(t),$7r=i(oo),pC=n(oo,"LI",{});var vLe=s(pC);C1e=n(vLe,"STRONG",{});var kpt=s(C1e);I7r=r(kpt,"bert"),kpt.forEach(t),D7r=r(vLe," \u2014 "),LX=n(vLe,"A",{href:!0});var Rpt=s(LX);j7r=r(Rpt,"FlaxBertForMaskedLM"),Rpt.forEach(t),N7r=r(vLe," (BERT model)"),vLe.forEach(t),q7r=i(oo),_C=n(oo,"LI",{});var TLe=s(_C);M1e=n(TLe,"STRONG",{});var Spt=s(M1e);G7r=r(Spt,"big_bird"),Spt.forEach(t),O7r=r(TLe," \u2014 "),BX=n(TLe,"A",{href:!0});var Ppt=s(BX);X7r=r(Ppt,"FlaxBigBirdForMaskedLM"),Ppt.forEach(t),V7r=r(TLe," (BigBird model)"),TLe.forEach(t),z7r=i(oo),uC=n(oo,"LI",{});var FLe=s(uC);E1e=n(FLe,"STRONG",{});var $pt=s(E1e);W7r=r($pt,"distilbert"),$pt.forEach(t),Q7r=r(FLe," \u2014 "),xX=n(FLe,"A",{href:!0});var Ipt=s(xX);H7r=r(Ipt,"FlaxDistilBertForMaskedLM"),Ipt.forEach(t),U7r=r(FLe," (DistilBERT model)"),FLe.forEach(t),J7r=i(oo),bC=n(oo,"LI",{});var CLe=s(bC);y1e=n(CLe,"STRONG",{});var Dpt=s(y1e);Y7r=r(Dpt,"electra"),Dpt.forEach(t),K7r=r(CLe," \u2014 "),kX=n(CLe,"A",{href:!0});var jpt=s(kX);Z7r=r(jpt,"FlaxElectraForMaskedLM"),jpt.forEach(t),eFr=r(CLe," (ELECTRA model)"),CLe.forEach(t),oFr=i(oo),vC=n(oo,"LI",{});var MLe=s(vC);w1e=n(MLe,"STRONG",{});var Npt=s(w1e);rFr=r(Npt,"mbart"),Npt.forEach(t),tFr=r(MLe," \u2014 "),RX=n(MLe,"A",{href:!0});var qpt=s(RX);aFr=r(qpt,"FlaxMBartForConditionalGeneration"),qpt.forEach(t),nFr=r(MLe," (mBART model)"),MLe.forEach(t),sFr=i(oo),TC=n(oo,"LI",{});var ELe=s(TC);A1e=n(ELe,"STRONG",{});var Gpt=s(A1e);lFr=r(Gpt,"roberta"),Gpt.forEach(t),iFr=r(ELe," \u2014 "),SX=n(ELe,"A",{href:!0});var Opt=s(SX);dFr=r(Opt,"FlaxRobertaForMaskedLM"),Opt.forEach(t),cFr=r(ELe," (RoBERTa model)"),ELe.forEach(t),fFr=i(oo),FC=n(oo,"LI",{});var yLe=s(FC);L1e=n(yLe,"STRONG",{});var Xpt=s(L1e);mFr=r(Xpt,"roformer"),Xpt.forEach(t),gFr=r(yLe," \u2014 "),PX=n(yLe,"A",{href:!0});var Vpt=s(PX);hFr=r(Vpt,"FlaxRoFormerForMaskedLM"),Vpt.forEach(t),pFr=r(yLe," (RoFormer model)"),yLe.forEach(t),oo.forEach(t),_Fr=i(wa),B1e=n(wa,"P",{});var zpt=s(B1e);uFr=r(zpt,"Examples:"),zpt.forEach(t),bFr=i(wa),m(nA.$$.fragment,wa),wa.forEach(t),di.forEach(t),exe=i(c),Kc=n(c,"H2",{class:!0});var cRe=s(Kc);CC=n(cRe,"A",{id:!0,class:!0,href:!0});var Wpt=s(CC);x1e=n(Wpt,"SPAN",{});var Qpt=s(x1e);m(sA.$$.fragment,Qpt),Qpt.forEach(t),Wpt.forEach(t),vFr=i(cRe),k1e=n(cRe,"SPAN",{});var Hpt=s(k1e);TFr=r(Hpt,"FlaxAutoModelForSeq2SeqLM"),Hpt.forEach(t),cRe.forEach(t),oxe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(lA.$$.fragment,fi),FFr=i(fi),Zc=n(fi,"P",{});var eW=s(Zc);CFr=r(eW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),R1e=n(eW,"CODE",{});var Upt=s(R1e);MFr=r(Upt,"from_pretrained()"),Upt.forEach(t),EFr=r(eW,"class method or the "),S1e=n(eW,"CODE",{});var Jpt=s(S1e);yFr=r(Jpt,"from_config()"),Jpt.forEach(t),wFr=r(eW,`class
method.`),eW.forEach(t),AFr=i(fi),iA=n(fi,"P",{});var fRe=s(iA);LFr=r(fRe,"This class cannot be instantiated directly using "),P1e=n(fRe,"CODE",{});var Ypt=s(P1e);BFr=r(Ypt,"__init__()"),Ypt.forEach(t),xFr=r(fRe," (throws an error)."),fRe.forEach(t),kFr=i(fi),yt=n(fi,"DIV",{class:!0});var mi=s(yt);m(dA.$$.fragment,mi),RFr=i(mi),$1e=n(mi,"P",{});var Kpt=s($1e);SFr=r(Kpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kpt.forEach(t),PFr=i(mi),ef=n(mi,"P",{});var oW=s(ef);$Fr=r(oW,`Note:
Loading a model from its configuration file does `),I1e=n(oW,"STRONG",{});var Zpt=s(I1e);IFr=r(Zpt,"not"),Zpt.forEach(t),DFr=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),D1e=n(oW,"CODE",{});var e_t=s(D1e);jFr=r(e_t,"from_pretrained()"),e_t.forEach(t),NFr=r(oW,"to load the model weights."),oW.forEach(t),qFr=i(mi),j1e=n(mi,"P",{});var o_t=s(j1e);GFr=r(o_t,"Examples:"),o_t.forEach(t),OFr=i(mi),m(cA.$$.fragment,mi),mi.forEach(t),XFr=i(fi),xo=n(fi,"DIV",{class:!0});var Aa=s(xo);m(fA.$$.fragment,Aa),VFr=i(Aa),N1e=n(Aa,"P",{});var r_t=s(N1e);zFr=r(r_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r_t.forEach(t),WFr=i(Aa),Ln=n(Aa,"P",{});var mM=s(Ln);QFr=r(mM,"The model class to instantiate is selected based on the "),q1e=n(mM,"CODE",{});var t_t=s(q1e);HFr=r(t_t,"model_type"),t_t.forEach(t),UFr=r(mM,` property of the config object (either
passed as an argument or loaded from `),G1e=n(mM,"CODE",{});var a_t=s(G1e);JFr=r(a_t,"pretrained_model_name_or_path"),a_t.forEach(t),YFr=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(mM,"CODE",{});var n_t=s(O1e);KFr=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),ZFr=r(mM,":"),mM.forEach(t),e9r=i(Aa),Te=n(Aa,"UL",{});var ro=s(Te);MC=n(ro,"LI",{});var wLe=s(MC);X1e=n(wLe,"STRONG",{});var s_t=s(X1e);o9r=r(s_t,"bart"),s_t.forEach(t),r9r=r(wLe," \u2014 "),$X=n(wLe,"A",{href:!0});var l_t=s($X);t9r=r(l_t,"FlaxBartForConditionalGeneration"),l_t.forEach(t),a9r=r(wLe," (BART model)"),wLe.forEach(t),n9r=i(ro),EC=n(ro,"LI",{});var ALe=s(EC);V1e=n(ALe,"STRONG",{});var i_t=s(V1e);s9r=r(i_t,"blenderbot"),i_t.forEach(t),l9r=r(ALe," \u2014 "),IX=n(ALe,"A",{href:!0});var d_t=s(IX);i9r=r(d_t,"FlaxBlenderbotForConditionalGeneration"),d_t.forEach(t),d9r=r(ALe," (Blenderbot model)"),ALe.forEach(t),c9r=i(ro),yC=n(ro,"LI",{});var LLe=s(yC);z1e=n(LLe,"STRONG",{});var c_t=s(z1e);f9r=r(c_t,"blenderbot-small"),c_t.forEach(t),m9r=r(LLe," \u2014 "),DX=n(LLe,"A",{href:!0});var f_t=s(DX);g9r=r(f_t,"FlaxBlenderbotSmallForConditionalGeneration"),f_t.forEach(t),h9r=r(LLe," (BlenderbotSmall model)"),LLe.forEach(t),p9r=i(ro),wC=n(ro,"LI",{});var BLe=s(wC);W1e=n(BLe,"STRONG",{});var m_t=s(W1e);_9r=r(m_t,"encoder-decoder"),m_t.forEach(t),u9r=r(BLe," \u2014 "),jX=n(BLe,"A",{href:!0});var g_t=s(jX);b9r=r(g_t,"FlaxEncoderDecoderModel"),g_t.forEach(t),v9r=r(BLe," (Encoder decoder model)"),BLe.forEach(t),T9r=i(ro),AC=n(ro,"LI",{});var xLe=s(AC);Q1e=n(xLe,"STRONG",{});var h_t=s(Q1e);F9r=r(h_t,"marian"),h_t.forEach(t),C9r=r(xLe," \u2014 "),NX=n(xLe,"A",{href:!0});var p_t=s(NX);M9r=r(p_t,"FlaxMarianMTModel"),p_t.forEach(t),E9r=r(xLe," (Marian model)"),xLe.forEach(t),y9r=i(ro),LC=n(ro,"LI",{});var kLe=s(LC);H1e=n(kLe,"STRONG",{});var __t=s(H1e);w9r=r(__t,"mbart"),__t.forEach(t),A9r=r(kLe," \u2014 "),qX=n(kLe,"A",{href:!0});var u_t=s(qX);L9r=r(u_t,"FlaxMBartForConditionalGeneration"),u_t.forEach(t),B9r=r(kLe," (mBART model)"),kLe.forEach(t),x9r=i(ro),BC=n(ro,"LI",{});var RLe=s(BC);U1e=n(RLe,"STRONG",{});var b_t=s(U1e);k9r=r(b_t,"mt5"),b_t.forEach(t),R9r=r(RLe," \u2014 "),GX=n(RLe,"A",{href:!0});var v_t=s(GX);S9r=r(v_t,"FlaxMT5ForConditionalGeneration"),v_t.forEach(t),P9r=r(RLe," (mT5 model)"),RLe.forEach(t),$9r=i(ro),xC=n(ro,"LI",{});var SLe=s(xC);J1e=n(SLe,"STRONG",{});var T_t=s(J1e);I9r=r(T_t,"pegasus"),T_t.forEach(t),D9r=r(SLe," \u2014 "),OX=n(SLe,"A",{href:!0});var F_t=s(OX);j9r=r(F_t,"FlaxPegasusForConditionalGeneration"),F_t.forEach(t),N9r=r(SLe," (Pegasus model)"),SLe.forEach(t),q9r=i(ro),kC=n(ro,"LI",{});var PLe=s(kC);Y1e=n(PLe,"STRONG",{});var C_t=s(Y1e);G9r=r(C_t,"t5"),C_t.forEach(t),O9r=r(PLe," \u2014 "),XX=n(PLe,"A",{href:!0});var M_t=s(XX);X9r=r(M_t,"FlaxT5ForConditionalGeneration"),M_t.forEach(t),V9r=r(PLe," (T5 model)"),PLe.forEach(t),ro.forEach(t),z9r=i(Aa),K1e=n(Aa,"P",{});var E_t=s(K1e);W9r=r(E_t,"Examples:"),E_t.forEach(t),Q9r=i(Aa),m(mA.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),rxe=i(c),of=n(c,"H2",{class:!0});var mRe=s(of);RC=n(mRe,"A",{id:!0,class:!0,href:!0});var y_t=s(RC);Z1e=n(y_t,"SPAN",{});var w_t=s(Z1e);m(gA.$$.fragment,w_t),w_t.forEach(t),y_t.forEach(t),H9r=i(mRe),ebe=n(mRe,"SPAN",{});var A_t=s(ebe);U9r=r(A_t,"FlaxAutoModelForSequenceClassification"),A_t.forEach(t),mRe.forEach(t),txe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(hA.$$.fragment,gi),J9r=i(gi),rf=n(gi,"P",{});var rW=s(rf);Y9r=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),obe=n(rW,"CODE",{});var L_t=s(obe);K9r=r(L_t,"from_pretrained()"),L_t.forEach(t),Z9r=r(rW,"class method or the "),rbe=n(rW,"CODE",{});var B_t=s(rbe);eCr=r(B_t,"from_config()"),B_t.forEach(t),oCr=r(rW,`class
method.`),rW.forEach(t),rCr=i(gi),pA=n(gi,"P",{});var gRe=s(pA);tCr=r(gRe,"This class cannot be instantiated directly using "),tbe=n(gRe,"CODE",{});var x_t=s(tbe);aCr=r(x_t,"__init__()"),x_t.forEach(t),nCr=r(gRe," (throws an error)."),gRe.forEach(t),sCr=i(gi),wt=n(gi,"DIV",{class:!0});var hi=s(wt);m(_A.$$.fragment,hi),lCr=i(hi),abe=n(hi,"P",{});var k_t=s(abe);iCr=r(k_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k_t.forEach(t),dCr=i(hi),tf=n(hi,"P",{});var tW=s(tf);cCr=r(tW,`Note:
Loading a model from its configuration file does `),nbe=n(tW,"STRONG",{});var R_t=s(nbe);fCr=r(R_t,"not"),R_t.forEach(t),mCr=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sbe=n(tW,"CODE",{});var S_t=s(sbe);gCr=r(S_t,"from_pretrained()"),S_t.forEach(t),hCr=r(tW,"to load the model weights."),tW.forEach(t),pCr=i(hi),lbe=n(hi,"P",{});var P_t=s(lbe);_Cr=r(P_t,"Examples:"),P_t.forEach(t),uCr=i(hi),m(uA.$$.fragment,hi),hi.forEach(t),bCr=i(gi),ko=n(gi,"DIV",{class:!0});var La=s(ko);m(bA.$$.fragment,La),vCr=i(La),ibe=n(La,"P",{});var $_t=s(ibe);TCr=r($_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$_t.forEach(t),FCr=i(La),Bn=n(La,"P",{});var gM=s(Bn);CCr=r(gM,"The model class to instantiate is selected based on the "),dbe=n(gM,"CODE",{});var I_t=s(dbe);MCr=r(I_t,"model_type"),I_t.forEach(t),ECr=r(gM,` property of the config object (either
passed as an argument or loaded from `),cbe=n(gM,"CODE",{});var D_t=s(cbe);yCr=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),wCr=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(gM,"CODE",{});var j_t=s(fbe);ACr=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),LCr=r(gM,":"),gM.forEach(t),BCr=i(La),Fe=n(La,"UL",{});var to=s(Fe);SC=n(to,"LI",{});var $Le=s(SC);mbe=n($Le,"STRONG",{});var N_t=s(mbe);xCr=r(N_t,"albert"),N_t.forEach(t),kCr=r($Le," \u2014 "),VX=n($Le,"A",{href:!0});var q_t=s(VX);RCr=r(q_t,"FlaxAlbertForSequenceClassification"),q_t.forEach(t),SCr=r($Le," (ALBERT model)"),$Le.forEach(t),PCr=i(to),PC=n(to,"LI",{});var ILe=s(PC);gbe=n(ILe,"STRONG",{});var G_t=s(gbe);$Cr=r(G_t,"bart"),G_t.forEach(t),ICr=r(ILe," \u2014 "),zX=n(ILe,"A",{href:!0});var O_t=s(zX);DCr=r(O_t,"FlaxBartForSequenceClassification"),O_t.forEach(t),jCr=r(ILe," (BART model)"),ILe.forEach(t),NCr=i(to),$C=n(to,"LI",{});var DLe=s($C);hbe=n(DLe,"STRONG",{});var X_t=s(hbe);qCr=r(X_t,"bert"),X_t.forEach(t),GCr=r(DLe," \u2014 "),WX=n(DLe,"A",{href:!0});var V_t=s(WX);OCr=r(V_t,"FlaxBertForSequenceClassification"),V_t.forEach(t),XCr=r(DLe," (BERT model)"),DLe.forEach(t),VCr=i(to),IC=n(to,"LI",{});var jLe=s(IC);pbe=n(jLe,"STRONG",{});var z_t=s(pbe);zCr=r(z_t,"big_bird"),z_t.forEach(t),WCr=r(jLe," \u2014 "),QX=n(jLe,"A",{href:!0});var W_t=s(QX);QCr=r(W_t,"FlaxBigBirdForSequenceClassification"),W_t.forEach(t),HCr=r(jLe," (BigBird model)"),jLe.forEach(t),UCr=i(to),DC=n(to,"LI",{});var NLe=s(DC);_be=n(NLe,"STRONG",{});var Q_t=s(_be);JCr=r(Q_t,"distilbert"),Q_t.forEach(t),YCr=r(NLe," \u2014 "),HX=n(NLe,"A",{href:!0});var H_t=s(HX);KCr=r(H_t,"FlaxDistilBertForSequenceClassification"),H_t.forEach(t),ZCr=r(NLe," (DistilBERT model)"),NLe.forEach(t),e4r=i(to),jC=n(to,"LI",{});var qLe=s(jC);ube=n(qLe,"STRONG",{});var U_t=s(ube);o4r=r(U_t,"electra"),U_t.forEach(t),r4r=r(qLe," \u2014 "),UX=n(qLe,"A",{href:!0});var J_t=s(UX);t4r=r(J_t,"FlaxElectraForSequenceClassification"),J_t.forEach(t),a4r=r(qLe," (ELECTRA model)"),qLe.forEach(t),n4r=i(to),NC=n(to,"LI",{});var GLe=s(NC);bbe=n(GLe,"STRONG",{});var Y_t=s(bbe);s4r=r(Y_t,"mbart"),Y_t.forEach(t),l4r=r(GLe," \u2014 "),JX=n(GLe,"A",{href:!0});var K_t=s(JX);i4r=r(K_t,"FlaxMBartForSequenceClassification"),K_t.forEach(t),d4r=r(GLe," (mBART model)"),GLe.forEach(t),c4r=i(to),qC=n(to,"LI",{});var OLe=s(qC);vbe=n(OLe,"STRONG",{});var Z_t=s(vbe);f4r=r(Z_t,"roberta"),Z_t.forEach(t),m4r=r(OLe," \u2014 "),YX=n(OLe,"A",{href:!0});var eut=s(YX);g4r=r(eut,"FlaxRobertaForSequenceClassification"),eut.forEach(t),h4r=r(OLe," (RoBERTa model)"),OLe.forEach(t),p4r=i(to),GC=n(to,"LI",{});var XLe=s(GC);Tbe=n(XLe,"STRONG",{});var out=s(Tbe);_4r=r(out,"roformer"),out.forEach(t),u4r=r(XLe," \u2014 "),KX=n(XLe,"A",{href:!0});var rut=s(KX);b4r=r(rut,"FlaxRoFormerForSequenceClassification"),rut.forEach(t),v4r=r(XLe," (RoFormer model)"),XLe.forEach(t),to.forEach(t),T4r=i(La),Fbe=n(La,"P",{});var tut=s(Fbe);F4r=r(tut,"Examples:"),tut.forEach(t),C4r=i(La),m(vA.$$.fragment,La),La.forEach(t),gi.forEach(t),axe=i(c),af=n(c,"H2",{class:!0});var hRe=s(af);OC=n(hRe,"A",{id:!0,class:!0,href:!0});var aut=s(OC);Cbe=n(aut,"SPAN",{});var nut=s(Cbe);m(TA.$$.fragment,nut),nut.forEach(t),aut.forEach(t),M4r=i(hRe),Mbe=n(hRe,"SPAN",{});var sut=s(Mbe);E4r=r(sut,"FlaxAutoModelForQuestionAnswering"),sut.forEach(t),hRe.forEach(t),nxe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);m(FA.$$.fragment,pi),y4r=i(pi),nf=n(pi,"P",{});var aW=s(nf);w4r=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ebe=n(aW,"CODE",{});var lut=s(Ebe);A4r=r(lut,"from_pretrained()"),lut.forEach(t),L4r=r(aW,"class method or the "),ybe=n(aW,"CODE",{});var iut=s(ybe);B4r=r(iut,"from_config()"),iut.forEach(t),x4r=r(aW,`class
method.`),aW.forEach(t),k4r=i(pi),CA=n(pi,"P",{});var pRe=s(CA);R4r=r(pRe,"This class cannot be instantiated directly using "),wbe=n(pRe,"CODE",{});var dut=s(wbe);S4r=r(dut,"__init__()"),dut.forEach(t),P4r=r(pRe," (throws an error)."),pRe.forEach(t),$4r=i(pi),At=n(pi,"DIV",{class:!0});var _i=s(At);m(MA.$$.fragment,_i),I4r=i(_i),Abe=n(_i,"P",{});var cut=s(Abe);D4r=r(cut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cut.forEach(t),j4r=i(_i),sf=n(_i,"P",{});var nW=s(sf);N4r=r(nW,`Note:
Loading a model from its configuration file does `),Lbe=n(nW,"STRONG",{});var fut=s(Lbe);q4r=r(fut,"not"),fut.forEach(t),G4r=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bbe=n(nW,"CODE",{});var mut=s(Bbe);O4r=r(mut,"from_pretrained()"),mut.forEach(t),X4r=r(nW,"to load the model weights."),nW.forEach(t),V4r=i(_i),xbe=n(_i,"P",{});var gut=s(xbe);z4r=r(gut,"Examples:"),gut.forEach(t),W4r=i(_i),m(EA.$$.fragment,_i),_i.forEach(t),Q4r=i(pi),Ro=n(pi,"DIV",{class:!0});var Ba=s(Ro);m(yA.$$.fragment,Ba),H4r=i(Ba),kbe=n(Ba,"P",{});var hut=s(kbe);U4r=r(hut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hut.forEach(t),J4r=i(Ba),xn=n(Ba,"P",{});var hM=s(xn);Y4r=r(hM,"The model class to instantiate is selected based on the "),Rbe=n(hM,"CODE",{});var put=s(Rbe);K4r=r(put,"model_type"),put.forEach(t),Z4r=r(hM,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(hM,"CODE",{});var _ut=s(Sbe);eMr=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),oMr=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(hM,"CODE",{});var uut=s(Pbe);rMr=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),tMr=r(hM,":"),hM.forEach(t),aMr=i(Ba),Ce=n(Ba,"UL",{});var ao=s(Ce);XC=n(ao,"LI",{});var VLe=s(XC);$be=n(VLe,"STRONG",{});var but=s($be);nMr=r(but,"albert"),but.forEach(t),sMr=r(VLe," \u2014 "),ZX=n(VLe,"A",{href:!0});var vut=s(ZX);lMr=r(vut,"FlaxAlbertForQuestionAnswering"),vut.forEach(t),iMr=r(VLe," (ALBERT model)"),VLe.forEach(t),dMr=i(ao),VC=n(ao,"LI",{});var zLe=s(VC);Ibe=n(zLe,"STRONG",{});var Tut=s(Ibe);cMr=r(Tut,"bart"),Tut.forEach(t),fMr=r(zLe," \u2014 "),eV=n(zLe,"A",{href:!0});var Fut=s(eV);mMr=r(Fut,"FlaxBartForQuestionAnswering"),Fut.forEach(t),gMr=r(zLe," (BART model)"),zLe.forEach(t),hMr=i(ao),zC=n(ao,"LI",{});var WLe=s(zC);Dbe=n(WLe,"STRONG",{});var Cut=s(Dbe);pMr=r(Cut,"bert"),Cut.forEach(t),_Mr=r(WLe," \u2014 "),oV=n(WLe,"A",{href:!0});var Mut=s(oV);uMr=r(Mut,"FlaxBertForQuestionAnswering"),Mut.forEach(t),bMr=r(WLe," (BERT model)"),WLe.forEach(t),vMr=i(ao),WC=n(ao,"LI",{});var QLe=s(WC);jbe=n(QLe,"STRONG",{});var Eut=s(jbe);TMr=r(Eut,"big_bird"),Eut.forEach(t),FMr=r(QLe," \u2014 "),rV=n(QLe,"A",{href:!0});var yut=s(rV);CMr=r(yut,"FlaxBigBirdForQuestionAnswering"),yut.forEach(t),MMr=r(QLe," (BigBird model)"),QLe.forEach(t),EMr=i(ao),QC=n(ao,"LI",{});var HLe=s(QC);Nbe=n(HLe,"STRONG",{});var wut=s(Nbe);yMr=r(wut,"distilbert"),wut.forEach(t),wMr=r(HLe," \u2014 "),tV=n(HLe,"A",{href:!0});var Aut=s(tV);AMr=r(Aut,"FlaxDistilBertForQuestionAnswering"),Aut.forEach(t),LMr=r(HLe," (DistilBERT model)"),HLe.forEach(t),BMr=i(ao),HC=n(ao,"LI",{});var ULe=s(HC);qbe=n(ULe,"STRONG",{});var Lut=s(qbe);xMr=r(Lut,"electra"),Lut.forEach(t),kMr=r(ULe," \u2014 "),aV=n(ULe,"A",{href:!0});var But=s(aV);RMr=r(But,"FlaxElectraForQuestionAnswering"),But.forEach(t),SMr=r(ULe," (ELECTRA model)"),ULe.forEach(t),PMr=i(ao),UC=n(ao,"LI",{});var JLe=s(UC);Gbe=n(JLe,"STRONG",{});var xut=s(Gbe);$Mr=r(xut,"mbart"),xut.forEach(t),IMr=r(JLe," \u2014 "),nV=n(JLe,"A",{href:!0});var kut=s(nV);DMr=r(kut,"FlaxMBartForQuestionAnswering"),kut.forEach(t),jMr=r(JLe," (mBART model)"),JLe.forEach(t),NMr=i(ao),JC=n(ao,"LI",{});var YLe=s(JC);Obe=n(YLe,"STRONG",{});var Rut=s(Obe);qMr=r(Rut,"roberta"),Rut.forEach(t),GMr=r(YLe," \u2014 "),sV=n(YLe,"A",{href:!0});var Sut=s(sV);OMr=r(Sut,"FlaxRobertaForQuestionAnswering"),Sut.forEach(t),XMr=r(YLe," (RoBERTa model)"),YLe.forEach(t),VMr=i(ao),YC=n(ao,"LI",{});var KLe=s(YC);Xbe=n(KLe,"STRONG",{});var Put=s(Xbe);zMr=r(Put,"roformer"),Put.forEach(t),WMr=r(KLe," \u2014 "),lV=n(KLe,"A",{href:!0});var $ut=s(lV);QMr=r($ut,"FlaxRoFormerForQuestionAnswering"),$ut.forEach(t),HMr=r(KLe," (RoFormer model)"),KLe.forEach(t),ao.forEach(t),UMr=i(Ba),Vbe=n(Ba,"P",{});var Iut=s(Vbe);JMr=r(Iut,"Examples:"),Iut.forEach(t),YMr=i(Ba),m(wA.$$.fragment,Ba),Ba.forEach(t),pi.forEach(t),sxe=i(c),lf=n(c,"H2",{class:!0});var _Re=s(lf);KC=n(_Re,"A",{id:!0,class:!0,href:!0});var Dut=s(KC);zbe=n(Dut,"SPAN",{});var jut=s(zbe);m(AA.$$.fragment,jut),jut.forEach(t),Dut.forEach(t),KMr=i(_Re),Wbe=n(_Re,"SPAN",{});var Nut=s(Wbe);ZMr=r(Nut,"FlaxAutoModelForTokenClassification"),Nut.forEach(t),_Re.forEach(t),lxe=i(c),$r=n(c,"DIV",{class:!0});var ui=s($r);m(LA.$$.fragment,ui),eEr=i(ui),df=n(ui,"P",{});var sW=s(df);oEr=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qbe=n(sW,"CODE",{});var qut=s(Qbe);rEr=r(qut,"from_pretrained()"),qut.forEach(t),tEr=r(sW,"class method or the "),Hbe=n(sW,"CODE",{});var Gut=s(Hbe);aEr=r(Gut,"from_config()"),Gut.forEach(t),nEr=r(sW,`class
method.`),sW.forEach(t),sEr=i(ui),BA=n(ui,"P",{});var uRe=s(BA);lEr=r(uRe,"This class cannot be instantiated directly using "),Ube=n(uRe,"CODE",{});var Out=s(Ube);iEr=r(Out,"__init__()"),Out.forEach(t),dEr=r(uRe," (throws an error)."),uRe.forEach(t),cEr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(xA.$$.fragment,bi),fEr=i(bi),Jbe=n(bi,"P",{});var Xut=s(Jbe);mEr=r(Xut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xut.forEach(t),gEr=i(bi),cf=n(bi,"P",{});var lW=s(cf);hEr=r(lW,`Note:
Loading a model from its configuration file does `),Ybe=n(lW,"STRONG",{});var Vut=s(Ybe);pEr=r(Vut,"not"),Vut.forEach(t),_Er=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kbe=n(lW,"CODE",{});var zut=s(Kbe);uEr=r(zut,"from_pretrained()"),zut.forEach(t),bEr=r(lW,"to load the model weights."),lW.forEach(t),vEr=i(bi),Zbe=n(bi,"P",{});var Wut=s(Zbe);TEr=r(Wut,"Examples:"),Wut.forEach(t),FEr=i(bi),m(kA.$$.fragment,bi),bi.forEach(t),CEr=i(ui),So=n(ui,"DIV",{class:!0});var xa=s(So);m(RA.$$.fragment,xa),MEr=i(xa),e2e=n(xa,"P",{});var Qut=s(e2e);EEr=r(Qut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qut.forEach(t),yEr=i(xa),kn=n(xa,"P",{});var pM=s(kn);wEr=r(pM,"The model class to instantiate is selected based on the "),o2e=n(pM,"CODE",{});var Hut=s(o2e);AEr=r(Hut,"model_type"),Hut.forEach(t),LEr=r(pM,` property of the config object (either
passed as an argument or loaded from `),r2e=n(pM,"CODE",{});var Uut=s(r2e);BEr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),xEr=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(pM,"CODE",{});var Jut=s(t2e);kEr=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),REr=r(pM,":"),pM.forEach(t),SEr=i(xa),so=n(xa,"UL",{});var ta=s(so);ZC=n(ta,"LI",{});var ZLe=s(ZC);a2e=n(ZLe,"STRONG",{});var Yut=s(a2e);PEr=r(Yut,"albert"),Yut.forEach(t),$Er=r(ZLe," \u2014 "),iV=n(ZLe,"A",{href:!0});var Kut=s(iV);IEr=r(Kut,"FlaxAlbertForTokenClassification"),Kut.forEach(t),DEr=r(ZLe," (ALBERT model)"),ZLe.forEach(t),jEr=i(ta),e4=n(ta,"LI",{});var e8e=s(e4);n2e=n(e8e,"STRONG",{});var Zut=s(n2e);NEr=r(Zut,"bert"),Zut.forEach(t),qEr=r(e8e," \u2014 "),dV=n(e8e,"A",{href:!0});var e5t=s(dV);GEr=r(e5t,"FlaxBertForTokenClassification"),e5t.forEach(t),OEr=r(e8e," (BERT model)"),e8e.forEach(t),XEr=i(ta),o4=n(ta,"LI",{});var o8e=s(o4);s2e=n(o8e,"STRONG",{});var o5t=s(s2e);VEr=r(o5t,"big_bird"),o5t.forEach(t),zEr=r(o8e," \u2014 "),cV=n(o8e,"A",{href:!0});var r5t=s(cV);WEr=r(r5t,"FlaxBigBirdForTokenClassification"),r5t.forEach(t),QEr=r(o8e," (BigBird model)"),o8e.forEach(t),HEr=i(ta),r4=n(ta,"LI",{});var r8e=s(r4);l2e=n(r8e,"STRONG",{});var t5t=s(l2e);UEr=r(t5t,"distilbert"),t5t.forEach(t),JEr=r(r8e," \u2014 "),fV=n(r8e,"A",{href:!0});var a5t=s(fV);YEr=r(a5t,"FlaxDistilBertForTokenClassification"),a5t.forEach(t),KEr=r(r8e," (DistilBERT model)"),r8e.forEach(t),ZEr=i(ta),t4=n(ta,"LI",{});var t8e=s(t4);i2e=n(t8e,"STRONG",{});var n5t=s(i2e);e3r=r(n5t,"electra"),n5t.forEach(t),o3r=r(t8e," \u2014 "),mV=n(t8e,"A",{href:!0});var s5t=s(mV);r3r=r(s5t,"FlaxElectraForTokenClassification"),s5t.forEach(t),t3r=r(t8e," (ELECTRA model)"),t8e.forEach(t),a3r=i(ta),a4=n(ta,"LI",{});var a8e=s(a4);d2e=n(a8e,"STRONG",{});var l5t=s(d2e);n3r=r(l5t,"roberta"),l5t.forEach(t),s3r=r(a8e," \u2014 "),gV=n(a8e,"A",{href:!0});var i5t=s(gV);l3r=r(i5t,"FlaxRobertaForTokenClassification"),i5t.forEach(t),i3r=r(a8e," (RoBERTa model)"),a8e.forEach(t),d3r=i(ta),n4=n(ta,"LI",{});var n8e=s(n4);c2e=n(n8e,"STRONG",{});var d5t=s(c2e);c3r=r(d5t,"roformer"),d5t.forEach(t),f3r=r(n8e," \u2014 "),hV=n(n8e,"A",{href:!0});var c5t=s(hV);m3r=r(c5t,"FlaxRoFormerForTokenClassification"),c5t.forEach(t),g3r=r(n8e," (RoFormer model)"),n8e.forEach(t),ta.forEach(t),h3r=i(xa),f2e=n(xa,"P",{});var f5t=s(f2e);p3r=r(f5t,"Examples:"),f5t.forEach(t),_3r=i(xa),m(SA.$$.fragment,xa),xa.forEach(t),ui.forEach(t),ixe=i(c),ff=n(c,"H2",{class:!0});var bRe=s(ff);s4=n(bRe,"A",{id:!0,class:!0,href:!0});var m5t=s(s4);m2e=n(m5t,"SPAN",{});var g5t=s(m2e);m(PA.$$.fragment,g5t),g5t.forEach(t),m5t.forEach(t),u3r=i(bRe),g2e=n(bRe,"SPAN",{});var h5t=s(g2e);b3r=r(h5t,"FlaxAutoModelForMultipleChoice"),h5t.forEach(t),bRe.forEach(t),dxe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m($A.$$.fragment,vi),v3r=i(vi),mf=n(vi,"P",{});var iW=s(mf);T3r=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),h2e=n(iW,"CODE",{});var p5t=s(h2e);F3r=r(p5t,"from_pretrained()"),p5t.forEach(t),C3r=r(iW,"class method or the "),p2e=n(iW,"CODE",{});var _5t=s(p2e);M3r=r(_5t,"from_config()"),_5t.forEach(t),E3r=r(iW,`class
method.`),iW.forEach(t),y3r=i(vi),IA=n(vi,"P",{});var vRe=s(IA);w3r=r(vRe,"This class cannot be instantiated directly using "),_2e=n(vRe,"CODE",{});var u5t=s(_2e);A3r=r(u5t,"__init__()"),u5t.forEach(t),L3r=r(vRe," (throws an error)."),vRe.forEach(t),B3r=i(vi),Bt=n(vi,"DIV",{class:!0});var Ti=s(Bt);m(DA.$$.fragment,Ti),x3r=i(Ti),u2e=n(Ti,"P",{});var b5t=s(u2e);k3r=r(b5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),b5t.forEach(t),R3r=i(Ti),gf=n(Ti,"P",{});var dW=s(gf);S3r=r(dW,`Note:
Loading a model from its configuration file does `),b2e=n(dW,"STRONG",{});var v5t=s(b2e);P3r=r(v5t,"not"),v5t.forEach(t),$3r=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),v2e=n(dW,"CODE",{});var T5t=s(v2e);I3r=r(T5t,"from_pretrained()"),T5t.forEach(t),D3r=r(dW,"to load the model weights."),dW.forEach(t),j3r=i(Ti),T2e=n(Ti,"P",{});var F5t=s(T2e);N3r=r(F5t,"Examples:"),F5t.forEach(t),q3r=i(Ti),m(jA.$$.fragment,Ti),Ti.forEach(t),G3r=i(vi),Po=n(vi,"DIV",{class:!0});var ka=s(Po);m(NA.$$.fragment,ka),O3r=i(ka),F2e=n(ka,"P",{});var C5t=s(F2e);X3r=r(C5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C5t.forEach(t),V3r=i(ka),Rn=n(ka,"P",{});var _M=s(Rn);z3r=r(_M,"The model class to instantiate is selected based on the "),C2e=n(_M,"CODE",{});var M5t=s(C2e);W3r=r(M5t,"model_type"),M5t.forEach(t),Q3r=r(_M,` property of the config object (either
passed as an argument or loaded from `),M2e=n(_M,"CODE",{});var E5t=s(M2e);H3r=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),U3r=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(_M,"CODE",{});var y5t=s(E2e);J3r=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),Y3r=r(_M,":"),_M.forEach(t),K3r=i(ka),lo=n(ka,"UL",{});var aa=s(lo);l4=n(aa,"LI",{});var s8e=s(l4);y2e=n(s8e,"STRONG",{});var w5t=s(y2e);Z3r=r(w5t,"albert"),w5t.forEach(t),eyr=r(s8e," \u2014 "),pV=n(s8e,"A",{href:!0});var A5t=s(pV);oyr=r(A5t,"FlaxAlbertForMultipleChoice"),A5t.forEach(t),ryr=r(s8e," (ALBERT model)"),s8e.forEach(t),tyr=i(aa),i4=n(aa,"LI",{});var l8e=s(i4);w2e=n(l8e,"STRONG",{});var L5t=s(w2e);ayr=r(L5t,"bert"),L5t.forEach(t),nyr=r(l8e," \u2014 "),_V=n(l8e,"A",{href:!0});var B5t=s(_V);syr=r(B5t,"FlaxBertForMultipleChoice"),B5t.forEach(t),lyr=r(l8e," (BERT model)"),l8e.forEach(t),iyr=i(aa),d4=n(aa,"LI",{});var i8e=s(d4);A2e=n(i8e,"STRONG",{});var x5t=s(A2e);dyr=r(x5t,"big_bird"),x5t.forEach(t),cyr=r(i8e," \u2014 "),uV=n(i8e,"A",{href:!0});var k5t=s(uV);fyr=r(k5t,"FlaxBigBirdForMultipleChoice"),k5t.forEach(t),myr=r(i8e," (BigBird model)"),i8e.forEach(t),gyr=i(aa),c4=n(aa,"LI",{});var d8e=s(c4);L2e=n(d8e,"STRONG",{});var R5t=s(L2e);hyr=r(R5t,"distilbert"),R5t.forEach(t),pyr=r(d8e," \u2014 "),bV=n(d8e,"A",{href:!0});var S5t=s(bV);_yr=r(S5t,"FlaxDistilBertForMultipleChoice"),S5t.forEach(t),uyr=r(d8e," (DistilBERT model)"),d8e.forEach(t),byr=i(aa),f4=n(aa,"LI",{});var c8e=s(f4);B2e=n(c8e,"STRONG",{});var P5t=s(B2e);vyr=r(P5t,"electra"),P5t.forEach(t),Tyr=r(c8e," \u2014 "),vV=n(c8e,"A",{href:!0});var $5t=s(vV);Fyr=r($5t,"FlaxElectraForMultipleChoice"),$5t.forEach(t),Cyr=r(c8e," (ELECTRA model)"),c8e.forEach(t),Myr=i(aa),m4=n(aa,"LI",{});var f8e=s(m4);x2e=n(f8e,"STRONG",{});var I5t=s(x2e);Eyr=r(I5t,"roberta"),I5t.forEach(t),yyr=r(f8e," \u2014 "),TV=n(f8e,"A",{href:!0});var D5t=s(TV);wyr=r(D5t,"FlaxRobertaForMultipleChoice"),D5t.forEach(t),Ayr=r(f8e," (RoBERTa model)"),f8e.forEach(t),Lyr=i(aa),g4=n(aa,"LI",{});var m8e=s(g4);k2e=n(m8e,"STRONG",{});var j5t=s(k2e);Byr=r(j5t,"roformer"),j5t.forEach(t),xyr=r(m8e," \u2014 "),FV=n(m8e,"A",{href:!0});var N5t=s(FV);kyr=r(N5t,"FlaxRoFormerForMultipleChoice"),N5t.forEach(t),Ryr=r(m8e," (RoFormer model)"),m8e.forEach(t),aa.forEach(t),Syr=i(ka),R2e=n(ka,"P",{});var q5t=s(R2e);Pyr=r(q5t,"Examples:"),q5t.forEach(t),$yr=i(ka),m(qA.$$.fragment,ka),ka.forEach(t),vi.forEach(t),cxe=i(c),hf=n(c,"H2",{class:!0});var TRe=s(hf);h4=n(TRe,"A",{id:!0,class:!0,href:!0});var G5t=s(h4);S2e=n(G5t,"SPAN",{});var O5t=s(S2e);m(GA.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),Iyr=i(TRe),P2e=n(TRe,"SPAN",{});var X5t=s(P2e);Dyr=r(X5t,"FlaxAutoModelForNextSentencePrediction"),X5t.forEach(t),TRe.forEach(t),fxe=i(c),Dr=n(c,"DIV",{class:!0});var Fi=s(Dr);m(OA.$$.fragment,Fi),jyr=i(Fi),pf=n(Fi,"P",{});var cW=s(pf);Nyr=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$2e=n(cW,"CODE",{});var V5t=s($2e);qyr=r(V5t,"from_pretrained()"),V5t.forEach(t),Gyr=r(cW,"class method or the "),I2e=n(cW,"CODE",{});var z5t=s(I2e);Oyr=r(z5t,"from_config()"),z5t.forEach(t),Xyr=r(cW,`class
method.`),cW.forEach(t),Vyr=i(Fi),XA=n(Fi,"P",{});var FRe=s(XA);zyr=r(FRe,"This class cannot be instantiated directly using "),D2e=n(FRe,"CODE",{});var W5t=s(D2e);Wyr=r(W5t,"__init__()"),W5t.forEach(t),Qyr=r(FRe," (throws an error)."),FRe.forEach(t),Hyr=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(VA.$$.fragment,Ci),Uyr=i(Ci),j2e=n(Ci,"P",{});var Q5t=s(j2e);Jyr=r(Q5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Q5t.forEach(t),Yyr=i(Ci),_f=n(Ci,"P",{});var fW=s(_f);Kyr=r(fW,`Note:
Loading a model from its configuration file does `),N2e=n(fW,"STRONG",{});var H5t=s(N2e);Zyr=r(H5t,"not"),H5t.forEach(t),ewr=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),q2e=n(fW,"CODE",{});var U5t=s(q2e);owr=r(U5t,"from_pretrained()"),U5t.forEach(t),rwr=r(fW,"to load the model weights."),fW.forEach(t),twr=i(Ci),G2e=n(Ci,"P",{});var J5t=s(G2e);awr=r(J5t,"Examples:"),J5t.forEach(t),nwr=i(Ci),m(zA.$$.fragment,Ci),Ci.forEach(t),swr=i(Fi),$o=n(Fi,"DIV",{class:!0});var Ra=s($o);m(WA.$$.fragment,Ra),lwr=i(Ra),O2e=n(Ra,"P",{});var Y5t=s(O2e);iwr=r(Y5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Y5t.forEach(t),dwr=i(Ra),Sn=n(Ra,"P",{});var uM=s(Sn);cwr=r(uM,"The model class to instantiate is selected based on the "),X2e=n(uM,"CODE",{});var K5t=s(X2e);fwr=r(K5t,"model_type"),K5t.forEach(t),mwr=r(uM,` property of the config object (either
passed as an argument or loaded from `),V2e=n(uM,"CODE",{});var Z5t=s(V2e);gwr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),hwr=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(uM,"CODE",{});var e1t=s(z2e);pwr=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),_wr=r(uM,":"),uM.forEach(t),uwr=i(Ra),W2e=n(Ra,"UL",{});var o1t=s(W2e);p4=n(o1t,"LI",{});var g8e=s(p4);Q2e=n(g8e,"STRONG",{});var r1t=s(Q2e);bwr=r(r1t,"bert"),r1t.forEach(t),vwr=r(g8e," \u2014 "),CV=n(g8e,"A",{href:!0});var t1t=s(CV);Twr=r(t1t,"FlaxBertForNextSentencePrediction"),t1t.forEach(t),Fwr=r(g8e," (BERT model)"),g8e.forEach(t),o1t.forEach(t),Cwr=i(Ra),H2e=n(Ra,"P",{});var a1t=s(H2e);Mwr=r(a1t,"Examples:"),a1t.forEach(t),Ewr=i(Ra),m(QA.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),mxe=i(c),uf=n(c,"H2",{class:!0});var CRe=s(uf);_4=n(CRe,"A",{id:!0,class:!0,href:!0});var n1t=s(_4);U2e=n(n1t,"SPAN",{});var s1t=s(U2e);m(HA.$$.fragment,s1t),s1t.forEach(t),n1t.forEach(t),ywr=i(CRe),J2e=n(CRe,"SPAN",{});var l1t=s(J2e);wwr=r(l1t,"FlaxAutoModelForImageClassification"),l1t.forEach(t),CRe.forEach(t),gxe=i(c),jr=n(c,"DIV",{class:!0});var Mi=s(jr);m(UA.$$.fragment,Mi),Awr=i(Mi),bf=n(Mi,"P",{});var mW=s(bf);Lwr=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Y2e=n(mW,"CODE",{});var i1t=s(Y2e);Bwr=r(i1t,"from_pretrained()"),i1t.forEach(t),xwr=r(mW,"class method or the "),K2e=n(mW,"CODE",{});var d1t=s(K2e);kwr=r(d1t,"from_config()"),d1t.forEach(t),Rwr=r(mW,`class
method.`),mW.forEach(t),Swr=i(Mi),JA=n(Mi,"P",{});var MRe=s(JA);Pwr=r(MRe,"This class cannot be instantiated directly using "),Z2e=n(MRe,"CODE",{});var c1t=s(Z2e);$wr=r(c1t,"__init__()"),c1t.forEach(t),Iwr=r(MRe," (throws an error)."),MRe.forEach(t),Dwr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(YA.$$.fragment,Ei),jwr=i(Ei),eve=n(Ei,"P",{});var f1t=s(eve);Nwr=r(f1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),f1t.forEach(t),qwr=i(Ei),vf=n(Ei,"P",{});var gW=s(vf);Gwr=r(gW,`Note:
Loading a model from its configuration file does `),ove=n(gW,"STRONG",{});var m1t=s(ove);Owr=r(m1t,"not"),m1t.forEach(t),Xwr=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rve=n(gW,"CODE",{});var g1t=s(rve);Vwr=r(g1t,"from_pretrained()"),g1t.forEach(t),zwr=r(gW,"to load the model weights."),gW.forEach(t),Wwr=i(Ei),tve=n(Ei,"P",{});var h1t=s(tve);Qwr=r(h1t,"Examples:"),h1t.forEach(t),Hwr=i(Ei),m(KA.$$.fragment,Ei),Ei.forEach(t),Uwr=i(Mi),Io=n(Mi,"DIV",{class:!0});var Sa=s(Io);m(ZA.$$.fragment,Sa),Jwr=i(Sa),ave=n(Sa,"P",{});var p1t=s(ave);Ywr=r(p1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p1t.forEach(t),Kwr=i(Sa),Pn=n(Sa,"P",{});var bM=s(Pn);Zwr=r(bM,"The model class to instantiate is selected based on the "),nve=n(bM,"CODE",{});var _1t=s(nve);e6r=r(_1t,"model_type"),_1t.forEach(t),o6r=r(bM,` property of the config object (either
passed as an argument or loaded from `),sve=n(bM,"CODE",{});var u1t=s(sve);r6r=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),t6r=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(bM,"CODE",{});var b1t=s(lve);a6r=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),n6r=r(bM,":"),bM.forEach(t),s6r=i(Sa),e0=n(Sa,"UL",{});var ERe=s(e0);u4=n(ERe,"LI",{});var h8e=s(u4);ive=n(h8e,"STRONG",{});var v1t=s(ive);l6r=r(v1t,"beit"),v1t.forEach(t),i6r=r(h8e," \u2014 "),MV=n(h8e,"A",{href:!0});var T1t=s(MV);d6r=r(T1t,"FlaxBeitForImageClassification"),T1t.forEach(t),c6r=r(h8e," (BEiT model)"),h8e.forEach(t),f6r=i(ERe),b4=n(ERe,"LI",{});var p8e=s(b4);dve=n(p8e,"STRONG",{});var F1t=s(dve);m6r=r(F1t,"vit"),F1t.forEach(t),g6r=r(p8e," \u2014 "),EV=n(p8e,"A",{href:!0});var C1t=s(EV);h6r=r(C1t,"FlaxViTForImageClassification"),C1t.forEach(t),p6r=r(p8e," (ViT model)"),p8e.forEach(t),ERe.forEach(t),_6r=i(Sa),cve=n(Sa,"P",{});var M1t=s(cve);u6r=r(M1t,"Examples:"),M1t.forEach(t),b6r=i(Sa),m(o0.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),hxe=i(c),Tf=n(c,"H2",{class:!0});var yRe=s(Tf);v4=n(yRe,"A",{id:!0,class:!0,href:!0});var E1t=s(v4);fve=n(E1t,"SPAN",{});var y1t=s(fve);m(r0.$$.fragment,y1t),y1t.forEach(t),E1t.forEach(t),v6r=i(yRe),mve=n(yRe,"SPAN",{});var w1t=s(mve);T6r=r(w1t,"FlaxAutoModelForVision2Seq"),w1t.forEach(t),yRe.forEach(t),pxe=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);m(t0.$$.fragment,yi),F6r=i(yi),Ff=n(yi,"P",{});var hW=s(Ff);C6r=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gve=n(hW,"CODE",{});var A1t=s(gve);M6r=r(A1t,"from_pretrained()"),A1t.forEach(t),E6r=r(hW,"class method or the "),hve=n(hW,"CODE",{});var L1t=s(hve);y6r=r(L1t,"from_config()"),L1t.forEach(t),w6r=r(hW,`class
method.`),hW.forEach(t),A6r=i(yi),a0=n(yi,"P",{});var wRe=s(a0);L6r=r(wRe,"This class cannot be instantiated directly using "),pve=n(wRe,"CODE",{});var B1t=s(pve);B6r=r(B1t,"__init__()"),B1t.forEach(t),x6r=r(wRe," (throws an error)."),wRe.forEach(t),k6r=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(n0.$$.fragment,wi),R6r=i(wi),_ve=n(wi,"P",{});var x1t=s(_ve);S6r=r(x1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x1t.forEach(t),P6r=i(wi),Cf=n(wi,"P",{});var pW=s(Cf);$6r=r(pW,`Note:
Loading a model from its configuration file does `),uve=n(pW,"STRONG",{});var k1t=s(uve);I6r=r(k1t,"not"),k1t.forEach(t),D6r=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bve=n(pW,"CODE",{});var R1t=s(bve);j6r=r(R1t,"from_pretrained()"),R1t.forEach(t),N6r=r(pW,"to load the model weights."),pW.forEach(t),q6r=i(wi),vve=n(wi,"P",{});var S1t=s(vve);G6r=r(S1t,"Examples:"),S1t.forEach(t),O6r=i(wi),m(s0.$$.fragment,wi),wi.forEach(t),X6r=i(yi),Do=n(yi,"DIV",{class:!0});var Pa=s(Do);m(l0.$$.fragment,Pa),V6r=i(Pa),Tve=n(Pa,"P",{});var P1t=s(Tve);z6r=r(P1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),P1t.forEach(t),W6r=i(Pa),$n=n(Pa,"P",{});var vM=s($n);Q6r=r(vM,"The model class to instantiate is selected based on the "),Fve=n(vM,"CODE",{});var $1t=s(Fve);H6r=r($1t,"model_type"),$1t.forEach(t),U6r=r(vM,` property of the config object (either
passed as an argument or loaded from `),Cve=n(vM,"CODE",{});var I1t=s(Cve);J6r=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),Y6r=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(vM,"CODE",{});var D1t=s(Mve);K6r=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),Z6r=r(vM,":"),vM.forEach(t),eAr=i(Pa),Eve=n(Pa,"UL",{});var j1t=s(Eve);T4=n(j1t,"LI",{});var _8e=s(T4);yve=n(_8e,"STRONG",{});var N1t=s(yve);oAr=r(N1t,"vision-encoder-decoder"),N1t.forEach(t),rAr=r(_8e," \u2014 "),yV=n(_8e,"A",{href:!0});var q1t=s(yV);tAr=r(q1t,"FlaxVisionEncoderDecoderModel"),q1t.forEach(t),aAr=r(_8e," (Vision Encoder decoder model)"),_8e.forEach(t),j1t.forEach(t),nAr=i(Pa),wve=n(Pa,"P",{});var G1t=s(wve);sAr=r(G1t,"Examples:"),G1t.forEach(t),lAr=i(Pa),m(i0.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(J1t)),d(me,"id","auto-classes"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#auto-classes"),d(ie,"class","relative group"),d(In,"href","/docs/transformers/pr_15795/en/model_doc/auto#transformers.AutoConfig"),d(jn,"href","/docs/transformers/pr_15795/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_15795/en/model_doc/auto#transformers.AutoTokenizer"),d(Pi,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertModel"),d(Lf,"id","extending-the-auto-classes"),d(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lf,"href","#extending-the-auto-classes"),d($i,"class","relative group"),d(xf,"id","transformers.AutoConfig"),d(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xf,"href","#transformers.AutoConfig"),d(Ii,"class","relative group"),d(fL,"href","/docs/transformers/pr_15795/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(mL,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertConfig"),d(gL,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartConfig"),d(hL,"href","/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitConfig"),d(pL,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertConfig"),d(_L,"href","/docs/transformers/pr_15795/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(uL,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdConfig"),d(bL,"href","/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(vL,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(TL,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(FL,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertConfig"),d(CL,"href","/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineConfig"),d(ML,"href","/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPConfig"),d(EL,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertConfig"),d(yL,"href","/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextConfig"),d(wL,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLConfig"),d(AL,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(LL,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(BL,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaConfig"),d(xL,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(kL,"href","/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTConfig"),d(RL,"href","/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrConfig"),d(SL,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertConfig"),d(PL,"href","/docs/transformers/pr_15795/en/model_doc/dpr#transformers.DPRConfig"),d($L,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraConfig"),d(IL,"href","/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(DL,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertConfig"),d(jL,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetConfig"),d(NL,"href","/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTConfig"),d(qL,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelConfig"),d(GL,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Config"),d(OL,"href","/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(XL,"href","/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJConfig"),d(VL,"href","/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertConfig"),d(zL,"href","/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertConfig"),d(WL,"href","/docs/transformers/pr_15795/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(QL,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(HL,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(UL,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDConfig"),d(JL,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerConfig"),d(YL,"href","/docs/transformers/pr_15795/en/model_doc/luke#transformers.LukeConfig"),d(KL,"href","/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertConfig"),d(ZL,"href","/docs/transformers/pr_15795/en/model_doc/m2m_100#transformers.M2M100Config"),d(e8,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianConfig"),d(o8,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartConfig"),d(r8,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(t8,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(a8,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetConfig"),d(n8,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Config"),d(s8,"href","/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(l8,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(i8,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusConfig"),d(d8,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverConfig"),d(c8,"href","/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartConfig"),d(f8,"href","/docs/transformers/pr_15795/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(m8,"href","/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(g8,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(h8,"href","/docs/transformers/pr_15795/en/model_doc/rag#transformers.RagConfig"),d(p8,"href","/docs/transformers/pr_15795/en/model_doc/realm#transformers.RealmConfig"),d(_8,"href","/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerConfig"),d(u8,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertConfig"),d(b8,"href","/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertConfig"),d(v8,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaConfig"),d(T8,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerConfig"),d(F8,"href","/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerConfig"),d(C8,"href","/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWConfig"),d(M8,"href","/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDConfig"),d(E8,"href","/docs/transformers/pr_15795/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(y8,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(w8,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(A8,"href","/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterConfig"),d(L8,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(B8,"href","/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinConfig"),d(x8,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Config"),d(k8,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasConfig"),d(R8,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(S8,"href","/docs/transformers/pr_15795/en/model_doc/trocr#transformers.TrOCRConfig"),d(P8,"href","/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechConfig"),d($8,"href","/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(I8,"href","/docs/transformers/pr_15795/en/model_doc/vilt#transformers.ViltConfig"),d(D8,"href","/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(j8,"href","/docs/transformers/pr_15795/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(N8,"href","/docs/transformers/pr_15795/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(q8,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTConfig"),d(G8,"href","/docs/transformers/pr_15795/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(O8,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(X8,"href","/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMConfig"),d(V8,"href","/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMConfig"),d(z8,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMConfig"),d(W8,"href","/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Q8,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(H8,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(U8,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetConfig"),d(J8,"href","/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(_g,"class","docstring"),d(Xo,"class","docstring"),d(ug,"id","transformers.AutoTokenizer"),d(ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ug,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(Y8,"href","/docs/transformers/pr_15795/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(K8,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertTokenizer"),d(Z8,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(eB,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartTokenizer"),d(oB,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartTokenizerFast"),d(rB,"href","/docs/transformers/pr_15795/en/model_doc/barthez#transformers.BarthezTokenizer"),d(tB,"href","/docs/transformers/pr_15795/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(aB,"href","/docs/transformers/pr_15795/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(nB,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertTokenizer"),d(sB,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertTokenizerFast"),d(lB,"href","/docs/transformers/pr_15795/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(iB,"href","/docs/transformers/pr_15795/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(dB,"href","/docs/transformers/pr_15795/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(cB,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(fB,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(mB,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(gB,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(hB,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(pB,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(_B,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(uB,"href","/docs/transformers/pr_15795/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(bB,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertTokenizer"),d(vB,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(TB,"href","/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineTokenizer"),d(FB,"href","/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPTokenizer"),d(CB,"href","/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(MB,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(EB,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(yB,"href","/docs/transformers/pr_15795/en/model_doc/cpm#transformers.CpmTokenizer"),d(wB,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(AB,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaTokenizer"),d(LB,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(BB,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(xB,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(kB,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(RB,"href","/docs/transformers/pr_15795/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(SB,"href","/docs/transformers/pr_15795/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(PB,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraTokenizer"),d($B,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(IB,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(DB,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetTokenizer"),d(jB,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(NB,"href","/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(qB,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelTokenizer"),d(GB,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(OB,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(XB,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(VB,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(zB,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(WB,"href","/docs/transformers/pr_15795/en/model_doc/herbert#transformers.HerbertTokenizer"),d(QB,"href","/docs/transformers/pr_15795/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(HB,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(UB,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaTokenizer"),d(JB,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(YB,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(KB,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ZB,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(ex,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ox,"href","/docs/transformers/pr_15795/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(rx,"href","/docs/transformers/pr_15795/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(tx,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDTokenizer"),d(ax,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDTokenizerFast"),d(nx,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerTokenizer"),d(sx,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(lx,"href","/docs/transformers/pr_15795/en/model_doc/luke#transformers.LukeTokenizer"),d(ix,"href","/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(dx,"href","/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(cx,"href","/docs/transformers/pr_15795/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(fx,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianTokenizer"),d(mx,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartTokenizer"),d(gx,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(hx,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(px,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(_x,"href","/docs/transformers/pr_15795/en/model_doc/mluke#transformers.MLukeTokenizer"),d(ux,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(bx,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(vx,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Tx,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Fx,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.T5Tokenizer"),d(Cx,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Mx,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Ex,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(yx,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(wx,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ax,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Lx,"href","/docs/transformers/pr_15795/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Bx,"href","/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartTokenizer"),d(xx,"href","/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(kx,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertTokenizer"),d(Rx,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertTokenizerFast"),d(Sx,"href","/docs/transformers/pr_15795/en/model_doc/rag#transformers.RagTokenizer"),d(Px,"href","/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerTokenizer"),d($x,"href","/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Ix,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Dx,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(jx,"href","/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Nx,"href","/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(qx,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Gx,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ox,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Xx,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Vx,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(zx,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Wx,"href","/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Qx,"href","/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Hx,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Ux,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Jx,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.T5Tokenizer"),d(Yx,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Kx,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasTokenizer"),d(Zx,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(ek,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ok,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(rk,"href","/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMTokenizer"),d(tk,"href","/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(ak,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMTokenizer"),d(nk,"href","/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(sk,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(lk,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(ik,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(dk,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(mo,"class","docstring"),d(Qg,"class","docstring"),d(Vo,"class","docstring"),d(Hg,"id","transformers.AutoFeatureExtractor"),d(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hg,"href","#transformers.AutoFeatureExtractor"),d(Ni,"class","relative group"),d(ck,"href","/docs/transformers/pr_15795/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(fk,"href","/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(mk,"href","/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(gk,"href","/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(hk,"href","/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(pk,"href","/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(_k,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(uk,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(bk,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(vk,"href","/docs/transformers/pr_15795/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Tk,"href","/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Fk,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Ck,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Mk,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Ek,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(yk,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xe,"class","docstring"),d(fh,"class","docstring"),d(zo,"class","docstring"),d(mh,"id","transformers.AutoProcessor"),d(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mh,"href","#transformers.AutoProcessor"),d(qi,"class","relative group"),d(wk,"href","/docs/transformers/pr_15795/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Ak,"href","/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPProcessor"),d(Lk,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(Bk,"href","/docs/transformers/pr_15795/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(xk,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(kk,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(Rk,"href","/docs/transformers/pr_15795/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Sk,"href","/docs/transformers/pr_15795/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Pk,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ke,"class","docstring"),d(Ch,"class","docstring"),d(Wo,"class","docstring"),d(Mh,"id","transformers.AutoModel"),d(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mh,"href","#transformers.AutoModel"),d(Oi,"class","relative group"),d(qr,"class","docstring"),d($k,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertModel"),d(Ik,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartModel"),d(Dk,"href","/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitModel"),d(jk,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertModel"),d(Nk,"href","/docs/transformers/pr_15795/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(qk,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdModel"),d(Gk,"href","/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Ok,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Xk,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Vk,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertModel"),d(zk,"href","/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineModel"),d(Wk,"href","/docs/transformers/pr_15795/en/model_doc/clip#transformers.CLIPModel"),d(Qk,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertModel"),d(Hk,"href","/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextModel"),d(Uk,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLModel"),d(Jk,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Yk,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(Kk,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaModel"),d(Zk,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(eR,"href","/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTModel"),d(oR,"href","/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrModel"),d(rR,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertModel"),d(tR,"href","/docs/transformers/pr_15795/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(aR,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraModel"),d(nR,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertModel"),d(sR,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetModel"),d(lR,"href","/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTModel"),d(iR,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelModel"),d(dR,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelBaseModel"),d(cR,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2Model"),d(fR,"href","/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(mR,"href","/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJModel"),d(gR,"href","/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertModel"),d(hR,"href","/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertModel"),d(pR,"href","/docs/transformers/pr_15795/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(_R,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(uR,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(bR,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDModel"),d(vR,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerModel"),d(TR,"href","/docs/transformers/pr_15795/en/model_doc/luke#transformers.LukeModel"),d(FR,"href","/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertModel"),d(CR,"href","/docs/transformers/pr_15795/en/model_doc/m2m_100#transformers.M2M100Model"),d(MR,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianModel"),d(ER,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartModel"),d(yR,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(wR,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertModel"),d(AR,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetModel"),d(LR,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5Model"),d(BR,"href","/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerModel"),d(xR,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(kR,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusModel"),d(RR,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverModel"),d(SR,"href","/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartModel"),d(PR,"href","/docs/transformers/pr_15795/en/model_doc/poolformer#transformers.PoolFormerModel"),d($R,"href","/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(IR,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertModel"),d(DR,"href","/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerModel"),d(jR,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertModel"),d(NR,"href","/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertModel"),d(qR,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaModel"),d(GR,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerModel"),d(OR,"href","/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerModel"),d(XR,"href","/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWModel"),d(VR,"href","/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDModel"),d(zR,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(WR,"href","/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterModel"),d(QR,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(HR,"href","/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinModel"),d(UR,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5Model"),d(JR,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasModel"),d(YR,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(KR,"href","/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechModel"),d(ZR,"href","/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(eS,"href","/docs/transformers/pr_15795/en/model_doc/vilt#transformers.ViltModel"),d(oS,"href","/docs/transformers/pr_15795/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(rS,"href","/docs/transformers/pr_15795/en/model_doc/visual_bert#transformers.VisualBertModel"),d(tS,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTModel"),d(aS,"href","/docs/transformers/pr_15795/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(nS,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(sS,"href","/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMModel"),d(lS,"href","/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMModel"),d(iS,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMModel"),d(dS,"href","/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(cS,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(fS,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(mS,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetModel"),d(gS,"href","/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoModel"),d(Re,"class","docstring"),d(Qo,"class","docstring"),d(r_,"id","transformers.AutoModelForPreTraining"),d(r_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r_,"href","#transformers.AutoModelForPreTraining"),d(zi,"class","relative group"),d(Gr,"class","docstring"),d(hS,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForPreTraining"),d(pS,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(_S,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForPreTraining"),d(uS,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(bS,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(vS,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(TS,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(FS,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(CS,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(MS,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(ES,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForPreTraining"),d(yS,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(wS,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForPreTraining"),d(AS,"href","/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(LS,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(BS,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(xS,"href","/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(kS,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(RS,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(SS,"href","/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(PS,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d($S,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(IS,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(DS,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(jS,"href","/docs/transformers/pr_15795/en/model_doc/retribert#transformers.RetriBertModel"),d(NS,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(qS,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(GS,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(OS,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(XS,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(VS,"href","/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(zS,"href","/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(WS,"href","/docs/transformers/pr_15795/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(QS,"href","/docs/transformers/pr_15795/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(HS,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(US,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(JS,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(YS,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(KS,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Se,"class","docstring"),d(Ho,"class","docstring"),d(X_,"id","transformers.AutoModelForCausalLM"),d(X_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X_,"href","#transformers.AutoModelForCausalLM"),d(Hi,"class","relative group"),d(Or,"class","docstring"),d(ZS,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForCausalLM"),d(eP,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertLMHeadModel"),d(oP,"href","/docs/transformers/pr_15795/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(rP,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(tP,"href","/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(aP,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(nP,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(sP,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(lP,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(iP,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(dP,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForCausalLM"),d(cP,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(fP,"href","/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(mP,"href","/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(gP,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianForCausalLM"),d(hP,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForCausalLM"),d(pP,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(_P,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(uP,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(bP,"href","/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(vP,"href","/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(TP,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(FP,"href","/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(CP,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(MP,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(EP,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(yP,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(wP,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(AP,"href","/docs/transformers/pr_15795/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(LP,"href","/docs/transformers/pr_15795/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(BP,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(xP,"href","/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(kP,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(RP,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(SP,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Pe,"class","docstring"),d(Uo,"class","docstring"),d(wu,"id","transformers.AutoModelForMaskedLM"),d(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wu,"href","#transformers.AutoModelForMaskedLM"),d(Yi,"class","relative group"),d(Xr,"class","docstring"),d(PP,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForMaskedLM"),d($P,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(IP,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForMaskedLM"),d(DP,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(jP,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(NP,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(qP,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(GP,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(OP,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(XP,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(VP,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(zP,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(WP,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(QP,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(HP,"href","/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(UP,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(JP,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(YP,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(KP,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(ZP,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(e$,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(o$,"href","/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(r$,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(t$,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(a$,"href","/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(n$,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(s$,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(l$,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(i$,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(d$,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(c$,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(f$,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(m$,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(g$,"href","/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForMaskedLM"),d($e,"class","docstring"),d(Jo,"class","docstring"),d(d5,"id","transformers.AutoModelForSeq2SeqLM"),d(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d5,"href","#transformers.AutoModelForSeq2SeqLM"),d(ed,"class","relative group"),d(Vr,"class","docstring"),d(h$,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(p$,"href","/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(_$,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(u$,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(b$,"href","/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(v$,"href","/docs/transformers/pr_15795/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(T$,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(F$,"href","/docs/transformers/pr_15795/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(C$,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.MarianMTModel"),d(M$,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(E$,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(y$,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(w$,"href","/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(A$,"href","/docs/transformers/pr_15795/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(B$,"href","/docs/transformers/pr_15795/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ie,"class","docstring"),d(Yo,"class","docstring"),d(A5,"id","transformers.AutoModelForSequenceClassification"),d(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A5,"href","#transformers.AutoModelForSequenceClassification"),d(td,"class","relative group"),d(zr,"class","docstring"),d(x$,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(k$,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForSequenceClassification"),d(R$,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForSequenceClassification"),d(S$,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(P$,"href","/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d($$,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(I$,"href","/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(D$,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(j$,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(N$,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(q$,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(G$,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(O$,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(X$,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(V$,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(z$,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(W$,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Q$,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(H$,"href","/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(U$,"href","/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(J$,"href","/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Y$,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(K$,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Z$,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDForSequenceClassification"),d(eI,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(oI,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(rI,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(tI,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(aI,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(nI,"href","/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(sI,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(lI,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(iI,"href","/docs/transformers/pr_15795/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(dI,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(cI,"href","/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(fI,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(mI,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(gI,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(hI,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(pI,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(_I,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(uI,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(bI,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(vI,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(TI,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(FI,"href","/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(F1,"id","transformers.AutoModelForMultipleChoice"),d(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F1,"href","#transformers.AutoModelForMultipleChoice"),d(sd,"class","relative group"),d(Wr,"class","docstring"),d(CI,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(MI,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForMultipleChoice"),d(EI,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(yI,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(wI,"href","/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(AI,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(LI,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(BI,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(xI,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(kI,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(RI,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(SI,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(PI,"href","/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d($I,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(II,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(DI,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(jI,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(NI,"href","/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(qI,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(GI,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(OI,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(XI,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(VI,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(zI,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(WI,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(QI,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(HI,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(UI,"href","/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(je,"class","docstring"),d(Zo,"class","docstring"),d(Y1,"id","transformers.AutoModelForNextSentencePrediction"),d(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y1,"href","#transformers.AutoModelForNextSentencePrediction"),d(dd,"class","relative group"),d(Qr,"class","docstring"),d(JI,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(YI,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(KI,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(ZI,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(eD,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ne,"class","docstring"),d(er,"class","docstring"),d(ab,"id","transformers.AutoModelForTokenClassification"),d(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ab,"href","#transformers.AutoModelForTokenClassification"),d(md,"class","relative group"),d(Hr,"class","docstring"),d(oD,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(rD,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForTokenClassification"),d(tD,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(aD,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(nD,"href","/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineForTokenClassification"),d(sD,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(lD,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(iD,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(dD,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(cD,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(fD,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(mD,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(gD,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(hD,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(pD,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(_D,"href","/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(uD,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(bD,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(vD,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(TD,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(FD,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(CD,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(MD,"href","/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(ED,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(yD,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(wD,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(AD,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(LD,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(BD,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(xD,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(kD,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(RD,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(SD,"href","/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(qe,"class","docstring"),d(or,"class","docstring"),d(Nb,"id","transformers.AutoModelForQuestionAnswering"),d(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nb,"href","#transformers.AutoModelForQuestionAnswering"),d(pd,"class","relative group"),d(Ur,"class","docstring"),d(PD,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d($D,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_15795/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_15795/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(HD,"href","/docs/transformers/pr_15795/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15795/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15795/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15795/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_15795/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15795/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_15795/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15795/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15795/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15795/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(pj,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(bj,"href","/docs/transformers/pr_15795/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Ge,"class","docstring"),d(rr,"class","docstring"),d(w2,"id","transformers.AutoModelForTableQuestionAnswering"),d(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(bd,"class","relative group"),d(Jr,"class","docstring"),d(vj,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Oe,"class","docstring"),d(tr,"class","docstring"),d(B2,"id","transformers.AutoModelForImageClassification"),d(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B2,"href","#transformers.AutoModelForImageClassification"),d(Fd,"class","relative group"),d(Yr,"class","docstring"),d(Tj,"href","/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitForImageClassification"),d(Fj,"href","/docs/transformers/pr_15795/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(Cj,"href","/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Mj,"href","/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Ej,"href","/docs/transformers/pr_15795/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(yj,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(wj,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Aj,"href","/docs/transformers/pr_15795/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Lj,"href","/docs/transformers/pr_15795/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Bj,"href","/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(xj,"href","/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinForImageClassification"),d(kj,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTForImageClassification"),d(Xe,"class","docstring"),d(ar,"class","docstring"),d(j2,"id","transformers.AutoModelForVision2Seq"),d(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j2,"href","#transformers.AutoModelForVision2Seq"),d(Ed,"class","relative group"),d(Kr,"class","docstring"),d(Rj,"href","/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ve,"class","docstring"),d(nr,"class","docstring"),d(G2,"id","transformers.AutoModelForAudioClassification"),d(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G2,"href","#transformers.AutoModelForAudioClassification"),d(Ad,"class","relative group"),d(Zr,"class","docstring"),d(Sj,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Pj,"href","/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d($j,"href","/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Ij,"href","/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Dj,"href","/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(jj,"href","/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Nj,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(qj,"href","/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(ze,"class","docstring"),d(sr,"class","docstring"),d(Y2,"id","transformers.AutoModelForAudioFrameClassification"),d(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y2,"href","#transformers.AutoModelForAudioFrameClassification"),d(xd,"class","relative group"),d(et,"class","docstring"),d(Gj,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Oj,"href","/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Xj,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(Vj,"href","/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(We,"class","docstring"),d(lr,"class","docstring"),d(tv,"id","transformers.AutoModelForCTC"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.AutoModelForCTC"),d(Sd,"class","relative group"),d(ot,"class","docstring"),d(zj,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(Wj,"href","/docs/transformers/pr_15795/en/model_doc/hubert#transformers.HubertForCTC"),d(Qj,"href","/docs/transformers/pr_15795/en/model_doc/sew#transformers.SEWForCTC"),d(Hj,"href","/docs/transformers/pr_15795/en/model_doc/sew-d#transformers.SEWDForCTC"),d(Uj,"href","/docs/transformers/pr_15795/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(Jj,"href","/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(Yj,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(Kj,"href","/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Qe,"class","docstring"),d(ir,"class","docstring"),d(gv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Id,"class","relative group"),d(rt,"class","docstring"),d(Zj,"href","/docs/transformers/pr_15795/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(eN,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(He,"class","docstring"),d(dr,"class","docstring"),d(uv,"id","transformers.AutoModelForAudioXVector"),d(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uv,"href","#transformers.AutoModelForAudioXVector"),d(Nd,"class","relative group"),d(tt,"class","docstring"),d(oN,"href","/docs/transformers/pr_15795/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(rN,"href","/docs/transformers/pr_15795/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(tN,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(aN,"href","/docs/transformers/pr_15795/en/model_doc/wavlm#transformers.WavLMForXVector"),d(Ue,"class","docstring"),d(cr,"class","docstring"),d(Mv,"id","transformers.AutoModelForMaskedImageModeling"),d(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Od,"class","relative group"),d(at,"class","docstring"),d(nN,"href","/docs/transformers/pr_15795/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(sN,"href","/docs/transformers/pr_15795/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(lN,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Je,"class","docstring"),d(fr,"class","docstring"),d(Lv,"id","transformers.AutoModelForObjectDetection"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.AutoModelForObjectDetection"),d(Wd,"class","relative group"),d(nt,"class","docstring"),d(iN,"href","/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrForObjectDetection"),d(Ye,"class","docstring"),d(mr,"class","docstring"),d(kv,"id","transformers.AutoModelForImageSegmentation"),d(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kv,"href","#transformers.AutoModelForImageSegmentation"),d(Ud,"class","relative group"),d(st,"class","docstring"),d(dN,"href","/docs/transformers/pr_15795/en/model_doc/detr#transformers.DetrForSegmentation"),d(Ke,"class","docstring"),d(gr,"class","docstring"),d(Pv,"id","transformers.AutoModelForSemanticSegmentation"),d(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pv,"href","#transformers.AutoModelForSemanticSegmentation"),d(Kd,"class","relative group"),d(lt,"class","docstring"),d(cN,"href","/docs/transformers/pr_15795/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(fN,"href","/docs/transformers/pr_15795/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Ze,"class","docstring"),d(hr,"class","docstring"),d(jv,"id","transformers.TFAutoModel"),d(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jv,"href","#transformers.TFAutoModel"),d(oc,"class","relative group"),d(it,"class","docstring"),d(mN,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertModel"),d(gN,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.TFBartModel"),d(hN,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertModel"),d(pN,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(_N,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(uN,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertModel"),d(bN,"href","/docs/transformers/pr_15795/en/model_doc/clip#transformers.TFCLIPModel"),d(vN,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertModel"),d(TN,"href","/docs/transformers/pr_15795/en/model_doc/convnext#transformers.TFConvNextModel"),d(FN,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.TFCTRLModel"),d(CN,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaModel"),d(MN,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(EN,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(yN,"href","/docs/transformers/pr_15795/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(wN,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraModel"),d(AN,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(LN,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelModel"),d(BN,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(xN,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.TFGPT2Model"),d(kN,"href","/docs/transformers/pr_15795/en/model_doc/hubert#transformers.TFHubertModel"),d(RN,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(SN,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.TFLEDModel"),d(PN,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerModel"),d($N,"href","/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.TFLxmertModel"),d(IN,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.TFMarianModel"),d(DN,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.TFMBartModel"),d(jN,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(NN,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetModel"),d(qN,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.TFMT5Model"),d(GN,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(ON,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.TFPegasusModel"),d(XN,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertModel"),d(VN,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaModel"),d(zN,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerModel"),d(WN,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(QN,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.TFT5Model"),d(HN,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasModel"),d(UN,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(JN,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.TFViTModel"),d(YN,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(KN,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMModel"),d(ZN,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(eq,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetModel"),d(go,"class","docstring"),d(pr,"class","docstring"),d(wT,"id","transformers.TFAutoModelForPreTraining"),d(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wT,"href","#transformers.TFAutoModelForPreTraining"),d(ac,"class","relative group"),d(dt,"class","docstring"),d(oq,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(rq,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(tq,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForPreTraining"),d(aq,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(nq,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(sq,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(lq,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(iq,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(dq,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(cq,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(fq,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(mq,"href","/docs/transformers/pr_15795/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(gq,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(hq,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(pq,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(_q,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(uq,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bq,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(vq,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Tq,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Fq,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Cq,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(ho,"class","docstring"),d(_r,"class","docstring"),d(UT,"id","transformers.TFAutoModelForCausalLM"),d(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UT,"href","#transformers.TFAutoModelForCausalLM"),d(lc,"class","relative group"),d(ct,"class","docstring"),d(Mq,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Eq,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(yq,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(wq,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Aq,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(Lq,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(Bq,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(xq,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(kq,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Rq,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(ur,"class","docstring"),d(s7,"id","transformers.TFAutoModelForImageClassification"),d(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s7,"href","#transformers.TFAutoModelForImageClassification"),d(cc,"class","relative group"),d(ft,"class","docstring"),d(Sq,"href","/docs/transformers/pr_15795/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(Pq,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(br,"class","docstring"),d(d7,"id","transformers.TFAutoModelForMaskedLM"),d(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d7,"href","#transformers.TFAutoModelForMaskedLM"),d(gc,"class","relative group"),d(mt,"class","docstring"),d($q,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(Iq,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(Dq,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(jq,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(Nq,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(qq,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(Gq,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(Oq,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(Xq,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(Vq,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(zq,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Wq,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(Qq,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(Hq,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Uq,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(Jq,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Yq,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(Kq,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Zq,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(eG,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uo,"class","docstring"),d(vr,"class","docstring"),d(x7,"id","transformers.TFAutoModelForSeq2SeqLM"),d(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x7,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(_c,"class","relative group"),d(gt,"class","docstring"),d(oG,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(rG,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(tG,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(aG,"href","/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(nG,"href","/docs/transformers/pr_15795/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(sG,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.TFMarianMTModel"),d(lG,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(iG,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(dG,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(cG,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bo,"class","docstring"),d(Tr,"class","docstring"),d(G7,"id","transformers.TFAutoModelForSequenceClassification"),d(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G7,"href","#transformers.TFAutoModelForSequenceClassification"),d(vc,"class","relative group"),d(ht,"class","docstring"),d(fG,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(mG,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(gG,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(hG,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(pG,"href","/docs/transformers/pr_15795/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(_G,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(uG,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(bG,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(vG,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(TG,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(FG,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(CG,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(MG,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(EG,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(yG,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(wG,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(AG,"href","/docs/transformers/pr_15795/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(LG,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(BG,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(xG,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(kG,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(RG,"href","/docs/transformers/pr_15795/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(SG,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(PG,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d($G,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(Fr,"class","docstring"),d(gF,"id","transformers.TFAutoModelForMultipleChoice"),d(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gF,"href","#transformers.TFAutoModelForMultipleChoice"),d(Cc,"class","relative group"),d(pt,"class","docstring"),d(IG,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(DG,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(jG,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(NG,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(qG,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(GG,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(OG,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(XG,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(VG,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(zG,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(WG,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(QG,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(HG,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(UG,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(JG,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(YG,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(KG,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Cr,"class","docstring"),d(kF,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(yc,"class","relative group"),d(_t,"class","docstring"),d(ZG,"href","/docs/transformers/pr_15795/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Fo,"class","docstring"),d(Mr,"class","docstring"),d(SF,"id","transformers.TFAutoModelForTokenClassification"),d(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SF,"href","#transformers.TFAutoModelForTokenClassification"),d(Lc,"class","relative group"),d(ut,"class","docstring"),d(eO,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(oO,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(rO,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(tO,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(aO,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(nO,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(sO,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(lO,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(iO,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(dO,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(cO,"href","/docs/transformers/pr_15795/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(fO,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(mO,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(gO,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(hO,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(pO,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(_O,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(uO,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(bO,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(vO,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring"),d(Er,"class","docstring"),d(e9,"id","transformers.TFAutoModelForQuestionAnswering"),d(e9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e9,"href","#transformers.TFAutoModelForQuestionAnswering"),d(kc,"class","relative group"),d(bt,"class","docstring"),d(TO,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(FO,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(CO,"href","/docs/transformers/pr_15795/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(MO,"href","/docs/transformers/pr_15795/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(EO,"href","/docs/transformers/pr_15795/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(yO,"href","/docs/transformers/pr_15795/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(wO,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(AO,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(LO,"href","/docs/transformers/pr_15795/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(BO,"href","/docs/transformers/pr_15795/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(xO,"href","/docs/transformers/pr_15795/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(kO,"href","/docs/transformers/pr_15795/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(RO,"href","/docs/transformers/pr_15795/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(SO,"href","/docs/transformers/pr_15795/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(PO,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d($O,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(IO,"href","/docs/transformers/pr_15795/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(DO,"href","/docs/transformers/pr_15795/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(jO,"href","/docs/transformers/pr_15795/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(T9,"id","transformers.TFAutoModelForVision2Seq"),d(T9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T9,"href","#transformers.TFAutoModelForVision2Seq"),d(Pc,"class","relative group"),d(vt,"class","docstring"),d(NO,"href","/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Eo,"class","docstring"),d(wr,"class","docstring"),d(C9,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(C9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C9,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Dc,"class","relative group"),d(Tt,"class","docstring"),d(qO,"href","/docs/transformers/pr_15795/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring"),d(Ar,"class","docstring"),d(E9,"id","transformers.FlaxAutoModel"),d(E9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E9,"href","#transformers.FlaxAutoModel"),d(qc,"class","relative group"),d(Ft,"class","docstring"),d(GO,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertModel"),d(OO,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartModel"),d(XO,"href","/docs/transformers/pr_15795/en/model_doc/beit#transformers.FlaxBeitModel"),d(VO,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertModel"),d(zO,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(WO,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(QO,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(HO,"href","/docs/transformers/pr_15795/en/model_doc/clip#transformers.FlaxCLIPModel"),d(UO,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(JO,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraModel"),d(YO,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(KO,"href","/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(ZO,"href","/docs/transformers/pr_15795/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(eX,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.FlaxMarianModel"),d(oX,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartModel"),d(rX,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.FlaxMT5Model"),d(tX,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(aX,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(nX,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(sX,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.FlaxT5Model"),d(lX,"href","/docs/transformers/pr_15795/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(iX,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.FlaxViTModel"),d(dX,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(cX,"href","/docs/transformers/pr_15795/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wo,"class","docstring"),d(Lr,"class","docstring"),d(U9,"id","transformers.FlaxAutoModelForCausalLM"),d(U9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U9,"href","#transformers.FlaxAutoModelForCausalLM"),d(Xc,"class","relative group"),d(Ct,"class","docstring"),d(fX,"href","/docs/transformers/pr_15795/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(mX,"href","/docs/transformers/pr_15795/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(gX,"href","/docs/transformers/pr_15795/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(hX,"href","/docs/transformers/pr_15795/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Ao,"class","docstring"),d(Br,"class","docstring"),d(eC,"id","transformers.FlaxAutoModelForPreTraining"),d(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eC,"href","#transformers.FlaxAutoModelForPreTraining"),d(Wc,"class","relative group"),d(Mt,"class","docstring"),d(pX,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(_X,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(bX,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(vX,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(TX,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(CX,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(MX,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(EX,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_15795/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Lo,"class","docstring"),d(xr,"class","docstring"),d(mC,"id","transformers.FlaxAutoModelForMaskedLM"),d(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(Uc,"class","relative group"),d(Et,"class","docstring"),d(wX,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(AX,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(LX,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(BX,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(xX,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(kX,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(RX,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(PX,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Bo,"class","docstring"),d(kr,"class","docstring"),d(CC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(Kc,"class","relative group"),d(yt,"class","docstring"),d($X,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_15795/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(jX,"href","/docs/transformers/pr_15795/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(NX,"href","/docs/transformers/pr_15795/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(qX,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_15795/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_15795/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_15795/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(xo,"class","docstring"),d(Rr,"class","docstring"),d(RC,"id","transformers.FlaxAutoModelForSequenceClassification"),d(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RC,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(of,"class","relative group"),d(wt,"class","docstring"),d(VX,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(WX,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(QX,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(HX,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(JX,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(YX,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(KX,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ko,"class","docstring"),d(Sr,"class","docstring"),d(OC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(af,"class","relative group"),d(At,"class","docstring"),d(ZX,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(eV,"href","/docs/transformers/pr_15795/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(oV,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(rV,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(tV,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(aV,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(nV,"href","/docs/transformers/pr_15795/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(sV,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(lV,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ro,"class","docstring"),d(Pr,"class","docstring"),d(KC,"id","transformers.FlaxAutoModelForTokenClassification"),d(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(lf,"class","relative group"),d(Lt,"class","docstring"),d(iV,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(dV,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(cV,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(fV,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(mV,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(gV,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(hV,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(So,"class","docstring"),d($r,"class","docstring"),d(s4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(ff,"class","relative group"),d(Bt,"class","docstring"),d(pV,"href","/docs/transformers/pr_15795/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(_V,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(uV,"href","/docs/transformers/pr_15795/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(bV,"href","/docs/transformers/pr_15795/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(vV,"href","/docs/transformers/pr_15795/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(TV,"href","/docs/transformers/pr_15795/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(FV,"href","/docs/transformers/pr_15795/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Po,"class","docstring"),d(Ir,"class","docstring"),d(h4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(hf,"class","relative group"),d(xt,"class","docstring"),d(CV,"href","/docs/transformers/pr_15795/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(_4,"id","transformers.FlaxAutoModelForImageClassification"),d(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_4,"href","#transformers.FlaxAutoModelForImageClassification"),d(uf,"class","relative group"),d(kt,"class","docstring"),d(MV,"href","/docs/transformers/pr_15795/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(EV,"href","/docs/transformers/pr_15795/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Io,"class","docstring"),d(jr,"class","docstring"),d(v4,"id","transformers.FlaxAutoModelForVision2Seq"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Tf,"class","relative group"),d(Rt,"class","docstring"),d(yV,"href","/docs/transformers/pr_15795/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Nr,"class","docstring")},m(c,u){e(document.head,J),b(c,Be,u),b(c,ie,u),e(ie,me),e(me,no),g(ce,no,null),e(ie,ue),e(ie,Go),e(Go,Li),b(c,Ef,u),b(c,sa,u),e(sa,Bi),e(sa,xi),e(xi,TM),e(sa,yf),b(c,ye,u),b(c,io,u),e(io,ki),e(io,In),e(In,FM),e(io,Dn),e(io,jn),e(jn,CM),e(io,Ri),e(io,Nn),e(Nn,MM),e(io,Si),b(c,wf,u),g($a,c,u),b(c,co,u),b(c,ge,u),e(ge,nL),e(ge,Pi),e(Pi,sL),e(ge,lL),b(c,Oo,u),b(c,Ia,u),e(Ia,iL),e(Ia,Af),e(Af,dL),e(Ia,ARe),b(c,u8e,u),b(c,$i,u),e($i,Lf),e(Lf,_W),g(EM,_W,null),e($i,LRe),e($i,uW),e(uW,BRe),b(c,b8e,u),b(c,qn,u),e(qn,xRe),e(qn,bW),e(bW,kRe),e(qn,RRe),e(qn,vW),e(vW,SRe),e(qn,PRe),b(c,v8e,u),g(yM,c,u),b(c,T8e,u),b(c,cL,u),e(cL,$Re),b(c,F8e,u),g(Bf,c,u),b(c,C8e,u),b(c,Ii,u),e(Ii,xf),e(xf,TW),g(wM,TW,null),e(Ii,IRe),e(Ii,FW),e(FW,DRe),b(c,M8e,u),b(c,Xo,u),g(AM,Xo,null),e(Xo,jRe),e(Xo,LM),e(LM,NRe),e(LM,fL),e(fL,qRe),e(LM,GRe),e(Xo,ORe),e(Xo,BM),e(BM,XRe),e(BM,CW),e(CW,VRe),e(BM,zRe),e(Xo,WRe),e(Xo,fo),g(xM,fo,null),e(fo,QRe),e(fo,MW),e(MW,HRe),e(fo,URe),e(fo,Di),e(Di,JRe),e(Di,EW),e(EW,YRe),e(Di,KRe),e(Di,yW),e(yW,ZRe),e(Di,eSe),e(fo,oSe),e(fo,v),e(v,kf),e(kf,wW),e(wW,rSe),e(kf,tSe),e(kf,mL),e(mL,aSe),e(kf,nSe),e(v,sSe),e(v,Rf),e(Rf,AW),e(AW,lSe),e(Rf,iSe),e(Rf,gL),e(gL,dSe),e(Rf,cSe),e(v,fSe),e(v,Sf),e(Sf,LW),e(LW,mSe),e(Sf,gSe),e(Sf,hL),e(hL,hSe),e(Sf,pSe),e(v,_Se),e(v,Pf),e(Pf,BW),e(BW,uSe),e(Pf,bSe),e(Pf,pL),e(pL,vSe),e(Pf,TSe),e(v,FSe),e(v,$f),e($f,xW),e(xW,CSe),e($f,MSe),e($f,_L),e(_L,ESe),e($f,ySe),e(v,wSe),e(v,If),e(If,kW),e(kW,ASe),e(If,LSe),e(If,uL),e(uL,BSe),e(If,xSe),e(v,kSe),e(v,Df),e(Df,RW),e(RW,RSe),e(Df,SSe),e(Df,bL),e(bL,PSe),e(Df,$Se),e(v,ISe),e(v,jf),e(jf,SW),e(SW,DSe),e(jf,jSe),e(jf,vL),e(vL,NSe),e(jf,qSe),e(v,GSe),e(v,Nf),e(Nf,PW),e(PW,OSe),e(Nf,XSe),e(Nf,TL),e(TL,VSe),e(Nf,zSe),e(v,WSe),e(v,qf),e(qf,$W),e($W,QSe),e(qf,HSe),e(qf,FL),e(FL,USe),e(qf,JSe),e(v,YSe),e(v,Gf),e(Gf,IW),e(IW,KSe),e(Gf,ZSe),e(Gf,CL),e(CL,ePe),e(Gf,oPe),e(v,rPe),e(v,Of),e(Of,DW),e(DW,tPe),e(Of,aPe),e(Of,ML),e(ML,nPe),e(Of,sPe),e(v,lPe),e(v,Xf),e(Xf,jW),e(jW,iPe),e(Xf,dPe),e(Xf,EL),e(EL,cPe),e(Xf,fPe),e(v,mPe),e(v,Vf),e(Vf,NW),e(NW,gPe),e(Vf,hPe),e(Vf,yL),e(yL,pPe),e(Vf,_Pe),e(v,uPe),e(v,zf),e(zf,qW),e(qW,bPe),e(zf,vPe),e(zf,wL),e(wL,TPe),e(zf,FPe),e(v,CPe),e(v,Wf),e(Wf,GW),e(GW,MPe),e(Wf,EPe),e(Wf,AL),e(AL,yPe),e(Wf,wPe),e(v,APe),e(v,Qf),e(Qf,OW),e(OW,LPe),e(Qf,BPe),e(Qf,LL),e(LL,xPe),e(Qf,kPe),e(v,RPe),e(v,Hf),e(Hf,XW),e(XW,SPe),e(Hf,PPe),e(Hf,BL),e(BL,$Pe),e(Hf,IPe),e(v,DPe),e(v,Uf),e(Uf,VW),e(VW,jPe),e(Uf,NPe),e(Uf,xL),e(xL,qPe),e(Uf,GPe),e(v,OPe),e(v,Jf),e(Jf,zW),e(zW,XPe),e(Jf,VPe),e(Jf,kL),e(kL,zPe),e(Jf,WPe),e(v,QPe),e(v,Yf),e(Yf,WW),e(WW,HPe),e(Yf,UPe),e(Yf,RL),e(RL,JPe),e(Yf,YPe),e(v,KPe),e(v,Kf),e(Kf,QW),e(QW,ZPe),e(Kf,e$e),e(Kf,SL),e(SL,o$e),e(Kf,r$e),e(v,t$e),e(v,Zf),e(Zf,HW),e(HW,a$e),e(Zf,n$e),e(Zf,PL),e(PL,s$e),e(Zf,l$e),e(v,i$e),e(v,em),e(em,UW),e(UW,d$e),e(em,c$e),e(em,$L),e($L,f$e),e(em,m$e),e(v,g$e),e(v,om),e(om,JW),e(JW,h$e),e(om,p$e),e(om,IL),e(IL,_$e),e(om,u$e),e(v,b$e),e(v,rm),e(rm,YW),e(YW,v$e),e(rm,T$e),e(rm,DL),e(DL,F$e),e(rm,C$e),e(v,M$e),e(v,tm),e(tm,KW),e(KW,E$e),e(tm,y$e),e(tm,jL),e(jL,w$e),e(tm,A$e),e(v,L$e),e(v,am),e(am,ZW),e(ZW,B$e),e(am,x$e),e(am,NL),e(NL,k$e),e(am,R$e),e(v,S$e),e(v,nm),e(nm,eQ),e(eQ,P$e),e(nm,$$e),e(nm,qL),e(qL,I$e),e(nm,D$e),e(v,j$e),e(v,sm),e(sm,oQ),e(oQ,N$e),e(sm,q$e),e(sm,GL),e(GL,G$e),e(sm,O$e),e(v,X$e),e(v,lm),e(lm,rQ),e(rQ,V$e),e(lm,z$e),e(lm,OL),e(OL,W$e),e(lm,Q$e),e(v,H$e),e(v,im),e(im,tQ),e(tQ,U$e),e(im,J$e),e(im,XL),e(XL,Y$e),e(im,K$e),e(v,Z$e),e(v,dm),e(dm,aQ),e(aQ,eIe),e(dm,oIe),e(dm,VL),e(VL,rIe),e(dm,tIe),e(v,aIe),e(v,cm),e(cm,nQ),e(nQ,nIe),e(cm,sIe),e(cm,zL),e(zL,lIe),e(cm,iIe),e(v,dIe),e(v,fm),e(fm,sQ),e(sQ,cIe),e(fm,fIe),e(fm,WL),e(WL,mIe),e(fm,gIe),e(v,hIe),e(v,mm),e(mm,lQ),e(lQ,pIe),e(mm,_Ie),e(mm,QL),e(QL,uIe),e(mm,bIe),e(v,vIe),e(v,gm),e(gm,iQ),e(iQ,TIe),e(gm,FIe),e(gm,HL),e(HL,CIe),e(gm,MIe),e(v,EIe),e(v,hm),e(hm,dQ),e(dQ,yIe),e(hm,wIe),e(hm,UL),e(UL,AIe),e(hm,LIe),e(v,BIe),e(v,pm),e(pm,cQ),e(cQ,xIe),e(pm,kIe),e(pm,JL),e(JL,RIe),e(pm,SIe),e(v,PIe),e(v,_m),e(_m,fQ),e(fQ,$Ie),e(_m,IIe),e(_m,YL),e(YL,DIe),e(_m,jIe),e(v,NIe),e(v,um),e(um,mQ),e(mQ,qIe),e(um,GIe),e(um,KL),e(KL,OIe),e(um,XIe),e(v,VIe),e(v,bm),e(bm,gQ),e(gQ,zIe),e(bm,WIe),e(bm,ZL),e(ZL,QIe),e(bm,HIe),e(v,UIe),e(v,vm),e(vm,hQ),e(hQ,JIe),e(vm,YIe),e(vm,e8),e(e8,KIe),e(vm,ZIe),e(v,eDe),e(v,Tm),e(Tm,pQ),e(pQ,oDe),e(Tm,rDe),e(Tm,o8),e(o8,tDe),e(Tm,aDe),e(v,nDe),e(v,Fm),e(Fm,_Q),e(_Q,sDe),e(Fm,lDe),e(Fm,r8),e(r8,iDe),e(Fm,dDe),e(v,cDe),e(v,Cm),e(Cm,uQ),e(uQ,fDe),e(Cm,mDe),e(Cm,t8),e(t8,gDe),e(Cm,hDe),e(v,pDe),e(v,Mm),e(Mm,bQ),e(bQ,_De),e(Mm,uDe),e(Mm,a8),e(a8,bDe),e(Mm,vDe),e(v,TDe),e(v,Em),e(Em,vQ),e(vQ,FDe),e(Em,CDe),e(Em,n8),e(n8,MDe),e(Em,EDe),e(v,yDe),e(v,ym),e(ym,TQ),e(TQ,wDe),e(ym,ADe),e(ym,s8),e(s8,LDe),e(ym,BDe),e(v,xDe),e(v,wm),e(wm,FQ),e(FQ,kDe),e(wm,RDe),e(wm,l8),e(l8,SDe),e(wm,PDe),e(v,$De),e(v,Am),e(Am,CQ),e(CQ,IDe),e(Am,DDe),e(Am,i8),e(i8,jDe),e(Am,NDe),e(v,qDe),e(v,Lm),e(Lm,MQ),e(MQ,GDe),e(Lm,ODe),e(Lm,d8),e(d8,XDe),e(Lm,VDe),e(v,zDe),e(v,Bm),e(Bm,EQ),e(EQ,WDe),e(Bm,QDe),e(Bm,c8),e(c8,HDe),e(Bm,UDe),e(v,JDe),e(v,xm),e(xm,yQ),e(yQ,YDe),e(xm,KDe),e(xm,f8),e(f8,ZDe),e(xm,eje),e(v,oje),e(v,km),e(km,wQ),e(wQ,rje),e(km,tje),e(km,m8),e(m8,aje),e(km,nje),e(v,sje),e(v,Rm),e(Rm,AQ),e(AQ,lje),e(Rm,ije),e(Rm,g8),e(g8,dje),e(Rm,cje),e(v,fje),e(v,Sm),e(Sm,LQ),e(LQ,mje),e(Sm,gje),e(Sm,h8),e(h8,hje),e(Sm,pje),e(v,_je),e(v,Pm),e(Pm,BQ),e(BQ,uje),e(Pm,bje),e(Pm,p8),e(p8,vje),e(Pm,Tje),e(v,Fje),e(v,$m),e($m,xQ),e(xQ,Cje),e($m,Mje),e($m,_8),e(_8,Eje),e($m,yje),e(v,wje),e(v,Im),e(Im,kQ),e(kQ,Aje),e(Im,Lje),e(Im,u8),e(u8,Bje),e(Im,xje),e(v,kje),e(v,Dm),e(Dm,RQ),e(RQ,Rje),e(Dm,Sje),e(Dm,b8),e(b8,Pje),e(Dm,$je),e(v,Ije),e(v,jm),e(jm,SQ),e(SQ,Dje),e(jm,jje),e(jm,v8),e(v8,Nje),e(jm,qje),e(v,Gje),e(v,Nm),e(Nm,PQ),e(PQ,Oje),e(Nm,Xje),e(Nm,T8),e(T8,Vje),e(Nm,zje),e(v,Wje),e(v,qm),e(qm,$Q),e($Q,Qje),e(qm,Hje),e(qm,F8),e(F8,Uje),e(qm,Jje),e(v,Yje),e(v,Gm),e(Gm,IQ),e(IQ,Kje),e(Gm,Zje),e(Gm,C8),e(C8,eNe),e(Gm,oNe),e(v,rNe),e(v,Om),e(Om,DQ),e(DQ,tNe),e(Om,aNe),e(Om,M8),e(M8,nNe),e(Om,sNe),e(v,lNe),e(v,Xm),e(Xm,jQ),e(jQ,iNe),e(Xm,dNe),e(Xm,E8),e(E8,cNe),e(Xm,fNe),e(v,mNe),e(v,Vm),e(Vm,NQ),e(NQ,gNe),e(Vm,hNe),e(Vm,y8),e(y8,pNe),e(Vm,_Ne),e(v,uNe),e(v,zm),e(zm,qQ),e(qQ,bNe),e(zm,vNe),e(zm,w8),e(w8,TNe),e(zm,FNe),e(v,CNe),e(v,Wm),e(Wm,GQ),e(GQ,MNe),e(Wm,ENe),e(Wm,A8),e(A8,yNe),e(Wm,wNe),e(v,ANe),e(v,Qm),e(Qm,OQ),e(OQ,LNe),e(Qm,BNe),e(Qm,L8),e(L8,xNe),e(Qm,kNe),e(v,RNe),e(v,Hm),e(Hm,XQ),e(XQ,SNe),e(Hm,PNe),e(Hm,B8),e(B8,$Ne),e(Hm,INe),e(v,DNe),e(v,Um),e(Um,VQ),e(VQ,jNe),e(Um,NNe),e(Um,x8),e(x8,qNe),e(Um,GNe),e(v,ONe),e(v,Jm),e(Jm,zQ),e(zQ,XNe),e(Jm,VNe),e(Jm,k8),e(k8,zNe),e(Jm,WNe),e(v,QNe),e(v,Ym),e(Ym,WQ),e(WQ,HNe),e(Ym,UNe),e(Ym,R8),e(R8,JNe),e(Ym,YNe),e(v,KNe),e(v,Km),e(Km,QQ),e(QQ,ZNe),e(Km,eqe),e(Km,S8),e(S8,oqe),e(Km,rqe),e(v,tqe),e(v,Zm),e(Zm,HQ),e(HQ,aqe),e(Zm,nqe),e(Zm,P8),e(P8,sqe),e(Zm,lqe),e(v,iqe),e(v,eg),e(eg,UQ),e(UQ,dqe),e(eg,cqe),e(eg,$8),e($8,fqe),e(eg,mqe),e(v,gqe),e(v,og),e(og,JQ),e(JQ,hqe),e(og,pqe),e(og,I8),e(I8,_qe),e(og,uqe),e(v,bqe),e(v,rg),e(rg,YQ),e(YQ,vqe),e(rg,Tqe),e(rg,D8),e(D8,Fqe),e(rg,Cqe),e(v,Mqe),e(v,tg),e(tg,KQ),e(KQ,Eqe),e(tg,yqe),e(tg,j8),e(j8,wqe),e(tg,Aqe),e(v,Lqe),e(v,ag),e(ag,ZQ),e(ZQ,Bqe),e(ag,xqe),e(ag,N8),e(N8,kqe),e(ag,Rqe),e(v,Sqe),e(v,ng),e(ng,eH),e(eH,Pqe),e(ng,$qe),e(ng,q8),e(q8,Iqe),e(ng,Dqe),e(v,jqe),e(v,sg),e(sg,oH),e(oH,Nqe),e(sg,qqe),e(sg,G8),e(G8,Gqe),e(sg,Oqe),e(v,Xqe),e(v,lg),e(lg,rH),e(rH,Vqe),e(lg,zqe),e(lg,O8),e(O8,Wqe),e(lg,Qqe),e(v,Hqe),e(v,ig),e(ig,tH),e(tH,Uqe),e(ig,Jqe),e(ig,X8),e(X8,Yqe),e(ig,Kqe),e(v,Zqe),e(v,dg),e(dg,aH),e(aH,eGe),e(dg,oGe),e(dg,V8),e(V8,rGe),e(dg,tGe),e(v,aGe),e(v,cg),e(cg,nH),e(nH,nGe),e(cg,sGe),e(cg,z8),e(z8,lGe),e(cg,iGe),e(v,dGe),e(v,fg),e(fg,sH),e(sH,cGe),e(fg,fGe),e(fg,W8),e(W8,mGe),e(fg,gGe),e(v,hGe),e(v,mg),e(mg,lH),e(lH,pGe),e(mg,_Ge),e(mg,Q8),e(Q8,uGe),e(mg,bGe),e(v,vGe),e(v,gg),e(gg,iH),e(iH,TGe),e(gg,FGe),e(gg,H8),e(H8,CGe),e(gg,MGe),e(v,EGe),e(v,hg),e(hg,dH),e(dH,yGe),e(hg,wGe),e(hg,U8),e(U8,AGe),e(hg,LGe),e(v,BGe),e(v,pg),e(pg,cH),e(cH,xGe),e(pg,kGe),e(pg,J8),e(J8,RGe),e(pg,SGe),e(fo,PGe),e(fo,fH),e(fH,$Ge),e(fo,IGe),g(kM,fo,null),e(Xo,DGe),e(Xo,_g),g(RM,_g,null),e(_g,jGe),e(_g,mH),e(mH,NGe),b(c,E8e,u),b(c,ji,u),e(ji,ug),e(ug,gH),g(SM,gH,null),e(ji,qGe),e(ji,hH),e(hH,GGe),b(c,y8e,u),b(c,Vo,u),g(PM,Vo,null),e(Vo,OGe),e(Vo,$M),e($M,XGe),e($M,Y8),e(Y8,VGe),e($M,zGe),e(Vo,WGe),e(Vo,IM),e(IM,QGe),e(IM,pH),e(pH,HGe),e(IM,UGe),e(Vo,JGe),e(Vo,mo),g(DM,mo,null),e(mo,YGe),e(mo,_H),e(_H,KGe),e(mo,ZGe),e(mo,Da),e(Da,eOe),e(Da,uH),e(uH,oOe),e(Da,rOe),e(Da,bH),e(bH,tOe),e(Da,aOe),e(Da,vH),e(vH,nOe),e(Da,sOe),e(mo,lOe),e(mo,M),e(M,Gn),e(Gn,TH),e(TH,iOe),e(Gn,dOe),e(Gn,K8),e(K8,cOe),e(Gn,fOe),e(Gn,Z8),e(Z8,mOe),e(Gn,gOe),e(M,hOe),e(M,On),e(On,FH),e(FH,pOe),e(On,_Oe),e(On,eB),e(eB,uOe),e(On,bOe),e(On,oB),e(oB,vOe),e(On,TOe),e(M,FOe),e(M,Xn),e(Xn,CH),e(CH,COe),e(Xn,MOe),e(Xn,rB),e(rB,EOe),e(Xn,yOe),e(Xn,tB),e(tB,wOe),e(Xn,AOe),e(M,LOe),e(M,bg),e(bg,MH),e(MH,BOe),e(bg,xOe),e(bg,aB),e(aB,kOe),e(bg,ROe),e(M,SOe),e(M,Vn),e(Vn,EH),e(EH,POe),e(Vn,$Oe),e(Vn,nB),e(nB,IOe),e(Vn,DOe),e(Vn,sB),e(sB,jOe),e(Vn,NOe),e(M,qOe),e(M,vg),e(vg,yH),e(yH,GOe),e(vg,OOe),e(vg,lB),e(lB,XOe),e(vg,VOe),e(M,zOe),e(M,Tg),e(Tg,wH),e(wH,WOe),e(Tg,QOe),e(Tg,iB),e(iB,HOe),e(Tg,UOe),e(M,JOe),e(M,Fg),e(Fg,AH),e(AH,YOe),e(Fg,KOe),e(Fg,dB),e(dB,ZOe),e(Fg,eXe),e(M,oXe),e(M,zn),e(zn,LH),e(LH,rXe),e(zn,tXe),e(zn,cB),e(cB,aXe),e(zn,nXe),e(zn,fB),e(fB,sXe),e(zn,lXe),e(M,iXe),e(M,Wn),e(Wn,BH),e(BH,dXe),e(Wn,cXe),e(Wn,mB),e(mB,fXe),e(Wn,mXe),e(Wn,gB),e(gB,gXe),e(Wn,hXe),e(M,pXe),e(M,Qn),e(Qn,xH),e(xH,_Xe),e(Qn,uXe),e(Qn,hB),e(hB,bXe),e(Qn,vXe),e(Qn,pB),e(pB,TXe),e(Qn,FXe),e(M,CXe),e(M,Cg),e(Cg,kH),e(kH,MXe),e(Cg,EXe),e(Cg,_B),e(_B,yXe),e(Cg,wXe),e(M,AXe),e(M,Mg),e(Mg,RH),e(RH,LXe),e(Mg,BXe),e(Mg,uB),e(uB,xXe),e(Mg,kXe),e(M,RXe),e(M,Hn),e(Hn,SH),e(SH,SXe),e(Hn,PXe),e(Hn,bB),e(bB,$Xe),e(Hn,IXe),e(Hn,vB),e(vB,DXe),e(Hn,jXe),e(M,NXe),e(M,Eg),e(Eg,PH),e(PH,qXe),e(Eg,GXe),e(Eg,TB),e(TB,OXe),e(Eg,XXe),e(M,VXe),e(M,Un),e(Un,$H),e($H,zXe),e(Un,WXe),e(Un,FB),e(FB,QXe),e(Un,HXe),e(Un,CB),e(CB,UXe),e(Un,JXe),e(M,YXe),e(M,Jn),e(Jn,IH),e(IH,KXe),e(Jn,ZXe),e(Jn,MB),e(MB,eVe),e(Jn,oVe),e(Jn,EB),e(EB,rVe),e(Jn,tVe),e(M,aVe),e(M,Yn),e(Yn,DH),e(DH,nVe),e(Yn,sVe),e(Yn,yB),e(yB,lVe),e(Yn,iVe),e(Yn,jH),e(jH,dVe),e(Yn,cVe),e(M,fVe),e(M,yg),e(yg,NH),e(NH,mVe),e(yg,gVe),e(yg,wB),e(wB,hVe),e(yg,pVe),e(M,_Ve),e(M,Kn),e(Kn,qH),e(qH,uVe),e(Kn,bVe),e(Kn,AB),e(AB,vVe),e(Kn,TVe),e(Kn,LB),e(LB,FVe),e(Kn,CVe),e(M,MVe),e(M,wg),e(wg,GH),e(GH,EVe),e(wg,yVe),e(wg,BB),e(BB,wVe),e(wg,AVe),e(M,LVe),e(M,Zn),e(Zn,OH),e(OH,BVe),e(Zn,xVe),e(Zn,xB),e(xB,kVe),e(Zn,RVe),e(Zn,kB),e(kB,SVe),e(Zn,PVe),e(M,$Ve),e(M,es),e(es,XH),e(XH,IVe),e(es,DVe),e(es,RB),e(RB,jVe),e(es,NVe),e(es,SB),e(SB,qVe),e(es,GVe),e(M,OVe),e(M,os),e(os,VH),e(VH,XVe),e(os,VVe),e(os,PB),e(PB,zVe),e(os,WVe),e(os,$B),e($B,QVe),e(os,HVe),e(M,UVe),e(M,Ag),e(Ag,zH),e(zH,JVe),e(Ag,YVe),e(Ag,IB),e(IB,KVe),e(Ag,ZVe),e(M,eze),e(M,rs),e(rs,WH),e(WH,oze),e(rs,rze),e(rs,DB),e(DB,tze),e(rs,aze),e(rs,jB),e(jB,nze),e(rs,sze),e(M,lze),e(M,Lg),e(Lg,QH),e(QH,ize),e(Lg,dze),e(Lg,NB),e(NB,cze),e(Lg,fze),e(M,mze),e(M,ts),e(ts,HH),e(HH,gze),e(ts,hze),e(ts,qB),e(qB,pze),e(ts,_ze),e(ts,GB),e(GB,uze),e(ts,bze),e(M,vze),e(M,as),e(as,UH),e(UH,Tze),e(as,Fze),e(as,OB),e(OB,Cze),e(as,Mze),e(as,XB),e(XB,Eze),e(as,yze),e(M,wze),e(M,ns),e(ns,JH),e(JH,Aze),e(ns,Lze),e(ns,VB),e(VB,Bze),e(ns,xze),e(ns,zB),e(zB,kze),e(ns,Rze),e(M,Sze),e(M,ss),e(ss,YH),e(YH,Pze),e(ss,$ze),e(ss,WB),e(WB,Ize),e(ss,Dze),e(ss,QB),e(QB,jze),e(ss,Nze),e(M,qze),e(M,Bg),e(Bg,KH),e(KH,Gze),e(Bg,Oze),e(Bg,HB),e(HB,Xze),e(Bg,Vze),e(M,zze),e(M,ls),e(ls,ZH),e(ZH,Wze),e(ls,Qze),e(ls,UB),e(UB,Hze),e(ls,Uze),e(ls,JB),e(JB,Jze),e(ls,Yze),e(M,Kze),e(M,is),e(is,eU),e(eU,Zze),e(is,eWe),e(is,YB),e(YB,oWe),e(is,rWe),e(is,KB),e(KB,tWe),e(is,aWe),e(M,nWe),e(M,ds),e(ds,oU),e(oU,sWe),e(ds,lWe),e(ds,ZB),e(ZB,iWe),e(ds,dWe),e(ds,ex),e(ex,cWe),e(ds,fWe),e(M,mWe),e(M,cs),e(cs,rU),e(rU,gWe),e(cs,hWe),e(cs,ox),e(ox,pWe),e(cs,_We),e(cs,rx),e(rx,uWe),e(cs,bWe),e(M,vWe),e(M,fs),e(fs,tU),e(tU,TWe),e(fs,FWe),e(fs,tx),e(tx,CWe),e(fs,MWe),e(fs,ax),e(ax,EWe),e(fs,yWe),e(M,wWe),e(M,ms),e(ms,aU),e(aU,AWe),e(ms,LWe),e(ms,nx),e(nx,BWe),e(ms,xWe),e(ms,sx),e(sx,kWe),e(ms,RWe),e(M,SWe),e(M,xg),e(xg,nU),e(nU,PWe),e(xg,$We),e(xg,lx),e(lx,IWe),e(xg,DWe),e(M,jWe),e(M,gs),e(gs,sU),e(sU,NWe),e(gs,qWe),e(gs,ix),e(ix,GWe),e(gs,OWe),e(gs,dx),e(dx,XWe),e(gs,VWe),e(M,zWe),e(M,kg),e(kg,lU),e(lU,WWe),e(kg,QWe),e(kg,cx),e(cx,HWe),e(kg,UWe),e(M,JWe),e(M,Rg),e(Rg,iU),e(iU,YWe),e(Rg,KWe),e(Rg,fx),e(fx,ZWe),e(Rg,eQe),e(M,oQe),e(M,hs),e(hs,dU),e(dU,rQe),e(hs,tQe),e(hs,mx),e(mx,aQe),e(hs,nQe),e(hs,gx),e(gx,sQe),e(hs,lQe),e(M,iQe),e(M,ps),e(ps,cU),e(cU,dQe),e(ps,cQe),e(ps,hx),e(hx,fQe),e(ps,mQe),e(ps,px),e(px,gQe),e(ps,hQe),e(M,pQe),e(M,Sg),e(Sg,fU),e(fU,_Qe),e(Sg,uQe),e(Sg,_x),e(_x,bQe),e(Sg,vQe),e(M,TQe),e(M,_s),e(_s,mU),e(mU,FQe),e(_s,CQe),e(_s,ux),e(ux,MQe),e(_s,EQe),e(_s,bx),e(bx,yQe),e(_s,wQe),e(M,AQe),e(M,us),e(us,gU),e(gU,LQe),e(us,BQe),e(us,vx),e(vx,xQe),e(us,kQe),e(us,Tx),e(Tx,RQe),e(us,SQe),e(M,PQe),e(M,bs),e(bs,hU),e(hU,$Qe),e(bs,IQe),e(bs,Fx),e(Fx,DQe),e(bs,jQe),e(bs,Cx),e(Cx,NQe),e(bs,qQe),e(M,GQe),e(M,vs),e(vs,pU),e(pU,OQe),e(vs,XQe),e(vs,Mx),e(Mx,VQe),e(vs,zQe),e(vs,Ex),e(Ex,WQe),e(vs,QQe),e(M,HQe),e(M,Ts),e(Ts,_U),e(_U,UQe),e(Ts,JQe),e(Ts,yx),e(yx,YQe),e(Ts,KQe),e(Ts,wx),e(wx,ZQe),e(Ts,eHe),e(M,oHe),e(M,Pg),e(Pg,uU),e(uU,rHe),e(Pg,tHe),e(Pg,Ax),e(Ax,aHe),e(Pg,nHe),e(M,sHe),e(M,$g),e($g,bU),e(bU,lHe),e($g,iHe),e($g,Lx),e(Lx,dHe),e($g,cHe),e(M,fHe),e(M,Ig),e(Ig,vU),e(vU,mHe),e(Ig,gHe),e(Ig,Bx),e(Bx,hHe),e(Ig,pHe),e(M,_He),e(M,Dg),e(Dg,TU),e(TU,uHe),e(Dg,bHe),e(Dg,xx),e(xx,vHe),e(Dg,THe),e(M,FHe),e(M,Fs),e(Fs,FU),e(FU,CHe),e(Fs,MHe),e(Fs,kx),e(kx,EHe),e(Fs,yHe),e(Fs,Rx),e(Rx,wHe),e(Fs,AHe),e(M,LHe),e(M,jg),e(jg,CU),e(CU,BHe),e(jg,xHe),e(jg,Sx),e(Sx,kHe),e(jg,RHe),e(M,SHe),e(M,Cs),e(Cs,MU),e(MU,PHe),e(Cs,$He),e(Cs,Px),e(Px,IHe),e(Cs,DHe),e(Cs,$x),e($x,jHe),e(Cs,NHe),e(M,qHe),e(M,Ms),e(Ms,EU),e(EU,GHe),e(Ms,OHe),e(Ms,Ix),e(Ix,XHe),e(Ms,VHe),e(Ms,Dx),e(Dx,zHe),e(Ms,WHe),e(M,QHe),e(M,Es),e(Es,yU),e(yU,HHe),e(Es,UHe),e(Es,jx),e(jx,JHe),e(Es,YHe),e(Es,Nx),e(Nx,KHe),e(Es,ZHe),e(M,eUe),e(M,ys),e(ys,wU),e(wU,oUe),e(ys,rUe),e(ys,qx),e(qx,tUe),e(ys,aUe),e(ys,Gx),e(Gx,nUe),e(ys,sUe),e(M,lUe),e(M,ws),e(ws,AU),e(AU,iUe),e(ws,dUe),e(ws,Ox),e(Ox,cUe),e(ws,fUe),e(ws,Xx),e(Xx,mUe),e(ws,gUe),e(M,hUe),e(M,Ng),e(Ng,LU),e(LU,pUe),e(Ng,_Ue),e(Ng,Vx),e(Vx,uUe),e(Ng,bUe),e(M,vUe),e(M,qg),e(qg,BU),e(BU,TUe),e(qg,FUe),e(qg,zx),e(zx,CUe),e(qg,MUe),e(M,EUe),e(M,As),e(As,xU),e(xU,yUe),e(As,wUe),e(As,Wx),e(Wx,AUe),e(As,LUe),e(As,Qx),e(Qx,BUe),e(As,xUe),e(M,kUe),e(M,Ls),e(Ls,kU),e(kU,RUe),e(Ls,SUe),e(Ls,Hx),e(Hx,PUe),e(Ls,$Ue),e(Ls,Ux),e(Ux,IUe),e(Ls,DUe),e(M,jUe),e(M,Bs),e(Bs,RU),e(RU,NUe),e(Bs,qUe),e(Bs,Jx),e(Jx,GUe),e(Bs,OUe),e(Bs,Yx),e(Yx,XUe),e(Bs,VUe),e(M,zUe),e(M,Gg),e(Gg,SU),e(SU,WUe),e(Gg,QUe),e(Gg,Kx),e(Kx,HUe),e(Gg,UUe),e(M,JUe),e(M,Og),e(Og,PU),e(PU,YUe),e(Og,KUe),e(Og,Zx),e(Zx,ZUe),e(Og,eJe),e(M,oJe),e(M,Xg),e(Xg,$U),e($U,rJe),e(Xg,tJe),e(Xg,ek),e(ek,aJe),e(Xg,nJe),e(M,sJe),e(M,Vg),e(Vg,IU),e(IU,lJe),e(Vg,iJe),e(Vg,ok),e(ok,dJe),e(Vg,cJe),e(M,fJe),e(M,xs),e(xs,DU),e(DU,mJe),e(xs,gJe),e(xs,rk),e(rk,hJe),e(xs,pJe),e(xs,tk),e(tk,_Je),e(xs,uJe),e(M,bJe),e(M,zg),e(zg,jU),e(jU,vJe),e(zg,TJe),e(zg,ak),e(ak,FJe),e(zg,CJe),e(M,MJe),e(M,Wg),e(Wg,NU),e(NU,EJe),e(Wg,yJe),e(Wg,nk),e(nk,wJe),e(Wg,AJe),e(M,LJe),e(M,ks),e(ks,qU),e(qU,BJe),e(ks,xJe),e(ks,sk),e(sk,kJe),e(ks,RJe),e(ks,lk),e(lk,SJe),e(ks,PJe),e(M,$Je),e(M,Rs),e(Rs,GU),e(GU,IJe),e(Rs,DJe),e(Rs,ik),e(ik,jJe),e(Rs,NJe),e(Rs,dk),e(dk,qJe),e(Rs,GJe),e(mo,OJe),e(mo,OU),e(OU,XJe),e(mo,VJe),g(jM,mo,null),e(Vo,zJe),e(Vo,Qg),g(NM,Qg,null),e(Qg,WJe),e(Qg,XU),e(XU,QJe),b(c,w8e,u),b(c,Ni,u),e(Ni,Hg),e(Hg,VU),g(qM,VU,null),e(Ni,HJe),e(Ni,zU),e(zU,UJe),b(c,A8e,u),b(c,zo,u),g(GM,zo,null),e(zo,JJe),e(zo,OM),e(OM,YJe),e(OM,ck),e(ck,KJe),e(OM,ZJe),e(zo,eYe),e(zo,XM),e(XM,oYe),e(XM,WU),e(WU,rYe),e(XM,tYe),e(zo,aYe),e(zo,xe),g(VM,xe,null),e(xe,nYe),e(xe,QU),e(QU,sYe),e(xe,lYe),e(xe,ja),e(ja,iYe),e(ja,HU),e(HU,dYe),e(ja,cYe),e(ja,UU),e(UU,fYe),e(ja,mYe),e(ja,JU),e(JU,gYe),e(ja,hYe),e(xe,pYe),e(xe,se),e(se,Ug),e(Ug,YU),e(YU,_Ye),e(Ug,uYe),e(Ug,fk),e(fk,bYe),e(Ug,vYe),e(se,TYe),e(se,Jg),e(Jg,KU),e(KU,FYe),e(Jg,CYe),e(Jg,mk),e(mk,MYe),e(Jg,EYe),e(se,yYe),e(se,Yg),e(Yg,ZU),e(ZU,wYe),e(Yg,AYe),e(Yg,gk),e(gk,LYe),e(Yg,BYe),e(se,xYe),e(se,Kg),e(Kg,eJ),e(eJ,kYe),e(Kg,RYe),e(Kg,hk),e(hk,SYe),e(Kg,PYe),e(se,$Ye),e(se,Zg),e(Zg,oJ),e(oJ,IYe),e(Zg,DYe),e(Zg,pk),e(pk,jYe),e(Zg,NYe),e(se,qYe),e(se,eh),e(eh,rJ),e(rJ,GYe),e(eh,OYe),e(eh,_k),e(_k,XYe),e(eh,VYe),e(se,zYe),e(se,oh),e(oh,tJ),e(tJ,WYe),e(oh,QYe),e(oh,uk),e(uk,HYe),e(oh,UYe),e(se,JYe),e(se,rh),e(rh,aJ),e(aJ,YYe),e(rh,KYe),e(rh,bk),e(bk,ZYe),e(rh,eKe),e(se,oKe),e(se,th),e(th,nJ),e(nJ,rKe),e(th,tKe),e(th,vk),e(vk,aKe),e(th,nKe),e(se,sKe),e(se,ah),e(ah,sJ),e(sJ,lKe),e(ah,iKe),e(ah,Tk),e(Tk,dKe),e(ah,cKe),e(se,fKe),e(se,nh),e(nh,lJ),e(lJ,mKe),e(nh,gKe),e(nh,Fk),e(Fk,hKe),e(nh,pKe),e(se,_Ke),e(se,sh),e(sh,iJ),e(iJ,uKe),e(sh,bKe),e(sh,Ck),e(Ck,vKe),e(sh,TKe),e(se,FKe),e(se,lh),e(lh,dJ),e(dJ,CKe),e(lh,MKe),e(lh,Mk),e(Mk,EKe),e(lh,yKe),e(se,wKe),e(se,ih),e(ih,cJ),e(cJ,AKe),e(ih,LKe),e(ih,Ek),e(Ek,BKe),e(ih,xKe),e(se,kKe),e(se,dh),e(dh,fJ),e(fJ,RKe),e(dh,SKe),e(dh,yk),e(yk,PKe),e(dh,$Ke),e(xe,IKe),g(ch,xe,null),e(xe,DKe),e(xe,mJ),e(mJ,jKe),e(xe,NKe),g(zM,xe,null),e(zo,qKe),e(zo,fh),g(WM,fh,null),e(fh,GKe),e(fh,gJ),e(gJ,OKe),b(c,L8e,u),b(c,qi,u),e(qi,mh),e(mh,hJ),g(QM,hJ,null),e(qi,XKe),e(qi,pJ),e(pJ,VKe),b(c,B8e,u),b(c,Wo,u),g(HM,Wo,null),e(Wo,zKe),e(Wo,UM),e(UM,WKe),e(UM,wk),e(wk,QKe),e(UM,HKe),e(Wo,UKe),e(Wo,JM),e(JM,JKe),e(JM,_J),e(_J,YKe),e(JM,KKe),e(Wo,ZKe),e(Wo,ke),g(YM,ke,null),e(ke,eZe),e(ke,uJ),e(uJ,oZe),e(ke,rZe),e(ke,Gi),e(Gi,tZe),e(Gi,bJ),e(bJ,aZe),e(Gi,nZe),e(Gi,vJ),e(vJ,sZe),e(Gi,lZe),e(ke,iZe),e(ke,we),e(we,gh),e(gh,TJ),e(TJ,dZe),e(gh,cZe),e(gh,Ak),e(Ak,fZe),e(gh,mZe),e(we,gZe),e(we,hh),e(hh,FJ),e(FJ,hZe),e(hh,pZe),e(hh,Lk),e(Lk,_Ze),e(hh,uZe),e(we,bZe),e(we,ph),e(ph,CJ),e(CJ,vZe),e(ph,TZe),e(ph,Bk),e(Bk,FZe),e(ph,CZe),e(we,MZe),e(we,_h),e(_h,MJ),e(MJ,EZe),e(_h,yZe),e(_h,xk),e(xk,wZe),e(_h,AZe),e(we,LZe),e(we,uh),e(uh,EJ),e(EJ,BZe),e(uh,xZe),e(uh,kk),e(kk,kZe),e(uh,RZe),e(we,SZe),e(we,bh),e(bh,yJ),e(yJ,PZe),e(bh,$Ze),e(bh,Rk),e(Rk,IZe),e(bh,DZe),e(we,jZe),e(we,vh),e(vh,wJ),e(wJ,NZe),e(vh,qZe),e(vh,Sk),e(Sk,GZe),e(vh,OZe),e(we,XZe),e(we,Th),e(Th,AJ),e(AJ,VZe),e(Th,zZe),e(Th,Pk),e(Pk,WZe),e(Th,QZe),e(ke,HZe),g(Fh,ke,null),e(ke,UZe),e(ke,LJ),e(LJ,JZe),e(ke,YZe),g(KM,ke,null),e(Wo,KZe),e(Wo,Ch),g(ZM,Ch,null),e(Ch,ZZe),e(Ch,BJ),e(BJ,eeo),b(c,x8e,u),b(c,Oi,u),e(Oi,Mh),e(Mh,xJ),g(eE,xJ,null),e(Oi,oeo),e(Oi,kJ),e(kJ,reo),b(c,k8e,u),b(c,Qo,u),g(oE,Qo,null),e(Qo,teo),e(Qo,Xi),e(Xi,aeo),e(Xi,RJ),e(RJ,neo),e(Xi,seo),e(Xi,SJ),e(SJ,leo),e(Xi,ieo),e(Qo,deo),e(Qo,rE),e(rE,ceo),e(rE,PJ),e(PJ,feo),e(rE,meo),e(Qo,geo),e(Qo,qr),g(tE,qr,null),e(qr,heo),e(qr,$J),e($J,peo),e(qr,_eo),e(qr,Vi),e(Vi,ueo),e(Vi,IJ),e(IJ,beo),e(Vi,veo),e(Vi,DJ),e(DJ,Teo),e(Vi,Feo),e(qr,Ceo),e(qr,jJ),e(jJ,Meo),e(qr,Eeo),g(aE,qr,null),e(Qo,yeo),e(Qo,Re),g(nE,Re,null),e(Re,weo),e(Re,NJ),e(NJ,Aeo),e(Re,Leo),e(Re,Na),e(Na,Beo),e(Na,qJ),e(qJ,xeo),e(Na,keo),e(Na,GJ),e(GJ,Reo),e(Na,Seo),e(Na,OJ),e(OJ,Peo),e(Na,$eo),e(Re,Ieo),e(Re,F),e(F,Eh),e(Eh,XJ),e(XJ,Deo),e(Eh,jeo),e(Eh,$k),e($k,Neo),e(Eh,qeo),e(F,Geo),e(F,yh),e(yh,VJ),e(VJ,Oeo),e(yh,Xeo),e(yh,Ik),e(Ik,Veo),e(yh,zeo),e(F,Weo),e(F,wh),e(wh,zJ),e(zJ,Qeo),e(wh,Heo),e(wh,Dk),e(Dk,Ueo),e(wh,Jeo),e(F,Yeo),e(F,Ah),e(Ah,WJ),e(WJ,Keo),e(Ah,Zeo),e(Ah,jk),e(jk,eoo),e(Ah,ooo),e(F,roo),e(F,Lh),e(Lh,QJ),e(QJ,too),e(Lh,aoo),e(Lh,Nk),e(Nk,noo),e(Lh,soo),e(F,loo),e(F,Bh),e(Bh,HJ),e(HJ,ioo),e(Bh,doo),e(Bh,qk),e(qk,coo),e(Bh,foo),e(F,moo),e(F,xh),e(xh,UJ),e(UJ,goo),e(xh,hoo),e(xh,Gk),e(Gk,poo),e(xh,_oo),e(F,uoo),e(F,kh),e(kh,JJ),e(JJ,boo),e(kh,voo),e(kh,Ok),e(Ok,Too),e(kh,Foo),e(F,Coo),e(F,Rh),e(Rh,YJ),e(YJ,Moo),e(Rh,Eoo),e(Rh,Xk),e(Xk,yoo),e(Rh,woo),e(F,Aoo),e(F,Sh),e(Sh,KJ),e(KJ,Loo),e(Sh,Boo),e(Sh,Vk),e(Vk,xoo),e(Sh,koo),e(F,Roo),e(F,Ph),e(Ph,ZJ),e(ZJ,Soo),e(Ph,Poo),e(Ph,zk),e(zk,$oo),e(Ph,Ioo),e(F,Doo),e(F,$h),e($h,eY),e(eY,joo),e($h,Noo),e($h,Wk),e(Wk,qoo),e($h,Goo),e(F,Ooo),e(F,Ih),e(Ih,oY),e(oY,Xoo),e(Ih,Voo),e(Ih,Qk),e(Qk,zoo),e(Ih,Woo),e(F,Qoo),e(F,Dh),e(Dh,rY),e(rY,Hoo),e(Dh,Uoo),e(Dh,Hk),e(Hk,Joo),e(Dh,Yoo),e(F,Koo),e(F,jh),e(jh,tY),e(tY,Zoo),e(jh,ero),e(jh,Uk),e(Uk,oro),e(jh,rro),e(F,tro),e(F,Nh),e(Nh,aY),e(aY,aro),e(Nh,nro),e(Nh,Jk),e(Jk,sro),e(Nh,lro),e(F,iro),e(F,qh),e(qh,nY),e(nY,dro),e(qh,cro),e(qh,Yk),e(Yk,fro),e(qh,mro),e(F,gro),e(F,Gh),e(Gh,sY),e(sY,hro),e(Gh,pro),e(Gh,Kk),e(Kk,_ro),e(Gh,uro),e(F,bro),e(F,Oh),e(Oh,lY),e(lY,vro),e(Oh,Tro),e(Oh,Zk),e(Zk,Fro),e(Oh,Cro),e(F,Mro),e(F,Xh),e(Xh,iY),e(iY,Ero),e(Xh,yro),e(Xh,eR),e(eR,wro),e(Xh,Aro),e(F,Lro),e(F,Vh),e(Vh,dY),e(dY,Bro),e(Vh,xro),e(Vh,oR),e(oR,kro),e(Vh,Rro),e(F,Sro),e(F,zh),e(zh,cY),e(cY,Pro),e(zh,$ro),e(zh,rR),e(rR,Iro),e(zh,Dro),e(F,jro),e(F,Wh),e(Wh,fY),e(fY,Nro),e(Wh,qro),e(Wh,tR),e(tR,Gro),e(Wh,Oro),e(F,Xro),e(F,Qh),e(Qh,mY),e(mY,Vro),e(Qh,zro),e(Qh,aR),e(aR,Wro),e(Qh,Qro),e(F,Hro),e(F,Hh),e(Hh,gY),e(gY,Uro),e(Hh,Jro),e(Hh,nR),e(nR,Yro),e(Hh,Kro),e(F,Zro),e(F,Uh),e(Uh,hY),e(hY,eto),e(Uh,oto),e(Uh,sR),e(sR,rto),e(Uh,tto),e(F,ato),e(F,Jh),e(Jh,pY),e(pY,nto),e(Jh,sto),e(Jh,lR),e(lR,lto),e(Jh,ito),e(F,dto),e(F,Ss),e(Ss,_Y),e(_Y,cto),e(Ss,fto),e(Ss,iR),e(iR,mto),e(Ss,gto),e(Ss,dR),e(dR,hto),e(Ss,pto),e(F,_to),e(F,Yh),e(Yh,uY),e(uY,uto),e(Yh,bto),e(Yh,cR),e(cR,vto),e(Yh,Tto),e(F,Fto),e(F,Kh),e(Kh,bY),e(bY,Cto),e(Kh,Mto),e(Kh,fR),e(fR,Eto),e(Kh,yto),e(F,wto),e(F,Zh),e(Zh,vY),e(vY,Ato),e(Zh,Lto),e(Zh,mR),e(mR,Bto),e(Zh,xto),e(F,kto),e(F,ep),e(ep,TY),e(TY,Rto),e(ep,Sto),e(ep,gR),e(gR,Pto),e(ep,$to),e(F,Ito),e(F,op),e(op,FY),e(FY,Dto),e(op,jto),e(op,hR),e(hR,Nto),e(op,qto),e(F,Gto),e(F,rp),e(rp,CY),e(CY,Oto),e(rp,Xto),e(rp,pR),e(pR,Vto),e(rp,zto),e(F,Wto),e(F,tp),e(tp,MY),e(MY,Qto),e(tp,Hto),e(tp,_R),e(_R,Uto),e(tp,Jto),e(F,Yto),e(F,ap),e(ap,EY),e(EY,Kto),e(ap,Zto),e(ap,uR),e(uR,eao),e(ap,oao),e(F,rao),e(F,np),e(np,yY),e(yY,tao),e(np,aao),e(np,bR),e(bR,nao),e(np,sao),e(F,lao),e(F,sp),e(sp,wY),e(wY,iao),e(sp,dao),e(sp,vR),e(vR,cao),e(sp,fao),e(F,mao),e(F,lp),e(lp,AY),e(AY,gao),e(lp,hao),e(lp,TR),e(TR,pao),e(lp,_ao),e(F,uao),e(F,ip),e(ip,LY),e(LY,bao),e(ip,vao),e(ip,FR),e(FR,Tao),e(ip,Fao),e(F,Cao),e(F,dp),e(dp,BY),e(BY,Mao),e(dp,Eao),e(dp,CR),e(CR,yao),e(dp,wao),e(F,Aao),e(F,cp),e(cp,xY),e(xY,Lao),e(cp,Bao),e(cp,MR),e(MR,xao),e(cp,kao),e(F,Rao),e(F,fp),e(fp,kY),e(kY,Sao),e(fp,Pao),e(fp,ER),e(ER,$ao),e(fp,Iao),e(F,Dao),e(F,mp),e(mp,RY),e(RY,jao),e(mp,Nao),e(mp,yR),e(yR,qao),e(mp,Gao),e(F,Oao),e(F,gp),e(gp,SY),e(SY,Xao),e(gp,Vao),e(gp,wR),e(wR,zao),e(gp,Wao),e(F,Qao),e(F,hp),e(hp,PY),e(PY,Hao),e(hp,Uao),e(hp,AR),e(AR,Jao),e(hp,Yao),e(F,Kao),e(F,pp),e(pp,$Y),e($Y,Zao),e(pp,eno),e(pp,LR),e(LR,ono),e(pp,rno),e(F,tno),e(F,_p),e(_p,IY),e(IY,ano),e(_p,nno),e(_p,BR),e(BR,sno),e(_p,lno),e(F,ino),e(F,up),e(up,DY),e(DY,dno),e(up,cno),e(up,xR),e(xR,fno),e(up,mno),e(F,gno),e(F,bp),e(bp,jY),e(jY,hno),e(bp,pno),e(bp,kR),e(kR,_no),e(bp,uno),e(F,bno),e(F,vp),e(vp,NY),e(NY,vno),e(vp,Tno),e(vp,RR),e(RR,Fno),e(vp,Cno),e(F,Mno),e(F,Tp),e(Tp,qY),e(qY,Eno),e(Tp,yno),e(Tp,SR),e(SR,wno),e(Tp,Ano),e(F,Lno),e(F,Fp),e(Fp,GY),e(GY,Bno),e(Fp,xno),e(Fp,PR),e(PR,kno),e(Fp,Rno),e(F,Sno),e(F,Cp),e(Cp,OY),e(OY,Pno),e(Cp,$no),e(Cp,$R),e($R,Ino),e(Cp,Dno),e(F,jno),e(F,Mp),e(Mp,XY),e(XY,Nno),e(Mp,qno),e(Mp,IR),e(IR,Gno),e(Mp,Ono),e(F,Xno),e(F,Ep),e(Ep,VY),e(VY,Vno),e(Ep,zno),e(Ep,DR),e(DR,Wno),e(Ep,Qno),e(F,Hno),e(F,yp),e(yp,zY),e(zY,Uno),e(yp,Jno),e(yp,jR),e(jR,Yno),e(yp,Kno),e(F,Zno),e(F,wp),e(wp,WY),e(WY,eso),e(wp,oso),e(wp,NR),e(NR,rso),e(wp,tso),e(F,aso),e(F,Ap),e(Ap,QY),e(QY,nso),e(Ap,sso),e(Ap,qR),e(qR,lso),e(Ap,iso),e(F,dso),e(F,Lp),e(Lp,HY),e(HY,cso),e(Lp,fso),e(Lp,GR),e(GR,mso),e(Lp,gso),e(F,hso),e(F,Bp),e(Bp,UY),e(UY,pso),e(Bp,_so),e(Bp,OR),e(OR,uso),e(Bp,bso),e(F,vso),e(F,xp),e(xp,JY),e(JY,Tso),e(xp,Fso),e(xp,XR),e(XR,Cso),e(xp,Mso),e(F,Eso),e(F,kp),e(kp,YY),e(YY,yso),e(kp,wso),e(kp,VR),e(VR,Aso),e(kp,Lso),e(F,Bso),e(F,Rp),e(Rp,KY),e(KY,xso),e(Rp,kso),e(Rp,zR),e(zR,Rso),e(Rp,Sso),e(F,Pso),e(F,Sp),e(Sp,ZY),e(ZY,$so),e(Sp,Iso),e(Sp,WR),e(WR,Dso),e(Sp,jso),e(F,Nso),e(F,Pp),e(Pp,eK),e(eK,qso),e(Pp,Gso),e(Pp,QR),e(QR,Oso),e(Pp,Xso),e(F,Vso),e(F,$p),e($p,oK),e(oK,zso),e($p,Wso),e($p,HR),e(HR,Qso),e($p,Hso),e(F,Uso),e(F,Ip),e(Ip,rK),e(rK,Jso),e(Ip,Yso),e(Ip,UR),e(UR,Kso),e(Ip,Zso),e(F,elo),e(F,Dp),e(Dp,tK),e(tK,olo),e(Dp,rlo),e(Dp,JR),e(JR,tlo),e(Dp,alo),e(F,nlo),e(F,jp),e(jp,aK),e(aK,slo),e(jp,llo),e(jp,YR),e(YR,ilo),e(jp,dlo),e(F,clo),e(F,Np),e(Np,nK),e(nK,flo),e(Np,mlo),e(Np,KR),e(KR,glo),e(Np,hlo),e(F,plo),e(F,qp),e(qp,sK),e(sK,_lo),e(qp,ulo),e(qp,ZR),e(ZR,blo),e(qp,vlo),e(F,Tlo),e(F,Gp),e(Gp,lK),e(lK,Flo),e(Gp,Clo),e(Gp,eS),e(eS,Mlo),e(Gp,Elo),e(F,ylo),e(F,Op),e(Op,iK),e(iK,wlo),e(Op,Alo),e(Op,oS),e(oS,Llo),e(Op,Blo),e(F,xlo),e(F,Xp),e(Xp,dK),e(dK,klo),e(Xp,Rlo),e(Xp,rS),e(rS,Slo),e(Xp,Plo),e(F,$lo),e(F,Vp),e(Vp,cK),e(cK,Ilo),e(Vp,Dlo),e(Vp,tS),e(tS,jlo),e(Vp,Nlo),e(F,qlo),e(F,zp),e(zp,fK),e(fK,Glo),e(zp,Olo),e(zp,aS),e(aS,Xlo),e(zp,Vlo),e(F,zlo),e(F,Wp),e(Wp,mK),e(mK,Wlo),e(Wp,Qlo),e(Wp,nS),e(nS,Hlo),e(Wp,Ulo),e(F,Jlo),e(F,Qp),e(Qp,gK),e(gK,Ylo),e(Qp,Klo),e(Qp,sS),e(sS,Zlo),e(Qp,eio),e(F,oio),e(F,Hp),e(Hp,hK),e(hK,rio),e(Hp,tio),e(Hp,lS),e(lS,aio),e(Hp,nio),e(F,sio),e(F,Up),e(Up,pK),e(pK,lio),e(Up,iio),e(Up,iS),e(iS,dio),e(Up,cio),e(F,fio),e(F,Jp),e(Jp,_K),e(_K,mio),e(Jp,gio),e(Jp,dS),e(dS,hio),e(Jp,pio),e(F,_io),e(F,Yp),e(Yp,uK),e(uK,uio),e(Yp,bio),e(Yp,cS),e(cS,vio),e(Yp,Tio),e(F,Fio),e(F,Kp),e(Kp,bK),e(bK,Cio),e(Kp,Mio),e(Kp,fS),e(fS,Eio),e(Kp,yio),e(F,wio),e(F,Zp),e(Zp,vK),e(vK,Aio),e(Zp,Lio),e(Zp,mS),e(mS,Bio),e(Zp,xio),e(F,kio),e(F,e_),e(e_,TK),e(TK,Rio),e(e_,Sio),e(e_,gS),e(gS,Pio),e(e_,$io),e(Re,Iio),e(Re,o_),e(o_,Dio),e(o_,FK),e(FK,jio),e(o_,Nio),e(o_,CK),e(CK,qio),e(Re,Gio),e(Re,MK),e(MK,Oio),e(Re,Xio),g(sE,Re,null),b(c,R8e,u),b(c,zi,u),e(zi,r_),e(r_,EK),g(lE,EK,null),e(zi,Vio),e(zi,yK),e(yK,zio),b(c,S8e,u),b(c,Ho,u),g(iE,Ho,null),e(Ho,Wio),e(Ho,Wi),e(Wi,Qio),e(Wi,wK),e(wK,Hio),e(Wi,Uio),e(Wi,AK),e(AK,Jio),e(Wi,Yio),e(Ho,Kio),e(Ho,dE),e(dE,Zio),e(dE,LK),e(LK,edo),e(dE,odo),e(Ho,rdo),e(Ho,Gr),g(cE,Gr,null),e(Gr,tdo),e(Gr,BK),e(BK,ado),e(Gr,ndo),e(Gr,Qi),e(Qi,sdo),e(Qi,xK),e(xK,ldo),e(Qi,ido),e(Qi,kK),e(kK,ddo),e(Qi,cdo),e(Gr,fdo),e(Gr,RK),e(RK,mdo),e(Gr,gdo),g(fE,Gr,null),e(Ho,hdo),e(Ho,Se),g(mE,Se,null),e(Se,pdo),e(Se,SK),e(SK,_do),e(Se,udo),e(Se,qa),e(qa,bdo),e(qa,PK),e(PK,vdo),e(qa,Tdo),e(qa,$K),e($K,Fdo),e(qa,Cdo),e(qa,IK),e(IK,Mdo),e(qa,Edo),e(Se,ydo),e(Se,k),e(k,t_),e(t_,DK),e(DK,wdo),e(t_,Ado),e(t_,hS),e(hS,Ldo),e(t_,Bdo),e(k,xdo),e(k,a_),e(a_,jK),e(jK,kdo),e(a_,Rdo),e(a_,pS),e(pS,Sdo),e(a_,Pdo),e(k,$do),e(k,n_),e(n_,NK),e(NK,Ido),e(n_,Ddo),e(n_,_S),e(_S,jdo),e(n_,Ndo),e(k,qdo),e(k,s_),e(s_,qK),e(qK,Gdo),e(s_,Odo),e(s_,uS),e(uS,Xdo),e(s_,Vdo),e(k,zdo),e(k,l_),e(l_,GK),e(GK,Wdo),e(l_,Qdo),e(l_,bS),e(bS,Hdo),e(l_,Udo),e(k,Jdo),e(k,i_),e(i_,OK),e(OK,Ydo),e(i_,Kdo),e(i_,vS),e(vS,Zdo),e(i_,eco),e(k,oco),e(k,d_),e(d_,XK),e(XK,rco),e(d_,tco),e(d_,TS),e(TS,aco),e(d_,nco),e(k,sco),e(k,c_),e(c_,VK),e(VK,lco),e(c_,ico),e(c_,FS),e(FS,dco),e(c_,cco),e(k,fco),e(k,f_),e(f_,zK),e(zK,mco),e(f_,gco),e(f_,CS),e(CS,hco),e(f_,pco),e(k,_co),e(k,m_),e(m_,WK),e(WK,uco),e(m_,bco),e(m_,MS),e(MS,vco),e(m_,Tco),e(k,Fco),e(k,g_),e(g_,QK),e(QK,Cco),e(g_,Mco),e(g_,ES),e(ES,Eco),e(g_,yco),e(k,wco),e(k,h_),e(h_,HK),e(HK,Aco),e(h_,Lco),e(h_,yS),e(yS,Bco),e(h_,xco),e(k,kco),e(k,p_),e(p_,UK),e(UK,Rco),e(p_,Sco),e(p_,wS),e(wS,Pco),e(p_,$co),e(k,Ico),e(k,__),e(__,JK),e(JK,Dco),e(__,jco),e(__,AS),e(AS,Nco),e(__,qco),e(k,Gco),e(k,u_),e(u_,YK),e(YK,Oco),e(u_,Xco),e(u_,LS),e(LS,Vco),e(u_,zco),e(k,Wco),e(k,b_),e(b_,KK),e(KK,Qco),e(b_,Hco),e(b_,BS),e(BS,Uco),e(b_,Jco),e(k,Yco),e(k,v_),e(v_,ZK),e(ZK,Kco),e(v_,Zco),e(v_,xS),e(xS,efo),e(v_,ofo),e(k,rfo),e(k,T_),e(T_,eZ),e(eZ,tfo),e(T_,afo),e(T_,kS),e(kS,nfo),e(T_,sfo),e(k,lfo),e(k,F_),e(F_,oZ),e(oZ,ifo),e(F_,dfo),e(F_,RS),e(RS,cfo),e(F_,ffo),e(k,mfo),e(k,C_),e(C_,rZ),e(rZ,gfo),e(C_,hfo),e(C_,SS),e(SS,pfo),e(C_,_fo),e(k,ufo),e(k,M_),e(M_,tZ),e(tZ,bfo),e(M_,vfo),e(M_,PS),e(PS,Tfo),e(M_,Ffo),e(k,Cfo),e(k,E_),e(E_,aZ),e(aZ,Mfo),e(E_,Efo),e(E_,$S),e($S,yfo),e(E_,wfo),e(k,Afo),e(k,y_),e(y_,nZ),e(nZ,Lfo),e(y_,Bfo),e(y_,IS),e(IS,xfo),e(y_,kfo),e(k,Rfo),e(k,w_),e(w_,sZ),e(sZ,Sfo),e(w_,Pfo),e(w_,DS),e(DS,$fo),e(w_,Ifo),e(k,Dfo),e(k,A_),e(A_,lZ),e(lZ,jfo),e(A_,Nfo),e(A_,jS),e(jS,qfo),e(A_,Gfo),e(k,Ofo),e(k,L_),e(L_,iZ),e(iZ,Xfo),e(L_,Vfo),e(L_,NS),e(NS,zfo),e(L_,Wfo),e(k,Qfo),e(k,B_),e(B_,dZ),e(dZ,Hfo),e(B_,Ufo),e(B_,qS),e(qS,Jfo),e(B_,Yfo),e(k,Kfo),e(k,x_),e(x_,cZ),e(cZ,Zfo),e(x_,emo),e(x_,GS),e(GS,omo),e(x_,rmo),e(k,tmo),e(k,k_),e(k_,fZ),e(fZ,amo),e(k_,nmo),e(k_,OS),e(OS,smo),e(k_,lmo),e(k,imo),e(k,R_),e(R_,mZ),e(mZ,dmo),e(R_,cmo),e(R_,XS),e(XS,fmo),e(R_,mmo),e(k,gmo),e(k,S_),e(S_,gZ),e(gZ,hmo),e(S_,pmo),e(S_,VS),e(VS,_mo),e(S_,umo),e(k,bmo),e(k,P_),e(P_,hZ),e(hZ,vmo),e(P_,Tmo),e(P_,zS),e(zS,Fmo),e(P_,Cmo),e(k,Mmo),e(k,$_),e($_,pZ),e(pZ,Emo),e($_,ymo),e($_,WS),e(WS,wmo),e($_,Amo),e(k,Lmo),e(k,I_),e(I_,_Z),e(_Z,Bmo),e(I_,xmo),e(I_,QS),e(QS,kmo),e(I_,Rmo),e(k,Smo),e(k,D_),e(D_,uZ),e(uZ,Pmo),e(D_,$mo),e(D_,HS),e(HS,Imo),e(D_,Dmo),e(k,jmo),e(k,j_),e(j_,bZ),e(bZ,Nmo),e(j_,qmo),e(j_,US),e(US,Gmo),e(j_,Omo),e(k,Xmo),e(k,N_),e(N_,vZ),e(vZ,Vmo),e(N_,zmo),e(N_,JS),e(JS,Wmo),e(N_,Qmo),e(k,Hmo),e(k,q_),e(q_,TZ),e(TZ,Umo),e(q_,Jmo),e(q_,YS),e(YS,Ymo),e(q_,Kmo),e(k,Zmo),e(k,G_),e(G_,FZ),e(FZ,ego),e(G_,ogo),e(G_,KS),e(KS,rgo),e(G_,tgo),e(Se,ago),e(Se,O_),e(O_,ngo),e(O_,CZ),e(CZ,sgo),e(O_,lgo),e(O_,MZ),e(MZ,igo),e(Se,dgo),e(Se,EZ),e(EZ,cgo),e(Se,fgo),g(gE,Se,null),b(c,P8e,u),b(c,Hi,u),e(Hi,X_),e(X_,yZ),g(hE,yZ,null),e(Hi,mgo),e(Hi,wZ),e(wZ,ggo),b(c,$8e,u),b(c,Uo,u),g(pE,Uo,null),e(Uo,hgo),e(Uo,Ui),e(Ui,pgo),e(Ui,AZ),e(AZ,_go),e(Ui,ugo),e(Ui,LZ),e(LZ,bgo),e(Ui,vgo),e(Uo,Tgo),e(Uo,_E),e(_E,Fgo),e(_E,BZ),e(BZ,Cgo),e(_E,Mgo),e(Uo,Ego),e(Uo,Or),g(uE,Or,null),e(Or,ygo),e(Or,xZ),e(xZ,wgo),e(Or,Ago),e(Or,Ji),e(Ji,Lgo),e(Ji,kZ),e(kZ,Bgo),e(Ji,xgo),e(Ji,RZ),e(RZ,kgo),e(Ji,Rgo),e(Or,Sgo),e(Or,SZ),e(SZ,Pgo),e(Or,$go),g(bE,Or,null),e(Uo,Igo),e(Uo,Pe),g(vE,Pe,null),e(Pe,Dgo),e(Pe,PZ),e(PZ,jgo),e(Pe,Ngo),e(Pe,Ga),e(Ga,qgo),e(Ga,$Z),e($Z,Ggo),e(Ga,Ogo),e(Ga,IZ),e(IZ,Xgo),e(Ga,Vgo),e(Ga,DZ),e(DZ,zgo),e(Ga,Wgo),e(Pe,Qgo),e(Pe,$),e($,V_),e(V_,jZ),e(jZ,Hgo),e(V_,Ugo),e(V_,ZS),e(ZS,Jgo),e(V_,Ygo),e($,Kgo),e($,z_),e(z_,NZ),e(NZ,Zgo),e(z_,eho),e(z_,eP),e(eP,oho),e(z_,rho),e($,tho),e($,W_),e(W_,qZ),e(qZ,aho),e(W_,nho),e(W_,oP),e(oP,sho),e(W_,lho),e($,iho),e($,Q_),e(Q_,GZ),e(GZ,dho),e(Q_,cho),e(Q_,rP),e(rP,fho),e(Q_,mho),e($,gho),e($,H_),e(H_,OZ),e(OZ,hho),e(H_,pho),e(H_,tP),e(tP,_ho),e(H_,uho),e($,bho),e($,U_),e(U_,XZ),e(XZ,vho),e(U_,Tho),e(U_,aP),e(aP,Fho),e(U_,Cho),e($,Mho),e($,J_),e(J_,VZ),e(VZ,Eho),e(J_,yho),e(J_,nP),e(nP,who),e(J_,Aho),e($,Lho),e($,Y_),e(Y_,zZ),e(zZ,Bho),e(Y_,xho),e(Y_,sP),e(sP,kho),e(Y_,Rho),e($,Sho),e($,K_),e(K_,WZ),e(WZ,Pho),e(K_,$ho),e(K_,lP),e(lP,Iho),e(K_,Dho),e($,jho),e($,Z_),e(Z_,QZ),e(QZ,Nho),e(Z_,qho),e(Z_,iP),e(iP,Gho),e(Z_,Oho),e($,Xho),e($,eu),e(eu,HZ),e(HZ,Vho),e(eu,zho),e(eu,dP),e(dP,Who),e(eu,Qho),e($,Hho),e($,ou),e(ou,UZ),e(UZ,Uho),e(ou,Jho),e(ou,cP),e(cP,Yho),e(ou,Kho),e($,Zho),e($,ru),e(ru,JZ),e(JZ,epo),e(ru,opo),e(ru,fP),e(fP,rpo),e(ru,tpo),e($,apo),e($,tu),e(tu,YZ),e(YZ,npo),e(tu,spo),e(tu,mP),e(mP,lpo),e(tu,ipo),e($,dpo),e($,au),e(au,KZ),e(KZ,cpo),e(au,fpo),e(au,gP),e(gP,mpo),e(au,gpo),e($,hpo),e($,nu),e(nu,ZZ),e(ZZ,ppo),e(nu,_po),e(nu,hP),e(hP,upo),e(nu,bpo),e($,vpo),e($,su),e(su,eee),e(eee,Tpo),e(su,Fpo),e(su,pP),e(pP,Cpo),e(su,Mpo),e($,Epo),e($,lu),e(lu,oee),e(oee,ypo),e(lu,wpo),e(lu,_P),e(_P,Apo),e(lu,Lpo),e($,Bpo),e($,iu),e(iu,ree),e(ree,xpo),e(iu,kpo),e(iu,uP),e(uP,Rpo),e(iu,Spo),e($,Ppo),e($,du),e(du,tee),e(tee,$po),e(du,Ipo),e(du,bP),e(bP,Dpo),e(du,jpo),e($,Npo),e($,cu),e(cu,aee),e(aee,qpo),e(cu,Gpo),e(cu,vP),e(vP,Opo),e(cu,Xpo),e($,Vpo),e($,fu),e(fu,nee),e(nee,zpo),e(fu,Wpo),e(fu,TP),e(TP,Qpo),e(fu,Hpo),e($,Upo),e($,mu),e(mu,see),e(see,Jpo),e(mu,Ypo),e(mu,FP),e(FP,Kpo),e(mu,Zpo),e($,e_o),e($,gu),e(gu,lee),e(lee,o_o),e(gu,r_o),e(gu,CP),e(CP,t_o),e(gu,a_o),e($,n_o),e($,hu),e(hu,iee),e(iee,s_o),e(hu,l_o),e(hu,MP),e(MP,i_o),e(hu,d_o),e($,c_o),e($,pu),e(pu,dee),e(dee,f_o),e(pu,m_o),e(pu,EP),e(EP,g_o),e(pu,h_o),e($,p_o),e($,_u),e(_u,cee),e(cee,__o),e(_u,u_o),e(_u,yP),e(yP,b_o),e(_u,v_o),e($,T_o),e($,uu),e(uu,fee),e(fee,F_o),e(uu,C_o),e(uu,wP),e(wP,M_o),e(uu,E_o),e($,y_o),e($,bu),e(bu,mee),e(mee,w_o),e(bu,A_o),e(bu,AP),e(AP,L_o),e(bu,B_o),e($,x_o),e($,vu),e(vu,gee),e(gee,k_o),e(vu,R_o),e(vu,LP),e(LP,S_o),e(vu,P_o),e($,$_o),e($,Tu),e(Tu,hee),e(hee,I_o),e(Tu,D_o),e(Tu,BP),e(BP,j_o),e(Tu,N_o),e($,q_o),e($,Fu),e(Fu,pee),e(pee,G_o),e(Fu,O_o),e(Fu,xP),e(xP,X_o),e(Fu,V_o),e($,z_o),e($,Cu),e(Cu,_ee),e(_ee,W_o),e(Cu,Q_o),e(Cu,kP),e(kP,H_o),e(Cu,U_o),e($,J_o),e($,Mu),e(Mu,uee),e(uee,Y_o),e(Mu,K_o),e(Mu,RP),e(RP,Z_o),e(Mu,euo),e($,ouo),e($,Eu),e(Eu,bee),e(bee,ruo),e(Eu,tuo),e(Eu,SP),e(SP,auo),e(Eu,nuo),e(Pe,suo),e(Pe,yu),e(yu,luo),e(yu,vee),e(vee,iuo),e(yu,duo),e(yu,Tee),e(Tee,cuo),e(Pe,fuo),e(Pe,Fee),e(Fee,muo),e(Pe,guo),g(TE,Pe,null),b(c,I8e,u),b(c,Yi,u),e(Yi,wu),e(wu,Cee),g(FE,Cee,null),e(Yi,huo),e(Yi,Mee),e(Mee,puo),b(c,D8e,u),b(c,Jo,u),g(CE,Jo,null),e(Jo,_uo),e(Jo,Ki),e(Ki,uuo),e(Ki,Eee),e(Eee,buo),e(Ki,vuo),e(Ki,yee),e(yee,Tuo),e(Ki,Fuo),e(Jo,Cuo),e(Jo,ME),e(ME,Muo),e(ME,wee),e(wee,Euo),e(ME,yuo),e(Jo,wuo),e(Jo,Xr),g(EE,Xr,null),e(Xr,Auo),e(Xr,Aee),e(Aee,Luo),e(Xr,Buo),e(Xr,Zi),e(Zi,xuo),e(Zi,Lee),e(Lee,kuo),e(Zi,Ruo),e(Zi,Bee),e(Bee,Suo),e(Zi,Puo),e(Xr,$uo),e(Xr,xee),e(xee,Iuo),e(Xr,Duo),g(yE,Xr,null),e(Jo,juo),e(Jo,$e),g(wE,$e,null),e($e,Nuo),e($e,kee),e(kee,quo),e($e,Guo),e($e,Oa),e(Oa,Ouo),e(Oa,Ree),e(Ree,Xuo),e(Oa,Vuo),e(Oa,See),e(See,zuo),e(Oa,Wuo),e(Oa,Pee),e(Pee,Quo),e(Oa,Huo),e($e,Uuo),e($e,I),e(I,Au),e(Au,$ee),e($ee,Juo),e(Au,Yuo),e(Au,PP),e(PP,Kuo),e(Au,Zuo),e(I,e5o),e(I,Lu),e(Lu,Iee),e(Iee,o5o),e(Lu,r5o),e(Lu,$P),e($P,t5o),e(Lu,a5o),e(I,n5o),e(I,Bu),e(Bu,Dee),e(Dee,s5o),e(Bu,l5o),e(Bu,IP),e(IP,i5o),e(Bu,d5o),e(I,c5o),e(I,xu),e(xu,jee),e(jee,f5o),e(xu,m5o),e(xu,DP),e(DP,g5o),e(xu,h5o),e(I,p5o),e(I,ku),e(ku,Nee),e(Nee,_5o),e(ku,u5o),e(ku,jP),e(jP,b5o),e(ku,v5o),e(I,T5o),e(I,Ru),e(Ru,qee),e(qee,F5o),e(Ru,C5o),e(Ru,NP),e(NP,M5o),e(Ru,E5o),e(I,y5o),e(I,Su),e(Su,Gee),e(Gee,w5o),e(Su,A5o),e(Su,qP),e(qP,L5o),e(Su,B5o),e(I,x5o),e(I,Pu),e(Pu,Oee),e(Oee,k5o),e(Pu,R5o),e(Pu,GP),e(GP,S5o),e(Pu,P5o),e(I,$5o),e(I,$u),e($u,Xee),e(Xee,I5o),e($u,D5o),e($u,OP),e(OP,j5o),e($u,N5o),e(I,q5o),e(I,Iu),e(Iu,Vee),e(Vee,G5o),e(Iu,O5o),e(Iu,XP),e(XP,X5o),e(Iu,V5o),e(I,z5o),e(I,Du),e(Du,zee),e(zee,W5o),e(Du,Q5o),e(Du,VP),e(VP,H5o),e(Du,U5o),e(I,J5o),e(I,ju),e(ju,Wee),e(Wee,Y5o),e(ju,K5o),e(ju,zP),e(zP,Z5o),e(ju,e1o),e(I,o1o),e(I,Nu),e(Nu,Qee),e(Qee,r1o),e(Nu,t1o),e(Nu,WP),e(WP,a1o),e(Nu,n1o),e(I,s1o),e(I,qu),e(qu,Hee),e(Hee,l1o),e(qu,i1o),e(qu,QP),e(QP,d1o),e(qu,c1o),e(I,f1o),e(I,Gu),e(Gu,Uee),e(Uee,m1o),e(Gu,g1o),e(Gu,HP),e(HP,h1o),e(Gu,p1o),e(I,_1o),e(I,Ou),e(Ou,Jee),e(Jee,u1o),e(Ou,b1o),e(Ou,UP),e(UP,v1o),e(Ou,T1o),e(I,F1o),e(I,Xu),e(Xu,Yee),e(Yee,C1o),e(Xu,M1o),e(Xu,JP),e(JP,E1o),e(Xu,y1o),e(I,w1o),e(I,Vu),e(Vu,Kee),e(Kee,A1o),e(Vu,L1o),e(Vu,YP),e(YP,B1o),e(Vu,x1o),e(I,k1o),e(I,zu),e(zu,Zee),e(Zee,R1o),e(zu,S1o),e(zu,KP),e(KP,P1o),e(zu,$1o),e(I,I1o),e(I,Wu),e(Wu,eoe),e(eoe,D1o),e(Wu,j1o),e(Wu,ZP),e(ZP,N1o),e(Wu,q1o),e(I,G1o),e(I,Qu),e(Qu,ooe),e(ooe,O1o),e(Qu,X1o),e(Qu,e$),e(e$,V1o),e(Qu,z1o),e(I,W1o),e(I,Hu),e(Hu,roe),e(roe,Q1o),e(Hu,H1o),e(Hu,o$),e(o$,U1o),e(Hu,J1o),e(I,Y1o),e(I,Uu),e(Uu,toe),e(toe,K1o),e(Uu,Z1o),e(Uu,r$),e(r$,ebo),e(Uu,obo),e(I,rbo),e(I,Ju),e(Ju,aoe),e(aoe,tbo),e(Ju,abo),e(Ju,t$),e(t$,nbo),e(Ju,sbo),e(I,lbo),e(I,Yu),e(Yu,noe),e(noe,ibo),e(Yu,dbo),e(Yu,a$),e(a$,cbo),e(Yu,fbo),e(I,mbo),e(I,Ku),e(Ku,soe),e(soe,gbo),e(Ku,hbo),e(Ku,n$),e(n$,pbo),e(Ku,_bo),e(I,ubo),e(I,Zu),e(Zu,loe),e(loe,bbo),e(Zu,vbo),e(Zu,s$),e(s$,Tbo),e(Zu,Fbo),e(I,Cbo),e(I,e5),e(e5,ioe),e(ioe,Mbo),e(e5,Ebo),e(e5,l$),e(l$,ybo),e(e5,wbo),e(I,Abo),e(I,o5),e(o5,doe),e(doe,Lbo),e(o5,Bbo),e(o5,i$),e(i$,xbo),e(o5,kbo),e(I,Rbo),e(I,r5),e(r5,coe),e(coe,Sbo),e(r5,Pbo),e(r5,d$),e(d$,$bo),e(r5,Ibo),e(I,Dbo),e(I,t5),e(t5,foe),e(foe,jbo),e(t5,Nbo),e(t5,moe),e(moe,qbo),e(t5,Gbo),e(I,Obo),e(I,a5),e(a5,goe),e(goe,Xbo),e(a5,Vbo),e(a5,c$),e(c$,zbo),e(a5,Wbo),e(I,Qbo),e(I,n5),e(n5,hoe),e(hoe,Hbo),e(n5,Ubo),e(n5,f$),e(f$,Jbo),e(n5,Ybo),e(I,Kbo),e(I,s5),e(s5,poe),e(poe,Zbo),e(s5,e2o),e(s5,m$),e(m$,o2o),e(s5,r2o),e(I,t2o),e(I,l5),e(l5,_oe),e(_oe,a2o),e(l5,n2o),e(l5,g$),e(g$,s2o),e(l5,l2o),e($e,i2o),e($e,i5),e(i5,d2o),e(i5,uoe),e(uoe,c2o),e(i5,f2o),e(i5,boe),e(boe,m2o),e($e,g2o),e($e,voe),e(voe,h2o),e($e,p2o),g(AE,$e,null),b(c,j8e,u),b(c,ed,u),e(ed,d5),e(d5,Toe),g(LE,Toe,null),e(ed,_2o),e(ed,Foe),e(Foe,u2o),b(c,N8e,u),b(c,Yo,u),g(BE,Yo,null),e(Yo,b2o),e(Yo,od),e(od,v2o),e(od,Coe),e(Coe,T2o),e(od,F2o),e(od,Moe),e(Moe,C2o),e(od,M2o),e(Yo,E2o),e(Yo,xE),e(xE,y2o),e(xE,Eoe),e(Eoe,w2o),e(xE,A2o),e(Yo,L2o),e(Yo,Vr),g(kE,Vr,null),e(Vr,B2o),e(Vr,yoe),e(yoe,x2o),e(Vr,k2o),e(Vr,rd),e(rd,R2o),e(rd,woe),e(woe,S2o),e(rd,P2o),e(rd,Aoe),e(Aoe,$2o),e(rd,I2o),e(Vr,D2o),e(Vr,Loe),e(Loe,j2o),e(Vr,N2o),g(RE,Vr,null),e(Yo,q2o),e(Yo,Ie),g(SE,Ie,null),e(Ie,G2o),e(Ie,Boe),e(Boe,O2o),e(Ie,X2o),e(Ie,Xa),e(Xa,V2o),e(Xa,xoe),e(xoe,z2o),e(Xa,W2o),e(Xa,koe),e(koe,Q2o),e(Xa,H2o),e(Xa,Roe),e(Roe,U2o),e(Xa,J2o),e(Ie,Y2o),e(Ie,ae),e(ae,c5),e(c5,Soe),e(Soe,K2o),e(c5,Z2o),e(c5,h$),e(h$,evo),e(c5,ovo),e(ae,rvo),e(ae,f5),e(f5,Poe),e(Poe,tvo),e(f5,avo),e(f5,p$),e(p$,nvo),e(f5,svo),e(ae,lvo),e(ae,m5),e(m5,$oe),e($oe,ivo),e(m5,dvo),e(m5,_$),e(_$,cvo),e(m5,fvo),e(ae,mvo),e(ae,g5),e(g5,Ioe),e(Ioe,gvo),e(g5,hvo),e(g5,u$),e(u$,pvo),e(g5,_vo),e(ae,uvo),e(ae,h5),e(h5,Doe),e(Doe,bvo),e(h5,vvo),e(h5,b$),e(b$,Tvo),e(h5,Fvo),e(ae,Cvo),e(ae,p5),e(p5,joe),e(joe,Mvo),e(p5,Evo),e(p5,v$),e(v$,yvo),e(p5,wvo),e(ae,Avo),e(ae,_5),e(_5,Noe),e(Noe,Lvo),e(_5,Bvo),e(_5,T$),e(T$,xvo),e(_5,kvo),e(ae,Rvo),e(ae,u5),e(u5,qoe),e(qoe,Svo),e(u5,Pvo),e(u5,F$),e(F$,$vo),e(u5,Ivo),e(ae,Dvo),e(ae,b5),e(b5,Goe),e(Goe,jvo),e(b5,Nvo),e(b5,C$),e(C$,qvo),e(b5,Gvo),e(ae,Ovo),e(ae,v5),e(v5,Ooe),e(Ooe,Xvo),e(v5,Vvo),e(v5,M$),e(M$,zvo),e(v5,Wvo),e(ae,Qvo),e(ae,T5),e(T5,Xoe),e(Xoe,Hvo),e(T5,Uvo),e(T5,E$),e(E$,Jvo),e(T5,Yvo),e(ae,Kvo),e(ae,F5),e(F5,Voe),e(Voe,Zvo),e(F5,eTo),e(F5,y$),e(y$,oTo),e(F5,rTo),e(ae,tTo),e(ae,C5),e(C5,zoe),e(zoe,aTo),e(C5,nTo),e(C5,w$),e(w$,sTo),e(C5,lTo),e(ae,iTo),e(ae,M5),e(M5,Woe),e(Woe,dTo),e(M5,cTo),e(M5,A$),e(A$,fTo),e(M5,mTo),e(ae,gTo),e(ae,E5),e(E5,Qoe),e(Qoe,hTo),e(E5,pTo),e(E5,L$),e(L$,_To),e(E5,uTo),e(ae,bTo),e(ae,y5),e(y5,Hoe),e(Hoe,vTo),e(y5,TTo),e(y5,B$),e(B$,FTo),e(y5,CTo),e(Ie,MTo),e(Ie,w5),e(w5,ETo),e(w5,Uoe),e(Uoe,yTo),e(w5,wTo),e(w5,Joe),e(Joe,ATo),e(Ie,LTo),e(Ie,Yoe),e(Yoe,BTo),e(Ie,xTo),g(PE,Ie,null),b(c,q8e,u),b(c,td,u),e(td,A5),e(A5,Koe),g($E,Koe,null),e(td,kTo),e(td,Zoe),e(Zoe,RTo),b(c,G8e,u),b(c,Ko,u),g(IE,Ko,null),e(Ko,STo),e(Ko,ad),e(ad,PTo),e(ad,ere),e(ere,$To),e(ad,ITo),e(ad,ore),e(ore,DTo),e(ad,jTo),e(Ko,NTo),e(Ko,DE),e(DE,qTo),e(DE,rre),e(rre,GTo),e(DE,OTo),e(Ko,XTo),e(Ko,zr),g(jE,zr,null),e(zr,VTo),e(zr,tre),e(tre,zTo),e(zr,WTo),e(zr,nd),e(nd,QTo),e(nd,are),e(are,HTo),e(nd,UTo),e(nd,nre),e(nre,JTo),e(nd,YTo),e(zr,KTo),e(zr,sre),e(sre,ZTo),e(zr,e7o),g(NE,zr,null),e(Ko,o7o),e(Ko,De),g(qE,De,null),e(De,r7o),e(De,lre),e(lre,t7o),e(De,a7o),e(De,Va),e(Va,n7o),e(Va,ire),e(ire,s7o),e(Va,l7o),e(Va,dre),e(dre,i7o),e(Va,d7o),e(Va,cre),e(cre,c7o),e(Va,f7o),e(De,m7o),e(De,A),e(A,L5),e(L5,fre),e(fre,g7o),e(L5,h7o),e(L5,x$),e(x$,p7o),e(L5,_7o),e(A,u7o),e(A,B5),e(B5,mre),e(mre,b7o),e(B5,v7o),e(B5,k$),e(k$,T7o),e(B5,F7o),e(A,C7o),e(A,x5),e(x5,gre),e(gre,M7o),e(x5,E7o),e(x5,R$),e(R$,y7o),e(x5,w7o),e(A,A7o),e(A,k5),e(k5,hre),e(hre,L7o),e(k5,B7o),e(k5,S$),e(S$,x7o),e(k5,k7o),e(A,R7o),e(A,R5),e(R5,pre),e(pre,S7o),e(R5,P7o),e(R5,P$),e(P$,$7o),e(R5,I7o),e(A,D7o),e(A,S5),e(S5,_re),e(_re,j7o),e(S5,N7o),e(S5,$$),e($$,q7o),e(S5,G7o),e(A,O7o),e(A,P5),e(P5,ure),e(ure,X7o),e(P5,V7o),e(P5,I$),e(I$,z7o),e(P5,W7o),e(A,Q7o),e(A,$5),e($5,bre),e(bre,H7o),e($5,U7o),e($5,D$),e(D$,J7o),e($5,Y7o),e(A,K7o),e(A,I5),e(I5,vre),e(vre,Z7o),e(I5,eFo),e(I5,j$),e(j$,oFo),e(I5,rFo),e(A,tFo),e(A,D5),e(D5,Tre),e(Tre,aFo),e(D5,nFo),e(D5,N$),e(N$,sFo),e(D5,lFo),e(A,iFo),e(A,j5),e(j5,Fre),e(Fre,dFo),e(j5,cFo),e(j5,q$),e(q$,fFo),e(j5,mFo),e(A,gFo),e(A,N5),e(N5,Cre),e(Cre,hFo),e(N5,pFo),e(N5,G$),e(G$,_Fo),e(N5,uFo),e(A,bFo),e(A,q5),e(q5,Mre),e(Mre,vFo),e(q5,TFo),e(q5,O$),e(O$,FFo),e(q5,CFo),e(A,MFo),e(A,G5),e(G5,Ere),e(Ere,EFo),e(G5,yFo),e(G5,X$),e(X$,wFo),e(G5,AFo),e(A,LFo),e(A,O5),e(O5,yre),e(yre,BFo),e(O5,xFo),e(O5,V$),e(V$,kFo),e(O5,RFo),e(A,SFo),e(A,X5),e(X5,wre),e(wre,PFo),e(X5,$Fo),e(X5,z$),e(z$,IFo),e(X5,DFo),e(A,jFo),e(A,V5),e(V5,Are),e(Are,NFo),e(V5,qFo),e(V5,W$),e(W$,GFo),e(V5,OFo),e(A,XFo),e(A,z5),e(z5,Lre),e(Lre,VFo),e(z5,zFo),e(z5,Q$),e(Q$,WFo),e(z5,QFo),e(A,HFo),e(A,W5),e(W5,Bre),e(Bre,UFo),e(W5,JFo),e(W5,H$),e(H$,YFo),e(W5,KFo),e(A,ZFo),e(A,Q5),e(Q5,xre),e(xre,e9o),e(Q5,o9o),e(Q5,U$),e(U$,r9o),e(Q5,t9o),e(A,a9o),e(A,H5),e(H5,kre),e(kre,n9o),e(H5,s9o),e(H5,J$),e(J$,l9o),e(H5,i9o),e(A,d9o),e(A,U5),e(U5,Rre),e(Rre,c9o),e(U5,f9o),e(U5,Y$),e(Y$,m9o),e(U5,g9o),e(A,h9o),e(A,J5),e(J5,Sre),e(Sre,p9o),e(J5,_9o),e(J5,K$),e(K$,u9o),e(J5,b9o),e(A,v9o),e(A,Y5),e(Y5,Pre),e(Pre,T9o),e(Y5,F9o),e(Y5,Z$),e(Z$,C9o),e(Y5,M9o),e(A,E9o),e(A,K5),e(K5,$re),e($re,y9o),e(K5,w9o),e(K5,eI),e(eI,A9o),e(K5,L9o),e(A,B9o),e(A,Z5),e(Z5,Ire),e(Ire,x9o),e(Z5,k9o),e(Z5,oI),e(oI,R9o),e(Z5,S9o),e(A,P9o),e(A,e1),e(e1,Dre),e(Dre,$9o),e(e1,I9o),e(e1,rI),e(rI,D9o),e(e1,j9o),e(A,N9o),e(A,o1),e(o1,jre),e(jre,q9o),e(o1,G9o),e(o1,tI),e(tI,O9o),e(o1,X9o),e(A,V9o),e(A,r1),e(r1,Nre),e(Nre,z9o),e(r1,W9o),e(r1,aI),e(aI,Q9o),e(r1,H9o),e(A,U9o),e(A,t1),e(t1,qre),e(qre,J9o),e(t1,Y9o),e(t1,nI),e(nI,K9o),e(t1,Z9o),e(A,eCo),e(A,a1),e(a1,Gre),e(Gre,oCo),e(a1,rCo),e(a1,sI),e(sI,tCo),e(a1,aCo),e(A,nCo),e(A,n1),e(n1,Ore),e(Ore,sCo),e(n1,lCo),e(n1,lI),e(lI,iCo),e(n1,dCo),e(A,cCo),e(A,s1),e(s1,Xre),e(Xre,fCo),e(s1,mCo),e(s1,iI),e(iI,gCo),e(s1,hCo),e(A,pCo),e(A,l1),e(l1,Vre),e(Vre,_Co),e(l1,uCo),e(l1,dI),e(dI,bCo),e(l1,vCo),e(A,TCo),e(A,i1),e(i1,zre),e(zre,FCo),e(i1,CCo),e(i1,cI),e(cI,MCo),e(i1,ECo),e(A,yCo),e(A,d1),e(d1,Wre),e(Wre,wCo),e(d1,ACo),e(d1,fI),e(fI,LCo),e(d1,BCo),e(A,xCo),e(A,c1),e(c1,Qre),e(Qre,kCo),e(c1,RCo),e(c1,mI),e(mI,SCo),e(c1,PCo),e(A,$Co),e(A,f1),e(f1,Hre),e(Hre,ICo),e(f1,DCo),e(f1,gI),e(gI,jCo),e(f1,NCo),e(A,qCo),e(A,m1),e(m1,Ure),e(Ure,GCo),e(m1,OCo),e(m1,hI),e(hI,XCo),e(m1,VCo),e(A,zCo),e(A,g1),e(g1,Jre),e(Jre,WCo),e(g1,QCo),e(g1,pI),e(pI,HCo),e(g1,UCo),e(A,JCo),e(A,h1),e(h1,Yre),e(Yre,YCo),e(h1,KCo),e(h1,_I),e(_I,ZCo),e(h1,e4o),e(A,o4o),e(A,p1),e(p1,Kre),e(Kre,r4o),e(p1,t4o),e(p1,uI),e(uI,a4o),e(p1,n4o),e(A,s4o),e(A,_1),e(_1,Zre),e(Zre,l4o),e(_1,i4o),e(_1,bI),e(bI,d4o),e(_1,c4o),e(A,f4o),e(A,u1),e(u1,ete),e(ete,m4o),e(u1,g4o),e(u1,vI),e(vI,h4o),e(u1,p4o),e(A,_4o),e(A,b1),e(b1,ote),e(ote,u4o),e(b1,b4o),e(b1,TI),e(TI,v4o),e(b1,T4o),e(A,F4o),e(A,v1),e(v1,rte),e(rte,C4o),e(v1,M4o),e(v1,FI),e(FI,E4o),e(v1,y4o),e(De,w4o),e(De,T1),e(T1,A4o),e(T1,tte),e(tte,L4o),e(T1,B4o),e(T1,ate),e(ate,x4o),e(De,k4o),e(De,nte),e(nte,R4o),e(De,S4o),g(GE,De,null),b(c,O8e,u),b(c,sd,u),e(sd,F1),e(F1,ste),g(OE,ste,null),e(sd,P4o),e(sd,lte),e(lte,$4o),b(c,X8e,u),b(c,Zo,u),g(XE,Zo,null),e(Zo,I4o),e(Zo,ld),e(ld,D4o),e(ld,ite),e(ite,j4o),e(ld,N4o),e(ld,dte),e(dte,q4o),e(ld,G4o),e(Zo,O4o),e(Zo,VE),e(VE,X4o),e(VE,cte),e(cte,V4o),e(VE,z4o),e(Zo,W4o),e(Zo,Wr),g(zE,Wr,null),e(Wr,Q4o),e(Wr,fte),e(fte,H4o),e(Wr,U4o),e(Wr,id),e(id,J4o),e(id,mte),e(mte,Y4o),e(id,K4o),e(id,gte),e(gte,Z4o),e(id,eMo),e(Wr,oMo),e(Wr,hte),e(hte,rMo),e(Wr,tMo),g(WE,Wr,null),e(Zo,aMo),e(Zo,je),g(QE,je,null),e(je,nMo),e(je,pte),e(pte,sMo),e(je,lMo),e(je,za),e(za,iMo),e(za,_te),e(_te,dMo),e(za,cMo),e(za,ute),e(ute,fMo),e(za,mMo),e(za,bte),e(bte,gMo),e(za,hMo),e(je,pMo),e(je,G),e(G,C1),e(C1,vte),e(vte,_Mo),e(C1,uMo),e(C1,CI),e(CI,bMo),e(C1,vMo),e(G,TMo),e(G,M1),e(M1,Tte),e(Tte,FMo),e(M1,CMo),e(M1,MI),e(MI,MMo),e(M1,EMo),e(G,yMo),e(G,E1),e(E1,Fte),e(Fte,wMo),e(E1,AMo),e(E1,EI),e(EI,LMo),e(E1,BMo),e(G,xMo),e(G,y1),e(y1,Cte),e(Cte,kMo),e(y1,RMo),e(y1,yI),e(yI,SMo),e(y1,PMo),e(G,$Mo),e(G,w1),e(w1,Mte),e(Mte,IMo),e(w1,DMo),e(w1,wI),e(wI,jMo),e(w1,NMo),e(G,qMo),e(G,A1),e(A1,Ete),e(Ete,GMo),e(A1,OMo),e(A1,AI),e(AI,XMo),e(A1,VMo),e(G,zMo),e(G,L1),e(L1,yte),e(yte,WMo),e(L1,QMo),e(L1,LI),e(LI,HMo),e(L1,UMo),e(G,JMo),e(G,B1),e(B1,wte),e(wte,YMo),e(B1,KMo),e(B1,BI),e(BI,ZMo),e(B1,eEo),e(G,oEo),e(G,x1),e(x1,Ate),e(Ate,rEo),e(x1,tEo),e(x1,xI),e(xI,aEo),e(x1,nEo),e(G,sEo),e(G,k1),e(k1,Lte),e(Lte,lEo),e(k1,iEo),e(k1,kI),e(kI,dEo),e(k1,cEo),e(G,fEo),e(G,R1),e(R1,Bte),e(Bte,mEo),e(R1,gEo),e(R1,RI),e(RI,hEo),e(R1,pEo),e(G,_Eo),e(G,S1),e(S1,xte),e(xte,uEo),e(S1,bEo),e(S1,SI),e(SI,vEo),e(S1,TEo),e(G,FEo),e(G,P1),e(P1,kte),e(kte,CEo),e(P1,MEo),e(P1,PI),e(PI,EEo),e(P1,yEo),e(G,wEo),e(G,$1),e($1,Rte),e(Rte,AEo),e($1,LEo),e($1,$I),e($I,BEo),e($1,xEo),e(G,kEo),e(G,I1),e(I1,Ste),e(Ste,REo),e(I1,SEo),e(I1,II),e(II,PEo),e(I1,$Eo),e(G,IEo),e(G,D1),e(D1,Pte),e(Pte,DEo),e(D1,jEo),e(D1,DI),e(DI,NEo),e(D1,qEo),e(G,GEo),e(G,j1),e(j1,$te),e($te,OEo),e(j1,XEo),e(j1,jI),e(jI,VEo),e(j1,zEo),e(G,WEo),e(G,N1),e(N1,Ite),e(Ite,QEo),e(N1,HEo),e(N1,NI),e(NI,UEo),e(N1,JEo),e(G,YEo),e(G,q1),e(q1,Dte),e(Dte,KEo),e(q1,ZEo),e(q1,qI),e(qI,e3o),e(q1,o3o),e(G,r3o),e(G,G1),e(G1,jte),e(jte,t3o),e(G1,a3o),e(G1,GI),e(GI,n3o),e(G1,s3o),e(G,l3o),e(G,O1),e(O1,Nte),e(Nte,i3o),e(O1,d3o),e(O1,OI),e(OI,c3o),e(O1,f3o),e(G,m3o),e(G,X1),e(X1,qte),e(qte,g3o),e(X1,h3o),e(X1,XI),e(XI,p3o),e(X1,_3o),e(G,u3o),e(G,V1),e(V1,Gte),e(Gte,b3o),e(V1,v3o),e(V1,VI),e(VI,T3o),e(V1,F3o),e(G,C3o),e(G,z1),e(z1,Ote),e(Ote,M3o),e(z1,E3o),e(z1,zI),e(zI,y3o),e(z1,w3o),e(G,A3o),e(G,W1),e(W1,Xte),e(Xte,L3o),e(W1,B3o),e(W1,WI),e(WI,x3o),e(W1,k3o),e(G,R3o),e(G,Q1),e(Q1,Vte),e(Vte,S3o),e(Q1,P3o),e(Q1,QI),e(QI,$3o),e(Q1,I3o),e(G,D3o),e(G,H1),e(H1,zte),e(zte,j3o),e(H1,N3o),e(H1,HI),e(HI,q3o),e(H1,G3o),e(G,O3o),e(G,U1),e(U1,Wte),e(Wte,X3o),e(U1,V3o),e(U1,UI),e(UI,z3o),e(U1,W3o),e(je,Q3o),e(je,J1),e(J1,H3o),e(J1,Qte),e(Qte,U3o),e(J1,J3o),e(J1,Hte),e(Hte,Y3o),e(je,K3o),e(je,Ute),e(Ute,Z3o),e(je,eyo),g(HE,je,null),b(c,V8e,u),b(c,dd,u),e(dd,Y1),e(Y1,Jte),g(UE,Jte,null),e(dd,oyo),e(dd,Yte),e(Yte,ryo),b(c,z8e,u),b(c,er,u),g(JE,er,null),e(er,tyo),e(er,cd),e(cd,ayo),e(cd,Kte),e(Kte,nyo),e(cd,syo),e(cd,Zte),e(Zte,lyo),e(cd,iyo),e(er,dyo),e(er,YE),e(YE,cyo),e(YE,eae),e(eae,fyo),e(YE,myo),e(er,gyo),e(er,Qr),g(KE,Qr,null),e(Qr,hyo),e(Qr,oae),e(oae,pyo),e(Qr,_yo),e(Qr,fd),e(fd,uyo),e(fd,rae),e(rae,byo),e(fd,vyo),e(fd,tae),e(tae,Tyo),e(fd,Fyo),e(Qr,Cyo),e(Qr,aae),e(aae,Myo),e(Qr,Eyo),g(ZE,Qr,null),e(er,yyo),e(er,Ne),g(e3,Ne,null),e(Ne,wyo),e(Ne,nae),e(nae,Ayo),e(Ne,Lyo),e(Ne,Wa),e(Wa,Byo),e(Wa,sae),e(sae,xyo),e(Wa,kyo),e(Wa,lae),e(lae,Ryo),e(Wa,Syo),e(Wa,iae),e(iae,Pyo),e(Wa,$yo),e(Ne,Iyo),e(Ne,na),e(na,K1),e(K1,dae),e(dae,Dyo),e(K1,jyo),e(K1,JI),e(JI,Nyo),e(K1,qyo),e(na,Gyo),e(na,Z1),e(Z1,cae),e(cae,Oyo),e(Z1,Xyo),e(Z1,YI),e(YI,Vyo),e(Z1,zyo),e(na,Wyo),e(na,eb),e(eb,fae),e(fae,Qyo),e(eb,Hyo),e(eb,KI),e(KI,Uyo),e(eb,Jyo),e(na,Yyo),e(na,ob),e(ob,mae),e(mae,Kyo),e(ob,Zyo),e(ob,ZI),e(ZI,ewo),e(ob,owo),e(na,rwo),e(na,rb),e(rb,gae),e(gae,two),e(rb,awo),e(rb,eD),e(eD,nwo),e(rb,swo),e(Ne,lwo),e(Ne,tb),e(tb,iwo),e(tb,hae),e(hae,dwo),e(tb,cwo),e(tb,pae),e(pae,fwo),e(Ne,mwo),e(Ne,_ae),e(_ae,gwo),e(Ne,hwo),g(o3,Ne,null),b(c,W8e,u),b(c,md,u),e(md,ab),e(ab,uae),g(r3,uae,null),e(md,pwo),e(md,bae),e(bae,_wo),b(c,Q8e,u),b(c,or,u),g(t3,or,null),e(or,uwo),e(or,gd),e(gd,bwo),e(gd,vae),e(vae,vwo),e(gd,Two),e(gd,Tae),e(Tae,Fwo),e(gd,Cwo),e(or,Mwo),e(or,a3),e(a3,Ewo),e(a3,Fae),e(Fae,ywo),e(a3,wwo),e(or,Awo),e(or,Hr),g(n3,Hr,null),e(Hr,Lwo),e(Hr,Cae),e(Cae,Bwo),e(Hr,xwo),e(Hr,hd),e(hd,kwo),e(hd,Mae),e(Mae,Rwo),e(hd,Swo),e(hd,Eae),e(Eae,Pwo),e(hd,$wo),e(Hr,Iwo),e(Hr,yae),e(yae,Dwo),e(Hr,jwo),g(s3,Hr,null),e(or,Nwo),e(or,qe),g(l3,qe,null),e(qe,qwo),e(qe,wae),e(wae,Gwo),e(qe,Owo),e(qe,Qa),e(Qa,Xwo),e(Qa,Aae),e(Aae,Vwo),e(Qa,zwo),e(Qa,Lae),e(Lae,Wwo),e(Qa,Qwo),e(Qa,Bae),e(Bae,Hwo),e(Qa,Uwo),e(qe,Jwo),e(qe,N),e(N,nb),e(nb,xae),e(xae,Ywo),e(nb,Kwo),e(nb,oD),e(oD,Zwo),e(nb,e6o),e(N,o6o),e(N,sb),e(sb,kae),e(kae,r6o),e(sb,t6o),e(sb,rD),e(rD,a6o),e(sb,n6o),e(N,s6o),e(N,lb),e(lb,Rae),e(Rae,l6o),e(lb,i6o),e(lb,tD),e(tD,d6o),e(lb,c6o),e(N,f6o),e(N,ib),e(ib,Sae),e(Sae,m6o),e(ib,g6o),e(ib,aD),e(aD,h6o),e(ib,p6o),e(N,_6o),e(N,db),e(db,Pae),e(Pae,u6o),e(db,b6o),e(db,nD),e(nD,v6o),e(db,T6o),e(N,F6o),e(N,cb),e(cb,$ae),e($ae,C6o),e(cb,M6o),e(cb,sD),e(sD,E6o),e(cb,y6o),e(N,w6o),e(N,fb),e(fb,Iae),e(Iae,A6o),e(fb,L6o),e(fb,lD),e(lD,B6o),e(fb,x6o),e(N,k6o),e(N,mb),e(mb,Dae),e(Dae,R6o),e(mb,S6o),e(mb,iD),e(iD,P6o),e(mb,$6o),e(N,I6o),e(N,gb),e(gb,jae),e(jae,D6o),e(gb,j6o),e(gb,dD),e(dD,N6o),e(gb,q6o),e(N,G6o),e(N,hb),e(hb,Nae),e(Nae,O6o),e(hb,X6o),e(hb,cD),e(cD,V6o),e(hb,z6o),e(N,W6o),e(N,pb),e(pb,qae),e(qae,Q6o),e(pb,H6o),e(pb,fD),e(fD,U6o),e(pb,J6o),e(N,Y6o),e(N,_b),e(_b,Gae),e(Gae,K6o),e(_b,Z6o),e(_b,mD),e(mD,eAo),e(_b,oAo),e(N,rAo),e(N,ub),e(ub,Oae),e(Oae,tAo),e(ub,aAo),e(ub,gD),e(gD,nAo),e(ub,sAo),e(N,lAo),e(N,bb),e(bb,Xae),e(Xae,iAo),e(bb,dAo),e(bb,hD),e(hD,cAo),e(bb,fAo),e(N,mAo),e(N,vb),e(vb,Vae),e(Vae,gAo),e(vb,hAo),e(vb,pD),e(pD,pAo),e(vb,_Ao),e(N,uAo),e(N,Tb),e(Tb,zae),e(zae,bAo),e(Tb,vAo),e(Tb,_D),e(_D,TAo),e(Tb,FAo),e(N,CAo),e(N,Fb),e(Fb,Wae),e(Wae,MAo),e(Fb,EAo),e(Fb,uD),e(uD,yAo),e(Fb,wAo),e(N,AAo),e(N,Cb),e(Cb,Qae),e(Qae,LAo),e(Cb,BAo),e(Cb,bD),e(bD,xAo),e(Cb,kAo),e(N,RAo),e(N,Mb),e(Mb,Hae),e(Hae,SAo),e(Mb,PAo),e(Mb,vD),e(vD,$Ao),e(Mb,IAo),e(N,DAo),e(N,Eb),e(Eb,Uae),e(Uae,jAo),e(Eb,NAo),e(Eb,TD),e(TD,qAo),e(Eb,GAo),e(N,OAo),e(N,yb),e(yb,Jae),e(Jae,XAo),e(yb,VAo),e(yb,FD),e(FD,zAo),e(yb,WAo),e(N,QAo),e(N,wb),e(wb,Yae),e(Yae,HAo),e(wb,UAo),e(wb,CD),e(CD,JAo),e(wb,YAo),e(N,KAo),e(N,Ab),e(Ab,Kae),e(Kae,ZAo),e(Ab,e0o),e(Ab,MD),e(MD,o0o),e(Ab,r0o),e(N,t0o),e(N,Lb),e(Lb,Zae),e(Zae,a0o),e(Lb,n0o),e(Lb,ED),e(ED,s0o),e(Lb,l0o),e(N,i0o),e(N,Bb),e(Bb,ene),e(ene,d0o),e(Bb,c0o),e(Bb,yD),e(yD,f0o),e(Bb,m0o),e(N,g0o),e(N,xb),e(xb,one),e(one,h0o),e(xb,p0o),e(xb,wD),e(wD,_0o),e(xb,u0o),e(N,b0o),e(N,kb),e(kb,rne),e(rne,v0o),e(kb,T0o),e(kb,AD),e(AD,F0o),e(kb,C0o),e(N,M0o),e(N,Rb),e(Rb,tne),e(tne,E0o),e(Rb,y0o),e(Rb,LD),e(LD,w0o),e(Rb,A0o),e(N,L0o),e(N,Sb),e(Sb,ane),e(ane,B0o),e(Sb,x0o),e(Sb,BD),e(BD,k0o),e(Sb,R0o),e(N,S0o),e(N,Pb),e(Pb,nne),e(nne,P0o),e(Pb,$0o),e(Pb,xD),e(xD,I0o),e(Pb,D0o),e(N,j0o),e(N,$b),e($b,sne),e(sne,N0o),e($b,q0o),e($b,kD),e(kD,G0o),e($b,O0o),e(N,X0o),e(N,Ib),e(Ib,lne),e(lne,V0o),e(Ib,z0o),e(Ib,RD),e(RD,W0o),e(Ib,Q0o),e(N,H0o),e(N,Db),e(Db,ine),e(ine,U0o),e(Db,J0o),e(Db,SD),e(SD,Y0o),e(Db,K0o),e(qe,Z0o),e(qe,jb),e(jb,eLo),e(jb,dne),e(dne,oLo),e(jb,rLo),e(jb,cne),e(cne,tLo),e(qe,aLo),e(qe,fne),e(fne,nLo),e(qe,sLo),g(i3,qe,null),b(c,H8e,u),b(c,pd,u),e(pd,Nb),e(Nb,mne),g(d3,mne,null),e(pd,lLo),e(pd,gne),e(gne,iLo),b(c,U8e,u),b(c,rr,u),g(c3,rr,null),e(rr,dLo),e(rr,_d),e(_d,cLo),e(_d,hne),e(hne,fLo),e(_d,mLo),e(_d,pne),e(pne,gLo),e(_d,hLo),e(rr,pLo),e(rr,f3),e(f3,_Lo),e(f3,_ne),e(_ne,uLo),e(f3,bLo),e(rr,vLo),e(rr,Ur),g(m3,Ur,null),e(Ur,TLo),e(Ur,une),e(une,FLo),e(Ur,CLo),e(Ur,ud),e(ud,MLo),e(ud,bne),e(bne,ELo),e(ud,yLo),e(ud,vne),e(vne,wLo),e(ud,ALo),e(Ur,LLo),e(Ur,Tne),e(Tne,BLo),e(Ur,xLo),g(g3,Ur,null),e(rr,kLo),e(rr,Ge),g(h3,Ge,null),e(Ge,RLo),e(Ge,Fne),e(Fne,SLo),e(Ge,PLo),e(Ge,Ha),e(Ha,$Lo),e(Ha,Cne),e(Cne,ILo),e(Ha,DLo),e(Ha,Mne),e(Mne,jLo),e(Ha,NLo),e(Ha,Ene),e(Ene,qLo),e(Ha,GLo),e(Ge,OLo),e(Ge,R),e(R,qb),e(qb,yne),e(yne,XLo),e(qb,VLo),e(qb,PD),e(PD,zLo),e(qb,WLo),e(R,QLo),e(R,Gb),e(Gb,wne),e(wne,HLo),e(Gb,ULo),e(Gb,$D),e($D,JLo),e(Gb,YLo),e(R,KLo),e(R,Ob),e(Ob,Ane),e(Ane,ZLo),e(Ob,e8o),e(Ob,ID),e(ID,o8o),e(Ob,r8o),e(R,t8o),e(R,Xb),e(Xb,Lne),e(Lne,a8o),e(Xb,n8o),e(Xb,DD),e(DD,s8o),e(Xb,l8o),e(R,i8o),e(R,Vb),e(Vb,Bne),e(Bne,d8o),e(Vb,c8o),e(Vb,jD),e(jD,f8o),e(Vb,m8o),e(R,g8o),e(R,zb),e(zb,xne),e(xne,h8o),e(zb,p8o),e(zb,ND),e(ND,_8o),e(zb,u8o),e(R,b8o),e(R,Wb),e(Wb,kne),e(kne,v8o),e(Wb,T8o),e(Wb,qD),e(qD,F8o),e(Wb,C8o),e(R,M8o),e(R,Qb),e(Qb,Rne),e(Rne,E8o),e(Qb,y8o),e(Qb,GD),e(GD,w8o),e(Qb,A8o),e(R,L8o),e(R,Hb),e(Hb,Sne),e(Sne,B8o),e(Hb,x8o),e(Hb,OD),e(OD,k8o),e(Hb,R8o),e(R,S8o),e(R,Ub),e(Ub,Pne),e(Pne,P8o),e(Ub,$8o),e(Ub,XD),e(XD,I8o),e(Ub,D8o),e(R,j8o),e(R,Jb),e(Jb,$ne),e($ne,N8o),e(Jb,q8o),e(Jb,VD),e(VD,G8o),e(Jb,O8o),e(R,X8o),e(R,Yb),e(Yb,Ine),e(Ine,V8o),e(Yb,z8o),e(Yb,zD),e(zD,W8o),e(Yb,Q8o),e(R,H8o),e(R,Kb),e(Kb,Dne),e(Dne,U8o),e(Kb,J8o),e(Kb,WD),e(WD,Y8o),e(Kb,K8o),e(R,Z8o),e(R,Zb),e(Zb,jne),e(jne,eBo),e(Zb,oBo),e(Zb,QD),e(QD,rBo),e(Zb,tBo),e(R,aBo),e(R,e2),e(e2,Nne),e(Nne,nBo),e(e2,sBo),e(e2,HD),e(HD,lBo),e(e2,iBo),e(R,dBo),e(R,o2),e(o2,qne),e(qne,cBo),e(o2,fBo),e(o2,UD),e(UD,mBo),e(o2,gBo),e(R,hBo),e(R,r2),e(r2,Gne),e(Gne,pBo),e(r2,_Bo),e(r2,JD),e(JD,uBo),e(r2,bBo),e(R,vBo),e(R,t2),e(t2,One),e(One,TBo),e(t2,FBo),e(t2,YD),e(YD,CBo),e(t2,MBo),e(R,EBo),e(R,a2),e(a2,Xne),e(Xne,yBo),e(a2,wBo),e(a2,KD),e(KD,ABo),e(a2,LBo),e(R,BBo),e(R,n2),e(n2,Vne),e(Vne,xBo),e(n2,kBo),e(n2,ZD),e(ZD,RBo),e(n2,SBo),e(R,PBo),e(R,s2),e(s2,zne),e(zne,$Bo),e(s2,IBo),e(s2,ej),e(ej,DBo),e(s2,jBo),e(R,NBo),e(R,l2),e(l2,Wne),e(Wne,qBo),e(l2,GBo),e(l2,oj),e(oj,OBo),e(l2,XBo),e(R,VBo),e(R,i2),e(i2,Qne),e(Qne,zBo),e(i2,WBo),e(i2,rj),e(rj,QBo),e(i2,HBo),e(R,UBo),e(R,d2),e(d2,Hne),e(Hne,JBo),e(d2,YBo),e(d2,tj),e(tj,KBo),e(d2,ZBo),e(R,exo),e(R,c2),e(c2,Une),e(Une,oxo),e(c2,rxo),e(c2,aj),e(aj,txo),e(c2,axo),e(R,nxo),e(R,f2),e(f2,Jne),e(Jne,sxo),e(f2,lxo),e(f2,nj),e(nj,ixo),e(f2,dxo),e(R,cxo),e(R,m2),e(m2,Yne),e(Yne,fxo),e(m2,mxo),e(m2,sj),e(sj,gxo),e(m2,hxo),e(R,pxo),e(R,g2),e(g2,Kne),e(Kne,_xo),e(g2,uxo),e(g2,lj),e(lj,bxo),e(g2,vxo),e(R,Txo),e(R,h2),e(h2,Zne),e(Zne,Fxo),e(h2,Cxo),e(h2,ij),e(ij,Mxo),e(h2,Exo),e(R,yxo),e(R,p2),e(p2,ese),e(ese,wxo),e(p2,Axo),e(p2,dj),e(dj,Lxo),e(p2,Bxo),e(R,xxo),e(R,_2),e(_2,ose),e(ose,kxo),e(_2,Rxo),e(_2,cj),e(cj,Sxo),e(_2,Pxo),e(R,$xo),e(R,u2),e(u2,rse),e(rse,Ixo),e(u2,Dxo),e(u2,fj),e(fj,jxo),e(u2,Nxo),e(R,qxo),e(R,b2),e(b2,tse),e(tse,Gxo),e(b2,Oxo),e(b2,mj),e(mj,Xxo),e(b2,Vxo),e(R,zxo),e(R,v2),e(v2,ase),e(ase,Wxo),e(v2,Qxo),e(v2,gj),e(gj,Hxo),e(v2,Uxo),e(R,Jxo),e(R,T2),e(T2,nse),e(nse,Yxo),e(T2,Kxo),e(T2,hj),e(hj,Zxo),e(T2,eko),e(R,oko),e(R,F2),e(F2,sse),e(sse,rko),e(F2,tko),e(F2,pj),e(pj,ako),e(F2,nko),e(R,sko),e(R,C2),e(C2,lse),e(lse,lko),e(C2,iko),e(C2,_j),e(_j,dko),e(C2,cko),e(R,fko),e(R,M2),e(M2,ise),e(ise,mko),e(M2,gko),e(M2,uj),e(uj,hko),e(M2,pko),e(R,_ko),e(R,E2),e(E2,dse),e(dse,uko),e(E2,bko),e(E2,bj),e(bj,vko),e(E2,Tko),e(Ge,Fko),e(Ge,y2),e(y2,Cko),e(y2,cse),e(cse,Mko),e(y2,Eko),e(y2,fse),e(fse,yko),e(Ge,wko),e(Ge,mse),e(mse,Ako),e(Ge,Lko),g(p3,Ge,null),b(c,J8e,u),b(c,bd,u),e(bd,w2),e(w2,gse),g(_3,gse,null),e(bd,Bko),e(bd,hse),e(hse,xko),b(c,Y8e,u),b(c,tr,u),g(u3,tr,null),e(tr,kko),e(tr,vd),e(vd,Rko),e(vd,pse),e(pse,Sko),e(vd,Pko),e(vd,_se),e(_se,$ko),e(vd,Iko),e(tr,Dko),e(tr,b3),e(b3,jko),e(b3,use),e(use,Nko),e(b3,qko),e(tr,Gko),e(tr,Jr),g(v3,Jr,null),e(Jr,Oko),e(Jr,bse),e(bse,Xko),e(Jr,Vko),e(Jr,Td),e(Td,zko),e(Td,vse),e(vse,Wko),e(Td,Qko),e(Td,Tse),e(Tse,Hko),e(Td,Uko),e(Jr,Jko),e(Jr,Fse),e(Fse,Yko),e(Jr,Kko),g(T3,Jr,null),e(tr,Zko),e(tr,Oe),g(F3,Oe,null),e(Oe,eRo),e(Oe,Cse),e(Cse,oRo),e(Oe,rRo),e(Oe,Ua),e(Ua,tRo),e(Ua,Mse),e(Mse,aRo),e(Ua,nRo),e(Ua,Ese),e(Ese,sRo),e(Ua,lRo),e(Ua,yse),e(yse,iRo),e(Ua,dRo),e(Oe,cRo),e(Oe,wse),e(wse,A2),e(A2,Ase),e(Ase,fRo),e(A2,mRo),e(A2,vj),e(vj,gRo),e(A2,hRo),e(Oe,pRo),e(Oe,L2),e(L2,_Ro),e(L2,Lse),e(Lse,uRo),e(L2,bRo),e(L2,Bse),e(Bse,vRo),e(Oe,TRo),e(Oe,xse),e(xse,FRo),e(Oe,CRo),g(C3,Oe,null),b(c,K8e,u),b(c,Fd,u),e(Fd,B2),e(B2,kse),g(M3,kse,null),e(Fd,MRo),e(Fd,Rse),e(Rse,ERo),b(c,Z8e,u),b(c,ar,u),g(E3,ar,null),e(ar,yRo),e(ar,Cd),e(Cd,wRo),e(Cd,Sse),e(Sse,ARo),e(Cd,LRo),e(Cd,Pse),e(Pse,BRo),e(Cd,xRo),e(ar,kRo),e(ar,y3),e(y3,RRo),e(y3,$se),e($se,SRo),e(y3,PRo),e(ar,$Ro),e(ar,Yr),g(w3,Yr,null),e(Yr,IRo),e(Yr,Ise),e(Ise,DRo),e(Yr,jRo),e(Yr,Md),e(Md,NRo),e(Md,Dse),e(Dse,qRo),e(Md,GRo),e(Md,jse),e(jse,ORo),e(Md,XRo),e(Yr,VRo),e(Yr,Nse),e(Nse,zRo),e(Yr,WRo),g(A3,Yr,null),e(ar,QRo),e(ar,Xe),g(L3,Xe,null),e(Xe,HRo),e(Xe,qse),e(qse,URo),e(Xe,JRo),e(Xe,Ja),e(Ja,YRo),e(Ja,Gse),e(Gse,KRo),e(Ja,ZRo),e(Ja,Ose),e(Ose,eSo),e(Ja,oSo),e(Ja,Xse),e(Xse,rSo),e(Ja,tSo),e(Xe,aSo),e(Xe,be),e(be,x2),e(x2,Vse),e(Vse,nSo),e(x2,sSo),e(x2,Tj),e(Tj,lSo),e(x2,iSo),e(be,dSo),e(be,k2),e(k2,zse),e(zse,cSo),e(k2,fSo),e(k2,Fj),e(Fj,mSo),e(k2,gSo),e(be,hSo),e(be,Ps),e(Ps,Wse),e(Wse,pSo),e(Ps,_So),e(Ps,Cj),e(Cj,uSo),e(Ps,bSo),e(Ps,Mj),e(Mj,vSo),e(Ps,TSo),e(be,FSo),e(be,R2),e(R2,Qse),e(Qse,CSo),e(R2,MSo),e(R2,Ej),e(Ej,ESo),e(R2,ySo),e(be,wSo),e(be,la),e(la,Hse),e(Hse,ASo),e(la,LSo),e(la,yj),e(yj,BSo),e(la,xSo),e(la,wj),e(wj,kSo),e(la,RSo),e(la,Aj),e(Aj,SSo),e(la,PSo),e(be,$So),e(be,S2),e(S2,Use),e(Use,ISo),e(S2,DSo),e(S2,Lj),e(Lj,jSo),e(S2,NSo),e(be,qSo),e(be,P2),e(P2,Jse),e(Jse,GSo),e(P2,OSo),e(P2,Bj),e(Bj,XSo),e(P2,VSo),e(be,zSo),e(be,$2),e($2,Yse),e(Yse,WSo),e($2,QSo),e($2,xj),e(xj,HSo),e($2,USo),e(be,JSo),e(be,I2),e(I2,Kse),e(Kse,YSo),e(I2,KSo),e(I2,kj),e(kj,ZSo),e(I2,ePo),e(Xe,oPo),e(Xe,D2),e(D2,rPo),e(D2,Zse),e(Zse,tPo),e(D2,aPo),e(D2,ele),e(ele,nPo),e(Xe,sPo),e(Xe,ole),e(ole,lPo),e(Xe,iPo),g(B3,Xe,null),b(c,eBe,u),b(c,Ed,u),e(Ed,j2),e(j2,rle),g(x3,rle,null),e(Ed,dPo),e(Ed,tle),e(tle,cPo),b(c,oBe,u),b(c,nr,u),g(k3,nr,null),e(nr,fPo),e(nr,yd),e(yd,mPo),e(yd,ale),e(ale,gPo),e(yd,hPo),e(yd,nle),e(nle,pPo),e(yd,_Po),e(nr,uPo),e(nr,R3),e(R3,bPo),e(R3,sle),e(sle,vPo),e(R3,TPo),e(nr,FPo),e(nr,Kr),g(S3,Kr,null),e(Kr,CPo),e(Kr,lle),e(lle,MPo),e(Kr,EPo),e(Kr,wd),e(wd,yPo),e(wd,ile),e(ile,wPo),e(wd,APo),e(wd,dle),e(dle,LPo),e(wd,BPo),e(Kr,xPo),e(Kr,cle),e(cle,kPo),e(Kr,RPo),g(P3,Kr,null),e(nr,SPo),e(nr,Ve),g($3,Ve,null),e(Ve,PPo),e(Ve,fle),e(fle,$Po),e(Ve,IPo),e(Ve,Ya),e(Ya,DPo),e(Ya,mle),e(mle,jPo),e(Ya,NPo),e(Ya,gle),e(gle,qPo),e(Ya,GPo),e(Ya,hle),e(hle,OPo),e(Ya,XPo),e(Ve,VPo),e(Ve,ple),e(ple,N2),e(N2,_le),e(_le,zPo),e(N2,WPo),e(N2,Rj),e(Rj,QPo),e(N2,HPo),e(Ve,UPo),e(Ve,q2),e(q2,JPo),e(q2,ule),e(ule,YPo),e(q2,KPo),e(q2,ble),e(ble,ZPo),e(Ve,e$o),e(Ve,vle),e(vle,o$o),e(Ve,r$o),g(I3,Ve,null),b(c,rBe,u),b(c,Ad,u),e(Ad,G2),e(G2,Tle),g(D3,Tle,null),e(Ad,t$o),e(Ad,Fle),e(Fle,a$o),b(c,tBe,u),b(c,sr,u),g(j3,sr,null),e(sr,n$o),e(sr,Ld),e(Ld,s$o),e(Ld,Cle),e(Cle,l$o),e(Ld,i$o),e(Ld,Mle),e(Mle,d$o),e(Ld,c$o),e(sr,f$o),e(sr,N3),e(N3,m$o),e(N3,Ele),e(Ele,g$o),e(N3,h$o),e(sr,p$o),e(sr,Zr),g(q3,Zr,null),e(Zr,_$o),e(Zr,yle),e(yle,u$o),e(Zr,b$o),e(Zr,Bd),e(Bd,v$o),e(Bd,wle),e(wle,T$o),e(Bd,F$o),e(Bd,Ale),e(Ale,C$o),e(Bd,M$o),e(Zr,E$o),e(Zr,Lle),e(Lle,y$o),e(Zr,w$o),g(G3,Zr,null),e(sr,A$o),e(sr,ze),g(O3,ze,null),e(ze,L$o),e(ze,Ble),e(Ble,B$o),e(ze,x$o),e(ze,Ka),e(Ka,k$o),e(Ka,xle),e(xle,R$o),e(Ka,S$o),e(Ka,kle),e(kle,P$o),e(Ka,$$o),e(Ka,Rle),e(Rle,I$o),e(Ka,D$o),e(ze,j$o),e(ze,Ae),e(Ae,O2),e(O2,Sle),e(Sle,N$o),e(O2,q$o),e(O2,Sj),e(Sj,G$o),e(O2,O$o),e(Ae,X$o),e(Ae,X2),e(X2,Ple),e(Ple,V$o),e(X2,z$o),e(X2,Pj),e(Pj,W$o),e(X2,Q$o),e(Ae,H$o),e(Ae,V2),e(V2,$le),e($le,U$o),e(V2,J$o),e(V2,$j),e($j,Y$o),e(V2,K$o),e(Ae,Z$o),e(Ae,z2),e(z2,Ile),e(Ile,eIo),e(z2,oIo),e(z2,Ij),e(Ij,rIo),e(z2,tIo),e(Ae,aIo),e(Ae,W2),e(W2,Dle),e(Dle,nIo),e(W2,sIo),e(W2,Dj),e(Dj,lIo),e(W2,iIo),e(Ae,dIo),e(Ae,Q2),e(Q2,jle),e(jle,cIo),e(Q2,fIo),e(Q2,jj),e(jj,mIo),e(Q2,gIo),e(Ae,hIo),e(Ae,H2),e(H2,Nle),e(Nle,pIo),e(H2,_Io),e(H2,Nj),e(Nj,uIo),e(H2,bIo),e(Ae,vIo),e(Ae,U2),e(U2,qle),e(qle,TIo),e(U2,FIo),e(U2,qj),e(qj,CIo),e(U2,MIo),e(ze,EIo),e(ze,J2),e(J2,yIo),e(J2,Gle),e(Gle,wIo),e(J2,AIo),e(J2,Ole),e(Ole,LIo),e(ze,BIo),e(ze,Xle),e(Xle,xIo),e(ze,kIo),g(X3,ze,null),b(c,aBe,u),b(c,xd,u),e(xd,Y2),e(Y2,Vle),g(V3,Vle,null),e(xd,RIo),e(xd,zle),e(zle,SIo),b(c,nBe,u),b(c,lr,u),g(z3,lr,null),e(lr,PIo),e(lr,kd),e(kd,$Io),e(kd,Wle),e(Wle,IIo),e(kd,DIo),e(kd,Qle),e(Qle,jIo),e(kd,NIo),e(lr,qIo),e(lr,W3),e(W3,GIo),e(W3,Hle),e(Hle,OIo),e(W3,XIo),e(lr,VIo),e(lr,et),g(Q3,et,null),e(et,zIo),e(et,Ule),e(Ule,WIo),e(et,QIo),e(et,Rd),e(Rd,HIo),e(Rd,Jle),e(Jle,UIo),e(Rd,JIo),e(Rd,Yle),e(Yle,YIo),e(Rd,KIo),e(et,ZIo),e(et,Kle),e(Kle,eDo),e(et,oDo),g(H3,et,null),e(lr,rDo),e(lr,We),g(U3,We,null),e(We,tDo),e(We,Zle),e(Zle,aDo),e(We,nDo),e(We,Za),e(Za,sDo),e(Za,eie),e(eie,lDo),e(Za,iDo),e(Za,oie),e(oie,dDo),e(Za,cDo),e(Za,rie),e(rie,fDo),e(Za,mDo),e(We,gDo),e(We,en),e(en,K2),e(K2,tie),e(tie,hDo),e(K2,pDo),e(K2,Gj),e(Gj,_Do),e(K2,uDo),e(en,bDo),e(en,Z2),e(Z2,aie),e(aie,vDo),e(Z2,TDo),e(Z2,Oj),e(Oj,FDo),e(Z2,CDo),e(en,MDo),e(en,ev),e(ev,nie),e(nie,EDo),e(ev,yDo),e(ev,Xj),e(Xj,wDo),e(ev,ADo),e(en,LDo),e(en,ov),e(ov,sie),e(sie,BDo),e(ov,xDo),e(ov,Vj),e(Vj,kDo),e(ov,RDo),e(We,SDo),e(We,rv),e(rv,PDo),e(rv,lie),e(lie,$Do),e(rv,IDo),e(rv,iie),e(iie,DDo),e(We,jDo),e(We,die),e(die,NDo),e(We,qDo),g(J3,We,null),b(c,sBe,u),b(c,Sd,u),e(Sd,tv),e(tv,cie),g(Y3,cie,null),e(Sd,GDo),e(Sd,fie),e(fie,ODo),b(c,lBe,u),b(c,ir,u),g(K3,ir,null),e(ir,XDo),e(ir,Pd),e(Pd,VDo),e(Pd,mie),e(mie,zDo),e(Pd,WDo),e(Pd,gie),e(gie,QDo),e(Pd,HDo),e(ir,UDo),e(ir,Z3),e(Z3,JDo),e(Z3,hie),e(hie,YDo),e(Z3,KDo),e(ir,ZDo),e(ir,ot),g(ey,ot,null),e(ot,ejo),e(ot,pie),e(pie,ojo),e(ot,rjo),e(ot,$d),e($d,tjo),e($d,_ie),e(_ie,ajo),e($d,njo),e($d,uie),e(uie,sjo),e($d,ljo),e(ot,ijo),e(ot,bie),e(bie,djo),e(ot,cjo),g(oy,ot,null),e(ir,fjo),e(ir,Qe),g(ry,Qe,null),e(Qe,mjo),e(Qe,vie),e(vie,gjo),e(Qe,hjo),e(Qe,on),e(on,pjo),e(on,Tie),e(Tie,_jo),e(on,ujo),e(on,Fie),e(Fie,bjo),e(on,vjo),e(on,Cie),e(Cie,Tjo),e(on,Fjo),e(Qe,Cjo),e(Qe,Le),e(Le,av),e(av,Mie),e(Mie,Mjo),e(av,Ejo),e(av,zj),e(zj,yjo),e(av,wjo),e(Le,Ajo),e(Le,nv),e(nv,Eie),e(Eie,Ljo),e(nv,Bjo),e(nv,Wj),e(Wj,xjo),e(nv,kjo),e(Le,Rjo),e(Le,sv),e(sv,yie),e(yie,Sjo),e(sv,Pjo),e(sv,Qj),e(Qj,$jo),e(sv,Ijo),e(Le,Djo),e(Le,lv),e(lv,wie),e(wie,jjo),e(lv,Njo),e(lv,Hj),e(Hj,qjo),e(lv,Gjo),e(Le,Ojo),e(Le,iv),e(iv,Aie),e(Aie,Xjo),e(iv,Vjo),e(iv,Uj),e(Uj,zjo),e(iv,Wjo),e(Le,Qjo),e(Le,dv),e(dv,Lie),e(Lie,Hjo),e(dv,Ujo),e(dv,Jj),e(Jj,Jjo),e(dv,Yjo),e(Le,Kjo),e(Le,cv),e(cv,Bie),e(Bie,Zjo),e(cv,eNo),e(cv,Yj),e(Yj,oNo),e(cv,rNo),e(Le,tNo),e(Le,fv),e(fv,xie),e(xie,aNo),e(fv,nNo),e(fv,Kj),e(Kj,sNo),e(fv,lNo),e(Qe,iNo),e(Qe,mv),e(mv,dNo),e(mv,kie),e(kie,cNo),e(mv,fNo),e(mv,Rie),e(Rie,mNo),e(Qe,gNo),e(Qe,Sie),e(Sie,hNo),e(Qe,pNo),g(ty,Qe,null),b(c,iBe,u),b(c,Id,u),e(Id,gv),e(gv,Pie),g(ay,Pie,null),e(Id,_No),e(Id,$ie),e($ie,uNo),b(c,dBe,u),b(c,dr,u),g(ny,dr,null),e(dr,bNo),e(dr,Dd),e(Dd,vNo),e(Dd,Iie),e(Iie,TNo),e(Dd,FNo),e(Dd,Die),e(Die,CNo),e(Dd,MNo),e(dr,ENo),e(dr,sy),e(sy,yNo),e(sy,jie),e(jie,wNo),e(sy,ANo),e(dr,LNo),e(dr,rt),g(ly,rt,null),e(rt,BNo),e(rt,Nie),e(Nie,xNo),e(rt,kNo),e(rt,jd),e(jd,RNo),e(jd,qie),e(qie,SNo),e(jd,PNo),e(jd,Gie),e(Gie,$No),e(jd,INo),e(rt,DNo),e(rt,Oie),e(Oie,jNo),e(rt,NNo),g(iy,rt,null),e(dr,qNo),e(dr,He),g(dy,He,null),e(He,GNo),e(He,Xie),e(Xie,ONo),e(He,XNo),e(He,rn),e(rn,VNo),e(rn,Vie),e(Vie,zNo),e(rn,WNo),e(rn,zie),e(zie,QNo),e(rn,HNo),e(rn,Wie),e(Wie,UNo),e(rn,JNo),e(He,YNo),e(He,cy),e(cy,hv),e(hv,Qie),e(Qie,KNo),e(hv,ZNo),e(hv,Zj),e(Zj,eqo),e(hv,oqo),e(cy,rqo),e(cy,pv),e(pv,Hie),e(Hie,tqo),e(pv,aqo),e(pv,eN),e(eN,nqo),e(pv,sqo),e(He,lqo),e(He,_v),e(_v,iqo),e(_v,Uie),e(Uie,dqo),e(_v,cqo),e(_v,Jie),e(Jie,fqo),e(He,mqo),e(He,Yie),e(Yie,gqo),e(He,hqo),g(fy,He,null),b(c,cBe,u),b(c,Nd,u),e(Nd,uv),e(uv,Kie),g(my,Kie,null),e(Nd,pqo),e(Nd,Zie),e(Zie,_qo),b(c,fBe,u),b(c,cr,u),g(gy,cr,null),e(cr,uqo),e(cr,qd),e(qd,bqo),e(qd,ede),e(ede,vqo),e(qd,Tqo),e(qd,ode),e(ode,Fqo),e(qd,Cqo),e(cr,Mqo),e(cr,hy),e(hy,Eqo),e(hy,rde),e(rde,yqo),e(hy,wqo),e(cr,Aqo),e(cr,tt),g(py,tt,null),e(tt,Lqo),e(tt,tde),e(tde,Bqo),e(tt,xqo),e(tt,Gd),e(Gd,kqo),e(Gd,ade),e(ade,Rqo),e(Gd,Sqo),e(Gd,nde),e(nde,Pqo),e(Gd,$qo),e(tt,Iqo),e(tt,sde),e(sde,Dqo),e(tt,jqo),g(_y,tt,null),e(cr,Nqo),e(cr,Ue),g(uy,Ue,null),e(Ue,qqo),e(Ue,lde),e(lde,Gqo),e(Ue,Oqo),e(Ue,tn),e(tn,Xqo),e(tn,ide),e(ide,Vqo),e(tn,zqo),e(tn,dde),e(dde,Wqo),e(tn,Qqo),e(tn,cde),e(cde,Hqo),e(tn,Uqo),e(Ue,Jqo),e(Ue,an),e(an,bv),e(bv,fde),e(fde,Yqo),e(bv,Kqo),e(bv,oN),e(oN,Zqo),e(bv,eGo),e(an,oGo),e(an,vv),e(vv,mde),e(mde,rGo),e(vv,tGo),e(vv,rN),e(rN,aGo),e(vv,nGo),e(an,sGo),e(an,Tv),e(Tv,gde),e(gde,lGo),e(Tv,iGo),e(Tv,tN),e(tN,dGo),e(Tv,cGo),e(an,fGo),e(an,Fv),e(Fv,hde),e(hde,mGo),e(Fv,gGo),e(Fv,aN),e(aN,hGo),e(Fv,pGo),e(Ue,_Go),e(Ue,Cv),e(Cv,uGo),e(Cv,pde),e(pde,bGo),e(Cv,vGo),e(Cv,_de),e(_de,TGo),e(Ue,FGo),e(Ue,ude),e(ude,CGo),e(Ue,MGo),g(by,Ue,null),b(c,mBe,u),b(c,Od,u),e(Od,Mv),e(Mv,bde),g(vy,bde,null),e(Od,EGo),e(Od,vde),e(vde,yGo),b(c,gBe,u),b(c,fr,u),g(Ty,fr,null),e(fr,wGo),e(fr,Xd),e(Xd,AGo),e(Xd,Tde),e(Tde,LGo),e(Xd,BGo),e(Xd,Fde),e(Fde,xGo),e(Xd,kGo),e(fr,RGo),e(fr,Fy),e(Fy,SGo),e(Fy,Cde),e(Cde,PGo),e(Fy,$Go),e(fr,IGo),e(fr,at),g(Cy,at,null),e(at,DGo),e(at,Mde),e(Mde,jGo),e(at,NGo),e(at,Vd),e(Vd,qGo),e(Vd,Ede),e(Ede,GGo),e(Vd,OGo),e(Vd,yde),e(yde,XGo),e(Vd,VGo),e(at,zGo),e(at,wde),e(wde,WGo),e(at,QGo),g(My,at,null),e(fr,HGo),e(fr,Je),g(Ey,Je,null),e(Je,UGo),e(Je,Ade),e(Ade,JGo),e(Je,YGo),e(Je,nn),e(nn,KGo),e(nn,Lde),e(Lde,ZGo),e(nn,eOo),e(nn,Bde),e(Bde,oOo),e(nn,rOo),e(nn,xde),e(xde,tOo),e(nn,aOo),e(Je,nOo),e(Je,zd),e(zd,Ev),e(Ev,kde),e(kde,sOo),e(Ev,lOo),e(Ev,nN),e(nN,iOo),e(Ev,dOo),e(zd,cOo),e(zd,yv),e(yv,Rde),e(Rde,fOo),e(yv,mOo),e(yv,sN),e(sN,gOo),e(yv,hOo),e(zd,pOo),e(zd,wv),e(wv,Sde),e(Sde,_Oo),e(wv,uOo),e(wv,lN),e(lN,bOo),e(wv,vOo),e(Je,TOo),e(Je,Av),e(Av,FOo),e(Av,Pde),e(Pde,COo),e(Av,MOo),e(Av,$de),e($de,EOo),e(Je,yOo),e(Je,Ide),e(Ide,wOo),e(Je,AOo),g(yy,Je,null),b(c,hBe,u),b(c,Wd,u),e(Wd,Lv),e(Lv,Dde),g(wy,Dde,null),e(Wd,LOo),e(Wd,jde),e(jde,BOo),b(c,pBe,u),b(c,mr,u),g(Ay,mr,null),e(mr,xOo),e(mr,Qd),e(Qd,kOo),e(Qd,Nde),e(Nde,ROo),e(Qd,SOo),e(Qd,qde),e(qde,POo),e(Qd,$Oo),e(mr,IOo),e(mr,Ly),e(Ly,DOo),e(Ly,Gde),e(Gde,jOo),e(Ly,NOo),e(mr,qOo),e(mr,nt),g(By,nt,null),e(nt,GOo),e(nt,Ode),e(Ode,OOo),e(nt,XOo),e(nt,Hd),e(Hd,VOo),e(Hd,Xde),e(Xde,zOo),e(Hd,WOo),e(Hd,Vde),e(Vde,QOo),e(Hd,HOo),e(nt,UOo),e(nt,zde),e(zde,JOo),e(nt,YOo),g(xy,nt,null),e(mr,KOo),e(mr,Ye),g(ky,Ye,null),e(Ye,ZOo),e(Ye,Wde),e(Wde,eXo),e(Ye,oXo),e(Ye,sn),e(sn,rXo),e(sn,Qde),e(Qde,tXo),e(sn,aXo),e(sn,Hde),e(Hde,nXo),e(sn,sXo),e(sn,Ude),e(Ude,lXo),e(sn,iXo),e(Ye,dXo),e(Ye,Jde),e(Jde,Bv),e(Bv,Yde),e(Yde,cXo),e(Bv,fXo),e(Bv,iN),e(iN,mXo),e(Bv,gXo),e(Ye,hXo),e(Ye,xv),e(xv,pXo),e(xv,Kde),e(Kde,_Xo),e(xv,uXo),e(xv,Zde),e(Zde,bXo),e(Ye,vXo),e(Ye,ece),e(ece,TXo),e(Ye,FXo),g(Ry,Ye,null),b(c,_Be,u),b(c,Ud,u),e(Ud,kv),e(kv,oce),g(Sy,oce,null),e(Ud,CXo),e(Ud,rce),e(rce,MXo),b(c,uBe,u),b(c,gr,u),g(Py,gr,null),e(gr,EXo),e(gr,Jd),e(Jd,yXo),e(Jd,tce),e(tce,wXo),e(Jd,AXo),e(Jd,ace),e(ace,LXo),e(Jd,BXo),e(gr,xXo),e(gr,$y),e($y,kXo),e($y,nce),e(nce,RXo),e($y,SXo),e(gr,PXo),e(gr,st),g(Iy,st,null),e(st,$Xo),e(st,sce),e(sce,IXo),e(st,DXo),e(st,Yd),e(Yd,jXo),e(Yd,lce),e(lce,NXo),e(Yd,qXo),e(Yd,ice),e(ice,GXo),e(Yd,OXo),e(st,XXo),e(st,dce),e(dce,VXo),e(st,zXo),g(Dy,st,null),e(gr,WXo),e(gr,Ke),g(jy,Ke,null),e(Ke,QXo),e(Ke,cce),e(cce,HXo),e(Ke,UXo),e(Ke,ln),e(ln,JXo),e(ln,fce),e(fce,YXo),e(ln,KXo),e(ln,mce),e(mce,ZXo),e(ln,eVo),e(ln,gce),e(gce,oVo),e(ln,rVo),e(Ke,tVo),e(Ke,hce),e(hce,Rv),e(Rv,pce),e(pce,aVo),e(Rv,nVo),e(Rv,dN),e(dN,sVo),e(Rv,lVo),e(Ke,iVo),e(Ke,Sv),e(Sv,dVo),e(Sv,_ce),e(_ce,cVo),e(Sv,fVo),e(Sv,uce),e(uce,mVo),e(Ke,gVo),e(Ke,bce),e(bce,hVo),e(Ke,pVo),g(Ny,Ke,null),b(c,bBe,u),b(c,Kd,u),e(Kd,Pv),e(Pv,vce),g(qy,vce,null),e(Kd,_Vo),e(Kd,Tce),e(Tce,uVo),b(c,vBe,u),b(c,hr,u),g(Gy,hr,null),e(hr,bVo),e(hr,Zd),e(Zd,vVo),e(Zd,Fce),e(Fce,TVo),e(Zd,FVo),e(Zd,Cce),e(Cce,CVo),e(Zd,MVo),e(hr,EVo),e(hr,Oy),e(Oy,yVo),e(Oy,Mce),e(Mce,wVo),e(Oy,AVo),e(hr,LVo),e(hr,lt),g(Xy,lt,null),e(lt,BVo),e(lt,Ece),e(Ece,xVo),e(lt,kVo),e(lt,ec),e(ec,RVo),e(ec,yce),e(yce,SVo),e(ec,PVo),e(ec,wce),e(wce,$Vo),e(ec,IVo),e(lt,DVo),e(lt,Ace),e(Ace,jVo),e(lt,NVo),g(Vy,lt,null),e(hr,qVo),e(hr,Ze),g(zy,Ze,null),e(Ze,GVo),e(Ze,Lce),e(Lce,OVo),e(Ze,XVo),e(Ze,dn),e(dn,VVo),e(dn,Bce),e(Bce,zVo),e(dn,WVo),e(dn,xce),e(xce,QVo),e(dn,HVo),e(dn,kce),e(kce,UVo),e(dn,JVo),e(Ze,YVo),e(Ze,Wy),e(Wy,$v),e($v,Rce),e(Rce,KVo),e($v,ZVo),e($v,cN),e(cN,ezo),e($v,ozo),e(Wy,rzo),e(Wy,Iv),e(Iv,Sce),e(Sce,tzo),e(Iv,azo),e(Iv,fN),e(fN,nzo),e(Iv,szo),e(Ze,lzo),e(Ze,Dv),e(Dv,izo),e(Dv,Pce),e(Pce,dzo),e(Dv,czo),e(Dv,$ce),e($ce,fzo),e(Ze,mzo),e(Ze,Ice),e(Ice,gzo),e(Ze,hzo),g(Qy,Ze,null),b(c,TBe,u),b(c,oc,u),e(oc,jv),e(jv,Dce),g(Hy,Dce,null),e(oc,pzo),e(oc,jce),e(jce,_zo),b(c,FBe,u),b(c,pr,u),g(Uy,pr,null),e(pr,uzo),e(pr,rc),e(rc,bzo),e(rc,Nce),e(Nce,vzo),e(rc,Tzo),e(rc,qce),e(qce,Fzo),e(rc,Czo),e(pr,Mzo),e(pr,Jy),e(Jy,Ezo),e(Jy,Gce),e(Gce,yzo),e(Jy,wzo),e(pr,Azo),e(pr,it),g(Yy,it,null),e(it,Lzo),e(it,Oce),e(Oce,Bzo),e(it,xzo),e(it,tc),e(tc,kzo),e(tc,Xce),e(Xce,Rzo),e(tc,Szo),e(tc,Vce),e(Vce,Pzo),e(tc,$zo),e(it,Izo),e(it,zce),e(zce,Dzo),e(it,jzo),g(Ky,it,null),e(pr,Nzo),e(pr,go),g(Zy,go,null),e(go,qzo),e(go,Wce),e(Wce,Gzo),e(go,Ozo),e(go,cn),e(cn,Xzo),e(cn,Qce),e(Qce,Vzo),e(cn,zzo),e(cn,Hce),e(Hce,Wzo),e(cn,Qzo),e(cn,Uce),e(Uce,Hzo),e(cn,Uzo),e(go,Jzo),e(go,B),e(B,Nv),e(Nv,Jce),e(Jce,Yzo),e(Nv,Kzo),e(Nv,mN),e(mN,Zzo),e(Nv,eWo),e(B,oWo),e(B,qv),e(qv,Yce),e(Yce,rWo),e(qv,tWo),e(qv,gN),e(gN,aWo),e(qv,nWo),e(B,sWo),e(B,Gv),e(Gv,Kce),e(Kce,lWo),e(Gv,iWo),e(Gv,hN),e(hN,dWo),e(Gv,cWo),e(B,fWo),e(B,Ov),e(Ov,Zce),e(Zce,mWo),e(Ov,gWo),e(Ov,pN),e(pN,hWo),e(Ov,pWo),e(B,_Wo),e(B,Xv),e(Xv,efe),e(efe,uWo),e(Xv,bWo),e(Xv,_N),e(_N,vWo),e(Xv,TWo),e(B,FWo),e(B,Vv),e(Vv,ofe),e(ofe,CWo),e(Vv,MWo),e(Vv,uN),e(uN,EWo),e(Vv,yWo),e(B,wWo),e(B,zv),e(zv,rfe),e(rfe,AWo),e(zv,LWo),e(zv,bN),e(bN,BWo),e(zv,xWo),e(B,kWo),e(B,Wv),e(Wv,tfe),e(tfe,RWo),e(Wv,SWo),e(Wv,vN),e(vN,PWo),e(Wv,$Wo),e(B,IWo),e(B,Qv),e(Qv,afe),e(afe,DWo),e(Qv,jWo),e(Qv,TN),e(TN,NWo),e(Qv,qWo),e(B,GWo),e(B,Hv),e(Hv,nfe),e(nfe,OWo),e(Hv,XWo),e(Hv,FN),e(FN,VWo),e(Hv,zWo),e(B,WWo),e(B,Uv),e(Uv,sfe),e(sfe,QWo),e(Uv,HWo),e(Uv,CN),e(CN,UWo),e(Uv,JWo),e(B,YWo),e(B,Jv),e(Jv,lfe),e(lfe,KWo),e(Jv,ZWo),e(Jv,MN),e(MN,eQo),e(Jv,oQo),e(B,rQo),e(B,Yv),e(Yv,ife),e(ife,tQo),e(Yv,aQo),e(Yv,EN),e(EN,nQo),e(Yv,sQo),e(B,lQo),e(B,Kv),e(Kv,dfe),e(dfe,iQo),e(Kv,dQo),e(Kv,yN),e(yN,cQo),e(Kv,fQo),e(B,mQo),e(B,Zv),e(Zv,cfe),e(cfe,gQo),e(Zv,hQo),e(Zv,wN),e(wN,pQo),e(Zv,_Qo),e(B,uQo),e(B,eT),e(eT,ffe),e(ffe,bQo),e(eT,vQo),e(eT,AN),e(AN,TQo),e(eT,FQo),e(B,CQo),e(B,$s),e($s,mfe),e(mfe,MQo),e($s,EQo),e($s,LN),e(LN,yQo),e($s,wQo),e($s,BN),e(BN,AQo),e($s,LQo),e(B,BQo),e(B,oT),e(oT,gfe),e(gfe,xQo),e(oT,kQo),e(oT,xN),e(xN,RQo),e(oT,SQo),e(B,PQo),e(B,rT),e(rT,hfe),e(hfe,$Qo),e(rT,IQo),e(rT,kN),e(kN,DQo),e(rT,jQo),e(B,NQo),e(B,tT),e(tT,pfe),e(pfe,qQo),e(tT,GQo),e(tT,RN),e(RN,OQo),e(tT,XQo),e(B,VQo),e(B,aT),e(aT,_fe),e(_fe,zQo),e(aT,WQo),e(aT,SN),e(SN,QQo),e(aT,HQo),e(B,UQo),e(B,nT),e(nT,ufe),e(ufe,JQo),e(nT,YQo),e(nT,PN),e(PN,KQo),e(nT,ZQo),e(B,eHo),e(B,sT),e(sT,bfe),e(bfe,oHo),e(sT,rHo),e(sT,$N),e($N,tHo),e(sT,aHo),e(B,nHo),e(B,lT),e(lT,vfe),e(vfe,sHo),e(lT,lHo),e(lT,IN),e(IN,iHo),e(lT,dHo),e(B,cHo),e(B,iT),e(iT,Tfe),e(Tfe,fHo),e(iT,mHo),e(iT,DN),e(DN,gHo),e(iT,hHo),e(B,pHo),e(B,dT),e(dT,Ffe),e(Ffe,_Ho),e(dT,uHo),e(dT,jN),e(jN,bHo),e(dT,vHo),e(B,THo),e(B,cT),e(cT,Cfe),e(Cfe,FHo),e(cT,CHo),e(cT,NN),e(NN,MHo),e(cT,EHo),e(B,yHo),e(B,fT),e(fT,Mfe),e(Mfe,wHo),e(fT,AHo),e(fT,qN),e(qN,LHo),e(fT,BHo),e(B,xHo),e(B,mT),e(mT,Efe),e(Efe,kHo),e(mT,RHo),e(mT,GN),e(GN,SHo),e(mT,PHo),e(B,$Ho),e(B,gT),e(gT,yfe),e(yfe,IHo),e(gT,DHo),e(gT,ON),e(ON,jHo),e(gT,NHo),e(B,qHo),e(B,hT),e(hT,wfe),e(wfe,GHo),e(hT,OHo),e(hT,XN),e(XN,XHo),e(hT,VHo),e(B,zHo),e(B,pT),e(pT,Afe),e(Afe,WHo),e(pT,QHo),e(pT,VN),e(VN,HHo),e(pT,UHo),e(B,JHo),e(B,_T),e(_T,Lfe),e(Lfe,YHo),e(_T,KHo),e(_T,zN),e(zN,ZHo),e(_T,eUo),e(B,oUo),e(B,uT),e(uT,Bfe),e(Bfe,rUo),e(uT,tUo),e(uT,WN),e(WN,aUo),e(uT,nUo),e(B,sUo),e(B,bT),e(bT,xfe),e(xfe,lUo),e(bT,iUo),e(bT,QN),e(QN,dUo),e(bT,cUo),e(B,fUo),e(B,vT),e(vT,kfe),e(kfe,mUo),e(vT,gUo),e(vT,HN),e(HN,hUo),e(vT,pUo),e(B,_Uo),e(B,TT),e(TT,Rfe),e(Rfe,uUo),e(TT,bUo),e(TT,UN),e(UN,vUo),e(TT,TUo),e(B,FUo),e(B,FT),e(FT,Sfe),e(Sfe,CUo),e(FT,MUo),e(FT,JN),e(JN,EUo),e(FT,yUo),e(B,wUo),e(B,CT),e(CT,Pfe),e(Pfe,AUo),e(CT,LUo),e(CT,YN),e(YN,BUo),e(CT,xUo),e(B,kUo),e(B,MT),e(MT,$fe),e($fe,RUo),e(MT,SUo),e(MT,KN),e(KN,PUo),e(MT,$Uo),e(B,IUo),e(B,ET),e(ET,Ife),e(Ife,DUo),e(ET,jUo),e(ET,ZN),e(ZN,NUo),e(ET,qUo),e(B,GUo),e(B,yT),e(yT,Dfe),e(Dfe,OUo),e(yT,XUo),e(yT,eq),e(eq,VUo),e(yT,zUo),e(go,WUo),e(go,jfe),e(jfe,QUo),e(go,HUo),g(ew,go,null),b(c,CBe,u),b(c,ac,u),e(ac,wT),e(wT,Nfe),g(ow,Nfe,null),e(ac,UUo),e(ac,qfe),e(qfe,JUo),b(c,MBe,u),b(c,_r,u),g(rw,_r,null),e(_r,YUo),e(_r,nc),e(nc,KUo),e(nc,Gfe),e(Gfe,ZUo),e(nc,eJo),e(nc,Ofe),e(Ofe,oJo),e(nc,rJo),e(_r,tJo),e(_r,tw),e(tw,aJo),e(tw,Xfe),e(Xfe,nJo),e(tw,sJo),e(_r,lJo),e(_r,dt),g(aw,dt,null),e(dt,iJo),e(dt,Vfe),e(Vfe,dJo),e(dt,cJo),e(dt,sc),e(sc,fJo),e(sc,zfe),e(zfe,mJo),e(sc,gJo),e(sc,Wfe),e(Wfe,hJo),e(sc,pJo),e(dt,_Jo),e(dt,Qfe),e(Qfe,uJo),e(dt,bJo),g(nw,dt,null),e(_r,vJo),e(_r,ho),g(sw,ho,null),e(ho,TJo),e(ho,Hfe),e(Hfe,FJo),e(ho,CJo),e(ho,fn),e(fn,MJo),e(fn,Ufe),e(Ufe,EJo),e(fn,yJo),e(fn,Jfe),e(Jfe,wJo),e(fn,AJo),e(fn,Yfe),e(Yfe,LJo),e(fn,BJo),e(ho,xJo),e(ho,H),e(H,AT),e(AT,Kfe),e(Kfe,kJo),e(AT,RJo),e(AT,oq),e(oq,SJo),e(AT,PJo),e(H,$Jo),e(H,LT),e(LT,Zfe),e(Zfe,IJo),e(LT,DJo),e(LT,rq),e(rq,jJo),e(LT,NJo),e(H,qJo),e(H,BT),e(BT,eme),e(eme,GJo),e(BT,OJo),e(BT,tq),e(tq,XJo),e(BT,VJo),e(H,zJo),e(H,xT),e(xT,ome),e(ome,WJo),e(xT,QJo),e(xT,aq),e(aq,HJo),e(xT,UJo),e(H,JJo),e(H,kT),e(kT,rme),e(rme,YJo),e(kT,KJo),e(kT,nq),e(nq,ZJo),e(kT,eYo),e(H,oYo),e(H,RT),e(RT,tme),e(tme,rYo),e(RT,tYo),e(RT,sq),e(sq,aYo),e(RT,nYo),e(H,sYo),e(H,ST),e(ST,ame),e(ame,lYo),e(ST,iYo),e(ST,lq),e(lq,dYo),e(ST,cYo),e(H,fYo),e(H,PT),e(PT,nme),e(nme,mYo),e(PT,gYo),e(PT,iq),e(iq,hYo),e(PT,pYo),e(H,_Yo),e(H,$T),e($T,sme),e(sme,uYo),e($T,bYo),e($T,dq),e(dq,vYo),e($T,TYo),e(H,FYo),e(H,IT),e(IT,lme),e(lme,CYo),e(IT,MYo),e(IT,cq),e(cq,EYo),e(IT,yYo),e(H,wYo),e(H,DT),e(DT,ime),e(ime,AYo),e(DT,LYo),e(DT,fq),e(fq,BYo),e(DT,xYo),e(H,kYo),e(H,jT),e(jT,dme),e(dme,RYo),e(jT,SYo),e(jT,mq),e(mq,PYo),e(jT,$Yo),e(H,IYo),e(H,NT),e(NT,cme),e(cme,DYo),e(NT,jYo),e(NT,gq),e(gq,NYo),e(NT,qYo),e(H,GYo),e(H,qT),e(qT,fme),e(fme,OYo),e(qT,XYo),e(qT,hq),e(hq,VYo),e(qT,zYo),e(H,WYo),e(H,GT),e(GT,mme),e(mme,QYo),e(GT,HYo),e(GT,pq),e(pq,UYo),e(GT,JYo),e(H,YYo),e(H,OT),e(OT,gme),e(gme,KYo),e(OT,ZYo),e(OT,_q),e(_q,eKo),e(OT,oKo),e(H,rKo),e(H,XT),e(XT,hme),e(hme,tKo),e(XT,aKo),e(XT,uq),e(uq,nKo),e(XT,sKo),e(H,lKo),e(H,VT),e(VT,pme),e(pme,iKo),e(VT,dKo),e(VT,bq),e(bq,cKo),e(VT,fKo),e(H,mKo),e(H,zT),e(zT,_me),e(_me,gKo),e(zT,hKo),e(zT,vq),e(vq,pKo),e(zT,_Ko),e(H,uKo),e(H,WT),e(WT,ume),e(ume,bKo),e(WT,vKo),e(WT,Tq),e(Tq,TKo),e(WT,FKo),e(H,CKo),e(H,QT),e(QT,bme),e(bme,MKo),e(QT,EKo),e(QT,Fq),e(Fq,yKo),e(QT,wKo),e(H,AKo),e(H,HT),e(HT,vme),e(vme,LKo),e(HT,BKo),e(HT,Cq),e(Cq,xKo),e(HT,kKo),e(ho,RKo),e(ho,Tme),e(Tme,SKo),e(ho,PKo),g(lw,ho,null),b(c,EBe,u),b(c,lc,u),e(lc,UT),e(UT,Fme),g(iw,Fme,null),e(lc,$Ko),e(lc,Cme),e(Cme,IKo),b(c,yBe,u),b(c,ur,u),g(dw,ur,null),e(ur,DKo),e(ur,ic),e(ic,jKo),e(ic,Mme),e(Mme,NKo),e(ic,qKo),e(ic,Eme),e(Eme,GKo),e(ic,OKo),e(ur,XKo),e(ur,cw),e(cw,VKo),e(cw,yme),e(yme,zKo),e(cw,WKo),e(ur,QKo),e(ur,ct),g(fw,ct,null),e(ct,HKo),e(ct,wme),e(wme,UKo),e(ct,JKo),e(ct,dc),e(dc,YKo),e(dc,Ame),e(Ame,KKo),e(dc,ZKo),e(dc,Lme),e(Lme,eZo),e(dc,oZo),e(ct,rZo),e(ct,Bme),e(Bme,tZo),e(ct,aZo),g(mw,ct,null),e(ur,nZo),e(ur,po),g(gw,po,null),e(po,sZo),e(po,xme),e(xme,lZo),e(po,iZo),e(po,mn),e(mn,dZo),e(mn,kme),e(kme,cZo),e(mn,fZo),e(mn,Rme),e(Rme,mZo),e(mn,gZo),e(mn,Sme),e(Sme,hZo),e(mn,pZo),e(po,_Zo),e(po,he),e(he,JT),e(JT,Pme),e(Pme,uZo),e(JT,bZo),e(JT,Mq),e(Mq,vZo),e(JT,TZo),e(he,FZo),e(he,YT),e(YT,$me),e($me,CZo),e(YT,MZo),e(YT,Eq),e(Eq,EZo),e(YT,yZo),e(he,wZo),e(he,KT),e(KT,Ime),e(Ime,AZo),e(KT,LZo),e(KT,yq),e(yq,BZo),e(KT,xZo),e(he,kZo),e(he,ZT),e(ZT,Dme),e(Dme,RZo),e(ZT,SZo),e(ZT,wq),e(wq,PZo),e(ZT,$Zo),e(he,IZo),e(he,e7),e(e7,jme),e(jme,DZo),e(e7,jZo),e(e7,Aq),e(Aq,NZo),e(e7,qZo),e(he,GZo),e(he,o7),e(o7,Nme),e(Nme,OZo),e(o7,XZo),e(o7,Lq),e(Lq,VZo),e(o7,zZo),e(he,WZo),e(he,r7),e(r7,qme),e(qme,QZo),e(r7,HZo),e(r7,Bq),e(Bq,UZo),e(r7,JZo),e(he,YZo),e(he,t7),e(t7,Gme),e(Gme,KZo),e(t7,ZZo),e(t7,xq),e(xq,eer),e(t7,oer),e(he,rer),e(he,a7),e(a7,Ome),e(Ome,ter),e(a7,aer),e(a7,kq),e(kq,ner),e(a7,ser),e(he,ler),e(he,n7),e(n7,Xme),e(Xme,ier),e(n7,der),e(n7,Rq),e(Rq,cer),e(n7,fer),e(po,mer),e(po,Vme),e(Vme,ger),e(po,her),g(hw,po,null),b(c,wBe,u),b(c,cc,u),e(cc,s7),e(s7,zme),g(pw,zme,null),e(cc,per),e(cc,Wme),e(Wme,_er),b(c,ABe,u),b(c,br,u),g(_w,br,null),e(br,uer),e(br,fc),e(fc,ber),e(fc,Qme),e(Qme,ver),e(fc,Ter),e(fc,Hme),e(Hme,Fer),e(fc,Cer),e(br,Mer),e(br,uw),e(uw,Eer),e(uw,Ume),e(Ume,yer),e(uw,wer),e(br,Aer),e(br,ft),g(bw,ft,null),e(ft,Ler),e(ft,Jme),e(Jme,Ber),e(ft,xer),e(ft,mc),e(mc,ker),e(mc,Yme),e(Yme,Rer),e(mc,Ser),e(mc,Kme),e(Kme,Per),e(mc,$er),e(ft,Ier),e(ft,Zme),e(Zme,Der),e(ft,jer),g(vw,ft,null),e(br,Ner),e(br,_o),g(Tw,_o,null),e(_o,qer),e(_o,ege),e(ege,Ger),e(_o,Oer),e(_o,gn),e(gn,Xer),e(gn,oge),e(oge,Ver),e(gn,zer),e(gn,rge),e(rge,Wer),e(gn,Qer),e(gn,tge),e(tge,Her),e(gn,Uer),e(_o,Jer),e(_o,Fw),e(Fw,l7),e(l7,age),e(age,Yer),e(l7,Ker),e(l7,Sq),e(Sq,Zer),e(l7,eor),e(Fw,oor),e(Fw,i7),e(i7,nge),e(nge,ror),e(i7,tor),e(i7,Pq),e(Pq,aor),e(i7,nor),e(_o,sor),e(_o,sge),e(sge,lor),e(_o,ior),g(Cw,_o,null),b(c,LBe,u),b(c,gc,u),e(gc,d7),e(d7,lge),g(Mw,lge,null),e(gc,dor),e(gc,ige),e(ige,cor),b(c,BBe,u),b(c,vr,u),g(Ew,vr,null),e(vr,mor),e(vr,hc),e(hc,gor),e(hc,dge),e(dge,hor),e(hc,por),e(hc,cge),e(cge,_or),e(hc,uor),e(vr,bor),e(vr,yw),e(yw,vor),e(yw,fge),e(fge,Tor),e(yw,For),e(vr,Cor),e(vr,mt),g(ww,mt,null),e(mt,Mor),e(mt,mge),e(mge,Eor),e(mt,yor),e(mt,pc),e(pc,wor),e(pc,gge),e(gge,Aor),e(pc,Lor),e(pc,hge),e(hge,Bor),e(pc,xor),e(mt,kor),e(mt,pge),e(pge,Ror),e(mt,Sor),g(Aw,mt,null),e(vr,Por),e(vr,uo),g(Lw,uo,null),e(uo,$or),e(uo,_ge),e(_ge,Ior),e(uo,Dor),e(uo,hn),e(hn,jor),e(hn,uge),e(uge,Nor),e(hn,qor),e(hn,bge),e(bge,Gor),e(hn,Oor),e(hn,vge),e(vge,Xor),e(hn,Vor),e(uo,zor),e(uo,Y),e(Y,c7),e(c7,Tge),e(Tge,Wor),e(c7,Qor),e(c7,$q),e($q,Hor),e(c7,Uor),e(Y,Jor),e(Y,f7),e(f7,Fge),e(Fge,Yor),e(f7,Kor),e(f7,Iq),e(Iq,Zor),e(f7,err),e(Y,orr),e(Y,m7),e(m7,Cge),e(Cge,rrr),e(m7,trr),e(m7,Dq),e(Dq,arr),e(m7,nrr),e(Y,srr),e(Y,g7),e(g7,Mge),e(Mge,lrr),e(g7,irr),e(g7,jq),e(jq,drr),e(g7,crr),e(Y,frr),e(Y,h7),e(h7,Ege),e(Ege,mrr),e(h7,grr),e(h7,Nq),e(Nq,hrr),e(h7,prr),e(Y,_rr),e(Y,p7),e(p7,yge),e(yge,urr),e(p7,brr),e(p7,qq),e(qq,vrr),e(p7,Trr),e(Y,Frr),e(Y,_7),e(_7,wge),e(wge,Crr),e(_7,Mrr),e(_7,Gq),e(Gq,Err),e(_7,yrr),e(Y,wrr),e(Y,u7),e(u7,Age),e(Age,Arr),e(u7,Lrr),e(u7,Oq),e(Oq,Brr),e(u7,xrr),e(Y,krr),e(Y,b7),e(b7,Lge),e(Lge,Rrr),e(b7,Srr),e(b7,Xq),e(Xq,Prr),e(b7,$rr),e(Y,Irr),e(Y,v7),e(v7,Bge),e(Bge,Drr),e(v7,jrr),e(v7,Vq),e(Vq,Nrr),e(v7,qrr),e(Y,Grr),e(Y,T7),e(T7,xge),e(xge,Orr),e(T7,Xrr),e(T7,zq),e(zq,Vrr),e(T7,zrr),e(Y,Wrr),e(Y,F7),e(F7,kge),e(kge,Qrr),e(F7,Hrr),e(F7,Wq),e(Wq,Urr),e(F7,Jrr),e(Y,Yrr),e(Y,C7),e(C7,Rge),e(Rge,Krr),e(C7,Zrr),e(C7,Qq),e(Qq,etr),e(C7,otr),e(Y,rtr),e(Y,M7),e(M7,Sge),e(Sge,ttr),e(M7,atr),e(M7,Hq),e(Hq,ntr),e(M7,str),e(Y,ltr),e(Y,E7),e(E7,Pge),e(Pge,itr),e(E7,dtr),e(E7,Uq),e(Uq,ctr),e(E7,ftr),e(Y,mtr),e(Y,y7),e(y7,$ge),e($ge,gtr),e(y7,htr),e(y7,Jq),e(Jq,ptr),e(y7,_tr),e(Y,utr),e(Y,w7),e(w7,Ige),e(Ige,btr),e(w7,vtr),e(w7,Yq),e(Yq,Ttr),e(w7,Ftr),e(Y,Ctr),e(Y,A7),e(A7,Dge),e(Dge,Mtr),e(A7,Etr),e(A7,Kq),e(Kq,ytr),e(A7,wtr),e(Y,Atr),e(Y,L7),e(L7,jge),e(jge,Ltr),e(L7,Btr),e(L7,Zq),e(Zq,xtr),e(L7,ktr),e(Y,Rtr),e(Y,B7),e(B7,Nge),e(Nge,Str),e(B7,Ptr),e(B7,eG),e(eG,$tr),e(B7,Itr),e(uo,Dtr),e(uo,qge),e(qge,jtr),e(uo,Ntr),g(Bw,uo,null),b(c,xBe,u),b(c,_c,u),e(_c,x7),e(x7,Gge),g(xw,Gge,null),e(_c,qtr),e(_c,Oge),e(Oge,Gtr),b(c,kBe,u),b(c,Tr,u),g(kw,Tr,null),e(Tr,Otr),e(Tr,uc),e(uc,Xtr),e(uc,Xge),e(Xge,Vtr),e(uc,ztr),e(uc,Vge),e(Vge,Wtr),e(uc,Qtr),e(Tr,Htr),e(Tr,Rw),e(Rw,Utr),e(Rw,zge),e(zge,Jtr),e(Rw,Ytr),e(Tr,Ktr),e(Tr,gt),g(Sw,gt,null),e(gt,Ztr),e(gt,Wge),e(Wge,ear),e(gt,oar),e(gt,bc),e(bc,rar),e(bc,Qge),e(Qge,tar),e(bc,aar),e(bc,Hge),e(Hge,nar),e(bc,sar),e(gt,lar),e(gt,Uge),e(Uge,iar),e(gt,dar),g(Pw,gt,null),e(Tr,car),e(Tr,bo),g($w,bo,null),e(bo,far),e(bo,Jge),e(Jge,mar),e(bo,gar),e(bo,pn),e(pn,har),e(pn,Yge),e(Yge,par),e(pn,_ar),e(pn,Kge),e(Kge,uar),e(pn,bar),e(pn,Zge),e(Zge,Tar),e(pn,Far),e(bo,Car),e(bo,pe),e(pe,k7),e(k7,ehe),e(ehe,Mar),e(k7,Ear),e(k7,oG),e(oG,yar),e(k7,war),e(pe,Aar),e(pe,R7),e(R7,ohe),e(ohe,Lar),e(R7,Bar),e(R7,rG),e(rG,xar),e(R7,kar),e(pe,Rar),e(pe,S7),e(S7,rhe),e(rhe,Sar),e(S7,Par),e(S7,tG),e(tG,$ar),e(S7,Iar),e(pe,Dar),e(pe,P7),e(P7,the),e(the,jar),e(P7,Nar),e(P7,aG),e(aG,qar),e(P7,Gar),e(pe,Oar),e(pe,$7),e($7,ahe),e(ahe,Xar),e($7,Var),e($7,nG),e(nG,zar),e($7,War),e(pe,Qar),e(pe,I7),e(I7,nhe),e(nhe,Har),e(I7,Uar),e(I7,sG),e(sG,Jar),e(I7,Yar),e(pe,Kar),e(pe,D7),e(D7,she),e(she,Zar),e(D7,enr),e(D7,lG),e(lG,onr),e(D7,rnr),e(pe,tnr),e(pe,j7),e(j7,lhe),e(lhe,anr),e(j7,nnr),e(j7,iG),e(iG,snr),e(j7,lnr),e(pe,inr),e(pe,N7),e(N7,ihe),e(ihe,dnr),e(N7,cnr),e(N7,dG),e(dG,fnr),e(N7,mnr),e(pe,gnr),e(pe,q7),e(q7,dhe),e(dhe,hnr),e(q7,pnr),e(q7,cG),e(cG,_nr),e(q7,unr),e(bo,bnr),e(bo,che),e(che,vnr),e(bo,Tnr),g(Iw,bo,null),b(c,RBe,u),b(c,vc,u),e(vc,G7),e(G7,fhe),g(Dw,fhe,null),e(vc,Fnr),e(vc,mhe),e(mhe,Cnr),b(c,SBe,u),b(c,Fr,u),g(jw,Fr,null),e(Fr,Mnr),e(Fr,Tc),e(Tc,Enr),e(Tc,ghe),e(ghe,ynr),e(Tc,wnr),e(Tc,hhe),e(hhe,Anr),e(Tc,Lnr),e(Fr,Bnr),e(Fr,Nw),e(Nw,xnr),e(Nw,phe),e(phe,knr),e(Nw,Rnr),e(Fr,Snr),e(Fr,ht),g(qw,ht,null),e(ht,Pnr),e(ht,_he),e(_he,$nr),e(ht,Inr),e(ht,Fc),e(Fc,Dnr),e(Fc,uhe),e(uhe,jnr),e(Fc,Nnr),e(Fc,bhe),e(bhe,qnr),e(Fc,Gnr),e(ht,Onr),e(ht,vhe),e(vhe,Xnr),e(ht,Vnr),g(Gw,ht,null),e(Fr,znr),e(Fr,vo),g(Ow,vo,null),e(vo,Wnr),e(vo,The),e(The,Qnr),e(vo,Hnr),e(vo,_n),e(_n,Unr),e(_n,Fhe),e(Fhe,Jnr),e(_n,Ynr),e(_n,Che),e(Che,Knr),e(_n,Znr),e(_n,Mhe),e(Mhe,esr),e(_n,osr),e(vo,rsr),e(vo,X),e(X,O7),e(O7,Ehe),e(Ehe,tsr),e(O7,asr),e(O7,fG),e(fG,nsr),e(O7,ssr),e(X,lsr),e(X,X7),e(X7,yhe),e(yhe,isr),e(X7,dsr),e(X7,mG),e(mG,csr),e(X7,fsr),e(X,msr),e(X,V7),e(V7,whe),e(whe,gsr),e(V7,hsr),e(V7,gG),e(gG,psr),e(V7,_sr),e(X,usr),e(X,z7),e(z7,Ahe),e(Ahe,bsr),e(z7,vsr),e(z7,hG),e(hG,Tsr),e(z7,Fsr),e(X,Csr),e(X,W7),e(W7,Lhe),e(Lhe,Msr),e(W7,Esr),e(W7,pG),e(pG,ysr),e(W7,wsr),e(X,Asr),e(X,Q7),e(Q7,Bhe),e(Bhe,Lsr),e(Q7,Bsr),e(Q7,_G),e(_G,xsr),e(Q7,ksr),e(X,Rsr),e(X,H7),e(H7,xhe),e(xhe,Ssr),e(H7,Psr),e(H7,uG),e(uG,$sr),e(H7,Isr),e(X,Dsr),e(X,U7),e(U7,khe),e(khe,jsr),e(U7,Nsr),e(U7,bG),e(bG,qsr),e(U7,Gsr),e(X,Osr),e(X,J7),e(J7,Rhe),e(Rhe,Xsr),e(J7,Vsr),e(J7,vG),e(vG,zsr),e(J7,Wsr),e(X,Qsr),e(X,Y7),e(Y7,She),e(She,Hsr),e(Y7,Usr),e(Y7,TG),e(TG,Jsr),e(Y7,Ysr),e(X,Ksr),e(X,K7),e(K7,Phe),e(Phe,Zsr),e(K7,elr),e(K7,FG),e(FG,olr),e(K7,rlr),e(X,tlr),e(X,Z7),e(Z7,$he),e($he,alr),e(Z7,nlr),e(Z7,CG),e(CG,slr),e(Z7,llr),e(X,ilr),e(X,eF),e(eF,Ihe),e(Ihe,dlr),e(eF,clr),e(eF,MG),e(MG,flr),e(eF,mlr),e(X,glr),e(X,oF),e(oF,Dhe),e(Dhe,hlr),e(oF,plr),e(oF,EG),e(EG,_lr),e(oF,ulr),e(X,blr),e(X,rF),e(rF,jhe),e(jhe,vlr),e(rF,Tlr),e(rF,yG),e(yG,Flr),e(rF,Clr),e(X,Mlr),e(X,tF),e(tF,Nhe),e(Nhe,Elr),e(tF,ylr),e(tF,wG),e(wG,wlr),e(tF,Alr),e(X,Llr),e(X,aF),e(aF,qhe),e(qhe,Blr),e(aF,xlr),e(aF,AG),e(AG,klr),e(aF,Rlr),e(X,Slr),e(X,nF),e(nF,Ghe),e(Ghe,Plr),e(nF,$lr),e(nF,LG),e(LG,Ilr),e(nF,Dlr),e(X,jlr),e(X,sF),e(sF,Ohe),e(Ohe,Nlr),e(sF,qlr),e(sF,BG),e(BG,Glr),e(sF,Olr),e(X,Xlr),e(X,lF),e(lF,Xhe),e(Xhe,Vlr),e(lF,zlr),e(lF,xG),e(xG,Wlr),e(lF,Qlr),e(X,Hlr),e(X,iF),e(iF,Vhe),e(Vhe,Ulr),e(iF,Jlr),e(iF,kG),e(kG,Ylr),e(iF,Klr),e(X,Zlr),e(X,dF),e(dF,zhe),e(zhe,eir),e(dF,oir),e(dF,RG),e(RG,rir),e(dF,tir),e(X,air),e(X,cF),e(cF,Whe),e(Whe,nir),e(cF,sir),e(cF,SG),e(SG,lir),e(cF,iir),e(X,dir),e(X,fF),e(fF,Qhe),e(Qhe,cir),e(fF,fir),e(fF,PG),e(PG,mir),e(fF,gir),e(X,hir),e(X,mF),e(mF,Hhe),e(Hhe,pir),e(mF,_ir),e(mF,$G),e($G,uir),e(mF,bir),e(vo,vir),e(vo,Uhe),e(Uhe,Tir),e(vo,Fir),g(Xw,vo,null),b(c,PBe,u),b(c,Cc,u),e(Cc,gF),e(gF,Jhe),g(Vw,Jhe,null),e(Cc,Cir),e(Cc,Yhe),e(Yhe,Mir),b(c,$Be,u),b(c,Cr,u),g(zw,Cr,null),e(Cr,Eir),e(Cr,Mc),e(Mc,yir),e(Mc,Khe),e(Khe,wir),e(Mc,Air),e(Mc,Zhe),e(Zhe,Lir),e(Mc,Bir),e(Cr,xir),e(Cr,Ww),e(Ww,kir),e(Ww,epe),e(epe,Rir),e(Ww,Sir),e(Cr,Pir),e(Cr,pt),g(Qw,pt,null),e(pt,$ir),e(pt,ope),e(ope,Iir),e(pt,Dir),e(pt,Ec),e(Ec,jir),e(Ec,rpe),e(rpe,Nir),e(Ec,qir),e(Ec,tpe),e(tpe,Gir),e(Ec,Oir),e(pt,Xir),e(pt,ape),e(ape,Vir),e(pt,zir),g(Hw,pt,null),e(Cr,Wir),e(Cr,To),g(Uw,To,null),e(To,Qir),e(To,npe),e(npe,Hir),e(To,Uir),e(To,un),e(un,Jir),e(un,spe),e(spe,Yir),e(un,Kir),e(un,lpe),e(lpe,Zir),e(un,edr),e(un,ipe),e(ipe,odr),e(un,rdr),e(To,tdr),e(To,te),e(te,hF),e(hF,dpe),e(dpe,adr),e(hF,ndr),e(hF,IG),e(IG,sdr),e(hF,ldr),e(te,idr),e(te,pF),e(pF,cpe),e(cpe,ddr),e(pF,cdr),e(pF,DG),e(DG,fdr),e(pF,mdr),e(te,gdr),e(te,_F),e(_F,fpe),e(fpe,hdr),e(_F,pdr),e(_F,jG),e(jG,_dr),e(_F,udr),e(te,bdr),e(te,uF),e(uF,mpe),e(mpe,vdr),e(uF,Tdr),e(uF,NG),e(NG,Fdr),e(uF,Cdr),e(te,Mdr),e(te,bF),e(bF,gpe),e(gpe,Edr),e(bF,ydr),e(bF,qG),e(qG,wdr),e(bF,Adr),e(te,Ldr),e(te,vF),e(vF,hpe),e(hpe,Bdr),e(vF,xdr),e(vF,GG),e(GG,kdr),e(vF,Rdr),e(te,Sdr),e(te,TF),e(TF,ppe),e(ppe,Pdr),e(TF,$dr),e(TF,OG),e(OG,Idr),e(TF,Ddr),e(te,jdr),e(te,FF),e(FF,_pe),e(_pe,Ndr),e(FF,qdr),e(FF,XG),e(XG,Gdr),e(FF,Odr),e(te,Xdr),e(te,CF),e(CF,upe),e(upe,Vdr),e(CF,zdr),e(CF,VG),e(VG,Wdr),e(CF,Qdr),e(te,Hdr),e(te,MF),e(MF,bpe),e(bpe,Udr),e(MF,Jdr),e(MF,zG),e(zG,Ydr),e(MF,Kdr),e(te,Zdr),e(te,EF),e(EF,vpe),e(vpe,ecr),e(EF,ocr),e(EF,WG),e(WG,rcr),e(EF,tcr),e(te,acr),e(te,yF),e(yF,Tpe),e(Tpe,ncr),e(yF,scr),e(yF,QG),e(QG,lcr),e(yF,icr),e(te,dcr),e(te,wF),e(wF,Fpe),e(Fpe,ccr),e(wF,fcr),e(wF,HG),e(HG,mcr),e(wF,gcr),e(te,hcr),e(te,AF),e(AF,Cpe),e(Cpe,pcr),e(AF,_cr),e(AF,UG),e(UG,ucr),e(AF,bcr),e(te,vcr),e(te,LF),e(LF,Mpe),e(Mpe,Tcr),e(LF,Fcr),e(LF,JG),e(JG,Ccr),e(LF,Mcr),e(te,Ecr),e(te,BF),e(BF,Epe),e(Epe,ycr),e(BF,wcr),e(BF,YG),e(YG,Acr),e(BF,Lcr),e(te,Bcr),e(te,xF),e(xF,ype),e(ype,xcr),e(xF,kcr),e(xF,KG),e(KG,Rcr),e(xF,Scr),e(To,Pcr),e(To,wpe),e(wpe,$cr),e(To,Icr),g(Jw,To,null),b(c,IBe,u),b(c,yc,u),e(yc,kF),e(kF,Ape),g(Yw,Ape,null),e(yc,Dcr),e(yc,Lpe),e(Lpe,jcr),b(c,DBe,u),b(c,Mr,u),g(Kw,Mr,null),e(Mr,Ncr),e(Mr,wc),e(wc,qcr),e(wc,Bpe),e(Bpe,Gcr),e(wc,Ocr),e(wc,xpe),e(xpe,Xcr),e(wc,Vcr),e(Mr,zcr),e(Mr,Zw),e(Zw,Wcr),e(Zw,kpe),e(kpe,Qcr),e(Zw,Hcr),e(Mr,Ucr),e(Mr,_t),g(e6,_t,null),e(_t,Jcr),e(_t,Rpe),e(Rpe,Ycr),e(_t,Kcr),e(_t,Ac),e(Ac,Zcr),e(Ac,Spe),e(Spe,efr),e(Ac,ofr),e(Ac,Ppe),e(Ppe,rfr),e(Ac,tfr),e(_t,afr),e(_t,$pe),e($pe,nfr),e(_t,sfr),g(o6,_t,null),e(Mr,lfr),e(Mr,Fo),g(r6,Fo,null),e(Fo,ifr),e(Fo,Ipe),e(Ipe,dfr),e(Fo,cfr),e(Fo,bn),e(bn,ffr),e(bn,Dpe),e(Dpe,mfr),e(bn,gfr),e(bn,jpe),e(jpe,hfr),e(bn,pfr),e(bn,Npe),e(Npe,_fr),e(bn,ufr),e(Fo,bfr),e(Fo,qpe),e(qpe,RF),e(RF,Gpe),e(Gpe,vfr),e(RF,Tfr),e(RF,ZG),e(ZG,Ffr),e(RF,Cfr),e(Fo,Mfr),e(Fo,Ope),e(Ope,Efr),e(Fo,yfr),g(t6,Fo,null),b(c,jBe,u),b(c,Lc,u),e(Lc,SF),e(SF,Xpe),g(a6,Xpe,null),e(Lc,wfr),e(Lc,Vpe),e(Vpe,Afr),b(c,NBe,u),b(c,Er,u),g(n6,Er,null),e(Er,Lfr),e(Er,Bc),e(Bc,Bfr),e(Bc,zpe),e(zpe,xfr),e(Bc,kfr),e(Bc,Wpe),e(Wpe,Rfr),e(Bc,Sfr),e(Er,Pfr),e(Er,s6),e(s6,$fr),e(s6,Qpe),e(Qpe,Ifr),e(s6,Dfr),e(Er,jfr),e(Er,ut),g(l6,ut,null),e(ut,Nfr),e(ut,Hpe),e(Hpe,qfr),e(ut,Gfr),e(ut,xc),e(xc,Ofr),e(xc,Upe),e(Upe,Xfr),e(xc,Vfr),e(xc,Jpe),e(Jpe,zfr),e(xc,Wfr),e(ut,Qfr),e(ut,Ype),e(Ype,Hfr),e(ut,Ufr),g(i6,ut,null),e(Er,Jfr),e(Er,Co),g(d6,Co,null),e(Co,Yfr),e(Co,Kpe),e(Kpe,Kfr),e(Co,Zfr),e(Co,vn),e(vn,emr),e(vn,Zpe),e(Zpe,omr),e(vn,rmr),e(vn,e_e),e(e_e,tmr),e(vn,amr),e(vn,o_e),e(o_e,nmr),e(vn,smr),e(Co,lmr),e(Co,K),e(K,PF),e(PF,r_e),e(r_e,imr),e(PF,dmr),e(PF,eO),e(eO,cmr),e(PF,fmr),e(K,mmr),e(K,$F),e($F,t_e),e(t_e,gmr),e($F,hmr),e($F,oO),e(oO,pmr),e($F,_mr),e(K,umr),e(K,IF),e(IF,a_e),e(a_e,bmr),e(IF,vmr),e(IF,rO),e(rO,Tmr),e(IF,Fmr),e(K,Cmr),e(K,DF),e(DF,n_e),e(n_e,Mmr),e(DF,Emr),e(DF,tO),e(tO,ymr),e(DF,wmr),e(K,Amr),e(K,jF),e(jF,s_e),e(s_e,Lmr),e(jF,Bmr),e(jF,aO),e(aO,xmr),e(jF,kmr),e(K,Rmr),e(K,NF),e(NF,l_e),e(l_e,Smr),e(NF,Pmr),e(NF,nO),e(nO,$mr),e(NF,Imr),e(K,Dmr),e(K,qF),e(qF,i_e),e(i_e,jmr),e(qF,Nmr),e(qF,sO),e(sO,qmr),e(qF,Gmr),e(K,Omr),e(K,GF),e(GF,d_e),e(d_e,Xmr),e(GF,Vmr),e(GF,lO),e(lO,zmr),e(GF,Wmr),e(K,Qmr),e(K,OF),e(OF,c_e),e(c_e,Hmr),e(OF,Umr),e(OF,iO),e(iO,Jmr),e(OF,Ymr),e(K,Kmr),e(K,XF),e(XF,f_e),e(f_e,Zmr),e(XF,egr),e(XF,dO),e(dO,ogr),e(XF,rgr),e(K,tgr),e(K,VF),e(VF,m_e),e(m_e,agr),e(VF,ngr),e(VF,cO),e(cO,sgr),e(VF,lgr),e(K,igr),e(K,zF),e(zF,g_e),e(g_e,dgr),e(zF,cgr),e(zF,fO),e(fO,fgr),e(zF,mgr),e(K,ggr),e(K,WF),e(WF,h_e),e(h_e,hgr),e(WF,pgr),e(WF,mO),e(mO,_gr),e(WF,ugr),e(K,bgr),e(K,QF),e(QF,p_e),e(p_e,vgr),e(QF,Tgr),e(QF,gO),e(gO,Fgr),e(QF,Cgr),e(K,Mgr),e(K,HF),e(HF,__e),e(__e,Egr),e(HF,ygr),e(HF,hO),e(hO,wgr),e(HF,Agr),e(K,Lgr),e(K,UF),e(UF,u_e),e(u_e,Bgr),e(UF,xgr),e(UF,pO),e(pO,kgr),e(UF,Rgr),e(K,Sgr),e(K,JF),e(JF,b_e),e(b_e,Pgr),e(JF,$gr),e(JF,_O),e(_O,Igr),e(JF,Dgr),e(K,jgr),e(K,YF),e(YF,v_e),e(v_e,Ngr),e(YF,qgr),e(YF,uO),e(uO,Ggr),e(YF,Ogr),e(K,Xgr),e(K,KF),e(KF,T_e),e(T_e,Vgr),e(KF,zgr),e(KF,bO),e(bO,Wgr),e(KF,Qgr),e(K,Hgr),e(K,ZF),e(ZF,F_e),e(F_e,Ugr),e(ZF,Jgr),e(ZF,vO),e(vO,Ygr),e(ZF,Kgr),e(Co,Zgr),e(Co,C_e),e(C_e,ehr),e(Co,ohr),g(c6,Co,null),b(c,qBe,u),b(c,kc,u),e(kc,e9),e(e9,M_e),g(f6,M_e,null),e(kc,rhr),e(kc,E_e),e(E_e,thr),b(c,GBe,u),b(c,yr,u),g(m6,yr,null),e(yr,ahr),e(yr,Rc),e(Rc,nhr),e(Rc,y_e),e(y_e,shr),e(Rc,lhr),e(Rc,w_e),e(w_e,ihr),e(Rc,dhr),e(yr,chr),e(yr,g6),e(g6,fhr),e(g6,A_e),e(A_e,mhr),e(g6,ghr),e(yr,hhr),e(yr,bt),g(h6,bt,null),e(bt,phr),e(bt,L_e),e(L_e,_hr),e(bt,uhr),e(bt,Sc),e(Sc,bhr),e(Sc,B_e),e(B_e,vhr),e(Sc,Thr),e(Sc,x_e),e(x_e,Fhr),e(Sc,Chr),e(bt,Mhr),e(bt,k_e),e(k_e,Ehr),e(bt,yhr),g(p6,bt,null),e(yr,whr),e(yr,Mo),g(_6,Mo,null),e(Mo,Ahr),e(Mo,R_e),e(R_e,Lhr),e(Mo,Bhr),e(Mo,Tn),e(Tn,xhr),e(Tn,S_e),e(S_e,khr),e(Tn,Rhr),e(Tn,P_e),e(P_e,Shr),e(Tn,Phr),e(Tn,$_e),e($_e,$hr),e(Tn,Ihr),e(Mo,Dhr),e(Mo,Z),e(Z,o9),e(o9,I_e),e(I_e,jhr),e(o9,Nhr),e(o9,TO),e(TO,qhr),e(o9,Ghr),e(Z,Ohr),e(Z,r9),e(r9,D_e),e(D_e,Xhr),e(r9,Vhr),e(r9,FO),e(FO,zhr),e(r9,Whr),e(Z,Qhr),e(Z,t9),e(t9,j_e),e(j_e,Hhr),e(t9,Uhr),e(t9,CO),e(CO,Jhr),e(t9,Yhr),e(Z,Khr),e(Z,a9),e(a9,N_e),e(N_e,Zhr),e(a9,epr),e(a9,MO),e(MO,opr),e(a9,rpr),e(Z,tpr),e(Z,n9),e(n9,q_e),e(q_e,apr),e(n9,npr),e(n9,EO),e(EO,spr),e(n9,lpr),e(Z,ipr),e(Z,s9),e(s9,G_e),e(G_e,dpr),e(s9,cpr),e(s9,yO),e(yO,fpr),e(s9,mpr),e(Z,gpr),e(Z,l9),e(l9,O_e),e(O_e,hpr),e(l9,ppr),e(l9,wO),e(wO,_pr),e(l9,upr),e(Z,bpr),e(Z,i9),e(i9,X_e),e(X_e,vpr),e(i9,Tpr),e(i9,AO),e(AO,Fpr),e(i9,Cpr),e(Z,Mpr),e(Z,d9),e(d9,V_e),e(V_e,Epr),e(d9,ypr),e(d9,LO),e(LO,wpr),e(d9,Apr),e(Z,Lpr),e(Z,c9),e(c9,z_e),e(z_e,Bpr),e(c9,xpr),e(c9,BO),e(BO,kpr),e(c9,Rpr),e(Z,Spr),e(Z,f9),e(f9,W_e),e(W_e,Ppr),e(f9,$pr),e(f9,xO),e(xO,Ipr),e(f9,Dpr),e(Z,jpr),e(Z,m9),e(m9,Q_e),e(Q_e,Npr),e(m9,qpr),e(m9,kO),e(kO,Gpr),e(m9,Opr),e(Z,Xpr),e(Z,g9),e(g9,H_e),e(H_e,Vpr),e(g9,zpr),e(g9,RO),e(RO,Wpr),e(g9,Qpr),e(Z,Hpr),e(Z,h9),e(h9,U_e),e(U_e,Upr),e(h9,Jpr),e(h9,SO),e(SO,Ypr),e(h9,Kpr),e(Z,Zpr),e(Z,p9),e(p9,J_e),e(J_e,e_r),e(p9,o_r),e(p9,PO),e(PO,r_r),e(p9,t_r),e(Z,a_r),e(Z,_9),e(_9,Y_e),e(Y_e,n_r),e(_9,s_r),e(_9,$O),e($O,l_r),e(_9,i_r),e(Z,d_r),e(Z,u9),e(u9,K_e),e(K_e,c_r),e(u9,f_r),e(u9,IO),e(IO,m_r),e(u9,g_r),e(Z,h_r),e(Z,b9),e(b9,Z_e),e(Z_e,p_r),e(b9,__r),e(b9,DO),e(DO,u_r),e(b9,b_r),e(Z,v_r),e(Z,v9),e(v9,eue),e(eue,T_r),e(v9,F_r),e(v9,jO),e(jO,C_r),e(v9,M_r),e(Mo,E_r),e(Mo,oue),e(oue,y_r),e(Mo,w_r),g(u6,Mo,null),b(c,OBe,u),b(c,Pc,u),e(Pc,T9),e(T9,rue),g(b6,rue,null),e(Pc,A_r),e(Pc,tue),e(tue,L_r),b(c,XBe,u),b(c,wr,u),g(v6,wr,null),e(wr,B_r),e(wr,$c),e($c,x_r),e($c,aue),e(aue,k_r),e($c,R_r),e($c,nue),e(nue,S_r),e($c,P_r),e(wr,$_r),e(wr,T6),e(T6,I_r),e(T6,sue),e(sue,D_r),e(T6,j_r),e(wr,N_r),e(wr,vt),g(F6,vt,null),e(vt,q_r),e(vt,lue),e(lue,G_r),e(vt,O_r),e(vt,Ic),e(Ic,X_r),e(Ic,iue),e(iue,V_r),e(Ic,z_r),e(Ic,due),e(due,W_r),e(Ic,Q_r),e(vt,H_r),e(vt,cue),e(cue,U_r),e(vt,J_r),g(C6,vt,null),e(wr,Y_r),e(wr,Eo),g(M6,Eo,null),e(Eo,K_r),e(Eo,fue),e(fue,Z_r),e(Eo,eur),e(Eo,Fn),e(Fn,our),e(Fn,mue),e(mue,rur),e(Fn,tur),e(Fn,gue),e(gue,aur),e(Fn,nur),e(Fn,hue),e(hue,sur),e(Fn,lur),e(Eo,iur),e(Eo,pue),e(pue,F9),e(F9,_ue),e(_ue,dur),e(F9,cur),e(F9,NO),e(NO,fur),e(F9,mur),e(Eo,gur),e(Eo,uue),e(uue,hur),e(Eo,pur),g(E6,Eo,null),b(c,VBe,u),b(c,Dc,u),e(Dc,C9),e(C9,bue),g(y6,bue,null),e(Dc,_ur),e(Dc,vue),e(vue,uur),b(c,zBe,u),b(c,Ar,u),g(w6,Ar,null),e(Ar,bur),e(Ar,jc),e(jc,vur),e(jc,Tue),e(Tue,Tur),e(jc,Fur),e(jc,Fue),e(Fue,Cur),e(jc,Mur),e(Ar,Eur),e(Ar,A6),e(A6,yur),e(A6,Cue),e(Cue,wur),e(A6,Aur),e(Ar,Lur),e(Ar,Tt),g(L6,Tt,null),e(Tt,Bur),e(Tt,Mue),e(Mue,xur),e(Tt,kur),e(Tt,Nc),e(Nc,Rur),e(Nc,Eue),e(Eue,Sur),e(Nc,Pur),e(Nc,yue),e(yue,$ur),e(Nc,Iur),e(Tt,Dur),e(Tt,wue),e(wue,jur),e(Tt,Nur),g(B6,Tt,null),e(Ar,qur),e(Ar,yo),g(x6,yo,null),e(yo,Gur),e(yo,Aue),e(Aue,Our),e(yo,Xur),e(yo,Cn),e(Cn,Vur),e(Cn,Lue),e(Lue,zur),e(Cn,Wur),e(Cn,Bue),e(Bue,Qur),e(Cn,Hur),e(Cn,xue),e(xue,Uur),e(Cn,Jur),e(yo,Yur),e(yo,kue),e(kue,M9),e(M9,Rue),e(Rue,Kur),e(M9,Zur),e(M9,qO),e(qO,e5r),e(M9,o5r),e(yo,r5r),e(yo,Sue),e(Sue,t5r),e(yo,a5r),g(k6,yo,null),b(c,WBe,u),b(c,qc,u),e(qc,E9),e(E9,Pue),g(R6,Pue,null),e(qc,n5r),e(qc,$ue),e($ue,s5r),b(c,QBe,u),b(c,Lr,u),g(S6,Lr,null),e(Lr,l5r),e(Lr,Gc),e(Gc,i5r),e(Gc,Iue),e(Iue,d5r),e(Gc,c5r),e(Gc,Due),e(Due,f5r),e(Gc,m5r),e(Lr,g5r),e(Lr,P6),e(P6,h5r),e(P6,jue),e(jue,p5r),e(P6,_5r),e(Lr,u5r),e(Lr,Ft),g($6,Ft,null),e(Ft,b5r),e(Ft,Nue),e(Nue,v5r),e(Ft,T5r),e(Ft,Oc),e(Oc,F5r),e(Oc,que),e(que,C5r),e(Oc,M5r),e(Oc,Gue),e(Gue,E5r),e(Oc,y5r),e(Ft,w5r),e(Ft,Oue),e(Oue,A5r),e(Ft,L5r),g(I6,Ft,null),e(Lr,B5r),e(Lr,wo),g(D6,wo,null),e(wo,x5r),e(wo,Xue),e(Xue,k5r),e(wo,R5r),e(wo,Mn),e(Mn,S5r),e(Mn,Vue),e(Vue,P5r),e(Mn,$5r),e(Mn,zue),e(zue,I5r),e(Mn,D5r),e(Mn,Wue),e(Wue,j5r),e(Mn,N5r),e(wo,q5r),e(wo,z),e(z,y9),e(y9,Que),e(Que,G5r),e(y9,O5r),e(y9,GO),e(GO,X5r),e(y9,V5r),e(z,z5r),e(z,w9),e(w9,Hue),e(Hue,W5r),e(w9,Q5r),e(w9,OO),e(OO,H5r),e(w9,U5r),e(z,J5r),e(z,A9),e(A9,Uue),e(Uue,Y5r),e(A9,K5r),e(A9,XO),e(XO,Z5r),e(A9,e1r),e(z,o1r),e(z,L9),e(L9,Jue),e(Jue,r1r),e(L9,t1r),e(L9,VO),e(VO,a1r),e(L9,n1r),e(z,s1r),e(z,B9),e(B9,Yue),e(Yue,l1r),e(B9,i1r),e(B9,zO),e(zO,d1r),e(B9,c1r),e(z,f1r),e(z,x9),e(x9,Kue),e(Kue,m1r),e(x9,g1r),e(x9,WO),e(WO,h1r),e(x9,p1r),e(z,_1r),e(z,k9),e(k9,Zue),e(Zue,u1r),e(k9,b1r),e(k9,QO),e(QO,v1r),e(k9,T1r),e(z,F1r),e(z,R9),e(R9,e5e),e(e5e,C1r),e(R9,M1r),e(R9,HO),e(HO,E1r),e(R9,y1r),e(z,w1r),e(z,S9),e(S9,o5e),e(o5e,A1r),e(S9,L1r),e(S9,UO),e(UO,B1r),e(S9,x1r),e(z,k1r),e(z,P9),e(P9,r5e),e(r5e,R1r),e(P9,S1r),e(P9,JO),e(JO,P1r),e(P9,$1r),e(z,I1r),e(z,$9),e($9,t5e),e(t5e,D1r),e($9,j1r),e($9,YO),e(YO,N1r),e($9,q1r),e(z,G1r),e(z,I9),e(I9,a5e),e(a5e,O1r),e(I9,X1r),e(I9,KO),e(KO,V1r),e(I9,z1r),e(z,W1r),e(z,D9),e(D9,n5e),e(n5e,Q1r),e(D9,H1r),e(D9,ZO),e(ZO,U1r),e(D9,J1r),e(z,Y1r),e(z,j9),e(j9,s5e),e(s5e,K1r),e(j9,Z1r),e(j9,eX),e(eX,ebr),e(j9,obr),e(z,rbr),e(z,N9),e(N9,l5e),e(l5e,tbr),e(N9,abr),e(N9,oX),e(oX,nbr),e(N9,sbr),e(z,lbr),e(z,q9),e(q9,i5e),e(i5e,ibr),e(q9,dbr),e(q9,rX),e(rX,cbr),e(q9,fbr),e(z,mbr),e(z,G9),e(G9,d5e),e(d5e,gbr),e(G9,hbr),e(G9,tX),e(tX,pbr),e(G9,_br),e(z,ubr),e(z,O9),e(O9,c5e),e(c5e,bbr),e(O9,vbr),e(O9,aX),e(aX,Tbr),e(O9,Fbr),e(z,Cbr),e(z,X9),e(X9,f5e),e(f5e,Mbr),e(X9,Ebr),e(X9,nX),e(nX,ybr),e(X9,wbr),e(z,Abr),e(z,V9),e(V9,m5e),e(m5e,Lbr),e(V9,Bbr),e(V9,sX),e(sX,xbr),e(V9,kbr),e(z,Rbr),e(z,z9),e(z9,g5e),e(g5e,Sbr),e(z9,Pbr),e(z9,lX),e(lX,$br),e(z9,Ibr),e(z,Dbr),e(z,W9),e(W9,h5e),e(h5e,jbr),e(W9,Nbr),e(W9,iX),e(iX,qbr),e(W9,Gbr),e(z,Obr),e(z,Q9),e(Q9,p5e),e(p5e,Xbr),e(Q9,Vbr),e(Q9,dX),e(dX,zbr),e(Q9,Wbr),e(z,Qbr),e(z,H9),e(H9,_5e),e(_5e,Hbr),e(H9,Ubr),e(H9,cX),e(cX,Jbr),e(H9,Ybr),e(wo,Kbr),e(wo,u5e),e(u5e,Zbr),e(wo,e2r),g(j6,wo,null),b(c,HBe,u),b(c,Xc,u),e(Xc,U9),e(U9,b5e),g(N6,b5e,null),e(Xc,o2r),e(Xc,v5e),e(v5e,r2r),b(c,UBe,u),b(c,Br,u),g(q6,Br,null),e(Br,t2r),e(Br,Vc),e(Vc,a2r),e(Vc,T5e),e(T5e,n2r),e(Vc,s2r),e(Vc,F5e),e(F5e,l2r),e(Vc,i2r),e(Br,d2r),e(Br,G6),e(G6,c2r),e(G6,C5e),e(C5e,f2r),e(G6,m2r),e(Br,g2r),e(Br,Ct),g(O6,Ct,null),e(Ct,h2r),e(Ct,M5e),e(M5e,p2r),e(Ct,_2r),e(Ct,zc),e(zc,u2r),e(zc,E5e),e(E5e,b2r),e(zc,v2r),e(zc,y5e),e(y5e,T2r),e(zc,F2r),e(Ct,C2r),e(Ct,w5e),e(w5e,M2r),e(Ct,E2r),g(X6,Ct,null),e(Br,y2r),e(Br,Ao),g(V6,Ao,null),e(Ao,w2r),e(Ao,A5e),e(A5e,A2r),e(Ao,L2r),e(Ao,En),e(En,B2r),e(En,L5e),e(L5e,x2r),e(En,k2r),e(En,B5e),e(B5e,R2r),e(En,S2r),e(En,x5e),e(x5e,P2r),e(En,$2r),e(Ao,I2r),e(Ao,yn),e(yn,J9),e(J9,k5e),e(k5e,D2r),e(J9,j2r),e(J9,fX),e(fX,N2r),e(J9,q2r),e(yn,G2r),e(yn,Y9),e(Y9,R5e),e(R5e,O2r),e(Y9,X2r),e(Y9,mX),e(mX,V2r),e(Y9,z2r),e(yn,W2r),e(yn,K9),e(K9,S5e),e(S5e,Q2r),e(K9,H2r),e(K9,gX),e(gX,U2r),e(K9,J2r),e(yn,Y2r),e(yn,Z9),e(Z9,P5e),e(P5e,K2r),e(Z9,Z2r),e(Z9,hX),e(hX,evr),e(Z9,ovr),e(Ao,rvr),e(Ao,$5e),e($5e,tvr),e(Ao,avr),g(z6,Ao,null),b(c,JBe,u),b(c,Wc,u),e(Wc,eC),e(eC,I5e),g(W6,I5e,null),e(Wc,nvr),e(Wc,D5e),e(D5e,svr),b(c,YBe,u),b(c,xr,u),g(Q6,xr,null),e(xr,lvr),e(xr,Qc),e(Qc,ivr),e(Qc,j5e),e(j5e,dvr),e(Qc,cvr),e(Qc,N5e),e(N5e,fvr),e(Qc,mvr),e(xr,gvr),e(xr,H6),e(H6,hvr),e(H6,q5e),e(q5e,pvr),e(H6,_vr),e(xr,uvr),e(xr,Mt),g(U6,Mt,null),e(Mt,bvr),e(Mt,G5e),e(G5e,vvr),e(Mt,Tvr),e(Mt,Hc),e(Hc,Fvr),e(Hc,O5e),e(O5e,Cvr),e(Hc,Mvr),e(Hc,X5e),e(X5e,Evr),e(Hc,yvr),e(Mt,wvr),e(Mt,V5e),e(V5e,Avr),e(Mt,Lvr),g(J6,Mt,null),e(xr,Bvr),e(xr,Lo),g(Y6,Lo,null),e(Lo,xvr),e(Lo,z5e),e(z5e,kvr),e(Lo,Rvr),e(Lo,wn),e(wn,Svr),e(wn,W5e),e(W5e,Pvr),e(wn,$vr),e(wn,Q5e),e(Q5e,Ivr),e(wn,Dvr),e(wn,H5e),e(H5e,jvr),e(wn,Nvr),e(Lo,qvr),e(Lo,fe),e(fe,oC),e(oC,U5e),e(U5e,Gvr),e(oC,Ovr),e(oC,pX),e(pX,Xvr),e(oC,Vvr),e(fe,zvr),e(fe,rC),e(rC,J5e),e(J5e,Wvr),e(rC,Qvr),e(rC,_X),e(_X,Hvr),e(rC,Uvr),e(fe,Jvr),e(fe,tC),e(tC,Y5e),e(Y5e,Yvr),e(tC,Kvr),e(tC,uX),e(uX,Zvr),e(tC,eTr),e(fe,oTr),e(fe,aC),e(aC,K5e),e(K5e,rTr),e(aC,tTr),e(aC,bX),e(bX,aTr),e(aC,nTr),e(fe,sTr),e(fe,nC),e(nC,Z5e),e(Z5e,lTr),e(nC,iTr),e(nC,vX),e(vX,dTr),e(nC,cTr),e(fe,fTr),e(fe,sC),e(sC,e1e),e(e1e,mTr),e(sC,gTr),e(sC,TX),e(TX,hTr),e(sC,pTr),e(fe,_Tr),e(fe,lC),e(lC,o1e),e(o1e,uTr),e(lC,bTr),e(lC,FX),e(FX,vTr),e(lC,TTr),e(fe,FTr),e(fe,iC),e(iC,r1e),e(r1e,CTr),e(iC,MTr),e(iC,CX),e(CX,ETr),e(iC,yTr),e(fe,wTr),e(fe,dC),e(dC,t1e),e(t1e,ATr),e(dC,LTr),e(dC,MX),e(MX,BTr),e(dC,xTr),e(fe,kTr),e(fe,cC),e(cC,a1e),e(a1e,RTr),e(cC,STr),e(cC,EX),e(EX,PTr),e(cC,$Tr),e(fe,ITr),e(fe,fC),e(fC,n1e),e(n1e,DTr),e(fC,jTr),e(fC,yX),e(yX,NTr),e(fC,qTr),e(Lo,GTr),e(Lo,s1e),e(s1e,OTr),e(Lo,XTr),g(K6,Lo,null),b(c,KBe,u),b(c,Uc,u),e(Uc,mC),e(mC,l1e),g(Z6,l1e,null),e(Uc,VTr),e(Uc,i1e),e(i1e,zTr),b(c,ZBe,u),b(c,kr,u),g(eA,kr,null),e(kr,WTr),e(kr,Jc),e(Jc,QTr),e(Jc,d1e),e(d1e,HTr),e(Jc,UTr),e(Jc,c1e),e(c1e,JTr),e(Jc,YTr),e(kr,KTr),e(kr,oA),e(oA,ZTr),e(oA,f1e),e(f1e,e7r),e(oA,o7r),e(kr,r7r),e(kr,Et),g(rA,Et,null),e(Et,t7r),e(Et,m1e),e(m1e,a7r),e(Et,n7r),e(Et,Yc),e(Yc,s7r),e(Yc,g1e),e(g1e,l7r),e(Yc,i7r),e(Yc,h1e),e(h1e,d7r),e(Yc,c7r),e(Et,f7r),e(Et,p1e),e(p1e,m7r),e(Et,g7r),g(tA,Et,null),e(kr,h7r),e(kr,Bo),g(aA,Bo,null),e(Bo,p7r),e(Bo,_1e),e(_1e,_7r),e(Bo,u7r),e(Bo,An),e(An,b7r),e(An,u1e),e(u1e,v7r),e(An,T7r),e(An,b1e),e(b1e,F7r),e(An,C7r),e(An,v1e),e(v1e,M7r),e(An,E7r),e(Bo,y7r),e(Bo,ve),e(ve,gC),e(gC,T1e),e(T1e,w7r),e(gC,A7r),e(gC,wX),e(wX,L7r),e(gC,B7r),e(ve,x7r),e(ve,hC),e(hC,F1e),e(F1e,k7r),e(hC,R7r),e(hC,AX),e(AX,S7r),e(hC,P7r),e(ve,$7r),e(ve,pC),e(pC,C1e),e(C1e,I7r),e(pC,D7r),e(pC,LX),e(LX,j7r),e(pC,N7r),e(ve,q7r),e(ve,_C),e(_C,M1e),e(M1e,G7r),e(_C,O7r),e(_C,BX),e(BX,X7r),e(_C,V7r),e(ve,z7r),e(ve,uC),e(uC,E1e),e(E1e,W7r),e(uC,Q7r),e(uC,xX),e(xX,H7r),e(uC,U7r),e(ve,J7r),e(ve,bC),e(bC,y1e),e(y1e,Y7r),e(bC,K7r),e(bC,kX),e(kX,Z7r),e(bC,eFr),e(ve,oFr),e(ve,vC),e(vC,w1e),e(w1e,rFr),e(vC,tFr),e(vC,RX),e(RX,aFr),e(vC,nFr),e(ve,sFr),e(ve,TC),e(TC,A1e),e(A1e,lFr),e(TC,iFr),e(TC,SX),e(SX,dFr),e(TC,cFr),e(ve,fFr),e(ve,FC),e(FC,L1e),e(L1e,mFr),e(FC,gFr),e(FC,PX),e(PX,hFr),e(FC,pFr),e(Bo,_Fr),e(Bo,B1e),e(B1e,uFr),e(Bo,bFr),g(nA,Bo,null),b(c,exe,u),b(c,Kc,u),e(Kc,CC),e(CC,x1e),g(sA,x1e,null),e(Kc,vFr),e(Kc,k1e),e(k1e,TFr),b(c,oxe,u),b(c,Rr,u),g(lA,Rr,null),e(Rr,FFr),e(Rr,Zc),e(Zc,CFr),e(Zc,R1e),e(R1e,MFr),e(Zc,EFr),e(Zc,S1e),e(S1e,yFr),e(Zc,wFr),e(Rr,AFr),e(Rr,iA),e(iA,LFr),e(iA,P1e),e(P1e,BFr),e(iA,xFr),e(Rr,kFr),e(Rr,yt),g(dA,yt,null),e(yt,RFr),e(yt,$1e),e($1e,SFr),e(yt,PFr),e(yt,ef),e(ef,$Fr),e(ef,I1e),e(I1e,IFr),e(ef,DFr),e(ef,D1e),e(D1e,jFr),e(ef,NFr),e(yt,qFr),e(yt,j1e),e(j1e,GFr),e(yt,OFr),g(cA,yt,null),e(Rr,XFr),e(Rr,xo),g(fA,xo,null),e(xo,VFr),e(xo,N1e),e(N1e,zFr),e(xo,WFr),e(xo,Ln),e(Ln,QFr),e(Ln,q1e),e(q1e,HFr),e(Ln,UFr),e(Ln,G1e),e(G1e,JFr),e(Ln,YFr),e(Ln,O1e),e(O1e,KFr),e(Ln,ZFr),e(xo,e9r),e(xo,Te),e(Te,MC),e(MC,X1e),e(X1e,o9r),e(MC,r9r),e(MC,$X),e($X,t9r),e(MC,a9r),e(Te,n9r),e(Te,EC),e(EC,V1e),e(V1e,s9r),e(EC,l9r),e(EC,IX),e(IX,i9r),e(EC,d9r),e(Te,c9r),e(Te,yC),e(yC,z1e),e(z1e,f9r),e(yC,m9r),e(yC,DX),e(DX,g9r),e(yC,h9r),e(Te,p9r),e(Te,wC),e(wC,W1e),e(W1e,_9r),e(wC,u9r),e(wC,jX),e(jX,b9r),e(wC,v9r),e(Te,T9r),e(Te,AC),e(AC,Q1e),e(Q1e,F9r),e(AC,C9r),e(AC,NX),e(NX,M9r),e(AC,E9r),e(Te,y9r),e(Te,LC),e(LC,H1e),e(H1e,w9r),e(LC,A9r),e(LC,qX),e(qX,L9r),e(LC,B9r),e(Te,x9r),e(Te,BC),e(BC,U1e),e(U1e,k9r),e(BC,R9r),e(BC,GX),e(GX,S9r),e(BC,P9r),e(Te,$9r),e(Te,xC),e(xC,J1e),e(J1e,I9r),e(xC,D9r),e(xC,OX),e(OX,j9r),e(xC,N9r),e(Te,q9r),e(Te,kC),e(kC,Y1e),e(Y1e,G9r),e(kC,O9r),e(kC,XX),e(XX,X9r),e(kC,V9r),e(xo,z9r),e(xo,K1e),e(K1e,W9r),e(xo,Q9r),g(mA,xo,null),b(c,rxe,u),b(c,of,u),e(of,RC),e(RC,Z1e),g(gA,Z1e,null),e(of,H9r),e(of,ebe),e(ebe,U9r),b(c,txe,u),b(c,Sr,u),g(hA,Sr,null),e(Sr,J9r),e(Sr,rf),e(rf,Y9r),e(rf,obe),e(obe,K9r),e(rf,Z9r),e(rf,rbe),e(rbe,eCr),e(rf,oCr),e(Sr,rCr),e(Sr,pA),e(pA,tCr),e(pA,tbe),e(tbe,aCr),e(pA,nCr),e(Sr,sCr),e(Sr,wt),g(_A,wt,null),e(wt,lCr),e(wt,abe),e(abe,iCr),e(wt,dCr),e(wt,tf),e(tf,cCr),e(tf,nbe),e(nbe,fCr),e(tf,mCr),e(tf,sbe),e(sbe,gCr),e(tf,hCr),e(wt,pCr),e(wt,lbe),e(lbe,_Cr),e(wt,uCr),g(uA,wt,null),e(Sr,bCr),e(Sr,ko),g(bA,ko,null),e(ko,vCr),e(ko,ibe),e(ibe,TCr),e(ko,FCr),e(ko,Bn),e(Bn,CCr),e(Bn,dbe),e(dbe,MCr),e(Bn,ECr),e(Bn,cbe),e(cbe,yCr),e(Bn,wCr),e(Bn,fbe),e(fbe,ACr),e(Bn,LCr),e(ko,BCr),e(ko,Fe),e(Fe,SC),e(SC,mbe),e(mbe,xCr),e(SC,kCr),e(SC,VX),e(VX,RCr),e(SC,SCr),e(Fe,PCr),e(Fe,PC),e(PC,gbe),e(gbe,$Cr),e(PC,ICr),e(PC,zX),e(zX,DCr),e(PC,jCr),e(Fe,NCr),e(Fe,$C),e($C,hbe),e(hbe,qCr),e($C,GCr),e($C,WX),e(WX,OCr),e($C,XCr),e(Fe,VCr),e(Fe,IC),e(IC,pbe),e(pbe,zCr),e(IC,WCr),e(IC,QX),e(QX,QCr),e(IC,HCr),e(Fe,UCr),e(Fe,DC),e(DC,_be),e(_be,JCr),e(DC,YCr),e(DC,HX),e(HX,KCr),e(DC,ZCr),e(Fe,e4r),e(Fe,jC),e(jC,ube),e(ube,o4r),e(jC,r4r),e(jC,UX),e(UX,t4r),e(jC,a4r),e(Fe,n4r),e(Fe,NC),e(NC,bbe),e(bbe,s4r),e(NC,l4r),e(NC,JX),e(JX,i4r),e(NC,d4r),e(Fe,c4r),e(Fe,qC),e(qC,vbe),e(vbe,f4r),e(qC,m4r),e(qC,YX),e(YX,g4r),e(qC,h4r),e(Fe,p4r),e(Fe,GC),e(GC,Tbe),e(Tbe,_4r),e(GC,u4r),e(GC,KX),e(KX,b4r),e(GC,v4r),e(ko,T4r),e(ko,Fbe),e(Fbe,F4r),e(ko,C4r),g(vA,ko,null),b(c,axe,u),b(c,af,u),e(af,OC),e(OC,Cbe),g(TA,Cbe,null),e(af,M4r),e(af,Mbe),e(Mbe,E4r),b(c,nxe,u),b(c,Pr,u),g(FA,Pr,null),e(Pr,y4r),e(Pr,nf),e(nf,w4r),e(nf,Ebe),e(Ebe,A4r),e(nf,L4r),e(nf,ybe),e(ybe,B4r),e(nf,x4r),e(Pr,k4r),e(Pr,CA),e(CA,R4r),e(CA,wbe),e(wbe,S4r),e(CA,P4r),e(Pr,$4r),e(Pr,At),g(MA,At,null),e(At,I4r),e(At,Abe),e(Abe,D4r),e(At,j4r),e(At,sf),e(sf,N4r),e(sf,Lbe),e(Lbe,q4r),e(sf,G4r),e(sf,Bbe),e(Bbe,O4r),e(sf,X4r),e(At,V4r),e(At,xbe),e(xbe,z4r),e(At,W4r),g(EA,At,null),e(Pr,Q4r),e(Pr,Ro),g(yA,Ro,null),e(Ro,H4r),e(Ro,kbe),e(kbe,U4r),e(Ro,J4r),e(Ro,xn),e(xn,Y4r),e(xn,Rbe),e(Rbe,K4r),e(xn,Z4r),e(xn,Sbe),e(Sbe,eMr),e(xn,oMr),e(xn,Pbe),e(Pbe,rMr),e(xn,tMr),e(Ro,aMr),e(Ro,Ce),e(Ce,XC),e(XC,$be),e($be,nMr),e(XC,sMr),e(XC,ZX),e(ZX,lMr),e(XC,iMr),e(Ce,dMr),e(Ce,VC),e(VC,Ibe),e(Ibe,cMr),e(VC,fMr),e(VC,eV),e(eV,mMr),e(VC,gMr),e(Ce,hMr),e(Ce,zC),e(zC,Dbe),e(Dbe,pMr),e(zC,_Mr),e(zC,oV),e(oV,uMr),e(zC,bMr),e(Ce,vMr),e(Ce,WC),e(WC,jbe),e(jbe,TMr),e(WC,FMr),e(WC,rV),e(rV,CMr),e(WC,MMr),e(Ce,EMr),e(Ce,QC),e(QC,Nbe),e(Nbe,yMr),e(QC,wMr),e(QC,tV),e(tV,AMr),e(QC,LMr),e(Ce,BMr),e(Ce,HC),e(HC,qbe),e(qbe,xMr),e(HC,kMr),e(HC,aV),e(aV,RMr),e(HC,SMr),e(Ce,PMr),e(Ce,UC),e(UC,Gbe),e(Gbe,$Mr),e(UC,IMr),e(UC,nV),e(nV,DMr),e(UC,jMr),e(Ce,NMr),e(Ce,JC),e(JC,Obe),e(Obe,qMr),e(JC,GMr),e(JC,sV),e(sV,OMr),e(JC,XMr),e(Ce,VMr),e(Ce,YC),e(YC,Xbe),e(Xbe,zMr),e(YC,WMr),e(YC,lV),e(lV,QMr),e(YC,HMr),e(Ro,UMr),e(Ro,Vbe),e(Vbe,JMr),e(Ro,YMr),g(wA,Ro,null),b(c,sxe,u),b(c,lf,u),e(lf,KC),e(KC,zbe),g(AA,zbe,null),e(lf,KMr),e(lf,Wbe),e(Wbe,ZMr),b(c,lxe,u),b(c,$r,u),g(LA,$r,null),e($r,eEr),e($r,df),e(df,oEr),e(df,Qbe),e(Qbe,rEr),e(df,tEr),e(df,Hbe),e(Hbe,aEr),e(df,nEr),e($r,sEr),e($r,BA),e(BA,lEr),e(BA,Ube),e(Ube,iEr),e(BA,dEr),e($r,cEr),e($r,Lt),g(xA,Lt,null),e(Lt,fEr),e(Lt,Jbe),e(Jbe,mEr),e(Lt,gEr),e(Lt,cf),e(cf,hEr),e(cf,Ybe),e(Ybe,pEr),e(cf,_Er),e(cf,Kbe),e(Kbe,uEr),e(cf,bEr),e(Lt,vEr),e(Lt,Zbe),e(Zbe,TEr),e(Lt,FEr),g(kA,Lt,null),e($r,CEr),e($r,So),g(RA,So,null),e(So,MEr),e(So,e2e),e(e2e,EEr),e(So,yEr),e(So,kn),e(kn,wEr),e(kn,o2e),e(o2e,AEr),e(kn,LEr),e(kn,r2e),e(r2e,BEr),e(kn,xEr),e(kn,t2e),e(t2e,kEr),e(kn,REr),e(So,SEr),e(So,so),e(so,ZC),e(ZC,a2e),e(a2e,PEr),e(ZC,$Er),e(ZC,iV),e(iV,IEr),e(ZC,DEr),e(so,jEr),e(so,e4),e(e4,n2e),e(n2e,NEr),e(e4,qEr),e(e4,dV),e(dV,GEr),e(e4,OEr),e(so,XEr),e(so,o4),e(o4,s2e),e(s2e,VEr),e(o4,zEr),e(o4,cV),e(cV,WEr),e(o4,QEr),e(so,HEr),e(so,r4),e(r4,l2e),e(l2e,UEr),e(r4,JEr),e(r4,fV),e(fV,YEr),e(r4,KEr),e(so,ZEr),e(so,t4),e(t4,i2e),e(i2e,e3r),e(t4,o3r),e(t4,mV),e(mV,r3r),e(t4,t3r),e(so,a3r),e(so,a4),e(a4,d2e),e(d2e,n3r),e(a4,s3r),e(a4,gV),e(gV,l3r),e(a4,i3r),e(so,d3r),e(so,n4),e(n4,c2e),e(c2e,c3r),e(n4,f3r),e(n4,hV),e(hV,m3r),e(n4,g3r),e(So,h3r),e(So,f2e),e(f2e,p3r),e(So,_3r),g(SA,So,null),b(c,ixe,u),b(c,ff,u),e(ff,s4),e(s4,m2e),g(PA,m2e,null),e(ff,u3r),e(ff,g2e),e(g2e,b3r),b(c,dxe,u),b(c,Ir,u),g($A,Ir,null),e(Ir,v3r),e(Ir,mf),e(mf,T3r),e(mf,h2e),e(h2e,F3r),e(mf,C3r),e(mf,p2e),e(p2e,M3r),e(mf,E3r),e(Ir,y3r),e(Ir,IA),e(IA,w3r),e(IA,_2e),e(_2e,A3r),e(IA,L3r),e(Ir,B3r),e(Ir,Bt),g(DA,Bt,null),e(Bt,x3r),e(Bt,u2e),e(u2e,k3r),e(Bt,R3r),e(Bt,gf),e(gf,S3r),e(gf,b2e),e(b2e,P3r),e(gf,$3r),e(gf,v2e),e(v2e,I3r),e(gf,D3r),e(Bt,j3r),e(Bt,T2e),e(T2e,N3r),e(Bt,q3r),g(jA,Bt,null),e(Ir,G3r),e(Ir,Po),g(NA,Po,null),e(Po,O3r),e(Po,F2e),e(F2e,X3r),e(Po,V3r),e(Po,Rn),e(Rn,z3r),e(Rn,C2e),e(C2e,W3r),e(Rn,Q3r),e(Rn,M2e),e(M2e,H3r),e(Rn,U3r),e(Rn,E2e),e(E2e,J3r),e(Rn,Y3r),e(Po,K3r),e(Po,lo),e(lo,l4),e(l4,y2e),e(y2e,Z3r),e(l4,eyr),e(l4,pV),e(pV,oyr),e(l4,ryr),e(lo,tyr),e(lo,i4),e(i4,w2e),e(w2e,ayr),e(i4,nyr),e(i4,_V),e(_V,syr),e(i4,lyr),e(lo,iyr),e(lo,d4),e(d4,A2e),e(A2e,dyr),e(d4,cyr),e(d4,uV),e(uV,fyr),e(d4,myr),e(lo,gyr),e(lo,c4),e(c4,L2e),e(L2e,hyr),e(c4,pyr),e(c4,bV),e(bV,_yr),e(c4,uyr),e(lo,byr),e(lo,f4),e(f4,B2e),e(B2e,vyr),e(f4,Tyr),e(f4,vV),e(vV,Fyr),e(f4,Cyr),e(lo,Myr),e(lo,m4),e(m4,x2e),e(x2e,Eyr),e(m4,yyr),e(m4,TV),e(TV,wyr),e(m4,Ayr),e(lo,Lyr),e(lo,g4),e(g4,k2e),e(k2e,Byr),e(g4,xyr),e(g4,FV),e(FV,kyr),e(g4,Ryr),e(Po,Syr),e(Po,R2e),e(R2e,Pyr),e(Po,$yr),g(qA,Po,null),b(c,cxe,u),b(c,hf,u),e(hf,h4),e(h4,S2e),g(GA,S2e,null),e(hf,Iyr),e(hf,P2e),e(P2e,Dyr),b(c,fxe,u),b(c,Dr,u),g(OA,Dr,null),e(Dr,jyr),e(Dr,pf),e(pf,Nyr),e(pf,$2e),e($2e,qyr),e(pf,Gyr),e(pf,I2e),e(I2e,Oyr),e(pf,Xyr),e(Dr,Vyr),e(Dr,XA),e(XA,zyr),e(XA,D2e),e(D2e,Wyr),e(XA,Qyr),e(Dr,Hyr),e(Dr,xt),g(VA,xt,null),e(xt,Uyr),e(xt,j2e),e(j2e,Jyr),e(xt,Yyr),e(xt,_f),e(_f,Kyr),e(_f,N2e),e(N2e,Zyr),e(_f,ewr),e(_f,q2e),e(q2e,owr),e(_f,rwr),e(xt,twr),e(xt,G2e),e(G2e,awr),e(xt,nwr),g(zA,xt,null),e(Dr,swr),e(Dr,$o),g(WA,$o,null),e($o,lwr),e($o,O2e),e(O2e,iwr),e($o,dwr),e($o,Sn),e(Sn,cwr),e(Sn,X2e),e(X2e,fwr),e(Sn,mwr),e(Sn,V2e),e(V2e,gwr),e(Sn,hwr),e(Sn,z2e),e(z2e,pwr),e(Sn,_wr),e($o,uwr),e($o,W2e),e(W2e,p4),e(p4,Q2e),e(Q2e,bwr),e(p4,vwr),e(p4,CV),e(CV,Twr),e(p4,Fwr),e($o,Cwr),e($o,H2e),e(H2e,Mwr),e($o,Ewr),g(QA,$o,null),b(c,mxe,u),b(c,uf,u),e(uf,_4),e(_4,U2e),g(HA,U2e,null),e(uf,ywr),e(uf,J2e),e(J2e,wwr),b(c,gxe,u),b(c,jr,u),g(UA,jr,null),e(jr,Awr),e(jr,bf),e(bf,Lwr),e(bf,Y2e),e(Y2e,Bwr),e(bf,xwr),e(bf,K2e),e(K2e,kwr),e(bf,Rwr),e(jr,Swr),e(jr,JA),e(JA,Pwr),e(JA,Z2e),e(Z2e,$wr),e(JA,Iwr),e(jr,Dwr),e(jr,kt),g(YA,kt,null),e(kt,jwr),e(kt,eve),e(eve,Nwr),e(kt,qwr),e(kt,vf),e(vf,Gwr),e(vf,ove),e(ove,Owr),e(vf,Xwr),e(vf,rve),e(rve,Vwr),e(vf,zwr),e(kt,Wwr),e(kt,tve),e(tve,Qwr),e(kt,Hwr),g(KA,kt,null),e(jr,Uwr),e(jr,Io),g(ZA,Io,null),e(Io,Jwr),e(Io,ave),e(ave,Ywr),e(Io,Kwr),e(Io,Pn),e(Pn,Zwr),e(Pn,nve),e(nve,e6r),e(Pn,o6r),e(Pn,sve),e(sve,r6r),e(Pn,t6r),e(Pn,lve),e(lve,a6r),e(Pn,n6r),e(Io,s6r),e(Io,e0),e(e0,u4),e(u4,ive),e(ive,l6r),e(u4,i6r),e(u4,MV),e(MV,d6r),e(u4,c6r),e(e0,f6r),e(e0,b4),e(b4,dve),e(dve,m6r),e(b4,g6r),e(b4,EV),e(EV,h6r),e(b4,p6r),e(Io,_6r),e(Io,cve),e(cve,u6r),e(Io,b6r),g(o0,Io,null),b(c,hxe,u),b(c,Tf,u),e(Tf,v4),e(v4,fve),g(r0,fve,null),e(Tf,v6r),e(Tf,mve),e(mve,T6r),b(c,pxe,u),b(c,Nr,u),g(t0,Nr,null),e(Nr,F6r),e(Nr,Ff),e(Ff,C6r),e(Ff,gve),e(gve,M6r),e(Ff,E6r),e(Ff,hve),e(hve,y6r),e(Ff,w6r),e(Nr,A6r),e(Nr,a0),e(a0,L6r),e(a0,pve),e(pve,B6r),e(a0,x6r),e(Nr,k6r),e(Nr,Rt),g(n0,Rt,null),e(Rt,R6r),e(Rt,_ve),e(_ve,S6r),e(Rt,P6r),e(Rt,Cf),e(Cf,$6r),e(Cf,uve),e(uve,I6r),e(Cf,D6r),e(Cf,bve),e(bve,j6r),e(Cf,N6r),e(Rt,q6r),e(Rt,vve),e(vve,G6r),e(Rt,O6r),g(s0,Rt,null),e(Nr,X6r),e(Nr,Do),g(l0,Do,null),e(Do,V6r),e(Do,Tve),e(Tve,z6r),e(Do,W6r),e(Do,$n),e($n,Q6r),e($n,Fve),e(Fve,H6r),e($n,U6r),e($n,Cve),e(Cve,J6r),e($n,Y6r),e($n,Mve),e(Mve,K6r),e($n,Z6r),e(Do,eAr),e(Do,Eve),e(Eve,T4),e(T4,yve),e(yve,oAr),e(T4,rAr),e(T4,yV),e(yV,tAr),e(T4,aAr),e(Do,nAr),e(Do,wve),e(wve,sAr),e(Do,lAr),g(i0,Do,null),_xe=!0},p(c,[u]){const d0={};u&2&&(d0.$$scope={dirty:u,ctx:c}),Bf.$set(d0);const Ave={};u&2&&(Ave.$$scope={dirty:u,ctx:c}),ch.$set(Ave);const Lve={};u&2&&(Lve.$$scope={dirty:u,ctx:c}),Fh.$set(Lve)},i(c){_xe||(h(ce.$$.fragment,c),h($a.$$.fragment,c),h(EM.$$.fragment,c),h(yM.$$.fragment,c),h(Bf.$$.fragment,c),h(wM.$$.fragment,c),h(AM.$$.fragment,c),h(xM.$$.fragment,c),h(kM.$$.fragment,c),h(RM.$$.fragment,c),h(SM.$$.fragment,c),h(PM.$$.fragment,c),h(DM.$$.fragment,c),h(jM.$$.fragment,c),h(NM.$$.fragment,c),h(qM.$$.fragment,c),h(GM.$$.fragment,c),h(VM.$$.fragment,c),h(ch.$$.fragment,c),h(zM.$$.fragment,c),h(WM.$$.fragment,c),h(QM.$$.fragment,c),h(HM.$$.fragment,c),h(YM.$$.fragment,c),h(Fh.$$.fragment,c),h(KM.$$.fragment,c),h(ZM.$$.fragment,c),h(eE.$$.fragment,c),h(oE.$$.fragment,c),h(tE.$$.fragment,c),h(aE.$$.fragment,c),h(nE.$$.fragment,c),h(sE.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(cE.$$.fragment,c),h(fE.$$.fragment,c),h(mE.$$.fragment,c),h(gE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(vE.$$.fragment,c),h(TE.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(jE.$$.fragment,c),h(NE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(D3.$$.fragment,c),h(j3.$$.fragment,c),h(q3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(D6.$$.fragment,c),h(j6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(DA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),_xe=!0)},o(c){p(ce.$$.fragment,c),p($a.$$.fragment,c),p(EM.$$.fragment,c),p(yM.$$.fragment,c),p(Bf.$$.fragment,c),p(wM.$$.fragment,c),p(AM.$$.fragment,c),p(xM.$$.fragment,c),p(kM.$$.fragment,c),p(RM.$$.fragment,c),p(SM.$$.fragment,c),p(PM.$$.fragment,c),p(DM.$$.fragment,c),p(jM.$$.fragment,c),p(NM.$$.fragment,c),p(qM.$$.fragment,c),p(GM.$$.fragment,c),p(VM.$$.fragment,c),p(ch.$$.fragment,c),p(zM.$$.fragment,c),p(WM.$$.fragment,c),p(QM.$$.fragment,c),p(HM.$$.fragment,c),p(YM.$$.fragment,c),p(Fh.$$.fragment,c),p(KM.$$.fragment,c),p(ZM.$$.fragment,c),p(eE.$$.fragment,c),p(oE.$$.fragment,c),p(tE.$$.fragment,c),p(aE.$$.fragment,c),p(nE.$$.fragment,c),p(sE.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(cE.$$.fragment,c),p(fE.$$.fragment,c),p(mE.$$.fragment,c),p(gE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(vE.$$.fragment,c),p(TE.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(wE.$$.fragment,c),p(AE.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(jE.$$.fragment,c),p(NE.$$.fragment,c),p(qE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(B3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(D3.$$.fragment,c),p(j3.$$.fragment,c),p(q3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(jy.$$.fragment,c),p(Ny.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(F6.$$.fragment,c),p(C6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(y6.$$.fragment,c),p(w6.$$.fragment,c),p(L6.$$.fragment,c),p(B6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(D6.$$.fragment,c),p(j6.$$.fragment,c),p(N6.$$.fragment,c),p(q6.$$.fragment,c),p(O6.$$.fragment,c),p(X6.$$.fragment,c),p(V6.$$.fragment,c),p(z6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(DA.$$.fragment,c),p(jA.$$.fragment,c),p(NA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),_xe=!1},d(c){t(J),c&&t(Be),c&&t(ie),_(ce),c&&t(Ef),c&&t(sa),c&&t(ye),c&&t(io),c&&t(wf),_($a,c),c&&t(co),c&&t(ge),c&&t(Oo),c&&t(Ia),c&&t(u8e),c&&t($i),_(EM),c&&t(b8e),c&&t(qn),c&&t(v8e),_(yM,c),c&&t(T8e),c&&t(cL),c&&t(F8e),_(Bf,c),c&&t(C8e),c&&t(Ii),_(wM),c&&t(M8e),c&&t(Xo),_(AM),_(xM),_(kM),_(RM),c&&t(E8e),c&&t(ji),_(SM),c&&t(y8e),c&&t(Vo),_(PM),_(DM),_(jM),_(NM),c&&t(w8e),c&&t(Ni),_(qM),c&&t(A8e),c&&t(zo),_(GM),_(VM),_(ch),_(zM),_(WM),c&&t(L8e),c&&t(qi),_(QM),c&&t(B8e),c&&t(Wo),_(HM),_(YM),_(Fh),_(KM),_(ZM),c&&t(x8e),c&&t(Oi),_(eE),c&&t(k8e),c&&t(Qo),_(oE),_(tE),_(aE),_(nE),_(sE),c&&t(R8e),c&&t(zi),_(lE),c&&t(S8e),c&&t(Ho),_(iE),_(cE),_(fE),_(mE),_(gE),c&&t(P8e),c&&t(Hi),_(hE),c&&t($8e),c&&t(Uo),_(pE),_(uE),_(bE),_(vE),_(TE),c&&t(I8e),c&&t(Yi),_(FE),c&&t(D8e),c&&t(Jo),_(CE),_(EE),_(yE),_(wE),_(AE),c&&t(j8e),c&&t(ed),_(LE),c&&t(N8e),c&&t(Yo),_(BE),_(kE),_(RE),_(SE),_(PE),c&&t(q8e),c&&t(td),_($E),c&&t(G8e),c&&t(Ko),_(IE),_(jE),_(NE),_(qE),_(GE),c&&t(O8e),c&&t(sd),_(OE),c&&t(X8e),c&&t(Zo),_(XE),_(zE),_(WE),_(QE),_(HE),c&&t(V8e),c&&t(dd),_(UE),c&&t(z8e),c&&t(er),_(JE),_(KE),_(ZE),_(e3),_(o3),c&&t(W8e),c&&t(md),_(r3),c&&t(Q8e),c&&t(or),_(t3),_(n3),_(s3),_(l3),_(i3),c&&t(H8e),c&&t(pd),_(d3),c&&t(U8e),c&&t(rr),_(c3),_(m3),_(g3),_(h3),_(p3),c&&t(J8e),c&&t(bd),_(_3),c&&t(Y8e),c&&t(tr),_(u3),_(v3),_(T3),_(F3),_(C3),c&&t(K8e),c&&t(Fd),_(M3),c&&t(Z8e),c&&t(ar),_(E3),_(w3),_(A3),_(L3),_(B3),c&&t(eBe),c&&t(Ed),_(x3),c&&t(oBe),c&&t(nr),_(k3),_(S3),_(P3),_($3),_(I3),c&&t(rBe),c&&t(Ad),_(D3),c&&t(tBe),c&&t(sr),_(j3),_(q3),_(G3),_(O3),_(X3),c&&t(aBe),c&&t(xd),_(V3),c&&t(nBe),c&&t(lr),_(z3),_(Q3),_(H3),_(U3),_(J3),c&&t(sBe),c&&t(Sd),_(Y3),c&&t(lBe),c&&t(ir),_(K3),_(ey),_(oy),_(ry),_(ty),c&&t(iBe),c&&t(Id),_(ay),c&&t(dBe),c&&t(dr),_(ny),_(ly),_(iy),_(dy),_(fy),c&&t(cBe),c&&t(Nd),_(my),c&&t(fBe),c&&t(cr),_(gy),_(py),_(_y),_(uy),_(by),c&&t(mBe),c&&t(Od),_(vy),c&&t(gBe),c&&t(fr),_(Ty),_(Cy),_(My),_(Ey),_(yy),c&&t(hBe),c&&t(Wd),_(wy),c&&t(pBe),c&&t(mr),_(Ay),_(By),_(xy),_(ky),_(Ry),c&&t(_Be),c&&t(Ud),_(Sy),c&&t(uBe),c&&t(gr),_(Py),_(Iy),_(Dy),_(jy),_(Ny),c&&t(bBe),c&&t(Kd),_(qy),c&&t(vBe),c&&t(hr),_(Gy),_(Xy),_(Vy),_(zy),_(Qy),c&&t(TBe),c&&t(oc),_(Hy),c&&t(FBe),c&&t(pr),_(Uy),_(Yy),_(Ky),_(Zy),_(ew),c&&t(CBe),c&&t(ac),_(ow),c&&t(MBe),c&&t(_r),_(rw),_(aw),_(nw),_(sw),_(lw),c&&t(EBe),c&&t(lc),_(iw),c&&t(yBe),c&&t(ur),_(dw),_(fw),_(mw),_(gw),_(hw),c&&t(wBe),c&&t(cc),_(pw),c&&t(ABe),c&&t(br),_(_w),_(bw),_(vw),_(Tw),_(Cw),c&&t(LBe),c&&t(gc),_(Mw),c&&t(BBe),c&&t(vr),_(Ew),_(ww),_(Aw),_(Lw),_(Bw),c&&t(xBe),c&&t(_c),_(xw),c&&t(kBe),c&&t(Tr),_(kw),_(Sw),_(Pw),_($w),_(Iw),c&&t(RBe),c&&t(vc),_(Dw),c&&t(SBe),c&&t(Fr),_(jw),_(qw),_(Gw),_(Ow),_(Xw),c&&t(PBe),c&&t(Cc),_(Vw),c&&t($Be),c&&t(Cr),_(zw),_(Qw),_(Hw),_(Uw),_(Jw),c&&t(IBe),c&&t(yc),_(Yw),c&&t(DBe),c&&t(Mr),_(Kw),_(e6),_(o6),_(r6),_(t6),c&&t(jBe),c&&t(Lc),_(a6),c&&t(NBe),c&&t(Er),_(n6),_(l6),_(i6),_(d6),_(c6),c&&t(qBe),c&&t(kc),_(f6),c&&t(GBe),c&&t(yr),_(m6),_(h6),_(p6),_(_6),_(u6),c&&t(OBe),c&&t(Pc),_(b6),c&&t(XBe),c&&t(wr),_(v6),_(F6),_(C6),_(M6),_(E6),c&&t(VBe),c&&t(Dc),_(y6),c&&t(zBe),c&&t(Ar),_(w6),_(L6),_(B6),_(x6),_(k6),c&&t(WBe),c&&t(qc),_(R6),c&&t(QBe),c&&t(Lr),_(S6),_($6),_(I6),_(D6),_(j6),c&&t(HBe),c&&t(Xc),_(N6),c&&t(UBe),c&&t(Br),_(q6),_(O6),_(X6),_(V6),_(z6),c&&t(JBe),c&&t(Wc),_(W6),c&&t(YBe),c&&t(xr),_(Q6),_(U6),_(J6),_(Y6),_(K6),c&&t(KBe),c&&t(Uc),_(Z6),c&&t(ZBe),c&&t(kr),_(eA),_(rA),_(tA),_(aA),_(nA),c&&t(exe),c&&t(Kc),_(sA),c&&t(oxe),c&&t(Rr),_(lA),_(dA),_(cA),_(fA),_(mA),c&&t(rxe),c&&t(of),_(gA),c&&t(txe),c&&t(Sr),_(hA),_(_A),_(uA),_(bA),_(vA),c&&t(axe),c&&t(af),_(TA),c&&t(nxe),c&&t(Pr),_(FA),_(MA),_(EA),_(yA),_(wA),c&&t(sxe),c&&t(lf),_(AA),c&&t(lxe),c&&t($r),_(LA),_(xA),_(kA),_(RA),_(SA),c&&t(ixe),c&&t(ff),_(PA),c&&t(dxe),c&&t(Ir),_($A),_(DA),_(jA),_(NA),_(qA),c&&t(cxe),c&&t(hf),_(GA),c&&t(fxe),c&&t(Dr),_(OA),_(VA),_(zA),_(WA),_(QA),c&&t(mxe),c&&t(uf),_(HA),c&&t(gxe),c&&t(jr),_(UA),_(YA),_(KA),_(ZA),_(o0),c&&t(hxe),c&&t(Tf),_(r0),c&&t(pxe),c&&t(Nr),_(t0),_(n0),_(s0),_(l0),_(i0)}}}const J1t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Y1t(Ai,J,Be){let{fw:ie}=J;return Ai.$$set=me=>{"fw"in me&&Be(0,ie=me.fw)},[ie]}class abt extends O1t{constructor(J){super();X1t(this,J,Y1t,U1t,V1t,{fw:0})}}export{abt as default,J1t as metadata};
