import{S as ro,i as no,s as oo,e as n,k as i,w as c,t as f,M as ao,c as o,d as r,m as l,a,x as h,h as m,b as s,F as t,g as d,y as g,L as so,q as u,o as _,B as v,v as io}from"../../chunks/vendor-6b77c823.js";import{D as b}from"../../chunks/Docstring-1088f2fb.js";import{I as Oe}from"../../chunks/IconCopyLink-7a11ce68.js";function lo(hn){let C,mt,P,A,Me,te,Jt,Ie,Kt,pt,D,Qt,We,Yt,Zt,dt,M,er,Ce,tr,rr,ct,k,I,Le,re,nr,Xe,or,ht,Pe,ar,gt,E,ke,sr,Ne,ir,lr,Te,fr,Se,mr,pr,qe,dr,Fe,cr,ut,N,W,Ve,ne,hr,ze,gr,_t,x,oe,ur,He,_r,vr,L,ae,xr,Be,$r,br,X,se,yr,Ue,wr,Er,V,ie,Or,je,Cr,Pr,z,le,kr,Ge,Nr,Tr,H,fe,Sr,Re,qr,vt,T,B,Je,me,Fr,Ke,Ar,xt,w,pe,Dr,U,de,Mr,Qe,Ir,Wr,j,ce,Lr,he,Xr,Ye,Vr,zr,$t,S,G,Ze,ge,Hr,et,Br,bt,ue,_e,yt,q,R,tt,ve,Ur,rt,jr,wt,J,Gr,nt,Rr,Jr,Et,F,K,ot,xe,Kr,at,Qr,Ot,$,$e,Yr,Q,be,Zr,st,en,tn,Y,ye,rn,it,nn,on,Z,we,an,lt,sn,ln,ee,Ee,fn,ft,mn,Ct;return te=new Oe({}),re=new Oe({}),ne=new Oe({}),oe=new b({props:{name:"class transformers.onnx.OnnxConfig",anchor:"transformers.onnx.OnnxConfig",parameters:[{name:"config",val:": PretrainedConfig"},{name:"task",val:": str = 'default'"},{name:"patching_specs",val:": typing.List[transformers.onnx.config.PatchingSpec] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L67"}}),ae=new b({props:{name:"flatten_output_collection_property",anchor:"transformers.onnx.OnnxConfig.flatten_output_collection_property",parameters:[{name:"name",val:": str"},{name:"field",val:": typing.Iterable[typing.Any]"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L354",returnDescription:`
<p>Outputs with flattened structure and key mapping this new structure.</p>
`,returnType:`
<p>(Dict[str, Any])</p>
`}}),se=new b({props:{name:"from_model_config",anchor:"transformers.onnx.OnnxConfig.from_model_config",parameters:[{name:"config",val:": PretrainedConfig"},{name:"task",val:": str = 'default'"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L106",returnDescription:`
<p>OnnxConfig for this model</p>
`}}),ie=new b({props:{name:"generate_dummy_inputs",anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs",parameters:[{name:"preprocessor",val:": typing.Union[ForwardRef('PreTrainedTokenizerBase'), ForwardRef('FeatureExtractionMixin')]"},{name:"batch_size",val:": int = -1"},{name:"seq_length",val:": int = -1"},{name:"num_choices",val:": int = -1"},{name:"is_pair",val:": bool = False"},{name:"framework",val:": typing.Optional[transformers.utils.generic.TensorType] = None"},{name:"num_channels",val:": int = 3"},{name:"image_width",val:": int = 40"},{name:"image_height",val:": int = 40"},{name:"tokenizer",val:": PreTrainedTokenizerBase = None"}],parametersDescription:[{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
The batch size to export the model for (-1 means dynamic axis).`,name:"batch_size"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.num_choices",description:`<strong>num_choices</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
The number of candidate answers provided for multiple choice task (-1 means dynamic axis).`,name:"num_choices"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.seq_length",description:`<strong>seq_length</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
The sequence length to export the model for (-1 means dynamic axis).`,name:"seq_length"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.is_pair",description:`<strong>is_pair</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Indicate if the input is a pair (sentence 1, sentence 2)`,name:"is_pair"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.framework",description:`<strong>framework</strong> (<code>TensorType</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The framework (PyTorch or TensorFlow) that the tokenizer will generate tensors for.`,name:"framework"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of channels of the generated images.`,name:"num_channels"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.image_width",description:`<strong>image_width</strong> (<code>int</code>, <em>optional</em>, defaults to 40) &#x2014;
The width of the generated images.`,name:"image_width"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.image_height",description:`<strong>image_height</strong> (<code>int</code>, <em>optional</em>, defaults to 40) &#x2014;
The height of the generated images.`,name:"image_height"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L257",returnDescription:`
<p>Mapping[str, Tensor] holding the kwargs to provide to the model\u2019s forward function</p>
`}}),le=new b({props:{name:"install_patching_spec",anchor:"transformers.onnx.OnnxConfig.install_patching_spec",parameters:[{name:"spec",val:": PatchingSpec"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L246"}}),fe=new b({props:{name:"use_external_data_format",anchor:"transformers.onnx.OnnxConfig.use_external_data_format",parameters:[{name:"num_parameters",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L220",returnDescription:`
<p>True if model.num_parameters() * size_of(float32) >= 2Gb False otherwise</p>
`}}),me=new Oe({}),pe=new b({props:{name:"class transformers.onnx.OnnxConfigWithPast",anchor:"transformers.onnx.OnnxConfigWithPast",parameters:[{name:"config",val:": PretrainedConfig"},{name:"task",val:": str = 'default'"},{name:"patching_specs",val:": typing.List[transformers.onnx.config.PatchingSpec] = None"},{name:"use_past",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L373"}}),de=new b({props:{name:"fill_with_past_key_values_",anchor:"transformers.onnx.OnnxConfigWithPast.fill_with_past_key_values_",parameters:[{name:"inputs_or_outputs",val:": typing.Mapping[str, typing.Mapping[int, str]]"},{name:"direction",val:": str"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L478"}}),ce=new b({props:{name:"with_past",anchor:"transformers.onnx.OnnxConfigWithPast.with_past",parameters:[{name:"config",val:": PretrainedConfig"},{name:"task",val:": str = 'default'"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L384",returnDescription:`
<p>OnnxConfig with <code>.use_past = True</code></p>
`}}),ge=new Oe({}),_e=new b({props:{name:"class transformers.onnx.OnnxSeq2SeqConfigWithPast",anchor:"transformers.onnx.OnnxSeq2SeqConfigWithPast",parameters:[{name:"config",val:": PretrainedConfig"},{name:"task",val:": str = 'default'"},{name:"patching_specs",val:": typing.List[transformers.onnx.config.PatchingSpec] = None"},{name:"use_past",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/config.py#L509"}}),ve=new Oe({}),xe=new Oe({}),$e=new b({props:{name:"class transformers.onnx.FeaturesManager",anchor:"transformers.onnx.FeaturesManager",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/features.py#L95"}}),be=new b({props:{name:"check_supported_model_or_raise",anchor:"transformers.onnx.FeaturesManager.check_supported_model_or_raise",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, transformers.modeling_tf_utils.TFPreTrainedModel]"},{name:"feature",val:": str = 'default'"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/features.py#L453",returnDescription:`
<p>(str) The type of the model (OnnxConfig) The OnnxConfig instance holding the model export properties.</p>
`}}),ye=new b({props:{name:"get_model_class_for_feature",anchor:"transformers.onnx.FeaturesManager.get_model_class_for_feature",parameters:[{name:"feature",val:": str"},{name:"framework",val:": str = 'pt'"}],parametersDescription:[{anchor:"transformers.onnx.FeaturesManager.get_model_class_for_feature.feature",description:`<strong>feature</strong> (<code>str</code>) &#x2014;
The feature required.`,name:"feature"},{anchor:"transformers.onnx.FeaturesManager.get_model_class_for_feature.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pt&quot;</code>) &#x2014;
The framework to use for the export.`,name:"framework"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/features.py#L397",returnDescription:`
<p>The AutoModel class corresponding to the feature.</p>
`}}),we=new b({props:{name:"get_model_from_feature",anchor:"transformers.onnx.FeaturesManager.get_model_from_feature",parameters:[{name:"feature",val:": str"},{name:"model",val:": str"},{name:"framework",val:": str = 'pt'"},{name:"cache_dir",val:": str = None"}],parametersDescription:[{anchor:"transformers.onnx.FeaturesManager.get_model_from_feature.feature",description:`<strong>feature</strong> (<code>str</code>) &#x2014;
The feature required.`,name:"feature"},{anchor:"transformers.onnx.FeaturesManager.get_model_from_feature.model",description:`<strong>model</strong> (<code>str</code>) &#x2014;
The name of the model to export.`,name:"model"},{anchor:"transformers.onnx.FeaturesManager.get_model_from_feature.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pt&quot;</code>) &#x2014;
The framework to use for the export.`,name:"framework"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/features.py#L424",returnDescription:`
<p>The instance of the model.</p>
`}}),Ee=new b({props:{name:"get_supported_features_for_model_type",anchor:"transformers.onnx.FeaturesManager.get_supported_features_for_model_type",parameters:[{name:"model_type",val:": str"},{name:"model_name",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"transformers.onnx.FeaturesManager.get_supported_features_for_model_type.model_type",description:`<strong>model_type</strong> (<code>str</code>) &#x2014;
The model type to retrieve the supported features for.`,name:"model_type"},{anchor:"transformers.onnx.FeaturesManager.get_supported_features_for_model_type.model_name",description:`<strong>model_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name attribute of the model object, only used for the exception message.`,name:"model_name"}],source:"https://github.com/huggingface/transformers/blob/vr_16754/src/transformers/onnx/features.py#L352",returnDescription:`
<p>The dictionary mapping each feature to a corresponding OnnxConfig constructor.</p>
`}}),{c(){C=n("meta"),mt=i(),P=n("h1"),A=n("a"),Me=n("span"),c(te.$$.fragment),Jt=i(),Ie=n("span"),Kt=f("Exporting \u{1F917} Transformers models to ONNX"),pt=i(),D=n("p"),Qt=f("\u{1F917} Transformers provides a "),We=n("code"),Yt=f("transformers.onnx"),Zt=f(` package that enables you to
convert model checkpoints to an ONNX graph by leveraging configuration objects.`),dt=i(),M=n("p"),er=f("See the "),Ce=n("a"),tr=f("guide"),rr=f(` on exporting \u{1F917} Transformers models for more
details.`),ct=i(),k=n("h2"),I=n("a"),Le=n("span"),c(re.$$.fragment),nr=i(),Xe=n("span"),or=f("ONNX Configurations"),ht=i(),Pe=n("p"),ar=f(`We provide three abstract classes that you should inherit from, depending on the
type of model architecture you wish to export:`),gt=i(),E=n("ul"),ke=n("li"),sr=f("Encoder-based models inherit from "),Ne=n("a"),ir=f("OnnxConfig"),lr=i(),Te=n("li"),fr=f("Decoder-based models inherit from "),Se=n("a"),mr=f("OnnxConfigWithPast"),pr=i(),qe=n("li"),dr=f("Encoder-decoder models inherit from "),Fe=n("a"),cr=f("OnnxSeq2SeqConfigWithPast"),ut=i(),N=n("h3"),W=n("a"),Ve=n("span"),c(ne.$$.fragment),hr=i(),ze=n("span"),gr=f("OnnxConfig"),_t=i(),x=n("div"),c(oe.$$.fragment),ur=i(),He=n("p"),_r=f("Base class for ONNX exportable model describing metadata on how to export the model through the ONNX format."),vr=i(),L=n("div"),c(ae.$$.fragment),xr=i(),Be=n("p"),$r=f(`Flatten any potential nested structure expanding the name of the field with the index of the element within the
structure.`),br=i(),X=n("div"),c(se.$$.fragment),yr=i(),Ue=n("p"),wr=f("Instantiate a OnnxConfig for a specific model"),Er=i(),V=n("div"),c(ie.$$.fragment),Or=i(),je=n("p"),Cr=f("Generate inputs to provide to the ONNX exporter for the specific framework"),Pr=i(),z=n("div"),c(le.$$.fragment),kr=i(),Ge=n("p"),Nr=f(`Append a patching spec after initialization of the configuration
:param spec:
:return:`),Tr=i(),H=n("div"),c(fe.$$.fragment),Sr=i(),Re=n("p"),qr=f("Flag indicating if the model requires using external data format"),vt=i(),T=n("h3"),B=n("a"),Je=n("span"),c(me.$$.fragment),Fr=i(),Ke=n("span"),Ar=f("OnnxConfigWithPast"),xt=i(),w=n("div"),c(pe.$$.fragment),Dr=i(),U=n("div"),c(de.$$.fragment),Mr=i(),Qe=n("p"),Ir=f("Fill the input_or_ouputs mapping with past_key_values dynamic axes considering."),Wr=i(),j=n("div"),c(ce.$$.fragment),Lr=i(),he=n("p"),Xr=f("Instantiate a OnnxConfig with "),Ye=n("code"),Vr=f("use_past"),zr=f(" attribute set to True"),$t=i(),S=n("h3"),G=n("a"),Ze=n("span"),c(ge.$$.fragment),Hr=i(),et=n("span"),Br=f("OnnxSeq2SeqConfigWithPast"),bt=i(),ue=n("div"),c(_e.$$.fragment),yt=i(),q=n("h2"),R=n("a"),tt=n("span"),c(ve.$$.fragment),Ur=i(),rt=n("span"),jr=f("ONNX Features"),wt=i(),J=n("p"),Gr=f("Each ONNX configuration is associated with a set of "),nt=n("em"),Rr=f("features"),Jr=f(` that enable you
to export models for different types of topologies or tasks.`),Et=i(),F=n("h3"),K=n("a"),ot=n("span"),c(xe.$$.fragment),Kr=i(),at=n("span"),Qr=f("FeaturesManager"),Ot=i(),$=n("div"),c($e.$$.fragment),Yr=i(),Q=n("div"),c(be.$$.fragment),Zr=i(),st=n("p"),en=f("Check whether or not the model has the requested features."),tn=i(),Y=n("div"),c(ye.$$.fragment),rn=i(),it=n("p"),nn=f("Attempts to retrieve an AutoModel class from a feature name."),on=i(),Z=n("div"),c(we.$$.fragment),an=i(),lt=n("p"),sn=f("Attempts to retrieve a model from a model\u2019s name and the feature to be enabled."),ln=i(),ee=n("div"),c(Ee.$$.fragment),fn=i(),ft=n("p"),mn=f("Tries to retrieve the feature -> OnnxConfig constructor map from the model type."),this.h()},l(e){const p=ao('[data-svelte="svelte-1phssyn"]',document.head);C=o(p,"META",{name:!0,content:!0}),p.forEach(r),mt=l(e),P=o(e,"H1",{class:!0});var Pt=a(P);A=o(Pt,"A",{id:!0,class:!0,href:!0});var gn=a(A);Me=o(gn,"SPAN",{});var un=a(Me);h(te.$$.fragment,un),un.forEach(r),gn.forEach(r),Jt=l(Pt),Ie=o(Pt,"SPAN",{});var _n=a(Ie);Kt=m(_n,"Exporting \u{1F917} Transformers models to ONNX"),_n.forEach(r),Pt.forEach(r),pt=l(e),D=o(e,"P",{});var kt=a(D);Qt=m(kt,"\u{1F917} Transformers provides a "),We=o(kt,"CODE",{});var vn=a(We);Yt=m(vn,"transformers.onnx"),vn.forEach(r),Zt=m(kt,` package that enables you to
convert model checkpoints to an ONNX graph by leveraging configuration objects.`),kt.forEach(r),dt=l(e),M=o(e,"P",{});var Nt=a(M);er=m(Nt,"See the "),Ce=o(Nt,"A",{href:!0});var xn=a(Ce);tr=m(xn,"guide"),xn.forEach(r),rr=m(Nt,` on exporting \u{1F917} Transformers models for more
details.`),Nt.forEach(r),ct=l(e),k=o(e,"H2",{class:!0});var Tt=a(k);I=o(Tt,"A",{id:!0,class:!0,href:!0});var $n=a(I);Le=o($n,"SPAN",{});var bn=a(Le);h(re.$$.fragment,bn),bn.forEach(r),$n.forEach(r),nr=l(Tt),Xe=o(Tt,"SPAN",{});var yn=a(Xe);or=m(yn,"ONNX Configurations"),yn.forEach(r),Tt.forEach(r),ht=l(e),Pe=o(e,"P",{});var wn=a(Pe);ar=m(wn,`We provide three abstract classes that you should inherit from, depending on the
type of model architecture you wish to export:`),wn.forEach(r),gt=l(e),E=o(e,"UL",{});var Ae=a(E);ke=o(Ae,"LI",{});var pn=a(ke);sr=m(pn,"Encoder-based models inherit from "),Ne=o(pn,"A",{href:!0});var En=a(Ne);ir=m(En,"OnnxConfig"),En.forEach(r),pn.forEach(r),lr=l(Ae),Te=o(Ae,"LI",{});var dn=a(Te);fr=m(dn,"Decoder-based models inherit from "),Se=o(dn,"A",{href:!0});var On=a(Se);mr=m(On,"OnnxConfigWithPast"),On.forEach(r),dn.forEach(r),pr=l(Ae),qe=o(Ae,"LI",{});var cn=a(qe);dr=m(cn,"Encoder-decoder models inherit from "),Fe=o(cn,"A",{href:!0});var Cn=a(Fe);cr=m(Cn,"OnnxSeq2SeqConfigWithPast"),Cn.forEach(r),cn.forEach(r),Ae.forEach(r),ut=l(e),N=o(e,"H3",{class:!0});var St=a(N);W=o(St,"A",{id:!0,class:!0,href:!0});var Pn=a(W);Ve=o(Pn,"SPAN",{});var kn=a(Ve);h(ne.$$.fragment,kn),kn.forEach(r),Pn.forEach(r),hr=l(St),ze=o(St,"SPAN",{});var Nn=a(ze);gr=m(Nn,"OnnxConfig"),Nn.forEach(r),St.forEach(r),_t=l(e),x=o(e,"DIV",{class:!0});var y=a(x);h(oe.$$.fragment,y),ur=l(y),He=o(y,"P",{});var Tn=a(He);_r=m(Tn,"Base class for ONNX exportable model describing metadata on how to export the model through the ONNX format."),Tn.forEach(r),vr=l(y),L=o(y,"DIV",{class:!0});var qt=a(L);h(ae.$$.fragment,qt),xr=l(qt),Be=o(qt,"P",{});var Sn=a(Be);$r=m(Sn,`Flatten any potential nested structure expanding the name of the field with the index of the element within the
structure.`),Sn.forEach(r),qt.forEach(r),br=l(y),X=o(y,"DIV",{class:!0});var Ft=a(X);h(se.$$.fragment,Ft),yr=l(Ft),Ue=o(Ft,"P",{});var qn=a(Ue);wr=m(qn,"Instantiate a OnnxConfig for a specific model"),qn.forEach(r),Ft.forEach(r),Er=l(y),V=o(y,"DIV",{class:!0});var At=a(V);h(ie.$$.fragment,At),Or=l(At),je=o(At,"P",{});var Fn=a(je);Cr=m(Fn,"Generate inputs to provide to the ONNX exporter for the specific framework"),Fn.forEach(r),At.forEach(r),Pr=l(y),z=o(y,"DIV",{class:!0});var Dt=a(z);h(le.$$.fragment,Dt),kr=l(Dt),Ge=o(Dt,"P",{});var An=a(Ge);Nr=m(An,`Append a patching spec after initialization of the configuration
:param spec:
:return:`),An.forEach(r),Dt.forEach(r),Tr=l(y),H=o(y,"DIV",{class:!0});var Mt=a(H);h(fe.$$.fragment,Mt),Sr=l(Mt),Re=o(Mt,"P",{});var Dn=a(Re);qr=m(Dn,"Flag indicating if the model requires using external data format"),Dn.forEach(r),Mt.forEach(r),y.forEach(r),vt=l(e),T=o(e,"H3",{class:!0});var It=a(T);B=o(It,"A",{id:!0,class:!0,href:!0});var Mn=a(B);Je=o(Mn,"SPAN",{});var In=a(Je);h(me.$$.fragment,In),In.forEach(r),Mn.forEach(r),Fr=l(It),Ke=o(It,"SPAN",{});var Wn=a(Ke);Ar=m(Wn,"OnnxConfigWithPast"),Wn.forEach(r),It.forEach(r),xt=l(e),w=o(e,"DIV",{class:!0});var De=a(w);h(pe.$$.fragment,De),Dr=l(De),U=o(De,"DIV",{class:!0});var Wt=a(U);h(de.$$.fragment,Wt),Mr=l(Wt),Qe=o(Wt,"P",{});var Ln=a(Qe);Ir=m(Ln,"Fill the input_or_ouputs mapping with past_key_values dynamic axes considering."),Ln.forEach(r),Wt.forEach(r),Wr=l(De),j=o(De,"DIV",{class:!0});var Lt=a(j);h(ce.$$.fragment,Lt),Lr=l(Lt),he=o(Lt,"P",{});var Xt=a(he);Xr=m(Xt,"Instantiate a OnnxConfig with "),Ye=o(Xt,"CODE",{});var Xn=a(Ye);Vr=m(Xn,"use_past"),Xn.forEach(r),zr=m(Xt," attribute set to True"),Xt.forEach(r),Lt.forEach(r),De.forEach(r),$t=l(e),S=o(e,"H3",{class:!0});var Vt=a(S);G=o(Vt,"A",{id:!0,class:!0,href:!0});var Vn=a(G);Ze=o(Vn,"SPAN",{});var zn=a(Ze);h(ge.$$.fragment,zn),zn.forEach(r),Vn.forEach(r),Hr=l(Vt),et=o(Vt,"SPAN",{});var Hn=a(et);Br=m(Hn,"OnnxSeq2SeqConfigWithPast"),Hn.forEach(r),Vt.forEach(r),bt=l(e),ue=o(e,"DIV",{class:!0});var Bn=a(ue);h(_e.$$.fragment,Bn),Bn.forEach(r),yt=l(e),q=o(e,"H2",{class:!0});var zt=a(q);R=o(zt,"A",{id:!0,class:!0,href:!0});var Un=a(R);tt=o(Un,"SPAN",{});var jn=a(tt);h(ve.$$.fragment,jn),jn.forEach(r),Un.forEach(r),Ur=l(zt),rt=o(zt,"SPAN",{});var Gn=a(rt);jr=m(Gn,"ONNX Features"),Gn.forEach(r),zt.forEach(r),wt=l(e),J=o(e,"P",{});var Ht=a(J);Gr=m(Ht,"Each ONNX configuration is associated with a set of "),nt=o(Ht,"EM",{});var Rn=a(nt);Rr=m(Rn,"features"),Rn.forEach(r),Jr=m(Ht,` that enable you
to export models for different types of topologies or tasks.`),Ht.forEach(r),Et=l(e),F=o(e,"H3",{class:!0});var Bt=a(F);K=o(Bt,"A",{id:!0,class:!0,href:!0});var Jn=a(K);ot=o(Jn,"SPAN",{});var Kn=a(ot);h(xe.$$.fragment,Kn),Kn.forEach(r),Jn.forEach(r),Kr=l(Bt),at=o(Bt,"SPAN",{});var Qn=a(at);Qr=m(Qn,"FeaturesManager"),Qn.forEach(r),Bt.forEach(r),Ot=l(e),$=o(e,"DIV",{class:!0});var O=a($);h($e.$$.fragment,O),Yr=l(O),Q=o(O,"DIV",{class:!0});var Ut=a(Q);h(be.$$.fragment,Ut),Zr=l(Ut),st=o(Ut,"P",{});var Yn=a(st);en=m(Yn,"Check whether or not the model has the requested features."),Yn.forEach(r),Ut.forEach(r),tn=l(O),Y=o(O,"DIV",{class:!0});var jt=a(Y);h(ye.$$.fragment,jt),rn=l(jt),it=o(jt,"P",{});var Zn=a(it);nn=m(Zn,"Attempts to retrieve an AutoModel class from a feature name."),Zn.forEach(r),jt.forEach(r),on=l(O),Z=o(O,"DIV",{class:!0});var Gt=a(Z);h(we.$$.fragment,Gt),an=l(Gt),lt=o(Gt,"P",{});var eo=a(lt);sn=m(eo,"Attempts to retrieve a model from a model\u2019s name and the feature to be enabled."),eo.forEach(r),Gt.forEach(r),ln=l(O),ee=o(O,"DIV",{class:!0});var Rt=a(ee);h(Ee.$$.fragment,Rt),fn=l(Rt),ft=o(Rt,"P",{});var to=a(ft);mn=m(to,"Tries to retrieve the feature -> OnnxConfig constructor map from the model type."),to.forEach(r),Rt.forEach(r),O.forEach(r),this.h()},h(){s(C,"name","hf:doc:metadata"),s(C,"content",JSON.stringify(fo)),s(A,"id","exporting-transformers-models-to-onnx"),s(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(A,"href","#exporting-transformers-models-to-onnx"),s(P,"class","relative group"),s(Ce,"href","../serialization"),s(I,"id","onnx-configurations"),s(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(I,"href","#onnx-configurations"),s(k,"class","relative group"),s(Ne,"href","/docs/transformers/pr_16754/en/main_classes/onnx#transformers.onnx.OnnxConfig"),s(Se,"href","/docs/transformers/pr_16754/en/main_classes/onnx#transformers.onnx.OnnxConfigWithPast"),s(Fe,"href","/docs/transformers/pr_16754/en/main_classes/onnx#transformers.onnx.OnnxSeq2SeqConfigWithPast"),s(W,"id","transformers.onnx.OnnxConfig"),s(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(W,"href","#transformers.onnx.OnnxConfig"),s(N,"class","relative group"),s(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(B,"id","transformers.onnx.OnnxConfigWithPast"),s(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(B,"href","#transformers.onnx.OnnxConfigWithPast"),s(T,"class","relative group"),s(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(G,"id","transformers.onnx.OnnxSeq2SeqConfigWithPast"),s(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(G,"href","#transformers.onnx.OnnxSeq2SeqConfigWithPast"),s(S,"class","relative group"),s(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(R,"id","onnx-features"),s(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(R,"href","#onnx-features"),s(q,"class","relative group"),s(K,"id","transformers.onnx.FeaturesManager"),s(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(K,"href","#transformers.onnx.FeaturesManager"),s(F,"class","relative group"),s(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,p){t(document.head,C),d(e,mt,p),d(e,P,p),t(P,A),t(A,Me),g(te,Me,null),t(P,Jt),t(P,Ie),t(Ie,Kt),d(e,pt,p),d(e,D,p),t(D,Qt),t(D,We),t(We,Yt),t(D,Zt),d(e,dt,p),d(e,M,p),t(M,er),t(M,Ce),t(Ce,tr),t(M,rr),d(e,ct,p),d(e,k,p),t(k,I),t(I,Le),g(re,Le,null),t(k,nr),t(k,Xe),t(Xe,or),d(e,ht,p),d(e,Pe,p),t(Pe,ar),d(e,gt,p),d(e,E,p),t(E,ke),t(ke,sr),t(ke,Ne),t(Ne,ir),t(E,lr),t(E,Te),t(Te,fr),t(Te,Se),t(Se,mr),t(E,pr),t(E,qe),t(qe,dr),t(qe,Fe),t(Fe,cr),d(e,ut,p),d(e,N,p),t(N,W),t(W,Ve),g(ne,Ve,null),t(N,hr),t(N,ze),t(ze,gr),d(e,_t,p),d(e,x,p),g(oe,x,null),t(x,ur),t(x,He),t(He,_r),t(x,vr),t(x,L),g(ae,L,null),t(L,xr),t(L,Be),t(Be,$r),t(x,br),t(x,X),g(se,X,null),t(X,yr),t(X,Ue),t(Ue,wr),t(x,Er),t(x,V),g(ie,V,null),t(V,Or),t(V,je),t(je,Cr),t(x,Pr),t(x,z),g(le,z,null),t(z,kr),t(z,Ge),t(Ge,Nr),t(x,Tr),t(x,H),g(fe,H,null),t(H,Sr),t(H,Re),t(Re,qr),d(e,vt,p),d(e,T,p),t(T,B),t(B,Je),g(me,Je,null),t(T,Fr),t(T,Ke),t(Ke,Ar),d(e,xt,p),d(e,w,p),g(pe,w,null),t(w,Dr),t(w,U),g(de,U,null),t(U,Mr),t(U,Qe),t(Qe,Ir),t(w,Wr),t(w,j),g(ce,j,null),t(j,Lr),t(j,he),t(he,Xr),t(he,Ye),t(Ye,Vr),t(he,zr),d(e,$t,p),d(e,S,p),t(S,G),t(G,Ze),g(ge,Ze,null),t(S,Hr),t(S,et),t(et,Br),d(e,bt,p),d(e,ue,p),g(_e,ue,null),d(e,yt,p),d(e,q,p),t(q,R),t(R,tt),g(ve,tt,null),t(q,Ur),t(q,rt),t(rt,jr),d(e,wt,p),d(e,J,p),t(J,Gr),t(J,nt),t(nt,Rr),t(J,Jr),d(e,Et,p),d(e,F,p),t(F,K),t(K,ot),g(xe,ot,null),t(F,Kr),t(F,at),t(at,Qr),d(e,Ot,p),d(e,$,p),g($e,$,null),t($,Yr),t($,Q),g(be,Q,null),t(Q,Zr),t(Q,st),t(st,en),t($,tn),t($,Y),g(ye,Y,null),t(Y,rn),t(Y,it),t(it,nn),t($,on),t($,Z),g(we,Z,null),t(Z,an),t(Z,lt),t(lt,sn),t($,ln),t($,ee),g(Ee,ee,null),t(ee,fn),t(ee,ft),t(ft,mn),Ct=!0},p:so,i(e){Ct||(u(te.$$.fragment,e),u(re.$$.fragment,e),u(ne.$$.fragment,e),u(oe.$$.fragment,e),u(ae.$$.fragment,e),u(se.$$.fragment,e),u(ie.$$.fragment,e),u(le.$$.fragment,e),u(fe.$$.fragment,e),u(me.$$.fragment,e),u(pe.$$.fragment,e),u(de.$$.fragment,e),u(ce.$$.fragment,e),u(ge.$$.fragment,e),u(_e.$$.fragment,e),u(ve.$$.fragment,e),u(xe.$$.fragment,e),u($e.$$.fragment,e),u(be.$$.fragment,e),u(ye.$$.fragment,e),u(we.$$.fragment,e),u(Ee.$$.fragment,e),Ct=!0)},o(e){_(te.$$.fragment,e),_(re.$$.fragment,e),_(ne.$$.fragment,e),_(oe.$$.fragment,e),_(ae.$$.fragment,e),_(se.$$.fragment,e),_(ie.$$.fragment,e),_(le.$$.fragment,e),_(fe.$$.fragment,e),_(me.$$.fragment,e),_(pe.$$.fragment,e),_(de.$$.fragment,e),_(ce.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(ve.$$.fragment,e),_(xe.$$.fragment,e),_($e.$$.fragment,e),_(be.$$.fragment,e),_(ye.$$.fragment,e),_(we.$$.fragment,e),_(Ee.$$.fragment,e),Ct=!1},d(e){r(C),e&&r(mt),e&&r(P),v(te),e&&r(pt),e&&r(D),e&&r(dt),e&&r(M),e&&r(ct),e&&r(k),v(re),e&&r(ht),e&&r(Pe),e&&r(gt),e&&r(E),e&&r(ut),e&&r(N),v(ne),e&&r(_t),e&&r(x),v(oe),v(ae),v(se),v(ie),v(le),v(fe),e&&r(vt),e&&r(T),v(me),e&&r(xt),e&&r(w),v(pe),v(de),v(ce),e&&r($t),e&&r(S),v(ge),e&&r(bt),e&&r(ue),v(_e),e&&r(yt),e&&r(q),v(ve),e&&r(wt),e&&r(J),e&&r(Et),e&&r(F),v(xe),e&&r(Ot),e&&r($),v($e),v(be),v(ye),v(we),v(Ee)}}}const fo={local:"exporting-transformers-models-to-onnx",sections:[{local:"onnx-configurations",sections:[{local:"transformers.onnx.OnnxConfig",title:"OnnxConfig"},{local:"transformers.onnx.OnnxConfigWithPast",title:"OnnxConfigWithPast"},{local:"transformers.onnx.OnnxSeq2SeqConfigWithPast",title:"OnnxSeq2SeqConfigWithPast"}],title:"ONNX Configurations"},{local:"onnx-features",sections:[{local:"transformers.onnx.FeaturesManager",title:"FeaturesManager"}],title:"ONNX Features"}],title:"Exporting \u{1F917} Transformers models to ONNX"};function mo(hn){return io(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class go extends ro{constructor(C){super();no(this,C,mo,lo,oo,{})}}export{go as default,fo as metadata};
