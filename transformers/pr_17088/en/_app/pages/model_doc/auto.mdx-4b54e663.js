import{S as SCt,i as RCt,s as BCt,e as a,k as l,w as F,t as o,M as PCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as ICt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as LIr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function qCt(L){let g,v,p,m,u,d,h,Mo,ri,tf,Kr,ti,ai,yw,af,Ne,Xe,ni,Mn,Lw,En,Cn,xw,si,wn,$w,li,nf,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ri=a("code"),tf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ti=a("code"),ai=o('"new-model"'),yw=o(")."),af=l(),Ne=a("p"),Xe=o("Likewise, if your "),ni=a("code"),Mn=o("NewModel"),Lw=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),xw=o(`, make sure its
`),si=a("code"),wn=o("config_class"),$w=o(` attribute is set to the same class you use when registering the model (here
`),li=a("code"),nf=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var V9=s(p);m=r(V9,"NewModelConfig"),V9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ii=s(d);h=r(ii,"PretrainedConfig"),ii.forEach(t),Mo=r(Ae,`, make sure its
`),ri=n(Ae,"CODE",{});var X9=s(ri);tf=r(X9,"model_type"),X9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ti=n(Ae,"CODE",{});var z9=s(ti);ai=r(z9,'"new-model"'),z9.forEach(t),yw=r(Ae,")."),Ae.forEach(t),af=i(ze),Ne=n(ze,"P",{});var Eo=s(Ne);Xe=r(Eo,"Likewise, if your "),ni=n(Eo,"CODE",{});var Fa=s(ni);Mn=r(Fa,"NewModel"),Fa.forEach(t),Lw=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var Q9=s(En);Cn=r(Q9,"PreTrainedModel"),Q9.forEach(t),xw=r(Eo,`, make sure its
`),si=n(Eo,"CODE",{});var sf=s(si);wn=r(sf,"config_class"),sf.forEach(t),$w=r(Eo,` attribute is set to the same class you use when registering the model (here
`),li=n(Eo,"CODE",{});var W9=s(li);nf=r(W9,"NewModelConfig"),W9.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ri),e(ri,tf),e(g,Kr),e(g,ti),e(ti,ai),e(g,yw),b(ze,af,Ae),b(ze,Ne,Ae),e(Ne,Xe),e(Ne,ni),e(ni,Mn),e(Ne,Lw),e(Ne,En),e(En,Cn),e(Ne,xw),e(Ne,si),e(si,wn),e(Ne,$w),e(Ne,li),e(li,nf),e(Ne,va)},d(ze){ze&&t(g),ze&&t(af),ze&&t(Ne)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(L){let g,v,p,m,u,d,h,Mo,ri,tf,Kr,ti,ai,yw,af,Ne,Xe,ni,Mn,Lw,En,Cn,xw,si,wn,$w,li,nf,va,ze,Ae,V9,ii,X9,z9,Eo,Fa,Q9,sf,W9,UNe,VBe,di,lf,TZ,kw,JNe,MZ,YNe,XBe,An,KNe,EZ,ZNe,eje,CZ,oje,rje,zBe,Sw,QBe,H9,tje,WBe,df,HBe,ci,cf,wZ,Rw,aje,AZ,nje,UBe,Co,Bw,sje,Pw,lje,U9,ije,dje,cje,Iw,fje,yZ,mje,gje,hje,Mr,qw,pje,LZ,uje,_je,fi,bje,xZ,vje,Fje,$Z,Tje,Mje,Eje,A,ff,kZ,Cje,wje,J9,Aje,yje,Lje,mf,SZ,xje,$je,Y9,kje,Sje,Rje,gf,RZ,Bje,Pje,K9,Ije,qje,Nje,hf,BZ,jje,Dje,Z9,Gje,Oje,Vje,pf,PZ,Xje,zje,e$,Qje,Wje,Hje,uf,IZ,Uje,Jje,o$,Yje,Kje,Zje,_f,qZ,eDe,oDe,r$,rDe,tDe,aDe,bf,NZ,nDe,sDe,t$,lDe,iDe,dDe,vf,jZ,cDe,fDe,a$,mDe,gDe,hDe,Ff,DZ,pDe,uDe,n$,_De,bDe,vDe,Tf,GZ,FDe,TDe,s$,MDe,EDe,CDe,Mf,OZ,wDe,ADe,l$,yDe,LDe,xDe,Ef,VZ,$De,kDe,i$,SDe,RDe,BDe,Cf,XZ,PDe,IDe,d$,qDe,NDe,jDe,wf,zZ,DDe,GDe,c$,ODe,VDe,XDe,Af,QZ,zDe,QDe,f$,WDe,HDe,UDe,yf,WZ,JDe,YDe,m$,KDe,ZDe,eGe,Lf,HZ,oGe,rGe,g$,tGe,aGe,nGe,xf,UZ,sGe,lGe,h$,iGe,dGe,cGe,$f,JZ,fGe,mGe,p$,gGe,hGe,pGe,kf,YZ,uGe,_Ge,u$,bGe,vGe,FGe,Sf,KZ,TGe,MGe,_$,EGe,CGe,wGe,Rf,ZZ,AGe,yGe,b$,LGe,xGe,$Ge,Bf,eee,kGe,SGe,v$,RGe,BGe,PGe,Pf,oee,IGe,qGe,F$,NGe,jGe,DGe,If,ree,GGe,OGe,T$,VGe,XGe,zGe,qf,tee,QGe,WGe,M$,HGe,UGe,JGe,Nf,aee,YGe,KGe,E$,ZGe,eOe,oOe,jf,nee,rOe,tOe,C$,aOe,nOe,sOe,Df,see,lOe,iOe,w$,dOe,cOe,fOe,Gf,lee,mOe,gOe,A$,hOe,pOe,uOe,Of,iee,_Oe,bOe,y$,vOe,FOe,TOe,Vf,dee,MOe,EOe,L$,COe,wOe,AOe,Xf,cee,yOe,LOe,x$,xOe,$Oe,kOe,zf,fee,SOe,ROe,$$,BOe,POe,IOe,Qf,mee,qOe,NOe,k$,jOe,DOe,GOe,Wf,gee,OOe,VOe,S$,XOe,zOe,QOe,Hf,hee,WOe,HOe,R$,UOe,JOe,YOe,Uf,pee,KOe,ZOe,B$,eVe,oVe,rVe,Jf,uee,tVe,aVe,P$,nVe,sVe,lVe,Yf,_ee,iVe,dVe,I$,cVe,fVe,mVe,Kf,bee,gVe,hVe,q$,pVe,uVe,_Ve,Zf,vee,bVe,vVe,N$,FVe,TVe,MVe,em,Fee,EVe,CVe,j$,wVe,AVe,yVe,om,Tee,LVe,xVe,D$,$Ve,kVe,SVe,rm,Mee,RVe,BVe,G$,PVe,IVe,qVe,tm,Eee,NVe,jVe,O$,DVe,GVe,OVe,am,Cee,VVe,XVe,V$,zVe,QVe,WVe,nm,wee,HVe,UVe,X$,JVe,YVe,KVe,sm,Aee,ZVe,eXe,z$,oXe,rXe,tXe,lm,yee,aXe,nXe,Q$,sXe,lXe,iXe,im,Lee,dXe,cXe,W$,fXe,mXe,gXe,dm,xee,hXe,pXe,H$,uXe,_Xe,bXe,cm,$ee,vXe,FXe,U$,TXe,MXe,EXe,fm,kee,CXe,wXe,J$,AXe,yXe,LXe,mm,See,xXe,$Xe,Y$,kXe,SXe,RXe,gm,Ree,BXe,PXe,K$,IXe,qXe,NXe,hm,Bee,jXe,DXe,Z$,GXe,OXe,VXe,pm,Pee,XXe,zXe,ek,QXe,WXe,HXe,um,Iee,UXe,JXe,ok,YXe,KXe,ZXe,_m,qee,eze,oze,rk,rze,tze,aze,bm,Nee,nze,sze,tk,lze,ize,dze,vm,jee,cze,fze,ak,mze,gze,hze,Fm,Dee,pze,uze,nk,_ze,bze,vze,Tm,Gee,Fze,Tze,sk,Mze,Eze,Cze,Mm,Oee,wze,Aze,lk,yze,Lze,xze,Em,Vee,$ze,kze,ik,Sze,Rze,Bze,Cm,Xee,Pze,Ize,dk,qze,Nze,jze,wm,zee,Dze,Gze,ck,Oze,Vze,Xze,Am,Qee,zze,Qze,fk,Wze,Hze,Uze,ym,Wee,Jze,Yze,mk,Kze,Zze,eQe,Lm,Hee,oQe,rQe,gk,tQe,aQe,nQe,xm,Uee,sQe,lQe,hk,iQe,dQe,cQe,$m,Jee,fQe,mQe,pk,gQe,hQe,pQe,km,Yee,uQe,_Qe,uk,bQe,vQe,FQe,Sm,Kee,TQe,MQe,_k,EQe,CQe,wQe,Rm,Zee,AQe,yQe,bk,LQe,xQe,$Qe,Bm,eoe,kQe,SQe,vk,RQe,BQe,PQe,Pm,ooe,IQe,qQe,Fk,NQe,jQe,DQe,Im,roe,GQe,OQe,Tk,VQe,XQe,zQe,qm,toe,QQe,WQe,Mk,HQe,UQe,JQe,Nm,aoe,YQe,KQe,Ek,ZQe,eWe,oWe,jm,noe,rWe,tWe,Ck,aWe,nWe,sWe,Dm,soe,lWe,iWe,wk,dWe,cWe,fWe,Gm,loe,mWe,gWe,Ak,hWe,pWe,uWe,Om,ioe,_We,bWe,yk,vWe,FWe,TWe,Vm,doe,MWe,EWe,Lk,CWe,wWe,AWe,Xm,coe,yWe,LWe,xk,xWe,$We,kWe,zm,foe,SWe,RWe,$k,BWe,PWe,IWe,Qm,moe,qWe,NWe,kk,jWe,DWe,GWe,Wm,goe,OWe,VWe,Sk,XWe,zWe,QWe,Hm,hoe,WWe,HWe,Rk,UWe,JWe,YWe,Um,poe,KWe,ZWe,Bk,eHe,oHe,rHe,Jm,uoe,tHe,aHe,Pk,nHe,sHe,lHe,Ym,_oe,iHe,dHe,Ik,cHe,fHe,mHe,Km,boe,gHe,hHe,qk,pHe,uHe,_He,Zm,voe,bHe,vHe,Nk,FHe,THe,MHe,eg,Foe,EHe,CHe,jk,wHe,AHe,yHe,og,Toe,LHe,xHe,Dk,$He,kHe,SHe,rg,Moe,RHe,BHe,Gk,PHe,IHe,qHe,tg,Eoe,NHe,jHe,Ok,DHe,GHe,OHe,ag,Coe,VHe,XHe,Vk,zHe,QHe,WHe,ng,woe,HHe,UHe,Xk,JHe,YHe,KHe,sg,Aoe,ZHe,eUe,zk,oUe,rUe,tUe,lg,aUe,ig,Nw,nUe,yoe,sUe,JBe,mi,dg,Loe,jw,lUe,xoe,iUe,YBe,wo,Dw,dUe,Gw,cUe,Qk,fUe,mUe,gUe,Ow,hUe,$oe,pUe,uUe,_Ue,Er,Vw,bUe,koe,vUe,FUe,Ta,TUe,Soe,MUe,EUe,Roe,CUe,wUe,Boe,AUe,yUe,LUe,k,yn,Poe,xUe,$Ue,Wk,kUe,SUe,Hk,RUe,BUe,PUe,Ln,Ioe,IUe,qUe,Uk,NUe,jUe,Jk,DUe,GUe,OUe,xn,qoe,VUe,XUe,Yk,zUe,QUe,Kk,WUe,HUe,UUe,cg,Noe,JUe,YUe,Zk,KUe,ZUe,eJe,$n,joe,oJe,rJe,eS,tJe,aJe,oS,nJe,sJe,lJe,fg,Doe,iJe,dJe,rS,cJe,fJe,mJe,mg,Goe,gJe,hJe,tS,pJe,uJe,_Je,gg,Ooe,bJe,vJe,aS,FJe,TJe,MJe,kn,Voe,EJe,CJe,nS,wJe,AJe,sS,yJe,LJe,xJe,Sn,Xoe,$Je,kJe,lS,SJe,RJe,iS,BJe,PJe,IJe,Rn,zoe,qJe,NJe,dS,jJe,DJe,cS,GJe,OJe,VJe,hg,Qoe,XJe,zJe,fS,QJe,WJe,HJe,pg,Woe,UJe,JJe,mS,YJe,KJe,ZJe,Bn,Hoe,eYe,oYe,gS,rYe,tYe,hS,aYe,nYe,sYe,ug,Uoe,lYe,iYe,pS,dYe,cYe,fYe,Pn,Joe,mYe,gYe,uS,hYe,pYe,_S,uYe,_Ye,bYe,In,Yoe,vYe,FYe,bS,TYe,MYe,vS,EYe,CYe,wYe,qn,Koe,AYe,yYe,FS,LYe,xYe,TS,$Ye,kYe,SYe,_g,Zoe,RYe,BYe,MS,PYe,IYe,qYe,Nn,ere,NYe,jYe,ES,DYe,GYe,CS,OYe,VYe,XYe,jn,ore,zYe,QYe,wS,WYe,HYe,AS,UYe,JYe,YYe,Dn,rre,KYe,ZYe,yS,eKe,oKe,LS,rKe,tKe,aKe,Gn,tre,nKe,sKe,xS,lKe,iKe,$S,dKe,cKe,fKe,On,are,mKe,gKe,kS,hKe,pKe,SS,uKe,_Ke,bKe,Vn,nre,vKe,FKe,RS,TKe,MKe,BS,EKe,CKe,wKe,bg,sre,AKe,yKe,PS,LKe,xKe,$Ke,Xn,lre,kKe,SKe,IS,RKe,BKe,qS,PKe,IKe,qKe,vg,ire,NKe,jKe,NS,DKe,GKe,OKe,zn,dre,VKe,XKe,jS,zKe,QKe,DS,WKe,HKe,UKe,Qn,cre,JKe,YKe,GS,KKe,ZKe,OS,eZe,oZe,rZe,Wn,fre,tZe,aZe,VS,nZe,sZe,XS,lZe,iZe,dZe,Hn,mre,cZe,fZe,zS,mZe,gZe,QS,hZe,pZe,uZe,Un,gre,_Ze,bZe,WS,vZe,FZe,HS,TZe,MZe,EZe,Fg,hre,CZe,wZe,US,AZe,yZe,LZe,Jn,pre,xZe,$Ze,JS,kZe,SZe,YS,RZe,BZe,PZe,Yn,ure,IZe,qZe,KS,NZe,jZe,ZS,DZe,GZe,OZe,Kn,_re,VZe,XZe,eR,zZe,QZe,oR,WZe,HZe,UZe,Zn,bre,JZe,YZe,rR,KZe,ZZe,tR,eeo,oeo,reo,es,vre,teo,aeo,aR,neo,seo,nR,leo,ieo,deo,os,Fre,ceo,feo,sR,meo,geo,lR,heo,peo,ueo,Tg,Tre,_eo,beo,iR,veo,Feo,Teo,rs,Mre,Meo,Eeo,dR,Ceo,weo,cR,Aeo,yeo,Leo,Mg,Ere,xeo,$eo,fR,keo,Seo,Reo,Eg,Cre,Beo,Peo,mR,Ieo,qeo,Neo,ts,wre,jeo,Deo,gR,Geo,Oeo,hR,Veo,Xeo,zeo,as,Are,Qeo,Weo,pR,Heo,Ueo,uR,Jeo,Yeo,Keo,ns,yre,Zeo,eoo,_R,ooo,roo,bR,too,aoo,noo,Cg,Lre,soo,loo,vR,ioo,doo,coo,ss,xre,foo,moo,FR,goo,hoo,TR,poo,uoo,_oo,ls,$re,boo,voo,MR,Foo,Too,ER,Moo,Eoo,Coo,is,kre,woo,Aoo,CR,yoo,Loo,wR,xoo,$oo,koo,ds,Sre,Soo,Roo,AR,Boo,Poo,yR,Ioo,qoo,Noo,cs,Rre,joo,Doo,LR,Goo,Ooo,xR,Voo,Xoo,zoo,fs,Bre,Qoo,Woo,$R,Hoo,Uoo,kR,Joo,Yoo,Koo,ms,Pre,Zoo,ero,SR,oro,rro,RR,tro,aro,nro,wg,Ire,sro,lro,BR,iro,dro,cro,Ag,qre,fro,mro,PR,gro,hro,pro,yg,Nre,uro,_ro,IR,bro,vro,Fro,Lg,jre,Tro,Mro,qR,Ero,Cro,wro,gs,Dre,Aro,yro,NR,Lro,xro,jR,$ro,kro,Sro,xg,Gre,Rro,Bro,DR,Pro,Iro,qro,hs,Ore,Nro,jro,GR,Dro,Gro,OR,Oro,Vro,Xro,ps,Vre,zro,Qro,VR,Wro,Hro,XR,Uro,Jro,Yro,us,Xre,Kro,Zro,zR,eto,oto,QR,rto,tto,ato,_s,zre,nto,sto,WR,lto,ito,HR,dto,cto,fto,bs,Qre,mto,gto,UR,hto,pto,JR,uto,_to,bto,vs,Wre,vto,Fto,YR,Tto,Mto,KR,Eto,Cto,wto,$g,Hre,Ato,yto,ZR,Lto,xto,$to,kg,Ure,kto,Sto,eB,Rto,Bto,Pto,Fs,Jre,Ito,qto,oB,Nto,jto,rB,Dto,Gto,Oto,Ts,Yre,Vto,Xto,tB,zto,Qto,aB,Wto,Hto,Uto,Ms,Kre,Jto,Yto,nB,Kto,Zto,sB,eao,oao,rao,Sg,Zre,tao,aao,lB,nao,sao,lao,Rg,ete,iao,dao,iB,cao,fao,mao,Bg,ote,gao,hao,dB,pao,uao,_ao,Es,rte,bao,vao,cB,Fao,Tao,fB,Mao,Eao,Cao,Pg,tte,wao,Aao,mB,yao,Lao,xao,Ig,ate,$ao,kao,gB,Sao,Rao,Bao,Cs,nte,Pao,Iao,hB,qao,Nao,pB,jao,Dao,Gao,qg,ste,Oao,Vao,uB,Xao,zao,Qao,Ng,lte,Wao,Hao,_B,Uao,Jao,Yao,ws,ite,Kao,Zao,bB,eno,ono,vB,rno,tno,ano,As,dte,nno,sno,FB,lno,ino,TB,dno,cno,fno,ys,cte,mno,gno,MB,hno,pno,EB,uno,_no,bno,Ls,fte,vno,Fno,CB,Tno,Mno,wB,Eno,Cno,wno,jg,Ano,Dg,Xw,yno,mte,Lno,KBe,gi,Gg,gte,zw,xno,hte,$no,ZBe,Ao,Qw,kno,Ww,Sno,AB,Rno,Bno,Pno,Hw,Ino,pte,qno,Nno,jno,Qe,Uw,Dno,ute,Gno,Ono,Ma,Vno,_te,Xno,zno,bte,Qno,Wno,vte,Hno,Uno,Jno,ae,Og,Fte,Yno,Kno,yB,Zno,eso,oso,Vg,Tte,rso,tso,LB,aso,nso,sso,Xg,Mte,lso,iso,xB,dso,cso,fso,zg,Ete,mso,gso,$B,hso,pso,uso,Qg,Cte,_so,bso,kB,vso,Fso,Tso,Wg,wte,Mso,Eso,SB,Cso,wso,Aso,Hg,Ate,yso,Lso,RB,xso,$so,kso,Ug,yte,Sso,Rso,BB,Bso,Pso,Iso,Jg,Lte,qso,Nso,PB,jso,Dso,Gso,Yg,xte,Oso,Vso,IB,Xso,zso,Qso,Kg,$te,Wso,Hso,qB,Uso,Jso,Yso,Zg,kte,Kso,Zso,NB,elo,olo,rlo,eh,Ste,tlo,alo,jB,nlo,slo,llo,oh,Rte,ilo,dlo,DB,clo,flo,mlo,rh,Bte,glo,hlo,GB,plo,ulo,_lo,th,Pte,blo,vlo,OB,Flo,Tlo,Mlo,ah,Ite,Elo,Clo,VB,wlo,Alo,ylo,nh,qte,Llo,xlo,XB,$lo,klo,Slo,sh,Nte,Rlo,Blo,zB,Plo,Ilo,qlo,lh,jte,Nlo,jlo,QB,Dlo,Glo,Olo,ih,Dte,Vlo,Xlo,WB,zlo,Qlo,Wlo,dh,Gte,Hlo,Ulo,HB,Jlo,Ylo,Klo,ch,Ote,Zlo,eio,UB,oio,rio,tio,fh,Vte,aio,nio,JB,sio,lio,iio,mh,dio,gh,cio,hh,Jw,fio,Xte,mio,ePe,hi,ph,zte,Yw,gio,Qte,hio,oPe,yo,Kw,pio,Zw,uio,YB,_io,bio,vio,eA,Fio,Wte,Tio,Mio,Eio,We,oA,Cio,Hte,wio,Aio,pi,yio,Ute,Lio,xio,Jte,$io,kio,Sio,be,uh,Yte,Rio,Bio,KB,Pio,Iio,qio,_h,Kte,Nio,jio,ZB,Dio,Gio,Oio,bh,Zte,Vio,Xio,eP,zio,Qio,Wio,vh,eae,Hio,Uio,oP,Jio,Yio,Kio,Fh,oae,Zio,edo,rP,odo,rdo,tdo,Th,rae,ado,ndo,tP,sdo,ldo,ido,Mh,tae,ddo,cdo,aP,fdo,mdo,gdo,Eh,aae,hdo,pdo,nP,udo,_do,bdo,Ch,nae,vdo,Fdo,sP,Tdo,Mdo,Edo,wh,sae,Cdo,wdo,lP,Ado,ydo,Ldo,Ah,lae,xdo,$do,iP,kdo,Sdo,Rdo,yh,iae,Bdo,Pdo,dP,Ido,qdo,Ndo,Lh,dae,jdo,Ddo,cP,Gdo,Odo,Vdo,xh,cae,Xdo,zdo,fP,Qdo,Wdo,Hdo,$h,Udo,kh,Jdo,Sh,rA,Ydo,fae,Kdo,rPe,ui,Rh,mae,tA,Zdo,gae,eco,tPe,Lo,aA,oco,_i,rco,mP,tco,aco,gP,nco,sco,lco,nA,ico,hae,dco,cco,fco,Zr,sA,mco,pae,gco,hco,bi,pco,uae,uco,_co,hP,bco,vco,Fco,Bh,Tco,He,lA,Mco,_ae,Eco,Cco,Ea,wco,bae,Aco,yco,vae,Lco,xco,Fae,$co,kco,Sco,x,Ph,Tae,Rco,Bco,pP,Pco,Ico,qco,Ih,Mae,Nco,jco,uP,Dco,Gco,Oco,qh,Eae,Vco,Xco,_P,zco,Qco,Wco,Nh,Cae,Hco,Uco,bP,Jco,Yco,Kco,jh,wae,Zco,efo,vP,ofo,rfo,tfo,Dh,Aae,afo,nfo,FP,sfo,lfo,ifo,Gh,yae,dfo,cfo,TP,ffo,mfo,gfo,Oh,Lae,hfo,pfo,MP,ufo,_fo,bfo,Vh,xae,vfo,Ffo,EP,Tfo,Mfo,Efo,Xh,$ae,Cfo,wfo,CP,Afo,yfo,Lfo,zh,kae,xfo,$fo,wP,kfo,Sfo,Rfo,Qh,Sae,Bfo,Pfo,AP,Ifo,qfo,Nfo,Wh,Rae,jfo,Dfo,yP,Gfo,Ofo,Vfo,Hh,Bae,Xfo,zfo,LP,Qfo,Wfo,Hfo,Uh,Pae,Ufo,Jfo,xP,Yfo,Kfo,Zfo,Jh,Iae,emo,omo,$P,rmo,tmo,amo,Yh,qae,nmo,smo,kP,lmo,imo,dmo,Kh,Nae,cmo,fmo,SP,mmo,gmo,hmo,Zh,jae,pmo,umo,RP,_mo,bmo,vmo,ep,Dae,Fmo,Tmo,BP,Mmo,Emo,Cmo,op,Gae,wmo,Amo,PP,ymo,Lmo,xmo,rp,Oae,$mo,kmo,IP,Smo,Rmo,Bmo,tp,Vae,Pmo,Imo,qP,qmo,Nmo,jmo,ap,Xae,Dmo,Gmo,NP,Omo,Vmo,Xmo,np,zae,zmo,Qmo,jP,Wmo,Hmo,Umo,sp,Qae,Jmo,Ymo,DP,Kmo,Zmo,ego,lp,Wae,ogo,rgo,GP,tgo,ago,ngo,ip,Hae,sgo,lgo,OP,igo,dgo,cgo,dp,Uae,fgo,mgo,VP,ggo,hgo,pgo,cp,Jae,ugo,_go,XP,bgo,vgo,Fgo,xs,Yae,Tgo,Mgo,zP,Ego,Cgo,QP,wgo,Ago,ygo,fp,Kae,Lgo,xgo,WP,$go,kgo,Sgo,mp,Zae,Rgo,Bgo,HP,Pgo,Igo,qgo,gp,ene,Ngo,jgo,UP,Dgo,Ggo,Ogo,hp,one,Vgo,Xgo,JP,zgo,Qgo,Wgo,pp,rne,Hgo,Ugo,YP,Jgo,Ygo,Kgo,up,tne,Zgo,eho,KP,oho,rho,tho,_p,ane,aho,nho,ZP,sho,lho,iho,bp,nne,dho,cho,eI,fho,mho,gho,vp,sne,hho,pho,oI,uho,_ho,bho,Fp,lne,vho,Fho,rI,Tho,Mho,Eho,Tp,ine,Cho,who,tI,Aho,yho,Lho,Mp,dne,xho,$ho,aI,kho,Sho,Rho,Ep,cne,Bho,Pho,nI,Iho,qho,Nho,Cp,fne,jho,Dho,sI,Gho,Oho,Vho,wp,mne,Xho,zho,lI,Qho,Who,Hho,Ap,gne,Uho,Jho,iI,Yho,Kho,Zho,yp,hne,epo,opo,dI,rpo,tpo,apo,Lp,pne,npo,spo,cI,lpo,ipo,dpo,xp,une,cpo,fpo,fI,mpo,gpo,hpo,$p,_ne,ppo,upo,mI,_po,bpo,vpo,kp,bne,Fpo,Tpo,gI,Mpo,Epo,Cpo,Sp,vne,wpo,Apo,hI,ypo,Lpo,xpo,Rp,Fne,$po,kpo,pI,Spo,Rpo,Bpo,Bp,Tne,Ppo,Ipo,uI,qpo,Npo,jpo,Pp,Mne,Dpo,Gpo,_I,Opo,Vpo,Xpo,Ip,Ene,zpo,Qpo,bI,Wpo,Hpo,Upo,qp,Cne,Jpo,Ypo,vI,Kpo,Zpo,euo,Np,wne,ouo,ruo,FI,tuo,auo,nuo,jp,Ane,suo,luo,TI,iuo,duo,cuo,Dp,yne,fuo,muo,MI,guo,huo,puo,Gp,Lne,uuo,_uo,EI,buo,vuo,Fuo,Op,xne,Tuo,Muo,CI,Euo,Cuo,wuo,Vp,$ne,Auo,yuo,wI,Luo,xuo,$uo,Xp,kne,kuo,Suo,AI,Ruo,Buo,Puo,zp,Sne,Iuo,quo,yI,Nuo,juo,Duo,Qp,Rne,Guo,Ouo,LI,Vuo,Xuo,zuo,Wp,Bne,Quo,Wuo,xI,Huo,Uuo,Juo,Hp,Pne,Yuo,Kuo,$I,Zuo,e_o,o_o,Up,Ine,r_o,t_o,kI,a_o,n_o,s_o,Jp,qne,l_o,i_o,SI,d_o,c_o,f_o,Yp,Nne,m_o,g_o,RI,h_o,p_o,u_o,Kp,jne,__o,b_o,BI,v_o,F_o,T_o,Zp,Dne,M_o,E_o,PI,C_o,w_o,A_o,eu,Gne,y_o,L_o,II,x_o,$_o,k_o,ou,One,S_o,R_o,qI,B_o,P_o,I_o,ru,Vne,q_o,N_o,NI,j_o,D_o,G_o,tu,Xne,O_o,V_o,jI,X_o,z_o,Q_o,au,zne,W_o,H_o,DI,U_o,J_o,Y_o,nu,Qne,K_o,Z_o,GI,e1o,o1o,r1o,su,Wne,t1o,a1o,OI,n1o,s1o,l1o,lu,Hne,i1o,d1o,VI,c1o,f1o,m1o,iu,Une,g1o,h1o,XI,p1o,u1o,_1o,du,Jne,b1o,v1o,zI,F1o,T1o,M1o,cu,Yne,E1o,C1o,QI,w1o,A1o,y1o,fu,Kne,L1o,x1o,WI,$1o,k1o,S1o,mu,Zne,R1o,B1o,HI,P1o,I1o,q1o,gu,ese,N1o,j1o,UI,D1o,G1o,O1o,hu,ose,V1o,X1o,JI,z1o,Q1o,W1o,pu,rse,H1o,U1o,YI,J1o,Y1o,K1o,uu,tse,Z1o,e8o,KI,o8o,r8o,t8o,_u,ase,a8o,n8o,ZI,s8o,l8o,i8o,bu,nse,d8o,c8o,eq,f8o,m8o,g8o,vu,sse,h8o,p8o,oq,u8o,_8o,b8o,Fu,lse,v8o,F8o,rq,T8o,M8o,E8o,Tu,ise,C8o,w8o,tq,A8o,y8o,L8o,Mu,x8o,dse,$8o,k8o,cse,S8o,R8o,Eu,aPe,vi,Cu,fse,iA,B8o,mse,P8o,nPe,xo,dA,I8o,Fi,q8o,aq,N8o,j8o,nq,D8o,G8o,O8o,cA,V8o,gse,X8o,z8o,Q8o,et,fA,W8o,hse,H8o,U8o,Ti,J8o,pse,Y8o,K8o,sq,Z8o,ebo,obo,wu,rbo,Ue,mA,tbo,use,abo,nbo,Ca,sbo,_se,lbo,ibo,bse,dbo,cbo,vse,fbo,mbo,gbo,G,Au,Fse,hbo,pbo,lq,ubo,_bo,bbo,yu,Tse,vbo,Fbo,iq,Tbo,Mbo,Ebo,Lu,Mse,Cbo,wbo,dq,Abo,ybo,Lbo,xu,Ese,xbo,$bo,cq,kbo,Sbo,Rbo,$u,Cse,Bbo,Pbo,fq,Ibo,qbo,Nbo,ku,wse,jbo,Dbo,mq,Gbo,Obo,Vbo,Su,Ase,Xbo,zbo,gq,Qbo,Wbo,Hbo,Ru,yse,Ubo,Jbo,hq,Ybo,Kbo,Zbo,Bu,Lse,e2o,o2o,pq,r2o,t2o,a2o,Pu,xse,n2o,s2o,uq,l2o,i2o,d2o,Iu,$se,c2o,f2o,_q,m2o,g2o,h2o,qu,kse,p2o,u2o,bq,_2o,b2o,v2o,Nu,Sse,F2o,T2o,vq,M2o,E2o,C2o,ju,Rse,w2o,A2o,Fq,y2o,L2o,x2o,Du,Bse,$2o,k2o,Tq,S2o,R2o,B2o,Gu,Pse,P2o,I2o,Mq,q2o,N2o,j2o,Ou,Ise,D2o,G2o,Eq,O2o,V2o,X2o,Vu,qse,z2o,Q2o,Cq,W2o,H2o,U2o,Xu,Nse,J2o,Y2o,wq,K2o,Z2o,evo,zu,jse,ovo,rvo,Aq,tvo,avo,nvo,Qu,Dse,svo,lvo,yq,ivo,dvo,cvo,Wu,Gse,fvo,mvo,Lq,gvo,hvo,pvo,Hu,Ose,uvo,_vo,xq,bvo,vvo,Fvo,Uu,Vse,Tvo,Mvo,$q,Evo,Cvo,wvo,Ju,Xse,Avo,yvo,kq,Lvo,xvo,$vo,Yu,zse,kvo,Svo,Sq,Rvo,Bvo,Pvo,Ku,Qse,Ivo,qvo,Rq,Nvo,jvo,Dvo,Zu,Wse,Gvo,Ovo,Bq,Vvo,Xvo,zvo,e_,Hse,Qvo,Wvo,Pq,Hvo,Uvo,Jvo,o_,Use,Yvo,Kvo,Iq,Zvo,eFo,oFo,r_,Jse,rFo,tFo,qq,aFo,nFo,sFo,t_,Yse,lFo,iFo,Nq,dFo,cFo,fFo,a_,Kse,mFo,gFo,jq,hFo,pFo,uFo,n_,Zse,_Fo,bFo,Dq,vFo,FFo,TFo,s_,ele,MFo,EFo,Gq,CFo,wFo,AFo,l_,ole,yFo,LFo,Oq,xFo,$Fo,kFo,i_,rle,SFo,RFo,Vq,BFo,PFo,IFo,d_,tle,qFo,NFo,Xq,jFo,DFo,GFo,c_,ale,OFo,VFo,zq,XFo,zFo,QFo,f_,WFo,nle,HFo,UFo,sle,JFo,YFo,m_,sPe,Mi,g_,lle,gA,KFo,ile,ZFo,lPe,$o,hA,e0o,Ei,o0o,Qq,r0o,t0o,Wq,a0o,n0o,s0o,pA,l0o,dle,i0o,d0o,c0o,ot,uA,f0o,cle,m0o,g0o,Ci,h0o,fle,p0o,u0o,Hq,_0o,b0o,v0o,h_,F0o,Je,_A,T0o,mle,M0o,E0o,wa,C0o,gle,w0o,A0o,hle,y0o,L0o,ple,x0o,$0o,k0o,z,p_,ule,S0o,R0o,Uq,B0o,P0o,I0o,u_,_le,q0o,N0o,Jq,j0o,D0o,G0o,__,ble,O0o,V0o,Yq,X0o,z0o,Q0o,b_,vle,W0o,H0o,Kq,U0o,J0o,Y0o,v_,Fle,K0o,Z0o,Zq,eTo,oTo,rTo,F_,Tle,tTo,aTo,eN,nTo,sTo,lTo,T_,Mle,iTo,dTo,oN,cTo,fTo,mTo,M_,Ele,gTo,hTo,rN,pTo,uTo,_To,E_,Cle,bTo,vTo,tN,FTo,TTo,MTo,C_,wle,ETo,CTo,aN,wTo,ATo,yTo,w_,Ale,LTo,xTo,nN,$To,kTo,STo,A_,yle,RTo,BTo,sN,PTo,ITo,qTo,y_,Lle,NTo,jTo,lN,DTo,GTo,OTo,L_,xle,VTo,XTo,iN,zTo,QTo,WTo,x_,$le,HTo,UTo,dN,JTo,YTo,KTo,$_,kle,ZTo,e7o,cN,o7o,r7o,t7o,k_,Sle,a7o,n7o,fN,s7o,l7o,i7o,S_,Rle,d7o,c7o,mN,f7o,m7o,g7o,R_,Ble,h7o,p7o,gN,u7o,_7o,b7o,B_,Ple,v7o,F7o,hN,T7o,M7o,E7o,P_,Ile,C7o,w7o,pN,A7o,y7o,L7o,I_,qle,x7o,$7o,uN,k7o,S7o,R7o,q_,Nle,B7o,P7o,_N,I7o,q7o,N7o,N_,jle,j7o,D7o,bN,G7o,O7o,V7o,j_,Dle,X7o,z7o,vN,Q7o,W7o,H7o,D_,Gle,U7o,J7o,FN,Y7o,K7o,Z7o,G_,Ole,eMo,oMo,TN,rMo,tMo,aMo,O_,Vle,nMo,sMo,MN,lMo,iMo,dMo,V_,Xle,cMo,fMo,EN,mMo,gMo,hMo,X_,zle,pMo,uMo,CN,_Mo,bMo,vMo,z_,Qle,FMo,TMo,wN,MMo,EMo,CMo,Q_,Wle,wMo,AMo,AN,yMo,LMo,xMo,W_,Hle,$Mo,kMo,yN,SMo,RMo,BMo,H_,Ule,PMo,IMo,LN,qMo,NMo,jMo,U_,Jle,DMo,GMo,xN,OMo,VMo,XMo,J_,Yle,zMo,QMo,$N,WMo,HMo,UMo,Y_,JMo,Kle,YMo,KMo,Zle,ZMo,e4o,K_,iPe,wi,Z_,eie,bA,o4o,oie,r4o,dPe,ko,vA,t4o,Ai,a4o,kN,n4o,s4o,SN,l4o,i4o,d4o,FA,c4o,rie,f4o,m4o,g4o,rt,TA,h4o,tie,p4o,u4o,yi,_4o,aie,b4o,v4o,RN,F4o,T4o,M4o,e1,E4o,Ye,MA,C4o,nie,w4o,A4o,Aa,y4o,sie,L4o,x4o,lie,$4o,k4o,iie,S4o,R4o,B4o,Q,o1,die,P4o,I4o,BN,q4o,N4o,j4o,r1,cie,D4o,G4o,PN,O4o,V4o,X4o,t1,fie,z4o,Q4o,IN,W4o,H4o,U4o,a1,mie,J4o,Y4o,qN,K4o,Z4o,eEo,n1,gie,oEo,rEo,NN,tEo,aEo,nEo,s1,hie,sEo,lEo,jN,iEo,dEo,cEo,l1,pie,fEo,mEo,DN,gEo,hEo,pEo,i1,uie,uEo,_Eo,GN,bEo,vEo,FEo,d1,_ie,TEo,MEo,ON,EEo,CEo,wEo,c1,bie,AEo,yEo,VN,LEo,xEo,$Eo,f1,vie,kEo,SEo,XN,REo,BEo,PEo,m1,Fie,IEo,qEo,zN,NEo,jEo,DEo,g1,Tie,GEo,OEo,QN,VEo,XEo,zEo,h1,Mie,QEo,WEo,WN,HEo,UEo,JEo,p1,Eie,YEo,KEo,HN,ZEo,e5o,o5o,u1,Cie,r5o,t5o,UN,a5o,n5o,s5o,_1,wie,l5o,i5o,JN,d5o,c5o,f5o,b1,Aie,m5o,g5o,YN,h5o,p5o,u5o,v1,yie,_5o,b5o,KN,v5o,F5o,T5o,F1,Lie,M5o,E5o,ZN,C5o,w5o,A5o,T1,xie,y5o,L5o,ej,x5o,$5o,k5o,M1,$ie,S5o,R5o,oj,B5o,P5o,I5o,E1,kie,q5o,N5o,rj,j5o,D5o,G5o,C1,Sie,O5o,V5o,tj,X5o,z5o,Q5o,w1,Rie,W5o,H5o,aj,U5o,J5o,Y5o,A1,Bie,K5o,Z5o,nj,eCo,oCo,rCo,y1,Pie,tCo,aCo,sj,nCo,sCo,lCo,L1,Iie,iCo,dCo,lj,cCo,fCo,mCo,x1,qie,gCo,hCo,ij,pCo,uCo,_Co,$1,Nie,bCo,vCo,dj,FCo,TCo,MCo,k1,jie,ECo,CCo,Die,wCo,ACo,yCo,S1,Gie,LCo,xCo,cj,$Co,kCo,SCo,R1,Oie,RCo,BCo,fj,PCo,ICo,qCo,B1,Vie,NCo,jCo,mj,DCo,GCo,OCo,P1,Xie,VCo,XCo,gj,zCo,QCo,WCo,I1,HCo,zie,UCo,JCo,Qie,YCo,KCo,q1,cPe,Li,N1,Wie,EA,ZCo,Hie,e3o,fPe,So,CA,o3o,xi,r3o,hj,t3o,a3o,pj,n3o,s3o,l3o,wA,i3o,Uie,d3o,c3o,f3o,tt,AA,m3o,Jie,g3o,h3o,$i,p3o,Yie,u3o,_3o,uj,b3o,v3o,F3o,j1,T3o,Ke,yA,M3o,Kie,E3o,C3o,ya,w3o,Zie,A3o,y3o,ede,L3o,x3o,ode,$3o,k3o,S3o,he,D1,rde,R3o,B3o,_j,P3o,I3o,q3o,G1,tde,N3o,j3o,bj,D3o,G3o,O3o,O1,ade,V3o,X3o,vj,z3o,Q3o,W3o,V1,nde,H3o,U3o,Fj,J3o,Y3o,K3o,X1,sde,Z3o,ewo,Tj,owo,rwo,two,z1,lde,awo,nwo,Mj,swo,lwo,iwo,Q1,ide,dwo,cwo,Ej,fwo,mwo,gwo,W1,dde,hwo,pwo,Cj,uwo,_wo,bwo,H1,cde,vwo,Fwo,wj,Two,Mwo,Ewo,U1,fde,Cwo,wwo,Aj,Awo,ywo,Lwo,J1,mde,xwo,$wo,yj,kwo,Swo,Rwo,Y1,gde,Bwo,Pwo,Lj,Iwo,qwo,Nwo,K1,hde,jwo,Dwo,xj,Gwo,Owo,Vwo,Z1,pde,Xwo,zwo,$j,Qwo,Wwo,Hwo,e8,ude,Uwo,Jwo,kj,Ywo,Kwo,Zwo,o8,_de,eAo,oAo,Sj,rAo,tAo,aAo,r8,bde,nAo,sAo,Rj,lAo,iAo,dAo,t8,cAo,vde,fAo,mAo,Fde,gAo,hAo,a8,mPe,ki,n8,Tde,LA,pAo,Mde,uAo,gPe,Ro,xA,_Ao,Si,bAo,Bj,vAo,FAo,Pj,TAo,MAo,EAo,$A,CAo,Ede,wAo,AAo,yAo,at,kA,LAo,Cde,xAo,$Ao,Ri,kAo,wde,SAo,RAo,Ij,BAo,PAo,IAo,s8,qAo,Ze,SA,NAo,Ade,jAo,DAo,La,GAo,yde,OAo,VAo,Lde,XAo,zAo,xde,QAo,WAo,HAo,q,l8,$de,UAo,JAo,qj,YAo,KAo,ZAo,i8,kde,e6o,o6o,Nj,r6o,t6o,a6o,d8,Sde,n6o,s6o,jj,l6o,i6o,d6o,c8,Rde,c6o,f6o,Dj,m6o,g6o,h6o,f8,Bde,p6o,u6o,Gj,_6o,b6o,v6o,m8,Pde,F6o,T6o,Oj,M6o,E6o,C6o,g8,Ide,w6o,A6o,Vj,y6o,L6o,x6o,h8,qde,$6o,k6o,Xj,S6o,R6o,B6o,p8,Nde,P6o,I6o,zj,q6o,N6o,j6o,u8,jde,D6o,G6o,Qj,O6o,V6o,X6o,_8,Dde,z6o,Q6o,Wj,W6o,H6o,U6o,b8,Gde,J6o,Y6o,Hj,K6o,Z6o,eyo,v8,Ode,oyo,ryo,Uj,tyo,ayo,nyo,F8,Vde,syo,lyo,Jj,iyo,dyo,cyo,T8,Xde,fyo,myo,Yj,gyo,hyo,pyo,M8,zde,uyo,_yo,Kj,byo,vyo,Fyo,E8,Qde,Tyo,Myo,Zj,Eyo,Cyo,wyo,C8,Wde,Ayo,yyo,eD,Lyo,xyo,$yo,w8,Hde,kyo,Syo,oD,Ryo,Byo,Pyo,A8,Ude,Iyo,qyo,rD,Nyo,jyo,Dyo,y8,Jde,Gyo,Oyo,tD,Vyo,Xyo,zyo,L8,Yde,Qyo,Wyo,aD,Hyo,Uyo,Jyo,x8,Kde,Yyo,Kyo,nD,Zyo,eLo,oLo,$8,Zde,rLo,tLo,sD,aLo,nLo,sLo,k8,ece,lLo,iLo,lD,dLo,cLo,fLo,S8,oce,mLo,gLo,iD,hLo,pLo,uLo,R8,rce,_Lo,bLo,dD,vLo,FLo,TLo,B8,tce,MLo,ELo,cD,CLo,wLo,ALo,P8,ace,yLo,LLo,fD,xLo,$Lo,kLo,I8,nce,SLo,RLo,mD,BLo,PLo,ILo,q8,sce,qLo,NLo,gD,jLo,DLo,GLo,N8,lce,OLo,VLo,hD,XLo,zLo,QLo,j8,ice,WLo,HLo,pD,ULo,JLo,YLo,D8,dce,KLo,ZLo,uD,exo,oxo,rxo,G8,cce,txo,axo,_D,nxo,sxo,lxo,O8,fce,ixo,dxo,bD,cxo,fxo,mxo,V8,mce,gxo,hxo,vD,pxo,uxo,_xo,X8,gce,bxo,vxo,FD,Fxo,Txo,Mxo,z8,hce,Exo,Cxo,TD,wxo,Axo,yxo,Q8,pce,Lxo,xxo,MD,$xo,kxo,Sxo,W8,uce,Rxo,Bxo,ED,Pxo,Ixo,qxo,H8,_ce,Nxo,jxo,CD,Dxo,Gxo,Oxo,U8,bce,Vxo,Xxo,wD,zxo,Qxo,Wxo,J8,vce,Hxo,Uxo,AD,Jxo,Yxo,Kxo,Y8,Fce,Zxo,e9o,yD,o9o,r9o,t9o,K8,Tce,a9o,n9o,LD,s9o,l9o,i9o,Z8,Mce,d9o,c9o,xD,f9o,m9o,g9o,eb,h9o,Ece,p9o,u9o,Cce,_9o,b9o,ob,hPe,Bi,rb,wce,RA,v9o,Ace,F9o,pPe,Bo,BA,T9o,Pi,M9o,$D,E9o,C9o,kD,w9o,A9o,y9o,PA,L9o,yce,x9o,$9o,k9o,nt,IA,S9o,Lce,R9o,B9o,Ii,P9o,xce,I9o,q9o,SD,N9o,j9o,D9o,tb,G9o,eo,qA,O9o,$ce,V9o,X9o,xa,z9o,kce,Q9o,W9o,Sce,H9o,U9o,Rce,J9o,Y9o,K9o,Y,ab,Bce,Z9o,e$o,RD,o$o,r$o,t$o,nb,Pce,a$o,n$o,BD,s$o,l$o,i$o,sb,Ice,d$o,c$o,PD,f$o,m$o,g$o,lb,qce,h$o,p$o,ID,u$o,_$o,b$o,ib,Nce,v$o,F$o,qD,T$o,M$o,E$o,db,jce,C$o,w$o,ND,A$o,y$o,L$o,cb,Dce,x$o,$$o,jD,k$o,S$o,R$o,fb,Gce,B$o,P$o,DD,I$o,q$o,N$o,mb,Oce,j$o,D$o,GD,G$o,O$o,V$o,gb,Vce,X$o,z$o,OD,Q$o,W$o,H$o,hb,Xce,U$o,J$o,VD,Y$o,K$o,Z$o,pb,zce,eko,oko,XD,rko,tko,ako,ub,Qce,nko,sko,zD,lko,iko,dko,_b,Wce,cko,fko,QD,mko,gko,hko,bb,Hce,pko,uko,WD,_ko,bko,vko,vb,Uce,Fko,Tko,HD,Mko,Eko,Cko,Fb,Jce,wko,Ako,UD,yko,Lko,xko,Tb,Yce,$ko,kko,JD,Sko,Rko,Bko,Mb,Kce,Pko,Iko,YD,qko,Nko,jko,Eb,Zce,Dko,Gko,KD,Oko,Vko,Xko,Cb,efe,zko,Qko,ZD,Wko,Hko,Uko,wb,ofe,Jko,Yko,eG,Kko,Zko,eSo,Ab,rfe,oSo,rSo,oG,tSo,aSo,nSo,yb,tfe,sSo,lSo,rG,iSo,dSo,cSo,Lb,afe,fSo,mSo,tG,gSo,hSo,pSo,xb,nfe,uSo,_So,aG,bSo,vSo,FSo,$b,sfe,TSo,MSo,nG,ESo,CSo,wSo,kb,lfe,ASo,ySo,sG,LSo,xSo,$So,Sb,kSo,ife,SSo,RSo,dfe,BSo,PSo,Rb,uPe,qi,Bb,cfe,NA,ISo,ffe,qSo,_Pe,Po,jA,NSo,Ni,jSo,lG,DSo,GSo,iG,OSo,VSo,XSo,DA,zSo,mfe,QSo,WSo,HSo,st,GA,USo,gfe,JSo,YSo,ji,KSo,hfe,ZSo,eRo,dG,oRo,rRo,tRo,Pb,aRo,oo,OA,nRo,pfe,sRo,lRo,$a,iRo,ufe,dRo,cRo,_fe,fRo,mRo,bfe,gRo,hRo,pRo,Ur,Ib,vfe,uRo,_Ro,cG,bRo,vRo,FRo,qb,Ffe,TRo,MRo,fG,ERo,CRo,wRo,Nb,Tfe,ARo,yRo,mG,LRo,xRo,$Ro,jb,Mfe,kRo,SRo,gG,RRo,BRo,PRo,Db,Efe,IRo,qRo,hG,NRo,jRo,DRo,Gb,GRo,Cfe,ORo,VRo,wfe,XRo,zRo,Ob,bPe,Di,Vb,Afe,VA,QRo,yfe,WRo,vPe,Io,XA,HRo,Gi,URo,pG,JRo,YRo,uG,KRo,ZRo,eBo,zA,oBo,Lfe,rBo,tBo,aBo,lt,QA,nBo,xfe,sBo,lBo,Oi,iBo,$fe,dBo,cBo,_G,fBo,mBo,gBo,Xb,hBo,ro,WA,pBo,kfe,uBo,_Bo,ka,bBo,Sfe,vBo,FBo,Rfe,TBo,MBo,Bfe,EBo,CBo,wBo,U,zb,Pfe,ABo,yBo,bG,LBo,xBo,$Bo,Qb,Ife,kBo,SBo,vG,RBo,BBo,PBo,Wb,qfe,IBo,qBo,FG,NBo,jBo,DBo,Hb,Nfe,GBo,OBo,TG,VBo,XBo,zBo,Ub,jfe,QBo,WBo,MG,HBo,UBo,JBo,Jb,Dfe,YBo,KBo,EG,ZBo,ePo,oPo,Yb,Gfe,rPo,tPo,CG,aPo,nPo,sPo,Kb,Ofe,lPo,iPo,wG,dPo,cPo,fPo,Zb,Vfe,mPo,gPo,AG,hPo,pPo,uPo,e2,Xfe,_Po,bPo,yG,vPo,FPo,TPo,o2,zfe,MPo,EPo,LG,CPo,wPo,APo,r2,Qfe,yPo,LPo,xG,xPo,$Po,kPo,t2,Wfe,SPo,RPo,$G,BPo,PPo,IPo,a2,Hfe,qPo,NPo,kG,jPo,DPo,GPo,n2,Ufe,OPo,VPo,SG,XPo,zPo,QPo,s2,Jfe,WPo,HPo,RG,UPo,JPo,YPo,l2,Yfe,KPo,ZPo,BG,eIo,oIo,rIo,i2,Kfe,tIo,aIo,PG,nIo,sIo,lIo,d2,Zfe,iIo,dIo,IG,cIo,fIo,mIo,c2,eme,gIo,hIo,qG,pIo,uIo,_Io,f2,ome,bIo,vIo,NG,FIo,TIo,MIo,m2,rme,EIo,CIo,jG,wIo,AIo,yIo,g2,tme,LIo,xIo,DG,$Io,kIo,SIo,h2,ame,RIo,BIo,GG,PIo,IIo,qIo,p2,nme,NIo,jIo,OG,DIo,GIo,OIo,u2,sme,VIo,XIo,VG,zIo,QIo,WIo,_2,lme,HIo,UIo,XG,JIo,YIo,KIo,b2,ime,ZIo,eqo,zG,oqo,rqo,tqo,v2,dme,aqo,nqo,QG,sqo,lqo,iqo,F2,cme,dqo,cqo,WG,fqo,mqo,gqo,T2,fme,hqo,pqo,HG,uqo,_qo,bqo,M2,mme,vqo,Fqo,UG,Tqo,Mqo,Eqo,E2,gme,Cqo,wqo,JG,Aqo,yqo,Lqo,C2,xqo,hme,$qo,kqo,pme,Sqo,Rqo,w2,FPe,Vi,A2,ume,HA,Bqo,_me,Pqo,TPe,qo,UA,Iqo,Xi,qqo,YG,Nqo,jqo,KG,Dqo,Gqo,Oqo,JA,Vqo,bme,Xqo,zqo,Qqo,it,YA,Wqo,vme,Hqo,Uqo,zi,Jqo,Fme,Yqo,Kqo,ZG,Zqo,eNo,oNo,y2,rNo,to,KA,tNo,Tme,aNo,nNo,Sa,sNo,Mme,lNo,iNo,Eme,dNo,cNo,Cme,fNo,mNo,gNo,O,L2,wme,hNo,pNo,eO,uNo,_No,bNo,x2,Ame,vNo,FNo,oO,TNo,MNo,ENo,$2,yme,CNo,wNo,rO,ANo,yNo,LNo,k2,Lme,xNo,$No,tO,kNo,SNo,RNo,S2,xme,BNo,PNo,aO,INo,qNo,NNo,R2,$me,jNo,DNo,nO,GNo,ONo,VNo,B2,kme,XNo,zNo,sO,QNo,WNo,HNo,P2,Sme,UNo,JNo,lO,YNo,KNo,ZNo,I2,Rme,ejo,ojo,iO,rjo,tjo,ajo,q2,Bme,njo,sjo,dO,ljo,ijo,djo,N2,Pme,cjo,fjo,cO,mjo,gjo,hjo,j2,Ime,pjo,ujo,fO,_jo,bjo,vjo,D2,qme,Fjo,Tjo,mO,Mjo,Ejo,Cjo,G2,Nme,wjo,Ajo,gO,yjo,Ljo,xjo,O2,jme,$jo,kjo,hO,Sjo,Rjo,Bjo,V2,Dme,Pjo,Ijo,pO,qjo,Njo,jjo,X2,Gme,Djo,Gjo,uO,Ojo,Vjo,Xjo,z2,Ome,zjo,Qjo,_O,Wjo,Hjo,Ujo,Q2,Vme,Jjo,Yjo,bO,Kjo,Zjo,eDo,W2,Xme,oDo,rDo,vO,tDo,aDo,nDo,H2,zme,sDo,lDo,FO,iDo,dDo,cDo,U2,Qme,fDo,mDo,TO,gDo,hDo,pDo,J2,Wme,uDo,_Do,MO,bDo,vDo,FDo,Y2,Hme,TDo,MDo,EO,EDo,CDo,wDo,K2,Ume,ADo,yDo,CO,LDo,xDo,$Do,Z2,Jme,kDo,SDo,wO,RDo,BDo,PDo,ev,Yme,IDo,qDo,AO,NDo,jDo,DDo,ov,Kme,GDo,ODo,yO,VDo,XDo,zDo,rv,Zme,QDo,WDo,LO,HDo,UDo,JDo,tv,ege,YDo,KDo,xO,ZDo,eGo,oGo,av,oge,rGo,tGo,$O,aGo,nGo,sGo,nv,rge,lGo,iGo,kO,dGo,cGo,fGo,sv,tge,mGo,gGo,SO,hGo,pGo,uGo,lv,age,_Go,bGo,RO,vGo,FGo,TGo,iv,nge,MGo,EGo,BO,CGo,wGo,AGo,dv,sge,yGo,LGo,PO,xGo,$Go,kGo,cv,lge,SGo,RGo,IO,BGo,PGo,IGo,fv,ige,qGo,NGo,qO,jGo,DGo,GGo,mv,dge,OGo,VGo,NO,XGo,zGo,QGo,gv,WGo,cge,HGo,UGo,fge,JGo,YGo,hv,MPe,Qi,pv,mge,ZA,KGo,gge,ZGo,EPe,No,e6,eOo,Wi,oOo,jO,rOo,tOo,DO,aOo,nOo,sOo,o6,lOo,hge,iOo,dOo,cOo,dt,r6,fOo,pge,mOo,gOo,Hi,hOo,uge,pOo,uOo,GO,_Oo,bOo,vOo,uv,FOo,ao,t6,TOo,_ge,MOo,EOo,Ra,COo,bge,wOo,AOo,vge,yOo,LOo,Fge,xOo,$Oo,kOo,Tge,_v,Mge,SOo,ROo,OO,BOo,POo,IOo,bv,qOo,Ege,NOo,jOo,Cge,DOo,GOo,vv,CPe,Ui,Fv,wge,a6,OOo,Age,VOo,wPe,jo,n6,XOo,Ji,zOo,VO,QOo,WOo,XO,HOo,UOo,JOo,s6,YOo,yge,KOo,ZOo,eVo,ct,l6,oVo,Lge,rVo,tVo,Yi,aVo,xge,nVo,sVo,zO,lVo,iVo,dVo,Tv,cVo,no,i6,fVo,$ge,mVo,gVo,Ba,hVo,kge,pVo,uVo,Sge,_Vo,bVo,Rge,vVo,FVo,TVo,ve,Mv,Bge,MVo,EVo,QO,CVo,wVo,AVo,Ev,Pge,yVo,LVo,WO,xVo,$Vo,kVo,Cv,Ige,SVo,RVo,HO,BVo,PVo,IVo,$s,qge,qVo,NVo,UO,jVo,DVo,JO,GVo,OVo,VVo,wv,Nge,XVo,zVo,YO,QVo,WVo,HVo,ft,jge,UVo,JVo,KO,YVo,KVo,ZO,ZVo,eXo,eV,oXo,rXo,tXo,Av,Dge,aXo,nXo,oV,sXo,lXo,iXo,yv,Gge,dXo,cXo,rV,fXo,mXo,gXo,Lv,Oge,hXo,pXo,tV,uXo,_Xo,bXo,xv,Vge,vXo,FXo,aV,TXo,MXo,EXo,$v,Xge,CXo,wXo,nV,AXo,yXo,LXo,kv,zge,xXo,$Xo,sV,kXo,SXo,RXo,Sv,Qge,BXo,PXo,lV,IXo,qXo,NXo,Rv,jXo,Wge,DXo,GXo,Hge,OXo,VXo,Bv,APe,Ki,Pv,Uge,d6,XXo,Jge,zXo,yPe,Do,c6,QXo,Zi,WXo,iV,HXo,UXo,dV,JXo,YXo,KXo,f6,ZXo,Yge,ezo,ozo,rzo,mt,m6,tzo,Kge,azo,nzo,ed,szo,Zge,lzo,izo,cV,dzo,czo,fzo,Iv,mzo,so,g6,gzo,ehe,hzo,pzo,Pa,uzo,ohe,_zo,bzo,rhe,vzo,Fzo,the,Tzo,Mzo,Ezo,ahe,qv,nhe,Czo,wzo,fV,Azo,yzo,Lzo,Nv,xzo,she,$zo,kzo,lhe,Szo,Rzo,jv,LPe,od,Dv,ihe,h6,Bzo,dhe,Pzo,xPe,Go,p6,Izo,rd,qzo,mV,Nzo,jzo,gV,Dzo,Gzo,Ozo,u6,Vzo,che,Xzo,zzo,Qzo,gt,_6,Wzo,fhe,Hzo,Uzo,td,Jzo,mhe,Yzo,Kzo,hV,Zzo,eQo,oQo,Gv,rQo,lo,b6,tQo,ghe,aQo,nQo,Ia,sQo,hhe,lQo,iQo,phe,dQo,cQo,uhe,fQo,mQo,gQo,je,Ov,_he,hQo,pQo,pV,uQo,_Qo,bQo,Vv,bhe,vQo,FQo,uV,TQo,MQo,EQo,Xv,vhe,CQo,wQo,_V,AQo,yQo,LQo,zv,Fhe,xQo,$Qo,bV,kQo,SQo,RQo,Qv,The,BQo,PQo,vV,IQo,qQo,NQo,Wv,Mhe,jQo,DQo,FV,GQo,OQo,VQo,Hv,Ehe,XQo,zQo,TV,QQo,WQo,HQo,Uv,Che,UQo,JQo,MV,YQo,KQo,ZQo,Jv,eWo,whe,oWo,rWo,Ahe,tWo,aWo,Yv,$Pe,ad,Kv,yhe,v6,nWo,Lhe,sWo,kPe,Oo,F6,lWo,nd,iWo,EV,dWo,cWo,CV,fWo,mWo,gWo,T6,hWo,xhe,pWo,uWo,_Wo,ht,M6,bWo,$he,vWo,FWo,sd,TWo,khe,MWo,EWo,wV,CWo,wWo,AWo,Zv,yWo,io,E6,LWo,She,xWo,$Wo,qa,kWo,Rhe,SWo,RWo,Bhe,BWo,PWo,Phe,IWo,qWo,NWo,Na,eF,Ihe,jWo,DWo,AV,GWo,OWo,VWo,oF,qhe,XWo,zWo,yV,QWo,WWo,HWo,rF,Nhe,UWo,JWo,LV,YWo,KWo,ZWo,tF,jhe,eHo,oHo,xV,rHo,tHo,aHo,aF,nHo,Dhe,sHo,lHo,Ghe,iHo,dHo,nF,SPe,ld,sF,Ohe,C6,cHo,Vhe,fHo,RPe,Vo,w6,mHo,id,gHo,$V,hHo,pHo,kV,uHo,_Ho,bHo,A6,vHo,Xhe,FHo,THo,MHo,pt,y6,EHo,zhe,CHo,wHo,dd,AHo,Qhe,yHo,LHo,SV,xHo,$Ho,kHo,lF,SHo,co,L6,RHo,Whe,BHo,PHo,ja,IHo,Hhe,qHo,NHo,Uhe,jHo,DHo,Jhe,GHo,OHo,VHo,De,iF,Yhe,XHo,zHo,RV,QHo,WHo,HHo,dF,Khe,UHo,JHo,BV,YHo,KHo,ZHo,cF,Zhe,eUo,oUo,PV,rUo,tUo,aUo,fF,epe,nUo,sUo,IV,lUo,iUo,dUo,mF,ope,cUo,fUo,qV,mUo,gUo,hUo,gF,rpe,pUo,uUo,NV,_Uo,bUo,vUo,hF,tpe,FUo,TUo,jV,MUo,EUo,CUo,pF,ape,wUo,AUo,DV,yUo,LUo,xUo,uF,$Uo,npe,kUo,SUo,spe,RUo,BUo,_F,BPe,cd,bF,lpe,x6,PUo,ipe,IUo,PPe,Xo,$6,qUo,fd,NUo,GV,jUo,DUo,OV,GUo,OUo,VUo,k6,XUo,dpe,zUo,QUo,WUo,ut,S6,HUo,cpe,UUo,JUo,md,YUo,fpe,KUo,ZUo,VV,eJo,oJo,rJo,vF,tJo,fo,R6,aJo,mpe,nJo,sJo,Da,lJo,gpe,iJo,dJo,hpe,cJo,fJo,ppe,mJo,gJo,hJo,B6,FF,upe,pJo,uJo,XV,_Jo,bJo,vJo,TF,_pe,FJo,TJo,zV,MJo,EJo,CJo,MF,wJo,bpe,AJo,yJo,vpe,LJo,xJo,EF,IPe,gd,CF,Fpe,P6,$Jo,Tpe,kJo,qPe,zo,I6,SJo,hd,RJo,QV,BJo,PJo,WV,IJo,qJo,NJo,q6,jJo,Mpe,DJo,GJo,OJo,_t,N6,VJo,Epe,XJo,zJo,pd,QJo,Cpe,WJo,HJo,HV,UJo,JJo,YJo,wF,KJo,mo,j6,ZJo,wpe,eYo,oYo,Ga,rYo,Ape,tYo,aYo,ype,nYo,sYo,Lpe,lYo,iYo,dYo,Oa,AF,xpe,cYo,fYo,UV,mYo,gYo,hYo,yF,$pe,pYo,uYo,JV,_Yo,bYo,vYo,LF,kpe,FYo,TYo,YV,MYo,EYo,CYo,xF,Spe,wYo,AYo,KV,yYo,LYo,xYo,$F,$Yo,Rpe,kYo,SYo,Bpe,RYo,BYo,kF,NPe,ud,SF,Ppe,D6,PYo,Ipe,IYo,jPe,Qo,G6,qYo,_d,NYo,ZV,jYo,DYo,eX,GYo,OYo,VYo,O6,XYo,qpe,zYo,QYo,WYo,bt,V6,HYo,Npe,UYo,JYo,bd,YYo,jpe,KYo,ZYo,oX,eKo,oKo,rKo,RF,tKo,go,X6,aKo,Dpe,nKo,sKo,Va,lKo,Gpe,iKo,dKo,Ope,cKo,fKo,Vpe,mKo,gKo,hKo,vd,BF,Xpe,pKo,uKo,rX,_Ko,bKo,vKo,PF,zpe,FKo,TKo,tX,MKo,EKo,CKo,IF,Qpe,wKo,AKo,aX,yKo,LKo,xKo,qF,$Ko,Wpe,kKo,SKo,Hpe,RKo,BKo,NF,DPe,Fd,jF,Upe,z6,PKo,Jpe,IKo,GPe,Wo,Q6,qKo,Td,NKo,nX,jKo,DKo,sX,GKo,OKo,VKo,W6,XKo,Ype,zKo,QKo,WKo,vt,H6,HKo,Kpe,UKo,JKo,Md,YKo,Zpe,KKo,ZKo,lX,eZo,oZo,rZo,DF,tZo,ho,U6,aZo,eue,nZo,sZo,Xa,lZo,oue,iZo,dZo,rue,cZo,fZo,tue,mZo,gZo,hZo,J6,GF,aue,pZo,uZo,iX,_Zo,bZo,vZo,OF,nue,FZo,TZo,dX,MZo,EZo,CZo,VF,wZo,sue,AZo,yZo,lue,LZo,xZo,XF,OPe,Ed,zF,iue,Y6,$Zo,due,kZo,VPe,Ho,K6,SZo,Cd,RZo,cX,BZo,PZo,fX,IZo,qZo,NZo,Z6,jZo,cue,DZo,GZo,OZo,Ft,ey,VZo,fue,XZo,zZo,wd,QZo,mue,WZo,HZo,mX,UZo,JZo,YZo,QF,KZo,po,oy,ZZo,gue,eer,oer,za,rer,hue,ter,aer,pue,ner,ser,uue,ler,ier,der,_ue,WF,bue,cer,fer,gX,mer,ger,her,HF,per,vue,uer,_er,Fue,ber,ver,UF,XPe,Ad,JF,Tue,ry,Fer,Mue,Ter,zPe,Uo,ty,Mer,yd,Eer,hX,Cer,wer,pX,Aer,yer,Ler,ay,xer,Eue,$er,ker,Ser,Tt,ny,Rer,Cue,Ber,Per,Ld,Ier,wue,qer,Ner,uX,jer,Der,Ger,YF,Oer,uo,sy,Ver,Aue,Xer,zer,Qa,Qer,yue,Wer,Her,Lue,Uer,Jer,xue,Yer,Ker,Zer,Wa,KF,$ue,eor,oor,_X,ror,tor,aor,ZF,kue,nor,sor,bX,lor,ior,dor,e0,Sue,cor,mor,vX,gor,hor,por,o0,Rue,uor,_or,FX,bor,vor,For,r0,Tor,Bue,Mor,Eor,Pue,Cor,wor,t0,QPe,xd,a0,Iue,ly,Aor,que,yor,WPe,Jo,iy,Lor,$d,xor,TX,$or,kor,MX,Sor,Ror,Bor,dy,Por,Nue,Ior,qor,Nor,Mt,cy,jor,jue,Dor,Gor,kd,Oor,Due,Vor,Xor,EX,zor,Qor,Wor,n0,Hor,_o,fy,Uor,Gue,Jor,Yor,Ha,Kor,Oue,Zor,err,Vue,orr,rrr,Xue,trr,arr,nrr,zue,s0,Que,srr,lrr,CX,irr,drr,crr,l0,frr,Wue,mrr,grr,Hue,hrr,prr,i0,HPe,Sd,d0,Uue,my,urr,Jue,_rr,UPe,Yo,gy,brr,Rd,vrr,wX,Frr,Trr,AX,Mrr,Err,Crr,hy,wrr,Yue,Arr,yrr,Lrr,Et,py,xrr,Kue,$rr,krr,Bd,Srr,Zue,Rrr,Brr,yX,Prr,Irr,qrr,c0,Nrr,Cr,uy,jrr,e_e,Drr,Grr,Ua,Orr,o_e,Vrr,Xrr,r_e,zrr,Qrr,t_e,Wrr,Hrr,Urr,N,f0,a_e,Jrr,Yrr,LX,Krr,Zrr,etr,m0,n_e,otr,rtr,xX,ttr,atr,ntr,g0,s_e,str,ltr,$X,itr,dtr,ctr,h0,l_e,ftr,mtr,kX,gtr,htr,ptr,p0,i_e,utr,_tr,SX,btr,vtr,Ftr,u0,d_e,Ttr,Mtr,RX,Etr,Ctr,wtr,_0,c_e,Atr,ytr,BX,Ltr,xtr,$tr,b0,f_e,ktr,Str,PX,Rtr,Btr,Ptr,v0,m_e,Itr,qtr,IX,Ntr,jtr,Dtr,F0,g_e,Gtr,Otr,qX,Vtr,Xtr,ztr,T0,h_e,Qtr,Wtr,NX,Htr,Utr,Jtr,M0,p_e,Ytr,Ktr,jX,Ztr,ear,oar,E0,u_e,rar,tar,DX,aar,nar,sar,C0,__e,lar,iar,GX,dar,car,far,w0,b_e,mar,gar,OX,har,par,uar,A0,v_e,_ar,bar,VX,Far,Tar,Mar,y0,F_e,Ear,Car,XX,war,Aar,yar,ks,T_e,Lar,xar,zX,$ar,kar,QX,Sar,Rar,Bar,L0,M_e,Par,Iar,WX,qar,Nar,jar,x0,E_e,Dar,Gar,HX,Oar,Var,Xar,$0,C_e,zar,Qar,UX,War,Har,Uar,k0,w_e,Jar,Yar,JX,Kar,Zar,enr,S0,A_e,onr,rnr,YX,tnr,anr,nnr,R0,y_e,snr,lnr,KX,inr,dnr,cnr,B0,L_e,fnr,mnr,ZX,gnr,hnr,pnr,P0,x_e,unr,_nr,ez,bnr,vnr,Fnr,I0,$_e,Tnr,Mnr,oz,Enr,Cnr,wnr,q0,k_e,Anr,ynr,rz,Lnr,xnr,$nr,N0,S_e,knr,Snr,tz,Rnr,Bnr,Pnr,j0,R_e,Inr,qnr,az,Nnr,jnr,Dnr,D0,B_e,Gnr,Onr,nz,Vnr,Xnr,znr,G0,P_e,Qnr,Wnr,sz,Hnr,Unr,Jnr,O0,I_e,Ynr,Knr,lz,Znr,esr,osr,V0,q_e,rsr,tsr,iz,asr,nsr,ssr,X0,N_e,lsr,isr,dz,dsr,csr,fsr,z0,j_e,msr,gsr,cz,hsr,psr,usr,Q0,D_e,_sr,bsr,fz,vsr,Fsr,Tsr,W0,G_e,Msr,Esr,mz,Csr,wsr,Asr,H0,O_e,ysr,Lsr,gz,xsr,$sr,ksr,U0,V_e,Ssr,Rsr,hz,Bsr,Psr,Isr,J0,X_e,qsr,Nsr,pz,jsr,Dsr,Gsr,Y0,z_e,Osr,Vsr,uz,Xsr,zsr,Qsr,K0,Q_e,Wsr,Hsr,_z,Usr,Jsr,Ysr,Z0,W_e,Ksr,Zsr,bz,elr,olr,rlr,eT,H_e,tlr,alr,vz,nlr,slr,llr,oT,U_e,ilr,dlr,Fz,clr,flr,mlr,rT,JPe,Pd,tT,J_e,_y,glr,Y_e,hlr,YPe,Ko,by,plr,Id,ulr,Tz,_lr,blr,Mz,vlr,Flr,Tlr,vy,Mlr,K_e,Elr,Clr,wlr,Ct,Fy,Alr,Z_e,ylr,Llr,qd,xlr,e1e,$lr,klr,Ez,Slr,Rlr,Blr,aT,Plr,wr,Ty,Ilr,o1e,qlr,Nlr,Ja,jlr,r1e,Dlr,Glr,t1e,Olr,Vlr,a1e,Xlr,zlr,Qlr,ne,nT,n1e,Wlr,Hlr,Cz,Ulr,Jlr,Ylr,sT,s1e,Klr,Zlr,wz,eir,oir,rir,lT,l1e,tir,air,Az,nir,sir,lir,iT,i1e,iir,dir,yz,cir,fir,mir,dT,d1e,gir,hir,Lz,pir,uir,_ir,cT,c1e,bir,vir,xz,Fir,Tir,Mir,fT,f1e,Eir,Cir,$z,wir,Air,yir,mT,m1e,Lir,xir,kz,$ir,kir,Sir,gT,g1e,Rir,Bir,Sz,Pir,Iir,qir,hT,h1e,Nir,jir,Rz,Dir,Gir,Oir,pT,p1e,Vir,Xir,Bz,zir,Qir,Wir,uT,u1e,Hir,Uir,Pz,Jir,Yir,Kir,_T,_1e,Zir,edr,Iz,odr,rdr,tdr,bT,b1e,adr,ndr,qz,sdr,ldr,idr,vT,v1e,ddr,cdr,Nz,fdr,mdr,gdr,FT,F1e,hdr,pdr,jz,udr,_dr,bdr,TT,T1e,vdr,Fdr,Dz,Tdr,Mdr,Edr,MT,M1e,Cdr,wdr,Gz,Adr,ydr,Ldr,ET,E1e,xdr,$dr,Oz,kdr,Sdr,Rdr,CT,C1e,Bdr,Pdr,Vz,Idr,qdr,Ndr,wT,w1e,jdr,Ddr,Xz,Gdr,Odr,Vdr,AT,A1e,Xdr,zdr,zz,Qdr,Wdr,Hdr,yT,y1e,Udr,Jdr,Qz,Ydr,Kdr,Zdr,LT,KPe,Nd,xT,L1e,My,ecr,x1e,ocr,ZPe,Zo,Ey,rcr,jd,tcr,Wz,acr,ncr,Hz,scr,lcr,icr,Cy,dcr,$1e,ccr,fcr,mcr,wt,wy,gcr,k1e,hcr,pcr,Dd,ucr,S1e,_cr,bcr,Uz,vcr,Fcr,Tcr,$T,Mcr,Ar,Ay,Ecr,R1e,Ccr,wcr,Ya,Acr,B1e,ycr,Lcr,P1e,xcr,$cr,I1e,kcr,Scr,Rcr,Te,kT,q1e,Bcr,Pcr,Jz,Icr,qcr,Ncr,ST,N1e,jcr,Dcr,Yz,Gcr,Ocr,Vcr,RT,j1e,Xcr,zcr,Kz,Qcr,Wcr,Hcr,BT,D1e,Ucr,Jcr,Zz,Ycr,Kcr,Zcr,PT,G1e,efr,ofr,eQ,rfr,tfr,afr,IT,O1e,nfr,sfr,oQ,lfr,ifr,dfr,qT,V1e,cfr,ffr,rQ,mfr,gfr,hfr,NT,X1e,pfr,ufr,tQ,_fr,bfr,vfr,jT,z1e,Ffr,Tfr,aQ,Mfr,Efr,Cfr,DT,Q1e,wfr,Afr,nQ,yfr,Lfr,xfr,GT,W1e,$fr,kfr,sQ,Sfr,Rfr,Bfr,OT,H1e,Pfr,Ifr,lQ,qfr,Nfr,jfr,VT,eIe,Gd,XT,U1e,yy,Dfr,J1e,Gfr,oIe,er,Ly,Ofr,Od,Vfr,iQ,Xfr,zfr,dQ,Qfr,Wfr,Hfr,xy,Ufr,Y1e,Jfr,Yfr,Kfr,At,$y,Zfr,K1e,emr,omr,Vd,rmr,Z1e,tmr,amr,cQ,nmr,smr,lmr,zT,imr,yr,ky,dmr,e8e,cmr,fmr,Ka,mmr,o8e,gmr,hmr,r8e,pmr,umr,t8e,_mr,bmr,vmr,Xd,QT,a8e,Fmr,Tmr,fQ,Mmr,Emr,Cmr,WT,n8e,wmr,Amr,mQ,ymr,Lmr,xmr,HT,s8e,$mr,kmr,gQ,Smr,Rmr,Bmr,UT,rIe,zd,JT,l8e,Sy,Pmr,i8e,Imr,tIe,or,Ry,qmr,Qd,Nmr,hQ,jmr,Dmr,pQ,Gmr,Omr,Vmr,By,Xmr,d8e,zmr,Qmr,Wmr,yt,Py,Hmr,c8e,Umr,Jmr,Wd,Ymr,f8e,Kmr,Zmr,uQ,egr,ogr,rgr,YT,tgr,Lr,Iy,agr,m8e,ngr,sgr,Za,lgr,g8e,igr,dgr,h8e,cgr,fgr,p8e,mgr,ggr,hgr,ie,KT,u8e,pgr,ugr,_Q,_gr,bgr,vgr,ZT,_8e,Fgr,Tgr,bQ,Mgr,Egr,Cgr,e7,b8e,wgr,Agr,vQ,ygr,Lgr,xgr,o7,v8e,$gr,kgr,FQ,Sgr,Rgr,Bgr,r7,F8e,Pgr,Igr,TQ,qgr,Ngr,jgr,t7,T8e,Dgr,Ggr,MQ,Ogr,Vgr,Xgr,a7,M8e,zgr,Qgr,EQ,Wgr,Hgr,Ugr,n7,E8e,Jgr,Ygr,CQ,Kgr,Zgr,ehr,s7,C8e,ohr,rhr,wQ,thr,ahr,nhr,l7,w8e,shr,lhr,AQ,ihr,dhr,chr,i7,A8e,fhr,mhr,yQ,ghr,hhr,phr,d7,y8e,uhr,_hr,LQ,bhr,vhr,Fhr,c7,L8e,Thr,Mhr,xQ,Ehr,Chr,whr,f7,x8e,Ahr,yhr,$Q,Lhr,xhr,$hr,m7,$8e,khr,Shr,kQ,Rhr,Bhr,Phr,g7,k8e,Ihr,qhr,SQ,Nhr,jhr,Dhr,h7,S8e,Ghr,Ohr,RQ,Vhr,Xhr,zhr,p7,R8e,Qhr,Whr,BQ,Hhr,Uhr,Jhr,u7,B8e,Yhr,Khr,PQ,Zhr,epr,opr,_7,P8e,rpr,tpr,IQ,apr,npr,spr,b7,aIe,Hd,v7,I8e,qy,lpr,q8e,ipr,nIe,rr,Ny,dpr,Ud,cpr,qQ,fpr,mpr,NQ,gpr,hpr,ppr,jy,upr,N8e,_pr,bpr,vpr,Lt,Dy,Fpr,j8e,Tpr,Mpr,Jd,Epr,D8e,Cpr,wpr,jQ,Apr,ypr,Lpr,F7,xpr,xr,Gy,$pr,G8e,kpr,Spr,en,Rpr,O8e,Bpr,Ppr,V8e,Ipr,qpr,X8e,Npr,jpr,Dpr,ye,T7,z8e,Gpr,Opr,DQ,Vpr,Xpr,zpr,M7,Q8e,Qpr,Wpr,GQ,Hpr,Upr,Jpr,E7,W8e,Ypr,Kpr,OQ,Zpr,eur,our,C7,H8e,rur,tur,VQ,aur,nur,sur,w7,U8e,lur,iur,XQ,dur,cur,fur,A7,J8e,mur,gur,zQ,hur,pur,uur,y7,Y8e,_ur,bur,QQ,vur,Fur,Tur,L7,K8e,Mur,Eur,WQ,Cur,wur,Aur,x7,Z8e,yur,Lur,HQ,xur,$ur,kur,$7,ebe,Sur,Rur,UQ,Bur,Pur,Iur,k7,sIe,Yd,S7,obe,Oy,qur,rbe,Nur,lIe,tr,Vy,jur,Kd,Dur,JQ,Gur,Our,YQ,Vur,Xur,zur,Xy,Qur,tbe,Wur,Hur,Uur,xt,zy,Jur,abe,Yur,Kur,Zd,Zur,nbe,e_r,o_r,KQ,r_r,t_r,a_r,R7,n_r,$r,Qy,s_r,sbe,l_r,i_r,on,d_r,lbe,c_r,f_r,ibe,m_r,g_r,dbe,h_r,p_r,u_r,Z,B7,cbe,__r,b_r,ZQ,v_r,F_r,T_r,P7,fbe,M_r,E_r,eW,C_r,w_r,A_r,I7,mbe,y_r,L_r,oW,x_r,$_r,k_r,q7,gbe,S_r,R_r,rW,B_r,P_r,I_r,N7,hbe,q_r,N_r,tW,j_r,D_r,G_r,j7,pbe,O_r,V_r,aW,X_r,z_r,Q_r,D7,ube,W_r,H_r,nW,U_r,J_r,Y_r,G7,_be,K_r,Z_r,sW,e1r,o1r,r1r,O7,bbe,t1r,a1r,lW,n1r,s1r,l1r,V7,vbe,i1r,d1r,iW,c1r,f1r,m1r,X7,Fbe,g1r,h1r,dW,p1r,u1r,_1r,z7,Tbe,b1r,v1r,cW,F1r,T1r,M1r,Q7,Mbe,E1r,C1r,fW,w1r,A1r,y1r,W7,Ebe,L1r,x1r,mW,$1r,k1r,S1r,H7,Cbe,R1r,B1r,gW,P1r,I1r,q1r,U7,wbe,N1r,j1r,hW,D1r,G1r,O1r,J7,Abe,V1r,X1r,pW,z1r,Q1r,W1r,Y7,ybe,H1r,U1r,uW,J1r,Y1r,K1r,K7,Lbe,Z1r,e8r,_W,o8r,r8r,t8r,Z7,xbe,a8r,n8r,bW,s8r,l8r,i8r,eM,$be,d8r,c8r,vW,f8r,m8r,g8r,oM,kbe,h8r,p8r,FW,u8r,_8r,b8r,rM,Sbe,v8r,F8r,TW,T8r,M8r,E8r,tM,Rbe,C8r,w8r,MW,A8r,y8r,L8r,aM,Bbe,x8r,$8r,EW,k8r,S8r,R8r,nM,Pbe,B8r,P8r,CW,I8r,q8r,N8r,sM,iIe,ec,lM,Ibe,Wy,j8r,qbe,D8r,dIe,ar,Hy,G8r,oc,O8r,wW,V8r,X8r,AW,z8r,Q8r,W8r,Uy,H8r,Nbe,U8r,J8r,Y8r,$t,Jy,K8r,jbe,Z8r,ebr,rc,obr,Dbe,rbr,tbr,yW,abr,nbr,sbr,iM,lbr,kr,Yy,ibr,Gbe,dbr,cbr,rn,fbr,Obe,mbr,gbr,Vbe,hbr,pbr,Xbe,ubr,_br,bbr,pe,dM,zbe,vbr,Fbr,LW,Tbr,Mbr,Ebr,cM,Qbe,Cbr,wbr,xW,Abr,ybr,Lbr,fM,Wbe,xbr,$br,$W,kbr,Sbr,Rbr,mM,Hbe,Bbr,Pbr,kW,Ibr,qbr,Nbr,gM,Ube,jbr,Dbr,SW,Gbr,Obr,Vbr,hM,Jbe,Xbr,zbr,RW,Qbr,Wbr,Hbr,pM,Ybe,Ubr,Jbr,BW,Ybr,Kbr,Zbr,uM,Kbe,e2r,o2r,PW,r2r,t2r,a2r,_M,Zbe,n2r,s2r,IW,l2r,i2r,d2r,bM,e2e,c2r,f2r,qW,m2r,g2r,h2r,vM,o2e,p2r,u2r,NW,_2r,b2r,v2r,FM,r2e,F2r,T2r,jW,M2r,E2r,C2r,TM,t2e,w2r,A2r,DW,y2r,L2r,x2r,MM,a2e,$2r,k2r,GW,S2r,R2r,B2r,EM,n2e,P2r,I2r,OW,q2r,N2r,j2r,CM,s2e,D2r,G2r,VW,O2r,V2r,X2r,wM,l2e,z2r,Q2r,XW,W2r,H2r,U2r,AM,cIe,tc,yM,i2e,Ky,J2r,d2e,Y2r,fIe,nr,Zy,K2r,ac,Z2r,zW,evr,ovr,QW,rvr,tvr,avr,eL,nvr,c2e,svr,lvr,ivr,kt,oL,dvr,f2e,cvr,fvr,nc,mvr,m2e,gvr,hvr,WW,pvr,uvr,_vr,LM,bvr,Sr,rL,vvr,g2e,Fvr,Tvr,tn,Mvr,h2e,Evr,Cvr,p2e,wvr,Avr,u2e,yvr,Lvr,xvr,_2e,xM,b2e,$vr,kvr,HW,Svr,Rvr,Bvr,$M,mIe,sc,kM,v2e,tL,Pvr,F2e,Ivr,gIe,sr,aL,qvr,lc,Nvr,UW,jvr,Dvr,JW,Gvr,Ovr,Vvr,nL,Xvr,T2e,zvr,Qvr,Wvr,St,sL,Hvr,M2e,Uvr,Jvr,ic,Yvr,E2e,Kvr,Zvr,YW,eFr,oFr,rFr,SM,tFr,Rr,lL,aFr,C2e,nFr,sFr,an,lFr,w2e,iFr,dFr,A2e,cFr,fFr,y2e,mFr,gFr,hFr,de,RM,L2e,pFr,uFr,KW,_Fr,bFr,vFr,BM,x2e,FFr,TFr,ZW,MFr,EFr,CFr,PM,$2e,wFr,AFr,eH,yFr,LFr,xFr,IM,k2e,$Fr,kFr,oH,SFr,RFr,BFr,qM,S2e,PFr,IFr,rH,qFr,NFr,jFr,NM,R2e,DFr,GFr,tH,OFr,VFr,XFr,jM,B2e,zFr,QFr,aH,WFr,HFr,UFr,DM,P2e,JFr,YFr,nH,KFr,ZFr,e0r,GM,I2e,o0r,r0r,sH,t0r,a0r,n0r,OM,q2e,s0r,l0r,lH,i0r,d0r,c0r,VM,N2e,f0r,m0r,iH,g0r,h0r,p0r,XM,j2e,u0r,_0r,dH,b0r,v0r,F0r,zM,D2e,T0r,M0r,cH,E0r,C0r,w0r,QM,G2e,A0r,y0r,fH,L0r,x0r,$0r,WM,O2e,k0r,S0r,mH,R0r,B0r,P0r,HM,V2e,I0r,q0r,gH,N0r,j0r,D0r,UM,X2e,G0r,O0r,hH,V0r,X0r,z0r,JM,z2e,Q0r,W0r,pH,H0r,U0r,J0r,YM,Q2e,Y0r,K0r,uH,Z0r,eTr,oTr,KM,W2e,rTr,tTr,_H,aTr,nTr,sTr,ZM,hIe,dc,e4,H2e,iL,lTr,U2e,iTr,pIe,lr,dL,dTr,cc,cTr,bH,fTr,mTr,vH,gTr,hTr,pTr,cL,uTr,J2e,_Tr,bTr,vTr,Rt,fL,FTr,Y2e,TTr,MTr,fc,ETr,K2e,CTr,wTr,FH,ATr,yTr,LTr,o4,xTr,Br,mL,$Tr,Z2e,kTr,STr,nn,RTr,eve,BTr,PTr,ove,ITr,qTr,rve,NTr,jTr,DTr,ce,r4,tve,GTr,OTr,TH,VTr,XTr,zTr,t4,ave,QTr,WTr,MH,HTr,UTr,JTr,a4,nve,YTr,KTr,EH,ZTr,e7r,o7r,n4,sve,r7r,t7r,CH,a7r,n7r,s7r,s4,lve,l7r,i7r,wH,d7r,c7r,f7r,l4,ive,m7r,g7r,AH,h7r,p7r,u7r,i4,dve,_7r,b7r,yH,v7r,F7r,T7r,d4,cve,M7r,E7r,LH,C7r,w7r,A7r,c4,fve,y7r,L7r,xH,x7r,$7r,k7r,f4,mve,S7r,R7r,$H,B7r,P7r,I7r,m4,gve,q7r,N7r,kH,j7r,D7r,G7r,g4,hve,O7r,V7r,SH,X7r,z7r,Q7r,h4,pve,W7r,H7r,RH,U7r,J7r,Y7r,p4,uve,K7r,Z7r,BH,eMr,oMr,rMr,u4,_ve,tMr,aMr,PH,nMr,sMr,lMr,_4,bve,iMr,dMr,IH,cMr,fMr,mMr,b4,vve,gMr,hMr,qH,pMr,uMr,_Mr,v4,Fve,bMr,vMr,NH,FMr,TMr,MMr,F4,Tve,EMr,CMr,jH,wMr,AMr,yMr,T4,Mve,LMr,xMr,DH,$Mr,kMr,SMr,M4,uIe,mc,E4,Eve,gL,RMr,Cve,BMr,_Ie,ir,hL,PMr,gc,IMr,GH,qMr,NMr,OH,jMr,DMr,GMr,pL,OMr,wve,VMr,XMr,zMr,Bt,uL,QMr,Ave,WMr,HMr,hc,UMr,yve,JMr,YMr,VH,KMr,ZMr,e4r,C4,o4r,Pr,_L,r4r,Lve,t4r,a4r,sn,n4r,xve,s4r,l4r,$ve,i4r,d4r,kve,c4r,f4r,m4r,Sve,w4,Rve,g4r,h4r,XH,p4r,u4r,_4r,A4,bIe,pc,y4,Bve,bL,b4r,Pve,v4r,vIe,dr,vL,F4r,uc,T4r,zH,M4r,E4r,QH,C4r,w4r,A4r,FL,y4r,Ive,L4r,x4r,$4r,Pt,TL,k4r,qve,S4r,R4r,_c,B4r,Nve,P4r,I4r,WH,q4r,N4r,j4r,L4,D4r,Ir,ML,G4r,jve,O4r,V4r,ln,X4r,Dve,z4r,Q4r,Gve,W4r,H4r,Ove,U4r,J4r,Y4r,Vve,x4,Xve,K4r,Z4r,HH,eEr,oEr,rEr,$4,FIe,bc,k4,zve,EL,tEr,Qve,aEr,TIe,cr,CL,nEr,vc,sEr,UH,lEr,iEr,JH,dEr,cEr,fEr,wL,mEr,Wve,gEr,hEr,pEr,It,AL,uEr,Hve,_Er,bEr,Fc,vEr,Uve,FEr,TEr,YH,MEr,EEr,CEr,S4,wEr,qr,yL,AEr,Jve,yEr,LEr,dn,xEr,Yve,$Er,kEr,Kve,SEr,REr,Zve,BEr,PEr,IEr,ee,R4,eFe,qEr,NEr,KH,jEr,DEr,GEr,B4,oFe,OEr,VEr,ZH,XEr,zEr,QEr,P4,rFe,WEr,HEr,eU,UEr,JEr,YEr,I4,tFe,KEr,ZEr,oU,e5r,o5r,r5r,q4,aFe,t5r,a5r,rU,n5r,s5r,l5r,N4,nFe,i5r,d5r,tU,c5r,f5r,m5r,j4,sFe,g5r,h5r,aU,p5r,u5r,_5r,D4,lFe,b5r,v5r,nU,F5r,T5r,M5r,G4,iFe,E5r,C5r,sU,w5r,A5r,y5r,O4,dFe,L5r,x5r,lU,$5r,k5r,S5r,V4,cFe,R5r,B5r,iU,P5r,I5r,q5r,X4,fFe,N5r,j5r,dU,D5r,G5r,O5r,z4,mFe,V5r,X5r,cU,z5r,Q5r,W5r,Q4,gFe,H5r,U5r,fU,J5r,Y5r,K5r,W4,hFe,Z5r,eCr,mU,oCr,rCr,tCr,H4,pFe,aCr,nCr,gU,sCr,lCr,iCr,U4,uFe,dCr,cCr,hU,fCr,mCr,gCr,J4,_Fe,hCr,pCr,pU,uCr,_Cr,bCr,Y4,bFe,vCr,FCr,uU,TCr,MCr,ECr,K4,vFe,CCr,wCr,_U,ACr,yCr,LCr,Z4,FFe,xCr,$Cr,bU,kCr,SCr,RCr,eE,TFe,BCr,PCr,vU,ICr,qCr,NCr,oE,MFe,jCr,DCr,FU,GCr,OCr,VCr,rE,EFe,XCr,zCr,TU,QCr,WCr,HCr,tE,CFe,UCr,JCr,MU,YCr,KCr,ZCr,aE,wFe,e3r,o3r,EU,r3r,t3r,a3r,nE,MIe,Tc,sE,AFe,LL,n3r,yFe,s3r,EIe,fr,xL,l3r,Mc,i3r,CU,d3r,c3r,wU,f3r,m3r,g3r,$L,h3r,LFe,p3r,u3r,_3r,qt,kL,b3r,xFe,v3r,F3r,Ec,T3r,$Fe,M3r,E3r,AU,C3r,w3r,A3r,lE,y3r,Nr,SL,L3r,kFe,x3r,$3r,cn,k3r,SFe,S3r,R3r,RFe,B3r,P3r,BFe,I3r,q3r,N3r,Le,iE,PFe,j3r,D3r,yU,G3r,O3r,V3r,dE,IFe,X3r,z3r,LU,Q3r,W3r,H3r,cE,qFe,U3r,J3r,xU,Y3r,K3r,Z3r,fE,NFe,ewr,owr,$U,rwr,twr,awr,mE,jFe,nwr,swr,kU,lwr,iwr,dwr,gE,DFe,cwr,fwr,SU,mwr,gwr,hwr,hE,GFe,pwr,uwr,RU,_wr,bwr,vwr,pE,OFe,Fwr,Twr,BU,Mwr,Ewr,Cwr,uE,VFe,wwr,Awr,PU,ywr,Lwr,xwr,_E,XFe,$wr,kwr,IU,Swr,Rwr,Bwr,bE,CIe,Cc,vE,zFe,RL,Pwr,QFe,Iwr,wIe,mr,BL,qwr,wc,Nwr,qU,jwr,Dwr,NU,Gwr,Owr,Vwr,PL,Xwr,WFe,zwr,Qwr,Wwr,Nt,IL,Hwr,HFe,Uwr,Jwr,Ac,Ywr,UFe,Kwr,Zwr,jU,eAr,oAr,rAr,FE,tAr,jr,qL,aAr,JFe,nAr,sAr,fn,lAr,YFe,iAr,dAr,KFe,cAr,fAr,ZFe,mAr,gAr,hAr,Me,TE,e0e,pAr,uAr,DU,_Ar,bAr,vAr,ME,o0e,FAr,TAr,GU,MAr,EAr,CAr,EE,r0e,wAr,AAr,OU,yAr,LAr,xAr,CE,t0e,$Ar,kAr,VU,SAr,RAr,BAr,wE,a0e,PAr,IAr,XU,qAr,NAr,jAr,AE,n0e,DAr,GAr,zU,OAr,VAr,XAr,yE,s0e,zAr,QAr,QU,WAr,HAr,UAr,LE,l0e,JAr,YAr,WU,KAr,ZAr,e6r,xE,i0e,o6r,r6r,HU,t6r,a6r,n6r,$E,d0e,s6r,l6r,UU,i6r,d6r,c6r,kE,c0e,f6r,m6r,JU,g6r,h6r,p6r,SE,f0e,u6r,_6r,YU,b6r,v6r,F6r,RE,AIe,yc,BE,m0e,NL,T6r,g0e,M6r,yIe,gr,jL,E6r,Lc,C6r,KU,w6r,A6r,ZU,y6r,L6r,x6r,DL,$6r,h0e,k6r,S6r,R6r,jt,GL,B6r,p0e,P6r,I6r,xc,q6r,u0e,N6r,j6r,eJ,D6r,G6r,O6r,PE,V6r,Dr,OL,X6r,_0e,z6r,Q6r,mn,W6r,b0e,H6r,U6r,v0e,J6r,Y6r,F0e,K6r,Z6r,eyr,xe,IE,T0e,oyr,ryr,oJ,tyr,ayr,nyr,qE,M0e,syr,lyr,rJ,iyr,dyr,cyr,NE,E0e,fyr,myr,tJ,gyr,hyr,pyr,jE,C0e,uyr,_yr,aJ,byr,vyr,Fyr,DE,w0e,Tyr,Myr,nJ,Eyr,Cyr,wyr,GE,A0e,Ayr,yyr,sJ,Lyr,xyr,$yr,OE,y0e,kyr,Syr,lJ,Ryr,Byr,Pyr,VE,L0e,Iyr,qyr,iJ,Nyr,jyr,Dyr,XE,x0e,Gyr,Oyr,dJ,Vyr,Xyr,zyr,zE,$0e,Qyr,Wyr,cJ,Hyr,Uyr,Jyr,QE,LIe,$c,WE,k0e,VL,Yyr,S0e,Kyr,xIe,hr,XL,Zyr,kc,eLr,fJ,oLr,rLr,mJ,tLr,aLr,nLr,zL,sLr,R0e,lLr,iLr,dLr,Dt,QL,cLr,B0e,fLr,mLr,Sc,gLr,P0e,hLr,pLr,gJ,uLr,_Lr,bLr,HE,vLr,Gr,WL,FLr,I0e,TLr,MLr,gn,ELr,q0e,CLr,wLr,N0e,ALr,yLr,j0e,LLr,xLr,$Lr,Se,UE,D0e,kLr,SLr,hJ,RLr,BLr,PLr,JE,G0e,ILr,qLr,pJ,NLr,jLr,DLr,YE,O0e,GLr,OLr,uJ,VLr,XLr,zLr,KE,V0e,QLr,WLr,_J,HLr,ULr,JLr,ZE,X0e,YLr,KLr,bJ,ZLr,exr,oxr,e5,z0e,rxr,txr,vJ,axr,nxr,sxr,o5,Q0e,lxr,ixr,FJ,dxr,cxr,fxr,r5,W0e,mxr,gxr,TJ,hxr,pxr,uxr,t5,H0e,_xr,bxr,MJ,vxr,Fxr,Txr,a5,$Ie,Rc,n5,U0e,HL,Mxr,J0e,Exr,kIe,pr,UL,Cxr,Bc,wxr,EJ,Axr,yxr,CJ,Lxr,xxr,$xr,JL,kxr,Y0e,Sxr,Rxr,Bxr,Gt,YL,Pxr,K0e,Ixr,qxr,Pc,Nxr,Z0e,jxr,Dxr,wJ,Gxr,Oxr,Vxr,s5,Xxr,Or,KL,zxr,eTe,Qxr,Wxr,hn,Hxr,oTe,Uxr,Jxr,rTe,Yxr,Kxr,tTe,Zxr,e9r,o9r,$e,l5,aTe,r9r,t9r,AJ,a9r,n9r,s9r,i5,nTe,l9r,i9r,yJ,d9r,c9r,f9r,d5,sTe,m9r,g9r,LJ,h9r,p9r,u9r,c5,lTe,_9r,b9r,xJ,v9r,F9r,T9r,f5,iTe,M9r,E9r,$J,C9r,w9r,A9r,m5,dTe,y9r,L9r,kJ,x9r,$9r,k9r,g5,cTe,S9r,R9r,SJ,B9r,P9r,I9r,h5,fTe,q9r,N9r,RJ,j9r,D9r,G9r,p5,mTe,O9r,V9r,BJ,X9r,z9r,Q9r,u5,gTe,W9r,H9r,PJ,U9r,J9r,Y9r,_5,SIe,Ic,b5,hTe,ZL,K9r,pTe,Z9r,RIe,ur,ex,e$r,qc,o$r,IJ,r$r,t$r,qJ,a$r,n$r,s$r,ox,l$r,uTe,i$r,d$r,c$r,Ot,rx,f$r,_Te,m$r,g$r,Nc,h$r,bTe,p$r,u$r,NJ,_$r,b$r,v$r,v5,F$r,Vr,tx,T$r,vTe,M$r,E$r,pn,C$r,FTe,w$r,A$r,TTe,y$r,L$r,MTe,x$r,$$r,k$r,ke,F5,ETe,S$r,R$r,jJ,B$r,P$r,I$r,T5,CTe,q$r,N$r,DJ,j$r,D$r,G$r,M5,wTe,O$r,V$r,GJ,X$r,z$r,Q$r,E5,ATe,W$r,H$r,OJ,U$r,J$r,Y$r,C5,yTe,K$r,Z$r,VJ,ekr,okr,rkr,w5,LTe,tkr,akr,XJ,nkr,skr,lkr,A5,xTe,ikr,dkr,zJ,ckr,fkr,mkr,y5,$Te,gkr,hkr,QJ,pkr,ukr,_kr,L5,kTe,bkr,vkr,WJ,Fkr,Tkr,Mkr,x5,STe,Ekr,Ckr,HJ,wkr,Akr,ykr,$5,BIe,jc,k5,RTe,ax,Lkr,BTe,xkr,PIe,_r,nx,$kr,Dc,kkr,UJ,Skr,Rkr,JJ,Bkr,Pkr,Ikr,sx,qkr,PTe,Nkr,jkr,Dkr,Vt,lx,Gkr,ITe,Okr,Vkr,Gc,Xkr,qTe,zkr,Qkr,YJ,Wkr,Hkr,Ukr,S5,Jkr,Xr,ix,Ykr,NTe,Kkr,Zkr,un,eSr,jTe,oSr,rSr,DTe,tSr,aSr,GTe,nSr,sSr,lSr,Ge,R5,OTe,iSr,dSr,KJ,cSr,fSr,mSr,B5,VTe,gSr,hSr,ZJ,pSr,uSr,_Sr,P5,XTe,bSr,vSr,eY,FSr,TSr,MSr,I5,zTe,ESr,CSr,oY,wSr,ASr,ySr,q5,QTe,LSr,xSr,rY,$Sr,kSr,SSr,N5,WTe,RSr,BSr,tY,PSr,ISr,qSr,j5,HTe,NSr,jSr,aY,DSr,GSr,OSr,D5,UTe,VSr,XSr,nY,zSr,QSr,WSr,G5,IIe,Oc,O5,JTe,dx,HSr,YTe,USr,qIe,br,cx,JSr,Vc,YSr,sY,KSr,ZSr,lY,eRr,oRr,rRr,fx,tRr,KTe,aRr,nRr,sRr,Xt,mx,lRr,ZTe,iRr,dRr,Xc,cRr,e7e,fRr,mRr,iY,gRr,hRr,pRr,V5,uRr,zr,gx,_Rr,o7e,bRr,vRr,_n,FRr,r7e,TRr,MRr,t7e,ERr,CRr,a7e,wRr,ARr,yRr,Oe,X5,n7e,LRr,xRr,dY,$Rr,kRr,SRr,z5,s7e,RRr,BRr,cY,PRr,IRr,qRr,Q5,l7e,NRr,jRr,fY,DRr,GRr,ORr,W5,i7e,VRr,XRr,mY,zRr,QRr,WRr,H5,d7e,HRr,URr,gY,JRr,YRr,KRr,U5,c7e,ZRr,eBr,hY,oBr,rBr,tBr,J5,f7e,aBr,nBr,pY,sBr,lBr,iBr,Y5,m7e,dBr,cBr,uY,fBr,mBr,gBr,K5,NIe,zc,Z5,g7e,hx,hBr,h7e,pBr,jIe,vr,px,uBr,Qc,_Br,_Y,bBr,vBr,bY,FBr,TBr,MBr,ux,EBr,p7e,CBr,wBr,ABr,zt,_x,yBr,u7e,LBr,xBr,Wc,$Br,_7e,kBr,SBr,vY,RBr,BBr,PBr,eC,IBr,Qr,bx,qBr,b7e,NBr,jBr,bn,DBr,v7e,GBr,OBr,F7e,VBr,XBr,T7e,zBr,QBr,WBr,M7e,oC,E7e,HBr,UBr,FY,JBr,YBr,KBr,rC,DIe,Hc,tC,C7e,vx,ZBr,w7e,ePr,GIe,Fr,Fx,oPr,Uc,rPr,TY,tPr,aPr,MY,nPr,sPr,lPr,Tx,iPr,A7e,dPr,cPr,fPr,Qt,Mx,mPr,y7e,gPr,hPr,Jc,pPr,L7e,uPr,_Pr,EY,bPr,vPr,FPr,aC,TPr,Wr,Ex,MPr,x7e,EPr,CPr,vn,wPr,$7e,APr,yPr,k7e,LPr,xPr,S7e,$Pr,kPr,SPr,Cx,nC,R7e,RPr,BPr,CY,PPr,IPr,qPr,sC,B7e,NPr,jPr,wY,DPr,GPr,OPr,lC,OIe,Yc,iC,P7e,wx,VPr,I7e,XPr,VIe,Tr,Ax,zPr,Kc,QPr,AY,WPr,HPr,yY,UPr,JPr,YPr,yx,KPr,q7e,ZPr,eIr,oIr,Wt,Lx,rIr,N7e,tIr,aIr,Zc,nIr,j7e,sIr,lIr,LY,iIr,dIr,cIr,dC,fIr,Hr,xx,mIr,D7e,gIr,hIr,Fn,pIr,G7e,uIr,_Ir,O7e,bIr,vIr,V7e,FIr,TIr,MIr,X7e,cC,z7e,EIr,CIr,xY,wIr,AIr,yIr,fC,XIe;return d=new oe({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),kw=new oe({}),Sw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),df=new LIr({props:{warning:!0,$$slots:{default:[qCt]},$$scope:{ctx:L}}}),Rw=new oe({}),Bw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L566"}}),qw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L589"}}),lg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),Nw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L711"}}),jw=new oe({}),Dw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L378"}}),Vw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17088/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L392"}}),jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),Xw=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L588"}}),zw=new oe({}),Qw=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),Uw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),mh=new LIr({props:{$$slots:{default:[DCt]},$$scope:{ctx:L}}}),gh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),Jw=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),Yw=new oe({}),Kw=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L76"}}),oA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L90"}}),$h=new LIr({props:{$$slots:{default:[OCt]},$$scope:{ctx:L}}}),kh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),rA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L243"}}),tA=new oe({}),aA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L718"}}),sA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Bh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),lA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Eu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),iA=new oe({}),dA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L725"}}),fA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),wu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),mA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),m_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[WCt]},$$scope:{ctx:L}}}),gA=new oe({}),hA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L740"}}),uA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),h_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[HCt]},$$scope:{ctx:L}}}),_A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),K_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),bA=new oe({}),vA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L747"}}),TA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),MA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),q1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[YCt]},$$scope:{ctx:L}}}),EA=new oe({}),CA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L754"}}),AA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),j1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),LA=new oe({}),xA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L763"}}),kA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),ob=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),RA=new oe({}),BA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L797"}}),IA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),tb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Rb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[t3t]},$$scope:{ctx:L}}}),NA=new oe({}),jA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L804"}}),GA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Pb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),VA=new oe({}),XA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L790"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),HA=new oe({}),UA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L772"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),ZA=new oe({}),e6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L779"}}),r6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),t6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),a6=new oe({}),n6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L813"}}),l6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),i6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),d6=new oe({}),c6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L852"}}),m6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),g6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),h6=new oe({}),p6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L859"}}),_6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),b6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),v6=new oe({}),F6=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L882"}}),M6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),E6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),C6=new oe({}),w6=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L866"}}),y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),L6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),x6=new oe({}),$6=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L873"}}),S6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),P6=new oe({}),I6=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L891"}}),N6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),j6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),D6=new oe({}),G6=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L898"}}),V6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),z6=new oe({}),Q6=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L845"}}),H6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),Y6=new oe({}),K6=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L820"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),ry=new oe({}),ty=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L827"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),ly=new oe({}),iy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L836"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),my=new oe({}),gy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L384"}}),py=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),_y=new oe({}),by=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L391"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),My=new oe({}),Ey=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),wy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),yy=new oe({}),Ly=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),$y=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[O3t]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),Sy=new oe({}),Ry=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),Py=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[z3t]},$$scope:{ctx:L}}}),qy=new oe({}),Ny=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L436"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[W3t]},$$scope:{ctx:L}}}),Oy=new oe({}),Vy=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L445"}}),zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),Wy=new oe({}),Hy=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),Ky=new oe({}),Zy=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L461"}}),oL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),tL=new oe({}),aL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),sL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),iL=new oe({}),dL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),fL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),gL=new oe({}),hL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[nwt]},$$scope:{ctx:L}}}),bL=new oe({}),vL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),TL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[swt]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[lwt]},$$scope:{ctx:L}}}),EL=new oe({}),CL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),AL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[iwt]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[dwt]},$$scope:{ctx:L}}}),LL=new oe({}),xL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),kL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[cwt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[fwt]},$$scope:{ctx:L}}}),RL=new oe({}),BL=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),IL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),NL=new oe({}),jL=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),GL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[hwt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),VL=new oe({}),XL=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),QL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uwt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),HL=new oe({}),UL=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),YL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),ZL=new oe({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Twt]},$$scope:{ctx:L}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Mwt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ewt]},$$scope:{ctx:L}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Cwt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wwt]},$$scope:{ctx:L}}}),hx=new oe({}),px=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Awt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ywt]},$$scope:{ctx:L}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Lwt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[xwt]},$$scope:{ctx:L}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[$wt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[kwt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ri=o("Auto Classes"),tf=l(),Kr=a("p"),ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=a("code"),yw=o("from_pretrained()"),af=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ne=l(),Xe=a("p"),ni=o("Instantiating one of "),Mn=a("a"),Lw=o("AutoConfig"),En=o(", "),Cn=a("a"),xw=o("AutoModel"),si=o(`, and
`),wn=a("a"),$w=o("AutoTokenizer"),li=o(" will directly create a class of the relevant architecture. For instance"),nf=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),V9=o("will create a model that is an instance of "),ii=a("a"),X9=o("BertModel"),z9=o("."),Eo=l(),Fa=a("p"),Q9=o("There is one class of "),sf=a("code"),W9=o("AutoModel"),UNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VBe=l(),di=a("h2"),lf=a("a"),TZ=a("span"),F(kw.$$.fragment),JNe=l(),MZ=a("span"),YNe=o("Extending the Auto Classes"),XBe=l(),An=a("p"),KNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),EZ=a("code"),ZNe=o("NewModel"),eje=o(", make sure you have a "),CZ=a("code"),oje=o("NewModelConfig"),rje=o(` then you can add those to the auto
classes like this:`),zBe=l(),F(Sw.$$.fragment),QBe=l(),H9=a("p"),tje=o("You will then be able to use the auto classes like you would usually do!"),WBe=l(),F(df.$$.fragment),HBe=l(),ci=a("h2"),cf=a("a"),wZ=a("span"),F(Rw.$$.fragment),aje=l(),AZ=a("span"),nje=o("AutoConfig"),UBe=l(),Co=a("div"),F(Bw.$$.fragment),sje=l(),Pw=a("p"),lje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),U9=a("a"),ije=o("from_pretrained()"),dje=o(" class method."),cje=l(),Iw=a("p"),fje=o("This class cannot be instantiated directly using "),yZ=a("code"),mje=o("__init__()"),gje=o(" (throws an error)."),hje=l(),Mr=a("div"),F(qw.$$.fragment),pje=l(),LZ=a("p"),uje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),_je=l(),fi=a("p"),bje=o("The configuration class to instantiate is selected based on the "),xZ=a("code"),vje=o("model_type"),Fje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),$Z=a("code"),Tje=o("pretrained_model_name_or_path"),Mje=o(":"),Eje=l(),A=a("ul"),ff=a("li"),kZ=a("strong"),Cje=o("albert"),wje=o(" \u2014 "),J9=a("a"),Aje=o("AlbertConfig"),yje=o(" (ALBERT model)"),Lje=l(),mf=a("li"),SZ=a("strong"),xje=o("bart"),$je=o(" \u2014 "),Y9=a("a"),kje=o("BartConfig"),Sje=o(" (BART model)"),Rje=l(),gf=a("li"),RZ=a("strong"),Bje=o("beit"),Pje=o(" \u2014 "),K9=a("a"),Ije=o("BeitConfig"),qje=o(" (BEiT model)"),Nje=l(),hf=a("li"),BZ=a("strong"),jje=o("bert"),Dje=o(" \u2014 "),Z9=a("a"),Gje=o("BertConfig"),Oje=o(" (BERT model)"),Vje=l(),pf=a("li"),PZ=a("strong"),Xje=o("bert-generation"),zje=o(" \u2014 "),e$=a("a"),Qje=o("BertGenerationConfig"),Wje=o(" (Bert Generation model)"),Hje=l(),uf=a("li"),IZ=a("strong"),Uje=o("big_bird"),Jje=o(" \u2014 "),o$=a("a"),Yje=o("BigBirdConfig"),Kje=o(" (BigBird model)"),Zje=l(),_f=a("li"),qZ=a("strong"),eDe=o("bigbird_pegasus"),oDe=o(" \u2014 "),r$=a("a"),rDe=o("BigBirdPegasusConfig"),tDe=o(" (BigBirdPegasus model)"),aDe=l(),bf=a("li"),NZ=a("strong"),nDe=o("blenderbot"),sDe=o(" \u2014 "),t$=a("a"),lDe=o("BlenderbotConfig"),iDe=o(" (Blenderbot model)"),dDe=l(),vf=a("li"),jZ=a("strong"),cDe=o("blenderbot-small"),fDe=o(" \u2014 "),a$=a("a"),mDe=o("BlenderbotSmallConfig"),gDe=o(" (BlenderbotSmall model)"),hDe=l(),Ff=a("li"),DZ=a("strong"),pDe=o("camembert"),uDe=o(" \u2014 "),n$=a("a"),_De=o("CamembertConfig"),bDe=o(" (CamemBERT model)"),vDe=l(),Tf=a("li"),GZ=a("strong"),FDe=o("canine"),TDe=o(" \u2014 "),s$=a("a"),MDe=o("CanineConfig"),EDe=o(" (Canine model)"),CDe=l(),Mf=a("li"),OZ=a("strong"),wDe=o("clip"),ADe=o(" \u2014 "),l$=a("a"),yDe=o("CLIPConfig"),LDe=o(" (CLIP model)"),xDe=l(),Ef=a("li"),VZ=a("strong"),$De=o("convbert"),kDe=o(" \u2014 "),i$=a("a"),SDe=o("ConvBertConfig"),RDe=o(" (ConvBERT model)"),BDe=l(),Cf=a("li"),XZ=a("strong"),PDe=o("convnext"),IDe=o(" \u2014 "),d$=a("a"),qDe=o("ConvNextConfig"),NDe=o(" (ConvNext model)"),jDe=l(),wf=a("li"),zZ=a("strong"),DDe=o("ctrl"),GDe=o(" \u2014 "),c$=a("a"),ODe=o("CTRLConfig"),VDe=o(" (CTRL model)"),XDe=l(),Af=a("li"),QZ=a("strong"),zDe=o("data2vec-audio"),QDe=o(" \u2014 "),f$=a("a"),WDe=o("Data2VecAudioConfig"),HDe=o(" (Data2VecAudio model)"),UDe=l(),yf=a("li"),WZ=a("strong"),JDe=o("data2vec-text"),YDe=o(" \u2014 "),m$=a("a"),KDe=o("Data2VecTextConfig"),ZDe=o(" (Data2VecText model)"),eGe=l(),Lf=a("li"),HZ=a("strong"),oGe=o("data2vec-vision"),rGe=o(" \u2014 "),g$=a("a"),tGe=o("Data2VecVisionConfig"),aGe=o(" (Data2VecVision model)"),nGe=l(),xf=a("li"),UZ=a("strong"),sGe=o("deberta"),lGe=o(" \u2014 "),h$=a("a"),iGe=o("DebertaConfig"),dGe=o(" (DeBERTa model)"),cGe=l(),$f=a("li"),JZ=a("strong"),fGe=o("deberta-v2"),mGe=o(" \u2014 "),p$=a("a"),gGe=o("DebertaV2Config"),hGe=o(" (DeBERTa-v2 model)"),pGe=l(),kf=a("li"),YZ=a("strong"),uGe=o("decision_transformer"),_Ge=o(" \u2014 "),u$=a("a"),bGe=o("DecisionTransformerConfig"),vGe=o(" (Decision Transformer model)"),FGe=l(),Sf=a("li"),KZ=a("strong"),TGe=o("deit"),MGe=o(" \u2014 "),_$=a("a"),EGe=o("DeiTConfig"),CGe=o(" (DeiT model)"),wGe=l(),Rf=a("li"),ZZ=a("strong"),AGe=o("detr"),yGe=o(" \u2014 "),b$=a("a"),LGe=o("DetrConfig"),xGe=o(" (DETR model)"),$Ge=l(),Bf=a("li"),eee=a("strong"),kGe=o("distilbert"),SGe=o(" \u2014 "),v$=a("a"),RGe=o("DistilBertConfig"),BGe=o(" (DistilBERT model)"),PGe=l(),Pf=a("li"),oee=a("strong"),IGe=o("dpr"),qGe=o(" \u2014 "),F$=a("a"),NGe=o("DPRConfig"),jGe=o(" (DPR model)"),DGe=l(),If=a("li"),ree=a("strong"),GGe=o("dpt"),OGe=o(" \u2014 "),T$=a("a"),VGe=o("DPTConfig"),XGe=o(" (DPT model)"),zGe=l(),qf=a("li"),tee=a("strong"),QGe=o("electra"),WGe=o(" \u2014 "),M$=a("a"),HGe=o("ElectraConfig"),UGe=o(" (ELECTRA model)"),JGe=l(),Nf=a("li"),aee=a("strong"),YGe=o("encoder-decoder"),KGe=o(" \u2014 "),E$=a("a"),ZGe=o("EncoderDecoderConfig"),eOe=o(" (Encoder decoder model)"),oOe=l(),jf=a("li"),nee=a("strong"),rOe=o("flaubert"),tOe=o(" \u2014 "),C$=a("a"),aOe=o("FlaubertConfig"),nOe=o(" (FlauBERT model)"),sOe=l(),Df=a("li"),see=a("strong"),lOe=o("fnet"),iOe=o(" \u2014 "),w$=a("a"),dOe=o("FNetConfig"),cOe=o(" (FNet model)"),fOe=l(),Gf=a("li"),lee=a("strong"),mOe=o("fsmt"),gOe=o(" \u2014 "),A$=a("a"),hOe=o("FSMTConfig"),pOe=o(" (FairSeq Machine-Translation model)"),uOe=l(),Of=a("li"),iee=a("strong"),_Oe=o("funnel"),bOe=o(" \u2014 "),y$=a("a"),vOe=o("FunnelConfig"),FOe=o(" (Funnel Transformer model)"),TOe=l(),Vf=a("li"),dee=a("strong"),MOe=o("glpn"),EOe=o(" \u2014 "),L$=a("a"),COe=o("GLPNConfig"),wOe=o(" (GLPN model)"),AOe=l(),Xf=a("li"),cee=a("strong"),yOe=o("gpt2"),LOe=o(" \u2014 "),x$=a("a"),xOe=o("GPT2Config"),$Oe=o(" (OpenAI GPT-2 model)"),kOe=l(),zf=a("li"),fee=a("strong"),SOe=o("gpt_neo"),ROe=o(" \u2014 "),$$=a("a"),BOe=o("GPTNeoConfig"),POe=o(" (GPT Neo model)"),IOe=l(),Qf=a("li"),mee=a("strong"),qOe=o("gptj"),NOe=o(" \u2014 "),k$=a("a"),jOe=o("GPTJConfig"),DOe=o(" (GPT-J model)"),GOe=l(),Wf=a("li"),gee=a("strong"),OOe=o("hubert"),VOe=o(" \u2014 "),S$=a("a"),XOe=o("HubertConfig"),zOe=o(" (Hubert model)"),QOe=l(),Hf=a("li"),hee=a("strong"),WOe=o("ibert"),HOe=o(" \u2014 "),R$=a("a"),UOe=o("IBertConfig"),JOe=o(" (I-BERT model)"),YOe=l(),Uf=a("li"),pee=a("strong"),KOe=o("imagegpt"),ZOe=o(" \u2014 "),B$=a("a"),eVe=o("ImageGPTConfig"),oVe=o(" (ImageGPT model)"),rVe=l(),Jf=a("li"),uee=a("strong"),tVe=o("layoutlm"),aVe=o(" \u2014 "),P$=a("a"),nVe=o("LayoutLMConfig"),sVe=o(" (LayoutLM model)"),lVe=l(),Yf=a("li"),_ee=a("strong"),iVe=o("layoutlmv2"),dVe=o(" \u2014 "),I$=a("a"),cVe=o("LayoutLMv2Config"),fVe=o(" (LayoutLMv2 model)"),mVe=l(),Kf=a("li"),bee=a("strong"),gVe=o("led"),hVe=o(" \u2014 "),q$=a("a"),pVe=o("LEDConfig"),uVe=o(" (LED model)"),_Ve=l(),Zf=a("li"),vee=a("strong"),bVe=o("longformer"),vVe=o(" \u2014 "),N$=a("a"),FVe=o("LongformerConfig"),TVe=o(" (Longformer model)"),MVe=l(),em=a("li"),Fee=a("strong"),EVe=o("luke"),CVe=o(" \u2014 "),j$=a("a"),wVe=o("LukeConfig"),AVe=o(" (LUKE model)"),yVe=l(),om=a("li"),Tee=a("strong"),LVe=o("lxmert"),xVe=o(" \u2014 "),D$=a("a"),$Ve=o("LxmertConfig"),kVe=o(" (LXMERT model)"),SVe=l(),rm=a("li"),Mee=a("strong"),RVe=o("m2m_100"),BVe=o(" \u2014 "),G$=a("a"),PVe=o("M2M100Config"),IVe=o(" (M2M100 model)"),qVe=l(),tm=a("li"),Eee=a("strong"),NVe=o("marian"),jVe=o(" \u2014 "),O$=a("a"),DVe=o("MarianConfig"),GVe=o(" (Marian model)"),OVe=l(),am=a("li"),Cee=a("strong"),VVe=o("maskformer"),XVe=o(" \u2014 "),V$=a("a"),zVe=o("MaskFormerConfig"),QVe=o(" (MaskFormer model)"),WVe=l(),nm=a("li"),wee=a("strong"),HVe=o("mbart"),UVe=o(" \u2014 "),X$=a("a"),JVe=o("MBartConfig"),YVe=o(" (mBART model)"),KVe=l(),sm=a("li"),Aee=a("strong"),ZVe=o("megatron-bert"),eXe=o(" \u2014 "),z$=a("a"),oXe=o("MegatronBertConfig"),rXe=o(" (MegatronBert model)"),tXe=l(),lm=a("li"),yee=a("strong"),aXe=o("mobilebert"),nXe=o(" \u2014 "),Q$=a("a"),sXe=o("MobileBertConfig"),lXe=o(" (MobileBERT model)"),iXe=l(),im=a("li"),Lee=a("strong"),dXe=o("mpnet"),cXe=o(" \u2014 "),W$=a("a"),fXe=o("MPNetConfig"),mXe=o(" (MPNet model)"),gXe=l(),dm=a("li"),xee=a("strong"),hXe=o("mt5"),pXe=o(" \u2014 "),H$=a("a"),uXe=o("MT5Config"),_Xe=o(" (mT5 model)"),bXe=l(),cm=a("li"),$ee=a("strong"),vXe=o("nystromformer"),FXe=o(" \u2014 "),U$=a("a"),TXe=o("NystromformerConfig"),MXe=o(" (Nystromformer model)"),EXe=l(),fm=a("li"),kee=a("strong"),CXe=o("openai-gpt"),wXe=o(" \u2014 "),J$=a("a"),AXe=o("OpenAIGPTConfig"),yXe=o(" (OpenAI GPT model)"),LXe=l(),mm=a("li"),See=a("strong"),xXe=o("opt"),$Xe=o(" \u2014 "),Y$=a("a"),kXe=o("OPTConfig"),SXe=o(" (OPT model)"),RXe=l(),gm=a("li"),Ree=a("strong"),BXe=o("pegasus"),PXe=o(" \u2014 "),K$=a("a"),IXe=o("PegasusConfig"),qXe=o(" (Pegasus model)"),NXe=l(),hm=a("li"),Bee=a("strong"),jXe=o("perceiver"),DXe=o(" \u2014 "),Z$=a("a"),GXe=o("PerceiverConfig"),OXe=o(" (Perceiver model)"),VXe=l(),pm=a("li"),Pee=a("strong"),XXe=o("plbart"),zXe=o(" \u2014 "),ek=a("a"),QXe=o("PLBartConfig"),WXe=o(" (PLBart model)"),HXe=l(),um=a("li"),Iee=a("strong"),UXe=o("poolformer"),JXe=o(" \u2014 "),ok=a("a"),YXe=o("PoolFormerConfig"),KXe=o(" (PoolFormer model)"),ZXe=l(),_m=a("li"),qee=a("strong"),eze=o("prophetnet"),oze=o(" \u2014 "),rk=a("a"),rze=o("ProphetNetConfig"),tze=o(" (ProphetNet model)"),aze=l(),bm=a("li"),Nee=a("strong"),nze=o("qdqbert"),sze=o(" \u2014 "),tk=a("a"),lze=o("QDQBertConfig"),ize=o(" (QDQBert model)"),dze=l(),vm=a("li"),jee=a("strong"),cze=o("rag"),fze=o(" \u2014 "),ak=a("a"),mze=o("RagConfig"),gze=o(" (RAG model)"),hze=l(),Fm=a("li"),Dee=a("strong"),pze=o("realm"),uze=o(" \u2014 "),nk=a("a"),_ze=o("RealmConfig"),bze=o(" (Realm model)"),vze=l(),Tm=a("li"),Gee=a("strong"),Fze=o("reformer"),Tze=o(" \u2014 "),sk=a("a"),Mze=o("ReformerConfig"),Eze=o(" (Reformer model)"),Cze=l(),Mm=a("li"),Oee=a("strong"),wze=o("regnet"),Aze=o(" \u2014 "),lk=a("a"),yze=o("RegNetConfig"),Lze=o(" (RegNet model)"),xze=l(),Em=a("li"),Vee=a("strong"),$ze=o("rembert"),kze=o(" \u2014 "),ik=a("a"),Sze=o("RemBertConfig"),Rze=o(" (RemBERT model)"),Bze=l(),Cm=a("li"),Xee=a("strong"),Pze=o("resnet"),Ize=o(" \u2014 "),dk=a("a"),qze=o("ResNetConfig"),Nze=o(" (ResNet model)"),jze=l(),wm=a("li"),zee=a("strong"),Dze=o("retribert"),Gze=o(" \u2014 "),ck=a("a"),Oze=o("RetriBertConfig"),Vze=o(" (RetriBERT model)"),Xze=l(),Am=a("li"),Qee=a("strong"),zze=o("roberta"),Qze=o(" \u2014 "),fk=a("a"),Wze=o("RobertaConfig"),Hze=o(" (RoBERTa model)"),Uze=l(),ym=a("li"),Wee=a("strong"),Jze=o("roformer"),Yze=o(" \u2014 "),mk=a("a"),Kze=o("RoFormerConfig"),Zze=o(" (RoFormer model)"),eQe=l(),Lm=a("li"),Hee=a("strong"),oQe=o("segformer"),rQe=o(" \u2014 "),gk=a("a"),tQe=o("SegformerConfig"),aQe=o(" (SegFormer model)"),nQe=l(),xm=a("li"),Uee=a("strong"),sQe=o("sew"),lQe=o(" \u2014 "),hk=a("a"),iQe=o("SEWConfig"),dQe=o(" (SEW model)"),cQe=l(),$m=a("li"),Jee=a("strong"),fQe=o("sew-d"),mQe=o(" \u2014 "),pk=a("a"),gQe=o("SEWDConfig"),hQe=o(" (SEW-D model)"),pQe=l(),km=a("li"),Yee=a("strong"),uQe=o("speech-encoder-decoder"),_Qe=o(" \u2014 "),uk=a("a"),bQe=o("SpeechEncoderDecoderConfig"),vQe=o(" (Speech Encoder decoder model)"),FQe=l(),Sm=a("li"),Kee=a("strong"),TQe=o("speech_to_text"),MQe=o(" \u2014 "),_k=a("a"),EQe=o("Speech2TextConfig"),CQe=o(" (Speech2Text model)"),wQe=l(),Rm=a("li"),Zee=a("strong"),AQe=o("speech_to_text_2"),yQe=o(" \u2014 "),bk=a("a"),LQe=o("Speech2Text2Config"),xQe=o(" (Speech2Text2 model)"),$Qe=l(),Bm=a("li"),eoe=a("strong"),kQe=o("splinter"),SQe=o(" \u2014 "),vk=a("a"),RQe=o("SplinterConfig"),BQe=o(" (Splinter model)"),PQe=l(),Pm=a("li"),ooe=a("strong"),IQe=o("squeezebert"),qQe=o(" \u2014 "),Fk=a("a"),NQe=o("SqueezeBertConfig"),jQe=o(" (SqueezeBERT model)"),DQe=l(),Im=a("li"),roe=a("strong"),GQe=o("swin"),OQe=o(" \u2014 "),Tk=a("a"),VQe=o("SwinConfig"),XQe=o(" (Swin model)"),zQe=l(),qm=a("li"),toe=a("strong"),QQe=o("t5"),WQe=o(" \u2014 "),Mk=a("a"),HQe=o("T5Config"),UQe=o(" (T5 model)"),JQe=l(),Nm=a("li"),aoe=a("strong"),YQe=o("tapas"),KQe=o(" \u2014 "),Ek=a("a"),ZQe=o("TapasConfig"),eWe=o(" (TAPAS model)"),oWe=l(),jm=a("li"),noe=a("strong"),rWe=o("tapex"),tWe=o(" \u2014 "),Ck=a("a"),aWe=o("BartConfig"),nWe=o(" (TAPEX model)"),sWe=l(),Dm=a("li"),soe=a("strong"),lWe=o("transfo-xl"),iWe=o(" \u2014 "),wk=a("a"),dWe=o("TransfoXLConfig"),cWe=o(" (Transformer-XL model)"),fWe=l(),Gm=a("li"),loe=a("strong"),mWe=o("trocr"),gWe=o(" \u2014 "),Ak=a("a"),hWe=o("TrOCRConfig"),pWe=o(" (TrOCR model)"),uWe=l(),Om=a("li"),ioe=a("strong"),_We=o("unispeech"),bWe=o(" \u2014 "),yk=a("a"),vWe=o("UniSpeechConfig"),FWe=o(" (UniSpeech model)"),TWe=l(),Vm=a("li"),doe=a("strong"),MWe=o("unispeech-sat"),EWe=o(" \u2014 "),Lk=a("a"),CWe=o("UniSpeechSatConfig"),wWe=o(" (UniSpeechSat model)"),AWe=l(),Xm=a("li"),coe=a("strong"),yWe=o("van"),LWe=o(" \u2014 "),xk=a("a"),xWe=o("VanConfig"),$We=o(" (VAN model)"),kWe=l(),zm=a("li"),foe=a("strong"),SWe=o("vilt"),RWe=o(" \u2014 "),$k=a("a"),BWe=o("ViltConfig"),PWe=o(" (ViLT model)"),IWe=l(),Qm=a("li"),moe=a("strong"),qWe=o("vision-encoder-decoder"),NWe=o(" \u2014 "),kk=a("a"),jWe=o("VisionEncoderDecoderConfig"),DWe=o(" (Vision Encoder decoder model)"),GWe=l(),Wm=a("li"),goe=a("strong"),OWe=o("vision-text-dual-encoder"),VWe=o(" \u2014 "),Sk=a("a"),XWe=o("VisionTextDualEncoderConfig"),zWe=o(" (VisionTextDualEncoder model)"),QWe=l(),Hm=a("li"),hoe=a("strong"),WWe=o("visual_bert"),HWe=o(" \u2014 "),Rk=a("a"),UWe=o("VisualBertConfig"),JWe=o(" (VisualBert model)"),YWe=l(),Um=a("li"),poe=a("strong"),KWe=o("vit"),ZWe=o(" \u2014 "),Bk=a("a"),eHe=o("ViTConfig"),oHe=o(" (ViT model)"),rHe=l(),Jm=a("li"),uoe=a("strong"),tHe=o("vit_mae"),aHe=o(" \u2014 "),Pk=a("a"),nHe=o("ViTMAEConfig"),sHe=o(" (ViTMAE model)"),lHe=l(),Ym=a("li"),_oe=a("strong"),iHe=o("wav2vec2"),dHe=o(" \u2014 "),Ik=a("a"),cHe=o("Wav2Vec2Config"),fHe=o(" (Wav2Vec2 model)"),mHe=l(),Km=a("li"),boe=a("strong"),gHe=o("wavlm"),hHe=o(" \u2014 "),qk=a("a"),pHe=o("WavLMConfig"),uHe=o(" (WavLM model)"),_He=l(),Zm=a("li"),voe=a("strong"),bHe=o("xglm"),vHe=o(" \u2014 "),Nk=a("a"),FHe=o("XGLMConfig"),THe=o(" (XGLM model)"),MHe=l(),eg=a("li"),Foe=a("strong"),EHe=o("xlm"),CHe=o(" \u2014 "),jk=a("a"),wHe=o("XLMConfig"),AHe=o(" (XLM model)"),yHe=l(),og=a("li"),Toe=a("strong"),LHe=o("xlm-prophetnet"),xHe=o(" \u2014 "),Dk=a("a"),$He=o("XLMProphetNetConfig"),kHe=o(" (XLMProphetNet model)"),SHe=l(),rg=a("li"),Moe=a("strong"),RHe=o("xlm-roberta"),BHe=o(" \u2014 "),Gk=a("a"),PHe=o("XLMRobertaConfig"),IHe=o(" (XLM-RoBERTa model)"),qHe=l(),tg=a("li"),Eoe=a("strong"),NHe=o("xlm-roberta-xl"),jHe=o(" \u2014 "),Ok=a("a"),DHe=o("XLMRobertaXLConfig"),GHe=o(" (XLM-RoBERTa-XL model)"),OHe=l(),ag=a("li"),Coe=a("strong"),VHe=o("xlnet"),XHe=o(" \u2014 "),Vk=a("a"),zHe=o("XLNetConfig"),QHe=o(" (XLNet model)"),WHe=l(),ng=a("li"),woe=a("strong"),HHe=o("yolos"),UHe=o(" \u2014 "),Xk=a("a"),JHe=o("YolosConfig"),YHe=o(" (YOLOS model)"),KHe=l(),sg=a("li"),Aoe=a("strong"),ZHe=o("yoso"),eUe=o(" \u2014 "),zk=a("a"),oUe=o("YosoConfig"),rUe=o(" (YOSO model)"),tUe=l(),F(lg.$$.fragment),aUe=l(),ig=a("div"),F(Nw.$$.fragment),nUe=l(),yoe=a("p"),sUe=o("Register a new configuration for this class."),JBe=l(),mi=a("h2"),dg=a("a"),Loe=a("span"),F(jw.$$.fragment),lUe=l(),xoe=a("span"),iUe=o("AutoTokenizer"),YBe=l(),wo=a("div"),F(Dw.$$.fragment),dUe=l(),Gw=a("p"),cUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Qk=a("a"),fUe=o("AutoTokenizer.from_pretrained()"),mUe=o(" class method."),gUe=l(),Ow=a("p"),hUe=o("This class cannot be instantiated directly using "),$oe=a("code"),pUe=o("__init__()"),uUe=o(" (throws an error)."),_Ue=l(),Er=a("div"),F(Vw.$$.fragment),bUe=l(),koe=a("p"),vUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),FUe=l(),Ta=a("p"),TUe=o("The tokenizer class to instantiate is selected based on the "),Soe=a("code"),MUe=o("model_type"),EUe=o(` property of the config object (either
passed as an argument or loaded from `),Roe=a("code"),CUe=o("pretrained_model_name_or_path"),wUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Boe=a("code"),AUe=o("pretrained_model_name_or_path"),yUe=o(":"),LUe=l(),k=a("ul"),yn=a("li"),Poe=a("strong"),xUe=o("albert"),$Ue=o(" \u2014 "),Wk=a("a"),kUe=o("AlbertTokenizer"),SUe=o(" or "),Hk=a("a"),RUe=o("AlbertTokenizerFast"),BUe=o(" (ALBERT model)"),PUe=l(),Ln=a("li"),Ioe=a("strong"),IUe=o("bart"),qUe=o(" \u2014 "),Uk=a("a"),NUe=o("BartTokenizer"),jUe=o(" or "),Jk=a("a"),DUe=o("BartTokenizerFast"),GUe=o(" (BART model)"),OUe=l(),xn=a("li"),qoe=a("strong"),VUe=o("barthez"),XUe=o(" \u2014 "),Yk=a("a"),zUe=o("BarthezTokenizer"),QUe=o(" or "),Kk=a("a"),WUe=o("BarthezTokenizerFast"),HUe=o(" (BARThez model)"),UUe=l(),cg=a("li"),Noe=a("strong"),JUe=o("bartpho"),YUe=o(" \u2014 "),Zk=a("a"),KUe=o("BartphoTokenizer"),ZUe=o(" (BARTpho model)"),eJe=l(),$n=a("li"),joe=a("strong"),oJe=o("bert"),rJe=o(" \u2014 "),eS=a("a"),tJe=o("BertTokenizer"),aJe=o(" or "),oS=a("a"),nJe=o("BertTokenizerFast"),sJe=o(" (BERT model)"),lJe=l(),fg=a("li"),Doe=a("strong"),iJe=o("bert-generation"),dJe=o(" \u2014 "),rS=a("a"),cJe=o("BertGenerationTokenizer"),fJe=o(" (Bert Generation model)"),mJe=l(),mg=a("li"),Goe=a("strong"),gJe=o("bert-japanese"),hJe=o(" \u2014 "),tS=a("a"),pJe=o("BertJapaneseTokenizer"),uJe=o(" (BertJapanese model)"),_Je=l(),gg=a("li"),Ooe=a("strong"),bJe=o("bertweet"),vJe=o(" \u2014 "),aS=a("a"),FJe=o("BertweetTokenizer"),TJe=o(" (Bertweet model)"),MJe=l(),kn=a("li"),Voe=a("strong"),EJe=o("big_bird"),CJe=o(" \u2014 "),nS=a("a"),wJe=o("BigBirdTokenizer"),AJe=o(" or "),sS=a("a"),yJe=o("BigBirdTokenizerFast"),LJe=o(" (BigBird model)"),xJe=l(),Sn=a("li"),Xoe=a("strong"),$Je=o("bigbird_pegasus"),kJe=o(" \u2014 "),lS=a("a"),SJe=o("PegasusTokenizer"),RJe=o(" or "),iS=a("a"),BJe=o("PegasusTokenizerFast"),PJe=o(" (BigBirdPegasus model)"),IJe=l(),Rn=a("li"),zoe=a("strong"),qJe=o("blenderbot"),NJe=o(" \u2014 "),dS=a("a"),jJe=o("BlenderbotTokenizer"),DJe=o(" or "),cS=a("a"),GJe=o("BlenderbotTokenizerFast"),OJe=o(" (Blenderbot model)"),VJe=l(),hg=a("li"),Qoe=a("strong"),XJe=o("blenderbot-small"),zJe=o(" \u2014 "),fS=a("a"),QJe=o("BlenderbotSmallTokenizer"),WJe=o(" (BlenderbotSmall model)"),HJe=l(),pg=a("li"),Woe=a("strong"),UJe=o("byt5"),JJe=o(" \u2014 "),mS=a("a"),YJe=o("ByT5Tokenizer"),KJe=o(" (ByT5 model)"),ZJe=l(),Bn=a("li"),Hoe=a("strong"),eYe=o("camembert"),oYe=o(" \u2014 "),gS=a("a"),rYe=o("CamembertTokenizer"),tYe=o(" or "),hS=a("a"),aYe=o("CamembertTokenizerFast"),nYe=o(" (CamemBERT model)"),sYe=l(),ug=a("li"),Uoe=a("strong"),lYe=o("canine"),iYe=o(" \u2014 "),pS=a("a"),dYe=o("CanineTokenizer"),cYe=o(" (Canine model)"),fYe=l(),Pn=a("li"),Joe=a("strong"),mYe=o("clip"),gYe=o(" \u2014 "),uS=a("a"),hYe=o("CLIPTokenizer"),pYe=o(" or "),_S=a("a"),uYe=o("CLIPTokenizerFast"),_Ye=o(" (CLIP model)"),bYe=l(),In=a("li"),Yoe=a("strong"),vYe=o("convbert"),FYe=o(" \u2014 "),bS=a("a"),TYe=o("ConvBertTokenizer"),MYe=o(" or "),vS=a("a"),EYe=o("ConvBertTokenizerFast"),CYe=o(" (ConvBERT model)"),wYe=l(),qn=a("li"),Koe=a("strong"),AYe=o("cpm"),yYe=o(" \u2014 "),FS=a("a"),LYe=o("CpmTokenizer"),xYe=o(" or "),TS=a("a"),$Ye=o("CpmTokenizerFast"),kYe=o(" (CPM model)"),SYe=l(),_g=a("li"),Zoe=a("strong"),RYe=o("ctrl"),BYe=o(" \u2014 "),MS=a("a"),PYe=o("CTRLTokenizer"),IYe=o(" (CTRL model)"),qYe=l(),Nn=a("li"),ere=a("strong"),NYe=o("data2vec-text"),jYe=o(" \u2014 "),ES=a("a"),DYe=o("RobertaTokenizer"),GYe=o(" or "),CS=a("a"),OYe=o("RobertaTokenizerFast"),VYe=o(" (Data2VecText model)"),XYe=l(),jn=a("li"),ore=a("strong"),zYe=o("deberta"),QYe=o(" \u2014 "),wS=a("a"),WYe=o("DebertaTokenizer"),HYe=o(" or "),AS=a("a"),UYe=o("DebertaTokenizerFast"),JYe=o(" (DeBERTa model)"),YYe=l(),Dn=a("li"),rre=a("strong"),KYe=o("deberta-v2"),ZYe=o(" \u2014 "),yS=a("a"),eKe=o("DebertaV2Tokenizer"),oKe=o(" or "),LS=a("a"),rKe=o("DebertaV2TokenizerFast"),tKe=o(" (DeBERTa-v2 model)"),aKe=l(),Gn=a("li"),tre=a("strong"),nKe=o("distilbert"),sKe=o(" \u2014 "),xS=a("a"),lKe=o("DistilBertTokenizer"),iKe=o(" or "),$S=a("a"),dKe=o("DistilBertTokenizerFast"),cKe=o(" (DistilBERT model)"),fKe=l(),On=a("li"),are=a("strong"),mKe=o("dpr"),gKe=o(" \u2014 "),kS=a("a"),hKe=o("DPRQuestionEncoderTokenizer"),pKe=o(" or "),SS=a("a"),uKe=o("DPRQuestionEncoderTokenizerFast"),_Ke=o(" (DPR model)"),bKe=l(),Vn=a("li"),nre=a("strong"),vKe=o("electra"),FKe=o(" \u2014 "),RS=a("a"),TKe=o("ElectraTokenizer"),MKe=o(" or "),BS=a("a"),EKe=o("ElectraTokenizerFast"),CKe=o(" (ELECTRA model)"),wKe=l(),bg=a("li"),sre=a("strong"),AKe=o("flaubert"),yKe=o(" \u2014 "),PS=a("a"),LKe=o("FlaubertTokenizer"),xKe=o(" (FlauBERT model)"),$Ke=l(),Xn=a("li"),lre=a("strong"),kKe=o("fnet"),SKe=o(" \u2014 "),IS=a("a"),RKe=o("FNetTokenizer"),BKe=o(" or "),qS=a("a"),PKe=o("FNetTokenizerFast"),IKe=o(" (FNet model)"),qKe=l(),vg=a("li"),ire=a("strong"),NKe=o("fsmt"),jKe=o(" \u2014 "),NS=a("a"),DKe=o("FSMTTokenizer"),GKe=o(" (FairSeq Machine-Translation model)"),OKe=l(),zn=a("li"),dre=a("strong"),VKe=o("funnel"),XKe=o(" \u2014 "),jS=a("a"),zKe=o("FunnelTokenizer"),QKe=o(" or "),DS=a("a"),WKe=o("FunnelTokenizerFast"),HKe=o(" (Funnel Transformer model)"),UKe=l(),Qn=a("li"),cre=a("strong"),JKe=o("gpt2"),YKe=o(" \u2014 "),GS=a("a"),KKe=o("GPT2Tokenizer"),ZKe=o(" or "),OS=a("a"),eZe=o("GPT2TokenizerFast"),oZe=o(" (OpenAI GPT-2 model)"),rZe=l(),Wn=a("li"),fre=a("strong"),tZe=o("gpt_neo"),aZe=o(" \u2014 "),VS=a("a"),nZe=o("GPT2Tokenizer"),sZe=o(" or "),XS=a("a"),lZe=o("GPT2TokenizerFast"),iZe=o(" (GPT Neo model)"),dZe=l(),Hn=a("li"),mre=a("strong"),cZe=o("gptj"),fZe=o(" \u2014 "),zS=a("a"),mZe=o("GPT2Tokenizer"),gZe=o(" or "),QS=a("a"),hZe=o("GPT2TokenizerFast"),pZe=o(" (GPT-J model)"),uZe=l(),Un=a("li"),gre=a("strong"),_Ze=o("herbert"),bZe=o(" \u2014 "),WS=a("a"),vZe=o("HerbertTokenizer"),FZe=o(" or "),HS=a("a"),TZe=o("HerbertTokenizerFast"),MZe=o(" (HerBERT model)"),EZe=l(),Fg=a("li"),hre=a("strong"),CZe=o("hubert"),wZe=o(" \u2014 "),US=a("a"),AZe=o("Wav2Vec2CTCTokenizer"),yZe=o(" (Hubert model)"),LZe=l(),Jn=a("li"),pre=a("strong"),xZe=o("ibert"),$Ze=o(" \u2014 "),JS=a("a"),kZe=o("RobertaTokenizer"),SZe=o(" or "),YS=a("a"),RZe=o("RobertaTokenizerFast"),BZe=o(" (I-BERT model)"),PZe=l(),Yn=a("li"),ure=a("strong"),IZe=o("layoutlm"),qZe=o(" \u2014 "),KS=a("a"),NZe=o("LayoutLMTokenizer"),jZe=o(" or "),ZS=a("a"),DZe=o("LayoutLMTokenizerFast"),GZe=o(" (LayoutLM model)"),OZe=l(),Kn=a("li"),_re=a("strong"),VZe=o("layoutlmv2"),XZe=o(" \u2014 "),eR=a("a"),zZe=o("LayoutLMv2Tokenizer"),QZe=o(" or "),oR=a("a"),WZe=o("LayoutLMv2TokenizerFast"),HZe=o(" (LayoutLMv2 model)"),UZe=l(),Zn=a("li"),bre=a("strong"),JZe=o("layoutxlm"),YZe=o(" \u2014 "),rR=a("a"),KZe=o("LayoutXLMTokenizer"),ZZe=o(" or "),tR=a("a"),eeo=o("LayoutXLMTokenizerFast"),oeo=o(" (LayoutXLM model)"),reo=l(),es=a("li"),vre=a("strong"),teo=o("led"),aeo=o(" \u2014 "),aR=a("a"),neo=o("LEDTokenizer"),seo=o(" or "),nR=a("a"),leo=o("LEDTokenizerFast"),ieo=o(" (LED model)"),deo=l(),os=a("li"),Fre=a("strong"),ceo=o("longformer"),feo=o(" \u2014 "),sR=a("a"),meo=o("LongformerTokenizer"),geo=o(" or "),lR=a("a"),heo=o("LongformerTokenizerFast"),peo=o(" (Longformer model)"),ueo=l(),Tg=a("li"),Tre=a("strong"),_eo=o("luke"),beo=o(" \u2014 "),iR=a("a"),veo=o("LukeTokenizer"),Feo=o(" (LUKE model)"),Teo=l(),rs=a("li"),Mre=a("strong"),Meo=o("lxmert"),Eeo=o(" \u2014 "),dR=a("a"),Ceo=o("LxmertTokenizer"),weo=o(" or "),cR=a("a"),Aeo=o("LxmertTokenizerFast"),yeo=o(" (LXMERT model)"),Leo=l(),Mg=a("li"),Ere=a("strong"),xeo=o("m2m_100"),$eo=o(" \u2014 "),fR=a("a"),keo=o("M2M100Tokenizer"),Seo=o(" (M2M100 model)"),Reo=l(),Eg=a("li"),Cre=a("strong"),Beo=o("marian"),Peo=o(" \u2014 "),mR=a("a"),Ieo=o("MarianTokenizer"),qeo=o(" (Marian model)"),Neo=l(),ts=a("li"),wre=a("strong"),jeo=o("mbart"),Deo=o(" \u2014 "),gR=a("a"),Geo=o("MBartTokenizer"),Oeo=o(" or "),hR=a("a"),Veo=o("MBartTokenizerFast"),Xeo=o(" (mBART model)"),zeo=l(),as=a("li"),Are=a("strong"),Qeo=o("mbart50"),Weo=o(" \u2014 "),pR=a("a"),Heo=o("MBart50Tokenizer"),Ueo=o(" or "),uR=a("a"),Jeo=o("MBart50TokenizerFast"),Yeo=o(" (mBART-50 model)"),Keo=l(),ns=a("li"),yre=a("strong"),Zeo=o("megatron-bert"),eoo=o(" \u2014 "),_R=a("a"),ooo=o("BertTokenizer"),roo=o(" or "),bR=a("a"),too=o("BertTokenizerFast"),aoo=o(" (MegatronBert model)"),noo=l(),Cg=a("li"),Lre=a("strong"),soo=o("mluke"),loo=o(" \u2014 "),vR=a("a"),ioo=o("MLukeTokenizer"),doo=o(" (mLUKE model)"),coo=l(),ss=a("li"),xre=a("strong"),foo=o("mobilebert"),moo=o(" \u2014 "),FR=a("a"),goo=o("MobileBertTokenizer"),hoo=o(" or "),TR=a("a"),poo=o("MobileBertTokenizerFast"),uoo=o(" (MobileBERT model)"),_oo=l(),ls=a("li"),$re=a("strong"),boo=o("mpnet"),voo=o(" \u2014 "),MR=a("a"),Foo=o("MPNetTokenizer"),Too=o(" or "),ER=a("a"),Moo=o("MPNetTokenizerFast"),Eoo=o(" (MPNet model)"),Coo=l(),is=a("li"),kre=a("strong"),woo=o("mt5"),Aoo=o(" \u2014 "),CR=a("a"),yoo=o("MT5Tokenizer"),Loo=o(" or "),wR=a("a"),xoo=o("MT5TokenizerFast"),$oo=o(" (mT5 model)"),koo=l(),ds=a("li"),Sre=a("strong"),Soo=o("nystromformer"),Roo=o(" \u2014 "),AR=a("a"),Boo=o("AlbertTokenizer"),Poo=o(" or "),yR=a("a"),Ioo=o("AlbertTokenizerFast"),qoo=o(" (Nystromformer model)"),Noo=l(),cs=a("li"),Rre=a("strong"),joo=o("openai-gpt"),Doo=o(" \u2014 "),LR=a("a"),Goo=o("OpenAIGPTTokenizer"),Ooo=o(" or "),xR=a("a"),Voo=o("OpenAIGPTTokenizerFast"),Xoo=o(" (OpenAI GPT model)"),zoo=l(),fs=a("li"),Bre=a("strong"),Qoo=o("opt"),Woo=o(" \u2014 "),$R=a("a"),Hoo=o("GPT2Tokenizer"),Uoo=o(" or "),kR=a("a"),Joo=o("GPT2TokenizerFast"),Yoo=o(" (OPT model)"),Koo=l(),ms=a("li"),Pre=a("strong"),Zoo=o("pegasus"),ero=o(" \u2014 "),SR=a("a"),oro=o("PegasusTokenizer"),rro=o(" or "),RR=a("a"),tro=o("PegasusTokenizerFast"),aro=o(" (Pegasus model)"),nro=l(),wg=a("li"),Ire=a("strong"),sro=o("perceiver"),lro=o(" \u2014 "),BR=a("a"),iro=o("PerceiverTokenizer"),dro=o(" (Perceiver model)"),cro=l(),Ag=a("li"),qre=a("strong"),fro=o("phobert"),mro=o(" \u2014 "),PR=a("a"),gro=o("PhobertTokenizer"),hro=o(" (PhoBERT model)"),pro=l(),yg=a("li"),Nre=a("strong"),uro=o("plbart"),_ro=o(" \u2014 "),IR=a("a"),bro=o("PLBartTokenizer"),vro=o(" (PLBart model)"),Fro=l(),Lg=a("li"),jre=a("strong"),Tro=o("prophetnet"),Mro=o(" \u2014 "),qR=a("a"),Ero=o("ProphetNetTokenizer"),Cro=o(" (ProphetNet model)"),wro=l(),gs=a("li"),Dre=a("strong"),Aro=o("qdqbert"),yro=o(" \u2014 "),NR=a("a"),Lro=o("BertTokenizer"),xro=o(" or "),jR=a("a"),$ro=o("BertTokenizerFast"),kro=o(" (QDQBert model)"),Sro=l(),xg=a("li"),Gre=a("strong"),Rro=o("rag"),Bro=o(" \u2014 "),DR=a("a"),Pro=o("RagTokenizer"),Iro=o(" (RAG model)"),qro=l(),hs=a("li"),Ore=a("strong"),Nro=o("realm"),jro=o(" \u2014 "),GR=a("a"),Dro=o("RealmTokenizer"),Gro=o(" or "),OR=a("a"),Oro=o("RealmTokenizerFast"),Vro=o(" (Realm model)"),Xro=l(),ps=a("li"),Vre=a("strong"),zro=o("reformer"),Qro=o(" \u2014 "),VR=a("a"),Wro=o("ReformerTokenizer"),Hro=o(" or "),XR=a("a"),Uro=o("ReformerTokenizerFast"),Jro=o(" (Reformer model)"),Yro=l(),us=a("li"),Xre=a("strong"),Kro=o("rembert"),Zro=o(" \u2014 "),zR=a("a"),eto=o("RemBertTokenizer"),oto=o(" or "),QR=a("a"),rto=o("RemBertTokenizerFast"),tto=o(" (RemBERT model)"),ato=l(),_s=a("li"),zre=a("strong"),nto=o("retribert"),sto=o(" \u2014 "),WR=a("a"),lto=o("RetriBertTokenizer"),ito=o(" or "),HR=a("a"),dto=o("RetriBertTokenizerFast"),cto=o(" (RetriBERT model)"),fto=l(),bs=a("li"),Qre=a("strong"),mto=o("roberta"),gto=o(" \u2014 "),UR=a("a"),hto=o("RobertaTokenizer"),pto=o(" or "),JR=a("a"),uto=o("RobertaTokenizerFast"),_to=o(" (RoBERTa model)"),bto=l(),vs=a("li"),Wre=a("strong"),vto=o("roformer"),Fto=o(" \u2014 "),YR=a("a"),Tto=o("RoFormerTokenizer"),Mto=o(" or "),KR=a("a"),Eto=o("RoFormerTokenizerFast"),Cto=o(" (RoFormer model)"),wto=l(),$g=a("li"),Hre=a("strong"),Ato=o("speech_to_text"),yto=o(" \u2014 "),ZR=a("a"),Lto=o("Speech2TextTokenizer"),xto=o(" (Speech2Text model)"),$to=l(),kg=a("li"),Ure=a("strong"),kto=o("speech_to_text_2"),Sto=o(" \u2014 "),eB=a("a"),Rto=o("Speech2Text2Tokenizer"),Bto=o(" (Speech2Text2 model)"),Pto=l(),Fs=a("li"),Jre=a("strong"),Ito=o("splinter"),qto=o(" \u2014 "),oB=a("a"),Nto=o("SplinterTokenizer"),jto=o(" or "),rB=a("a"),Dto=o("SplinterTokenizerFast"),Gto=o(" (Splinter model)"),Oto=l(),Ts=a("li"),Yre=a("strong"),Vto=o("squeezebert"),Xto=o(" \u2014 "),tB=a("a"),zto=o("SqueezeBertTokenizer"),Qto=o(" or "),aB=a("a"),Wto=o("SqueezeBertTokenizerFast"),Hto=o(" (SqueezeBERT model)"),Uto=l(),Ms=a("li"),Kre=a("strong"),Jto=o("t5"),Yto=o(" \u2014 "),nB=a("a"),Kto=o("T5Tokenizer"),Zto=o(" or "),sB=a("a"),eao=o("T5TokenizerFast"),oao=o(" (T5 model)"),rao=l(),Sg=a("li"),Zre=a("strong"),tao=o("tapas"),aao=o(" \u2014 "),lB=a("a"),nao=o("TapasTokenizer"),sao=o(" (TAPAS model)"),lao=l(),Rg=a("li"),ete=a("strong"),iao=o("tapex"),dao=o(" \u2014 "),iB=a("a"),cao=o("TapexTokenizer"),fao=o(" (TAPEX model)"),mao=l(),Bg=a("li"),ote=a("strong"),gao=o("transfo-xl"),hao=o(" \u2014 "),dB=a("a"),pao=o("TransfoXLTokenizer"),uao=o(" (Transformer-XL model)"),_ao=l(),Es=a("li"),rte=a("strong"),bao=o("visual_bert"),vao=o(" \u2014 "),cB=a("a"),Fao=o("BertTokenizer"),Tao=o(" or "),fB=a("a"),Mao=o("BertTokenizerFast"),Eao=o(" (VisualBert model)"),Cao=l(),Pg=a("li"),tte=a("strong"),wao=o("wav2vec2"),Aao=o(" \u2014 "),mB=a("a"),yao=o("Wav2Vec2CTCTokenizer"),Lao=o(" (Wav2Vec2 model)"),xao=l(),Ig=a("li"),ate=a("strong"),$ao=o("wav2vec2_phoneme"),kao=o(" \u2014 "),gB=a("a"),Sao=o("Wav2Vec2PhonemeCTCTokenizer"),Rao=o(" (Wav2Vec2Phoneme model)"),Bao=l(),Cs=a("li"),nte=a("strong"),Pao=o("xglm"),Iao=o(" \u2014 "),hB=a("a"),qao=o("XGLMTokenizer"),Nao=o(" or "),pB=a("a"),jao=o("XGLMTokenizerFast"),Dao=o(" (XGLM model)"),Gao=l(),qg=a("li"),ste=a("strong"),Oao=o("xlm"),Vao=o(" \u2014 "),uB=a("a"),Xao=o("XLMTokenizer"),zao=o(" (XLM model)"),Qao=l(),Ng=a("li"),lte=a("strong"),Wao=o("xlm-prophetnet"),Hao=o(" \u2014 "),_B=a("a"),Uao=o("XLMProphetNetTokenizer"),Jao=o(" (XLMProphetNet model)"),Yao=l(),ws=a("li"),ite=a("strong"),Kao=o("xlm-roberta"),Zao=o(" \u2014 "),bB=a("a"),eno=o("XLMRobertaTokenizer"),ono=o(" or "),vB=a("a"),rno=o("XLMRobertaTokenizerFast"),tno=o(" (XLM-RoBERTa model)"),ano=l(),As=a("li"),dte=a("strong"),nno=o("xlm-roberta-xl"),sno=o(" \u2014 "),FB=a("a"),lno=o("RobertaTokenizer"),ino=o(" or "),TB=a("a"),dno=o("RobertaTokenizerFast"),cno=o(" (XLM-RoBERTa-XL model)"),fno=l(),ys=a("li"),cte=a("strong"),mno=o("xlnet"),gno=o(" \u2014 "),MB=a("a"),hno=o("XLNetTokenizer"),pno=o(" or "),EB=a("a"),uno=o("XLNetTokenizerFast"),_no=o(" (XLNet model)"),bno=l(),Ls=a("li"),fte=a("strong"),vno=o("yoso"),Fno=o(" \u2014 "),CB=a("a"),Tno=o("AlbertTokenizer"),Mno=o(" or "),wB=a("a"),Eno=o("AlbertTokenizerFast"),Cno=o(" (YOSO model)"),wno=l(),F(jg.$$.fragment),Ano=l(),Dg=a("div"),F(Xw.$$.fragment),yno=l(),mte=a("p"),Lno=o("Register a new tokenizer in this mapping."),KBe=l(),gi=a("h2"),Gg=a("a"),gte=a("span"),F(zw.$$.fragment),xno=l(),hte=a("span"),$no=o("AutoFeatureExtractor"),ZBe=l(),Ao=a("div"),F(Qw.$$.fragment),kno=l(),Ww=a("p"),Sno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AB=a("a"),Rno=o("AutoFeatureExtractor.from_pretrained()"),Bno=o(" class method."),Pno=l(),Hw=a("p"),Ino=o("This class cannot be instantiated directly using "),pte=a("code"),qno=o("__init__()"),Nno=o(" (throws an error)."),jno=l(),Qe=a("div"),F(Uw.$$.fragment),Dno=l(),ute=a("p"),Gno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ono=l(),Ma=a("p"),Vno=o("The feature extractor class to instantiate is selected based on the "),_te=a("code"),Xno=o("model_type"),zno=o(` property of the config object
(either passed as an argument or loaded from `),bte=a("code"),Qno=o("pretrained_model_name_or_path"),Wno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),vte=a("code"),Hno=o("pretrained_model_name_or_path"),Uno=o(":"),Jno=l(),ae=a("ul"),Og=a("li"),Fte=a("strong"),Yno=o("beit"),Kno=o(" \u2014 "),yB=a("a"),Zno=o("BeitFeatureExtractor"),eso=o(" (BEiT model)"),oso=l(),Vg=a("li"),Tte=a("strong"),rso=o("clip"),tso=o(" \u2014 "),LB=a("a"),aso=o("CLIPFeatureExtractor"),nso=o(" (CLIP model)"),sso=l(),Xg=a("li"),Mte=a("strong"),lso=o("convnext"),iso=o(" \u2014 "),xB=a("a"),dso=o("ConvNextFeatureExtractor"),cso=o(" (ConvNext model)"),fso=l(),zg=a("li"),Ete=a("strong"),mso=o("data2vec-audio"),gso=o(" \u2014 "),$B=a("a"),hso=o("Wav2Vec2FeatureExtractor"),pso=o(" (Data2VecAudio model)"),uso=l(),Qg=a("li"),Cte=a("strong"),_so=o("data2vec-vision"),bso=o(" \u2014 "),kB=a("a"),vso=o("BeitFeatureExtractor"),Fso=o(" (Data2VecVision model)"),Tso=l(),Wg=a("li"),wte=a("strong"),Mso=o("deit"),Eso=o(" \u2014 "),SB=a("a"),Cso=o("DeiTFeatureExtractor"),wso=o(" (DeiT model)"),Aso=l(),Hg=a("li"),Ate=a("strong"),yso=o("detr"),Lso=o(" \u2014 "),RB=a("a"),xso=o("DetrFeatureExtractor"),$so=o(" (DETR model)"),kso=l(),Ug=a("li"),yte=a("strong"),Sso=o("dpt"),Rso=o(" \u2014 "),BB=a("a"),Bso=o("DPTFeatureExtractor"),Pso=o(" (DPT model)"),Iso=l(),Jg=a("li"),Lte=a("strong"),qso=o("glpn"),Nso=o(" \u2014 "),PB=a("a"),jso=o("GLPNFeatureExtractor"),Dso=o(" (GLPN model)"),Gso=l(),Yg=a("li"),xte=a("strong"),Oso=o("hubert"),Vso=o(" \u2014 "),IB=a("a"),Xso=o("Wav2Vec2FeatureExtractor"),zso=o(" (Hubert model)"),Qso=l(),Kg=a("li"),$te=a("strong"),Wso=o("layoutlmv2"),Hso=o(" \u2014 "),qB=a("a"),Uso=o("LayoutLMv2FeatureExtractor"),Jso=o(" (LayoutLMv2 model)"),Yso=l(),Zg=a("li"),kte=a("strong"),Kso=o("maskformer"),Zso=o(" \u2014 "),NB=a("a"),elo=o("MaskFormerFeatureExtractor"),olo=o(" (MaskFormer model)"),rlo=l(),eh=a("li"),Ste=a("strong"),tlo=o("perceiver"),alo=o(" \u2014 "),jB=a("a"),nlo=o("PerceiverFeatureExtractor"),slo=o(" (Perceiver model)"),llo=l(),oh=a("li"),Rte=a("strong"),ilo=o("poolformer"),dlo=o(" \u2014 "),DB=a("a"),clo=o("PoolFormerFeatureExtractor"),flo=o(" (PoolFormer model)"),mlo=l(),rh=a("li"),Bte=a("strong"),glo=o("regnet"),hlo=o(" \u2014 "),GB=a("a"),plo=o("ConvNextFeatureExtractor"),ulo=o(" (RegNet model)"),_lo=l(),th=a("li"),Pte=a("strong"),blo=o("resnet"),vlo=o(" \u2014 "),OB=a("a"),Flo=o("ConvNextFeatureExtractor"),Tlo=o(" (ResNet model)"),Mlo=l(),ah=a("li"),Ite=a("strong"),Elo=o("segformer"),Clo=o(" \u2014 "),VB=a("a"),wlo=o("SegformerFeatureExtractor"),Alo=o(" (SegFormer model)"),ylo=l(),nh=a("li"),qte=a("strong"),Llo=o("speech_to_text"),xlo=o(" \u2014 "),XB=a("a"),$lo=o("Speech2TextFeatureExtractor"),klo=o(" (Speech2Text model)"),Slo=l(),sh=a("li"),Nte=a("strong"),Rlo=o("swin"),Blo=o(" \u2014 "),zB=a("a"),Plo=o("ViTFeatureExtractor"),Ilo=o(" (Swin model)"),qlo=l(),lh=a("li"),jte=a("strong"),Nlo=o("van"),jlo=o(" \u2014 "),QB=a("a"),Dlo=o("ConvNextFeatureExtractor"),Glo=o(" (VAN model)"),Olo=l(),ih=a("li"),Dte=a("strong"),Vlo=o("vit"),Xlo=o(" \u2014 "),WB=a("a"),zlo=o("ViTFeatureExtractor"),Qlo=o(" (ViT model)"),Wlo=l(),dh=a("li"),Gte=a("strong"),Hlo=o("vit_mae"),Ulo=o(" \u2014 "),HB=a("a"),Jlo=o("ViTFeatureExtractor"),Ylo=o(" (ViTMAE model)"),Klo=l(),ch=a("li"),Ote=a("strong"),Zlo=o("wav2vec2"),eio=o(" \u2014 "),UB=a("a"),oio=o("Wav2Vec2FeatureExtractor"),rio=o(" (Wav2Vec2 model)"),tio=l(),fh=a("li"),Vte=a("strong"),aio=o("yolos"),nio=o(" \u2014 "),JB=a("a"),sio=o("YolosFeatureExtractor"),lio=o(" (YOLOS model)"),iio=l(),F(mh.$$.fragment),dio=l(),F(gh.$$.fragment),cio=l(),hh=a("div"),F(Jw.$$.fragment),fio=l(),Xte=a("p"),mio=o("Register a new feature extractor for this class."),ePe=l(),hi=a("h2"),ph=a("a"),zte=a("span"),F(Yw.$$.fragment),gio=l(),Qte=a("span"),hio=o("AutoProcessor"),oPe=l(),yo=a("div"),F(Kw.$$.fragment),pio=l(),Zw=a("p"),uio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YB=a("a"),_io=o("AutoProcessor.from_pretrained()"),bio=o(" class method."),vio=l(),eA=a("p"),Fio=o("This class cannot be instantiated directly using "),Wte=a("code"),Tio=o("__init__()"),Mio=o(" (throws an error)."),Eio=l(),We=a("div"),F(oA.$$.fragment),Cio=l(),Hte=a("p"),wio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Aio=l(),pi=a("p"),yio=o("The processor class to instantiate is selected based on the "),Ute=a("code"),Lio=o("model_type"),xio=o(` property of the config object (either
passed as an argument or loaded from `),Jte=a("code"),$io=o("pretrained_model_name_or_path"),kio=o(" if possible):"),Sio=l(),be=a("ul"),uh=a("li"),Yte=a("strong"),Rio=o("clip"),Bio=o(" \u2014 "),KB=a("a"),Pio=o("CLIPProcessor"),Iio=o(" (CLIP model)"),qio=l(),_h=a("li"),Kte=a("strong"),Nio=o("layoutlmv2"),jio=o(" \u2014 "),ZB=a("a"),Dio=o("LayoutLMv2Processor"),Gio=o(" (LayoutLMv2 model)"),Oio=l(),bh=a("li"),Zte=a("strong"),Vio=o("layoutxlm"),Xio=o(" \u2014 "),eP=a("a"),zio=o("LayoutXLMProcessor"),Qio=o(" (LayoutXLM model)"),Wio=l(),vh=a("li"),eae=a("strong"),Hio=o("sew"),Uio=o(" \u2014 "),oP=a("a"),Jio=o("Wav2Vec2Processor"),Yio=o(" (SEW model)"),Kio=l(),Fh=a("li"),oae=a("strong"),Zio=o("sew-d"),edo=o(" \u2014 "),rP=a("a"),odo=o("Wav2Vec2Processor"),rdo=o(" (SEW-D model)"),tdo=l(),Th=a("li"),rae=a("strong"),ado=o("speech_to_text"),ndo=o(" \u2014 "),tP=a("a"),sdo=o("Speech2TextProcessor"),ldo=o(" (Speech2Text model)"),ido=l(),Mh=a("li"),tae=a("strong"),ddo=o("speech_to_text_2"),cdo=o(" \u2014 "),aP=a("a"),fdo=o("Speech2Text2Processor"),mdo=o(" (Speech2Text2 model)"),gdo=l(),Eh=a("li"),aae=a("strong"),hdo=o("trocr"),pdo=o(" \u2014 "),nP=a("a"),udo=o("TrOCRProcessor"),_do=o(" (TrOCR model)"),bdo=l(),Ch=a("li"),nae=a("strong"),vdo=o("unispeech"),Fdo=o(" \u2014 "),sP=a("a"),Tdo=o("Wav2Vec2Processor"),Mdo=o(" (UniSpeech model)"),Edo=l(),wh=a("li"),sae=a("strong"),Cdo=o("unispeech-sat"),wdo=o(" \u2014 "),lP=a("a"),Ado=o("Wav2Vec2Processor"),ydo=o(" (UniSpeechSat model)"),Ldo=l(),Ah=a("li"),lae=a("strong"),xdo=o("vilt"),$do=o(" \u2014 "),iP=a("a"),kdo=o("ViltProcessor"),Sdo=o(" (ViLT model)"),Rdo=l(),yh=a("li"),iae=a("strong"),Bdo=o("vision-text-dual-encoder"),Pdo=o(" \u2014 "),dP=a("a"),Ido=o("VisionTextDualEncoderProcessor"),qdo=o(" (VisionTextDualEncoder model)"),Ndo=l(),Lh=a("li"),dae=a("strong"),jdo=o("wav2vec2"),Ddo=o(" \u2014 "),cP=a("a"),Gdo=o("Wav2Vec2Processor"),Odo=o(" (Wav2Vec2 model)"),Vdo=l(),xh=a("li"),cae=a("strong"),Xdo=o("wavlm"),zdo=o(" \u2014 "),fP=a("a"),Qdo=o("Wav2Vec2Processor"),Wdo=o(" (WavLM model)"),Hdo=l(),F($h.$$.fragment),Udo=l(),F(kh.$$.fragment),Jdo=l(),Sh=a("div"),F(rA.$$.fragment),Ydo=l(),fae=a("p"),Kdo=o("Register a new processor for this class."),rPe=l(),ui=a("h2"),Rh=a("a"),mae=a("span"),F(tA.$$.fragment),Zdo=l(),gae=a("span"),eco=o("AutoModel"),tPe=l(),Lo=a("div"),F(aA.$$.fragment),oco=l(),_i=a("p"),rco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mP=a("a"),tco=o("from_pretrained()"),aco=o(" class method or the "),gP=a("a"),nco=o("from_config()"),sco=o(` class
method.`),lco=l(),nA=a("p"),ico=o("This class cannot be instantiated directly using "),hae=a("code"),dco=o("__init__()"),cco=o(" (throws an error)."),fco=l(),Zr=a("div"),F(sA.$$.fragment),mco=l(),pae=a("p"),gco=o("Instantiates one of the base model classes of the library from a configuration."),hco=l(),bi=a("p"),pco=o(`Note:
Loading a model from its configuration file does `),uae=a("strong"),uco=o("not"),_co=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hP=a("a"),bco=o("from_pretrained()"),vco=o(" to load the model weights."),Fco=l(),F(Bh.$$.fragment),Tco=l(),He=a("div"),F(lA.$$.fragment),Mco=l(),_ae=a("p"),Eco=o("Instantiate one of the base model classes of the library from a pretrained model."),Cco=l(),Ea=a("p"),wco=o("The model class to instantiate is selected based on the "),bae=a("code"),Aco=o("model_type"),yco=o(` property of the config object (either
passed as an argument or loaded from `),vae=a("code"),Lco=o("pretrained_model_name_or_path"),xco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fae=a("code"),$co=o("pretrained_model_name_or_path"),kco=o(":"),Sco=l(),x=a("ul"),Ph=a("li"),Tae=a("strong"),Rco=o("albert"),Bco=o(" \u2014 "),pP=a("a"),Pco=o("AlbertModel"),Ico=o(" (ALBERT model)"),qco=l(),Ih=a("li"),Mae=a("strong"),Nco=o("bart"),jco=o(" \u2014 "),uP=a("a"),Dco=o("BartModel"),Gco=o(" (BART model)"),Oco=l(),qh=a("li"),Eae=a("strong"),Vco=o("beit"),Xco=o(" \u2014 "),_P=a("a"),zco=o("BeitModel"),Qco=o(" (BEiT model)"),Wco=l(),Nh=a("li"),Cae=a("strong"),Hco=o("bert"),Uco=o(" \u2014 "),bP=a("a"),Jco=o("BertModel"),Yco=o(" (BERT model)"),Kco=l(),jh=a("li"),wae=a("strong"),Zco=o("bert-generation"),efo=o(" \u2014 "),vP=a("a"),ofo=o("BertGenerationEncoder"),rfo=o(" (Bert Generation model)"),tfo=l(),Dh=a("li"),Aae=a("strong"),afo=o("big_bird"),nfo=o(" \u2014 "),FP=a("a"),sfo=o("BigBirdModel"),lfo=o(" (BigBird model)"),ifo=l(),Gh=a("li"),yae=a("strong"),dfo=o("bigbird_pegasus"),cfo=o(" \u2014 "),TP=a("a"),ffo=o("BigBirdPegasusModel"),mfo=o(" (BigBirdPegasus model)"),gfo=l(),Oh=a("li"),Lae=a("strong"),hfo=o("blenderbot"),pfo=o(" \u2014 "),MP=a("a"),ufo=o("BlenderbotModel"),_fo=o(" (Blenderbot model)"),bfo=l(),Vh=a("li"),xae=a("strong"),vfo=o("blenderbot-small"),Ffo=o(" \u2014 "),EP=a("a"),Tfo=o("BlenderbotSmallModel"),Mfo=o(" (BlenderbotSmall model)"),Efo=l(),Xh=a("li"),$ae=a("strong"),Cfo=o("camembert"),wfo=o(" \u2014 "),CP=a("a"),Afo=o("CamembertModel"),yfo=o(" (CamemBERT model)"),Lfo=l(),zh=a("li"),kae=a("strong"),xfo=o("canine"),$fo=o(" \u2014 "),wP=a("a"),kfo=o("CanineModel"),Sfo=o(" (Canine model)"),Rfo=l(),Qh=a("li"),Sae=a("strong"),Bfo=o("clip"),Pfo=o(" \u2014 "),AP=a("a"),Ifo=o("CLIPModel"),qfo=o(" (CLIP model)"),Nfo=l(),Wh=a("li"),Rae=a("strong"),jfo=o("convbert"),Dfo=o(" \u2014 "),yP=a("a"),Gfo=o("ConvBertModel"),Ofo=o(" (ConvBERT model)"),Vfo=l(),Hh=a("li"),Bae=a("strong"),Xfo=o("convnext"),zfo=o(" \u2014 "),LP=a("a"),Qfo=o("ConvNextModel"),Wfo=o(" (ConvNext model)"),Hfo=l(),Uh=a("li"),Pae=a("strong"),Ufo=o("ctrl"),Jfo=o(" \u2014 "),xP=a("a"),Yfo=o("CTRLModel"),Kfo=o(" (CTRL model)"),Zfo=l(),Jh=a("li"),Iae=a("strong"),emo=o("data2vec-audio"),omo=o(" \u2014 "),$P=a("a"),rmo=o("Data2VecAudioModel"),tmo=o(" (Data2VecAudio model)"),amo=l(),Yh=a("li"),qae=a("strong"),nmo=o("data2vec-text"),smo=o(" \u2014 "),kP=a("a"),lmo=o("Data2VecTextModel"),imo=o(" (Data2VecText model)"),dmo=l(),Kh=a("li"),Nae=a("strong"),cmo=o("data2vec-vision"),fmo=o(" \u2014 "),SP=a("a"),mmo=o("Data2VecVisionModel"),gmo=o(" (Data2VecVision model)"),hmo=l(),Zh=a("li"),jae=a("strong"),pmo=o("deberta"),umo=o(" \u2014 "),RP=a("a"),_mo=o("DebertaModel"),bmo=o(" (DeBERTa model)"),vmo=l(),ep=a("li"),Dae=a("strong"),Fmo=o("deberta-v2"),Tmo=o(" \u2014 "),BP=a("a"),Mmo=o("DebertaV2Model"),Emo=o(" (DeBERTa-v2 model)"),Cmo=l(),op=a("li"),Gae=a("strong"),wmo=o("decision_transformer"),Amo=o(" \u2014 "),PP=a("a"),ymo=o("DecisionTransformerModel"),Lmo=o(" (Decision Transformer model)"),xmo=l(),rp=a("li"),Oae=a("strong"),$mo=o("deit"),kmo=o(" \u2014 "),IP=a("a"),Smo=o("DeiTModel"),Rmo=o(" (DeiT model)"),Bmo=l(),tp=a("li"),Vae=a("strong"),Pmo=o("detr"),Imo=o(" \u2014 "),qP=a("a"),qmo=o("DetrModel"),Nmo=o(" (DETR model)"),jmo=l(),ap=a("li"),Xae=a("strong"),Dmo=o("distilbert"),Gmo=o(" \u2014 "),NP=a("a"),Omo=o("DistilBertModel"),Vmo=o(" (DistilBERT model)"),Xmo=l(),np=a("li"),zae=a("strong"),zmo=o("dpr"),Qmo=o(" \u2014 "),jP=a("a"),Wmo=o("DPRQuestionEncoder"),Hmo=o(" (DPR model)"),Umo=l(),sp=a("li"),Qae=a("strong"),Jmo=o("dpt"),Ymo=o(" \u2014 "),DP=a("a"),Kmo=o("DPTModel"),Zmo=o(" (DPT model)"),ego=l(),lp=a("li"),Wae=a("strong"),ogo=o("electra"),rgo=o(" \u2014 "),GP=a("a"),tgo=o("ElectraModel"),ago=o(" (ELECTRA model)"),ngo=l(),ip=a("li"),Hae=a("strong"),sgo=o("flaubert"),lgo=o(" \u2014 "),OP=a("a"),igo=o("FlaubertModel"),dgo=o(" (FlauBERT model)"),cgo=l(),dp=a("li"),Uae=a("strong"),fgo=o("fnet"),mgo=o(" \u2014 "),VP=a("a"),ggo=o("FNetModel"),hgo=o(" (FNet model)"),pgo=l(),cp=a("li"),Jae=a("strong"),ugo=o("fsmt"),_go=o(" \u2014 "),XP=a("a"),bgo=o("FSMTModel"),vgo=o(" (FairSeq Machine-Translation model)"),Fgo=l(),xs=a("li"),Yae=a("strong"),Tgo=o("funnel"),Mgo=o(" \u2014 "),zP=a("a"),Ego=o("FunnelModel"),Cgo=o(" or "),QP=a("a"),wgo=o("FunnelBaseModel"),Ago=o(" (Funnel Transformer model)"),ygo=l(),fp=a("li"),Kae=a("strong"),Lgo=o("glpn"),xgo=o(" \u2014 "),WP=a("a"),$go=o("GLPNModel"),kgo=o(" (GLPN model)"),Sgo=l(),mp=a("li"),Zae=a("strong"),Rgo=o("gpt2"),Bgo=o(" \u2014 "),HP=a("a"),Pgo=o("GPT2Model"),Igo=o(" (OpenAI GPT-2 model)"),qgo=l(),gp=a("li"),ene=a("strong"),Ngo=o("gpt_neo"),jgo=o(" \u2014 "),UP=a("a"),Dgo=o("GPTNeoModel"),Ggo=o(" (GPT Neo model)"),Ogo=l(),hp=a("li"),one=a("strong"),Vgo=o("gptj"),Xgo=o(" \u2014 "),JP=a("a"),zgo=o("GPTJModel"),Qgo=o(" (GPT-J model)"),Wgo=l(),pp=a("li"),rne=a("strong"),Hgo=o("hubert"),Ugo=o(" \u2014 "),YP=a("a"),Jgo=o("HubertModel"),Ygo=o(" (Hubert model)"),Kgo=l(),up=a("li"),tne=a("strong"),Zgo=o("ibert"),eho=o(" \u2014 "),KP=a("a"),oho=o("IBertModel"),rho=o(" (I-BERT model)"),tho=l(),_p=a("li"),ane=a("strong"),aho=o("imagegpt"),nho=o(" \u2014 "),ZP=a("a"),sho=o("ImageGPTModel"),lho=o(" (ImageGPT model)"),iho=l(),bp=a("li"),nne=a("strong"),dho=o("layoutlm"),cho=o(" \u2014 "),eI=a("a"),fho=o("LayoutLMModel"),mho=o(" (LayoutLM model)"),gho=l(),vp=a("li"),sne=a("strong"),hho=o("layoutlmv2"),pho=o(" \u2014 "),oI=a("a"),uho=o("LayoutLMv2Model"),_ho=o(" (LayoutLMv2 model)"),bho=l(),Fp=a("li"),lne=a("strong"),vho=o("led"),Fho=o(" \u2014 "),rI=a("a"),Tho=o("LEDModel"),Mho=o(" (LED model)"),Eho=l(),Tp=a("li"),ine=a("strong"),Cho=o("longformer"),who=o(" \u2014 "),tI=a("a"),Aho=o("LongformerModel"),yho=o(" (Longformer model)"),Lho=l(),Mp=a("li"),dne=a("strong"),xho=o("luke"),$ho=o(" \u2014 "),aI=a("a"),kho=o("LukeModel"),Sho=o(" (LUKE model)"),Rho=l(),Ep=a("li"),cne=a("strong"),Bho=o("lxmert"),Pho=o(" \u2014 "),nI=a("a"),Iho=o("LxmertModel"),qho=o(" (LXMERT model)"),Nho=l(),Cp=a("li"),fne=a("strong"),jho=o("m2m_100"),Dho=o(" \u2014 "),sI=a("a"),Gho=o("M2M100Model"),Oho=o(" (M2M100 model)"),Vho=l(),wp=a("li"),mne=a("strong"),Xho=o("marian"),zho=o(" \u2014 "),lI=a("a"),Qho=o("MarianModel"),Who=o(" (Marian model)"),Hho=l(),Ap=a("li"),gne=a("strong"),Uho=o("maskformer"),Jho=o(" \u2014 "),iI=a("a"),Yho=o("MaskFormerModel"),Kho=o(" (MaskFormer model)"),Zho=l(),yp=a("li"),hne=a("strong"),epo=o("mbart"),opo=o(" \u2014 "),dI=a("a"),rpo=o("MBartModel"),tpo=o(" (mBART model)"),apo=l(),Lp=a("li"),pne=a("strong"),npo=o("megatron-bert"),spo=o(" \u2014 "),cI=a("a"),lpo=o("MegatronBertModel"),ipo=o(" (MegatronBert model)"),dpo=l(),xp=a("li"),une=a("strong"),cpo=o("mobilebert"),fpo=o(" \u2014 "),fI=a("a"),mpo=o("MobileBertModel"),gpo=o(" (MobileBERT model)"),hpo=l(),$p=a("li"),_ne=a("strong"),ppo=o("mpnet"),upo=o(" \u2014 "),mI=a("a"),_po=o("MPNetModel"),bpo=o(" (MPNet model)"),vpo=l(),kp=a("li"),bne=a("strong"),Fpo=o("mt5"),Tpo=o(" \u2014 "),gI=a("a"),Mpo=o("MT5Model"),Epo=o(" (mT5 model)"),Cpo=l(),Sp=a("li"),vne=a("strong"),wpo=o("nystromformer"),Apo=o(" \u2014 "),hI=a("a"),ypo=o("NystromformerModel"),Lpo=o(" (Nystromformer model)"),xpo=l(),Rp=a("li"),Fne=a("strong"),$po=o("openai-gpt"),kpo=o(" \u2014 "),pI=a("a"),Spo=o("OpenAIGPTModel"),Rpo=o(" (OpenAI GPT model)"),Bpo=l(),Bp=a("li"),Tne=a("strong"),Ppo=o("opt"),Ipo=o(" \u2014 "),uI=a("a"),qpo=o("OPTModel"),Npo=o(" (OPT model)"),jpo=l(),Pp=a("li"),Mne=a("strong"),Dpo=o("pegasus"),Gpo=o(" \u2014 "),_I=a("a"),Opo=o("PegasusModel"),Vpo=o(" (Pegasus model)"),Xpo=l(),Ip=a("li"),Ene=a("strong"),zpo=o("perceiver"),Qpo=o(" \u2014 "),bI=a("a"),Wpo=o("PerceiverModel"),Hpo=o(" (Perceiver model)"),Upo=l(),qp=a("li"),Cne=a("strong"),Jpo=o("plbart"),Ypo=o(" \u2014 "),vI=a("a"),Kpo=o("PLBartModel"),Zpo=o(" (PLBart model)"),euo=l(),Np=a("li"),wne=a("strong"),ouo=o("poolformer"),ruo=o(" \u2014 "),FI=a("a"),tuo=o("PoolFormerModel"),auo=o(" (PoolFormer model)"),nuo=l(),jp=a("li"),Ane=a("strong"),suo=o("prophetnet"),luo=o(" \u2014 "),TI=a("a"),iuo=o("ProphetNetModel"),duo=o(" (ProphetNet model)"),cuo=l(),Dp=a("li"),yne=a("strong"),fuo=o("qdqbert"),muo=o(" \u2014 "),MI=a("a"),guo=o("QDQBertModel"),huo=o(" (QDQBert model)"),puo=l(),Gp=a("li"),Lne=a("strong"),uuo=o("reformer"),_uo=o(" \u2014 "),EI=a("a"),buo=o("ReformerModel"),vuo=o(" (Reformer model)"),Fuo=l(),Op=a("li"),xne=a("strong"),Tuo=o("regnet"),Muo=o(" \u2014 "),CI=a("a"),Euo=o("RegNetModel"),Cuo=o(" (RegNet model)"),wuo=l(),Vp=a("li"),$ne=a("strong"),Auo=o("rembert"),yuo=o(" \u2014 "),wI=a("a"),Luo=o("RemBertModel"),xuo=o(" (RemBERT model)"),$uo=l(),Xp=a("li"),kne=a("strong"),kuo=o("resnet"),Suo=o(" \u2014 "),AI=a("a"),Ruo=o("ResNetModel"),Buo=o(" (ResNet model)"),Puo=l(),zp=a("li"),Sne=a("strong"),Iuo=o("retribert"),quo=o(" \u2014 "),yI=a("a"),Nuo=o("RetriBertModel"),juo=o(" (RetriBERT model)"),Duo=l(),Qp=a("li"),Rne=a("strong"),Guo=o("roberta"),Ouo=o(" \u2014 "),LI=a("a"),Vuo=o("RobertaModel"),Xuo=o(" (RoBERTa model)"),zuo=l(),Wp=a("li"),Bne=a("strong"),Quo=o("roformer"),Wuo=o(" \u2014 "),xI=a("a"),Huo=o("RoFormerModel"),Uuo=o(" (RoFormer model)"),Juo=l(),Hp=a("li"),Pne=a("strong"),Yuo=o("segformer"),Kuo=o(" \u2014 "),$I=a("a"),Zuo=o("SegformerModel"),e_o=o(" (SegFormer model)"),o_o=l(),Up=a("li"),Ine=a("strong"),r_o=o("sew"),t_o=o(" \u2014 "),kI=a("a"),a_o=o("SEWModel"),n_o=o(" (SEW model)"),s_o=l(),Jp=a("li"),qne=a("strong"),l_o=o("sew-d"),i_o=o(" \u2014 "),SI=a("a"),d_o=o("SEWDModel"),c_o=o(" (SEW-D model)"),f_o=l(),Yp=a("li"),Nne=a("strong"),m_o=o("speech_to_text"),g_o=o(" \u2014 "),RI=a("a"),h_o=o("Speech2TextModel"),p_o=o(" (Speech2Text model)"),u_o=l(),Kp=a("li"),jne=a("strong"),__o=o("splinter"),b_o=o(" \u2014 "),BI=a("a"),v_o=o("SplinterModel"),F_o=o(" (Splinter model)"),T_o=l(),Zp=a("li"),Dne=a("strong"),M_o=o("squeezebert"),E_o=o(" \u2014 "),PI=a("a"),C_o=o("SqueezeBertModel"),w_o=o(" (SqueezeBERT model)"),A_o=l(),eu=a("li"),Gne=a("strong"),y_o=o("swin"),L_o=o(" \u2014 "),II=a("a"),x_o=o("SwinModel"),$_o=o(" (Swin model)"),k_o=l(),ou=a("li"),One=a("strong"),S_o=o("t5"),R_o=o(" \u2014 "),qI=a("a"),B_o=o("T5Model"),P_o=o(" (T5 model)"),I_o=l(),ru=a("li"),Vne=a("strong"),q_o=o("tapas"),N_o=o(" \u2014 "),NI=a("a"),j_o=o("TapasModel"),D_o=o(" (TAPAS model)"),G_o=l(),tu=a("li"),Xne=a("strong"),O_o=o("transfo-xl"),V_o=o(" \u2014 "),jI=a("a"),X_o=o("TransfoXLModel"),z_o=o(" (Transformer-XL model)"),Q_o=l(),au=a("li"),zne=a("strong"),W_o=o("unispeech"),H_o=o(" \u2014 "),DI=a("a"),U_o=o("UniSpeechModel"),J_o=o(" (UniSpeech model)"),Y_o=l(),nu=a("li"),Qne=a("strong"),K_o=o("unispeech-sat"),Z_o=o(" \u2014 "),GI=a("a"),e1o=o("UniSpeechSatModel"),o1o=o(" (UniSpeechSat model)"),r1o=l(),su=a("li"),Wne=a("strong"),t1o=o("van"),a1o=o(" \u2014 "),OI=a("a"),n1o=o("VanModel"),s1o=o(" (VAN model)"),l1o=l(),lu=a("li"),Hne=a("strong"),i1o=o("vilt"),d1o=o(" \u2014 "),VI=a("a"),c1o=o("ViltModel"),f1o=o(" (ViLT model)"),m1o=l(),iu=a("li"),Une=a("strong"),g1o=o("vision-text-dual-encoder"),h1o=o(" \u2014 "),XI=a("a"),p1o=o("VisionTextDualEncoderModel"),u1o=o(" (VisionTextDualEncoder model)"),_1o=l(),du=a("li"),Jne=a("strong"),b1o=o("visual_bert"),v1o=o(" \u2014 "),zI=a("a"),F1o=o("VisualBertModel"),T1o=o(" (VisualBert model)"),M1o=l(),cu=a("li"),Yne=a("strong"),E1o=o("vit"),C1o=o(" \u2014 "),QI=a("a"),w1o=o("ViTModel"),A1o=o(" (ViT model)"),y1o=l(),fu=a("li"),Kne=a("strong"),L1o=o("vit_mae"),x1o=o(" \u2014 "),WI=a("a"),$1o=o("ViTMAEModel"),k1o=o(" (ViTMAE model)"),S1o=l(),mu=a("li"),Zne=a("strong"),R1o=o("wav2vec2"),B1o=o(" \u2014 "),HI=a("a"),P1o=o("Wav2Vec2Model"),I1o=o(" (Wav2Vec2 model)"),q1o=l(),gu=a("li"),ese=a("strong"),N1o=o("wavlm"),j1o=o(" \u2014 "),UI=a("a"),D1o=o("WavLMModel"),G1o=o(" (WavLM model)"),O1o=l(),hu=a("li"),ose=a("strong"),V1o=o("xglm"),X1o=o(" \u2014 "),JI=a("a"),z1o=o("XGLMModel"),Q1o=o(" (XGLM model)"),W1o=l(),pu=a("li"),rse=a("strong"),H1o=o("xlm"),U1o=o(" \u2014 "),YI=a("a"),J1o=o("XLMModel"),Y1o=o(" (XLM model)"),K1o=l(),uu=a("li"),tse=a("strong"),Z1o=o("xlm-prophetnet"),e8o=o(" \u2014 "),KI=a("a"),o8o=o("XLMProphetNetModel"),r8o=o(" (XLMProphetNet model)"),t8o=l(),_u=a("li"),ase=a("strong"),a8o=o("xlm-roberta"),n8o=o(" \u2014 "),ZI=a("a"),s8o=o("XLMRobertaModel"),l8o=o(" (XLM-RoBERTa model)"),i8o=l(),bu=a("li"),nse=a("strong"),d8o=o("xlm-roberta-xl"),c8o=o(" \u2014 "),eq=a("a"),f8o=o("XLMRobertaXLModel"),m8o=o(" (XLM-RoBERTa-XL model)"),g8o=l(),vu=a("li"),sse=a("strong"),h8o=o("xlnet"),p8o=o(" \u2014 "),oq=a("a"),u8o=o("XLNetModel"),_8o=o(" (XLNet model)"),b8o=l(),Fu=a("li"),lse=a("strong"),v8o=o("yolos"),F8o=o(" \u2014 "),rq=a("a"),T8o=o("YolosModel"),M8o=o(" (YOLOS model)"),E8o=l(),Tu=a("li"),ise=a("strong"),C8o=o("yoso"),w8o=o(" \u2014 "),tq=a("a"),A8o=o("YosoModel"),y8o=o(" (YOSO model)"),L8o=l(),Mu=a("p"),x8o=o("The model is set in evaluation mode by default using "),dse=a("code"),$8o=o("model.eval()"),k8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cse=a("code"),S8o=o("model.train()"),R8o=l(),F(Eu.$$.fragment),aPe=l(),vi=a("h2"),Cu=a("a"),fse=a("span"),F(iA.$$.fragment),B8o=l(),mse=a("span"),P8o=o("AutoModelForPreTraining"),nPe=l(),xo=a("div"),F(dA.$$.fragment),I8o=l(),Fi=a("p"),q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aq=a("a"),N8o=o("from_pretrained()"),j8o=o(" class method or the "),nq=a("a"),D8o=o("from_config()"),G8o=o(` class
method.`),O8o=l(),cA=a("p"),V8o=o("This class cannot be instantiated directly using "),gse=a("code"),X8o=o("__init__()"),z8o=o(" (throws an error)."),Q8o=l(),et=a("div"),F(fA.$$.fragment),W8o=l(),hse=a("p"),H8o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U8o=l(),Ti=a("p"),J8o=o(`Note:
Loading a model from its configuration file does `),pse=a("strong"),Y8o=o("not"),K8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sq=a("a"),Z8o=o("from_pretrained()"),ebo=o(" to load the model weights."),obo=l(),F(wu.$$.fragment),rbo=l(),Ue=a("div"),F(mA.$$.fragment),tbo=l(),use=a("p"),abo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nbo=l(),Ca=a("p"),sbo=o("The model class to instantiate is selected based on the "),_se=a("code"),lbo=o("model_type"),ibo=o(` property of the config object (either
passed as an argument or loaded from `),bse=a("code"),dbo=o("pretrained_model_name_or_path"),cbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=a("code"),fbo=o("pretrained_model_name_or_path"),mbo=o(":"),gbo=l(),G=a("ul"),Au=a("li"),Fse=a("strong"),hbo=o("albert"),pbo=o(" \u2014 "),lq=a("a"),ubo=o("AlbertForPreTraining"),_bo=o(" (ALBERT model)"),bbo=l(),yu=a("li"),Tse=a("strong"),vbo=o("bart"),Fbo=o(" \u2014 "),iq=a("a"),Tbo=o("BartForConditionalGeneration"),Mbo=o(" (BART model)"),Ebo=l(),Lu=a("li"),Mse=a("strong"),Cbo=o("bert"),wbo=o(" \u2014 "),dq=a("a"),Abo=o("BertForPreTraining"),ybo=o(" (BERT model)"),Lbo=l(),xu=a("li"),Ese=a("strong"),xbo=o("big_bird"),$bo=o(" \u2014 "),cq=a("a"),kbo=o("BigBirdForPreTraining"),Sbo=o(" (BigBird model)"),Rbo=l(),$u=a("li"),Cse=a("strong"),Bbo=o("camembert"),Pbo=o(" \u2014 "),fq=a("a"),Ibo=o("CamembertForMaskedLM"),qbo=o(" (CamemBERT model)"),Nbo=l(),ku=a("li"),wse=a("strong"),jbo=o("ctrl"),Dbo=o(" \u2014 "),mq=a("a"),Gbo=o("CTRLLMHeadModel"),Obo=o(" (CTRL model)"),Vbo=l(),Su=a("li"),Ase=a("strong"),Xbo=o("data2vec-text"),zbo=o(" \u2014 "),gq=a("a"),Qbo=o("Data2VecTextForMaskedLM"),Wbo=o(" (Data2VecText model)"),Hbo=l(),Ru=a("li"),yse=a("strong"),Ubo=o("deberta"),Jbo=o(" \u2014 "),hq=a("a"),Ybo=o("DebertaForMaskedLM"),Kbo=o(" (DeBERTa model)"),Zbo=l(),Bu=a("li"),Lse=a("strong"),e2o=o("deberta-v2"),o2o=o(" \u2014 "),pq=a("a"),r2o=o("DebertaV2ForMaskedLM"),t2o=o(" (DeBERTa-v2 model)"),a2o=l(),Pu=a("li"),xse=a("strong"),n2o=o("distilbert"),s2o=o(" \u2014 "),uq=a("a"),l2o=o("DistilBertForMaskedLM"),i2o=o(" (DistilBERT model)"),d2o=l(),Iu=a("li"),$se=a("strong"),c2o=o("electra"),f2o=o(" \u2014 "),_q=a("a"),m2o=o("ElectraForPreTraining"),g2o=o(" (ELECTRA model)"),h2o=l(),qu=a("li"),kse=a("strong"),p2o=o("flaubert"),u2o=o(" \u2014 "),bq=a("a"),_2o=o("FlaubertWithLMHeadModel"),b2o=o(" (FlauBERT model)"),v2o=l(),Nu=a("li"),Sse=a("strong"),F2o=o("fnet"),T2o=o(" \u2014 "),vq=a("a"),M2o=o("FNetForPreTraining"),E2o=o(" (FNet model)"),C2o=l(),ju=a("li"),Rse=a("strong"),w2o=o("fsmt"),A2o=o(" \u2014 "),Fq=a("a"),y2o=o("FSMTForConditionalGeneration"),L2o=o(" (FairSeq Machine-Translation model)"),x2o=l(),Du=a("li"),Bse=a("strong"),$2o=o("funnel"),k2o=o(" \u2014 "),Tq=a("a"),S2o=o("FunnelForPreTraining"),R2o=o(" (Funnel Transformer model)"),B2o=l(),Gu=a("li"),Pse=a("strong"),P2o=o("gpt2"),I2o=o(" \u2014 "),Mq=a("a"),q2o=o("GPT2LMHeadModel"),N2o=o(" (OpenAI GPT-2 model)"),j2o=l(),Ou=a("li"),Ise=a("strong"),D2o=o("ibert"),G2o=o(" \u2014 "),Eq=a("a"),O2o=o("IBertForMaskedLM"),V2o=o(" (I-BERT model)"),X2o=l(),Vu=a("li"),qse=a("strong"),z2o=o("layoutlm"),Q2o=o(" \u2014 "),Cq=a("a"),W2o=o("LayoutLMForMaskedLM"),H2o=o(" (LayoutLM model)"),U2o=l(),Xu=a("li"),Nse=a("strong"),J2o=o("longformer"),Y2o=o(" \u2014 "),wq=a("a"),K2o=o("LongformerForMaskedLM"),Z2o=o(" (Longformer model)"),evo=l(),zu=a("li"),jse=a("strong"),ovo=o("lxmert"),rvo=o(" \u2014 "),Aq=a("a"),tvo=o("LxmertForPreTraining"),avo=o(" (LXMERT model)"),nvo=l(),Qu=a("li"),Dse=a("strong"),svo=o("megatron-bert"),lvo=o(" \u2014 "),yq=a("a"),ivo=o("MegatronBertForPreTraining"),dvo=o(" (MegatronBert model)"),cvo=l(),Wu=a("li"),Gse=a("strong"),fvo=o("mobilebert"),mvo=o(" \u2014 "),Lq=a("a"),gvo=o("MobileBertForPreTraining"),hvo=o(" (MobileBERT model)"),pvo=l(),Hu=a("li"),Ose=a("strong"),uvo=o("mpnet"),_vo=o(" \u2014 "),xq=a("a"),bvo=o("MPNetForMaskedLM"),vvo=o(" (MPNet model)"),Fvo=l(),Uu=a("li"),Vse=a("strong"),Tvo=o("openai-gpt"),Mvo=o(" \u2014 "),$q=a("a"),Evo=o("OpenAIGPTLMHeadModel"),Cvo=o(" (OpenAI GPT model)"),wvo=l(),Ju=a("li"),Xse=a("strong"),Avo=o("retribert"),yvo=o(" \u2014 "),kq=a("a"),Lvo=o("RetriBertModel"),xvo=o(" (RetriBERT model)"),$vo=l(),Yu=a("li"),zse=a("strong"),kvo=o("roberta"),Svo=o(" \u2014 "),Sq=a("a"),Rvo=o("RobertaForMaskedLM"),Bvo=o(" (RoBERTa model)"),Pvo=l(),Ku=a("li"),Qse=a("strong"),Ivo=o("squeezebert"),qvo=o(" \u2014 "),Rq=a("a"),Nvo=o("SqueezeBertForMaskedLM"),jvo=o(" (SqueezeBERT model)"),Dvo=l(),Zu=a("li"),Wse=a("strong"),Gvo=o("t5"),Ovo=o(" \u2014 "),Bq=a("a"),Vvo=o("T5ForConditionalGeneration"),Xvo=o(" (T5 model)"),zvo=l(),e_=a("li"),Hse=a("strong"),Qvo=o("tapas"),Wvo=o(" \u2014 "),Pq=a("a"),Hvo=o("TapasForMaskedLM"),Uvo=o(" (TAPAS model)"),Jvo=l(),o_=a("li"),Use=a("strong"),Yvo=o("transfo-xl"),Kvo=o(" \u2014 "),Iq=a("a"),Zvo=o("TransfoXLLMHeadModel"),eFo=o(" (Transformer-XL model)"),oFo=l(),r_=a("li"),Jse=a("strong"),rFo=o("unispeech"),tFo=o(" \u2014 "),qq=a("a"),aFo=o("UniSpeechForPreTraining"),nFo=o(" (UniSpeech model)"),sFo=l(),t_=a("li"),Yse=a("strong"),lFo=o("unispeech-sat"),iFo=o(" \u2014 "),Nq=a("a"),dFo=o("UniSpeechSatForPreTraining"),cFo=o(" (UniSpeechSat model)"),fFo=l(),a_=a("li"),Kse=a("strong"),mFo=o("visual_bert"),gFo=o(" \u2014 "),jq=a("a"),hFo=o("VisualBertForPreTraining"),pFo=o(" (VisualBert model)"),uFo=l(),n_=a("li"),Zse=a("strong"),_Fo=o("vit_mae"),bFo=o(" \u2014 "),Dq=a("a"),vFo=o("ViTMAEForPreTraining"),FFo=o(" (ViTMAE model)"),TFo=l(),s_=a("li"),ele=a("strong"),MFo=o("wav2vec2"),EFo=o(" \u2014 "),Gq=a("a"),CFo=o("Wav2Vec2ForPreTraining"),wFo=o(" (Wav2Vec2 model)"),AFo=l(),l_=a("li"),ole=a("strong"),yFo=o("xlm"),LFo=o(" \u2014 "),Oq=a("a"),xFo=o("XLMWithLMHeadModel"),$Fo=o(" (XLM model)"),kFo=l(),i_=a("li"),rle=a("strong"),SFo=o("xlm-roberta"),RFo=o(" \u2014 "),Vq=a("a"),BFo=o("XLMRobertaForMaskedLM"),PFo=o(" (XLM-RoBERTa model)"),IFo=l(),d_=a("li"),tle=a("strong"),qFo=o("xlm-roberta-xl"),NFo=o(" \u2014 "),Xq=a("a"),jFo=o("XLMRobertaXLForMaskedLM"),DFo=o(" (XLM-RoBERTa-XL model)"),GFo=l(),c_=a("li"),ale=a("strong"),OFo=o("xlnet"),VFo=o(" \u2014 "),zq=a("a"),XFo=o("XLNetLMHeadModel"),zFo=o(" (XLNet model)"),QFo=l(),f_=a("p"),WFo=o("The model is set in evaluation mode by default using "),nle=a("code"),HFo=o("model.eval()"),UFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sle=a("code"),JFo=o("model.train()"),YFo=l(),F(m_.$$.fragment),sPe=l(),Mi=a("h2"),g_=a("a"),lle=a("span"),F(gA.$$.fragment),KFo=l(),ile=a("span"),ZFo=o("AutoModelForCausalLM"),lPe=l(),$o=a("div"),F(hA.$$.fragment),e0o=l(),Ei=a("p"),o0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Qq=a("a"),r0o=o("from_pretrained()"),t0o=o(" class method or the "),Wq=a("a"),a0o=o("from_config()"),n0o=o(` class
method.`),s0o=l(),pA=a("p"),l0o=o("This class cannot be instantiated directly using "),dle=a("code"),i0o=o("__init__()"),d0o=o(" (throws an error)."),c0o=l(),ot=a("div"),F(uA.$$.fragment),f0o=l(),cle=a("p"),m0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g0o=l(),Ci=a("p"),h0o=o(`Note:
Loading a model from its configuration file does `),fle=a("strong"),p0o=o("not"),u0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=a("a"),_0o=o("from_pretrained()"),b0o=o(" to load the model weights."),v0o=l(),F(h_.$$.fragment),F0o=l(),Je=a("div"),F(_A.$$.fragment),T0o=l(),mle=a("p"),M0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),E0o=l(),wa=a("p"),C0o=o("The model class to instantiate is selected based on the "),gle=a("code"),w0o=o("model_type"),A0o=o(` property of the config object (either
passed as an argument or loaded from `),hle=a("code"),y0o=o("pretrained_model_name_or_path"),L0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ple=a("code"),x0o=o("pretrained_model_name_or_path"),$0o=o(":"),k0o=l(),z=a("ul"),p_=a("li"),ule=a("strong"),S0o=o("bart"),R0o=o(" \u2014 "),Uq=a("a"),B0o=o("BartForCausalLM"),P0o=o(" (BART model)"),I0o=l(),u_=a("li"),_le=a("strong"),q0o=o("bert"),N0o=o(" \u2014 "),Jq=a("a"),j0o=o("BertLMHeadModel"),D0o=o(" (BERT model)"),G0o=l(),__=a("li"),ble=a("strong"),O0o=o("bert-generation"),V0o=o(" \u2014 "),Yq=a("a"),X0o=o("BertGenerationDecoder"),z0o=o(" (Bert Generation model)"),Q0o=l(),b_=a("li"),vle=a("strong"),W0o=o("big_bird"),H0o=o(" \u2014 "),Kq=a("a"),U0o=o("BigBirdForCausalLM"),J0o=o(" (BigBird model)"),Y0o=l(),v_=a("li"),Fle=a("strong"),K0o=o("bigbird_pegasus"),Z0o=o(" \u2014 "),Zq=a("a"),eTo=o("BigBirdPegasusForCausalLM"),oTo=o(" (BigBirdPegasus model)"),rTo=l(),F_=a("li"),Tle=a("strong"),tTo=o("blenderbot"),aTo=o(" \u2014 "),eN=a("a"),nTo=o("BlenderbotForCausalLM"),sTo=o(" (Blenderbot model)"),lTo=l(),T_=a("li"),Mle=a("strong"),iTo=o("blenderbot-small"),dTo=o(" \u2014 "),oN=a("a"),cTo=o("BlenderbotSmallForCausalLM"),fTo=o(" (BlenderbotSmall model)"),mTo=l(),M_=a("li"),Ele=a("strong"),gTo=o("camembert"),hTo=o(" \u2014 "),rN=a("a"),pTo=o("CamembertForCausalLM"),uTo=o(" (CamemBERT model)"),_To=l(),E_=a("li"),Cle=a("strong"),bTo=o("ctrl"),vTo=o(" \u2014 "),tN=a("a"),FTo=o("CTRLLMHeadModel"),TTo=o(" (CTRL model)"),MTo=l(),C_=a("li"),wle=a("strong"),ETo=o("data2vec-text"),CTo=o(" \u2014 "),aN=a("a"),wTo=o("Data2VecTextForCausalLM"),ATo=o(" (Data2VecText model)"),yTo=l(),w_=a("li"),Ale=a("strong"),LTo=o("electra"),xTo=o(" \u2014 "),nN=a("a"),$To=o("ElectraForCausalLM"),kTo=o(" (ELECTRA model)"),STo=l(),A_=a("li"),yle=a("strong"),RTo=o("gpt2"),BTo=o(" \u2014 "),sN=a("a"),PTo=o("GPT2LMHeadModel"),ITo=o(" (OpenAI GPT-2 model)"),qTo=l(),y_=a("li"),Lle=a("strong"),NTo=o("gpt_neo"),jTo=o(" \u2014 "),lN=a("a"),DTo=o("GPTNeoForCausalLM"),GTo=o(" (GPT Neo model)"),OTo=l(),L_=a("li"),xle=a("strong"),VTo=o("gptj"),XTo=o(" \u2014 "),iN=a("a"),zTo=o("GPTJForCausalLM"),QTo=o(" (GPT-J model)"),WTo=l(),x_=a("li"),$le=a("strong"),HTo=o("marian"),UTo=o(" \u2014 "),dN=a("a"),JTo=o("MarianForCausalLM"),YTo=o(" (Marian model)"),KTo=l(),$_=a("li"),kle=a("strong"),ZTo=o("mbart"),e7o=o(" \u2014 "),cN=a("a"),o7o=o("MBartForCausalLM"),r7o=o(" (mBART model)"),t7o=l(),k_=a("li"),Sle=a("strong"),a7o=o("megatron-bert"),n7o=o(" \u2014 "),fN=a("a"),s7o=o("MegatronBertForCausalLM"),l7o=o(" (MegatronBert model)"),i7o=l(),S_=a("li"),Rle=a("strong"),d7o=o("openai-gpt"),c7o=o(" \u2014 "),mN=a("a"),f7o=o("OpenAIGPTLMHeadModel"),m7o=o(" (OpenAI GPT model)"),g7o=l(),R_=a("li"),Ble=a("strong"),h7o=o("opt"),p7o=o(" \u2014 "),gN=a("a"),u7o=o("OPTForCausalLM"),_7o=o(" (OPT model)"),b7o=l(),B_=a("li"),Ple=a("strong"),v7o=o("pegasus"),F7o=o(" \u2014 "),hN=a("a"),T7o=o("PegasusForCausalLM"),M7o=o(" (Pegasus model)"),E7o=l(),P_=a("li"),Ile=a("strong"),C7o=o("plbart"),w7o=o(" \u2014 "),pN=a("a"),A7o=o("PLBartForCausalLM"),y7o=o(" (PLBart model)"),L7o=l(),I_=a("li"),qle=a("strong"),x7o=o("prophetnet"),$7o=o(" \u2014 "),uN=a("a"),k7o=o("ProphetNetForCausalLM"),S7o=o(" (ProphetNet model)"),R7o=l(),q_=a("li"),Nle=a("strong"),B7o=o("qdqbert"),P7o=o(" \u2014 "),_N=a("a"),I7o=o("QDQBertLMHeadModel"),q7o=o(" (QDQBert model)"),N7o=l(),N_=a("li"),jle=a("strong"),j7o=o("reformer"),D7o=o(" \u2014 "),bN=a("a"),G7o=o("ReformerModelWithLMHead"),O7o=o(" (Reformer model)"),V7o=l(),j_=a("li"),Dle=a("strong"),X7o=o("rembert"),z7o=o(" \u2014 "),vN=a("a"),Q7o=o("RemBertForCausalLM"),W7o=o(" (RemBERT model)"),H7o=l(),D_=a("li"),Gle=a("strong"),U7o=o("roberta"),J7o=o(" \u2014 "),FN=a("a"),Y7o=o("RobertaForCausalLM"),K7o=o(" (RoBERTa model)"),Z7o=l(),G_=a("li"),Ole=a("strong"),eMo=o("roformer"),oMo=o(" \u2014 "),TN=a("a"),rMo=o("RoFormerForCausalLM"),tMo=o(" (RoFormer model)"),aMo=l(),O_=a("li"),Vle=a("strong"),nMo=o("speech_to_text_2"),sMo=o(" \u2014 "),MN=a("a"),lMo=o("Speech2Text2ForCausalLM"),iMo=o(" (Speech2Text2 model)"),dMo=l(),V_=a("li"),Xle=a("strong"),cMo=o("transfo-xl"),fMo=o(" \u2014 "),EN=a("a"),mMo=o("TransfoXLLMHeadModel"),gMo=o(" (Transformer-XL model)"),hMo=l(),X_=a("li"),zle=a("strong"),pMo=o("trocr"),uMo=o(" \u2014 "),CN=a("a"),_Mo=o("TrOCRForCausalLM"),bMo=o(" (TrOCR model)"),vMo=l(),z_=a("li"),Qle=a("strong"),FMo=o("xglm"),TMo=o(" \u2014 "),wN=a("a"),MMo=o("XGLMForCausalLM"),EMo=o(" (XGLM model)"),CMo=l(),Q_=a("li"),Wle=a("strong"),wMo=o("xlm"),AMo=o(" \u2014 "),AN=a("a"),yMo=o("XLMWithLMHeadModel"),LMo=o(" (XLM model)"),xMo=l(),W_=a("li"),Hle=a("strong"),$Mo=o("xlm-prophetnet"),kMo=o(" \u2014 "),yN=a("a"),SMo=o("XLMProphetNetForCausalLM"),RMo=o(" (XLMProphetNet model)"),BMo=l(),H_=a("li"),Ule=a("strong"),PMo=o("xlm-roberta"),IMo=o(" \u2014 "),LN=a("a"),qMo=o("XLMRobertaForCausalLM"),NMo=o(" (XLM-RoBERTa model)"),jMo=l(),U_=a("li"),Jle=a("strong"),DMo=o("xlm-roberta-xl"),GMo=o(" \u2014 "),xN=a("a"),OMo=o("XLMRobertaXLForCausalLM"),VMo=o(" (XLM-RoBERTa-XL model)"),XMo=l(),J_=a("li"),Yle=a("strong"),zMo=o("xlnet"),QMo=o(" \u2014 "),$N=a("a"),WMo=o("XLNetLMHeadModel"),HMo=o(" (XLNet model)"),UMo=l(),Y_=a("p"),JMo=o("The model is set in evaluation mode by default using "),Kle=a("code"),YMo=o("model.eval()"),KMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=a("code"),ZMo=o("model.train()"),e4o=l(),F(K_.$$.fragment),iPe=l(),wi=a("h2"),Z_=a("a"),eie=a("span"),F(bA.$$.fragment),o4o=l(),oie=a("span"),r4o=o("AutoModelForMaskedLM"),dPe=l(),ko=a("div"),F(vA.$$.fragment),t4o=l(),Ai=a("p"),a4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kN=a("a"),n4o=o("from_pretrained()"),s4o=o(" class method or the "),SN=a("a"),l4o=o("from_config()"),i4o=o(` class
method.`),d4o=l(),FA=a("p"),c4o=o("This class cannot be instantiated directly using "),rie=a("code"),f4o=o("__init__()"),m4o=o(" (throws an error)."),g4o=l(),rt=a("div"),F(TA.$$.fragment),h4o=l(),tie=a("p"),p4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u4o=l(),yi=a("p"),_4o=o(`Note:
Loading a model from its configuration file does `),aie=a("strong"),b4o=o("not"),v4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RN=a("a"),F4o=o("from_pretrained()"),T4o=o(" to load the model weights."),M4o=l(),F(e1.$$.fragment),E4o=l(),Ye=a("div"),F(MA.$$.fragment),C4o=l(),nie=a("p"),w4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),A4o=l(),Aa=a("p"),y4o=o("The model class to instantiate is selected based on the "),sie=a("code"),L4o=o("model_type"),x4o=o(` property of the config object (either
passed as an argument or loaded from `),lie=a("code"),$4o=o("pretrained_model_name_or_path"),k4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=a("code"),S4o=o("pretrained_model_name_or_path"),R4o=o(":"),B4o=l(),Q=a("ul"),o1=a("li"),die=a("strong"),P4o=o("albert"),I4o=o(" \u2014 "),BN=a("a"),q4o=o("AlbertForMaskedLM"),N4o=o(" (ALBERT model)"),j4o=l(),r1=a("li"),cie=a("strong"),D4o=o("bart"),G4o=o(" \u2014 "),PN=a("a"),O4o=o("BartForConditionalGeneration"),V4o=o(" (BART model)"),X4o=l(),t1=a("li"),fie=a("strong"),z4o=o("bert"),Q4o=o(" \u2014 "),IN=a("a"),W4o=o("BertForMaskedLM"),H4o=o(" (BERT model)"),U4o=l(),a1=a("li"),mie=a("strong"),J4o=o("big_bird"),Y4o=o(" \u2014 "),qN=a("a"),K4o=o("BigBirdForMaskedLM"),Z4o=o(" (BigBird model)"),eEo=l(),n1=a("li"),gie=a("strong"),oEo=o("camembert"),rEo=o(" \u2014 "),NN=a("a"),tEo=o("CamembertForMaskedLM"),aEo=o(" (CamemBERT model)"),nEo=l(),s1=a("li"),hie=a("strong"),sEo=o("convbert"),lEo=o(" \u2014 "),jN=a("a"),iEo=o("ConvBertForMaskedLM"),dEo=o(" (ConvBERT model)"),cEo=l(),l1=a("li"),pie=a("strong"),fEo=o("data2vec-text"),mEo=o(" \u2014 "),DN=a("a"),gEo=o("Data2VecTextForMaskedLM"),hEo=o(" (Data2VecText model)"),pEo=l(),i1=a("li"),uie=a("strong"),uEo=o("deberta"),_Eo=o(" \u2014 "),GN=a("a"),bEo=o("DebertaForMaskedLM"),vEo=o(" (DeBERTa model)"),FEo=l(),d1=a("li"),_ie=a("strong"),TEo=o("deberta-v2"),MEo=o(" \u2014 "),ON=a("a"),EEo=o("DebertaV2ForMaskedLM"),CEo=o(" (DeBERTa-v2 model)"),wEo=l(),c1=a("li"),bie=a("strong"),AEo=o("distilbert"),yEo=o(" \u2014 "),VN=a("a"),LEo=o("DistilBertForMaskedLM"),xEo=o(" (DistilBERT model)"),$Eo=l(),f1=a("li"),vie=a("strong"),kEo=o("electra"),SEo=o(" \u2014 "),XN=a("a"),REo=o("ElectraForMaskedLM"),BEo=o(" (ELECTRA model)"),PEo=l(),m1=a("li"),Fie=a("strong"),IEo=o("flaubert"),qEo=o(" \u2014 "),zN=a("a"),NEo=o("FlaubertWithLMHeadModel"),jEo=o(" (FlauBERT model)"),DEo=l(),g1=a("li"),Tie=a("strong"),GEo=o("fnet"),OEo=o(" \u2014 "),QN=a("a"),VEo=o("FNetForMaskedLM"),XEo=o(" (FNet model)"),zEo=l(),h1=a("li"),Mie=a("strong"),QEo=o("funnel"),WEo=o(" \u2014 "),WN=a("a"),HEo=o("FunnelForMaskedLM"),UEo=o(" (Funnel Transformer model)"),JEo=l(),p1=a("li"),Eie=a("strong"),YEo=o("ibert"),KEo=o(" \u2014 "),HN=a("a"),ZEo=o("IBertForMaskedLM"),e5o=o(" (I-BERT model)"),o5o=l(),u1=a("li"),Cie=a("strong"),r5o=o("layoutlm"),t5o=o(" \u2014 "),UN=a("a"),a5o=o("LayoutLMForMaskedLM"),n5o=o(" (LayoutLM model)"),s5o=l(),_1=a("li"),wie=a("strong"),l5o=o("longformer"),i5o=o(" \u2014 "),JN=a("a"),d5o=o("LongformerForMaskedLM"),c5o=o(" (Longformer model)"),f5o=l(),b1=a("li"),Aie=a("strong"),m5o=o("mbart"),g5o=o(" \u2014 "),YN=a("a"),h5o=o("MBartForConditionalGeneration"),p5o=o(" (mBART model)"),u5o=l(),v1=a("li"),yie=a("strong"),_5o=o("megatron-bert"),b5o=o(" \u2014 "),KN=a("a"),v5o=o("MegatronBertForMaskedLM"),F5o=o(" (MegatronBert model)"),T5o=l(),F1=a("li"),Lie=a("strong"),M5o=o("mobilebert"),E5o=o(" \u2014 "),ZN=a("a"),C5o=o("MobileBertForMaskedLM"),w5o=o(" (MobileBERT model)"),A5o=l(),T1=a("li"),xie=a("strong"),y5o=o("mpnet"),L5o=o(" \u2014 "),ej=a("a"),x5o=o("MPNetForMaskedLM"),$5o=o(" (MPNet model)"),k5o=l(),M1=a("li"),$ie=a("strong"),S5o=o("nystromformer"),R5o=o(" \u2014 "),oj=a("a"),B5o=o("NystromformerForMaskedLM"),P5o=o(" (Nystromformer model)"),I5o=l(),E1=a("li"),kie=a("strong"),q5o=o("perceiver"),N5o=o(" \u2014 "),rj=a("a"),j5o=o("PerceiverForMaskedLM"),D5o=o(" (Perceiver model)"),G5o=l(),C1=a("li"),Sie=a("strong"),O5o=o("qdqbert"),V5o=o(" \u2014 "),tj=a("a"),X5o=o("QDQBertForMaskedLM"),z5o=o(" (QDQBert model)"),Q5o=l(),w1=a("li"),Rie=a("strong"),W5o=o("reformer"),H5o=o(" \u2014 "),aj=a("a"),U5o=o("ReformerForMaskedLM"),J5o=o(" (Reformer model)"),Y5o=l(),A1=a("li"),Bie=a("strong"),K5o=o("rembert"),Z5o=o(" \u2014 "),nj=a("a"),eCo=o("RemBertForMaskedLM"),oCo=o(" (RemBERT model)"),rCo=l(),y1=a("li"),Pie=a("strong"),tCo=o("roberta"),aCo=o(" \u2014 "),sj=a("a"),nCo=o("RobertaForMaskedLM"),sCo=o(" (RoBERTa model)"),lCo=l(),L1=a("li"),Iie=a("strong"),iCo=o("roformer"),dCo=o(" \u2014 "),lj=a("a"),cCo=o("RoFormerForMaskedLM"),fCo=o(" (RoFormer model)"),mCo=l(),x1=a("li"),qie=a("strong"),gCo=o("squeezebert"),hCo=o(" \u2014 "),ij=a("a"),pCo=o("SqueezeBertForMaskedLM"),uCo=o(" (SqueezeBERT model)"),_Co=l(),$1=a("li"),Nie=a("strong"),bCo=o("tapas"),vCo=o(" \u2014 "),dj=a("a"),FCo=o("TapasForMaskedLM"),TCo=o(" (TAPAS model)"),MCo=l(),k1=a("li"),jie=a("strong"),ECo=o("wav2vec2"),CCo=o(" \u2014 "),Die=a("code"),wCo=o("Wav2Vec2ForMaskedLM"),ACo=o(" (Wav2Vec2 model)"),yCo=l(),S1=a("li"),Gie=a("strong"),LCo=o("xlm"),xCo=o(" \u2014 "),cj=a("a"),$Co=o("XLMWithLMHeadModel"),kCo=o(" (XLM model)"),SCo=l(),R1=a("li"),Oie=a("strong"),RCo=o("xlm-roberta"),BCo=o(" \u2014 "),fj=a("a"),PCo=o("XLMRobertaForMaskedLM"),ICo=o(" (XLM-RoBERTa model)"),qCo=l(),B1=a("li"),Vie=a("strong"),NCo=o("xlm-roberta-xl"),jCo=o(" \u2014 "),mj=a("a"),DCo=o("XLMRobertaXLForMaskedLM"),GCo=o(" (XLM-RoBERTa-XL model)"),OCo=l(),P1=a("li"),Xie=a("strong"),VCo=o("yoso"),XCo=o(" \u2014 "),gj=a("a"),zCo=o("YosoForMaskedLM"),QCo=o(" (YOSO model)"),WCo=l(),I1=a("p"),HCo=o("The model is set in evaluation mode by default using "),zie=a("code"),UCo=o("model.eval()"),JCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qie=a("code"),YCo=o("model.train()"),KCo=l(),F(q1.$$.fragment),cPe=l(),Li=a("h2"),N1=a("a"),Wie=a("span"),F(EA.$$.fragment),ZCo=l(),Hie=a("span"),e3o=o("AutoModelForSeq2SeqLM"),fPe=l(),So=a("div"),F(CA.$$.fragment),o3o=l(),xi=a("p"),r3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hj=a("a"),t3o=o("from_pretrained()"),a3o=o(" class method or the "),pj=a("a"),n3o=o("from_config()"),s3o=o(` class
method.`),l3o=l(),wA=a("p"),i3o=o("This class cannot be instantiated directly using "),Uie=a("code"),d3o=o("__init__()"),c3o=o(" (throws an error)."),f3o=l(),tt=a("div"),F(AA.$$.fragment),m3o=l(),Jie=a("p"),g3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h3o=l(),$i=a("p"),p3o=o(`Note:
Loading a model from its configuration file does `),Yie=a("strong"),u3o=o("not"),_3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uj=a("a"),b3o=o("from_pretrained()"),v3o=o(" to load the model weights."),F3o=l(),F(j1.$$.fragment),T3o=l(),Ke=a("div"),F(yA.$$.fragment),M3o=l(),Kie=a("p"),E3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C3o=l(),ya=a("p"),w3o=o("The model class to instantiate is selected based on the "),Zie=a("code"),A3o=o("model_type"),y3o=o(` property of the config object (either
passed as an argument or loaded from `),ede=a("code"),L3o=o("pretrained_model_name_or_path"),x3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=a("code"),$3o=o("pretrained_model_name_or_path"),k3o=o(":"),S3o=l(),he=a("ul"),D1=a("li"),rde=a("strong"),R3o=o("bart"),B3o=o(" \u2014 "),_j=a("a"),P3o=o("BartForConditionalGeneration"),I3o=o(" (BART model)"),q3o=l(),G1=a("li"),tde=a("strong"),N3o=o("bigbird_pegasus"),j3o=o(" \u2014 "),bj=a("a"),D3o=o("BigBirdPegasusForConditionalGeneration"),G3o=o(" (BigBirdPegasus model)"),O3o=l(),O1=a("li"),ade=a("strong"),V3o=o("blenderbot"),X3o=o(" \u2014 "),vj=a("a"),z3o=o("BlenderbotForConditionalGeneration"),Q3o=o(" (Blenderbot model)"),W3o=l(),V1=a("li"),nde=a("strong"),H3o=o("blenderbot-small"),U3o=o(" \u2014 "),Fj=a("a"),J3o=o("BlenderbotSmallForConditionalGeneration"),Y3o=o(" (BlenderbotSmall model)"),K3o=l(),X1=a("li"),sde=a("strong"),Z3o=o("encoder-decoder"),ewo=o(" \u2014 "),Tj=a("a"),owo=o("EncoderDecoderModel"),rwo=o(" (Encoder decoder model)"),two=l(),z1=a("li"),lde=a("strong"),awo=o("fsmt"),nwo=o(" \u2014 "),Mj=a("a"),swo=o("FSMTForConditionalGeneration"),lwo=o(" (FairSeq Machine-Translation model)"),iwo=l(),Q1=a("li"),ide=a("strong"),dwo=o("led"),cwo=o(" \u2014 "),Ej=a("a"),fwo=o("LEDForConditionalGeneration"),mwo=o(" (LED model)"),gwo=l(),W1=a("li"),dde=a("strong"),hwo=o("m2m_100"),pwo=o(" \u2014 "),Cj=a("a"),uwo=o("M2M100ForConditionalGeneration"),_wo=o(" (M2M100 model)"),bwo=l(),H1=a("li"),cde=a("strong"),vwo=o("marian"),Fwo=o(" \u2014 "),wj=a("a"),Two=o("MarianMTModel"),Mwo=o(" (Marian model)"),Ewo=l(),U1=a("li"),fde=a("strong"),Cwo=o("mbart"),wwo=o(" \u2014 "),Aj=a("a"),Awo=o("MBartForConditionalGeneration"),ywo=o(" (mBART model)"),Lwo=l(),J1=a("li"),mde=a("strong"),xwo=o("mt5"),$wo=o(" \u2014 "),yj=a("a"),kwo=o("MT5ForConditionalGeneration"),Swo=o(" (mT5 model)"),Rwo=l(),Y1=a("li"),gde=a("strong"),Bwo=o("pegasus"),Pwo=o(" \u2014 "),Lj=a("a"),Iwo=o("PegasusForConditionalGeneration"),qwo=o(" (Pegasus model)"),Nwo=l(),K1=a("li"),hde=a("strong"),jwo=o("plbart"),Dwo=o(" \u2014 "),xj=a("a"),Gwo=o("PLBartForConditionalGeneration"),Owo=o(" (PLBart model)"),Vwo=l(),Z1=a("li"),pde=a("strong"),Xwo=o("prophetnet"),zwo=o(" \u2014 "),$j=a("a"),Qwo=o("ProphetNetForConditionalGeneration"),Wwo=o(" (ProphetNet model)"),Hwo=l(),e8=a("li"),ude=a("strong"),Uwo=o("t5"),Jwo=o(" \u2014 "),kj=a("a"),Ywo=o("T5ForConditionalGeneration"),Kwo=o(" (T5 model)"),Zwo=l(),o8=a("li"),_de=a("strong"),eAo=o("tapex"),oAo=o(" \u2014 "),Sj=a("a"),rAo=o("BartForConditionalGeneration"),tAo=o(" (TAPEX model)"),aAo=l(),r8=a("li"),bde=a("strong"),nAo=o("xlm-prophetnet"),sAo=o(" \u2014 "),Rj=a("a"),lAo=o("XLMProphetNetForConditionalGeneration"),iAo=o(" (XLMProphetNet model)"),dAo=l(),t8=a("p"),cAo=o("The model is set in evaluation mode by default using "),vde=a("code"),fAo=o("model.eval()"),mAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=a("code"),gAo=o("model.train()"),hAo=l(),F(a8.$$.fragment),mPe=l(),ki=a("h2"),n8=a("a"),Tde=a("span"),F(LA.$$.fragment),pAo=l(),Mde=a("span"),uAo=o("AutoModelForSequenceClassification"),gPe=l(),Ro=a("div"),F(xA.$$.fragment),_Ao=l(),Si=a("p"),bAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bj=a("a"),vAo=o("from_pretrained()"),FAo=o(" class method or the "),Pj=a("a"),TAo=o("from_config()"),MAo=o(` class
method.`),EAo=l(),$A=a("p"),CAo=o("This class cannot be instantiated directly using "),Ede=a("code"),wAo=o("__init__()"),AAo=o(" (throws an error)."),yAo=l(),at=a("div"),F(kA.$$.fragment),LAo=l(),Cde=a("p"),xAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Ao=l(),Ri=a("p"),kAo=o(`Note:
Loading a model from its configuration file does `),wde=a("strong"),SAo=o("not"),RAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=a("a"),BAo=o("from_pretrained()"),PAo=o(" to load the model weights."),IAo=l(),F(s8.$$.fragment),qAo=l(),Ze=a("div"),F(SA.$$.fragment),NAo=l(),Ade=a("p"),jAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DAo=l(),La=a("p"),GAo=o("The model class to instantiate is selected based on the "),yde=a("code"),OAo=o("model_type"),VAo=o(` property of the config object (either
passed as an argument or loaded from `),Lde=a("code"),XAo=o("pretrained_model_name_or_path"),zAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=a("code"),QAo=o("pretrained_model_name_or_path"),WAo=o(":"),HAo=l(),q=a("ul"),l8=a("li"),$de=a("strong"),UAo=o("albert"),JAo=o(" \u2014 "),qj=a("a"),YAo=o("AlbertForSequenceClassification"),KAo=o(" (ALBERT model)"),ZAo=l(),i8=a("li"),kde=a("strong"),e6o=o("bart"),o6o=o(" \u2014 "),Nj=a("a"),r6o=o("BartForSequenceClassification"),t6o=o(" (BART model)"),a6o=l(),d8=a("li"),Sde=a("strong"),n6o=o("bert"),s6o=o(" \u2014 "),jj=a("a"),l6o=o("BertForSequenceClassification"),i6o=o(" (BERT model)"),d6o=l(),c8=a("li"),Rde=a("strong"),c6o=o("big_bird"),f6o=o(" \u2014 "),Dj=a("a"),m6o=o("BigBirdForSequenceClassification"),g6o=o(" (BigBird model)"),h6o=l(),f8=a("li"),Bde=a("strong"),p6o=o("bigbird_pegasus"),u6o=o(" \u2014 "),Gj=a("a"),_6o=o("BigBirdPegasusForSequenceClassification"),b6o=o(" (BigBirdPegasus model)"),v6o=l(),m8=a("li"),Pde=a("strong"),F6o=o("camembert"),T6o=o(" \u2014 "),Oj=a("a"),M6o=o("CamembertForSequenceClassification"),E6o=o(" (CamemBERT model)"),C6o=l(),g8=a("li"),Ide=a("strong"),w6o=o("canine"),A6o=o(" \u2014 "),Vj=a("a"),y6o=o("CanineForSequenceClassification"),L6o=o(" (Canine model)"),x6o=l(),h8=a("li"),qde=a("strong"),$6o=o("convbert"),k6o=o(" \u2014 "),Xj=a("a"),S6o=o("ConvBertForSequenceClassification"),R6o=o(" (ConvBERT model)"),B6o=l(),p8=a("li"),Nde=a("strong"),P6o=o("ctrl"),I6o=o(" \u2014 "),zj=a("a"),q6o=o("CTRLForSequenceClassification"),N6o=o(" (CTRL model)"),j6o=l(),u8=a("li"),jde=a("strong"),D6o=o("data2vec-text"),G6o=o(" \u2014 "),Qj=a("a"),O6o=o("Data2VecTextForSequenceClassification"),V6o=o(" (Data2VecText model)"),X6o=l(),_8=a("li"),Dde=a("strong"),z6o=o("deberta"),Q6o=o(" \u2014 "),Wj=a("a"),W6o=o("DebertaForSequenceClassification"),H6o=o(" (DeBERTa model)"),U6o=l(),b8=a("li"),Gde=a("strong"),J6o=o("deberta-v2"),Y6o=o(" \u2014 "),Hj=a("a"),K6o=o("DebertaV2ForSequenceClassification"),Z6o=o(" (DeBERTa-v2 model)"),eyo=l(),v8=a("li"),Ode=a("strong"),oyo=o("distilbert"),ryo=o(" \u2014 "),Uj=a("a"),tyo=o("DistilBertForSequenceClassification"),ayo=o(" (DistilBERT model)"),nyo=l(),F8=a("li"),Vde=a("strong"),syo=o("electra"),lyo=o(" \u2014 "),Jj=a("a"),iyo=o("ElectraForSequenceClassification"),dyo=o(" (ELECTRA model)"),cyo=l(),T8=a("li"),Xde=a("strong"),fyo=o("flaubert"),myo=o(" \u2014 "),Yj=a("a"),gyo=o("FlaubertForSequenceClassification"),hyo=o(" (FlauBERT model)"),pyo=l(),M8=a("li"),zde=a("strong"),uyo=o("fnet"),_yo=o(" \u2014 "),Kj=a("a"),byo=o("FNetForSequenceClassification"),vyo=o(" (FNet model)"),Fyo=l(),E8=a("li"),Qde=a("strong"),Tyo=o("funnel"),Myo=o(" \u2014 "),Zj=a("a"),Eyo=o("FunnelForSequenceClassification"),Cyo=o(" (Funnel Transformer model)"),wyo=l(),C8=a("li"),Wde=a("strong"),Ayo=o("gpt2"),yyo=o(" \u2014 "),eD=a("a"),Lyo=o("GPT2ForSequenceClassification"),xyo=o(" (OpenAI GPT-2 model)"),$yo=l(),w8=a("li"),Hde=a("strong"),kyo=o("gpt_neo"),Syo=o(" \u2014 "),oD=a("a"),Ryo=o("GPTNeoForSequenceClassification"),Byo=o(" (GPT Neo model)"),Pyo=l(),A8=a("li"),Ude=a("strong"),Iyo=o("gptj"),qyo=o(" \u2014 "),rD=a("a"),Nyo=o("GPTJForSequenceClassification"),jyo=o(" (GPT-J model)"),Dyo=l(),y8=a("li"),Jde=a("strong"),Gyo=o("ibert"),Oyo=o(" \u2014 "),tD=a("a"),Vyo=o("IBertForSequenceClassification"),Xyo=o(" (I-BERT model)"),zyo=l(),L8=a("li"),Yde=a("strong"),Qyo=o("layoutlm"),Wyo=o(" \u2014 "),aD=a("a"),Hyo=o("LayoutLMForSequenceClassification"),Uyo=o(" (LayoutLM model)"),Jyo=l(),x8=a("li"),Kde=a("strong"),Yyo=o("layoutlmv2"),Kyo=o(" \u2014 "),nD=a("a"),Zyo=o("LayoutLMv2ForSequenceClassification"),eLo=o(" (LayoutLMv2 model)"),oLo=l(),$8=a("li"),Zde=a("strong"),rLo=o("led"),tLo=o(" \u2014 "),sD=a("a"),aLo=o("LEDForSequenceClassification"),nLo=o(" (LED model)"),sLo=l(),k8=a("li"),ece=a("strong"),lLo=o("longformer"),iLo=o(" \u2014 "),lD=a("a"),dLo=o("LongformerForSequenceClassification"),cLo=o(" (Longformer model)"),fLo=l(),S8=a("li"),oce=a("strong"),mLo=o("mbart"),gLo=o(" \u2014 "),iD=a("a"),hLo=o("MBartForSequenceClassification"),pLo=o(" (mBART model)"),uLo=l(),R8=a("li"),rce=a("strong"),_Lo=o("megatron-bert"),bLo=o(" \u2014 "),dD=a("a"),vLo=o("MegatronBertForSequenceClassification"),FLo=o(" (MegatronBert model)"),TLo=l(),B8=a("li"),tce=a("strong"),MLo=o("mobilebert"),ELo=o(" \u2014 "),cD=a("a"),CLo=o("MobileBertForSequenceClassification"),wLo=o(" (MobileBERT model)"),ALo=l(),P8=a("li"),ace=a("strong"),yLo=o("mpnet"),LLo=o(" \u2014 "),fD=a("a"),xLo=o("MPNetForSequenceClassification"),$Lo=o(" (MPNet model)"),kLo=l(),I8=a("li"),nce=a("strong"),SLo=o("nystromformer"),RLo=o(" \u2014 "),mD=a("a"),BLo=o("NystromformerForSequenceClassification"),PLo=o(" (Nystromformer model)"),ILo=l(),q8=a("li"),sce=a("strong"),qLo=o("openai-gpt"),NLo=o(" \u2014 "),gD=a("a"),jLo=o("OpenAIGPTForSequenceClassification"),DLo=o(" (OpenAI GPT model)"),GLo=l(),N8=a("li"),lce=a("strong"),OLo=o("perceiver"),VLo=o(" \u2014 "),hD=a("a"),XLo=o("PerceiverForSequenceClassification"),zLo=o(" (Perceiver model)"),QLo=l(),j8=a("li"),ice=a("strong"),WLo=o("plbart"),HLo=o(" \u2014 "),pD=a("a"),ULo=o("PLBartForSequenceClassification"),JLo=o(" (PLBart model)"),YLo=l(),D8=a("li"),dce=a("strong"),KLo=o("qdqbert"),ZLo=o(" \u2014 "),uD=a("a"),exo=o("QDQBertForSequenceClassification"),oxo=o(" (QDQBert model)"),rxo=l(),G8=a("li"),cce=a("strong"),txo=o("reformer"),axo=o(" \u2014 "),_D=a("a"),nxo=o("ReformerForSequenceClassification"),sxo=o(" (Reformer model)"),lxo=l(),O8=a("li"),fce=a("strong"),ixo=o("rembert"),dxo=o(" \u2014 "),bD=a("a"),cxo=o("RemBertForSequenceClassification"),fxo=o(" (RemBERT model)"),mxo=l(),V8=a("li"),mce=a("strong"),gxo=o("roberta"),hxo=o(" \u2014 "),vD=a("a"),pxo=o("RobertaForSequenceClassification"),uxo=o(" (RoBERTa model)"),_xo=l(),X8=a("li"),gce=a("strong"),bxo=o("roformer"),vxo=o(" \u2014 "),FD=a("a"),Fxo=o("RoFormerForSequenceClassification"),Txo=o(" (RoFormer model)"),Mxo=l(),z8=a("li"),hce=a("strong"),Exo=o("squeezebert"),Cxo=o(" \u2014 "),TD=a("a"),wxo=o("SqueezeBertForSequenceClassification"),Axo=o(" (SqueezeBERT model)"),yxo=l(),Q8=a("li"),pce=a("strong"),Lxo=o("tapas"),xxo=o(" \u2014 "),MD=a("a"),$xo=o("TapasForSequenceClassification"),kxo=o(" (TAPAS model)"),Sxo=l(),W8=a("li"),uce=a("strong"),Rxo=o("tapex"),Bxo=o(" \u2014 "),ED=a("a"),Pxo=o("BartForSequenceClassification"),Ixo=o(" (TAPEX model)"),qxo=l(),H8=a("li"),_ce=a("strong"),Nxo=o("transfo-xl"),jxo=o(" \u2014 "),CD=a("a"),Dxo=o("TransfoXLForSequenceClassification"),Gxo=o(" (Transformer-XL model)"),Oxo=l(),U8=a("li"),bce=a("strong"),Vxo=o("xlm"),Xxo=o(" \u2014 "),wD=a("a"),zxo=o("XLMForSequenceClassification"),Qxo=o(" (XLM model)"),Wxo=l(),J8=a("li"),vce=a("strong"),Hxo=o("xlm-roberta"),Uxo=o(" \u2014 "),AD=a("a"),Jxo=o("XLMRobertaForSequenceClassification"),Yxo=o(" (XLM-RoBERTa model)"),Kxo=l(),Y8=a("li"),Fce=a("strong"),Zxo=o("xlm-roberta-xl"),e9o=o(" \u2014 "),yD=a("a"),o9o=o("XLMRobertaXLForSequenceClassification"),r9o=o(" (XLM-RoBERTa-XL model)"),t9o=l(),K8=a("li"),Tce=a("strong"),a9o=o("xlnet"),n9o=o(" \u2014 "),LD=a("a"),s9o=o("XLNetForSequenceClassification"),l9o=o(" (XLNet model)"),i9o=l(),Z8=a("li"),Mce=a("strong"),d9o=o("yoso"),c9o=o(" \u2014 "),xD=a("a"),f9o=o("YosoForSequenceClassification"),m9o=o(" (YOSO model)"),g9o=l(),eb=a("p"),h9o=o("The model is set in evaluation mode by default using "),Ece=a("code"),p9o=o("model.eval()"),u9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),_9o=o("model.train()"),b9o=l(),F(ob.$$.fragment),hPe=l(),Bi=a("h2"),rb=a("a"),wce=a("span"),F(RA.$$.fragment),v9o=l(),Ace=a("span"),F9o=o("AutoModelForMultipleChoice"),pPe=l(),Bo=a("div"),F(BA.$$.fragment),T9o=l(),Pi=a("p"),M9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$D=a("a"),E9o=o("from_pretrained()"),C9o=o(" class method or the "),kD=a("a"),w9o=o("from_config()"),A9o=o(` class
method.`),y9o=l(),PA=a("p"),L9o=o("This class cannot be instantiated directly using "),yce=a("code"),x9o=o("__init__()"),$9o=o(" (throws an error)."),k9o=l(),nt=a("div"),F(IA.$$.fragment),S9o=l(),Lce=a("p"),R9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),B9o=l(),Ii=a("p"),P9o=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),I9o=o("not"),q9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=a("a"),N9o=o("from_pretrained()"),j9o=o(" to load the model weights."),D9o=l(),F(tb.$$.fragment),G9o=l(),eo=a("div"),F(qA.$$.fragment),O9o=l(),$ce=a("p"),V9o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X9o=l(),xa=a("p"),z9o=o("The model class to instantiate is selected based on the "),kce=a("code"),Q9o=o("model_type"),W9o=o(` property of the config object (either
passed as an argument or loaded from `),Sce=a("code"),H9o=o("pretrained_model_name_or_path"),U9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),J9o=o("pretrained_model_name_or_path"),Y9o=o(":"),K9o=l(),Y=a("ul"),ab=a("li"),Bce=a("strong"),Z9o=o("albert"),e$o=o(" \u2014 "),RD=a("a"),o$o=o("AlbertForMultipleChoice"),r$o=o(" (ALBERT model)"),t$o=l(),nb=a("li"),Pce=a("strong"),a$o=o("bert"),n$o=o(" \u2014 "),BD=a("a"),s$o=o("BertForMultipleChoice"),l$o=o(" (BERT model)"),i$o=l(),sb=a("li"),Ice=a("strong"),d$o=o("big_bird"),c$o=o(" \u2014 "),PD=a("a"),f$o=o("BigBirdForMultipleChoice"),m$o=o(" (BigBird model)"),g$o=l(),lb=a("li"),qce=a("strong"),h$o=o("camembert"),p$o=o(" \u2014 "),ID=a("a"),u$o=o("CamembertForMultipleChoice"),_$o=o(" (CamemBERT model)"),b$o=l(),ib=a("li"),Nce=a("strong"),v$o=o("canine"),F$o=o(" \u2014 "),qD=a("a"),T$o=o("CanineForMultipleChoice"),M$o=o(" (Canine model)"),E$o=l(),db=a("li"),jce=a("strong"),C$o=o("convbert"),w$o=o(" \u2014 "),ND=a("a"),A$o=o("ConvBertForMultipleChoice"),y$o=o(" (ConvBERT model)"),L$o=l(),cb=a("li"),Dce=a("strong"),x$o=o("data2vec-text"),$$o=o(" \u2014 "),jD=a("a"),k$o=o("Data2VecTextForMultipleChoice"),S$o=o(" (Data2VecText model)"),R$o=l(),fb=a("li"),Gce=a("strong"),B$o=o("distilbert"),P$o=o(" \u2014 "),DD=a("a"),I$o=o("DistilBertForMultipleChoice"),q$o=o(" (DistilBERT model)"),N$o=l(),mb=a("li"),Oce=a("strong"),j$o=o("electra"),D$o=o(" \u2014 "),GD=a("a"),G$o=o("ElectraForMultipleChoice"),O$o=o(" (ELECTRA model)"),V$o=l(),gb=a("li"),Vce=a("strong"),X$o=o("flaubert"),z$o=o(" \u2014 "),OD=a("a"),Q$o=o("FlaubertForMultipleChoice"),W$o=o(" (FlauBERT model)"),H$o=l(),hb=a("li"),Xce=a("strong"),U$o=o("fnet"),J$o=o(" \u2014 "),VD=a("a"),Y$o=o("FNetForMultipleChoice"),K$o=o(" (FNet model)"),Z$o=l(),pb=a("li"),zce=a("strong"),eko=o("funnel"),oko=o(" \u2014 "),XD=a("a"),rko=o("FunnelForMultipleChoice"),tko=o(" (Funnel Transformer model)"),ako=l(),ub=a("li"),Qce=a("strong"),nko=o("ibert"),sko=o(" \u2014 "),zD=a("a"),lko=o("IBertForMultipleChoice"),iko=o(" (I-BERT model)"),dko=l(),_b=a("li"),Wce=a("strong"),cko=o("longformer"),fko=o(" \u2014 "),QD=a("a"),mko=o("LongformerForMultipleChoice"),gko=o(" (Longformer model)"),hko=l(),bb=a("li"),Hce=a("strong"),pko=o("megatron-bert"),uko=o(" \u2014 "),WD=a("a"),_ko=o("MegatronBertForMultipleChoice"),bko=o(" (MegatronBert model)"),vko=l(),vb=a("li"),Uce=a("strong"),Fko=o("mobilebert"),Tko=o(" \u2014 "),HD=a("a"),Mko=o("MobileBertForMultipleChoice"),Eko=o(" (MobileBERT model)"),Cko=l(),Fb=a("li"),Jce=a("strong"),wko=o("mpnet"),Ako=o(" \u2014 "),UD=a("a"),yko=o("MPNetForMultipleChoice"),Lko=o(" (MPNet model)"),xko=l(),Tb=a("li"),Yce=a("strong"),$ko=o("nystromformer"),kko=o(" \u2014 "),JD=a("a"),Sko=o("NystromformerForMultipleChoice"),Rko=o(" (Nystromformer model)"),Bko=l(),Mb=a("li"),Kce=a("strong"),Pko=o("qdqbert"),Iko=o(" \u2014 "),YD=a("a"),qko=o("QDQBertForMultipleChoice"),Nko=o(" (QDQBert model)"),jko=l(),Eb=a("li"),Zce=a("strong"),Dko=o("rembert"),Gko=o(" \u2014 "),KD=a("a"),Oko=o("RemBertForMultipleChoice"),Vko=o(" (RemBERT model)"),Xko=l(),Cb=a("li"),efe=a("strong"),zko=o("roberta"),Qko=o(" \u2014 "),ZD=a("a"),Wko=o("RobertaForMultipleChoice"),Hko=o(" (RoBERTa model)"),Uko=l(),wb=a("li"),ofe=a("strong"),Jko=o("roformer"),Yko=o(" \u2014 "),eG=a("a"),Kko=o("RoFormerForMultipleChoice"),Zko=o(" (RoFormer model)"),eSo=l(),Ab=a("li"),rfe=a("strong"),oSo=o("squeezebert"),rSo=o(" \u2014 "),oG=a("a"),tSo=o("SqueezeBertForMultipleChoice"),aSo=o(" (SqueezeBERT model)"),nSo=l(),yb=a("li"),tfe=a("strong"),sSo=o("xlm"),lSo=o(" \u2014 "),rG=a("a"),iSo=o("XLMForMultipleChoice"),dSo=o(" (XLM model)"),cSo=l(),Lb=a("li"),afe=a("strong"),fSo=o("xlm-roberta"),mSo=o(" \u2014 "),tG=a("a"),gSo=o("XLMRobertaForMultipleChoice"),hSo=o(" (XLM-RoBERTa model)"),pSo=l(),xb=a("li"),nfe=a("strong"),uSo=o("xlm-roberta-xl"),_So=o(" \u2014 "),aG=a("a"),bSo=o("XLMRobertaXLForMultipleChoice"),vSo=o(" (XLM-RoBERTa-XL model)"),FSo=l(),$b=a("li"),sfe=a("strong"),TSo=o("xlnet"),MSo=o(" \u2014 "),nG=a("a"),ESo=o("XLNetForMultipleChoice"),CSo=o(" (XLNet model)"),wSo=l(),kb=a("li"),lfe=a("strong"),ASo=o("yoso"),ySo=o(" \u2014 "),sG=a("a"),LSo=o("YosoForMultipleChoice"),xSo=o(" (YOSO model)"),$So=l(),Sb=a("p"),kSo=o("The model is set in evaluation mode by default using "),ife=a("code"),SSo=o("model.eval()"),RSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),BSo=o("model.train()"),PSo=l(),F(Rb.$$.fragment),uPe=l(),qi=a("h2"),Bb=a("a"),cfe=a("span"),F(NA.$$.fragment),ISo=l(),ffe=a("span"),qSo=o("AutoModelForNextSentencePrediction"),_Pe=l(),Po=a("div"),F(jA.$$.fragment),NSo=l(),Ni=a("p"),jSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lG=a("a"),DSo=o("from_pretrained()"),GSo=o(" class method or the "),iG=a("a"),OSo=o("from_config()"),VSo=o(` class
method.`),XSo=l(),DA=a("p"),zSo=o("This class cannot be instantiated directly using "),mfe=a("code"),QSo=o("__init__()"),WSo=o(" (throws an error)."),HSo=l(),st=a("div"),F(GA.$$.fragment),USo=l(),gfe=a("p"),JSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YSo=l(),ji=a("p"),KSo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),ZSo=o("not"),eRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=a("a"),oRo=o("from_pretrained()"),rRo=o(" to load the model weights."),tRo=l(),F(Pb.$$.fragment),aRo=l(),oo=a("div"),F(OA.$$.fragment),nRo=l(),pfe=a("p"),sRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lRo=l(),$a=a("p"),iRo=o("The model class to instantiate is selected based on the "),ufe=a("code"),dRo=o("model_type"),cRo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),fRo=o("pretrained_model_name_or_path"),mRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),gRo=o("pretrained_model_name_or_path"),hRo=o(":"),pRo=l(),Ur=a("ul"),Ib=a("li"),vfe=a("strong"),uRo=o("bert"),_Ro=o(" \u2014 "),cG=a("a"),bRo=o("BertForNextSentencePrediction"),vRo=o(" (BERT model)"),FRo=l(),qb=a("li"),Ffe=a("strong"),TRo=o("fnet"),MRo=o(" \u2014 "),fG=a("a"),ERo=o("FNetForNextSentencePrediction"),CRo=o(" (FNet model)"),wRo=l(),Nb=a("li"),Tfe=a("strong"),ARo=o("megatron-bert"),yRo=o(" \u2014 "),mG=a("a"),LRo=o("MegatronBertForNextSentencePrediction"),xRo=o(" (MegatronBert model)"),$Ro=l(),jb=a("li"),Mfe=a("strong"),kRo=o("mobilebert"),SRo=o(" \u2014 "),gG=a("a"),RRo=o("MobileBertForNextSentencePrediction"),BRo=o(" (MobileBERT model)"),PRo=l(),Db=a("li"),Efe=a("strong"),IRo=o("qdqbert"),qRo=o(" \u2014 "),hG=a("a"),NRo=o("QDQBertForNextSentencePrediction"),jRo=o(" (QDQBert model)"),DRo=l(),Gb=a("p"),GRo=o("The model is set in evaluation mode by default using "),Cfe=a("code"),ORo=o("model.eval()"),VRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=a("code"),XRo=o("model.train()"),zRo=l(),F(Ob.$$.fragment),bPe=l(),Di=a("h2"),Vb=a("a"),Afe=a("span"),F(VA.$$.fragment),QRo=l(),yfe=a("span"),WRo=o("AutoModelForTokenClassification"),vPe=l(),Io=a("div"),F(XA.$$.fragment),HRo=l(),Gi=a("p"),URo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pG=a("a"),JRo=o("from_pretrained()"),YRo=o(" class method or the "),uG=a("a"),KRo=o("from_config()"),ZRo=o(` class
method.`),eBo=l(),zA=a("p"),oBo=o("This class cannot be instantiated directly using "),Lfe=a("code"),rBo=o("__init__()"),tBo=o(" (throws an error)."),aBo=l(),lt=a("div"),F(QA.$$.fragment),nBo=l(),xfe=a("p"),sBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lBo=l(),Oi=a("p"),iBo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),dBo=o("not"),cBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),fBo=o("from_pretrained()"),mBo=o(" to load the model weights."),gBo=l(),F(Xb.$$.fragment),hBo=l(),ro=a("div"),F(WA.$$.fragment),pBo=l(),kfe=a("p"),uBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Bo=l(),ka=a("p"),bBo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),vBo=o("model_type"),FBo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),TBo=o("pretrained_model_name_or_path"),MBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),EBo=o("pretrained_model_name_or_path"),CBo=o(":"),wBo=l(),U=a("ul"),zb=a("li"),Pfe=a("strong"),ABo=o("albert"),yBo=o(" \u2014 "),bG=a("a"),LBo=o("AlbertForTokenClassification"),xBo=o(" (ALBERT model)"),$Bo=l(),Qb=a("li"),Ife=a("strong"),kBo=o("bert"),SBo=o(" \u2014 "),vG=a("a"),RBo=o("BertForTokenClassification"),BBo=o(" (BERT model)"),PBo=l(),Wb=a("li"),qfe=a("strong"),IBo=o("big_bird"),qBo=o(" \u2014 "),FG=a("a"),NBo=o("BigBirdForTokenClassification"),jBo=o(" (BigBird model)"),DBo=l(),Hb=a("li"),Nfe=a("strong"),GBo=o("camembert"),OBo=o(" \u2014 "),TG=a("a"),VBo=o("CamembertForTokenClassification"),XBo=o(" (CamemBERT model)"),zBo=l(),Ub=a("li"),jfe=a("strong"),QBo=o("canine"),WBo=o(" \u2014 "),MG=a("a"),HBo=o("CanineForTokenClassification"),UBo=o(" (Canine model)"),JBo=l(),Jb=a("li"),Dfe=a("strong"),YBo=o("convbert"),KBo=o(" \u2014 "),EG=a("a"),ZBo=o("ConvBertForTokenClassification"),ePo=o(" (ConvBERT model)"),oPo=l(),Yb=a("li"),Gfe=a("strong"),rPo=o("data2vec-text"),tPo=o(" \u2014 "),CG=a("a"),aPo=o("Data2VecTextForTokenClassification"),nPo=o(" (Data2VecText model)"),sPo=l(),Kb=a("li"),Ofe=a("strong"),lPo=o("deberta"),iPo=o(" \u2014 "),wG=a("a"),dPo=o("DebertaForTokenClassification"),cPo=o(" (DeBERTa model)"),fPo=l(),Zb=a("li"),Vfe=a("strong"),mPo=o("deberta-v2"),gPo=o(" \u2014 "),AG=a("a"),hPo=o("DebertaV2ForTokenClassification"),pPo=o(" (DeBERTa-v2 model)"),uPo=l(),e2=a("li"),Xfe=a("strong"),_Po=o("distilbert"),bPo=o(" \u2014 "),yG=a("a"),vPo=o("DistilBertForTokenClassification"),FPo=o(" (DistilBERT model)"),TPo=l(),o2=a("li"),zfe=a("strong"),MPo=o("electra"),EPo=o(" \u2014 "),LG=a("a"),CPo=o("ElectraForTokenClassification"),wPo=o(" (ELECTRA model)"),APo=l(),r2=a("li"),Qfe=a("strong"),yPo=o("flaubert"),LPo=o(" \u2014 "),xG=a("a"),xPo=o("FlaubertForTokenClassification"),$Po=o(" (FlauBERT model)"),kPo=l(),t2=a("li"),Wfe=a("strong"),SPo=o("fnet"),RPo=o(" \u2014 "),$G=a("a"),BPo=o("FNetForTokenClassification"),PPo=o(" (FNet model)"),IPo=l(),a2=a("li"),Hfe=a("strong"),qPo=o("funnel"),NPo=o(" \u2014 "),kG=a("a"),jPo=o("FunnelForTokenClassification"),DPo=o(" (Funnel Transformer model)"),GPo=l(),n2=a("li"),Ufe=a("strong"),OPo=o("gpt2"),VPo=o(" \u2014 "),SG=a("a"),XPo=o("GPT2ForTokenClassification"),zPo=o(" (OpenAI GPT-2 model)"),QPo=l(),s2=a("li"),Jfe=a("strong"),WPo=o("ibert"),HPo=o(" \u2014 "),RG=a("a"),UPo=o("IBertForTokenClassification"),JPo=o(" (I-BERT model)"),YPo=l(),l2=a("li"),Yfe=a("strong"),KPo=o("layoutlm"),ZPo=o(" \u2014 "),BG=a("a"),eIo=o("LayoutLMForTokenClassification"),oIo=o(" (LayoutLM model)"),rIo=l(),i2=a("li"),Kfe=a("strong"),tIo=o("layoutlmv2"),aIo=o(" \u2014 "),PG=a("a"),nIo=o("LayoutLMv2ForTokenClassification"),sIo=o(" (LayoutLMv2 model)"),lIo=l(),d2=a("li"),Zfe=a("strong"),iIo=o("longformer"),dIo=o(" \u2014 "),IG=a("a"),cIo=o("LongformerForTokenClassification"),fIo=o(" (Longformer model)"),mIo=l(),c2=a("li"),eme=a("strong"),gIo=o("megatron-bert"),hIo=o(" \u2014 "),qG=a("a"),pIo=o("MegatronBertForTokenClassification"),uIo=o(" (MegatronBert model)"),_Io=l(),f2=a("li"),ome=a("strong"),bIo=o("mobilebert"),vIo=o(" \u2014 "),NG=a("a"),FIo=o("MobileBertForTokenClassification"),TIo=o(" (MobileBERT model)"),MIo=l(),m2=a("li"),rme=a("strong"),EIo=o("mpnet"),CIo=o(" \u2014 "),jG=a("a"),wIo=o("MPNetForTokenClassification"),AIo=o(" (MPNet model)"),yIo=l(),g2=a("li"),tme=a("strong"),LIo=o("nystromformer"),xIo=o(" \u2014 "),DG=a("a"),$Io=o("NystromformerForTokenClassification"),kIo=o(" (Nystromformer model)"),SIo=l(),h2=a("li"),ame=a("strong"),RIo=o("qdqbert"),BIo=o(" \u2014 "),GG=a("a"),PIo=o("QDQBertForTokenClassification"),IIo=o(" (QDQBert model)"),qIo=l(),p2=a("li"),nme=a("strong"),NIo=o("rembert"),jIo=o(" \u2014 "),OG=a("a"),DIo=o("RemBertForTokenClassification"),GIo=o(" (RemBERT model)"),OIo=l(),u2=a("li"),sme=a("strong"),VIo=o("roberta"),XIo=o(" \u2014 "),VG=a("a"),zIo=o("RobertaForTokenClassification"),QIo=o(" (RoBERTa model)"),WIo=l(),_2=a("li"),lme=a("strong"),HIo=o("roformer"),UIo=o(" \u2014 "),XG=a("a"),JIo=o("RoFormerForTokenClassification"),YIo=o(" (RoFormer model)"),KIo=l(),b2=a("li"),ime=a("strong"),ZIo=o("squeezebert"),eqo=o(" \u2014 "),zG=a("a"),oqo=o("SqueezeBertForTokenClassification"),rqo=o(" (SqueezeBERT model)"),tqo=l(),v2=a("li"),dme=a("strong"),aqo=o("xlm"),nqo=o(" \u2014 "),QG=a("a"),sqo=o("XLMForTokenClassification"),lqo=o(" (XLM model)"),iqo=l(),F2=a("li"),cme=a("strong"),dqo=o("xlm-roberta"),cqo=o(" \u2014 "),WG=a("a"),fqo=o("XLMRobertaForTokenClassification"),mqo=o(" (XLM-RoBERTa model)"),gqo=l(),T2=a("li"),fme=a("strong"),hqo=o("xlm-roberta-xl"),pqo=o(" \u2014 "),HG=a("a"),uqo=o("XLMRobertaXLForTokenClassification"),_qo=o(" (XLM-RoBERTa-XL model)"),bqo=l(),M2=a("li"),mme=a("strong"),vqo=o("xlnet"),Fqo=o(" \u2014 "),UG=a("a"),Tqo=o("XLNetForTokenClassification"),Mqo=o(" (XLNet model)"),Eqo=l(),E2=a("li"),gme=a("strong"),Cqo=o("yoso"),wqo=o(" \u2014 "),JG=a("a"),Aqo=o("YosoForTokenClassification"),yqo=o(" (YOSO model)"),Lqo=l(),C2=a("p"),xqo=o("The model is set in evaluation mode by default using "),hme=a("code"),$qo=o("model.eval()"),kqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),Sqo=o("model.train()"),Rqo=l(),F(w2.$$.fragment),FPe=l(),Vi=a("h2"),A2=a("a"),ume=a("span"),F(HA.$$.fragment),Bqo=l(),_me=a("span"),Pqo=o("AutoModelForQuestionAnswering"),TPe=l(),qo=a("div"),F(UA.$$.fragment),Iqo=l(),Xi=a("p"),qqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YG=a("a"),Nqo=o("from_pretrained()"),jqo=o(" class method or the "),KG=a("a"),Dqo=o("from_config()"),Gqo=o(` class
method.`),Oqo=l(),JA=a("p"),Vqo=o("This class cannot be instantiated directly using "),bme=a("code"),Xqo=o("__init__()"),zqo=o(" (throws an error)."),Qqo=l(),it=a("div"),F(YA.$$.fragment),Wqo=l(),vme=a("p"),Hqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Uqo=l(),zi=a("p"),Jqo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),Yqo=o("not"),Kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),Zqo=o("from_pretrained()"),eNo=o(" to load the model weights."),oNo=l(),F(y2.$$.fragment),rNo=l(),to=a("div"),F(KA.$$.fragment),tNo=l(),Tme=a("p"),aNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nNo=l(),Sa=a("p"),sNo=o("The model class to instantiate is selected based on the "),Mme=a("code"),lNo=o("model_type"),iNo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),dNo=o("pretrained_model_name_or_path"),cNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(":"),gNo=l(),O=a("ul"),L2=a("li"),wme=a("strong"),hNo=o("albert"),pNo=o(" \u2014 "),eO=a("a"),uNo=o("AlbertForQuestionAnswering"),_No=o(" (ALBERT model)"),bNo=l(),x2=a("li"),Ame=a("strong"),vNo=o("bart"),FNo=o(" \u2014 "),oO=a("a"),TNo=o("BartForQuestionAnswering"),MNo=o(" (BART model)"),ENo=l(),$2=a("li"),yme=a("strong"),CNo=o("bert"),wNo=o(" \u2014 "),rO=a("a"),ANo=o("BertForQuestionAnswering"),yNo=o(" (BERT model)"),LNo=l(),k2=a("li"),Lme=a("strong"),xNo=o("big_bird"),$No=o(" \u2014 "),tO=a("a"),kNo=o("BigBirdForQuestionAnswering"),SNo=o(" (BigBird model)"),RNo=l(),S2=a("li"),xme=a("strong"),BNo=o("bigbird_pegasus"),PNo=o(" \u2014 "),aO=a("a"),INo=o("BigBirdPegasusForQuestionAnswering"),qNo=o(" (BigBirdPegasus model)"),NNo=l(),R2=a("li"),$me=a("strong"),jNo=o("camembert"),DNo=o(" \u2014 "),nO=a("a"),GNo=o("CamembertForQuestionAnswering"),ONo=o(" (CamemBERT model)"),VNo=l(),B2=a("li"),kme=a("strong"),XNo=o("canine"),zNo=o(" \u2014 "),sO=a("a"),QNo=o("CanineForQuestionAnswering"),WNo=o(" (Canine model)"),HNo=l(),P2=a("li"),Sme=a("strong"),UNo=o("convbert"),JNo=o(" \u2014 "),lO=a("a"),YNo=o("ConvBertForQuestionAnswering"),KNo=o(" (ConvBERT model)"),ZNo=l(),I2=a("li"),Rme=a("strong"),ejo=o("data2vec-text"),ojo=o(" \u2014 "),iO=a("a"),rjo=o("Data2VecTextForQuestionAnswering"),tjo=o(" (Data2VecText model)"),ajo=l(),q2=a("li"),Bme=a("strong"),njo=o("deberta"),sjo=o(" \u2014 "),dO=a("a"),ljo=o("DebertaForQuestionAnswering"),ijo=o(" (DeBERTa model)"),djo=l(),N2=a("li"),Pme=a("strong"),cjo=o("deberta-v2"),fjo=o(" \u2014 "),cO=a("a"),mjo=o("DebertaV2ForQuestionAnswering"),gjo=o(" (DeBERTa-v2 model)"),hjo=l(),j2=a("li"),Ime=a("strong"),pjo=o("distilbert"),ujo=o(" \u2014 "),fO=a("a"),_jo=o("DistilBertForQuestionAnswering"),bjo=o(" (DistilBERT model)"),vjo=l(),D2=a("li"),qme=a("strong"),Fjo=o("electra"),Tjo=o(" \u2014 "),mO=a("a"),Mjo=o("ElectraForQuestionAnswering"),Ejo=o(" (ELECTRA model)"),Cjo=l(),G2=a("li"),Nme=a("strong"),wjo=o("flaubert"),Ajo=o(" \u2014 "),gO=a("a"),yjo=o("FlaubertForQuestionAnsweringSimple"),Ljo=o(" (FlauBERT model)"),xjo=l(),O2=a("li"),jme=a("strong"),$jo=o("fnet"),kjo=o(" \u2014 "),hO=a("a"),Sjo=o("FNetForQuestionAnswering"),Rjo=o(" (FNet model)"),Bjo=l(),V2=a("li"),Dme=a("strong"),Pjo=o("funnel"),Ijo=o(" \u2014 "),pO=a("a"),qjo=o("FunnelForQuestionAnswering"),Njo=o(" (Funnel Transformer model)"),jjo=l(),X2=a("li"),Gme=a("strong"),Djo=o("gptj"),Gjo=o(" \u2014 "),uO=a("a"),Ojo=o("GPTJForQuestionAnswering"),Vjo=o(" (GPT-J model)"),Xjo=l(),z2=a("li"),Ome=a("strong"),zjo=o("ibert"),Qjo=o(" \u2014 "),_O=a("a"),Wjo=o("IBertForQuestionAnswering"),Hjo=o(" (I-BERT model)"),Ujo=l(),Q2=a("li"),Vme=a("strong"),Jjo=o("layoutlmv2"),Yjo=o(" \u2014 "),bO=a("a"),Kjo=o("LayoutLMv2ForQuestionAnswering"),Zjo=o(" (LayoutLMv2 model)"),eDo=l(),W2=a("li"),Xme=a("strong"),oDo=o("led"),rDo=o(" \u2014 "),vO=a("a"),tDo=o("LEDForQuestionAnswering"),aDo=o(" (LED model)"),nDo=l(),H2=a("li"),zme=a("strong"),sDo=o("longformer"),lDo=o(" \u2014 "),FO=a("a"),iDo=o("LongformerForQuestionAnswering"),dDo=o(" (Longformer model)"),cDo=l(),U2=a("li"),Qme=a("strong"),fDo=o("lxmert"),mDo=o(" \u2014 "),TO=a("a"),gDo=o("LxmertForQuestionAnswering"),hDo=o(" (LXMERT model)"),pDo=l(),J2=a("li"),Wme=a("strong"),uDo=o("mbart"),_Do=o(" \u2014 "),MO=a("a"),bDo=o("MBartForQuestionAnswering"),vDo=o(" (mBART model)"),FDo=l(),Y2=a("li"),Hme=a("strong"),TDo=o("megatron-bert"),MDo=o(" \u2014 "),EO=a("a"),EDo=o("MegatronBertForQuestionAnswering"),CDo=o(" (MegatronBert model)"),wDo=l(),K2=a("li"),Ume=a("strong"),ADo=o("mobilebert"),yDo=o(" \u2014 "),CO=a("a"),LDo=o("MobileBertForQuestionAnswering"),xDo=o(" (MobileBERT model)"),$Do=l(),Z2=a("li"),Jme=a("strong"),kDo=o("mpnet"),SDo=o(" \u2014 "),wO=a("a"),RDo=o("MPNetForQuestionAnswering"),BDo=o(" (MPNet model)"),PDo=l(),ev=a("li"),Yme=a("strong"),IDo=o("nystromformer"),qDo=o(" \u2014 "),AO=a("a"),NDo=o("NystromformerForQuestionAnswering"),jDo=o(" (Nystromformer model)"),DDo=l(),ov=a("li"),Kme=a("strong"),GDo=o("qdqbert"),ODo=o(" \u2014 "),yO=a("a"),VDo=o("QDQBertForQuestionAnswering"),XDo=o(" (QDQBert model)"),zDo=l(),rv=a("li"),Zme=a("strong"),QDo=o("reformer"),WDo=o(" \u2014 "),LO=a("a"),HDo=o("ReformerForQuestionAnswering"),UDo=o(" (Reformer model)"),JDo=l(),tv=a("li"),ege=a("strong"),YDo=o("rembert"),KDo=o(" \u2014 "),xO=a("a"),ZDo=o("RemBertForQuestionAnswering"),eGo=o(" (RemBERT model)"),oGo=l(),av=a("li"),oge=a("strong"),rGo=o("roberta"),tGo=o(" \u2014 "),$O=a("a"),aGo=o("RobertaForQuestionAnswering"),nGo=o(" (RoBERTa model)"),sGo=l(),nv=a("li"),rge=a("strong"),lGo=o("roformer"),iGo=o(" \u2014 "),kO=a("a"),dGo=o("RoFormerForQuestionAnswering"),cGo=o(" (RoFormer model)"),fGo=l(),sv=a("li"),tge=a("strong"),mGo=o("splinter"),gGo=o(" \u2014 "),SO=a("a"),hGo=o("SplinterForQuestionAnswering"),pGo=o(" (Splinter model)"),uGo=l(),lv=a("li"),age=a("strong"),_Go=o("squeezebert"),bGo=o(" \u2014 "),RO=a("a"),vGo=o("SqueezeBertForQuestionAnswering"),FGo=o(" (SqueezeBERT model)"),TGo=l(),iv=a("li"),nge=a("strong"),MGo=o("xlm"),EGo=o(" \u2014 "),BO=a("a"),CGo=o("XLMForQuestionAnsweringSimple"),wGo=o(" (XLM model)"),AGo=l(),dv=a("li"),sge=a("strong"),yGo=o("xlm-roberta"),LGo=o(" \u2014 "),PO=a("a"),xGo=o("XLMRobertaForQuestionAnswering"),$Go=o(" (XLM-RoBERTa model)"),kGo=l(),cv=a("li"),lge=a("strong"),SGo=o("xlm-roberta-xl"),RGo=o(" \u2014 "),IO=a("a"),BGo=o("XLMRobertaXLForQuestionAnswering"),PGo=o(" (XLM-RoBERTa-XL model)"),IGo=l(),fv=a("li"),ige=a("strong"),qGo=o("xlnet"),NGo=o(" \u2014 "),qO=a("a"),jGo=o("XLNetForQuestionAnsweringSimple"),DGo=o(" (XLNet model)"),GGo=l(),mv=a("li"),dge=a("strong"),OGo=o("yoso"),VGo=o(" \u2014 "),NO=a("a"),XGo=o("YosoForQuestionAnswering"),zGo=o(" (YOSO model)"),QGo=l(),gv=a("p"),WGo=o("The model is set in evaluation mode by default using "),cge=a("code"),HGo=o("model.eval()"),UGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=a("code"),JGo=o("model.train()"),YGo=l(),F(hv.$$.fragment),MPe=l(),Qi=a("h2"),pv=a("a"),mge=a("span"),F(ZA.$$.fragment),KGo=l(),gge=a("span"),ZGo=o("AutoModelForTableQuestionAnswering"),EPe=l(),No=a("div"),F(e6.$$.fragment),eOo=l(),Wi=a("p"),oOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jO=a("a"),rOo=o("from_pretrained()"),tOo=o(" class method or the "),DO=a("a"),aOo=o("from_config()"),nOo=o(` class
method.`),sOo=l(),o6=a("p"),lOo=o("This class cannot be instantiated directly using "),hge=a("code"),iOo=o("__init__()"),dOo=o(" (throws an error)."),cOo=l(),dt=a("div"),F(r6.$$.fragment),fOo=l(),pge=a("p"),mOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gOo=l(),Hi=a("p"),hOo=o(`Note:
Loading a model from its configuration file does `),uge=a("strong"),pOo=o("not"),uOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),_Oo=o("from_pretrained()"),bOo=o(" to load the model weights."),vOo=l(),F(uv.$$.fragment),FOo=l(),ao=a("div"),F(t6.$$.fragment),TOo=l(),_ge=a("p"),MOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),EOo=l(),Ra=a("p"),COo=o("The model class to instantiate is selected based on the "),bge=a("code"),wOo=o("model_type"),AOo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),yOo=o("pretrained_model_name_or_path"),LOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=a("code"),xOo=o("pretrained_model_name_or_path"),$Oo=o(":"),kOo=l(),Tge=a("ul"),_v=a("li"),Mge=a("strong"),SOo=o("tapas"),ROo=o(" \u2014 "),OO=a("a"),BOo=o("TapasForQuestionAnswering"),POo=o(" (TAPAS model)"),IOo=l(),bv=a("p"),qOo=o("The model is set in evaluation mode by default using "),Ege=a("code"),NOo=o("model.eval()"),jOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=a("code"),DOo=o("model.train()"),GOo=l(),F(vv.$$.fragment),CPe=l(),Ui=a("h2"),Fv=a("a"),wge=a("span"),F(a6.$$.fragment),OOo=l(),Age=a("span"),VOo=o("AutoModelForImageClassification"),wPe=l(),jo=a("div"),F(n6.$$.fragment),XOo=l(),Ji=a("p"),zOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VO=a("a"),QOo=o("from_pretrained()"),WOo=o(" class method or the "),XO=a("a"),HOo=o("from_config()"),UOo=o(` class
method.`),JOo=l(),s6=a("p"),YOo=o("This class cannot be instantiated directly using "),yge=a("code"),KOo=o("__init__()"),ZOo=o(" (throws an error)."),eVo=l(),ct=a("div"),F(l6.$$.fragment),oVo=l(),Lge=a("p"),rVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tVo=l(),Yi=a("p"),aVo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),nVo=o("not"),sVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=a("a"),lVo=o("from_pretrained()"),iVo=o(" to load the model weights."),dVo=l(),F(Tv.$$.fragment),cVo=l(),no=a("div"),F(i6.$$.fragment),fVo=l(),$ge=a("p"),mVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gVo=l(),Ba=a("p"),hVo=o("The model class to instantiate is selected based on the "),kge=a("code"),pVo=o("model_type"),uVo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),_Vo=o("pretrained_model_name_or_path"),bVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),vVo=o("pretrained_model_name_or_path"),FVo=o(":"),TVo=l(),ve=a("ul"),Mv=a("li"),Bge=a("strong"),MVo=o("beit"),EVo=o(" \u2014 "),QO=a("a"),CVo=o("BeitForImageClassification"),wVo=o(" (BEiT model)"),AVo=l(),Ev=a("li"),Pge=a("strong"),yVo=o("convnext"),LVo=o(" \u2014 "),WO=a("a"),xVo=o("ConvNextForImageClassification"),$Vo=o(" (ConvNext model)"),kVo=l(),Cv=a("li"),Ige=a("strong"),SVo=o("data2vec-vision"),RVo=o(" \u2014 "),HO=a("a"),BVo=o("Data2VecVisionForImageClassification"),PVo=o(" (Data2VecVision model)"),IVo=l(),$s=a("li"),qge=a("strong"),qVo=o("deit"),NVo=o(" \u2014 "),UO=a("a"),jVo=o("DeiTForImageClassification"),DVo=o(" or "),JO=a("a"),GVo=o("DeiTForImageClassificationWithTeacher"),OVo=o(" (DeiT model)"),VVo=l(),wv=a("li"),Nge=a("strong"),XVo=o("imagegpt"),zVo=o(" \u2014 "),YO=a("a"),QVo=o("ImageGPTForImageClassification"),WVo=o(" (ImageGPT model)"),HVo=l(),ft=a("li"),jge=a("strong"),UVo=o("perceiver"),JVo=o(" \u2014 "),KO=a("a"),YVo=o("PerceiverForImageClassificationLearned"),KVo=o(" or "),ZO=a("a"),ZVo=o("PerceiverForImageClassificationFourier"),eXo=o(" or "),eV=a("a"),oXo=o("PerceiverForImageClassificationConvProcessing"),rXo=o(" (Perceiver model)"),tXo=l(),Av=a("li"),Dge=a("strong"),aXo=o("poolformer"),nXo=o(" \u2014 "),oV=a("a"),sXo=o("PoolFormerForImageClassification"),lXo=o(" (PoolFormer model)"),iXo=l(),yv=a("li"),Gge=a("strong"),dXo=o("regnet"),cXo=o(" \u2014 "),rV=a("a"),fXo=o("RegNetForImageClassification"),mXo=o(" (RegNet model)"),gXo=l(),Lv=a("li"),Oge=a("strong"),hXo=o("resnet"),pXo=o(" \u2014 "),tV=a("a"),uXo=o("ResNetForImageClassification"),_Xo=o(" (ResNet model)"),bXo=l(),xv=a("li"),Vge=a("strong"),vXo=o("segformer"),FXo=o(" \u2014 "),aV=a("a"),TXo=o("SegformerForImageClassification"),MXo=o(" (SegFormer model)"),EXo=l(),$v=a("li"),Xge=a("strong"),CXo=o("swin"),wXo=o(" \u2014 "),nV=a("a"),AXo=o("SwinForImageClassification"),yXo=o(" (Swin model)"),LXo=l(),kv=a("li"),zge=a("strong"),xXo=o("van"),$Xo=o(" \u2014 "),sV=a("a"),kXo=o("VanForImageClassification"),SXo=o(" (VAN model)"),RXo=l(),Sv=a("li"),Qge=a("strong"),BXo=o("vit"),PXo=o(" \u2014 "),lV=a("a"),IXo=o("ViTForImageClassification"),qXo=o(" (ViT model)"),NXo=l(),Rv=a("p"),jXo=o("The model is set in evaluation mode by default using "),Wge=a("code"),DXo=o("model.eval()"),GXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),OXo=o("model.train()"),VXo=l(),F(Bv.$$.fragment),APe=l(),Ki=a("h2"),Pv=a("a"),Uge=a("span"),F(d6.$$.fragment),XXo=l(),Jge=a("span"),zXo=o("AutoModelForVision2Seq"),yPe=l(),Do=a("div"),F(c6.$$.fragment),QXo=l(),Zi=a("p"),WXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iV=a("a"),HXo=o("from_pretrained()"),UXo=o(" class method or the "),dV=a("a"),JXo=o("from_config()"),YXo=o(` class
method.`),KXo=l(),f6=a("p"),ZXo=o("This class cannot be instantiated directly using "),Yge=a("code"),ezo=o("__init__()"),ozo=o(" (throws an error)."),rzo=l(),mt=a("div"),F(m6.$$.fragment),tzo=l(),Kge=a("p"),azo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nzo=l(),ed=a("p"),szo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),lzo=o("not"),izo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),dzo=o("from_pretrained()"),czo=o(" to load the model weights."),fzo=l(),F(Iv.$$.fragment),mzo=l(),so=a("div"),F(g6.$$.fragment),gzo=l(),ehe=a("p"),hzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pzo=l(),Pa=a("p"),uzo=o("The model class to instantiate is selected based on the "),ohe=a("code"),_zo=o("model_type"),bzo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),vzo=o("pretrained_model_name_or_path"),Fzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),Tzo=o("pretrained_model_name_or_path"),Mzo=o(":"),Ezo=l(),ahe=a("ul"),qv=a("li"),nhe=a("strong"),Czo=o("vision-encoder-decoder"),wzo=o(" \u2014 "),fV=a("a"),Azo=o("VisionEncoderDecoderModel"),yzo=o(" (Vision Encoder decoder model)"),Lzo=l(),Nv=a("p"),xzo=o("The model is set in evaluation mode by default using "),she=a("code"),$zo=o("model.eval()"),kzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),Szo=o("model.train()"),Rzo=l(),F(jv.$$.fragment),LPe=l(),od=a("h2"),Dv=a("a"),ihe=a("span"),F(h6.$$.fragment),Bzo=l(),dhe=a("span"),Pzo=o("AutoModelForAudioClassification"),xPe=l(),Go=a("div"),F(p6.$$.fragment),Izo=l(),rd=a("p"),qzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mV=a("a"),Nzo=o("from_pretrained()"),jzo=o(" class method or the "),gV=a("a"),Dzo=o("from_config()"),Gzo=o(` class
method.`),Ozo=l(),u6=a("p"),Vzo=o("This class cannot be instantiated directly using "),che=a("code"),Xzo=o("__init__()"),zzo=o(" (throws an error)."),Qzo=l(),gt=a("div"),F(_6.$$.fragment),Wzo=l(),fhe=a("p"),Hzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Uzo=l(),td=a("p"),Jzo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),Yzo=o("not"),Kzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),Zzo=o("from_pretrained()"),eQo=o(" to load the model weights."),oQo=l(),F(Gv.$$.fragment),rQo=l(),lo=a("div"),F(b6.$$.fragment),tQo=l(),ghe=a("p"),aQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),nQo=l(),Ia=a("p"),sQo=o("The model class to instantiate is selected based on the "),hhe=a("code"),lQo=o("model_type"),iQo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),dQo=o("pretrained_model_name_or_path"),cQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),fQo=o("pretrained_model_name_or_path"),mQo=o(":"),gQo=l(),je=a("ul"),Ov=a("li"),_he=a("strong"),hQo=o("data2vec-audio"),pQo=o(" \u2014 "),pV=a("a"),uQo=o("Data2VecAudioForSequenceClassification"),_Qo=o(" (Data2VecAudio model)"),bQo=l(),Vv=a("li"),bhe=a("strong"),vQo=o("hubert"),FQo=o(" \u2014 "),uV=a("a"),TQo=o("HubertForSequenceClassification"),MQo=o(" (Hubert model)"),EQo=l(),Xv=a("li"),vhe=a("strong"),CQo=o("sew"),wQo=o(" \u2014 "),_V=a("a"),AQo=o("SEWForSequenceClassification"),yQo=o(" (SEW model)"),LQo=l(),zv=a("li"),Fhe=a("strong"),xQo=o("sew-d"),$Qo=o(" \u2014 "),bV=a("a"),kQo=o("SEWDForSequenceClassification"),SQo=o(" (SEW-D model)"),RQo=l(),Qv=a("li"),The=a("strong"),BQo=o("unispeech"),PQo=o(" \u2014 "),vV=a("a"),IQo=o("UniSpeechForSequenceClassification"),qQo=o(" (UniSpeech model)"),NQo=l(),Wv=a("li"),Mhe=a("strong"),jQo=o("unispeech-sat"),DQo=o(" \u2014 "),FV=a("a"),GQo=o("UniSpeechSatForSequenceClassification"),OQo=o(" (UniSpeechSat model)"),VQo=l(),Hv=a("li"),Ehe=a("strong"),XQo=o("wav2vec2"),zQo=o(" \u2014 "),TV=a("a"),QQo=o("Wav2Vec2ForSequenceClassification"),WQo=o(" (Wav2Vec2 model)"),HQo=l(),Uv=a("li"),Che=a("strong"),UQo=o("wavlm"),JQo=o(" \u2014 "),MV=a("a"),YQo=o("WavLMForSequenceClassification"),KQo=o(" (WavLM model)"),ZQo=l(),Jv=a("p"),eWo=o("The model is set in evaluation mode by default using "),whe=a("code"),oWo=o("model.eval()"),rWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=a("code"),tWo=o("model.train()"),aWo=l(),F(Yv.$$.fragment),$Pe=l(),ad=a("h2"),Kv=a("a"),yhe=a("span"),F(v6.$$.fragment),nWo=l(),Lhe=a("span"),sWo=o("AutoModelForAudioFrameClassification"),kPe=l(),Oo=a("div"),F(F6.$$.fragment),lWo=l(),nd=a("p"),iWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),EV=a("a"),dWo=o("from_pretrained()"),cWo=o(" class method or the "),CV=a("a"),fWo=o("from_config()"),mWo=o(` class
method.`),gWo=l(),T6=a("p"),hWo=o("This class cannot be instantiated directly using "),xhe=a("code"),pWo=o("__init__()"),uWo=o(" (throws an error)."),_Wo=l(),ht=a("div"),F(M6.$$.fragment),bWo=l(),$he=a("p"),vWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),FWo=l(),sd=a("p"),TWo=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),MWo=o("not"),EWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=a("a"),CWo=o("from_pretrained()"),wWo=o(" to load the model weights."),AWo=l(),F(Zv.$$.fragment),yWo=l(),io=a("div"),F(E6.$$.fragment),LWo=l(),She=a("p"),xWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),$Wo=l(),qa=a("p"),kWo=o("The model class to instantiate is selected based on the "),Rhe=a("code"),SWo=o("model_type"),RWo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),BWo=o("pretrained_model_name_or_path"),PWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=a("code"),IWo=o("pretrained_model_name_or_path"),qWo=o(":"),NWo=l(),Na=a("ul"),eF=a("li"),Ihe=a("strong"),jWo=o("data2vec-audio"),DWo=o(" \u2014 "),AV=a("a"),GWo=o("Data2VecAudioForAudioFrameClassification"),OWo=o(" (Data2VecAudio model)"),VWo=l(),oF=a("li"),qhe=a("strong"),XWo=o("unispeech-sat"),zWo=o(" \u2014 "),yV=a("a"),QWo=o("UniSpeechSatForAudioFrameClassification"),WWo=o(" (UniSpeechSat model)"),HWo=l(),rF=a("li"),Nhe=a("strong"),UWo=o("wav2vec2"),JWo=o(" \u2014 "),LV=a("a"),YWo=o("Wav2Vec2ForAudioFrameClassification"),KWo=o(" (Wav2Vec2 model)"),ZWo=l(),tF=a("li"),jhe=a("strong"),eHo=o("wavlm"),oHo=o(" \u2014 "),xV=a("a"),rHo=o("WavLMForAudioFrameClassification"),tHo=o(" (WavLM model)"),aHo=l(),aF=a("p"),nHo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),sHo=o("model.eval()"),lHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),iHo=o("model.train()"),dHo=l(),F(nF.$$.fragment),SPe=l(),ld=a("h2"),sF=a("a"),Ohe=a("span"),F(C6.$$.fragment),cHo=l(),Vhe=a("span"),fHo=o("AutoModelForCTC"),RPe=l(),Vo=a("div"),F(w6.$$.fragment),mHo=l(),id=a("p"),gHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$V=a("a"),hHo=o("from_pretrained()"),pHo=o(" class method or the "),kV=a("a"),uHo=o("from_config()"),_Ho=o(` class
method.`),bHo=l(),A6=a("p"),vHo=o("This class cannot be instantiated directly using "),Xhe=a("code"),FHo=o("__init__()"),THo=o(" (throws an error)."),MHo=l(),pt=a("div"),F(y6.$$.fragment),EHo=l(),zhe=a("p"),CHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),wHo=l(),dd=a("p"),AHo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),yHo=o("not"),LHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),xHo=o("from_pretrained()"),$Ho=o(" to load the model weights."),kHo=l(),F(lF.$$.fragment),SHo=l(),co=a("div"),F(L6.$$.fragment),RHo=l(),Whe=a("p"),BHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),PHo=l(),ja=a("p"),IHo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),qHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),GHo=o("pretrained_model_name_or_path"),OHo=o(":"),VHo=l(),De=a("ul"),iF=a("li"),Yhe=a("strong"),XHo=o("data2vec-audio"),zHo=o(" \u2014 "),RV=a("a"),QHo=o("Data2VecAudioForCTC"),WHo=o(" (Data2VecAudio model)"),HHo=l(),dF=a("li"),Khe=a("strong"),UHo=o("hubert"),JHo=o(" \u2014 "),BV=a("a"),YHo=o("HubertForCTC"),KHo=o(" (Hubert model)"),ZHo=l(),cF=a("li"),Zhe=a("strong"),eUo=o("sew"),oUo=o(" \u2014 "),PV=a("a"),rUo=o("SEWForCTC"),tUo=o(" (SEW model)"),aUo=l(),fF=a("li"),epe=a("strong"),nUo=o("sew-d"),sUo=o(" \u2014 "),IV=a("a"),lUo=o("SEWDForCTC"),iUo=o(" (SEW-D model)"),dUo=l(),mF=a("li"),ope=a("strong"),cUo=o("unispeech"),fUo=o(" \u2014 "),qV=a("a"),mUo=o("UniSpeechForCTC"),gUo=o(" (UniSpeech model)"),hUo=l(),gF=a("li"),rpe=a("strong"),pUo=o("unispeech-sat"),uUo=o(" \u2014 "),NV=a("a"),_Uo=o("UniSpeechSatForCTC"),bUo=o(" (UniSpeechSat model)"),vUo=l(),hF=a("li"),tpe=a("strong"),FUo=o("wav2vec2"),TUo=o(" \u2014 "),jV=a("a"),MUo=o("Wav2Vec2ForCTC"),EUo=o(" (Wav2Vec2 model)"),CUo=l(),pF=a("li"),ape=a("strong"),wUo=o("wavlm"),AUo=o(" \u2014 "),DV=a("a"),yUo=o("WavLMForCTC"),LUo=o(" (WavLM model)"),xUo=l(),uF=a("p"),$Uo=o("The model is set in evaluation mode by default using "),npe=a("code"),kUo=o("model.eval()"),SUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=a("code"),RUo=o("model.train()"),BUo=l(),F(_F.$$.fragment),BPe=l(),cd=a("h2"),bF=a("a"),lpe=a("span"),F(x6.$$.fragment),PUo=l(),ipe=a("span"),IUo=o("AutoModelForSpeechSeq2Seq"),PPe=l(),Xo=a("div"),F($6.$$.fragment),qUo=l(),fd=a("p"),NUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GV=a("a"),jUo=o("from_pretrained()"),DUo=o(" class method or the "),OV=a("a"),GUo=o("from_config()"),OUo=o(` class
method.`),VUo=l(),k6=a("p"),XUo=o("This class cannot be instantiated directly using "),dpe=a("code"),zUo=o("__init__()"),QUo=o(" (throws an error)."),WUo=l(),ut=a("div"),F(S6.$$.fragment),HUo=l(),cpe=a("p"),UUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JUo=l(),md=a("p"),YUo=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),KUo=o("not"),ZUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),eJo=o("from_pretrained()"),oJo=o(" to load the model weights."),rJo=l(),F(vF.$$.fragment),tJo=l(),fo=a("div"),F(R6.$$.fragment),aJo=l(),mpe=a("p"),nJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sJo=l(),Da=a("p"),lJo=o("The model class to instantiate is selected based on the "),gpe=a("code"),iJo=o("model_type"),dJo=o(` property of the config object (either
passed as an argument or loaded from `),hpe=a("code"),cJo=o("pretrained_model_name_or_path"),fJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(":"),hJo=l(),B6=a("ul"),FF=a("li"),upe=a("strong"),pJo=o("speech-encoder-decoder"),uJo=o(" \u2014 "),XV=a("a"),_Jo=o("SpeechEncoderDecoderModel"),bJo=o(" (Speech Encoder decoder model)"),vJo=l(),TF=a("li"),_pe=a("strong"),FJo=o("speech_to_text"),TJo=o(" \u2014 "),zV=a("a"),MJo=o("Speech2TextForConditionalGeneration"),EJo=o(" (Speech2Text model)"),CJo=l(),MF=a("p"),wJo=o("The model is set in evaluation mode by default using "),bpe=a("code"),AJo=o("model.eval()"),yJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),LJo=o("model.train()"),xJo=l(),F(EF.$$.fragment),IPe=l(),gd=a("h2"),CF=a("a"),Fpe=a("span"),F(P6.$$.fragment),$Jo=l(),Tpe=a("span"),kJo=o("AutoModelForAudioXVector"),qPe=l(),zo=a("div"),F(I6.$$.fragment),SJo=l(),hd=a("p"),RJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QV=a("a"),BJo=o("from_pretrained()"),PJo=o(" class method or the "),WV=a("a"),IJo=o("from_config()"),qJo=o(` class
method.`),NJo=l(),q6=a("p"),jJo=o("This class cannot be instantiated directly using "),Mpe=a("code"),DJo=o("__init__()"),GJo=o(" (throws an error)."),OJo=l(),_t=a("div"),F(N6.$$.fragment),VJo=l(),Epe=a("p"),XJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zJo=l(),pd=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),WJo=o("not"),HJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),UJo=o("from_pretrained()"),JJo=o(" to load the model weights."),YJo=l(),F(wF.$$.fragment),KJo=l(),mo=a("div"),F(j6.$$.fragment),ZJo=l(),wpe=a("p"),eYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),oYo=l(),Ga=a("p"),rYo=o("The model class to instantiate is selected based on the "),Ape=a("code"),tYo=o("model_type"),aYo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(":"),dYo=l(),Oa=a("ul"),AF=a("li"),xpe=a("strong"),cYo=o("data2vec-audio"),fYo=o(" \u2014 "),UV=a("a"),mYo=o("Data2VecAudioForXVector"),gYo=o(" (Data2VecAudio model)"),hYo=l(),yF=a("li"),$pe=a("strong"),pYo=o("unispeech-sat"),uYo=o(" \u2014 "),JV=a("a"),_Yo=o("UniSpeechSatForXVector"),bYo=o(" (UniSpeechSat model)"),vYo=l(),LF=a("li"),kpe=a("strong"),FYo=o("wav2vec2"),TYo=o(" \u2014 "),YV=a("a"),MYo=o("Wav2Vec2ForXVector"),EYo=o(" (Wav2Vec2 model)"),CYo=l(),xF=a("li"),Spe=a("strong"),wYo=o("wavlm"),AYo=o(" \u2014 "),KV=a("a"),yYo=o("WavLMForXVector"),LYo=o(" (WavLM model)"),xYo=l(),$F=a("p"),$Yo=o("The model is set in evaluation mode by default using "),Rpe=a("code"),kYo=o("model.eval()"),SYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),RYo=o("model.train()"),BYo=l(),F(kF.$$.fragment),NPe=l(),ud=a("h2"),SF=a("a"),Ppe=a("span"),F(D6.$$.fragment),PYo=l(),Ipe=a("span"),IYo=o("AutoModelForMaskedImageModeling"),jPe=l(),Qo=a("div"),F(G6.$$.fragment),qYo=l(),_d=a("p"),NYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ZV=a("a"),jYo=o("from_pretrained()"),DYo=o(" class method or the "),eX=a("a"),GYo=o("from_config()"),OYo=o(` class
method.`),VYo=l(),O6=a("p"),XYo=o("This class cannot be instantiated directly using "),qpe=a("code"),zYo=o("__init__()"),QYo=o(" (throws an error)."),WYo=l(),bt=a("div"),F(V6.$$.fragment),HYo=l(),Npe=a("p"),UYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),JYo=l(),bd=a("p"),YYo=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),KYo=o("not"),ZYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),eKo=o("from_pretrained()"),oKo=o(" to load the model weights."),rKo=l(),F(RF.$$.fragment),tKo=l(),go=a("div"),F(X6.$$.fragment),aKo=l(),Dpe=a("p"),nKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),sKo=l(),Va=a("p"),lKo=o("The model class to instantiate is selected based on the "),Gpe=a("code"),iKo=o("model_type"),dKo=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),cKo=o("pretrained_model_name_or_path"),fKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),mKo=o("pretrained_model_name_or_path"),gKo=o(":"),hKo=l(),vd=a("ul"),BF=a("li"),Xpe=a("strong"),pKo=o("deit"),uKo=o(" \u2014 "),rX=a("a"),_Ko=o("DeiTForMaskedImageModeling"),bKo=o(" (DeiT model)"),vKo=l(),PF=a("li"),zpe=a("strong"),FKo=o("swin"),TKo=o(" \u2014 "),tX=a("a"),MKo=o("SwinForMaskedImageModeling"),EKo=o(" (Swin model)"),CKo=l(),IF=a("li"),Qpe=a("strong"),wKo=o("vit"),AKo=o(" \u2014 "),aX=a("a"),yKo=o("ViTForMaskedImageModeling"),LKo=o(" (ViT model)"),xKo=l(),qF=a("p"),$Ko=o("The model is set in evaluation mode by default using "),Wpe=a("code"),kKo=o("model.eval()"),SKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),RKo=o("model.train()"),BKo=l(),F(NF.$$.fragment),DPe=l(),Fd=a("h2"),jF=a("a"),Upe=a("span"),F(z6.$$.fragment),PKo=l(),Jpe=a("span"),IKo=o("AutoModelForObjectDetection"),GPe=l(),Wo=a("div"),F(Q6.$$.fragment),qKo=l(),Td=a("p"),NKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nX=a("a"),jKo=o("from_pretrained()"),DKo=o(" class method or the "),sX=a("a"),GKo=o("from_config()"),OKo=o(` class
method.`),VKo=l(),W6=a("p"),XKo=o("This class cannot be instantiated directly using "),Ype=a("code"),zKo=o("__init__()"),QKo=o(" (throws an error)."),WKo=l(),vt=a("div"),F(H6.$$.fragment),HKo=l(),Kpe=a("p"),UKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JKo=l(),Md=a("p"),YKo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),KKo=o("not"),ZKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),eZo=o("from_pretrained()"),oZo=o(" to load the model weights."),rZo=l(),F(DF.$$.fragment),tZo=l(),ho=a("div"),F(U6.$$.fragment),aZo=l(),eue=a("p"),nZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sZo=l(),Xa=a("p"),lZo=o("The model class to instantiate is selected based on the "),oue=a("code"),iZo=o("model_type"),dZo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),cZo=o("pretrained_model_name_or_path"),fZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),mZo=o("pretrained_model_name_or_path"),gZo=o(":"),hZo=l(),J6=a("ul"),GF=a("li"),aue=a("strong"),pZo=o("detr"),uZo=o(" \u2014 "),iX=a("a"),_Zo=o("DetrForObjectDetection"),bZo=o(" (DETR model)"),vZo=l(),OF=a("li"),nue=a("strong"),FZo=o("yolos"),TZo=o(" \u2014 "),dX=a("a"),MZo=o("YolosForObjectDetection"),EZo=o(" (YOLOS model)"),CZo=l(),VF=a("p"),wZo=o("The model is set in evaluation mode by default using "),sue=a("code"),AZo=o("model.eval()"),yZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),LZo=o("model.train()"),xZo=l(),F(XF.$$.fragment),OPe=l(),Ed=a("h2"),zF=a("a"),iue=a("span"),F(Y6.$$.fragment),$Zo=l(),due=a("span"),kZo=o("AutoModelForImageSegmentation"),VPe=l(),Ho=a("div"),F(K6.$$.fragment),SZo=l(),Cd=a("p"),RZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cX=a("a"),BZo=o("from_pretrained()"),PZo=o(" class method or the "),fX=a("a"),IZo=o("from_config()"),qZo=o(` class
method.`),NZo=l(),Z6=a("p"),jZo=o("This class cannot be instantiated directly using "),cue=a("code"),DZo=o("__init__()"),GZo=o(" (throws an error)."),OZo=l(),Ft=a("div"),F(ey.$$.fragment),VZo=l(),fue=a("p"),XZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zZo=l(),wd=a("p"),QZo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),WZo=o("not"),HZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),UZo=o("from_pretrained()"),JZo=o(" to load the model weights."),YZo=l(),F(QF.$$.fragment),KZo=l(),po=a("div"),F(oy.$$.fragment),ZZo=l(),gue=a("p"),eer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),oer=l(),za=a("p"),rer=o("The model class to instantiate is selected based on the "),hue=a("code"),ter=o("model_type"),aer=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),ner=o("pretrained_model_name_or_path"),ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(":"),der=l(),_ue=a("ul"),WF=a("li"),bue=a("strong"),cer=o("detr"),fer=o(" \u2014 "),gX=a("a"),mer=o("DetrForSegmentation"),ger=o(" (DETR model)"),her=l(),HF=a("p"),per=o("The model is set in evaluation mode by default using "),vue=a("code"),uer=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),ber=o("model.train()"),ver=l(),F(UF.$$.fragment),XPe=l(),Ad=a("h2"),JF=a("a"),Tue=a("span"),F(ry.$$.fragment),Fer=l(),Mue=a("span"),Ter=o("AutoModelForSemanticSegmentation"),zPe=l(),Uo=a("div"),F(ty.$$.fragment),Mer=l(),yd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hX=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),pX=a("a"),Aer=o("from_config()"),yer=o(` class
method.`),Ler=l(),ay=a("p"),xer=o("This class cannot be instantiated directly using "),Eue=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),Tt=a("div"),F(ny.$$.fragment),Rer=l(),Cue=a("p"),Ber=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Per=l(),Ld=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),qer=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(YF.$$.fragment),Oer=l(),uo=a("div"),F(sy.$$.fragment),Ver=l(),Aue=a("p"),Xer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zer=l(),Qa=a("p"),Qer=o("The model class to instantiate is selected based on the "),yue=a("code"),Wer=o("model_type"),Her=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),Wa=a("ul"),KF=a("li"),$ue=a("strong"),eor=o("beit"),oor=o(" \u2014 "),_X=a("a"),ror=o("BeitForSemanticSegmentation"),tor=o(" (BEiT model)"),aor=l(),ZF=a("li"),kue=a("strong"),nor=o("data2vec-vision"),sor=o(" \u2014 "),bX=a("a"),lor=o("Data2VecVisionForSemanticSegmentation"),ior=o(" (Data2VecVision model)"),dor=l(),e0=a("li"),Sue=a("strong"),cor=o("dpt"),mor=o(" \u2014 "),vX=a("a"),gor=o("DPTForSemanticSegmentation"),hor=o(" (DPT model)"),por=l(),o0=a("li"),Rue=a("strong"),uor=o("segformer"),_or=o(" \u2014 "),FX=a("a"),bor=o("SegformerForSemanticSegmentation"),vor=o(" (SegFormer model)"),For=l(),r0=a("p"),Tor=o("The model is set in evaluation mode by default using "),Bue=a("code"),Mor=o("model.eval()"),Eor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),Cor=o("model.train()"),wor=l(),F(t0.$$.fragment),QPe=l(),xd=a("h2"),a0=a("a"),Iue=a("span"),F(ly.$$.fragment),Aor=l(),que=a("span"),yor=o("AutoModelForInstanceSegmentation"),WPe=l(),Jo=a("div"),F(iy.$$.fragment),Lor=l(),$d=a("p"),xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),TX=a("a"),$or=o("from_pretrained()"),kor=o(" class method or the "),MX=a("a"),Sor=o("from_config()"),Ror=o(` class
method.`),Bor=l(),dy=a("p"),Por=o("This class cannot be instantiated directly using "),Nue=a("code"),Ior=o("__init__()"),qor=o(" (throws an error)."),Nor=l(),Mt=a("div"),F(cy.$$.fragment),jor=l(),jue=a("p"),Dor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Gor=l(),kd=a("p"),Oor=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),Vor=o("not"),Xor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),zor=o("from_pretrained()"),Qor=o(" to load the model weights."),Wor=l(),F(n0.$$.fragment),Hor=l(),_o=a("div"),F(fy.$$.fragment),Uor=l(),Gue=a("p"),Jor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Yor=l(),Ha=a("p"),Kor=o("The model class to instantiate is selected based on the "),Oue=a("code"),Zor=o("model_type"),err=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),trr=o("pretrained_model_name_or_path"),arr=o(":"),nrr=l(),zue=a("ul"),s0=a("li"),Que=a("strong"),srr=o("maskformer"),lrr=o(" \u2014 "),CX=a("a"),irr=o("MaskFormerForInstanceSegmentation"),drr=o(" (MaskFormer model)"),crr=l(),l0=a("p"),frr=o("The model is set in evaluation mode by default using "),Wue=a("code"),mrr=o("model.eval()"),grr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),hrr=o("model.train()"),prr=l(),F(i0.$$.fragment),HPe=l(),Sd=a("h2"),d0=a("a"),Uue=a("span"),F(my.$$.fragment),urr=l(),Jue=a("span"),_rr=o("TFAutoModel"),UPe=l(),Yo=a("div"),F(gy.$$.fragment),brr=l(),Rd=a("p"),vrr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wX=a("a"),Frr=o("from_pretrained()"),Trr=o(" class method or the "),AX=a("a"),Mrr=o("from_config()"),Err=o(` class
method.`),Crr=l(),hy=a("p"),wrr=o("This class cannot be instantiated directly using "),Yue=a("code"),Arr=o("__init__()"),yrr=o(" (throws an error)."),Lrr=l(),Et=a("div"),F(py.$$.fragment),xrr=l(),Kue=a("p"),$rr=o("Instantiates one of the base model classes of the library from a configuration."),krr=l(),Bd=a("p"),Srr=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),Rrr=o("not"),Brr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),Prr=o("from_pretrained()"),Irr=o(" to load the model weights."),qrr=l(),F(c0.$$.fragment),Nrr=l(),Cr=a("div"),F(uy.$$.fragment),jrr=l(),e_e=a("p"),Drr=o("Instantiate one of the base model classes of the library from a pretrained model."),Grr=l(),Ua=a("p"),Orr=o("The model class to instantiate is selected based on the "),o_e=a("code"),Vrr=o("model_type"),Xrr=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),zrr=o("pretrained_model_name_or_path"),Qrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),Wrr=o("pretrained_model_name_or_path"),Hrr=o(":"),Urr=l(),N=a("ul"),f0=a("li"),a_e=a("strong"),Jrr=o("albert"),Yrr=o(" \u2014 "),LX=a("a"),Krr=o("TFAlbertModel"),Zrr=o(" (ALBERT model)"),etr=l(),m0=a("li"),n_e=a("strong"),otr=o("bart"),rtr=o(" \u2014 "),xX=a("a"),ttr=o("TFBartModel"),atr=o(" (BART model)"),ntr=l(),g0=a("li"),s_e=a("strong"),str=o("bert"),ltr=o(" \u2014 "),$X=a("a"),itr=o("TFBertModel"),dtr=o(" (BERT model)"),ctr=l(),h0=a("li"),l_e=a("strong"),ftr=o("blenderbot"),mtr=o(" \u2014 "),kX=a("a"),gtr=o("TFBlenderbotModel"),htr=o(" (Blenderbot model)"),ptr=l(),p0=a("li"),i_e=a("strong"),utr=o("blenderbot-small"),_tr=o(" \u2014 "),SX=a("a"),btr=o("TFBlenderbotSmallModel"),vtr=o(" (BlenderbotSmall model)"),Ftr=l(),u0=a("li"),d_e=a("strong"),Ttr=o("camembert"),Mtr=o(" \u2014 "),RX=a("a"),Etr=o("TFCamembertModel"),Ctr=o(" (CamemBERT model)"),wtr=l(),_0=a("li"),c_e=a("strong"),Atr=o("clip"),ytr=o(" \u2014 "),BX=a("a"),Ltr=o("TFCLIPModel"),xtr=o(" (CLIP model)"),$tr=l(),b0=a("li"),f_e=a("strong"),ktr=o("convbert"),Str=o(" \u2014 "),PX=a("a"),Rtr=o("TFConvBertModel"),Btr=o(" (ConvBERT model)"),Ptr=l(),v0=a("li"),m_e=a("strong"),Itr=o("convnext"),qtr=o(" \u2014 "),IX=a("a"),Ntr=o("TFConvNextModel"),jtr=o(" (ConvNext model)"),Dtr=l(),F0=a("li"),g_e=a("strong"),Gtr=o("ctrl"),Otr=o(" \u2014 "),qX=a("a"),Vtr=o("TFCTRLModel"),Xtr=o(" (CTRL model)"),ztr=l(),T0=a("li"),h_e=a("strong"),Qtr=o("data2vec-vision"),Wtr=o(" \u2014 "),NX=a("a"),Htr=o("TFData2VecVisionModel"),Utr=o(" (Data2VecVision model)"),Jtr=l(),M0=a("li"),p_e=a("strong"),Ytr=o("deberta"),Ktr=o(" \u2014 "),jX=a("a"),Ztr=o("TFDebertaModel"),ear=o(" (DeBERTa model)"),oar=l(),E0=a("li"),u_e=a("strong"),rar=o("deberta-v2"),tar=o(" \u2014 "),DX=a("a"),aar=o("TFDebertaV2Model"),nar=o(" (DeBERTa-v2 model)"),sar=l(),C0=a("li"),__e=a("strong"),lar=o("distilbert"),iar=o(" \u2014 "),GX=a("a"),dar=o("TFDistilBertModel"),car=o(" (DistilBERT model)"),far=l(),w0=a("li"),b_e=a("strong"),mar=o("dpr"),gar=o(" \u2014 "),OX=a("a"),har=o("TFDPRQuestionEncoder"),par=o(" (DPR model)"),uar=l(),A0=a("li"),v_e=a("strong"),_ar=o("electra"),bar=o(" \u2014 "),VX=a("a"),Far=o("TFElectraModel"),Tar=o(" (ELECTRA model)"),Mar=l(),y0=a("li"),F_e=a("strong"),Ear=o("flaubert"),Car=o(" \u2014 "),XX=a("a"),war=o("TFFlaubertModel"),Aar=o(" (FlauBERT model)"),yar=l(),ks=a("li"),T_e=a("strong"),Lar=o("funnel"),xar=o(" \u2014 "),zX=a("a"),$ar=o("TFFunnelModel"),kar=o(" or "),QX=a("a"),Sar=o("TFFunnelBaseModel"),Rar=o(" (Funnel Transformer model)"),Bar=l(),L0=a("li"),M_e=a("strong"),Par=o("gpt2"),Iar=o(" \u2014 "),WX=a("a"),qar=o("TFGPT2Model"),Nar=o(" (OpenAI GPT-2 model)"),jar=l(),x0=a("li"),E_e=a("strong"),Dar=o("gptj"),Gar=o(" \u2014 "),HX=a("a"),Oar=o("TFGPTJModel"),Var=o(" (GPT-J model)"),Xar=l(),$0=a("li"),C_e=a("strong"),zar=o("hubert"),Qar=o(" \u2014 "),UX=a("a"),War=o("TFHubertModel"),Har=o(" (Hubert model)"),Uar=l(),k0=a("li"),w_e=a("strong"),Jar=o("layoutlm"),Yar=o(" \u2014 "),JX=a("a"),Kar=o("TFLayoutLMModel"),Zar=o(" (LayoutLM model)"),enr=l(),S0=a("li"),A_e=a("strong"),onr=o("led"),rnr=o(" \u2014 "),YX=a("a"),tnr=o("TFLEDModel"),anr=o(" (LED model)"),nnr=l(),R0=a("li"),y_e=a("strong"),snr=o("longformer"),lnr=o(" \u2014 "),KX=a("a"),inr=o("TFLongformerModel"),dnr=o(" (Longformer model)"),cnr=l(),B0=a("li"),L_e=a("strong"),fnr=o("lxmert"),mnr=o(" \u2014 "),ZX=a("a"),gnr=o("TFLxmertModel"),hnr=o(" (LXMERT model)"),pnr=l(),P0=a("li"),x_e=a("strong"),unr=o("marian"),_nr=o(" \u2014 "),ez=a("a"),bnr=o("TFMarianModel"),vnr=o(" (Marian model)"),Fnr=l(),I0=a("li"),$_e=a("strong"),Tnr=o("mbart"),Mnr=o(" \u2014 "),oz=a("a"),Enr=o("TFMBartModel"),Cnr=o(" (mBART model)"),wnr=l(),q0=a("li"),k_e=a("strong"),Anr=o("mobilebert"),ynr=o(" \u2014 "),rz=a("a"),Lnr=o("TFMobileBertModel"),xnr=o(" (MobileBERT model)"),$nr=l(),N0=a("li"),S_e=a("strong"),knr=o("mpnet"),Snr=o(" \u2014 "),tz=a("a"),Rnr=o("TFMPNetModel"),Bnr=o(" (MPNet model)"),Pnr=l(),j0=a("li"),R_e=a("strong"),Inr=o("mt5"),qnr=o(" \u2014 "),az=a("a"),Nnr=o("TFMT5Model"),jnr=o(" (mT5 model)"),Dnr=l(),D0=a("li"),B_e=a("strong"),Gnr=o("openai-gpt"),Onr=o(" \u2014 "),nz=a("a"),Vnr=o("TFOpenAIGPTModel"),Xnr=o(" (OpenAI GPT model)"),znr=l(),G0=a("li"),P_e=a("strong"),Qnr=o("opt"),Wnr=o(" \u2014 "),sz=a("a"),Hnr=o("TFOPTModel"),Unr=o(" (OPT model)"),Jnr=l(),O0=a("li"),I_e=a("strong"),Ynr=o("pegasus"),Knr=o(" \u2014 "),lz=a("a"),Znr=o("TFPegasusModel"),esr=o(" (Pegasus model)"),osr=l(),V0=a("li"),q_e=a("strong"),rsr=o("rembert"),tsr=o(" \u2014 "),iz=a("a"),asr=o("TFRemBertModel"),nsr=o(" (RemBERT model)"),ssr=l(),X0=a("li"),N_e=a("strong"),lsr=o("roberta"),isr=o(" \u2014 "),dz=a("a"),dsr=o("TFRobertaModel"),csr=o(" (RoBERTa model)"),fsr=l(),z0=a("li"),j_e=a("strong"),msr=o("roformer"),gsr=o(" \u2014 "),cz=a("a"),hsr=o("TFRoFormerModel"),psr=o(" (RoFormer model)"),usr=l(),Q0=a("li"),D_e=a("strong"),_sr=o("speech_to_text"),bsr=o(" \u2014 "),fz=a("a"),vsr=o("TFSpeech2TextModel"),Fsr=o(" (Speech2Text model)"),Tsr=l(),W0=a("li"),G_e=a("strong"),Msr=o("t5"),Esr=o(" \u2014 "),mz=a("a"),Csr=o("TFT5Model"),wsr=o(" (T5 model)"),Asr=l(),H0=a("li"),O_e=a("strong"),ysr=o("tapas"),Lsr=o(" \u2014 "),gz=a("a"),xsr=o("TFTapasModel"),$sr=o(" (TAPAS model)"),ksr=l(),U0=a("li"),V_e=a("strong"),Ssr=o("transfo-xl"),Rsr=o(" \u2014 "),hz=a("a"),Bsr=o("TFTransfoXLModel"),Psr=o(" (Transformer-XL model)"),Isr=l(),J0=a("li"),X_e=a("strong"),qsr=o("vit"),Nsr=o(" \u2014 "),pz=a("a"),jsr=o("TFViTModel"),Dsr=o(" (ViT model)"),Gsr=l(),Y0=a("li"),z_e=a("strong"),Osr=o("vit_mae"),Vsr=o(" \u2014 "),uz=a("a"),Xsr=o("TFViTMAEModel"),zsr=o(" (ViTMAE model)"),Qsr=l(),K0=a("li"),Q_e=a("strong"),Wsr=o("wav2vec2"),Hsr=o(" \u2014 "),_z=a("a"),Usr=o("TFWav2Vec2Model"),Jsr=o(" (Wav2Vec2 model)"),Ysr=l(),Z0=a("li"),W_e=a("strong"),Ksr=o("xlm"),Zsr=o(" \u2014 "),bz=a("a"),elr=o("TFXLMModel"),olr=o(" (XLM model)"),rlr=l(),eT=a("li"),H_e=a("strong"),tlr=o("xlm-roberta"),alr=o(" \u2014 "),vz=a("a"),nlr=o("TFXLMRobertaModel"),slr=o(" (XLM-RoBERTa model)"),llr=l(),oT=a("li"),U_e=a("strong"),ilr=o("xlnet"),dlr=o(" \u2014 "),Fz=a("a"),clr=o("TFXLNetModel"),flr=o(" (XLNet model)"),mlr=l(),F(rT.$$.fragment),JPe=l(),Pd=a("h2"),tT=a("a"),J_e=a("span"),F(_y.$$.fragment),glr=l(),Y_e=a("span"),hlr=o("TFAutoModelForPreTraining"),YPe=l(),Ko=a("div"),F(by.$$.fragment),plr=l(),Id=a("p"),ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tz=a("a"),_lr=o("from_pretrained()"),blr=o(" class method or the "),Mz=a("a"),vlr=o("from_config()"),Flr=o(` class
method.`),Tlr=l(),vy=a("p"),Mlr=o("This class cannot be instantiated directly using "),K_e=a("code"),Elr=o("__init__()"),Clr=o(" (throws an error)."),wlr=l(),Ct=a("div"),F(Fy.$$.fragment),Alr=l(),Z_e=a("p"),ylr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Llr=l(),qd=a("p"),xlr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),$lr=o("not"),klr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),Slr=o("from_pretrained()"),Rlr=o(" to load the model weights."),Blr=l(),F(aT.$$.fragment),Plr=l(),wr=a("div"),F(Ty.$$.fragment),Ilr=l(),o1e=a("p"),qlr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Nlr=l(),Ja=a("p"),jlr=o("The model class to instantiate is selected based on the "),r1e=a("code"),Dlr=o("model_type"),Glr=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),Olr=o("pretrained_model_name_or_path"),Vlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),Xlr=o("pretrained_model_name_or_path"),zlr=o(":"),Qlr=l(),ne=a("ul"),nT=a("li"),n1e=a("strong"),Wlr=o("albert"),Hlr=o(" \u2014 "),Cz=a("a"),Ulr=o("TFAlbertForPreTraining"),Jlr=o(" (ALBERT model)"),Ylr=l(),sT=a("li"),s1e=a("strong"),Klr=o("bart"),Zlr=o(" \u2014 "),wz=a("a"),eir=o("TFBartForConditionalGeneration"),oir=o(" (BART model)"),rir=l(),lT=a("li"),l1e=a("strong"),tir=o("bert"),air=o(" \u2014 "),Az=a("a"),nir=o("TFBertForPreTraining"),sir=o(" (BERT model)"),lir=l(),iT=a("li"),i1e=a("strong"),iir=o("camembert"),dir=o(" \u2014 "),yz=a("a"),cir=o("TFCamembertForMaskedLM"),fir=o(" (CamemBERT model)"),mir=l(),dT=a("li"),d1e=a("strong"),gir=o("ctrl"),hir=o(" \u2014 "),Lz=a("a"),pir=o("TFCTRLLMHeadModel"),uir=o(" (CTRL model)"),_ir=l(),cT=a("li"),c1e=a("strong"),bir=o("distilbert"),vir=o(" \u2014 "),xz=a("a"),Fir=o("TFDistilBertForMaskedLM"),Tir=o(" (DistilBERT model)"),Mir=l(),fT=a("li"),f1e=a("strong"),Eir=o("electra"),Cir=o(" \u2014 "),$z=a("a"),wir=o("TFElectraForPreTraining"),Air=o(" (ELECTRA model)"),yir=l(),mT=a("li"),m1e=a("strong"),Lir=o("flaubert"),xir=o(" \u2014 "),kz=a("a"),$ir=o("TFFlaubertWithLMHeadModel"),kir=o(" (FlauBERT model)"),Sir=l(),gT=a("li"),g1e=a("strong"),Rir=o("funnel"),Bir=o(" \u2014 "),Sz=a("a"),Pir=o("TFFunnelForPreTraining"),Iir=o(" (Funnel Transformer model)"),qir=l(),hT=a("li"),h1e=a("strong"),Nir=o("gpt2"),jir=o(" \u2014 "),Rz=a("a"),Dir=o("TFGPT2LMHeadModel"),Gir=o(" (OpenAI GPT-2 model)"),Oir=l(),pT=a("li"),p1e=a("strong"),Vir=o("layoutlm"),Xir=o(" \u2014 "),Bz=a("a"),zir=o("TFLayoutLMForMaskedLM"),Qir=o(" (LayoutLM model)"),Wir=l(),uT=a("li"),u1e=a("strong"),Hir=o("lxmert"),Uir=o(" \u2014 "),Pz=a("a"),Jir=o("TFLxmertForPreTraining"),Yir=o(" (LXMERT model)"),Kir=l(),_T=a("li"),_1e=a("strong"),Zir=o("mobilebert"),edr=o(" \u2014 "),Iz=a("a"),odr=o("TFMobileBertForPreTraining"),rdr=o(" (MobileBERT model)"),tdr=l(),bT=a("li"),b1e=a("strong"),adr=o("mpnet"),ndr=o(" \u2014 "),qz=a("a"),sdr=o("TFMPNetForMaskedLM"),ldr=o(" (MPNet model)"),idr=l(),vT=a("li"),v1e=a("strong"),ddr=o("openai-gpt"),cdr=o(" \u2014 "),Nz=a("a"),fdr=o("TFOpenAIGPTLMHeadModel"),mdr=o(" (OpenAI GPT model)"),gdr=l(),FT=a("li"),F1e=a("strong"),hdr=o("roberta"),pdr=o(" \u2014 "),jz=a("a"),udr=o("TFRobertaForMaskedLM"),_dr=o(" (RoBERTa model)"),bdr=l(),TT=a("li"),T1e=a("strong"),vdr=o("t5"),Fdr=o(" \u2014 "),Dz=a("a"),Tdr=o("TFT5ForConditionalGeneration"),Mdr=o(" (T5 model)"),Edr=l(),MT=a("li"),M1e=a("strong"),Cdr=o("tapas"),wdr=o(" \u2014 "),Gz=a("a"),Adr=o("TFTapasForMaskedLM"),ydr=o(" (TAPAS model)"),Ldr=l(),ET=a("li"),E1e=a("strong"),xdr=o("transfo-xl"),$dr=o(" \u2014 "),Oz=a("a"),kdr=o("TFTransfoXLLMHeadModel"),Sdr=o(" (Transformer-XL model)"),Rdr=l(),CT=a("li"),C1e=a("strong"),Bdr=o("vit_mae"),Pdr=o(" \u2014 "),Vz=a("a"),Idr=o("TFViTMAEForPreTraining"),qdr=o(" (ViTMAE model)"),Ndr=l(),wT=a("li"),w1e=a("strong"),jdr=o("xlm"),Ddr=o(" \u2014 "),Xz=a("a"),Gdr=o("TFXLMWithLMHeadModel"),Odr=o(" (XLM model)"),Vdr=l(),AT=a("li"),A1e=a("strong"),Xdr=o("xlm-roberta"),zdr=o(" \u2014 "),zz=a("a"),Qdr=o("TFXLMRobertaForMaskedLM"),Wdr=o(" (XLM-RoBERTa model)"),Hdr=l(),yT=a("li"),y1e=a("strong"),Udr=o("xlnet"),Jdr=o(" \u2014 "),Qz=a("a"),Ydr=o("TFXLNetLMHeadModel"),Kdr=o(" (XLNet model)"),Zdr=l(),F(LT.$$.fragment),KPe=l(),Nd=a("h2"),xT=a("a"),L1e=a("span"),F(My.$$.fragment),ecr=l(),x1e=a("span"),ocr=o("TFAutoModelForCausalLM"),ZPe=l(),Zo=a("div"),F(Ey.$$.fragment),rcr=l(),jd=a("p"),tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wz=a("a"),acr=o("from_pretrained()"),ncr=o(" class method or the "),Hz=a("a"),scr=o("from_config()"),lcr=o(` class
method.`),icr=l(),Cy=a("p"),dcr=o("This class cannot be instantiated directly using "),$1e=a("code"),ccr=o("__init__()"),fcr=o(" (throws an error)."),mcr=l(),wt=a("div"),F(wy.$$.fragment),gcr=l(),k1e=a("p"),hcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pcr=l(),Dd=a("p"),ucr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),_cr=o("not"),bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),vcr=o("from_pretrained()"),Fcr=o(" to load the model weights."),Tcr=l(),F($T.$$.fragment),Mcr=l(),Ar=a("div"),F(Ay.$$.fragment),Ecr=l(),R1e=a("p"),Ccr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wcr=l(),Ya=a("p"),Acr=o("The model class to instantiate is selected based on the "),B1e=a("code"),ycr=o("model_type"),Lcr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),xcr=o("pretrained_model_name_or_path"),$cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),kcr=o("pretrained_model_name_or_path"),Scr=o(":"),Rcr=l(),Te=a("ul"),kT=a("li"),q1e=a("strong"),Bcr=o("bert"),Pcr=o(" \u2014 "),Jz=a("a"),Icr=o("TFBertLMHeadModel"),qcr=o(" (BERT model)"),Ncr=l(),ST=a("li"),N1e=a("strong"),jcr=o("camembert"),Dcr=o(" \u2014 "),Yz=a("a"),Gcr=o("TFCamembertForCausalLM"),Ocr=o(" (CamemBERT model)"),Vcr=l(),RT=a("li"),j1e=a("strong"),Xcr=o("ctrl"),zcr=o(" \u2014 "),Kz=a("a"),Qcr=o("TFCTRLLMHeadModel"),Wcr=o(" (CTRL model)"),Hcr=l(),BT=a("li"),D1e=a("strong"),Ucr=o("gpt2"),Jcr=o(" \u2014 "),Zz=a("a"),Ycr=o("TFGPT2LMHeadModel"),Kcr=o(" (OpenAI GPT-2 model)"),Zcr=l(),PT=a("li"),G1e=a("strong"),efr=o("gptj"),ofr=o(" \u2014 "),eQ=a("a"),rfr=o("TFGPTJForCausalLM"),tfr=o(" (GPT-J model)"),afr=l(),IT=a("li"),O1e=a("strong"),nfr=o("openai-gpt"),sfr=o(" \u2014 "),oQ=a("a"),lfr=o("TFOpenAIGPTLMHeadModel"),ifr=o(" (OpenAI GPT model)"),dfr=l(),qT=a("li"),V1e=a("strong"),cfr=o("rembert"),ffr=o(" \u2014 "),rQ=a("a"),mfr=o("TFRemBertForCausalLM"),gfr=o(" (RemBERT model)"),hfr=l(),NT=a("li"),X1e=a("strong"),pfr=o("roberta"),ufr=o(" \u2014 "),tQ=a("a"),_fr=o("TFRobertaForCausalLM"),bfr=o(" (RoBERTa model)"),vfr=l(),jT=a("li"),z1e=a("strong"),Ffr=o("roformer"),Tfr=o(" \u2014 "),aQ=a("a"),Mfr=o("TFRoFormerForCausalLM"),Efr=o(" (RoFormer model)"),Cfr=l(),DT=a("li"),Q1e=a("strong"),wfr=o("transfo-xl"),Afr=o(" \u2014 "),nQ=a("a"),yfr=o("TFTransfoXLLMHeadModel"),Lfr=o(" (Transformer-XL model)"),xfr=l(),GT=a("li"),W1e=a("strong"),$fr=o("xlm"),kfr=o(" \u2014 "),sQ=a("a"),Sfr=o("TFXLMWithLMHeadModel"),Rfr=o(" (XLM model)"),Bfr=l(),OT=a("li"),H1e=a("strong"),Pfr=o("xlnet"),Ifr=o(" \u2014 "),lQ=a("a"),qfr=o("TFXLNetLMHeadModel"),Nfr=o(" (XLNet model)"),jfr=l(),F(VT.$$.fragment),eIe=l(),Gd=a("h2"),XT=a("a"),U1e=a("span"),F(yy.$$.fragment),Dfr=l(),J1e=a("span"),Gfr=o("TFAutoModelForImageClassification"),oIe=l(),er=a("div"),F(Ly.$$.fragment),Ofr=l(),Od=a("p"),Vfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iQ=a("a"),Xfr=o("from_pretrained()"),zfr=o(" class method or the "),dQ=a("a"),Qfr=o("from_config()"),Wfr=o(` class
method.`),Hfr=l(),xy=a("p"),Ufr=o("This class cannot be instantiated directly using "),Y1e=a("code"),Jfr=o("__init__()"),Yfr=o(" (throws an error)."),Kfr=l(),At=a("div"),F($y.$$.fragment),Zfr=l(),K1e=a("p"),emr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),omr=l(),Vd=a("p"),rmr=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),tmr=o("not"),amr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),nmr=o("from_pretrained()"),smr=o(" to load the model weights."),lmr=l(),F(zT.$$.fragment),imr=l(),yr=a("div"),F(ky.$$.fragment),dmr=l(),e8e=a("p"),cmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fmr=l(),Ka=a("p"),mmr=o("The model class to instantiate is selected based on the "),o8e=a("code"),gmr=o("model_type"),hmr=o(` property of the config object (either
passed as an argument or loaded from `),r8e=a("code"),pmr=o("pretrained_model_name_or_path"),umr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=a("code"),_mr=o("pretrained_model_name_or_path"),bmr=o(":"),vmr=l(),Xd=a("ul"),QT=a("li"),a8e=a("strong"),Fmr=o("convnext"),Tmr=o(" \u2014 "),fQ=a("a"),Mmr=o("TFConvNextForImageClassification"),Emr=o(" (ConvNext model)"),Cmr=l(),WT=a("li"),n8e=a("strong"),wmr=o("data2vec-vision"),Amr=o(" \u2014 "),mQ=a("a"),ymr=o("TFData2VecVisionForImageClassification"),Lmr=o(" (Data2VecVision model)"),xmr=l(),HT=a("li"),s8e=a("strong"),$mr=o("vit"),kmr=o(" \u2014 "),gQ=a("a"),Smr=o("TFViTForImageClassification"),Rmr=o(" (ViT model)"),Bmr=l(),F(UT.$$.fragment),rIe=l(),zd=a("h2"),JT=a("a"),l8e=a("span"),F(Sy.$$.fragment),Pmr=l(),i8e=a("span"),Imr=o("TFAutoModelForMaskedLM"),tIe=l(),or=a("div"),F(Ry.$$.fragment),qmr=l(),Qd=a("p"),Nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hQ=a("a"),jmr=o("from_pretrained()"),Dmr=o(" class method or the "),pQ=a("a"),Gmr=o("from_config()"),Omr=o(` class
method.`),Vmr=l(),By=a("p"),Xmr=o("This class cannot be instantiated directly using "),d8e=a("code"),zmr=o("__init__()"),Qmr=o(" (throws an error)."),Wmr=l(),yt=a("div"),F(Py.$$.fragment),Hmr=l(),c8e=a("p"),Umr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jmr=l(),Wd=a("p"),Ymr=o(`Note:
Loading a model from its configuration file does `),f8e=a("strong"),Kmr=o("not"),Zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),egr=o("from_pretrained()"),ogr=o(" to load the model weights."),rgr=l(),F(YT.$$.fragment),tgr=l(),Lr=a("div"),F(Iy.$$.fragment),agr=l(),m8e=a("p"),ngr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sgr=l(),Za=a("p"),lgr=o("The model class to instantiate is selected based on the "),g8e=a("code"),igr=o("model_type"),dgr=o(` property of the config object (either
passed as an argument or loaded from `),h8e=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(":"),hgr=l(),ie=a("ul"),KT=a("li"),u8e=a("strong"),pgr=o("albert"),ugr=o(" \u2014 "),_Q=a("a"),_gr=o("TFAlbertForMaskedLM"),bgr=o(" (ALBERT model)"),vgr=l(),ZT=a("li"),_8e=a("strong"),Fgr=o("bert"),Tgr=o(" \u2014 "),bQ=a("a"),Mgr=o("TFBertForMaskedLM"),Egr=o(" (BERT model)"),Cgr=l(),e7=a("li"),b8e=a("strong"),wgr=o("camembert"),Agr=o(" \u2014 "),vQ=a("a"),ygr=o("TFCamembertForMaskedLM"),Lgr=o(" (CamemBERT model)"),xgr=l(),o7=a("li"),v8e=a("strong"),$gr=o("convbert"),kgr=o(" \u2014 "),FQ=a("a"),Sgr=o("TFConvBertForMaskedLM"),Rgr=o(" (ConvBERT model)"),Bgr=l(),r7=a("li"),F8e=a("strong"),Pgr=o("deberta"),Igr=o(" \u2014 "),TQ=a("a"),qgr=o("TFDebertaForMaskedLM"),Ngr=o(" (DeBERTa model)"),jgr=l(),t7=a("li"),T8e=a("strong"),Dgr=o("deberta-v2"),Ggr=o(" \u2014 "),MQ=a("a"),Ogr=o("TFDebertaV2ForMaskedLM"),Vgr=o(" (DeBERTa-v2 model)"),Xgr=l(),a7=a("li"),M8e=a("strong"),zgr=o("distilbert"),Qgr=o(" \u2014 "),EQ=a("a"),Wgr=o("TFDistilBertForMaskedLM"),Hgr=o(" (DistilBERT model)"),Ugr=l(),n7=a("li"),E8e=a("strong"),Jgr=o("electra"),Ygr=o(" \u2014 "),CQ=a("a"),Kgr=o("TFElectraForMaskedLM"),Zgr=o(" (ELECTRA model)"),ehr=l(),s7=a("li"),C8e=a("strong"),ohr=o("flaubert"),rhr=o(" \u2014 "),wQ=a("a"),thr=o("TFFlaubertWithLMHeadModel"),ahr=o(" (FlauBERT model)"),nhr=l(),l7=a("li"),w8e=a("strong"),shr=o("funnel"),lhr=o(" \u2014 "),AQ=a("a"),ihr=o("TFFunnelForMaskedLM"),dhr=o(" (Funnel Transformer model)"),chr=l(),i7=a("li"),A8e=a("strong"),fhr=o("layoutlm"),mhr=o(" \u2014 "),yQ=a("a"),ghr=o("TFLayoutLMForMaskedLM"),hhr=o(" (LayoutLM model)"),phr=l(),d7=a("li"),y8e=a("strong"),uhr=o("longformer"),_hr=o(" \u2014 "),LQ=a("a"),bhr=o("TFLongformerForMaskedLM"),vhr=o(" (Longformer model)"),Fhr=l(),c7=a("li"),L8e=a("strong"),Thr=o("mobilebert"),Mhr=o(" \u2014 "),xQ=a("a"),Ehr=o("TFMobileBertForMaskedLM"),Chr=o(" (MobileBERT model)"),whr=l(),f7=a("li"),x8e=a("strong"),Ahr=o("mpnet"),yhr=o(" \u2014 "),$Q=a("a"),Lhr=o("TFMPNetForMaskedLM"),xhr=o(" (MPNet model)"),$hr=l(),m7=a("li"),$8e=a("strong"),khr=o("rembert"),Shr=o(" \u2014 "),kQ=a("a"),Rhr=o("TFRemBertForMaskedLM"),Bhr=o(" (RemBERT model)"),Phr=l(),g7=a("li"),k8e=a("strong"),Ihr=o("roberta"),qhr=o(" \u2014 "),SQ=a("a"),Nhr=o("TFRobertaForMaskedLM"),jhr=o(" (RoBERTa model)"),Dhr=l(),h7=a("li"),S8e=a("strong"),Ghr=o("roformer"),Ohr=o(" \u2014 "),RQ=a("a"),Vhr=o("TFRoFormerForMaskedLM"),Xhr=o(" (RoFormer model)"),zhr=l(),p7=a("li"),R8e=a("strong"),Qhr=o("tapas"),Whr=o(" \u2014 "),BQ=a("a"),Hhr=o("TFTapasForMaskedLM"),Uhr=o(" (TAPAS model)"),Jhr=l(),u7=a("li"),B8e=a("strong"),Yhr=o("xlm"),Khr=o(" \u2014 "),PQ=a("a"),Zhr=o("TFXLMWithLMHeadModel"),epr=o(" (XLM model)"),opr=l(),_7=a("li"),P8e=a("strong"),rpr=o("xlm-roberta"),tpr=o(" \u2014 "),IQ=a("a"),apr=o("TFXLMRobertaForMaskedLM"),npr=o(" (XLM-RoBERTa model)"),spr=l(),F(b7.$$.fragment),aIe=l(),Hd=a("h2"),v7=a("a"),I8e=a("span"),F(qy.$$.fragment),lpr=l(),q8e=a("span"),ipr=o("TFAutoModelForSeq2SeqLM"),nIe=l(),rr=a("div"),F(Ny.$$.fragment),dpr=l(),Ud=a("p"),cpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qQ=a("a"),fpr=o("from_pretrained()"),mpr=o(" class method or the "),NQ=a("a"),gpr=o("from_config()"),hpr=o(` class
method.`),ppr=l(),jy=a("p"),upr=o("This class cannot be instantiated directly using "),N8e=a("code"),_pr=o("__init__()"),bpr=o(" (throws an error)."),vpr=l(),Lt=a("div"),F(Dy.$$.fragment),Fpr=l(),j8e=a("p"),Tpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Mpr=l(),Jd=a("p"),Epr=o(`Note:
Loading a model from its configuration file does `),D8e=a("strong"),Cpr=o("not"),wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),Apr=o("from_pretrained()"),ypr=o(" to load the model weights."),Lpr=l(),F(F7.$$.fragment),xpr=l(),xr=a("div"),F(Gy.$$.fragment),$pr=l(),G8e=a("p"),kpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Spr=l(),en=a("p"),Rpr=o("The model class to instantiate is selected based on the "),O8e=a("code"),Bpr=o("model_type"),Ppr=o(` property of the config object (either
passed as an argument or loaded from `),V8e=a("code"),Ipr=o("pretrained_model_name_or_path"),qpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=a("code"),Npr=o("pretrained_model_name_or_path"),jpr=o(":"),Dpr=l(),ye=a("ul"),T7=a("li"),z8e=a("strong"),Gpr=o("bart"),Opr=o(" \u2014 "),DQ=a("a"),Vpr=o("TFBartForConditionalGeneration"),Xpr=o(" (BART model)"),zpr=l(),M7=a("li"),Q8e=a("strong"),Qpr=o("blenderbot"),Wpr=o(" \u2014 "),GQ=a("a"),Hpr=o("TFBlenderbotForConditionalGeneration"),Upr=o(" (Blenderbot model)"),Jpr=l(),E7=a("li"),W8e=a("strong"),Ypr=o("blenderbot-small"),Kpr=o(" \u2014 "),OQ=a("a"),Zpr=o("TFBlenderbotSmallForConditionalGeneration"),eur=o(" (BlenderbotSmall model)"),our=l(),C7=a("li"),H8e=a("strong"),rur=o("encoder-decoder"),tur=o(" \u2014 "),VQ=a("a"),aur=o("TFEncoderDecoderModel"),nur=o(" (Encoder decoder model)"),sur=l(),w7=a("li"),U8e=a("strong"),lur=o("led"),iur=o(" \u2014 "),XQ=a("a"),dur=o("TFLEDForConditionalGeneration"),cur=o(" (LED model)"),fur=l(),A7=a("li"),J8e=a("strong"),mur=o("marian"),gur=o(" \u2014 "),zQ=a("a"),hur=o("TFMarianMTModel"),pur=o(" (Marian model)"),uur=l(),y7=a("li"),Y8e=a("strong"),_ur=o("mbart"),bur=o(" \u2014 "),QQ=a("a"),vur=o("TFMBartForConditionalGeneration"),Fur=o(" (mBART model)"),Tur=l(),L7=a("li"),K8e=a("strong"),Mur=o("mt5"),Eur=o(" \u2014 "),WQ=a("a"),Cur=o("TFMT5ForConditionalGeneration"),wur=o(" (mT5 model)"),Aur=l(),x7=a("li"),Z8e=a("strong"),yur=o("pegasus"),Lur=o(" \u2014 "),HQ=a("a"),xur=o("TFPegasusForConditionalGeneration"),$ur=o(" (Pegasus model)"),kur=l(),$7=a("li"),ebe=a("strong"),Sur=o("t5"),Rur=o(" \u2014 "),UQ=a("a"),Bur=o("TFT5ForConditionalGeneration"),Pur=o(" (T5 model)"),Iur=l(),F(k7.$$.fragment),sIe=l(),Yd=a("h2"),S7=a("a"),obe=a("span"),F(Oy.$$.fragment),qur=l(),rbe=a("span"),Nur=o("TFAutoModelForSequenceClassification"),lIe=l(),tr=a("div"),F(Vy.$$.fragment),jur=l(),Kd=a("p"),Dur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JQ=a("a"),Gur=o("from_pretrained()"),Our=o(" class method or the "),YQ=a("a"),Vur=o("from_config()"),Xur=o(` class
method.`),zur=l(),Xy=a("p"),Qur=o("This class cannot be instantiated directly using "),tbe=a("code"),Wur=o("__init__()"),Hur=o(" (throws an error)."),Uur=l(),xt=a("div"),F(zy.$$.fragment),Jur=l(),abe=a("p"),Yur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kur=l(),Zd=a("p"),Zur=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),e_r=o("not"),o_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),r_r=o("from_pretrained()"),t_r=o(" to load the model weights."),a_r=l(),F(R7.$$.fragment),n_r=l(),$r=a("div"),F(Qy.$$.fragment),s_r=l(),sbe=a("p"),l_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),i_r=l(),on=a("p"),d_r=o("The model class to instantiate is selected based on the "),lbe=a("code"),c_r=o("model_type"),f_r=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),h_r=o("pretrained_model_name_or_path"),p_r=o(":"),u_r=l(),Z=a("ul"),B7=a("li"),cbe=a("strong"),__r=o("albert"),b_r=o(" \u2014 "),ZQ=a("a"),v_r=o("TFAlbertForSequenceClassification"),F_r=o(" (ALBERT model)"),T_r=l(),P7=a("li"),fbe=a("strong"),M_r=o("bert"),E_r=o(" \u2014 "),eW=a("a"),C_r=o("TFBertForSequenceClassification"),w_r=o(" (BERT model)"),A_r=l(),I7=a("li"),mbe=a("strong"),y_r=o("camembert"),L_r=o(" \u2014 "),oW=a("a"),x_r=o("TFCamembertForSequenceClassification"),$_r=o(" (CamemBERT model)"),k_r=l(),q7=a("li"),gbe=a("strong"),S_r=o("convbert"),R_r=o(" \u2014 "),rW=a("a"),B_r=o("TFConvBertForSequenceClassification"),P_r=o(" (ConvBERT model)"),I_r=l(),N7=a("li"),hbe=a("strong"),q_r=o("ctrl"),N_r=o(" \u2014 "),tW=a("a"),j_r=o("TFCTRLForSequenceClassification"),D_r=o(" (CTRL model)"),G_r=l(),j7=a("li"),pbe=a("strong"),O_r=o("deberta"),V_r=o(" \u2014 "),aW=a("a"),X_r=o("TFDebertaForSequenceClassification"),z_r=o(" (DeBERTa model)"),Q_r=l(),D7=a("li"),ube=a("strong"),W_r=o("deberta-v2"),H_r=o(" \u2014 "),nW=a("a"),U_r=o("TFDebertaV2ForSequenceClassification"),J_r=o(" (DeBERTa-v2 model)"),Y_r=l(),G7=a("li"),_be=a("strong"),K_r=o("distilbert"),Z_r=o(" \u2014 "),sW=a("a"),e1r=o("TFDistilBertForSequenceClassification"),o1r=o(" (DistilBERT model)"),r1r=l(),O7=a("li"),bbe=a("strong"),t1r=o("electra"),a1r=o(" \u2014 "),lW=a("a"),n1r=o("TFElectraForSequenceClassification"),s1r=o(" (ELECTRA model)"),l1r=l(),V7=a("li"),vbe=a("strong"),i1r=o("flaubert"),d1r=o(" \u2014 "),iW=a("a"),c1r=o("TFFlaubertForSequenceClassification"),f1r=o(" (FlauBERT model)"),m1r=l(),X7=a("li"),Fbe=a("strong"),g1r=o("funnel"),h1r=o(" \u2014 "),dW=a("a"),p1r=o("TFFunnelForSequenceClassification"),u1r=o(" (Funnel Transformer model)"),_1r=l(),z7=a("li"),Tbe=a("strong"),b1r=o("gpt2"),v1r=o(" \u2014 "),cW=a("a"),F1r=o("TFGPT2ForSequenceClassification"),T1r=o(" (OpenAI GPT-2 model)"),M1r=l(),Q7=a("li"),Mbe=a("strong"),E1r=o("gptj"),C1r=o(" \u2014 "),fW=a("a"),w1r=o("TFGPTJForSequenceClassification"),A1r=o(" (GPT-J model)"),y1r=l(),W7=a("li"),Ebe=a("strong"),L1r=o("layoutlm"),x1r=o(" \u2014 "),mW=a("a"),$1r=o("TFLayoutLMForSequenceClassification"),k1r=o(" (LayoutLM model)"),S1r=l(),H7=a("li"),Cbe=a("strong"),R1r=o("longformer"),B1r=o(" \u2014 "),gW=a("a"),P1r=o("TFLongformerForSequenceClassification"),I1r=o(" (Longformer model)"),q1r=l(),U7=a("li"),wbe=a("strong"),N1r=o("mobilebert"),j1r=o(" \u2014 "),hW=a("a"),D1r=o("TFMobileBertForSequenceClassification"),G1r=o(" (MobileBERT model)"),O1r=l(),J7=a("li"),Abe=a("strong"),V1r=o("mpnet"),X1r=o(" \u2014 "),pW=a("a"),z1r=o("TFMPNetForSequenceClassification"),Q1r=o(" (MPNet model)"),W1r=l(),Y7=a("li"),ybe=a("strong"),H1r=o("openai-gpt"),U1r=o(" \u2014 "),uW=a("a"),J1r=o("TFOpenAIGPTForSequenceClassification"),Y1r=o(" (OpenAI GPT model)"),K1r=l(),K7=a("li"),Lbe=a("strong"),Z1r=o("rembert"),e8r=o(" \u2014 "),_W=a("a"),o8r=o("TFRemBertForSequenceClassification"),r8r=o(" (RemBERT model)"),t8r=l(),Z7=a("li"),xbe=a("strong"),a8r=o("roberta"),n8r=o(" \u2014 "),bW=a("a"),s8r=o("TFRobertaForSequenceClassification"),l8r=o(" (RoBERTa model)"),i8r=l(),eM=a("li"),$be=a("strong"),d8r=o("roformer"),c8r=o(" \u2014 "),vW=a("a"),f8r=o("TFRoFormerForSequenceClassification"),m8r=o(" (RoFormer model)"),g8r=l(),oM=a("li"),kbe=a("strong"),h8r=o("tapas"),p8r=o(" \u2014 "),FW=a("a"),u8r=o("TFTapasForSequenceClassification"),_8r=o(" (TAPAS model)"),b8r=l(),rM=a("li"),Sbe=a("strong"),v8r=o("transfo-xl"),F8r=o(" \u2014 "),TW=a("a"),T8r=o("TFTransfoXLForSequenceClassification"),M8r=o(" (Transformer-XL model)"),E8r=l(),tM=a("li"),Rbe=a("strong"),C8r=o("xlm"),w8r=o(" \u2014 "),MW=a("a"),A8r=o("TFXLMForSequenceClassification"),y8r=o(" (XLM model)"),L8r=l(),aM=a("li"),Bbe=a("strong"),x8r=o("xlm-roberta"),$8r=o(" \u2014 "),EW=a("a"),k8r=o("TFXLMRobertaForSequenceClassification"),S8r=o(" (XLM-RoBERTa model)"),R8r=l(),nM=a("li"),Pbe=a("strong"),B8r=o("xlnet"),P8r=o(" \u2014 "),CW=a("a"),I8r=o("TFXLNetForSequenceClassification"),q8r=o(" (XLNet model)"),N8r=l(),F(sM.$$.fragment),iIe=l(),ec=a("h2"),lM=a("a"),Ibe=a("span"),F(Wy.$$.fragment),j8r=l(),qbe=a("span"),D8r=o("TFAutoModelForMultipleChoice"),dIe=l(),ar=a("div"),F(Hy.$$.fragment),G8r=l(),oc=a("p"),O8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wW=a("a"),V8r=o("from_pretrained()"),X8r=o(" class method or the "),AW=a("a"),z8r=o("from_config()"),Q8r=o(` class
method.`),W8r=l(),Uy=a("p"),H8r=o("This class cannot be instantiated directly using "),Nbe=a("code"),U8r=o("__init__()"),J8r=o(" (throws an error)."),Y8r=l(),$t=a("div"),F(Jy.$$.fragment),K8r=l(),jbe=a("p"),Z8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ebr=l(),rc=a("p"),obr=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),rbr=o("not"),tbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),abr=o("from_pretrained()"),nbr=o(" to load the model weights."),sbr=l(),F(iM.$$.fragment),lbr=l(),kr=a("div"),F(Yy.$$.fragment),ibr=l(),Gbe=a("p"),dbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cbr=l(),rn=a("p"),fbr=o("The model class to instantiate is selected based on the "),Obe=a("code"),mbr=o("model_type"),gbr=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),ubr=o("pretrained_model_name_or_path"),_br=o(":"),bbr=l(),pe=a("ul"),dM=a("li"),zbe=a("strong"),vbr=o("albert"),Fbr=o(" \u2014 "),LW=a("a"),Tbr=o("TFAlbertForMultipleChoice"),Mbr=o(" (ALBERT model)"),Ebr=l(),cM=a("li"),Qbe=a("strong"),Cbr=o("bert"),wbr=o(" \u2014 "),xW=a("a"),Abr=o("TFBertForMultipleChoice"),ybr=o(" (BERT model)"),Lbr=l(),fM=a("li"),Wbe=a("strong"),xbr=o("camembert"),$br=o(" \u2014 "),$W=a("a"),kbr=o("TFCamembertForMultipleChoice"),Sbr=o(" (CamemBERT model)"),Rbr=l(),mM=a("li"),Hbe=a("strong"),Bbr=o("convbert"),Pbr=o(" \u2014 "),kW=a("a"),Ibr=o("TFConvBertForMultipleChoice"),qbr=o(" (ConvBERT model)"),Nbr=l(),gM=a("li"),Ube=a("strong"),jbr=o("distilbert"),Dbr=o(" \u2014 "),SW=a("a"),Gbr=o("TFDistilBertForMultipleChoice"),Obr=o(" (DistilBERT model)"),Vbr=l(),hM=a("li"),Jbe=a("strong"),Xbr=o("electra"),zbr=o(" \u2014 "),RW=a("a"),Qbr=o("TFElectraForMultipleChoice"),Wbr=o(" (ELECTRA model)"),Hbr=l(),pM=a("li"),Ybe=a("strong"),Ubr=o("flaubert"),Jbr=o(" \u2014 "),BW=a("a"),Ybr=o("TFFlaubertForMultipleChoice"),Kbr=o(" (FlauBERT model)"),Zbr=l(),uM=a("li"),Kbe=a("strong"),e2r=o("funnel"),o2r=o(" \u2014 "),PW=a("a"),r2r=o("TFFunnelForMultipleChoice"),t2r=o(" (Funnel Transformer model)"),a2r=l(),_M=a("li"),Zbe=a("strong"),n2r=o("longformer"),s2r=o(" \u2014 "),IW=a("a"),l2r=o("TFLongformerForMultipleChoice"),i2r=o(" (Longformer model)"),d2r=l(),bM=a("li"),e2e=a("strong"),c2r=o("mobilebert"),f2r=o(" \u2014 "),qW=a("a"),m2r=o("TFMobileBertForMultipleChoice"),g2r=o(" (MobileBERT model)"),h2r=l(),vM=a("li"),o2e=a("strong"),p2r=o("mpnet"),u2r=o(" \u2014 "),NW=a("a"),_2r=o("TFMPNetForMultipleChoice"),b2r=o(" (MPNet model)"),v2r=l(),FM=a("li"),r2e=a("strong"),F2r=o("rembert"),T2r=o(" \u2014 "),jW=a("a"),M2r=o("TFRemBertForMultipleChoice"),E2r=o(" (RemBERT model)"),C2r=l(),TM=a("li"),t2e=a("strong"),w2r=o("roberta"),A2r=o(" \u2014 "),DW=a("a"),y2r=o("TFRobertaForMultipleChoice"),L2r=o(" (RoBERTa model)"),x2r=l(),MM=a("li"),a2e=a("strong"),$2r=o("roformer"),k2r=o(" \u2014 "),GW=a("a"),S2r=o("TFRoFormerForMultipleChoice"),R2r=o(" (RoFormer model)"),B2r=l(),EM=a("li"),n2e=a("strong"),P2r=o("xlm"),I2r=o(" \u2014 "),OW=a("a"),q2r=o("TFXLMForMultipleChoice"),N2r=o(" (XLM model)"),j2r=l(),CM=a("li"),s2e=a("strong"),D2r=o("xlm-roberta"),G2r=o(" \u2014 "),VW=a("a"),O2r=o("TFXLMRobertaForMultipleChoice"),V2r=o(" (XLM-RoBERTa model)"),X2r=l(),wM=a("li"),l2e=a("strong"),z2r=o("xlnet"),Q2r=o(" \u2014 "),XW=a("a"),W2r=o("TFXLNetForMultipleChoice"),H2r=o(" (XLNet model)"),U2r=l(),F(AM.$$.fragment),cIe=l(),tc=a("h2"),yM=a("a"),i2e=a("span"),F(Ky.$$.fragment),J2r=l(),d2e=a("span"),Y2r=o("TFAutoModelForTableQuestionAnswering"),fIe=l(),nr=a("div"),F(Zy.$$.fragment),K2r=l(),ac=a("p"),Z2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zW=a("a"),evr=o("from_pretrained()"),ovr=o(" class method or the "),QW=a("a"),rvr=o("from_config()"),tvr=o(` class
method.`),avr=l(),eL=a("p"),nvr=o("This class cannot be instantiated directly using "),c2e=a("code"),svr=o("__init__()"),lvr=o(" (throws an error)."),ivr=l(),kt=a("div"),F(oL.$$.fragment),dvr=l(),f2e=a("p"),cvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fvr=l(),nc=a("p"),mvr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),gvr=o("not"),hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),pvr=o("from_pretrained()"),uvr=o(" to load the model weights."),_vr=l(),F(LM.$$.fragment),bvr=l(),Sr=a("div"),F(rL.$$.fragment),vvr=l(),g2e=a("p"),Fvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Tvr=l(),tn=a("p"),Mvr=o("The model class to instantiate is selected based on the "),h2e=a("code"),Evr=o("model_type"),Cvr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),wvr=o("pretrained_model_name_or_path"),Avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),yvr=o("pretrained_model_name_or_path"),Lvr=o(":"),xvr=l(),_2e=a("ul"),xM=a("li"),b2e=a("strong"),$vr=o("tapas"),kvr=o(" \u2014 "),HW=a("a"),Svr=o("TFTapasForQuestionAnswering"),Rvr=o(" (TAPAS model)"),Bvr=l(),F($M.$$.fragment),mIe=l(),sc=a("h2"),kM=a("a"),v2e=a("span"),F(tL.$$.fragment),Pvr=l(),F2e=a("span"),Ivr=o("TFAutoModelForTokenClassification"),gIe=l(),sr=a("div"),F(aL.$$.fragment),qvr=l(),lc=a("p"),Nvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UW=a("a"),jvr=o("from_pretrained()"),Dvr=o(" class method or the "),JW=a("a"),Gvr=o("from_config()"),Ovr=o(` class
method.`),Vvr=l(),nL=a("p"),Xvr=o("This class cannot be instantiated directly using "),T2e=a("code"),zvr=o("__init__()"),Qvr=o(" (throws an error)."),Wvr=l(),St=a("div"),F(sL.$$.fragment),Hvr=l(),M2e=a("p"),Uvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jvr=l(),ic=a("p"),Yvr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Kvr=o("not"),Zvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),eFr=o("from_pretrained()"),oFr=o(" to load the model weights."),rFr=l(),F(SM.$$.fragment),tFr=l(),Rr=a("div"),F(lL.$$.fragment),aFr=l(),C2e=a("p"),nFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sFr=l(),an=a("p"),lFr=o("The model class to instantiate is selected based on the "),w2e=a("code"),iFr=o("model_type"),dFr=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),cFr=o("pretrained_model_name_or_path"),fFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),mFr=o("pretrained_model_name_or_path"),gFr=o(":"),hFr=l(),de=a("ul"),RM=a("li"),L2e=a("strong"),pFr=o("albert"),uFr=o(" \u2014 "),KW=a("a"),_Fr=o("TFAlbertForTokenClassification"),bFr=o(" (ALBERT model)"),vFr=l(),BM=a("li"),x2e=a("strong"),FFr=o("bert"),TFr=o(" \u2014 "),ZW=a("a"),MFr=o("TFBertForTokenClassification"),EFr=o(" (BERT model)"),CFr=l(),PM=a("li"),$2e=a("strong"),wFr=o("camembert"),AFr=o(" \u2014 "),eH=a("a"),yFr=o("TFCamembertForTokenClassification"),LFr=o(" (CamemBERT model)"),xFr=l(),IM=a("li"),k2e=a("strong"),$Fr=o("convbert"),kFr=o(" \u2014 "),oH=a("a"),SFr=o("TFConvBertForTokenClassification"),RFr=o(" (ConvBERT model)"),BFr=l(),qM=a("li"),S2e=a("strong"),PFr=o("deberta"),IFr=o(" \u2014 "),rH=a("a"),qFr=o("TFDebertaForTokenClassification"),NFr=o(" (DeBERTa model)"),jFr=l(),NM=a("li"),R2e=a("strong"),DFr=o("deberta-v2"),GFr=o(" \u2014 "),tH=a("a"),OFr=o("TFDebertaV2ForTokenClassification"),VFr=o(" (DeBERTa-v2 model)"),XFr=l(),jM=a("li"),B2e=a("strong"),zFr=o("distilbert"),QFr=o(" \u2014 "),aH=a("a"),WFr=o("TFDistilBertForTokenClassification"),HFr=o(" (DistilBERT model)"),UFr=l(),DM=a("li"),P2e=a("strong"),JFr=o("electra"),YFr=o(" \u2014 "),nH=a("a"),KFr=o("TFElectraForTokenClassification"),ZFr=o(" (ELECTRA model)"),e0r=l(),GM=a("li"),I2e=a("strong"),o0r=o("flaubert"),r0r=o(" \u2014 "),sH=a("a"),t0r=o("TFFlaubertForTokenClassification"),a0r=o(" (FlauBERT model)"),n0r=l(),OM=a("li"),q2e=a("strong"),s0r=o("funnel"),l0r=o(" \u2014 "),lH=a("a"),i0r=o("TFFunnelForTokenClassification"),d0r=o(" (Funnel Transformer model)"),c0r=l(),VM=a("li"),N2e=a("strong"),f0r=o("layoutlm"),m0r=o(" \u2014 "),iH=a("a"),g0r=o("TFLayoutLMForTokenClassification"),h0r=o(" (LayoutLM model)"),p0r=l(),XM=a("li"),j2e=a("strong"),u0r=o("longformer"),_0r=o(" \u2014 "),dH=a("a"),b0r=o("TFLongformerForTokenClassification"),v0r=o(" (Longformer model)"),F0r=l(),zM=a("li"),D2e=a("strong"),T0r=o("mobilebert"),M0r=o(" \u2014 "),cH=a("a"),E0r=o("TFMobileBertForTokenClassification"),C0r=o(" (MobileBERT model)"),w0r=l(),QM=a("li"),G2e=a("strong"),A0r=o("mpnet"),y0r=o(" \u2014 "),fH=a("a"),L0r=o("TFMPNetForTokenClassification"),x0r=o(" (MPNet model)"),$0r=l(),WM=a("li"),O2e=a("strong"),k0r=o("rembert"),S0r=o(" \u2014 "),mH=a("a"),R0r=o("TFRemBertForTokenClassification"),B0r=o(" (RemBERT model)"),P0r=l(),HM=a("li"),V2e=a("strong"),I0r=o("roberta"),q0r=o(" \u2014 "),gH=a("a"),N0r=o("TFRobertaForTokenClassification"),j0r=o(" (RoBERTa model)"),D0r=l(),UM=a("li"),X2e=a("strong"),G0r=o("roformer"),O0r=o(" \u2014 "),hH=a("a"),V0r=o("TFRoFormerForTokenClassification"),X0r=o(" (RoFormer model)"),z0r=l(),JM=a("li"),z2e=a("strong"),Q0r=o("xlm"),W0r=o(" \u2014 "),pH=a("a"),H0r=o("TFXLMForTokenClassification"),U0r=o(" (XLM model)"),J0r=l(),YM=a("li"),Q2e=a("strong"),Y0r=o("xlm-roberta"),K0r=o(" \u2014 "),uH=a("a"),Z0r=o("TFXLMRobertaForTokenClassification"),eTr=o(" (XLM-RoBERTa model)"),oTr=l(),KM=a("li"),W2e=a("strong"),rTr=o("xlnet"),tTr=o(" \u2014 "),_H=a("a"),aTr=o("TFXLNetForTokenClassification"),nTr=o(" (XLNet model)"),sTr=l(),F(ZM.$$.fragment),hIe=l(),dc=a("h2"),e4=a("a"),H2e=a("span"),F(iL.$$.fragment),lTr=l(),U2e=a("span"),iTr=o("TFAutoModelForQuestionAnswering"),pIe=l(),lr=a("div"),F(dL.$$.fragment),dTr=l(),cc=a("p"),cTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bH=a("a"),fTr=o("from_pretrained()"),mTr=o(" class method or the "),vH=a("a"),gTr=o("from_config()"),hTr=o(` class
method.`),pTr=l(),cL=a("p"),uTr=o("This class cannot be instantiated directly using "),J2e=a("code"),_Tr=o("__init__()"),bTr=o(" (throws an error)."),vTr=l(),Rt=a("div"),F(fL.$$.fragment),FTr=l(),Y2e=a("p"),TTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MTr=l(),fc=a("p"),ETr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),CTr=o("not"),wTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),ATr=o("from_pretrained()"),yTr=o(" to load the model weights."),LTr=l(),F(o4.$$.fragment),xTr=l(),Br=a("div"),F(mL.$$.fragment),$Tr=l(),Z2e=a("p"),kTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),STr=l(),nn=a("p"),RTr=o("The model class to instantiate is selected based on the "),eve=a("code"),BTr=o("model_type"),PTr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),ITr=o("pretrained_model_name_or_path"),qTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),NTr=o("pretrained_model_name_or_path"),jTr=o(":"),DTr=l(),ce=a("ul"),r4=a("li"),tve=a("strong"),GTr=o("albert"),OTr=o(" \u2014 "),TH=a("a"),VTr=o("TFAlbertForQuestionAnswering"),XTr=o(" (ALBERT model)"),zTr=l(),t4=a("li"),ave=a("strong"),QTr=o("bert"),WTr=o(" \u2014 "),MH=a("a"),HTr=o("TFBertForQuestionAnswering"),UTr=o(" (BERT model)"),JTr=l(),a4=a("li"),nve=a("strong"),YTr=o("camembert"),KTr=o(" \u2014 "),EH=a("a"),ZTr=o("TFCamembertForQuestionAnswering"),e7r=o(" (CamemBERT model)"),o7r=l(),n4=a("li"),sve=a("strong"),r7r=o("convbert"),t7r=o(" \u2014 "),CH=a("a"),a7r=o("TFConvBertForQuestionAnswering"),n7r=o(" (ConvBERT model)"),s7r=l(),s4=a("li"),lve=a("strong"),l7r=o("deberta"),i7r=o(" \u2014 "),wH=a("a"),d7r=o("TFDebertaForQuestionAnswering"),c7r=o(" (DeBERTa model)"),f7r=l(),l4=a("li"),ive=a("strong"),m7r=o("deberta-v2"),g7r=o(" \u2014 "),AH=a("a"),h7r=o("TFDebertaV2ForQuestionAnswering"),p7r=o(" (DeBERTa-v2 model)"),u7r=l(),i4=a("li"),dve=a("strong"),_7r=o("distilbert"),b7r=o(" \u2014 "),yH=a("a"),v7r=o("TFDistilBertForQuestionAnswering"),F7r=o(" (DistilBERT model)"),T7r=l(),d4=a("li"),cve=a("strong"),M7r=o("electra"),E7r=o(" \u2014 "),LH=a("a"),C7r=o("TFElectraForQuestionAnswering"),w7r=o(" (ELECTRA model)"),A7r=l(),c4=a("li"),fve=a("strong"),y7r=o("flaubert"),L7r=o(" \u2014 "),xH=a("a"),x7r=o("TFFlaubertForQuestionAnsweringSimple"),$7r=o(" (FlauBERT model)"),k7r=l(),f4=a("li"),mve=a("strong"),S7r=o("funnel"),R7r=o(" \u2014 "),$H=a("a"),B7r=o("TFFunnelForQuestionAnswering"),P7r=o(" (Funnel Transformer model)"),I7r=l(),m4=a("li"),gve=a("strong"),q7r=o("gptj"),N7r=o(" \u2014 "),kH=a("a"),j7r=o("TFGPTJForQuestionAnswering"),D7r=o(" (GPT-J model)"),G7r=l(),g4=a("li"),hve=a("strong"),O7r=o("longformer"),V7r=o(" \u2014 "),SH=a("a"),X7r=o("TFLongformerForQuestionAnswering"),z7r=o(" (Longformer model)"),Q7r=l(),h4=a("li"),pve=a("strong"),W7r=o("mobilebert"),H7r=o(" \u2014 "),RH=a("a"),U7r=o("TFMobileBertForQuestionAnswering"),J7r=o(" (MobileBERT model)"),Y7r=l(),p4=a("li"),uve=a("strong"),K7r=o("mpnet"),Z7r=o(" \u2014 "),BH=a("a"),eMr=o("TFMPNetForQuestionAnswering"),oMr=o(" (MPNet model)"),rMr=l(),u4=a("li"),_ve=a("strong"),tMr=o("rembert"),aMr=o(" \u2014 "),PH=a("a"),nMr=o("TFRemBertForQuestionAnswering"),sMr=o(" (RemBERT model)"),lMr=l(),_4=a("li"),bve=a("strong"),iMr=o("roberta"),dMr=o(" \u2014 "),IH=a("a"),cMr=o("TFRobertaForQuestionAnswering"),fMr=o(" (RoBERTa model)"),mMr=l(),b4=a("li"),vve=a("strong"),gMr=o("roformer"),hMr=o(" \u2014 "),qH=a("a"),pMr=o("TFRoFormerForQuestionAnswering"),uMr=o(" (RoFormer model)"),_Mr=l(),v4=a("li"),Fve=a("strong"),bMr=o("xlm"),vMr=o(" \u2014 "),NH=a("a"),FMr=o("TFXLMForQuestionAnsweringSimple"),TMr=o(" (XLM model)"),MMr=l(),F4=a("li"),Tve=a("strong"),EMr=o("xlm-roberta"),CMr=o(" \u2014 "),jH=a("a"),wMr=o("TFXLMRobertaForQuestionAnswering"),AMr=o(" (XLM-RoBERTa model)"),yMr=l(),T4=a("li"),Mve=a("strong"),LMr=o("xlnet"),xMr=o(" \u2014 "),DH=a("a"),$Mr=o("TFXLNetForQuestionAnsweringSimple"),kMr=o(" (XLNet model)"),SMr=l(),F(M4.$$.fragment),uIe=l(),mc=a("h2"),E4=a("a"),Eve=a("span"),F(gL.$$.fragment),RMr=l(),Cve=a("span"),BMr=o("TFAutoModelForVision2Seq"),_Ie=l(),ir=a("div"),F(hL.$$.fragment),PMr=l(),gc=a("p"),IMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GH=a("a"),qMr=o("from_pretrained()"),NMr=o(" class method or the "),OH=a("a"),jMr=o("from_config()"),DMr=o(` class
method.`),GMr=l(),pL=a("p"),OMr=o("This class cannot be instantiated directly using "),wve=a("code"),VMr=o("__init__()"),XMr=o(" (throws an error)."),zMr=l(),Bt=a("div"),F(uL.$$.fragment),QMr=l(),Ave=a("p"),WMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HMr=l(),hc=a("p"),UMr=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),JMr=o("not"),YMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),KMr=o("from_pretrained()"),ZMr=o(" to load the model weights."),e4r=l(),F(C4.$$.fragment),o4r=l(),Pr=a("div"),F(_L.$$.fragment),r4r=l(),Lve=a("p"),t4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a4r=l(),sn=a("p"),n4r=o("The model class to instantiate is selected based on the "),xve=a("code"),s4r=o("model_type"),l4r=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),c4r=o("pretrained_model_name_or_path"),f4r=o(":"),m4r=l(),Sve=a("ul"),w4=a("li"),Rve=a("strong"),g4r=o("vision-encoder-decoder"),h4r=o(" \u2014 "),XH=a("a"),p4r=o("TFVisionEncoderDecoderModel"),u4r=o(" (Vision Encoder decoder model)"),_4r=l(),F(A4.$$.fragment),bIe=l(),pc=a("h2"),y4=a("a"),Bve=a("span"),F(bL.$$.fragment),b4r=l(),Pve=a("span"),v4r=o("TFAutoModelForSpeechSeq2Seq"),vIe=l(),dr=a("div"),F(vL.$$.fragment),F4r=l(),uc=a("p"),T4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zH=a("a"),M4r=o("from_pretrained()"),E4r=o(" class method or the "),QH=a("a"),C4r=o("from_config()"),w4r=o(` class
method.`),A4r=l(),FL=a("p"),y4r=o("This class cannot be instantiated directly using "),Ive=a("code"),L4r=o("__init__()"),x4r=o(" (throws an error)."),$4r=l(),Pt=a("div"),F(TL.$$.fragment),k4r=l(),qve=a("p"),S4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R4r=l(),_c=a("p"),B4r=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),P4r=o("not"),I4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),q4r=o("from_pretrained()"),N4r=o(" to load the model weights."),j4r=l(),F(L4.$$.fragment),D4r=l(),Ir=a("div"),F(ML.$$.fragment),G4r=l(),jve=a("p"),O4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),V4r=l(),ln=a("p"),X4r=o("The model class to instantiate is selected based on the "),Dve=a("code"),z4r=o("model_type"),Q4r=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),W4r=o("pretrained_model_name_or_path"),H4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),U4r=o("pretrained_model_name_or_path"),J4r=o(":"),Y4r=l(),Vve=a("ul"),x4=a("li"),Xve=a("strong"),K4r=o("speech_to_text"),Z4r=o(" \u2014 "),HH=a("a"),eEr=o("TFSpeech2TextForConditionalGeneration"),oEr=o(" (Speech2Text model)"),rEr=l(),F($4.$$.fragment),FIe=l(),bc=a("h2"),k4=a("a"),zve=a("span"),F(EL.$$.fragment),tEr=l(),Qve=a("span"),aEr=o("FlaxAutoModel"),TIe=l(),cr=a("div"),F(CL.$$.fragment),nEr=l(),vc=a("p"),sEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UH=a("a"),lEr=o("from_pretrained()"),iEr=o(" class method or the "),JH=a("a"),dEr=o("from_config()"),cEr=o(` class
method.`),fEr=l(),wL=a("p"),mEr=o("This class cannot be instantiated directly using "),Wve=a("code"),gEr=o("__init__()"),hEr=o(" (throws an error)."),pEr=l(),It=a("div"),F(AL.$$.fragment),uEr=l(),Hve=a("p"),_Er=o("Instantiates one of the base model classes of the library from a configuration."),bEr=l(),Fc=a("p"),vEr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),FEr=o("not"),TEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),MEr=o("from_pretrained()"),EEr=o(" to load the model weights."),CEr=l(),F(S4.$$.fragment),wEr=l(),qr=a("div"),F(yL.$$.fragment),AEr=l(),Jve=a("p"),yEr=o("Instantiate one of the base model classes of the library from a pretrained model."),LEr=l(),dn=a("p"),xEr=o("The model class to instantiate is selected based on the "),Yve=a("code"),$Er=o("model_type"),kEr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),SEr=o("pretrained_model_name_or_path"),REr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),BEr=o("pretrained_model_name_or_path"),PEr=o(":"),IEr=l(),ee=a("ul"),R4=a("li"),eFe=a("strong"),qEr=o("albert"),NEr=o(" \u2014 "),KH=a("a"),jEr=o("FlaxAlbertModel"),DEr=o(" (ALBERT model)"),GEr=l(),B4=a("li"),oFe=a("strong"),OEr=o("bart"),VEr=o(" \u2014 "),ZH=a("a"),XEr=o("FlaxBartModel"),zEr=o(" (BART model)"),QEr=l(),P4=a("li"),rFe=a("strong"),WEr=o("beit"),HEr=o(" \u2014 "),eU=a("a"),UEr=o("FlaxBeitModel"),JEr=o(" (BEiT model)"),YEr=l(),I4=a("li"),tFe=a("strong"),KEr=o("bert"),ZEr=o(" \u2014 "),oU=a("a"),e5r=o("FlaxBertModel"),o5r=o(" (BERT model)"),r5r=l(),q4=a("li"),aFe=a("strong"),t5r=o("big_bird"),a5r=o(" \u2014 "),rU=a("a"),n5r=o("FlaxBigBirdModel"),s5r=o(" (BigBird model)"),l5r=l(),N4=a("li"),nFe=a("strong"),i5r=o("blenderbot"),d5r=o(" \u2014 "),tU=a("a"),c5r=o("FlaxBlenderbotModel"),f5r=o(" (Blenderbot model)"),m5r=l(),j4=a("li"),sFe=a("strong"),g5r=o("blenderbot-small"),h5r=o(" \u2014 "),aU=a("a"),p5r=o("FlaxBlenderbotSmallModel"),u5r=o(" (BlenderbotSmall model)"),_5r=l(),D4=a("li"),lFe=a("strong"),b5r=o("clip"),v5r=o(" \u2014 "),nU=a("a"),F5r=o("FlaxCLIPModel"),T5r=o(" (CLIP model)"),M5r=l(),G4=a("li"),iFe=a("strong"),E5r=o("distilbert"),C5r=o(" \u2014 "),sU=a("a"),w5r=o("FlaxDistilBertModel"),A5r=o(" (DistilBERT model)"),y5r=l(),O4=a("li"),dFe=a("strong"),L5r=o("electra"),x5r=o(" \u2014 "),lU=a("a"),$5r=o("FlaxElectraModel"),k5r=o(" (ELECTRA model)"),S5r=l(),V4=a("li"),cFe=a("strong"),R5r=o("gpt2"),B5r=o(" \u2014 "),iU=a("a"),P5r=o("FlaxGPT2Model"),I5r=o(" (OpenAI GPT-2 model)"),q5r=l(),X4=a("li"),fFe=a("strong"),N5r=o("gpt_neo"),j5r=o(" \u2014 "),dU=a("a"),D5r=o("FlaxGPTNeoModel"),G5r=o(" (GPT Neo model)"),O5r=l(),z4=a("li"),mFe=a("strong"),V5r=o("gptj"),X5r=o(" \u2014 "),cU=a("a"),z5r=o("FlaxGPTJModel"),Q5r=o(" (GPT-J model)"),W5r=l(),Q4=a("li"),gFe=a("strong"),H5r=o("marian"),U5r=o(" \u2014 "),fU=a("a"),J5r=o("FlaxMarianModel"),Y5r=o(" (Marian model)"),K5r=l(),W4=a("li"),hFe=a("strong"),Z5r=o("mbart"),eCr=o(" \u2014 "),mU=a("a"),oCr=o("FlaxMBartModel"),rCr=o(" (mBART model)"),tCr=l(),H4=a("li"),pFe=a("strong"),aCr=o("mt5"),nCr=o(" \u2014 "),gU=a("a"),sCr=o("FlaxMT5Model"),lCr=o(" (mT5 model)"),iCr=l(),U4=a("li"),uFe=a("strong"),dCr=o("opt"),cCr=o(" \u2014 "),hU=a("a"),fCr=o("FlaxOPTModel"),mCr=o(" (OPT model)"),gCr=l(),J4=a("li"),_Fe=a("strong"),hCr=o("pegasus"),pCr=o(" \u2014 "),pU=a("a"),uCr=o("FlaxPegasusModel"),_Cr=o(" (Pegasus model)"),bCr=l(),Y4=a("li"),bFe=a("strong"),vCr=o("roberta"),FCr=o(" \u2014 "),uU=a("a"),TCr=o("FlaxRobertaModel"),MCr=o(" (RoBERTa model)"),ECr=l(),K4=a("li"),vFe=a("strong"),CCr=o("roformer"),wCr=o(" \u2014 "),_U=a("a"),ACr=o("FlaxRoFormerModel"),yCr=o(" (RoFormer model)"),LCr=l(),Z4=a("li"),FFe=a("strong"),xCr=o("t5"),$Cr=o(" \u2014 "),bU=a("a"),kCr=o("FlaxT5Model"),SCr=o(" (T5 model)"),RCr=l(),eE=a("li"),TFe=a("strong"),BCr=o("vision-text-dual-encoder"),PCr=o(" \u2014 "),vU=a("a"),ICr=o("FlaxVisionTextDualEncoderModel"),qCr=o(" (VisionTextDualEncoder model)"),NCr=l(),oE=a("li"),MFe=a("strong"),jCr=o("vit"),DCr=o(" \u2014 "),FU=a("a"),GCr=o("FlaxViTModel"),OCr=o(" (ViT model)"),VCr=l(),rE=a("li"),EFe=a("strong"),XCr=o("wav2vec2"),zCr=o(" \u2014 "),TU=a("a"),QCr=o("FlaxWav2Vec2Model"),WCr=o(" (Wav2Vec2 model)"),HCr=l(),tE=a("li"),CFe=a("strong"),UCr=o("xglm"),JCr=o(" \u2014 "),MU=a("a"),YCr=o("FlaxXGLMModel"),KCr=o(" (XGLM model)"),ZCr=l(),aE=a("li"),wFe=a("strong"),e3r=o("xlm-roberta"),o3r=o(" \u2014 "),EU=a("a"),r3r=o("FlaxXLMRobertaModel"),t3r=o(" (XLM-RoBERTa model)"),a3r=l(),F(nE.$$.fragment),MIe=l(),Tc=a("h2"),sE=a("a"),AFe=a("span"),F(LL.$$.fragment),n3r=l(),yFe=a("span"),s3r=o("FlaxAutoModelForCausalLM"),EIe=l(),fr=a("div"),F(xL.$$.fragment),l3r=l(),Mc=a("p"),i3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CU=a("a"),d3r=o("from_pretrained()"),c3r=o(" class method or the "),wU=a("a"),f3r=o("from_config()"),m3r=o(` class
method.`),g3r=l(),$L=a("p"),h3r=o("This class cannot be instantiated directly using "),LFe=a("code"),p3r=o("__init__()"),u3r=o(" (throws an error)."),_3r=l(),qt=a("div"),F(kL.$$.fragment),b3r=l(),xFe=a("p"),v3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),F3r=l(),Ec=a("p"),T3r=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),M3r=o("not"),E3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),C3r=o("from_pretrained()"),w3r=o(" to load the model weights."),A3r=l(),F(lE.$$.fragment),y3r=l(),Nr=a("div"),F(SL.$$.fragment),L3r=l(),kFe=a("p"),x3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$3r=l(),cn=a("p"),k3r=o("The model class to instantiate is selected based on the "),SFe=a("code"),S3r=o("model_type"),R3r=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),B3r=o("pretrained_model_name_or_path"),P3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),I3r=o("pretrained_model_name_or_path"),q3r=o(":"),N3r=l(),Le=a("ul"),iE=a("li"),PFe=a("strong"),j3r=o("bart"),D3r=o(" \u2014 "),yU=a("a"),G3r=o("FlaxBartForCausalLM"),O3r=o(" (BART model)"),V3r=l(),dE=a("li"),IFe=a("strong"),X3r=o("bert"),z3r=o(" \u2014 "),LU=a("a"),Q3r=o("FlaxBertForCausalLM"),W3r=o(" (BERT model)"),H3r=l(),cE=a("li"),qFe=a("strong"),U3r=o("big_bird"),J3r=o(" \u2014 "),xU=a("a"),Y3r=o("FlaxBigBirdForCausalLM"),K3r=o(" (BigBird model)"),Z3r=l(),fE=a("li"),NFe=a("strong"),ewr=o("electra"),owr=o(" \u2014 "),$U=a("a"),rwr=o("FlaxElectraForCausalLM"),twr=o(" (ELECTRA model)"),awr=l(),mE=a("li"),jFe=a("strong"),nwr=o("gpt2"),swr=o(" \u2014 "),kU=a("a"),lwr=o("FlaxGPT2LMHeadModel"),iwr=o(" (OpenAI GPT-2 model)"),dwr=l(),gE=a("li"),DFe=a("strong"),cwr=o("gpt_neo"),fwr=o(" \u2014 "),SU=a("a"),mwr=o("FlaxGPTNeoForCausalLM"),gwr=o(" (GPT Neo model)"),hwr=l(),hE=a("li"),GFe=a("strong"),pwr=o("gptj"),uwr=o(" \u2014 "),RU=a("a"),_wr=o("FlaxGPTJForCausalLM"),bwr=o(" (GPT-J model)"),vwr=l(),pE=a("li"),OFe=a("strong"),Fwr=o("opt"),Twr=o(" \u2014 "),BU=a("a"),Mwr=o("FlaxOPTForCausalLM"),Ewr=o(" (OPT model)"),Cwr=l(),uE=a("li"),VFe=a("strong"),wwr=o("roberta"),Awr=o(" \u2014 "),PU=a("a"),ywr=o("FlaxRobertaForCausalLM"),Lwr=o(" (RoBERTa model)"),xwr=l(),_E=a("li"),XFe=a("strong"),$wr=o("xglm"),kwr=o(" \u2014 "),IU=a("a"),Swr=o("FlaxXGLMForCausalLM"),Rwr=o(" (XGLM model)"),Bwr=l(),F(bE.$$.fragment),CIe=l(),Cc=a("h2"),vE=a("a"),zFe=a("span"),F(RL.$$.fragment),Pwr=l(),QFe=a("span"),Iwr=o("FlaxAutoModelForPreTraining"),wIe=l(),mr=a("div"),F(BL.$$.fragment),qwr=l(),wc=a("p"),Nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qU=a("a"),jwr=o("from_pretrained()"),Dwr=o(" class method or the "),NU=a("a"),Gwr=o("from_config()"),Owr=o(` class
method.`),Vwr=l(),PL=a("p"),Xwr=o("This class cannot be instantiated directly using "),WFe=a("code"),zwr=o("__init__()"),Qwr=o(" (throws an error)."),Wwr=l(),Nt=a("div"),F(IL.$$.fragment),Hwr=l(),HFe=a("p"),Uwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jwr=l(),Ac=a("p"),Ywr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Kwr=o("not"),Zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),eAr=o("from_pretrained()"),oAr=o(" to load the model weights."),rAr=l(),F(FE.$$.fragment),tAr=l(),jr=a("div"),F(qL.$$.fragment),aAr=l(),JFe=a("p"),nAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sAr=l(),fn=a("p"),lAr=o("The model class to instantiate is selected based on the "),YFe=a("code"),iAr=o("model_type"),dAr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),cAr=o("pretrained_model_name_or_path"),fAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(":"),hAr=l(),Me=a("ul"),TE=a("li"),e0e=a("strong"),pAr=o("albert"),uAr=o(" \u2014 "),DU=a("a"),_Ar=o("FlaxAlbertForPreTraining"),bAr=o(" (ALBERT model)"),vAr=l(),ME=a("li"),o0e=a("strong"),FAr=o("bart"),TAr=o(" \u2014 "),GU=a("a"),MAr=o("FlaxBartForConditionalGeneration"),EAr=o(" (BART model)"),CAr=l(),EE=a("li"),r0e=a("strong"),wAr=o("bert"),AAr=o(" \u2014 "),OU=a("a"),yAr=o("FlaxBertForPreTraining"),LAr=o(" (BERT model)"),xAr=l(),CE=a("li"),t0e=a("strong"),$Ar=o("big_bird"),kAr=o(" \u2014 "),VU=a("a"),SAr=o("FlaxBigBirdForPreTraining"),RAr=o(" (BigBird model)"),BAr=l(),wE=a("li"),a0e=a("strong"),PAr=o("electra"),IAr=o(" \u2014 "),XU=a("a"),qAr=o("FlaxElectraForPreTraining"),NAr=o(" (ELECTRA model)"),jAr=l(),AE=a("li"),n0e=a("strong"),DAr=o("mbart"),GAr=o(" \u2014 "),zU=a("a"),OAr=o("FlaxMBartForConditionalGeneration"),VAr=o(" (mBART model)"),XAr=l(),yE=a("li"),s0e=a("strong"),zAr=o("mt5"),QAr=o(" \u2014 "),QU=a("a"),WAr=o("FlaxMT5ForConditionalGeneration"),HAr=o(" (mT5 model)"),UAr=l(),LE=a("li"),l0e=a("strong"),JAr=o("roberta"),YAr=o(" \u2014 "),WU=a("a"),KAr=o("FlaxRobertaForMaskedLM"),ZAr=o(" (RoBERTa model)"),e6r=l(),xE=a("li"),i0e=a("strong"),o6r=o("roformer"),r6r=o(" \u2014 "),HU=a("a"),t6r=o("FlaxRoFormerForMaskedLM"),a6r=o(" (RoFormer model)"),n6r=l(),$E=a("li"),d0e=a("strong"),s6r=o("t5"),l6r=o(" \u2014 "),UU=a("a"),i6r=o("FlaxT5ForConditionalGeneration"),d6r=o(" (T5 model)"),c6r=l(),kE=a("li"),c0e=a("strong"),f6r=o("wav2vec2"),m6r=o(" \u2014 "),JU=a("a"),g6r=o("FlaxWav2Vec2ForPreTraining"),h6r=o(" (Wav2Vec2 model)"),p6r=l(),SE=a("li"),f0e=a("strong"),u6r=o("xlm-roberta"),_6r=o(" \u2014 "),YU=a("a"),b6r=o("FlaxXLMRobertaForMaskedLM"),v6r=o(" (XLM-RoBERTa model)"),F6r=l(),F(RE.$$.fragment),AIe=l(),yc=a("h2"),BE=a("a"),m0e=a("span"),F(NL.$$.fragment),T6r=l(),g0e=a("span"),M6r=o("FlaxAutoModelForMaskedLM"),yIe=l(),gr=a("div"),F(jL.$$.fragment),E6r=l(),Lc=a("p"),C6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KU=a("a"),w6r=o("from_pretrained()"),A6r=o(" class method or the "),ZU=a("a"),y6r=o("from_config()"),L6r=o(` class
method.`),x6r=l(),DL=a("p"),$6r=o("This class cannot be instantiated directly using "),h0e=a("code"),k6r=o("__init__()"),S6r=o(" (throws an error)."),R6r=l(),jt=a("div"),F(GL.$$.fragment),B6r=l(),p0e=a("p"),P6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I6r=l(),xc=a("p"),q6r=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),N6r=o("not"),j6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),D6r=o("from_pretrained()"),G6r=o(" to load the model weights."),O6r=l(),F(PE.$$.fragment),V6r=l(),Dr=a("div"),F(OL.$$.fragment),X6r=l(),_0e=a("p"),z6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q6r=l(),mn=a("p"),W6r=o("The model class to instantiate is selected based on the "),b0e=a("code"),H6r=o("model_type"),U6r=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(":"),eyr=l(),xe=a("ul"),IE=a("li"),T0e=a("strong"),oyr=o("albert"),ryr=o(" \u2014 "),oJ=a("a"),tyr=o("FlaxAlbertForMaskedLM"),ayr=o(" (ALBERT model)"),nyr=l(),qE=a("li"),M0e=a("strong"),syr=o("bart"),lyr=o(" \u2014 "),rJ=a("a"),iyr=o("FlaxBartForConditionalGeneration"),dyr=o(" (BART model)"),cyr=l(),NE=a("li"),E0e=a("strong"),fyr=o("bert"),myr=o(" \u2014 "),tJ=a("a"),gyr=o("FlaxBertForMaskedLM"),hyr=o(" (BERT model)"),pyr=l(),jE=a("li"),C0e=a("strong"),uyr=o("big_bird"),_yr=o(" \u2014 "),aJ=a("a"),byr=o("FlaxBigBirdForMaskedLM"),vyr=o(" (BigBird model)"),Fyr=l(),DE=a("li"),w0e=a("strong"),Tyr=o("distilbert"),Myr=o(" \u2014 "),nJ=a("a"),Eyr=o("FlaxDistilBertForMaskedLM"),Cyr=o(" (DistilBERT model)"),wyr=l(),GE=a("li"),A0e=a("strong"),Ayr=o("electra"),yyr=o(" \u2014 "),sJ=a("a"),Lyr=o("FlaxElectraForMaskedLM"),xyr=o(" (ELECTRA model)"),$yr=l(),OE=a("li"),y0e=a("strong"),kyr=o("mbart"),Syr=o(" \u2014 "),lJ=a("a"),Ryr=o("FlaxMBartForConditionalGeneration"),Byr=o(" (mBART model)"),Pyr=l(),VE=a("li"),L0e=a("strong"),Iyr=o("roberta"),qyr=o(" \u2014 "),iJ=a("a"),Nyr=o("FlaxRobertaForMaskedLM"),jyr=o(" (RoBERTa model)"),Dyr=l(),XE=a("li"),x0e=a("strong"),Gyr=o("roformer"),Oyr=o(" \u2014 "),dJ=a("a"),Vyr=o("FlaxRoFormerForMaskedLM"),Xyr=o(" (RoFormer model)"),zyr=l(),zE=a("li"),$0e=a("strong"),Qyr=o("xlm-roberta"),Wyr=o(" \u2014 "),cJ=a("a"),Hyr=o("FlaxXLMRobertaForMaskedLM"),Uyr=o(" (XLM-RoBERTa model)"),Jyr=l(),F(QE.$$.fragment),LIe=l(),$c=a("h2"),WE=a("a"),k0e=a("span"),F(VL.$$.fragment),Yyr=l(),S0e=a("span"),Kyr=o("FlaxAutoModelForSeq2SeqLM"),xIe=l(),hr=a("div"),F(XL.$$.fragment),Zyr=l(),kc=a("p"),eLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fJ=a("a"),oLr=o("from_pretrained()"),rLr=o(" class method or the "),mJ=a("a"),tLr=o("from_config()"),aLr=o(` class
method.`),nLr=l(),zL=a("p"),sLr=o("This class cannot be instantiated directly using "),R0e=a("code"),lLr=o("__init__()"),iLr=o(" (throws an error)."),dLr=l(),Dt=a("div"),F(QL.$$.fragment),cLr=l(),B0e=a("p"),fLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mLr=l(),Sc=a("p"),gLr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),hLr=o("not"),pLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),uLr=o("from_pretrained()"),_Lr=o(" to load the model weights."),bLr=l(),F(HE.$$.fragment),vLr=l(),Gr=a("div"),F(WL.$$.fragment),FLr=l(),I0e=a("p"),TLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),MLr=l(),gn=a("p"),ELr=o("The model class to instantiate is selected based on the "),q0e=a("code"),CLr=o("model_type"),wLr=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),ALr=o("pretrained_model_name_or_path"),yLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j0e=a("code"),LLr=o("pretrained_model_name_or_path"),xLr=o(":"),$Lr=l(),Se=a("ul"),UE=a("li"),D0e=a("strong"),kLr=o("bart"),SLr=o(" \u2014 "),hJ=a("a"),RLr=o("FlaxBartForConditionalGeneration"),BLr=o(" (BART model)"),PLr=l(),JE=a("li"),G0e=a("strong"),ILr=o("blenderbot"),qLr=o(" \u2014 "),pJ=a("a"),NLr=o("FlaxBlenderbotForConditionalGeneration"),jLr=o(" (Blenderbot model)"),DLr=l(),YE=a("li"),O0e=a("strong"),GLr=o("blenderbot-small"),OLr=o(" \u2014 "),uJ=a("a"),VLr=o("FlaxBlenderbotSmallForConditionalGeneration"),XLr=o(" (BlenderbotSmall model)"),zLr=l(),KE=a("li"),V0e=a("strong"),QLr=o("encoder-decoder"),WLr=o(" \u2014 "),_J=a("a"),HLr=o("FlaxEncoderDecoderModel"),ULr=o(" (Encoder decoder model)"),JLr=l(),ZE=a("li"),X0e=a("strong"),YLr=o("marian"),KLr=o(" \u2014 "),bJ=a("a"),ZLr=o("FlaxMarianMTModel"),exr=o(" (Marian model)"),oxr=l(),e5=a("li"),z0e=a("strong"),rxr=o("mbart"),txr=o(" \u2014 "),vJ=a("a"),axr=o("FlaxMBartForConditionalGeneration"),nxr=o(" (mBART model)"),sxr=l(),o5=a("li"),Q0e=a("strong"),lxr=o("mt5"),ixr=o(" \u2014 "),FJ=a("a"),dxr=o("FlaxMT5ForConditionalGeneration"),cxr=o(" (mT5 model)"),fxr=l(),r5=a("li"),W0e=a("strong"),mxr=o("pegasus"),gxr=o(" \u2014 "),TJ=a("a"),hxr=o("FlaxPegasusForConditionalGeneration"),pxr=o(" (Pegasus model)"),uxr=l(),t5=a("li"),H0e=a("strong"),_xr=o("t5"),bxr=o(" \u2014 "),MJ=a("a"),vxr=o("FlaxT5ForConditionalGeneration"),Fxr=o(" (T5 model)"),Txr=l(),F(a5.$$.fragment),$Ie=l(),Rc=a("h2"),n5=a("a"),U0e=a("span"),F(HL.$$.fragment),Mxr=l(),J0e=a("span"),Exr=o("FlaxAutoModelForSequenceClassification"),kIe=l(),pr=a("div"),F(UL.$$.fragment),Cxr=l(),Bc=a("p"),wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EJ=a("a"),Axr=o("from_pretrained()"),yxr=o(" class method or the "),CJ=a("a"),Lxr=o("from_config()"),xxr=o(` class
method.`),$xr=l(),JL=a("p"),kxr=o("This class cannot be instantiated directly using "),Y0e=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Bxr=l(),Gt=a("div"),F(YL.$$.fragment),Pxr=l(),K0e=a("p"),Ixr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qxr=l(),Pc=a("p"),Nxr=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),jxr=o("not"),Dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" to load the model weights."),Vxr=l(),F(s5.$$.fragment),Xxr=l(),Or=a("div"),F(KL.$$.fragment),zxr=l(),eTe=a("p"),Qxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wxr=l(),hn=a("p"),Hxr=o("The model class to instantiate is selected based on the "),oTe=a("code"),Uxr=o("model_type"),Jxr=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),Zxr=o("pretrained_model_name_or_path"),e9r=o(":"),o9r=l(),$e=a("ul"),l5=a("li"),aTe=a("strong"),r9r=o("albert"),t9r=o(" \u2014 "),AJ=a("a"),a9r=o("FlaxAlbertForSequenceClassification"),n9r=o(" (ALBERT model)"),s9r=l(),i5=a("li"),nTe=a("strong"),l9r=o("bart"),i9r=o(" \u2014 "),yJ=a("a"),d9r=o("FlaxBartForSequenceClassification"),c9r=o(" (BART model)"),f9r=l(),d5=a("li"),sTe=a("strong"),m9r=o("bert"),g9r=o(" \u2014 "),LJ=a("a"),h9r=o("FlaxBertForSequenceClassification"),p9r=o(" (BERT model)"),u9r=l(),c5=a("li"),lTe=a("strong"),_9r=o("big_bird"),b9r=o(" \u2014 "),xJ=a("a"),v9r=o("FlaxBigBirdForSequenceClassification"),F9r=o(" (BigBird model)"),T9r=l(),f5=a("li"),iTe=a("strong"),M9r=o("distilbert"),E9r=o(" \u2014 "),$J=a("a"),C9r=o("FlaxDistilBertForSequenceClassification"),w9r=o(" (DistilBERT model)"),A9r=l(),m5=a("li"),dTe=a("strong"),y9r=o("electra"),L9r=o(" \u2014 "),kJ=a("a"),x9r=o("FlaxElectraForSequenceClassification"),$9r=o(" (ELECTRA model)"),k9r=l(),g5=a("li"),cTe=a("strong"),S9r=o("mbart"),R9r=o(" \u2014 "),SJ=a("a"),B9r=o("FlaxMBartForSequenceClassification"),P9r=o(" (mBART model)"),I9r=l(),h5=a("li"),fTe=a("strong"),q9r=o("roberta"),N9r=o(" \u2014 "),RJ=a("a"),j9r=o("FlaxRobertaForSequenceClassification"),D9r=o(" (RoBERTa model)"),G9r=l(),p5=a("li"),mTe=a("strong"),O9r=o("roformer"),V9r=o(" \u2014 "),BJ=a("a"),X9r=o("FlaxRoFormerForSequenceClassification"),z9r=o(" (RoFormer model)"),Q9r=l(),u5=a("li"),gTe=a("strong"),W9r=o("xlm-roberta"),H9r=o(" \u2014 "),PJ=a("a"),U9r=o("FlaxXLMRobertaForSequenceClassification"),J9r=o(" (XLM-RoBERTa model)"),Y9r=l(),F(_5.$$.fragment),SIe=l(),Ic=a("h2"),b5=a("a"),hTe=a("span"),F(ZL.$$.fragment),K9r=l(),pTe=a("span"),Z9r=o("FlaxAutoModelForQuestionAnswering"),RIe=l(),ur=a("div"),F(ex.$$.fragment),e$r=l(),qc=a("p"),o$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IJ=a("a"),r$r=o("from_pretrained()"),t$r=o(" class method or the "),qJ=a("a"),a$r=o("from_config()"),n$r=o(` class
method.`),s$r=l(),ox=a("p"),l$r=o("This class cannot be instantiated directly using "),uTe=a("code"),i$r=o("__init__()"),d$r=o(" (throws an error)."),c$r=l(),Ot=a("div"),F(rx.$$.fragment),f$r=l(),_Te=a("p"),m$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g$r=l(),Nc=a("p"),h$r=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),p$r=o("not"),u$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),_$r=o("from_pretrained()"),b$r=o(" to load the model weights."),v$r=l(),F(v5.$$.fragment),F$r=l(),Vr=a("div"),F(tx.$$.fragment),T$r=l(),vTe=a("p"),M$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E$r=l(),pn=a("p"),C$r=o("The model class to instantiate is selected based on the "),FTe=a("code"),w$r=o("model_type"),A$r=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),y$r=o("pretrained_model_name_or_path"),L$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),x$r=o("pretrained_model_name_or_path"),$$r=o(":"),k$r=l(),ke=a("ul"),F5=a("li"),ETe=a("strong"),S$r=o("albert"),R$r=o(" \u2014 "),jJ=a("a"),B$r=o("FlaxAlbertForQuestionAnswering"),P$r=o(" (ALBERT model)"),I$r=l(),T5=a("li"),CTe=a("strong"),q$r=o("bart"),N$r=o(" \u2014 "),DJ=a("a"),j$r=o("FlaxBartForQuestionAnswering"),D$r=o(" (BART model)"),G$r=l(),M5=a("li"),wTe=a("strong"),O$r=o("bert"),V$r=o(" \u2014 "),GJ=a("a"),X$r=o("FlaxBertForQuestionAnswering"),z$r=o(" (BERT model)"),Q$r=l(),E5=a("li"),ATe=a("strong"),W$r=o("big_bird"),H$r=o(" \u2014 "),OJ=a("a"),U$r=o("FlaxBigBirdForQuestionAnswering"),J$r=o(" (BigBird model)"),Y$r=l(),C5=a("li"),yTe=a("strong"),K$r=o("distilbert"),Z$r=o(" \u2014 "),VJ=a("a"),ekr=o("FlaxDistilBertForQuestionAnswering"),okr=o(" (DistilBERT model)"),rkr=l(),w5=a("li"),LTe=a("strong"),tkr=o("electra"),akr=o(" \u2014 "),XJ=a("a"),nkr=o("FlaxElectraForQuestionAnswering"),skr=o(" (ELECTRA model)"),lkr=l(),A5=a("li"),xTe=a("strong"),ikr=o("mbart"),dkr=o(" \u2014 "),zJ=a("a"),ckr=o("FlaxMBartForQuestionAnswering"),fkr=o(" (mBART model)"),mkr=l(),y5=a("li"),$Te=a("strong"),gkr=o("roberta"),hkr=o(" \u2014 "),QJ=a("a"),pkr=o("FlaxRobertaForQuestionAnswering"),ukr=o(" (RoBERTa model)"),_kr=l(),L5=a("li"),kTe=a("strong"),bkr=o("roformer"),vkr=o(" \u2014 "),WJ=a("a"),Fkr=o("FlaxRoFormerForQuestionAnswering"),Tkr=o(" (RoFormer model)"),Mkr=l(),x5=a("li"),STe=a("strong"),Ekr=o("xlm-roberta"),Ckr=o(" \u2014 "),HJ=a("a"),wkr=o("FlaxXLMRobertaForQuestionAnswering"),Akr=o(" (XLM-RoBERTa model)"),ykr=l(),F($5.$$.fragment),BIe=l(),jc=a("h2"),k5=a("a"),RTe=a("span"),F(ax.$$.fragment),Lkr=l(),BTe=a("span"),xkr=o("FlaxAutoModelForTokenClassification"),PIe=l(),_r=a("div"),F(nx.$$.fragment),$kr=l(),Dc=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UJ=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),JJ=a("a"),Bkr=o("from_config()"),Pkr=o(` class
method.`),Ikr=l(),sx=a("p"),qkr=o("This class cannot be instantiated directly using "),PTe=a("code"),Nkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Vt=a("div"),F(lx.$$.fragment),Gkr=l(),ITe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vkr=l(),Gc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),zkr=o("not"),Qkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),Wkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(S5.$$.fragment),Jkr=l(),Xr=a("div"),F(ix.$$.fragment),Ykr=l(),NTe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zkr=l(),un=a("p"),eSr=o("The model class to instantiate is selected based on the "),jTe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),Ge=a("ul"),R5=a("li"),OTe=a("strong"),iSr=o("albert"),dSr=o(" \u2014 "),KJ=a("a"),cSr=o("FlaxAlbertForTokenClassification"),fSr=o(" (ALBERT model)"),mSr=l(),B5=a("li"),VTe=a("strong"),gSr=o("bert"),hSr=o(" \u2014 "),ZJ=a("a"),pSr=o("FlaxBertForTokenClassification"),uSr=o(" (BERT model)"),_Sr=l(),P5=a("li"),XTe=a("strong"),bSr=o("big_bird"),vSr=o(" \u2014 "),eY=a("a"),FSr=o("FlaxBigBirdForTokenClassification"),TSr=o(" (BigBird model)"),MSr=l(),I5=a("li"),zTe=a("strong"),ESr=o("distilbert"),CSr=o(" \u2014 "),oY=a("a"),wSr=o("FlaxDistilBertForTokenClassification"),ASr=o(" (DistilBERT model)"),ySr=l(),q5=a("li"),QTe=a("strong"),LSr=o("electra"),xSr=o(" \u2014 "),rY=a("a"),$Sr=o("FlaxElectraForTokenClassification"),kSr=o(" (ELECTRA model)"),SSr=l(),N5=a("li"),WTe=a("strong"),RSr=o("roberta"),BSr=o(" \u2014 "),tY=a("a"),PSr=o("FlaxRobertaForTokenClassification"),ISr=o(" (RoBERTa model)"),qSr=l(),j5=a("li"),HTe=a("strong"),NSr=o("roformer"),jSr=o(" \u2014 "),aY=a("a"),DSr=o("FlaxRoFormerForTokenClassification"),GSr=o(" (RoFormer model)"),OSr=l(),D5=a("li"),UTe=a("strong"),VSr=o("xlm-roberta"),XSr=o(" \u2014 "),nY=a("a"),zSr=o("FlaxXLMRobertaForTokenClassification"),QSr=o(" (XLM-RoBERTa model)"),WSr=l(),F(G5.$$.fragment),IIe=l(),Oc=a("h2"),O5=a("a"),JTe=a("span"),F(dx.$$.fragment),HSr=l(),YTe=a("span"),USr=o("FlaxAutoModelForMultipleChoice"),qIe=l(),br=a("div"),F(cx.$$.fragment),JSr=l(),Vc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sY=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),lY=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),fx=a("p"),tRr=o("This class cannot be instantiated directly using "),KTe=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),Xt=a("div"),F(mx.$$.fragment),lRr=l(),ZTe=a("p"),iRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dRr=l(),Xc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(V5.$$.fragment),uRr=l(),zr=a("div"),F(gx.$$.fragment),_Rr=l(),o7e=a("p"),bRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vRr=l(),_n=a("p"),FRr=o("The model class to instantiate is selected based on the "),r7e=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),t7e=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),yRr=l(),Oe=a("ul"),X5=a("li"),n7e=a("strong"),LRr=o("albert"),xRr=o(" \u2014 "),dY=a("a"),$Rr=o("FlaxAlbertForMultipleChoice"),kRr=o(" (ALBERT model)"),SRr=l(),z5=a("li"),s7e=a("strong"),RRr=o("bert"),BRr=o(" \u2014 "),cY=a("a"),PRr=o("FlaxBertForMultipleChoice"),IRr=o(" (BERT model)"),qRr=l(),Q5=a("li"),l7e=a("strong"),NRr=o("big_bird"),jRr=o(" \u2014 "),fY=a("a"),DRr=o("FlaxBigBirdForMultipleChoice"),GRr=o(" (BigBird model)"),ORr=l(),W5=a("li"),i7e=a("strong"),VRr=o("distilbert"),XRr=o(" \u2014 "),mY=a("a"),zRr=o("FlaxDistilBertForMultipleChoice"),QRr=o(" (DistilBERT model)"),WRr=l(),H5=a("li"),d7e=a("strong"),HRr=o("electra"),URr=o(" \u2014 "),gY=a("a"),JRr=o("FlaxElectraForMultipleChoice"),YRr=o(" (ELECTRA model)"),KRr=l(),U5=a("li"),c7e=a("strong"),ZRr=o("roberta"),eBr=o(" \u2014 "),hY=a("a"),oBr=o("FlaxRobertaForMultipleChoice"),rBr=o(" (RoBERTa model)"),tBr=l(),J5=a("li"),f7e=a("strong"),aBr=o("roformer"),nBr=o(" \u2014 "),pY=a("a"),sBr=o("FlaxRoFormerForMultipleChoice"),lBr=o(" (RoFormer model)"),iBr=l(),Y5=a("li"),m7e=a("strong"),dBr=o("xlm-roberta"),cBr=o(" \u2014 "),uY=a("a"),fBr=o("FlaxXLMRobertaForMultipleChoice"),mBr=o(" (XLM-RoBERTa model)"),gBr=l(),F(K5.$$.fragment),NIe=l(),zc=a("h2"),Z5=a("a"),g7e=a("span"),F(hx.$$.fragment),hBr=l(),h7e=a("span"),pBr=o("FlaxAutoModelForNextSentencePrediction"),jIe=l(),vr=a("div"),F(px.$$.fragment),uBr=l(),Qc=a("p"),_Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_Y=a("a"),bBr=o("from_pretrained()"),vBr=o(" class method or the "),bY=a("a"),FBr=o("from_config()"),TBr=o(` class
method.`),MBr=l(),ux=a("p"),EBr=o("This class cannot be instantiated directly using "),p7e=a("code"),CBr=o("__init__()"),wBr=o(" (throws an error)."),ABr=l(),zt=a("div"),F(_x.$$.fragment),yBr=l(),u7e=a("p"),LBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xBr=l(),Wc=a("p"),$Br=o(`Note:
Loading a model from its configuration file does `),_7e=a("strong"),kBr=o("not"),SBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),RBr=o("from_pretrained()"),BBr=o(" to load the model weights."),PBr=l(),F(eC.$$.fragment),IBr=l(),Qr=a("div"),F(bx.$$.fragment),qBr=l(),b7e=a("p"),NBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jBr=l(),bn=a("p"),DBr=o("The model class to instantiate is selected based on the "),v7e=a("code"),GBr=o("model_type"),OBr=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),VBr=o("pretrained_model_name_or_path"),XBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=a("code"),zBr=o("pretrained_model_name_or_path"),QBr=o(":"),WBr=l(),M7e=a("ul"),oC=a("li"),E7e=a("strong"),HBr=o("bert"),UBr=o(" \u2014 "),FY=a("a"),JBr=o("FlaxBertForNextSentencePrediction"),YBr=o(" (BERT model)"),KBr=l(),F(rC.$$.fragment),DIe=l(),Hc=a("h2"),tC=a("a"),C7e=a("span"),F(vx.$$.fragment),ZBr=l(),w7e=a("span"),ePr=o("FlaxAutoModelForImageClassification"),GIe=l(),Fr=a("div"),F(Fx.$$.fragment),oPr=l(),Uc=a("p"),rPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TY=a("a"),tPr=o("from_pretrained()"),aPr=o(" class method or the "),MY=a("a"),nPr=o("from_config()"),sPr=o(` class
method.`),lPr=l(),Tx=a("p"),iPr=o("This class cannot be instantiated directly using "),A7e=a("code"),dPr=o("__init__()"),cPr=o(" (throws an error)."),fPr=l(),Qt=a("div"),F(Mx.$$.fragment),mPr=l(),y7e=a("p"),gPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hPr=l(),Jc=a("p"),pPr=o(`Note:
Loading a model from its configuration file does `),L7e=a("strong"),uPr=o("not"),_Pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),bPr=o("from_pretrained()"),vPr=o(" to load the model weights."),FPr=l(),F(aC.$$.fragment),TPr=l(),Wr=a("div"),F(Ex.$$.fragment),MPr=l(),x7e=a("p"),EPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CPr=l(),vn=a("p"),wPr=o("The model class to instantiate is selected based on the "),$7e=a("code"),APr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),$Pr=o("pretrained_model_name_or_path"),kPr=o(":"),SPr=l(),Cx=a("ul"),nC=a("li"),R7e=a("strong"),RPr=o("beit"),BPr=o(" \u2014 "),CY=a("a"),PPr=o("FlaxBeitForImageClassification"),IPr=o(" (BEiT model)"),qPr=l(),sC=a("li"),B7e=a("strong"),NPr=o("vit"),jPr=o(" \u2014 "),wY=a("a"),DPr=o("FlaxViTForImageClassification"),GPr=o(" (ViT model)"),OPr=l(),F(lC.$$.fragment),OIe=l(),Yc=a("h2"),iC=a("a"),P7e=a("span"),F(wx.$$.fragment),VPr=l(),I7e=a("span"),XPr=o("FlaxAutoModelForVision2Seq"),VIe=l(),Tr=a("div"),F(Ax.$$.fragment),zPr=l(),Kc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AY=a("a"),WPr=o("from_pretrained()"),HPr=o(" class method or the "),yY=a("a"),UPr=o("from_config()"),JPr=o(` class
method.`),YPr=l(),yx=a("p"),KPr=o("This class cannot be instantiated directly using "),q7e=a("code"),ZPr=o("__init__()"),eIr=o(" (throws an error)."),oIr=l(),Wt=a("div"),F(Lx.$$.fragment),rIr=l(),N7e=a("p"),tIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aIr=l(),Zc=a("p"),nIr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),sIr=o("not"),lIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),iIr=o("from_pretrained()"),dIr=o(" to load the model weights."),cIr=l(),F(dC.$$.fragment),fIr=l(),Hr=a("div"),F(xx.$$.fragment),mIr=l(),D7e=a("p"),gIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hIr=l(),Fn=a("p"),pIr=o("The model class to instantiate is selected based on the "),G7e=a("code"),uIr=o("model_type"),_Ir=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),bIr=o("pretrained_model_name_or_path"),vIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),FIr=o("pretrained_model_name_or_path"),TIr=o(":"),MIr=l(),X7e=a("ul"),cC=a("li"),z7e=a("strong"),EIr=o("vision-encoder-decoder"),CIr=o(" \u2014 "),xY=a("a"),wIr=o("FlaxVisionEncoderDecoderModel"),AIr=o(" (Vision Encoder decoder model)"),yIr=l(),F(fC.$$.fragment),this.h()},l(f){const _=PCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var $x=s(p);m=n($x,"A",{id:!0,class:!0,href:!0});var Q7e=s(m);u=n(Q7e,"SPAN",{});var W7e=s(u);T(d.$$.fragment,W7e),W7e.forEach(t),Q7e.forEach(t),h=i($x),Mo=n($x,"SPAN",{});var H7e=s(Mo);ri=r(H7e,"Auto Classes"),H7e.forEach(t),$x.forEach(t),tf=i(f),Kr=n(f,"P",{});var kx=s(Kr);ti=r(kx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=n(kx,"CODE",{});var U7e=s(ai);yw=r(U7e,"from_pretrained()"),U7e.forEach(t),af=r(kx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),kx.forEach(t),Ne=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ni=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var J7e=s(Mn);Lw=r(J7e,"AutoConfig"),J7e.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var Y7e=s(Cn);xw=r(Y7e,"AutoModel"),Y7e.forEach(t),si=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var K7e=s(wn);$w=r(K7e,"AutoTokenizer"),K7e.forEach(t),li=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),nf=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Sx=s(Ae);V9=r(Sx,"will create a model that is an instance of "),ii=n(Sx,"A",{href:!0});var Z7e=s(ii);X9=r(Z7e,"BertModel"),Z7e.forEach(t),z9=r(Sx,"."),Sx.forEach(t),Eo=i(f),Fa=n(f,"P",{});var Rx=s(Fa);Q9=r(Rx,"There is one class of "),sf=n(Rx,"CODE",{});var eMe=s(sf);W9=r(eMe,"AutoModel"),eMe.forEach(t),UNe=r(Rx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Rx.forEach(t),VBe=i(f),di=n(f,"H2",{class:!0});var Bx=s(di);lf=n(Bx,"A",{id:!0,class:!0,href:!0});var oMe=s(lf);TZ=n(oMe,"SPAN",{});var rMe=s(TZ);T(kw.$$.fragment,rMe),rMe.forEach(t),oMe.forEach(t),JNe=i(Bx),MZ=n(Bx,"SPAN",{});var tMe=s(MZ);YNe=r(tMe,"Extending the Auto Classes"),tMe.forEach(t),Bx.forEach(t),XBe=i(f),An=n(f,"P",{});var ef=s(An);KNe=r(ef,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),EZ=n(ef,"CODE",{});var aMe=s(EZ);ZNe=r(aMe,"NewModel"),aMe.forEach(t),eje=r(ef,", make sure you have a "),CZ=n(ef,"CODE",{});var nMe=s(CZ);oje=r(nMe,"NewModelConfig"),nMe.forEach(t),rje=r(ef,` then you can add those to the auto
classes like this:`),ef.forEach(t),zBe=i(f),T(Sw.$$.fragment,f),QBe=i(f),H9=n(f,"P",{});var sMe=s(H9);tje=r(sMe,"You will then be able to use the auto classes like you would usually do!"),sMe.forEach(t),WBe=i(f),T(df.$$.fragment,f),HBe=i(f),ci=n(f,"H2",{class:!0});var Px=s(ci);cf=n(Px,"A",{id:!0,class:!0,href:!0});var lMe=s(cf);wZ=n(lMe,"SPAN",{});var iMe=s(wZ);T(Rw.$$.fragment,iMe),iMe.forEach(t),lMe.forEach(t),aje=i(Px),AZ=n(Px,"SPAN",{});var dMe=s(AZ);nje=r(dMe,"AutoConfig"),dMe.forEach(t),Px.forEach(t),UBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(Bw.$$.fragment,Jr),sje=i(Jr),Pw=n(Jr,"P",{});var Ix=s(Pw);lje=r(Ix,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),U9=n(Ix,"A",{href:!0});var cMe=s(U9);ije=r(cMe,"from_pretrained()"),cMe.forEach(t),dje=r(Ix," class method."),Ix.forEach(t),cje=i(Jr),Iw=n(Jr,"P",{});var qx=s(Iw);fje=r(qx,"This class cannot be instantiated directly using "),yZ=n(qx,"CODE",{});var fMe=s(yZ);mje=r(fMe,"__init__()"),fMe.forEach(t),gje=r(qx," (throws an error)."),qx.forEach(t),hje=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(qw.$$.fragment,Yr),pje=i(Yr),LZ=n(Yr,"P",{});var mMe=s(LZ);uje=r(mMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),mMe.forEach(t),_je=i(Yr),fi=n(Yr,"P",{});var of=s(fi);bje=r(of,"The configuration class to instantiate is selected based on the "),xZ=n(of,"CODE",{});var gMe=s(xZ);vje=r(gMe,"model_type"),gMe.forEach(t),Fje=r(of,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),$Z=n(of,"CODE",{});var hMe=s($Z);Tje=r(hMe,"pretrained_model_name_or_path"),hMe.forEach(t),Mje=r(of,":"),of.forEach(t),Eje=i(Yr),A=n(Yr,"UL",{});var y=s(A);ff=n(y,"LI",{});var mC=s(ff);kZ=n(mC,"STRONG",{});var pMe=s(kZ);Cje=r(pMe,"albert"),pMe.forEach(t),wje=r(mC," \u2014 "),J9=n(mC,"A",{href:!0});var uMe=s(J9);Aje=r(uMe,"AlbertConfig"),uMe.forEach(t),yje=r(mC," (ALBERT model)"),mC.forEach(t),Lje=i(y),mf=n(y,"LI",{});var gC=s(mf);SZ=n(gC,"STRONG",{});var _Me=s(SZ);xje=r(_Me,"bart"),_Me.forEach(t),$je=r(gC," \u2014 "),Y9=n(gC,"A",{href:!0});var bMe=s(Y9);kje=r(bMe,"BartConfig"),bMe.forEach(t),Sje=r(gC," (BART model)"),gC.forEach(t),Rje=i(y),gf=n(y,"LI",{});var hC=s(gf);RZ=n(hC,"STRONG",{});var vMe=s(RZ);Bje=r(vMe,"beit"),vMe.forEach(t),Pje=r(hC," \u2014 "),K9=n(hC,"A",{href:!0});var FMe=s(K9);Ije=r(FMe,"BeitConfig"),FMe.forEach(t),qje=r(hC," (BEiT model)"),hC.forEach(t),Nje=i(y),hf=n(y,"LI",{});var pC=s(hf);BZ=n(pC,"STRONG",{});var TMe=s(BZ);jje=r(TMe,"bert"),TMe.forEach(t),Dje=r(pC," \u2014 "),Z9=n(pC,"A",{href:!0});var MMe=s(Z9);Gje=r(MMe,"BertConfig"),MMe.forEach(t),Oje=r(pC," (BERT model)"),pC.forEach(t),Vje=i(y),pf=n(y,"LI",{});var uC=s(pf);PZ=n(uC,"STRONG",{});var EMe=s(PZ);Xje=r(EMe,"bert-generation"),EMe.forEach(t),zje=r(uC," \u2014 "),e$=n(uC,"A",{href:!0});var CMe=s(e$);Qje=r(CMe,"BertGenerationConfig"),CMe.forEach(t),Wje=r(uC," (Bert Generation model)"),uC.forEach(t),Hje=i(y),uf=n(y,"LI",{});var _C=s(uf);IZ=n(_C,"STRONG",{});var wMe=s(IZ);Uje=r(wMe,"big_bird"),wMe.forEach(t),Jje=r(_C," \u2014 "),o$=n(_C,"A",{href:!0});var AMe=s(o$);Yje=r(AMe,"BigBirdConfig"),AMe.forEach(t),Kje=r(_C," (BigBird model)"),_C.forEach(t),Zje=i(y),_f=n(y,"LI",{});var bC=s(_f);qZ=n(bC,"STRONG",{});var yMe=s(qZ);eDe=r(yMe,"bigbird_pegasus"),yMe.forEach(t),oDe=r(bC," \u2014 "),r$=n(bC,"A",{href:!0});var LMe=s(r$);rDe=r(LMe,"BigBirdPegasusConfig"),LMe.forEach(t),tDe=r(bC," (BigBirdPegasus model)"),bC.forEach(t),aDe=i(y),bf=n(y,"LI",{});var vC=s(bf);NZ=n(vC,"STRONG",{});var xMe=s(NZ);nDe=r(xMe,"blenderbot"),xMe.forEach(t),sDe=r(vC," \u2014 "),t$=n(vC,"A",{href:!0});var $Me=s(t$);lDe=r($Me,"BlenderbotConfig"),$Me.forEach(t),iDe=r(vC," (Blenderbot model)"),vC.forEach(t),dDe=i(y),vf=n(y,"LI",{});var FC=s(vf);jZ=n(FC,"STRONG",{});var kMe=s(jZ);cDe=r(kMe,"blenderbot-small"),kMe.forEach(t),fDe=r(FC," \u2014 "),a$=n(FC,"A",{href:!0});var SMe=s(a$);mDe=r(SMe,"BlenderbotSmallConfig"),SMe.forEach(t),gDe=r(FC," (BlenderbotSmall model)"),FC.forEach(t),hDe=i(y),Ff=n(y,"LI",{});var TC=s(Ff);DZ=n(TC,"STRONG",{});var RMe=s(DZ);pDe=r(RMe,"camembert"),RMe.forEach(t),uDe=r(TC," \u2014 "),n$=n(TC,"A",{href:!0});var BMe=s(n$);_De=r(BMe,"CamembertConfig"),BMe.forEach(t),bDe=r(TC," (CamemBERT model)"),TC.forEach(t),vDe=i(y),Tf=n(y,"LI",{});var MC=s(Tf);GZ=n(MC,"STRONG",{});var PMe=s(GZ);FDe=r(PMe,"canine"),PMe.forEach(t),TDe=r(MC," \u2014 "),s$=n(MC,"A",{href:!0});var IMe=s(s$);MDe=r(IMe,"CanineConfig"),IMe.forEach(t),EDe=r(MC," (Canine model)"),MC.forEach(t),CDe=i(y),Mf=n(y,"LI",{});var EC=s(Mf);OZ=n(EC,"STRONG",{});var qMe=s(OZ);wDe=r(qMe,"clip"),qMe.forEach(t),ADe=r(EC," \u2014 "),l$=n(EC,"A",{href:!0});var NMe=s(l$);yDe=r(NMe,"CLIPConfig"),NMe.forEach(t),LDe=r(EC," (CLIP model)"),EC.forEach(t),xDe=i(y),Ef=n(y,"LI",{});var CC=s(Ef);VZ=n(CC,"STRONG",{});var jMe=s(VZ);$De=r(jMe,"convbert"),jMe.forEach(t),kDe=r(CC," \u2014 "),i$=n(CC,"A",{href:!0});var DMe=s(i$);SDe=r(DMe,"ConvBertConfig"),DMe.forEach(t),RDe=r(CC," (ConvBERT model)"),CC.forEach(t),BDe=i(y),Cf=n(y,"LI",{});var wC=s(Cf);XZ=n(wC,"STRONG",{});var GMe=s(XZ);PDe=r(GMe,"convnext"),GMe.forEach(t),IDe=r(wC," \u2014 "),d$=n(wC,"A",{href:!0});var OMe=s(d$);qDe=r(OMe,"ConvNextConfig"),OMe.forEach(t),NDe=r(wC," (ConvNext model)"),wC.forEach(t),jDe=i(y),wf=n(y,"LI",{});var AC=s(wf);zZ=n(AC,"STRONG",{});var VMe=s(zZ);DDe=r(VMe,"ctrl"),VMe.forEach(t),GDe=r(AC," \u2014 "),c$=n(AC,"A",{href:!0});var XMe=s(c$);ODe=r(XMe,"CTRLConfig"),XMe.forEach(t),VDe=r(AC," (CTRL model)"),AC.forEach(t),XDe=i(y),Af=n(y,"LI",{});var yC=s(Af);QZ=n(yC,"STRONG",{});var zMe=s(QZ);zDe=r(zMe,"data2vec-audio"),zMe.forEach(t),QDe=r(yC," \u2014 "),f$=n(yC,"A",{href:!0});var QMe=s(f$);WDe=r(QMe,"Data2VecAudioConfig"),QMe.forEach(t),HDe=r(yC," (Data2VecAudio model)"),yC.forEach(t),UDe=i(y),yf=n(y,"LI",{});var LC=s(yf);WZ=n(LC,"STRONG",{});var WMe=s(WZ);JDe=r(WMe,"data2vec-text"),WMe.forEach(t),YDe=r(LC," \u2014 "),m$=n(LC,"A",{href:!0});var HMe=s(m$);KDe=r(HMe,"Data2VecTextConfig"),HMe.forEach(t),ZDe=r(LC," (Data2VecText model)"),LC.forEach(t),eGe=i(y),Lf=n(y,"LI",{});var xC=s(Lf);HZ=n(xC,"STRONG",{});var UMe=s(HZ);oGe=r(UMe,"data2vec-vision"),UMe.forEach(t),rGe=r(xC," \u2014 "),g$=n(xC,"A",{href:!0});var JMe=s(g$);tGe=r(JMe,"Data2VecVisionConfig"),JMe.forEach(t),aGe=r(xC," (Data2VecVision model)"),xC.forEach(t),nGe=i(y),xf=n(y,"LI",{});var $C=s(xf);UZ=n($C,"STRONG",{});var YMe=s(UZ);sGe=r(YMe,"deberta"),YMe.forEach(t),lGe=r($C," \u2014 "),h$=n($C,"A",{href:!0});var KMe=s(h$);iGe=r(KMe,"DebertaConfig"),KMe.forEach(t),dGe=r($C," (DeBERTa model)"),$C.forEach(t),cGe=i(y),$f=n(y,"LI",{});var kC=s($f);JZ=n(kC,"STRONG",{});var ZMe=s(JZ);fGe=r(ZMe,"deberta-v2"),ZMe.forEach(t),mGe=r(kC," \u2014 "),p$=n(kC,"A",{href:!0});var e4e=s(p$);gGe=r(e4e,"DebertaV2Config"),e4e.forEach(t),hGe=r(kC," (DeBERTa-v2 model)"),kC.forEach(t),pGe=i(y),kf=n(y,"LI",{});var SC=s(kf);YZ=n(SC,"STRONG",{});var o4e=s(YZ);uGe=r(o4e,"decision_transformer"),o4e.forEach(t),_Ge=r(SC," \u2014 "),u$=n(SC,"A",{href:!0});var r4e=s(u$);bGe=r(r4e,"DecisionTransformerConfig"),r4e.forEach(t),vGe=r(SC," (Decision Transformer model)"),SC.forEach(t),FGe=i(y),Sf=n(y,"LI",{});var RC=s(Sf);KZ=n(RC,"STRONG",{});var t4e=s(KZ);TGe=r(t4e,"deit"),t4e.forEach(t),MGe=r(RC," \u2014 "),_$=n(RC,"A",{href:!0});var a4e=s(_$);EGe=r(a4e,"DeiTConfig"),a4e.forEach(t),CGe=r(RC," (DeiT model)"),RC.forEach(t),wGe=i(y),Rf=n(y,"LI",{});var n4e=s(Rf);ZZ=n(n4e,"STRONG",{});var xIr=s(ZZ);AGe=r(xIr,"detr"),xIr.forEach(t),yGe=r(n4e," \u2014 "),b$=n(n4e,"A",{href:!0});var $Ir=s(b$);LGe=r($Ir,"DetrConfig"),$Ir.forEach(t),xGe=r(n4e," (DETR model)"),n4e.forEach(t),$Ge=i(y),Bf=n(y,"LI",{});var s4e=s(Bf);eee=n(s4e,"STRONG",{});var kIr=s(eee);kGe=r(kIr,"distilbert"),kIr.forEach(t),SGe=r(s4e," \u2014 "),v$=n(s4e,"A",{href:!0});var SIr=s(v$);RGe=r(SIr,"DistilBertConfig"),SIr.forEach(t),BGe=r(s4e," (DistilBERT model)"),s4e.forEach(t),PGe=i(y),Pf=n(y,"LI",{});var l4e=s(Pf);oee=n(l4e,"STRONG",{});var RIr=s(oee);IGe=r(RIr,"dpr"),RIr.forEach(t),qGe=r(l4e," \u2014 "),F$=n(l4e,"A",{href:!0});var BIr=s(F$);NGe=r(BIr,"DPRConfig"),BIr.forEach(t),jGe=r(l4e," (DPR model)"),l4e.forEach(t),DGe=i(y),If=n(y,"LI",{});var i4e=s(If);ree=n(i4e,"STRONG",{});var PIr=s(ree);GGe=r(PIr,"dpt"),PIr.forEach(t),OGe=r(i4e," \u2014 "),T$=n(i4e,"A",{href:!0});var IIr=s(T$);VGe=r(IIr,"DPTConfig"),IIr.forEach(t),XGe=r(i4e," (DPT model)"),i4e.forEach(t),zGe=i(y),qf=n(y,"LI",{});var d4e=s(qf);tee=n(d4e,"STRONG",{});var qIr=s(tee);QGe=r(qIr,"electra"),qIr.forEach(t),WGe=r(d4e," \u2014 "),M$=n(d4e,"A",{href:!0});var NIr=s(M$);HGe=r(NIr,"ElectraConfig"),NIr.forEach(t),UGe=r(d4e," (ELECTRA model)"),d4e.forEach(t),JGe=i(y),Nf=n(y,"LI",{});var c4e=s(Nf);aee=n(c4e,"STRONG",{});var jIr=s(aee);YGe=r(jIr,"encoder-decoder"),jIr.forEach(t),KGe=r(c4e," \u2014 "),E$=n(c4e,"A",{href:!0});var DIr=s(E$);ZGe=r(DIr,"EncoderDecoderConfig"),DIr.forEach(t),eOe=r(c4e," (Encoder decoder model)"),c4e.forEach(t),oOe=i(y),jf=n(y,"LI",{});var f4e=s(jf);nee=n(f4e,"STRONG",{});var GIr=s(nee);rOe=r(GIr,"flaubert"),GIr.forEach(t),tOe=r(f4e," \u2014 "),C$=n(f4e,"A",{href:!0});var OIr=s(C$);aOe=r(OIr,"FlaubertConfig"),OIr.forEach(t),nOe=r(f4e," (FlauBERT model)"),f4e.forEach(t),sOe=i(y),Df=n(y,"LI",{});var m4e=s(Df);see=n(m4e,"STRONG",{});var VIr=s(see);lOe=r(VIr,"fnet"),VIr.forEach(t),iOe=r(m4e," \u2014 "),w$=n(m4e,"A",{href:!0});var XIr=s(w$);dOe=r(XIr,"FNetConfig"),XIr.forEach(t),cOe=r(m4e," (FNet model)"),m4e.forEach(t),fOe=i(y),Gf=n(y,"LI",{});var g4e=s(Gf);lee=n(g4e,"STRONG",{});var zIr=s(lee);mOe=r(zIr,"fsmt"),zIr.forEach(t),gOe=r(g4e," \u2014 "),A$=n(g4e,"A",{href:!0});var QIr=s(A$);hOe=r(QIr,"FSMTConfig"),QIr.forEach(t),pOe=r(g4e," (FairSeq Machine-Translation model)"),g4e.forEach(t),uOe=i(y),Of=n(y,"LI",{});var h4e=s(Of);iee=n(h4e,"STRONG",{});var WIr=s(iee);_Oe=r(WIr,"funnel"),WIr.forEach(t),bOe=r(h4e," \u2014 "),y$=n(h4e,"A",{href:!0});var HIr=s(y$);vOe=r(HIr,"FunnelConfig"),HIr.forEach(t),FOe=r(h4e," (Funnel Transformer model)"),h4e.forEach(t),TOe=i(y),Vf=n(y,"LI",{});var p4e=s(Vf);dee=n(p4e,"STRONG",{});var UIr=s(dee);MOe=r(UIr,"glpn"),UIr.forEach(t),EOe=r(p4e," \u2014 "),L$=n(p4e,"A",{href:!0});var JIr=s(L$);COe=r(JIr,"GLPNConfig"),JIr.forEach(t),wOe=r(p4e," (GLPN model)"),p4e.forEach(t),AOe=i(y),Xf=n(y,"LI",{});var u4e=s(Xf);cee=n(u4e,"STRONG",{});var YIr=s(cee);yOe=r(YIr,"gpt2"),YIr.forEach(t),LOe=r(u4e," \u2014 "),x$=n(u4e,"A",{href:!0});var KIr=s(x$);xOe=r(KIr,"GPT2Config"),KIr.forEach(t),$Oe=r(u4e," (OpenAI GPT-2 model)"),u4e.forEach(t),kOe=i(y),zf=n(y,"LI",{});var _4e=s(zf);fee=n(_4e,"STRONG",{});var ZIr=s(fee);SOe=r(ZIr,"gpt_neo"),ZIr.forEach(t),ROe=r(_4e," \u2014 "),$$=n(_4e,"A",{href:!0});var eqr=s($$);BOe=r(eqr,"GPTNeoConfig"),eqr.forEach(t),POe=r(_4e," (GPT Neo model)"),_4e.forEach(t),IOe=i(y),Qf=n(y,"LI",{});var b4e=s(Qf);mee=n(b4e,"STRONG",{});var oqr=s(mee);qOe=r(oqr,"gptj"),oqr.forEach(t),NOe=r(b4e," \u2014 "),k$=n(b4e,"A",{href:!0});var rqr=s(k$);jOe=r(rqr,"GPTJConfig"),rqr.forEach(t),DOe=r(b4e," (GPT-J model)"),b4e.forEach(t),GOe=i(y),Wf=n(y,"LI",{});var v4e=s(Wf);gee=n(v4e,"STRONG",{});var tqr=s(gee);OOe=r(tqr,"hubert"),tqr.forEach(t),VOe=r(v4e," \u2014 "),S$=n(v4e,"A",{href:!0});var aqr=s(S$);XOe=r(aqr,"HubertConfig"),aqr.forEach(t),zOe=r(v4e," (Hubert model)"),v4e.forEach(t),QOe=i(y),Hf=n(y,"LI",{});var F4e=s(Hf);hee=n(F4e,"STRONG",{});var nqr=s(hee);WOe=r(nqr,"ibert"),nqr.forEach(t),HOe=r(F4e," \u2014 "),R$=n(F4e,"A",{href:!0});var sqr=s(R$);UOe=r(sqr,"IBertConfig"),sqr.forEach(t),JOe=r(F4e," (I-BERT model)"),F4e.forEach(t),YOe=i(y),Uf=n(y,"LI",{});var T4e=s(Uf);pee=n(T4e,"STRONG",{});var lqr=s(pee);KOe=r(lqr,"imagegpt"),lqr.forEach(t),ZOe=r(T4e," \u2014 "),B$=n(T4e,"A",{href:!0});var iqr=s(B$);eVe=r(iqr,"ImageGPTConfig"),iqr.forEach(t),oVe=r(T4e," (ImageGPT model)"),T4e.forEach(t),rVe=i(y),Jf=n(y,"LI",{});var M4e=s(Jf);uee=n(M4e,"STRONG",{});var dqr=s(uee);tVe=r(dqr,"layoutlm"),dqr.forEach(t),aVe=r(M4e," \u2014 "),P$=n(M4e,"A",{href:!0});var cqr=s(P$);nVe=r(cqr,"LayoutLMConfig"),cqr.forEach(t),sVe=r(M4e," (LayoutLM model)"),M4e.forEach(t),lVe=i(y),Yf=n(y,"LI",{});var E4e=s(Yf);_ee=n(E4e,"STRONG",{});var fqr=s(_ee);iVe=r(fqr,"layoutlmv2"),fqr.forEach(t),dVe=r(E4e," \u2014 "),I$=n(E4e,"A",{href:!0});var mqr=s(I$);cVe=r(mqr,"LayoutLMv2Config"),mqr.forEach(t),fVe=r(E4e," (LayoutLMv2 model)"),E4e.forEach(t),mVe=i(y),Kf=n(y,"LI",{});var C4e=s(Kf);bee=n(C4e,"STRONG",{});var gqr=s(bee);gVe=r(gqr,"led"),gqr.forEach(t),hVe=r(C4e," \u2014 "),q$=n(C4e,"A",{href:!0});var hqr=s(q$);pVe=r(hqr,"LEDConfig"),hqr.forEach(t),uVe=r(C4e," (LED model)"),C4e.forEach(t),_Ve=i(y),Zf=n(y,"LI",{});var w4e=s(Zf);vee=n(w4e,"STRONG",{});var pqr=s(vee);bVe=r(pqr,"longformer"),pqr.forEach(t),vVe=r(w4e," \u2014 "),N$=n(w4e,"A",{href:!0});var uqr=s(N$);FVe=r(uqr,"LongformerConfig"),uqr.forEach(t),TVe=r(w4e," (Longformer model)"),w4e.forEach(t),MVe=i(y),em=n(y,"LI",{});var A4e=s(em);Fee=n(A4e,"STRONG",{});var _qr=s(Fee);EVe=r(_qr,"luke"),_qr.forEach(t),CVe=r(A4e," \u2014 "),j$=n(A4e,"A",{href:!0});var bqr=s(j$);wVe=r(bqr,"LukeConfig"),bqr.forEach(t),AVe=r(A4e," (LUKE model)"),A4e.forEach(t),yVe=i(y),om=n(y,"LI",{});var y4e=s(om);Tee=n(y4e,"STRONG",{});var vqr=s(Tee);LVe=r(vqr,"lxmert"),vqr.forEach(t),xVe=r(y4e," \u2014 "),D$=n(y4e,"A",{href:!0});var Fqr=s(D$);$Ve=r(Fqr,"LxmertConfig"),Fqr.forEach(t),kVe=r(y4e," (LXMERT model)"),y4e.forEach(t),SVe=i(y),rm=n(y,"LI",{});var L4e=s(rm);Mee=n(L4e,"STRONG",{});var Tqr=s(Mee);RVe=r(Tqr,"m2m_100"),Tqr.forEach(t),BVe=r(L4e," \u2014 "),G$=n(L4e,"A",{href:!0});var Mqr=s(G$);PVe=r(Mqr,"M2M100Config"),Mqr.forEach(t),IVe=r(L4e," (M2M100 model)"),L4e.forEach(t),qVe=i(y),tm=n(y,"LI",{});var x4e=s(tm);Eee=n(x4e,"STRONG",{});var Eqr=s(Eee);NVe=r(Eqr,"marian"),Eqr.forEach(t),jVe=r(x4e," \u2014 "),O$=n(x4e,"A",{href:!0});var Cqr=s(O$);DVe=r(Cqr,"MarianConfig"),Cqr.forEach(t),GVe=r(x4e," (Marian model)"),x4e.forEach(t),OVe=i(y),am=n(y,"LI",{});var $4e=s(am);Cee=n($4e,"STRONG",{});var wqr=s(Cee);VVe=r(wqr,"maskformer"),wqr.forEach(t),XVe=r($4e," \u2014 "),V$=n($4e,"A",{href:!0});var Aqr=s(V$);zVe=r(Aqr,"MaskFormerConfig"),Aqr.forEach(t),QVe=r($4e," (MaskFormer model)"),$4e.forEach(t),WVe=i(y),nm=n(y,"LI",{});var k4e=s(nm);wee=n(k4e,"STRONG",{});var yqr=s(wee);HVe=r(yqr,"mbart"),yqr.forEach(t),UVe=r(k4e," \u2014 "),X$=n(k4e,"A",{href:!0});var Lqr=s(X$);JVe=r(Lqr,"MBartConfig"),Lqr.forEach(t),YVe=r(k4e," (mBART model)"),k4e.forEach(t),KVe=i(y),sm=n(y,"LI",{});var S4e=s(sm);Aee=n(S4e,"STRONG",{});var xqr=s(Aee);ZVe=r(xqr,"megatron-bert"),xqr.forEach(t),eXe=r(S4e," \u2014 "),z$=n(S4e,"A",{href:!0});var $qr=s(z$);oXe=r($qr,"MegatronBertConfig"),$qr.forEach(t),rXe=r(S4e," (MegatronBert model)"),S4e.forEach(t),tXe=i(y),lm=n(y,"LI",{});var R4e=s(lm);yee=n(R4e,"STRONG",{});var kqr=s(yee);aXe=r(kqr,"mobilebert"),kqr.forEach(t),nXe=r(R4e," \u2014 "),Q$=n(R4e,"A",{href:!0});var Sqr=s(Q$);sXe=r(Sqr,"MobileBertConfig"),Sqr.forEach(t),lXe=r(R4e," (MobileBERT model)"),R4e.forEach(t),iXe=i(y),im=n(y,"LI",{});var B4e=s(im);Lee=n(B4e,"STRONG",{});var Rqr=s(Lee);dXe=r(Rqr,"mpnet"),Rqr.forEach(t),cXe=r(B4e," \u2014 "),W$=n(B4e,"A",{href:!0});var Bqr=s(W$);fXe=r(Bqr,"MPNetConfig"),Bqr.forEach(t),mXe=r(B4e," (MPNet model)"),B4e.forEach(t),gXe=i(y),dm=n(y,"LI",{});var P4e=s(dm);xee=n(P4e,"STRONG",{});var Pqr=s(xee);hXe=r(Pqr,"mt5"),Pqr.forEach(t),pXe=r(P4e," \u2014 "),H$=n(P4e,"A",{href:!0});var Iqr=s(H$);uXe=r(Iqr,"MT5Config"),Iqr.forEach(t),_Xe=r(P4e," (mT5 model)"),P4e.forEach(t),bXe=i(y),cm=n(y,"LI",{});var I4e=s(cm);$ee=n(I4e,"STRONG",{});var qqr=s($ee);vXe=r(qqr,"nystromformer"),qqr.forEach(t),FXe=r(I4e," \u2014 "),U$=n(I4e,"A",{href:!0});var Nqr=s(U$);TXe=r(Nqr,"NystromformerConfig"),Nqr.forEach(t),MXe=r(I4e," (Nystromformer model)"),I4e.forEach(t),EXe=i(y),fm=n(y,"LI",{});var q4e=s(fm);kee=n(q4e,"STRONG",{});var jqr=s(kee);CXe=r(jqr,"openai-gpt"),jqr.forEach(t),wXe=r(q4e," \u2014 "),J$=n(q4e,"A",{href:!0});var Dqr=s(J$);AXe=r(Dqr,"OpenAIGPTConfig"),Dqr.forEach(t),yXe=r(q4e," (OpenAI GPT model)"),q4e.forEach(t),LXe=i(y),mm=n(y,"LI",{});var N4e=s(mm);See=n(N4e,"STRONG",{});var Gqr=s(See);xXe=r(Gqr,"opt"),Gqr.forEach(t),$Xe=r(N4e," \u2014 "),Y$=n(N4e,"A",{href:!0});var Oqr=s(Y$);kXe=r(Oqr,"OPTConfig"),Oqr.forEach(t),SXe=r(N4e," (OPT model)"),N4e.forEach(t),RXe=i(y),gm=n(y,"LI",{});var j4e=s(gm);Ree=n(j4e,"STRONG",{});var Vqr=s(Ree);BXe=r(Vqr,"pegasus"),Vqr.forEach(t),PXe=r(j4e," \u2014 "),K$=n(j4e,"A",{href:!0});var Xqr=s(K$);IXe=r(Xqr,"PegasusConfig"),Xqr.forEach(t),qXe=r(j4e," (Pegasus model)"),j4e.forEach(t),NXe=i(y),hm=n(y,"LI",{});var D4e=s(hm);Bee=n(D4e,"STRONG",{});var zqr=s(Bee);jXe=r(zqr,"perceiver"),zqr.forEach(t),DXe=r(D4e," \u2014 "),Z$=n(D4e,"A",{href:!0});var Qqr=s(Z$);GXe=r(Qqr,"PerceiverConfig"),Qqr.forEach(t),OXe=r(D4e," (Perceiver model)"),D4e.forEach(t),VXe=i(y),pm=n(y,"LI",{});var G4e=s(pm);Pee=n(G4e,"STRONG",{});var Wqr=s(Pee);XXe=r(Wqr,"plbart"),Wqr.forEach(t),zXe=r(G4e," \u2014 "),ek=n(G4e,"A",{href:!0});var Hqr=s(ek);QXe=r(Hqr,"PLBartConfig"),Hqr.forEach(t),WXe=r(G4e," (PLBart model)"),G4e.forEach(t),HXe=i(y),um=n(y,"LI",{});var O4e=s(um);Iee=n(O4e,"STRONG",{});var Uqr=s(Iee);UXe=r(Uqr,"poolformer"),Uqr.forEach(t),JXe=r(O4e," \u2014 "),ok=n(O4e,"A",{href:!0});var Jqr=s(ok);YXe=r(Jqr,"PoolFormerConfig"),Jqr.forEach(t),KXe=r(O4e," (PoolFormer model)"),O4e.forEach(t),ZXe=i(y),_m=n(y,"LI",{});var V4e=s(_m);qee=n(V4e,"STRONG",{});var Yqr=s(qee);eze=r(Yqr,"prophetnet"),Yqr.forEach(t),oze=r(V4e," \u2014 "),rk=n(V4e,"A",{href:!0});var Kqr=s(rk);rze=r(Kqr,"ProphetNetConfig"),Kqr.forEach(t),tze=r(V4e," (ProphetNet model)"),V4e.forEach(t),aze=i(y),bm=n(y,"LI",{});var X4e=s(bm);Nee=n(X4e,"STRONG",{});var Zqr=s(Nee);nze=r(Zqr,"qdqbert"),Zqr.forEach(t),sze=r(X4e," \u2014 "),tk=n(X4e,"A",{href:!0});var eNr=s(tk);lze=r(eNr,"QDQBertConfig"),eNr.forEach(t),ize=r(X4e," (QDQBert model)"),X4e.forEach(t),dze=i(y),vm=n(y,"LI",{});var z4e=s(vm);jee=n(z4e,"STRONG",{});var oNr=s(jee);cze=r(oNr,"rag"),oNr.forEach(t),fze=r(z4e," \u2014 "),ak=n(z4e,"A",{href:!0});var rNr=s(ak);mze=r(rNr,"RagConfig"),rNr.forEach(t),gze=r(z4e," (RAG model)"),z4e.forEach(t),hze=i(y),Fm=n(y,"LI",{});var Q4e=s(Fm);Dee=n(Q4e,"STRONG",{});var tNr=s(Dee);pze=r(tNr,"realm"),tNr.forEach(t),uze=r(Q4e," \u2014 "),nk=n(Q4e,"A",{href:!0});var aNr=s(nk);_ze=r(aNr,"RealmConfig"),aNr.forEach(t),bze=r(Q4e," (Realm model)"),Q4e.forEach(t),vze=i(y),Tm=n(y,"LI",{});var W4e=s(Tm);Gee=n(W4e,"STRONG",{});var nNr=s(Gee);Fze=r(nNr,"reformer"),nNr.forEach(t),Tze=r(W4e," \u2014 "),sk=n(W4e,"A",{href:!0});var sNr=s(sk);Mze=r(sNr,"ReformerConfig"),sNr.forEach(t),Eze=r(W4e," (Reformer model)"),W4e.forEach(t),Cze=i(y),Mm=n(y,"LI",{});var H4e=s(Mm);Oee=n(H4e,"STRONG",{});var lNr=s(Oee);wze=r(lNr,"regnet"),lNr.forEach(t),Aze=r(H4e," \u2014 "),lk=n(H4e,"A",{href:!0});var iNr=s(lk);yze=r(iNr,"RegNetConfig"),iNr.forEach(t),Lze=r(H4e," (RegNet model)"),H4e.forEach(t),xze=i(y),Em=n(y,"LI",{});var U4e=s(Em);Vee=n(U4e,"STRONG",{});var dNr=s(Vee);$ze=r(dNr,"rembert"),dNr.forEach(t),kze=r(U4e," \u2014 "),ik=n(U4e,"A",{href:!0});var cNr=s(ik);Sze=r(cNr,"RemBertConfig"),cNr.forEach(t),Rze=r(U4e," (RemBERT model)"),U4e.forEach(t),Bze=i(y),Cm=n(y,"LI",{});var J4e=s(Cm);Xee=n(J4e,"STRONG",{});var fNr=s(Xee);Pze=r(fNr,"resnet"),fNr.forEach(t),Ize=r(J4e," \u2014 "),dk=n(J4e,"A",{href:!0});var mNr=s(dk);qze=r(mNr,"ResNetConfig"),mNr.forEach(t),Nze=r(J4e," (ResNet model)"),J4e.forEach(t),jze=i(y),wm=n(y,"LI",{});var Y4e=s(wm);zee=n(Y4e,"STRONG",{});var gNr=s(zee);Dze=r(gNr,"retribert"),gNr.forEach(t),Gze=r(Y4e," \u2014 "),ck=n(Y4e,"A",{href:!0});var hNr=s(ck);Oze=r(hNr,"RetriBertConfig"),hNr.forEach(t),Vze=r(Y4e," (RetriBERT model)"),Y4e.forEach(t),Xze=i(y),Am=n(y,"LI",{});var K4e=s(Am);Qee=n(K4e,"STRONG",{});var pNr=s(Qee);zze=r(pNr,"roberta"),pNr.forEach(t),Qze=r(K4e," \u2014 "),fk=n(K4e,"A",{href:!0});var uNr=s(fk);Wze=r(uNr,"RobertaConfig"),uNr.forEach(t),Hze=r(K4e," (RoBERTa model)"),K4e.forEach(t),Uze=i(y),ym=n(y,"LI",{});var Z4e=s(ym);Wee=n(Z4e,"STRONG",{});var _Nr=s(Wee);Jze=r(_Nr,"roformer"),_Nr.forEach(t),Yze=r(Z4e," \u2014 "),mk=n(Z4e,"A",{href:!0});var bNr=s(mk);Kze=r(bNr,"RoFormerConfig"),bNr.forEach(t),Zze=r(Z4e," (RoFormer model)"),Z4e.forEach(t),eQe=i(y),Lm=n(y,"LI",{});var eEe=s(Lm);Hee=n(eEe,"STRONG",{});var vNr=s(Hee);oQe=r(vNr,"segformer"),vNr.forEach(t),rQe=r(eEe," \u2014 "),gk=n(eEe,"A",{href:!0});var FNr=s(gk);tQe=r(FNr,"SegformerConfig"),FNr.forEach(t),aQe=r(eEe," (SegFormer model)"),eEe.forEach(t),nQe=i(y),xm=n(y,"LI",{});var oEe=s(xm);Uee=n(oEe,"STRONG",{});var TNr=s(Uee);sQe=r(TNr,"sew"),TNr.forEach(t),lQe=r(oEe," \u2014 "),hk=n(oEe,"A",{href:!0});var MNr=s(hk);iQe=r(MNr,"SEWConfig"),MNr.forEach(t),dQe=r(oEe," (SEW model)"),oEe.forEach(t),cQe=i(y),$m=n(y,"LI",{});var rEe=s($m);Jee=n(rEe,"STRONG",{});var ENr=s(Jee);fQe=r(ENr,"sew-d"),ENr.forEach(t),mQe=r(rEe," \u2014 "),pk=n(rEe,"A",{href:!0});var CNr=s(pk);gQe=r(CNr,"SEWDConfig"),CNr.forEach(t),hQe=r(rEe," (SEW-D model)"),rEe.forEach(t),pQe=i(y),km=n(y,"LI",{});var tEe=s(km);Yee=n(tEe,"STRONG",{});var wNr=s(Yee);uQe=r(wNr,"speech-encoder-decoder"),wNr.forEach(t),_Qe=r(tEe," \u2014 "),uk=n(tEe,"A",{href:!0});var ANr=s(uk);bQe=r(ANr,"SpeechEncoderDecoderConfig"),ANr.forEach(t),vQe=r(tEe," (Speech Encoder decoder model)"),tEe.forEach(t),FQe=i(y),Sm=n(y,"LI",{});var aEe=s(Sm);Kee=n(aEe,"STRONG",{});var yNr=s(Kee);TQe=r(yNr,"speech_to_text"),yNr.forEach(t),MQe=r(aEe," \u2014 "),_k=n(aEe,"A",{href:!0});var LNr=s(_k);EQe=r(LNr,"Speech2TextConfig"),LNr.forEach(t),CQe=r(aEe," (Speech2Text model)"),aEe.forEach(t),wQe=i(y),Rm=n(y,"LI",{});var nEe=s(Rm);Zee=n(nEe,"STRONG",{});var xNr=s(Zee);AQe=r(xNr,"speech_to_text_2"),xNr.forEach(t),yQe=r(nEe," \u2014 "),bk=n(nEe,"A",{href:!0});var $Nr=s(bk);LQe=r($Nr,"Speech2Text2Config"),$Nr.forEach(t),xQe=r(nEe," (Speech2Text2 model)"),nEe.forEach(t),$Qe=i(y),Bm=n(y,"LI",{});var sEe=s(Bm);eoe=n(sEe,"STRONG",{});var kNr=s(eoe);kQe=r(kNr,"splinter"),kNr.forEach(t),SQe=r(sEe," \u2014 "),vk=n(sEe,"A",{href:!0});var SNr=s(vk);RQe=r(SNr,"SplinterConfig"),SNr.forEach(t),BQe=r(sEe," (Splinter model)"),sEe.forEach(t),PQe=i(y),Pm=n(y,"LI",{});var lEe=s(Pm);ooe=n(lEe,"STRONG",{});var RNr=s(ooe);IQe=r(RNr,"squeezebert"),RNr.forEach(t),qQe=r(lEe," \u2014 "),Fk=n(lEe,"A",{href:!0});var BNr=s(Fk);NQe=r(BNr,"SqueezeBertConfig"),BNr.forEach(t),jQe=r(lEe," (SqueezeBERT model)"),lEe.forEach(t),DQe=i(y),Im=n(y,"LI",{});var iEe=s(Im);roe=n(iEe,"STRONG",{});var PNr=s(roe);GQe=r(PNr,"swin"),PNr.forEach(t),OQe=r(iEe," \u2014 "),Tk=n(iEe,"A",{href:!0});var INr=s(Tk);VQe=r(INr,"SwinConfig"),INr.forEach(t),XQe=r(iEe," (Swin model)"),iEe.forEach(t),zQe=i(y),qm=n(y,"LI",{});var dEe=s(qm);toe=n(dEe,"STRONG",{});var qNr=s(toe);QQe=r(qNr,"t5"),qNr.forEach(t),WQe=r(dEe," \u2014 "),Mk=n(dEe,"A",{href:!0});var NNr=s(Mk);HQe=r(NNr,"T5Config"),NNr.forEach(t),UQe=r(dEe," (T5 model)"),dEe.forEach(t),JQe=i(y),Nm=n(y,"LI",{});var cEe=s(Nm);aoe=n(cEe,"STRONG",{});var jNr=s(aoe);YQe=r(jNr,"tapas"),jNr.forEach(t),KQe=r(cEe," \u2014 "),Ek=n(cEe,"A",{href:!0});var DNr=s(Ek);ZQe=r(DNr,"TapasConfig"),DNr.forEach(t),eWe=r(cEe," (TAPAS model)"),cEe.forEach(t),oWe=i(y),jm=n(y,"LI",{});var fEe=s(jm);noe=n(fEe,"STRONG",{});var GNr=s(noe);rWe=r(GNr,"tapex"),GNr.forEach(t),tWe=r(fEe," \u2014 "),Ck=n(fEe,"A",{href:!0});var ONr=s(Ck);aWe=r(ONr,"BartConfig"),ONr.forEach(t),nWe=r(fEe," (TAPEX model)"),fEe.forEach(t),sWe=i(y),Dm=n(y,"LI",{});var mEe=s(Dm);soe=n(mEe,"STRONG",{});var VNr=s(soe);lWe=r(VNr,"transfo-xl"),VNr.forEach(t),iWe=r(mEe," \u2014 "),wk=n(mEe,"A",{href:!0});var XNr=s(wk);dWe=r(XNr,"TransfoXLConfig"),XNr.forEach(t),cWe=r(mEe," (Transformer-XL model)"),mEe.forEach(t),fWe=i(y),Gm=n(y,"LI",{});var gEe=s(Gm);loe=n(gEe,"STRONG",{});var zNr=s(loe);mWe=r(zNr,"trocr"),zNr.forEach(t),gWe=r(gEe," \u2014 "),Ak=n(gEe,"A",{href:!0});var QNr=s(Ak);hWe=r(QNr,"TrOCRConfig"),QNr.forEach(t),pWe=r(gEe," (TrOCR model)"),gEe.forEach(t),uWe=i(y),Om=n(y,"LI",{});var hEe=s(Om);ioe=n(hEe,"STRONG",{});var WNr=s(ioe);_We=r(WNr,"unispeech"),WNr.forEach(t),bWe=r(hEe," \u2014 "),yk=n(hEe,"A",{href:!0});var HNr=s(yk);vWe=r(HNr,"UniSpeechConfig"),HNr.forEach(t),FWe=r(hEe," (UniSpeech model)"),hEe.forEach(t),TWe=i(y),Vm=n(y,"LI",{});var pEe=s(Vm);doe=n(pEe,"STRONG",{});var UNr=s(doe);MWe=r(UNr,"unispeech-sat"),UNr.forEach(t),EWe=r(pEe," \u2014 "),Lk=n(pEe,"A",{href:!0});var JNr=s(Lk);CWe=r(JNr,"UniSpeechSatConfig"),JNr.forEach(t),wWe=r(pEe," (UniSpeechSat model)"),pEe.forEach(t),AWe=i(y),Xm=n(y,"LI",{});var uEe=s(Xm);coe=n(uEe,"STRONG",{});var YNr=s(coe);yWe=r(YNr,"van"),YNr.forEach(t),LWe=r(uEe," \u2014 "),xk=n(uEe,"A",{href:!0});var KNr=s(xk);xWe=r(KNr,"VanConfig"),KNr.forEach(t),$We=r(uEe," (VAN model)"),uEe.forEach(t),kWe=i(y),zm=n(y,"LI",{});var _Ee=s(zm);foe=n(_Ee,"STRONG",{});var ZNr=s(foe);SWe=r(ZNr,"vilt"),ZNr.forEach(t),RWe=r(_Ee," \u2014 "),$k=n(_Ee,"A",{href:!0});var ejr=s($k);BWe=r(ejr,"ViltConfig"),ejr.forEach(t),PWe=r(_Ee," (ViLT model)"),_Ee.forEach(t),IWe=i(y),Qm=n(y,"LI",{});var bEe=s(Qm);moe=n(bEe,"STRONG",{});var ojr=s(moe);qWe=r(ojr,"vision-encoder-decoder"),ojr.forEach(t),NWe=r(bEe," \u2014 "),kk=n(bEe,"A",{href:!0});var rjr=s(kk);jWe=r(rjr,"VisionEncoderDecoderConfig"),rjr.forEach(t),DWe=r(bEe," (Vision Encoder decoder model)"),bEe.forEach(t),GWe=i(y),Wm=n(y,"LI",{});var vEe=s(Wm);goe=n(vEe,"STRONG",{});var tjr=s(goe);OWe=r(tjr,"vision-text-dual-encoder"),tjr.forEach(t),VWe=r(vEe," \u2014 "),Sk=n(vEe,"A",{href:!0});var ajr=s(Sk);XWe=r(ajr,"VisionTextDualEncoderConfig"),ajr.forEach(t),zWe=r(vEe," (VisionTextDualEncoder model)"),vEe.forEach(t),QWe=i(y),Hm=n(y,"LI",{});var FEe=s(Hm);hoe=n(FEe,"STRONG",{});var njr=s(hoe);WWe=r(njr,"visual_bert"),njr.forEach(t),HWe=r(FEe," \u2014 "),Rk=n(FEe,"A",{href:!0});var sjr=s(Rk);UWe=r(sjr,"VisualBertConfig"),sjr.forEach(t),JWe=r(FEe," (VisualBert model)"),FEe.forEach(t),YWe=i(y),Um=n(y,"LI",{});var TEe=s(Um);poe=n(TEe,"STRONG",{});var ljr=s(poe);KWe=r(ljr,"vit"),ljr.forEach(t),ZWe=r(TEe," \u2014 "),Bk=n(TEe,"A",{href:!0});var ijr=s(Bk);eHe=r(ijr,"ViTConfig"),ijr.forEach(t),oHe=r(TEe," (ViT model)"),TEe.forEach(t),rHe=i(y),Jm=n(y,"LI",{});var MEe=s(Jm);uoe=n(MEe,"STRONG",{});var djr=s(uoe);tHe=r(djr,"vit_mae"),djr.forEach(t),aHe=r(MEe," \u2014 "),Pk=n(MEe,"A",{href:!0});var cjr=s(Pk);nHe=r(cjr,"ViTMAEConfig"),cjr.forEach(t),sHe=r(MEe," (ViTMAE model)"),MEe.forEach(t),lHe=i(y),Ym=n(y,"LI",{});var EEe=s(Ym);_oe=n(EEe,"STRONG",{});var fjr=s(_oe);iHe=r(fjr,"wav2vec2"),fjr.forEach(t),dHe=r(EEe," \u2014 "),Ik=n(EEe,"A",{href:!0});var mjr=s(Ik);cHe=r(mjr,"Wav2Vec2Config"),mjr.forEach(t),fHe=r(EEe," (Wav2Vec2 model)"),EEe.forEach(t),mHe=i(y),Km=n(y,"LI",{});var CEe=s(Km);boe=n(CEe,"STRONG",{});var gjr=s(boe);gHe=r(gjr,"wavlm"),gjr.forEach(t),hHe=r(CEe," \u2014 "),qk=n(CEe,"A",{href:!0});var hjr=s(qk);pHe=r(hjr,"WavLMConfig"),hjr.forEach(t),uHe=r(CEe," (WavLM model)"),CEe.forEach(t),_He=i(y),Zm=n(y,"LI",{});var wEe=s(Zm);voe=n(wEe,"STRONG",{});var pjr=s(voe);bHe=r(pjr,"xglm"),pjr.forEach(t),vHe=r(wEe," \u2014 "),Nk=n(wEe,"A",{href:!0});var ujr=s(Nk);FHe=r(ujr,"XGLMConfig"),ujr.forEach(t),THe=r(wEe," (XGLM model)"),wEe.forEach(t),MHe=i(y),eg=n(y,"LI",{});var AEe=s(eg);Foe=n(AEe,"STRONG",{});var _jr=s(Foe);EHe=r(_jr,"xlm"),_jr.forEach(t),CHe=r(AEe," \u2014 "),jk=n(AEe,"A",{href:!0});var bjr=s(jk);wHe=r(bjr,"XLMConfig"),bjr.forEach(t),AHe=r(AEe," (XLM model)"),AEe.forEach(t),yHe=i(y),og=n(y,"LI",{});var yEe=s(og);Toe=n(yEe,"STRONG",{});var vjr=s(Toe);LHe=r(vjr,"xlm-prophetnet"),vjr.forEach(t),xHe=r(yEe," \u2014 "),Dk=n(yEe,"A",{href:!0});var Fjr=s(Dk);$He=r(Fjr,"XLMProphetNetConfig"),Fjr.forEach(t),kHe=r(yEe," (XLMProphetNet model)"),yEe.forEach(t),SHe=i(y),rg=n(y,"LI",{});var LEe=s(rg);Moe=n(LEe,"STRONG",{});var Tjr=s(Moe);RHe=r(Tjr,"xlm-roberta"),Tjr.forEach(t),BHe=r(LEe," \u2014 "),Gk=n(LEe,"A",{href:!0});var Mjr=s(Gk);PHe=r(Mjr,"XLMRobertaConfig"),Mjr.forEach(t),IHe=r(LEe," (XLM-RoBERTa model)"),LEe.forEach(t),qHe=i(y),tg=n(y,"LI",{});var xEe=s(tg);Eoe=n(xEe,"STRONG",{});var Ejr=s(Eoe);NHe=r(Ejr,"xlm-roberta-xl"),Ejr.forEach(t),jHe=r(xEe," \u2014 "),Ok=n(xEe,"A",{href:!0});var Cjr=s(Ok);DHe=r(Cjr,"XLMRobertaXLConfig"),Cjr.forEach(t),GHe=r(xEe," (XLM-RoBERTa-XL model)"),xEe.forEach(t),OHe=i(y),ag=n(y,"LI",{});var $Ee=s(ag);Coe=n($Ee,"STRONG",{});var wjr=s(Coe);VHe=r(wjr,"xlnet"),wjr.forEach(t),XHe=r($Ee," \u2014 "),Vk=n($Ee,"A",{href:!0});var Ajr=s(Vk);zHe=r(Ajr,"XLNetConfig"),Ajr.forEach(t),QHe=r($Ee," (XLNet model)"),$Ee.forEach(t),WHe=i(y),ng=n(y,"LI",{});var kEe=s(ng);woe=n(kEe,"STRONG",{});var yjr=s(woe);HHe=r(yjr,"yolos"),yjr.forEach(t),UHe=r(kEe," \u2014 "),Xk=n(kEe,"A",{href:!0});var Ljr=s(Xk);JHe=r(Ljr,"YolosConfig"),Ljr.forEach(t),YHe=r(kEe," (YOLOS model)"),kEe.forEach(t),KHe=i(y),sg=n(y,"LI",{});var SEe=s(sg);Aoe=n(SEe,"STRONG",{});var xjr=s(Aoe);ZHe=r(xjr,"yoso"),xjr.forEach(t),eUe=r(SEe," \u2014 "),zk=n(SEe,"A",{href:!0});var $jr=s(zk);oUe=r($jr,"YosoConfig"),$jr.forEach(t),rUe=r(SEe," (YOSO model)"),SEe.forEach(t),y.forEach(t),tUe=i(Yr),T(lg.$$.fragment,Yr),Yr.forEach(t),aUe=i(Jr),ig=n(Jr,"DIV",{class:!0});var zIe=s(ig);T(Nw.$$.fragment,zIe),nUe=i(zIe),yoe=n(zIe,"P",{});var kjr=s(yoe);sUe=r(kjr,"Register a new configuration for this class."),kjr.forEach(t),zIe.forEach(t),Jr.forEach(t),JBe=i(f),mi=n(f,"H2",{class:!0});var QIe=s(mi);dg=n(QIe,"A",{id:!0,class:!0,href:!0});var Sjr=s(dg);Loe=n(Sjr,"SPAN",{});var Rjr=s(Loe);T(jw.$$.fragment,Rjr),Rjr.forEach(t),Sjr.forEach(t),lUe=i(QIe),xoe=n(QIe,"SPAN",{});var Bjr=s(xoe);iUe=r(Bjr,"AutoTokenizer"),Bjr.forEach(t),QIe.forEach(t),YBe=i(f),wo=n(f,"DIV",{class:!0});var Ss=s(wo);T(Dw.$$.fragment,Ss),dUe=i(Ss),Gw=n(Ss,"P",{});var WIe=s(Gw);cUe=r(WIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Qk=n(WIe,"A",{href:!0});var Pjr=s(Qk);fUe=r(Pjr,"AutoTokenizer.from_pretrained()"),Pjr.forEach(t),mUe=r(WIe," class method."),WIe.forEach(t),gUe=i(Ss),Ow=n(Ss,"P",{});var HIe=s(Ow);hUe=r(HIe,"This class cannot be instantiated directly using "),$oe=n(HIe,"CODE",{});var Ijr=s($oe);pUe=r(Ijr,"__init__()"),Ijr.forEach(t),uUe=r(HIe," (throws an error)."),HIe.forEach(t),_Ue=i(Ss),Er=n(Ss,"DIV",{class:!0});var Rs=s(Er);T(Vw.$$.fragment,Rs),bUe=i(Rs),koe=n(Rs,"P",{});var qjr=s(koe);vUe=r(qjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qjr.forEach(t),FUe=i(Rs),Ta=n(Rs,"P",{});var BC=s(Ta);TUe=r(BC,"The tokenizer class to instantiate is selected based on the "),Soe=n(BC,"CODE",{});var Njr=s(Soe);MUe=r(Njr,"model_type"),Njr.forEach(t),EUe=r(BC,` property of the config object (either
passed as an argument or loaded from `),Roe=n(BC,"CODE",{});var jjr=s(Roe);CUe=r(jjr,"pretrained_model_name_or_path"),jjr.forEach(t),wUe=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Boe=n(BC,"CODE",{});var Djr=s(Boe);AUe=r(Djr,"pretrained_model_name_or_path"),Djr.forEach(t),yUe=r(BC,":"),BC.forEach(t),LUe=i(Rs),k=n(Rs,"UL",{});var S=s(k);yn=n(S,"LI",{});var Nx=s(yn);Poe=n(Nx,"STRONG",{});var Gjr=s(Poe);xUe=r(Gjr,"albert"),Gjr.forEach(t),$Ue=r(Nx," \u2014 "),Wk=n(Nx,"A",{href:!0});var Ojr=s(Wk);kUe=r(Ojr,"AlbertTokenizer"),Ojr.forEach(t),SUe=r(Nx," or "),Hk=n(Nx,"A",{href:!0});var Vjr=s(Hk);RUe=r(Vjr,"AlbertTokenizerFast"),Vjr.forEach(t),BUe=r(Nx," (ALBERT model)"),Nx.forEach(t),PUe=i(S),Ln=n(S,"LI",{});var jx=s(Ln);Ioe=n(jx,"STRONG",{});var Xjr=s(Ioe);IUe=r(Xjr,"bart"),Xjr.forEach(t),qUe=r(jx," \u2014 "),Uk=n(jx,"A",{href:!0});var zjr=s(Uk);NUe=r(zjr,"BartTokenizer"),zjr.forEach(t),jUe=r(jx," or "),Jk=n(jx,"A",{href:!0});var Qjr=s(Jk);DUe=r(Qjr,"BartTokenizerFast"),Qjr.forEach(t),GUe=r(jx," (BART model)"),jx.forEach(t),OUe=i(S),xn=n(S,"LI",{});var Dx=s(xn);qoe=n(Dx,"STRONG",{});var Wjr=s(qoe);VUe=r(Wjr,"barthez"),Wjr.forEach(t),XUe=r(Dx," \u2014 "),Yk=n(Dx,"A",{href:!0});var Hjr=s(Yk);zUe=r(Hjr,"BarthezTokenizer"),Hjr.forEach(t),QUe=r(Dx," or "),Kk=n(Dx,"A",{href:!0});var Ujr=s(Kk);WUe=r(Ujr,"BarthezTokenizerFast"),Ujr.forEach(t),HUe=r(Dx," (BARThez model)"),Dx.forEach(t),UUe=i(S),cg=n(S,"LI",{});var REe=s(cg);Noe=n(REe,"STRONG",{});var Jjr=s(Noe);JUe=r(Jjr,"bartpho"),Jjr.forEach(t),YUe=r(REe," \u2014 "),Zk=n(REe,"A",{href:!0});var Yjr=s(Zk);KUe=r(Yjr,"BartphoTokenizer"),Yjr.forEach(t),ZUe=r(REe," (BARTpho model)"),REe.forEach(t),eJe=i(S),$n=n(S,"LI",{});var Gx=s($n);joe=n(Gx,"STRONG",{});var Kjr=s(joe);oJe=r(Kjr,"bert"),Kjr.forEach(t),rJe=r(Gx," \u2014 "),eS=n(Gx,"A",{href:!0});var Zjr=s(eS);tJe=r(Zjr,"BertTokenizer"),Zjr.forEach(t),aJe=r(Gx," or "),oS=n(Gx,"A",{href:!0});var eDr=s(oS);nJe=r(eDr,"BertTokenizerFast"),eDr.forEach(t),sJe=r(Gx," (BERT model)"),Gx.forEach(t),lJe=i(S),fg=n(S,"LI",{});var BEe=s(fg);Doe=n(BEe,"STRONG",{});var oDr=s(Doe);iJe=r(oDr,"bert-generation"),oDr.forEach(t),dJe=r(BEe," \u2014 "),rS=n(BEe,"A",{href:!0});var rDr=s(rS);cJe=r(rDr,"BertGenerationTokenizer"),rDr.forEach(t),fJe=r(BEe," (Bert Generation model)"),BEe.forEach(t),mJe=i(S),mg=n(S,"LI",{});var PEe=s(mg);Goe=n(PEe,"STRONG",{});var tDr=s(Goe);gJe=r(tDr,"bert-japanese"),tDr.forEach(t),hJe=r(PEe," \u2014 "),tS=n(PEe,"A",{href:!0});var aDr=s(tS);pJe=r(aDr,"BertJapaneseTokenizer"),aDr.forEach(t),uJe=r(PEe," (BertJapanese model)"),PEe.forEach(t),_Je=i(S),gg=n(S,"LI",{});var IEe=s(gg);Ooe=n(IEe,"STRONG",{});var nDr=s(Ooe);bJe=r(nDr,"bertweet"),nDr.forEach(t),vJe=r(IEe," \u2014 "),aS=n(IEe,"A",{href:!0});var sDr=s(aS);FJe=r(sDr,"BertweetTokenizer"),sDr.forEach(t),TJe=r(IEe," (Bertweet model)"),IEe.forEach(t),MJe=i(S),kn=n(S,"LI",{});var Ox=s(kn);Voe=n(Ox,"STRONG",{});var lDr=s(Voe);EJe=r(lDr,"big_bird"),lDr.forEach(t),CJe=r(Ox," \u2014 "),nS=n(Ox,"A",{href:!0});var iDr=s(nS);wJe=r(iDr,"BigBirdTokenizer"),iDr.forEach(t),AJe=r(Ox," or "),sS=n(Ox,"A",{href:!0});var dDr=s(sS);yJe=r(dDr,"BigBirdTokenizerFast"),dDr.forEach(t),LJe=r(Ox," (BigBird model)"),Ox.forEach(t),xJe=i(S),Sn=n(S,"LI",{});var Vx=s(Sn);Xoe=n(Vx,"STRONG",{});var cDr=s(Xoe);$Je=r(cDr,"bigbird_pegasus"),cDr.forEach(t),kJe=r(Vx," \u2014 "),lS=n(Vx,"A",{href:!0});var fDr=s(lS);SJe=r(fDr,"PegasusTokenizer"),fDr.forEach(t),RJe=r(Vx," or "),iS=n(Vx,"A",{href:!0});var mDr=s(iS);BJe=r(mDr,"PegasusTokenizerFast"),mDr.forEach(t),PJe=r(Vx," (BigBirdPegasus model)"),Vx.forEach(t),IJe=i(S),Rn=n(S,"LI",{});var Xx=s(Rn);zoe=n(Xx,"STRONG",{});var gDr=s(zoe);qJe=r(gDr,"blenderbot"),gDr.forEach(t),NJe=r(Xx," \u2014 "),dS=n(Xx,"A",{href:!0});var hDr=s(dS);jJe=r(hDr,"BlenderbotTokenizer"),hDr.forEach(t),DJe=r(Xx," or "),cS=n(Xx,"A",{href:!0});var pDr=s(cS);GJe=r(pDr,"BlenderbotTokenizerFast"),pDr.forEach(t),OJe=r(Xx," (Blenderbot model)"),Xx.forEach(t),VJe=i(S),hg=n(S,"LI",{});var qEe=s(hg);Qoe=n(qEe,"STRONG",{});var uDr=s(Qoe);XJe=r(uDr,"blenderbot-small"),uDr.forEach(t),zJe=r(qEe," \u2014 "),fS=n(qEe,"A",{href:!0});var _Dr=s(fS);QJe=r(_Dr,"BlenderbotSmallTokenizer"),_Dr.forEach(t),WJe=r(qEe," (BlenderbotSmall model)"),qEe.forEach(t),HJe=i(S),pg=n(S,"LI",{});var NEe=s(pg);Woe=n(NEe,"STRONG",{});var bDr=s(Woe);UJe=r(bDr,"byt5"),bDr.forEach(t),JJe=r(NEe," \u2014 "),mS=n(NEe,"A",{href:!0});var vDr=s(mS);YJe=r(vDr,"ByT5Tokenizer"),vDr.forEach(t),KJe=r(NEe," (ByT5 model)"),NEe.forEach(t),ZJe=i(S),Bn=n(S,"LI",{});var zx=s(Bn);Hoe=n(zx,"STRONG",{});var FDr=s(Hoe);eYe=r(FDr,"camembert"),FDr.forEach(t),oYe=r(zx," \u2014 "),gS=n(zx,"A",{href:!0});var TDr=s(gS);rYe=r(TDr,"CamembertTokenizer"),TDr.forEach(t),tYe=r(zx," or "),hS=n(zx,"A",{href:!0});var MDr=s(hS);aYe=r(MDr,"CamembertTokenizerFast"),MDr.forEach(t),nYe=r(zx," (CamemBERT model)"),zx.forEach(t),sYe=i(S),ug=n(S,"LI",{});var jEe=s(ug);Uoe=n(jEe,"STRONG",{});var EDr=s(Uoe);lYe=r(EDr,"canine"),EDr.forEach(t),iYe=r(jEe," \u2014 "),pS=n(jEe,"A",{href:!0});var CDr=s(pS);dYe=r(CDr,"CanineTokenizer"),CDr.forEach(t),cYe=r(jEe," (Canine model)"),jEe.forEach(t),fYe=i(S),Pn=n(S,"LI",{});var Qx=s(Pn);Joe=n(Qx,"STRONG",{});var wDr=s(Joe);mYe=r(wDr,"clip"),wDr.forEach(t),gYe=r(Qx," \u2014 "),uS=n(Qx,"A",{href:!0});var ADr=s(uS);hYe=r(ADr,"CLIPTokenizer"),ADr.forEach(t),pYe=r(Qx," or "),_S=n(Qx,"A",{href:!0});var yDr=s(_S);uYe=r(yDr,"CLIPTokenizerFast"),yDr.forEach(t),_Ye=r(Qx," (CLIP model)"),Qx.forEach(t),bYe=i(S),In=n(S,"LI",{});var Wx=s(In);Yoe=n(Wx,"STRONG",{});var LDr=s(Yoe);vYe=r(LDr,"convbert"),LDr.forEach(t),FYe=r(Wx," \u2014 "),bS=n(Wx,"A",{href:!0});var xDr=s(bS);TYe=r(xDr,"ConvBertTokenizer"),xDr.forEach(t),MYe=r(Wx," or "),vS=n(Wx,"A",{href:!0});var $Dr=s(vS);EYe=r($Dr,"ConvBertTokenizerFast"),$Dr.forEach(t),CYe=r(Wx," (ConvBERT model)"),Wx.forEach(t),wYe=i(S),qn=n(S,"LI",{});var Hx=s(qn);Koe=n(Hx,"STRONG",{});var kDr=s(Koe);AYe=r(kDr,"cpm"),kDr.forEach(t),yYe=r(Hx," \u2014 "),FS=n(Hx,"A",{href:!0});var SDr=s(FS);LYe=r(SDr,"CpmTokenizer"),SDr.forEach(t),xYe=r(Hx," or "),TS=n(Hx,"A",{href:!0});var RDr=s(TS);$Ye=r(RDr,"CpmTokenizerFast"),RDr.forEach(t),kYe=r(Hx," (CPM model)"),Hx.forEach(t),SYe=i(S),_g=n(S,"LI",{});var DEe=s(_g);Zoe=n(DEe,"STRONG",{});var BDr=s(Zoe);RYe=r(BDr,"ctrl"),BDr.forEach(t),BYe=r(DEe," \u2014 "),MS=n(DEe,"A",{href:!0});var PDr=s(MS);PYe=r(PDr,"CTRLTokenizer"),PDr.forEach(t),IYe=r(DEe," (CTRL model)"),DEe.forEach(t),qYe=i(S),Nn=n(S,"LI",{});var Ux=s(Nn);ere=n(Ux,"STRONG",{});var IDr=s(ere);NYe=r(IDr,"data2vec-text"),IDr.forEach(t),jYe=r(Ux," \u2014 "),ES=n(Ux,"A",{href:!0});var qDr=s(ES);DYe=r(qDr,"RobertaTokenizer"),qDr.forEach(t),GYe=r(Ux," or "),CS=n(Ux,"A",{href:!0});var NDr=s(CS);OYe=r(NDr,"RobertaTokenizerFast"),NDr.forEach(t),VYe=r(Ux," (Data2VecText model)"),Ux.forEach(t),XYe=i(S),jn=n(S,"LI",{});var Jx=s(jn);ore=n(Jx,"STRONG",{});var jDr=s(ore);zYe=r(jDr,"deberta"),jDr.forEach(t),QYe=r(Jx," \u2014 "),wS=n(Jx,"A",{href:!0});var DDr=s(wS);WYe=r(DDr,"DebertaTokenizer"),DDr.forEach(t),HYe=r(Jx," or "),AS=n(Jx,"A",{href:!0});var GDr=s(AS);UYe=r(GDr,"DebertaTokenizerFast"),GDr.forEach(t),JYe=r(Jx," (DeBERTa model)"),Jx.forEach(t),YYe=i(S),Dn=n(S,"LI",{});var Yx=s(Dn);rre=n(Yx,"STRONG",{});var ODr=s(rre);KYe=r(ODr,"deberta-v2"),ODr.forEach(t),ZYe=r(Yx," \u2014 "),yS=n(Yx,"A",{href:!0});var VDr=s(yS);eKe=r(VDr,"DebertaV2Tokenizer"),VDr.forEach(t),oKe=r(Yx," or "),LS=n(Yx,"A",{href:!0});var XDr=s(LS);rKe=r(XDr,"DebertaV2TokenizerFast"),XDr.forEach(t),tKe=r(Yx," (DeBERTa-v2 model)"),Yx.forEach(t),aKe=i(S),Gn=n(S,"LI",{});var Kx=s(Gn);tre=n(Kx,"STRONG",{});var zDr=s(tre);nKe=r(zDr,"distilbert"),zDr.forEach(t),sKe=r(Kx," \u2014 "),xS=n(Kx,"A",{href:!0});var QDr=s(xS);lKe=r(QDr,"DistilBertTokenizer"),QDr.forEach(t),iKe=r(Kx," or "),$S=n(Kx,"A",{href:!0});var WDr=s($S);dKe=r(WDr,"DistilBertTokenizerFast"),WDr.forEach(t),cKe=r(Kx," (DistilBERT model)"),Kx.forEach(t),fKe=i(S),On=n(S,"LI",{});var Zx=s(On);are=n(Zx,"STRONG",{});var HDr=s(are);mKe=r(HDr,"dpr"),HDr.forEach(t),gKe=r(Zx," \u2014 "),kS=n(Zx,"A",{href:!0});var UDr=s(kS);hKe=r(UDr,"DPRQuestionEncoderTokenizer"),UDr.forEach(t),pKe=r(Zx," or "),SS=n(Zx,"A",{href:!0});var JDr=s(SS);uKe=r(JDr,"DPRQuestionEncoderTokenizerFast"),JDr.forEach(t),_Ke=r(Zx," (DPR model)"),Zx.forEach(t),bKe=i(S),Vn=n(S,"LI",{});var e9=s(Vn);nre=n(e9,"STRONG",{});var YDr=s(nre);vKe=r(YDr,"electra"),YDr.forEach(t),FKe=r(e9," \u2014 "),RS=n(e9,"A",{href:!0});var KDr=s(RS);TKe=r(KDr,"ElectraTokenizer"),KDr.forEach(t),MKe=r(e9," or "),BS=n(e9,"A",{href:!0});var ZDr=s(BS);EKe=r(ZDr,"ElectraTokenizerFast"),ZDr.forEach(t),CKe=r(e9," (ELECTRA model)"),e9.forEach(t),wKe=i(S),bg=n(S,"LI",{});var GEe=s(bg);sre=n(GEe,"STRONG",{});var eGr=s(sre);AKe=r(eGr,"flaubert"),eGr.forEach(t),yKe=r(GEe," \u2014 "),PS=n(GEe,"A",{href:!0});var oGr=s(PS);LKe=r(oGr,"FlaubertTokenizer"),oGr.forEach(t),xKe=r(GEe," (FlauBERT model)"),GEe.forEach(t),$Ke=i(S),Xn=n(S,"LI",{});var o9=s(Xn);lre=n(o9,"STRONG",{});var rGr=s(lre);kKe=r(rGr,"fnet"),rGr.forEach(t),SKe=r(o9," \u2014 "),IS=n(o9,"A",{href:!0});var tGr=s(IS);RKe=r(tGr,"FNetTokenizer"),tGr.forEach(t),BKe=r(o9," or "),qS=n(o9,"A",{href:!0});var aGr=s(qS);PKe=r(aGr,"FNetTokenizerFast"),aGr.forEach(t),IKe=r(o9," (FNet model)"),o9.forEach(t),qKe=i(S),vg=n(S,"LI",{});var OEe=s(vg);ire=n(OEe,"STRONG",{});var nGr=s(ire);NKe=r(nGr,"fsmt"),nGr.forEach(t),jKe=r(OEe," \u2014 "),NS=n(OEe,"A",{href:!0});var sGr=s(NS);DKe=r(sGr,"FSMTTokenizer"),sGr.forEach(t),GKe=r(OEe," (FairSeq Machine-Translation model)"),OEe.forEach(t),OKe=i(S),zn=n(S,"LI",{});var r9=s(zn);dre=n(r9,"STRONG",{});var lGr=s(dre);VKe=r(lGr,"funnel"),lGr.forEach(t),XKe=r(r9," \u2014 "),jS=n(r9,"A",{href:!0});var iGr=s(jS);zKe=r(iGr,"FunnelTokenizer"),iGr.forEach(t),QKe=r(r9," or "),DS=n(r9,"A",{href:!0});var dGr=s(DS);WKe=r(dGr,"FunnelTokenizerFast"),dGr.forEach(t),HKe=r(r9," (Funnel Transformer model)"),r9.forEach(t),UKe=i(S),Qn=n(S,"LI",{});var t9=s(Qn);cre=n(t9,"STRONG",{});var cGr=s(cre);JKe=r(cGr,"gpt2"),cGr.forEach(t),YKe=r(t9," \u2014 "),GS=n(t9,"A",{href:!0});var fGr=s(GS);KKe=r(fGr,"GPT2Tokenizer"),fGr.forEach(t),ZKe=r(t9," or "),OS=n(t9,"A",{href:!0});var mGr=s(OS);eZe=r(mGr,"GPT2TokenizerFast"),mGr.forEach(t),oZe=r(t9," (OpenAI GPT-2 model)"),t9.forEach(t),rZe=i(S),Wn=n(S,"LI",{});var a9=s(Wn);fre=n(a9,"STRONG",{});var gGr=s(fre);tZe=r(gGr,"gpt_neo"),gGr.forEach(t),aZe=r(a9," \u2014 "),VS=n(a9,"A",{href:!0});var hGr=s(VS);nZe=r(hGr,"GPT2Tokenizer"),hGr.forEach(t),sZe=r(a9," or "),XS=n(a9,"A",{href:!0});var pGr=s(XS);lZe=r(pGr,"GPT2TokenizerFast"),pGr.forEach(t),iZe=r(a9," (GPT Neo model)"),a9.forEach(t),dZe=i(S),Hn=n(S,"LI",{});var n9=s(Hn);mre=n(n9,"STRONG",{});var uGr=s(mre);cZe=r(uGr,"gptj"),uGr.forEach(t),fZe=r(n9," \u2014 "),zS=n(n9,"A",{href:!0});var _Gr=s(zS);mZe=r(_Gr,"GPT2Tokenizer"),_Gr.forEach(t),gZe=r(n9," or "),QS=n(n9,"A",{href:!0});var bGr=s(QS);hZe=r(bGr,"GPT2TokenizerFast"),bGr.forEach(t),pZe=r(n9," (GPT-J model)"),n9.forEach(t),uZe=i(S),Un=n(S,"LI",{});var s9=s(Un);gre=n(s9,"STRONG",{});var vGr=s(gre);_Ze=r(vGr,"herbert"),vGr.forEach(t),bZe=r(s9," \u2014 "),WS=n(s9,"A",{href:!0});var FGr=s(WS);vZe=r(FGr,"HerbertTokenizer"),FGr.forEach(t),FZe=r(s9," or "),HS=n(s9,"A",{href:!0});var TGr=s(HS);TZe=r(TGr,"HerbertTokenizerFast"),TGr.forEach(t),MZe=r(s9," (HerBERT model)"),s9.forEach(t),EZe=i(S),Fg=n(S,"LI",{});var VEe=s(Fg);hre=n(VEe,"STRONG",{});var MGr=s(hre);CZe=r(MGr,"hubert"),MGr.forEach(t),wZe=r(VEe," \u2014 "),US=n(VEe,"A",{href:!0});var EGr=s(US);AZe=r(EGr,"Wav2Vec2CTCTokenizer"),EGr.forEach(t),yZe=r(VEe," (Hubert model)"),VEe.forEach(t),LZe=i(S),Jn=n(S,"LI",{});var l9=s(Jn);pre=n(l9,"STRONG",{});var CGr=s(pre);xZe=r(CGr,"ibert"),CGr.forEach(t),$Ze=r(l9," \u2014 "),JS=n(l9,"A",{href:!0});var wGr=s(JS);kZe=r(wGr,"RobertaTokenizer"),wGr.forEach(t),SZe=r(l9," or "),YS=n(l9,"A",{href:!0});var AGr=s(YS);RZe=r(AGr,"RobertaTokenizerFast"),AGr.forEach(t),BZe=r(l9," (I-BERT model)"),l9.forEach(t),PZe=i(S),Yn=n(S,"LI",{});var i9=s(Yn);ure=n(i9,"STRONG",{});var yGr=s(ure);IZe=r(yGr,"layoutlm"),yGr.forEach(t),qZe=r(i9," \u2014 "),KS=n(i9,"A",{href:!0});var LGr=s(KS);NZe=r(LGr,"LayoutLMTokenizer"),LGr.forEach(t),jZe=r(i9," or "),ZS=n(i9,"A",{href:!0});var xGr=s(ZS);DZe=r(xGr,"LayoutLMTokenizerFast"),xGr.forEach(t),GZe=r(i9," (LayoutLM model)"),i9.forEach(t),OZe=i(S),Kn=n(S,"LI",{});var d9=s(Kn);_re=n(d9,"STRONG",{});var $Gr=s(_re);VZe=r($Gr,"layoutlmv2"),$Gr.forEach(t),XZe=r(d9," \u2014 "),eR=n(d9,"A",{href:!0});var kGr=s(eR);zZe=r(kGr,"LayoutLMv2Tokenizer"),kGr.forEach(t),QZe=r(d9," or "),oR=n(d9,"A",{href:!0});var SGr=s(oR);WZe=r(SGr,"LayoutLMv2TokenizerFast"),SGr.forEach(t),HZe=r(d9," (LayoutLMv2 model)"),d9.forEach(t),UZe=i(S),Zn=n(S,"LI",{});var c9=s(Zn);bre=n(c9,"STRONG",{});var RGr=s(bre);JZe=r(RGr,"layoutxlm"),RGr.forEach(t),YZe=r(c9," \u2014 "),rR=n(c9,"A",{href:!0});var BGr=s(rR);KZe=r(BGr,"LayoutXLMTokenizer"),BGr.forEach(t),ZZe=r(c9," or "),tR=n(c9,"A",{href:!0});var PGr=s(tR);eeo=r(PGr,"LayoutXLMTokenizerFast"),PGr.forEach(t),oeo=r(c9," (LayoutXLM model)"),c9.forEach(t),reo=i(S),es=n(S,"LI",{});var f9=s(es);vre=n(f9,"STRONG",{});var IGr=s(vre);teo=r(IGr,"led"),IGr.forEach(t),aeo=r(f9," \u2014 "),aR=n(f9,"A",{href:!0});var qGr=s(aR);neo=r(qGr,"LEDTokenizer"),qGr.forEach(t),seo=r(f9," or "),nR=n(f9,"A",{href:!0});var NGr=s(nR);leo=r(NGr,"LEDTokenizerFast"),NGr.forEach(t),ieo=r(f9," (LED model)"),f9.forEach(t),deo=i(S),os=n(S,"LI",{});var m9=s(os);Fre=n(m9,"STRONG",{});var jGr=s(Fre);ceo=r(jGr,"longformer"),jGr.forEach(t),feo=r(m9," \u2014 "),sR=n(m9,"A",{href:!0});var DGr=s(sR);meo=r(DGr,"LongformerTokenizer"),DGr.forEach(t),geo=r(m9," or "),lR=n(m9,"A",{href:!0});var GGr=s(lR);heo=r(GGr,"LongformerTokenizerFast"),GGr.forEach(t),peo=r(m9," (Longformer model)"),m9.forEach(t),ueo=i(S),Tg=n(S,"LI",{});var XEe=s(Tg);Tre=n(XEe,"STRONG",{});var OGr=s(Tre);_eo=r(OGr,"luke"),OGr.forEach(t),beo=r(XEe," \u2014 "),iR=n(XEe,"A",{href:!0});var VGr=s(iR);veo=r(VGr,"LukeTokenizer"),VGr.forEach(t),Feo=r(XEe," (LUKE model)"),XEe.forEach(t),Teo=i(S),rs=n(S,"LI",{});var g9=s(rs);Mre=n(g9,"STRONG",{});var XGr=s(Mre);Meo=r(XGr,"lxmert"),XGr.forEach(t),Eeo=r(g9," \u2014 "),dR=n(g9,"A",{href:!0});var zGr=s(dR);Ceo=r(zGr,"LxmertTokenizer"),zGr.forEach(t),weo=r(g9," or "),cR=n(g9,"A",{href:!0});var QGr=s(cR);Aeo=r(QGr,"LxmertTokenizerFast"),QGr.forEach(t),yeo=r(g9," (LXMERT model)"),g9.forEach(t),Leo=i(S),Mg=n(S,"LI",{});var zEe=s(Mg);Ere=n(zEe,"STRONG",{});var WGr=s(Ere);xeo=r(WGr,"m2m_100"),WGr.forEach(t),$eo=r(zEe," \u2014 "),fR=n(zEe,"A",{href:!0});var HGr=s(fR);keo=r(HGr,"M2M100Tokenizer"),HGr.forEach(t),Seo=r(zEe," (M2M100 model)"),zEe.forEach(t),Reo=i(S),Eg=n(S,"LI",{});var QEe=s(Eg);Cre=n(QEe,"STRONG",{});var UGr=s(Cre);Beo=r(UGr,"marian"),UGr.forEach(t),Peo=r(QEe," \u2014 "),mR=n(QEe,"A",{href:!0});var JGr=s(mR);Ieo=r(JGr,"MarianTokenizer"),JGr.forEach(t),qeo=r(QEe," (Marian model)"),QEe.forEach(t),Neo=i(S),ts=n(S,"LI",{});var h9=s(ts);wre=n(h9,"STRONG",{});var YGr=s(wre);jeo=r(YGr,"mbart"),YGr.forEach(t),Deo=r(h9," \u2014 "),gR=n(h9,"A",{href:!0});var KGr=s(gR);Geo=r(KGr,"MBartTokenizer"),KGr.forEach(t),Oeo=r(h9," or "),hR=n(h9,"A",{href:!0});var ZGr=s(hR);Veo=r(ZGr,"MBartTokenizerFast"),ZGr.forEach(t),Xeo=r(h9," (mBART model)"),h9.forEach(t),zeo=i(S),as=n(S,"LI",{});var p9=s(as);Are=n(p9,"STRONG",{});var eOr=s(Are);Qeo=r(eOr,"mbart50"),eOr.forEach(t),Weo=r(p9," \u2014 "),pR=n(p9,"A",{href:!0});var oOr=s(pR);Heo=r(oOr,"MBart50Tokenizer"),oOr.forEach(t),Ueo=r(p9," or "),uR=n(p9,"A",{href:!0});var rOr=s(uR);Jeo=r(rOr,"MBart50TokenizerFast"),rOr.forEach(t),Yeo=r(p9," (mBART-50 model)"),p9.forEach(t),Keo=i(S),ns=n(S,"LI",{});var u9=s(ns);yre=n(u9,"STRONG",{});var tOr=s(yre);Zeo=r(tOr,"megatron-bert"),tOr.forEach(t),eoo=r(u9," \u2014 "),_R=n(u9,"A",{href:!0});var aOr=s(_R);ooo=r(aOr,"BertTokenizer"),aOr.forEach(t),roo=r(u9," or "),bR=n(u9,"A",{href:!0});var nOr=s(bR);too=r(nOr,"BertTokenizerFast"),nOr.forEach(t),aoo=r(u9," (MegatronBert model)"),u9.forEach(t),noo=i(S),Cg=n(S,"LI",{});var WEe=s(Cg);Lre=n(WEe,"STRONG",{});var sOr=s(Lre);soo=r(sOr,"mluke"),sOr.forEach(t),loo=r(WEe," \u2014 "),vR=n(WEe,"A",{href:!0});var lOr=s(vR);ioo=r(lOr,"MLukeTokenizer"),lOr.forEach(t),doo=r(WEe," (mLUKE model)"),WEe.forEach(t),coo=i(S),ss=n(S,"LI",{});var _9=s(ss);xre=n(_9,"STRONG",{});var iOr=s(xre);foo=r(iOr,"mobilebert"),iOr.forEach(t),moo=r(_9," \u2014 "),FR=n(_9,"A",{href:!0});var dOr=s(FR);goo=r(dOr,"MobileBertTokenizer"),dOr.forEach(t),hoo=r(_9," or "),TR=n(_9,"A",{href:!0});var cOr=s(TR);poo=r(cOr,"MobileBertTokenizerFast"),cOr.forEach(t),uoo=r(_9," (MobileBERT model)"),_9.forEach(t),_oo=i(S),ls=n(S,"LI",{});var b9=s(ls);$re=n(b9,"STRONG",{});var fOr=s($re);boo=r(fOr,"mpnet"),fOr.forEach(t),voo=r(b9," \u2014 "),MR=n(b9,"A",{href:!0});var mOr=s(MR);Foo=r(mOr,"MPNetTokenizer"),mOr.forEach(t),Too=r(b9," or "),ER=n(b9,"A",{href:!0});var gOr=s(ER);Moo=r(gOr,"MPNetTokenizerFast"),gOr.forEach(t),Eoo=r(b9," (MPNet model)"),b9.forEach(t),Coo=i(S),is=n(S,"LI",{});var v9=s(is);kre=n(v9,"STRONG",{});var hOr=s(kre);woo=r(hOr,"mt5"),hOr.forEach(t),Aoo=r(v9," \u2014 "),CR=n(v9,"A",{href:!0});var pOr=s(CR);yoo=r(pOr,"MT5Tokenizer"),pOr.forEach(t),Loo=r(v9," or "),wR=n(v9,"A",{href:!0});var uOr=s(wR);xoo=r(uOr,"MT5TokenizerFast"),uOr.forEach(t),$oo=r(v9," (mT5 model)"),v9.forEach(t),koo=i(S),ds=n(S,"LI",{});var F9=s(ds);Sre=n(F9,"STRONG",{});var _Or=s(Sre);Soo=r(_Or,"nystromformer"),_Or.forEach(t),Roo=r(F9," \u2014 "),AR=n(F9,"A",{href:!0});var bOr=s(AR);Boo=r(bOr,"AlbertTokenizer"),bOr.forEach(t),Poo=r(F9," or "),yR=n(F9,"A",{href:!0});var vOr=s(yR);Ioo=r(vOr,"AlbertTokenizerFast"),vOr.forEach(t),qoo=r(F9," (Nystromformer model)"),F9.forEach(t),Noo=i(S),cs=n(S,"LI",{});var T9=s(cs);Rre=n(T9,"STRONG",{});var FOr=s(Rre);joo=r(FOr,"openai-gpt"),FOr.forEach(t),Doo=r(T9," \u2014 "),LR=n(T9,"A",{href:!0});var TOr=s(LR);Goo=r(TOr,"OpenAIGPTTokenizer"),TOr.forEach(t),Ooo=r(T9," or "),xR=n(T9,"A",{href:!0});var MOr=s(xR);Voo=r(MOr,"OpenAIGPTTokenizerFast"),MOr.forEach(t),Xoo=r(T9," (OpenAI GPT model)"),T9.forEach(t),zoo=i(S),fs=n(S,"LI",{});var M9=s(fs);Bre=n(M9,"STRONG",{});var EOr=s(Bre);Qoo=r(EOr,"opt"),EOr.forEach(t),Woo=r(M9," \u2014 "),$R=n(M9,"A",{href:!0});var COr=s($R);Hoo=r(COr,"GPT2Tokenizer"),COr.forEach(t),Uoo=r(M9," or "),kR=n(M9,"A",{href:!0});var wOr=s(kR);Joo=r(wOr,"GPT2TokenizerFast"),wOr.forEach(t),Yoo=r(M9," (OPT model)"),M9.forEach(t),Koo=i(S),ms=n(S,"LI",{});var E9=s(ms);Pre=n(E9,"STRONG",{});var AOr=s(Pre);Zoo=r(AOr,"pegasus"),AOr.forEach(t),ero=r(E9," \u2014 "),SR=n(E9,"A",{href:!0});var yOr=s(SR);oro=r(yOr,"PegasusTokenizer"),yOr.forEach(t),rro=r(E9," or "),RR=n(E9,"A",{href:!0});var LOr=s(RR);tro=r(LOr,"PegasusTokenizerFast"),LOr.forEach(t),aro=r(E9," (Pegasus model)"),E9.forEach(t),nro=i(S),wg=n(S,"LI",{});var HEe=s(wg);Ire=n(HEe,"STRONG",{});var xOr=s(Ire);sro=r(xOr,"perceiver"),xOr.forEach(t),lro=r(HEe," \u2014 "),BR=n(HEe,"A",{href:!0});var $Or=s(BR);iro=r($Or,"PerceiverTokenizer"),$Or.forEach(t),dro=r(HEe," (Perceiver model)"),HEe.forEach(t),cro=i(S),Ag=n(S,"LI",{});var UEe=s(Ag);qre=n(UEe,"STRONG",{});var kOr=s(qre);fro=r(kOr,"phobert"),kOr.forEach(t),mro=r(UEe," \u2014 "),PR=n(UEe,"A",{href:!0});var SOr=s(PR);gro=r(SOr,"PhobertTokenizer"),SOr.forEach(t),hro=r(UEe," (PhoBERT model)"),UEe.forEach(t),pro=i(S),yg=n(S,"LI",{});var JEe=s(yg);Nre=n(JEe,"STRONG",{});var ROr=s(Nre);uro=r(ROr,"plbart"),ROr.forEach(t),_ro=r(JEe," \u2014 "),IR=n(JEe,"A",{href:!0});var BOr=s(IR);bro=r(BOr,"PLBartTokenizer"),BOr.forEach(t),vro=r(JEe," (PLBart model)"),JEe.forEach(t),Fro=i(S),Lg=n(S,"LI",{});var YEe=s(Lg);jre=n(YEe,"STRONG",{});var POr=s(jre);Tro=r(POr,"prophetnet"),POr.forEach(t),Mro=r(YEe," \u2014 "),qR=n(YEe,"A",{href:!0});var IOr=s(qR);Ero=r(IOr,"ProphetNetTokenizer"),IOr.forEach(t),Cro=r(YEe," (ProphetNet model)"),YEe.forEach(t),wro=i(S),gs=n(S,"LI",{});var C9=s(gs);Dre=n(C9,"STRONG",{});var qOr=s(Dre);Aro=r(qOr,"qdqbert"),qOr.forEach(t),yro=r(C9," \u2014 "),NR=n(C9,"A",{href:!0});var NOr=s(NR);Lro=r(NOr,"BertTokenizer"),NOr.forEach(t),xro=r(C9," or "),jR=n(C9,"A",{href:!0});var jOr=s(jR);$ro=r(jOr,"BertTokenizerFast"),jOr.forEach(t),kro=r(C9," (QDQBert model)"),C9.forEach(t),Sro=i(S),xg=n(S,"LI",{});var KEe=s(xg);Gre=n(KEe,"STRONG",{});var DOr=s(Gre);Rro=r(DOr,"rag"),DOr.forEach(t),Bro=r(KEe," \u2014 "),DR=n(KEe,"A",{href:!0});var GOr=s(DR);Pro=r(GOr,"RagTokenizer"),GOr.forEach(t),Iro=r(KEe," (RAG model)"),KEe.forEach(t),qro=i(S),hs=n(S,"LI",{});var w9=s(hs);Ore=n(w9,"STRONG",{});var OOr=s(Ore);Nro=r(OOr,"realm"),OOr.forEach(t),jro=r(w9," \u2014 "),GR=n(w9,"A",{href:!0});var VOr=s(GR);Dro=r(VOr,"RealmTokenizer"),VOr.forEach(t),Gro=r(w9," or "),OR=n(w9,"A",{href:!0});var XOr=s(OR);Oro=r(XOr,"RealmTokenizerFast"),XOr.forEach(t),Vro=r(w9," (Realm model)"),w9.forEach(t),Xro=i(S),ps=n(S,"LI",{});var A9=s(ps);Vre=n(A9,"STRONG",{});var zOr=s(Vre);zro=r(zOr,"reformer"),zOr.forEach(t),Qro=r(A9," \u2014 "),VR=n(A9,"A",{href:!0});var QOr=s(VR);Wro=r(QOr,"ReformerTokenizer"),QOr.forEach(t),Hro=r(A9," or "),XR=n(A9,"A",{href:!0});var WOr=s(XR);Uro=r(WOr,"ReformerTokenizerFast"),WOr.forEach(t),Jro=r(A9," (Reformer model)"),A9.forEach(t),Yro=i(S),us=n(S,"LI",{});var y9=s(us);Xre=n(y9,"STRONG",{});var HOr=s(Xre);Kro=r(HOr,"rembert"),HOr.forEach(t),Zro=r(y9," \u2014 "),zR=n(y9,"A",{href:!0});var UOr=s(zR);eto=r(UOr,"RemBertTokenizer"),UOr.forEach(t),oto=r(y9," or "),QR=n(y9,"A",{href:!0});var JOr=s(QR);rto=r(JOr,"RemBertTokenizerFast"),JOr.forEach(t),tto=r(y9," (RemBERT model)"),y9.forEach(t),ato=i(S),_s=n(S,"LI",{});var L9=s(_s);zre=n(L9,"STRONG",{});var YOr=s(zre);nto=r(YOr,"retribert"),YOr.forEach(t),sto=r(L9," \u2014 "),WR=n(L9,"A",{href:!0});var KOr=s(WR);lto=r(KOr,"RetriBertTokenizer"),KOr.forEach(t),ito=r(L9," or "),HR=n(L9,"A",{href:!0});var ZOr=s(HR);dto=r(ZOr,"RetriBertTokenizerFast"),ZOr.forEach(t),cto=r(L9," (RetriBERT model)"),L9.forEach(t),fto=i(S),bs=n(S,"LI",{});var x9=s(bs);Qre=n(x9,"STRONG",{});var eVr=s(Qre);mto=r(eVr,"roberta"),eVr.forEach(t),gto=r(x9," \u2014 "),UR=n(x9,"A",{href:!0});var oVr=s(UR);hto=r(oVr,"RobertaTokenizer"),oVr.forEach(t),pto=r(x9," or "),JR=n(x9,"A",{href:!0});var rVr=s(JR);uto=r(rVr,"RobertaTokenizerFast"),rVr.forEach(t),_to=r(x9," (RoBERTa model)"),x9.forEach(t),bto=i(S),vs=n(S,"LI",{});var $9=s(vs);Wre=n($9,"STRONG",{});var tVr=s(Wre);vto=r(tVr,"roformer"),tVr.forEach(t),Fto=r($9," \u2014 "),YR=n($9,"A",{href:!0});var aVr=s(YR);Tto=r(aVr,"RoFormerTokenizer"),aVr.forEach(t),Mto=r($9," or "),KR=n($9,"A",{href:!0});var nVr=s(KR);Eto=r(nVr,"RoFormerTokenizerFast"),nVr.forEach(t),Cto=r($9," (RoFormer model)"),$9.forEach(t),wto=i(S),$g=n(S,"LI",{});var ZEe=s($g);Hre=n(ZEe,"STRONG",{});var sVr=s(Hre);Ato=r(sVr,"speech_to_text"),sVr.forEach(t),yto=r(ZEe," \u2014 "),ZR=n(ZEe,"A",{href:!0});var lVr=s(ZR);Lto=r(lVr,"Speech2TextTokenizer"),lVr.forEach(t),xto=r(ZEe," (Speech2Text model)"),ZEe.forEach(t),$to=i(S),kg=n(S,"LI",{});var e5e=s(kg);Ure=n(e5e,"STRONG",{});var iVr=s(Ure);kto=r(iVr,"speech_to_text_2"),iVr.forEach(t),Sto=r(e5e," \u2014 "),eB=n(e5e,"A",{href:!0});var dVr=s(eB);Rto=r(dVr,"Speech2Text2Tokenizer"),dVr.forEach(t),Bto=r(e5e," (Speech2Text2 model)"),e5e.forEach(t),Pto=i(S),Fs=n(S,"LI",{});var k9=s(Fs);Jre=n(k9,"STRONG",{});var cVr=s(Jre);Ito=r(cVr,"splinter"),cVr.forEach(t),qto=r(k9," \u2014 "),oB=n(k9,"A",{href:!0});var fVr=s(oB);Nto=r(fVr,"SplinterTokenizer"),fVr.forEach(t),jto=r(k9," or "),rB=n(k9,"A",{href:!0});var mVr=s(rB);Dto=r(mVr,"SplinterTokenizerFast"),mVr.forEach(t),Gto=r(k9," (Splinter model)"),k9.forEach(t),Oto=i(S),Ts=n(S,"LI",{});var S9=s(Ts);Yre=n(S9,"STRONG",{});var gVr=s(Yre);Vto=r(gVr,"squeezebert"),gVr.forEach(t),Xto=r(S9," \u2014 "),tB=n(S9,"A",{href:!0});var hVr=s(tB);zto=r(hVr,"SqueezeBertTokenizer"),hVr.forEach(t),Qto=r(S9," or "),aB=n(S9,"A",{href:!0});var pVr=s(aB);Wto=r(pVr,"SqueezeBertTokenizerFast"),pVr.forEach(t),Hto=r(S9," (SqueezeBERT model)"),S9.forEach(t),Uto=i(S),Ms=n(S,"LI",{});var R9=s(Ms);Kre=n(R9,"STRONG",{});var uVr=s(Kre);Jto=r(uVr,"t5"),uVr.forEach(t),Yto=r(R9," \u2014 "),nB=n(R9,"A",{href:!0});var _Vr=s(nB);Kto=r(_Vr,"T5Tokenizer"),_Vr.forEach(t),Zto=r(R9," or "),sB=n(R9,"A",{href:!0});var bVr=s(sB);eao=r(bVr,"T5TokenizerFast"),bVr.forEach(t),oao=r(R9," (T5 model)"),R9.forEach(t),rao=i(S),Sg=n(S,"LI",{});var o5e=s(Sg);Zre=n(o5e,"STRONG",{});var vVr=s(Zre);tao=r(vVr,"tapas"),vVr.forEach(t),aao=r(o5e," \u2014 "),lB=n(o5e,"A",{href:!0});var FVr=s(lB);nao=r(FVr,"TapasTokenizer"),FVr.forEach(t),sao=r(o5e," (TAPAS model)"),o5e.forEach(t),lao=i(S),Rg=n(S,"LI",{});var r5e=s(Rg);ete=n(r5e,"STRONG",{});var TVr=s(ete);iao=r(TVr,"tapex"),TVr.forEach(t),dao=r(r5e," \u2014 "),iB=n(r5e,"A",{href:!0});var MVr=s(iB);cao=r(MVr,"TapexTokenizer"),MVr.forEach(t),fao=r(r5e," (TAPEX model)"),r5e.forEach(t),mao=i(S),Bg=n(S,"LI",{});var t5e=s(Bg);ote=n(t5e,"STRONG",{});var EVr=s(ote);gao=r(EVr,"transfo-xl"),EVr.forEach(t),hao=r(t5e," \u2014 "),dB=n(t5e,"A",{href:!0});var CVr=s(dB);pao=r(CVr,"TransfoXLTokenizer"),CVr.forEach(t),uao=r(t5e," (Transformer-XL model)"),t5e.forEach(t),_ao=i(S),Es=n(S,"LI",{});var B9=s(Es);rte=n(B9,"STRONG",{});var wVr=s(rte);bao=r(wVr,"visual_bert"),wVr.forEach(t),vao=r(B9," \u2014 "),cB=n(B9,"A",{href:!0});var AVr=s(cB);Fao=r(AVr,"BertTokenizer"),AVr.forEach(t),Tao=r(B9," or "),fB=n(B9,"A",{href:!0});var yVr=s(fB);Mao=r(yVr,"BertTokenizerFast"),yVr.forEach(t),Eao=r(B9," (VisualBert model)"),B9.forEach(t),Cao=i(S),Pg=n(S,"LI",{});var a5e=s(Pg);tte=n(a5e,"STRONG",{});var LVr=s(tte);wao=r(LVr,"wav2vec2"),LVr.forEach(t),Aao=r(a5e," \u2014 "),mB=n(a5e,"A",{href:!0});var xVr=s(mB);yao=r(xVr,"Wav2Vec2CTCTokenizer"),xVr.forEach(t),Lao=r(a5e," (Wav2Vec2 model)"),a5e.forEach(t),xao=i(S),Ig=n(S,"LI",{});var n5e=s(Ig);ate=n(n5e,"STRONG",{});var $Vr=s(ate);$ao=r($Vr,"wav2vec2_phoneme"),$Vr.forEach(t),kao=r(n5e," \u2014 "),gB=n(n5e,"A",{href:!0});var kVr=s(gB);Sao=r(kVr,"Wav2Vec2PhonemeCTCTokenizer"),kVr.forEach(t),Rao=r(n5e," (Wav2Vec2Phoneme model)"),n5e.forEach(t),Bao=i(S),Cs=n(S,"LI",{});var P9=s(Cs);nte=n(P9,"STRONG",{});var SVr=s(nte);Pao=r(SVr,"xglm"),SVr.forEach(t),Iao=r(P9," \u2014 "),hB=n(P9,"A",{href:!0});var RVr=s(hB);qao=r(RVr,"XGLMTokenizer"),RVr.forEach(t),Nao=r(P9," or "),pB=n(P9,"A",{href:!0});var BVr=s(pB);jao=r(BVr,"XGLMTokenizerFast"),BVr.forEach(t),Dao=r(P9," (XGLM model)"),P9.forEach(t),Gao=i(S),qg=n(S,"LI",{});var s5e=s(qg);ste=n(s5e,"STRONG",{});var PVr=s(ste);Oao=r(PVr,"xlm"),PVr.forEach(t),Vao=r(s5e," \u2014 "),uB=n(s5e,"A",{href:!0});var IVr=s(uB);Xao=r(IVr,"XLMTokenizer"),IVr.forEach(t),zao=r(s5e," (XLM model)"),s5e.forEach(t),Qao=i(S),Ng=n(S,"LI",{});var l5e=s(Ng);lte=n(l5e,"STRONG",{});var qVr=s(lte);Wao=r(qVr,"xlm-prophetnet"),qVr.forEach(t),Hao=r(l5e," \u2014 "),_B=n(l5e,"A",{href:!0});var NVr=s(_B);Uao=r(NVr,"XLMProphetNetTokenizer"),NVr.forEach(t),Jao=r(l5e," (XLMProphetNet model)"),l5e.forEach(t),Yao=i(S),ws=n(S,"LI",{});var I9=s(ws);ite=n(I9,"STRONG",{});var jVr=s(ite);Kao=r(jVr,"xlm-roberta"),jVr.forEach(t),Zao=r(I9," \u2014 "),bB=n(I9,"A",{href:!0});var DVr=s(bB);eno=r(DVr,"XLMRobertaTokenizer"),DVr.forEach(t),ono=r(I9," or "),vB=n(I9,"A",{href:!0});var GVr=s(vB);rno=r(GVr,"XLMRobertaTokenizerFast"),GVr.forEach(t),tno=r(I9," (XLM-RoBERTa model)"),I9.forEach(t),ano=i(S),As=n(S,"LI",{});var q9=s(As);dte=n(q9,"STRONG",{});var OVr=s(dte);nno=r(OVr,"xlm-roberta-xl"),OVr.forEach(t),sno=r(q9," \u2014 "),FB=n(q9,"A",{href:!0});var VVr=s(FB);lno=r(VVr,"RobertaTokenizer"),VVr.forEach(t),ino=r(q9," or "),TB=n(q9,"A",{href:!0});var XVr=s(TB);dno=r(XVr,"RobertaTokenizerFast"),XVr.forEach(t),cno=r(q9," (XLM-RoBERTa-XL model)"),q9.forEach(t),fno=i(S),ys=n(S,"LI",{});var N9=s(ys);cte=n(N9,"STRONG",{});var zVr=s(cte);mno=r(zVr,"xlnet"),zVr.forEach(t),gno=r(N9," \u2014 "),MB=n(N9,"A",{href:!0});var QVr=s(MB);hno=r(QVr,"XLNetTokenizer"),QVr.forEach(t),pno=r(N9," or "),EB=n(N9,"A",{href:!0});var WVr=s(EB);uno=r(WVr,"XLNetTokenizerFast"),WVr.forEach(t),_no=r(N9," (XLNet model)"),N9.forEach(t),bno=i(S),Ls=n(S,"LI",{});var j9=s(Ls);fte=n(j9,"STRONG",{});var HVr=s(fte);vno=r(HVr,"yoso"),HVr.forEach(t),Fno=r(j9," \u2014 "),CB=n(j9,"A",{href:!0});var UVr=s(CB);Tno=r(UVr,"AlbertTokenizer"),UVr.forEach(t),Mno=r(j9," or "),wB=n(j9,"A",{href:!0});var JVr=s(wB);Eno=r(JVr,"AlbertTokenizerFast"),JVr.forEach(t),Cno=r(j9," (YOSO model)"),j9.forEach(t),S.forEach(t),wno=i(Rs),T(jg.$$.fragment,Rs),Rs.forEach(t),Ano=i(Ss),Dg=n(Ss,"DIV",{class:!0});var UIe=s(Dg);T(Xw.$$.fragment,UIe),yno=i(UIe),mte=n(UIe,"P",{});var YVr=s(mte);Lno=r(YVr,"Register a new tokenizer in this mapping."),YVr.forEach(t),UIe.forEach(t),Ss.forEach(t),KBe=i(f),gi=n(f,"H2",{class:!0});var JIe=s(gi);Gg=n(JIe,"A",{id:!0,class:!0,href:!0});var KVr=s(Gg);gte=n(KVr,"SPAN",{});var ZVr=s(gte);T(zw.$$.fragment,ZVr),ZVr.forEach(t),KVr.forEach(t),xno=i(JIe),hte=n(JIe,"SPAN",{});var eXr=s(hte);$no=r(eXr,"AutoFeatureExtractor"),eXr.forEach(t),JIe.forEach(t),ZBe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(Qw.$$.fragment,Bs),kno=i(Bs),Ww=n(Bs,"P",{});var YIe=s(Ww);Sno=r(YIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AB=n(YIe,"A",{href:!0});var oXr=s(AB);Rno=r(oXr,"AutoFeatureExtractor.from_pretrained()"),oXr.forEach(t),Bno=r(YIe," class method."),YIe.forEach(t),Pno=i(Bs),Hw=n(Bs,"P",{});var KIe=s(Hw);Ino=r(KIe,"This class cannot be instantiated directly using "),pte=n(KIe,"CODE",{});var rXr=s(pte);qno=r(rXr,"__init__()"),rXr.forEach(t),Nno=r(KIe," (throws an error)."),KIe.forEach(t),jno=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ht=s(Qe);T(Uw.$$.fragment,Ht),Dno=i(Ht),ute=n(Ht,"P",{});var tXr=s(ute);Gno=r(tXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),tXr.forEach(t),Ono=i(Ht),Ma=n(Ht,"P",{});var PC=s(Ma);Vno=r(PC,"The feature extractor class to instantiate is selected based on the "),_te=n(PC,"CODE",{});var aXr=s(_te);Xno=r(aXr,"model_type"),aXr.forEach(t),zno=r(PC,` property of the config object
(either passed as an argument or loaded from `),bte=n(PC,"CODE",{});var nXr=s(bte);Qno=r(nXr,"pretrained_model_name_or_path"),nXr.forEach(t),Wno=r(PC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),vte=n(PC,"CODE",{});var sXr=s(vte);Hno=r(sXr,"pretrained_model_name_or_path"),sXr.forEach(t),Uno=r(PC,":"),PC.forEach(t),Jno=i(Ht),ae=n(Ht,"UL",{});var se=s(ae);Og=n(se,"LI",{});var i5e=s(Og);Fte=n(i5e,"STRONG",{});var lXr=s(Fte);Yno=r(lXr,"beit"),lXr.forEach(t),Kno=r(i5e," \u2014 "),yB=n(i5e,"A",{href:!0});var iXr=s(yB);Zno=r(iXr,"BeitFeatureExtractor"),iXr.forEach(t),eso=r(i5e," (BEiT model)"),i5e.forEach(t),oso=i(se),Vg=n(se,"LI",{});var d5e=s(Vg);Tte=n(d5e,"STRONG",{});var dXr=s(Tte);rso=r(dXr,"clip"),dXr.forEach(t),tso=r(d5e," \u2014 "),LB=n(d5e,"A",{href:!0});var cXr=s(LB);aso=r(cXr,"CLIPFeatureExtractor"),cXr.forEach(t),nso=r(d5e," (CLIP model)"),d5e.forEach(t),sso=i(se),Xg=n(se,"LI",{});var c5e=s(Xg);Mte=n(c5e,"STRONG",{});var fXr=s(Mte);lso=r(fXr,"convnext"),fXr.forEach(t),iso=r(c5e," \u2014 "),xB=n(c5e,"A",{href:!0});var mXr=s(xB);dso=r(mXr,"ConvNextFeatureExtractor"),mXr.forEach(t),cso=r(c5e," (ConvNext model)"),c5e.forEach(t),fso=i(se),zg=n(se,"LI",{});var f5e=s(zg);Ete=n(f5e,"STRONG",{});var gXr=s(Ete);mso=r(gXr,"data2vec-audio"),gXr.forEach(t),gso=r(f5e," \u2014 "),$B=n(f5e,"A",{href:!0});var hXr=s($B);hso=r(hXr,"Wav2Vec2FeatureExtractor"),hXr.forEach(t),pso=r(f5e," (Data2VecAudio model)"),f5e.forEach(t),uso=i(se),Qg=n(se,"LI",{});var m5e=s(Qg);Cte=n(m5e,"STRONG",{});var pXr=s(Cte);_so=r(pXr,"data2vec-vision"),pXr.forEach(t),bso=r(m5e," \u2014 "),kB=n(m5e,"A",{href:!0});var uXr=s(kB);vso=r(uXr,"BeitFeatureExtractor"),uXr.forEach(t),Fso=r(m5e," (Data2VecVision model)"),m5e.forEach(t),Tso=i(se),Wg=n(se,"LI",{});var g5e=s(Wg);wte=n(g5e,"STRONG",{});var _Xr=s(wte);Mso=r(_Xr,"deit"),_Xr.forEach(t),Eso=r(g5e," \u2014 "),SB=n(g5e,"A",{href:!0});var bXr=s(SB);Cso=r(bXr,"DeiTFeatureExtractor"),bXr.forEach(t),wso=r(g5e," (DeiT model)"),g5e.forEach(t),Aso=i(se),Hg=n(se,"LI",{});var h5e=s(Hg);Ate=n(h5e,"STRONG",{});var vXr=s(Ate);yso=r(vXr,"detr"),vXr.forEach(t),Lso=r(h5e," \u2014 "),RB=n(h5e,"A",{href:!0});var FXr=s(RB);xso=r(FXr,"DetrFeatureExtractor"),FXr.forEach(t),$so=r(h5e," (DETR model)"),h5e.forEach(t),kso=i(se),Ug=n(se,"LI",{});var p5e=s(Ug);yte=n(p5e,"STRONG",{});var TXr=s(yte);Sso=r(TXr,"dpt"),TXr.forEach(t),Rso=r(p5e," \u2014 "),BB=n(p5e,"A",{href:!0});var MXr=s(BB);Bso=r(MXr,"DPTFeatureExtractor"),MXr.forEach(t),Pso=r(p5e," (DPT model)"),p5e.forEach(t),Iso=i(se),Jg=n(se,"LI",{});var u5e=s(Jg);Lte=n(u5e,"STRONG",{});var EXr=s(Lte);qso=r(EXr,"glpn"),EXr.forEach(t),Nso=r(u5e," \u2014 "),PB=n(u5e,"A",{href:!0});var CXr=s(PB);jso=r(CXr,"GLPNFeatureExtractor"),CXr.forEach(t),Dso=r(u5e," (GLPN model)"),u5e.forEach(t),Gso=i(se),Yg=n(se,"LI",{});var _5e=s(Yg);xte=n(_5e,"STRONG",{});var wXr=s(xte);Oso=r(wXr,"hubert"),wXr.forEach(t),Vso=r(_5e," \u2014 "),IB=n(_5e,"A",{href:!0});var AXr=s(IB);Xso=r(AXr,"Wav2Vec2FeatureExtractor"),AXr.forEach(t),zso=r(_5e," (Hubert model)"),_5e.forEach(t),Qso=i(se),Kg=n(se,"LI",{});var b5e=s(Kg);$te=n(b5e,"STRONG",{});var yXr=s($te);Wso=r(yXr,"layoutlmv2"),yXr.forEach(t),Hso=r(b5e," \u2014 "),qB=n(b5e,"A",{href:!0});var LXr=s(qB);Uso=r(LXr,"LayoutLMv2FeatureExtractor"),LXr.forEach(t),Jso=r(b5e," (LayoutLMv2 model)"),b5e.forEach(t),Yso=i(se),Zg=n(se,"LI",{});var v5e=s(Zg);kte=n(v5e,"STRONG",{});var xXr=s(kte);Kso=r(xXr,"maskformer"),xXr.forEach(t),Zso=r(v5e," \u2014 "),NB=n(v5e,"A",{href:!0});var $Xr=s(NB);elo=r($Xr,"MaskFormerFeatureExtractor"),$Xr.forEach(t),olo=r(v5e," (MaskFormer model)"),v5e.forEach(t),rlo=i(se),eh=n(se,"LI",{});var F5e=s(eh);Ste=n(F5e,"STRONG",{});var kXr=s(Ste);tlo=r(kXr,"perceiver"),kXr.forEach(t),alo=r(F5e," \u2014 "),jB=n(F5e,"A",{href:!0});var SXr=s(jB);nlo=r(SXr,"PerceiverFeatureExtractor"),SXr.forEach(t),slo=r(F5e," (Perceiver model)"),F5e.forEach(t),llo=i(se),oh=n(se,"LI",{});var T5e=s(oh);Rte=n(T5e,"STRONG",{});var RXr=s(Rte);ilo=r(RXr,"poolformer"),RXr.forEach(t),dlo=r(T5e," \u2014 "),DB=n(T5e,"A",{href:!0});var BXr=s(DB);clo=r(BXr,"PoolFormerFeatureExtractor"),BXr.forEach(t),flo=r(T5e," (PoolFormer model)"),T5e.forEach(t),mlo=i(se),rh=n(se,"LI",{});var M5e=s(rh);Bte=n(M5e,"STRONG",{});var PXr=s(Bte);glo=r(PXr,"regnet"),PXr.forEach(t),hlo=r(M5e," \u2014 "),GB=n(M5e,"A",{href:!0});var IXr=s(GB);plo=r(IXr,"ConvNextFeatureExtractor"),IXr.forEach(t),ulo=r(M5e," (RegNet model)"),M5e.forEach(t),_lo=i(se),th=n(se,"LI",{});var E5e=s(th);Pte=n(E5e,"STRONG",{});var qXr=s(Pte);blo=r(qXr,"resnet"),qXr.forEach(t),vlo=r(E5e," \u2014 "),OB=n(E5e,"A",{href:!0});var NXr=s(OB);Flo=r(NXr,"ConvNextFeatureExtractor"),NXr.forEach(t),Tlo=r(E5e," (ResNet model)"),E5e.forEach(t),Mlo=i(se),ah=n(se,"LI",{});var C5e=s(ah);Ite=n(C5e,"STRONG",{});var jXr=s(Ite);Elo=r(jXr,"segformer"),jXr.forEach(t),Clo=r(C5e," \u2014 "),VB=n(C5e,"A",{href:!0});var DXr=s(VB);wlo=r(DXr,"SegformerFeatureExtractor"),DXr.forEach(t),Alo=r(C5e," (SegFormer model)"),C5e.forEach(t),ylo=i(se),nh=n(se,"LI",{});var w5e=s(nh);qte=n(w5e,"STRONG",{});var GXr=s(qte);Llo=r(GXr,"speech_to_text"),GXr.forEach(t),xlo=r(w5e," \u2014 "),XB=n(w5e,"A",{href:!0});var OXr=s(XB);$lo=r(OXr,"Speech2TextFeatureExtractor"),OXr.forEach(t),klo=r(w5e," (Speech2Text model)"),w5e.forEach(t),Slo=i(se),sh=n(se,"LI",{});var A5e=s(sh);Nte=n(A5e,"STRONG",{});var VXr=s(Nte);Rlo=r(VXr,"swin"),VXr.forEach(t),Blo=r(A5e," \u2014 "),zB=n(A5e,"A",{href:!0});var XXr=s(zB);Plo=r(XXr,"ViTFeatureExtractor"),XXr.forEach(t),Ilo=r(A5e," (Swin model)"),A5e.forEach(t),qlo=i(se),lh=n(se,"LI",{});var y5e=s(lh);jte=n(y5e,"STRONG",{});var zXr=s(jte);Nlo=r(zXr,"van"),zXr.forEach(t),jlo=r(y5e," \u2014 "),QB=n(y5e,"A",{href:!0});var QXr=s(QB);Dlo=r(QXr,"ConvNextFeatureExtractor"),QXr.forEach(t),Glo=r(y5e," (VAN model)"),y5e.forEach(t),Olo=i(se),ih=n(se,"LI",{});var L5e=s(ih);Dte=n(L5e,"STRONG",{});var WXr=s(Dte);Vlo=r(WXr,"vit"),WXr.forEach(t),Xlo=r(L5e," \u2014 "),WB=n(L5e,"A",{href:!0});var HXr=s(WB);zlo=r(HXr,"ViTFeatureExtractor"),HXr.forEach(t),Qlo=r(L5e," (ViT model)"),L5e.forEach(t),Wlo=i(se),dh=n(se,"LI",{});var x5e=s(dh);Gte=n(x5e,"STRONG",{});var UXr=s(Gte);Hlo=r(UXr,"vit_mae"),UXr.forEach(t),Ulo=r(x5e," \u2014 "),HB=n(x5e,"A",{href:!0});var JXr=s(HB);Jlo=r(JXr,"ViTFeatureExtractor"),JXr.forEach(t),Ylo=r(x5e," (ViTMAE model)"),x5e.forEach(t),Klo=i(se),ch=n(se,"LI",{});var $5e=s(ch);Ote=n($5e,"STRONG",{});var YXr=s(Ote);Zlo=r(YXr,"wav2vec2"),YXr.forEach(t),eio=r($5e," \u2014 "),UB=n($5e,"A",{href:!0});var KXr=s(UB);oio=r(KXr,"Wav2Vec2FeatureExtractor"),KXr.forEach(t),rio=r($5e," (Wav2Vec2 model)"),$5e.forEach(t),tio=i(se),fh=n(se,"LI",{});var k5e=s(fh);Vte=n(k5e,"STRONG",{});var ZXr=s(Vte);aio=r(ZXr,"yolos"),ZXr.forEach(t),nio=r(k5e," \u2014 "),JB=n(k5e,"A",{href:!0});var ezr=s(JB);sio=r(ezr,"YolosFeatureExtractor"),ezr.forEach(t),lio=r(k5e," (YOLOS model)"),k5e.forEach(t),se.forEach(t),iio=i(Ht),T(mh.$$.fragment,Ht),dio=i(Ht),T(gh.$$.fragment,Ht),Ht.forEach(t),cio=i(Bs),hh=n(Bs,"DIV",{class:!0});var ZIe=s(hh);T(Jw.$$.fragment,ZIe),fio=i(ZIe),Xte=n(ZIe,"P",{});var ozr=s(Xte);mio=r(ozr,"Register a new feature extractor for this class."),ozr.forEach(t),ZIe.forEach(t),Bs.forEach(t),ePe=i(f),hi=n(f,"H2",{class:!0});var eqe=s(hi);ph=n(eqe,"A",{id:!0,class:!0,href:!0});var rzr=s(ph);zte=n(rzr,"SPAN",{});var tzr=s(zte);T(Yw.$$.fragment,tzr),tzr.forEach(t),rzr.forEach(t),gio=i(eqe),Qte=n(eqe,"SPAN",{});var azr=s(Qte);hio=r(azr,"AutoProcessor"),azr.forEach(t),eqe.forEach(t),oPe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(Kw.$$.fragment,Ps),pio=i(Ps),Zw=n(Ps,"P",{});var oqe=s(Zw);uio=r(oqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YB=n(oqe,"A",{href:!0});var nzr=s(YB);_io=r(nzr,"AutoProcessor.from_pretrained()"),nzr.forEach(t),bio=r(oqe," class method."),oqe.forEach(t),vio=i(Ps),eA=n(Ps,"P",{});var rqe=s(eA);Fio=r(rqe,"This class cannot be instantiated directly using "),Wte=n(rqe,"CODE",{});var szr=s(Wte);Tio=r(szr,"__init__()"),szr.forEach(t),Mio=r(rqe," (throws an error)."),rqe.forEach(t),Eio=i(Ps),We=n(Ps,"DIV",{class:!0});var Ut=s(We);T(oA.$$.fragment,Ut),Cio=i(Ut),Hte=n(Ut,"P",{});var lzr=s(Hte);wio=r(lzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),lzr.forEach(t),Aio=i(Ut),pi=n(Ut,"P",{});var $Y=s(pi);yio=r($Y,"The processor class to instantiate is selected based on the "),Ute=n($Y,"CODE",{});var izr=s(Ute);Lio=r(izr,"model_type"),izr.forEach(t),xio=r($Y,` property of the config object (either
passed as an argument or loaded from `),Jte=n($Y,"CODE",{});var dzr=s(Jte);$io=r(dzr,"pretrained_model_name_or_path"),dzr.forEach(t),kio=r($Y," if possible):"),$Y.forEach(t),Sio=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);uh=n(Fe,"LI",{});var S5e=s(uh);Yte=n(S5e,"STRONG",{});var czr=s(Yte);Rio=r(czr,"clip"),czr.forEach(t),Bio=r(S5e," \u2014 "),KB=n(S5e,"A",{href:!0});var fzr=s(KB);Pio=r(fzr,"CLIPProcessor"),fzr.forEach(t),Iio=r(S5e," (CLIP model)"),S5e.forEach(t),qio=i(Fe),_h=n(Fe,"LI",{});var R5e=s(_h);Kte=n(R5e,"STRONG",{});var mzr=s(Kte);Nio=r(mzr,"layoutlmv2"),mzr.forEach(t),jio=r(R5e," \u2014 "),ZB=n(R5e,"A",{href:!0});var gzr=s(ZB);Dio=r(gzr,"LayoutLMv2Processor"),gzr.forEach(t),Gio=r(R5e," (LayoutLMv2 model)"),R5e.forEach(t),Oio=i(Fe),bh=n(Fe,"LI",{});var B5e=s(bh);Zte=n(B5e,"STRONG",{});var hzr=s(Zte);Vio=r(hzr,"layoutxlm"),hzr.forEach(t),Xio=r(B5e," \u2014 "),eP=n(B5e,"A",{href:!0});var pzr=s(eP);zio=r(pzr,"LayoutXLMProcessor"),pzr.forEach(t),Qio=r(B5e," (LayoutXLM model)"),B5e.forEach(t),Wio=i(Fe),vh=n(Fe,"LI",{});var P5e=s(vh);eae=n(P5e,"STRONG",{});var uzr=s(eae);Hio=r(uzr,"sew"),uzr.forEach(t),Uio=r(P5e," \u2014 "),oP=n(P5e,"A",{href:!0});var _zr=s(oP);Jio=r(_zr,"Wav2Vec2Processor"),_zr.forEach(t),Yio=r(P5e," (SEW model)"),P5e.forEach(t),Kio=i(Fe),Fh=n(Fe,"LI",{});var I5e=s(Fh);oae=n(I5e,"STRONG",{});var bzr=s(oae);Zio=r(bzr,"sew-d"),bzr.forEach(t),edo=r(I5e," \u2014 "),rP=n(I5e,"A",{href:!0});var vzr=s(rP);odo=r(vzr,"Wav2Vec2Processor"),vzr.forEach(t),rdo=r(I5e," (SEW-D model)"),I5e.forEach(t),tdo=i(Fe),Th=n(Fe,"LI",{});var q5e=s(Th);rae=n(q5e,"STRONG",{});var Fzr=s(rae);ado=r(Fzr,"speech_to_text"),Fzr.forEach(t),ndo=r(q5e," \u2014 "),tP=n(q5e,"A",{href:!0});var Tzr=s(tP);sdo=r(Tzr,"Speech2TextProcessor"),Tzr.forEach(t),ldo=r(q5e," (Speech2Text model)"),q5e.forEach(t),ido=i(Fe),Mh=n(Fe,"LI",{});var N5e=s(Mh);tae=n(N5e,"STRONG",{});var Mzr=s(tae);ddo=r(Mzr,"speech_to_text_2"),Mzr.forEach(t),cdo=r(N5e," \u2014 "),aP=n(N5e,"A",{href:!0});var Ezr=s(aP);fdo=r(Ezr,"Speech2Text2Processor"),Ezr.forEach(t),mdo=r(N5e," (Speech2Text2 model)"),N5e.forEach(t),gdo=i(Fe),Eh=n(Fe,"LI",{});var j5e=s(Eh);aae=n(j5e,"STRONG",{});var Czr=s(aae);hdo=r(Czr,"trocr"),Czr.forEach(t),pdo=r(j5e," \u2014 "),nP=n(j5e,"A",{href:!0});var wzr=s(nP);udo=r(wzr,"TrOCRProcessor"),wzr.forEach(t),_do=r(j5e," (TrOCR model)"),j5e.forEach(t),bdo=i(Fe),Ch=n(Fe,"LI",{});var D5e=s(Ch);nae=n(D5e,"STRONG",{});var Azr=s(nae);vdo=r(Azr,"unispeech"),Azr.forEach(t),Fdo=r(D5e," \u2014 "),sP=n(D5e,"A",{href:!0});var yzr=s(sP);Tdo=r(yzr,"Wav2Vec2Processor"),yzr.forEach(t),Mdo=r(D5e," (UniSpeech model)"),D5e.forEach(t),Edo=i(Fe),wh=n(Fe,"LI",{});var G5e=s(wh);sae=n(G5e,"STRONG",{});var Lzr=s(sae);Cdo=r(Lzr,"unispeech-sat"),Lzr.forEach(t),wdo=r(G5e," \u2014 "),lP=n(G5e,"A",{href:!0});var xzr=s(lP);Ado=r(xzr,"Wav2Vec2Processor"),xzr.forEach(t),ydo=r(G5e," (UniSpeechSat model)"),G5e.forEach(t),Ldo=i(Fe),Ah=n(Fe,"LI",{});var O5e=s(Ah);lae=n(O5e,"STRONG",{});var $zr=s(lae);xdo=r($zr,"vilt"),$zr.forEach(t),$do=r(O5e," \u2014 "),iP=n(O5e,"A",{href:!0});var kzr=s(iP);kdo=r(kzr,"ViltProcessor"),kzr.forEach(t),Sdo=r(O5e," (ViLT model)"),O5e.forEach(t),Rdo=i(Fe),yh=n(Fe,"LI",{});var V5e=s(yh);iae=n(V5e,"STRONG",{});var Szr=s(iae);Bdo=r(Szr,"vision-text-dual-encoder"),Szr.forEach(t),Pdo=r(V5e," \u2014 "),dP=n(V5e,"A",{href:!0});var Rzr=s(dP);Ido=r(Rzr,"VisionTextDualEncoderProcessor"),Rzr.forEach(t),qdo=r(V5e," (VisionTextDualEncoder model)"),V5e.forEach(t),Ndo=i(Fe),Lh=n(Fe,"LI",{});var X5e=s(Lh);dae=n(X5e,"STRONG",{});var Bzr=s(dae);jdo=r(Bzr,"wav2vec2"),Bzr.forEach(t),Ddo=r(X5e," \u2014 "),cP=n(X5e,"A",{href:!0});var Pzr=s(cP);Gdo=r(Pzr,"Wav2Vec2Processor"),Pzr.forEach(t),Odo=r(X5e," (Wav2Vec2 model)"),X5e.forEach(t),Vdo=i(Fe),xh=n(Fe,"LI",{});var z5e=s(xh);cae=n(z5e,"STRONG",{});var Izr=s(cae);Xdo=r(Izr,"wavlm"),Izr.forEach(t),zdo=r(z5e," \u2014 "),fP=n(z5e,"A",{href:!0});var qzr=s(fP);Qdo=r(qzr,"Wav2Vec2Processor"),qzr.forEach(t),Wdo=r(z5e," (WavLM model)"),z5e.forEach(t),Fe.forEach(t),Hdo=i(Ut),T($h.$$.fragment,Ut),Udo=i(Ut),T(kh.$$.fragment,Ut),Ut.forEach(t),Jdo=i(Ps),Sh=n(Ps,"DIV",{class:!0});var tqe=s(Sh);T(rA.$$.fragment,tqe),Ydo=i(tqe),fae=n(tqe,"P",{});var Nzr=s(fae);Kdo=r(Nzr,"Register a new processor for this class."),Nzr.forEach(t),tqe.forEach(t),Ps.forEach(t),rPe=i(f),ui=n(f,"H2",{class:!0});var aqe=s(ui);Rh=n(aqe,"A",{id:!0,class:!0,href:!0});var jzr=s(Rh);mae=n(jzr,"SPAN",{});var Dzr=s(mae);T(tA.$$.fragment,Dzr),Dzr.forEach(t),jzr.forEach(t),Zdo=i(aqe),gae=n(aqe,"SPAN",{});var Gzr=s(gae);eco=r(Gzr,"AutoModel"),Gzr.forEach(t),aqe.forEach(t),tPe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(aA.$$.fragment,Is),oco=i(Is),_i=n(Is,"P",{});var kY=s(_i);rco=r(kY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mP=n(kY,"A",{href:!0});var Ozr=s(mP);tco=r(Ozr,"from_pretrained()"),Ozr.forEach(t),aco=r(kY," class method or the "),gP=n(kY,"A",{href:!0});var Vzr=s(gP);nco=r(Vzr,"from_config()"),Vzr.forEach(t),sco=r(kY,` class
method.`),kY.forEach(t),lco=i(Is),nA=n(Is,"P",{});var nqe=s(nA);ico=r(nqe,"This class cannot be instantiated directly using "),hae=n(nqe,"CODE",{});var Xzr=s(hae);dco=r(Xzr,"__init__()"),Xzr.forEach(t),cco=r(nqe," (throws an error)."),nqe.forEach(t),fco=i(Is),Zr=n(Is,"DIV",{class:!0});var IC=s(Zr);T(sA.$$.fragment,IC),mco=i(IC),pae=n(IC,"P",{});var zzr=s(pae);gco=r(zzr,"Instantiates one of the base model classes of the library from a configuration."),zzr.forEach(t),hco=i(IC),bi=n(IC,"P",{});var SY=s(bi);pco=r(SY,`Note:
Loading a model from its configuration file does `),uae=n(SY,"STRONG",{});var Qzr=s(uae);uco=r(Qzr,"not"),Qzr.forEach(t),_co=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hP=n(SY,"A",{href:!0});var Wzr=s(hP);bco=r(Wzr,"from_pretrained()"),Wzr.forEach(t),vco=r(SY," to load the model weights."),SY.forEach(t),Fco=i(IC),T(Bh.$$.fragment,IC),IC.forEach(t),Tco=i(Is),He=n(Is,"DIV",{class:!0});var Jt=s(He);T(lA.$$.fragment,Jt),Mco=i(Jt),_ae=n(Jt,"P",{});var Hzr=s(_ae);Eco=r(Hzr,"Instantiate one of the base model classes of the library from a pretrained model."),Hzr.forEach(t),Cco=i(Jt),Ea=n(Jt,"P",{});var qC=s(Ea);wco=r(qC,"The model class to instantiate is selected based on the "),bae=n(qC,"CODE",{});var Uzr=s(bae);Aco=r(Uzr,"model_type"),Uzr.forEach(t),yco=r(qC,` property of the config object (either
passed as an argument or loaded from `),vae=n(qC,"CODE",{});var Jzr=s(vae);Lco=r(Jzr,"pretrained_model_name_or_path"),Jzr.forEach(t),xco=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fae=n(qC,"CODE",{});var Yzr=s(Fae);$co=r(Yzr,"pretrained_model_name_or_path"),Yzr.forEach(t),kco=r(qC,":"),qC.forEach(t),Sco=i(Jt),x=n(Jt,"UL",{});var $=s(x);Ph=n($,"LI",{});var Q5e=s(Ph);Tae=n(Q5e,"STRONG",{});var Kzr=s(Tae);Rco=r(Kzr,"albert"),Kzr.forEach(t),Bco=r(Q5e," \u2014 "),pP=n(Q5e,"A",{href:!0});var Zzr=s(pP);Pco=r(Zzr,"AlbertModel"),Zzr.forEach(t),Ico=r(Q5e," (ALBERT model)"),Q5e.forEach(t),qco=i($),Ih=n($,"LI",{});var W5e=s(Ih);Mae=n(W5e,"STRONG",{});var eQr=s(Mae);Nco=r(eQr,"bart"),eQr.forEach(t),jco=r(W5e," \u2014 "),uP=n(W5e,"A",{href:!0});var oQr=s(uP);Dco=r(oQr,"BartModel"),oQr.forEach(t),Gco=r(W5e," (BART model)"),W5e.forEach(t),Oco=i($),qh=n($,"LI",{});var H5e=s(qh);Eae=n(H5e,"STRONG",{});var rQr=s(Eae);Vco=r(rQr,"beit"),rQr.forEach(t),Xco=r(H5e," \u2014 "),_P=n(H5e,"A",{href:!0});var tQr=s(_P);zco=r(tQr,"BeitModel"),tQr.forEach(t),Qco=r(H5e," (BEiT model)"),H5e.forEach(t),Wco=i($),Nh=n($,"LI",{});var U5e=s(Nh);Cae=n(U5e,"STRONG",{});var aQr=s(Cae);Hco=r(aQr,"bert"),aQr.forEach(t),Uco=r(U5e," \u2014 "),bP=n(U5e,"A",{href:!0});var nQr=s(bP);Jco=r(nQr,"BertModel"),nQr.forEach(t),Yco=r(U5e," (BERT model)"),U5e.forEach(t),Kco=i($),jh=n($,"LI",{});var J5e=s(jh);wae=n(J5e,"STRONG",{});var sQr=s(wae);Zco=r(sQr,"bert-generation"),sQr.forEach(t),efo=r(J5e," \u2014 "),vP=n(J5e,"A",{href:!0});var lQr=s(vP);ofo=r(lQr,"BertGenerationEncoder"),lQr.forEach(t),rfo=r(J5e," (Bert Generation model)"),J5e.forEach(t),tfo=i($),Dh=n($,"LI",{});var Y5e=s(Dh);Aae=n(Y5e,"STRONG",{});var iQr=s(Aae);afo=r(iQr,"big_bird"),iQr.forEach(t),nfo=r(Y5e," \u2014 "),FP=n(Y5e,"A",{href:!0});var dQr=s(FP);sfo=r(dQr,"BigBirdModel"),dQr.forEach(t),lfo=r(Y5e," (BigBird model)"),Y5e.forEach(t),ifo=i($),Gh=n($,"LI",{});var K5e=s(Gh);yae=n(K5e,"STRONG",{});var cQr=s(yae);dfo=r(cQr,"bigbird_pegasus"),cQr.forEach(t),cfo=r(K5e," \u2014 "),TP=n(K5e,"A",{href:!0});var fQr=s(TP);ffo=r(fQr,"BigBirdPegasusModel"),fQr.forEach(t),mfo=r(K5e," (BigBirdPegasus model)"),K5e.forEach(t),gfo=i($),Oh=n($,"LI",{});var Z5e=s(Oh);Lae=n(Z5e,"STRONG",{});var mQr=s(Lae);hfo=r(mQr,"blenderbot"),mQr.forEach(t),pfo=r(Z5e," \u2014 "),MP=n(Z5e,"A",{href:!0});var gQr=s(MP);ufo=r(gQr,"BlenderbotModel"),gQr.forEach(t),_fo=r(Z5e," (Blenderbot model)"),Z5e.forEach(t),bfo=i($),Vh=n($,"LI",{});var eCe=s(Vh);xae=n(eCe,"STRONG",{});var hQr=s(xae);vfo=r(hQr,"blenderbot-small"),hQr.forEach(t),Ffo=r(eCe," \u2014 "),EP=n(eCe,"A",{href:!0});var pQr=s(EP);Tfo=r(pQr,"BlenderbotSmallModel"),pQr.forEach(t),Mfo=r(eCe," (BlenderbotSmall model)"),eCe.forEach(t),Efo=i($),Xh=n($,"LI",{});var oCe=s(Xh);$ae=n(oCe,"STRONG",{});var uQr=s($ae);Cfo=r(uQr,"camembert"),uQr.forEach(t),wfo=r(oCe," \u2014 "),CP=n(oCe,"A",{href:!0});var _Qr=s(CP);Afo=r(_Qr,"CamembertModel"),_Qr.forEach(t),yfo=r(oCe," (CamemBERT model)"),oCe.forEach(t),Lfo=i($),zh=n($,"LI",{});var rCe=s(zh);kae=n(rCe,"STRONG",{});var bQr=s(kae);xfo=r(bQr,"canine"),bQr.forEach(t),$fo=r(rCe," \u2014 "),wP=n(rCe,"A",{href:!0});var vQr=s(wP);kfo=r(vQr,"CanineModel"),vQr.forEach(t),Sfo=r(rCe," (Canine model)"),rCe.forEach(t),Rfo=i($),Qh=n($,"LI",{});var tCe=s(Qh);Sae=n(tCe,"STRONG",{});var FQr=s(Sae);Bfo=r(FQr,"clip"),FQr.forEach(t),Pfo=r(tCe," \u2014 "),AP=n(tCe,"A",{href:!0});var TQr=s(AP);Ifo=r(TQr,"CLIPModel"),TQr.forEach(t),qfo=r(tCe," (CLIP model)"),tCe.forEach(t),Nfo=i($),Wh=n($,"LI",{});var aCe=s(Wh);Rae=n(aCe,"STRONG",{});var MQr=s(Rae);jfo=r(MQr,"convbert"),MQr.forEach(t),Dfo=r(aCe," \u2014 "),yP=n(aCe,"A",{href:!0});var EQr=s(yP);Gfo=r(EQr,"ConvBertModel"),EQr.forEach(t),Ofo=r(aCe," (ConvBERT model)"),aCe.forEach(t),Vfo=i($),Hh=n($,"LI",{});var nCe=s(Hh);Bae=n(nCe,"STRONG",{});var CQr=s(Bae);Xfo=r(CQr,"convnext"),CQr.forEach(t),zfo=r(nCe," \u2014 "),LP=n(nCe,"A",{href:!0});var wQr=s(LP);Qfo=r(wQr,"ConvNextModel"),wQr.forEach(t),Wfo=r(nCe," (ConvNext model)"),nCe.forEach(t),Hfo=i($),Uh=n($,"LI",{});var sCe=s(Uh);Pae=n(sCe,"STRONG",{});var AQr=s(Pae);Ufo=r(AQr,"ctrl"),AQr.forEach(t),Jfo=r(sCe," \u2014 "),xP=n(sCe,"A",{href:!0});var yQr=s(xP);Yfo=r(yQr,"CTRLModel"),yQr.forEach(t),Kfo=r(sCe," (CTRL model)"),sCe.forEach(t),Zfo=i($),Jh=n($,"LI",{});var lCe=s(Jh);Iae=n(lCe,"STRONG",{});var LQr=s(Iae);emo=r(LQr,"data2vec-audio"),LQr.forEach(t),omo=r(lCe," \u2014 "),$P=n(lCe,"A",{href:!0});var xQr=s($P);rmo=r(xQr,"Data2VecAudioModel"),xQr.forEach(t),tmo=r(lCe," (Data2VecAudio model)"),lCe.forEach(t),amo=i($),Yh=n($,"LI",{});var iCe=s(Yh);qae=n(iCe,"STRONG",{});var $Qr=s(qae);nmo=r($Qr,"data2vec-text"),$Qr.forEach(t),smo=r(iCe," \u2014 "),kP=n(iCe,"A",{href:!0});var kQr=s(kP);lmo=r(kQr,"Data2VecTextModel"),kQr.forEach(t),imo=r(iCe," (Data2VecText model)"),iCe.forEach(t),dmo=i($),Kh=n($,"LI",{});var dCe=s(Kh);Nae=n(dCe,"STRONG",{});var SQr=s(Nae);cmo=r(SQr,"data2vec-vision"),SQr.forEach(t),fmo=r(dCe," \u2014 "),SP=n(dCe,"A",{href:!0});var RQr=s(SP);mmo=r(RQr,"Data2VecVisionModel"),RQr.forEach(t),gmo=r(dCe," (Data2VecVision model)"),dCe.forEach(t),hmo=i($),Zh=n($,"LI",{});var cCe=s(Zh);jae=n(cCe,"STRONG",{});var BQr=s(jae);pmo=r(BQr,"deberta"),BQr.forEach(t),umo=r(cCe," \u2014 "),RP=n(cCe,"A",{href:!0});var PQr=s(RP);_mo=r(PQr,"DebertaModel"),PQr.forEach(t),bmo=r(cCe," (DeBERTa model)"),cCe.forEach(t),vmo=i($),ep=n($,"LI",{});var fCe=s(ep);Dae=n(fCe,"STRONG",{});var IQr=s(Dae);Fmo=r(IQr,"deberta-v2"),IQr.forEach(t),Tmo=r(fCe," \u2014 "),BP=n(fCe,"A",{href:!0});var qQr=s(BP);Mmo=r(qQr,"DebertaV2Model"),qQr.forEach(t),Emo=r(fCe," (DeBERTa-v2 model)"),fCe.forEach(t),Cmo=i($),op=n($,"LI",{});var mCe=s(op);Gae=n(mCe,"STRONG",{});var NQr=s(Gae);wmo=r(NQr,"decision_transformer"),NQr.forEach(t),Amo=r(mCe," \u2014 "),PP=n(mCe,"A",{href:!0});var jQr=s(PP);ymo=r(jQr,"DecisionTransformerModel"),jQr.forEach(t),Lmo=r(mCe," (Decision Transformer model)"),mCe.forEach(t),xmo=i($),rp=n($,"LI",{});var gCe=s(rp);Oae=n(gCe,"STRONG",{});var DQr=s(Oae);$mo=r(DQr,"deit"),DQr.forEach(t),kmo=r(gCe," \u2014 "),IP=n(gCe,"A",{href:!0});var GQr=s(IP);Smo=r(GQr,"DeiTModel"),GQr.forEach(t),Rmo=r(gCe," (DeiT model)"),gCe.forEach(t),Bmo=i($),tp=n($,"LI",{});var hCe=s(tp);Vae=n(hCe,"STRONG",{});var OQr=s(Vae);Pmo=r(OQr,"detr"),OQr.forEach(t),Imo=r(hCe," \u2014 "),qP=n(hCe,"A",{href:!0});var VQr=s(qP);qmo=r(VQr,"DetrModel"),VQr.forEach(t),Nmo=r(hCe," (DETR model)"),hCe.forEach(t),jmo=i($),ap=n($,"LI",{});var pCe=s(ap);Xae=n(pCe,"STRONG",{});var XQr=s(Xae);Dmo=r(XQr,"distilbert"),XQr.forEach(t),Gmo=r(pCe," \u2014 "),NP=n(pCe,"A",{href:!0});var zQr=s(NP);Omo=r(zQr,"DistilBertModel"),zQr.forEach(t),Vmo=r(pCe," (DistilBERT model)"),pCe.forEach(t),Xmo=i($),np=n($,"LI",{});var uCe=s(np);zae=n(uCe,"STRONG",{});var QQr=s(zae);zmo=r(QQr,"dpr"),QQr.forEach(t),Qmo=r(uCe," \u2014 "),jP=n(uCe,"A",{href:!0});var WQr=s(jP);Wmo=r(WQr,"DPRQuestionEncoder"),WQr.forEach(t),Hmo=r(uCe," (DPR model)"),uCe.forEach(t),Umo=i($),sp=n($,"LI",{});var _Ce=s(sp);Qae=n(_Ce,"STRONG",{});var HQr=s(Qae);Jmo=r(HQr,"dpt"),HQr.forEach(t),Ymo=r(_Ce," \u2014 "),DP=n(_Ce,"A",{href:!0});var UQr=s(DP);Kmo=r(UQr,"DPTModel"),UQr.forEach(t),Zmo=r(_Ce," (DPT model)"),_Ce.forEach(t),ego=i($),lp=n($,"LI",{});var bCe=s(lp);Wae=n(bCe,"STRONG",{});var JQr=s(Wae);ogo=r(JQr,"electra"),JQr.forEach(t),rgo=r(bCe," \u2014 "),GP=n(bCe,"A",{href:!0});var YQr=s(GP);tgo=r(YQr,"ElectraModel"),YQr.forEach(t),ago=r(bCe," (ELECTRA model)"),bCe.forEach(t),ngo=i($),ip=n($,"LI",{});var vCe=s(ip);Hae=n(vCe,"STRONG",{});var KQr=s(Hae);sgo=r(KQr,"flaubert"),KQr.forEach(t),lgo=r(vCe," \u2014 "),OP=n(vCe,"A",{href:!0});var ZQr=s(OP);igo=r(ZQr,"FlaubertModel"),ZQr.forEach(t),dgo=r(vCe," (FlauBERT model)"),vCe.forEach(t),cgo=i($),dp=n($,"LI",{});var FCe=s(dp);Uae=n(FCe,"STRONG",{});var eWr=s(Uae);fgo=r(eWr,"fnet"),eWr.forEach(t),mgo=r(FCe," \u2014 "),VP=n(FCe,"A",{href:!0});var oWr=s(VP);ggo=r(oWr,"FNetModel"),oWr.forEach(t),hgo=r(FCe," (FNet model)"),FCe.forEach(t),pgo=i($),cp=n($,"LI",{});var TCe=s(cp);Jae=n(TCe,"STRONG",{});var rWr=s(Jae);ugo=r(rWr,"fsmt"),rWr.forEach(t),_go=r(TCe," \u2014 "),XP=n(TCe,"A",{href:!0});var tWr=s(XP);bgo=r(tWr,"FSMTModel"),tWr.forEach(t),vgo=r(TCe," (FairSeq Machine-Translation model)"),TCe.forEach(t),Fgo=i($),xs=n($,"LI",{});var D9=s(xs);Yae=n(D9,"STRONG",{});var aWr=s(Yae);Tgo=r(aWr,"funnel"),aWr.forEach(t),Mgo=r(D9," \u2014 "),zP=n(D9,"A",{href:!0});var nWr=s(zP);Ego=r(nWr,"FunnelModel"),nWr.forEach(t),Cgo=r(D9," or "),QP=n(D9,"A",{href:!0});var sWr=s(QP);wgo=r(sWr,"FunnelBaseModel"),sWr.forEach(t),Ago=r(D9," (Funnel Transformer model)"),D9.forEach(t),ygo=i($),fp=n($,"LI",{});var MCe=s(fp);Kae=n(MCe,"STRONG",{});var lWr=s(Kae);Lgo=r(lWr,"glpn"),lWr.forEach(t),xgo=r(MCe," \u2014 "),WP=n(MCe,"A",{href:!0});var iWr=s(WP);$go=r(iWr,"GLPNModel"),iWr.forEach(t),kgo=r(MCe," (GLPN model)"),MCe.forEach(t),Sgo=i($),mp=n($,"LI",{});var ECe=s(mp);Zae=n(ECe,"STRONG",{});var dWr=s(Zae);Rgo=r(dWr,"gpt2"),dWr.forEach(t),Bgo=r(ECe," \u2014 "),HP=n(ECe,"A",{href:!0});var cWr=s(HP);Pgo=r(cWr,"GPT2Model"),cWr.forEach(t),Igo=r(ECe," (OpenAI GPT-2 model)"),ECe.forEach(t),qgo=i($),gp=n($,"LI",{});var CCe=s(gp);ene=n(CCe,"STRONG",{});var fWr=s(ene);Ngo=r(fWr,"gpt_neo"),fWr.forEach(t),jgo=r(CCe," \u2014 "),UP=n(CCe,"A",{href:!0});var mWr=s(UP);Dgo=r(mWr,"GPTNeoModel"),mWr.forEach(t),Ggo=r(CCe," (GPT Neo model)"),CCe.forEach(t),Ogo=i($),hp=n($,"LI",{});var wCe=s(hp);one=n(wCe,"STRONG",{});var gWr=s(one);Vgo=r(gWr,"gptj"),gWr.forEach(t),Xgo=r(wCe," \u2014 "),JP=n(wCe,"A",{href:!0});var hWr=s(JP);zgo=r(hWr,"GPTJModel"),hWr.forEach(t),Qgo=r(wCe," (GPT-J model)"),wCe.forEach(t),Wgo=i($),pp=n($,"LI",{});var ACe=s(pp);rne=n(ACe,"STRONG",{});var pWr=s(rne);Hgo=r(pWr,"hubert"),pWr.forEach(t),Ugo=r(ACe," \u2014 "),YP=n(ACe,"A",{href:!0});var uWr=s(YP);Jgo=r(uWr,"HubertModel"),uWr.forEach(t),Ygo=r(ACe," (Hubert model)"),ACe.forEach(t),Kgo=i($),up=n($,"LI",{});var yCe=s(up);tne=n(yCe,"STRONG",{});var _Wr=s(tne);Zgo=r(_Wr,"ibert"),_Wr.forEach(t),eho=r(yCe," \u2014 "),KP=n(yCe,"A",{href:!0});var bWr=s(KP);oho=r(bWr,"IBertModel"),bWr.forEach(t),rho=r(yCe," (I-BERT model)"),yCe.forEach(t),tho=i($),_p=n($,"LI",{});var LCe=s(_p);ane=n(LCe,"STRONG",{});var vWr=s(ane);aho=r(vWr,"imagegpt"),vWr.forEach(t),nho=r(LCe," \u2014 "),ZP=n(LCe,"A",{href:!0});var FWr=s(ZP);sho=r(FWr,"ImageGPTModel"),FWr.forEach(t),lho=r(LCe," (ImageGPT model)"),LCe.forEach(t),iho=i($),bp=n($,"LI",{});var xCe=s(bp);nne=n(xCe,"STRONG",{});var TWr=s(nne);dho=r(TWr,"layoutlm"),TWr.forEach(t),cho=r(xCe," \u2014 "),eI=n(xCe,"A",{href:!0});var MWr=s(eI);fho=r(MWr,"LayoutLMModel"),MWr.forEach(t),mho=r(xCe," (LayoutLM model)"),xCe.forEach(t),gho=i($),vp=n($,"LI",{});var $Ce=s(vp);sne=n($Ce,"STRONG",{});var EWr=s(sne);hho=r(EWr,"layoutlmv2"),EWr.forEach(t),pho=r($Ce," \u2014 "),oI=n($Ce,"A",{href:!0});var CWr=s(oI);uho=r(CWr,"LayoutLMv2Model"),CWr.forEach(t),_ho=r($Ce," (LayoutLMv2 model)"),$Ce.forEach(t),bho=i($),Fp=n($,"LI",{});var kCe=s(Fp);lne=n(kCe,"STRONG",{});var wWr=s(lne);vho=r(wWr,"led"),wWr.forEach(t),Fho=r(kCe," \u2014 "),rI=n(kCe,"A",{href:!0});var AWr=s(rI);Tho=r(AWr,"LEDModel"),AWr.forEach(t),Mho=r(kCe," (LED model)"),kCe.forEach(t),Eho=i($),Tp=n($,"LI",{});var SCe=s(Tp);ine=n(SCe,"STRONG",{});var yWr=s(ine);Cho=r(yWr,"longformer"),yWr.forEach(t),who=r(SCe," \u2014 "),tI=n(SCe,"A",{href:!0});var LWr=s(tI);Aho=r(LWr,"LongformerModel"),LWr.forEach(t),yho=r(SCe," (Longformer model)"),SCe.forEach(t),Lho=i($),Mp=n($,"LI",{});var RCe=s(Mp);dne=n(RCe,"STRONG",{});var xWr=s(dne);xho=r(xWr,"luke"),xWr.forEach(t),$ho=r(RCe," \u2014 "),aI=n(RCe,"A",{href:!0});var $Wr=s(aI);kho=r($Wr,"LukeModel"),$Wr.forEach(t),Sho=r(RCe," (LUKE model)"),RCe.forEach(t),Rho=i($),Ep=n($,"LI",{});var BCe=s(Ep);cne=n(BCe,"STRONG",{});var kWr=s(cne);Bho=r(kWr,"lxmert"),kWr.forEach(t),Pho=r(BCe," \u2014 "),nI=n(BCe,"A",{href:!0});var SWr=s(nI);Iho=r(SWr,"LxmertModel"),SWr.forEach(t),qho=r(BCe," (LXMERT model)"),BCe.forEach(t),Nho=i($),Cp=n($,"LI",{});var PCe=s(Cp);fne=n(PCe,"STRONG",{});var RWr=s(fne);jho=r(RWr,"m2m_100"),RWr.forEach(t),Dho=r(PCe," \u2014 "),sI=n(PCe,"A",{href:!0});var BWr=s(sI);Gho=r(BWr,"M2M100Model"),BWr.forEach(t),Oho=r(PCe," (M2M100 model)"),PCe.forEach(t),Vho=i($),wp=n($,"LI",{});var ICe=s(wp);mne=n(ICe,"STRONG",{});var PWr=s(mne);Xho=r(PWr,"marian"),PWr.forEach(t),zho=r(ICe," \u2014 "),lI=n(ICe,"A",{href:!0});var IWr=s(lI);Qho=r(IWr,"MarianModel"),IWr.forEach(t),Who=r(ICe," (Marian model)"),ICe.forEach(t),Hho=i($),Ap=n($,"LI",{});var qCe=s(Ap);gne=n(qCe,"STRONG",{});var qWr=s(gne);Uho=r(qWr,"maskformer"),qWr.forEach(t),Jho=r(qCe," \u2014 "),iI=n(qCe,"A",{href:!0});var NWr=s(iI);Yho=r(NWr,"MaskFormerModel"),NWr.forEach(t),Kho=r(qCe," (MaskFormer model)"),qCe.forEach(t),Zho=i($),yp=n($,"LI",{});var NCe=s(yp);hne=n(NCe,"STRONG",{});var jWr=s(hne);epo=r(jWr,"mbart"),jWr.forEach(t),opo=r(NCe," \u2014 "),dI=n(NCe,"A",{href:!0});var DWr=s(dI);rpo=r(DWr,"MBartModel"),DWr.forEach(t),tpo=r(NCe," (mBART model)"),NCe.forEach(t),apo=i($),Lp=n($,"LI",{});var jCe=s(Lp);pne=n(jCe,"STRONG",{});var GWr=s(pne);npo=r(GWr,"megatron-bert"),GWr.forEach(t),spo=r(jCe," \u2014 "),cI=n(jCe,"A",{href:!0});var OWr=s(cI);lpo=r(OWr,"MegatronBertModel"),OWr.forEach(t),ipo=r(jCe," (MegatronBert model)"),jCe.forEach(t),dpo=i($),xp=n($,"LI",{});var DCe=s(xp);une=n(DCe,"STRONG",{});var VWr=s(une);cpo=r(VWr,"mobilebert"),VWr.forEach(t),fpo=r(DCe," \u2014 "),fI=n(DCe,"A",{href:!0});var XWr=s(fI);mpo=r(XWr,"MobileBertModel"),XWr.forEach(t),gpo=r(DCe," (MobileBERT model)"),DCe.forEach(t),hpo=i($),$p=n($,"LI",{});var GCe=s($p);_ne=n(GCe,"STRONG",{});var zWr=s(_ne);ppo=r(zWr,"mpnet"),zWr.forEach(t),upo=r(GCe," \u2014 "),mI=n(GCe,"A",{href:!0});var QWr=s(mI);_po=r(QWr,"MPNetModel"),QWr.forEach(t),bpo=r(GCe," (MPNet model)"),GCe.forEach(t),vpo=i($),kp=n($,"LI",{});var OCe=s(kp);bne=n(OCe,"STRONG",{});var WWr=s(bne);Fpo=r(WWr,"mt5"),WWr.forEach(t),Tpo=r(OCe," \u2014 "),gI=n(OCe,"A",{href:!0});var HWr=s(gI);Mpo=r(HWr,"MT5Model"),HWr.forEach(t),Epo=r(OCe," (mT5 model)"),OCe.forEach(t),Cpo=i($),Sp=n($,"LI",{});var VCe=s(Sp);vne=n(VCe,"STRONG",{});var UWr=s(vne);wpo=r(UWr,"nystromformer"),UWr.forEach(t),Apo=r(VCe," \u2014 "),hI=n(VCe,"A",{href:!0});var JWr=s(hI);ypo=r(JWr,"NystromformerModel"),JWr.forEach(t),Lpo=r(VCe," (Nystromformer model)"),VCe.forEach(t),xpo=i($),Rp=n($,"LI",{});var XCe=s(Rp);Fne=n(XCe,"STRONG",{});var YWr=s(Fne);$po=r(YWr,"openai-gpt"),YWr.forEach(t),kpo=r(XCe," \u2014 "),pI=n(XCe,"A",{href:!0});var KWr=s(pI);Spo=r(KWr,"OpenAIGPTModel"),KWr.forEach(t),Rpo=r(XCe," (OpenAI GPT model)"),XCe.forEach(t),Bpo=i($),Bp=n($,"LI",{});var zCe=s(Bp);Tne=n(zCe,"STRONG",{});var ZWr=s(Tne);Ppo=r(ZWr,"opt"),ZWr.forEach(t),Ipo=r(zCe," \u2014 "),uI=n(zCe,"A",{href:!0});var eHr=s(uI);qpo=r(eHr,"OPTModel"),eHr.forEach(t),Npo=r(zCe," (OPT model)"),zCe.forEach(t),jpo=i($),Pp=n($,"LI",{});var QCe=s(Pp);Mne=n(QCe,"STRONG",{});var oHr=s(Mne);Dpo=r(oHr,"pegasus"),oHr.forEach(t),Gpo=r(QCe," \u2014 "),_I=n(QCe,"A",{href:!0});var rHr=s(_I);Opo=r(rHr,"PegasusModel"),rHr.forEach(t),Vpo=r(QCe," (Pegasus model)"),QCe.forEach(t),Xpo=i($),Ip=n($,"LI",{});var WCe=s(Ip);Ene=n(WCe,"STRONG",{});var tHr=s(Ene);zpo=r(tHr,"perceiver"),tHr.forEach(t),Qpo=r(WCe," \u2014 "),bI=n(WCe,"A",{href:!0});var aHr=s(bI);Wpo=r(aHr,"PerceiverModel"),aHr.forEach(t),Hpo=r(WCe," (Perceiver model)"),WCe.forEach(t),Upo=i($),qp=n($,"LI",{});var HCe=s(qp);Cne=n(HCe,"STRONG",{});var nHr=s(Cne);Jpo=r(nHr,"plbart"),nHr.forEach(t),Ypo=r(HCe," \u2014 "),vI=n(HCe,"A",{href:!0});var sHr=s(vI);Kpo=r(sHr,"PLBartModel"),sHr.forEach(t),Zpo=r(HCe," (PLBart model)"),HCe.forEach(t),euo=i($),Np=n($,"LI",{});var UCe=s(Np);wne=n(UCe,"STRONG",{});var lHr=s(wne);ouo=r(lHr,"poolformer"),lHr.forEach(t),ruo=r(UCe," \u2014 "),FI=n(UCe,"A",{href:!0});var iHr=s(FI);tuo=r(iHr,"PoolFormerModel"),iHr.forEach(t),auo=r(UCe," (PoolFormer model)"),UCe.forEach(t),nuo=i($),jp=n($,"LI",{});var JCe=s(jp);Ane=n(JCe,"STRONG",{});var dHr=s(Ane);suo=r(dHr,"prophetnet"),dHr.forEach(t),luo=r(JCe," \u2014 "),TI=n(JCe,"A",{href:!0});var cHr=s(TI);iuo=r(cHr,"ProphetNetModel"),cHr.forEach(t),duo=r(JCe," (ProphetNet model)"),JCe.forEach(t),cuo=i($),Dp=n($,"LI",{});var YCe=s(Dp);yne=n(YCe,"STRONG",{});var fHr=s(yne);fuo=r(fHr,"qdqbert"),fHr.forEach(t),muo=r(YCe," \u2014 "),MI=n(YCe,"A",{href:!0});var mHr=s(MI);guo=r(mHr,"QDQBertModel"),mHr.forEach(t),huo=r(YCe," (QDQBert model)"),YCe.forEach(t),puo=i($),Gp=n($,"LI",{});var KCe=s(Gp);Lne=n(KCe,"STRONG",{});var gHr=s(Lne);uuo=r(gHr,"reformer"),gHr.forEach(t),_uo=r(KCe," \u2014 "),EI=n(KCe,"A",{href:!0});var hHr=s(EI);buo=r(hHr,"ReformerModel"),hHr.forEach(t),vuo=r(KCe," (Reformer model)"),KCe.forEach(t),Fuo=i($),Op=n($,"LI",{});var ZCe=s(Op);xne=n(ZCe,"STRONG",{});var pHr=s(xne);Tuo=r(pHr,"regnet"),pHr.forEach(t),Muo=r(ZCe," \u2014 "),CI=n(ZCe,"A",{href:!0});var uHr=s(CI);Euo=r(uHr,"RegNetModel"),uHr.forEach(t),Cuo=r(ZCe," (RegNet model)"),ZCe.forEach(t),wuo=i($),Vp=n($,"LI",{});var e3e=s(Vp);$ne=n(e3e,"STRONG",{});var _Hr=s($ne);Auo=r(_Hr,"rembert"),_Hr.forEach(t),yuo=r(e3e," \u2014 "),wI=n(e3e,"A",{href:!0});var bHr=s(wI);Luo=r(bHr,"RemBertModel"),bHr.forEach(t),xuo=r(e3e," (RemBERT model)"),e3e.forEach(t),$uo=i($),Xp=n($,"LI",{});var o3e=s(Xp);kne=n(o3e,"STRONG",{});var vHr=s(kne);kuo=r(vHr,"resnet"),vHr.forEach(t),Suo=r(o3e," \u2014 "),AI=n(o3e,"A",{href:!0});var FHr=s(AI);Ruo=r(FHr,"ResNetModel"),FHr.forEach(t),Buo=r(o3e," (ResNet model)"),o3e.forEach(t),Puo=i($),zp=n($,"LI",{});var r3e=s(zp);Sne=n(r3e,"STRONG",{});var THr=s(Sne);Iuo=r(THr,"retribert"),THr.forEach(t),quo=r(r3e," \u2014 "),yI=n(r3e,"A",{href:!0});var MHr=s(yI);Nuo=r(MHr,"RetriBertModel"),MHr.forEach(t),juo=r(r3e," (RetriBERT model)"),r3e.forEach(t),Duo=i($),Qp=n($,"LI",{});var t3e=s(Qp);Rne=n(t3e,"STRONG",{});var EHr=s(Rne);Guo=r(EHr,"roberta"),EHr.forEach(t),Ouo=r(t3e," \u2014 "),LI=n(t3e,"A",{href:!0});var CHr=s(LI);Vuo=r(CHr,"RobertaModel"),CHr.forEach(t),Xuo=r(t3e," (RoBERTa model)"),t3e.forEach(t),zuo=i($),Wp=n($,"LI",{});var a3e=s(Wp);Bne=n(a3e,"STRONG",{});var wHr=s(Bne);Quo=r(wHr,"roformer"),wHr.forEach(t),Wuo=r(a3e," \u2014 "),xI=n(a3e,"A",{href:!0});var AHr=s(xI);Huo=r(AHr,"RoFormerModel"),AHr.forEach(t),Uuo=r(a3e," (RoFormer model)"),a3e.forEach(t),Juo=i($),Hp=n($,"LI",{});var n3e=s(Hp);Pne=n(n3e,"STRONG",{});var yHr=s(Pne);Yuo=r(yHr,"segformer"),yHr.forEach(t),Kuo=r(n3e," \u2014 "),$I=n(n3e,"A",{href:!0});var LHr=s($I);Zuo=r(LHr,"SegformerModel"),LHr.forEach(t),e_o=r(n3e," (SegFormer model)"),n3e.forEach(t),o_o=i($),Up=n($,"LI",{});var s3e=s(Up);Ine=n(s3e,"STRONG",{});var xHr=s(Ine);r_o=r(xHr,"sew"),xHr.forEach(t),t_o=r(s3e," \u2014 "),kI=n(s3e,"A",{href:!0});var $Hr=s(kI);a_o=r($Hr,"SEWModel"),$Hr.forEach(t),n_o=r(s3e," (SEW model)"),s3e.forEach(t),s_o=i($),Jp=n($,"LI",{});var l3e=s(Jp);qne=n(l3e,"STRONG",{});var kHr=s(qne);l_o=r(kHr,"sew-d"),kHr.forEach(t),i_o=r(l3e," \u2014 "),SI=n(l3e,"A",{href:!0});var SHr=s(SI);d_o=r(SHr,"SEWDModel"),SHr.forEach(t),c_o=r(l3e," (SEW-D model)"),l3e.forEach(t),f_o=i($),Yp=n($,"LI",{});var i3e=s(Yp);Nne=n(i3e,"STRONG",{});var RHr=s(Nne);m_o=r(RHr,"speech_to_text"),RHr.forEach(t),g_o=r(i3e," \u2014 "),RI=n(i3e,"A",{href:!0});var BHr=s(RI);h_o=r(BHr,"Speech2TextModel"),BHr.forEach(t),p_o=r(i3e," (Speech2Text model)"),i3e.forEach(t),u_o=i($),Kp=n($,"LI",{});var d3e=s(Kp);jne=n(d3e,"STRONG",{});var PHr=s(jne);__o=r(PHr,"splinter"),PHr.forEach(t),b_o=r(d3e," \u2014 "),BI=n(d3e,"A",{href:!0});var IHr=s(BI);v_o=r(IHr,"SplinterModel"),IHr.forEach(t),F_o=r(d3e," (Splinter model)"),d3e.forEach(t),T_o=i($),Zp=n($,"LI",{});var c3e=s(Zp);Dne=n(c3e,"STRONG",{});var qHr=s(Dne);M_o=r(qHr,"squeezebert"),qHr.forEach(t),E_o=r(c3e," \u2014 "),PI=n(c3e,"A",{href:!0});var NHr=s(PI);C_o=r(NHr,"SqueezeBertModel"),NHr.forEach(t),w_o=r(c3e," (SqueezeBERT model)"),c3e.forEach(t),A_o=i($),eu=n($,"LI",{});var f3e=s(eu);Gne=n(f3e,"STRONG",{});var jHr=s(Gne);y_o=r(jHr,"swin"),jHr.forEach(t),L_o=r(f3e," \u2014 "),II=n(f3e,"A",{href:!0});var DHr=s(II);x_o=r(DHr,"SwinModel"),DHr.forEach(t),$_o=r(f3e," (Swin model)"),f3e.forEach(t),k_o=i($),ou=n($,"LI",{});var m3e=s(ou);One=n(m3e,"STRONG",{});var GHr=s(One);S_o=r(GHr,"t5"),GHr.forEach(t),R_o=r(m3e," \u2014 "),qI=n(m3e,"A",{href:!0});var OHr=s(qI);B_o=r(OHr,"T5Model"),OHr.forEach(t),P_o=r(m3e," (T5 model)"),m3e.forEach(t),I_o=i($),ru=n($,"LI",{});var g3e=s(ru);Vne=n(g3e,"STRONG",{});var VHr=s(Vne);q_o=r(VHr,"tapas"),VHr.forEach(t),N_o=r(g3e," \u2014 "),NI=n(g3e,"A",{href:!0});var XHr=s(NI);j_o=r(XHr,"TapasModel"),XHr.forEach(t),D_o=r(g3e," (TAPAS model)"),g3e.forEach(t),G_o=i($),tu=n($,"LI",{});var h3e=s(tu);Xne=n(h3e,"STRONG",{});var zHr=s(Xne);O_o=r(zHr,"transfo-xl"),zHr.forEach(t),V_o=r(h3e," \u2014 "),jI=n(h3e,"A",{href:!0});var QHr=s(jI);X_o=r(QHr,"TransfoXLModel"),QHr.forEach(t),z_o=r(h3e," (Transformer-XL model)"),h3e.forEach(t),Q_o=i($),au=n($,"LI",{});var p3e=s(au);zne=n(p3e,"STRONG",{});var WHr=s(zne);W_o=r(WHr,"unispeech"),WHr.forEach(t),H_o=r(p3e," \u2014 "),DI=n(p3e,"A",{href:!0});var HHr=s(DI);U_o=r(HHr,"UniSpeechModel"),HHr.forEach(t),J_o=r(p3e," (UniSpeech model)"),p3e.forEach(t),Y_o=i($),nu=n($,"LI",{});var u3e=s(nu);Qne=n(u3e,"STRONG",{});var UHr=s(Qne);K_o=r(UHr,"unispeech-sat"),UHr.forEach(t),Z_o=r(u3e," \u2014 "),GI=n(u3e,"A",{href:!0});var JHr=s(GI);e1o=r(JHr,"UniSpeechSatModel"),JHr.forEach(t),o1o=r(u3e," (UniSpeechSat model)"),u3e.forEach(t),r1o=i($),su=n($,"LI",{});var _3e=s(su);Wne=n(_3e,"STRONG",{});var YHr=s(Wne);t1o=r(YHr,"van"),YHr.forEach(t),a1o=r(_3e," \u2014 "),OI=n(_3e,"A",{href:!0});var KHr=s(OI);n1o=r(KHr,"VanModel"),KHr.forEach(t),s1o=r(_3e," (VAN model)"),_3e.forEach(t),l1o=i($),lu=n($,"LI",{});var b3e=s(lu);Hne=n(b3e,"STRONG",{});var ZHr=s(Hne);i1o=r(ZHr,"vilt"),ZHr.forEach(t),d1o=r(b3e," \u2014 "),VI=n(b3e,"A",{href:!0});var eUr=s(VI);c1o=r(eUr,"ViltModel"),eUr.forEach(t),f1o=r(b3e," (ViLT model)"),b3e.forEach(t),m1o=i($),iu=n($,"LI",{});var v3e=s(iu);Une=n(v3e,"STRONG",{});var oUr=s(Une);g1o=r(oUr,"vision-text-dual-encoder"),oUr.forEach(t),h1o=r(v3e," \u2014 "),XI=n(v3e,"A",{href:!0});var rUr=s(XI);p1o=r(rUr,"VisionTextDualEncoderModel"),rUr.forEach(t),u1o=r(v3e," (VisionTextDualEncoder model)"),v3e.forEach(t),_1o=i($),du=n($,"LI",{});var F3e=s(du);Jne=n(F3e,"STRONG",{});var tUr=s(Jne);b1o=r(tUr,"visual_bert"),tUr.forEach(t),v1o=r(F3e," \u2014 "),zI=n(F3e,"A",{href:!0});var aUr=s(zI);F1o=r(aUr,"VisualBertModel"),aUr.forEach(t),T1o=r(F3e," (VisualBert model)"),F3e.forEach(t),M1o=i($),cu=n($,"LI",{});var T3e=s(cu);Yne=n(T3e,"STRONG",{});var nUr=s(Yne);E1o=r(nUr,"vit"),nUr.forEach(t),C1o=r(T3e," \u2014 "),QI=n(T3e,"A",{href:!0});var sUr=s(QI);w1o=r(sUr,"ViTModel"),sUr.forEach(t),A1o=r(T3e," (ViT model)"),T3e.forEach(t),y1o=i($),fu=n($,"LI",{});var M3e=s(fu);Kne=n(M3e,"STRONG",{});var lUr=s(Kne);L1o=r(lUr,"vit_mae"),lUr.forEach(t),x1o=r(M3e," \u2014 "),WI=n(M3e,"A",{href:!0});var iUr=s(WI);$1o=r(iUr,"ViTMAEModel"),iUr.forEach(t),k1o=r(M3e," (ViTMAE model)"),M3e.forEach(t),S1o=i($),mu=n($,"LI",{});var E3e=s(mu);Zne=n(E3e,"STRONG",{});var dUr=s(Zne);R1o=r(dUr,"wav2vec2"),dUr.forEach(t),B1o=r(E3e," \u2014 "),HI=n(E3e,"A",{href:!0});var cUr=s(HI);P1o=r(cUr,"Wav2Vec2Model"),cUr.forEach(t),I1o=r(E3e," (Wav2Vec2 model)"),E3e.forEach(t),q1o=i($),gu=n($,"LI",{});var C3e=s(gu);ese=n(C3e,"STRONG",{});var fUr=s(ese);N1o=r(fUr,"wavlm"),fUr.forEach(t),j1o=r(C3e," \u2014 "),UI=n(C3e,"A",{href:!0});var mUr=s(UI);D1o=r(mUr,"WavLMModel"),mUr.forEach(t),G1o=r(C3e," (WavLM model)"),C3e.forEach(t),O1o=i($),hu=n($,"LI",{});var w3e=s(hu);ose=n(w3e,"STRONG",{});var gUr=s(ose);V1o=r(gUr,"xglm"),gUr.forEach(t),X1o=r(w3e," \u2014 "),JI=n(w3e,"A",{href:!0});var hUr=s(JI);z1o=r(hUr,"XGLMModel"),hUr.forEach(t),Q1o=r(w3e," (XGLM model)"),w3e.forEach(t),W1o=i($),pu=n($,"LI",{});var A3e=s(pu);rse=n(A3e,"STRONG",{});var pUr=s(rse);H1o=r(pUr,"xlm"),pUr.forEach(t),U1o=r(A3e," \u2014 "),YI=n(A3e,"A",{href:!0});var uUr=s(YI);J1o=r(uUr,"XLMModel"),uUr.forEach(t),Y1o=r(A3e," (XLM model)"),A3e.forEach(t),K1o=i($),uu=n($,"LI",{});var y3e=s(uu);tse=n(y3e,"STRONG",{});var _Ur=s(tse);Z1o=r(_Ur,"xlm-prophetnet"),_Ur.forEach(t),e8o=r(y3e," \u2014 "),KI=n(y3e,"A",{href:!0});var bUr=s(KI);o8o=r(bUr,"XLMProphetNetModel"),bUr.forEach(t),r8o=r(y3e," (XLMProphetNet model)"),y3e.forEach(t),t8o=i($),_u=n($,"LI",{});var L3e=s(_u);ase=n(L3e,"STRONG",{});var vUr=s(ase);a8o=r(vUr,"xlm-roberta"),vUr.forEach(t),n8o=r(L3e," \u2014 "),ZI=n(L3e,"A",{href:!0});var FUr=s(ZI);s8o=r(FUr,"XLMRobertaModel"),FUr.forEach(t),l8o=r(L3e," (XLM-RoBERTa model)"),L3e.forEach(t),i8o=i($),bu=n($,"LI",{});var x3e=s(bu);nse=n(x3e,"STRONG",{});var TUr=s(nse);d8o=r(TUr,"xlm-roberta-xl"),TUr.forEach(t),c8o=r(x3e," \u2014 "),eq=n(x3e,"A",{href:!0});var MUr=s(eq);f8o=r(MUr,"XLMRobertaXLModel"),MUr.forEach(t),m8o=r(x3e," (XLM-RoBERTa-XL model)"),x3e.forEach(t),g8o=i($),vu=n($,"LI",{});var $3e=s(vu);sse=n($3e,"STRONG",{});var EUr=s(sse);h8o=r(EUr,"xlnet"),EUr.forEach(t),p8o=r($3e," \u2014 "),oq=n($3e,"A",{href:!0});var CUr=s(oq);u8o=r(CUr,"XLNetModel"),CUr.forEach(t),_8o=r($3e," (XLNet model)"),$3e.forEach(t),b8o=i($),Fu=n($,"LI",{});var k3e=s(Fu);lse=n(k3e,"STRONG",{});var wUr=s(lse);v8o=r(wUr,"yolos"),wUr.forEach(t),F8o=r(k3e," \u2014 "),rq=n(k3e,"A",{href:!0});var AUr=s(rq);T8o=r(AUr,"YolosModel"),AUr.forEach(t),M8o=r(k3e," (YOLOS model)"),k3e.forEach(t),E8o=i($),Tu=n($,"LI",{});var S3e=s(Tu);ise=n(S3e,"STRONG",{});var yUr=s(ise);C8o=r(yUr,"yoso"),yUr.forEach(t),w8o=r(S3e," \u2014 "),tq=n(S3e,"A",{href:!0});var LUr=s(tq);A8o=r(LUr,"YosoModel"),LUr.forEach(t),y8o=r(S3e," (YOSO model)"),S3e.forEach(t),$.forEach(t),L8o=i(Jt),Mu=n(Jt,"P",{});var R3e=s(Mu);x8o=r(R3e,"The model is set in evaluation mode by default using "),dse=n(R3e,"CODE",{});var xUr=s(dse);$8o=r(xUr,"model.eval()"),xUr.forEach(t),k8o=r(R3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cse=n(R3e,"CODE",{});var $Ur=s(cse);S8o=r($Ur,"model.train()"),$Ur.forEach(t),R3e.forEach(t),R8o=i(Jt),T(Eu.$$.fragment,Jt),Jt.forEach(t),Is.forEach(t),aPe=i(f),vi=n(f,"H2",{class:!0});var sqe=s(vi);Cu=n(sqe,"A",{id:!0,class:!0,href:!0});var kUr=s(Cu);fse=n(kUr,"SPAN",{});var SUr=s(fse);T(iA.$$.fragment,SUr),SUr.forEach(t),kUr.forEach(t),B8o=i(sqe),mse=n(sqe,"SPAN",{});var RUr=s(mse);P8o=r(RUr,"AutoModelForPreTraining"),RUr.forEach(t),sqe.forEach(t),nPe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(dA.$$.fragment,qs),I8o=i(qs),Fi=n(qs,"P",{});var RY=s(Fi);q8o=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aq=n(RY,"A",{href:!0});var BUr=s(aq);N8o=r(BUr,"from_pretrained()"),BUr.forEach(t),j8o=r(RY," class method or the "),nq=n(RY,"A",{href:!0});var PUr=s(nq);D8o=r(PUr,"from_config()"),PUr.forEach(t),G8o=r(RY,` class
method.`),RY.forEach(t),O8o=i(qs),cA=n(qs,"P",{});var lqe=s(cA);V8o=r(lqe,"This class cannot be instantiated directly using "),gse=n(lqe,"CODE",{});var IUr=s(gse);X8o=r(IUr,"__init__()"),IUr.forEach(t),z8o=r(lqe," (throws an error)."),lqe.forEach(t),Q8o=i(qs),et=n(qs,"DIV",{class:!0});var NC=s(et);T(fA.$$.fragment,NC),W8o=i(NC),hse=n(NC,"P",{});var qUr=s(hse);H8o=r(qUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qUr.forEach(t),U8o=i(NC),Ti=n(NC,"P",{});var BY=s(Ti);J8o=r(BY,`Note:
Loading a model from its configuration file does `),pse=n(BY,"STRONG",{});var NUr=s(pse);Y8o=r(NUr,"not"),NUr.forEach(t),K8o=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sq=n(BY,"A",{href:!0});var jUr=s(sq);Z8o=r(jUr,"from_pretrained()"),jUr.forEach(t),ebo=r(BY," to load the model weights."),BY.forEach(t),obo=i(NC),T(wu.$$.fragment,NC),NC.forEach(t),rbo=i(qs),Ue=n(qs,"DIV",{class:!0});var Yt=s(Ue);T(mA.$$.fragment,Yt),tbo=i(Yt),use=n(Yt,"P",{});var DUr=s(use);abo=r(DUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DUr.forEach(t),nbo=i(Yt),Ca=n(Yt,"P",{});var jC=s(Ca);sbo=r(jC,"The model class to instantiate is selected based on the "),_se=n(jC,"CODE",{});var GUr=s(_se);lbo=r(GUr,"model_type"),GUr.forEach(t),ibo=r(jC,` property of the config object (either
passed as an argument or loaded from `),bse=n(jC,"CODE",{});var OUr=s(bse);dbo=r(OUr,"pretrained_model_name_or_path"),OUr.forEach(t),cbo=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=n(jC,"CODE",{});var VUr=s(vse);fbo=r(VUr,"pretrained_model_name_or_path"),VUr.forEach(t),mbo=r(jC,":"),jC.forEach(t),gbo=i(Yt),G=n(Yt,"UL",{});var V=s(G);Au=n(V,"LI",{});var B3e=s(Au);Fse=n(B3e,"STRONG",{});var XUr=s(Fse);hbo=r(XUr,"albert"),XUr.forEach(t),pbo=r(B3e," \u2014 "),lq=n(B3e,"A",{href:!0});var zUr=s(lq);ubo=r(zUr,"AlbertForPreTraining"),zUr.forEach(t),_bo=r(B3e," (ALBERT model)"),B3e.forEach(t),bbo=i(V),yu=n(V,"LI",{});var P3e=s(yu);Tse=n(P3e,"STRONG",{});var QUr=s(Tse);vbo=r(QUr,"bart"),QUr.forEach(t),Fbo=r(P3e," \u2014 "),iq=n(P3e,"A",{href:!0});var WUr=s(iq);Tbo=r(WUr,"BartForConditionalGeneration"),WUr.forEach(t),Mbo=r(P3e," (BART model)"),P3e.forEach(t),Ebo=i(V),Lu=n(V,"LI",{});var I3e=s(Lu);Mse=n(I3e,"STRONG",{});var HUr=s(Mse);Cbo=r(HUr,"bert"),HUr.forEach(t),wbo=r(I3e," \u2014 "),dq=n(I3e,"A",{href:!0});var UUr=s(dq);Abo=r(UUr,"BertForPreTraining"),UUr.forEach(t),ybo=r(I3e," (BERT model)"),I3e.forEach(t),Lbo=i(V),xu=n(V,"LI",{});var q3e=s(xu);Ese=n(q3e,"STRONG",{});var JUr=s(Ese);xbo=r(JUr,"big_bird"),JUr.forEach(t),$bo=r(q3e," \u2014 "),cq=n(q3e,"A",{href:!0});var YUr=s(cq);kbo=r(YUr,"BigBirdForPreTraining"),YUr.forEach(t),Sbo=r(q3e," (BigBird model)"),q3e.forEach(t),Rbo=i(V),$u=n(V,"LI",{});var N3e=s($u);Cse=n(N3e,"STRONG",{});var KUr=s(Cse);Bbo=r(KUr,"camembert"),KUr.forEach(t),Pbo=r(N3e," \u2014 "),fq=n(N3e,"A",{href:!0});var ZUr=s(fq);Ibo=r(ZUr,"CamembertForMaskedLM"),ZUr.forEach(t),qbo=r(N3e," (CamemBERT model)"),N3e.forEach(t),Nbo=i(V),ku=n(V,"LI",{});var j3e=s(ku);wse=n(j3e,"STRONG",{});var eJr=s(wse);jbo=r(eJr,"ctrl"),eJr.forEach(t),Dbo=r(j3e," \u2014 "),mq=n(j3e,"A",{href:!0});var oJr=s(mq);Gbo=r(oJr,"CTRLLMHeadModel"),oJr.forEach(t),Obo=r(j3e," (CTRL model)"),j3e.forEach(t),Vbo=i(V),Su=n(V,"LI",{});var D3e=s(Su);Ase=n(D3e,"STRONG",{});var rJr=s(Ase);Xbo=r(rJr,"data2vec-text"),rJr.forEach(t),zbo=r(D3e," \u2014 "),gq=n(D3e,"A",{href:!0});var tJr=s(gq);Qbo=r(tJr,"Data2VecTextForMaskedLM"),tJr.forEach(t),Wbo=r(D3e," (Data2VecText model)"),D3e.forEach(t),Hbo=i(V),Ru=n(V,"LI",{});var G3e=s(Ru);yse=n(G3e,"STRONG",{});var aJr=s(yse);Ubo=r(aJr,"deberta"),aJr.forEach(t),Jbo=r(G3e," \u2014 "),hq=n(G3e,"A",{href:!0});var nJr=s(hq);Ybo=r(nJr,"DebertaForMaskedLM"),nJr.forEach(t),Kbo=r(G3e," (DeBERTa model)"),G3e.forEach(t),Zbo=i(V),Bu=n(V,"LI",{});var O3e=s(Bu);Lse=n(O3e,"STRONG",{});var sJr=s(Lse);e2o=r(sJr,"deberta-v2"),sJr.forEach(t),o2o=r(O3e," \u2014 "),pq=n(O3e,"A",{href:!0});var lJr=s(pq);r2o=r(lJr,"DebertaV2ForMaskedLM"),lJr.forEach(t),t2o=r(O3e," (DeBERTa-v2 model)"),O3e.forEach(t),a2o=i(V),Pu=n(V,"LI",{});var V3e=s(Pu);xse=n(V3e,"STRONG",{});var iJr=s(xse);n2o=r(iJr,"distilbert"),iJr.forEach(t),s2o=r(V3e," \u2014 "),uq=n(V3e,"A",{href:!0});var dJr=s(uq);l2o=r(dJr,"DistilBertForMaskedLM"),dJr.forEach(t),i2o=r(V3e," (DistilBERT model)"),V3e.forEach(t),d2o=i(V),Iu=n(V,"LI",{});var X3e=s(Iu);$se=n(X3e,"STRONG",{});var cJr=s($se);c2o=r(cJr,"electra"),cJr.forEach(t),f2o=r(X3e," \u2014 "),_q=n(X3e,"A",{href:!0});var fJr=s(_q);m2o=r(fJr,"ElectraForPreTraining"),fJr.forEach(t),g2o=r(X3e," (ELECTRA model)"),X3e.forEach(t),h2o=i(V),qu=n(V,"LI",{});var z3e=s(qu);kse=n(z3e,"STRONG",{});var mJr=s(kse);p2o=r(mJr,"flaubert"),mJr.forEach(t),u2o=r(z3e," \u2014 "),bq=n(z3e,"A",{href:!0});var gJr=s(bq);_2o=r(gJr,"FlaubertWithLMHeadModel"),gJr.forEach(t),b2o=r(z3e," (FlauBERT model)"),z3e.forEach(t),v2o=i(V),Nu=n(V,"LI",{});var Q3e=s(Nu);Sse=n(Q3e,"STRONG",{});var hJr=s(Sse);F2o=r(hJr,"fnet"),hJr.forEach(t),T2o=r(Q3e," \u2014 "),vq=n(Q3e,"A",{href:!0});var pJr=s(vq);M2o=r(pJr,"FNetForPreTraining"),pJr.forEach(t),E2o=r(Q3e," (FNet model)"),Q3e.forEach(t),C2o=i(V),ju=n(V,"LI",{});var W3e=s(ju);Rse=n(W3e,"STRONG",{});var uJr=s(Rse);w2o=r(uJr,"fsmt"),uJr.forEach(t),A2o=r(W3e," \u2014 "),Fq=n(W3e,"A",{href:!0});var _Jr=s(Fq);y2o=r(_Jr,"FSMTForConditionalGeneration"),_Jr.forEach(t),L2o=r(W3e," (FairSeq Machine-Translation model)"),W3e.forEach(t),x2o=i(V),Du=n(V,"LI",{});var H3e=s(Du);Bse=n(H3e,"STRONG",{});var bJr=s(Bse);$2o=r(bJr,"funnel"),bJr.forEach(t),k2o=r(H3e," \u2014 "),Tq=n(H3e,"A",{href:!0});var vJr=s(Tq);S2o=r(vJr,"FunnelForPreTraining"),vJr.forEach(t),R2o=r(H3e," (Funnel Transformer model)"),H3e.forEach(t),B2o=i(V),Gu=n(V,"LI",{});var U3e=s(Gu);Pse=n(U3e,"STRONG",{});var FJr=s(Pse);P2o=r(FJr,"gpt2"),FJr.forEach(t),I2o=r(U3e," \u2014 "),Mq=n(U3e,"A",{href:!0});var TJr=s(Mq);q2o=r(TJr,"GPT2LMHeadModel"),TJr.forEach(t),N2o=r(U3e," (OpenAI GPT-2 model)"),U3e.forEach(t),j2o=i(V),Ou=n(V,"LI",{});var J3e=s(Ou);Ise=n(J3e,"STRONG",{});var MJr=s(Ise);D2o=r(MJr,"ibert"),MJr.forEach(t),G2o=r(J3e," \u2014 "),Eq=n(J3e,"A",{href:!0});var EJr=s(Eq);O2o=r(EJr,"IBertForMaskedLM"),EJr.forEach(t),V2o=r(J3e," (I-BERT model)"),J3e.forEach(t),X2o=i(V),Vu=n(V,"LI",{});var Y3e=s(Vu);qse=n(Y3e,"STRONG",{});var CJr=s(qse);z2o=r(CJr,"layoutlm"),CJr.forEach(t),Q2o=r(Y3e," \u2014 "),Cq=n(Y3e,"A",{href:!0});var wJr=s(Cq);W2o=r(wJr,"LayoutLMForMaskedLM"),wJr.forEach(t),H2o=r(Y3e," (LayoutLM model)"),Y3e.forEach(t),U2o=i(V),Xu=n(V,"LI",{});var K3e=s(Xu);Nse=n(K3e,"STRONG",{});var AJr=s(Nse);J2o=r(AJr,"longformer"),AJr.forEach(t),Y2o=r(K3e," \u2014 "),wq=n(K3e,"A",{href:!0});var yJr=s(wq);K2o=r(yJr,"LongformerForMaskedLM"),yJr.forEach(t),Z2o=r(K3e," (Longformer model)"),K3e.forEach(t),evo=i(V),zu=n(V,"LI",{});var Z3e=s(zu);jse=n(Z3e,"STRONG",{});var LJr=s(jse);ovo=r(LJr,"lxmert"),LJr.forEach(t),rvo=r(Z3e," \u2014 "),Aq=n(Z3e,"A",{href:!0});var xJr=s(Aq);tvo=r(xJr,"LxmertForPreTraining"),xJr.forEach(t),avo=r(Z3e," (LXMERT model)"),Z3e.forEach(t),nvo=i(V),Qu=n(V,"LI",{});var ewe=s(Qu);Dse=n(ewe,"STRONG",{});var $Jr=s(Dse);svo=r($Jr,"megatron-bert"),$Jr.forEach(t),lvo=r(ewe," \u2014 "),yq=n(ewe,"A",{href:!0});var kJr=s(yq);ivo=r(kJr,"MegatronBertForPreTraining"),kJr.forEach(t),dvo=r(ewe," (MegatronBert model)"),ewe.forEach(t),cvo=i(V),Wu=n(V,"LI",{});var owe=s(Wu);Gse=n(owe,"STRONG",{});var SJr=s(Gse);fvo=r(SJr,"mobilebert"),SJr.forEach(t),mvo=r(owe," \u2014 "),Lq=n(owe,"A",{href:!0});var RJr=s(Lq);gvo=r(RJr,"MobileBertForPreTraining"),RJr.forEach(t),hvo=r(owe," (MobileBERT model)"),owe.forEach(t),pvo=i(V),Hu=n(V,"LI",{});var rwe=s(Hu);Ose=n(rwe,"STRONG",{});var BJr=s(Ose);uvo=r(BJr,"mpnet"),BJr.forEach(t),_vo=r(rwe," \u2014 "),xq=n(rwe,"A",{href:!0});var PJr=s(xq);bvo=r(PJr,"MPNetForMaskedLM"),PJr.forEach(t),vvo=r(rwe," (MPNet model)"),rwe.forEach(t),Fvo=i(V),Uu=n(V,"LI",{});var twe=s(Uu);Vse=n(twe,"STRONG",{});var IJr=s(Vse);Tvo=r(IJr,"openai-gpt"),IJr.forEach(t),Mvo=r(twe," \u2014 "),$q=n(twe,"A",{href:!0});var qJr=s($q);Evo=r(qJr,"OpenAIGPTLMHeadModel"),qJr.forEach(t),Cvo=r(twe," (OpenAI GPT model)"),twe.forEach(t),wvo=i(V),Ju=n(V,"LI",{});var awe=s(Ju);Xse=n(awe,"STRONG",{});var NJr=s(Xse);Avo=r(NJr,"retribert"),NJr.forEach(t),yvo=r(awe," \u2014 "),kq=n(awe,"A",{href:!0});var jJr=s(kq);Lvo=r(jJr,"RetriBertModel"),jJr.forEach(t),xvo=r(awe," (RetriBERT model)"),awe.forEach(t),$vo=i(V),Yu=n(V,"LI",{});var nwe=s(Yu);zse=n(nwe,"STRONG",{});var DJr=s(zse);kvo=r(DJr,"roberta"),DJr.forEach(t),Svo=r(nwe," \u2014 "),Sq=n(nwe,"A",{href:!0});var GJr=s(Sq);Rvo=r(GJr,"RobertaForMaskedLM"),GJr.forEach(t),Bvo=r(nwe," (RoBERTa model)"),nwe.forEach(t),Pvo=i(V),Ku=n(V,"LI",{});var swe=s(Ku);Qse=n(swe,"STRONG",{});var OJr=s(Qse);Ivo=r(OJr,"squeezebert"),OJr.forEach(t),qvo=r(swe," \u2014 "),Rq=n(swe,"A",{href:!0});var VJr=s(Rq);Nvo=r(VJr,"SqueezeBertForMaskedLM"),VJr.forEach(t),jvo=r(swe," (SqueezeBERT model)"),swe.forEach(t),Dvo=i(V),Zu=n(V,"LI",{});var lwe=s(Zu);Wse=n(lwe,"STRONG",{});var XJr=s(Wse);Gvo=r(XJr,"t5"),XJr.forEach(t),Ovo=r(lwe," \u2014 "),Bq=n(lwe,"A",{href:!0});var zJr=s(Bq);Vvo=r(zJr,"T5ForConditionalGeneration"),zJr.forEach(t),Xvo=r(lwe," (T5 model)"),lwe.forEach(t),zvo=i(V),e_=n(V,"LI",{});var iwe=s(e_);Hse=n(iwe,"STRONG",{});var QJr=s(Hse);Qvo=r(QJr,"tapas"),QJr.forEach(t),Wvo=r(iwe," \u2014 "),Pq=n(iwe,"A",{href:!0});var WJr=s(Pq);Hvo=r(WJr,"TapasForMaskedLM"),WJr.forEach(t),Uvo=r(iwe," (TAPAS model)"),iwe.forEach(t),Jvo=i(V),o_=n(V,"LI",{});var dwe=s(o_);Use=n(dwe,"STRONG",{});var HJr=s(Use);Yvo=r(HJr,"transfo-xl"),HJr.forEach(t),Kvo=r(dwe," \u2014 "),Iq=n(dwe,"A",{href:!0});var UJr=s(Iq);Zvo=r(UJr,"TransfoXLLMHeadModel"),UJr.forEach(t),eFo=r(dwe," (Transformer-XL model)"),dwe.forEach(t),oFo=i(V),r_=n(V,"LI",{});var cwe=s(r_);Jse=n(cwe,"STRONG",{});var JJr=s(Jse);rFo=r(JJr,"unispeech"),JJr.forEach(t),tFo=r(cwe," \u2014 "),qq=n(cwe,"A",{href:!0});var YJr=s(qq);aFo=r(YJr,"UniSpeechForPreTraining"),YJr.forEach(t),nFo=r(cwe," (UniSpeech model)"),cwe.forEach(t),sFo=i(V),t_=n(V,"LI",{});var fwe=s(t_);Yse=n(fwe,"STRONG",{});var KJr=s(Yse);lFo=r(KJr,"unispeech-sat"),KJr.forEach(t),iFo=r(fwe," \u2014 "),Nq=n(fwe,"A",{href:!0});var ZJr=s(Nq);dFo=r(ZJr,"UniSpeechSatForPreTraining"),ZJr.forEach(t),cFo=r(fwe," (UniSpeechSat model)"),fwe.forEach(t),fFo=i(V),a_=n(V,"LI",{});var mwe=s(a_);Kse=n(mwe,"STRONG",{});var eYr=s(Kse);mFo=r(eYr,"visual_bert"),eYr.forEach(t),gFo=r(mwe," \u2014 "),jq=n(mwe,"A",{href:!0});var oYr=s(jq);hFo=r(oYr,"VisualBertForPreTraining"),oYr.forEach(t),pFo=r(mwe," (VisualBert model)"),mwe.forEach(t),uFo=i(V),n_=n(V,"LI",{});var gwe=s(n_);Zse=n(gwe,"STRONG",{});var rYr=s(Zse);_Fo=r(rYr,"vit_mae"),rYr.forEach(t),bFo=r(gwe," \u2014 "),Dq=n(gwe,"A",{href:!0});var tYr=s(Dq);vFo=r(tYr,"ViTMAEForPreTraining"),tYr.forEach(t),FFo=r(gwe," (ViTMAE model)"),gwe.forEach(t),TFo=i(V),s_=n(V,"LI",{});var hwe=s(s_);ele=n(hwe,"STRONG",{});var aYr=s(ele);MFo=r(aYr,"wav2vec2"),aYr.forEach(t),EFo=r(hwe," \u2014 "),Gq=n(hwe,"A",{href:!0});var nYr=s(Gq);CFo=r(nYr,"Wav2Vec2ForPreTraining"),nYr.forEach(t),wFo=r(hwe," (Wav2Vec2 model)"),hwe.forEach(t),AFo=i(V),l_=n(V,"LI",{});var pwe=s(l_);ole=n(pwe,"STRONG",{});var sYr=s(ole);yFo=r(sYr,"xlm"),sYr.forEach(t),LFo=r(pwe," \u2014 "),Oq=n(pwe,"A",{href:!0});var lYr=s(Oq);xFo=r(lYr,"XLMWithLMHeadModel"),lYr.forEach(t),$Fo=r(pwe," (XLM model)"),pwe.forEach(t),kFo=i(V),i_=n(V,"LI",{});var uwe=s(i_);rle=n(uwe,"STRONG",{});var iYr=s(rle);SFo=r(iYr,"xlm-roberta"),iYr.forEach(t),RFo=r(uwe," \u2014 "),Vq=n(uwe,"A",{href:!0});var dYr=s(Vq);BFo=r(dYr,"XLMRobertaForMaskedLM"),dYr.forEach(t),PFo=r(uwe," (XLM-RoBERTa model)"),uwe.forEach(t),IFo=i(V),d_=n(V,"LI",{});var _we=s(d_);tle=n(_we,"STRONG",{});var cYr=s(tle);qFo=r(cYr,"xlm-roberta-xl"),cYr.forEach(t),NFo=r(_we," \u2014 "),Xq=n(_we,"A",{href:!0});var fYr=s(Xq);jFo=r(fYr,"XLMRobertaXLForMaskedLM"),fYr.forEach(t),DFo=r(_we," (XLM-RoBERTa-XL model)"),_we.forEach(t),GFo=i(V),c_=n(V,"LI",{});var bwe=s(c_);ale=n(bwe,"STRONG",{});var mYr=s(ale);OFo=r(mYr,"xlnet"),mYr.forEach(t),VFo=r(bwe," \u2014 "),zq=n(bwe,"A",{href:!0});var gYr=s(zq);XFo=r(gYr,"XLNetLMHeadModel"),gYr.forEach(t),zFo=r(bwe," (XLNet model)"),bwe.forEach(t),V.forEach(t),QFo=i(Yt),f_=n(Yt,"P",{});var vwe=s(f_);WFo=r(vwe,"The model is set in evaluation mode by default using "),nle=n(vwe,"CODE",{});var hYr=s(nle);HFo=r(hYr,"model.eval()"),hYr.forEach(t),UFo=r(vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sle=n(vwe,"CODE",{});var pYr=s(sle);JFo=r(pYr,"model.train()"),pYr.forEach(t),vwe.forEach(t),YFo=i(Yt),T(m_.$$.fragment,Yt),Yt.forEach(t),qs.forEach(t),sPe=i(f),Mi=n(f,"H2",{class:!0});var iqe=s(Mi);g_=n(iqe,"A",{id:!0,class:!0,href:!0});var uYr=s(g_);lle=n(uYr,"SPAN",{});var _Yr=s(lle);T(gA.$$.fragment,_Yr),_Yr.forEach(t),uYr.forEach(t),KFo=i(iqe),ile=n(iqe,"SPAN",{});var bYr=s(ile);ZFo=r(bYr,"AutoModelForCausalLM"),bYr.forEach(t),iqe.forEach(t),lPe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(hA.$$.fragment,Ns),e0o=i(Ns),Ei=n(Ns,"P",{});var PY=s(Ei);o0o=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Qq=n(PY,"A",{href:!0});var vYr=s(Qq);r0o=r(vYr,"from_pretrained()"),vYr.forEach(t),t0o=r(PY," class method or the "),Wq=n(PY,"A",{href:!0});var FYr=s(Wq);a0o=r(FYr,"from_config()"),FYr.forEach(t),n0o=r(PY,` class
method.`),PY.forEach(t),s0o=i(Ns),pA=n(Ns,"P",{});var dqe=s(pA);l0o=r(dqe,"This class cannot be instantiated directly using "),dle=n(dqe,"CODE",{});var TYr=s(dle);i0o=r(TYr,"__init__()"),TYr.forEach(t),d0o=r(dqe," (throws an error)."),dqe.forEach(t),c0o=i(Ns),ot=n(Ns,"DIV",{class:!0});var DC=s(ot);T(uA.$$.fragment,DC),f0o=i(DC),cle=n(DC,"P",{});var MYr=s(cle);m0o=r(MYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MYr.forEach(t),g0o=i(DC),Ci=n(DC,"P",{});var IY=s(Ci);h0o=r(IY,`Note:
Loading a model from its configuration file does `),fle=n(IY,"STRONG",{});var EYr=s(fle);p0o=r(EYr,"not"),EYr.forEach(t),u0o=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=n(IY,"A",{href:!0});var CYr=s(Hq);_0o=r(CYr,"from_pretrained()"),CYr.forEach(t),b0o=r(IY," to load the model weights."),IY.forEach(t),v0o=i(DC),T(h_.$$.fragment,DC),DC.forEach(t),F0o=i(Ns),Je=n(Ns,"DIV",{class:!0});var Kt=s(Je);T(_A.$$.fragment,Kt),T0o=i(Kt),mle=n(Kt,"P",{});var wYr=s(mle);M0o=r(wYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wYr.forEach(t),E0o=i(Kt),wa=n(Kt,"P",{});var GC=s(wa);C0o=r(GC,"The model class to instantiate is selected based on the "),gle=n(GC,"CODE",{});var AYr=s(gle);w0o=r(AYr,"model_type"),AYr.forEach(t),A0o=r(GC,` property of the config object (either
passed as an argument or loaded from `),hle=n(GC,"CODE",{});var yYr=s(hle);y0o=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),L0o=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ple=n(GC,"CODE",{});var LYr=s(ple);x0o=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),$0o=r(GC,":"),GC.forEach(t),k0o=i(Kt),z=n(Kt,"UL",{});var W=s(z);p_=n(W,"LI",{});var Fwe=s(p_);ule=n(Fwe,"STRONG",{});var xYr=s(ule);S0o=r(xYr,"bart"),xYr.forEach(t),R0o=r(Fwe," \u2014 "),Uq=n(Fwe,"A",{href:!0});var $Yr=s(Uq);B0o=r($Yr,"BartForCausalLM"),$Yr.forEach(t),P0o=r(Fwe," (BART model)"),Fwe.forEach(t),I0o=i(W),u_=n(W,"LI",{});var Twe=s(u_);_le=n(Twe,"STRONG",{});var kYr=s(_le);q0o=r(kYr,"bert"),kYr.forEach(t),N0o=r(Twe," \u2014 "),Jq=n(Twe,"A",{href:!0});var SYr=s(Jq);j0o=r(SYr,"BertLMHeadModel"),SYr.forEach(t),D0o=r(Twe," (BERT model)"),Twe.forEach(t),G0o=i(W),__=n(W,"LI",{});var Mwe=s(__);ble=n(Mwe,"STRONG",{});var RYr=s(ble);O0o=r(RYr,"bert-generation"),RYr.forEach(t),V0o=r(Mwe," \u2014 "),Yq=n(Mwe,"A",{href:!0});var BYr=s(Yq);X0o=r(BYr,"BertGenerationDecoder"),BYr.forEach(t),z0o=r(Mwe," (Bert Generation model)"),Mwe.forEach(t),Q0o=i(W),b_=n(W,"LI",{});var Ewe=s(b_);vle=n(Ewe,"STRONG",{});var PYr=s(vle);W0o=r(PYr,"big_bird"),PYr.forEach(t),H0o=r(Ewe," \u2014 "),Kq=n(Ewe,"A",{href:!0});var IYr=s(Kq);U0o=r(IYr,"BigBirdForCausalLM"),IYr.forEach(t),J0o=r(Ewe," (BigBird model)"),Ewe.forEach(t),Y0o=i(W),v_=n(W,"LI",{});var Cwe=s(v_);Fle=n(Cwe,"STRONG",{});var qYr=s(Fle);K0o=r(qYr,"bigbird_pegasus"),qYr.forEach(t),Z0o=r(Cwe," \u2014 "),Zq=n(Cwe,"A",{href:!0});var NYr=s(Zq);eTo=r(NYr,"BigBirdPegasusForCausalLM"),NYr.forEach(t),oTo=r(Cwe," (BigBirdPegasus model)"),Cwe.forEach(t),rTo=i(W),F_=n(W,"LI",{});var wwe=s(F_);Tle=n(wwe,"STRONG",{});var jYr=s(Tle);tTo=r(jYr,"blenderbot"),jYr.forEach(t),aTo=r(wwe," \u2014 "),eN=n(wwe,"A",{href:!0});var DYr=s(eN);nTo=r(DYr,"BlenderbotForCausalLM"),DYr.forEach(t),sTo=r(wwe," (Blenderbot model)"),wwe.forEach(t),lTo=i(W),T_=n(W,"LI",{});var Awe=s(T_);Mle=n(Awe,"STRONG",{});var GYr=s(Mle);iTo=r(GYr,"blenderbot-small"),GYr.forEach(t),dTo=r(Awe," \u2014 "),oN=n(Awe,"A",{href:!0});var OYr=s(oN);cTo=r(OYr,"BlenderbotSmallForCausalLM"),OYr.forEach(t),fTo=r(Awe," (BlenderbotSmall model)"),Awe.forEach(t),mTo=i(W),M_=n(W,"LI",{});var ywe=s(M_);Ele=n(ywe,"STRONG",{});var VYr=s(Ele);gTo=r(VYr,"camembert"),VYr.forEach(t),hTo=r(ywe," \u2014 "),rN=n(ywe,"A",{href:!0});var XYr=s(rN);pTo=r(XYr,"CamembertForCausalLM"),XYr.forEach(t),uTo=r(ywe," (CamemBERT model)"),ywe.forEach(t),_To=i(W),E_=n(W,"LI",{});var Lwe=s(E_);Cle=n(Lwe,"STRONG",{});var zYr=s(Cle);bTo=r(zYr,"ctrl"),zYr.forEach(t),vTo=r(Lwe," \u2014 "),tN=n(Lwe,"A",{href:!0});var QYr=s(tN);FTo=r(QYr,"CTRLLMHeadModel"),QYr.forEach(t),TTo=r(Lwe," (CTRL model)"),Lwe.forEach(t),MTo=i(W),C_=n(W,"LI",{});var xwe=s(C_);wle=n(xwe,"STRONG",{});var WYr=s(wle);ETo=r(WYr,"data2vec-text"),WYr.forEach(t),CTo=r(xwe," \u2014 "),aN=n(xwe,"A",{href:!0});var HYr=s(aN);wTo=r(HYr,"Data2VecTextForCausalLM"),HYr.forEach(t),ATo=r(xwe," (Data2VecText model)"),xwe.forEach(t),yTo=i(W),w_=n(W,"LI",{});var $we=s(w_);Ale=n($we,"STRONG",{});var UYr=s(Ale);LTo=r(UYr,"electra"),UYr.forEach(t),xTo=r($we," \u2014 "),nN=n($we,"A",{href:!0});var JYr=s(nN);$To=r(JYr,"ElectraForCausalLM"),JYr.forEach(t),kTo=r($we," (ELECTRA model)"),$we.forEach(t),STo=i(W),A_=n(W,"LI",{});var kwe=s(A_);yle=n(kwe,"STRONG",{});var YYr=s(yle);RTo=r(YYr,"gpt2"),YYr.forEach(t),BTo=r(kwe," \u2014 "),sN=n(kwe,"A",{href:!0});var KYr=s(sN);PTo=r(KYr,"GPT2LMHeadModel"),KYr.forEach(t),ITo=r(kwe," (OpenAI GPT-2 model)"),kwe.forEach(t),qTo=i(W),y_=n(W,"LI",{});var Swe=s(y_);Lle=n(Swe,"STRONG",{});var ZYr=s(Lle);NTo=r(ZYr,"gpt_neo"),ZYr.forEach(t),jTo=r(Swe," \u2014 "),lN=n(Swe,"A",{href:!0});var eKr=s(lN);DTo=r(eKr,"GPTNeoForCausalLM"),eKr.forEach(t),GTo=r(Swe," (GPT Neo model)"),Swe.forEach(t),OTo=i(W),L_=n(W,"LI",{});var Rwe=s(L_);xle=n(Rwe,"STRONG",{});var oKr=s(xle);VTo=r(oKr,"gptj"),oKr.forEach(t),XTo=r(Rwe," \u2014 "),iN=n(Rwe,"A",{href:!0});var rKr=s(iN);zTo=r(rKr,"GPTJForCausalLM"),rKr.forEach(t),QTo=r(Rwe," (GPT-J model)"),Rwe.forEach(t),WTo=i(W),x_=n(W,"LI",{});var Bwe=s(x_);$le=n(Bwe,"STRONG",{});var tKr=s($le);HTo=r(tKr,"marian"),tKr.forEach(t),UTo=r(Bwe," \u2014 "),dN=n(Bwe,"A",{href:!0});var aKr=s(dN);JTo=r(aKr,"MarianForCausalLM"),aKr.forEach(t),YTo=r(Bwe," (Marian model)"),Bwe.forEach(t),KTo=i(W),$_=n(W,"LI",{});var Pwe=s($_);kle=n(Pwe,"STRONG",{});var nKr=s(kle);ZTo=r(nKr,"mbart"),nKr.forEach(t),e7o=r(Pwe," \u2014 "),cN=n(Pwe,"A",{href:!0});var sKr=s(cN);o7o=r(sKr,"MBartForCausalLM"),sKr.forEach(t),r7o=r(Pwe," (mBART model)"),Pwe.forEach(t),t7o=i(W),k_=n(W,"LI",{});var Iwe=s(k_);Sle=n(Iwe,"STRONG",{});var lKr=s(Sle);a7o=r(lKr,"megatron-bert"),lKr.forEach(t),n7o=r(Iwe," \u2014 "),fN=n(Iwe,"A",{href:!0});var iKr=s(fN);s7o=r(iKr,"MegatronBertForCausalLM"),iKr.forEach(t),l7o=r(Iwe," (MegatronBert model)"),Iwe.forEach(t),i7o=i(W),S_=n(W,"LI",{});var qwe=s(S_);Rle=n(qwe,"STRONG",{});var dKr=s(Rle);d7o=r(dKr,"openai-gpt"),dKr.forEach(t),c7o=r(qwe," \u2014 "),mN=n(qwe,"A",{href:!0});var cKr=s(mN);f7o=r(cKr,"OpenAIGPTLMHeadModel"),cKr.forEach(t),m7o=r(qwe," (OpenAI GPT model)"),qwe.forEach(t),g7o=i(W),R_=n(W,"LI",{});var Nwe=s(R_);Ble=n(Nwe,"STRONG",{});var fKr=s(Ble);h7o=r(fKr,"opt"),fKr.forEach(t),p7o=r(Nwe," \u2014 "),gN=n(Nwe,"A",{href:!0});var mKr=s(gN);u7o=r(mKr,"OPTForCausalLM"),mKr.forEach(t),_7o=r(Nwe," (OPT model)"),Nwe.forEach(t),b7o=i(W),B_=n(W,"LI",{});var jwe=s(B_);Ple=n(jwe,"STRONG",{});var gKr=s(Ple);v7o=r(gKr,"pegasus"),gKr.forEach(t),F7o=r(jwe," \u2014 "),hN=n(jwe,"A",{href:!0});var hKr=s(hN);T7o=r(hKr,"PegasusForCausalLM"),hKr.forEach(t),M7o=r(jwe," (Pegasus model)"),jwe.forEach(t),E7o=i(W),P_=n(W,"LI",{});var Dwe=s(P_);Ile=n(Dwe,"STRONG",{});var pKr=s(Ile);C7o=r(pKr,"plbart"),pKr.forEach(t),w7o=r(Dwe," \u2014 "),pN=n(Dwe,"A",{href:!0});var uKr=s(pN);A7o=r(uKr,"PLBartForCausalLM"),uKr.forEach(t),y7o=r(Dwe," (PLBart model)"),Dwe.forEach(t),L7o=i(W),I_=n(W,"LI",{});var Gwe=s(I_);qle=n(Gwe,"STRONG",{});var _Kr=s(qle);x7o=r(_Kr,"prophetnet"),_Kr.forEach(t),$7o=r(Gwe," \u2014 "),uN=n(Gwe,"A",{href:!0});var bKr=s(uN);k7o=r(bKr,"ProphetNetForCausalLM"),bKr.forEach(t),S7o=r(Gwe," (ProphetNet model)"),Gwe.forEach(t),R7o=i(W),q_=n(W,"LI",{});var Owe=s(q_);Nle=n(Owe,"STRONG",{});var vKr=s(Nle);B7o=r(vKr,"qdqbert"),vKr.forEach(t),P7o=r(Owe," \u2014 "),_N=n(Owe,"A",{href:!0});var FKr=s(_N);I7o=r(FKr,"QDQBertLMHeadModel"),FKr.forEach(t),q7o=r(Owe," (QDQBert model)"),Owe.forEach(t),N7o=i(W),N_=n(W,"LI",{});var Vwe=s(N_);jle=n(Vwe,"STRONG",{});var TKr=s(jle);j7o=r(TKr,"reformer"),TKr.forEach(t),D7o=r(Vwe," \u2014 "),bN=n(Vwe,"A",{href:!0});var MKr=s(bN);G7o=r(MKr,"ReformerModelWithLMHead"),MKr.forEach(t),O7o=r(Vwe," (Reformer model)"),Vwe.forEach(t),V7o=i(W),j_=n(W,"LI",{});var Xwe=s(j_);Dle=n(Xwe,"STRONG",{});var EKr=s(Dle);X7o=r(EKr,"rembert"),EKr.forEach(t),z7o=r(Xwe," \u2014 "),vN=n(Xwe,"A",{href:!0});var CKr=s(vN);Q7o=r(CKr,"RemBertForCausalLM"),CKr.forEach(t),W7o=r(Xwe," (RemBERT model)"),Xwe.forEach(t),H7o=i(W),D_=n(W,"LI",{});var zwe=s(D_);Gle=n(zwe,"STRONG",{});var wKr=s(Gle);U7o=r(wKr,"roberta"),wKr.forEach(t),J7o=r(zwe," \u2014 "),FN=n(zwe,"A",{href:!0});var AKr=s(FN);Y7o=r(AKr,"RobertaForCausalLM"),AKr.forEach(t),K7o=r(zwe," (RoBERTa model)"),zwe.forEach(t),Z7o=i(W),G_=n(W,"LI",{});var Qwe=s(G_);Ole=n(Qwe,"STRONG",{});var yKr=s(Ole);eMo=r(yKr,"roformer"),yKr.forEach(t),oMo=r(Qwe," \u2014 "),TN=n(Qwe,"A",{href:!0});var LKr=s(TN);rMo=r(LKr,"RoFormerForCausalLM"),LKr.forEach(t),tMo=r(Qwe," (RoFormer model)"),Qwe.forEach(t),aMo=i(W),O_=n(W,"LI",{});var Wwe=s(O_);Vle=n(Wwe,"STRONG",{});var xKr=s(Vle);nMo=r(xKr,"speech_to_text_2"),xKr.forEach(t),sMo=r(Wwe," \u2014 "),MN=n(Wwe,"A",{href:!0});var $Kr=s(MN);lMo=r($Kr,"Speech2Text2ForCausalLM"),$Kr.forEach(t),iMo=r(Wwe," (Speech2Text2 model)"),Wwe.forEach(t),dMo=i(W),V_=n(W,"LI",{});var Hwe=s(V_);Xle=n(Hwe,"STRONG",{});var kKr=s(Xle);cMo=r(kKr,"transfo-xl"),kKr.forEach(t),fMo=r(Hwe," \u2014 "),EN=n(Hwe,"A",{href:!0});var SKr=s(EN);mMo=r(SKr,"TransfoXLLMHeadModel"),SKr.forEach(t),gMo=r(Hwe," (Transformer-XL model)"),Hwe.forEach(t),hMo=i(W),X_=n(W,"LI",{});var Uwe=s(X_);zle=n(Uwe,"STRONG",{});var RKr=s(zle);pMo=r(RKr,"trocr"),RKr.forEach(t),uMo=r(Uwe," \u2014 "),CN=n(Uwe,"A",{href:!0});var BKr=s(CN);_Mo=r(BKr,"TrOCRForCausalLM"),BKr.forEach(t),bMo=r(Uwe," (TrOCR model)"),Uwe.forEach(t),vMo=i(W),z_=n(W,"LI",{});var Jwe=s(z_);Qle=n(Jwe,"STRONG",{});var PKr=s(Qle);FMo=r(PKr,"xglm"),PKr.forEach(t),TMo=r(Jwe," \u2014 "),wN=n(Jwe,"A",{href:!0});var IKr=s(wN);MMo=r(IKr,"XGLMForCausalLM"),IKr.forEach(t),EMo=r(Jwe," (XGLM model)"),Jwe.forEach(t),CMo=i(W),Q_=n(W,"LI",{});var Ywe=s(Q_);Wle=n(Ywe,"STRONG",{});var qKr=s(Wle);wMo=r(qKr,"xlm"),qKr.forEach(t),AMo=r(Ywe," \u2014 "),AN=n(Ywe,"A",{href:!0});var NKr=s(AN);yMo=r(NKr,"XLMWithLMHeadModel"),NKr.forEach(t),LMo=r(Ywe," (XLM model)"),Ywe.forEach(t),xMo=i(W),W_=n(W,"LI",{});var Kwe=s(W_);Hle=n(Kwe,"STRONG",{});var jKr=s(Hle);$Mo=r(jKr,"xlm-prophetnet"),jKr.forEach(t),kMo=r(Kwe," \u2014 "),yN=n(Kwe,"A",{href:!0});var DKr=s(yN);SMo=r(DKr,"XLMProphetNetForCausalLM"),DKr.forEach(t),RMo=r(Kwe," (XLMProphetNet model)"),Kwe.forEach(t),BMo=i(W),H_=n(W,"LI",{});var Zwe=s(H_);Ule=n(Zwe,"STRONG",{});var GKr=s(Ule);PMo=r(GKr,"xlm-roberta"),GKr.forEach(t),IMo=r(Zwe," \u2014 "),LN=n(Zwe,"A",{href:!0});var OKr=s(LN);qMo=r(OKr,"XLMRobertaForCausalLM"),OKr.forEach(t),NMo=r(Zwe," (XLM-RoBERTa model)"),Zwe.forEach(t),jMo=i(W),U_=n(W,"LI",{});var eAe=s(U_);Jle=n(eAe,"STRONG",{});var VKr=s(Jle);DMo=r(VKr,"xlm-roberta-xl"),VKr.forEach(t),GMo=r(eAe," \u2014 "),xN=n(eAe,"A",{href:!0});var XKr=s(xN);OMo=r(XKr,"XLMRobertaXLForCausalLM"),XKr.forEach(t),VMo=r(eAe," (XLM-RoBERTa-XL model)"),eAe.forEach(t),XMo=i(W),J_=n(W,"LI",{});var oAe=s(J_);Yle=n(oAe,"STRONG",{});var zKr=s(Yle);zMo=r(zKr,"xlnet"),zKr.forEach(t),QMo=r(oAe," \u2014 "),$N=n(oAe,"A",{href:!0});var QKr=s($N);WMo=r(QKr,"XLNetLMHeadModel"),QKr.forEach(t),HMo=r(oAe," (XLNet model)"),oAe.forEach(t),W.forEach(t),UMo=i(Kt),Y_=n(Kt,"P",{});var rAe=s(Y_);JMo=r(rAe,"The model is set in evaluation mode by default using "),Kle=n(rAe,"CODE",{});var WKr=s(Kle);YMo=r(WKr,"model.eval()"),WKr.forEach(t),KMo=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=n(rAe,"CODE",{});var HKr=s(Zle);ZMo=r(HKr,"model.train()"),HKr.forEach(t),rAe.forEach(t),e4o=i(Kt),T(K_.$$.fragment,Kt),Kt.forEach(t),Ns.forEach(t),iPe=i(f),wi=n(f,"H2",{class:!0});var cqe=s(wi);Z_=n(cqe,"A",{id:!0,class:!0,href:!0});var UKr=s(Z_);eie=n(UKr,"SPAN",{});var JKr=s(eie);T(bA.$$.fragment,JKr),JKr.forEach(t),UKr.forEach(t),o4o=i(cqe),oie=n(cqe,"SPAN",{});var YKr=s(oie);r4o=r(YKr,"AutoModelForMaskedLM"),YKr.forEach(t),cqe.forEach(t),dPe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(vA.$$.fragment,js),t4o=i(js),Ai=n(js,"P",{});var qY=s(Ai);a4o=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kN=n(qY,"A",{href:!0});var KKr=s(kN);n4o=r(KKr,"from_pretrained()"),KKr.forEach(t),s4o=r(qY," class method or the "),SN=n(qY,"A",{href:!0});var ZKr=s(SN);l4o=r(ZKr,"from_config()"),ZKr.forEach(t),i4o=r(qY,` class
method.`),qY.forEach(t),d4o=i(js),FA=n(js,"P",{});var fqe=s(FA);c4o=r(fqe,"This class cannot be instantiated directly using "),rie=n(fqe,"CODE",{});var eZr=s(rie);f4o=r(eZr,"__init__()"),eZr.forEach(t),m4o=r(fqe," (throws an error)."),fqe.forEach(t),g4o=i(js),rt=n(js,"DIV",{class:!0});var OC=s(rt);T(TA.$$.fragment,OC),h4o=i(OC),tie=n(OC,"P",{});var oZr=s(tie);p4o=r(oZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oZr.forEach(t),u4o=i(OC),yi=n(OC,"P",{});var NY=s(yi);_4o=r(NY,`Note:
Loading a model from its configuration file does `),aie=n(NY,"STRONG",{});var rZr=s(aie);b4o=r(rZr,"not"),rZr.forEach(t),v4o=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RN=n(NY,"A",{href:!0});var tZr=s(RN);F4o=r(tZr,"from_pretrained()"),tZr.forEach(t),T4o=r(NY," to load the model weights."),NY.forEach(t),M4o=i(OC),T(e1.$$.fragment,OC),OC.forEach(t),E4o=i(js),Ye=n(js,"DIV",{class:!0});var Zt=s(Ye);T(MA.$$.fragment,Zt),C4o=i(Zt),nie=n(Zt,"P",{});var aZr=s(nie);w4o=r(aZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aZr.forEach(t),A4o=i(Zt),Aa=n(Zt,"P",{});var VC=s(Aa);y4o=r(VC,"The model class to instantiate is selected based on the "),sie=n(VC,"CODE",{});var nZr=s(sie);L4o=r(nZr,"model_type"),nZr.forEach(t),x4o=r(VC,` property of the config object (either
passed as an argument or loaded from `),lie=n(VC,"CODE",{});var sZr=s(lie);$4o=r(sZr,"pretrained_model_name_or_path"),sZr.forEach(t),k4o=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=n(VC,"CODE",{});var lZr=s(iie);S4o=r(lZr,"pretrained_model_name_or_path"),lZr.forEach(t),R4o=r(VC,":"),VC.forEach(t),B4o=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);o1=n(H,"LI",{});var tAe=s(o1);die=n(tAe,"STRONG",{});var iZr=s(die);P4o=r(iZr,"albert"),iZr.forEach(t),I4o=r(tAe," \u2014 "),BN=n(tAe,"A",{href:!0});var dZr=s(BN);q4o=r(dZr,"AlbertForMaskedLM"),dZr.forEach(t),N4o=r(tAe," (ALBERT model)"),tAe.forEach(t),j4o=i(H),r1=n(H,"LI",{});var aAe=s(r1);cie=n(aAe,"STRONG",{});var cZr=s(cie);D4o=r(cZr,"bart"),cZr.forEach(t),G4o=r(aAe," \u2014 "),PN=n(aAe,"A",{href:!0});var fZr=s(PN);O4o=r(fZr,"BartForConditionalGeneration"),fZr.forEach(t),V4o=r(aAe," (BART model)"),aAe.forEach(t),X4o=i(H),t1=n(H,"LI",{});var nAe=s(t1);fie=n(nAe,"STRONG",{});var mZr=s(fie);z4o=r(mZr,"bert"),mZr.forEach(t),Q4o=r(nAe," \u2014 "),IN=n(nAe,"A",{href:!0});var gZr=s(IN);W4o=r(gZr,"BertForMaskedLM"),gZr.forEach(t),H4o=r(nAe," (BERT model)"),nAe.forEach(t),U4o=i(H),a1=n(H,"LI",{});var sAe=s(a1);mie=n(sAe,"STRONG",{});var hZr=s(mie);J4o=r(hZr,"big_bird"),hZr.forEach(t),Y4o=r(sAe," \u2014 "),qN=n(sAe,"A",{href:!0});var pZr=s(qN);K4o=r(pZr,"BigBirdForMaskedLM"),pZr.forEach(t),Z4o=r(sAe," (BigBird model)"),sAe.forEach(t),eEo=i(H),n1=n(H,"LI",{});var lAe=s(n1);gie=n(lAe,"STRONG",{});var uZr=s(gie);oEo=r(uZr,"camembert"),uZr.forEach(t),rEo=r(lAe," \u2014 "),NN=n(lAe,"A",{href:!0});var _Zr=s(NN);tEo=r(_Zr,"CamembertForMaskedLM"),_Zr.forEach(t),aEo=r(lAe," (CamemBERT model)"),lAe.forEach(t),nEo=i(H),s1=n(H,"LI",{});var iAe=s(s1);hie=n(iAe,"STRONG",{});var bZr=s(hie);sEo=r(bZr,"convbert"),bZr.forEach(t),lEo=r(iAe," \u2014 "),jN=n(iAe,"A",{href:!0});var vZr=s(jN);iEo=r(vZr,"ConvBertForMaskedLM"),vZr.forEach(t),dEo=r(iAe," (ConvBERT model)"),iAe.forEach(t),cEo=i(H),l1=n(H,"LI",{});var dAe=s(l1);pie=n(dAe,"STRONG",{});var FZr=s(pie);fEo=r(FZr,"data2vec-text"),FZr.forEach(t),mEo=r(dAe," \u2014 "),DN=n(dAe,"A",{href:!0});var TZr=s(DN);gEo=r(TZr,"Data2VecTextForMaskedLM"),TZr.forEach(t),hEo=r(dAe," (Data2VecText model)"),dAe.forEach(t),pEo=i(H),i1=n(H,"LI",{});var cAe=s(i1);uie=n(cAe,"STRONG",{});var MZr=s(uie);uEo=r(MZr,"deberta"),MZr.forEach(t),_Eo=r(cAe," \u2014 "),GN=n(cAe,"A",{href:!0});var EZr=s(GN);bEo=r(EZr,"DebertaForMaskedLM"),EZr.forEach(t),vEo=r(cAe," (DeBERTa model)"),cAe.forEach(t),FEo=i(H),d1=n(H,"LI",{});var fAe=s(d1);_ie=n(fAe,"STRONG",{});var CZr=s(_ie);TEo=r(CZr,"deberta-v2"),CZr.forEach(t),MEo=r(fAe," \u2014 "),ON=n(fAe,"A",{href:!0});var wZr=s(ON);EEo=r(wZr,"DebertaV2ForMaskedLM"),wZr.forEach(t),CEo=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),wEo=i(H),c1=n(H,"LI",{});var mAe=s(c1);bie=n(mAe,"STRONG",{});var AZr=s(bie);AEo=r(AZr,"distilbert"),AZr.forEach(t),yEo=r(mAe," \u2014 "),VN=n(mAe,"A",{href:!0});var yZr=s(VN);LEo=r(yZr,"DistilBertForMaskedLM"),yZr.forEach(t),xEo=r(mAe," (DistilBERT model)"),mAe.forEach(t),$Eo=i(H),f1=n(H,"LI",{});var gAe=s(f1);vie=n(gAe,"STRONG",{});var LZr=s(vie);kEo=r(LZr,"electra"),LZr.forEach(t),SEo=r(gAe," \u2014 "),XN=n(gAe,"A",{href:!0});var xZr=s(XN);REo=r(xZr,"ElectraForMaskedLM"),xZr.forEach(t),BEo=r(gAe," (ELECTRA model)"),gAe.forEach(t),PEo=i(H),m1=n(H,"LI",{});var hAe=s(m1);Fie=n(hAe,"STRONG",{});var $Zr=s(Fie);IEo=r($Zr,"flaubert"),$Zr.forEach(t),qEo=r(hAe," \u2014 "),zN=n(hAe,"A",{href:!0});var kZr=s(zN);NEo=r(kZr,"FlaubertWithLMHeadModel"),kZr.forEach(t),jEo=r(hAe," (FlauBERT model)"),hAe.forEach(t),DEo=i(H),g1=n(H,"LI",{});var pAe=s(g1);Tie=n(pAe,"STRONG",{});var SZr=s(Tie);GEo=r(SZr,"fnet"),SZr.forEach(t),OEo=r(pAe," \u2014 "),QN=n(pAe,"A",{href:!0});var RZr=s(QN);VEo=r(RZr,"FNetForMaskedLM"),RZr.forEach(t),XEo=r(pAe," (FNet model)"),pAe.forEach(t),zEo=i(H),h1=n(H,"LI",{});var uAe=s(h1);Mie=n(uAe,"STRONG",{});var BZr=s(Mie);QEo=r(BZr,"funnel"),BZr.forEach(t),WEo=r(uAe," \u2014 "),WN=n(uAe,"A",{href:!0});var PZr=s(WN);HEo=r(PZr,"FunnelForMaskedLM"),PZr.forEach(t),UEo=r(uAe," (Funnel Transformer model)"),uAe.forEach(t),JEo=i(H),p1=n(H,"LI",{});var _Ae=s(p1);Eie=n(_Ae,"STRONG",{});var IZr=s(Eie);YEo=r(IZr,"ibert"),IZr.forEach(t),KEo=r(_Ae," \u2014 "),HN=n(_Ae,"A",{href:!0});var qZr=s(HN);ZEo=r(qZr,"IBertForMaskedLM"),qZr.forEach(t),e5o=r(_Ae," (I-BERT model)"),_Ae.forEach(t),o5o=i(H),u1=n(H,"LI",{});var bAe=s(u1);Cie=n(bAe,"STRONG",{});var NZr=s(Cie);r5o=r(NZr,"layoutlm"),NZr.forEach(t),t5o=r(bAe," \u2014 "),UN=n(bAe,"A",{href:!0});var jZr=s(UN);a5o=r(jZr,"LayoutLMForMaskedLM"),jZr.forEach(t),n5o=r(bAe," (LayoutLM model)"),bAe.forEach(t),s5o=i(H),_1=n(H,"LI",{});var vAe=s(_1);wie=n(vAe,"STRONG",{});var DZr=s(wie);l5o=r(DZr,"longformer"),DZr.forEach(t),i5o=r(vAe," \u2014 "),JN=n(vAe,"A",{href:!0});var GZr=s(JN);d5o=r(GZr,"LongformerForMaskedLM"),GZr.forEach(t),c5o=r(vAe," (Longformer model)"),vAe.forEach(t),f5o=i(H),b1=n(H,"LI",{});var FAe=s(b1);Aie=n(FAe,"STRONG",{});var OZr=s(Aie);m5o=r(OZr,"mbart"),OZr.forEach(t),g5o=r(FAe," \u2014 "),YN=n(FAe,"A",{href:!0});var VZr=s(YN);h5o=r(VZr,"MBartForConditionalGeneration"),VZr.forEach(t),p5o=r(FAe," (mBART model)"),FAe.forEach(t),u5o=i(H),v1=n(H,"LI",{});var TAe=s(v1);yie=n(TAe,"STRONG",{});var XZr=s(yie);_5o=r(XZr,"megatron-bert"),XZr.forEach(t),b5o=r(TAe," \u2014 "),KN=n(TAe,"A",{href:!0});var zZr=s(KN);v5o=r(zZr,"MegatronBertForMaskedLM"),zZr.forEach(t),F5o=r(TAe," (MegatronBert model)"),TAe.forEach(t),T5o=i(H),F1=n(H,"LI",{});var MAe=s(F1);Lie=n(MAe,"STRONG",{});var QZr=s(Lie);M5o=r(QZr,"mobilebert"),QZr.forEach(t),E5o=r(MAe," \u2014 "),ZN=n(MAe,"A",{href:!0});var WZr=s(ZN);C5o=r(WZr,"MobileBertForMaskedLM"),WZr.forEach(t),w5o=r(MAe," (MobileBERT model)"),MAe.forEach(t),A5o=i(H),T1=n(H,"LI",{});var EAe=s(T1);xie=n(EAe,"STRONG",{});var HZr=s(xie);y5o=r(HZr,"mpnet"),HZr.forEach(t),L5o=r(EAe," \u2014 "),ej=n(EAe,"A",{href:!0});var UZr=s(ej);x5o=r(UZr,"MPNetForMaskedLM"),UZr.forEach(t),$5o=r(EAe," (MPNet model)"),EAe.forEach(t),k5o=i(H),M1=n(H,"LI",{});var CAe=s(M1);$ie=n(CAe,"STRONG",{});var JZr=s($ie);S5o=r(JZr,"nystromformer"),JZr.forEach(t),R5o=r(CAe," \u2014 "),oj=n(CAe,"A",{href:!0});var YZr=s(oj);B5o=r(YZr,"NystromformerForMaskedLM"),YZr.forEach(t),P5o=r(CAe," (Nystromformer model)"),CAe.forEach(t),I5o=i(H),E1=n(H,"LI",{});var wAe=s(E1);kie=n(wAe,"STRONG",{});var KZr=s(kie);q5o=r(KZr,"perceiver"),KZr.forEach(t),N5o=r(wAe," \u2014 "),rj=n(wAe,"A",{href:!0});var ZZr=s(rj);j5o=r(ZZr,"PerceiverForMaskedLM"),ZZr.forEach(t),D5o=r(wAe," (Perceiver model)"),wAe.forEach(t),G5o=i(H),C1=n(H,"LI",{});var AAe=s(C1);Sie=n(AAe,"STRONG",{});var eet=s(Sie);O5o=r(eet,"qdqbert"),eet.forEach(t),V5o=r(AAe," \u2014 "),tj=n(AAe,"A",{href:!0});var oet=s(tj);X5o=r(oet,"QDQBertForMaskedLM"),oet.forEach(t),z5o=r(AAe," (QDQBert model)"),AAe.forEach(t),Q5o=i(H),w1=n(H,"LI",{});var yAe=s(w1);Rie=n(yAe,"STRONG",{});var ret=s(Rie);W5o=r(ret,"reformer"),ret.forEach(t),H5o=r(yAe," \u2014 "),aj=n(yAe,"A",{href:!0});var tet=s(aj);U5o=r(tet,"ReformerForMaskedLM"),tet.forEach(t),J5o=r(yAe," (Reformer model)"),yAe.forEach(t),Y5o=i(H),A1=n(H,"LI",{});var LAe=s(A1);Bie=n(LAe,"STRONG",{});var aet=s(Bie);K5o=r(aet,"rembert"),aet.forEach(t),Z5o=r(LAe," \u2014 "),nj=n(LAe,"A",{href:!0});var net=s(nj);eCo=r(net,"RemBertForMaskedLM"),net.forEach(t),oCo=r(LAe," (RemBERT model)"),LAe.forEach(t),rCo=i(H),y1=n(H,"LI",{});var xAe=s(y1);Pie=n(xAe,"STRONG",{});var set=s(Pie);tCo=r(set,"roberta"),set.forEach(t),aCo=r(xAe," \u2014 "),sj=n(xAe,"A",{href:!0});var iet=s(sj);nCo=r(iet,"RobertaForMaskedLM"),iet.forEach(t),sCo=r(xAe," (RoBERTa model)"),xAe.forEach(t),lCo=i(H),L1=n(H,"LI",{});var $Ae=s(L1);Iie=n($Ae,"STRONG",{});var det=s(Iie);iCo=r(det,"roformer"),det.forEach(t),dCo=r($Ae," \u2014 "),lj=n($Ae,"A",{href:!0});var cet=s(lj);cCo=r(cet,"RoFormerForMaskedLM"),cet.forEach(t),fCo=r($Ae," (RoFormer model)"),$Ae.forEach(t),mCo=i(H),x1=n(H,"LI",{});var kAe=s(x1);qie=n(kAe,"STRONG",{});var fet=s(qie);gCo=r(fet,"squeezebert"),fet.forEach(t),hCo=r(kAe," \u2014 "),ij=n(kAe,"A",{href:!0});var met=s(ij);pCo=r(met,"SqueezeBertForMaskedLM"),met.forEach(t),uCo=r(kAe," (SqueezeBERT model)"),kAe.forEach(t),_Co=i(H),$1=n(H,"LI",{});var SAe=s($1);Nie=n(SAe,"STRONG",{});var get=s(Nie);bCo=r(get,"tapas"),get.forEach(t),vCo=r(SAe," \u2014 "),dj=n(SAe,"A",{href:!0});var het=s(dj);FCo=r(het,"TapasForMaskedLM"),het.forEach(t),TCo=r(SAe," (TAPAS model)"),SAe.forEach(t),MCo=i(H),k1=n(H,"LI",{});var RAe=s(k1);jie=n(RAe,"STRONG",{});var pet=s(jie);ECo=r(pet,"wav2vec2"),pet.forEach(t),CCo=r(RAe," \u2014 "),Die=n(RAe,"CODE",{});var uet=s(Die);wCo=r(uet,"Wav2Vec2ForMaskedLM"),uet.forEach(t),ACo=r(RAe," (Wav2Vec2 model)"),RAe.forEach(t),yCo=i(H),S1=n(H,"LI",{});var BAe=s(S1);Gie=n(BAe,"STRONG",{});var _et=s(Gie);LCo=r(_et,"xlm"),_et.forEach(t),xCo=r(BAe," \u2014 "),cj=n(BAe,"A",{href:!0});var bet=s(cj);$Co=r(bet,"XLMWithLMHeadModel"),bet.forEach(t),kCo=r(BAe," (XLM model)"),BAe.forEach(t),SCo=i(H),R1=n(H,"LI",{});var PAe=s(R1);Oie=n(PAe,"STRONG",{});var vet=s(Oie);RCo=r(vet,"xlm-roberta"),vet.forEach(t),BCo=r(PAe," \u2014 "),fj=n(PAe,"A",{href:!0});var Fet=s(fj);PCo=r(Fet,"XLMRobertaForMaskedLM"),Fet.forEach(t),ICo=r(PAe," (XLM-RoBERTa model)"),PAe.forEach(t),qCo=i(H),B1=n(H,"LI",{});var IAe=s(B1);Vie=n(IAe,"STRONG",{});var Tet=s(Vie);NCo=r(Tet,"xlm-roberta-xl"),Tet.forEach(t),jCo=r(IAe," \u2014 "),mj=n(IAe,"A",{href:!0});var Met=s(mj);DCo=r(Met,"XLMRobertaXLForMaskedLM"),Met.forEach(t),GCo=r(IAe," (XLM-RoBERTa-XL model)"),IAe.forEach(t),OCo=i(H),P1=n(H,"LI",{});var qAe=s(P1);Xie=n(qAe,"STRONG",{});var Eet=s(Xie);VCo=r(Eet,"yoso"),Eet.forEach(t),XCo=r(qAe," \u2014 "),gj=n(qAe,"A",{href:!0});var Cet=s(gj);zCo=r(Cet,"YosoForMaskedLM"),Cet.forEach(t),QCo=r(qAe," (YOSO model)"),qAe.forEach(t),H.forEach(t),WCo=i(Zt),I1=n(Zt,"P",{});var NAe=s(I1);HCo=r(NAe,"The model is set in evaluation mode by default using "),zie=n(NAe,"CODE",{});var wet=s(zie);UCo=r(wet,"model.eval()"),wet.forEach(t),JCo=r(NAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qie=n(NAe,"CODE",{});var Aet=s(Qie);YCo=r(Aet,"model.train()"),Aet.forEach(t),NAe.forEach(t),KCo=i(Zt),T(q1.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),cPe=i(f),Li=n(f,"H2",{class:!0});var mqe=s(Li);N1=n(mqe,"A",{id:!0,class:!0,href:!0});var yet=s(N1);Wie=n(yet,"SPAN",{});var Let=s(Wie);T(EA.$$.fragment,Let),Let.forEach(t),yet.forEach(t),ZCo=i(mqe),Hie=n(mqe,"SPAN",{});var xet=s(Hie);e3o=r(xet,"AutoModelForSeq2SeqLM"),xet.forEach(t),mqe.forEach(t),fPe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(CA.$$.fragment,Ds),o3o=i(Ds),xi=n(Ds,"P",{});var jY=s(xi);r3o=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hj=n(jY,"A",{href:!0});var $et=s(hj);t3o=r($et,"from_pretrained()"),$et.forEach(t),a3o=r(jY," class method or the "),pj=n(jY,"A",{href:!0});var ket=s(pj);n3o=r(ket,"from_config()"),ket.forEach(t),s3o=r(jY,` class
method.`),jY.forEach(t),l3o=i(Ds),wA=n(Ds,"P",{});var gqe=s(wA);i3o=r(gqe,"This class cannot be instantiated directly using "),Uie=n(gqe,"CODE",{});var Set=s(Uie);d3o=r(Set,"__init__()"),Set.forEach(t),c3o=r(gqe," (throws an error)."),gqe.forEach(t),f3o=i(Ds),tt=n(Ds,"DIV",{class:!0});var XC=s(tt);T(AA.$$.fragment,XC),m3o=i(XC),Jie=n(XC,"P",{});var Ret=s(Jie);g3o=r(Ret,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ret.forEach(t),h3o=i(XC),$i=n(XC,"P",{});var DY=s($i);p3o=r(DY,`Note:
Loading a model from its configuration file does `),Yie=n(DY,"STRONG",{});var Bet=s(Yie);u3o=r(Bet,"not"),Bet.forEach(t),_3o=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uj=n(DY,"A",{href:!0});var Pet=s(uj);b3o=r(Pet,"from_pretrained()"),Pet.forEach(t),v3o=r(DY," to load the model weights."),DY.forEach(t),F3o=i(XC),T(j1.$$.fragment,XC),XC.forEach(t),T3o=i(Ds),Ke=n(Ds,"DIV",{class:!0});var ea=s(Ke);T(yA.$$.fragment,ea),M3o=i(ea),Kie=n(ea,"P",{});var Iet=s(Kie);E3o=r(Iet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Iet.forEach(t),C3o=i(ea),ya=n(ea,"P",{});var zC=s(ya);w3o=r(zC,"The model class to instantiate is selected based on the "),Zie=n(zC,"CODE",{});var qet=s(Zie);A3o=r(qet,"model_type"),qet.forEach(t),y3o=r(zC,` property of the config object (either
passed as an argument or loaded from `),ede=n(zC,"CODE",{});var Net=s(ede);L3o=r(Net,"pretrained_model_name_or_path"),Net.forEach(t),x3o=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=n(zC,"CODE",{});var jet=s(ode);$3o=r(jet,"pretrained_model_name_or_path"),jet.forEach(t),k3o=r(zC,":"),zC.forEach(t),S3o=i(ea),he=n(ea,"UL",{});var ue=s(he);D1=n(ue,"LI",{});var jAe=s(D1);rde=n(jAe,"STRONG",{});var Det=s(rde);R3o=r(Det,"bart"),Det.forEach(t),B3o=r(jAe," \u2014 "),_j=n(jAe,"A",{href:!0});var Get=s(_j);P3o=r(Get,"BartForConditionalGeneration"),Get.forEach(t),I3o=r(jAe," (BART model)"),jAe.forEach(t),q3o=i(ue),G1=n(ue,"LI",{});var DAe=s(G1);tde=n(DAe,"STRONG",{});var Oet=s(tde);N3o=r(Oet,"bigbird_pegasus"),Oet.forEach(t),j3o=r(DAe," \u2014 "),bj=n(DAe,"A",{href:!0});var Vet=s(bj);D3o=r(Vet,"BigBirdPegasusForConditionalGeneration"),Vet.forEach(t),G3o=r(DAe," (BigBirdPegasus model)"),DAe.forEach(t),O3o=i(ue),O1=n(ue,"LI",{});var GAe=s(O1);ade=n(GAe,"STRONG",{});var Xet=s(ade);V3o=r(Xet,"blenderbot"),Xet.forEach(t),X3o=r(GAe," \u2014 "),vj=n(GAe,"A",{href:!0});var zet=s(vj);z3o=r(zet,"BlenderbotForConditionalGeneration"),zet.forEach(t),Q3o=r(GAe," (Blenderbot model)"),GAe.forEach(t),W3o=i(ue),V1=n(ue,"LI",{});var OAe=s(V1);nde=n(OAe,"STRONG",{});var Qet=s(nde);H3o=r(Qet,"blenderbot-small"),Qet.forEach(t),U3o=r(OAe," \u2014 "),Fj=n(OAe,"A",{href:!0});var Wet=s(Fj);J3o=r(Wet,"BlenderbotSmallForConditionalGeneration"),Wet.forEach(t),Y3o=r(OAe," (BlenderbotSmall model)"),OAe.forEach(t),K3o=i(ue),X1=n(ue,"LI",{});var VAe=s(X1);sde=n(VAe,"STRONG",{});var Het=s(sde);Z3o=r(Het,"encoder-decoder"),Het.forEach(t),ewo=r(VAe," \u2014 "),Tj=n(VAe,"A",{href:!0});var Uet=s(Tj);owo=r(Uet,"EncoderDecoderModel"),Uet.forEach(t),rwo=r(VAe," (Encoder decoder model)"),VAe.forEach(t),two=i(ue),z1=n(ue,"LI",{});var XAe=s(z1);lde=n(XAe,"STRONG",{});var Jet=s(lde);awo=r(Jet,"fsmt"),Jet.forEach(t),nwo=r(XAe," \u2014 "),Mj=n(XAe,"A",{href:!0});var Yet=s(Mj);swo=r(Yet,"FSMTForConditionalGeneration"),Yet.forEach(t),lwo=r(XAe," (FairSeq Machine-Translation model)"),XAe.forEach(t),iwo=i(ue),Q1=n(ue,"LI",{});var zAe=s(Q1);ide=n(zAe,"STRONG",{});var Ket=s(ide);dwo=r(Ket,"led"),Ket.forEach(t),cwo=r(zAe," \u2014 "),Ej=n(zAe,"A",{href:!0});var Zet=s(Ej);fwo=r(Zet,"LEDForConditionalGeneration"),Zet.forEach(t),mwo=r(zAe," (LED model)"),zAe.forEach(t),gwo=i(ue),W1=n(ue,"LI",{});var QAe=s(W1);dde=n(QAe,"STRONG",{});var eot=s(dde);hwo=r(eot,"m2m_100"),eot.forEach(t),pwo=r(QAe," \u2014 "),Cj=n(QAe,"A",{href:!0});var oot=s(Cj);uwo=r(oot,"M2M100ForConditionalGeneration"),oot.forEach(t),_wo=r(QAe," (M2M100 model)"),QAe.forEach(t),bwo=i(ue),H1=n(ue,"LI",{});var WAe=s(H1);cde=n(WAe,"STRONG",{});var rot=s(cde);vwo=r(rot,"marian"),rot.forEach(t),Fwo=r(WAe," \u2014 "),wj=n(WAe,"A",{href:!0});var tot=s(wj);Two=r(tot,"MarianMTModel"),tot.forEach(t),Mwo=r(WAe," (Marian model)"),WAe.forEach(t),Ewo=i(ue),U1=n(ue,"LI",{});var HAe=s(U1);fde=n(HAe,"STRONG",{});var aot=s(fde);Cwo=r(aot,"mbart"),aot.forEach(t),wwo=r(HAe," \u2014 "),Aj=n(HAe,"A",{href:!0});var not=s(Aj);Awo=r(not,"MBartForConditionalGeneration"),not.forEach(t),ywo=r(HAe," (mBART model)"),HAe.forEach(t),Lwo=i(ue),J1=n(ue,"LI",{});var UAe=s(J1);mde=n(UAe,"STRONG",{});var sot=s(mde);xwo=r(sot,"mt5"),sot.forEach(t),$wo=r(UAe," \u2014 "),yj=n(UAe,"A",{href:!0});var lot=s(yj);kwo=r(lot,"MT5ForConditionalGeneration"),lot.forEach(t),Swo=r(UAe," (mT5 model)"),UAe.forEach(t),Rwo=i(ue),Y1=n(ue,"LI",{});var JAe=s(Y1);gde=n(JAe,"STRONG",{});var iot=s(gde);Bwo=r(iot,"pegasus"),iot.forEach(t),Pwo=r(JAe," \u2014 "),Lj=n(JAe,"A",{href:!0});var dot=s(Lj);Iwo=r(dot,"PegasusForConditionalGeneration"),dot.forEach(t),qwo=r(JAe," (Pegasus model)"),JAe.forEach(t),Nwo=i(ue),K1=n(ue,"LI",{});var YAe=s(K1);hde=n(YAe,"STRONG",{});var cot=s(hde);jwo=r(cot,"plbart"),cot.forEach(t),Dwo=r(YAe," \u2014 "),xj=n(YAe,"A",{href:!0});var fot=s(xj);Gwo=r(fot,"PLBartForConditionalGeneration"),fot.forEach(t),Owo=r(YAe," (PLBart model)"),YAe.forEach(t),Vwo=i(ue),Z1=n(ue,"LI",{});var KAe=s(Z1);pde=n(KAe,"STRONG",{});var mot=s(pde);Xwo=r(mot,"prophetnet"),mot.forEach(t),zwo=r(KAe," \u2014 "),$j=n(KAe,"A",{href:!0});var got=s($j);Qwo=r(got,"ProphetNetForConditionalGeneration"),got.forEach(t),Wwo=r(KAe," (ProphetNet model)"),KAe.forEach(t),Hwo=i(ue),e8=n(ue,"LI",{});var ZAe=s(e8);ude=n(ZAe,"STRONG",{});var hot=s(ude);Uwo=r(hot,"t5"),hot.forEach(t),Jwo=r(ZAe," \u2014 "),kj=n(ZAe,"A",{href:!0});var pot=s(kj);Ywo=r(pot,"T5ForConditionalGeneration"),pot.forEach(t),Kwo=r(ZAe," (T5 model)"),ZAe.forEach(t),Zwo=i(ue),o8=n(ue,"LI",{});var e6e=s(o8);_de=n(e6e,"STRONG",{});var uot=s(_de);eAo=r(uot,"tapex"),uot.forEach(t),oAo=r(e6e," \u2014 "),Sj=n(e6e,"A",{href:!0});var _ot=s(Sj);rAo=r(_ot,"BartForConditionalGeneration"),_ot.forEach(t),tAo=r(e6e," (TAPEX model)"),e6e.forEach(t),aAo=i(ue),r8=n(ue,"LI",{});var o6e=s(r8);bde=n(o6e,"STRONG",{});var bot=s(bde);nAo=r(bot,"xlm-prophetnet"),bot.forEach(t),sAo=r(o6e," \u2014 "),Rj=n(o6e,"A",{href:!0});var vot=s(Rj);lAo=r(vot,"XLMProphetNetForConditionalGeneration"),vot.forEach(t),iAo=r(o6e," (XLMProphetNet model)"),o6e.forEach(t),ue.forEach(t),dAo=i(ea),t8=n(ea,"P",{});var r6e=s(t8);cAo=r(r6e,"The model is set in evaluation mode by default using "),vde=n(r6e,"CODE",{});var Fot=s(vde);fAo=r(Fot,"model.eval()"),Fot.forEach(t),mAo=r(r6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=n(r6e,"CODE",{});var Tot=s(Fde);gAo=r(Tot,"model.train()"),Tot.forEach(t),r6e.forEach(t),hAo=i(ea),T(a8.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),mPe=i(f),ki=n(f,"H2",{class:!0});var hqe=s(ki);n8=n(hqe,"A",{id:!0,class:!0,href:!0});var Mot=s(n8);Tde=n(Mot,"SPAN",{});var Eot=s(Tde);T(LA.$$.fragment,Eot),Eot.forEach(t),Mot.forEach(t),pAo=i(hqe),Mde=n(hqe,"SPAN",{});var Cot=s(Mde);uAo=r(Cot,"AutoModelForSequenceClassification"),Cot.forEach(t),hqe.forEach(t),gPe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(xA.$$.fragment,Gs),_Ao=i(Gs),Si=n(Gs,"P",{});var GY=s(Si);bAo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bj=n(GY,"A",{href:!0});var wot=s(Bj);vAo=r(wot,"from_pretrained()"),wot.forEach(t),FAo=r(GY," class method or the "),Pj=n(GY,"A",{href:!0});var Aot=s(Pj);TAo=r(Aot,"from_config()"),Aot.forEach(t),MAo=r(GY,` class
method.`),GY.forEach(t),EAo=i(Gs),$A=n(Gs,"P",{});var pqe=s($A);CAo=r(pqe,"This class cannot be instantiated directly using "),Ede=n(pqe,"CODE",{});var yot=s(Ede);wAo=r(yot,"__init__()"),yot.forEach(t),AAo=r(pqe," (throws an error)."),pqe.forEach(t),yAo=i(Gs),at=n(Gs,"DIV",{class:!0});var QC=s(at);T(kA.$$.fragment,QC),LAo=i(QC),Cde=n(QC,"P",{});var Lot=s(Cde);xAo=r(Lot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lot.forEach(t),$Ao=i(QC),Ri=n(QC,"P",{});var OY=s(Ri);kAo=r(OY,`Note:
Loading a model from its configuration file does `),wde=n(OY,"STRONG",{});var xot=s(wde);SAo=r(xot,"not"),xot.forEach(t),RAo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=n(OY,"A",{href:!0});var $ot=s(Ij);BAo=r($ot,"from_pretrained()"),$ot.forEach(t),PAo=r(OY," to load the model weights."),OY.forEach(t),IAo=i(QC),T(s8.$$.fragment,QC),QC.forEach(t),qAo=i(Gs),Ze=n(Gs,"DIV",{class:!0});var oa=s(Ze);T(SA.$$.fragment,oa),NAo=i(oa),Ade=n(oa,"P",{});var kot=s(Ade);jAo=r(kot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kot.forEach(t),DAo=i(oa),La=n(oa,"P",{});var WC=s(La);GAo=r(WC,"The model class to instantiate is selected based on the "),yde=n(WC,"CODE",{});var Sot=s(yde);OAo=r(Sot,"model_type"),Sot.forEach(t),VAo=r(WC,` property of the config object (either
passed as an argument or loaded from `),Lde=n(WC,"CODE",{});var Rot=s(Lde);XAo=r(Rot,"pretrained_model_name_or_path"),Rot.forEach(t),zAo=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=n(WC,"CODE",{});var Bot=s(xde);QAo=r(Bot,"pretrained_model_name_or_path"),Bot.forEach(t),WAo=r(WC,":"),WC.forEach(t),HAo=i(oa),q=n(oa,"UL",{});var j=s(q);l8=n(j,"LI",{});var t6e=s(l8);$de=n(t6e,"STRONG",{});var Pot=s($de);UAo=r(Pot,"albert"),Pot.forEach(t),JAo=r(t6e," \u2014 "),qj=n(t6e,"A",{href:!0});var Iot=s(qj);YAo=r(Iot,"AlbertForSequenceClassification"),Iot.forEach(t),KAo=r(t6e," (ALBERT model)"),t6e.forEach(t),ZAo=i(j),i8=n(j,"LI",{});var a6e=s(i8);kde=n(a6e,"STRONG",{});var qot=s(kde);e6o=r(qot,"bart"),qot.forEach(t),o6o=r(a6e," \u2014 "),Nj=n(a6e,"A",{href:!0});var Not=s(Nj);r6o=r(Not,"BartForSequenceClassification"),Not.forEach(t),t6o=r(a6e," (BART model)"),a6e.forEach(t),a6o=i(j),d8=n(j,"LI",{});var n6e=s(d8);Sde=n(n6e,"STRONG",{});var jot=s(Sde);n6o=r(jot,"bert"),jot.forEach(t),s6o=r(n6e," \u2014 "),jj=n(n6e,"A",{href:!0});var Dot=s(jj);l6o=r(Dot,"BertForSequenceClassification"),Dot.forEach(t),i6o=r(n6e," (BERT model)"),n6e.forEach(t),d6o=i(j),c8=n(j,"LI",{});var s6e=s(c8);Rde=n(s6e,"STRONG",{});var Got=s(Rde);c6o=r(Got,"big_bird"),Got.forEach(t),f6o=r(s6e," \u2014 "),Dj=n(s6e,"A",{href:!0});var Oot=s(Dj);m6o=r(Oot,"BigBirdForSequenceClassification"),Oot.forEach(t),g6o=r(s6e," (BigBird model)"),s6e.forEach(t),h6o=i(j),f8=n(j,"LI",{});var l6e=s(f8);Bde=n(l6e,"STRONG",{});var Vot=s(Bde);p6o=r(Vot,"bigbird_pegasus"),Vot.forEach(t),u6o=r(l6e," \u2014 "),Gj=n(l6e,"A",{href:!0});var Xot=s(Gj);_6o=r(Xot,"BigBirdPegasusForSequenceClassification"),Xot.forEach(t),b6o=r(l6e," (BigBirdPegasus model)"),l6e.forEach(t),v6o=i(j),m8=n(j,"LI",{});var i6e=s(m8);Pde=n(i6e,"STRONG",{});var zot=s(Pde);F6o=r(zot,"camembert"),zot.forEach(t),T6o=r(i6e," \u2014 "),Oj=n(i6e,"A",{href:!0});var Qot=s(Oj);M6o=r(Qot,"CamembertForSequenceClassification"),Qot.forEach(t),E6o=r(i6e," (CamemBERT model)"),i6e.forEach(t),C6o=i(j),g8=n(j,"LI",{});var d6e=s(g8);Ide=n(d6e,"STRONG",{});var Wot=s(Ide);w6o=r(Wot,"canine"),Wot.forEach(t),A6o=r(d6e," \u2014 "),Vj=n(d6e,"A",{href:!0});var Hot=s(Vj);y6o=r(Hot,"CanineForSequenceClassification"),Hot.forEach(t),L6o=r(d6e," (Canine model)"),d6e.forEach(t),x6o=i(j),h8=n(j,"LI",{});var c6e=s(h8);qde=n(c6e,"STRONG",{});var Uot=s(qde);$6o=r(Uot,"convbert"),Uot.forEach(t),k6o=r(c6e," \u2014 "),Xj=n(c6e,"A",{href:!0});var Jot=s(Xj);S6o=r(Jot,"ConvBertForSequenceClassification"),Jot.forEach(t),R6o=r(c6e," (ConvBERT model)"),c6e.forEach(t),B6o=i(j),p8=n(j,"LI",{});var f6e=s(p8);Nde=n(f6e,"STRONG",{});var Yot=s(Nde);P6o=r(Yot,"ctrl"),Yot.forEach(t),I6o=r(f6e," \u2014 "),zj=n(f6e,"A",{href:!0});var Kot=s(zj);q6o=r(Kot,"CTRLForSequenceClassification"),Kot.forEach(t),N6o=r(f6e," (CTRL model)"),f6e.forEach(t),j6o=i(j),u8=n(j,"LI",{});var m6e=s(u8);jde=n(m6e,"STRONG",{});var Zot=s(jde);D6o=r(Zot,"data2vec-text"),Zot.forEach(t),G6o=r(m6e," \u2014 "),Qj=n(m6e,"A",{href:!0});var ert=s(Qj);O6o=r(ert,"Data2VecTextForSequenceClassification"),ert.forEach(t),V6o=r(m6e," (Data2VecText model)"),m6e.forEach(t),X6o=i(j),_8=n(j,"LI",{});var g6e=s(_8);Dde=n(g6e,"STRONG",{});var ort=s(Dde);z6o=r(ort,"deberta"),ort.forEach(t),Q6o=r(g6e," \u2014 "),Wj=n(g6e,"A",{href:!0});var rrt=s(Wj);W6o=r(rrt,"DebertaForSequenceClassification"),rrt.forEach(t),H6o=r(g6e," (DeBERTa model)"),g6e.forEach(t),U6o=i(j),b8=n(j,"LI",{});var h6e=s(b8);Gde=n(h6e,"STRONG",{});var trt=s(Gde);J6o=r(trt,"deberta-v2"),trt.forEach(t),Y6o=r(h6e," \u2014 "),Hj=n(h6e,"A",{href:!0});var art=s(Hj);K6o=r(art,"DebertaV2ForSequenceClassification"),art.forEach(t),Z6o=r(h6e," (DeBERTa-v2 model)"),h6e.forEach(t),eyo=i(j),v8=n(j,"LI",{});var p6e=s(v8);Ode=n(p6e,"STRONG",{});var nrt=s(Ode);oyo=r(nrt,"distilbert"),nrt.forEach(t),ryo=r(p6e," \u2014 "),Uj=n(p6e,"A",{href:!0});var srt=s(Uj);tyo=r(srt,"DistilBertForSequenceClassification"),srt.forEach(t),ayo=r(p6e," (DistilBERT model)"),p6e.forEach(t),nyo=i(j),F8=n(j,"LI",{});var u6e=s(F8);Vde=n(u6e,"STRONG",{});var lrt=s(Vde);syo=r(lrt,"electra"),lrt.forEach(t),lyo=r(u6e," \u2014 "),Jj=n(u6e,"A",{href:!0});var irt=s(Jj);iyo=r(irt,"ElectraForSequenceClassification"),irt.forEach(t),dyo=r(u6e," (ELECTRA model)"),u6e.forEach(t),cyo=i(j),T8=n(j,"LI",{});var _6e=s(T8);Xde=n(_6e,"STRONG",{});var drt=s(Xde);fyo=r(drt,"flaubert"),drt.forEach(t),myo=r(_6e," \u2014 "),Yj=n(_6e,"A",{href:!0});var crt=s(Yj);gyo=r(crt,"FlaubertForSequenceClassification"),crt.forEach(t),hyo=r(_6e," (FlauBERT model)"),_6e.forEach(t),pyo=i(j),M8=n(j,"LI",{});var b6e=s(M8);zde=n(b6e,"STRONG",{});var frt=s(zde);uyo=r(frt,"fnet"),frt.forEach(t),_yo=r(b6e," \u2014 "),Kj=n(b6e,"A",{href:!0});var mrt=s(Kj);byo=r(mrt,"FNetForSequenceClassification"),mrt.forEach(t),vyo=r(b6e," (FNet model)"),b6e.forEach(t),Fyo=i(j),E8=n(j,"LI",{});var v6e=s(E8);Qde=n(v6e,"STRONG",{});var grt=s(Qde);Tyo=r(grt,"funnel"),grt.forEach(t),Myo=r(v6e," \u2014 "),Zj=n(v6e,"A",{href:!0});var hrt=s(Zj);Eyo=r(hrt,"FunnelForSequenceClassification"),hrt.forEach(t),Cyo=r(v6e," (Funnel Transformer model)"),v6e.forEach(t),wyo=i(j),C8=n(j,"LI",{});var F6e=s(C8);Wde=n(F6e,"STRONG",{});var prt=s(Wde);Ayo=r(prt,"gpt2"),prt.forEach(t),yyo=r(F6e," \u2014 "),eD=n(F6e,"A",{href:!0});var urt=s(eD);Lyo=r(urt,"GPT2ForSequenceClassification"),urt.forEach(t),xyo=r(F6e," (OpenAI GPT-2 model)"),F6e.forEach(t),$yo=i(j),w8=n(j,"LI",{});var T6e=s(w8);Hde=n(T6e,"STRONG",{});var _rt=s(Hde);kyo=r(_rt,"gpt_neo"),_rt.forEach(t),Syo=r(T6e," \u2014 "),oD=n(T6e,"A",{href:!0});var brt=s(oD);Ryo=r(brt,"GPTNeoForSequenceClassification"),brt.forEach(t),Byo=r(T6e," (GPT Neo model)"),T6e.forEach(t),Pyo=i(j),A8=n(j,"LI",{});var M6e=s(A8);Ude=n(M6e,"STRONG",{});var vrt=s(Ude);Iyo=r(vrt,"gptj"),vrt.forEach(t),qyo=r(M6e," \u2014 "),rD=n(M6e,"A",{href:!0});var Frt=s(rD);Nyo=r(Frt,"GPTJForSequenceClassification"),Frt.forEach(t),jyo=r(M6e," (GPT-J model)"),M6e.forEach(t),Dyo=i(j),y8=n(j,"LI",{});var E6e=s(y8);Jde=n(E6e,"STRONG",{});var Trt=s(Jde);Gyo=r(Trt,"ibert"),Trt.forEach(t),Oyo=r(E6e," \u2014 "),tD=n(E6e,"A",{href:!0});var Mrt=s(tD);Vyo=r(Mrt,"IBertForSequenceClassification"),Mrt.forEach(t),Xyo=r(E6e," (I-BERT model)"),E6e.forEach(t),zyo=i(j),L8=n(j,"LI",{});var C6e=s(L8);Yde=n(C6e,"STRONG",{});var Ert=s(Yde);Qyo=r(Ert,"layoutlm"),Ert.forEach(t),Wyo=r(C6e," \u2014 "),aD=n(C6e,"A",{href:!0});var Crt=s(aD);Hyo=r(Crt,"LayoutLMForSequenceClassification"),Crt.forEach(t),Uyo=r(C6e," (LayoutLM model)"),C6e.forEach(t),Jyo=i(j),x8=n(j,"LI",{});var w6e=s(x8);Kde=n(w6e,"STRONG",{});var wrt=s(Kde);Yyo=r(wrt,"layoutlmv2"),wrt.forEach(t),Kyo=r(w6e," \u2014 "),nD=n(w6e,"A",{href:!0});var Art=s(nD);Zyo=r(Art,"LayoutLMv2ForSequenceClassification"),Art.forEach(t),eLo=r(w6e," (LayoutLMv2 model)"),w6e.forEach(t),oLo=i(j),$8=n(j,"LI",{});var A6e=s($8);Zde=n(A6e,"STRONG",{});var yrt=s(Zde);rLo=r(yrt,"led"),yrt.forEach(t),tLo=r(A6e," \u2014 "),sD=n(A6e,"A",{href:!0});var Lrt=s(sD);aLo=r(Lrt,"LEDForSequenceClassification"),Lrt.forEach(t),nLo=r(A6e," (LED model)"),A6e.forEach(t),sLo=i(j),k8=n(j,"LI",{});var y6e=s(k8);ece=n(y6e,"STRONG",{});var xrt=s(ece);lLo=r(xrt,"longformer"),xrt.forEach(t),iLo=r(y6e," \u2014 "),lD=n(y6e,"A",{href:!0});var $rt=s(lD);dLo=r($rt,"LongformerForSequenceClassification"),$rt.forEach(t),cLo=r(y6e," (Longformer model)"),y6e.forEach(t),fLo=i(j),S8=n(j,"LI",{});var L6e=s(S8);oce=n(L6e,"STRONG",{});var krt=s(oce);mLo=r(krt,"mbart"),krt.forEach(t),gLo=r(L6e," \u2014 "),iD=n(L6e,"A",{href:!0});var Srt=s(iD);hLo=r(Srt,"MBartForSequenceClassification"),Srt.forEach(t),pLo=r(L6e," (mBART model)"),L6e.forEach(t),uLo=i(j),R8=n(j,"LI",{});var x6e=s(R8);rce=n(x6e,"STRONG",{});var Rrt=s(rce);_Lo=r(Rrt,"megatron-bert"),Rrt.forEach(t),bLo=r(x6e," \u2014 "),dD=n(x6e,"A",{href:!0});var Brt=s(dD);vLo=r(Brt,"MegatronBertForSequenceClassification"),Brt.forEach(t),FLo=r(x6e," (MegatronBert model)"),x6e.forEach(t),TLo=i(j),B8=n(j,"LI",{});var $6e=s(B8);tce=n($6e,"STRONG",{});var Prt=s(tce);MLo=r(Prt,"mobilebert"),Prt.forEach(t),ELo=r($6e," \u2014 "),cD=n($6e,"A",{href:!0});var Irt=s(cD);CLo=r(Irt,"MobileBertForSequenceClassification"),Irt.forEach(t),wLo=r($6e," (MobileBERT model)"),$6e.forEach(t),ALo=i(j),P8=n(j,"LI",{});var k6e=s(P8);ace=n(k6e,"STRONG",{});var qrt=s(ace);yLo=r(qrt,"mpnet"),qrt.forEach(t),LLo=r(k6e," \u2014 "),fD=n(k6e,"A",{href:!0});var Nrt=s(fD);xLo=r(Nrt,"MPNetForSequenceClassification"),Nrt.forEach(t),$Lo=r(k6e," (MPNet model)"),k6e.forEach(t),kLo=i(j),I8=n(j,"LI",{});var S6e=s(I8);nce=n(S6e,"STRONG",{});var jrt=s(nce);SLo=r(jrt,"nystromformer"),jrt.forEach(t),RLo=r(S6e," \u2014 "),mD=n(S6e,"A",{href:!0});var Drt=s(mD);BLo=r(Drt,"NystromformerForSequenceClassification"),Drt.forEach(t),PLo=r(S6e," (Nystromformer model)"),S6e.forEach(t),ILo=i(j),q8=n(j,"LI",{});var R6e=s(q8);sce=n(R6e,"STRONG",{});var Grt=s(sce);qLo=r(Grt,"openai-gpt"),Grt.forEach(t),NLo=r(R6e," \u2014 "),gD=n(R6e,"A",{href:!0});var Ort=s(gD);jLo=r(Ort,"OpenAIGPTForSequenceClassification"),Ort.forEach(t),DLo=r(R6e," (OpenAI GPT model)"),R6e.forEach(t),GLo=i(j),N8=n(j,"LI",{});var B6e=s(N8);lce=n(B6e,"STRONG",{});var Vrt=s(lce);OLo=r(Vrt,"perceiver"),Vrt.forEach(t),VLo=r(B6e," \u2014 "),hD=n(B6e,"A",{href:!0});var Xrt=s(hD);XLo=r(Xrt,"PerceiverForSequenceClassification"),Xrt.forEach(t),zLo=r(B6e," (Perceiver model)"),B6e.forEach(t),QLo=i(j),j8=n(j,"LI",{});var P6e=s(j8);ice=n(P6e,"STRONG",{});var zrt=s(ice);WLo=r(zrt,"plbart"),zrt.forEach(t),HLo=r(P6e," \u2014 "),pD=n(P6e,"A",{href:!0});var Qrt=s(pD);ULo=r(Qrt,"PLBartForSequenceClassification"),Qrt.forEach(t),JLo=r(P6e," (PLBart model)"),P6e.forEach(t),YLo=i(j),D8=n(j,"LI",{});var I6e=s(D8);dce=n(I6e,"STRONG",{});var Wrt=s(dce);KLo=r(Wrt,"qdqbert"),Wrt.forEach(t),ZLo=r(I6e," \u2014 "),uD=n(I6e,"A",{href:!0});var Hrt=s(uD);exo=r(Hrt,"QDQBertForSequenceClassification"),Hrt.forEach(t),oxo=r(I6e," (QDQBert model)"),I6e.forEach(t),rxo=i(j),G8=n(j,"LI",{});var q6e=s(G8);cce=n(q6e,"STRONG",{});var Urt=s(cce);txo=r(Urt,"reformer"),Urt.forEach(t),axo=r(q6e," \u2014 "),_D=n(q6e,"A",{href:!0});var Jrt=s(_D);nxo=r(Jrt,"ReformerForSequenceClassification"),Jrt.forEach(t),sxo=r(q6e," (Reformer model)"),q6e.forEach(t),lxo=i(j),O8=n(j,"LI",{});var N6e=s(O8);fce=n(N6e,"STRONG",{});var Yrt=s(fce);ixo=r(Yrt,"rembert"),Yrt.forEach(t),dxo=r(N6e," \u2014 "),bD=n(N6e,"A",{href:!0});var Krt=s(bD);cxo=r(Krt,"RemBertForSequenceClassification"),Krt.forEach(t),fxo=r(N6e," (RemBERT model)"),N6e.forEach(t),mxo=i(j),V8=n(j,"LI",{});var j6e=s(V8);mce=n(j6e,"STRONG",{});var Zrt=s(mce);gxo=r(Zrt,"roberta"),Zrt.forEach(t),hxo=r(j6e," \u2014 "),vD=n(j6e,"A",{href:!0});var ett=s(vD);pxo=r(ett,"RobertaForSequenceClassification"),ett.forEach(t),uxo=r(j6e," (RoBERTa model)"),j6e.forEach(t),_xo=i(j),X8=n(j,"LI",{});var D6e=s(X8);gce=n(D6e,"STRONG",{});var ott=s(gce);bxo=r(ott,"roformer"),ott.forEach(t),vxo=r(D6e," \u2014 "),FD=n(D6e,"A",{href:!0});var rtt=s(FD);Fxo=r(rtt,"RoFormerForSequenceClassification"),rtt.forEach(t),Txo=r(D6e," (RoFormer model)"),D6e.forEach(t),Mxo=i(j),z8=n(j,"LI",{});var G6e=s(z8);hce=n(G6e,"STRONG",{});var ttt=s(hce);Exo=r(ttt,"squeezebert"),ttt.forEach(t),Cxo=r(G6e," \u2014 "),TD=n(G6e,"A",{href:!0});var att=s(TD);wxo=r(att,"SqueezeBertForSequenceClassification"),att.forEach(t),Axo=r(G6e," (SqueezeBERT model)"),G6e.forEach(t),yxo=i(j),Q8=n(j,"LI",{});var O6e=s(Q8);pce=n(O6e,"STRONG",{});var ntt=s(pce);Lxo=r(ntt,"tapas"),ntt.forEach(t),xxo=r(O6e," \u2014 "),MD=n(O6e,"A",{href:!0});var stt=s(MD);$xo=r(stt,"TapasForSequenceClassification"),stt.forEach(t),kxo=r(O6e," (TAPAS model)"),O6e.forEach(t),Sxo=i(j),W8=n(j,"LI",{});var V6e=s(W8);uce=n(V6e,"STRONG",{});var ltt=s(uce);Rxo=r(ltt,"tapex"),ltt.forEach(t),Bxo=r(V6e," \u2014 "),ED=n(V6e,"A",{href:!0});var itt=s(ED);Pxo=r(itt,"BartForSequenceClassification"),itt.forEach(t),Ixo=r(V6e," (TAPEX model)"),V6e.forEach(t),qxo=i(j),H8=n(j,"LI",{});var X6e=s(H8);_ce=n(X6e,"STRONG",{});var dtt=s(_ce);Nxo=r(dtt,"transfo-xl"),dtt.forEach(t),jxo=r(X6e," \u2014 "),CD=n(X6e,"A",{href:!0});var ctt=s(CD);Dxo=r(ctt,"TransfoXLForSequenceClassification"),ctt.forEach(t),Gxo=r(X6e," (Transformer-XL model)"),X6e.forEach(t),Oxo=i(j),U8=n(j,"LI",{});var z6e=s(U8);bce=n(z6e,"STRONG",{});var ftt=s(bce);Vxo=r(ftt,"xlm"),ftt.forEach(t),Xxo=r(z6e," \u2014 "),wD=n(z6e,"A",{href:!0});var mtt=s(wD);zxo=r(mtt,"XLMForSequenceClassification"),mtt.forEach(t),Qxo=r(z6e," (XLM model)"),z6e.forEach(t),Wxo=i(j),J8=n(j,"LI",{});var Q6e=s(J8);vce=n(Q6e,"STRONG",{});var gtt=s(vce);Hxo=r(gtt,"xlm-roberta"),gtt.forEach(t),Uxo=r(Q6e," \u2014 "),AD=n(Q6e,"A",{href:!0});var htt=s(AD);Jxo=r(htt,"XLMRobertaForSequenceClassification"),htt.forEach(t),Yxo=r(Q6e," (XLM-RoBERTa model)"),Q6e.forEach(t),Kxo=i(j),Y8=n(j,"LI",{});var W6e=s(Y8);Fce=n(W6e,"STRONG",{});var ptt=s(Fce);Zxo=r(ptt,"xlm-roberta-xl"),ptt.forEach(t),e9o=r(W6e," \u2014 "),yD=n(W6e,"A",{href:!0});var utt=s(yD);o9o=r(utt,"XLMRobertaXLForSequenceClassification"),utt.forEach(t),r9o=r(W6e," (XLM-RoBERTa-XL model)"),W6e.forEach(t),t9o=i(j),K8=n(j,"LI",{});var H6e=s(K8);Tce=n(H6e,"STRONG",{});var _tt=s(Tce);a9o=r(_tt,"xlnet"),_tt.forEach(t),n9o=r(H6e," \u2014 "),LD=n(H6e,"A",{href:!0});var btt=s(LD);s9o=r(btt,"XLNetForSequenceClassification"),btt.forEach(t),l9o=r(H6e," (XLNet model)"),H6e.forEach(t),i9o=i(j),Z8=n(j,"LI",{});var U6e=s(Z8);Mce=n(U6e,"STRONG",{});var vtt=s(Mce);d9o=r(vtt,"yoso"),vtt.forEach(t),c9o=r(U6e," \u2014 "),xD=n(U6e,"A",{href:!0});var Ftt=s(xD);f9o=r(Ftt,"YosoForSequenceClassification"),Ftt.forEach(t),m9o=r(U6e," (YOSO model)"),U6e.forEach(t),j.forEach(t),g9o=i(oa),eb=n(oa,"P",{});var J6e=s(eb);h9o=r(J6e,"The model is set in evaluation mode by default using "),Ece=n(J6e,"CODE",{});var Ttt=s(Ece);p9o=r(Ttt,"model.eval()"),Ttt.forEach(t),u9o=r(J6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(J6e,"CODE",{});var Mtt=s(Cce);_9o=r(Mtt,"model.train()"),Mtt.forEach(t),J6e.forEach(t),b9o=i(oa),T(ob.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),hPe=i(f),Bi=n(f,"H2",{class:!0});var uqe=s(Bi);rb=n(uqe,"A",{id:!0,class:!0,href:!0});var Ett=s(rb);wce=n(Ett,"SPAN",{});var Ctt=s(wce);T(RA.$$.fragment,Ctt),Ctt.forEach(t),Ett.forEach(t),v9o=i(uqe),Ace=n(uqe,"SPAN",{});var wtt=s(Ace);F9o=r(wtt,"AutoModelForMultipleChoice"),wtt.forEach(t),uqe.forEach(t),pPe=i(f),Bo=n(f,"DIV",{class:!0});var Os=s(Bo);T(BA.$$.fragment,Os),T9o=i(Os),Pi=n(Os,"P",{});var VY=s(Pi);M9o=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$D=n(VY,"A",{href:!0});var Att=s($D);E9o=r(Att,"from_pretrained()"),Att.forEach(t),C9o=r(VY," class method or the "),kD=n(VY,"A",{href:!0});var ytt=s(kD);w9o=r(ytt,"from_config()"),ytt.forEach(t),A9o=r(VY,` class
method.`),VY.forEach(t),y9o=i(Os),PA=n(Os,"P",{});var _qe=s(PA);L9o=r(_qe,"This class cannot be instantiated directly using "),yce=n(_qe,"CODE",{});var Ltt=s(yce);x9o=r(Ltt,"__init__()"),Ltt.forEach(t),$9o=r(_qe," (throws an error)."),_qe.forEach(t),k9o=i(Os),nt=n(Os,"DIV",{class:!0});var HC=s(nt);T(IA.$$.fragment,HC),S9o=i(HC),Lce=n(HC,"P",{});var xtt=s(Lce);R9o=r(xtt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xtt.forEach(t),B9o=i(HC),Ii=n(HC,"P",{});var XY=s(Ii);P9o=r(XY,`Note:
Loading a model from its configuration file does `),xce=n(XY,"STRONG",{});var $tt=s(xce);I9o=r($tt,"not"),$tt.forEach(t),q9o=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=n(XY,"A",{href:!0});var ktt=s(SD);N9o=r(ktt,"from_pretrained()"),ktt.forEach(t),j9o=r(XY," to load the model weights."),XY.forEach(t),D9o=i(HC),T(tb.$$.fragment,HC),HC.forEach(t),G9o=i(Os),eo=n(Os,"DIV",{class:!0});var ra=s(eo);T(qA.$$.fragment,ra),O9o=i(ra),$ce=n(ra,"P",{});var Stt=s($ce);V9o=r(Stt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Stt.forEach(t),X9o=i(ra),xa=n(ra,"P",{});var UC=s(xa);z9o=r(UC,"The model class to instantiate is selected based on the "),kce=n(UC,"CODE",{});var Rtt=s(kce);Q9o=r(Rtt,"model_type"),Rtt.forEach(t),W9o=r(UC,` property of the config object (either
passed as an argument or loaded from `),Sce=n(UC,"CODE",{});var Btt=s(Sce);H9o=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),U9o=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=n(UC,"CODE",{});var Ptt=s(Rce);J9o=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),Y9o=r(UC,":"),UC.forEach(t),K9o=i(ra),Y=n(ra,"UL",{});var K=s(Y);ab=n(K,"LI",{});var Y6e=s(ab);Bce=n(Y6e,"STRONG",{});var Itt=s(Bce);Z9o=r(Itt,"albert"),Itt.forEach(t),e$o=r(Y6e," \u2014 "),RD=n(Y6e,"A",{href:!0});var qtt=s(RD);o$o=r(qtt,"AlbertForMultipleChoice"),qtt.forEach(t),r$o=r(Y6e," (ALBERT model)"),Y6e.forEach(t),t$o=i(K),nb=n(K,"LI",{});var K6e=s(nb);Pce=n(K6e,"STRONG",{});var Ntt=s(Pce);a$o=r(Ntt,"bert"),Ntt.forEach(t),n$o=r(K6e," \u2014 "),BD=n(K6e,"A",{href:!0});var jtt=s(BD);s$o=r(jtt,"BertForMultipleChoice"),jtt.forEach(t),l$o=r(K6e," (BERT model)"),K6e.forEach(t),i$o=i(K),sb=n(K,"LI",{});var Z6e=s(sb);Ice=n(Z6e,"STRONG",{});var Dtt=s(Ice);d$o=r(Dtt,"big_bird"),Dtt.forEach(t),c$o=r(Z6e," \u2014 "),PD=n(Z6e,"A",{href:!0});var Gtt=s(PD);f$o=r(Gtt,"BigBirdForMultipleChoice"),Gtt.forEach(t),m$o=r(Z6e," (BigBird model)"),Z6e.forEach(t),g$o=i(K),lb=n(K,"LI",{});var eye=s(lb);qce=n(eye,"STRONG",{});var Ott=s(qce);h$o=r(Ott,"camembert"),Ott.forEach(t),p$o=r(eye," \u2014 "),ID=n(eye,"A",{href:!0});var Vtt=s(ID);u$o=r(Vtt,"CamembertForMultipleChoice"),Vtt.forEach(t),_$o=r(eye," (CamemBERT model)"),eye.forEach(t),b$o=i(K),ib=n(K,"LI",{});var oye=s(ib);Nce=n(oye,"STRONG",{});var Xtt=s(Nce);v$o=r(Xtt,"canine"),Xtt.forEach(t),F$o=r(oye," \u2014 "),qD=n(oye,"A",{href:!0});var ztt=s(qD);T$o=r(ztt,"CanineForMultipleChoice"),ztt.forEach(t),M$o=r(oye," (Canine model)"),oye.forEach(t),E$o=i(K),db=n(K,"LI",{});var rye=s(db);jce=n(rye,"STRONG",{});var Qtt=s(jce);C$o=r(Qtt,"convbert"),Qtt.forEach(t),w$o=r(rye," \u2014 "),ND=n(rye,"A",{href:!0});var Wtt=s(ND);A$o=r(Wtt,"ConvBertForMultipleChoice"),Wtt.forEach(t),y$o=r(rye," (ConvBERT model)"),rye.forEach(t),L$o=i(K),cb=n(K,"LI",{});var tye=s(cb);Dce=n(tye,"STRONG",{});var Htt=s(Dce);x$o=r(Htt,"data2vec-text"),Htt.forEach(t),$$o=r(tye," \u2014 "),jD=n(tye,"A",{href:!0});var Utt=s(jD);k$o=r(Utt,"Data2VecTextForMultipleChoice"),Utt.forEach(t),S$o=r(tye," (Data2VecText model)"),tye.forEach(t),R$o=i(K),fb=n(K,"LI",{});var aye=s(fb);Gce=n(aye,"STRONG",{});var Jtt=s(Gce);B$o=r(Jtt,"distilbert"),Jtt.forEach(t),P$o=r(aye," \u2014 "),DD=n(aye,"A",{href:!0});var Ytt=s(DD);I$o=r(Ytt,"DistilBertForMultipleChoice"),Ytt.forEach(t),q$o=r(aye," (DistilBERT model)"),aye.forEach(t),N$o=i(K),mb=n(K,"LI",{});var nye=s(mb);Oce=n(nye,"STRONG",{});var Ktt=s(Oce);j$o=r(Ktt,"electra"),Ktt.forEach(t),D$o=r(nye," \u2014 "),GD=n(nye,"A",{href:!0});var Ztt=s(GD);G$o=r(Ztt,"ElectraForMultipleChoice"),Ztt.forEach(t),O$o=r(nye," (ELECTRA model)"),nye.forEach(t),V$o=i(K),gb=n(K,"LI",{});var sye=s(gb);Vce=n(sye,"STRONG",{});var eat=s(Vce);X$o=r(eat,"flaubert"),eat.forEach(t),z$o=r(sye," \u2014 "),OD=n(sye,"A",{href:!0});var oat=s(OD);Q$o=r(oat,"FlaubertForMultipleChoice"),oat.forEach(t),W$o=r(sye," (FlauBERT model)"),sye.forEach(t),H$o=i(K),hb=n(K,"LI",{});var lye=s(hb);Xce=n(lye,"STRONG",{});var rat=s(Xce);U$o=r(rat,"fnet"),rat.forEach(t),J$o=r(lye," \u2014 "),VD=n(lye,"A",{href:!0});var tat=s(VD);Y$o=r(tat,"FNetForMultipleChoice"),tat.forEach(t),K$o=r(lye," (FNet model)"),lye.forEach(t),Z$o=i(K),pb=n(K,"LI",{});var iye=s(pb);zce=n(iye,"STRONG",{});var aat=s(zce);eko=r(aat,"funnel"),aat.forEach(t),oko=r(iye," \u2014 "),XD=n(iye,"A",{href:!0});var nat=s(XD);rko=r(nat,"FunnelForMultipleChoice"),nat.forEach(t),tko=r(iye," (Funnel Transformer model)"),iye.forEach(t),ako=i(K),ub=n(K,"LI",{});var dye=s(ub);Qce=n(dye,"STRONG",{});var sat=s(Qce);nko=r(sat,"ibert"),sat.forEach(t),sko=r(dye," \u2014 "),zD=n(dye,"A",{href:!0});var lat=s(zD);lko=r(lat,"IBertForMultipleChoice"),lat.forEach(t),iko=r(dye," (I-BERT model)"),dye.forEach(t),dko=i(K),_b=n(K,"LI",{});var cye=s(_b);Wce=n(cye,"STRONG",{});var iat=s(Wce);cko=r(iat,"longformer"),iat.forEach(t),fko=r(cye," \u2014 "),QD=n(cye,"A",{href:!0});var dat=s(QD);mko=r(dat,"LongformerForMultipleChoice"),dat.forEach(t),gko=r(cye," (Longformer model)"),cye.forEach(t),hko=i(K),bb=n(K,"LI",{});var fye=s(bb);Hce=n(fye,"STRONG",{});var cat=s(Hce);pko=r(cat,"megatron-bert"),cat.forEach(t),uko=r(fye," \u2014 "),WD=n(fye,"A",{href:!0});var fat=s(WD);_ko=r(fat,"MegatronBertForMultipleChoice"),fat.forEach(t),bko=r(fye," (MegatronBert model)"),fye.forEach(t),vko=i(K),vb=n(K,"LI",{});var mye=s(vb);Uce=n(mye,"STRONG",{});var mat=s(Uce);Fko=r(mat,"mobilebert"),mat.forEach(t),Tko=r(mye," \u2014 "),HD=n(mye,"A",{href:!0});var gat=s(HD);Mko=r(gat,"MobileBertForMultipleChoice"),gat.forEach(t),Eko=r(mye," (MobileBERT model)"),mye.forEach(t),Cko=i(K),Fb=n(K,"LI",{});var gye=s(Fb);Jce=n(gye,"STRONG",{});var hat=s(Jce);wko=r(hat,"mpnet"),hat.forEach(t),Ako=r(gye," \u2014 "),UD=n(gye,"A",{href:!0});var pat=s(UD);yko=r(pat,"MPNetForMultipleChoice"),pat.forEach(t),Lko=r(gye," (MPNet model)"),gye.forEach(t),xko=i(K),Tb=n(K,"LI",{});var hye=s(Tb);Yce=n(hye,"STRONG",{});var uat=s(Yce);$ko=r(uat,"nystromformer"),uat.forEach(t),kko=r(hye," \u2014 "),JD=n(hye,"A",{href:!0});var _at=s(JD);Sko=r(_at,"NystromformerForMultipleChoice"),_at.forEach(t),Rko=r(hye," (Nystromformer model)"),hye.forEach(t),Bko=i(K),Mb=n(K,"LI",{});var pye=s(Mb);Kce=n(pye,"STRONG",{});var bat=s(Kce);Pko=r(bat,"qdqbert"),bat.forEach(t),Iko=r(pye," \u2014 "),YD=n(pye,"A",{href:!0});var vat=s(YD);qko=r(vat,"QDQBertForMultipleChoice"),vat.forEach(t),Nko=r(pye," (QDQBert model)"),pye.forEach(t),jko=i(K),Eb=n(K,"LI",{});var uye=s(Eb);Zce=n(uye,"STRONG",{});var Fat=s(Zce);Dko=r(Fat,"rembert"),Fat.forEach(t),Gko=r(uye," \u2014 "),KD=n(uye,"A",{href:!0});var Tat=s(KD);Oko=r(Tat,"RemBertForMultipleChoice"),Tat.forEach(t),Vko=r(uye," (RemBERT model)"),uye.forEach(t),Xko=i(K),Cb=n(K,"LI",{});var _ye=s(Cb);efe=n(_ye,"STRONG",{});var Mat=s(efe);zko=r(Mat,"roberta"),Mat.forEach(t),Qko=r(_ye," \u2014 "),ZD=n(_ye,"A",{href:!0});var Eat=s(ZD);Wko=r(Eat,"RobertaForMultipleChoice"),Eat.forEach(t),Hko=r(_ye," (RoBERTa model)"),_ye.forEach(t),Uko=i(K),wb=n(K,"LI",{});var bye=s(wb);ofe=n(bye,"STRONG",{});var Cat=s(ofe);Jko=r(Cat,"roformer"),Cat.forEach(t),Yko=r(bye," \u2014 "),eG=n(bye,"A",{href:!0});var wat=s(eG);Kko=r(wat,"RoFormerForMultipleChoice"),wat.forEach(t),Zko=r(bye," (RoFormer model)"),bye.forEach(t),eSo=i(K),Ab=n(K,"LI",{});var vye=s(Ab);rfe=n(vye,"STRONG",{});var Aat=s(rfe);oSo=r(Aat,"squeezebert"),Aat.forEach(t),rSo=r(vye," \u2014 "),oG=n(vye,"A",{href:!0});var yat=s(oG);tSo=r(yat,"SqueezeBertForMultipleChoice"),yat.forEach(t),aSo=r(vye," (SqueezeBERT model)"),vye.forEach(t),nSo=i(K),yb=n(K,"LI",{});var Fye=s(yb);tfe=n(Fye,"STRONG",{});var Lat=s(tfe);sSo=r(Lat,"xlm"),Lat.forEach(t),lSo=r(Fye," \u2014 "),rG=n(Fye,"A",{href:!0});var xat=s(rG);iSo=r(xat,"XLMForMultipleChoice"),xat.forEach(t),dSo=r(Fye," (XLM model)"),Fye.forEach(t),cSo=i(K),Lb=n(K,"LI",{});var Tye=s(Lb);afe=n(Tye,"STRONG",{});var $at=s(afe);fSo=r($at,"xlm-roberta"),$at.forEach(t),mSo=r(Tye," \u2014 "),tG=n(Tye,"A",{href:!0});var kat=s(tG);gSo=r(kat,"XLMRobertaForMultipleChoice"),kat.forEach(t),hSo=r(Tye," (XLM-RoBERTa model)"),Tye.forEach(t),pSo=i(K),xb=n(K,"LI",{});var Mye=s(xb);nfe=n(Mye,"STRONG",{});var Sat=s(nfe);uSo=r(Sat,"xlm-roberta-xl"),Sat.forEach(t),_So=r(Mye," \u2014 "),aG=n(Mye,"A",{href:!0});var Rat=s(aG);bSo=r(Rat,"XLMRobertaXLForMultipleChoice"),Rat.forEach(t),vSo=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),FSo=i(K),$b=n(K,"LI",{});var Eye=s($b);sfe=n(Eye,"STRONG",{});var Bat=s(sfe);TSo=r(Bat,"xlnet"),Bat.forEach(t),MSo=r(Eye," \u2014 "),nG=n(Eye,"A",{href:!0});var Pat=s(nG);ESo=r(Pat,"XLNetForMultipleChoice"),Pat.forEach(t),CSo=r(Eye," (XLNet model)"),Eye.forEach(t),wSo=i(K),kb=n(K,"LI",{});var Cye=s(kb);lfe=n(Cye,"STRONG",{});var Iat=s(lfe);ASo=r(Iat,"yoso"),Iat.forEach(t),ySo=r(Cye," \u2014 "),sG=n(Cye,"A",{href:!0});var qat=s(sG);LSo=r(qat,"YosoForMultipleChoice"),qat.forEach(t),xSo=r(Cye," (YOSO model)"),Cye.forEach(t),K.forEach(t),$So=i(ra),Sb=n(ra,"P",{});var wye=s(Sb);kSo=r(wye,"The model is set in evaluation mode by default using "),ife=n(wye,"CODE",{});var Nat=s(ife);SSo=r(Nat,"model.eval()"),Nat.forEach(t),RSo=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(wye,"CODE",{});var jat=s(dfe);BSo=r(jat,"model.train()"),jat.forEach(t),wye.forEach(t),PSo=i(ra),T(Rb.$$.fragment,ra),ra.forEach(t),Os.forEach(t),uPe=i(f),qi=n(f,"H2",{class:!0});var bqe=s(qi);Bb=n(bqe,"A",{id:!0,class:!0,href:!0});var Dat=s(Bb);cfe=n(Dat,"SPAN",{});var Gat=s(cfe);T(NA.$$.fragment,Gat),Gat.forEach(t),Dat.forEach(t),ISo=i(bqe),ffe=n(bqe,"SPAN",{});var Oat=s(ffe);qSo=r(Oat,"AutoModelForNextSentencePrediction"),Oat.forEach(t),bqe.forEach(t),_Pe=i(f),Po=n(f,"DIV",{class:!0});var Vs=s(Po);T(jA.$$.fragment,Vs),NSo=i(Vs),Ni=n(Vs,"P",{});var zY=s(Ni);jSo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lG=n(zY,"A",{href:!0});var Vat=s(lG);DSo=r(Vat,"from_pretrained()"),Vat.forEach(t),GSo=r(zY," class method or the "),iG=n(zY,"A",{href:!0});var Xat=s(iG);OSo=r(Xat,"from_config()"),Xat.forEach(t),VSo=r(zY,` class
method.`),zY.forEach(t),XSo=i(Vs),DA=n(Vs,"P",{});var vqe=s(DA);zSo=r(vqe,"This class cannot be instantiated directly using "),mfe=n(vqe,"CODE",{});var zat=s(mfe);QSo=r(zat,"__init__()"),zat.forEach(t),WSo=r(vqe," (throws an error)."),vqe.forEach(t),HSo=i(Vs),st=n(Vs,"DIV",{class:!0});var JC=s(st);T(GA.$$.fragment,JC),USo=i(JC),gfe=n(JC,"P",{});var Qat=s(gfe);JSo=r(Qat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qat.forEach(t),YSo=i(JC),ji=n(JC,"P",{});var QY=s(ji);KSo=r(QY,`Note:
Loading a model from its configuration file does `),hfe=n(QY,"STRONG",{});var Wat=s(hfe);ZSo=r(Wat,"not"),Wat.forEach(t),eRo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=n(QY,"A",{href:!0});var Hat=s(dG);oRo=r(Hat,"from_pretrained()"),Hat.forEach(t),rRo=r(QY," to load the model weights."),QY.forEach(t),tRo=i(JC),T(Pb.$$.fragment,JC),JC.forEach(t),aRo=i(Vs),oo=n(Vs,"DIV",{class:!0});var ta=s(oo);T(OA.$$.fragment,ta),nRo=i(ta),pfe=n(ta,"P",{});var Uat=s(pfe);sRo=r(Uat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Uat.forEach(t),lRo=i(ta),$a=n(ta,"P",{});var YC=s($a);iRo=r(YC,"The model class to instantiate is selected based on the "),ufe=n(YC,"CODE",{});var Jat=s(ufe);dRo=r(Jat,"model_type"),Jat.forEach(t),cRo=r(YC,` property of the config object (either
passed as an argument or loaded from `),_fe=n(YC,"CODE",{});var Yat=s(_fe);fRo=r(Yat,"pretrained_model_name_or_path"),Yat.forEach(t),mRo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(YC,"CODE",{});var Kat=s(bfe);gRo=r(Kat,"pretrained_model_name_or_path"),Kat.forEach(t),hRo=r(YC,":"),YC.forEach(t),pRo=i(ta),Ur=n(ta,"UL",{});var Xs=s(Ur);Ib=n(Xs,"LI",{});var Aye=s(Ib);vfe=n(Aye,"STRONG",{});var Zat=s(vfe);uRo=r(Zat,"bert"),Zat.forEach(t),_Ro=r(Aye," \u2014 "),cG=n(Aye,"A",{href:!0});var ent=s(cG);bRo=r(ent,"BertForNextSentencePrediction"),ent.forEach(t),vRo=r(Aye," (BERT model)"),Aye.forEach(t),FRo=i(Xs),qb=n(Xs,"LI",{});var yye=s(qb);Ffe=n(yye,"STRONG",{});var ont=s(Ffe);TRo=r(ont,"fnet"),ont.forEach(t),MRo=r(yye," \u2014 "),fG=n(yye,"A",{href:!0});var rnt=s(fG);ERo=r(rnt,"FNetForNextSentencePrediction"),rnt.forEach(t),CRo=r(yye," (FNet model)"),yye.forEach(t),wRo=i(Xs),Nb=n(Xs,"LI",{});var Lye=s(Nb);Tfe=n(Lye,"STRONG",{});var tnt=s(Tfe);ARo=r(tnt,"megatron-bert"),tnt.forEach(t),yRo=r(Lye," \u2014 "),mG=n(Lye,"A",{href:!0});var ant=s(mG);LRo=r(ant,"MegatronBertForNextSentencePrediction"),ant.forEach(t),xRo=r(Lye," (MegatronBert model)"),Lye.forEach(t),$Ro=i(Xs),jb=n(Xs,"LI",{});var xye=s(jb);Mfe=n(xye,"STRONG",{});var nnt=s(Mfe);kRo=r(nnt,"mobilebert"),nnt.forEach(t),SRo=r(xye," \u2014 "),gG=n(xye,"A",{href:!0});var snt=s(gG);RRo=r(snt,"MobileBertForNextSentencePrediction"),snt.forEach(t),BRo=r(xye," (MobileBERT model)"),xye.forEach(t),PRo=i(Xs),Db=n(Xs,"LI",{});var $ye=s(Db);Efe=n($ye,"STRONG",{});var lnt=s(Efe);IRo=r(lnt,"qdqbert"),lnt.forEach(t),qRo=r($ye," \u2014 "),hG=n($ye,"A",{href:!0});var int=s(hG);NRo=r(int,"QDQBertForNextSentencePrediction"),int.forEach(t),jRo=r($ye," (QDQBert model)"),$ye.forEach(t),Xs.forEach(t),DRo=i(ta),Gb=n(ta,"P",{});var kye=s(Gb);GRo=r(kye,"The model is set in evaluation mode by default using "),Cfe=n(kye,"CODE",{});var dnt=s(Cfe);ORo=r(dnt,"model.eval()"),dnt.forEach(t),VRo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wfe=n(kye,"CODE",{});var cnt=s(wfe);XRo=r(cnt,"model.train()"),cnt.forEach(t),kye.forEach(t),zRo=i(ta),T(Ob.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),bPe=i(f),Di=n(f,"H2",{class:!0});var Fqe=s(Di);Vb=n(Fqe,"A",{id:!0,class:!0,href:!0});var fnt=s(Vb);Afe=n(fnt,"SPAN",{});var mnt=s(Afe);T(VA.$$.fragment,mnt),mnt.forEach(t),fnt.forEach(t),QRo=i(Fqe),yfe=n(Fqe,"SPAN",{});var gnt=s(yfe);WRo=r(gnt,"AutoModelForTokenClassification"),gnt.forEach(t),Fqe.forEach(t),vPe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(XA.$$.fragment,zs),HRo=i(zs),Gi=n(zs,"P",{});var WY=s(Gi);URo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pG=n(WY,"A",{href:!0});var hnt=s(pG);JRo=r(hnt,"from_pretrained()"),hnt.forEach(t),YRo=r(WY," class method or the "),uG=n(WY,"A",{href:!0});var pnt=s(uG);KRo=r(pnt,"from_config()"),pnt.forEach(t),ZRo=r(WY,` class
method.`),WY.forEach(t),eBo=i(zs),zA=n(zs,"P",{});var Tqe=s(zA);oBo=r(Tqe,"This class cannot be instantiated directly using "),Lfe=n(Tqe,"CODE",{});var unt=s(Lfe);rBo=r(unt,"__init__()"),unt.forEach(t),tBo=r(Tqe," (throws an error)."),Tqe.forEach(t),aBo=i(zs),lt=n(zs,"DIV",{class:!0});var KC=s(lt);T(QA.$$.fragment,KC),nBo=i(KC),xfe=n(KC,"P",{});var _nt=s(xfe);sBo=r(_nt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_nt.forEach(t),lBo=i(KC),Oi=n(KC,"P",{});var HY=s(Oi);iBo=r(HY,`Note:
Loading a model from its configuration file does `),$fe=n(HY,"STRONG",{});var bnt=s($fe);dBo=r(bnt,"not"),bnt.forEach(t),cBo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(HY,"A",{href:!0});var vnt=s(_G);fBo=r(vnt,"from_pretrained()"),vnt.forEach(t),mBo=r(HY," to load the model weights."),HY.forEach(t),gBo=i(KC),T(Xb.$$.fragment,KC),KC.forEach(t),hBo=i(zs),ro=n(zs,"DIV",{class:!0});var aa=s(ro);T(WA.$$.fragment,aa),pBo=i(aa),kfe=n(aa,"P",{});var Fnt=s(kfe);uBo=r(Fnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fnt.forEach(t),_Bo=i(aa),ka=n(aa,"P",{});var ZC=s(ka);bBo=r(ZC,"The model class to instantiate is selected based on the "),Sfe=n(ZC,"CODE",{});var Tnt=s(Sfe);vBo=r(Tnt,"model_type"),Tnt.forEach(t),FBo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(ZC,"CODE",{});var Mnt=s(Rfe);TBo=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),MBo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(ZC,"CODE",{});var Ent=s(Bfe);EBo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),CBo=r(ZC,":"),ZC.forEach(t),wBo=i(aa),U=n(aa,"UL",{});var J=s(U);zb=n(J,"LI",{});var Sye=s(zb);Pfe=n(Sye,"STRONG",{});var Cnt=s(Pfe);ABo=r(Cnt,"albert"),Cnt.forEach(t),yBo=r(Sye," \u2014 "),bG=n(Sye,"A",{href:!0});var wnt=s(bG);LBo=r(wnt,"AlbertForTokenClassification"),wnt.forEach(t),xBo=r(Sye," (ALBERT model)"),Sye.forEach(t),$Bo=i(J),Qb=n(J,"LI",{});var Rye=s(Qb);Ife=n(Rye,"STRONG",{});var Ant=s(Ife);kBo=r(Ant,"bert"),Ant.forEach(t),SBo=r(Rye," \u2014 "),vG=n(Rye,"A",{href:!0});var ynt=s(vG);RBo=r(ynt,"BertForTokenClassification"),ynt.forEach(t),BBo=r(Rye," (BERT model)"),Rye.forEach(t),PBo=i(J),Wb=n(J,"LI",{});var Bye=s(Wb);qfe=n(Bye,"STRONG",{});var Lnt=s(qfe);IBo=r(Lnt,"big_bird"),Lnt.forEach(t),qBo=r(Bye," \u2014 "),FG=n(Bye,"A",{href:!0});var xnt=s(FG);NBo=r(xnt,"BigBirdForTokenClassification"),xnt.forEach(t),jBo=r(Bye," (BigBird model)"),Bye.forEach(t),DBo=i(J),Hb=n(J,"LI",{});var Pye=s(Hb);Nfe=n(Pye,"STRONG",{});var $nt=s(Nfe);GBo=r($nt,"camembert"),$nt.forEach(t),OBo=r(Pye," \u2014 "),TG=n(Pye,"A",{href:!0});var knt=s(TG);VBo=r(knt,"CamembertForTokenClassification"),knt.forEach(t),XBo=r(Pye," (CamemBERT model)"),Pye.forEach(t),zBo=i(J),Ub=n(J,"LI",{});var Iye=s(Ub);jfe=n(Iye,"STRONG",{});var Snt=s(jfe);QBo=r(Snt,"canine"),Snt.forEach(t),WBo=r(Iye," \u2014 "),MG=n(Iye,"A",{href:!0});var Rnt=s(MG);HBo=r(Rnt,"CanineForTokenClassification"),Rnt.forEach(t),UBo=r(Iye," (Canine model)"),Iye.forEach(t),JBo=i(J),Jb=n(J,"LI",{});var qye=s(Jb);Dfe=n(qye,"STRONG",{});var Bnt=s(Dfe);YBo=r(Bnt,"convbert"),Bnt.forEach(t),KBo=r(qye," \u2014 "),EG=n(qye,"A",{href:!0});var Pnt=s(EG);ZBo=r(Pnt,"ConvBertForTokenClassification"),Pnt.forEach(t),ePo=r(qye," (ConvBERT model)"),qye.forEach(t),oPo=i(J),Yb=n(J,"LI",{});var Nye=s(Yb);Gfe=n(Nye,"STRONG",{});var Int=s(Gfe);rPo=r(Int,"data2vec-text"),Int.forEach(t),tPo=r(Nye," \u2014 "),CG=n(Nye,"A",{href:!0});var qnt=s(CG);aPo=r(qnt,"Data2VecTextForTokenClassification"),qnt.forEach(t),nPo=r(Nye," (Data2VecText model)"),Nye.forEach(t),sPo=i(J),Kb=n(J,"LI",{});var jye=s(Kb);Ofe=n(jye,"STRONG",{});var Nnt=s(Ofe);lPo=r(Nnt,"deberta"),Nnt.forEach(t),iPo=r(jye," \u2014 "),wG=n(jye,"A",{href:!0});var jnt=s(wG);dPo=r(jnt,"DebertaForTokenClassification"),jnt.forEach(t),cPo=r(jye," (DeBERTa model)"),jye.forEach(t),fPo=i(J),Zb=n(J,"LI",{});var Dye=s(Zb);Vfe=n(Dye,"STRONG",{});var Dnt=s(Vfe);mPo=r(Dnt,"deberta-v2"),Dnt.forEach(t),gPo=r(Dye," \u2014 "),AG=n(Dye,"A",{href:!0});var Gnt=s(AG);hPo=r(Gnt,"DebertaV2ForTokenClassification"),Gnt.forEach(t),pPo=r(Dye," (DeBERTa-v2 model)"),Dye.forEach(t),uPo=i(J),e2=n(J,"LI",{});var Gye=s(e2);Xfe=n(Gye,"STRONG",{});var Ont=s(Xfe);_Po=r(Ont,"distilbert"),Ont.forEach(t),bPo=r(Gye," \u2014 "),yG=n(Gye,"A",{href:!0});var Vnt=s(yG);vPo=r(Vnt,"DistilBertForTokenClassification"),Vnt.forEach(t),FPo=r(Gye," (DistilBERT model)"),Gye.forEach(t),TPo=i(J),o2=n(J,"LI",{});var Oye=s(o2);zfe=n(Oye,"STRONG",{});var Xnt=s(zfe);MPo=r(Xnt,"electra"),Xnt.forEach(t),EPo=r(Oye," \u2014 "),LG=n(Oye,"A",{href:!0});var znt=s(LG);CPo=r(znt,"ElectraForTokenClassification"),znt.forEach(t),wPo=r(Oye," (ELECTRA model)"),Oye.forEach(t),APo=i(J),r2=n(J,"LI",{});var Vye=s(r2);Qfe=n(Vye,"STRONG",{});var Qnt=s(Qfe);yPo=r(Qnt,"flaubert"),Qnt.forEach(t),LPo=r(Vye," \u2014 "),xG=n(Vye,"A",{href:!0});var Wnt=s(xG);xPo=r(Wnt,"FlaubertForTokenClassification"),Wnt.forEach(t),$Po=r(Vye," (FlauBERT model)"),Vye.forEach(t),kPo=i(J),t2=n(J,"LI",{});var Xye=s(t2);Wfe=n(Xye,"STRONG",{});var Hnt=s(Wfe);SPo=r(Hnt,"fnet"),Hnt.forEach(t),RPo=r(Xye," \u2014 "),$G=n(Xye,"A",{href:!0});var Unt=s($G);BPo=r(Unt,"FNetForTokenClassification"),Unt.forEach(t),PPo=r(Xye," (FNet model)"),Xye.forEach(t),IPo=i(J),a2=n(J,"LI",{});var zye=s(a2);Hfe=n(zye,"STRONG",{});var Jnt=s(Hfe);qPo=r(Jnt,"funnel"),Jnt.forEach(t),NPo=r(zye," \u2014 "),kG=n(zye,"A",{href:!0});var Ynt=s(kG);jPo=r(Ynt,"FunnelForTokenClassification"),Ynt.forEach(t),DPo=r(zye," (Funnel Transformer model)"),zye.forEach(t),GPo=i(J),n2=n(J,"LI",{});var Qye=s(n2);Ufe=n(Qye,"STRONG",{});var Knt=s(Ufe);OPo=r(Knt,"gpt2"),Knt.forEach(t),VPo=r(Qye," \u2014 "),SG=n(Qye,"A",{href:!0});var Znt=s(SG);XPo=r(Znt,"GPT2ForTokenClassification"),Znt.forEach(t),zPo=r(Qye," (OpenAI GPT-2 model)"),Qye.forEach(t),QPo=i(J),s2=n(J,"LI",{});var Wye=s(s2);Jfe=n(Wye,"STRONG",{});var est=s(Jfe);WPo=r(est,"ibert"),est.forEach(t),HPo=r(Wye," \u2014 "),RG=n(Wye,"A",{href:!0});var ost=s(RG);UPo=r(ost,"IBertForTokenClassification"),ost.forEach(t),JPo=r(Wye," (I-BERT model)"),Wye.forEach(t),YPo=i(J),l2=n(J,"LI",{});var Hye=s(l2);Yfe=n(Hye,"STRONG",{});var rst=s(Yfe);KPo=r(rst,"layoutlm"),rst.forEach(t),ZPo=r(Hye," \u2014 "),BG=n(Hye,"A",{href:!0});var tst=s(BG);eIo=r(tst,"LayoutLMForTokenClassification"),tst.forEach(t),oIo=r(Hye," (LayoutLM model)"),Hye.forEach(t),rIo=i(J),i2=n(J,"LI",{});var Uye=s(i2);Kfe=n(Uye,"STRONG",{});var ast=s(Kfe);tIo=r(ast,"layoutlmv2"),ast.forEach(t),aIo=r(Uye," \u2014 "),PG=n(Uye,"A",{href:!0});var nst=s(PG);nIo=r(nst,"LayoutLMv2ForTokenClassification"),nst.forEach(t),sIo=r(Uye," (LayoutLMv2 model)"),Uye.forEach(t),lIo=i(J),d2=n(J,"LI",{});var Jye=s(d2);Zfe=n(Jye,"STRONG",{});var sst=s(Zfe);iIo=r(sst,"longformer"),sst.forEach(t),dIo=r(Jye," \u2014 "),IG=n(Jye,"A",{href:!0});var lst=s(IG);cIo=r(lst,"LongformerForTokenClassification"),lst.forEach(t),fIo=r(Jye," (Longformer model)"),Jye.forEach(t),mIo=i(J),c2=n(J,"LI",{});var Yye=s(c2);eme=n(Yye,"STRONG",{});var ist=s(eme);gIo=r(ist,"megatron-bert"),ist.forEach(t),hIo=r(Yye," \u2014 "),qG=n(Yye,"A",{href:!0});var dst=s(qG);pIo=r(dst,"MegatronBertForTokenClassification"),dst.forEach(t),uIo=r(Yye," (MegatronBert model)"),Yye.forEach(t),_Io=i(J),f2=n(J,"LI",{});var Kye=s(f2);ome=n(Kye,"STRONG",{});var cst=s(ome);bIo=r(cst,"mobilebert"),cst.forEach(t),vIo=r(Kye," \u2014 "),NG=n(Kye,"A",{href:!0});var fst=s(NG);FIo=r(fst,"MobileBertForTokenClassification"),fst.forEach(t),TIo=r(Kye," (MobileBERT model)"),Kye.forEach(t),MIo=i(J),m2=n(J,"LI",{});var Zye=s(m2);rme=n(Zye,"STRONG",{});var mst=s(rme);EIo=r(mst,"mpnet"),mst.forEach(t),CIo=r(Zye," \u2014 "),jG=n(Zye,"A",{href:!0});var gst=s(jG);wIo=r(gst,"MPNetForTokenClassification"),gst.forEach(t),AIo=r(Zye," (MPNet model)"),Zye.forEach(t),yIo=i(J),g2=n(J,"LI",{});var eLe=s(g2);tme=n(eLe,"STRONG",{});var hst=s(tme);LIo=r(hst,"nystromformer"),hst.forEach(t),xIo=r(eLe," \u2014 "),DG=n(eLe,"A",{href:!0});var pst=s(DG);$Io=r(pst,"NystromformerForTokenClassification"),pst.forEach(t),kIo=r(eLe," (Nystromformer model)"),eLe.forEach(t),SIo=i(J),h2=n(J,"LI",{});var oLe=s(h2);ame=n(oLe,"STRONG",{});var ust=s(ame);RIo=r(ust,"qdqbert"),ust.forEach(t),BIo=r(oLe," \u2014 "),GG=n(oLe,"A",{href:!0});var _st=s(GG);PIo=r(_st,"QDQBertForTokenClassification"),_st.forEach(t),IIo=r(oLe," (QDQBert model)"),oLe.forEach(t),qIo=i(J),p2=n(J,"LI",{});var rLe=s(p2);nme=n(rLe,"STRONG",{});var bst=s(nme);NIo=r(bst,"rembert"),bst.forEach(t),jIo=r(rLe," \u2014 "),OG=n(rLe,"A",{href:!0});var vst=s(OG);DIo=r(vst,"RemBertForTokenClassification"),vst.forEach(t),GIo=r(rLe," (RemBERT model)"),rLe.forEach(t),OIo=i(J),u2=n(J,"LI",{});var tLe=s(u2);sme=n(tLe,"STRONG",{});var Fst=s(sme);VIo=r(Fst,"roberta"),Fst.forEach(t),XIo=r(tLe," \u2014 "),VG=n(tLe,"A",{href:!0});var Tst=s(VG);zIo=r(Tst,"RobertaForTokenClassification"),Tst.forEach(t),QIo=r(tLe," (RoBERTa model)"),tLe.forEach(t),WIo=i(J),_2=n(J,"LI",{});var aLe=s(_2);lme=n(aLe,"STRONG",{});var Mst=s(lme);HIo=r(Mst,"roformer"),Mst.forEach(t),UIo=r(aLe," \u2014 "),XG=n(aLe,"A",{href:!0});var Est=s(XG);JIo=r(Est,"RoFormerForTokenClassification"),Est.forEach(t),YIo=r(aLe," (RoFormer model)"),aLe.forEach(t),KIo=i(J),b2=n(J,"LI",{});var nLe=s(b2);ime=n(nLe,"STRONG",{});var Cst=s(ime);ZIo=r(Cst,"squeezebert"),Cst.forEach(t),eqo=r(nLe," \u2014 "),zG=n(nLe,"A",{href:!0});var wst=s(zG);oqo=r(wst,"SqueezeBertForTokenClassification"),wst.forEach(t),rqo=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),tqo=i(J),v2=n(J,"LI",{});var sLe=s(v2);dme=n(sLe,"STRONG",{});var Ast=s(dme);aqo=r(Ast,"xlm"),Ast.forEach(t),nqo=r(sLe," \u2014 "),QG=n(sLe,"A",{href:!0});var yst=s(QG);sqo=r(yst,"XLMForTokenClassification"),yst.forEach(t),lqo=r(sLe," (XLM model)"),sLe.forEach(t),iqo=i(J),F2=n(J,"LI",{});var lLe=s(F2);cme=n(lLe,"STRONG",{});var Lst=s(cme);dqo=r(Lst,"xlm-roberta"),Lst.forEach(t),cqo=r(lLe," \u2014 "),WG=n(lLe,"A",{href:!0});var xst=s(WG);fqo=r(xst,"XLMRobertaForTokenClassification"),xst.forEach(t),mqo=r(lLe," (XLM-RoBERTa model)"),lLe.forEach(t),gqo=i(J),T2=n(J,"LI",{});var iLe=s(T2);fme=n(iLe,"STRONG",{});var $st=s(fme);hqo=r($st,"xlm-roberta-xl"),$st.forEach(t),pqo=r(iLe," \u2014 "),HG=n(iLe,"A",{href:!0});var kst=s(HG);uqo=r(kst,"XLMRobertaXLForTokenClassification"),kst.forEach(t),_qo=r(iLe," (XLM-RoBERTa-XL model)"),iLe.forEach(t),bqo=i(J),M2=n(J,"LI",{});var dLe=s(M2);mme=n(dLe,"STRONG",{});var Sst=s(mme);vqo=r(Sst,"xlnet"),Sst.forEach(t),Fqo=r(dLe," \u2014 "),UG=n(dLe,"A",{href:!0});var Rst=s(UG);Tqo=r(Rst,"XLNetForTokenClassification"),Rst.forEach(t),Mqo=r(dLe," (XLNet model)"),dLe.forEach(t),Eqo=i(J),E2=n(J,"LI",{});var cLe=s(E2);gme=n(cLe,"STRONG",{});var Bst=s(gme);Cqo=r(Bst,"yoso"),Bst.forEach(t),wqo=r(cLe," \u2014 "),JG=n(cLe,"A",{href:!0});var Pst=s(JG);Aqo=r(Pst,"YosoForTokenClassification"),Pst.forEach(t),yqo=r(cLe," (YOSO model)"),cLe.forEach(t),J.forEach(t),Lqo=i(aa),C2=n(aa,"P",{});var fLe=s(C2);xqo=r(fLe,"The model is set in evaluation mode by default using "),hme=n(fLe,"CODE",{});var Ist=s(hme);$qo=r(Ist,"model.eval()"),Ist.forEach(t),kqo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(fLe,"CODE",{});var qst=s(pme);Sqo=r(qst,"model.train()"),qst.forEach(t),fLe.forEach(t),Rqo=i(aa),T(w2.$$.fragment,aa),aa.forEach(t),zs.forEach(t),FPe=i(f),Vi=n(f,"H2",{class:!0});var Mqe=s(Vi);A2=n(Mqe,"A",{id:!0,class:!0,href:!0});var Nst=s(A2);ume=n(Nst,"SPAN",{});var jst=s(ume);T(HA.$$.fragment,jst),jst.forEach(t),Nst.forEach(t),Bqo=i(Mqe),_me=n(Mqe,"SPAN",{});var Dst=s(_me);Pqo=r(Dst,"AutoModelForQuestionAnswering"),Dst.forEach(t),Mqe.forEach(t),TPe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(UA.$$.fragment,Qs),Iqo=i(Qs),Xi=n(Qs,"P",{});var UY=s(Xi);qqo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YG=n(UY,"A",{href:!0});var Gst=s(YG);Nqo=r(Gst,"from_pretrained()"),Gst.forEach(t),jqo=r(UY," class method or the "),KG=n(UY,"A",{href:!0});var Ost=s(KG);Dqo=r(Ost,"from_config()"),Ost.forEach(t),Gqo=r(UY,` class
method.`),UY.forEach(t),Oqo=i(Qs),JA=n(Qs,"P",{});var Eqe=s(JA);Vqo=r(Eqe,"This class cannot be instantiated directly using "),bme=n(Eqe,"CODE",{});var Vst=s(bme);Xqo=r(Vst,"__init__()"),Vst.forEach(t),zqo=r(Eqe," (throws an error)."),Eqe.forEach(t),Qqo=i(Qs),it=n(Qs,"DIV",{class:!0});var e3=s(it);T(YA.$$.fragment,e3),Wqo=i(e3),vme=n(e3,"P",{});var Xst=s(vme);Hqo=r(Xst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xst.forEach(t),Uqo=i(e3),zi=n(e3,"P",{});var JY=s(zi);Jqo=r(JY,`Note:
Loading a model from its configuration file does `),Fme=n(JY,"STRONG",{});var zst=s(Fme);Yqo=r(zst,"not"),zst.forEach(t),Kqo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(JY,"A",{href:!0});var Qst=s(ZG);Zqo=r(Qst,"from_pretrained()"),Qst.forEach(t),eNo=r(JY," to load the model weights."),JY.forEach(t),oNo=i(e3),T(y2.$$.fragment,e3),e3.forEach(t),rNo=i(Qs),to=n(Qs,"DIV",{class:!0});var na=s(to);T(KA.$$.fragment,na),tNo=i(na),Tme=n(na,"P",{});var Wst=s(Tme);aNo=r(Wst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wst.forEach(t),nNo=i(na),Sa=n(na,"P",{});var o3=s(Sa);sNo=r(o3,"The model class to instantiate is selected based on the "),Mme=n(o3,"CODE",{});var Hst=s(Mme);lNo=r(Hst,"model_type"),Hst.forEach(t),iNo=r(o3,` property of the config object (either
passed as an argument or loaded from `),Eme=n(o3,"CODE",{});var Ust=s(Eme);dNo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),cNo=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(o3,"CODE",{});var Jst=s(Cme);fNo=r(Jst,"pretrained_model_name_or_path"),Jst.forEach(t),mNo=r(o3,":"),o3.forEach(t),gNo=i(na),O=n(na,"UL",{});var X=s(O);L2=n(X,"LI",{});var mLe=s(L2);wme=n(mLe,"STRONG",{});var Yst=s(wme);hNo=r(Yst,"albert"),Yst.forEach(t),pNo=r(mLe," \u2014 "),eO=n(mLe,"A",{href:!0});var Kst=s(eO);uNo=r(Kst,"AlbertForQuestionAnswering"),Kst.forEach(t),_No=r(mLe," (ALBERT model)"),mLe.forEach(t),bNo=i(X),x2=n(X,"LI",{});var gLe=s(x2);Ame=n(gLe,"STRONG",{});var Zst=s(Ame);vNo=r(Zst,"bart"),Zst.forEach(t),FNo=r(gLe," \u2014 "),oO=n(gLe,"A",{href:!0});var elt=s(oO);TNo=r(elt,"BartForQuestionAnswering"),elt.forEach(t),MNo=r(gLe," (BART model)"),gLe.forEach(t),ENo=i(X),$2=n(X,"LI",{});var hLe=s($2);yme=n(hLe,"STRONG",{});var olt=s(yme);CNo=r(olt,"bert"),olt.forEach(t),wNo=r(hLe," \u2014 "),rO=n(hLe,"A",{href:!0});var rlt=s(rO);ANo=r(rlt,"BertForQuestionAnswering"),rlt.forEach(t),yNo=r(hLe," (BERT model)"),hLe.forEach(t),LNo=i(X),k2=n(X,"LI",{});var pLe=s(k2);Lme=n(pLe,"STRONG",{});var tlt=s(Lme);xNo=r(tlt,"big_bird"),tlt.forEach(t),$No=r(pLe," \u2014 "),tO=n(pLe,"A",{href:!0});var alt=s(tO);kNo=r(alt,"BigBirdForQuestionAnswering"),alt.forEach(t),SNo=r(pLe," (BigBird model)"),pLe.forEach(t),RNo=i(X),S2=n(X,"LI",{});var uLe=s(S2);xme=n(uLe,"STRONG",{});var nlt=s(xme);BNo=r(nlt,"bigbird_pegasus"),nlt.forEach(t),PNo=r(uLe," \u2014 "),aO=n(uLe,"A",{href:!0});var slt=s(aO);INo=r(slt,"BigBirdPegasusForQuestionAnswering"),slt.forEach(t),qNo=r(uLe," (BigBirdPegasus model)"),uLe.forEach(t),NNo=i(X),R2=n(X,"LI",{});var _Le=s(R2);$me=n(_Le,"STRONG",{});var llt=s($me);jNo=r(llt,"camembert"),llt.forEach(t),DNo=r(_Le," \u2014 "),nO=n(_Le,"A",{href:!0});var ilt=s(nO);GNo=r(ilt,"CamembertForQuestionAnswering"),ilt.forEach(t),ONo=r(_Le," (CamemBERT model)"),_Le.forEach(t),VNo=i(X),B2=n(X,"LI",{});var bLe=s(B2);kme=n(bLe,"STRONG",{});var dlt=s(kme);XNo=r(dlt,"canine"),dlt.forEach(t),zNo=r(bLe," \u2014 "),sO=n(bLe,"A",{href:!0});var clt=s(sO);QNo=r(clt,"CanineForQuestionAnswering"),clt.forEach(t),WNo=r(bLe," (Canine model)"),bLe.forEach(t),HNo=i(X),P2=n(X,"LI",{});var vLe=s(P2);Sme=n(vLe,"STRONG",{});var flt=s(Sme);UNo=r(flt,"convbert"),flt.forEach(t),JNo=r(vLe," \u2014 "),lO=n(vLe,"A",{href:!0});var mlt=s(lO);YNo=r(mlt,"ConvBertForQuestionAnswering"),mlt.forEach(t),KNo=r(vLe," (ConvBERT model)"),vLe.forEach(t),ZNo=i(X),I2=n(X,"LI",{});var FLe=s(I2);Rme=n(FLe,"STRONG",{});var glt=s(Rme);ejo=r(glt,"data2vec-text"),glt.forEach(t),ojo=r(FLe," \u2014 "),iO=n(FLe,"A",{href:!0});var hlt=s(iO);rjo=r(hlt,"Data2VecTextForQuestionAnswering"),hlt.forEach(t),tjo=r(FLe," (Data2VecText model)"),FLe.forEach(t),ajo=i(X),q2=n(X,"LI",{});var TLe=s(q2);Bme=n(TLe,"STRONG",{});var plt=s(Bme);njo=r(plt,"deberta"),plt.forEach(t),sjo=r(TLe," \u2014 "),dO=n(TLe,"A",{href:!0});var ult=s(dO);ljo=r(ult,"DebertaForQuestionAnswering"),ult.forEach(t),ijo=r(TLe," (DeBERTa model)"),TLe.forEach(t),djo=i(X),N2=n(X,"LI",{});var MLe=s(N2);Pme=n(MLe,"STRONG",{});var _lt=s(Pme);cjo=r(_lt,"deberta-v2"),_lt.forEach(t),fjo=r(MLe," \u2014 "),cO=n(MLe,"A",{href:!0});var blt=s(cO);mjo=r(blt,"DebertaV2ForQuestionAnswering"),blt.forEach(t),gjo=r(MLe," (DeBERTa-v2 model)"),MLe.forEach(t),hjo=i(X),j2=n(X,"LI",{});var ELe=s(j2);Ime=n(ELe,"STRONG",{});var vlt=s(Ime);pjo=r(vlt,"distilbert"),vlt.forEach(t),ujo=r(ELe," \u2014 "),fO=n(ELe,"A",{href:!0});var Flt=s(fO);_jo=r(Flt,"DistilBertForQuestionAnswering"),Flt.forEach(t),bjo=r(ELe," (DistilBERT model)"),ELe.forEach(t),vjo=i(X),D2=n(X,"LI",{});var CLe=s(D2);qme=n(CLe,"STRONG",{});var Tlt=s(qme);Fjo=r(Tlt,"electra"),Tlt.forEach(t),Tjo=r(CLe," \u2014 "),mO=n(CLe,"A",{href:!0});var Mlt=s(mO);Mjo=r(Mlt,"ElectraForQuestionAnswering"),Mlt.forEach(t),Ejo=r(CLe," (ELECTRA model)"),CLe.forEach(t),Cjo=i(X),G2=n(X,"LI",{});var wLe=s(G2);Nme=n(wLe,"STRONG",{});var Elt=s(Nme);wjo=r(Elt,"flaubert"),Elt.forEach(t),Ajo=r(wLe," \u2014 "),gO=n(wLe,"A",{href:!0});var Clt=s(gO);yjo=r(Clt,"FlaubertForQuestionAnsweringSimple"),Clt.forEach(t),Ljo=r(wLe," (FlauBERT model)"),wLe.forEach(t),xjo=i(X),O2=n(X,"LI",{});var ALe=s(O2);jme=n(ALe,"STRONG",{});var wlt=s(jme);$jo=r(wlt,"fnet"),wlt.forEach(t),kjo=r(ALe," \u2014 "),hO=n(ALe,"A",{href:!0});var Alt=s(hO);Sjo=r(Alt,"FNetForQuestionAnswering"),Alt.forEach(t),Rjo=r(ALe," (FNet model)"),ALe.forEach(t),Bjo=i(X),V2=n(X,"LI",{});var yLe=s(V2);Dme=n(yLe,"STRONG",{});var ylt=s(Dme);Pjo=r(ylt,"funnel"),ylt.forEach(t),Ijo=r(yLe," \u2014 "),pO=n(yLe,"A",{href:!0});var Llt=s(pO);qjo=r(Llt,"FunnelForQuestionAnswering"),Llt.forEach(t),Njo=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),jjo=i(X),X2=n(X,"LI",{});var LLe=s(X2);Gme=n(LLe,"STRONG",{});var xlt=s(Gme);Djo=r(xlt,"gptj"),xlt.forEach(t),Gjo=r(LLe," \u2014 "),uO=n(LLe,"A",{href:!0});var $lt=s(uO);Ojo=r($lt,"GPTJForQuestionAnswering"),$lt.forEach(t),Vjo=r(LLe," (GPT-J model)"),LLe.forEach(t),Xjo=i(X),z2=n(X,"LI",{});var xLe=s(z2);Ome=n(xLe,"STRONG",{});var klt=s(Ome);zjo=r(klt,"ibert"),klt.forEach(t),Qjo=r(xLe," \u2014 "),_O=n(xLe,"A",{href:!0});var Slt=s(_O);Wjo=r(Slt,"IBertForQuestionAnswering"),Slt.forEach(t),Hjo=r(xLe," (I-BERT model)"),xLe.forEach(t),Ujo=i(X),Q2=n(X,"LI",{});var $Le=s(Q2);Vme=n($Le,"STRONG",{});var Rlt=s(Vme);Jjo=r(Rlt,"layoutlmv2"),Rlt.forEach(t),Yjo=r($Le," \u2014 "),bO=n($Le,"A",{href:!0});var Blt=s(bO);Kjo=r(Blt,"LayoutLMv2ForQuestionAnswering"),Blt.forEach(t),Zjo=r($Le," (LayoutLMv2 model)"),$Le.forEach(t),eDo=i(X),W2=n(X,"LI",{});var kLe=s(W2);Xme=n(kLe,"STRONG",{});var Plt=s(Xme);oDo=r(Plt,"led"),Plt.forEach(t),rDo=r(kLe," \u2014 "),vO=n(kLe,"A",{href:!0});var Ilt=s(vO);tDo=r(Ilt,"LEDForQuestionAnswering"),Ilt.forEach(t),aDo=r(kLe," (LED model)"),kLe.forEach(t),nDo=i(X),H2=n(X,"LI",{});var SLe=s(H2);zme=n(SLe,"STRONG",{});var qlt=s(zme);sDo=r(qlt,"longformer"),qlt.forEach(t),lDo=r(SLe," \u2014 "),FO=n(SLe,"A",{href:!0});var Nlt=s(FO);iDo=r(Nlt,"LongformerForQuestionAnswering"),Nlt.forEach(t),dDo=r(SLe," (Longformer model)"),SLe.forEach(t),cDo=i(X),U2=n(X,"LI",{});var RLe=s(U2);Qme=n(RLe,"STRONG",{});var jlt=s(Qme);fDo=r(jlt,"lxmert"),jlt.forEach(t),mDo=r(RLe," \u2014 "),TO=n(RLe,"A",{href:!0});var Dlt=s(TO);gDo=r(Dlt,"LxmertForQuestionAnswering"),Dlt.forEach(t),hDo=r(RLe," (LXMERT model)"),RLe.forEach(t),pDo=i(X),J2=n(X,"LI",{});var BLe=s(J2);Wme=n(BLe,"STRONG",{});var Glt=s(Wme);uDo=r(Glt,"mbart"),Glt.forEach(t),_Do=r(BLe," \u2014 "),MO=n(BLe,"A",{href:!0});var Olt=s(MO);bDo=r(Olt,"MBartForQuestionAnswering"),Olt.forEach(t),vDo=r(BLe," (mBART model)"),BLe.forEach(t),FDo=i(X),Y2=n(X,"LI",{});var PLe=s(Y2);Hme=n(PLe,"STRONG",{});var Vlt=s(Hme);TDo=r(Vlt,"megatron-bert"),Vlt.forEach(t),MDo=r(PLe," \u2014 "),EO=n(PLe,"A",{href:!0});var Xlt=s(EO);EDo=r(Xlt,"MegatronBertForQuestionAnswering"),Xlt.forEach(t),CDo=r(PLe," (MegatronBert model)"),PLe.forEach(t),wDo=i(X),K2=n(X,"LI",{});var ILe=s(K2);Ume=n(ILe,"STRONG",{});var zlt=s(Ume);ADo=r(zlt,"mobilebert"),zlt.forEach(t),yDo=r(ILe," \u2014 "),CO=n(ILe,"A",{href:!0});var Qlt=s(CO);LDo=r(Qlt,"MobileBertForQuestionAnswering"),Qlt.forEach(t),xDo=r(ILe," (MobileBERT model)"),ILe.forEach(t),$Do=i(X),Z2=n(X,"LI",{});var qLe=s(Z2);Jme=n(qLe,"STRONG",{});var Wlt=s(Jme);kDo=r(Wlt,"mpnet"),Wlt.forEach(t),SDo=r(qLe," \u2014 "),wO=n(qLe,"A",{href:!0});var Hlt=s(wO);RDo=r(Hlt,"MPNetForQuestionAnswering"),Hlt.forEach(t),BDo=r(qLe," (MPNet model)"),qLe.forEach(t),PDo=i(X),ev=n(X,"LI",{});var NLe=s(ev);Yme=n(NLe,"STRONG",{});var Ult=s(Yme);IDo=r(Ult,"nystromformer"),Ult.forEach(t),qDo=r(NLe," \u2014 "),AO=n(NLe,"A",{href:!0});var Jlt=s(AO);NDo=r(Jlt,"NystromformerForQuestionAnswering"),Jlt.forEach(t),jDo=r(NLe," (Nystromformer model)"),NLe.forEach(t),DDo=i(X),ov=n(X,"LI",{});var jLe=s(ov);Kme=n(jLe,"STRONG",{});var Ylt=s(Kme);GDo=r(Ylt,"qdqbert"),Ylt.forEach(t),ODo=r(jLe," \u2014 "),yO=n(jLe,"A",{href:!0});var Klt=s(yO);VDo=r(Klt,"QDQBertForQuestionAnswering"),Klt.forEach(t),XDo=r(jLe," (QDQBert model)"),jLe.forEach(t),zDo=i(X),rv=n(X,"LI",{});var DLe=s(rv);Zme=n(DLe,"STRONG",{});var Zlt=s(Zme);QDo=r(Zlt,"reformer"),Zlt.forEach(t),WDo=r(DLe," \u2014 "),LO=n(DLe,"A",{href:!0});var eit=s(LO);HDo=r(eit,"ReformerForQuestionAnswering"),eit.forEach(t),UDo=r(DLe," (Reformer model)"),DLe.forEach(t),JDo=i(X),tv=n(X,"LI",{});var GLe=s(tv);ege=n(GLe,"STRONG",{});var oit=s(ege);YDo=r(oit,"rembert"),oit.forEach(t),KDo=r(GLe," \u2014 "),xO=n(GLe,"A",{href:!0});var rit=s(xO);ZDo=r(rit,"RemBertForQuestionAnswering"),rit.forEach(t),eGo=r(GLe," (RemBERT model)"),GLe.forEach(t),oGo=i(X),av=n(X,"LI",{});var OLe=s(av);oge=n(OLe,"STRONG",{});var tit=s(oge);rGo=r(tit,"roberta"),tit.forEach(t),tGo=r(OLe," \u2014 "),$O=n(OLe,"A",{href:!0});var ait=s($O);aGo=r(ait,"RobertaForQuestionAnswering"),ait.forEach(t),nGo=r(OLe," (RoBERTa model)"),OLe.forEach(t),sGo=i(X),nv=n(X,"LI",{});var VLe=s(nv);rge=n(VLe,"STRONG",{});var nit=s(rge);lGo=r(nit,"roformer"),nit.forEach(t),iGo=r(VLe," \u2014 "),kO=n(VLe,"A",{href:!0});var sit=s(kO);dGo=r(sit,"RoFormerForQuestionAnswering"),sit.forEach(t),cGo=r(VLe," (RoFormer model)"),VLe.forEach(t),fGo=i(X),sv=n(X,"LI",{});var XLe=s(sv);tge=n(XLe,"STRONG",{});var lit=s(tge);mGo=r(lit,"splinter"),lit.forEach(t),gGo=r(XLe," \u2014 "),SO=n(XLe,"A",{href:!0});var iit=s(SO);hGo=r(iit,"SplinterForQuestionAnswering"),iit.forEach(t),pGo=r(XLe," (Splinter model)"),XLe.forEach(t),uGo=i(X),lv=n(X,"LI",{});var zLe=s(lv);age=n(zLe,"STRONG",{});var dit=s(age);_Go=r(dit,"squeezebert"),dit.forEach(t),bGo=r(zLe," \u2014 "),RO=n(zLe,"A",{href:!0});var cit=s(RO);vGo=r(cit,"SqueezeBertForQuestionAnswering"),cit.forEach(t),FGo=r(zLe," (SqueezeBERT model)"),zLe.forEach(t),TGo=i(X),iv=n(X,"LI",{});var QLe=s(iv);nge=n(QLe,"STRONG",{});var fit=s(nge);MGo=r(fit,"xlm"),fit.forEach(t),EGo=r(QLe," \u2014 "),BO=n(QLe,"A",{href:!0});var mit=s(BO);CGo=r(mit,"XLMForQuestionAnsweringSimple"),mit.forEach(t),wGo=r(QLe," (XLM model)"),QLe.forEach(t),AGo=i(X),dv=n(X,"LI",{});var WLe=s(dv);sge=n(WLe,"STRONG",{});var git=s(sge);yGo=r(git,"xlm-roberta"),git.forEach(t),LGo=r(WLe," \u2014 "),PO=n(WLe,"A",{href:!0});var hit=s(PO);xGo=r(hit,"XLMRobertaForQuestionAnswering"),hit.forEach(t),$Go=r(WLe," (XLM-RoBERTa model)"),WLe.forEach(t),kGo=i(X),cv=n(X,"LI",{});var HLe=s(cv);lge=n(HLe,"STRONG",{});var pit=s(lge);SGo=r(pit,"xlm-roberta-xl"),pit.forEach(t),RGo=r(HLe," \u2014 "),IO=n(HLe,"A",{href:!0});var uit=s(IO);BGo=r(uit,"XLMRobertaXLForQuestionAnswering"),uit.forEach(t),PGo=r(HLe," (XLM-RoBERTa-XL model)"),HLe.forEach(t),IGo=i(X),fv=n(X,"LI",{});var ULe=s(fv);ige=n(ULe,"STRONG",{});var _it=s(ige);qGo=r(_it,"xlnet"),_it.forEach(t),NGo=r(ULe," \u2014 "),qO=n(ULe,"A",{href:!0});var bit=s(qO);jGo=r(bit,"XLNetForQuestionAnsweringSimple"),bit.forEach(t),DGo=r(ULe," (XLNet model)"),ULe.forEach(t),GGo=i(X),mv=n(X,"LI",{});var JLe=s(mv);dge=n(JLe,"STRONG",{});var vit=s(dge);OGo=r(vit,"yoso"),vit.forEach(t),VGo=r(JLe," \u2014 "),NO=n(JLe,"A",{href:!0});var Fit=s(NO);XGo=r(Fit,"YosoForQuestionAnswering"),Fit.forEach(t),zGo=r(JLe," (YOSO model)"),JLe.forEach(t),X.forEach(t),QGo=i(na),gv=n(na,"P",{});var YLe=s(gv);WGo=r(YLe,"The model is set in evaluation mode by default using "),cge=n(YLe,"CODE",{});var Tit=s(cge);HGo=r(Tit,"model.eval()"),Tit.forEach(t),UGo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=n(YLe,"CODE",{});var Mit=s(fge);JGo=r(Mit,"model.train()"),Mit.forEach(t),YLe.forEach(t),YGo=i(na),T(hv.$$.fragment,na),na.forEach(t),Qs.forEach(t),MPe=i(f),Qi=n(f,"H2",{class:!0});var Cqe=s(Qi);pv=n(Cqe,"A",{id:!0,class:!0,href:!0});var Eit=s(pv);mge=n(Eit,"SPAN",{});var Cit=s(mge);T(ZA.$$.fragment,Cit),Cit.forEach(t),Eit.forEach(t),KGo=i(Cqe),gge=n(Cqe,"SPAN",{});var wit=s(gge);ZGo=r(wit,"AutoModelForTableQuestionAnswering"),wit.forEach(t),Cqe.forEach(t),EPe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(e6.$$.fragment,Ws),eOo=i(Ws),Wi=n(Ws,"P",{});var YY=s(Wi);oOo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jO=n(YY,"A",{href:!0});var Ait=s(jO);rOo=r(Ait,"from_pretrained()"),Ait.forEach(t),tOo=r(YY," class method or the "),DO=n(YY,"A",{href:!0});var yit=s(DO);aOo=r(yit,"from_config()"),yit.forEach(t),nOo=r(YY,` class
method.`),YY.forEach(t),sOo=i(Ws),o6=n(Ws,"P",{});var wqe=s(o6);lOo=r(wqe,"This class cannot be instantiated directly using "),hge=n(wqe,"CODE",{});var Lit=s(hge);iOo=r(Lit,"__init__()"),Lit.forEach(t),dOo=r(wqe," (throws an error)."),wqe.forEach(t),cOo=i(Ws),dt=n(Ws,"DIV",{class:!0});var r3=s(dt);T(r6.$$.fragment,r3),fOo=i(r3),pge=n(r3,"P",{});var xit=s(pge);mOo=r(xit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xit.forEach(t),gOo=i(r3),Hi=n(r3,"P",{});var KY=s(Hi);hOo=r(KY,`Note:
Loading a model from its configuration file does `),uge=n(KY,"STRONG",{});var $it=s(uge);pOo=r($it,"not"),$it.forEach(t),uOo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(KY,"A",{href:!0});var kit=s(GO);_Oo=r(kit,"from_pretrained()"),kit.forEach(t),bOo=r(KY," to load the model weights."),KY.forEach(t),vOo=i(r3),T(uv.$$.fragment,r3),r3.forEach(t),FOo=i(Ws),ao=n(Ws,"DIV",{class:!0});var sa=s(ao);T(t6.$$.fragment,sa),TOo=i(sa),_ge=n(sa,"P",{});var Sit=s(_ge);MOo=r(Sit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Sit.forEach(t),EOo=i(sa),Ra=n(sa,"P",{});var t3=s(Ra);COo=r(t3,"The model class to instantiate is selected based on the "),bge=n(t3,"CODE",{});var Rit=s(bge);wOo=r(Rit,"model_type"),Rit.forEach(t),AOo=r(t3,` property of the config object (either
passed as an argument or loaded from `),vge=n(t3,"CODE",{});var Bit=s(vge);yOo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),LOo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=n(t3,"CODE",{});var Pit=s(Fge);xOo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),$Oo=r(t3,":"),t3.forEach(t),kOo=i(sa),Tge=n(sa,"UL",{});var Iit=s(Tge);_v=n(Iit,"LI",{});var KLe=s(_v);Mge=n(KLe,"STRONG",{});var qit=s(Mge);SOo=r(qit,"tapas"),qit.forEach(t),ROo=r(KLe," \u2014 "),OO=n(KLe,"A",{href:!0});var Nit=s(OO);BOo=r(Nit,"TapasForQuestionAnswering"),Nit.forEach(t),POo=r(KLe," (TAPAS model)"),KLe.forEach(t),Iit.forEach(t),IOo=i(sa),bv=n(sa,"P",{});var ZLe=s(bv);qOo=r(ZLe,"The model is set in evaluation mode by default using "),Ege=n(ZLe,"CODE",{});var jit=s(Ege);NOo=r(jit,"model.eval()"),jit.forEach(t),jOo=r(ZLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=n(ZLe,"CODE",{});var Dit=s(Cge);DOo=r(Dit,"model.train()"),Dit.forEach(t),ZLe.forEach(t),GOo=i(sa),T(vv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),CPe=i(f),Ui=n(f,"H2",{class:!0});var Aqe=s(Ui);Fv=n(Aqe,"A",{id:!0,class:!0,href:!0});var Git=s(Fv);wge=n(Git,"SPAN",{});var Oit=s(wge);T(a6.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),OOo=i(Aqe),Age=n(Aqe,"SPAN",{});var Vit=s(Age);VOo=r(Vit,"AutoModelForImageClassification"),Vit.forEach(t),Aqe.forEach(t),wPe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(n6.$$.fragment,Hs),XOo=i(Hs),Ji=n(Hs,"P",{});var ZY=s(Ji);zOo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VO=n(ZY,"A",{href:!0});var Xit=s(VO);QOo=r(Xit,"from_pretrained()"),Xit.forEach(t),WOo=r(ZY," class method or the "),XO=n(ZY,"A",{href:!0});var zit=s(XO);HOo=r(zit,"from_config()"),zit.forEach(t),UOo=r(ZY,` class
method.`),ZY.forEach(t),JOo=i(Hs),s6=n(Hs,"P",{});var yqe=s(s6);YOo=r(yqe,"This class cannot be instantiated directly using "),yge=n(yqe,"CODE",{});var Qit=s(yge);KOo=r(Qit,"__init__()"),Qit.forEach(t),ZOo=r(yqe," (throws an error)."),yqe.forEach(t),eVo=i(Hs),ct=n(Hs,"DIV",{class:!0});var a3=s(ct);T(l6.$$.fragment,a3),oVo=i(a3),Lge=n(a3,"P",{});var Wit=s(Lge);rVo=r(Wit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wit.forEach(t),tVo=i(a3),Yi=n(a3,"P",{});var eK=s(Yi);aVo=r(eK,`Note:
Loading a model from its configuration file does `),xge=n(eK,"STRONG",{});var Hit=s(xge);nVo=r(Hit,"not"),Hit.forEach(t),sVo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=n(eK,"A",{href:!0});var Uit=s(zO);lVo=r(Uit,"from_pretrained()"),Uit.forEach(t),iVo=r(eK," to load the model weights."),eK.forEach(t),dVo=i(a3),T(Tv.$$.fragment,a3),a3.forEach(t),cVo=i(Hs),no=n(Hs,"DIV",{class:!0});var la=s(no);T(i6.$$.fragment,la),fVo=i(la),$ge=n(la,"P",{});var Jit=s($ge);mVo=r(Jit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jit.forEach(t),gVo=i(la),Ba=n(la,"P",{});var n3=s(Ba);hVo=r(n3,"The model class to instantiate is selected based on the "),kge=n(n3,"CODE",{});var Yit=s(kge);pVo=r(Yit,"model_type"),Yit.forEach(t),uVo=r(n3,` property of the config object (either
passed as an argument or loaded from `),Sge=n(n3,"CODE",{});var Kit=s(Sge);_Vo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),bVo=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(n3,"CODE",{});var Zit=s(Rge);vVo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),FVo=r(n3,":"),n3.forEach(t),TVo=i(la),ve=n(la,"UL",{});var Ee=s(ve);Mv=n(Ee,"LI",{});var exe=s(Mv);Bge=n(exe,"STRONG",{});var edt=s(Bge);MVo=r(edt,"beit"),edt.forEach(t),EVo=r(exe," \u2014 "),QO=n(exe,"A",{href:!0});var odt=s(QO);CVo=r(odt,"BeitForImageClassification"),odt.forEach(t),wVo=r(exe," (BEiT model)"),exe.forEach(t),AVo=i(Ee),Ev=n(Ee,"LI",{});var oxe=s(Ev);Pge=n(oxe,"STRONG",{});var rdt=s(Pge);yVo=r(rdt,"convnext"),rdt.forEach(t),LVo=r(oxe," \u2014 "),WO=n(oxe,"A",{href:!0});var tdt=s(WO);xVo=r(tdt,"ConvNextForImageClassification"),tdt.forEach(t),$Vo=r(oxe," (ConvNext model)"),oxe.forEach(t),kVo=i(Ee),Cv=n(Ee,"LI",{});var rxe=s(Cv);Ige=n(rxe,"STRONG",{});var adt=s(Ige);SVo=r(adt,"data2vec-vision"),adt.forEach(t),RVo=r(rxe," \u2014 "),HO=n(rxe,"A",{href:!0});var ndt=s(HO);BVo=r(ndt,"Data2VecVisionForImageClassification"),ndt.forEach(t),PVo=r(rxe," (Data2VecVision model)"),rxe.forEach(t),IVo=i(Ee),$s=n(Ee,"LI",{});var G9=s($s);qge=n(G9,"STRONG",{});var sdt=s(qge);qVo=r(sdt,"deit"),sdt.forEach(t),NVo=r(G9," \u2014 "),UO=n(G9,"A",{href:!0});var ldt=s(UO);jVo=r(ldt,"DeiTForImageClassification"),ldt.forEach(t),DVo=r(G9," or "),JO=n(G9,"A",{href:!0});var idt=s(JO);GVo=r(idt,"DeiTForImageClassificationWithTeacher"),idt.forEach(t),OVo=r(G9," (DeiT model)"),G9.forEach(t),VVo=i(Ee),wv=n(Ee,"LI",{});var txe=s(wv);Nge=n(txe,"STRONG",{});var ddt=s(Nge);XVo=r(ddt,"imagegpt"),ddt.forEach(t),zVo=r(txe," \u2014 "),YO=n(txe,"A",{href:!0});var cdt=s(YO);QVo=r(cdt,"ImageGPTForImageClassification"),cdt.forEach(t),WVo=r(txe," (ImageGPT model)"),txe.forEach(t),HVo=i(Ee),ft=n(Ee,"LI",{});var rf=s(ft);jge=n(rf,"STRONG",{});var fdt=s(jge);UVo=r(fdt,"perceiver"),fdt.forEach(t),JVo=r(rf," \u2014 "),KO=n(rf,"A",{href:!0});var mdt=s(KO);YVo=r(mdt,"PerceiverForImageClassificationLearned"),mdt.forEach(t),KVo=r(rf," or "),ZO=n(rf,"A",{href:!0});var gdt=s(ZO);ZVo=r(gdt,"PerceiverForImageClassificationFourier"),gdt.forEach(t),eXo=r(rf," or "),eV=n(rf,"A",{href:!0});var hdt=s(eV);oXo=r(hdt,"PerceiverForImageClassificationConvProcessing"),hdt.forEach(t),rXo=r(rf," (Perceiver model)"),rf.forEach(t),tXo=i(Ee),Av=n(Ee,"LI",{});var axe=s(Av);Dge=n(axe,"STRONG",{});var pdt=s(Dge);aXo=r(pdt,"poolformer"),pdt.forEach(t),nXo=r(axe," \u2014 "),oV=n(axe,"A",{href:!0});var udt=s(oV);sXo=r(udt,"PoolFormerForImageClassification"),udt.forEach(t),lXo=r(axe," (PoolFormer model)"),axe.forEach(t),iXo=i(Ee),yv=n(Ee,"LI",{});var nxe=s(yv);Gge=n(nxe,"STRONG",{});var _dt=s(Gge);dXo=r(_dt,"regnet"),_dt.forEach(t),cXo=r(nxe," \u2014 "),rV=n(nxe,"A",{href:!0});var bdt=s(rV);fXo=r(bdt,"RegNetForImageClassification"),bdt.forEach(t),mXo=r(nxe," (RegNet model)"),nxe.forEach(t),gXo=i(Ee),Lv=n(Ee,"LI",{});var sxe=s(Lv);Oge=n(sxe,"STRONG",{});var vdt=s(Oge);hXo=r(vdt,"resnet"),vdt.forEach(t),pXo=r(sxe," \u2014 "),tV=n(sxe,"A",{href:!0});var Fdt=s(tV);uXo=r(Fdt,"ResNetForImageClassification"),Fdt.forEach(t),_Xo=r(sxe," (ResNet model)"),sxe.forEach(t),bXo=i(Ee),xv=n(Ee,"LI",{});var lxe=s(xv);Vge=n(lxe,"STRONG",{});var Tdt=s(Vge);vXo=r(Tdt,"segformer"),Tdt.forEach(t),FXo=r(lxe," \u2014 "),aV=n(lxe,"A",{href:!0});var Mdt=s(aV);TXo=r(Mdt,"SegformerForImageClassification"),Mdt.forEach(t),MXo=r(lxe," (SegFormer model)"),lxe.forEach(t),EXo=i(Ee),$v=n(Ee,"LI",{});var ixe=s($v);Xge=n(ixe,"STRONG",{});var Edt=s(Xge);CXo=r(Edt,"swin"),Edt.forEach(t),wXo=r(ixe," \u2014 "),nV=n(ixe,"A",{href:!0});var Cdt=s(nV);AXo=r(Cdt,"SwinForImageClassification"),Cdt.forEach(t),yXo=r(ixe," (Swin model)"),ixe.forEach(t),LXo=i(Ee),kv=n(Ee,"LI",{});var dxe=s(kv);zge=n(dxe,"STRONG",{});var wdt=s(zge);xXo=r(wdt,"van"),wdt.forEach(t),$Xo=r(dxe," \u2014 "),sV=n(dxe,"A",{href:!0});var Adt=s(sV);kXo=r(Adt,"VanForImageClassification"),Adt.forEach(t),SXo=r(dxe," (VAN model)"),dxe.forEach(t),RXo=i(Ee),Sv=n(Ee,"LI",{});var cxe=s(Sv);Qge=n(cxe,"STRONG",{});var ydt=s(Qge);BXo=r(ydt,"vit"),ydt.forEach(t),PXo=r(cxe," \u2014 "),lV=n(cxe,"A",{href:!0});var Ldt=s(lV);IXo=r(Ldt,"ViTForImageClassification"),Ldt.forEach(t),qXo=r(cxe," (ViT model)"),cxe.forEach(t),Ee.forEach(t),NXo=i(la),Rv=n(la,"P",{});var fxe=s(Rv);jXo=r(fxe,"The model is set in evaluation mode by default using "),Wge=n(fxe,"CODE",{});var xdt=s(Wge);DXo=r(xdt,"model.eval()"),xdt.forEach(t),GXo=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(fxe,"CODE",{});var $dt=s(Hge);OXo=r($dt,"model.train()"),$dt.forEach(t),fxe.forEach(t),VXo=i(la),T(Bv.$$.fragment,la),la.forEach(t),Hs.forEach(t),APe=i(f),Ki=n(f,"H2",{class:!0});var Lqe=s(Ki);Pv=n(Lqe,"A",{id:!0,class:!0,href:!0});var kdt=s(Pv);Uge=n(kdt,"SPAN",{});var Sdt=s(Uge);T(d6.$$.fragment,Sdt),Sdt.forEach(t),kdt.forEach(t),XXo=i(Lqe),Jge=n(Lqe,"SPAN",{});var Rdt=s(Jge);zXo=r(Rdt,"AutoModelForVision2Seq"),Rdt.forEach(t),Lqe.forEach(t),yPe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(c6.$$.fragment,Us),QXo=i(Us),Zi=n(Us,"P",{});var oK=s(Zi);WXo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iV=n(oK,"A",{href:!0});var Bdt=s(iV);HXo=r(Bdt,"from_pretrained()"),Bdt.forEach(t),UXo=r(oK," class method or the "),dV=n(oK,"A",{href:!0});var Pdt=s(dV);JXo=r(Pdt,"from_config()"),Pdt.forEach(t),YXo=r(oK,` class
method.`),oK.forEach(t),KXo=i(Us),f6=n(Us,"P",{});var xqe=s(f6);ZXo=r(xqe,"This class cannot be instantiated directly using "),Yge=n(xqe,"CODE",{});var Idt=s(Yge);ezo=r(Idt,"__init__()"),Idt.forEach(t),ozo=r(xqe," (throws an error)."),xqe.forEach(t),rzo=i(Us),mt=n(Us,"DIV",{class:!0});var s3=s(mt);T(m6.$$.fragment,s3),tzo=i(s3),Kge=n(s3,"P",{});var qdt=s(Kge);azo=r(qdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qdt.forEach(t),nzo=i(s3),ed=n(s3,"P",{});var rK=s(ed);szo=r(rK,`Note:
Loading a model from its configuration file does `),Zge=n(rK,"STRONG",{});var Ndt=s(Zge);lzo=r(Ndt,"not"),Ndt.forEach(t),izo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(rK,"A",{href:!0});var jdt=s(cV);dzo=r(jdt,"from_pretrained()"),jdt.forEach(t),czo=r(rK," to load the model weights."),rK.forEach(t),fzo=i(s3),T(Iv.$$.fragment,s3),s3.forEach(t),mzo=i(Us),so=n(Us,"DIV",{class:!0});var ia=s(so);T(g6.$$.fragment,ia),gzo=i(ia),ehe=n(ia,"P",{});var Ddt=s(ehe);hzo=r(Ddt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ddt.forEach(t),pzo=i(ia),Pa=n(ia,"P",{});var l3=s(Pa);uzo=r(l3,"The model class to instantiate is selected based on the "),ohe=n(l3,"CODE",{});var Gdt=s(ohe);_zo=r(Gdt,"model_type"),Gdt.forEach(t),bzo=r(l3,` property of the config object (either
passed as an argument or loaded from `),rhe=n(l3,"CODE",{});var Odt=s(rhe);vzo=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),Fzo=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(l3,"CODE",{});var Vdt=s(the);Tzo=r(Vdt,"pretrained_model_name_or_path"),Vdt.forEach(t),Mzo=r(l3,":"),l3.forEach(t),Ezo=i(ia),ahe=n(ia,"UL",{});var Xdt=s(ahe);qv=n(Xdt,"LI",{});var mxe=s(qv);nhe=n(mxe,"STRONG",{});var zdt=s(nhe);Czo=r(zdt,"vision-encoder-decoder"),zdt.forEach(t),wzo=r(mxe," \u2014 "),fV=n(mxe,"A",{href:!0});var Qdt=s(fV);Azo=r(Qdt,"VisionEncoderDecoderModel"),Qdt.forEach(t),yzo=r(mxe," (Vision Encoder decoder model)"),mxe.forEach(t),Xdt.forEach(t),Lzo=i(ia),Nv=n(ia,"P",{});var gxe=s(Nv);xzo=r(gxe,"The model is set in evaluation mode by default using "),she=n(gxe,"CODE",{});var Wdt=s(she);$zo=r(Wdt,"model.eval()"),Wdt.forEach(t),kzo=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(gxe,"CODE",{});var Hdt=s(lhe);Szo=r(Hdt,"model.train()"),Hdt.forEach(t),gxe.forEach(t),Rzo=i(ia),T(jv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),LPe=i(f),od=n(f,"H2",{class:!0});var $qe=s(od);Dv=n($qe,"A",{id:!0,class:!0,href:!0});var Udt=s(Dv);ihe=n(Udt,"SPAN",{});var Jdt=s(ihe);T(h6.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),Bzo=i($qe),dhe=n($qe,"SPAN",{});var Ydt=s(dhe);Pzo=r(Ydt,"AutoModelForAudioClassification"),Ydt.forEach(t),$qe.forEach(t),xPe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(p6.$$.fragment,Js),Izo=i(Js),rd=n(Js,"P",{});var tK=s(rd);qzo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mV=n(tK,"A",{href:!0});var Kdt=s(mV);Nzo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),jzo=r(tK," class method or the "),gV=n(tK,"A",{href:!0});var Zdt=s(gV);Dzo=r(Zdt,"from_config()"),Zdt.forEach(t),Gzo=r(tK,` class
method.`),tK.forEach(t),Ozo=i(Js),u6=n(Js,"P",{});var kqe=s(u6);Vzo=r(kqe,"This class cannot be instantiated directly using "),che=n(kqe,"CODE",{});var ect=s(che);Xzo=r(ect,"__init__()"),ect.forEach(t),zzo=r(kqe," (throws an error)."),kqe.forEach(t),Qzo=i(Js),gt=n(Js,"DIV",{class:!0});var i3=s(gt);T(_6.$$.fragment,i3),Wzo=i(i3),fhe=n(i3,"P",{});var oct=s(fhe);Hzo=r(oct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oct.forEach(t),Uzo=i(i3),td=n(i3,"P",{});var aK=s(td);Jzo=r(aK,`Note:
Loading a model from its configuration file does `),mhe=n(aK,"STRONG",{});var rct=s(mhe);Yzo=r(rct,"not"),rct.forEach(t),Kzo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(aK,"A",{href:!0});var tct=s(hV);Zzo=r(tct,"from_pretrained()"),tct.forEach(t),eQo=r(aK," to load the model weights."),aK.forEach(t),oQo=i(i3),T(Gv.$$.fragment,i3),i3.forEach(t),rQo=i(Js),lo=n(Js,"DIV",{class:!0});var da=s(lo);T(b6.$$.fragment,da),tQo=i(da),ghe=n(da,"P",{});var act=s(ghe);aQo=r(act,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),act.forEach(t),nQo=i(da),Ia=n(da,"P",{});var d3=s(Ia);sQo=r(d3,"The model class to instantiate is selected based on the "),hhe=n(d3,"CODE",{});var nct=s(hhe);lQo=r(nct,"model_type"),nct.forEach(t),iQo=r(d3,` property of the config object (either
passed as an argument or loaded from `),phe=n(d3,"CODE",{});var sct=s(phe);dQo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),cQo=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(d3,"CODE",{});var lct=s(uhe);fQo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),mQo=r(d3,":"),d3.forEach(t),gQo=i(da),je=n(da,"UL",{});var bo=s(je);Ov=n(bo,"LI",{});var hxe=s(Ov);_he=n(hxe,"STRONG",{});var ict=s(_he);hQo=r(ict,"data2vec-audio"),ict.forEach(t),pQo=r(hxe," \u2014 "),pV=n(hxe,"A",{href:!0});var dct=s(pV);uQo=r(dct,"Data2VecAudioForSequenceClassification"),dct.forEach(t),_Qo=r(hxe," (Data2VecAudio model)"),hxe.forEach(t),bQo=i(bo),Vv=n(bo,"LI",{});var pxe=s(Vv);bhe=n(pxe,"STRONG",{});var cct=s(bhe);vQo=r(cct,"hubert"),cct.forEach(t),FQo=r(pxe," \u2014 "),uV=n(pxe,"A",{href:!0});var fct=s(uV);TQo=r(fct,"HubertForSequenceClassification"),fct.forEach(t),MQo=r(pxe," (Hubert model)"),pxe.forEach(t),EQo=i(bo),Xv=n(bo,"LI",{});var uxe=s(Xv);vhe=n(uxe,"STRONG",{});var mct=s(vhe);CQo=r(mct,"sew"),mct.forEach(t),wQo=r(uxe," \u2014 "),_V=n(uxe,"A",{href:!0});var gct=s(_V);AQo=r(gct,"SEWForSequenceClassification"),gct.forEach(t),yQo=r(uxe," (SEW model)"),uxe.forEach(t),LQo=i(bo),zv=n(bo,"LI",{});var _xe=s(zv);Fhe=n(_xe,"STRONG",{});var hct=s(Fhe);xQo=r(hct,"sew-d"),hct.forEach(t),$Qo=r(_xe," \u2014 "),bV=n(_xe,"A",{href:!0});var pct=s(bV);kQo=r(pct,"SEWDForSequenceClassification"),pct.forEach(t),SQo=r(_xe," (SEW-D model)"),_xe.forEach(t),RQo=i(bo),Qv=n(bo,"LI",{});var bxe=s(Qv);The=n(bxe,"STRONG",{});var uct=s(The);BQo=r(uct,"unispeech"),uct.forEach(t),PQo=r(bxe," \u2014 "),vV=n(bxe,"A",{href:!0});var _ct=s(vV);IQo=r(_ct,"UniSpeechForSequenceClassification"),_ct.forEach(t),qQo=r(bxe," (UniSpeech model)"),bxe.forEach(t),NQo=i(bo),Wv=n(bo,"LI",{});var vxe=s(Wv);Mhe=n(vxe,"STRONG",{});var bct=s(Mhe);jQo=r(bct,"unispeech-sat"),bct.forEach(t),DQo=r(vxe," \u2014 "),FV=n(vxe,"A",{href:!0});var vct=s(FV);GQo=r(vct,"UniSpeechSatForSequenceClassification"),vct.forEach(t),OQo=r(vxe," (UniSpeechSat model)"),vxe.forEach(t),VQo=i(bo),Hv=n(bo,"LI",{});var Fxe=s(Hv);Ehe=n(Fxe,"STRONG",{});var Fct=s(Ehe);XQo=r(Fct,"wav2vec2"),Fct.forEach(t),zQo=r(Fxe," \u2014 "),TV=n(Fxe,"A",{href:!0});var Tct=s(TV);QQo=r(Tct,"Wav2Vec2ForSequenceClassification"),Tct.forEach(t),WQo=r(Fxe," (Wav2Vec2 model)"),Fxe.forEach(t),HQo=i(bo),Uv=n(bo,"LI",{});var Txe=s(Uv);Che=n(Txe,"STRONG",{});var Mct=s(Che);UQo=r(Mct,"wavlm"),Mct.forEach(t),JQo=r(Txe," \u2014 "),MV=n(Txe,"A",{href:!0});var Ect=s(MV);YQo=r(Ect,"WavLMForSequenceClassification"),Ect.forEach(t),KQo=r(Txe," (WavLM model)"),Txe.forEach(t),bo.forEach(t),ZQo=i(da),Jv=n(da,"P",{});var Mxe=s(Jv);eWo=r(Mxe,"The model is set in evaluation mode by default using "),whe=n(Mxe,"CODE",{});var Cct=s(whe);oWo=r(Cct,"model.eval()"),Cct.forEach(t),rWo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=n(Mxe,"CODE",{});var wct=s(Ahe);tWo=r(wct,"model.train()"),wct.forEach(t),Mxe.forEach(t),aWo=i(da),T(Yv.$$.fragment,da),da.forEach(t),Js.forEach(t),$Pe=i(f),ad=n(f,"H2",{class:!0});var Sqe=s(ad);Kv=n(Sqe,"A",{id:!0,class:!0,href:!0});var Act=s(Kv);yhe=n(Act,"SPAN",{});var yct=s(yhe);T(v6.$$.fragment,yct),yct.forEach(t),Act.forEach(t),nWo=i(Sqe),Lhe=n(Sqe,"SPAN",{});var Lct=s(Lhe);sWo=r(Lct,"AutoModelForAudioFrameClassification"),Lct.forEach(t),Sqe.forEach(t),kPe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(F6.$$.fragment,Ys),lWo=i(Ys),nd=n(Ys,"P",{});var nK=s(nd);iWo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),EV=n(nK,"A",{href:!0});var xct=s(EV);dWo=r(xct,"from_pretrained()"),xct.forEach(t),cWo=r(nK," class method or the "),CV=n(nK,"A",{href:!0});var $ct=s(CV);fWo=r($ct,"from_config()"),$ct.forEach(t),mWo=r(nK,` class
method.`),nK.forEach(t),gWo=i(Ys),T6=n(Ys,"P",{});var Rqe=s(T6);hWo=r(Rqe,"This class cannot be instantiated directly using "),xhe=n(Rqe,"CODE",{});var kct=s(xhe);pWo=r(kct,"__init__()"),kct.forEach(t),uWo=r(Rqe," (throws an error)."),Rqe.forEach(t),_Wo=i(Ys),ht=n(Ys,"DIV",{class:!0});var c3=s(ht);T(M6.$$.fragment,c3),bWo=i(c3),$he=n(c3,"P",{});var Sct=s($he);vWo=r(Sct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Sct.forEach(t),FWo=i(c3),sd=n(c3,"P",{});var sK=s(sd);TWo=r(sK,`Note:
Loading a model from its configuration file does `),khe=n(sK,"STRONG",{});var Rct=s(khe);MWo=r(Rct,"not"),Rct.forEach(t),EWo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=n(sK,"A",{href:!0});var Bct=s(wV);CWo=r(Bct,"from_pretrained()"),Bct.forEach(t),wWo=r(sK," to load the model weights."),sK.forEach(t),AWo=i(c3),T(Zv.$$.fragment,c3),c3.forEach(t),yWo=i(Ys),io=n(Ys,"DIV",{class:!0});var ca=s(io);T(E6.$$.fragment,ca),LWo=i(ca),She=n(ca,"P",{});var Pct=s(She);xWo=r(Pct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Pct.forEach(t),$Wo=i(ca),qa=n(ca,"P",{});var f3=s(qa);kWo=r(f3,"The model class to instantiate is selected based on the "),Rhe=n(f3,"CODE",{});var Ict=s(Rhe);SWo=r(Ict,"model_type"),Ict.forEach(t),RWo=r(f3,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(f3,"CODE",{});var qct=s(Bhe);BWo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),PWo=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=n(f3,"CODE",{});var Nct=s(Phe);IWo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),qWo=r(f3,":"),f3.forEach(t),NWo=i(ca),Na=n(ca,"UL",{});var m3=s(Na);eF=n(m3,"LI",{});var Exe=s(eF);Ihe=n(Exe,"STRONG",{});var jct=s(Ihe);jWo=r(jct,"data2vec-audio"),jct.forEach(t),DWo=r(Exe," \u2014 "),AV=n(Exe,"A",{href:!0});var Dct=s(AV);GWo=r(Dct,"Data2VecAudioForAudioFrameClassification"),Dct.forEach(t),OWo=r(Exe," (Data2VecAudio model)"),Exe.forEach(t),VWo=i(m3),oF=n(m3,"LI",{});var Cxe=s(oF);qhe=n(Cxe,"STRONG",{});var Gct=s(qhe);XWo=r(Gct,"unispeech-sat"),Gct.forEach(t),zWo=r(Cxe," \u2014 "),yV=n(Cxe,"A",{href:!0});var Oct=s(yV);QWo=r(Oct,"UniSpeechSatForAudioFrameClassification"),Oct.forEach(t),WWo=r(Cxe," (UniSpeechSat model)"),Cxe.forEach(t),HWo=i(m3),rF=n(m3,"LI",{});var wxe=s(rF);Nhe=n(wxe,"STRONG",{});var Vct=s(Nhe);UWo=r(Vct,"wav2vec2"),Vct.forEach(t),JWo=r(wxe," \u2014 "),LV=n(wxe,"A",{href:!0});var Xct=s(LV);YWo=r(Xct,"Wav2Vec2ForAudioFrameClassification"),Xct.forEach(t),KWo=r(wxe," (Wav2Vec2 model)"),wxe.forEach(t),ZWo=i(m3),tF=n(m3,"LI",{});var Axe=s(tF);jhe=n(Axe,"STRONG",{});var zct=s(jhe);eHo=r(zct,"wavlm"),zct.forEach(t),oHo=r(Axe," \u2014 "),xV=n(Axe,"A",{href:!0});var Qct=s(xV);rHo=r(Qct,"WavLMForAudioFrameClassification"),Qct.forEach(t),tHo=r(Axe," (WavLM model)"),Axe.forEach(t),m3.forEach(t),aHo=i(ca),aF=n(ca,"P",{});var yxe=s(aF);nHo=r(yxe,"The model is set in evaluation mode by default using "),Dhe=n(yxe,"CODE",{});var Wct=s(Dhe);sHo=r(Wct,"model.eval()"),Wct.forEach(t),lHo=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(yxe,"CODE",{});var Hct=s(Ghe);iHo=r(Hct,"model.train()"),Hct.forEach(t),yxe.forEach(t),dHo=i(ca),T(nF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),SPe=i(f),ld=n(f,"H2",{class:!0});var Bqe=s(ld);sF=n(Bqe,"A",{id:!0,class:!0,href:!0});var Uct=s(sF);Ohe=n(Uct,"SPAN",{});var Jct=s(Ohe);T(C6.$$.fragment,Jct),Jct.forEach(t),Uct.forEach(t),cHo=i(Bqe),Vhe=n(Bqe,"SPAN",{});var Yct=s(Vhe);fHo=r(Yct,"AutoModelForCTC"),Yct.forEach(t),Bqe.forEach(t),RPe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(w6.$$.fragment,Ks),mHo=i(Ks),id=n(Ks,"P",{});var lK=s(id);gHo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$V=n(lK,"A",{href:!0});var Kct=s($V);hHo=r(Kct,"from_pretrained()"),Kct.forEach(t),pHo=r(lK," class method or the "),kV=n(lK,"A",{href:!0});var Zct=s(kV);uHo=r(Zct,"from_config()"),Zct.forEach(t),_Ho=r(lK,` class
method.`),lK.forEach(t),bHo=i(Ks),A6=n(Ks,"P",{});var Pqe=s(A6);vHo=r(Pqe,"This class cannot be instantiated directly using "),Xhe=n(Pqe,"CODE",{});var eft=s(Xhe);FHo=r(eft,"__init__()"),eft.forEach(t),THo=r(Pqe," (throws an error)."),Pqe.forEach(t),MHo=i(Ks),pt=n(Ks,"DIV",{class:!0});var g3=s(pt);T(y6.$$.fragment,g3),EHo=i(g3),zhe=n(g3,"P",{});var oft=s(zhe);CHo=r(oft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),oft.forEach(t),wHo=i(g3),dd=n(g3,"P",{});var iK=s(dd);AHo=r(iK,`Note:
Loading a model from its configuration file does `),Qhe=n(iK,"STRONG",{});var rft=s(Qhe);yHo=r(rft,"not"),rft.forEach(t),LHo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(iK,"A",{href:!0});var tft=s(SV);xHo=r(tft,"from_pretrained()"),tft.forEach(t),$Ho=r(iK," to load the model weights."),iK.forEach(t),kHo=i(g3),T(lF.$$.fragment,g3),g3.forEach(t),SHo=i(Ks),co=n(Ks,"DIV",{class:!0});var fa=s(co);T(L6.$$.fragment,fa),RHo=i(fa),Whe=n(fa,"P",{});var aft=s(Whe);BHo=r(aft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),aft.forEach(t),PHo=i(fa),ja=n(fa,"P",{});var h3=s(ja);IHo=r(h3,"The model class to instantiate is selected based on the "),Hhe=n(h3,"CODE",{});var nft=s(Hhe);qHo=r(nft,"model_type"),nft.forEach(t),NHo=r(h3,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(h3,"CODE",{});var sft=s(Uhe);jHo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),DHo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(h3,"CODE",{});var lft=s(Jhe);GHo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),OHo=r(h3,":"),h3.forEach(t),VHo=i(fa),De=n(fa,"UL",{});var vo=s(De);iF=n(vo,"LI",{});var Lxe=s(iF);Yhe=n(Lxe,"STRONG",{});var ift=s(Yhe);XHo=r(ift,"data2vec-audio"),ift.forEach(t),zHo=r(Lxe," \u2014 "),RV=n(Lxe,"A",{href:!0});var dft=s(RV);QHo=r(dft,"Data2VecAudioForCTC"),dft.forEach(t),WHo=r(Lxe," (Data2VecAudio model)"),Lxe.forEach(t),HHo=i(vo),dF=n(vo,"LI",{});var xxe=s(dF);Khe=n(xxe,"STRONG",{});var cft=s(Khe);UHo=r(cft,"hubert"),cft.forEach(t),JHo=r(xxe," \u2014 "),BV=n(xxe,"A",{href:!0});var fft=s(BV);YHo=r(fft,"HubertForCTC"),fft.forEach(t),KHo=r(xxe," (Hubert model)"),xxe.forEach(t),ZHo=i(vo),cF=n(vo,"LI",{});var $xe=s(cF);Zhe=n($xe,"STRONG",{});var mft=s(Zhe);eUo=r(mft,"sew"),mft.forEach(t),oUo=r($xe," \u2014 "),PV=n($xe,"A",{href:!0});var gft=s(PV);rUo=r(gft,"SEWForCTC"),gft.forEach(t),tUo=r($xe," (SEW model)"),$xe.forEach(t),aUo=i(vo),fF=n(vo,"LI",{});var kxe=s(fF);epe=n(kxe,"STRONG",{});var hft=s(epe);nUo=r(hft,"sew-d"),hft.forEach(t),sUo=r(kxe," \u2014 "),IV=n(kxe,"A",{href:!0});var pft=s(IV);lUo=r(pft,"SEWDForCTC"),pft.forEach(t),iUo=r(kxe," (SEW-D model)"),kxe.forEach(t),dUo=i(vo),mF=n(vo,"LI",{});var Sxe=s(mF);ope=n(Sxe,"STRONG",{});var uft=s(ope);cUo=r(uft,"unispeech"),uft.forEach(t),fUo=r(Sxe," \u2014 "),qV=n(Sxe,"A",{href:!0});var _ft=s(qV);mUo=r(_ft,"UniSpeechForCTC"),_ft.forEach(t),gUo=r(Sxe," (UniSpeech model)"),Sxe.forEach(t),hUo=i(vo),gF=n(vo,"LI",{});var Rxe=s(gF);rpe=n(Rxe,"STRONG",{});var bft=s(rpe);pUo=r(bft,"unispeech-sat"),bft.forEach(t),uUo=r(Rxe," \u2014 "),NV=n(Rxe,"A",{href:!0});var vft=s(NV);_Uo=r(vft,"UniSpeechSatForCTC"),vft.forEach(t),bUo=r(Rxe," (UniSpeechSat model)"),Rxe.forEach(t),vUo=i(vo),hF=n(vo,"LI",{});var Bxe=s(hF);tpe=n(Bxe,"STRONG",{});var Fft=s(tpe);FUo=r(Fft,"wav2vec2"),Fft.forEach(t),TUo=r(Bxe," \u2014 "),jV=n(Bxe,"A",{href:!0});var Tft=s(jV);MUo=r(Tft,"Wav2Vec2ForCTC"),Tft.forEach(t),EUo=r(Bxe," (Wav2Vec2 model)"),Bxe.forEach(t),CUo=i(vo),pF=n(vo,"LI",{});var Pxe=s(pF);ape=n(Pxe,"STRONG",{});var Mft=s(ape);wUo=r(Mft,"wavlm"),Mft.forEach(t),AUo=r(Pxe," \u2014 "),DV=n(Pxe,"A",{href:!0});var Eft=s(DV);yUo=r(Eft,"WavLMForCTC"),Eft.forEach(t),LUo=r(Pxe," (WavLM model)"),Pxe.forEach(t),vo.forEach(t),xUo=i(fa),uF=n(fa,"P",{});var Ixe=s(uF);$Uo=r(Ixe,"The model is set in evaluation mode by default using "),npe=n(Ixe,"CODE",{});var Cft=s(npe);kUo=r(Cft,"model.eval()"),Cft.forEach(t),SUo=r(Ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=n(Ixe,"CODE",{});var wft=s(spe);RUo=r(wft,"model.train()"),wft.forEach(t),Ixe.forEach(t),BUo=i(fa),T(_F.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),BPe=i(f),cd=n(f,"H2",{class:!0});var Iqe=s(cd);bF=n(Iqe,"A",{id:!0,class:!0,href:!0});var Aft=s(bF);lpe=n(Aft,"SPAN",{});var yft=s(lpe);T(x6.$$.fragment,yft),yft.forEach(t),Aft.forEach(t),PUo=i(Iqe),ipe=n(Iqe,"SPAN",{});var Lft=s(ipe);IUo=r(Lft,"AutoModelForSpeechSeq2Seq"),Lft.forEach(t),Iqe.forEach(t),PPe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T($6.$$.fragment,Zs),qUo=i(Zs),fd=n(Zs,"P",{});var dK=s(fd);NUo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GV=n(dK,"A",{href:!0});var xft=s(GV);jUo=r(xft,"from_pretrained()"),xft.forEach(t),DUo=r(dK," class method or the "),OV=n(dK,"A",{href:!0});var $ft=s(OV);GUo=r($ft,"from_config()"),$ft.forEach(t),OUo=r(dK,` class
method.`),dK.forEach(t),VUo=i(Zs),k6=n(Zs,"P",{});var qqe=s(k6);XUo=r(qqe,"This class cannot be instantiated directly using "),dpe=n(qqe,"CODE",{});var kft=s(dpe);zUo=r(kft,"__init__()"),kft.forEach(t),QUo=r(qqe," (throws an error)."),qqe.forEach(t),WUo=i(Zs),ut=n(Zs,"DIV",{class:!0});var p3=s(ut);T(S6.$$.fragment,p3),HUo=i(p3),cpe=n(p3,"P",{});var Sft=s(cpe);UUo=r(Sft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Sft.forEach(t),JUo=i(p3),md=n(p3,"P",{});var cK=s(md);YUo=r(cK,`Note:
Loading a model from its configuration file does `),fpe=n(cK,"STRONG",{});var Rft=s(fpe);KUo=r(Rft,"not"),Rft.forEach(t),ZUo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(cK,"A",{href:!0});var Bft=s(VV);eJo=r(Bft,"from_pretrained()"),Bft.forEach(t),oJo=r(cK," to load the model weights."),cK.forEach(t),rJo=i(p3),T(vF.$$.fragment,p3),p3.forEach(t),tJo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ma=s(fo);T(R6.$$.fragment,ma),aJo=i(ma),mpe=n(ma,"P",{});var Pft=s(mpe);nJo=r(Pft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pft.forEach(t),sJo=i(ma),Da=n(ma,"P",{});var u3=s(Da);lJo=r(u3,"The model class to instantiate is selected based on the "),gpe=n(u3,"CODE",{});var Ift=s(gpe);iJo=r(Ift,"model_type"),Ift.forEach(t),dJo=r(u3,` property of the config object (either
passed as an argument or loaded from `),hpe=n(u3,"CODE",{});var qft=s(hpe);cJo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),fJo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(u3,"CODE",{});var Nft=s(ppe);mJo=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),gJo=r(u3,":"),u3.forEach(t),hJo=i(ma),B6=n(ma,"UL",{});var Nqe=s(B6);FF=n(Nqe,"LI",{});var qxe=s(FF);upe=n(qxe,"STRONG",{});var jft=s(upe);pJo=r(jft,"speech-encoder-decoder"),jft.forEach(t),uJo=r(qxe," \u2014 "),XV=n(qxe,"A",{href:!0});var Dft=s(XV);_Jo=r(Dft,"SpeechEncoderDecoderModel"),Dft.forEach(t),bJo=r(qxe," (Speech Encoder decoder model)"),qxe.forEach(t),vJo=i(Nqe),TF=n(Nqe,"LI",{});var Nxe=s(TF);_pe=n(Nxe,"STRONG",{});var Gft=s(_pe);FJo=r(Gft,"speech_to_text"),Gft.forEach(t),TJo=r(Nxe," \u2014 "),zV=n(Nxe,"A",{href:!0});var Oft=s(zV);MJo=r(Oft,"Speech2TextForConditionalGeneration"),Oft.forEach(t),EJo=r(Nxe," (Speech2Text model)"),Nxe.forEach(t),Nqe.forEach(t),CJo=i(ma),MF=n(ma,"P",{});var jxe=s(MF);wJo=r(jxe,"The model is set in evaluation mode by default using "),bpe=n(jxe,"CODE",{});var Vft=s(bpe);AJo=r(Vft,"model.eval()"),Vft.forEach(t),yJo=r(jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(jxe,"CODE",{});var Xft=s(vpe);LJo=r(Xft,"model.train()"),Xft.forEach(t),jxe.forEach(t),xJo=i(ma),T(EF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),IPe=i(f),gd=n(f,"H2",{class:!0});var jqe=s(gd);CF=n(jqe,"A",{id:!0,class:!0,href:!0});var zft=s(CF);Fpe=n(zft,"SPAN",{});var Qft=s(Fpe);T(P6.$$.fragment,Qft),Qft.forEach(t),zft.forEach(t),$Jo=i(jqe),Tpe=n(jqe,"SPAN",{});var Wft=s(Tpe);kJo=r(Wft,"AutoModelForAudioXVector"),Wft.forEach(t),jqe.forEach(t),qPe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(I6.$$.fragment,el),SJo=i(el),hd=n(el,"P",{});var fK=s(hd);RJo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QV=n(fK,"A",{href:!0});var Hft=s(QV);BJo=r(Hft,"from_pretrained()"),Hft.forEach(t),PJo=r(fK," class method or the "),WV=n(fK,"A",{href:!0});var Uft=s(WV);IJo=r(Uft,"from_config()"),Uft.forEach(t),qJo=r(fK,` class
method.`),fK.forEach(t),NJo=i(el),q6=n(el,"P",{});var Dqe=s(q6);jJo=r(Dqe,"This class cannot be instantiated directly using "),Mpe=n(Dqe,"CODE",{});var Jft=s(Mpe);DJo=r(Jft,"__init__()"),Jft.forEach(t),GJo=r(Dqe," (throws an error)."),Dqe.forEach(t),OJo=i(el),_t=n(el,"DIV",{class:!0});var _3=s(_t);T(N6.$$.fragment,_3),VJo=i(_3),Epe=n(_3,"P",{});var Yft=s(Epe);XJo=r(Yft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Yft.forEach(t),zJo=i(_3),pd=n(_3,"P",{});var mK=s(pd);QJo=r(mK,`Note:
Loading a model from its configuration file does `),Cpe=n(mK,"STRONG",{});var Kft=s(Cpe);WJo=r(Kft,"not"),Kft.forEach(t),HJo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(mK,"A",{href:!0});var Zft=s(HV);UJo=r(Zft,"from_pretrained()"),Zft.forEach(t),JJo=r(mK," to load the model weights."),mK.forEach(t),YJo=i(_3),T(wF.$$.fragment,_3),_3.forEach(t),KJo=i(el),mo=n(el,"DIV",{class:!0});var ga=s(mo);T(j6.$$.fragment,ga),ZJo=i(ga),wpe=n(ga,"P",{});var emt=s(wpe);eYo=r(emt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),emt.forEach(t),oYo=i(ga),Ga=n(ga,"P",{});var b3=s(Ga);rYo=r(b3,"The model class to instantiate is selected based on the "),Ape=n(b3,"CODE",{});var omt=s(Ape);tYo=r(omt,"model_type"),omt.forEach(t),aYo=r(b3,` property of the config object (either
passed as an argument or loaded from `),ype=n(b3,"CODE",{});var rmt=s(ype);nYo=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),sYo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(b3,"CODE",{});var tmt=s(Lpe);lYo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),iYo=r(b3,":"),b3.forEach(t),dYo=i(ga),Oa=n(ga,"UL",{});var v3=s(Oa);AF=n(v3,"LI",{});var Dxe=s(AF);xpe=n(Dxe,"STRONG",{});var amt=s(xpe);cYo=r(amt,"data2vec-audio"),amt.forEach(t),fYo=r(Dxe," \u2014 "),UV=n(Dxe,"A",{href:!0});var nmt=s(UV);mYo=r(nmt,"Data2VecAudioForXVector"),nmt.forEach(t),gYo=r(Dxe," (Data2VecAudio model)"),Dxe.forEach(t),hYo=i(v3),yF=n(v3,"LI",{});var Gxe=s(yF);$pe=n(Gxe,"STRONG",{});var smt=s($pe);pYo=r(smt,"unispeech-sat"),smt.forEach(t),uYo=r(Gxe," \u2014 "),JV=n(Gxe,"A",{href:!0});var lmt=s(JV);_Yo=r(lmt,"UniSpeechSatForXVector"),lmt.forEach(t),bYo=r(Gxe," (UniSpeechSat model)"),Gxe.forEach(t),vYo=i(v3),LF=n(v3,"LI",{});var Oxe=s(LF);kpe=n(Oxe,"STRONG",{});var imt=s(kpe);FYo=r(imt,"wav2vec2"),imt.forEach(t),TYo=r(Oxe," \u2014 "),YV=n(Oxe,"A",{href:!0});var dmt=s(YV);MYo=r(dmt,"Wav2Vec2ForXVector"),dmt.forEach(t),EYo=r(Oxe," (Wav2Vec2 model)"),Oxe.forEach(t),CYo=i(v3),xF=n(v3,"LI",{});var Vxe=s(xF);Spe=n(Vxe,"STRONG",{});var cmt=s(Spe);wYo=r(cmt,"wavlm"),cmt.forEach(t),AYo=r(Vxe," \u2014 "),KV=n(Vxe,"A",{href:!0});var fmt=s(KV);yYo=r(fmt,"WavLMForXVector"),fmt.forEach(t),LYo=r(Vxe," (WavLM model)"),Vxe.forEach(t),v3.forEach(t),xYo=i(ga),$F=n(ga,"P",{});var Xxe=s($F);$Yo=r(Xxe,"The model is set in evaluation mode by default using "),Rpe=n(Xxe,"CODE",{});var mmt=s(Rpe);kYo=r(mmt,"model.eval()"),mmt.forEach(t),SYo=r(Xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(Xxe,"CODE",{});var gmt=s(Bpe);RYo=r(gmt,"model.train()"),gmt.forEach(t),Xxe.forEach(t),BYo=i(ga),T(kF.$$.fragment,ga),ga.forEach(t),el.forEach(t),NPe=i(f),ud=n(f,"H2",{class:!0});var Gqe=s(ud);SF=n(Gqe,"A",{id:!0,class:!0,href:!0});var hmt=s(SF);Ppe=n(hmt,"SPAN",{});var pmt=s(Ppe);T(D6.$$.fragment,pmt),pmt.forEach(t),hmt.forEach(t),PYo=i(Gqe),Ipe=n(Gqe,"SPAN",{});var umt=s(Ipe);IYo=r(umt,"AutoModelForMaskedImageModeling"),umt.forEach(t),Gqe.forEach(t),jPe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(G6.$$.fragment,ol),qYo=i(ol),_d=n(ol,"P",{});var gK=s(_d);NYo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ZV=n(gK,"A",{href:!0});var _mt=s(ZV);jYo=r(_mt,"from_pretrained()"),_mt.forEach(t),DYo=r(gK," class method or the "),eX=n(gK,"A",{href:!0});var bmt=s(eX);GYo=r(bmt,"from_config()"),bmt.forEach(t),OYo=r(gK,` class
method.`),gK.forEach(t),VYo=i(ol),O6=n(ol,"P",{});var Oqe=s(O6);XYo=r(Oqe,"This class cannot be instantiated directly using "),qpe=n(Oqe,"CODE",{});var vmt=s(qpe);zYo=r(vmt,"__init__()"),vmt.forEach(t),QYo=r(Oqe," (throws an error)."),Oqe.forEach(t),WYo=i(ol),bt=n(ol,"DIV",{class:!0});var F3=s(bt);T(V6.$$.fragment,F3),HYo=i(F3),Npe=n(F3,"P",{});var Fmt=s(Npe);UYo=r(Fmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Fmt.forEach(t),JYo=i(F3),bd=n(F3,"P",{});var hK=s(bd);YYo=r(hK,`Note:
Loading a model from its configuration file does `),jpe=n(hK,"STRONG",{});var Tmt=s(jpe);KYo=r(Tmt,"not"),Tmt.forEach(t),ZYo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(hK,"A",{href:!0});var Mmt=s(oX);eKo=r(Mmt,"from_pretrained()"),Mmt.forEach(t),oKo=r(hK," to load the model weights."),hK.forEach(t),rKo=i(F3),T(RF.$$.fragment,F3),F3.forEach(t),tKo=i(ol),go=n(ol,"DIV",{class:!0});var ha=s(go);T(X6.$$.fragment,ha),aKo=i(ha),Dpe=n(ha,"P",{});var Emt=s(Dpe);nKo=r(Emt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Emt.forEach(t),sKo=i(ha),Va=n(ha,"P",{});var T3=s(Va);lKo=r(T3,"The model class to instantiate is selected based on the "),Gpe=n(T3,"CODE",{});var Cmt=s(Gpe);iKo=r(Cmt,"model_type"),Cmt.forEach(t),dKo=r(T3,` property of the config object (either
passed as an argument or loaded from `),Ope=n(T3,"CODE",{});var wmt=s(Ope);cKo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),fKo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(T3,"CODE",{});var Amt=s(Vpe);mKo=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),gKo=r(T3,":"),T3.forEach(t),hKo=i(ha),vd=n(ha,"UL",{});var pK=s(vd);BF=n(pK,"LI",{});var zxe=s(BF);Xpe=n(zxe,"STRONG",{});var ymt=s(Xpe);pKo=r(ymt,"deit"),ymt.forEach(t),uKo=r(zxe," \u2014 "),rX=n(zxe,"A",{href:!0});var Lmt=s(rX);_Ko=r(Lmt,"DeiTForMaskedImageModeling"),Lmt.forEach(t),bKo=r(zxe," (DeiT model)"),zxe.forEach(t),vKo=i(pK),PF=n(pK,"LI",{});var Qxe=s(PF);zpe=n(Qxe,"STRONG",{});var xmt=s(zpe);FKo=r(xmt,"swin"),xmt.forEach(t),TKo=r(Qxe," \u2014 "),tX=n(Qxe,"A",{href:!0});var $mt=s(tX);MKo=r($mt,"SwinForMaskedImageModeling"),$mt.forEach(t),EKo=r(Qxe," (Swin model)"),Qxe.forEach(t),CKo=i(pK),IF=n(pK,"LI",{});var Wxe=s(IF);Qpe=n(Wxe,"STRONG",{});var kmt=s(Qpe);wKo=r(kmt,"vit"),kmt.forEach(t),AKo=r(Wxe," \u2014 "),aX=n(Wxe,"A",{href:!0});var Smt=s(aX);yKo=r(Smt,"ViTForMaskedImageModeling"),Smt.forEach(t),LKo=r(Wxe," (ViT model)"),Wxe.forEach(t),pK.forEach(t),xKo=i(ha),qF=n(ha,"P",{});var Hxe=s(qF);$Ko=r(Hxe,"The model is set in evaluation mode by default using "),Wpe=n(Hxe,"CODE",{});var Rmt=s(Wpe);kKo=r(Rmt,"model.eval()"),Rmt.forEach(t),SKo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(Hxe,"CODE",{});var Bmt=s(Hpe);RKo=r(Bmt,"model.train()"),Bmt.forEach(t),Hxe.forEach(t),BKo=i(ha),T(NF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),DPe=i(f),Fd=n(f,"H2",{class:!0});var Vqe=s(Fd);jF=n(Vqe,"A",{id:!0,class:!0,href:!0});var Pmt=s(jF);Upe=n(Pmt,"SPAN",{});var Imt=s(Upe);T(z6.$$.fragment,Imt),Imt.forEach(t),Pmt.forEach(t),PKo=i(Vqe),Jpe=n(Vqe,"SPAN",{});var qmt=s(Jpe);IKo=r(qmt,"AutoModelForObjectDetection"),qmt.forEach(t),Vqe.forEach(t),GPe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(Q6.$$.fragment,rl),qKo=i(rl),Td=n(rl,"P",{});var uK=s(Td);NKo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nX=n(uK,"A",{href:!0});var Nmt=s(nX);jKo=r(Nmt,"from_pretrained()"),Nmt.forEach(t),DKo=r(uK," class method or the "),sX=n(uK,"A",{href:!0});var jmt=s(sX);GKo=r(jmt,"from_config()"),jmt.forEach(t),OKo=r(uK,` class
method.`),uK.forEach(t),VKo=i(rl),W6=n(rl,"P",{});var Xqe=s(W6);XKo=r(Xqe,"This class cannot be instantiated directly using "),Ype=n(Xqe,"CODE",{});var Dmt=s(Ype);zKo=r(Dmt,"__init__()"),Dmt.forEach(t),QKo=r(Xqe," (throws an error)."),Xqe.forEach(t),WKo=i(rl),vt=n(rl,"DIV",{class:!0});var M3=s(vt);T(H6.$$.fragment,M3),HKo=i(M3),Kpe=n(M3,"P",{});var Gmt=s(Kpe);UKo=r(Gmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Gmt.forEach(t),JKo=i(M3),Md=n(M3,"P",{});var _K=s(Md);YKo=r(_K,`Note:
Loading a model from its configuration file does `),Zpe=n(_K,"STRONG",{});var Omt=s(Zpe);KKo=r(Omt,"not"),Omt.forEach(t),ZKo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(_K,"A",{href:!0});var Vmt=s(lX);eZo=r(Vmt,"from_pretrained()"),Vmt.forEach(t),oZo=r(_K," to load the model weights."),_K.forEach(t),rZo=i(M3),T(DF.$$.fragment,M3),M3.forEach(t),tZo=i(rl),ho=n(rl,"DIV",{class:!0});var pa=s(ho);T(U6.$$.fragment,pa),aZo=i(pa),eue=n(pa,"P",{});var Xmt=s(eue);nZo=r(Xmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Xmt.forEach(t),sZo=i(pa),Xa=n(pa,"P",{});var E3=s(Xa);lZo=r(E3,"The model class to instantiate is selected based on the "),oue=n(E3,"CODE",{});var zmt=s(oue);iZo=r(zmt,"model_type"),zmt.forEach(t),dZo=r(E3,` property of the config object (either
passed as an argument or loaded from `),rue=n(E3,"CODE",{});var Qmt=s(rue);cZo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),fZo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(E3,"CODE",{});var Wmt=s(tue);mZo=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),gZo=r(E3,":"),E3.forEach(t),hZo=i(pa),J6=n(pa,"UL",{});var zqe=s(J6);GF=n(zqe,"LI",{});var Uxe=s(GF);aue=n(Uxe,"STRONG",{});var Hmt=s(aue);pZo=r(Hmt,"detr"),Hmt.forEach(t),uZo=r(Uxe," \u2014 "),iX=n(Uxe,"A",{href:!0});var Umt=s(iX);_Zo=r(Umt,"DetrForObjectDetection"),Umt.forEach(t),bZo=r(Uxe," (DETR model)"),Uxe.forEach(t),vZo=i(zqe),OF=n(zqe,"LI",{});var Jxe=s(OF);nue=n(Jxe,"STRONG",{});var Jmt=s(nue);FZo=r(Jmt,"yolos"),Jmt.forEach(t),TZo=r(Jxe," \u2014 "),dX=n(Jxe,"A",{href:!0});var Ymt=s(dX);MZo=r(Ymt,"YolosForObjectDetection"),Ymt.forEach(t),EZo=r(Jxe," (YOLOS model)"),Jxe.forEach(t),zqe.forEach(t),CZo=i(pa),VF=n(pa,"P",{});var Yxe=s(VF);wZo=r(Yxe,"The model is set in evaluation mode by default using "),sue=n(Yxe,"CODE",{});var Kmt=s(sue);AZo=r(Kmt,"model.eval()"),Kmt.forEach(t),yZo=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(Yxe,"CODE",{});var Zmt=s(lue);LZo=r(Zmt,"model.train()"),Zmt.forEach(t),Yxe.forEach(t),xZo=i(pa),T(XF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),OPe=i(f),Ed=n(f,"H2",{class:!0});var Qqe=s(Ed);zF=n(Qqe,"A",{id:!0,class:!0,href:!0});var egt=s(zF);iue=n(egt,"SPAN",{});var ogt=s(iue);T(Y6.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),$Zo=i(Qqe),due=n(Qqe,"SPAN",{});var rgt=s(due);kZo=r(rgt,"AutoModelForImageSegmentation"),rgt.forEach(t),Qqe.forEach(t),VPe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(K6.$$.fragment,tl),SZo=i(tl),Cd=n(tl,"P",{});var bK=s(Cd);RZo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cX=n(bK,"A",{href:!0});var tgt=s(cX);BZo=r(tgt,"from_pretrained()"),tgt.forEach(t),PZo=r(bK," class method or the "),fX=n(bK,"A",{href:!0});var agt=s(fX);IZo=r(agt,"from_config()"),agt.forEach(t),qZo=r(bK,` class
method.`),bK.forEach(t),NZo=i(tl),Z6=n(tl,"P",{});var Wqe=s(Z6);jZo=r(Wqe,"This class cannot be instantiated directly using "),cue=n(Wqe,"CODE",{});var ngt=s(cue);DZo=r(ngt,"__init__()"),ngt.forEach(t),GZo=r(Wqe," (throws an error)."),Wqe.forEach(t),OZo=i(tl),Ft=n(tl,"DIV",{class:!0});var C3=s(Ft);T(ey.$$.fragment,C3),VZo=i(C3),fue=n(C3,"P",{});var sgt=s(fue);XZo=r(sgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sgt.forEach(t),zZo=i(C3),wd=n(C3,"P",{});var vK=s(wd);QZo=r(vK,`Note:
Loading a model from its configuration file does `),mue=n(vK,"STRONG",{});var lgt=s(mue);WZo=r(lgt,"not"),lgt.forEach(t),HZo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(vK,"A",{href:!0});var igt=s(mX);UZo=r(igt,"from_pretrained()"),igt.forEach(t),JZo=r(vK," to load the model weights."),vK.forEach(t),YZo=i(C3),T(QF.$$.fragment,C3),C3.forEach(t),KZo=i(tl),po=n(tl,"DIV",{class:!0});var ua=s(po);T(oy.$$.fragment,ua),ZZo=i(ua),gue=n(ua,"P",{});var dgt=s(gue);eer=r(dgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),dgt.forEach(t),oer=i(ua),za=n(ua,"P",{});var w3=s(za);rer=r(w3,"The model class to instantiate is selected based on the "),hue=n(w3,"CODE",{});var cgt=s(hue);ter=r(cgt,"model_type"),cgt.forEach(t),aer=r(w3,` property of the config object (either
passed as an argument or loaded from `),pue=n(w3,"CODE",{});var fgt=s(pue);ner=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),ser=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(w3,"CODE",{});var mgt=s(uue);ler=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),ier=r(w3,":"),w3.forEach(t),der=i(ua),_ue=n(ua,"UL",{});var ggt=s(_ue);WF=n(ggt,"LI",{});var Kxe=s(WF);bue=n(Kxe,"STRONG",{});var hgt=s(bue);cer=r(hgt,"detr"),hgt.forEach(t),fer=r(Kxe," \u2014 "),gX=n(Kxe,"A",{href:!0});var pgt=s(gX);mer=r(pgt,"DetrForSegmentation"),pgt.forEach(t),ger=r(Kxe," (DETR model)"),Kxe.forEach(t),ggt.forEach(t),her=i(ua),HF=n(ua,"P",{});var Zxe=s(HF);per=r(Zxe,"The model is set in evaluation mode by default using "),vue=n(Zxe,"CODE",{});var ugt=s(vue);uer=r(ugt,"model.eval()"),ugt.forEach(t),_er=r(Zxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(Zxe,"CODE",{});var _gt=s(Fue);ber=r(_gt,"model.train()"),_gt.forEach(t),Zxe.forEach(t),ver=i(ua),T(UF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),XPe=i(f),Ad=n(f,"H2",{class:!0});var Hqe=s(Ad);JF=n(Hqe,"A",{id:!0,class:!0,href:!0});var bgt=s(JF);Tue=n(bgt,"SPAN",{});var vgt=s(Tue);T(ry.$$.fragment,vgt),vgt.forEach(t),bgt.forEach(t),Fer=i(Hqe),Mue=n(Hqe,"SPAN",{});var Fgt=s(Mue);Ter=r(Fgt,"AutoModelForSemanticSegmentation"),Fgt.forEach(t),Hqe.forEach(t),zPe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(ty.$$.fragment,al),Mer=i(al),yd=n(al,"P",{});var FK=s(yd);Eer=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hX=n(FK,"A",{href:!0});var Tgt=s(hX);Cer=r(Tgt,"from_pretrained()"),Tgt.forEach(t),wer=r(FK," class method or the "),pX=n(FK,"A",{href:!0});var Mgt=s(pX);Aer=r(Mgt,"from_config()"),Mgt.forEach(t),yer=r(FK,` class
method.`),FK.forEach(t),Ler=i(al),ay=n(al,"P",{});var Uqe=s(ay);xer=r(Uqe,"This class cannot be instantiated directly using "),Eue=n(Uqe,"CODE",{});var Egt=s(Eue);$er=r(Egt,"__init__()"),Egt.forEach(t),ker=r(Uqe," (throws an error)."),Uqe.forEach(t),Ser=i(al),Tt=n(al,"DIV",{class:!0});var A3=s(Tt);T(ny.$$.fragment,A3),Rer=i(A3),Cue=n(A3,"P",{});var Cgt=s(Cue);Ber=r(Cgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Cgt.forEach(t),Per=i(A3),Ld=n(A3,"P",{});var TK=s(Ld);Ier=r(TK,`Note:
Loading a model from its configuration file does `),wue=n(TK,"STRONG",{});var wgt=s(wue);qer=r(wgt,"not"),wgt.forEach(t),Ner=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(TK,"A",{href:!0});var Agt=s(uX);jer=r(Agt,"from_pretrained()"),Agt.forEach(t),Der=r(TK," to load the model weights."),TK.forEach(t),Ger=i(A3),T(YF.$$.fragment,A3),A3.forEach(t),Oer=i(al),uo=n(al,"DIV",{class:!0});var _a=s(uo);T(sy.$$.fragment,_a),Ver=i(_a),Aue=n(_a,"P",{});var ygt=s(Aue);Xer=r(ygt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ygt.forEach(t),zer=i(_a),Qa=n(_a,"P",{});var y3=s(Qa);Qer=r(y3,"The model class to instantiate is selected based on the "),yue=n(y3,"CODE",{});var Lgt=s(yue);Wer=r(Lgt,"model_type"),Lgt.forEach(t),Her=r(y3,` property of the config object (either
passed as an argument or loaded from `),Lue=n(y3,"CODE",{});var xgt=s(Lue);Uer=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),Jer=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(y3,"CODE",{});var $gt=s(xue);Yer=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),Ker=r(y3,":"),y3.forEach(t),Zer=i(_a),Wa=n(_a,"UL",{});var L3=s(Wa);KF=n(L3,"LI",{});var e9e=s(KF);$ue=n(e9e,"STRONG",{});var kgt=s($ue);eor=r(kgt,"beit"),kgt.forEach(t),oor=r(e9e," \u2014 "),_X=n(e9e,"A",{href:!0});var Sgt=s(_X);ror=r(Sgt,"BeitForSemanticSegmentation"),Sgt.forEach(t),tor=r(e9e," (BEiT model)"),e9e.forEach(t),aor=i(L3),ZF=n(L3,"LI",{});var o9e=s(ZF);kue=n(o9e,"STRONG",{});var Rgt=s(kue);nor=r(Rgt,"data2vec-vision"),Rgt.forEach(t),sor=r(o9e," \u2014 "),bX=n(o9e,"A",{href:!0});var Bgt=s(bX);lor=r(Bgt,"Data2VecVisionForSemanticSegmentation"),Bgt.forEach(t),ior=r(o9e," (Data2VecVision model)"),o9e.forEach(t),dor=i(L3),e0=n(L3,"LI",{});var r9e=s(e0);Sue=n(r9e,"STRONG",{});var Pgt=s(Sue);cor=r(Pgt,"dpt"),Pgt.forEach(t),mor=r(r9e," \u2014 "),vX=n(r9e,"A",{href:!0});var Igt=s(vX);gor=r(Igt,"DPTForSemanticSegmentation"),Igt.forEach(t),hor=r(r9e," (DPT model)"),r9e.forEach(t),por=i(L3),o0=n(L3,"LI",{});var t9e=s(o0);Rue=n(t9e,"STRONG",{});var qgt=s(Rue);uor=r(qgt,"segformer"),qgt.forEach(t),_or=r(t9e," \u2014 "),FX=n(t9e,"A",{href:!0});var Ngt=s(FX);bor=r(Ngt,"SegformerForSemanticSegmentation"),Ngt.forEach(t),vor=r(t9e," (SegFormer model)"),t9e.forEach(t),L3.forEach(t),For=i(_a),r0=n(_a,"P",{});var a9e=s(r0);Tor=r(a9e,"The model is set in evaluation mode by default using "),Bue=n(a9e,"CODE",{});var jgt=s(Bue);Mor=r(jgt,"model.eval()"),jgt.forEach(t),Eor=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(a9e,"CODE",{});var Dgt=s(Pue);Cor=r(Dgt,"model.train()"),Dgt.forEach(t),a9e.forEach(t),wor=i(_a),T(t0.$$.fragment,_a),_a.forEach(t),al.forEach(t),QPe=i(f),xd=n(f,"H2",{class:!0});var Jqe=s(xd);a0=n(Jqe,"A",{id:!0,class:!0,href:!0});var Ggt=s(a0);Iue=n(Ggt,"SPAN",{});var Ogt=s(Iue);T(ly.$$.fragment,Ogt),Ogt.forEach(t),Ggt.forEach(t),Aor=i(Jqe),que=n(Jqe,"SPAN",{});var Vgt=s(que);yor=r(Vgt,"AutoModelForInstanceSegmentation"),Vgt.forEach(t),Jqe.forEach(t),WPe=i(f),Jo=n(f,"DIV",{class:!0});var nl=s(Jo);T(iy.$$.fragment,nl),Lor=i(nl),$d=n(nl,"P",{});var MK=s($d);xor=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),TX=n(MK,"A",{href:!0});var Xgt=s(TX);$or=r(Xgt,"from_pretrained()"),Xgt.forEach(t),kor=r(MK," class method or the "),MX=n(MK,"A",{href:!0});var zgt=s(MX);Sor=r(zgt,"from_config()"),zgt.forEach(t),Ror=r(MK,` class
method.`),MK.forEach(t),Bor=i(nl),dy=n(nl,"P",{});var Yqe=s(dy);Por=r(Yqe,"This class cannot be instantiated directly using "),Nue=n(Yqe,"CODE",{});var Qgt=s(Nue);Ior=r(Qgt,"__init__()"),Qgt.forEach(t),qor=r(Yqe," (throws an error)."),Yqe.forEach(t),Nor=i(nl),Mt=n(nl,"DIV",{class:!0});var x3=s(Mt);T(cy.$$.fragment,x3),jor=i(x3),jue=n(x3,"P",{});var Wgt=s(jue);Dor=r(Wgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wgt.forEach(t),Gor=i(x3),kd=n(x3,"P",{});var EK=s(kd);Oor=r(EK,`Note:
Loading a model from its configuration file does `),Due=n(EK,"STRONG",{});var Hgt=s(Due);Vor=r(Hgt,"not"),Hgt.forEach(t),Xor=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(EK,"A",{href:!0});var Ugt=s(EX);zor=r(Ugt,"from_pretrained()"),Ugt.forEach(t),Qor=r(EK," to load the model weights."),EK.forEach(t),Wor=i(x3),T(n0.$$.fragment,x3),x3.forEach(t),Hor=i(nl),_o=n(nl,"DIV",{class:!0});var ba=s(_o);T(fy.$$.fragment,ba),Uor=i(ba),Gue=n(ba,"P",{});var Jgt=s(Gue);Jor=r(Jgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Jgt.forEach(t),Yor=i(ba),Ha=n(ba,"P",{});var $3=s(Ha);Kor=r($3,"The model class to instantiate is selected based on the "),Oue=n($3,"CODE",{});var Ygt=s(Oue);Zor=r(Ygt,"model_type"),Ygt.forEach(t),err=r($3,` property of the config object (either
passed as an argument or loaded from `),Vue=n($3,"CODE",{});var Kgt=s(Vue);orr=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),rrr=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n($3,"CODE",{});var Zgt=s(Xue);trr=r(Zgt,"pretrained_model_name_or_path"),Zgt.forEach(t),arr=r($3,":"),$3.forEach(t),nrr=i(ba),zue=n(ba,"UL",{});var eht=s(zue);s0=n(eht,"LI",{});var n9e=s(s0);Que=n(n9e,"STRONG",{});var oht=s(Que);srr=r(oht,"maskformer"),oht.forEach(t),lrr=r(n9e," \u2014 "),CX=n(n9e,"A",{href:!0});var rht=s(CX);irr=r(rht,"MaskFormerForInstanceSegmentation"),rht.forEach(t),drr=r(n9e," (MaskFormer model)"),n9e.forEach(t),eht.forEach(t),crr=i(ba),l0=n(ba,"P",{});var s9e=s(l0);frr=r(s9e,"The model is set in evaluation mode by default using "),Wue=n(s9e,"CODE",{});var tht=s(Wue);mrr=r(tht,"model.eval()"),tht.forEach(t),grr=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(s9e,"CODE",{});var aht=s(Hue);hrr=r(aht,"model.train()"),aht.forEach(t),s9e.forEach(t),prr=i(ba),T(i0.$$.fragment,ba),ba.forEach(t),nl.forEach(t),HPe=i(f),Sd=n(f,"H2",{class:!0});var Kqe=s(Sd);d0=n(Kqe,"A",{id:!0,class:!0,href:!0});var nht=s(d0);Uue=n(nht,"SPAN",{});var sht=s(Uue);T(my.$$.fragment,sht),sht.forEach(t),nht.forEach(t),urr=i(Kqe),Jue=n(Kqe,"SPAN",{});var lht=s(Jue);_rr=r(lht,"TFAutoModel"),lht.forEach(t),Kqe.forEach(t),UPe=i(f),Yo=n(f,"DIV",{class:!0});var sl=s(Yo);T(gy.$$.fragment,sl),brr=i(sl),Rd=n(sl,"P",{});var CK=s(Rd);vrr=r(CK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wX=n(CK,"A",{href:!0});var iht=s(wX);Frr=r(iht,"from_pretrained()"),iht.forEach(t),Trr=r(CK," class method or the "),AX=n(CK,"A",{href:!0});var dht=s(AX);Mrr=r(dht,"from_config()"),dht.forEach(t),Err=r(CK,` class
method.`),CK.forEach(t),Crr=i(sl),hy=n(sl,"P",{});var Zqe=s(hy);wrr=r(Zqe,"This class cannot be instantiated directly using "),Yue=n(Zqe,"CODE",{});var cht=s(Yue);Arr=r(cht,"__init__()"),cht.forEach(t),yrr=r(Zqe," (throws an error)."),Zqe.forEach(t),Lrr=i(sl),Et=n(sl,"DIV",{class:!0});var k3=s(Et);T(py.$$.fragment,k3),xrr=i(k3),Kue=n(k3,"P",{});var fht=s(Kue);$rr=r(fht,"Instantiates one of the base model classes of the library from a configuration."),fht.forEach(t),krr=i(k3),Bd=n(k3,"P",{});var wK=s(Bd);Srr=r(wK,`Note:
Loading a model from its configuration file does `),Zue=n(wK,"STRONG",{});var mht=s(Zue);Rrr=r(mht,"not"),mht.forEach(t),Brr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(wK,"A",{href:!0});var ght=s(yX);Prr=r(ght,"from_pretrained()"),ght.forEach(t),Irr=r(wK," to load the model weights."),wK.forEach(t),qrr=i(k3),T(c0.$$.fragment,k3),k3.forEach(t),Nrr=i(sl),Cr=n(sl,"DIV",{class:!0});var ll=s(Cr);T(uy.$$.fragment,ll),jrr=i(ll),e_e=n(ll,"P",{});var hht=s(e_e);Drr=r(hht,"Instantiate one of the base model classes of the library from a pretrained model."),hht.forEach(t),Grr=i(ll),Ua=n(ll,"P",{});var S3=s(Ua);Orr=r(S3,"The model class to instantiate is selected based on the "),o_e=n(S3,"CODE",{});var pht=s(o_e);Vrr=r(pht,"model_type"),pht.forEach(t),Xrr=r(S3,` property of the config object (either
passed as an argument or loaded from `),r_e=n(S3,"CODE",{});var uht=s(r_e);zrr=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),Qrr=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(S3,"CODE",{});var _ht=s(t_e);Wrr=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),Hrr=r(S3,":"),S3.forEach(t),Urr=i(ll),N=n(ll,"UL",{});var D=s(N);f0=n(D,"LI",{});var l9e=s(f0);a_e=n(l9e,"STRONG",{});var bht=s(a_e);Jrr=r(bht,"albert"),bht.forEach(t),Yrr=r(l9e," \u2014 "),LX=n(l9e,"A",{href:!0});var vht=s(LX);Krr=r(vht,"TFAlbertModel"),vht.forEach(t),Zrr=r(l9e," (ALBERT model)"),l9e.forEach(t),etr=i(D),m0=n(D,"LI",{});var i9e=s(m0);n_e=n(i9e,"STRONG",{});var Fht=s(n_e);otr=r(Fht,"bart"),Fht.forEach(t),rtr=r(i9e," \u2014 "),xX=n(i9e,"A",{href:!0});var Tht=s(xX);ttr=r(Tht,"TFBartModel"),Tht.forEach(t),atr=r(i9e," (BART model)"),i9e.forEach(t),ntr=i(D),g0=n(D,"LI",{});var d9e=s(g0);s_e=n(d9e,"STRONG",{});var Mht=s(s_e);str=r(Mht,"bert"),Mht.forEach(t),ltr=r(d9e," \u2014 "),$X=n(d9e,"A",{href:!0});var Eht=s($X);itr=r(Eht,"TFBertModel"),Eht.forEach(t),dtr=r(d9e," (BERT model)"),d9e.forEach(t),ctr=i(D),h0=n(D,"LI",{});var c9e=s(h0);l_e=n(c9e,"STRONG",{});var Cht=s(l_e);ftr=r(Cht,"blenderbot"),Cht.forEach(t),mtr=r(c9e," \u2014 "),kX=n(c9e,"A",{href:!0});var wht=s(kX);gtr=r(wht,"TFBlenderbotModel"),wht.forEach(t),htr=r(c9e," (Blenderbot model)"),c9e.forEach(t),ptr=i(D),p0=n(D,"LI",{});var f9e=s(p0);i_e=n(f9e,"STRONG",{});var Aht=s(i_e);utr=r(Aht,"blenderbot-small"),Aht.forEach(t),_tr=r(f9e," \u2014 "),SX=n(f9e,"A",{href:!0});var yht=s(SX);btr=r(yht,"TFBlenderbotSmallModel"),yht.forEach(t),vtr=r(f9e," (BlenderbotSmall model)"),f9e.forEach(t),Ftr=i(D),u0=n(D,"LI",{});var m9e=s(u0);d_e=n(m9e,"STRONG",{});var Lht=s(d_e);Ttr=r(Lht,"camembert"),Lht.forEach(t),Mtr=r(m9e," \u2014 "),RX=n(m9e,"A",{href:!0});var xht=s(RX);Etr=r(xht,"TFCamembertModel"),xht.forEach(t),Ctr=r(m9e," (CamemBERT model)"),m9e.forEach(t),wtr=i(D),_0=n(D,"LI",{});var g9e=s(_0);c_e=n(g9e,"STRONG",{});var $ht=s(c_e);Atr=r($ht,"clip"),$ht.forEach(t),ytr=r(g9e," \u2014 "),BX=n(g9e,"A",{href:!0});var kht=s(BX);Ltr=r(kht,"TFCLIPModel"),kht.forEach(t),xtr=r(g9e," (CLIP model)"),g9e.forEach(t),$tr=i(D),b0=n(D,"LI",{});var h9e=s(b0);f_e=n(h9e,"STRONG",{});var Sht=s(f_e);ktr=r(Sht,"convbert"),Sht.forEach(t),Str=r(h9e," \u2014 "),PX=n(h9e,"A",{href:!0});var Rht=s(PX);Rtr=r(Rht,"TFConvBertModel"),Rht.forEach(t),Btr=r(h9e," (ConvBERT model)"),h9e.forEach(t),Ptr=i(D),v0=n(D,"LI",{});var p9e=s(v0);m_e=n(p9e,"STRONG",{});var Bht=s(m_e);Itr=r(Bht,"convnext"),Bht.forEach(t),qtr=r(p9e," \u2014 "),IX=n(p9e,"A",{href:!0});var Pht=s(IX);Ntr=r(Pht,"TFConvNextModel"),Pht.forEach(t),jtr=r(p9e," (ConvNext model)"),p9e.forEach(t),Dtr=i(D),F0=n(D,"LI",{});var u9e=s(F0);g_e=n(u9e,"STRONG",{});var Iht=s(g_e);Gtr=r(Iht,"ctrl"),Iht.forEach(t),Otr=r(u9e," \u2014 "),qX=n(u9e,"A",{href:!0});var qht=s(qX);Vtr=r(qht,"TFCTRLModel"),qht.forEach(t),Xtr=r(u9e," (CTRL model)"),u9e.forEach(t),ztr=i(D),T0=n(D,"LI",{});var _9e=s(T0);h_e=n(_9e,"STRONG",{});var Nht=s(h_e);Qtr=r(Nht,"data2vec-vision"),Nht.forEach(t),Wtr=r(_9e," \u2014 "),NX=n(_9e,"A",{href:!0});var jht=s(NX);Htr=r(jht,"TFData2VecVisionModel"),jht.forEach(t),Utr=r(_9e," (Data2VecVision model)"),_9e.forEach(t),Jtr=i(D),M0=n(D,"LI",{});var b9e=s(M0);p_e=n(b9e,"STRONG",{});var Dht=s(p_e);Ytr=r(Dht,"deberta"),Dht.forEach(t),Ktr=r(b9e," \u2014 "),jX=n(b9e,"A",{href:!0});var Ght=s(jX);Ztr=r(Ght,"TFDebertaModel"),Ght.forEach(t),ear=r(b9e," (DeBERTa model)"),b9e.forEach(t),oar=i(D),E0=n(D,"LI",{});var v9e=s(E0);u_e=n(v9e,"STRONG",{});var Oht=s(u_e);rar=r(Oht,"deberta-v2"),Oht.forEach(t),tar=r(v9e," \u2014 "),DX=n(v9e,"A",{href:!0});var Vht=s(DX);aar=r(Vht,"TFDebertaV2Model"),Vht.forEach(t),nar=r(v9e," (DeBERTa-v2 model)"),v9e.forEach(t),sar=i(D),C0=n(D,"LI",{});var F9e=s(C0);__e=n(F9e,"STRONG",{});var Xht=s(__e);lar=r(Xht,"distilbert"),Xht.forEach(t),iar=r(F9e," \u2014 "),GX=n(F9e,"A",{href:!0});var zht=s(GX);dar=r(zht,"TFDistilBertModel"),zht.forEach(t),car=r(F9e," (DistilBERT model)"),F9e.forEach(t),far=i(D),w0=n(D,"LI",{});var T9e=s(w0);b_e=n(T9e,"STRONG",{});var Qht=s(b_e);mar=r(Qht,"dpr"),Qht.forEach(t),gar=r(T9e," \u2014 "),OX=n(T9e,"A",{href:!0});var Wht=s(OX);har=r(Wht,"TFDPRQuestionEncoder"),Wht.forEach(t),par=r(T9e," (DPR model)"),T9e.forEach(t),uar=i(D),A0=n(D,"LI",{});var M9e=s(A0);v_e=n(M9e,"STRONG",{});var Hht=s(v_e);_ar=r(Hht,"electra"),Hht.forEach(t),bar=r(M9e," \u2014 "),VX=n(M9e,"A",{href:!0});var Uht=s(VX);Far=r(Uht,"TFElectraModel"),Uht.forEach(t),Tar=r(M9e," (ELECTRA model)"),M9e.forEach(t),Mar=i(D),y0=n(D,"LI",{});var E9e=s(y0);F_e=n(E9e,"STRONG",{});var Jht=s(F_e);Ear=r(Jht,"flaubert"),Jht.forEach(t),Car=r(E9e," \u2014 "),XX=n(E9e,"A",{href:!0});var Yht=s(XX);war=r(Yht,"TFFlaubertModel"),Yht.forEach(t),Aar=r(E9e," (FlauBERT model)"),E9e.forEach(t),yar=i(D),ks=n(D,"LI",{});var O9=s(ks);T_e=n(O9,"STRONG",{});var Kht=s(T_e);Lar=r(Kht,"funnel"),Kht.forEach(t),xar=r(O9," \u2014 "),zX=n(O9,"A",{href:!0});var Zht=s(zX);$ar=r(Zht,"TFFunnelModel"),Zht.forEach(t),kar=r(O9," or "),QX=n(O9,"A",{href:!0});var ept=s(QX);Sar=r(ept,"TFFunnelBaseModel"),ept.forEach(t),Rar=r(O9," (Funnel Transformer model)"),O9.forEach(t),Bar=i(D),L0=n(D,"LI",{});var C9e=s(L0);M_e=n(C9e,"STRONG",{});var opt=s(M_e);Par=r(opt,"gpt2"),opt.forEach(t),Iar=r(C9e," \u2014 "),WX=n(C9e,"A",{href:!0});var rpt=s(WX);qar=r(rpt,"TFGPT2Model"),rpt.forEach(t),Nar=r(C9e," (OpenAI GPT-2 model)"),C9e.forEach(t),jar=i(D),x0=n(D,"LI",{});var w9e=s(x0);E_e=n(w9e,"STRONG",{});var tpt=s(E_e);Dar=r(tpt,"gptj"),tpt.forEach(t),Gar=r(w9e," \u2014 "),HX=n(w9e,"A",{href:!0});var apt=s(HX);Oar=r(apt,"TFGPTJModel"),apt.forEach(t),Var=r(w9e," (GPT-J model)"),w9e.forEach(t),Xar=i(D),$0=n(D,"LI",{});var A9e=s($0);C_e=n(A9e,"STRONG",{});var npt=s(C_e);zar=r(npt,"hubert"),npt.forEach(t),Qar=r(A9e," \u2014 "),UX=n(A9e,"A",{href:!0});var spt=s(UX);War=r(spt,"TFHubertModel"),spt.forEach(t),Har=r(A9e," (Hubert model)"),A9e.forEach(t),Uar=i(D),k0=n(D,"LI",{});var y9e=s(k0);w_e=n(y9e,"STRONG",{});var lpt=s(w_e);Jar=r(lpt,"layoutlm"),lpt.forEach(t),Yar=r(y9e," \u2014 "),JX=n(y9e,"A",{href:!0});var ipt=s(JX);Kar=r(ipt,"TFLayoutLMModel"),ipt.forEach(t),Zar=r(y9e," (LayoutLM model)"),y9e.forEach(t),enr=i(D),S0=n(D,"LI",{});var L9e=s(S0);A_e=n(L9e,"STRONG",{});var dpt=s(A_e);onr=r(dpt,"led"),dpt.forEach(t),rnr=r(L9e," \u2014 "),YX=n(L9e,"A",{href:!0});var cpt=s(YX);tnr=r(cpt,"TFLEDModel"),cpt.forEach(t),anr=r(L9e," (LED model)"),L9e.forEach(t),nnr=i(D),R0=n(D,"LI",{});var x9e=s(R0);y_e=n(x9e,"STRONG",{});var fpt=s(y_e);snr=r(fpt,"longformer"),fpt.forEach(t),lnr=r(x9e," \u2014 "),KX=n(x9e,"A",{href:!0});var mpt=s(KX);inr=r(mpt,"TFLongformerModel"),mpt.forEach(t),dnr=r(x9e," (Longformer model)"),x9e.forEach(t),cnr=i(D),B0=n(D,"LI",{});var $9e=s(B0);L_e=n($9e,"STRONG",{});var gpt=s(L_e);fnr=r(gpt,"lxmert"),gpt.forEach(t),mnr=r($9e," \u2014 "),ZX=n($9e,"A",{href:!0});var hpt=s(ZX);gnr=r(hpt,"TFLxmertModel"),hpt.forEach(t),hnr=r($9e," (LXMERT model)"),$9e.forEach(t),pnr=i(D),P0=n(D,"LI",{});var k9e=s(P0);x_e=n(k9e,"STRONG",{});var ppt=s(x_e);unr=r(ppt,"marian"),ppt.forEach(t),_nr=r(k9e," \u2014 "),ez=n(k9e,"A",{href:!0});var upt=s(ez);bnr=r(upt,"TFMarianModel"),upt.forEach(t),vnr=r(k9e," (Marian model)"),k9e.forEach(t),Fnr=i(D),I0=n(D,"LI",{});var S9e=s(I0);$_e=n(S9e,"STRONG",{});var _pt=s($_e);Tnr=r(_pt,"mbart"),_pt.forEach(t),Mnr=r(S9e," \u2014 "),oz=n(S9e,"A",{href:!0});var bpt=s(oz);Enr=r(bpt,"TFMBartModel"),bpt.forEach(t),Cnr=r(S9e," (mBART model)"),S9e.forEach(t),wnr=i(D),q0=n(D,"LI",{});var R9e=s(q0);k_e=n(R9e,"STRONG",{});var vpt=s(k_e);Anr=r(vpt,"mobilebert"),vpt.forEach(t),ynr=r(R9e," \u2014 "),rz=n(R9e,"A",{href:!0});var Fpt=s(rz);Lnr=r(Fpt,"TFMobileBertModel"),Fpt.forEach(t),xnr=r(R9e," (MobileBERT model)"),R9e.forEach(t),$nr=i(D),N0=n(D,"LI",{});var B9e=s(N0);S_e=n(B9e,"STRONG",{});var Tpt=s(S_e);knr=r(Tpt,"mpnet"),Tpt.forEach(t),Snr=r(B9e," \u2014 "),tz=n(B9e,"A",{href:!0});var Mpt=s(tz);Rnr=r(Mpt,"TFMPNetModel"),Mpt.forEach(t),Bnr=r(B9e," (MPNet model)"),B9e.forEach(t),Pnr=i(D),j0=n(D,"LI",{});var P9e=s(j0);R_e=n(P9e,"STRONG",{});var Ept=s(R_e);Inr=r(Ept,"mt5"),Ept.forEach(t),qnr=r(P9e," \u2014 "),az=n(P9e,"A",{href:!0});var Cpt=s(az);Nnr=r(Cpt,"TFMT5Model"),Cpt.forEach(t),jnr=r(P9e," (mT5 model)"),P9e.forEach(t),Dnr=i(D),D0=n(D,"LI",{});var I9e=s(D0);B_e=n(I9e,"STRONG",{});var wpt=s(B_e);Gnr=r(wpt,"openai-gpt"),wpt.forEach(t),Onr=r(I9e," \u2014 "),nz=n(I9e,"A",{href:!0});var Apt=s(nz);Vnr=r(Apt,"TFOpenAIGPTModel"),Apt.forEach(t),Xnr=r(I9e," (OpenAI GPT model)"),I9e.forEach(t),znr=i(D),G0=n(D,"LI",{});var q9e=s(G0);P_e=n(q9e,"STRONG",{});var ypt=s(P_e);Qnr=r(ypt,"opt"),ypt.forEach(t),Wnr=r(q9e," \u2014 "),sz=n(q9e,"A",{href:!0});var Lpt=s(sz);Hnr=r(Lpt,"TFOPTModel"),Lpt.forEach(t),Unr=r(q9e," (OPT model)"),q9e.forEach(t),Jnr=i(D),O0=n(D,"LI",{});var N9e=s(O0);I_e=n(N9e,"STRONG",{});var xpt=s(I_e);Ynr=r(xpt,"pegasus"),xpt.forEach(t),Knr=r(N9e," \u2014 "),lz=n(N9e,"A",{href:!0});var $pt=s(lz);Znr=r($pt,"TFPegasusModel"),$pt.forEach(t),esr=r(N9e," (Pegasus model)"),N9e.forEach(t),osr=i(D),V0=n(D,"LI",{});var j9e=s(V0);q_e=n(j9e,"STRONG",{});var kpt=s(q_e);rsr=r(kpt,"rembert"),kpt.forEach(t),tsr=r(j9e," \u2014 "),iz=n(j9e,"A",{href:!0});var Spt=s(iz);asr=r(Spt,"TFRemBertModel"),Spt.forEach(t),nsr=r(j9e," (RemBERT model)"),j9e.forEach(t),ssr=i(D),X0=n(D,"LI",{});var D9e=s(X0);N_e=n(D9e,"STRONG",{});var Rpt=s(N_e);lsr=r(Rpt,"roberta"),Rpt.forEach(t),isr=r(D9e," \u2014 "),dz=n(D9e,"A",{href:!0});var Bpt=s(dz);dsr=r(Bpt,"TFRobertaModel"),Bpt.forEach(t),csr=r(D9e," (RoBERTa model)"),D9e.forEach(t),fsr=i(D),z0=n(D,"LI",{});var G9e=s(z0);j_e=n(G9e,"STRONG",{});var Ppt=s(j_e);msr=r(Ppt,"roformer"),Ppt.forEach(t),gsr=r(G9e," \u2014 "),cz=n(G9e,"A",{href:!0});var Ipt=s(cz);hsr=r(Ipt,"TFRoFormerModel"),Ipt.forEach(t),psr=r(G9e," (RoFormer model)"),G9e.forEach(t),usr=i(D),Q0=n(D,"LI",{});var O9e=s(Q0);D_e=n(O9e,"STRONG",{});var qpt=s(D_e);_sr=r(qpt,"speech_to_text"),qpt.forEach(t),bsr=r(O9e," \u2014 "),fz=n(O9e,"A",{href:!0});var Npt=s(fz);vsr=r(Npt,"TFSpeech2TextModel"),Npt.forEach(t),Fsr=r(O9e," (Speech2Text model)"),O9e.forEach(t),Tsr=i(D),W0=n(D,"LI",{});var V9e=s(W0);G_e=n(V9e,"STRONG",{});var jpt=s(G_e);Msr=r(jpt,"t5"),jpt.forEach(t),Esr=r(V9e," \u2014 "),mz=n(V9e,"A",{href:!0});var Dpt=s(mz);Csr=r(Dpt,"TFT5Model"),Dpt.forEach(t),wsr=r(V9e," (T5 model)"),V9e.forEach(t),Asr=i(D),H0=n(D,"LI",{});var X9e=s(H0);O_e=n(X9e,"STRONG",{});var Gpt=s(O_e);ysr=r(Gpt,"tapas"),Gpt.forEach(t),Lsr=r(X9e," \u2014 "),gz=n(X9e,"A",{href:!0});var Opt=s(gz);xsr=r(Opt,"TFTapasModel"),Opt.forEach(t),$sr=r(X9e," (TAPAS model)"),X9e.forEach(t),ksr=i(D),U0=n(D,"LI",{});var z9e=s(U0);V_e=n(z9e,"STRONG",{});var Vpt=s(V_e);Ssr=r(Vpt,"transfo-xl"),Vpt.forEach(t),Rsr=r(z9e," \u2014 "),hz=n(z9e,"A",{href:!0});var Xpt=s(hz);Bsr=r(Xpt,"TFTransfoXLModel"),Xpt.forEach(t),Psr=r(z9e," (Transformer-XL model)"),z9e.forEach(t),Isr=i(D),J0=n(D,"LI",{});var Q9e=s(J0);X_e=n(Q9e,"STRONG",{});var zpt=s(X_e);qsr=r(zpt,"vit"),zpt.forEach(t),Nsr=r(Q9e," \u2014 "),pz=n(Q9e,"A",{href:!0});var Qpt=s(pz);jsr=r(Qpt,"TFViTModel"),Qpt.forEach(t),Dsr=r(Q9e," (ViT model)"),Q9e.forEach(t),Gsr=i(D),Y0=n(D,"LI",{});var W9e=s(Y0);z_e=n(W9e,"STRONG",{});var Wpt=s(z_e);Osr=r(Wpt,"vit_mae"),Wpt.forEach(t),Vsr=r(W9e," \u2014 "),uz=n(W9e,"A",{href:!0});var Hpt=s(uz);Xsr=r(Hpt,"TFViTMAEModel"),Hpt.forEach(t),zsr=r(W9e," (ViTMAE model)"),W9e.forEach(t),Qsr=i(D),K0=n(D,"LI",{});var H9e=s(K0);Q_e=n(H9e,"STRONG",{});var Upt=s(Q_e);Wsr=r(Upt,"wav2vec2"),Upt.forEach(t),Hsr=r(H9e," \u2014 "),_z=n(H9e,"A",{href:!0});var Jpt=s(_z);Usr=r(Jpt,"TFWav2Vec2Model"),Jpt.forEach(t),Jsr=r(H9e," (Wav2Vec2 model)"),H9e.forEach(t),Ysr=i(D),Z0=n(D,"LI",{});var U9e=s(Z0);W_e=n(U9e,"STRONG",{});var Ypt=s(W_e);Ksr=r(Ypt,"xlm"),Ypt.forEach(t),Zsr=r(U9e," \u2014 "),bz=n(U9e,"A",{href:!0});var Kpt=s(bz);elr=r(Kpt,"TFXLMModel"),Kpt.forEach(t),olr=r(U9e," (XLM model)"),U9e.forEach(t),rlr=i(D),eT=n(D,"LI",{});var J9e=s(eT);H_e=n(J9e,"STRONG",{});var Zpt=s(H_e);tlr=r(Zpt,"xlm-roberta"),Zpt.forEach(t),alr=r(J9e," \u2014 "),vz=n(J9e,"A",{href:!0});var eut=s(vz);nlr=r(eut,"TFXLMRobertaModel"),eut.forEach(t),slr=r(J9e," (XLM-RoBERTa model)"),J9e.forEach(t),llr=i(D),oT=n(D,"LI",{});var Y9e=s(oT);U_e=n(Y9e,"STRONG",{});var out=s(U_e);ilr=r(out,"xlnet"),out.forEach(t),dlr=r(Y9e," \u2014 "),Fz=n(Y9e,"A",{href:!0});var rut=s(Fz);clr=r(rut,"TFXLNetModel"),rut.forEach(t),flr=r(Y9e," (XLNet model)"),Y9e.forEach(t),D.forEach(t),mlr=i(ll),T(rT.$$.fragment,ll),ll.forEach(t),sl.forEach(t),JPe=i(f),Pd=n(f,"H2",{class:!0});var eNe=s(Pd);tT=n(eNe,"A",{id:!0,class:!0,href:!0});var tut=s(tT);J_e=n(tut,"SPAN",{});var aut=s(J_e);T(_y.$$.fragment,aut),aut.forEach(t),tut.forEach(t),glr=i(eNe),Y_e=n(eNe,"SPAN",{});var nut=s(Y_e);hlr=r(nut,"TFAutoModelForPreTraining"),nut.forEach(t),eNe.forEach(t),YPe=i(f),Ko=n(f,"DIV",{class:!0});var il=s(Ko);T(by.$$.fragment,il),plr=i(il),Id=n(il,"P",{});var AK=s(Id);ulr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tz=n(AK,"A",{href:!0});var sut=s(Tz);_lr=r(sut,"from_pretrained()"),sut.forEach(t),blr=r(AK," class method or the "),Mz=n(AK,"A",{href:!0});var lut=s(Mz);vlr=r(lut,"from_config()"),lut.forEach(t),Flr=r(AK,` class
method.`),AK.forEach(t),Tlr=i(il),vy=n(il,"P",{});var oNe=s(vy);Mlr=r(oNe,"This class cannot be instantiated directly using "),K_e=n(oNe,"CODE",{});var iut=s(K_e);Elr=r(iut,"__init__()"),iut.forEach(t),Clr=r(oNe," (throws an error)."),oNe.forEach(t),wlr=i(il),Ct=n(il,"DIV",{class:!0});var R3=s(Ct);T(Fy.$$.fragment,R3),Alr=i(R3),Z_e=n(R3,"P",{});var dut=s(Z_e);ylr=r(dut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dut.forEach(t),Llr=i(R3),qd=n(R3,"P",{});var yK=s(qd);xlr=r(yK,`Note:
Loading a model from its configuration file does `),e1e=n(yK,"STRONG",{});var cut=s(e1e);$lr=r(cut,"not"),cut.forEach(t),klr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(yK,"A",{href:!0});var fut=s(Ez);Slr=r(fut,"from_pretrained()"),fut.forEach(t),Rlr=r(yK," to load the model weights."),yK.forEach(t),Blr=i(R3),T(aT.$$.fragment,R3),R3.forEach(t),Plr=i(il),wr=n(il,"DIV",{class:!0});var dl=s(wr);T(Ty.$$.fragment,dl),Ilr=i(dl),o1e=n(dl,"P",{});var mut=s(o1e);qlr=r(mut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mut.forEach(t),Nlr=i(dl),Ja=n(dl,"P",{});var B3=s(Ja);jlr=r(B3,"The model class to instantiate is selected based on the "),r1e=n(B3,"CODE",{});var gut=s(r1e);Dlr=r(gut,"model_type"),gut.forEach(t),Glr=r(B3,` property of the config object (either
passed as an argument or loaded from `),t1e=n(B3,"CODE",{});var hut=s(t1e);Olr=r(hut,"pretrained_model_name_or_path"),hut.forEach(t),Vlr=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(B3,"CODE",{});var put=s(a1e);Xlr=r(put,"pretrained_model_name_or_path"),put.forEach(t),zlr=r(B3,":"),B3.forEach(t),Qlr=i(dl),ne=n(dl,"UL",{});var le=s(ne);nT=n(le,"LI",{});var K9e=s(nT);n1e=n(K9e,"STRONG",{});var uut=s(n1e);Wlr=r(uut,"albert"),uut.forEach(t),Hlr=r(K9e," \u2014 "),Cz=n(K9e,"A",{href:!0});var _ut=s(Cz);Ulr=r(_ut,"TFAlbertForPreTraining"),_ut.forEach(t),Jlr=r(K9e," (ALBERT model)"),K9e.forEach(t),Ylr=i(le),sT=n(le,"LI",{});var Z9e=s(sT);s1e=n(Z9e,"STRONG",{});var but=s(s1e);Klr=r(but,"bart"),but.forEach(t),Zlr=r(Z9e," \u2014 "),wz=n(Z9e,"A",{href:!0});var vut=s(wz);eir=r(vut,"TFBartForConditionalGeneration"),vut.forEach(t),oir=r(Z9e," (BART model)"),Z9e.forEach(t),rir=i(le),lT=n(le,"LI",{});var e$e=s(lT);l1e=n(e$e,"STRONG",{});var Fut=s(l1e);tir=r(Fut,"bert"),Fut.forEach(t),air=r(e$e," \u2014 "),Az=n(e$e,"A",{href:!0});var Tut=s(Az);nir=r(Tut,"TFBertForPreTraining"),Tut.forEach(t),sir=r(e$e," (BERT model)"),e$e.forEach(t),lir=i(le),iT=n(le,"LI",{});var o$e=s(iT);i1e=n(o$e,"STRONG",{});var Mut=s(i1e);iir=r(Mut,"camembert"),Mut.forEach(t),dir=r(o$e," \u2014 "),yz=n(o$e,"A",{href:!0});var Eut=s(yz);cir=r(Eut,"TFCamembertForMaskedLM"),Eut.forEach(t),fir=r(o$e," (CamemBERT model)"),o$e.forEach(t),mir=i(le),dT=n(le,"LI",{});var r$e=s(dT);d1e=n(r$e,"STRONG",{});var Cut=s(d1e);gir=r(Cut,"ctrl"),Cut.forEach(t),hir=r(r$e," \u2014 "),Lz=n(r$e,"A",{href:!0});var wut=s(Lz);pir=r(wut,"TFCTRLLMHeadModel"),wut.forEach(t),uir=r(r$e," (CTRL model)"),r$e.forEach(t),_ir=i(le),cT=n(le,"LI",{});var t$e=s(cT);c1e=n(t$e,"STRONG",{});var Aut=s(c1e);bir=r(Aut,"distilbert"),Aut.forEach(t),vir=r(t$e," \u2014 "),xz=n(t$e,"A",{href:!0});var yut=s(xz);Fir=r(yut,"TFDistilBertForMaskedLM"),yut.forEach(t),Tir=r(t$e," (DistilBERT model)"),t$e.forEach(t),Mir=i(le),fT=n(le,"LI",{});var a$e=s(fT);f1e=n(a$e,"STRONG",{});var Lut=s(f1e);Eir=r(Lut,"electra"),Lut.forEach(t),Cir=r(a$e," \u2014 "),$z=n(a$e,"A",{href:!0});var xut=s($z);wir=r(xut,"TFElectraForPreTraining"),xut.forEach(t),Air=r(a$e," (ELECTRA model)"),a$e.forEach(t),yir=i(le),mT=n(le,"LI",{});var n$e=s(mT);m1e=n(n$e,"STRONG",{});var $ut=s(m1e);Lir=r($ut,"flaubert"),$ut.forEach(t),xir=r(n$e," \u2014 "),kz=n(n$e,"A",{href:!0});var kut=s(kz);$ir=r(kut,"TFFlaubertWithLMHeadModel"),kut.forEach(t),kir=r(n$e," (FlauBERT model)"),n$e.forEach(t),Sir=i(le),gT=n(le,"LI",{});var s$e=s(gT);g1e=n(s$e,"STRONG",{});var Sut=s(g1e);Rir=r(Sut,"funnel"),Sut.forEach(t),Bir=r(s$e," \u2014 "),Sz=n(s$e,"A",{href:!0});var Rut=s(Sz);Pir=r(Rut,"TFFunnelForPreTraining"),Rut.forEach(t),Iir=r(s$e," (Funnel Transformer model)"),s$e.forEach(t),qir=i(le),hT=n(le,"LI",{});var l$e=s(hT);h1e=n(l$e,"STRONG",{});var But=s(h1e);Nir=r(But,"gpt2"),But.forEach(t),jir=r(l$e," \u2014 "),Rz=n(l$e,"A",{href:!0});var Put=s(Rz);Dir=r(Put,"TFGPT2LMHeadModel"),Put.forEach(t),Gir=r(l$e," (OpenAI GPT-2 model)"),l$e.forEach(t),Oir=i(le),pT=n(le,"LI",{});var i$e=s(pT);p1e=n(i$e,"STRONG",{});var Iut=s(p1e);Vir=r(Iut,"layoutlm"),Iut.forEach(t),Xir=r(i$e," \u2014 "),Bz=n(i$e,"A",{href:!0});var qut=s(Bz);zir=r(qut,"TFLayoutLMForMaskedLM"),qut.forEach(t),Qir=r(i$e," (LayoutLM model)"),i$e.forEach(t),Wir=i(le),uT=n(le,"LI",{});var d$e=s(uT);u1e=n(d$e,"STRONG",{});var Nut=s(u1e);Hir=r(Nut,"lxmert"),Nut.forEach(t),Uir=r(d$e," \u2014 "),Pz=n(d$e,"A",{href:!0});var jut=s(Pz);Jir=r(jut,"TFLxmertForPreTraining"),jut.forEach(t),Yir=r(d$e," (LXMERT model)"),d$e.forEach(t),Kir=i(le),_T=n(le,"LI",{});var c$e=s(_T);_1e=n(c$e,"STRONG",{});var Dut=s(_1e);Zir=r(Dut,"mobilebert"),Dut.forEach(t),edr=r(c$e," \u2014 "),Iz=n(c$e,"A",{href:!0});var Gut=s(Iz);odr=r(Gut,"TFMobileBertForPreTraining"),Gut.forEach(t),rdr=r(c$e," (MobileBERT model)"),c$e.forEach(t),tdr=i(le),bT=n(le,"LI",{});var f$e=s(bT);b1e=n(f$e,"STRONG",{});var Out=s(b1e);adr=r(Out,"mpnet"),Out.forEach(t),ndr=r(f$e," \u2014 "),qz=n(f$e,"A",{href:!0});var Vut=s(qz);sdr=r(Vut,"TFMPNetForMaskedLM"),Vut.forEach(t),ldr=r(f$e," (MPNet model)"),f$e.forEach(t),idr=i(le),vT=n(le,"LI",{});var m$e=s(vT);v1e=n(m$e,"STRONG",{});var Xut=s(v1e);ddr=r(Xut,"openai-gpt"),Xut.forEach(t),cdr=r(m$e," \u2014 "),Nz=n(m$e,"A",{href:!0});var zut=s(Nz);fdr=r(zut,"TFOpenAIGPTLMHeadModel"),zut.forEach(t),mdr=r(m$e," (OpenAI GPT model)"),m$e.forEach(t),gdr=i(le),FT=n(le,"LI",{});var g$e=s(FT);F1e=n(g$e,"STRONG",{});var Qut=s(F1e);hdr=r(Qut,"roberta"),Qut.forEach(t),pdr=r(g$e," \u2014 "),jz=n(g$e,"A",{href:!0});var Wut=s(jz);udr=r(Wut,"TFRobertaForMaskedLM"),Wut.forEach(t),_dr=r(g$e," (RoBERTa model)"),g$e.forEach(t),bdr=i(le),TT=n(le,"LI",{});var h$e=s(TT);T1e=n(h$e,"STRONG",{});var Hut=s(T1e);vdr=r(Hut,"t5"),Hut.forEach(t),Fdr=r(h$e," \u2014 "),Dz=n(h$e,"A",{href:!0});var Uut=s(Dz);Tdr=r(Uut,"TFT5ForConditionalGeneration"),Uut.forEach(t),Mdr=r(h$e," (T5 model)"),h$e.forEach(t),Edr=i(le),MT=n(le,"LI",{});var p$e=s(MT);M1e=n(p$e,"STRONG",{});var Jut=s(M1e);Cdr=r(Jut,"tapas"),Jut.forEach(t),wdr=r(p$e," \u2014 "),Gz=n(p$e,"A",{href:!0});var Yut=s(Gz);Adr=r(Yut,"TFTapasForMaskedLM"),Yut.forEach(t),ydr=r(p$e," (TAPAS model)"),p$e.forEach(t),Ldr=i(le),ET=n(le,"LI",{});var u$e=s(ET);E1e=n(u$e,"STRONG",{});var Kut=s(E1e);xdr=r(Kut,"transfo-xl"),Kut.forEach(t),$dr=r(u$e," \u2014 "),Oz=n(u$e,"A",{href:!0});var Zut=s(Oz);kdr=r(Zut,"TFTransfoXLLMHeadModel"),Zut.forEach(t),Sdr=r(u$e," (Transformer-XL model)"),u$e.forEach(t),Rdr=i(le),CT=n(le,"LI",{});var _$e=s(CT);C1e=n(_$e,"STRONG",{});var e_t=s(C1e);Bdr=r(e_t,"vit_mae"),e_t.forEach(t),Pdr=r(_$e," \u2014 "),Vz=n(_$e,"A",{href:!0});var o_t=s(Vz);Idr=r(o_t,"TFViTMAEForPreTraining"),o_t.forEach(t),qdr=r(_$e," (ViTMAE model)"),_$e.forEach(t),Ndr=i(le),wT=n(le,"LI",{});var b$e=s(wT);w1e=n(b$e,"STRONG",{});var r_t=s(w1e);jdr=r(r_t,"xlm"),r_t.forEach(t),Ddr=r(b$e," \u2014 "),Xz=n(b$e,"A",{href:!0});var t_t=s(Xz);Gdr=r(t_t,"TFXLMWithLMHeadModel"),t_t.forEach(t),Odr=r(b$e," (XLM model)"),b$e.forEach(t),Vdr=i(le),AT=n(le,"LI",{});var v$e=s(AT);A1e=n(v$e,"STRONG",{});var a_t=s(A1e);Xdr=r(a_t,"xlm-roberta"),a_t.forEach(t),zdr=r(v$e," \u2014 "),zz=n(v$e,"A",{href:!0});var n_t=s(zz);Qdr=r(n_t,"TFXLMRobertaForMaskedLM"),n_t.forEach(t),Wdr=r(v$e," (XLM-RoBERTa model)"),v$e.forEach(t),Hdr=i(le),yT=n(le,"LI",{});var F$e=s(yT);y1e=n(F$e,"STRONG",{});var s_t=s(y1e);Udr=r(s_t,"xlnet"),s_t.forEach(t),Jdr=r(F$e," \u2014 "),Qz=n(F$e,"A",{href:!0});var l_t=s(Qz);Ydr=r(l_t,"TFXLNetLMHeadModel"),l_t.forEach(t),Kdr=r(F$e," (XLNet model)"),F$e.forEach(t),le.forEach(t),Zdr=i(dl),T(LT.$$.fragment,dl),dl.forEach(t),il.forEach(t),KPe=i(f),Nd=n(f,"H2",{class:!0});var rNe=s(Nd);xT=n(rNe,"A",{id:!0,class:!0,href:!0});var i_t=s(xT);L1e=n(i_t,"SPAN",{});var d_t=s(L1e);T(My.$$.fragment,d_t),d_t.forEach(t),i_t.forEach(t),ecr=i(rNe),x1e=n(rNe,"SPAN",{});var c_t=s(x1e);ocr=r(c_t,"TFAutoModelForCausalLM"),c_t.forEach(t),rNe.forEach(t),ZPe=i(f),Zo=n(f,"DIV",{class:!0});var cl=s(Zo);T(Ey.$$.fragment,cl),rcr=i(cl),jd=n(cl,"P",{});var LK=s(jd);tcr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wz=n(LK,"A",{href:!0});var f_t=s(Wz);acr=r(f_t,"from_pretrained()"),f_t.forEach(t),ncr=r(LK," class method or the "),Hz=n(LK,"A",{href:!0});var m_t=s(Hz);scr=r(m_t,"from_config()"),m_t.forEach(t),lcr=r(LK,` class
method.`),LK.forEach(t),icr=i(cl),Cy=n(cl,"P",{});var tNe=s(Cy);dcr=r(tNe,"This class cannot be instantiated directly using "),$1e=n(tNe,"CODE",{});var g_t=s($1e);ccr=r(g_t,"__init__()"),g_t.forEach(t),fcr=r(tNe," (throws an error)."),tNe.forEach(t),mcr=i(cl),wt=n(cl,"DIV",{class:!0});var P3=s(wt);T(wy.$$.fragment,P3),gcr=i(P3),k1e=n(P3,"P",{});var h_t=s(k1e);hcr=r(h_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),h_t.forEach(t),pcr=i(P3),Dd=n(P3,"P",{});var xK=s(Dd);ucr=r(xK,`Note:
Loading a model from its configuration file does `),S1e=n(xK,"STRONG",{});var p_t=s(S1e);_cr=r(p_t,"not"),p_t.forEach(t),bcr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(xK,"A",{href:!0});var u_t=s(Uz);vcr=r(u_t,"from_pretrained()"),u_t.forEach(t),Fcr=r(xK," to load the model weights."),xK.forEach(t),Tcr=i(P3),T($T.$$.fragment,P3),P3.forEach(t),Mcr=i(cl),Ar=n(cl,"DIV",{class:!0});var fl=s(Ar);T(Ay.$$.fragment,fl),Ecr=i(fl),R1e=n(fl,"P",{});var __t=s(R1e);Ccr=r(__t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),__t.forEach(t),wcr=i(fl),Ya=n(fl,"P",{});var I3=s(Ya);Acr=r(I3,"The model class to instantiate is selected based on the "),B1e=n(I3,"CODE",{});var b_t=s(B1e);ycr=r(b_t,"model_type"),b_t.forEach(t),Lcr=r(I3,` property of the config object (either
passed as an argument or loaded from `),P1e=n(I3,"CODE",{});var v_t=s(P1e);xcr=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),$cr=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(I3,"CODE",{});var F_t=s(I1e);kcr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),Scr=r(I3,":"),I3.forEach(t),Rcr=i(fl),Te=n(fl,"UL",{});var Ce=s(Te);kT=n(Ce,"LI",{});var T$e=s(kT);q1e=n(T$e,"STRONG",{});var T_t=s(q1e);Bcr=r(T_t,"bert"),T_t.forEach(t),Pcr=r(T$e," \u2014 "),Jz=n(T$e,"A",{href:!0});var M_t=s(Jz);Icr=r(M_t,"TFBertLMHeadModel"),M_t.forEach(t),qcr=r(T$e," (BERT model)"),T$e.forEach(t),Ncr=i(Ce),ST=n(Ce,"LI",{});var M$e=s(ST);N1e=n(M$e,"STRONG",{});var E_t=s(N1e);jcr=r(E_t,"camembert"),E_t.forEach(t),Dcr=r(M$e," \u2014 "),Yz=n(M$e,"A",{href:!0});var C_t=s(Yz);Gcr=r(C_t,"TFCamembertForCausalLM"),C_t.forEach(t),Ocr=r(M$e," (CamemBERT model)"),M$e.forEach(t),Vcr=i(Ce),RT=n(Ce,"LI",{});var E$e=s(RT);j1e=n(E$e,"STRONG",{});var w_t=s(j1e);Xcr=r(w_t,"ctrl"),w_t.forEach(t),zcr=r(E$e," \u2014 "),Kz=n(E$e,"A",{href:!0});var A_t=s(Kz);Qcr=r(A_t,"TFCTRLLMHeadModel"),A_t.forEach(t),Wcr=r(E$e," (CTRL model)"),E$e.forEach(t),Hcr=i(Ce),BT=n(Ce,"LI",{});var C$e=s(BT);D1e=n(C$e,"STRONG",{});var y_t=s(D1e);Ucr=r(y_t,"gpt2"),y_t.forEach(t),Jcr=r(C$e," \u2014 "),Zz=n(C$e,"A",{href:!0});var L_t=s(Zz);Ycr=r(L_t,"TFGPT2LMHeadModel"),L_t.forEach(t),Kcr=r(C$e," (OpenAI GPT-2 model)"),C$e.forEach(t),Zcr=i(Ce),PT=n(Ce,"LI",{});var w$e=s(PT);G1e=n(w$e,"STRONG",{});var x_t=s(G1e);efr=r(x_t,"gptj"),x_t.forEach(t),ofr=r(w$e," \u2014 "),eQ=n(w$e,"A",{href:!0});var $_t=s(eQ);rfr=r($_t,"TFGPTJForCausalLM"),$_t.forEach(t),tfr=r(w$e," (GPT-J model)"),w$e.forEach(t),afr=i(Ce),IT=n(Ce,"LI",{});var A$e=s(IT);O1e=n(A$e,"STRONG",{});var k_t=s(O1e);nfr=r(k_t,"openai-gpt"),k_t.forEach(t),sfr=r(A$e," \u2014 "),oQ=n(A$e,"A",{href:!0});var S_t=s(oQ);lfr=r(S_t,"TFOpenAIGPTLMHeadModel"),S_t.forEach(t),ifr=r(A$e," (OpenAI GPT model)"),A$e.forEach(t),dfr=i(Ce),qT=n(Ce,"LI",{});var y$e=s(qT);V1e=n(y$e,"STRONG",{});var R_t=s(V1e);cfr=r(R_t,"rembert"),R_t.forEach(t),ffr=r(y$e," \u2014 "),rQ=n(y$e,"A",{href:!0});var B_t=s(rQ);mfr=r(B_t,"TFRemBertForCausalLM"),B_t.forEach(t),gfr=r(y$e," (RemBERT model)"),y$e.forEach(t),hfr=i(Ce),NT=n(Ce,"LI",{});var L$e=s(NT);X1e=n(L$e,"STRONG",{});var P_t=s(X1e);pfr=r(P_t,"roberta"),P_t.forEach(t),ufr=r(L$e," \u2014 "),tQ=n(L$e,"A",{href:!0});var I_t=s(tQ);_fr=r(I_t,"TFRobertaForCausalLM"),I_t.forEach(t),bfr=r(L$e," (RoBERTa model)"),L$e.forEach(t),vfr=i(Ce),jT=n(Ce,"LI",{});var x$e=s(jT);z1e=n(x$e,"STRONG",{});var q_t=s(z1e);Ffr=r(q_t,"roformer"),q_t.forEach(t),Tfr=r(x$e," \u2014 "),aQ=n(x$e,"A",{href:!0});var N_t=s(aQ);Mfr=r(N_t,"TFRoFormerForCausalLM"),N_t.forEach(t),Efr=r(x$e," (RoFormer model)"),x$e.forEach(t),Cfr=i(Ce),DT=n(Ce,"LI",{});var $$e=s(DT);Q1e=n($$e,"STRONG",{});var j_t=s(Q1e);wfr=r(j_t,"transfo-xl"),j_t.forEach(t),Afr=r($$e," \u2014 "),nQ=n($$e,"A",{href:!0});var D_t=s(nQ);yfr=r(D_t,"TFTransfoXLLMHeadModel"),D_t.forEach(t),Lfr=r($$e," (Transformer-XL model)"),$$e.forEach(t),xfr=i(Ce),GT=n(Ce,"LI",{});var k$e=s(GT);W1e=n(k$e,"STRONG",{});var G_t=s(W1e);$fr=r(G_t,"xlm"),G_t.forEach(t),kfr=r(k$e," \u2014 "),sQ=n(k$e,"A",{href:!0});var O_t=s(sQ);Sfr=r(O_t,"TFXLMWithLMHeadModel"),O_t.forEach(t),Rfr=r(k$e," (XLM model)"),k$e.forEach(t),Bfr=i(Ce),OT=n(Ce,"LI",{});var S$e=s(OT);H1e=n(S$e,"STRONG",{});var V_t=s(H1e);Pfr=r(V_t,"xlnet"),V_t.forEach(t),Ifr=r(S$e," \u2014 "),lQ=n(S$e,"A",{href:!0});var X_t=s(lQ);qfr=r(X_t,"TFXLNetLMHeadModel"),X_t.forEach(t),Nfr=r(S$e," (XLNet model)"),S$e.forEach(t),Ce.forEach(t),jfr=i(fl),T(VT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),eIe=i(f),Gd=n(f,"H2",{class:!0});var aNe=s(Gd);XT=n(aNe,"A",{id:!0,class:!0,href:!0});var z_t=s(XT);U1e=n(z_t,"SPAN",{});var Q_t=s(U1e);T(yy.$$.fragment,Q_t),Q_t.forEach(t),z_t.forEach(t),Dfr=i(aNe),J1e=n(aNe,"SPAN",{});var W_t=s(J1e);Gfr=r(W_t,"TFAutoModelForImageClassification"),W_t.forEach(t),aNe.forEach(t),oIe=i(f),er=n(f,"DIV",{class:!0});var ml=s(er);T(Ly.$$.fragment,ml),Ofr=i(ml),Od=n(ml,"P",{});var $K=s(Od);Vfr=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iQ=n($K,"A",{href:!0});var H_t=s(iQ);Xfr=r(H_t,"from_pretrained()"),H_t.forEach(t),zfr=r($K," class method or the "),dQ=n($K,"A",{href:!0});var U_t=s(dQ);Qfr=r(U_t,"from_config()"),U_t.forEach(t),Wfr=r($K,` class
method.`),$K.forEach(t),Hfr=i(ml),xy=n(ml,"P",{});var nNe=s(xy);Ufr=r(nNe,"This class cannot be instantiated directly using "),Y1e=n(nNe,"CODE",{});var J_t=s(Y1e);Jfr=r(J_t,"__init__()"),J_t.forEach(t),Yfr=r(nNe," (throws an error)."),nNe.forEach(t),Kfr=i(ml),At=n(ml,"DIV",{class:!0});var q3=s(At);T($y.$$.fragment,q3),Zfr=i(q3),K1e=n(q3,"P",{});var Y_t=s(K1e);emr=r(Y_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Y_t.forEach(t),omr=i(q3),Vd=n(q3,"P",{});var kK=s(Vd);rmr=r(kK,`Note:
Loading a model from its configuration file does `),Z1e=n(kK,"STRONG",{});var K_t=s(Z1e);tmr=r(K_t,"not"),K_t.forEach(t),amr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(kK,"A",{href:!0});var Z_t=s(cQ);nmr=r(Z_t,"from_pretrained()"),Z_t.forEach(t),smr=r(kK," to load the model weights."),kK.forEach(t),lmr=i(q3),T(zT.$$.fragment,q3),q3.forEach(t),imr=i(ml),yr=n(ml,"DIV",{class:!0});var gl=s(yr);T(ky.$$.fragment,gl),dmr=i(gl),e8e=n(gl,"P",{});var e1t=s(e8e);cmr=r(e1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e1t.forEach(t),fmr=i(gl),Ka=n(gl,"P",{});var N3=s(Ka);mmr=r(N3,"The model class to instantiate is selected based on the "),o8e=n(N3,"CODE",{});var o1t=s(o8e);gmr=r(o1t,"model_type"),o1t.forEach(t),hmr=r(N3,` property of the config object (either
passed as an argument or loaded from `),r8e=n(N3,"CODE",{});var r1t=s(r8e);pmr=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),umr=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=n(N3,"CODE",{});var t1t=s(t8e);_mr=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),bmr=r(N3,":"),N3.forEach(t),vmr=i(gl),Xd=n(gl,"UL",{});var SK=s(Xd);QT=n(SK,"LI",{});var R$e=s(QT);a8e=n(R$e,"STRONG",{});var a1t=s(a8e);Fmr=r(a1t,"convnext"),a1t.forEach(t),Tmr=r(R$e," \u2014 "),fQ=n(R$e,"A",{href:!0});var n1t=s(fQ);Mmr=r(n1t,"TFConvNextForImageClassification"),n1t.forEach(t),Emr=r(R$e," (ConvNext model)"),R$e.forEach(t),Cmr=i(SK),WT=n(SK,"LI",{});var B$e=s(WT);n8e=n(B$e,"STRONG",{});var s1t=s(n8e);wmr=r(s1t,"data2vec-vision"),s1t.forEach(t),Amr=r(B$e," \u2014 "),mQ=n(B$e,"A",{href:!0});var l1t=s(mQ);ymr=r(l1t,"TFData2VecVisionForImageClassification"),l1t.forEach(t),Lmr=r(B$e," (Data2VecVision model)"),B$e.forEach(t),xmr=i(SK),HT=n(SK,"LI",{});var P$e=s(HT);s8e=n(P$e,"STRONG",{});var i1t=s(s8e);$mr=r(i1t,"vit"),i1t.forEach(t),kmr=r(P$e," \u2014 "),gQ=n(P$e,"A",{href:!0});var d1t=s(gQ);Smr=r(d1t,"TFViTForImageClassification"),d1t.forEach(t),Rmr=r(P$e," (ViT model)"),P$e.forEach(t),SK.forEach(t),Bmr=i(gl),T(UT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),rIe=i(f),zd=n(f,"H2",{class:!0});var sNe=s(zd);JT=n(sNe,"A",{id:!0,class:!0,href:!0});var c1t=s(JT);l8e=n(c1t,"SPAN",{});var f1t=s(l8e);T(Sy.$$.fragment,f1t),f1t.forEach(t),c1t.forEach(t),Pmr=i(sNe),i8e=n(sNe,"SPAN",{});var m1t=s(i8e);Imr=r(m1t,"TFAutoModelForMaskedLM"),m1t.forEach(t),sNe.forEach(t),tIe=i(f),or=n(f,"DIV",{class:!0});var hl=s(or);T(Ry.$$.fragment,hl),qmr=i(hl),Qd=n(hl,"P",{});var RK=s(Qd);Nmr=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hQ=n(RK,"A",{href:!0});var g1t=s(hQ);jmr=r(g1t,"from_pretrained()"),g1t.forEach(t),Dmr=r(RK," class method or the "),pQ=n(RK,"A",{href:!0});var h1t=s(pQ);Gmr=r(h1t,"from_config()"),h1t.forEach(t),Omr=r(RK,` class
method.`),RK.forEach(t),Vmr=i(hl),By=n(hl,"P",{});var lNe=s(By);Xmr=r(lNe,"This class cannot be instantiated directly using "),d8e=n(lNe,"CODE",{});var p1t=s(d8e);zmr=r(p1t,"__init__()"),p1t.forEach(t),Qmr=r(lNe," (throws an error)."),lNe.forEach(t),Wmr=i(hl),yt=n(hl,"DIV",{class:!0});var j3=s(yt);T(Py.$$.fragment,j3),Hmr=i(j3),c8e=n(j3,"P",{});var u1t=s(c8e);Umr=r(u1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u1t.forEach(t),Jmr=i(j3),Wd=n(j3,"P",{});var BK=s(Wd);Ymr=r(BK,`Note:
Loading a model from its configuration file does `),f8e=n(BK,"STRONG",{});var _1t=s(f8e);Kmr=r(_1t,"not"),_1t.forEach(t),Zmr=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(BK,"A",{href:!0});var b1t=s(uQ);egr=r(b1t,"from_pretrained()"),b1t.forEach(t),ogr=r(BK," to load the model weights."),BK.forEach(t),rgr=i(j3),T(YT.$$.fragment,j3),j3.forEach(t),tgr=i(hl),Lr=n(hl,"DIV",{class:!0});var pl=s(Lr);T(Iy.$$.fragment,pl),agr=i(pl),m8e=n(pl,"P",{});var v1t=s(m8e);ngr=r(v1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v1t.forEach(t),sgr=i(pl),Za=n(pl,"P",{});var D3=s(Za);lgr=r(D3,"The model class to instantiate is selected based on the "),g8e=n(D3,"CODE",{});var F1t=s(g8e);igr=r(F1t,"model_type"),F1t.forEach(t),dgr=r(D3,` property of the config object (either
passed as an argument or loaded from `),h8e=n(D3,"CODE",{});var T1t=s(h8e);cgr=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),fgr=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=n(D3,"CODE",{});var M1t=s(p8e);mgr=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),ggr=r(D3,":"),D3.forEach(t),hgr=i(pl),ie=n(pl,"UL",{});var fe=s(ie);KT=n(fe,"LI",{});var I$e=s(KT);u8e=n(I$e,"STRONG",{});var E1t=s(u8e);pgr=r(E1t,"albert"),E1t.forEach(t),ugr=r(I$e," \u2014 "),_Q=n(I$e,"A",{href:!0});var C1t=s(_Q);_gr=r(C1t,"TFAlbertForMaskedLM"),C1t.forEach(t),bgr=r(I$e," (ALBERT model)"),I$e.forEach(t),vgr=i(fe),ZT=n(fe,"LI",{});var q$e=s(ZT);_8e=n(q$e,"STRONG",{});var w1t=s(_8e);Fgr=r(w1t,"bert"),w1t.forEach(t),Tgr=r(q$e," \u2014 "),bQ=n(q$e,"A",{href:!0});var A1t=s(bQ);Mgr=r(A1t,"TFBertForMaskedLM"),A1t.forEach(t),Egr=r(q$e," (BERT model)"),q$e.forEach(t),Cgr=i(fe),e7=n(fe,"LI",{});var N$e=s(e7);b8e=n(N$e,"STRONG",{});var y1t=s(b8e);wgr=r(y1t,"camembert"),y1t.forEach(t),Agr=r(N$e," \u2014 "),vQ=n(N$e,"A",{href:!0});var L1t=s(vQ);ygr=r(L1t,"TFCamembertForMaskedLM"),L1t.forEach(t),Lgr=r(N$e," (CamemBERT model)"),N$e.forEach(t),xgr=i(fe),o7=n(fe,"LI",{});var j$e=s(o7);v8e=n(j$e,"STRONG",{});var x1t=s(v8e);$gr=r(x1t,"convbert"),x1t.forEach(t),kgr=r(j$e," \u2014 "),FQ=n(j$e,"A",{href:!0});var $1t=s(FQ);Sgr=r($1t,"TFConvBertForMaskedLM"),$1t.forEach(t),Rgr=r(j$e," (ConvBERT model)"),j$e.forEach(t),Bgr=i(fe),r7=n(fe,"LI",{});var D$e=s(r7);F8e=n(D$e,"STRONG",{});var k1t=s(F8e);Pgr=r(k1t,"deberta"),k1t.forEach(t),Igr=r(D$e," \u2014 "),TQ=n(D$e,"A",{href:!0});var S1t=s(TQ);qgr=r(S1t,"TFDebertaForMaskedLM"),S1t.forEach(t),Ngr=r(D$e," (DeBERTa model)"),D$e.forEach(t),jgr=i(fe),t7=n(fe,"LI",{});var G$e=s(t7);T8e=n(G$e,"STRONG",{});var R1t=s(T8e);Dgr=r(R1t,"deberta-v2"),R1t.forEach(t),Ggr=r(G$e," \u2014 "),MQ=n(G$e,"A",{href:!0});var B1t=s(MQ);Ogr=r(B1t,"TFDebertaV2ForMaskedLM"),B1t.forEach(t),Vgr=r(G$e," (DeBERTa-v2 model)"),G$e.forEach(t),Xgr=i(fe),a7=n(fe,"LI",{});var O$e=s(a7);M8e=n(O$e,"STRONG",{});var P1t=s(M8e);zgr=r(P1t,"distilbert"),P1t.forEach(t),Qgr=r(O$e," \u2014 "),EQ=n(O$e,"A",{href:!0});var I1t=s(EQ);Wgr=r(I1t,"TFDistilBertForMaskedLM"),I1t.forEach(t),Hgr=r(O$e," (DistilBERT model)"),O$e.forEach(t),Ugr=i(fe),n7=n(fe,"LI",{});var V$e=s(n7);E8e=n(V$e,"STRONG",{});var q1t=s(E8e);Jgr=r(q1t,"electra"),q1t.forEach(t),Ygr=r(V$e," \u2014 "),CQ=n(V$e,"A",{href:!0});var N1t=s(CQ);Kgr=r(N1t,"TFElectraForMaskedLM"),N1t.forEach(t),Zgr=r(V$e," (ELECTRA model)"),V$e.forEach(t),ehr=i(fe),s7=n(fe,"LI",{});var X$e=s(s7);C8e=n(X$e,"STRONG",{});var j1t=s(C8e);ohr=r(j1t,"flaubert"),j1t.forEach(t),rhr=r(X$e," \u2014 "),wQ=n(X$e,"A",{href:!0});var D1t=s(wQ);thr=r(D1t,"TFFlaubertWithLMHeadModel"),D1t.forEach(t),ahr=r(X$e," (FlauBERT model)"),X$e.forEach(t),nhr=i(fe),l7=n(fe,"LI",{});var z$e=s(l7);w8e=n(z$e,"STRONG",{});var G1t=s(w8e);shr=r(G1t,"funnel"),G1t.forEach(t),lhr=r(z$e," \u2014 "),AQ=n(z$e,"A",{href:!0});var O1t=s(AQ);ihr=r(O1t,"TFFunnelForMaskedLM"),O1t.forEach(t),dhr=r(z$e," (Funnel Transformer model)"),z$e.forEach(t),chr=i(fe),i7=n(fe,"LI",{});var Q$e=s(i7);A8e=n(Q$e,"STRONG",{});var V1t=s(A8e);fhr=r(V1t,"layoutlm"),V1t.forEach(t),mhr=r(Q$e," \u2014 "),yQ=n(Q$e,"A",{href:!0});var X1t=s(yQ);ghr=r(X1t,"TFLayoutLMForMaskedLM"),X1t.forEach(t),hhr=r(Q$e," (LayoutLM model)"),Q$e.forEach(t),phr=i(fe),d7=n(fe,"LI",{});var W$e=s(d7);y8e=n(W$e,"STRONG",{});var z1t=s(y8e);uhr=r(z1t,"longformer"),z1t.forEach(t),_hr=r(W$e," \u2014 "),LQ=n(W$e,"A",{href:!0});var Q1t=s(LQ);bhr=r(Q1t,"TFLongformerForMaskedLM"),Q1t.forEach(t),vhr=r(W$e," (Longformer model)"),W$e.forEach(t),Fhr=i(fe),c7=n(fe,"LI",{});var H$e=s(c7);L8e=n(H$e,"STRONG",{});var W1t=s(L8e);Thr=r(W1t,"mobilebert"),W1t.forEach(t),Mhr=r(H$e," \u2014 "),xQ=n(H$e,"A",{href:!0});var H1t=s(xQ);Ehr=r(H1t,"TFMobileBertForMaskedLM"),H1t.forEach(t),Chr=r(H$e," (MobileBERT model)"),H$e.forEach(t),whr=i(fe),f7=n(fe,"LI",{});var U$e=s(f7);x8e=n(U$e,"STRONG",{});var U1t=s(x8e);Ahr=r(U1t,"mpnet"),U1t.forEach(t),yhr=r(U$e," \u2014 "),$Q=n(U$e,"A",{href:!0});var J1t=s($Q);Lhr=r(J1t,"TFMPNetForMaskedLM"),J1t.forEach(t),xhr=r(U$e," (MPNet model)"),U$e.forEach(t),$hr=i(fe),m7=n(fe,"LI",{});var J$e=s(m7);$8e=n(J$e,"STRONG",{});var Y1t=s($8e);khr=r(Y1t,"rembert"),Y1t.forEach(t),Shr=r(J$e," \u2014 "),kQ=n(J$e,"A",{href:!0});var K1t=s(kQ);Rhr=r(K1t,"TFRemBertForMaskedLM"),K1t.forEach(t),Bhr=r(J$e," (RemBERT model)"),J$e.forEach(t),Phr=i(fe),g7=n(fe,"LI",{});var Y$e=s(g7);k8e=n(Y$e,"STRONG",{});var Z1t=s(k8e);Ihr=r(Z1t,"roberta"),Z1t.forEach(t),qhr=r(Y$e," \u2014 "),SQ=n(Y$e,"A",{href:!0});var e8t=s(SQ);Nhr=r(e8t,"TFRobertaForMaskedLM"),e8t.forEach(t),jhr=r(Y$e," (RoBERTa model)"),Y$e.forEach(t),Dhr=i(fe),h7=n(fe,"LI",{});var K$e=s(h7);S8e=n(K$e,"STRONG",{});var o8t=s(S8e);Ghr=r(o8t,"roformer"),o8t.forEach(t),Ohr=r(K$e," \u2014 "),RQ=n(K$e,"A",{href:!0});var r8t=s(RQ);Vhr=r(r8t,"TFRoFormerForMaskedLM"),r8t.forEach(t),Xhr=r(K$e," (RoFormer model)"),K$e.forEach(t),zhr=i(fe),p7=n(fe,"LI",{});var Z$e=s(p7);R8e=n(Z$e,"STRONG",{});var t8t=s(R8e);Qhr=r(t8t,"tapas"),t8t.forEach(t),Whr=r(Z$e," \u2014 "),BQ=n(Z$e,"A",{href:!0});var a8t=s(BQ);Hhr=r(a8t,"TFTapasForMaskedLM"),a8t.forEach(t),Uhr=r(Z$e," (TAPAS model)"),Z$e.forEach(t),Jhr=i(fe),u7=n(fe,"LI",{});var eke=s(u7);B8e=n(eke,"STRONG",{});var n8t=s(B8e);Yhr=r(n8t,"xlm"),n8t.forEach(t),Khr=r(eke," \u2014 "),PQ=n(eke,"A",{href:!0});var s8t=s(PQ);Zhr=r(s8t,"TFXLMWithLMHeadModel"),s8t.forEach(t),epr=r(eke," (XLM model)"),eke.forEach(t),opr=i(fe),_7=n(fe,"LI",{});var oke=s(_7);P8e=n(oke,"STRONG",{});var l8t=s(P8e);rpr=r(l8t,"xlm-roberta"),l8t.forEach(t),tpr=r(oke," \u2014 "),IQ=n(oke,"A",{href:!0});var i8t=s(IQ);apr=r(i8t,"TFXLMRobertaForMaskedLM"),i8t.forEach(t),npr=r(oke," (XLM-RoBERTa model)"),oke.forEach(t),fe.forEach(t),spr=i(pl),T(b7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),aIe=i(f),Hd=n(f,"H2",{class:!0});var iNe=s(Hd);v7=n(iNe,"A",{id:!0,class:!0,href:!0});var d8t=s(v7);I8e=n(d8t,"SPAN",{});var c8t=s(I8e);T(qy.$$.fragment,c8t),c8t.forEach(t),d8t.forEach(t),lpr=i(iNe),q8e=n(iNe,"SPAN",{});var f8t=s(q8e);ipr=r(f8t,"TFAutoModelForSeq2SeqLM"),f8t.forEach(t),iNe.forEach(t),nIe=i(f),rr=n(f,"DIV",{class:!0});var ul=s(rr);T(Ny.$$.fragment,ul),dpr=i(ul),Ud=n(ul,"P",{});var PK=s(Ud);cpr=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qQ=n(PK,"A",{href:!0});var m8t=s(qQ);fpr=r(m8t,"from_pretrained()"),m8t.forEach(t),mpr=r(PK," class method or the "),NQ=n(PK,"A",{href:!0});var g8t=s(NQ);gpr=r(g8t,"from_config()"),g8t.forEach(t),hpr=r(PK,` class
method.`),PK.forEach(t),ppr=i(ul),jy=n(ul,"P",{});var dNe=s(jy);upr=r(dNe,"This class cannot be instantiated directly using "),N8e=n(dNe,"CODE",{});var h8t=s(N8e);_pr=r(h8t,"__init__()"),h8t.forEach(t),bpr=r(dNe," (throws an error)."),dNe.forEach(t),vpr=i(ul),Lt=n(ul,"DIV",{class:!0});var G3=s(Lt);T(Dy.$$.fragment,G3),Fpr=i(G3),j8e=n(G3,"P",{});var p8t=s(j8e);Tpr=r(p8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p8t.forEach(t),Mpr=i(G3),Jd=n(G3,"P",{});var IK=s(Jd);Epr=r(IK,`Note:
Loading a model from its configuration file does `),D8e=n(IK,"STRONG",{});var u8t=s(D8e);Cpr=r(u8t,"not"),u8t.forEach(t),wpr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(IK,"A",{href:!0});var _8t=s(jQ);Apr=r(_8t,"from_pretrained()"),_8t.forEach(t),ypr=r(IK," to load the model weights."),IK.forEach(t),Lpr=i(G3),T(F7.$$.fragment,G3),G3.forEach(t),xpr=i(ul),xr=n(ul,"DIV",{class:!0});var _l=s(xr);T(Gy.$$.fragment,_l),$pr=i(_l),G8e=n(_l,"P",{});var b8t=s(G8e);kpr=r(b8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b8t.forEach(t),Spr=i(_l),en=n(_l,"P",{});var O3=s(en);Rpr=r(O3,"The model class to instantiate is selected based on the "),O8e=n(O3,"CODE",{});var v8t=s(O8e);Bpr=r(v8t,"model_type"),v8t.forEach(t),Ppr=r(O3,` property of the config object (either
passed as an argument or loaded from `),V8e=n(O3,"CODE",{});var F8t=s(V8e);Ipr=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),qpr=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=n(O3,"CODE",{});var T8t=s(X8e);Npr=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),jpr=r(O3,":"),O3.forEach(t),Dpr=i(_l),ye=n(_l,"UL",{});var Re=s(ye);T7=n(Re,"LI",{});var rke=s(T7);z8e=n(rke,"STRONG",{});var M8t=s(z8e);Gpr=r(M8t,"bart"),M8t.forEach(t),Opr=r(rke," \u2014 "),DQ=n(rke,"A",{href:!0});var E8t=s(DQ);Vpr=r(E8t,"TFBartForConditionalGeneration"),E8t.forEach(t),Xpr=r(rke," (BART model)"),rke.forEach(t),zpr=i(Re),M7=n(Re,"LI",{});var tke=s(M7);Q8e=n(tke,"STRONG",{});var C8t=s(Q8e);Qpr=r(C8t,"blenderbot"),C8t.forEach(t),Wpr=r(tke," \u2014 "),GQ=n(tke,"A",{href:!0});var w8t=s(GQ);Hpr=r(w8t,"TFBlenderbotForConditionalGeneration"),w8t.forEach(t),Upr=r(tke," (Blenderbot model)"),tke.forEach(t),Jpr=i(Re),E7=n(Re,"LI",{});var ake=s(E7);W8e=n(ake,"STRONG",{});var A8t=s(W8e);Ypr=r(A8t,"blenderbot-small"),A8t.forEach(t),Kpr=r(ake," \u2014 "),OQ=n(ake,"A",{href:!0});var y8t=s(OQ);Zpr=r(y8t,"TFBlenderbotSmallForConditionalGeneration"),y8t.forEach(t),eur=r(ake," (BlenderbotSmall model)"),ake.forEach(t),our=i(Re),C7=n(Re,"LI",{});var nke=s(C7);H8e=n(nke,"STRONG",{});var L8t=s(H8e);rur=r(L8t,"encoder-decoder"),L8t.forEach(t),tur=r(nke," \u2014 "),VQ=n(nke,"A",{href:!0});var x8t=s(VQ);aur=r(x8t,"TFEncoderDecoderModel"),x8t.forEach(t),nur=r(nke," (Encoder decoder model)"),nke.forEach(t),sur=i(Re),w7=n(Re,"LI",{});var ske=s(w7);U8e=n(ske,"STRONG",{});var $8t=s(U8e);lur=r($8t,"led"),$8t.forEach(t),iur=r(ske," \u2014 "),XQ=n(ske,"A",{href:!0});var k8t=s(XQ);dur=r(k8t,"TFLEDForConditionalGeneration"),k8t.forEach(t),cur=r(ske," (LED model)"),ske.forEach(t),fur=i(Re),A7=n(Re,"LI",{});var lke=s(A7);J8e=n(lke,"STRONG",{});var S8t=s(J8e);mur=r(S8t,"marian"),S8t.forEach(t),gur=r(lke," \u2014 "),zQ=n(lke,"A",{href:!0});var R8t=s(zQ);hur=r(R8t,"TFMarianMTModel"),R8t.forEach(t),pur=r(lke," (Marian model)"),lke.forEach(t),uur=i(Re),y7=n(Re,"LI",{});var ike=s(y7);Y8e=n(ike,"STRONG",{});var B8t=s(Y8e);_ur=r(B8t,"mbart"),B8t.forEach(t),bur=r(ike," \u2014 "),QQ=n(ike,"A",{href:!0});var P8t=s(QQ);vur=r(P8t,"TFMBartForConditionalGeneration"),P8t.forEach(t),Fur=r(ike," (mBART model)"),ike.forEach(t),Tur=i(Re),L7=n(Re,"LI",{});var dke=s(L7);K8e=n(dke,"STRONG",{});var I8t=s(K8e);Mur=r(I8t,"mt5"),I8t.forEach(t),Eur=r(dke," \u2014 "),WQ=n(dke,"A",{href:!0});var q8t=s(WQ);Cur=r(q8t,"TFMT5ForConditionalGeneration"),q8t.forEach(t),wur=r(dke," (mT5 model)"),dke.forEach(t),Aur=i(Re),x7=n(Re,"LI",{});var cke=s(x7);Z8e=n(cke,"STRONG",{});var N8t=s(Z8e);yur=r(N8t,"pegasus"),N8t.forEach(t),Lur=r(cke," \u2014 "),HQ=n(cke,"A",{href:!0});var j8t=s(HQ);xur=r(j8t,"TFPegasusForConditionalGeneration"),j8t.forEach(t),$ur=r(cke," (Pegasus model)"),cke.forEach(t),kur=i(Re),$7=n(Re,"LI",{});var fke=s($7);ebe=n(fke,"STRONG",{});var D8t=s(ebe);Sur=r(D8t,"t5"),D8t.forEach(t),Rur=r(fke," \u2014 "),UQ=n(fke,"A",{href:!0});var G8t=s(UQ);Bur=r(G8t,"TFT5ForConditionalGeneration"),G8t.forEach(t),Pur=r(fke," (T5 model)"),fke.forEach(t),Re.forEach(t),Iur=i(_l),T(k7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),sIe=i(f),Yd=n(f,"H2",{class:!0});var cNe=s(Yd);S7=n(cNe,"A",{id:!0,class:!0,href:!0});var O8t=s(S7);obe=n(O8t,"SPAN",{});var V8t=s(obe);T(Oy.$$.fragment,V8t),V8t.forEach(t),O8t.forEach(t),qur=i(cNe),rbe=n(cNe,"SPAN",{});var X8t=s(rbe);Nur=r(X8t,"TFAutoModelForSequenceClassification"),X8t.forEach(t),cNe.forEach(t),lIe=i(f),tr=n(f,"DIV",{class:!0});var bl=s(tr);T(Vy.$$.fragment,bl),jur=i(bl),Kd=n(bl,"P",{});var qK=s(Kd);Dur=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JQ=n(qK,"A",{href:!0});var z8t=s(JQ);Gur=r(z8t,"from_pretrained()"),z8t.forEach(t),Our=r(qK," class method or the "),YQ=n(qK,"A",{href:!0});var Q8t=s(YQ);Vur=r(Q8t,"from_config()"),Q8t.forEach(t),Xur=r(qK,` class
method.`),qK.forEach(t),zur=i(bl),Xy=n(bl,"P",{});var fNe=s(Xy);Qur=r(fNe,"This class cannot be instantiated directly using "),tbe=n(fNe,"CODE",{});var W8t=s(tbe);Wur=r(W8t,"__init__()"),W8t.forEach(t),Hur=r(fNe," (throws an error)."),fNe.forEach(t),Uur=i(bl),xt=n(bl,"DIV",{class:!0});var V3=s(xt);T(zy.$$.fragment,V3),Jur=i(V3),abe=n(V3,"P",{});var H8t=s(abe);Yur=r(H8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),H8t.forEach(t),Kur=i(V3),Zd=n(V3,"P",{});var NK=s(Zd);Zur=r(NK,`Note:
Loading a model from its configuration file does `),nbe=n(NK,"STRONG",{});var U8t=s(nbe);e_r=r(U8t,"not"),U8t.forEach(t),o_r=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(NK,"A",{href:!0});var J8t=s(KQ);r_r=r(J8t,"from_pretrained()"),J8t.forEach(t),t_r=r(NK," to load the model weights."),NK.forEach(t),a_r=i(V3),T(R7.$$.fragment,V3),V3.forEach(t),n_r=i(bl),$r=n(bl,"DIV",{class:!0});var vl=s($r);T(Qy.$$.fragment,vl),s_r=i(vl),sbe=n(vl,"P",{});var Y8t=s(sbe);l_r=r(Y8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Y8t.forEach(t),i_r=i(vl),on=n(vl,"P",{});var X3=s(on);d_r=r(X3,"The model class to instantiate is selected based on the "),lbe=n(X3,"CODE",{});var K8t=s(lbe);c_r=r(K8t,"model_type"),K8t.forEach(t),f_r=r(X3,` property of the config object (either
passed as an argument or loaded from `),ibe=n(X3,"CODE",{});var Z8t=s(ibe);m_r=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),g_r=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(X3,"CODE",{});var ebt=s(dbe);h_r=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),p_r=r(X3,":"),X3.forEach(t),u_r=i(vl),Z=n(vl,"UL",{});var re=s(Z);B7=n(re,"LI",{});var mke=s(B7);cbe=n(mke,"STRONG",{});var obt=s(cbe);__r=r(obt,"albert"),obt.forEach(t),b_r=r(mke," \u2014 "),ZQ=n(mke,"A",{href:!0});var rbt=s(ZQ);v_r=r(rbt,"TFAlbertForSequenceClassification"),rbt.forEach(t),F_r=r(mke," (ALBERT model)"),mke.forEach(t),T_r=i(re),P7=n(re,"LI",{});var gke=s(P7);fbe=n(gke,"STRONG",{});var tbt=s(fbe);M_r=r(tbt,"bert"),tbt.forEach(t),E_r=r(gke," \u2014 "),eW=n(gke,"A",{href:!0});var abt=s(eW);C_r=r(abt,"TFBertForSequenceClassification"),abt.forEach(t),w_r=r(gke," (BERT model)"),gke.forEach(t),A_r=i(re),I7=n(re,"LI",{});var hke=s(I7);mbe=n(hke,"STRONG",{});var nbt=s(mbe);y_r=r(nbt,"camembert"),nbt.forEach(t),L_r=r(hke," \u2014 "),oW=n(hke,"A",{href:!0});var sbt=s(oW);x_r=r(sbt,"TFCamembertForSequenceClassification"),sbt.forEach(t),$_r=r(hke," (CamemBERT model)"),hke.forEach(t),k_r=i(re),q7=n(re,"LI",{});var pke=s(q7);gbe=n(pke,"STRONG",{});var lbt=s(gbe);S_r=r(lbt,"convbert"),lbt.forEach(t),R_r=r(pke," \u2014 "),rW=n(pke,"A",{href:!0});var ibt=s(rW);B_r=r(ibt,"TFConvBertForSequenceClassification"),ibt.forEach(t),P_r=r(pke," (ConvBERT model)"),pke.forEach(t),I_r=i(re),N7=n(re,"LI",{});var uke=s(N7);hbe=n(uke,"STRONG",{});var dbt=s(hbe);q_r=r(dbt,"ctrl"),dbt.forEach(t),N_r=r(uke," \u2014 "),tW=n(uke,"A",{href:!0});var cbt=s(tW);j_r=r(cbt,"TFCTRLForSequenceClassification"),cbt.forEach(t),D_r=r(uke," (CTRL model)"),uke.forEach(t),G_r=i(re),j7=n(re,"LI",{});var _ke=s(j7);pbe=n(_ke,"STRONG",{});var fbt=s(pbe);O_r=r(fbt,"deberta"),fbt.forEach(t),V_r=r(_ke," \u2014 "),aW=n(_ke,"A",{href:!0});var mbt=s(aW);X_r=r(mbt,"TFDebertaForSequenceClassification"),mbt.forEach(t),z_r=r(_ke," (DeBERTa model)"),_ke.forEach(t),Q_r=i(re),D7=n(re,"LI",{});var bke=s(D7);ube=n(bke,"STRONG",{});var gbt=s(ube);W_r=r(gbt,"deberta-v2"),gbt.forEach(t),H_r=r(bke," \u2014 "),nW=n(bke,"A",{href:!0});var hbt=s(nW);U_r=r(hbt,"TFDebertaV2ForSequenceClassification"),hbt.forEach(t),J_r=r(bke," (DeBERTa-v2 model)"),bke.forEach(t),Y_r=i(re),G7=n(re,"LI",{});var vke=s(G7);_be=n(vke,"STRONG",{});var pbt=s(_be);K_r=r(pbt,"distilbert"),pbt.forEach(t),Z_r=r(vke," \u2014 "),sW=n(vke,"A",{href:!0});var ubt=s(sW);e1r=r(ubt,"TFDistilBertForSequenceClassification"),ubt.forEach(t),o1r=r(vke," (DistilBERT model)"),vke.forEach(t),r1r=i(re),O7=n(re,"LI",{});var Fke=s(O7);bbe=n(Fke,"STRONG",{});var _bt=s(bbe);t1r=r(_bt,"electra"),_bt.forEach(t),a1r=r(Fke," \u2014 "),lW=n(Fke,"A",{href:!0});var bbt=s(lW);n1r=r(bbt,"TFElectraForSequenceClassification"),bbt.forEach(t),s1r=r(Fke," (ELECTRA model)"),Fke.forEach(t),l1r=i(re),V7=n(re,"LI",{});var Tke=s(V7);vbe=n(Tke,"STRONG",{});var vbt=s(vbe);i1r=r(vbt,"flaubert"),vbt.forEach(t),d1r=r(Tke," \u2014 "),iW=n(Tke,"A",{href:!0});var Fbt=s(iW);c1r=r(Fbt,"TFFlaubertForSequenceClassification"),Fbt.forEach(t),f1r=r(Tke," (FlauBERT model)"),Tke.forEach(t),m1r=i(re),X7=n(re,"LI",{});var Mke=s(X7);Fbe=n(Mke,"STRONG",{});var Tbt=s(Fbe);g1r=r(Tbt,"funnel"),Tbt.forEach(t),h1r=r(Mke," \u2014 "),dW=n(Mke,"A",{href:!0});var Mbt=s(dW);p1r=r(Mbt,"TFFunnelForSequenceClassification"),Mbt.forEach(t),u1r=r(Mke," (Funnel Transformer model)"),Mke.forEach(t),_1r=i(re),z7=n(re,"LI",{});var Eke=s(z7);Tbe=n(Eke,"STRONG",{});var Ebt=s(Tbe);b1r=r(Ebt,"gpt2"),Ebt.forEach(t),v1r=r(Eke," \u2014 "),cW=n(Eke,"A",{href:!0});var Cbt=s(cW);F1r=r(Cbt,"TFGPT2ForSequenceClassification"),Cbt.forEach(t),T1r=r(Eke," (OpenAI GPT-2 model)"),Eke.forEach(t),M1r=i(re),Q7=n(re,"LI",{});var Cke=s(Q7);Mbe=n(Cke,"STRONG",{});var wbt=s(Mbe);E1r=r(wbt,"gptj"),wbt.forEach(t),C1r=r(Cke," \u2014 "),fW=n(Cke,"A",{href:!0});var Abt=s(fW);w1r=r(Abt,"TFGPTJForSequenceClassification"),Abt.forEach(t),A1r=r(Cke," (GPT-J model)"),Cke.forEach(t),y1r=i(re),W7=n(re,"LI",{});var wke=s(W7);Ebe=n(wke,"STRONG",{});var ybt=s(Ebe);L1r=r(ybt,"layoutlm"),ybt.forEach(t),x1r=r(wke," \u2014 "),mW=n(wke,"A",{href:!0});var Lbt=s(mW);$1r=r(Lbt,"TFLayoutLMForSequenceClassification"),Lbt.forEach(t),k1r=r(wke," (LayoutLM model)"),wke.forEach(t),S1r=i(re),H7=n(re,"LI",{});var Ake=s(H7);Cbe=n(Ake,"STRONG",{});var xbt=s(Cbe);R1r=r(xbt,"longformer"),xbt.forEach(t),B1r=r(Ake," \u2014 "),gW=n(Ake,"A",{href:!0});var $bt=s(gW);P1r=r($bt,"TFLongformerForSequenceClassification"),$bt.forEach(t),I1r=r(Ake," (Longformer model)"),Ake.forEach(t),q1r=i(re),U7=n(re,"LI",{});var yke=s(U7);wbe=n(yke,"STRONG",{});var kbt=s(wbe);N1r=r(kbt,"mobilebert"),kbt.forEach(t),j1r=r(yke," \u2014 "),hW=n(yke,"A",{href:!0});var Sbt=s(hW);D1r=r(Sbt,"TFMobileBertForSequenceClassification"),Sbt.forEach(t),G1r=r(yke," (MobileBERT model)"),yke.forEach(t),O1r=i(re),J7=n(re,"LI",{});var Lke=s(J7);Abe=n(Lke,"STRONG",{});var Rbt=s(Abe);V1r=r(Rbt,"mpnet"),Rbt.forEach(t),X1r=r(Lke," \u2014 "),pW=n(Lke,"A",{href:!0});var Bbt=s(pW);z1r=r(Bbt,"TFMPNetForSequenceClassification"),Bbt.forEach(t),Q1r=r(Lke," (MPNet model)"),Lke.forEach(t),W1r=i(re),Y7=n(re,"LI",{});var xke=s(Y7);ybe=n(xke,"STRONG",{});var Pbt=s(ybe);H1r=r(Pbt,"openai-gpt"),Pbt.forEach(t),U1r=r(xke," \u2014 "),uW=n(xke,"A",{href:!0});var Ibt=s(uW);J1r=r(Ibt,"TFOpenAIGPTForSequenceClassification"),Ibt.forEach(t),Y1r=r(xke," (OpenAI GPT model)"),xke.forEach(t),K1r=i(re),K7=n(re,"LI",{});var $ke=s(K7);Lbe=n($ke,"STRONG",{});var qbt=s(Lbe);Z1r=r(qbt,"rembert"),qbt.forEach(t),e8r=r($ke," \u2014 "),_W=n($ke,"A",{href:!0});var Nbt=s(_W);o8r=r(Nbt,"TFRemBertForSequenceClassification"),Nbt.forEach(t),r8r=r($ke," (RemBERT model)"),$ke.forEach(t),t8r=i(re),Z7=n(re,"LI",{});var kke=s(Z7);xbe=n(kke,"STRONG",{});var jbt=s(xbe);a8r=r(jbt,"roberta"),jbt.forEach(t),n8r=r(kke," \u2014 "),bW=n(kke,"A",{href:!0});var Dbt=s(bW);s8r=r(Dbt,"TFRobertaForSequenceClassification"),Dbt.forEach(t),l8r=r(kke," (RoBERTa model)"),kke.forEach(t),i8r=i(re),eM=n(re,"LI",{});var Ske=s(eM);$be=n(Ske,"STRONG",{});var Gbt=s($be);d8r=r(Gbt,"roformer"),Gbt.forEach(t),c8r=r(Ske," \u2014 "),vW=n(Ske,"A",{href:!0});var Obt=s(vW);f8r=r(Obt,"TFRoFormerForSequenceClassification"),Obt.forEach(t),m8r=r(Ske," (RoFormer model)"),Ske.forEach(t),g8r=i(re),oM=n(re,"LI",{});var Rke=s(oM);kbe=n(Rke,"STRONG",{});var Vbt=s(kbe);h8r=r(Vbt,"tapas"),Vbt.forEach(t),p8r=r(Rke," \u2014 "),FW=n(Rke,"A",{href:!0});var Xbt=s(FW);u8r=r(Xbt,"TFTapasForSequenceClassification"),Xbt.forEach(t),_8r=r(Rke," (TAPAS model)"),Rke.forEach(t),b8r=i(re),rM=n(re,"LI",{});var Bke=s(rM);Sbe=n(Bke,"STRONG",{});var zbt=s(Sbe);v8r=r(zbt,"transfo-xl"),zbt.forEach(t),F8r=r(Bke," \u2014 "),TW=n(Bke,"A",{href:!0});var Qbt=s(TW);T8r=r(Qbt,"TFTransfoXLForSequenceClassification"),Qbt.forEach(t),M8r=r(Bke," (Transformer-XL model)"),Bke.forEach(t),E8r=i(re),tM=n(re,"LI",{});var Pke=s(tM);Rbe=n(Pke,"STRONG",{});var Wbt=s(Rbe);C8r=r(Wbt,"xlm"),Wbt.forEach(t),w8r=r(Pke," \u2014 "),MW=n(Pke,"A",{href:!0});var Hbt=s(MW);A8r=r(Hbt,"TFXLMForSequenceClassification"),Hbt.forEach(t),y8r=r(Pke," (XLM model)"),Pke.forEach(t),L8r=i(re),aM=n(re,"LI",{});var Ike=s(aM);Bbe=n(Ike,"STRONG",{});var Ubt=s(Bbe);x8r=r(Ubt,"xlm-roberta"),Ubt.forEach(t),$8r=r(Ike," \u2014 "),EW=n(Ike,"A",{href:!0});var Jbt=s(EW);k8r=r(Jbt,"TFXLMRobertaForSequenceClassification"),Jbt.forEach(t),S8r=r(Ike," (XLM-RoBERTa model)"),Ike.forEach(t),R8r=i(re),nM=n(re,"LI",{});var qke=s(nM);Pbe=n(qke,"STRONG",{});var Ybt=s(Pbe);B8r=r(Ybt,"xlnet"),Ybt.forEach(t),P8r=r(qke," \u2014 "),CW=n(qke,"A",{href:!0});var Kbt=s(CW);I8r=r(Kbt,"TFXLNetForSequenceClassification"),Kbt.forEach(t),q8r=r(qke," (XLNet model)"),qke.forEach(t),re.forEach(t),N8r=i(vl),T(sM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),iIe=i(f),ec=n(f,"H2",{class:!0});var mNe=s(ec);lM=n(mNe,"A",{id:!0,class:!0,href:!0});var Zbt=s(lM);Ibe=n(Zbt,"SPAN",{});var e2t=s(Ibe);T(Wy.$$.fragment,e2t),e2t.forEach(t),Zbt.forEach(t),j8r=i(mNe),qbe=n(mNe,"SPAN",{});var o2t=s(qbe);D8r=r(o2t,"TFAutoModelForMultipleChoice"),o2t.forEach(t),mNe.forEach(t),dIe=i(f),ar=n(f,"DIV",{class:!0});var Fl=s(ar);T(Hy.$$.fragment,Fl),G8r=i(Fl),oc=n(Fl,"P",{});var jK=s(oc);O8r=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wW=n(jK,"A",{href:!0});var r2t=s(wW);V8r=r(r2t,"from_pretrained()"),r2t.forEach(t),X8r=r(jK," class method or the "),AW=n(jK,"A",{href:!0});var t2t=s(AW);z8r=r(t2t,"from_config()"),t2t.forEach(t),Q8r=r(jK,` class
method.`),jK.forEach(t),W8r=i(Fl),Uy=n(Fl,"P",{});var gNe=s(Uy);H8r=r(gNe,"This class cannot be instantiated directly using "),Nbe=n(gNe,"CODE",{});var a2t=s(Nbe);U8r=r(a2t,"__init__()"),a2t.forEach(t),J8r=r(gNe," (throws an error)."),gNe.forEach(t),Y8r=i(Fl),$t=n(Fl,"DIV",{class:!0});var z3=s($t);T(Jy.$$.fragment,z3),K8r=i(z3),jbe=n(z3,"P",{});var n2t=s(jbe);Z8r=r(n2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),n2t.forEach(t),ebr=i(z3),rc=n(z3,"P",{});var DK=s(rc);obr=r(DK,`Note:
Loading a model from its configuration file does `),Dbe=n(DK,"STRONG",{});var s2t=s(Dbe);rbr=r(s2t,"not"),s2t.forEach(t),tbr=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(DK,"A",{href:!0});var l2t=s(yW);abr=r(l2t,"from_pretrained()"),l2t.forEach(t),nbr=r(DK," to load the model weights."),DK.forEach(t),sbr=i(z3),T(iM.$$.fragment,z3),z3.forEach(t),lbr=i(Fl),kr=n(Fl,"DIV",{class:!0});var Tl=s(kr);T(Yy.$$.fragment,Tl),ibr=i(Tl),Gbe=n(Tl,"P",{});var i2t=s(Gbe);dbr=r(i2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),i2t.forEach(t),cbr=i(Tl),rn=n(Tl,"P",{});var Q3=s(rn);fbr=r(Q3,"The model class to instantiate is selected based on the "),Obe=n(Q3,"CODE",{});var d2t=s(Obe);mbr=r(d2t,"model_type"),d2t.forEach(t),gbr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),Vbe=n(Q3,"CODE",{});var c2t=s(Vbe);hbr=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),pbr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(Q3,"CODE",{});var f2t=s(Xbe);ubr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),_br=r(Q3,":"),Q3.forEach(t),bbr=i(Tl),pe=n(Tl,"UL",{});var _e=s(pe);dM=n(_e,"LI",{});var Nke=s(dM);zbe=n(Nke,"STRONG",{});var m2t=s(zbe);vbr=r(m2t,"albert"),m2t.forEach(t),Fbr=r(Nke," \u2014 "),LW=n(Nke,"A",{href:!0});var g2t=s(LW);Tbr=r(g2t,"TFAlbertForMultipleChoice"),g2t.forEach(t),Mbr=r(Nke," (ALBERT model)"),Nke.forEach(t),Ebr=i(_e),cM=n(_e,"LI",{});var jke=s(cM);Qbe=n(jke,"STRONG",{});var h2t=s(Qbe);Cbr=r(h2t,"bert"),h2t.forEach(t),wbr=r(jke," \u2014 "),xW=n(jke,"A",{href:!0});var p2t=s(xW);Abr=r(p2t,"TFBertForMultipleChoice"),p2t.forEach(t),ybr=r(jke," (BERT model)"),jke.forEach(t),Lbr=i(_e),fM=n(_e,"LI",{});var Dke=s(fM);Wbe=n(Dke,"STRONG",{});var u2t=s(Wbe);xbr=r(u2t,"camembert"),u2t.forEach(t),$br=r(Dke," \u2014 "),$W=n(Dke,"A",{href:!0});var _2t=s($W);kbr=r(_2t,"TFCamembertForMultipleChoice"),_2t.forEach(t),Sbr=r(Dke," (CamemBERT model)"),Dke.forEach(t),Rbr=i(_e),mM=n(_e,"LI",{});var Gke=s(mM);Hbe=n(Gke,"STRONG",{});var b2t=s(Hbe);Bbr=r(b2t,"convbert"),b2t.forEach(t),Pbr=r(Gke," \u2014 "),kW=n(Gke,"A",{href:!0});var v2t=s(kW);Ibr=r(v2t,"TFConvBertForMultipleChoice"),v2t.forEach(t),qbr=r(Gke," (ConvBERT model)"),Gke.forEach(t),Nbr=i(_e),gM=n(_e,"LI",{});var Oke=s(gM);Ube=n(Oke,"STRONG",{});var F2t=s(Ube);jbr=r(F2t,"distilbert"),F2t.forEach(t),Dbr=r(Oke," \u2014 "),SW=n(Oke,"A",{href:!0});var T2t=s(SW);Gbr=r(T2t,"TFDistilBertForMultipleChoice"),T2t.forEach(t),Obr=r(Oke," (DistilBERT model)"),Oke.forEach(t),Vbr=i(_e),hM=n(_e,"LI",{});var Vke=s(hM);Jbe=n(Vke,"STRONG",{});var M2t=s(Jbe);Xbr=r(M2t,"electra"),M2t.forEach(t),zbr=r(Vke," \u2014 "),RW=n(Vke,"A",{href:!0});var E2t=s(RW);Qbr=r(E2t,"TFElectraForMultipleChoice"),E2t.forEach(t),Wbr=r(Vke," (ELECTRA model)"),Vke.forEach(t),Hbr=i(_e),pM=n(_e,"LI",{});var Xke=s(pM);Ybe=n(Xke,"STRONG",{});var C2t=s(Ybe);Ubr=r(C2t,"flaubert"),C2t.forEach(t),Jbr=r(Xke," \u2014 "),BW=n(Xke,"A",{href:!0});var w2t=s(BW);Ybr=r(w2t,"TFFlaubertForMultipleChoice"),w2t.forEach(t),Kbr=r(Xke," (FlauBERT model)"),Xke.forEach(t),Zbr=i(_e),uM=n(_e,"LI",{});var zke=s(uM);Kbe=n(zke,"STRONG",{});var A2t=s(Kbe);e2r=r(A2t,"funnel"),A2t.forEach(t),o2r=r(zke," \u2014 "),PW=n(zke,"A",{href:!0});var y2t=s(PW);r2r=r(y2t,"TFFunnelForMultipleChoice"),y2t.forEach(t),t2r=r(zke," (Funnel Transformer model)"),zke.forEach(t),a2r=i(_e),_M=n(_e,"LI",{});var Qke=s(_M);Zbe=n(Qke,"STRONG",{});var L2t=s(Zbe);n2r=r(L2t,"longformer"),L2t.forEach(t),s2r=r(Qke," \u2014 "),IW=n(Qke,"A",{href:!0});var x2t=s(IW);l2r=r(x2t,"TFLongformerForMultipleChoice"),x2t.forEach(t),i2r=r(Qke," (Longformer model)"),Qke.forEach(t),d2r=i(_e),bM=n(_e,"LI",{});var Wke=s(bM);e2e=n(Wke,"STRONG",{});var $2t=s(e2e);c2r=r($2t,"mobilebert"),$2t.forEach(t),f2r=r(Wke," \u2014 "),qW=n(Wke,"A",{href:!0});var k2t=s(qW);m2r=r(k2t,"TFMobileBertForMultipleChoice"),k2t.forEach(t),g2r=r(Wke," (MobileBERT model)"),Wke.forEach(t),h2r=i(_e),vM=n(_e,"LI",{});var Hke=s(vM);o2e=n(Hke,"STRONG",{});var S2t=s(o2e);p2r=r(S2t,"mpnet"),S2t.forEach(t),u2r=r(Hke," \u2014 "),NW=n(Hke,"A",{href:!0});var R2t=s(NW);_2r=r(R2t,"TFMPNetForMultipleChoice"),R2t.forEach(t),b2r=r(Hke," (MPNet model)"),Hke.forEach(t),v2r=i(_e),FM=n(_e,"LI",{});var Uke=s(FM);r2e=n(Uke,"STRONG",{});var B2t=s(r2e);F2r=r(B2t,"rembert"),B2t.forEach(t),T2r=r(Uke," \u2014 "),jW=n(Uke,"A",{href:!0});var P2t=s(jW);M2r=r(P2t,"TFRemBertForMultipleChoice"),P2t.forEach(t),E2r=r(Uke," (RemBERT model)"),Uke.forEach(t),C2r=i(_e),TM=n(_e,"LI",{});var Jke=s(TM);t2e=n(Jke,"STRONG",{});var I2t=s(t2e);w2r=r(I2t,"roberta"),I2t.forEach(t),A2r=r(Jke," \u2014 "),DW=n(Jke,"A",{href:!0});var q2t=s(DW);y2r=r(q2t,"TFRobertaForMultipleChoice"),q2t.forEach(t),L2r=r(Jke," (RoBERTa model)"),Jke.forEach(t),x2r=i(_e),MM=n(_e,"LI",{});var Yke=s(MM);a2e=n(Yke,"STRONG",{});var N2t=s(a2e);$2r=r(N2t,"roformer"),N2t.forEach(t),k2r=r(Yke," \u2014 "),GW=n(Yke,"A",{href:!0});var j2t=s(GW);S2r=r(j2t,"TFRoFormerForMultipleChoice"),j2t.forEach(t),R2r=r(Yke," (RoFormer model)"),Yke.forEach(t),B2r=i(_e),EM=n(_e,"LI",{});var Kke=s(EM);n2e=n(Kke,"STRONG",{});var D2t=s(n2e);P2r=r(D2t,"xlm"),D2t.forEach(t),I2r=r(Kke," \u2014 "),OW=n(Kke,"A",{href:!0});var G2t=s(OW);q2r=r(G2t,"TFXLMForMultipleChoice"),G2t.forEach(t),N2r=r(Kke," (XLM model)"),Kke.forEach(t),j2r=i(_e),CM=n(_e,"LI",{});var Zke=s(CM);s2e=n(Zke,"STRONG",{});var O2t=s(s2e);D2r=r(O2t,"xlm-roberta"),O2t.forEach(t),G2r=r(Zke," \u2014 "),VW=n(Zke,"A",{href:!0});var V2t=s(VW);O2r=r(V2t,"TFXLMRobertaForMultipleChoice"),V2t.forEach(t),V2r=r(Zke," (XLM-RoBERTa model)"),Zke.forEach(t),X2r=i(_e),wM=n(_e,"LI",{});var eSe=s(wM);l2e=n(eSe,"STRONG",{});var X2t=s(l2e);z2r=r(X2t,"xlnet"),X2t.forEach(t),Q2r=r(eSe," \u2014 "),XW=n(eSe,"A",{href:!0});var z2t=s(XW);W2r=r(z2t,"TFXLNetForMultipleChoice"),z2t.forEach(t),H2r=r(eSe," (XLNet model)"),eSe.forEach(t),_e.forEach(t),U2r=i(Tl),T(AM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),cIe=i(f),tc=n(f,"H2",{class:!0});var hNe=s(tc);yM=n(hNe,"A",{id:!0,class:!0,href:!0});var Q2t=s(yM);i2e=n(Q2t,"SPAN",{});var W2t=s(i2e);T(Ky.$$.fragment,W2t),W2t.forEach(t),Q2t.forEach(t),J2r=i(hNe),d2e=n(hNe,"SPAN",{});var H2t=s(d2e);Y2r=r(H2t,"TFAutoModelForTableQuestionAnswering"),H2t.forEach(t),hNe.forEach(t),fIe=i(f),nr=n(f,"DIV",{class:!0});var Ml=s(nr);T(Zy.$$.fragment,Ml),K2r=i(Ml),ac=n(Ml,"P",{});var GK=s(ac);Z2r=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zW=n(GK,"A",{href:!0});var U2t=s(zW);evr=r(U2t,"from_pretrained()"),U2t.forEach(t),ovr=r(GK," class method or the "),QW=n(GK,"A",{href:!0});var J2t=s(QW);rvr=r(J2t,"from_config()"),J2t.forEach(t),tvr=r(GK,` class
method.`),GK.forEach(t),avr=i(Ml),eL=n(Ml,"P",{});var pNe=s(eL);nvr=r(pNe,"This class cannot be instantiated directly using "),c2e=n(pNe,"CODE",{});var Y2t=s(c2e);svr=r(Y2t,"__init__()"),Y2t.forEach(t),lvr=r(pNe," (throws an error)."),pNe.forEach(t),ivr=i(Ml),kt=n(Ml,"DIV",{class:!0});var W3=s(kt);T(oL.$$.fragment,W3),dvr=i(W3),f2e=n(W3,"P",{});var K2t=s(f2e);cvr=r(K2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),K2t.forEach(t),fvr=i(W3),nc=n(W3,"P",{});var OK=s(nc);mvr=r(OK,`Note:
Loading a model from its configuration file does `),m2e=n(OK,"STRONG",{});var Z2t=s(m2e);gvr=r(Z2t,"not"),Z2t.forEach(t),hvr=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(OK,"A",{href:!0});var evt=s(WW);pvr=r(evt,"from_pretrained()"),evt.forEach(t),uvr=r(OK," to load the model weights."),OK.forEach(t),_vr=i(W3),T(LM.$$.fragment,W3),W3.forEach(t),bvr=i(Ml),Sr=n(Ml,"DIV",{class:!0});var El=s(Sr);T(rL.$$.fragment,El),vvr=i(El),g2e=n(El,"P",{});var ovt=s(g2e);Fvr=r(ovt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ovt.forEach(t),Tvr=i(El),tn=n(El,"P",{});var H3=s(tn);Mvr=r(H3,"The model class to instantiate is selected based on the "),h2e=n(H3,"CODE",{});var rvt=s(h2e);Evr=r(rvt,"model_type"),rvt.forEach(t),Cvr=r(H3,` property of the config object (either
passed as an argument or loaded from `),p2e=n(H3,"CODE",{});var tvt=s(p2e);wvr=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),Avr=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(H3,"CODE",{});var avt=s(u2e);yvr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),Lvr=r(H3,":"),H3.forEach(t),xvr=i(El),_2e=n(El,"UL",{});var nvt=s(_2e);xM=n(nvt,"LI",{});var oSe=s(xM);b2e=n(oSe,"STRONG",{});var svt=s(b2e);$vr=r(svt,"tapas"),svt.forEach(t),kvr=r(oSe," \u2014 "),HW=n(oSe,"A",{href:!0});var lvt=s(HW);Svr=r(lvt,"TFTapasForQuestionAnswering"),lvt.forEach(t),Rvr=r(oSe," (TAPAS model)"),oSe.forEach(t),nvt.forEach(t),Bvr=i(El),T($M.$$.fragment,El),El.forEach(t),Ml.forEach(t),mIe=i(f),sc=n(f,"H2",{class:!0});var uNe=s(sc);kM=n(uNe,"A",{id:!0,class:!0,href:!0});var ivt=s(kM);v2e=n(ivt,"SPAN",{});var dvt=s(v2e);T(tL.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),Pvr=i(uNe),F2e=n(uNe,"SPAN",{});var cvt=s(F2e);Ivr=r(cvt,"TFAutoModelForTokenClassification"),cvt.forEach(t),uNe.forEach(t),gIe=i(f),sr=n(f,"DIV",{class:!0});var Cl=s(sr);T(aL.$$.fragment,Cl),qvr=i(Cl),lc=n(Cl,"P",{});var VK=s(lc);Nvr=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UW=n(VK,"A",{href:!0});var fvt=s(UW);jvr=r(fvt,"from_pretrained()"),fvt.forEach(t),Dvr=r(VK," class method or the "),JW=n(VK,"A",{href:!0});var mvt=s(JW);Gvr=r(mvt,"from_config()"),mvt.forEach(t),Ovr=r(VK,` class
method.`),VK.forEach(t),Vvr=i(Cl),nL=n(Cl,"P",{});var _Ne=s(nL);Xvr=r(_Ne,"This class cannot be instantiated directly using "),T2e=n(_Ne,"CODE",{});var gvt=s(T2e);zvr=r(gvt,"__init__()"),gvt.forEach(t),Qvr=r(_Ne," (throws an error)."),_Ne.forEach(t),Wvr=i(Cl),St=n(Cl,"DIV",{class:!0});var U3=s(St);T(sL.$$.fragment,U3),Hvr=i(U3),M2e=n(U3,"P",{});var hvt=s(M2e);Uvr=r(hvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hvt.forEach(t),Jvr=i(U3),ic=n(U3,"P",{});var XK=s(ic);Yvr=r(XK,`Note:
Loading a model from its configuration file does `),E2e=n(XK,"STRONG",{});var pvt=s(E2e);Kvr=r(pvt,"not"),pvt.forEach(t),Zvr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(XK,"A",{href:!0});var uvt=s(YW);eFr=r(uvt,"from_pretrained()"),uvt.forEach(t),oFr=r(XK," to load the model weights."),XK.forEach(t),rFr=i(U3),T(SM.$$.fragment,U3),U3.forEach(t),tFr=i(Cl),Rr=n(Cl,"DIV",{class:!0});var wl=s(Rr);T(lL.$$.fragment,wl),aFr=i(wl),C2e=n(wl,"P",{});var _vt=s(C2e);nFr=r(_vt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_vt.forEach(t),sFr=i(wl),an=n(wl,"P",{});var J3=s(an);lFr=r(J3,"The model class to instantiate is selected based on the "),w2e=n(J3,"CODE",{});var bvt=s(w2e);iFr=r(bvt,"model_type"),bvt.forEach(t),dFr=r(J3,` property of the config object (either
passed as an argument or loaded from `),A2e=n(J3,"CODE",{});var vvt=s(A2e);cFr=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),fFr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(J3,"CODE",{});var Fvt=s(y2e);mFr=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),gFr=r(J3,":"),J3.forEach(t),hFr=i(wl),de=n(wl,"UL",{});var me=s(de);RM=n(me,"LI",{});var rSe=s(RM);L2e=n(rSe,"STRONG",{});var Tvt=s(L2e);pFr=r(Tvt,"albert"),Tvt.forEach(t),uFr=r(rSe," \u2014 "),KW=n(rSe,"A",{href:!0});var Mvt=s(KW);_Fr=r(Mvt,"TFAlbertForTokenClassification"),Mvt.forEach(t),bFr=r(rSe," (ALBERT model)"),rSe.forEach(t),vFr=i(me),BM=n(me,"LI",{});var tSe=s(BM);x2e=n(tSe,"STRONG",{});var Evt=s(x2e);FFr=r(Evt,"bert"),Evt.forEach(t),TFr=r(tSe," \u2014 "),ZW=n(tSe,"A",{href:!0});var Cvt=s(ZW);MFr=r(Cvt,"TFBertForTokenClassification"),Cvt.forEach(t),EFr=r(tSe," (BERT model)"),tSe.forEach(t),CFr=i(me),PM=n(me,"LI",{});var aSe=s(PM);$2e=n(aSe,"STRONG",{});var wvt=s($2e);wFr=r(wvt,"camembert"),wvt.forEach(t),AFr=r(aSe," \u2014 "),eH=n(aSe,"A",{href:!0});var Avt=s(eH);yFr=r(Avt,"TFCamembertForTokenClassification"),Avt.forEach(t),LFr=r(aSe," (CamemBERT model)"),aSe.forEach(t),xFr=i(me),IM=n(me,"LI",{});var nSe=s(IM);k2e=n(nSe,"STRONG",{});var yvt=s(k2e);$Fr=r(yvt,"convbert"),yvt.forEach(t),kFr=r(nSe," \u2014 "),oH=n(nSe,"A",{href:!0});var Lvt=s(oH);SFr=r(Lvt,"TFConvBertForTokenClassification"),Lvt.forEach(t),RFr=r(nSe," (ConvBERT model)"),nSe.forEach(t),BFr=i(me),qM=n(me,"LI",{});var sSe=s(qM);S2e=n(sSe,"STRONG",{});var xvt=s(S2e);PFr=r(xvt,"deberta"),xvt.forEach(t),IFr=r(sSe," \u2014 "),rH=n(sSe,"A",{href:!0});var $vt=s(rH);qFr=r($vt,"TFDebertaForTokenClassification"),$vt.forEach(t),NFr=r(sSe," (DeBERTa model)"),sSe.forEach(t),jFr=i(me),NM=n(me,"LI",{});var lSe=s(NM);R2e=n(lSe,"STRONG",{});var kvt=s(R2e);DFr=r(kvt,"deberta-v2"),kvt.forEach(t),GFr=r(lSe," \u2014 "),tH=n(lSe,"A",{href:!0});var Svt=s(tH);OFr=r(Svt,"TFDebertaV2ForTokenClassification"),Svt.forEach(t),VFr=r(lSe," (DeBERTa-v2 model)"),lSe.forEach(t),XFr=i(me),jM=n(me,"LI",{});var iSe=s(jM);B2e=n(iSe,"STRONG",{});var Rvt=s(B2e);zFr=r(Rvt,"distilbert"),Rvt.forEach(t),QFr=r(iSe," \u2014 "),aH=n(iSe,"A",{href:!0});var Bvt=s(aH);WFr=r(Bvt,"TFDistilBertForTokenClassification"),Bvt.forEach(t),HFr=r(iSe," (DistilBERT model)"),iSe.forEach(t),UFr=i(me),DM=n(me,"LI",{});var dSe=s(DM);P2e=n(dSe,"STRONG",{});var Pvt=s(P2e);JFr=r(Pvt,"electra"),Pvt.forEach(t),YFr=r(dSe," \u2014 "),nH=n(dSe,"A",{href:!0});var Ivt=s(nH);KFr=r(Ivt,"TFElectraForTokenClassification"),Ivt.forEach(t),ZFr=r(dSe," (ELECTRA model)"),dSe.forEach(t),e0r=i(me),GM=n(me,"LI",{});var cSe=s(GM);I2e=n(cSe,"STRONG",{});var qvt=s(I2e);o0r=r(qvt,"flaubert"),qvt.forEach(t),r0r=r(cSe," \u2014 "),sH=n(cSe,"A",{href:!0});var Nvt=s(sH);t0r=r(Nvt,"TFFlaubertForTokenClassification"),Nvt.forEach(t),a0r=r(cSe," (FlauBERT model)"),cSe.forEach(t),n0r=i(me),OM=n(me,"LI",{});var fSe=s(OM);q2e=n(fSe,"STRONG",{});var jvt=s(q2e);s0r=r(jvt,"funnel"),jvt.forEach(t),l0r=r(fSe," \u2014 "),lH=n(fSe,"A",{href:!0});var Dvt=s(lH);i0r=r(Dvt,"TFFunnelForTokenClassification"),Dvt.forEach(t),d0r=r(fSe," (Funnel Transformer model)"),fSe.forEach(t),c0r=i(me),VM=n(me,"LI",{});var mSe=s(VM);N2e=n(mSe,"STRONG",{});var Gvt=s(N2e);f0r=r(Gvt,"layoutlm"),Gvt.forEach(t),m0r=r(mSe," \u2014 "),iH=n(mSe,"A",{href:!0});var Ovt=s(iH);g0r=r(Ovt,"TFLayoutLMForTokenClassification"),Ovt.forEach(t),h0r=r(mSe," (LayoutLM model)"),mSe.forEach(t),p0r=i(me),XM=n(me,"LI",{});var gSe=s(XM);j2e=n(gSe,"STRONG",{});var Vvt=s(j2e);u0r=r(Vvt,"longformer"),Vvt.forEach(t),_0r=r(gSe," \u2014 "),dH=n(gSe,"A",{href:!0});var Xvt=s(dH);b0r=r(Xvt,"TFLongformerForTokenClassification"),Xvt.forEach(t),v0r=r(gSe," (Longformer model)"),gSe.forEach(t),F0r=i(me),zM=n(me,"LI",{});var hSe=s(zM);D2e=n(hSe,"STRONG",{});var zvt=s(D2e);T0r=r(zvt,"mobilebert"),zvt.forEach(t),M0r=r(hSe," \u2014 "),cH=n(hSe,"A",{href:!0});var Qvt=s(cH);E0r=r(Qvt,"TFMobileBertForTokenClassification"),Qvt.forEach(t),C0r=r(hSe," (MobileBERT model)"),hSe.forEach(t),w0r=i(me),QM=n(me,"LI",{});var pSe=s(QM);G2e=n(pSe,"STRONG",{});var Wvt=s(G2e);A0r=r(Wvt,"mpnet"),Wvt.forEach(t),y0r=r(pSe," \u2014 "),fH=n(pSe,"A",{href:!0});var Hvt=s(fH);L0r=r(Hvt,"TFMPNetForTokenClassification"),Hvt.forEach(t),x0r=r(pSe," (MPNet model)"),pSe.forEach(t),$0r=i(me),WM=n(me,"LI",{});var uSe=s(WM);O2e=n(uSe,"STRONG",{});var Uvt=s(O2e);k0r=r(Uvt,"rembert"),Uvt.forEach(t),S0r=r(uSe," \u2014 "),mH=n(uSe,"A",{href:!0});var Jvt=s(mH);R0r=r(Jvt,"TFRemBertForTokenClassification"),Jvt.forEach(t),B0r=r(uSe," (RemBERT model)"),uSe.forEach(t),P0r=i(me),HM=n(me,"LI",{});var _Se=s(HM);V2e=n(_Se,"STRONG",{});var Yvt=s(V2e);I0r=r(Yvt,"roberta"),Yvt.forEach(t),q0r=r(_Se," \u2014 "),gH=n(_Se,"A",{href:!0});var Kvt=s(gH);N0r=r(Kvt,"TFRobertaForTokenClassification"),Kvt.forEach(t),j0r=r(_Se," (RoBERTa model)"),_Se.forEach(t),D0r=i(me),UM=n(me,"LI",{});var bSe=s(UM);X2e=n(bSe,"STRONG",{});var Zvt=s(X2e);G0r=r(Zvt,"roformer"),Zvt.forEach(t),O0r=r(bSe," \u2014 "),hH=n(bSe,"A",{href:!0});var eFt=s(hH);V0r=r(eFt,"TFRoFormerForTokenClassification"),eFt.forEach(t),X0r=r(bSe," (RoFormer model)"),bSe.forEach(t),z0r=i(me),JM=n(me,"LI",{});var vSe=s(JM);z2e=n(vSe,"STRONG",{});var oFt=s(z2e);Q0r=r(oFt,"xlm"),oFt.forEach(t),W0r=r(vSe," \u2014 "),pH=n(vSe,"A",{href:!0});var rFt=s(pH);H0r=r(rFt,"TFXLMForTokenClassification"),rFt.forEach(t),U0r=r(vSe," (XLM model)"),vSe.forEach(t),J0r=i(me),YM=n(me,"LI",{});var FSe=s(YM);Q2e=n(FSe,"STRONG",{});var tFt=s(Q2e);Y0r=r(tFt,"xlm-roberta"),tFt.forEach(t),K0r=r(FSe," \u2014 "),uH=n(FSe,"A",{href:!0});var aFt=s(uH);Z0r=r(aFt,"TFXLMRobertaForTokenClassification"),aFt.forEach(t),eTr=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),oTr=i(me),KM=n(me,"LI",{});var TSe=s(KM);W2e=n(TSe,"STRONG",{});var nFt=s(W2e);rTr=r(nFt,"xlnet"),nFt.forEach(t),tTr=r(TSe," \u2014 "),_H=n(TSe,"A",{href:!0});var sFt=s(_H);aTr=r(sFt,"TFXLNetForTokenClassification"),sFt.forEach(t),nTr=r(TSe," (XLNet model)"),TSe.forEach(t),me.forEach(t),sTr=i(wl),T(ZM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),hIe=i(f),dc=n(f,"H2",{class:!0});var bNe=s(dc);e4=n(bNe,"A",{id:!0,class:!0,href:!0});var lFt=s(e4);H2e=n(lFt,"SPAN",{});var iFt=s(H2e);T(iL.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),lTr=i(bNe),U2e=n(bNe,"SPAN",{});var dFt=s(U2e);iTr=r(dFt,"TFAutoModelForQuestionAnswering"),dFt.forEach(t),bNe.forEach(t),pIe=i(f),lr=n(f,"DIV",{class:!0});var Al=s(lr);T(dL.$$.fragment,Al),dTr=i(Al),cc=n(Al,"P",{});var zK=s(cc);cTr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bH=n(zK,"A",{href:!0});var cFt=s(bH);fTr=r(cFt,"from_pretrained()"),cFt.forEach(t),mTr=r(zK," class method or the "),vH=n(zK,"A",{href:!0});var fFt=s(vH);gTr=r(fFt,"from_config()"),fFt.forEach(t),hTr=r(zK,` class
method.`),zK.forEach(t),pTr=i(Al),cL=n(Al,"P",{});var vNe=s(cL);uTr=r(vNe,"This class cannot be instantiated directly using "),J2e=n(vNe,"CODE",{});var mFt=s(J2e);_Tr=r(mFt,"__init__()"),mFt.forEach(t),bTr=r(vNe," (throws an error)."),vNe.forEach(t),vTr=i(Al),Rt=n(Al,"DIV",{class:!0});var Y3=s(Rt);T(fL.$$.fragment,Y3),FTr=i(Y3),Y2e=n(Y3,"P",{});var gFt=s(Y2e);TTr=r(gFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gFt.forEach(t),MTr=i(Y3),fc=n(Y3,"P",{});var QK=s(fc);ETr=r(QK,`Note:
Loading a model from its configuration file does `),K2e=n(QK,"STRONG",{});var hFt=s(K2e);CTr=r(hFt,"not"),hFt.forEach(t),wTr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(QK,"A",{href:!0});var pFt=s(FH);ATr=r(pFt,"from_pretrained()"),pFt.forEach(t),yTr=r(QK," to load the model weights."),QK.forEach(t),LTr=i(Y3),T(o4.$$.fragment,Y3),Y3.forEach(t),xTr=i(Al),Br=n(Al,"DIV",{class:!0});var yl=s(Br);T(mL.$$.fragment,yl),$Tr=i(yl),Z2e=n(yl,"P",{});var uFt=s(Z2e);kTr=r(uFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uFt.forEach(t),STr=i(yl),nn=n(yl,"P",{});var K3=s(nn);RTr=r(K3,"The model class to instantiate is selected based on the "),eve=n(K3,"CODE",{});var _Ft=s(eve);BTr=r(_Ft,"model_type"),_Ft.forEach(t),PTr=r(K3,` property of the config object (either
passed as an argument or loaded from `),ove=n(K3,"CODE",{});var bFt=s(ove);ITr=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),qTr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(K3,"CODE",{});var vFt=s(rve);NTr=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),jTr=r(K3,":"),K3.forEach(t),DTr=i(yl),ce=n(yl,"UL",{});var ge=s(ce);r4=n(ge,"LI",{});var MSe=s(r4);tve=n(MSe,"STRONG",{});var FFt=s(tve);GTr=r(FFt,"albert"),FFt.forEach(t),OTr=r(MSe," \u2014 "),TH=n(MSe,"A",{href:!0});var TFt=s(TH);VTr=r(TFt,"TFAlbertForQuestionAnswering"),TFt.forEach(t),XTr=r(MSe," (ALBERT model)"),MSe.forEach(t),zTr=i(ge),t4=n(ge,"LI",{});var ESe=s(t4);ave=n(ESe,"STRONG",{});var MFt=s(ave);QTr=r(MFt,"bert"),MFt.forEach(t),WTr=r(ESe," \u2014 "),MH=n(ESe,"A",{href:!0});var EFt=s(MH);HTr=r(EFt,"TFBertForQuestionAnswering"),EFt.forEach(t),UTr=r(ESe," (BERT model)"),ESe.forEach(t),JTr=i(ge),a4=n(ge,"LI",{});var CSe=s(a4);nve=n(CSe,"STRONG",{});var CFt=s(nve);YTr=r(CFt,"camembert"),CFt.forEach(t),KTr=r(CSe," \u2014 "),EH=n(CSe,"A",{href:!0});var wFt=s(EH);ZTr=r(wFt,"TFCamembertForQuestionAnswering"),wFt.forEach(t),e7r=r(CSe," (CamemBERT model)"),CSe.forEach(t),o7r=i(ge),n4=n(ge,"LI",{});var wSe=s(n4);sve=n(wSe,"STRONG",{});var AFt=s(sve);r7r=r(AFt,"convbert"),AFt.forEach(t),t7r=r(wSe," \u2014 "),CH=n(wSe,"A",{href:!0});var yFt=s(CH);a7r=r(yFt,"TFConvBertForQuestionAnswering"),yFt.forEach(t),n7r=r(wSe," (ConvBERT model)"),wSe.forEach(t),s7r=i(ge),s4=n(ge,"LI",{});var ASe=s(s4);lve=n(ASe,"STRONG",{});var LFt=s(lve);l7r=r(LFt,"deberta"),LFt.forEach(t),i7r=r(ASe," \u2014 "),wH=n(ASe,"A",{href:!0});var xFt=s(wH);d7r=r(xFt,"TFDebertaForQuestionAnswering"),xFt.forEach(t),c7r=r(ASe," (DeBERTa model)"),ASe.forEach(t),f7r=i(ge),l4=n(ge,"LI",{});var ySe=s(l4);ive=n(ySe,"STRONG",{});var $Ft=s(ive);m7r=r($Ft,"deberta-v2"),$Ft.forEach(t),g7r=r(ySe," \u2014 "),AH=n(ySe,"A",{href:!0});var kFt=s(AH);h7r=r(kFt,"TFDebertaV2ForQuestionAnswering"),kFt.forEach(t),p7r=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),u7r=i(ge),i4=n(ge,"LI",{});var LSe=s(i4);dve=n(LSe,"STRONG",{});var SFt=s(dve);_7r=r(SFt,"distilbert"),SFt.forEach(t),b7r=r(LSe," \u2014 "),yH=n(LSe,"A",{href:!0});var RFt=s(yH);v7r=r(RFt,"TFDistilBertForQuestionAnswering"),RFt.forEach(t),F7r=r(LSe," (DistilBERT model)"),LSe.forEach(t),T7r=i(ge),d4=n(ge,"LI",{});var xSe=s(d4);cve=n(xSe,"STRONG",{});var BFt=s(cve);M7r=r(BFt,"electra"),BFt.forEach(t),E7r=r(xSe," \u2014 "),LH=n(xSe,"A",{href:!0});var PFt=s(LH);C7r=r(PFt,"TFElectraForQuestionAnswering"),PFt.forEach(t),w7r=r(xSe," (ELECTRA model)"),xSe.forEach(t),A7r=i(ge),c4=n(ge,"LI",{});var $Se=s(c4);fve=n($Se,"STRONG",{});var IFt=s(fve);y7r=r(IFt,"flaubert"),IFt.forEach(t),L7r=r($Se," \u2014 "),xH=n($Se,"A",{href:!0});var qFt=s(xH);x7r=r(qFt,"TFFlaubertForQuestionAnsweringSimple"),qFt.forEach(t),$7r=r($Se," (FlauBERT model)"),$Se.forEach(t),k7r=i(ge),f4=n(ge,"LI",{});var kSe=s(f4);mve=n(kSe,"STRONG",{});var NFt=s(mve);S7r=r(NFt,"funnel"),NFt.forEach(t),R7r=r(kSe," \u2014 "),$H=n(kSe,"A",{href:!0});var jFt=s($H);B7r=r(jFt,"TFFunnelForQuestionAnswering"),jFt.forEach(t),P7r=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),I7r=i(ge),m4=n(ge,"LI",{});var SSe=s(m4);gve=n(SSe,"STRONG",{});var DFt=s(gve);q7r=r(DFt,"gptj"),DFt.forEach(t),N7r=r(SSe," \u2014 "),kH=n(SSe,"A",{href:!0});var GFt=s(kH);j7r=r(GFt,"TFGPTJForQuestionAnswering"),GFt.forEach(t),D7r=r(SSe," (GPT-J model)"),SSe.forEach(t),G7r=i(ge),g4=n(ge,"LI",{});var RSe=s(g4);hve=n(RSe,"STRONG",{});var OFt=s(hve);O7r=r(OFt,"longformer"),OFt.forEach(t),V7r=r(RSe," \u2014 "),SH=n(RSe,"A",{href:!0});var VFt=s(SH);X7r=r(VFt,"TFLongformerForQuestionAnswering"),VFt.forEach(t),z7r=r(RSe," (Longformer model)"),RSe.forEach(t),Q7r=i(ge),h4=n(ge,"LI",{});var BSe=s(h4);pve=n(BSe,"STRONG",{});var XFt=s(pve);W7r=r(XFt,"mobilebert"),XFt.forEach(t),H7r=r(BSe," \u2014 "),RH=n(BSe,"A",{href:!0});var zFt=s(RH);U7r=r(zFt,"TFMobileBertForQuestionAnswering"),zFt.forEach(t),J7r=r(BSe," (MobileBERT model)"),BSe.forEach(t),Y7r=i(ge),p4=n(ge,"LI",{});var PSe=s(p4);uve=n(PSe,"STRONG",{});var QFt=s(uve);K7r=r(QFt,"mpnet"),QFt.forEach(t),Z7r=r(PSe," \u2014 "),BH=n(PSe,"A",{href:!0});var WFt=s(BH);eMr=r(WFt,"TFMPNetForQuestionAnswering"),WFt.forEach(t),oMr=r(PSe," (MPNet model)"),PSe.forEach(t),rMr=i(ge),u4=n(ge,"LI",{});var ISe=s(u4);_ve=n(ISe,"STRONG",{});var HFt=s(_ve);tMr=r(HFt,"rembert"),HFt.forEach(t),aMr=r(ISe," \u2014 "),PH=n(ISe,"A",{href:!0});var UFt=s(PH);nMr=r(UFt,"TFRemBertForQuestionAnswering"),UFt.forEach(t),sMr=r(ISe," (RemBERT model)"),ISe.forEach(t),lMr=i(ge),_4=n(ge,"LI",{});var qSe=s(_4);bve=n(qSe,"STRONG",{});var JFt=s(bve);iMr=r(JFt,"roberta"),JFt.forEach(t),dMr=r(qSe," \u2014 "),IH=n(qSe,"A",{href:!0});var YFt=s(IH);cMr=r(YFt,"TFRobertaForQuestionAnswering"),YFt.forEach(t),fMr=r(qSe," (RoBERTa model)"),qSe.forEach(t),mMr=i(ge),b4=n(ge,"LI",{});var NSe=s(b4);vve=n(NSe,"STRONG",{});var KFt=s(vve);gMr=r(KFt,"roformer"),KFt.forEach(t),hMr=r(NSe," \u2014 "),qH=n(NSe,"A",{href:!0});var ZFt=s(qH);pMr=r(ZFt,"TFRoFormerForQuestionAnswering"),ZFt.forEach(t),uMr=r(NSe," (RoFormer model)"),NSe.forEach(t),_Mr=i(ge),v4=n(ge,"LI",{});var jSe=s(v4);Fve=n(jSe,"STRONG",{});var e0t=s(Fve);bMr=r(e0t,"xlm"),e0t.forEach(t),vMr=r(jSe," \u2014 "),NH=n(jSe,"A",{href:!0});var o0t=s(NH);FMr=r(o0t,"TFXLMForQuestionAnsweringSimple"),o0t.forEach(t),TMr=r(jSe," (XLM model)"),jSe.forEach(t),MMr=i(ge),F4=n(ge,"LI",{});var DSe=s(F4);Tve=n(DSe,"STRONG",{});var r0t=s(Tve);EMr=r(r0t,"xlm-roberta"),r0t.forEach(t),CMr=r(DSe," \u2014 "),jH=n(DSe,"A",{href:!0});var t0t=s(jH);wMr=r(t0t,"TFXLMRobertaForQuestionAnswering"),t0t.forEach(t),AMr=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),yMr=i(ge),T4=n(ge,"LI",{});var GSe=s(T4);Mve=n(GSe,"STRONG",{});var a0t=s(Mve);LMr=r(a0t,"xlnet"),a0t.forEach(t),xMr=r(GSe," \u2014 "),DH=n(GSe,"A",{href:!0});var n0t=s(DH);$Mr=r(n0t,"TFXLNetForQuestionAnsweringSimple"),n0t.forEach(t),kMr=r(GSe," (XLNet model)"),GSe.forEach(t),ge.forEach(t),SMr=i(yl),T(M4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),uIe=i(f),mc=n(f,"H2",{class:!0});var FNe=s(mc);E4=n(FNe,"A",{id:!0,class:!0,href:!0});var s0t=s(E4);Eve=n(s0t,"SPAN",{});var l0t=s(Eve);T(gL.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),RMr=i(FNe),Cve=n(FNe,"SPAN",{});var i0t=s(Cve);BMr=r(i0t,"TFAutoModelForVision2Seq"),i0t.forEach(t),FNe.forEach(t),_Ie=i(f),ir=n(f,"DIV",{class:!0});var Ll=s(ir);T(hL.$$.fragment,Ll),PMr=i(Ll),gc=n(Ll,"P",{});var WK=s(gc);IMr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GH=n(WK,"A",{href:!0});var d0t=s(GH);qMr=r(d0t,"from_pretrained()"),d0t.forEach(t),NMr=r(WK," class method or the "),OH=n(WK,"A",{href:!0});var c0t=s(OH);jMr=r(c0t,"from_config()"),c0t.forEach(t),DMr=r(WK,` class
method.`),WK.forEach(t),GMr=i(Ll),pL=n(Ll,"P",{});var TNe=s(pL);OMr=r(TNe,"This class cannot be instantiated directly using "),wve=n(TNe,"CODE",{});var f0t=s(wve);VMr=r(f0t,"__init__()"),f0t.forEach(t),XMr=r(TNe," (throws an error)."),TNe.forEach(t),zMr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var Z3=s(Bt);T(uL.$$.fragment,Z3),QMr=i(Z3),Ave=n(Z3,"P",{});var m0t=s(Ave);WMr=r(m0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m0t.forEach(t),HMr=i(Z3),hc=n(Z3,"P",{});var HK=s(hc);UMr=r(HK,`Note:
Loading a model from its configuration file does `),yve=n(HK,"STRONG",{});var g0t=s(yve);JMr=r(g0t,"not"),g0t.forEach(t),YMr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(HK,"A",{href:!0});var h0t=s(VH);KMr=r(h0t,"from_pretrained()"),h0t.forEach(t),ZMr=r(HK," to load the model weights."),HK.forEach(t),e4r=i(Z3),T(C4.$$.fragment,Z3),Z3.forEach(t),o4r=i(Ll),Pr=n(Ll,"DIV",{class:!0});var xl=s(Pr);T(_L.$$.fragment,xl),r4r=i(xl),Lve=n(xl,"P",{});var p0t=s(Lve);t4r=r(p0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),p0t.forEach(t),a4r=i(xl),sn=n(xl,"P",{});var ew=s(sn);n4r=r(ew,"The model class to instantiate is selected based on the "),xve=n(ew,"CODE",{});var u0t=s(xve);s4r=r(u0t,"model_type"),u0t.forEach(t),l4r=r(ew,` property of the config object (either
passed as an argument or loaded from `),$ve=n(ew,"CODE",{});var _0t=s($ve);i4r=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),d4r=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(ew,"CODE",{});var b0t=s(kve);c4r=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),f4r=r(ew,":"),ew.forEach(t),m4r=i(xl),Sve=n(xl,"UL",{});var v0t=s(Sve);w4=n(v0t,"LI",{});var OSe=s(w4);Rve=n(OSe,"STRONG",{});var F0t=s(Rve);g4r=r(F0t,"vision-encoder-decoder"),F0t.forEach(t),h4r=r(OSe," \u2014 "),XH=n(OSe,"A",{href:!0});var T0t=s(XH);p4r=r(T0t,"TFVisionEncoderDecoderModel"),T0t.forEach(t),u4r=r(OSe," (Vision Encoder decoder model)"),OSe.forEach(t),v0t.forEach(t),_4r=i(xl),T(A4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),bIe=i(f),pc=n(f,"H2",{class:!0});var MNe=s(pc);y4=n(MNe,"A",{id:!0,class:!0,href:!0});var M0t=s(y4);Bve=n(M0t,"SPAN",{});var E0t=s(Bve);T(bL.$$.fragment,E0t),E0t.forEach(t),M0t.forEach(t),b4r=i(MNe),Pve=n(MNe,"SPAN",{});var C0t=s(Pve);v4r=r(C0t,"TFAutoModelForSpeechSeq2Seq"),C0t.forEach(t),MNe.forEach(t),vIe=i(f),dr=n(f,"DIV",{class:!0});var $l=s(dr);T(vL.$$.fragment,$l),F4r=i($l),uc=n($l,"P",{});var UK=s(uc);T4r=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zH=n(UK,"A",{href:!0});var w0t=s(zH);M4r=r(w0t,"from_pretrained()"),w0t.forEach(t),E4r=r(UK," class method or the "),QH=n(UK,"A",{href:!0});var A0t=s(QH);C4r=r(A0t,"from_config()"),A0t.forEach(t),w4r=r(UK,` class
method.`),UK.forEach(t),A4r=i($l),FL=n($l,"P",{});var ENe=s(FL);y4r=r(ENe,"This class cannot be instantiated directly using "),Ive=n(ENe,"CODE",{});var y0t=s(Ive);L4r=r(y0t,"__init__()"),y0t.forEach(t),x4r=r(ENe," (throws an error)."),ENe.forEach(t),$4r=i($l),Pt=n($l,"DIV",{class:!0});var ow=s(Pt);T(TL.$$.fragment,ow),k4r=i(ow),qve=n(ow,"P",{});var L0t=s(qve);S4r=r(L0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),L0t.forEach(t),R4r=i(ow),_c=n(ow,"P",{});var JK=s(_c);B4r=r(JK,`Note:
Loading a model from its configuration file does `),Nve=n(JK,"STRONG",{});var x0t=s(Nve);P4r=r(x0t,"not"),x0t.forEach(t),I4r=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(JK,"A",{href:!0});var $0t=s(WH);q4r=r($0t,"from_pretrained()"),$0t.forEach(t),N4r=r(JK," to load the model weights."),JK.forEach(t),j4r=i(ow),T(L4.$$.fragment,ow),ow.forEach(t),D4r=i($l),Ir=n($l,"DIV",{class:!0});var kl=s(Ir);T(ML.$$.fragment,kl),G4r=i(kl),jve=n(kl,"P",{});var k0t=s(jve);O4r=r(k0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k0t.forEach(t),V4r=i(kl),ln=n(kl,"P",{});var rw=s(ln);X4r=r(rw,"The model class to instantiate is selected based on the "),Dve=n(rw,"CODE",{});var S0t=s(Dve);z4r=r(S0t,"model_type"),S0t.forEach(t),Q4r=r(rw,` property of the config object (either
passed as an argument or loaded from `),Gve=n(rw,"CODE",{});var R0t=s(Gve);W4r=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),H4r=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(rw,"CODE",{});var B0t=s(Ove);U4r=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),J4r=r(rw,":"),rw.forEach(t),Y4r=i(kl),Vve=n(kl,"UL",{});var P0t=s(Vve);x4=n(P0t,"LI",{});var VSe=s(x4);Xve=n(VSe,"STRONG",{});var I0t=s(Xve);K4r=r(I0t,"speech_to_text"),I0t.forEach(t),Z4r=r(VSe," \u2014 "),HH=n(VSe,"A",{href:!0});var q0t=s(HH);eEr=r(q0t,"TFSpeech2TextForConditionalGeneration"),q0t.forEach(t),oEr=r(VSe," (Speech2Text model)"),VSe.forEach(t),P0t.forEach(t),rEr=i(kl),T($4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),FIe=i(f),bc=n(f,"H2",{class:!0});var CNe=s(bc);k4=n(CNe,"A",{id:!0,class:!0,href:!0});var N0t=s(k4);zve=n(N0t,"SPAN",{});var j0t=s(zve);T(EL.$$.fragment,j0t),j0t.forEach(t),N0t.forEach(t),tEr=i(CNe),Qve=n(CNe,"SPAN",{});var D0t=s(Qve);aEr=r(D0t,"FlaxAutoModel"),D0t.forEach(t),CNe.forEach(t),TIe=i(f),cr=n(f,"DIV",{class:!0});var Sl=s(cr);T(CL.$$.fragment,Sl),nEr=i(Sl),vc=n(Sl,"P",{});var YK=s(vc);sEr=r(YK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UH=n(YK,"A",{href:!0});var G0t=s(UH);lEr=r(G0t,"from_pretrained()"),G0t.forEach(t),iEr=r(YK," class method or the "),JH=n(YK,"A",{href:!0});var O0t=s(JH);dEr=r(O0t,"from_config()"),O0t.forEach(t),cEr=r(YK,` class
method.`),YK.forEach(t),fEr=i(Sl),wL=n(Sl,"P",{});var wNe=s(wL);mEr=r(wNe,"This class cannot be instantiated directly using "),Wve=n(wNe,"CODE",{});var V0t=s(Wve);gEr=r(V0t,"__init__()"),V0t.forEach(t),hEr=r(wNe," (throws an error)."),wNe.forEach(t),pEr=i(Sl),It=n(Sl,"DIV",{class:!0});var tw=s(It);T(AL.$$.fragment,tw),uEr=i(tw),Hve=n(tw,"P",{});var X0t=s(Hve);_Er=r(X0t,"Instantiates one of the base model classes of the library from a configuration."),X0t.forEach(t),bEr=i(tw),Fc=n(tw,"P",{});var KK=s(Fc);vEr=r(KK,`Note:
Loading a model from its configuration file does `),Uve=n(KK,"STRONG",{});var z0t=s(Uve);FEr=r(z0t,"not"),z0t.forEach(t),TEr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(KK,"A",{href:!0});var Q0t=s(YH);MEr=r(Q0t,"from_pretrained()"),Q0t.forEach(t),EEr=r(KK," to load the model weights."),KK.forEach(t),CEr=i(tw),T(S4.$$.fragment,tw),tw.forEach(t),wEr=i(Sl),qr=n(Sl,"DIV",{class:!0});var Rl=s(qr);T(yL.$$.fragment,Rl),AEr=i(Rl),Jve=n(Rl,"P",{});var W0t=s(Jve);yEr=r(W0t,"Instantiate one of the base model classes of the library from a pretrained model."),W0t.forEach(t),LEr=i(Rl),dn=n(Rl,"P",{});var aw=s(dn);xEr=r(aw,"The model class to instantiate is selected based on the "),Yve=n(aw,"CODE",{});var H0t=s(Yve);$Er=r(H0t,"model_type"),H0t.forEach(t),kEr=r(aw,` property of the config object (either
passed as an argument or loaded from `),Kve=n(aw,"CODE",{});var U0t=s(Kve);SEr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),REr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(aw,"CODE",{});var J0t=s(Zve);BEr=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),PEr=r(aw,":"),aw.forEach(t),IEr=i(Rl),ee=n(Rl,"UL",{});var te=s(ee);R4=n(te,"LI",{});var XSe=s(R4);eFe=n(XSe,"STRONG",{});var Y0t=s(eFe);qEr=r(Y0t,"albert"),Y0t.forEach(t),NEr=r(XSe," \u2014 "),KH=n(XSe,"A",{href:!0});var K0t=s(KH);jEr=r(K0t,"FlaxAlbertModel"),K0t.forEach(t),DEr=r(XSe," (ALBERT model)"),XSe.forEach(t),GEr=i(te),B4=n(te,"LI",{});var zSe=s(B4);oFe=n(zSe,"STRONG",{});var Z0t=s(oFe);OEr=r(Z0t,"bart"),Z0t.forEach(t),VEr=r(zSe," \u2014 "),ZH=n(zSe,"A",{href:!0});var eTt=s(ZH);XEr=r(eTt,"FlaxBartModel"),eTt.forEach(t),zEr=r(zSe," (BART model)"),zSe.forEach(t),QEr=i(te),P4=n(te,"LI",{});var QSe=s(P4);rFe=n(QSe,"STRONG",{});var oTt=s(rFe);WEr=r(oTt,"beit"),oTt.forEach(t),HEr=r(QSe," \u2014 "),eU=n(QSe,"A",{href:!0});var rTt=s(eU);UEr=r(rTt,"FlaxBeitModel"),rTt.forEach(t),JEr=r(QSe," (BEiT model)"),QSe.forEach(t),YEr=i(te),I4=n(te,"LI",{});var WSe=s(I4);tFe=n(WSe,"STRONG",{});var tTt=s(tFe);KEr=r(tTt,"bert"),tTt.forEach(t),ZEr=r(WSe," \u2014 "),oU=n(WSe,"A",{href:!0});var aTt=s(oU);e5r=r(aTt,"FlaxBertModel"),aTt.forEach(t),o5r=r(WSe," (BERT model)"),WSe.forEach(t),r5r=i(te),q4=n(te,"LI",{});var HSe=s(q4);aFe=n(HSe,"STRONG",{});var nTt=s(aFe);t5r=r(nTt,"big_bird"),nTt.forEach(t),a5r=r(HSe," \u2014 "),rU=n(HSe,"A",{href:!0});var sTt=s(rU);n5r=r(sTt,"FlaxBigBirdModel"),sTt.forEach(t),s5r=r(HSe," (BigBird model)"),HSe.forEach(t),l5r=i(te),N4=n(te,"LI",{});var USe=s(N4);nFe=n(USe,"STRONG",{});var lTt=s(nFe);i5r=r(lTt,"blenderbot"),lTt.forEach(t),d5r=r(USe," \u2014 "),tU=n(USe,"A",{href:!0});var iTt=s(tU);c5r=r(iTt,"FlaxBlenderbotModel"),iTt.forEach(t),f5r=r(USe," (Blenderbot model)"),USe.forEach(t),m5r=i(te),j4=n(te,"LI",{});var JSe=s(j4);sFe=n(JSe,"STRONG",{});var dTt=s(sFe);g5r=r(dTt,"blenderbot-small"),dTt.forEach(t),h5r=r(JSe," \u2014 "),aU=n(JSe,"A",{href:!0});var cTt=s(aU);p5r=r(cTt,"FlaxBlenderbotSmallModel"),cTt.forEach(t),u5r=r(JSe," (BlenderbotSmall model)"),JSe.forEach(t),_5r=i(te),D4=n(te,"LI",{});var YSe=s(D4);lFe=n(YSe,"STRONG",{});var fTt=s(lFe);b5r=r(fTt,"clip"),fTt.forEach(t),v5r=r(YSe," \u2014 "),nU=n(YSe,"A",{href:!0});var mTt=s(nU);F5r=r(mTt,"FlaxCLIPModel"),mTt.forEach(t),T5r=r(YSe," (CLIP model)"),YSe.forEach(t),M5r=i(te),G4=n(te,"LI",{});var KSe=s(G4);iFe=n(KSe,"STRONG",{});var gTt=s(iFe);E5r=r(gTt,"distilbert"),gTt.forEach(t),C5r=r(KSe," \u2014 "),sU=n(KSe,"A",{href:!0});var hTt=s(sU);w5r=r(hTt,"FlaxDistilBertModel"),hTt.forEach(t),A5r=r(KSe," (DistilBERT model)"),KSe.forEach(t),y5r=i(te),O4=n(te,"LI",{});var ZSe=s(O4);dFe=n(ZSe,"STRONG",{});var pTt=s(dFe);L5r=r(pTt,"electra"),pTt.forEach(t),x5r=r(ZSe," \u2014 "),lU=n(ZSe,"A",{href:!0});var uTt=s(lU);$5r=r(uTt,"FlaxElectraModel"),uTt.forEach(t),k5r=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),S5r=i(te),V4=n(te,"LI",{});var eRe=s(V4);cFe=n(eRe,"STRONG",{});var _Tt=s(cFe);R5r=r(_Tt,"gpt2"),_Tt.forEach(t),B5r=r(eRe," \u2014 "),iU=n(eRe,"A",{href:!0});var bTt=s(iU);P5r=r(bTt,"FlaxGPT2Model"),bTt.forEach(t),I5r=r(eRe," (OpenAI GPT-2 model)"),eRe.forEach(t),q5r=i(te),X4=n(te,"LI",{});var oRe=s(X4);fFe=n(oRe,"STRONG",{});var vTt=s(fFe);N5r=r(vTt,"gpt_neo"),vTt.forEach(t),j5r=r(oRe," \u2014 "),dU=n(oRe,"A",{href:!0});var FTt=s(dU);D5r=r(FTt,"FlaxGPTNeoModel"),FTt.forEach(t),G5r=r(oRe," (GPT Neo model)"),oRe.forEach(t),O5r=i(te),z4=n(te,"LI",{});var rRe=s(z4);mFe=n(rRe,"STRONG",{});var TTt=s(mFe);V5r=r(TTt,"gptj"),TTt.forEach(t),X5r=r(rRe," \u2014 "),cU=n(rRe,"A",{href:!0});var MTt=s(cU);z5r=r(MTt,"FlaxGPTJModel"),MTt.forEach(t),Q5r=r(rRe," (GPT-J model)"),rRe.forEach(t),W5r=i(te),Q4=n(te,"LI",{});var tRe=s(Q4);gFe=n(tRe,"STRONG",{});var ETt=s(gFe);H5r=r(ETt,"marian"),ETt.forEach(t),U5r=r(tRe," \u2014 "),fU=n(tRe,"A",{href:!0});var CTt=s(fU);J5r=r(CTt,"FlaxMarianModel"),CTt.forEach(t),Y5r=r(tRe," (Marian model)"),tRe.forEach(t),K5r=i(te),W4=n(te,"LI",{});var aRe=s(W4);hFe=n(aRe,"STRONG",{});var wTt=s(hFe);Z5r=r(wTt,"mbart"),wTt.forEach(t),eCr=r(aRe," \u2014 "),mU=n(aRe,"A",{href:!0});var ATt=s(mU);oCr=r(ATt,"FlaxMBartModel"),ATt.forEach(t),rCr=r(aRe," (mBART model)"),aRe.forEach(t),tCr=i(te),H4=n(te,"LI",{});var nRe=s(H4);pFe=n(nRe,"STRONG",{});var yTt=s(pFe);aCr=r(yTt,"mt5"),yTt.forEach(t),nCr=r(nRe," \u2014 "),gU=n(nRe,"A",{href:!0});var LTt=s(gU);sCr=r(LTt,"FlaxMT5Model"),LTt.forEach(t),lCr=r(nRe," (mT5 model)"),nRe.forEach(t),iCr=i(te),U4=n(te,"LI",{});var sRe=s(U4);uFe=n(sRe,"STRONG",{});var xTt=s(uFe);dCr=r(xTt,"opt"),xTt.forEach(t),cCr=r(sRe," \u2014 "),hU=n(sRe,"A",{href:!0});var $Tt=s(hU);fCr=r($Tt,"FlaxOPTModel"),$Tt.forEach(t),mCr=r(sRe," (OPT model)"),sRe.forEach(t),gCr=i(te),J4=n(te,"LI",{});var lRe=s(J4);_Fe=n(lRe,"STRONG",{});var kTt=s(_Fe);hCr=r(kTt,"pegasus"),kTt.forEach(t),pCr=r(lRe," \u2014 "),pU=n(lRe,"A",{href:!0});var STt=s(pU);uCr=r(STt,"FlaxPegasusModel"),STt.forEach(t),_Cr=r(lRe," (Pegasus model)"),lRe.forEach(t),bCr=i(te),Y4=n(te,"LI",{});var iRe=s(Y4);bFe=n(iRe,"STRONG",{});var RTt=s(bFe);vCr=r(RTt,"roberta"),RTt.forEach(t),FCr=r(iRe," \u2014 "),uU=n(iRe,"A",{href:!0});var BTt=s(uU);TCr=r(BTt,"FlaxRobertaModel"),BTt.forEach(t),MCr=r(iRe," (RoBERTa model)"),iRe.forEach(t),ECr=i(te),K4=n(te,"LI",{});var dRe=s(K4);vFe=n(dRe,"STRONG",{});var PTt=s(vFe);CCr=r(PTt,"roformer"),PTt.forEach(t),wCr=r(dRe," \u2014 "),_U=n(dRe,"A",{href:!0});var ITt=s(_U);ACr=r(ITt,"FlaxRoFormerModel"),ITt.forEach(t),yCr=r(dRe," (RoFormer model)"),dRe.forEach(t),LCr=i(te),Z4=n(te,"LI",{});var cRe=s(Z4);FFe=n(cRe,"STRONG",{});var qTt=s(FFe);xCr=r(qTt,"t5"),qTt.forEach(t),$Cr=r(cRe," \u2014 "),bU=n(cRe,"A",{href:!0});var NTt=s(bU);kCr=r(NTt,"FlaxT5Model"),NTt.forEach(t),SCr=r(cRe," (T5 model)"),cRe.forEach(t),RCr=i(te),eE=n(te,"LI",{});var fRe=s(eE);TFe=n(fRe,"STRONG",{});var jTt=s(TFe);BCr=r(jTt,"vision-text-dual-encoder"),jTt.forEach(t),PCr=r(fRe," \u2014 "),vU=n(fRe,"A",{href:!0});var DTt=s(vU);ICr=r(DTt,"FlaxVisionTextDualEncoderModel"),DTt.forEach(t),qCr=r(fRe," (VisionTextDualEncoder model)"),fRe.forEach(t),NCr=i(te),oE=n(te,"LI",{});var mRe=s(oE);MFe=n(mRe,"STRONG",{});var GTt=s(MFe);jCr=r(GTt,"vit"),GTt.forEach(t),DCr=r(mRe," \u2014 "),FU=n(mRe,"A",{href:!0});var OTt=s(FU);GCr=r(OTt,"FlaxViTModel"),OTt.forEach(t),OCr=r(mRe," (ViT model)"),mRe.forEach(t),VCr=i(te),rE=n(te,"LI",{});var gRe=s(rE);EFe=n(gRe,"STRONG",{});var VTt=s(EFe);XCr=r(VTt,"wav2vec2"),VTt.forEach(t),zCr=r(gRe," \u2014 "),TU=n(gRe,"A",{href:!0});var XTt=s(TU);QCr=r(XTt,"FlaxWav2Vec2Model"),XTt.forEach(t),WCr=r(gRe," (Wav2Vec2 model)"),gRe.forEach(t),HCr=i(te),tE=n(te,"LI",{});var hRe=s(tE);CFe=n(hRe,"STRONG",{});var zTt=s(CFe);UCr=r(zTt,"xglm"),zTt.forEach(t),JCr=r(hRe," \u2014 "),MU=n(hRe,"A",{href:!0});var QTt=s(MU);YCr=r(QTt,"FlaxXGLMModel"),QTt.forEach(t),KCr=r(hRe," (XGLM model)"),hRe.forEach(t),ZCr=i(te),aE=n(te,"LI",{});var pRe=s(aE);wFe=n(pRe,"STRONG",{});var WTt=s(wFe);e3r=r(WTt,"xlm-roberta"),WTt.forEach(t),o3r=r(pRe," \u2014 "),EU=n(pRe,"A",{href:!0});var HTt=s(EU);r3r=r(HTt,"FlaxXLMRobertaModel"),HTt.forEach(t),t3r=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),te.forEach(t),a3r=i(Rl),T(nE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),MIe=i(f),Tc=n(f,"H2",{class:!0});var ANe=s(Tc);sE=n(ANe,"A",{id:!0,class:!0,href:!0});var UTt=s(sE);AFe=n(UTt,"SPAN",{});var JTt=s(AFe);T(LL.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),n3r=i(ANe),yFe=n(ANe,"SPAN",{});var YTt=s(yFe);s3r=r(YTt,"FlaxAutoModelForCausalLM"),YTt.forEach(t),ANe.forEach(t),EIe=i(f),fr=n(f,"DIV",{class:!0});var Bl=s(fr);T(xL.$$.fragment,Bl),l3r=i(Bl),Mc=n(Bl,"P",{});var ZK=s(Mc);i3r=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CU=n(ZK,"A",{href:!0});var KTt=s(CU);d3r=r(KTt,"from_pretrained()"),KTt.forEach(t),c3r=r(ZK," class method or the "),wU=n(ZK,"A",{href:!0});var ZTt=s(wU);f3r=r(ZTt,"from_config()"),ZTt.forEach(t),m3r=r(ZK,` class
method.`),ZK.forEach(t),g3r=i(Bl),$L=n(Bl,"P",{});var yNe=s($L);h3r=r(yNe,"This class cannot be instantiated directly using "),LFe=n(yNe,"CODE",{});var e7t=s(LFe);p3r=r(e7t,"__init__()"),e7t.forEach(t),u3r=r(yNe," (throws an error)."),yNe.forEach(t),_3r=i(Bl),qt=n(Bl,"DIV",{class:!0});var nw=s(qt);T(kL.$$.fragment,nw),b3r=i(nw),xFe=n(nw,"P",{});var o7t=s(xFe);v3r=r(o7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),o7t.forEach(t),F3r=i(nw),Ec=n(nw,"P",{});var eZ=s(Ec);T3r=r(eZ,`Note:
Loading a model from its configuration file does `),$Fe=n(eZ,"STRONG",{});var r7t=s($Fe);M3r=r(r7t,"not"),r7t.forEach(t),E3r=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(eZ,"A",{href:!0});var t7t=s(AU);C3r=r(t7t,"from_pretrained()"),t7t.forEach(t),w3r=r(eZ," to load the model weights."),eZ.forEach(t),A3r=i(nw),T(lE.$$.fragment,nw),nw.forEach(t),y3r=i(Bl),Nr=n(Bl,"DIV",{class:!0});var Pl=s(Nr);T(SL.$$.fragment,Pl),L3r=i(Pl),kFe=n(Pl,"P",{});var a7t=s(kFe);x3r=r(a7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a7t.forEach(t),$3r=i(Pl),cn=n(Pl,"P",{});var sw=s(cn);k3r=r(sw,"The model class to instantiate is selected based on the "),SFe=n(sw,"CODE",{});var n7t=s(SFe);S3r=r(n7t,"model_type"),n7t.forEach(t),R3r=r(sw,` property of the config object (either
passed as an argument or loaded from `),RFe=n(sw,"CODE",{});var s7t=s(RFe);B3r=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),P3r=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(sw,"CODE",{});var l7t=s(BFe);I3r=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),q3r=r(sw,":"),sw.forEach(t),N3r=i(Pl),Le=n(Pl,"UL",{});var Be=s(Le);iE=n(Be,"LI",{});var uRe=s(iE);PFe=n(uRe,"STRONG",{});var i7t=s(PFe);j3r=r(i7t,"bart"),i7t.forEach(t),D3r=r(uRe," \u2014 "),yU=n(uRe,"A",{href:!0});var d7t=s(yU);G3r=r(d7t,"FlaxBartForCausalLM"),d7t.forEach(t),O3r=r(uRe," (BART model)"),uRe.forEach(t),V3r=i(Be),dE=n(Be,"LI",{});var _Re=s(dE);IFe=n(_Re,"STRONG",{});var c7t=s(IFe);X3r=r(c7t,"bert"),c7t.forEach(t),z3r=r(_Re," \u2014 "),LU=n(_Re,"A",{href:!0});var f7t=s(LU);Q3r=r(f7t,"FlaxBertForCausalLM"),f7t.forEach(t),W3r=r(_Re," (BERT model)"),_Re.forEach(t),H3r=i(Be),cE=n(Be,"LI",{});var bRe=s(cE);qFe=n(bRe,"STRONG",{});var m7t=s(qFe);U3r=r(m7t,"big_bird"),m7t.forEach(t),J3r=r(bRe," \u2014 "),xU=n(bRe,"A",{href:!0});var g7t=s(xU);Y3r=r(g7t,"FlaxBigBirdForCausalLM"),g7t.forEach(t),K3r=r(bRe," (BigBird model)"),bRe.forEach(t),Z3r=i(Be),fE=n(Be,"LI",{});var vRe=s(fE);NFe=n(vRe,"STRONG",{});var h7t=s(NFe);ewr=r(h7t,"electra"),h7t.forEach(t),owr=r(vRe," \u2014 "),$U=n(vRe,"A",{href:!0});var p7t=s($U);rwr=r(p7t,"FlaxElectraForCausalLM"),p7t.forEach(t),twr=r(vRe," (ELECTRA model)"),vRe.forEach(t),awr=i(Be),mE=n(Be,"LI",{});var FRe=s(mE);jFe=n(FRe,"STRONG",{});var u7t=s(jFe);nwr=r(u7t,"gpt2"),u7t.forEach(t),swr=r(FRe," \u2014 "),kU=n(FRe,"A",{href:!0});var _7t=s(kU);lwr=r(_7t,"FlaxGPT2LMHeadModel"),_7t.forEach(t),iwr=r(FRe," (OpenAI GPT-2 model)"),FRe.forEach(t),dwr=i(Be),gE=n(Be,"LI",{});var TRe=s(gE);DFe=n(TRe,"STRONG",{});var b7t=s(DFe);cwr=r(b7t,"gpt_neo"),b7t.forEach(t),fwr=r(TRe," \u2014 "),SU=n(TRe,"A",{href:!0});var v7t=s(SU);mwr=r(v7t,"FlaxGPTNeoForCausalLM"),v7t.forEach(t),gwr=r(TRe," (GPT Neo model)"),TRe.forEach(t),hwr=i(Be),hE=n(Be,"LI",{});var MRe=s(hE);GFe=n(MRe,"STRONG",{});var F7t=s(GFe);pwr=r(F7t,"gptj"),F7t.forEach(t),uwr=r(MRe," \u2014 "),RU=n(MRe,"A",{href:!0});var T7t=s(RU);_wr=r(T7t,"FlaxGPTJForCausalLM"),T7t.forEach(t),bwr=r(MRe," (GPT-J model)"),MRe.forEach(t),vwr=i(Be),pE=n(Be,"LI",{});var ERe=s(pE);OFe=n(ERe,"STRONG",{});var M7t=s(OFe);Fwr=r(M7t,"opt"),M7t.forEach(t),Twr=r(ERe," \u2014 "),BU=n(ERe,"A",{href:!0});var E7t=s(BU);Mwr=r(E7t,"FlaxOPTForCausalLM"),E7t.forEach(t),Ewr=r(ERe," (OPT model)"),ERe.forEach(t),Cwr=i(Be),uE=n(Be,"LI",{});var CRe=s(uE);VFe=n(CRe,"STRONG",{});var C7t=s(VFe);wwr=r(C7t,"roberta"),C7t.forEach(t),Awr=r(CRe," \u2014 "),PU=n(CRe,"A",{href:!0});var w7t=s(PU);ywr=r(w7t,"FlaxRobertaForCausalLM"),w7t.forEach(t),Lwr=r(CRe," (RoBERTa model)"),CRe.forEach(t),xwr=i(Be),_E=n(Be,"LI",{});var wRe=s(_E);XFe=n(wRe,"STRONG",{});var A7t=s(XFe);$wr=r(A7t,"xglm"),A7t.forEach(t),kwr=r(wRe," \u2014 "),IU=n(wRe,"A",{href:!0});var y7t=s(IU);Swr=r(y7t,"FlaxXGLMForCausalLM"),y7t.forEach(t),Rwr=r(wRe," (XGLM model)"),wRe.forEach(t),Be.forEach(t),Bwr=i(Pl),T(bE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),CIe=i(f),Cc=n(f,"H2",{class:!0});var LNe=s(Cc);vE=n(LNe,"A",{id:!0,class:!0,href:!0});var L7t=s(vE);zFe=n(L7t,"SPAN",{});var x7t=s(zFe);T(RL.$$.fragment,x7t),x7t.forEach(t),L7t.forEach(t),Pwr=i(LNe),QFe=n(LNe,"SPAN",{});var $7t=s(QFe);Iwr=r($7t,"FlaxAutoModelForPreTraining"),$7t.forEach(t),LNe.forEach(t),wIe=i(f),mr=n(f,"DIV",{class:!0});var Il=s(mr);T(BL.$$.fragment,Il),qwr=i(Il),wc=n(Il,"P",{});var oZ=s(wc);Nwr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qU=n(oZ,"A",{href:!0});var k7t=s(qU);jwr=r(k7t,"from_pretrained()"),k7t.forEach(t),Dwr=r(oZ," class method or the "),NU=n(oZ,"A",{href:!0});var S7t=s(NU);Gwr=r(S7t,"from_config()"),S7t.forEach(t),Owr=r(oZ,` class
method.`),oZ.forEach(t),Vwr=i(Il),PL=n(Il,"P",{});var xNe=s(PL);Xwr=r(xNe,"This class cannot be instantiated directly using "),WFe=n(xNe,"CODE",{});var R7t=s(WFe);zwr=r(R7t,"__init__()"),R7t.forEach(t),Qwr=r(xNe," (throws an error)."),xNe.forEach(t),Wwr=i(Il),Nt=n(Il,"DIV",{class:!0});var lw=s(Nt);T(IL.$$.fragment,lw),Hwr=i(lw),HFe=n(lw,"P",{});var B7t=s(HFe);Uwr=r(B7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B7t.forEach(t),Jwr=i(lw),Ac=n(lw,"P",{});var rZ=s(Ac);Ywr=r(rZ,`Note:
Loading a model from its configuration file does `),UFe=n(rZ,"STRONG",{});var P7t=s(UFe);Kwr=r(P7t,"not"),P7t.forEach(t),Zwr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(rZ,"A",{href:!0});var I7t=s(jU);eAr=r(I7t,"from_pretrained()"),I7t.forEach(t),oAr=r(rZ," to load the model weights."),rZ.forEach(t),rAr=i(lw),T(FE.$$.fragment,lw),lw.forEach(t),tAr=i(Il),jr=n(Il,"DIV",{class:!0});var ql=s(jr);T(qL.$$.fragment,ql),aAr=i(ql),JFe=n(ql,"P",{});var q7t=s(JFe);nAr=r(q7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),q7t.forEach(t),sAr=i(ql),fn=n(ql,"P",{});var iw=s(fn);lAr=r(iw,"The model class to instantiate is selected based on the "),YFe=n(iw,"CODE",{});var N7t=s(YFe);iAr=r(N7t,"model_type"),N7t.forEach(t),dAr=r(iw,` property of the config object (either
passed as an argument or loaded from `),KFe=n(iw,"CODE",{});var j7t=s(KFe);cAr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),fAr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(iw,"CODE",{});var D7t=s(ZFe);mAr=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),gAr=r(iw,":"),iw.forEach(t),hAr=i(ql),Me=n(ql,"UL",{});var we=s(Me);TE=n(we,"LI",{});var ARe=s(TE);e0e=n(ARe,"STRONG",{});var G7t=s(e0e);pAr=r(G7t,"albert"),G7t.forEach(t),uAr=r(ARe," \u2014 "),DU=n(ARe,"A",{href:!0});var O7t=s(DU);_Ar=r(O7t,"FlaxAlbertForPreTraining"),O7t.forEach(t),bAr=r(ARe," (ALBERT model)"),ARe.forEach(t),vAr=i(we),ME=n(we,"LI",{});var yRe=s(ME);o0e=n(yRe,"STRONG",{});var V7t=s(o0e);FAr=r(V7t,"bart"),V7t.forEach(t),TAr=r(yRe," \u2014 "),GU=n(yRe,"A",{href:!0});var X7t=s(GU);MAr=r(X7t,"FlaxBartForConditionalGeneration"),X7t.forEach(t),EAr=r(yRe," (BART model)"),yRe.forEach(t),CAr=i(we),EE=n(we,"LI",{});var LRe=s(EE);r0e=n(LRe,"STRONG",{});var z7t=s(r0e);wAr=r(z7t,"bert"),z7t.forEach(t),AAr=r(LRe," \u2014 "),OU=n(LRe,"A",{href:!0});var Q7t=s(OU);yAr=r(Q7t,"FlaxBertForPreTraining"),Q7t.forEach(t),LAr=r(LRe," (BERT model)"),LRe.forEach(t),xAr=i(we),CE=n(we,"LI",{});var xRe=s(CE);t0e=n(xRe,"STRONG",{});var W7t=s(t0e);$Ar=r(W7t,"big_bird"),W7t.forEach(t),kAr=r(xRe," \u2014 "),VU=n(xRe,"A",{href:!0});var H7t=s(VU);SAr=r(H7t,"FlaxBigBirdForPreTraining"),H7t.forEach(t),RAr=r(xRe," (BigBird model)"),xRe.forEach(t),BAr=i(we),wE=n(we,"LI",{});var $Re=s(wE);a0e=n($Re,"STRONG",{});var U7t=s(a0e);PAr=r(U7t,"electra"),U7t.forEach(t),IAr=r($Re," \u2014 "),XU=n($Re,"A",{href:!0});var J7t=s(XU);qAr=r(J7t,"FlaxElectraForPreTraining"),J7t.forEach(t),NAr=r($Re," (ELECTRA model)"),$Re.forEach(t),jAr=i(we),AE=n(we,"LI",{});var kRe=s(AE);n0e=n(kRe,"STRONG",{});var Y7t=s(n0e);DAr=r(Y7t,"mbart"),Y7t.forEach(t),GAr=r(kRe," \u2014 "),zU=n(kRe,"A",{href:!0});var K7t=s(zU);OAr=r(K7t,"FlaxMBartForConditionalGeneration"),K7t.forEach(t),VAr=r(kRe," (mBART model)"),kRe.forEach(t),XAr=i(we),yE=n(we,"LI",{});var SRe=s(yE);s0e=n(SRe,"STRONG",{});var Z7t=s(s0e);zAr=r(Z7t,"mt5"),Z7t.forEach(t),QAr=r(SRe," \u2014 "),QU=n(SRe,"A",{href:!0});var eMt=s(QU);WAr=r(eMt,"FlaxMT5ForConditionalGeneration"),eMt.forEach(t),HAr=r(SRe," (mT5 model)"),SRe.forEach(t),UAr=i(we),LE=n(we,"LI",{});var RRe=s(LE);l0e=n(RRe,"STRONG",{});var oMt=s(l0e);JAr=r(oMt,"roberta"),oMt.forEach(t),YAr=r(RRe," \u2014 "),WU=n(RRe,"A",{href:!0});var rMt=s(WU);KAr=r(rMt,"FlaxRobertaForMaskedLM"),rMt.forEach(t),ZAr=r(RRe," (RoBERTa model)"),RRe.forEach(t),e6r=i(we),xE=n(we,"LI",{});var BRe=s(xE);i0e=n(BRe,"STRONG",{});var tMt=s(i0e);o6r=r(tMt,"roformer"),tMt.forEach(t),r6r=r(BRe," \u2014 "),HU=n(BRe,"A",{href:!0});var aMt=s(HU);t6r=r(aMt,"FlaxRoFormerForMaskedLM"),aMt.forEach(t),a6r=r(BRe," (RoFormer model)"),BRe.forEach(t),n6r=i(we),$E=n(we,"LI",{});var PRe=s($E);d0e=n(PRe,"STRONG",{});var nMt=s(d0e);s6r=r(nMt,"t5"),nMt.forEach(t),l6r=r(PRe," \u2014 "),UU=n(PRe,"A",{href:!0});var sMt=s(UU);i6r=r(sMt,"FlaxT5ForConditionalGeneration"),sMt.forEach(t),d6r=r(PRe," (T5 model)"),PRe.forEach(t),c6r=i(we),kE=n(we,"LI",{});var IRe=s(kE);c0e=n(IRe,"STRONG",{});var lMt=s(c0e);f6r=r(lMt,"wav2vec2"),lMt.forEach(t),m6r=r(IRe," \u2014 "),JU=n(IRe,"A",{href:!0});var iMt=s(JU);g6r=r(iMt,"FlaxWav2Vec2ForPreTraining"),iMt.forEach(t),h6r=r(IRe," (Wav2Vec2 model)"),IRe.forEach(t),p6r=i(we),SE=n(we,"LI",{});var qRe=s(SE);f0e=n(qRe,"STRONG",{});var dMt=s(f0e);u6r=r(dMt,"xlm-roberta"),dMt.forEach(t),_6r=r(qRe," \u2014 "),YU=n(qRe,"A",{href:!0});var cMt=s(YU);b6r=r(cMt,"FlaxXLMRobertaForMaskedLM"),cMt.forEach(t),v6r=r(qRe," (XLM-RoBERTa model)"),qRe.forEach(t),we.forEach(t),F6r=i(ql),T(RE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),AIe=i(f),yc=n(f,"H2",{class:!0});var $Ne=s(yc);BE=n($Ne,"A",{id:!0,class:!0,href:!0});var fMt=s(BE);m0e=n(fMt,"SPAN",{});var mMt=s(m0e);T(NL.$$.fragment,mMt),mMt.forEach(t),fMt.forEach(t),T6r=i($Ne),g0e=n($Ne,"SPAN",{});var gMt=s(g0e);M6r=r(gMt,"FlaxAutoModelForMaskedLM"),gMt.forEach(t),$Ne.forEach(t),yIe=i(f),gr=n(f,"DIV",{class:!0});var Nl=s(gr);T(jL.$$.fragment,Nl),E6r=i(Nl),Lc=n(Nl,"P",{});var tZ=s(Lc);C6r=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KU=n(tZ,"A",{href:!0});var hMt=s(KU);w6r=r(hMt,"from_pretrained()"),hMt.forEach(t),A6r=r(tZ," class method or the "),ZU=n(tZ,"A",{href:!0});var pMt=s(ZU);y6r=r(pMt,"from_config()"),pMt.forEach(t),L6r=r(tZ,` class
method.`),tZ.forEach(t),x6r=i(Nl),DL=n(Nl,"P",{});var kNe=s(DL);$6r=r(kNe,"This class cannot be instantiated directly using "),h0e=n(kNe,"CODE",{});var uMt=s(h0e);k6r=r(uMt,"__init__()"),uMt.forEach(t),S6r=r(kNe," (throws an error)."),kNe.forEach(t),R6r=i(Nl),jt=n(Nl,"DIV",{class:!0});var dw=s(jt);T(GL.$$.fragment,dw),B6r=i(dw),p0e=n(dw,"P",{});var _Mt=s(p0e);P6r=r(_Mt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Mt.forEach(t),I6r=i(dw),xc=n(dw,"P",{});var aZ=s(xc);q6r=r(aZ,`Note:
Loading a model from its configuration file does `),u0e=n(aZ,"STRONG",{});var bMt=s(u0e);N6r=r(bMt,"not"),bMt.forEach(t),j6r=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(aZ,"A",{href:!0});var vMt=s(eJ);D6r=r(vMt,"from_pretrained()"),vMt.forEach(t),G6r=r(aZ," to load the model weights."),aZ.forEach(t),O6r=i(dw),T(PE.$$.fragment,dw),dw.forEach(t),V6r=i(Nl),Dr=n(Nl,"DIV",{class:!0});var jl=s(Dr);T(OL.$$.fragment,jl),X6r=i(jl),_0e=n(jl,"P",{});var FMt=s(_0e);z6r=r(FMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FMt.forEach(t),Q6r=i(jl),mn=n(jl,"P",{});var cw=s(mn);W6r=r(cw,"The model class to instantiate is selected based on the "),b0e=n(cw,"CODE",{});var TMt=s(b0e);H6r=r(TMt,"model_type"),TMt.forEach(t),U6r=r(cw,` property of the config object (either
passed as an argument or loaded from `),v0e=n(cw,"CODE",{});var MMt=s(v0e);J6r=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),Y6r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(cw,"CODE",{});var EMt=s(F0e);K6r=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),Z6r=r(cw,":"),cw.forEach(t),eyr=i(jl),xe=n(jl,"UL",{});var Pe=s(xe);IE=n(Pe,"LI",{});var NRe=s(IE);T0e=n(NRe,"STRONG",{});var CMt=s(T0e);oyr=r(CMt,"albert"),CMt.forEach(t),ryr=r(NRe," \u2014 "),oJ=n(NRe,"A",{href:!0});var wMt=s(oJ);tyr=r(wMt,"FlaxAlbertForMaskedLM"),wMt.forEach(t),ayr=r(NRe," (ALBERT model)"),NRe.forEach(t),nyr=i(Pe),qE=n(Pe,"LI",{});var jRe=s(qE);M0e=n(jRe,"STRONG",{});var AMt=s(M0e);syr=r(AMt,"bart"),AMt.forEach(t),lyr=r(jRe," \u2014 "),rJ=n(jRe,"A",{href:!0});var yMt=s(rJ);iyr=r(yMt,"FlaxBartForConditionalGeneration"),yMt.forEach(t),dyr=r(jRe," (BART model)"),jRe.forEach(t),cyr=i(Pe),NE=n(Pe,"LI",{});var DRe=s(NE);E0e=n(DRe,"STRONG",{});var LMt=s(E0e);fyr=r(LMt,"bert"),LMt.forEach(t),myr=r(DRe," \u2014 "),tJ=n(DRe,"A",{href:!0});var xMt=s(tJ);gyr=r(xMt,"FlaxBertForMaskedLM"),xMt.forEach(t),hyr=r(DRe," (BERT model)"),DRe.forEach(t),pyr=i(Pe),jE=n(Pe,"LI",{});var GRe=s(jE);C0e=n(GRe,"STRONG",{});var $Mt=s(C0e);uyr=r($Mt,"big_bird"),$Mt.forEach(t),_yr=r(GRe," \u2014 "),aJ=n(GRe,"A",{href:!0});var kMt=s(aJ);byr=r(kMt,"FlaxBigBirdForMaskedLM"),kMt.forEach(t),vyr=r(GRe," (BigBird model)"),GRe.forEach(t),Fyr=i(Pe),DE=n(Pe,"LI",{});var ORe=s(DE);w0e=n(ORe,"STRONG",{});var SMt=s(w0e);Tyr=r(SMt,"distilbert"),SMt.forEach(t),Myr=r(ORe," \u2014 "),nJ=n(ORe,"A",{href:!0});var RMt=s(nJ);Eyr=r(RMt,"FlaxDistilBertForMaskedLM"),RMt.forEach(t),Cyr=r(ORe," (DistilBERT model)"),ORe.forEach(t),wyr=i(Pe),GE=n(Pe,"LI",{});var VRe=s(GE);A0e=n(VRe,"STRONG",{});var BMt=s(A0e);Ayr=r(BMt,"electra"),BMt.forEach(t),yyr=r(VRe," \u2014 "),sJ=n(VRe,"A",{href:!0});var PMt=s(sJ);Lyr=r(PMt,"FlaxElectraForMaskedLM"),PMt.forEach(t),xyr=r(VRe," (ELECTRA model)"),VRe.forEach(t),$yr=i(Pe),OE=n(Pe,"LI",{});var XRe=s(OE);y0e=n(XRe,"STRONG",{});var IMt=s(y0e);kyr=r(IMt,"mbart"),IMt.forEach(t),Syr=r(XRe," \u2014 "),lJ=n(XRe,"A",{href:!0});var qMt=s(lJ);Ryr=r(qMt,"FlaxMBartForConditionalGeneration"),qMt.forEach(t),Byr=r(XRe," (mBART model)"),XRe.forEach(t),Pyr=i(Pe),VE=n(Pe,"LI",{});var zRe=s(VE);L0e=n(zRe,"STRONG",{});var NMt=s(L0e);Iyr=r(NMt,"roberta"),NMt.forEach(t),qyr=r(zRe," \u2014 "),iJ=n(zRe,"A",{href:!0});var jMt=s(iJ);Nyr=r(jMt,"FlaxRobertaForMaskedLM"),jMt.forEach(t),jyr=r(zRe," (RoBERTa model)"),zRe.forEach(t),Dyr=i(Pe),XE=n(Pe,"LI",{});var QRe=s(XE);x0e=n(QRe,"STRONG",{});var DMt=s(x0e);Gyr=r(DMt,"roformer"),DMt.forEach(t),Oyr=r(QRe," \u2014 "),dJ=n(QRe,"A",{href:!0});var GMt=s(dJ);Vyr=r(GMt,"FlaxRoFormerForMaskedLM"),GMt.forEach(t),Xyr=r(QRe," (RoFormer model)"),QRe.forEach(t),zyr=i(Pe),zE=n(Pe,"LI",{});var WRe=s(zE);$0e=n(WRe,"STRONG",{});var OMt=s($0e);Qyr=r(OMt,"xlm-roberta"),OMt.forEach(t),Wyr=r(WRe," \u2014 "),cJ=n(WRe,"A",{href:!0});var VMt=s(cJ);Hyr=r(VMt,"FlaxXLMRobertaForMaskedLM"),VMt.forEach(t),Uyr=r(WRe," (XLM-RoBERTa model)"),WRe.forEach(t),Pe.forEach(t),Jyr=i(jl),T(QE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),LIe=i(f),$c=n(f,"H2",{class:!0});var SNe=s($c);WE=n(SNe,"A",{id:!0,class:!0,href:!0});var XMt=s(WE);k0e=n(XMt,"SPAN",{});var zMt=s(k0e);T(VL.$$.fragment,zMt),zMt.forEach(t),XMt.forEach(t),Yyr=i(SNe),S0e=n(SNe,"SPAN",{});var QMt=s(S0e);Kyr=r(QMt,"FlaxAutoModelForSeq2SeqLM"),QMt.forEach(t),SNe.forEach(t),xIe=i(f),hr=n(f,"DIV",{class:!0});var Dl=s(hr);T(XL.$$.fragment,Dl),Zyr=i(Dl),kc=n(Dl,"P",{});var nZ=s(kc);eLr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fJ=n(nZ,"A",{href:!0});var WMt=s(fJ);oLr=r(WMt,"from_pretrained()"),WMt.forEach(t),rLr=r(nZ," class method or the "),mJ=n(nZ,"A",{href:!0});var HMt=s(mJ);tLr=r(HMt,"from_config()"),HMt.forEach(t),aLr=r(nZ,` class
method.`),nZ.forEach(t),nLr=i(Dl),zL=n(Dl,"P",{});var RNe=s(zL);sLr=r(RNe,"This class cannot be instantiated directly using "),R0e=n(RNe,"CODE",{});var UMt=s(R0e);lLr=r(UMt,"__init__()"),UMt.forEach(t),iLr=r(RNe," (throws an error)."),RNe.forEach(t),dLr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var fw=s(Dt);T(QL.$$.fragment,fw),cLr=i(fw),B0e=n(fw,"P",{});var JMt=s(B0e);fLr=r(JMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JMt.forEach(t),mLr=i(fw),Sc=n(fw,"P",{});var sZ=s(Sc);gLr=r(sZ,`Note:
Loading a model from its configuration file does `),P0e=n(sZ,"STRONG",{});var YMt=s(P0e);hLr=r(YMt,"not"),YMt.forEach(t),pLr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(sZ,"A",{href:!0});var KMt=s(gJ);uLr=r(KMt,"from_pretrained()"),KMt.forEach(t),_Lr=r(sZ," to load the model weights."),sZ.forEach(t),bLr=i(fw),T(HE.$$.fragment,fw),fw.forEach(t),vLr=i(Dl),Gr=n(Dl,"DIV",{class:!0});var Gl=s(Gr);T(WL.$$.fragment,Gl),FLr=i(Gl),I0e=n(Gl,"P",{});var ZMt=s(I0e);TLr=r(ZMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZMt.forEach(t),MLr=i(Gl),gn=n(Gl,"P",{});var mw=s(gn);ELr=r(mw,"The model class to instantiate is selected based on the "),q0e=n(mw,"CODE",{});var e4t=s(q0e);CLr=r(e4t,"model_type"),e4t.forEach(t),wLr=r(mw,` property of the config object (either
passed as an argument or loaded from `),N0e=n(mw,"CODE",{});var o4t=s(N0e);ALr=r(o4t,"pretrained_model_name_or_path"),o4t.forEach(t),yLr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j0e=n(mw,"CODE",{});var r4t=s(j0e);LLr=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),xLr=r(mw,":"),mw.forEach(t),$Lr=i(Gl),Se=n(Gl,"UL",{});var Ve=s(Se);UE=n(Ve,"LI",{});var HRe=s(UE);D0e=n(HRe,"STRONG",{});var t4t=s(D0e);kLr=r(t4t,"bart"),t4t.forEach(t),SLr=r(HRe," \u2014 "),hJ=n(HRe,"A",{href:!0});var a4t=s(hJ);RLr=r(a4t,"FlaxBartForConditionalGeneration"),a4t.forEach(t),BLr=r(HRe," (BART model)"),HRe.forEach(t),PLr=i(Ve),JE=n(Ve,"LI",{});var URe=s(JE);G0e=n(URe,"STRONG",{});var n4t=s(G0e);ILr=r(n4t,"blenderbot"),n4t.forEach(t),qLr=r(URe," \u2014 "),pJ=n(URe,"A",{href:!0});var s4t=s(pJ);NLr=r(s4t,"FlaxBlenderbotForConditionalGeneration"),s4t.forEach(t),jLr=r(URe," (Blenderbot model)"),URe.forEach(t),DLr=i(Ve),YE=n(Ve,"LI",{});var JRe=s(YE);O0e=n(JRe,"STRONG",{});var l4t=s(O0e);GLr=r(l4t,"blenderbot-small"),l4t.forEach(t),OLr=r(JRe," \u2014 "),uJ=n(JRe,"A",{href:!0});var i4t=s(uJ);VLr=r(i4t,"FlaxBlenderbotSmallForConditionalGeneration"),i4t.forEach(t),XLr=r(JRe," (BlenderbotSmall model)"),JRe.forEach(t),zLr=i(Ve),KE=n(Ve,"LI",{});var YRe=s(KE);V0e=n(YRe,"STRONG",{});var d4t=s(V0e);QLr=r(d4t,"encoder-decoder"),d4t.forEach(t),WLr=r(YRe," \u2014 "),_J=n(YRe,"A",{href:!0});var c4t=s(_J);HLr=r(c4t,"FlaxEncoderDecoderModel"),c4t.forEach(t),ULr=r(YRe," (Encoder decoder model)"),YRe.forEach(t),JLr=i(Ve),ZE=n(Ve,"LI",{});var KRe=s(ZE);X0e=n(KRe,"STRONG",{});var f4t=s(X0e);YLr=r(f4t,"marian"),f4t.forEach(t),KLr=r(KRe," \u2014 "),bJ=n(KRe,"A",{href:!0});var m4t=s(bJ);ZLr=r(m4t,"FlaxMarianMTModel"),m4t.forEach(t),exr=r(KRe," (Marian model)"),KRe.forEach(t),oxr=i(Ve),e5=n(Ve,"LI",{});var ZRe=s(e5);z0e=n(ZRe,"STRONG",{});var g4t=s(z0e);rxr=r(g4t,"mbart"),g4t.forEach(t),txr=r(ZRe," \u2014 "),vJ=n(ZRe,"A",{href:!0});var h4t=s(vJ);axr=r(h4t,"FlaxMBartForConditionalGeneration"),h4t.forEach(t),nxr=r(ZRe," (mBART model)"),ZRe.forEach(t),sxr=i(Ve),o5=n(Ve,"LI",{});var eBe=s(o5);Q0e=n(eBe,"STRONG",{});var p4t=s(Q0e);lxr=r(p4t,"mt5"),p4t.forEach(t),ixr=r(eBe," \u2014 "),FJ=n(eBe,"A",{href:!0});var u4t=s(FJ);dxr=r(u4t,"FlaxMT5ForConditionalGeneration"),u4t.forEach(t),cxr=r(eBe," (mT5 model)"),eBe.forEach(t),fxr=i(Ve),r5=n(Ve,"LI",{});var oBe=s(r5);W0e=n(oBe,"STRONG",{});var _4t=s(W0e);mxr=r(_4t,"pegasus"),_4t.forEach(t),gxr=r(oBe," \u2014 "),TJ=n(oBe,"A",{href:!0});var b4t=s(TJ);hxr=r(b4t,"FlaxPegasusForConditionalGeneration"),b4t.forEach(t),pxr=r(oBe," (Pegasus model)"),oBe.forEach(t),uxr=i(Ve),t5=n(Ve,"LI",{});var rBe=s(t5);H0e=n(rBe,"STRONG",{});var v4t=s(H0e);_xr=r(v4t,"t5"),v4t.forEach(t),bxr=r(rBe," \u2014 "),MJ=n(rBe,"A",{href:!0});var F4t=s(MJ);vxr=r(F4t,"FlaxT5ForConditionalGeneration"),F4t.forEach(t),Fxr=r(rBe," (T5 model)"),rBe.forEach(t),Ve.forEach(t),Txr=i(Gl),T(a5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),$Ie=i(f),Rc=n(f,"H2",{class:!0});var BNe=s(Rc);n5=n(BNe,"A",{id:!0,class:!0,href:!0});var T4t=s(n5);U0e=n(T4t,"SPAN",{});var M4t=s(U0e);T(HL.$$.fragment,M4t),M4t.forEach(t),T4t.forEach(t),Mxr=i(BNe),J0e=n(BNe,"SPAN",{});var E4t=s(J0e);Exr=r(E4t,"FlaxAutoModelForSequenceClassification"),E4t.forEach(t),BNe.forEach(t),kIe=i(f),pr=n(f,"DIV",{class:!0});var Ol=s(pr);T(UL.$$.fragment,Ol),Cxr=i(Ol),Bc=n(Ol,"P",{});var lZ=s(Bc);wxr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EJ=n(lZ,"A",{href:!0});var C4t=s(EJ);Axr=r(C4t,"from_pretrained()"),C4t.forEach(t),yxr=r(lZ," class method or the "),CJ=n(lZ,"A",{href:!0});var w4t=s(CJ);Lxr=r(w4t,"from_config()"),w4t.forEach(t),xxr=r(lZ,` class
method.`),lZ.forEach(t),$xr=i(Ol),JL=n(Ol,"P",{});var PNe=s(JL);kxr=r(PNe,"This class cannot be instantiated directly using "),Y0e=n(PNe,"CODE",{});var A4t=s(Y0e);Sxr=r(A4t,"__init__()"),A4t.forEach(t),Rxr=r(PNe," (throws an error)."),PNe.forEach(t),Bxr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var gw=s(Gt);T(YL.$$.fragment,gw),Pxr=i(gw),K0e=n(gw,"P",{});var y4t=s(K0e);Ixr=r(y4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y4t.forEach(t),qxr=i(gw),Pc=n(gw,"P",{});var iZ=s(Pc);Nxr=r(iZ,`Note:
Loading a model from its configuration file does `),Z0e=n(iZ,"STRONG",{});var L4t=s(Z0e);jxr=r(L4t,"not"),L4t.forEach(t),Dxr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(iZ,"A",{href:!0});var x4t=s(wJ);Gxr=r(x4t,"from_pretrained()"),x4t.forEach(t),Oxr=r(iZ," to load the model weights."),iZ.forEach(t),Vxr=i(gw),T(s5.$$.fragment,gw),gw.forEach(t),Xxr=i(Ol),Or=n(Ol,"DIV",{class:!0});var Vl=s(Or);T(KL.$$.fragment,Vl),zxr=i(Vl),eTe=n(Vl,"P",{});var $4t=s(eTe);Qxr=r($4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$4t.forEach(t),Wxr=i(Vl),hn=n(Vl,"P",{});var hw=s(hn);Hxr=r(hw,"The model class to instantiate is selected based on the "),oTe=n(hw,"CODE",{});var k4t=s(oTe);Uxr=r(k4t,"model_type"),k4t.forEach(t),Jxr=r(hw,` property of the config object (either
passed as an argument or loaded from `),rTe=n(hw,"CODE",{});var S4t=s(rTe);Yxr=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),Kxr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(hw,"CODE",{});var R4t=s(tTe);Zxr=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),e9r=r(hw,":"),hw.forEach(t),o9r=i(Vl),$e=n(Vl,"UL",{});var Ie=s($e);l5=n(Ie,"LI",{});var tBe=s(l5);aTe=n(tBe,"STRONG",{});var B4t=s(aTe);r9r=r(B4t,"albert"),B4t.forEach(t),t9r=r(tBe," \u2014 "),AJ=n(tBe,"A",{href:!0});var P4t=s(AJ);a9r=r(P4t,"FlaxAlbertForSequenceClassification"),P4t.forEach(t),n9r=r(tBe," (ALBERT model)"),tBe.forEach(t),s9r=i(Ie),i5=n(Ie,"LI",{});var aBe=s(i5);nTe=n(aBe,"STRONG",{});var I4t=s(nTe);l9r=r(I4t,"bart"),I4t.forEach(t),i9r=r(aBe," \u2014 "),yJ=n(aBe,"A",{href:!0});var q4t=s(yJ);d9r=r(q4t,"FlaxBartForSequenceClassification"),q4t.forEach(t),c9r=r(aBe," (BART model)"),aBe.forEach(t),f9r=i(Ie),d5=n(Ie,"LI",{});var nBe=s(d5);sTe=n(nBe,"STRONG",{});var N4t=s(sTe);m9r=r(N4t,"bert"),N4t.forEach(t),g9r=r(nBe," \u2014 "),LJ=n(nBe,"A",{href:!0});var j4t=s(LJ);h9r=r(j4t,"FlaxBertForSequenceClassification"),j4t.forEach(t),p9r=r(nBe," (BERT model)"),nBe.forEach(t),u9r=i(Ie),c5=n(Ie,"LI",{});var sBe=s(c5);lTe=n(sBe,"STRONG",{});var D4t=s(lTe);_9r=r(D4t,"big_bird"),D4t.forEach(t),b9r=r(sBe," \u2014 "),xJ=n(sBe,"A",{href:!0});var G4t=s(xJ);v9r=r(G4t,"FlaxBigBirdForSequenceClassification"),G4t.forEach(t),F9r=r(sBe," (BigBird model)"),sBe.forEach(t),T9r=i(Ie),f5=n(Ie,"LI",{});var lBe=s(f5);iTe=n(lBe,"STRONG",{});var O4t=s(iTe);M9r=r(O4t,"distilbert"),O4t.forEach(t),E9r=r(lBe," \u2014 "),$J=n(lBe,"A",{href:!0});var V4t=s($J);C9r=r(V4t,"FlaxDistilBertForSequenceClassification"),V4t.forEach(t),w9r=r(lBe," (DistilBERT model)"),lBe.forEach(t),A9r=i(Ie),m5=n(Ie,"LI",{});var iBe=s(m5);dTe=n(iBe,"STRONG",{});var X4t=s(dTe);y9r=r(X4t,"electra"),X4t.forEach(t),L9r=r(iBe," \u2014 "),kJ=n(iBe,"A",{href:!0});var z4t=s(kJ);x9r=r(z4t,"FlaxElectraForSequenceClassification"),z4t.forEach(t),$9r=r(iBe," (ELECTRA model)"),iBe.forEach(t),k9r=i(Ie),g5=n(Ie,"LI",{});var dBe=s(g5);cTe=n(dBe,"STRONG",{});var Q4t=s(cTe);S9r=r(Q4t,"mbart"),Q4t.forEach(t),R9r=r(dBe," \u2014 "),SJ=n(dBe,"A",{href:!0});var W4t=s(SJ);B9r=r(W4t,"FlaxMBartForSequenceClassification"),W4t.forEach(t),P9r=r(dBe," (mBART model)"),dBe.forEach(t),I9r=i(Ie),h5=n(Ie,"LI",{});var cBe=s(h5);fTe=n(cBe,"STRONG",{});var H4t=s(fTe);q9r=r(H4t,"roberta"),H4t.forEach(t),N9r=r(cBe," \u2014 "),RJ=n(cBe,"A",{href:!0});var U4t=s(RJ);j9r=r(U4t,"FlaxRobertaForSequenceClassification"),U4t.forEach(t),D9r=r(cBe," (RoBERTa model)"),cBe.forEach(t),G9r=i(Ie),p5=n(Ie,"LI",{});var fBe=s(p5);mTe=n(fBe,"STRONG",{});var J4t=s(mTe);O9r=r(J4t,"roformer"),J4t.forEach(t),V9r=r(fBe," \u2014 "),BJ=n(fBe,"A",{href:!0});var Y4t=s(BJ);X9r=r(Y4t,"FlaxRoFormerForSequenceClassification"),Y4t.forEach(t),z9r=r(fBe," (RoFormer model)"),fBe.forEach(t),Q9r=i(Ie),u5=n(Ie,"LI",{});var mBe=s(u5);gTe=n(mBe,"STRONG",{});var K4t=s(gTe);W9r=r(K4t,"xlm-roberta"),K4t.forEach(t),H9r=r(mBe," \u2014 "),PJ=n(mBe,"A",{href:!0});var Z4t=s(PJ);U9r=r(Z4t,"FlaxXLMRobertaForSequenceClassification"),Z4t.forEach(t),J9r=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),Ie.forEach(t),Y9r=i(Vl),T(_5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),SIe=i(f),Ic=n(f,"H2",{class:!0});var INe=s(Ic);b5=n(INe,"A",{id:!0,class:!0,href:!0});var eEt=s(b5);hTe=n(eEt,"SPAN",{});var oEt=s(hTe);T(ZL.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),K9r=i(INe),pTe=n(INe,"SPAN",{});var rEt=s(pTe);Z9r=r(rEt,"FlaxAutoModelForQuestionAnswering"),rEt.forEach(t),INe.forEach(t),RIe=i(f),ur=n(f,"DIV",{class:!0});var Xl=s(ur);T(ex.$$.fragment,Xl),e$r=i(Xl),qc=n(Xl,"P",{});var dZ=s(qc);o$r=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IJ=n(dZ,"A",{href:!0});var tEt=s(IJ);r$r=r(tEt,"from_pretrained()"),tEt.forEach(t),t$r=r(dZ," class method or the "),qJ=n(dZ,"A",{href:!0});var aEt=s(qJ);a$r=r(aEt,"from_config()"),aEt.forEach(t),n$r=r(dZ,` class
method.`),dZ.forEach(t),s$r=i(Xl),ox=n(Xl,"P",{});var qNe=s(ox);l$r=r(qNe,"This class cannot be instantiated directly using "),uTe=n(qNe,"CODE",{});var nEt=s(uTe);i$r=r(nEt,"__init__()"),nEt.forEach(t),d$r=r(qNe," (throws an error)."),qNe.forEach(t),c$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var pw=s(Ot);T(rx.$$.fragment,pw),f$r=i(pw),_Te=n(pw,"P",{});var sEt=s(_Te);m$r=r(sEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sEt.forEach(t),g$r=i(pw),Nc=n(pw,"P",{});var cZ=s(Nc);h$r=r(cZ,`Note:
Loading a model from its configuration file does `),bTe=n(cZ,"STRONG",{});var lEt=s(bTe);p$r=r(lEt,"not"),lEt.forEach(t),u$r=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(cZ,"A",{href:!0});var iEt=s(NJ);_$r=r(iEt,"from_pretrained()"),iEt.forEach(t),b$r=r(cZ," to load the model weights."),cZ.forEach(t),v$r=i(pw),T(v5.$$.fragment,pw),pw.forEach(t),F$r=i(Xl),Vr=n(Xl,"DIV",{class:!0});var zl=s(Vr);T(tx.$$.fragment,zl),T$r=i(zl),vTe=n(zl,"P",{});var dEt=s(vTe);M$r=r(dEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dEt.forEach(t),E$r=i(zl),pn=n(zl,"P",{});var uw=s(pn);C$r=r(uw,"The model class to instantiate is selected based on the "),FTe=n(uw,"CODE",{});var cEt=s(FTe);w$r=r(cEt,"model_type"),cEt.forEach(t),A$r=r(uw,` property of the config object (either
passed as an argument or loaded from `),TTe=n(uw,"CODE",{});var fEt=s(TTe);y$r=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),L$r=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(uw,"CODE",{});var mEt=s(MTe);x$r=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),$$r=r(uw,":"),uw.forEach(t),k$r=i(zl),ke=n(zl,"UL",{});var qe=s(ke);F5=n(qe,"LI",{});var gBe=s(F5);ETe=n(gBe,"STRONG",{});var gEt=s(ETe);S$r=r(gEt,"albert"),gEt.forEach(t),R$r=r(gBe," \u2014 "),jJ=n(gBe,"A",{href:!0});var hEt=s(jJ);B$r=r(hEt,"FlaxAlbertForQuestionAnswering"),hEt.forEach(t),P$r=r(gBe," (ALBERT model)"),gBe.forEach(t),I$r=i(qe),T5=n(qe,"LI",{});var hBe=s(T5);CTe=n(hBe,"STRONG",{});var pEt=s(CTe);q$r=r(pEt,"bart"),pEt.forEach(t),N$r=r(hBe," \u2014 "),DJ=n(hBe,"A",{href:!0});var uEt=s(DJ);j$r=r(uEt,"FlaxBartForQuestionAnswering"),uEt.forEach(t),D$r=r(hBe," (BART model)"),hBe.forEach(t),G$r=i(qe),M5=n(qe,"LI",{});var pBe=s(M5);wTe=n(pBe,"STRONG",{});var _Et=s(wTe);O$r=r(_Et,"bert"),_Et.forEach(t),V$r=r(pBe," \u2014 "),GJ=n(pBe,"A",{href:!0});var bEt=s(GJ);X$r=r(bEt,"FlaxBertForQuestionAnswering"),bEt.forEach(t),z$r=r(pBe," (BERT model)"),pBe.forEach(t),Q$r=i(qe),E5=n(qe,"LI",{});var uBe=s(E5);ATe=n(uBe,"STRONG",{});var vEt=s(ATe);W$r=r(vEt,"big_bird"),vEt.forEach(t),H$r=r(uBe," \u2014 "),OJ=n(uBe,"A",{href:!0});var FEt=s(OJ);U$r=r(FEt,"FlaxBigBirdForQuestionAnswering"),FEt.forEach(t),J$r=r(uBe," (BigBird model)"),uBe.forEach(t),Y$r=i(qe),C5=n(qe,"LI",{});var _Be=s(C5);yTe=n(_Be,"STRONG",{});var TEt=s(yTe);K$r=r(TEt,"distilbert"),TEt.forEach(t),Z$r=r(_Be," \u2014 "),VJ=n(_Be,"A",{href:!0});var MEt=s(VJ);ekr=r(MEt,"FlaxDistilBertForQuestionAnswering"),MEt.forEach(t),okr=r(_Be," (DistilBERT model)"),_Be.forEach(t),rkr=i(qe),w5=n(qe,"LI",{});var bBe=s(w5);LTe=n(bBe,"STRONG",{});var EEt=s(LTe);tkr=r(EEt,"electra"),EEt.forEach(t),akr=r(bBe," \u2014 "),XJ=n(bBe,"A",{href:!0});var CEt=s(XJ);nkr=r(CEt,"FlaxElectraForQuestionAnswering"),CEt.forEach(t),skr=r(bBe," (ELECTRA model)"),bBe.forEach(t),lkr=i(qe),A5=n(qe,"LI",{});var vBe=s(A5);xTe=n(vBe,"STRONG",{});var wEt=s(xTe);ikr=r(wEt,"mbart"),wEt.forEach(t),dkr=r(vBe," \u2014 "),zJ=n(vBe,"A",{href:!0});var AEt=s(zJ);ckr=r(AEt,"FlaxMBartForQuestionAnswering"),AEt.forEach(t),fkr=r(vBe," (mBART model)"),vBe.forEach(t),mkr=i(qe),y5=n(qe,"LI",{});var FBe=s(y5);$Te=n(FBe,"STRONG",{});var yEt=s($Te);gkr=r(yEt,"roberta"),yEt.forEach(t),hkr=r(FBe," \u2014 "),QJ=n(FBe,"A",{href:!0});var LEt=s(QJ);pkr=r(LEt,"FlaxRobertaForQuestionAnswering"),LEt.forEach(t),ukr=r(FBe," (RoBERTa model)"),FBe.forEach(t),_kr=i(qe),L5=n(qe,"LI",{});var TBe=s(L5);kTe=n(TBe,"STRONG",{});var xEt=s(kTe);bkr=r(xEt,"roformer"),xEt.forEach(t),vkr=r(TBe," \u2014 "),WJ=n(TBe,"A",{href:!0});var $Et=s(WJ);Fkr=r($Et,"FlaxRoFormerForQuestionAnswering"),$Et.forEach(t),Tkr=r(TBe," (RoFormer model)"),TBe.forEach(t),Mkr=i(qe),x5=n(qe,"LI",{});var MBe=s(x5);STe=n(MBe,"STRONG",{});var kEt=s(STe);Ekr=r(kEt,"xlm-roberta"),kEt.forEach(t),Ckr=r(MBe," \u2014 "),HJ=n(MBe,"A",{href:!0});var SEt=s(HJ);wkr=r(SEt,"FlaxXLMRobertaForQuestionAnswering"),SEt.forEach(t),Akr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),qe.forEach(t),ykr=i(zl),T($5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),BIe=i(f),jc=n(f,"H2",{class:!0});var NNe=s(jc);k5=n(NNe,"A",{id:!0,class:!0,href:!0});var REt=s(k5);RTe=n(REt,"SPAN",{});var BEt=s(RTe);T(ax.$$.fragment,BEt),BEt.forEach(t),REt.forEach(t),Lkr=i(NNe),BTe=n(NNe,"SPAN",{});var PEt=s(BTe);xkr=r(PEt,"FlaxAutoModelForTokenClassification"),PEt.forEach(t),NNe.forEach(t),PIe=i(f),_r=n(f,"DIV",{class:!0});var Ql=s(_r);T(nx.$$.fragment,Ql),$kr=i(Ql),Dc=n(Ql,"P",{});var fZ=s(Dc);kkr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UJ=n(fZ,"A",{href:!0});var IEt=s(UJ);Skr=r(IEt,"from_pretrained()"),IEt.forEach(t),Rkr=r(fZ," class method or the "),JJ=n(fZ,"A",{href:!0});var qEt=s(JJ);Bkr=r(qEt,"from_config()"),qEt.forEach(t),Pkr=r(fZ,` class
method.`),fZ.forEach(t),Ikr=i(Ql),sx=n(Ql,"P",{});var jNe=s(sx);qkr=r(jNe,"This class cannot be instantiated directly using "),PTe=n(jNe,"CODE",{});var NEt=s(PTe);Nkr=r(NEt,"__init__()"),NEt.forEach(t),jkr=r(jNe," (throws an error)."),jNe.forEach(t),Dkr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var _w=s(Vt);T(lx.$$.fragment,_w),Gkr=i(_w),ITe=n(_w,"P",{});var jEt=s(ITe);Okr=r(jEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jEt.forEach(t),Vkr=i(_w),Gc=n(_w,"P",{});var mZ=s(Gc);Xkr=r(mZ,`Note:
Loading a model from its configuration file does `),qTe=n(mZ,"STRONG",{});var DEt=s(qTe);zkr=r(DEt,"not"),DEt.forEach(t),Qkr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(mZ,"A",{href:!0});var GEt=s(YJ);Wkr=r(GEt,"from_pretrained()"),GEt.forEach(t),Hkr=r(mZ," to load the model weights."),mZ.forEach(t),Ukr=i(_w),T(S5.$$.fragment,_w),_w.forEach(t),Jkr=i(Ql),Xr=n(Ql,"DIV",{class:!0});var Wl=s(Xr);T(ix.$$.fragment,Wl),Ykr=i(Wl),NTe=n(Wl,"P",{});var OEt=s(NTe);Kkr=r(OEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OEt.forEach(t),Zkr=i(Wl),un=n(Wl,"P",{});var bw=s(un);eSr=r(bw,"The model class to instantiate is selected based on the "),jTe=n(bw,"CODE",{});var VEt=s(jTe);oSr=r(VEt,"model_type"),VEt.forEach(t),rSr=r(bw,` property of the config object (either
passed as an argument or loaded from `),DTe=n(bw,"CODE",{});var XEt=s(DTe);tSr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),aSr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(bw,"CODE",{});var zEt=s(GTe);nSr=r(zEt,"pretrained_model_name_or_path"),zEt.forEach(t),sSr=r(bw,":"),bw.forEach(t),lSr=i(Wl),Ge=n(Wl,"UL",{});var Fo=s(Ge);R5=n(Fo,"LI",{});var EBe=s(R5);OTe=n(EBe,"STRONG",{});var QEt=s(OTe);iSr=r(QEt,"albert"),QEt.forEach(t),dSr=r(EBe," \u2014 "),KJ=n(EBe,"A",{href:!0});var WEt=s(KJ);cSr=r(WEt,"FlaxAlbertForTokenClassification"),WEt.forEach(t),fSr=r(EBe," (ALBERT model)"),EBe.forEach(t),mSr=i(Fo),B5=n(Fo,"LI",{});var CBe=s(B5);VTe=n(CBe,"STRONG",{});var HEt=s(VTe);gSr=r(HEt,"bert"),HEt.forEach(t),hSr=r(CBe," \u2014 "),ZJ=n(CBe,"A",{href:!0});var UEt=s(ZJ);pSr=r(UEt,"FlaxBertForTokenClassification"),UEt.forEach(t),uSr=r(CBe," (BERT model)"),CBe.forEach(t),_Sr=i(Fo),P5=n(Fo,"LI",{});var wBe=s(P5);XTe=n(wBe,"STRONG",{});var JEt=s(XTe);bSr=r(JEt,"big_bird"),JEt.forEach(t),vSr=r(wBe," \u2014 "),eY=n(wBe,"A",{href:!0});var YEt=s(eY);FSr=r(YEt,"FlaxBigBirdForTokenClassification"),YEt.forEach(t),TSr=r(wBe," (BigBird model)"),wBe.forEach(t),MSr=i(Fo),I5=n(Fo,"LI",{});var ABe=s(I5);zTe=n(ABe,"STRONG",{});var KEt=s(zTe);ESr=r(KEt,"distilbert"),KEt.forEach(t),CSr=r(ABe," \u2014 "),oY=n(ABe,"A",{href:!0});var ZEt=s(oY);wSr=r(ZEt,"FlaxDistilBertForTokenClassification"),ZEt.forEach(t),ASr=r(ABe," (DistilBERT model)"),ABe.forEach(t),ySr=i(Fo),q5=n(Fo,"LI",{});var yBe=s(q5);QTe=n(yBe,"STRONG",{});var e5t=s(QTe);LSr=r(e5t,"electra"),e5t.forEach(t),xSr=r(yBe," \u2014 "),rY=n(yBe,"A",{href:!0});var o5t=s(rY);$Sr=r(o5t,"FlaxElectraForTokenClassification"),o5t.forEach(t),kSr=r(yBe," (ELECTRA model)"),yBe.forEach(t),SSr=i(Fo),N5=n(Fo,"LI",{});var LBe=s(N5);WTe=n(LBe,"STRONG",{});var r5t=s(WTe);RSr=r(r5t,"roberta"),r5t.forEach(t),BSr=r(LBe," \u2014 "),tY=n(LBe,"A",{href:!0});var t5t=s(tY);PSr=r(t5t,"FlaxRobertaForTokenClassification"),t5t.forEach(t),ISr=r(LBe," (RoBERTa model)"),LBe.forEach(t),qSr=i(Fo),j5=n(Fo,"LI",{});var xBe=s(j5);HTe=n(xBe,"STRONG",{});var a5t=s(HTe);NSr=r(a5t,"roformer"),a5t.forEach(t),jSr=r(xBe," \u2014 "),aY=n(xBe,"A",{href:!0});var n5t=s(aY);DSr=r(n5t,"FlaxRoFormerForTokenClassification"),n5t.forEach(t),GSr=r(xBe," (RoFormer model)"),xBe.forEach(t),OSr=i(Fo),D5=n(Fo,"LI",{});var $Be=s(D5);UTe=n($Be,"STRONG",{});var s5t=s(UTe);VSr=r(s5t,"xlm-roberta"),s5t.forEach(t),XSr=r($Be," \u2014 "),nY=n($Be,"A",{href:!0});var l5t=s(nY);zSr=r(l5t,"FlaxXLMRobertaForTokenClassification"),l5t.forEach(t),QSr=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),Fo.forEach(t),WSr=i(Wl),T(G5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),IIe=i(f),Oc=n(f,"H2",{class:!0});var DNe=s(Oc);O5=n(DNe,"A",{id:!0,class:!0,href:!0});var i5t=s(O5);JTe=n(i5t,"SPAN",{});var d5t=s(JTe);T(dx.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),HSr=i(DNe),YTe=n(DNe,"SPAN",{});var c5t=s(YTe);USr=r(c5t,"FlaxAutoModelForMultipleChoice"),c5t.forEach(t),DNe.forEach(t),qIe=i(f),br=n(f,"DIV",{class:!0});var Hl=s(br);T(cx.$$.fragment,Hl),JSr=i(Hl),Vc=n(Hl,"P",{});var gZ=s(Vc);YSr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sY=n(gZ,"A",{href:!0});var f5t=s(sY);KSr=r(f5t,"from_pretrained()"),f5t.forEach(t),ZSr=r(gZ," class method or the "),lY=n(gZ,"A",{href:!0});var m5t=s(lY);eRr=r(m5t,"from_config()"),m5t.forEach(t),oRr=r(gZ,` class
method.`),gZ.forEach(t),rRr=i(Hl),fx=n(Hl,"P",{});var GNe=s(fx);tRr=r(GNe,"This class cannot be instantiated directly using "),KTe=n(GNe,"CODE",{});var g5t=s(KTe);aRr=r(g5t,"__init__()"),g5t.forEach(t),nRr=r(GNe," (throws an error)."),GNe.forEach(t),sRr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var vw=s(Xt);T(mx.$$.fragment,vw),lRr=i(vw),ZTe=n(vw,"P",{});var h5t=s(ZTe);iRr=r(h5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h5t.forEach(t),dRr=i(vw),Xc=n(vw,"P",{});var hZ=s(Xc);cRr=r(hZ,`Note:
Loading a model from its configuration file does `),e7e=n(hZ,"STRONG",{});var p5t=s(e7e);fRr=r(p5t,"not"),p5t.forEach(t),mRr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(hZ,"A",{href:!0});var u5t=s(iY);gRr=r(u5t,"from_pretrained()"),u5t.forEach(t),hRr=r(hZ," to load the model weights."),hZ.forEach(t),pRr=i(vw),T(V5.$$.fragment,vw),vw.forEach(t),uRr=i(Hl),zr=n(Hl,"DIV",{class:!0});var Ul=s(zr);T(gx.$$.fragment,Ul),_Rr=i(Ul),o7e=n(Ul,"P",{});var _5t=s(o7e);bRr=r(_5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_5t.forEach(t),vRr=i(Ul),_n=n(Ul,"P",{});var Fw=s(_n);FRr=r(Fw,"The model class to instantiate is selected based on the "),r7e=n(Fw,"CODE",{});var b5t=s(r7e);TRr=r(b5t,"model_type"),b5t.forEach(t),MRr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),t7e=n(Fw,"CODE",{});var v5t=s(t7e);ERr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),CRr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=n(Fw,"CODE",{});var F5t=s(a7e);wRr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),ARr=r(Fw,":"),Fw.forEach(t),yRr=i(Ul),Oe=n(Ul,"UL",{});var To=s(Oe);X5=n(To,"LI",{});var kBe=s(X5);n7e=n(kBe,"STRONG",{});var T5t=s(n7e);LRr=r(T5t,"albert"),T5t.forEach(t),xRr=r(kBe," \u2014 "),dY=n(kBe,"A",{href:!0});var M5t=s(dY);$Rr=r(M5t,"FlaxAlbertForMultipleChoice"),M5t.forEach(t),kRr=r(kBe," (ALBERT model)"),kBe.forEach(t),SRr=i(To),z5=n(To,"LI",{});var SBe=s(z5);s7e=n(SBe,"STRONG",{});var E5t=s(s7e);RRr=r(E5t,"bert"),E5t.forEach(t),BRr=r(SBe," \u2014 "),cY=n(SBe,"A",{href:!0});var C5t=s(cY);PRr=r(C5t,"FlaxBertForMultipleChoice"),C5t.forEach(t),IRr=r(SBe," (BERT model)"),SBe.forEach(t),qRr=i(To),Q5=n(To,"LI",{});var RBe=s(Q5);l7e=n(RBe,"STRONG",{});var w5t=s(l7e);NRr=r(w5t,"big_bird"),w5t.forEach(t),jRr=r(RBe," \u2014 "),fY=n(RBe,"A",{href:!0});var A5t=s(fY);DRr=r(A5t,"FlaxBigBirdForMultipleChoice"),A5t.forEach(t),GRr=r(RBe," (BigBird model)"),RBe.forEach(t),ORr=i(To),W5=n(To,"LI",{});var BBe=s(W5);i7e=n(BBe,"STRONG",{});var y5t=s(i7e);VRr=r(y5t,"distilbert"),y5t.forEach(t),XRr=r(BBe," \u2014 "),mY=n(BBe,"A",{href:!0});var L5t=s(mY);zRr=r(L5t,"FlaxDistilBertForMultipleChoice"),L5t.forEach(t),QRr=r(BBe," (DistilBERT model)"),BBe.forEach(t),WRr=i(To),H5=n(To,"LI",{});var PBe=s(H5);d7e=n(PBe,"STRONG",{});var x5t=s(d7e);HRr=r(x5t,"electra"),x5t.forEach(t),URr=r(PBe," \u2014 "),gY=n(PBe,"A",{href:!0});var $5t=s(gY);JRr=r($5t,"FlaxElectraForMultipleChoice"),$5t.forEach(t),YRr=r(PBe," (ELECTRA model)"),PBe.forEach(t),KRr=i(To),U5=n(To,"LI",{});var IBe=s(U5);c7e=n(IBe,"STRONG",{});var k5t=s(c7e);ZRr=r(k5t,"roberta"),k5t.forEach(t),eBr=r(IBe," \u2014 "),hY=n(IBe,"A",{href:!0});var S5t=s(hY);oBr=r(S5t,"FlaxRobertaForMultipleChoice"),S5t.forEach(t),rBr=r(IBe," (RoBERTa model)"),IBe.forEach(t),tBr=i(To),J5=n(To,"LI",{});var qBe=s(J5);f7e=n(qBe,"STRONG",{});var R5t=s(f7e);aBr=r(R5t,"roformer"),R5t.forEach(t),nBr=r(qBe," \u2014 "),pY=n(qBe,"A",{href:!0});var B5t=s(pY);sBr=r(B5t,"FlaxRoFormerForMultipleChoice"),B5t.forEach(t),lBr=r(qBe," (RoFormer model)"),qBe.forEach(t),iBr=i(To),Y5=n(To,"LI",{});var NBe=s(Y5);m7e=n(NBe,"STRONG",{});var P5t=s(m7e);dBr=r(P5t,"xlm-roberta"),P5t.forEach(t),cBr=r(NBe," \u2014 "),uY=n(NBe,"A",{href:!0});var I5t=s(uY);fBr=r(I5t,"FlaxXLMRobertaForMultipleChoice"),I5t.forEach(t),mBr=r(NBe," (XLM-RoBERTa model)"),NBe.forEach(t),To.forEach(t),gBr=i(Ul),T(K5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),NIe=i(f),zc=n(f,"H2",{class:!0});var ONe=s(zc);Z5=n(ONe,"A",{id:!0,class:!0,href:!0});var q5t=s(Z5);g7e=n(q5t,"SPAN",{});var N5t=s(g7e);T(hx.$$.fragment,N5t),N5t.forEach(t),q5t.forEach(t),hBr=i(ONe),h7e=n(ONe,"SPAN",{});var j5t=s(h7e);pBr=r(j5t,"FlaxAutoModelForNextSentencePrediction"),j5t.forEach(t),ONe.forEach(t),jIe=i(f),vr=n(f,"DIV",{class:!0});var Jl=s(vr);T(px.$$.fragment,Jl),uBr=i(Jl),Qc=n(Jl,"P",{});var pZ=s(Qc);_Br=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_Y=n(pZ,"A",{href:!0});var D5t=s(_Y);bBr=r(D5t,"from_pretrained()"),D5t.forEach(t),vBr=r(pZ," class method or the "),bY=n(pZ,"A",{href:!0});var G5t=s(bY);FBr=r(G5t,"from_config()"),G5t.forEach(t),TBr=r(pZ,` class
method.`),pZ.forEach(t),MBr=i(Jl),ux=n(Jl,"P",{});var VNe=s(ux);EBr=r(VNe,"This class cannot be instantiated directly using "),p7e=n(VNe,"CODE",{});var O5t=s(p7e);CBr=r(O5t,"__init__()"),O5t.forEach(t),wBr=r(VNe," (throws an error)."),VNe.forEach(t),ABr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Tw=s(zt);T(_x.$$.fragment,Tw),yBr=i(Tw),u7e=n(Tw,"P",{});var V5t=s(u7e);LBr=r(V5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),V5t.forEach(t),xBr=i(Tw),Wc=n(Tw,"P",{});var uZ=s(Wc);$Br=r(uZ,`Note:
Loading a model from its configuration file does `),_7e=n(uZ,"STRONG",{});var X5t=s(_7e);kBr=r(X5t,"not"),X5t.forEach(t),SBr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(uZ,"A",{href:!0});var z5t=s(vY);RBr=r(z5t,"from_pretrained()"),z5t.forEach(t),BBr=r(uZ," to load the model weights."),uZ.forEach(t),PBr=i(Tw),T(eC.$$.fragment,Tw),Tw.forEach(t),IBr=i(Jl),Qr=n(Jl,"DIV",{class:!0});var Yl=s(Qr);T(bx.$$.fragment,Yl),qBr=i(Yl),b7e=n(Yl,"P",{});var Q5t=s(b7e);NBr=r(Q5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Q5t.forEach(t),jBr=i(Yl),bn=n(Yl,"P",{});var Mw=s(bn);DBr=r(Mw,"The model class to instantiate is selected based on the "),v7e=n(Mw,"CODE",{});var W5t=s(v7e);GBr=r(W5t,"model_type"),W5t.forEach(t),OBr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),F7e=n(Mw,"CODE",{});var H5t=s(F7e);VBr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),XBr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=n(Mw,"CODE",{});var U5t=s(T7e);zBr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),QBr=r(Mw,":"),Mw.forEach(t),WBr=i(Yl),M7e=n(Yl,"UL",{});var J5t=s(M7e);oC=n(J5t,"LI",{});var jBe=s(oC);E7e=n(jBe,"STRONG",{});var Y5t=s(E7e);HBr=r(Y5t,"bert"),Y5t.forEach(t),UBr=r(jBe," \u2014 "),FY=n(jBe,"A",{href:!0});var K5t=s(FY);JBr=r(K5t,"FlaxBertForNextSentencePrediction"),K5t.forEach(t),YBr=r(jBe," (BERT model)"),jBe.forEach(t),J5t.forEach(t),KBr=i(Yl),T(rC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),DIe=i(f),Hc=n(f,"H2",{class:!0});var XNe=s(Hc);tC=n(XNe,"A",{id:!0,class:!0,href:!0});var Z5t=s(tC);C7e=n(Z5t,"SPAN",{});var eCt=s(C7e);T(vx.$$.fragment,eCt),eCt.forEach(t),Z5t.forEach(t),ZBr=i(XNe),w7e=n(XNe,"SPAN",{});var oCt=s(w7e);ePr=r(oCt,"FlaxAutoModelForImageClassification"),oCt.forEach(t),XNe.forEach(t),GIe=i(f),Fr=n(f,"DIV",{class:!0});var Kl=s(Fr);T(Fx.$$.fragment,Kl),oPr=i(Kl),Uc=n(Kl,"P",{});var _Z=s(Uc);rPr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TY=n(_Z,"A",{href:!0});var rCt=s(TY);tPr=r(rCt,"from_pretrained()"),rCt.forEach(t),aPr=r(_Z," class method or the "),MY=n(_Z,"A",{href:!0});var tCt=s(MY);nPr=r(tCt,"from_config()"),tCt.forEach(t),sPr=r(_Z,` class
method.`),_Z.forEach(t),lPr=i(Kl),Tx=n(Kl,"P",{});var zNe=s(Tx);iPr=r(zNe,"This class cannot be instantiated directly using "),A7e=n(zNe,"CODE",{});var aCt=s(A7e);dPr=r(aCt,"__init__()"),aCt.forEach(t),cPr=r(zNe," (throws an error)."),zNe.forEach(t),fPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Ew=s(Qt);T(Mx.$$.fragment,Ew),mPr=i(Ew),y7e=n(Ew,"P",{});var nCt=s(y7e);gPr=r(nCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nCt.forEach(t),hPr=i(Ew),Jc=n(Ew,"P",{});var bZ=s(Jc);pPr=r(bZ,`Note:
Loading a model from its configuration file does `),L7e=n(bZ,"STRONG",{});var sCt=s(L7e);uPr=r(sCt,"not"),sCt.forEach(t),_Pr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(bZ,"A",{href:!0});var lCt=s(EY);bPr=r(lCt,"from_pretrained()"),lCt.forEach(t),vPr=r(bZ," to load the model weights."),bZ.forEach(t),FPr=i(Ew),T(aC.$$.fragment,Ew),Ew.forEach(t),TPr=i(Kl),Wr=n(Kl,"DIV",{class:!0});var Zl=s(Wr);T(Ex.$$.fragment,Zl),MPr=i(Zl),x7e=n(Zl,"P",{});var iCt=s(x7e);EPr=r(iCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iCt.forEach(t),CPr=i(Zl),vn=n(Zl,"P",{});var Cw=s(vn);wPr=r(Cw,"The model class to instantiate is selected based on the "),$7e=n(Cw,"CODE",{});var dCt=s($7e);APr=r(dCt,"model_type"),dCt.forEach(t),yPr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),k7e=n(Cw,"CODE",{});var cCt=s(k7e);LPr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),xPr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(Cw,"CODE",{});var fCt=s(S7e);$Pr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),kPr=r(Cw,":"),Cw.forEach(t),SPr=i(Zl),Cx=n(Zl,"UL",{});var QNe=s(Cx);nC=n(QNe,"LI",{});var DBe=s(nC);R7e=n(DBe,"STRONG",{});var mCt=s(R7e);RPr=r(mCt,"beit"),mCt.forEach(t),BPr=r(DBe," \u2014 "),CY=n(DBe,"A",{href:!0});var gCt=s(CY);PPr=r(gCt,"FlaxBeitForImageClassification"),gCt.forEach(t),IPr=r(DBe," (BEiT model)"),DBe.forEach(t),qPr=i(QNe),sC=n(QNe,"LI",{});var GBe=s(sC);B7e=n(GBe,"STRONG",{});var hCt=s(B7e);NPr=r(hCt,"vit"),hCt.forEach(t),jPr=r(GBe," \u2014 "),wY=n(GBe,"A",{href:!0});var pCt=s(wY);DPr=r(pCt,"FlaxViTForImageClassification"),pCt.forEach(t),GPr=r(GBe," (ViT model)"),GBe.forEach(t),QNe.forEach(t),OPr=i(Zl),T(lC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),OIe=i(f),Yc=n(f,"H2",{class:!0});var WNe=s(Yc);iC=n(WNe,"A",{id:!0,class:!0,href:!0});var uCt=s(iC);P7e=n(uCt,"SPAN",{});var _Ct=s(P7e);T(wx.$$.fragment,_Ct),_Ct.forEach(t),uCt.forEach(t),VPr=i(WNe),I7e=n(WNe,"SPAN",{});var bCt=s(I7e);XPr=r(bCt,"FlaxAutoModelForVision2Seq"),bCt.forEach(t),WNe.forEach(t),VIe=i(f),Tr=n(f,"DIV",{class:!0});var ei=s(Tr);T(Ax.$$.fragment,ei),zPr=i(ei),Kc=n(ei,"P",{});var vZ=s(Kc);QPr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AY=n(vZ,"A",{href:!0});var vCt=s(AY);WPr=r(vCt,"from_pretrained()"),vCt.forEach(t),HPr=r(vZ," class method or the "),yY=n(vZ,"A",{href:!0});var FCt=s(yY);UPr=r(FCt,"from_config()"),FCt.forEach(t),JPr=r(vZ,` class
method.`),vZ.forEach(t),YPr=i(ei),yx=n(ei,"P",{});var HNe=s(yx);KPr=r(HNe,"This class cannot be instantiated directly using "),q7e=n(HNe,"CODE",{});var TCt=s(q7e);ZPr=r(TCt,"__init__()"),TCt.forEach(t),eIr=r(HNe," (throws an error)."),HNe.forEach(t),oIr=i(ei),Wt=n(ei,"DIV",{class:!0});var ww=s(Wt);T(Lx.$$.fragment,ww),rIr=i(ww),N7e=n(ww,"P",{});var MCt=s(N7e);tIr=r(MCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MCt.forEach(t),aIr=i(ww),Zc=n(ww,"P",{});var FZ=s(Zc);nIr=r(FZ,`Note:
Loading a model from its configuration file does `),j7e=n(FZ,"STRONG",{});var ECt=s(j7e);sIr=r(ECt,"not"),ECt.forEach(t),lIr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(FZ,"A",{href:!0});var CCt=s(LY);iIr=r(CCt,"from_pretrained()"),CCt.forEach(t),dIr=r(FZ," to load the model weights."),FZ.forEach(t),cIr=i(ww),T(dC.$$.fragment,ww),ww.forEach(t),fIr=i(ei),Hr=n(ei,"DIV",{class:!0});var oi=s(Hr);T(xx.$$.fragment,oi),mIr=i(oi),D7e=n(oi,"P",{});var wCt=s(D7e);gIr=r(wCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wCt.forEach(t),hIr=i(oi),Fn=n(oi,"P",{});var Aw=s(Fn);pIr=r(Aw,"The model class to instantiate is selected based on the "),G7e=n(Aw,"CODE",{});var ACt=s(G7e);uIr=r(ACt,"model_type"),ACt.forEach(t),_Ir=r(Aw,` property of the config object (either
passed as an argument or loaded from `),O7e=n(Aw,"CODE",{});var yCt=s(O7e);bIr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),vIr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(Aw,"CODE",{});var LCt=s(V7e);FIr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),TIr=r(Aw,":"),Aw.forEach(t),MIr=i(oi),X7e=n(oi,"UL",{});var xCt=s(X7e);cC=n(xCt,"LI",{});var OBe=s(cC);z7e=n(OBe,"STRONG",{});var $Ct=s(z7e);EIr=r($Ct,"vision-encoder-decoder"),$Ct.forEach(t),CIr=r(OBe," \u2014 "),xY=n(OBe,"A",{href:!0});var kCt=s(xY);wIr=r(kCt,"FlaxVisionEncoderDecoderModel"),kCt.forEach(t),AIr=r(OBe," (Vision Encoder decoder model)"),OBe.forEach(t),xCt.forEach(t),yIr=i(oi),T(fC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Rwt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer"),c(ii,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(lf,"id","extending-the-auto-classes"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#extending-the-auto-classes"),c(di,"class","relative group"),c(cf,"id","transformers.AutoConfig"),c(cf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cf,"href","#transformers.AutoConfig"),c(ci,"class","relative group"),c(U9,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(J9,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig"),c(Y9,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(K9,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig"),c(Z9,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig"),c(e$,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(o$,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig"),c(r$,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(t$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(a$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(n$,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig"),c(s$,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig"),c(l$,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig"),c(i$,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig"),c(d$,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig"),c(c$,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig"),c(f$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(m$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(g$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(h$,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig"),c(p$,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(u$,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(_$,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig"),c(b$,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig"),c(v$,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig"),c(F$,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig"),c(T$,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig"),c(M$,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig"),c(E$,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(C$,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig"),c(w$,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig"),c(A$,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig"),c(y$,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig"),c(L$,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig"),c(x$,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config"),c($$,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(k$,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig"),c(S$,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig"),c(R$,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig"),c(B$,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(P$,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(I$,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(q$,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig"),c(N$,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig"),c(j$,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig"),c(D$,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig"),c(G$,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config"),c(O$,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig"),c(V$,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(X$,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig"),c(z$,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Q$,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(W$,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig"),c(H$,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config"),c(U$,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(J$,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Y$,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig"),c(K$,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig"),c(Z$,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ek,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig"),c(ok,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(rk,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(tk,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(ak,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagConfig"),c(nk,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmConfig"),c(sk,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig"),c(lk,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig"),c(ik,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig"),c(dk,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig"),c(ck,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig"),c(fk,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig"),c(mk,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig"),c(gk,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig"),c(hk,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig"),c(pk,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig"),c(uk,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(_k,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(bk,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(vk,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig"),c(Fk,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Tk,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig"),c(Mk,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config"),c(Ek,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig"),c(Ck,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(wk,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Ak,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig"),c(yk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Lk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(xk,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig"),c($k,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig"),c(kk,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Sk,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Rk,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Bk,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig"),c(Pk,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Ik,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(qk,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig"),c(Nk,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig"),c(jk,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig"),c(Dk,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Gk,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Ok,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Vk,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig"),c(Xk,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig"),c(zk,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dg,"id","transformers.AutoTokenizer"),c(dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dg,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(Qk,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Wk,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(Hk,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Uk,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizer"),c(Jk,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizerFast"),c(Yk,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Kk,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Zk,"href","/docs/transformers/pr_17088/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(eS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(oS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(rS,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(tS,"href","/docs/transformers/pr_17088/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(aS,"href","/docs/transformers/pr_17088/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(nS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(sS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(lS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(iS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(cS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(fS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(mS,"href","/docs/transformers/pr_17088/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(gS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizer"),c(hS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(pS,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineTokenizer"),c(uS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizer"),c(_S,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(bS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(vS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(FS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizer"),c(TS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(MS,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ES,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wS,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizer"),c(AS,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(yS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(LS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(xS,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c($S,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(kS,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(SS,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(RS,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizer"),c(BS,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(PS,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(IS,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizer"),c(qS,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(NS,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(jS,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizer"),c(DS,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(GS,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OS,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VS,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(XS,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(zS,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QS,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(WS,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizer"),c(HS,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(US,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KS,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(ZS,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(eR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(oR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(rR,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(tR,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(aR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizer"),c(nR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizerFast"),c(sR,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizer"),c(lR,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(iR,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeTokenizer"),c(dR,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(cR,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(mR,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianTokenizer"),c(gR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizer"),c(hR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(pR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(uR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(_R,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(bR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17088/en/model_doc/mluke#transformers.MLukeTokenizer"),c(FR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(TR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(MR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ER,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(CR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(wR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(AR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(yR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(LR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(xR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c($R,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SR,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(RR,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(BR,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(PR,"href","/docs/transformers/pr_17088/en/model_doc/phobert#transformers.PhobertTokenizer"),c(IR,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartTokenizer"),c(qR,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(NR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(jR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagTokenizer"),c(GR,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizer"),c(OR,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizerFast"),c(VR,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizer"),c(XR,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(zR,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizer"),c(QR,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(WR,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(HR,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JR,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YR,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(KR,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(eB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(oB,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizer"),c(rB,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(tB,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(aB,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(sB,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(lB,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasTokenizer"),c(iB,"href","/docs/transformers/pr_17088/en/model_doc/tapex#transformers.TapexTokenizer"),c(dB,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(cB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(fB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(hB,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizer"),c(pB,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(uB,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMTokenizer"),c(_B,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(bB,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(vB,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(FB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MB,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(EB,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(CB,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(wB,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoFeatureExtractor"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoFeatureExtractor"),c(gi,"class","relative group"),c(AB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(yB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qB,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(NB,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ph,"id","transformers.AutoProcessor"),c(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ph,"href","#transformers.AutoProcessor"),c(hi,"class","relative group"),c(YB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(KB,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPProcessor"),c(ZB,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(eP,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(oP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(aP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(nP,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRProcessor"),c(sP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iP,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltProcessor"),c(dP,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(cP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoModel"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(mP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pP,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel"),c(uP,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel"),c(_P,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel"),c(bP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(vP,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(FP,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel"),c(TP,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(MP,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(EP,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(CP,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel"),c(wP,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel"),c(AP,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel"),c(yP,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel"),c(LP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel"),c(xP,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel"),c($P,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(kP,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(SP,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(RP,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel"),c(BP,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(PP,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(IP,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel"),c(qP,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel"),c(NP,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel"),c(jP,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(DP,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel"),c(GP,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel"),c(OP,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel"),c(VP,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel"),c(XP,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel"),c(zP,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel"),c(QP,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel"),c(WP,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel"),c(HP,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model"),c(UP,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(JP,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel"),c(YP,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel"),c(KP,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel"),c(ZP,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(eI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(oI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(rI,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel"),c(tI,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel"),c(aI,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel"),c(nI,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel"),c(sI,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model"),c(lI,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel"),c(iI,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel"),c(dI,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel"),c(cI,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(fI,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel"),c(mI,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel"),c(gI,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model"),c(hI,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel"),c(pI,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uI,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel"),c(_I,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel"),c(bI,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel"),c(vI,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel"),c(FI,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel"),c(TI,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(MI,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel"),c(EI,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel"),c(CI,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel"),c(wI,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel"),c(AI,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel"),c(yI,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(LI,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel"),c(xI,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel"),c($I,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel"),c(kI,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel"),c(SI,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel"),c(RI,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(BI,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel"),c(PI,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(II,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel"),c(qI,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model"),c(NI,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel"),c(jI,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(DI,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel"),c(GI,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(OI,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel"),c(VI,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel"),c(XI,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(zI,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel"),c(QI,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel"),c(WI,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(HI,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(UI,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel"),c(JI,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel"),c(YI,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel"),c(KI,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(ZI,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(eq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(oq,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel"),c(rq,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel"),c(tq,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cu,"id","transformers.AutoModelForPreTraining"),c(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cu,"href","#transformers.AutoModelForPreTraining"),c(vi,"class","relative group"),c(aq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lq,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining"),c(iq,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dq,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining"),c(cq,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(fq,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mq,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(gq,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hq,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pq,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uq,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_q,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining"),c(bq,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vq,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Fq,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Tq,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Mq,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Eq,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Cq,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wq,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Aq,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(yq,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Lq,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(xq,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($q,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kq,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(Sq,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Rq,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Bq,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Pq,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Iq,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(qq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Nq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(jq,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Dq,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Gq,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Oq,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Vq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(zq,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g_,"id","transformers.AutoModelForCausalLM"),c(g_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g_,"href","#transformers.AutoModelForCausalLM"),c(Mi,"class","relative group"),c(Qq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uq,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM"),c(Jq,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel"),c(Yq,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Kq,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Zq,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(eN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(oN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(rN,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(tN,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aN,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(nN,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM"),c(sN,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(lN,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(iN,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(dN,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM"),c(cN,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM"),c(fN,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(mN,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gN,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM"),c(hN,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(pN,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(uN,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(_N,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(bN,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(vN,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(FN,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(TN,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(MN,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(EN,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(CN,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(wN,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(AN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(LN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(xN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c($N,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z_,"id","transformers.AutoModelForMaskedLM"),c(Z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z_,"href","#transformers.AutoModelForMaskedLM"),c(wi,"class","relative group"),c(kN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BN,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(PN,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(IN,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM"),c(qN,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(NN,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(DN,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(GN,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ON,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(VN,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(XN,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(zN,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(WN,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(HN,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UN,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(JN,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(YN,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(KN,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ej,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oj,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(rj,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(tj,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(aj,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(nj,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ij,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cj,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(fj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(mj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(gj,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N1,"id","transformers.AutoModelForSeq2SeqLM"),c(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Li,"class","relative group"),c(hj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_j,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Mj,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Cj,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel"),c(Aj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Lj,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c($j,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForSequenceClassification"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForSequenceClassification"),c(ki,"class","relative group"),c(Bj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ij,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qj,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(jj,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rb,"id","transformers.AutoModelForMultipleChoice"),c(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rb,"href","#transformers.AutoModelForMultipleChoice"),c(Bi,"class","relative group"),c($D,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RD,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(BD,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice"),c(PD,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(ID,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(qD,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ND,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(jD,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(DD,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(GD,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(OD,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(XD,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(zD,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(QD,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(WD,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(HD,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(UD,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(JD,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(YD,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(KD,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(eG,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bb,"id","transformers.AutoModelForNextSentencePrediction"),c(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bb,"href","#transformers.AutoModelForNextSentencePrediction"),c(qi,"class","relative group"),c(lG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(fG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(mG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(gG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(hG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForTokenClassification"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForTokenClassification"),c(Di,"class","relative group"),c(pG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_G,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bG,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(vG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification"),c(FG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(TG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(MG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification"),c(EG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(CG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(wG,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(AG,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(yG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(LG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(xG,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c($G,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(kG,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(SG,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(RG,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(BG,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(PG,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(IG,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(qG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(NG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(jG,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(DG,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(GG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(OG,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(VG,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(XG,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(zG,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(QG,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(WG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(HG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(UG,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(JG,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForQuestionAnswering"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForQuestionAnswering"),c(Vi,"class","relative group"),c(YG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eO,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(hO,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(PO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(NO,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pv,"id","transformers.AutoModelForTableQuestionAnswering"),c(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qi,"class","relative group"),c(jO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForImageClassification"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForImageClassification"),c(Ui,"class","relative group"),c(VO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification"),c(WO,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(HO,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(UO,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification"),c(JO,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(YO,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(KO,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(ZO,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(eV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(oV,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(rV,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(tV,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(aV,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(nV,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification"),c(sV,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification"),c(lV,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForVision2Seq"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForVision2Seq"),c(Ki,"class","relative group"),c(iV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fV,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForAudioClassification"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForAudioClassification"),c(od,"class","relative group"),c(mV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForAudioFrameClassification"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForAudioFrameClassification"),c(ad,"class","relative group"),c(EV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(yV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(LV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(xV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForCTC"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForCTC"),c(ld,"class","relative group"),c($V,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(BV,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC"),c(PV,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC"),c(IV,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC"),c(qV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(NV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(jV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(DV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(cd,"class","relative group"),c(GV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(zV,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForAudioXVector"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForAudioXVector"),c(gd,"class","relative group"),c(QV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(JV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(YV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(KV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForMaskedImageModeling"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(tX,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(aX,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForObjectDetection"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForObjectDetection"),c(Fd,"class","relative group"),c(nX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection"),c(dX,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForImageSegmentation"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForImageSegmentation"),c(Ed,"class","relative group"),c(cX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForSemanticSegmentation"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ad,"class","relative group"),c(hX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(bX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(vX,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(FX,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.AutoModelForInstanceSegmentation"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.AutoModelForInstanceSegmentation"),c(xd,"class","relative group"),c(TX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CX,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.TFAutoModel"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.TFAutoModel"),c(Sd,"class","relative group"),c(wX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LX,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel"),c(xX,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel"),c($X,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel"),c(kX,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(SX,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(RX,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel"),c(BX,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel"),c(PX,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel"),c(IX,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel"),c(qX,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel"),c(NX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(jX,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel"),c(DX,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(GX,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(OX,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(VX,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel"),c(XX,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(zX,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel"),c(QX,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(WX,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model"),c(HX,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel"),c(UX,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel"),c(JX,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(YX,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel"),c(KX,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel"),c(ZX,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel"),c(ez,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel"),c(oz,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel"),c(rz,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(tz,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel"),c(az,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model"),c(nz,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(sz,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.TFOPTModel"),c(lz,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel"),c(iz,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel"),c(dz,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel"),c(cz,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel"),c(fz,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(mz,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model"),c(gz,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel"),c(hz,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pz,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel"),c(uz,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(_z,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bz,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel"),c(vz,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Fz,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.TFAutoModelForPreTraining"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.TFAutoModelForPreTraining"),c(Pd,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wz,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining"),c(yz,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Lz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xz,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($z,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kz,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Sz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Rz,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Bz,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Pz,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Iz,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(qz,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Nz,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jz,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Dz,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Gz,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Oz,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Vz,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Xz,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zz,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Qz,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.TFAutoModelForCausalLM"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.TFAutoModelForCausalLM"),c(Nd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Yz,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Kz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Zz,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eQ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(tQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(aQ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(nQ,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(sQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.TFAutoModelForImageClassification"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.TFAutoModelForImageClassification"),c(Gd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(mQ,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(gQ,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.TFAutoModelForMaskedLM"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.TFAutoModelForMaskedLM"),c(zd,"class","relative group"),c(hQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Hd,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(XQ,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(zQ,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel"),c(QQ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForSequenceClassification"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForSequenceClassification"),c(Yd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForMultipleChoice"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ec,"class","relative group"),c(wW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(xW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c($W,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(kW,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(RW,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(BW,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(PW,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(IW,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(qW,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(NW,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(jW,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(GW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(OW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(VW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(XW,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(tc,"class","relative group"),c(zW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForTokenClassification"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForTokenClassification"),c(sc,"class","relative group"),c(UW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(eH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(oH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(rH,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(tH,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(aH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(nH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(sH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(lH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(iH,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(dH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(cH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(fH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(mH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(gH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(hH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(pH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(uH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_H,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModelForQuestionAnswering"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(dc,"class","relative group"),c(bH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(xH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($H,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(kH,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(SH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(RH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(BH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(PH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(jH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(DH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForVision2Seq"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForVision2Seq"),c(mc,"class","relative group"),c(GH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(pc,"class","relative group"),c(zH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.FlaxAutoModel"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.FlaxAutoModel"),c(bc,"class","relative group"),c(UH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ZH,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel"),c(eU,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel"),c(oU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel"),c(rU,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(tU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(aU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(nU,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel"),c(sU,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel"),c(iU,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dU,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(fU,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel"),c(mU,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gU,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hU,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTModel"),c(pU,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(uU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(_U,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(bU,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model"),c(vU,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(FU,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel"),c(TU,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(MU,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(EU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.FlaxAutoModelForCausalLM"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Tc,"class","relative group"),c(CU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(LU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(xU,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c($U,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(kU,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(SU,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(RU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(BU,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(PU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(IU,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.FlaxAutoModelForPreTraining"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Cc,"class","relative group"),c(qU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GU,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VU,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zU,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(WU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(HU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(UU,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(JU,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(YU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.FlaxAutoModelForMaskedLM"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(yc,"class","relative group"),c(KU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(rJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(aJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(nJ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(sJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c($c,"class","relative group"),c(fJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(bJ,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(vJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TJ,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Rc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($J,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Ic,"class","relative group"),c(IJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForTokenClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(jc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ZJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(eY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(oY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(rY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(aY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Oc,"class","relative group"),c(sY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(fY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(mY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(gY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(pY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(uY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(zc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModelForImageClassification"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Hc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(wY,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.FlaxAutoModelForVision2Seq"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Yc,"class","relative group"),c(AY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ri),b(f,tf,_),b(f,Kr,_),e(Kr,ti),e(Kr,ai),e(ai,yw),e(Kr,af),b(f,Ne,_),b(f,Xe,_),e(Xe,ni),e(Xe,Mn),e(Mn,Lw),e(Xe,En),e(Xe,Cn),e(Cn,xw),e(Xe,si),e(Xe,wn),e(wn,$w),e(Xe,li),b(f,nf,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,V9),e(Ae,ii),e(ii,X9),e(Ae,z9),b(f,Eo,_),b(f,Fa,_),e(Fa,Q9),e(Fa,sf),e(sf,W9),e(Fa,UNe),b(f,VBe,_),b(f,di,_),e(di,lf),e(lf,TZ),M(kw,TZ,null),e(di,JNe),e(di,MZ),e(MZ,YNe),b(f,XBe,_),b(f,An,_),e(An,KNe),e(An,EZ),e(EZ,ZNe),e(An,eje),e(An,CZ),e(CZ,oje),e(An,rje),b(f,zBe,_),M(Sw,f,_),b(f,QBe,_),b(f,H9,_),e(H9,tje),b(f,WBe,_),M(df,f,_),b(f,HBe,_),b(f,ci,_),e(ci,cf),e(cf,wZ),M(Rw,wZ,null),e(ci,aje),e(ci,AZ),e(AZ,nje),b(f,UBe,_),b(f,Co,_),M(Bw,Co,null),e(Co,sje),e(Co,Pw),e(Pw,lje),e(Pw,U9),e(U9,ije),e(Pw,dje),e(Co,cje),e(Co,Iw),e(Iw,fje),e(Iw,yZ),e(yZ,mje),e(Iw,gje),e(Co,hje),e(Co,Mr),M(qw,Mr,null),e(Mr,pje),e(Mr,LZ),e(LZ,uje),e(Mr,_je),e(Mr,fi),e(fi,bje),e(fi,xZ),e(xZ,vje),e(fi,Fje),e(fi,$Z),e($Z,Tje),e(fi,Mje),e(Mr,Eje),e(Mr,A),e(A,ff),e(ff,kZ),e(kZ,Cje),e(ff,wje),e(ff,J9),e(J9,Aje),e(ff,yje),e(A,Lje),e(A,mf),e(mf,SZ),e(SZ,xje),e(mf,$je),e(mf,Y9),e(Y9,kje),e(mf,Sje),e(A,Rje),e(A,gf),e(gf,RZ),e(RZ,Bje),e(gf,Pje),e(gf,K9),e(K9,Ije),e(gf,qje),e(A,Nje),e(A,hf),e(hf,BZ),e(BZ,jje),e(hf,Dje),e(hf,Z9),e(Z9,Gje),e(hf,Oje),e(A,Vje),e(A,pf),e(pf,PZ),e(PZ,Xje),e(pf,zje),e(pf,e$),e(e$,Qje),e(pf,Wje),e(A,Hje),e(A,uf),e(uf,IZ),e(IZ,Uje),e(uf,Jje),e(uf,o$),e(o$,Yje),e(uf,Kje),e(A,Zje),e(A,_f),e(_f,qZ),e(qZ,eDe),e(_f,oDe),e(_f,r$),e(r$,rDe),e(_f,tDe),e(A,aDe),e(A,bf),e(bf,NZ),e(NZ,nDe),e(bf,sDe),e(bf,t$),e(t$,lDe),e(bf,iDe),e(A,dDe),e(A,vf),e(vf,jZ),e(jZ,cDe),e(vf,fDe),e(vf,a$),e(a$,mDe),e(vf,gDe),e(A,hDe),e(A,Ff),e(Ff,DZ),e(DZ,pDe),e(Ff,uDe),e(Ff,n$),e(n$,_De),e(Ff,bDe),e(A,vDe),e(A,Tf),e(Tf,GZ),e(GZ,FDe),e(Tf,TDe),e(Tf,s$),e(s$,MDe),e(Tf,EDe),e(A,CDe),e(A,Mf),e(Mf,OZ),e(OZ,wDe),e(Mf,ADe),e(Mf,l$),e(l$,yDe),e(Mf,LDe),e(A,xDe),e(A,Ef),e(Ef,VZ),e(VZ,$De),e(Ef,kDe),e(Ef,i$),e(i$,SDe),e(Ef,RDe),e(A,BDe),e(A,Cf),e(Cf,XZ),e(XZ,PDe),e(Cf,IDe),e(Cf,d$),e(d$,qDe),e(Cf,NDe),e(A,jDe),e(A,wf),e(wf,zZ),e(zZ,DDe),e(wf,GDe),e(wf,c$),e(c$,ODe),e(wf,VDe),e(A,XDe),e(A,Af),e(Af,QZ),e(QZ,zDe),e(Af,QDe),e(Af,f$),e(f$,WDe),e(Af,HDe),e(A,UDe),e(A,yf),e(yf,WZ),e(WZ,JDe),e(yf,YDe),e(yf,m$),e(m$,KDe),e(yf,ZDe),e(A,eGe),e(A,Lf),e(Lf,HZ),e(HZ,oGe),e(Lf,rGe),e(Lf,g$),e(g$,tGe),e(Lf,aGe),e(A,nGe),e(A,xf),e(xf,UZ),e(UZ,sGe),e(xf,lGe),e(xf,h$),e(h$,iGe),e(xf,dGe),e(A,cGe),e(A,$f),e($f,JZ),e(JZ,fGe),e($f,mGe),e($f,p$),e(p$,gGe),e($f,hGe),e(A,pGe),e(A,kf),e(kf,YZ),e(YZ,uGe),e(kf,_Ge),e(kf,u$),e(u$,bGe),e(kf,vGe),e(A,FGe),e(A,Sf),e(Sf,KZ),e(KZ,TGe),e(Sf,MGe),e(Sf,_$),e(_$,EGe),e(Sf,CGe),e(A,wGe),e(A,Rf),e(Rf,ZZ),e(ZZ,AGe),e(Rf,yGe),e(Rf,b$),e(b$,LGe),e(Rf,xGe),e(A,$Ge),e(A,Bf),e(Bf,eee),e(eee,kGe),e(Bf,SGe),e(Bf,v$),e(v$,RGe),e(Bf,BGe),e(A,PGe),e(A,Pf),e(Pf,oee),e(oee,IGe),e(Pf,qGe),e(Pf,F$),e(F$,NGe),e(Pf,jGe),e(A,DGe),e(A,If),e(If,ree),e(ree,GGe),e(If,OGe),e(If,T$),e(T$,VGe),e(If,XGe),e(A,zGe),e(A,qf),e(qf,tee),e(tee,QGe),e(qf,WGe),e(qf,M$),e(M$,HGe),e(qf,UGe),e(A,JGe),e(A,Nf),e(Nf,aee),e(aee,YGe),e(Nf,KGe),e(Nf,E$),e(E$,ZGe),e(Nf,eOe),e(A,oOe),e(A,jf),e(jf,nee),e(nee,rOe),e(jf,tOe),e(jf,C$),e(C$,aOe),e(jf,nOe),e(A,sOe),e(A,Df),e(Df,see),e(see,lOe),e(Df,iOe),e(Df,w$),e(w$,dOe),e(Df,cOe),e(A,fOe),e(A,Gf),e(Gf,lee),e(lee,mOe),e(Gf,gOe),e(Gf,A$),e(A$,hOe),e(Gf,pOe),e(A,uOe),e(A,Of),e(Of,iee),e(iee,_Oe),e(Of,bOe),e(Of,y$),e(y$,vOe),e(Of,FOe),e(A,TOe),e(A,Vf),e(Vf,dee),e(dee,MOe),e(Vf,EOe),e(Vf,L$),e(L$,COe),e(Vf,wOe),e(A,AOe),e(A,Xf),e(Xf,cee),e(cee,yOe),e(Xf,LOe),e(Xf,x$),e(x$,xOe),e(Xf,$Oe),e(A,kOe),e(A,zf),e(zf,fee),e(fee,SOe),e(zf,ROe),e(zf,$$),e($$,BOe),e(zf,POe),e(A,IOe),e(A,Qf),e(Qf,mee),e(mee,qOe),e(Qf,NOe),e(Qf,k$),e(k$,jOe),e(Qf,DOe),e(A,GOe),e(A,Wf),e(Wf,gee),e(gee,OOe),e(Wf,VOe),e(Wf,S$),e(S$,XOe),e(Wf,zOe),e(A,QOe),e(A,Hf),e(Hf,hee),e(hee,WOe),e(Hf,HOe),e(Hf,R$),e(R$,UOe),e(Hf,JOe),e(A,YOe),e(A,Uf),e(Uf,pee),e(pee,KOe),e(Uf,ZOe),e(Uf,B$),e(B$,eVe),e(Uf,oVe),e(A,rVe),e(A,Jf),e(Jf,uee),e(uee,tVe),e(Jf,aVe),e(Jf,P$),e(P$,nVe),e(Jf,sVe),e(A,lVe),e(A,Yf),e(Yf,_ee),e(_ee,iVe),e(Yf,dVe),e(Yf,I$),e(I$,cVe),e(Yf,fVe),e(A,mVe),e(A,Kf),e(Kf,bee),e(bee,gVe),e(Kf,hVe),e(Kf,q$),e(q$,pVe),e(Kf,uVe),e(A,_Ve),e(A,Zf),e(Zf,vee),e(vee,bVe),e(Zf,vVe),e(Zf,N$),e(N$,FVe),e(Zf,TVe),e(A,MVe),e(A,em),e(em,Fee),e(Fee,EVe),e(em,CVe),e(em,j$),e(j$,wVe),e(em,AVe),e(A,yVe),e(A,om),e(om,Tee),e(Tee,LVe),e(om,xVe),e(om,D$),e(D$,$Ve),e(om,kVe),e(A,SVe),e(A,rm),e(rm,Mee),e(Mee,RVe),e(rm,BVe),e(rm,G$),e(G$,PVe),e(rm,IVe),e(A,qVe),e(A,tm),e(tm,Eee),e(Eee,NVe),e(tm,jVe),e(tm,O$),e(O$,DVe),e(tm,GVe),e(A,OVe),e(A,am),e(am,Cee),e(Cee,VVe),e(am,XVe),e(am,V$),e(V$,zVe),e(am,QVe),e(A,WVe),e(A,nm),e(nm,wee),e(wee,HVe),e(nm,UVe),e(nm,X$),e(X$,JVe),e(nm,YVe),e(A,KVe),e(A,sm),e(sm,Aee),e(Aee,ZVe),e(sm,eXe),e(sm,z$),e(z$,oXe),e(sm,rXe),e(A,tXe),e(A,lm),e(lm,yee),e(yee,aXe),e(lm,nXe),e(lm,Q$),e(Q$,sXe),e(lm,lXe),e(A,iXe),e(A,im),e(im,Lee),e(Lee,dXe),e(im,cXe),e(im,W$),e(W$,fXe),e(im,mXe),e(A,gXe),e(A,dm),e(dm,xee),e(xee,hXe),e(dm,pXe),e(dm,H$),e(H$,uXe),e(dm,_Xe),e(A,bXe),e(A,cm),e(cm,$ee),e($ee,vXe),e(cm,FXe),e(cm,U$),e(U$,TXe),e(cm,MXe),e(A,EXe),e(A,fm),e(fm,kee),e(kee,CXe),e(fm,wXe),e(fm,J$),e(J$,AXe),e(fm,yXe),e(A,LXe),e(A,mm),e(mm,See),e(See,xXe),e(mm,$Xe),e(mm,Y$),e(Y$,kXe),e(mm,SXe),e(A,RXe),e(A,gm),e(gm,Ree),e(Ree,BXe),e(gm,PXe),e(gm,K$),e(K$,IXe),e(gm,qXe),e(A,NXe),e(A,hm),e(hm,Bee),e(Bee,jXe),e(hm,DXe),e(hm,Z$),e(Z$,GXe),e(hm,OXe),e(A,VXe),e(A,pm),e(pm,Pee),e(Pee,XXe),e(pm,zXe),e(pm,ek),e(ek,QXe),e(pm,WXe),e(A,HXe),e(A,um),e(um,Iee),e(Iee,UXe),e(um,JXe),e(um,ok),e(ok,YXe),e(um,KXe),e(A,ZXe),e(A,_m),e(_m,qee),e(qee,eze),e(_m,oze),e(_m,rk),e(rk,rze),e(_m,tze),e(A,aze),e(A,bm),e(bm,Nee),e(Nee,nze),e(bm,sze),e(bm,tk),e(tk,lze),e(bm,ize),e(A,dze),e(A,vm),e(vm,jee),e(jee,cze),e(vm,fze),e(vm,ak),e(ak,mze),e(vm,gze),e(A,hze),e(A,Fm),e(Fm,Dee),e(Dee,pze),e(Fm,uze),e(Fm,nk),e(nk,_ze),e(Fm,bze),e(A,vze),e(A,Tm),e(Tm,Gee),e(Gee,Fze),e(Tm,Tze),e(Tm,sk),e(sk,Mze),e(Tm,Eze),e(A,Cze),e(A,Mm),e(Mm,Oee),e(Oee,wze),e(Mm,Aze),e(Mm,lk),e(lk,yze),e(Mm,Lze),e(A,xze),e(A,Em),e(Em,Vee),e(Vee,$ze),e(Em,kze),e(Em,ik),e(ik,Sze),e(Em,Rze),e(A,Bze),e(A,Cm),e(Cm,Xee),e(Xee,Pze),e(Cm,Ize),e(Cm,dk),e(dk,qze),e(Cm,Nze),e(A,jze),e(A,wm),e(wm,zee),e(zee,Dze),e(wm,Gze),e(wm,ck),e(ck,Oze),e(wm,Vze),e(A,Xze),e(A,Am),e(Am,Qee),e(Qee,zze),e(Am,Qze),e(Am,fk),e(fk,Wze),e(Am,Hze),e(A,Uze),e(A,ym),e(ym,Wee),e(Wee,Jze),e(ym,Yze),e(ym,mk),e(mk,Kze),e(ym,Zze),e(A,eQe),e(A,Lm),e(Lm,Hee),e(Hee,oQe),e(Lm,rQe),e(Lm,gk),e(gk,tQe),e(Lm,aQe),e(A,nQe),e(A,xm),e(xm,Uee),e(Uee,sQe),e(xm,lQe),e(xm,hk),e(hk,iQe),e(xm,dQe),e(A,cQe),e(A,$m),e($m,Jee),e(Jee,fQe),e($m,mQe),e($m,pk),e(pk,gQe),e($m,hQe),e(A,pQe),e(A,km),e(km,Yee),e(Yee,uQe),e(km,_Qe),e(km,uk),e(uk,bQe),e(km,vQe),e(A,FQe),e(A,Sm),e(Sm,Kee),e(Kee,TQe),e(Sm,MQe),e(Sm,_k),e(_k,EQe),e(Sm,CQe),e(A,wQe),e(A,Rm),e(Rm,Zee),e(Zee,AQe),e(Rm,yQe),e(Rm,bk),e(bk,LQe),e(Rm,xQe),e(A,$Qe),e(A,Bm),e(Bm,eoe),e(eoe,kQe),e(Bm,SQe),e(Bm,vk),e(vk,RQe),e(Bm,BQe),e(A,PQe),e(A,Pm),e(Pm,ooe),e(ooe,IQe),e(Pm,qQe),e(Pm,Fk),e(Fk,NQe),e(Pm,jQe),e(A,DQe),e(A,Im),e(Im,roe),e(roe,GQe),e(Im,OQe),e(Im,Tk),e(Tk,VQe),e(Im,XQe),e(A,zQe),e(A,qm),e(qm,toe),e(toe,QQe),e(qm,WQe),e(qm,Mk),e(Mk,HQe),e(qm,UQe),e(A,JQe),e(A,Nm),e(Nm,aoe),e(aoe,YQe),e(Nm,KQe),e(Nm,Ek),e(Ek,ZQe),e(Nm,eWe),e(A,oWe),e(A,jm),e(jm,noe),e(noe,rWe),e(jm,tWe),e(jm,Ck),e(Ck,aWe),e(jm,nWe),e(A,sWe),e(A,Dm),e(Dm,soe),e(soe,lWe),e(Dm,iWe),e(Dm,wk),e(wk,dWe),e(Dm,cWe),e(A,fWe),e(A,Gm),e(Gm,loe),e(loe,mWe),e(Gm,gWe),e(Gm,Ak),e(Ak,hWe),e(Gm,pWe),e(A,uWe),e(A,Om),e(Om,ioe),e(ioe,_We),e(Om,bWe),e(Om,yk),e(yk,vWe),e(Om,FWe),e(A,TWe),e(A,Vm),e(Vm,doe),e(doe,MWe),e(Vm,EWe),e(Vm,Lk),e(Lk,CWe),e(Vm,wWe),e(A,AWe),e(A,Xm),e(Xm,coe),e(coe,yWe),e(Xm,LWe),e(Xm,xk),e(xk,xWe),e(Xm,$We),e(A,kWe),e(A,zm),e(zm,foe),e(foe,SWe),e(zm,RWe),e(zm,$k),e($k,BWe),e(zm,PWe),e(A,IWe),e(A,Qm),e(Qm,moe),e(moe,qWe),e(Qm,NWe),e(Qm,kk),e(kk,jWe),e(Qm,DWe),e(A,GWe),e(A,Wm),e(Wm,goe),e(goe,OWe),e(Wm,VWe),e(Wm,Sk),e(Sk,XWe),e(Wm,zWe),e(A,QWe),e(A,Hm),e(Hm,hoe),e(hoe,WWe),e(Hm,HWe),e(Hm,Rk),e(Rk,UWe),e(Hm,JWe),e(A,YWe),e(A,Um),e(Um,poe),e(poe,KWe),e(Um,ZWe),e(Um,Bk),e(Bk,eHe),e(Um,oHe),e(A,rHe),e(A,Jm),e(Jm,uoe),e(uoe,tHe),e(Jm,aHe),e(Jm,Pk),e(Pk,nHe),e(Jm,sHe),e(A,lHe),e(A,Ym),e(Ym,_oe),e(_oe,iHe),e(Ym,dHe),e(Ym,Ik),e(Ik,cHe),e(Ym,fHe),e(A,mHe),e(A,Km),e(Km,boe),e(boe,gHe),e(Km,hHe),e(Km,qk),e(qk,pHe),e(Km,uHe),e(A,_He),e(A,Zm),e(Zm,voe),e(voe,bHe),e(Zm,vHe),e(Zm,Nk),e(Nk,FHe),e(Zm,THe),e(A,MHe),e(A,eg),e(eg,Foe),e(Foe,EHe),e(eg,CHe),e(eg,jk),e(jk,wHe),e(eg,AHe),e(A,yHe),e(A,og),e(og,Toe),e(Toe,LHe),e(og,xHe),e(og,Dk),e(Dk,$He),e(og,kHe),e(A,SHe),e(A,rg),e(rg,Moe),e(Moe,RHe),e(rg,BHe),e(rg,Gk),e(Gk,PHe),e(rg,IHe),e(A,qHe),e(A,tg),e(tg,Eoe),e(Eoe,NHe),e(tg,jHe),e(tg,Ok),e(Ok,DHe),e(tg,GHe),e(A,OHe),e(A,ag),e(ag,Coe),e(Coe,VHe),e(ag,XHe),e(ag,Vk),e(Vk,zHe),e(ag,QHe),e(A,WHe),e(A,ng),e(ng,woe),e(woe,HHe),e(ng,UHe),e(ng,Xk),e(Xk,JHe),e(ng,YHe),e(A,KHe),e(A,sg),e(sg,Aoe),e(Aoe,ZHe),e(sg,eUe),e(sg,zk),e(zk,oUe),e(sg,rUe),e(Mr,tUe),M(lg,Mr,null),e(Co,aUe),e(Co,ig),M(Nw,ig,null),e(ig,nUe),e(ig,yoe),e(yoe,sUe),b(f,JBe,_),b(f,mi,_),e(mi,dg),e(dg,Loe),M(jw,Loe,null),e(mi,lUe),e(mi,xoe),e(xoe,iUe),b(f,YBe,_),b(f,wo,_),M(Dw,wo,null),e(wo,dUe),e(wo,Gw),e(Gw,cUe),e(Gw,Qk),e(Qk,fUe),e(Gw,mUe),e(wo,gUe),e(wo,Ow),e(Ow,hUe),e(Ow,$oe),e($oe,pUe),e(Ow,uUe),e(wo,_Ue),e(wo,Er),M(Vw,Er,null),e(Er,bUe),e(Er,koe),e(koe,vUe),e(Er,FUe),e(Er,Ta),e(Ta,TUe),e(Ta,Soe),e(Soe,MUe),e(Ta,EUe),e(Ta,Roe),e(Roe,CUe),e(Ta,wUe),e(Ta,Boe),e(Boe,AUe),e(Ta,yUe),e(Er,LUe),e(Er,k),e(k,yn),e(yn,Poe),e(Poe,xUe),e(yn,$Ue),e(yn,Wk),e(Wk,kUe),e(yn,SUe),e(yn,Hk),e(Hk,RUe),e(yn,BUe),e(k,PUe),e(k,Ln),e(Ln,Ioe),e(Ioe,IUe),e(Ln,qUe),e(Ln,Uk),e(Uk,NUe),e(Ln,jUe),e(Ln,Jk),e(Jk,DUe),e(Ln,GUe),e(k,OUe),e(k,xn),e(xn,qoe),e(qoe,VUe),e(xn,XUe),e(xn,Yk),e(Yk,zUe),e(xn,QUe),e(xn,Kk),e(Kk,WUe),e(xn,HUe),e(k,UUe),e(k,cg),e(cg,Noe),e(Noe,JUe),e(cg,YUe),e(cg,Zk),e(Zk,KUe),e(cg,ZUe),e(k,eJe),e(k,$n),e($n,joe),e(joe,oJe),e($n,rJe),e($n,eS),e(eS,tJe),e($n,aJe),e($n,oS),e(oS,nJe),e($n,sJe),e(k,lJe),e(k,fg),e(fg,Doe),e(Doe,iJe),e(fg,dJe),e(fg,rS),e(rS,cJe),e(fg,fJe),e(k,mJe),e(k,mg),e(mg,Goe),e(Goe,gJe),e(mg,hJe),e(mg,tS),e(tS,pJe),e(mg,uJe),e(k,_Je),e(k,gg),e(gg,Ooe),e(Ooe,bJe),e(gg,vJe),e(gg,aS),e(aS,FJe),e(gg,TJe),e(k,MJe),e(k,kn),e(kn,Voe),e(Voe,EJe),e(kn,CJe),e(kn,nS),e(nS,wJe),e(kn,AJe),e(kn,sS),e(sS,yJe),e(kn,LJe),e(k,xJe),e(k,Sn),e(Sn,Xoe),e(Xoe,$Je),e(Sn,kJe),e(Sn,lS),e(lS,SJe),e(Sn,RJe),e(Sn,iS),e(iS,BJe),e(Sn,PJe),e(k,IJe),e(k,Rn),e(Rn,zoe),e(zoe,qJe),e(Rn,NJe),e(Rn,dS),e(dS,jJe),e(Rn,DJe),e(Rn,cS),e(cS,GJe),e(Rn,OJe),e(k,VJe),e(k,hg),e(hg,Qoe),e(Qoe,XJe),e(hg,zJe),e(hg,fS),e(fS,QJe),e(hg,WJe),e(k,HJe),e(k,pg),e(pg,Woe),e(Woe,UJe),e(pg,JJe),e(pg,mS),e(mS,YJe),e(pg,KJe),e(k,ZJe),e(k,Bn),e(Bn,Hoe),e(Hoe,eYe),e(Bn,oYe),e(Bn,gS),e(gS,rYe),e(Bn,tYe),e(Bn,hS),e(hS,aYe),e(Bn,nYe),e(k,sYe),e(k,ug),e(ug,Uoe),e(Uoe,lYe),e(ug,iYe),e(ug,pS),e(pS,dYe),e(ug,cYe),e(k,fYe),e(k,Pn),e(Pn,Joe),e(Joe,mYe),e(Pn,gYe),e(Pn,uS),e(uS,hYe),e(Pn,pYe),e(Pn,_S),e(_S,uYe),e(Pn,_Ye),e(k,bYe),e(k,In),e(In,Yoe),e(Yoe,vYe),e(In,FYe),e(In,bS),e(bS,TYe),e(In,MYe),e(In,vS),e(vS,EYe),e(In,CYe),e(k,wYe),e(k,qn),e(qn,Koe),e(Koe,AYe),e(qn,yYe),e(qn,FS),e(FS,LYe),e(qn,xYe),e(qn,TS),e(TS,$Ye),e(qn,kYe),e(k,SYe),e(k,_g),e(_g,Zoe),e(Zoe,RYe),e(_g,BYe),e(_g,MS),e(MS,PYe),e(_g,IYe),e(k,qYe),e(k,Nn),e(Nn,ere),e(ere,NYe),e(Nn,jYe),e(Nn,ES),e(ES,DYe),e(Nn,GYe),e(Nn,CS),e(CS,OYe),e(Nn,VYe),e(k,XYe),e(k,jn),e(jn,ore),e(ore,zYe),e(jn,QYe),e(jn,wS),e(wS,WYe),e(jn,HYe),e(jn,AS),e(AS,UYe),e(jn,JYe),e(k,YYe),e(k,Dn),e(Dn,rre),e(rre,KYe),e(Dn,ZYe),e(Dn,yS),e(yS,eKe),e(Dn,oKe),e(Dn,LS),e(LS,rKe),e(Dn,tKe),e(k,aKe),e(k,Gn),e(Gn,tre),e(tre,nKe),e(Gn,sKe),e(Gn,xS),e(xS,lKe),e(Gn,iKe),e(Gn,$S),e($S,dKe),e(Gn,cKe),e(k,fKe),e(k,On),e(On,are),e(are,mKe),e(On,gKe),e(On,kS),e(kS,hKe),e(On,pKe),e(On,SS),e(SS,uKe),e(On,_Ke),e(k,bKe),e(k,Vn),e(Vn,nre),e(nre,vKe),e(Vn,FKe),e(Vn,RS),e(RS,TKe),e(Vn,MKe),e(Vn,BS),e(BS,EKe),e(Vn,CKe),e(k,wKe),e(k,bg),e(bg,sre),e(sre,AKe),e(bg,yKe),e(bg,PS),e(PS,LKe),e(bg,xKe),e(k,$Ke),e(k,Xn),e(Xn,lre),e(lre,kKe),e(Xn,SKe),e(Xn,IS),e(IS,RKe),e(Xn,BKe),e(Xn,qS),e(qS,PKe),e(Xn,IKe),e(k,qKe),e(k,vg),e(vg,ire),e(ire,NKe),e(vg,jKe),e(vg,NS),e(NS,DKe),e(vg,GKe),e(k,OKe),e(k,zn),e(zn,dre),e(dre,VKe),e(zn,XKe),e(zn,jS),e(jS,zKe),e(zn,QKe),e(zn,DS),e(DS,WKe),e(zn,HKe),e(k,UKe),e(k,Qn),e(Qn,cre),e(cre,JKe),e(Qn,YKe),e(Qn,GS),e(GS,KKe),e(Qn,ZKe),e(Qn,OS),e(OS,eZe),e(Qn,oZe),e(k,rZe),e(k,Wn),e(Wn,fre),e(fre,tZe),e(Wn,aZe),e(Wn,VS),e(VS,nZe),e(Wn,sZe),e(Wn,XS),e(XS,lZe),e(Wn,iZe),e(k,dZe),e(k,Hn),e(Hn,mre),e(mre,cZe),e(Hn,fZe),e(Hn,zS),e(zS,mZe),e(Hn,gZe),e(Hn,QS),e(QS,hZe),e(Hn,pZe),e(k,uZe),e(k,Un),e(Un,gre),e(gre,_Ze),e(Un,bZe),e(Un,WS),e(WS,vZe),e(Un,FZe),e(Un,HS),e(HS,TZe),e(Un,MZe),e(k,EZe),e(k,Fg),e(Fg,hre),e(hre,CZe),e(Fg,wZe),e(Fg,US),e(US,AZe),e(Fg,yZe),e(k,LZe),e(k,Jn),e(Jn,pre),e(pre,xZe),e(Jn,$Ze),e(Jn,JS),e(JS,kZe),e(Jn,SZe),e(Jn,YS),e(YS,RZe),e(Jn,BZe),e(k,PZe),e(k,Yn),e(Yn,ure),e(ure,IZe),e(Yn,qZe),e(Yn,KS),e(KS,NZe),e(Yn,jZe),e(Yn,ZS),e(ZS,DZe),e(Yn,GZe),e(k,OZe),e(k,Kn),e(Kn,_re),e(_re,VZe),e(Kn,XZe),e(Kn,eR),e(eR,zZe),e(Kn,QZe),e(Kn,oR),e(oR,WZe),e(Kn,HZe),e(k,UZe),e(k,Zn),e(Zn,bre),e(bre,JZe),e(Zn,YZe),e(Zn,rR),e(rR,KZe),e(Zn,ZZe),e(Zn,tR),e(tR,eeo),e(Zn,oeo),e(k,reo),e(k,es),e(es,vre),e(vre,teo),e(es,aeo),e(es,aR),e(aR,neo),e(es,seo),e(es,nR),e(nR,leo),e(es,ieo),e(k,deo),e(k,os),e(os,Fre),e(Fre,ceo),e(os,feo),e(os,sR),e(sR,meo),e(os,geo),e(os,lR),e(lR,heo),e(os,peo),e(k,ueo),e(k,Tg),e(Tg,Tre),e(Tre,_eo),e(Tg,beo),e(Tg,iR),e(iR,veo),e(Tg,Feo),e(k,Teo),e(k,rs),e(rs,Mre),e(Mre,Meo),e(rs,Eeo),e(rs,dR),e(dR,Ceo),e(rs,weo),e(rs,cR),e(cR,Aeo),e(rs,yeo),e(k,Leo),e(k,Mg),e(Mg,Ere),e(Ere,xeo),e(Mg,$eo),e(Mg,fR),e(fR,keo),e(Mg,Seo),e(k,Reo),e(k,Eg),e(Eg,Cre),e(Cre,Beo),e(Eg,Peo),e(Eg,mR),e(mR,Ieo),e(Eg,qeo),e(k,Neo),e(k,ts),e(ts,wre),e(wre,jeo),e(ts,Deo),e(ts,gR),e(gR,Geo),e(ts,Oeo),e(ts,hR),e(hR,Veo),e(ts,Xeo),e(k,zeo),e(k,as),e(as,Are),e(Are,Qeo),e(as,Weo),e(as,pR),e(pR,Heo),e(as,Ueo),e(as,uR),e(uR,Jeo),e(as,Yeo),e(k,Keo),e(k,ns),e(ns,yre),e(yre,Zeo),e(ns,eoo),e(ns,_R),e(_R,ooo),e(ns,roo),e(ns,bR),e(bR,too),e(ns,aoo),e(k,noo),e(k,Cg),e(Cg,Lre),e(Lre,soo),e(Cg,loo),e(Cg,vR),e(vR,ioo),e(Cg,doo),e(k,coo),e(k,ss),e(ss,xre),e(xre,foo),e(ss,moo),e(ss,FR),e(FR,goo),e(ss,hoo),e(ss,TR),e(TR,poo),e(ss,uoo),e(k,_oo),e(k,ls),e(ls,$re),e($re,boo),e(ls,voo),e(ls,MR),e(MR,Foo),e(ls,Too),e(ls,ER),e(ER,Moo),e(ls,Eoo),e(k,Coo),e(k,is),e(is,kre),e(kre,woo),e(is,Aoo),e(is,CR),e(CR,yoo),e(is,Loo),e(is,wR),e(wR,xoo),e(is,$oo),e(k,koo),e(k,ds),e(ds,Sre),e(Sre,Soo),e(ds,Roo),e(ds,AR),e(AR,Boo),e(ds,Poo),e(ds,yR),e(yR,Ioo),e(ds,qoo),e(k,Noo),e(k,cs),e(cs,Rre),e(Rre,joo),e(cs,Doo),e(cs,LR),e(LR,Goo),e(cs,Ooo),e(cs,xR),e(xR,Voo),e(cs,Xoo),e(k,zoo),e(k,fs),e(fs,Bre),e(Bre,Qoo),e(fs,Woo),e(fs,$R),e($R,Hoo),e(fs,Uoo),e(fs,kR),e(kR,Joo),e(fs,Yoo),e(k,Koo),e(k,ms),e(ms,Pre),e(Pre,Zoo),e(ms,ero),e(ms,SR),e(SR,oro),e(ms,rro),e(ms,RR),e(RR,tro),e(ms,aro),e(k,nro),e(k,wg),e(wg,Ire),e(Ire,sro),e(wg,lro),e(wg,BR),e(BR,iro),e(wg,dro),e(k,cro),e(k,Ag),e(Ag,qre),e(qre,fro),e(Ag,mro),e(Ag,PR),e(PR,gro),e(Ag,hro),e(k,pro),e(k,yg),e(yg,Nre),e(Nre,uro),e(yg,_ro),e(yg,IR),e(IR,bro),e(yg,vro),e(k,Fro),e(k,Lg),e(Lg,jre),e(jre,Tro),e(Lg,Mro),e(Lg,qR),e(qR,Ero),e(Lg,Cro),e(k,wro),e(k,gs),e(gs,Dre),e(Dre,Aro),e(gs,yro),e(gs,NR),e(NR,Lro),e(gs,xro),e(gs,jR),e(jR,$ro),e(gs,kro),e(k,Sro),e(k,xg),e(xg,Gre),e(Gre,Rro),e(xg,Bro),e(xg,DR),e(DR,Pro),e(xg,Iro),e(k,qro),e(k,hs),e(hs,Ore),e(Ore,Nro),e(hs,jro),e(hs,GR),e(GR,Dro),e(hs,Gro),e(hs,OR),e(OR,Oro),e(hs,Vro),e(k,Xro),e(k,ps),e(ps,Vre),e(Vre,zro),e(ps,Qro),e(ps,VR),e(VR,Wro),e(ps,Hro),e(ps,XR),e(XR,Uro),e(ps,Jro),e(k,Yro),e(k,us),e(us,Xre),e(Xre,Kro),e(us,Zro),e(us,zR),e(zR,eto),e(us,oto),e(us,QR),e(QR,rto),e(us,tto),e(k,ato),e(k,_s),e(_s,zre),e(zre,nto),e(_s,sto),e(_s,WR),e(WR,lto),e(_s,ito),e(_s,HR),e(HR,dto),e(_s,cto),e(k,fto),e(k,bs),e(bs,Qre),e(Qre,mto),e(bs,gto),e(bs,UR),e(UR,hto),e(bs,pto),e(bs,JR),e(JR,uto),e(bs,_to),e(k,bto),e(k,vs),e(vs,Wre),e(Wre,vto),e(vs,Fto),e(vs,YR),e(YR,Tto),e(vs,Mto),e(vs,KR),e(KR,Eto),e(vs,Cto),e(k,wto),e(k,$g),e($g,Hre),e(Hre,Ato),e($g,yto),e($g,ZR),e(ZR,Lto),e($g,xto),e(k,$to),e(k,kg),e(kg,Ure),e(Ure,kto),e(kg,Sto),e(kg,eB),e(eB,Rto),e(kg,Bto),e(k,Pto),e(k,Fs),e(Fs,Jre),e(Jre,Ito),e(Fs,qto),e(Fs,oB),e(oB,Nto),e(Fs,jto),e(Fs,rB),e(rB,Dto),e(Fs,Gto),e(k,Oto),e(k,Ts),e(Ts,Yre),e(Yre,Vto),e(Ts,Xto),e(Ts,tB),e(tB,zto),e(Ts,Qto),e(Ts,aB),e(aB,Wto),e(Ts,Hto),e(k,Uto),e(k,Ms),e(Ms,Kre),e(Kre,Jto),e(Ms,Yto),e(Ms,nB),e(nB,Kto),e(Ms,Zto),e(Ms,sB),e(sB,eao),e(Ms,oao),e(k,rao),e(k,Sg),e(Sg,Zre),e(Zre,tao),e(Sg,aao),e(Sg,lB),e(lB,nao),e(Sg,sao),e(k,lao),e(k,Rg),e(Rg,ete),e(ete,iao),e(Rg,dao),e(Rg,iB),e(iB,cao),e(Rg,fao),e(k,mao),e(k,Bg),e(Bg,ote),e(ote,gao),e(Bg,hao),e(Bg,dB),e(dB,pao),e(Bg,uao),e(k,_ao),e(k,Es),e(Es,rte),e(rte,bao),e(Es,vao),e(Es,cB),e(cB,Fao),e(Es,Tao),e(Es,fB),e(fB,Mao),e(Es,Eao),e(k,Cao),e(k,Pg),e(Pg,tte),e(tte,wao),e(Pg,Aao),e(Pg,mB),e(mB,yao),e(Pg,Lao),e(k,xao),e(k,Ig),e(Ig,ate),e(ate,$ao),e(Ig,kao),e(Ig,gB),e(gB,Sao),e(Ig,Rao),e(k,Bao),e(k,Cs),e(Cs,nte),e(nte,Pao),e(Cs,Iao),e(Cs,hB),e(hB,qao),e(Cs,Nao),e(Cs,pB),e(pB,jao),e(Cs,Dao),e(k,Gao),e(k,qg),e(qg,ste),e(ste,Oao),e(qg,Vao),e(qg,uB),e(uB,Xao),e(qg,zao),e(k,Qao),e(k,Ng),e(Ng,lte),e(lte,Wao),e(Ng,Hao),e(Ng,_B),e(_B,Uao),e(Ng,Jao),e(k,Yao),e(k,ws),e(ws,ite),e(ite,Kao),e(ws,Zao),e(ws,bB),e(bB,eno),e(ws,ono),e(ws,vB),e(vB,rno),e(ws,tno),e(k,ano),e(k,As),e(As,dte),e(dte,nno),e(As,sno),e(As,FB),e(FB,lno),e(As,ino),e(As,TB),e(TB,dno),e(As,cno),e(k,fno),e(k,ys),e(ys,cte),e(cte,mno),e(ys,gno),e(ys,MB),e(MB,hno),e(ys,pno),e(ys,EB),e(EB,uno),e(ys,_no),e(k,bno),e(k,Ls),e(Ls,fte),e(fte,vno),e(Ls,Fno),e(Ls,CB),e(CB,Tno),e(Ls,Mno),e(Ls,wB),e(wB,Eno),e(Ls,Cno),e(Er,wno),M(jg,Er,null),e(wo,Ano),e(wo,Dg),M(Xw,Dg,null),e(Dg,yno),e(Dg,mte),e(mte,Lno),b(f,KBe,_),b(f,gi,_),e(gi,Gg),e(Gg,gte),M(zw,gte,null),e(gi,xno),e(gi,hte),e(hte,$no),b(f,ZBe,_),b(f,Ao,_),M(Qw,Ao,null),e(Ao,kno),e(Ao,Ww),e(Ww,Sno),e(Ww,AB),e(AB,Rno),e(Ww,Bno),e(Ao,Pno),e(Ao,Hw),e(Hw,Ino),e(Hw,pte),e(pte,qno),e(Hw,Nno),e(Ao,jno),e(Ao,Qe),M(Uw,Qe,null),e(Qe,Dno),e(Qe,ute),e(ute,Gno),e(Qe,Ono),e(Qe,Ma),e(Ma,Vno),e(Ma,_te),e(_te,Xno),e(Ma,zno),e(Ma,bte),e(bte,Qno),e(Ma,Wno),e(Ma,vte),e(vte,Hno),e(Ma,Uno),e(Qe,Jno),e(Qe,ae),e(ae,Og),e(Og,Fte),e(Fte,Yno),e(Og,Kno),e(Og,yB),e(yB,Zno),e(Og,eso),e(ae,oso),e(ae,Vg),e(Vg,Tte),e(Tte,rso),e(Vg,tso),e(Vg,LB),e(LB,aso),e(Vg,nso),e(ae,sso),e(ae,Xg),e(Xg,Mte),e(Mte,lso),e(Xg,iso),e(Xg,xB),e(xB,dso),e(Xg,cso),e(ae,fso),e(ae,zg),e(zg,Ete),e(Ete,mso),e(zg,gso),e(zg,$B),e($B,hso),e(zg,pso),e(ae,uso),e(ae,Qg),e(Qg,Cte),e(Cte,_so),e(Qg,bso),e(Qg,kB),e(kB,vso),e(Qg,Fso),e(ae,Tso),e(ae,Wg),e(Wg,wte),e(wte,Mso),e(Wg,Eso),e(Wg,SB),e(SB,Cso),e(Wg,wso),e(ae,Aso),e(ae,Hg),e(Hg,Ate),e(Ate,yso),e(Hg,Lso),e(Hg,RB),e(RB,xso),e(Hg,$so),e(ae,kso),e(ae,Ug),e(Ug,yte),e(yte,Sso),e(Ug,Rso),e(Ug,BB),e(BB,Bso),e(Ug,Pso),e(ae,Iso),e(ae,Jg),e(Jg,Lte),e(Lte,qso),e(Jg,Nso),e(Jg,PB),e(PB,jso),e(Jg,Dso),e(ae,Gso),e(ae,Yg),e(Yg,xte),e(xte,Oso),e(Yg,Vso),e(Yg,IB),e(IB,Xso),e(Yg,zso),e(ae,Qso),e(ae,Kg),e(Kg,$te),e($te,Wso),e(Kg,Hso),e(Kg,qB),e(qB,Uso),e(Kg,Jso),e(ae,Yso),e(ae,Zg),e(Zg,kte),e(kte,Kso),e(Zg,Zso),e(Zg,NB),e(NB,elo),e(Zg,olo),e(ae,rlo),e(ae,eh),e(eh,Ste),e(Ste,tlo),e(eh,alo),e(eh,jB),e(jB,nlo),e(eh,slo),e(ae,llo),e(ae,oh),e(oh,Rte),e(Rte,ilo),e(oh,dlo),e(oh,DB),e(DB,clo),e(oh,flo),e(ae,mlo),e(ae,rh),e(rh,Bte),e(Bte,glo),e(rh,hlo),e(rh,GB),e(GB,plo),e(rh,ulo),e(ae,_lo),e(ae,th),e(th,Pte),e(Pte,blo),e(th,vlo),e(th,OB),e(OB,Flo),e(th,Tlo),e(ae,Mlo),e(ae,ah),e(ah,Ite),e(Ite,Elo),e(ah,Clo),e(ah,VB),e(VB,wlo),e(ah,Alo),e(ae,ylo),e(ae,nh),e(nh,qte),e(qte,Llo),e(nh,xlo),e(nh,XB),e(XB,$lo),e(nh,klo),e(ae,Slo),e(ae,sh),e(sh,Nte),e(Nte,Rlo),e(sh,Blo),e(sh,zB),e(zB,Plo),e(sh,Ilo),e(ae,qlo),e(ae,lh),e(lh,jte),e(jte,Nlo),e(lh,jlo),e(lh,QB),e(QB,Dlo),e(lh,Glo),e(ae,Olo),e(ae,ih),e(ih,Dte),e(Dte,Vlo),e(ih,Xlo),e(ih,WB),e(WB,zlo),e(ih,Qlo),e(ae,Wlo),e(ae,dh),e(dh,Gte),e(Gte,Hlo),e(dh,Ulo),e(dh,HB),e(HB,Jlo),e(dh,Ylo),e(ae,Klo),e(ae,ch),e(ch,Ote),e(Ote,Zlo),e(ch,eio),e(ch,UB),e(UB,oio),e(ch,rio),e(ae,tio),e(ae,fh),e(fh,Vte),e(Vte,aio),e(fh,nio),e(fh,JB),e(JB,sio),e(fh,lio),e(Qe,iio),M(mh,Qe,null),e(Qe,dio),M(gh,Qe,null),e(Ao,cio),e(Ao,hh),M(Jw,hh,null),e(hh,fio),e(hh,Xte),e(Xte,mio),b(f,ePe,_),b(f,hi,_),e(hi,ph),e(ph,zte),M(Yw,zte,null),e(hi,gio),e(hi,Qte),e(Qte,hio),b(f,oPe,_),b(f,yo,_),M(Kw,yo,null),e(yo,pio),e(yo,Zw),e(Zw,uio),e(Zw,YB),e(YB,_io),e(Zw,bio),e(yo,vio),e(yo,eA),e(eA,Fio),e(eA,Wte),e(Wte,Tio),e(eA,Mio),e(yo,Eio),e(yo,We),M(oA,We,null),e(We,Cio),e(We,Hte),e(Hte,wio),e(We,Aio),e(We,pi),e(pi,yio),e(pi,Ute),e(Ute,Lio),e(pi,xio),e(pi,Jte),e(Jte,$io),e(pi,kio),e(We,Sio),e(We,be),e(be,uh),e(uh,Yte),e(Yte,Rio),e(uh,Bio),e(uh,KB),e(KB,Pio),e(uh,Iio),e(be,qio),e(be,_h),e(_h,Kte),e(Kte,Nio),e(_h,jio),e(_h,ZB),e(ZB,Dio),e(_h,Gio),e(be,Oio),e(be,bh),e(bh,Zte),e(Zte,Vio),e(bh,Xio),e(bh,eP),e(eP,zio),e(bh,Qio),e(be,Wio),e(be,vh),e(vh,eae),e(eae,Hio),e(vh,Uio),e(vh,oP),e(oP,Jio),e(vh,Yio),e(be,Kio),e(be,Fh),e(Fh,oae),e(oae,Zio),e(Fh,edo),e(Fh,rP),e(rP,odo),e(Fh,rdo),e(be,tdo),e(be,Th),e(Th,rae),e(rae,ado),e(Th,ndo),e(Th,tP),e(tP,sdo),e(Th,ldo),e(be,ido),e(be,Mh),e(Mh,tae),e(tae,ddo),e(Mh,cdo),e(Mh,aP),e(aP,fdo),e(Mh,mdo),e(be,gdo),e(be,Eh),e(Eh,aae),e(aae,hdo),e(Eh,pdo),e(Eh,nP),e(nP,udo),e(Eh,_do),e(be,bdo),e(be,Ch),e(Ch,nae),e(nae,vdo),e(Ch,Fdo),e(Ch,sP),e(sP,Tdo),e(Ch,Mdo),e(be,Edo),e(be,wh),e(wh,sae),e(sae,Cdo),e(wh,wdo),e(wh,lP),e(lP,Ado),e(wh,ydo),e(be,Ldo),e(be,Ah),e(Ah,lae),e(lae,xdo),e(Ah,$do),e(Ah,iP),e(iP,kdo),e(Ah,Sdo),e(be,Rdo),e(be,yh),e(yh,iae),e(iae,Bdo),e(yh,Pdo),e(yh,dP),e(dP,Ido),e(yh,qdo),e(be,Ndo),e(be,Lh),e(Lh,dae),e(dae,jdo),e(Lh,Ddo),e(Lh,cP),e(cP,Gdo),e(Lh,Odo),e(be,Vdo),e(be,xh),e(xh,cae),e(cae,Xdo),e(xh,zdo),e(xh,fP),e(fP,Qdo),e(xh,Wdo),e(We,Hdo),M($h,We,null),e(We,Udo),M(kh,We,null),e(yo,Jdo),e(yo,Sh),M(rA,Sh,null),e(Sh,Ydo),e(Sh,fae),e(fae,Kdo),b(f,rPe,_),b(f,ui,_),e(ui,Rh),e(Rh,mae),M(tA,mae,null),e(ui,Zdo),e(ui,gae),e(gae,eco),b(f,tPe,_),b(f,Lo,_),M(aA,Lo,null),e(Lo,oco),e(Lo,_i),e(_i,rco),e(_i,mP),e(mP,tco),e(_i,aco),e(_i,gP),e(gP,nco),e(_i,sco),e(Lo,lco),e(Lo,nA),e(nA,ico),e(nA,hae),e(hae,dco),e(nA,cco),e(Lo,fco),e(Lo,Zr),M(sA,Zr,null),e(Zr,mco),e(Zr,pae),e(pae,gco),e(Zr,hco),e(Zr,bi),e(bi,pco),e(bi,uae),e(uae,uco),e(bi,_co),e(bi,hP),e(hP,bco),e(bi,vco),e(Zr,Fco),M(Bh,Zr,null),e(Lo,Tco),e(Lo,He),M(lA,He,null),e(He,Mco),e(He,_ae),e(_ae,Eco),e(He,Cco),e(He,Ea),e(Ea,wco),e(Ea,bae),e(bae,Aco),e(Ea,yco),e(Ea,vae),e(vae,Lco),e(Ea,xco),e(Ea,Fae),e(Fae,$co),e(Ea,kco),e(He,Sco),e(He,x),e(x,Ph),e(Ph,Tae),e(Tae,Rco),e(Ph,Bco),e(Ph,pP),e(pP,Pco),e(Ph,Ico),e(x,qco),e(x,Ih),e(Ih,Mae),e(Mae,Nco),e(Ih,jco),e(Ih,uP),e(uP,Dco),e(Ih,Gco),e(x,Oco),e(x,qh),e(qh,Eae),e(Eae,Vco),e(qh,Xco),e(qh,_P),e(_P,zco),e(qh,Qco),e(x,Wco),e(x,Nh),e(Nh,Cae),e(Cae,Hco),e(Nh,Uco),e(Nh,bP),e(bP,Jco),e(Nh,Yco),e(x,Kco),e(x,jh),e(jh,wae),e(wae,Zco),e(jh,efo),e(jh,vP),e(vP,ofo),e(jh,rfo),e(x,tfo),e(x,Dh),e(Dh,Aae),e(Aae,afo),e(Dh,nfo),e(Dh,FP),e(FP,sfo),e(Dh,lfo),e(x,ifo),e(x,Gh),e(Gh,yae),e(yae,dfo),e(Gh,cfo),e(Gh,TP),e(TP,ffo),e(Gh,mfo),e(x,gfo),e(x,Oh),e(Oh,Lae),e(Lae,hfo),e(Oh,pfo),e(Oh,MP),e(MP,ufo),e(Oh,_fo),e(x,bfo),e(x,Vh),e(Vh,xae),e(xae,vfo),e(Vh,Ffo),e(Vh,EP),e(EP,Tfo),e(Vh,Mfo),e(x,Efo),e(x,Xh),e(Xh,$ae),e($ae,Cfo),e(Xh,wfo),e(Xh,CP),e(CP,Afo),e(Xh,yfo),e(x,Lfo),e(x,zh),e(zh,kae),e(kae,xfo),e(zh,$fo),e(zh,wP),e(wP,kfo),e(zh,Sfo),e(x,Rfo),e(x,Qh),e(Qh,Sae),e(Sae,Bfo),e(Qh,Pfo),e(Qh,AP),e(AP,Ifo),e(Qh,qfo),e(x,Nfo),e(x,Wh),e(Wh,Rae),e(Rae,jfo),e(Wh,Dfo),e(Wh,yP),e(yP,Gfo),e(Wh,Ofo),e(x,Vfo),e(x,Hh),e(Hh,Bae),e(Bae,Xfo),e(Hh,zfo),e(Hh,LP),e(LP,Qfo),e(Hh,Wfo),e(x,Hfo),e(x,Uh),e(Uh,Pae),e(Pae,Ufo),e(Uh,Jfo),e(Uh,xP),e(xP,Yfo),e(Uh,Kfo),e(x,Zfo),e(x,Jh),e(Jh,Iae),e(Iae,emo),e(Jh,omo),e(Jh,$P),e($P,rmo),e(Jh,tmo),e(x,amo),e(x,Yh),e(Yh,qae),e(qae,nmo),e(Yh,smo),e(Yh,kP),e(kP,lmo),e(Yh,imo),e(x,dmo),e(x,Kh),e(Kh,Nae),e(Nae,cmo),e(Kh,fmo),e(Kh,SP),e(SP,mmo),e(Kh,gmo),e(x,hmo),e(x,Zh),e(Zh,jae),e(jae,pmo),e(Zh,umo),e(Zh,RP),e(RP,_mo),e(Zh,bmo),e(x,vmo),e(x,ep),e(ep,Dae),e(Dae,Fmo),e(ep,Tmo),e(ep,BP),e(BP,Mmo),e(ep,Emo),e(x,Cmo),e(x,op),e(op,Gae),e(Gae,wmo),e(op,Amo),e(op,PP),e(PP,ymo),e(op,Lmo),e(x,xmo),e(x,rp),e(rp,Oae),e(Oae,$mo),e(rp,kmo),e(rp,IP),e(IP,Smo),e(rp,Rmo),e(x,Bmo),e(x,tp),e(tp,Vae),e(Vae,Pmo),e(tp,Imo),e(tp,qP),e(qP,qmo),e(tp,Nmo),e(x,jmo),e(x,ap),e(ap,Xae),e(Xae,Dmo),e(ap,Gmo),e(ap,NP),e(NP,Omo),e(ap,Vmo),e(x,Xmo),e(x,np),e(np,zae),e(zae,zmo),e(np,Qmo),e(np,jP),e(jP,Wmo),e(np,Hmo),e(x,Umo),e(x,sp),e(sp,Qae),e(Qae,Jmo),e(sp,Ymo),e(sp,DP),e(DP,Kmo),e(sp,Zmo),e(x,ego),e(x,lp),e(lp,Wae),e(Wae,ogo),e(lp,rgo),e(lp,GP),e(GP,tgo),e(lp,ago),e(x,ngo),e(x,ip),e(ip,Hae),e(Hae,sgo),e(ip,lgo),e(ip,OP),e(OP,igo),e(ip,dgo),e(x,cgo),e(x,dp),e(dp,Uae),e(Uae,fgo),e(dp,mgo),e(dp,VP),e(VP,ggo),e(dp,hgo),e(x,pgo),e(x,cp),e(cp,Jae),e(Jae,ugo),e(cp,_go),e(cp,XP),e(XP,bgo),e(cp,vgo),e(x,Fgo),e(x,xs),e(xs,Yae),e(Yae,Tgo),e(xs,Mgo),e(xs,zP),e(zP,Ego),e(xs,Cgo),e(xs,QP),e(QP,wgo),e(xs,Ago),e(x,ygo),e(x,fp),e(fp,Kae),e(Kae,Lgo),e(fp,xgo),e(fp,WP),e(WP,$go),e(fp,kgo),e(x,Sgo),e(x,mp),e(mp,Zae),e(Zae,Rgo),e(mp,Bgo),e(mp,HP),e(HP,Pgo),e(mp,Igo),e(x,qgo),e(x,gp),e(gp,ene),e(ene,Ngo),e(gp,jgo),e(gp,UP),e(UP,Dgo),e(gp,Ggo),e(x,Ogo),e(x,hp),e(hp,one),e(one,Vgo),e(hp,Xgo),e(hp,JP),e(JP,zgo),e(hp,Qgo),e(x,Wgo),e(x,pp),e(pp,rne),e(rne,Hgo),e(pp,Ugo),e(pp,YP),e(YP,Jgo),e(pp,Ygo),e(x,Kgo),e(x,up),e(up,tne),e(tne,Zgo),e(up,eho),e(up,KP),e(KP,oho),e(up,rho),e(x,tho),e(x,_p),e(_p,ane),e(ane,aho),e(_p,nho),e(_p,ZP),e(ZP,sho),e(_p,lho),e(x,iho),e(x,bp),e(bp,nne),e(nne,dho),e(bp,cho),e(bp,eI),e(eI,fho),e(bp,mho),e(x,gho),e(x,vp),e(vp,sne),e(sne,hho),e(vp,pho),e(vp,oI),e(oI,uho),e(vp,_ho),e(x,bho),e(x,Fp),e(Fp,lne),e(lne,vho),e(Fp,Fho),e(Fp,rI),e(rI,Tho),e(Fp,Mho),e(x,Eho),e(x,Tp),e(Tp,ine),e(ine,Cho),e(Tp,who),e(Tp,tI),e(tI,Aho),e(Tp,yho),e(x,Lho),e(x,Mp),e(Mp,dne),e(dne,xho),e(Mp,$ho),e(Mp,aI),e(aI,kho),e(Mp,Sho),e(x,Rho),e(x,Ep),e(Ep,cne),e(cne,Bho),e(Ep,Pho),e(Ep,nI),e(nI,Iho),e(Ep,qho),e(x,Nho),e(x,Cp),e(Cp,fne),e(fne,jho),e(Cp,Dho),e(Cp,sI),e(sI,Gho),e(Cp,Oho),e(x,Vho),e(x,wp),e(wp,mne),e(mne,Xho),e(wp,zho),e(wp,lI),e(lI,Qho),e(wp,Who),e(x,Hho),e(x,Ap),e(Ap,gne),e(gne,Uho),e(Ap,Jho),e(Ap,iI),e(iI,Yho),e(Ap,Kho),e(x,Zho),e(x,yp),e(yp,hne),e(hne,epo),e(yp,opo),e(yp,dI),e(dI,rpo),e(yp,tpo),e(x,apo),e(x,Lp),e(Lp,pne),e(pne,npo),e(Lp,spo),e(Lp,cI),e(cI,lpo),e(Lp,ipo),e(x,dpo),e(x,xp),e(xp,une),e(une,cpo),e(xp,fpo),e(xp,fI),e(fI,mpo),e(xp,gpo),e(x,hpo),e(x,$p),e($p,_ne),e(_ne,ppo),e($p,upo),e($p,mI),e(mI,_po),e($p,bpo),e(x,vpo),e(x,kp),e(kp,bne),e(bne,Fpo),e(kp,Tpo),e(kp,gI),e(gI,Mpo),e(kp,Epo),e(x,Cpo),e(x,Sp),e(Sp,vne),e(vne,wpo),e(Sp,Apo),e(Sp,hI),e(hI,ypo),e(Sp,Lpo),e(x,xpo),e(x,Rp),e(Rp,Fne),e(Fne,$po),e(Rp,kpo),e(Rp,pI),e(pI,Spo),e(Rp,Rpo),e(x,Bpo),e(x,Bp),e(Bp,Tne),e(Tne,Ppo),e(Bp,Ipo),e(Bp,uI),e(uI,qpo),e(Bp,Npo),e(x,jpo),e(x,Pp),e(Pp,Mne),e(Mne,Dpo),e(Pp,Gpo),e(Pp,_I),e(_I,Opo),e(Pp,Vpo),e(x,Xpo),e(x,Ip),e(Ip,Ene),e(Ene,zpo),e(Ip,Qpo),e(Ip,bI),e(bI,Wpo),e(Ip,Hpo),e(x,Upo),e(x,qp),e(qp,Cne),e(Cne,Jpo),e(qp,Ypo),e(qp,vI),e(vI,Kpo),e(qp,Zpo),e(x,euo),e(x,Np),e(Np,wne),e(wne,ouo),e(Np,ruo),e(Np,FI),e(FI,tuo),e(Np,auo),e(x,nuo),e(x,jp),e(jp,Ane),e(Ane,suo),e(jp,luo),e(jp,TI),e(TI,iuo),e(jp,duo),e(x,cuo),e(x,Dp),e(Dp,yne),e(yne,fuo),e(Dp,muo),e(Dp,MI),e(MI,guo),e(Dp,huo),e(x,puo),e(x,Gp),e(Gp,Lne),e(Lne,uuo),e(Gp,_uo),e(Gp,EI),e(EI,buo),e(Gp,vuo),e(x,Fuo),e(x,Op),e(Op,xne),e(xne,Tuo),e(Op,Muo),e(Op,CI),e(CI,Euo),e(Op,Cuo),e(x,wuo),e(x,Vp),e(Vp,$ne),e($ne,Auo),e(Vp,yuo),e(Vp,wI),e(wI,Luo),e(Vp,xuo),e(x,$uo),e(x,Xp),e(Xp,kne),e(kne,kuo),e(Xp,Suo),e(Xp,AI),e(AI,Ruo),e(Xp,Buo),e(x,Puo),e(x,zp),e(zp,Sne),e(Sne,Iuo),e(zp,quo),e(zp,yI),e(yI,Nuo),e(zp,juo),e(x,Duo),e(x,Qp),e(Qp,Rne),e(Rne,Guo),e(Qp,Ouo),e(Qp,LI),e(LI,Vuo),e(Qp,Xuo),e(x,zuo),e(x,Wp),e(Wp,Bne),e(Bne,Quo),e(Wp,Wuo),e(Wp,xI),e(xI,Huo),e(Wp,Uuo),e(x,Juo),e(x,Hp),e(Hp,Pne),e(Pne,Yuo),e(Hp,Kuo),e(Hp,$I),e($I,Zuo),e(Hp,e_o),e(x,o_o),e(x,Up),e(Up,Ine),e(Ine,r_o),e(Up,t_o),e(Up,kI),e(kI,a_o),e(Up,n_o),e(x,s_o),e(x,Jp),e(Jp,qne),e(qne,l_o),e(Jp,i_o),e(Jp,SI),e(SI,d_o),e(Jp,c_o),e(x,f_o),e(x,Yp),e(Yp,Nne),e(Nne,m_o),e(Yp,g_o),e(Yp,RI),e(RI,h_o),e(Yp,p_o),e(x,u_o),e(x,Kp),e(Kp,jne),e(jne,__o),e(Kp,b_o),e(Kp,BI),e(BI,v_o),e(Kp,F_o),e(x,T_o),e(x,Zp),e(Zp,Dne),e(Dne,M_o),e(Zp,E_o),e(Zp,PI),e(PI,C_o),e(Zp,w_o),e(x,A_o),e(x,eu),e(eu,Gne),e(Gne,y_o),e(eu,L_o),e(eu,II),e(II,x_o),e(eu,$_o),e(x,k_o),e(x,ou),e(ou,One),e(One,S_o),e(ou,R_o),e(ou,qI),e(qI,B_o),e(ou,P_o),e(x,I_o),e(x,ru),e(ru,Vne),e(Vne,q_o),e(ru,N_o),e(ru,NI),e(NI,j_o),e(ru,D_o),e(x,G_o),e(x,tu),e(tu,Xne),e(Xne,O_o),e(tu,V_o),e(tu,jI),e(jI,X_o),e(tu,z_o),e(x,Q_o),e(x,au),e(au,zne),e(zne,W_o),e(au,H_o),e(au,DI),e(DI,U_o),e(au,J_o),e(x,Y_o),e(x,nu),e(nu,Qne),e(Qne,K_o),e(nu,Z_o),e(nu,GI),e(GI,e1o),e(nu,o1o),e(x,r1o),e(x,su),e(su,Wne),e(Wne,t1o),e(su,a1o),e(su,OI),e(OI,n1o),e(su,s1o),e(x,l1o),e(x,lu),e(lu,Hne),e(Hne,i1o),e(lu,d1o),e(lu,VI),e(VI,c1o),e(lu,f1o),e(x,m1o),e(x,iu),e(iu,Une),e(Une,g1o),e(iu,h1o),e(iu,XI),e(XI,p1o),e(iu,u1o),e(x,_1o),e(x,du),e(du,Jne),e(Jne,b1o),e(du,v1o),e(du,zI),e(zI,F1o),e(du,T1o),e(x,M1o),e(x,cu),e(cu,Yne),e(Yne,E1o),e(cu,C1o),e(cu,QI),e(QI,w1o),e(cu,A1o),e(x,y1o),e(x,fu),e(fu,Kne),e(Kne,L1o),e(fu,x1o),e(fu,WI),e(WI,$1o),e(fu,k1o),e(x,S1o),e(x,mu),e(mu,Zne),e(Zne,R1o),e(mu,B1o),e(mu,HI),e(HI,P1o),e(mu,I1o),e(x,q1o),e(x,gu),e(gu,ese),e(ese,N1o),e(gu,j1o),e(gu,UI),e(UI,D1o),e(gu,G1o),e(x,O1o),e(x,hu),e(hu,ose),e(ose,V1o),e(hu,X1o),e(hu,JI),e(JI,z1o),e(hu,Q1o),e(x,W1o),e(x,pu),e(pu,rse),e(rse,H1o),e(pu,U1o),e(pu,YI),e(YI,J1o),e(pu,Y1o),e(x,K1o),e(x,uu),e(uu,tse),e(tse,Z1o),e(uu,e8o),e(uu,KI),e(KI,o8o),e(uu,r8o),e(x,t8o),e(x,_u),e(_u,ase),e(ase,a8o),e(_u,n8o),e(_u,ZI),e(ZI,s8o),e(_u,l8o),e(x,i8o),e(x,bu),e(bu,nse),e(nse,d8o),e(bu,c8o),e(bu,eq),e(eq,f8o),e(bu,m8o),e(x,g8o),e(x,vu),e(vu,sse),e(sse,h8o),e(vu,p8o),e(vu,oq),e(oq,u8o),e(vu,_8o),e(x,b8o),e(x,Fu),e(Fu,lse),e(lse,v8o),e(Fu,F8o),e(Fu,rq),e(rq,T8o),e(Fu,M8o),e(x,E8o),e(x,Tu),e(Tu,ise),e(ise,C8o),e(Tu,w8o),e(Tu,tq),e(tq,A8o),e(Tu,y8o),e(He,L8o),e(He,Mu),e(Mu,x8o),e(Mu,dse),e(dse,$8o),e(Mu,k8o),e(Mu,cse),e(cse,S8o),e(He,R8o),M(Eu,He,null),b(f,aPe,_),b(f,vi,_),e(vi,Cu),e(Cu,fse),M(iA,fse,null),e(vi,B8o),e(vi,mse),e(mse,P8o),b(f,nPe,_),b(f,xo,_),M(dA,xo,null),e(xo,I8o),e(xo,Fi),e(Fi,q8o),e(Fi,aq),e(aq,N8o),e(Fi,j8o),e(Fi,nq),e(nq,D8o),e(Fi,G8o),e(xo,O8o),e(xo,cA),e(cA,V8o),e(cA,gse),e(gse,X8o),e(cA,z8o),e(xo,Q8o),e(xo,et),M(fA,et,null),e(et,W8o),e(et,hse),e(hse,H8o),e(et,U8o),e(et,Ti),e(Ti,J8o),e(Ti,pse),e(pse,Y8o),e(Ti,K8o),e(Ti,sq),e(sq,Z8o),e(Ti,ebo),e(et,obo),M(wu,et,null),e(xo,rbo),e(xo,Ue),M(mA,Ue,null),e(Ue,tbo),e(Ue,use),e(use,abo),e(Ue,nbo),e(Ue,Ca),e(Ca,sbo),e(Ca,_se),e(_se,lbo),e(Ca,ibo),e(Ca,bse),e(bse,dbo),e(Ca,cbo),e(Ca,vse),e(vse,fbo),e(Ca,mbo),e(Ue,gbo),e(Ue,G),e(G,Au),e(Au,Fse),e(Fse,hbo),e(Au,pbo),e(Au,lq),e(lq,ubo),e(Au,_bo),e(G,bbo),e(G,yu),e(yu,Tse),e(Tse,vbo),e(yu,Fbo),e(yu,iq),e(iq,Tbo),e(yu,Mbo),e(G,Ebo),e(G,Lu),e(Lu,Mse),e(Mse,Cbo),e(Lu,wbo),e(Lu,dq),e(dq,Abo),e(Lu,ybo),e(G,Lbo),e(G,xu),e(xu,Ese),e(Ese,xbo),e(xu,$bo),e(xu,cq),e(cq,kbo),e(xu,Sbo),e(G,Rbo),e(G,$u),e($u,Cse),e(Cse,Bbo),e($u,Pbo),e($u,fq),e(fq,Ibo),e($u,qbo),e(G,Nbo),e(G,ku),e(ku,wse),e(wse,jbo),e(ku,Dbo),e(ku,mq),e(mq,Gbo),e(ku,Obo),e(G,Vbo),e(G,Su),e(Su,Ase),e(Ase,Xbo),e(Su,zbo),e(Su,gq),e(gq,Qbo),e(Su,Wbo),e(G,Hbo),e(G,Ru),e(Ru,yse),e(yse,Ubo),e(Ru,Jbo),e(Ru,hq),e(hq,Ybo),e(Ru,Kbo),e(G,Zbo),e(G,Bu),e(Bu,Lse),e(Lse,e2o),e(Bu,o2o),e(Bu,pq),e(pq,r2o),e(Bu,t2o),e(G,a2o),e(G,Pu),e(Pu,xse),e(xse,n2o),e(Pu,s2o),e(Pu,uq),e(uq,l2o),e(Pu,i2o),e(G,d2o),e(G,Iu),e(Iu,$se),e($se,c2o),e(Iu,f2o),e(Iu,_q),e(_q,m2o),e(Iu,g2o),e(G,h2o),e(G,qu),e(qu,kse),e(kse,p2o),e(qu,u2o),e(qu,bq),e(bq,_2o),e(qu,b2o),e(G,v2o),e(G,Nu),e(Nu,Sse),e(Sse,F2o),e(Nu,T2o),e(Nu,vq),e(vq,M2o),e(Nu,E2o),e(G,C2o),e(G,ju),e(ju,Rse),e(Rse,w2o),e(ju,A2o),e(ju,Fq),e(Fq,y2o),e(ju,L2o),e(G,x2o),e(G,Du),e(Du,Bse),e(Bse,$2o),e(Du,k2o),e(Du,Tq),e(Tq,S2o),e(Du,R2o),e(G,B2o),e(G,Gu),e(Gu,Pse),e(Pse,P2o),e(Gu,I2o),e(Gu,Mq),e(Mq,q2o),e(Gu,N2o),e(G,j2o),e(G,Ou),e(Ou,Ise),e(Ise,D2o),e(Ou,G2o),e(Ou,Eq),e(Eq,O2o),e(Ou,V2o),e(G,X2o),e(G,Vu),e(Vu,qse),e(qse,z2o),e(Vu,Q2o),e(Vu,Cq),e(Cq,W2o),e(Vu,H2o),e(G,U2o),e(G,Xu),e(Xu,Nse),e(Nse,J2o),e(Xu,Y2o),e(Xu,wq),e(wq,K2o),e(Xu,Z2o),e(G,evo),e(G,zu),e(zu,jse),e(jse,ovo),e(zu,rvo),e(zu,Aq),e(Aq,tvo),e(zu,avo),e(G,nvo),e(G,Qu),e(Qu,Dse),e(Dse,svo),e(Qu,lvo),e(Qu,yq),e(yq,ivo),e(Qu,dvo),e(G,cvo),e(G,Wu),e(Wu,Gse),e(Gse,fvo),e(Wu,mvo),e(Wu,Lq),e(Lq,gvo),e(Wu,hvo),e(G,pvo),e(G,Hu),e(Hu,Ose),e(Ose,uvo),e(Hu,_vo),e(Hu,xq),e(xq,bvo),e(Hu,vvo),e(G,Fvo),e(G,Uu),e(Uu,Vse),e(Vse,Tvo),e(Uu,Mvo),e(Uu,$q),e($q,Evo),e(Uu,Cvo),e(G,wvo),e(G,Ju),e(Ju,Xse),e(Xse,Avo),e(Ju,yvo),e(Ju,kq),e(kq,Lvo),e(Ju,xvo),e(G,$vo),e(G,Yu),e(Yu,zse),e(zse,kvo),e(Yu,Svo),e(Yu,Sq),e(Sq,Rvo),e(Yu,Bvo),e(G,Pvo),e(G,Ku),e(Ku,Qse),e(Qse,Ivo),e(Ku,qvo),e(Ku,Rq),e(Rq,Nvo),e(Ku,jvo),e(G,Dvo),e(G,Zu),e(Zu,Wse),e(Wse,Gvo),e(Zu,Ovo),e(Zu,Bq),e(Bq,Vvo),e(Zu,Xvo),e(G,zvo),e(G,e_),e(e_,Hse),e(Hse,Qvo),e(e_,Wvo),e(e_,Pq),e(Pq,Hvo),e(e_,Uvo),e(G,Jvo),e(G,o_),e(o_,Use),e(Use,Yvo),e(o_,Kvo),e(o_,Iq),e(Iq,Zvo),e(o_,eFo),e(G,oFo),e(G,r_),e(r_,Jse),e(Jse,rFo),e(r_,tFo),e(r_,qq),e(qq,aFo),e(r_,nFo),e(G,sFo),e(G,t_),e(t_,Yse),e(Yse,lFo),e(t_,iFo),e(t_,Nq),e(Nq,dFo),e(t_,cFo),e(G,fFo),e(G,a_),e(a_,Kse),e(Kse,mFo),e(a_,gFo),e(a_,jq),e(jq,hFo),e(a_,pFo),e(G,uFo),e(G,n_),e(n_,Zse),e(Zse,_Fo),e(n_,bFo),e(n_,Dq),e(Dq,vFo),e(n_,FFo),e(G,TFo),e(G,s_),e(s_,ele),e(ele,MFo),e(s_,EFo),e(s_,Gq),e(Gq,CFo),e(s_,wFo),e(G,AFo),e(G,l_),e(l_,ole),e(ole,yFo),e(l_,LFo),e(l_,Oq),e(Oq,xFo),e(l_,$Fo),e(G,kFo),e(G,i_),e(i_,rle),e(rle,SFo),e(i_,RFo),e(i_,Vq),e(Vq,BFo),e(i_,PFo),e(G,IFo),e(G,d_),e(d_,tle),e(tle,qFo),e(d_,NFo),e(d_,Xq),e(Xq,jFo),e(d_,DFo),e(G,GFo),e(G,c_),e(c_,ale),e(ale,OFo),e(c_,VFo),e(c_,zq),e(zq,XFo),e(c_,zFo),e(Ue,QFo),e(Ue,f_),e(f_,WFo),e(f_,nle),e(nle,HFo),e(f_,UFo),e(f_,sle),e(sle,JFo),e(Ue,YFo),M(m_,Ue,null),b(f,sPe,_),b(f,Mi,_),e(Mi,g_),e(g_,lle),M(gA,lle,null),e(Mi,KFo),e(Mi,ile),e(ile,ZFo),b(f,lPe,_),b(f,$o,_),M(hA,$o,null),e($o,e0o),e($o,Ei),e(Ei,o0o),e(Ei,Qq),e(Qq,r0o),e(Ei,t0o),e(Ei,Wq),e(Wq,a0o),e(Ei,n0o),e($o,s0o),e($o,pA),e(pA,l0o),e(pA,dle),e(dle,i0o),e(pA,d0o),e($o,c0o),e($o,ot),M(uA,ot,null),e(ot,f0o),e(ot,cle),e(cle,m0o),e(ot,g0o),e(ot,Ci),e(Ci,h0o),e(Ci,fle),e(fle,p0o),e(Ci,u0o),e(Ci,Hq),e(Hq,_0o),e(Ci,b0o),e(ot,v0o),M(h_,ot,null),e($o,F0o),e($o,Je),M(_A,Je,null),e(Je,T0o),e(Je,mle),e(mle,M0o),e(Je,E0o),e(Je,wa),e(wa,C0o),e(wa,gle),e(gle,w0o),e(wa,A0o),e(wa,hle),e(hle,y0o),e(wa,L0o),e(wa,ple),e(ple,x0o),e(wa,$0o),e(Je,k0o),e(Je,z),e(z,p_),e(p_,ule),e(ule,S0o),e(p_,R0o),e(p_,Uq),e(Uq,B0o),e(p_,P0o),e(z,I0o),e(z,u_),e(u_,_le),e(_le,q0o),e(u_,N0o),e(u_,Jq),e(Jq,j0o),e(u_,D0o),e(z,G0o),e(z,__),e(__,ble),e(ble,O0o),e(__,V0o),e(__,Yq),e(Yq,X0o),e(__,z0o),e(z,Q0o),e(z,b_),e(b_,vle),e(vle,W0o),e(b_,H0o),e(b_,Kq),e(Kq,U0o),e(b_,J0o),e(z,Y0o),e(z,v_),e(v_,Fle),e(Fle,K0o),e(v_,Z0o),e(v_,Zq),e(Zq,eTo),e(v_,oTo),e(z,rTo),e(z,F_),e(F_,Tle),e(Tle,tTo),e(F_,aTo),e(F_,eN),e(eN,nTo),e(F_,sTo),e(z,lTo),e(z,T_),e(T_,Mle),e(Mle,iTo),e(T_,dTo),e(T_,oN),e(oN,cTo),e(T_,fTo),e(z,mTo),e(z,M_),e(M_,Ele),e(Ele,gTo),e(M_,hTo),e(M_,rN),e(rN,pTo),e(M_,uTo),e(z,_To),e(z,E_),e(E_,Cle),e(Cle,bTo),e(E_,vTo),e(E_,tN),e(tN,FTo),e(E_,TTo),e(z,MTo),e(z,C_),e(C_,wle),e(wle,ETo),e(C_,CTo),e(C_,aN),e(aN,wTo),e(C_,ATo),e(z,yTo),e(z,w_),e(w_,Ale),e(Ale,LTo),e(w_,xTo),e(w_,nN),e(nN,$To),e(w_,kTo),e(z,STo),e(z,A_),e(A_,yle),e(yle,RTo),e(A_,BTo),e(A_,sN),e(sN,PTo),e(A_,ITo),e(z,qTo),e(z,y_),e(y_,Lle),e(Lle,NTo),e(y_,jTo),e(y_,lN),e(lN,DTo),e(y_,GTo),e(z,OTo),e(z,L_),e(L_,xle),e(xle,VTo),e(L_,XTo),e(L_,iN),e(iN,zTo),e(L_,QTo),e(z,WTo),e(z,x_),e(x_,$le),e($le,HTo),e(x_,UTo),e(x_,dN),e(dN,JTo),e(x_,YTo),e(z,KTo),e(z,$_),e($_,kle),e(kle,ZTo),e($_,e7o),e($_,cN),e(cN,o7o),e($_,r7o),e(z,t7o),e(z,k_),e(k_,Sle),e(Sle,a7o),e(k_,n7o),e(k_,fN),e(fN,s7o),e(k_,l7o),e(z,i7o),e(z,S_),e(S_,Rle),e(Rle,d7o),e(S_,c7o),e(S_,mN),e(mN,f7o),e(S_,m7o),e(z,g7o),e(z,R_),e(R_,Ble),e(Ble,h7o),e(R_,p7o),e(R_,gN),e(gN,u7o),e(R_,_7o),e(z,b7o),e(z,B_),e(B_,Ple),e(Ple,v7o),e(B_,F7o),e(B_,hN),e(hN,T7o),e(B_,M7o),e(z,E7o),e(z,P_),e(P_,Ile),e(Ile,C7o),e(P_,w7o),e(P_,pN),e(pN,A7o),e(P_,y7o),e(z,L7o),e(z,I_),e(I_,qle),e(qle,x7o),e(I_,$7o),e(I_,uN),e(uN,k7o),e(I_,S7o),e(z,R7o),e(z,q_),e(q_,Nle),e(Nle,B7o),e(q_,P7o),e(q_,_N),e(_N,I7o),e(q_,q7o),e(z,N7o),e(z,N_),e(N_,jle),e(jle,j7o),e(N_,D7o),e(N_,bN),e(bN,G7o),e(N_,O7o),e(z,V7o),e(z,j_),e(j_,Dle),e(Dle,X7o),e(j_,z7o),e(j_,vN),e(vN,Q7o),e(j_,W7o),e(z,H7o),e(z,D_),e(D_,Gle),e(Gle,U7o),e(D_,J7o),e(D_,FN),e(FN,Y7o),e(D_,K7o),e(z,Z7o),e(z,G_),e(G_,Ole),e(Ole,eMo),e(G_,oMo),e(G_,TN),e(TN,rMo),e(G_,tMo),e(z,aMo),e(z,O_),e(O_,Vle),e(Vle,nMo),e(O_,sMo),e(O_,MN),e(MN,lMo),e(O_,iMo),e(z,dMo),e(z,V_),e(V_,Xle),e(Xle,cMo),e(V_,fMo),e(V_,EN),e(EN,mMo),e(V_,gMo),e(z,hMo),e(z,X_),e(X_,zle),e(zle,pMo),e(X_,uMo),e(X_,CN),e(CN,_Mo),e(X_,bMo),e(z,vMo),e(z,z_),e(z_,Qle),e(Qle,FMo),e(z_,TMo),e(z_,wN),e(wN,MMo),e(z_,EMo),e(z,CMo),e(z,Q_),e(Q_,Wle),e(Wle,wMo),e(Q_,AMo),e(Q_,AN),e(AN,yMo),e(Q_,LMo),e(z,xMo),e(z,W_),e(W_,Hle),e(Hle,$Mo),e(W_,kMo),e(W_,yN),e(yN,SMo),e(W_,RMo),e(z,BMo),e(z,H_),e(H_,Ule),e(Ule,PMo),e(H_,IMo),e(H_,LN),e(LN,qMo),e(H_,NMo),e(z,jMo),e(z,U_),e(U_,Jle),e(Jle,DMo),e(U_,GMo),e(U_,xN),e(xN,OMo),e(U_,VMo),e(z,XMo),e(z,J_),e(J_,Yle),e(Yle,zMo),e(J_,QMo),e(J_,$N),e($N,WMo),e(J_,HMo),e(Je,UMo),e(Je,Y_),e(Y_,JMo),e(Y_,Kle),e(Kle,YMo),e(Y_,KMo),e(Y_,Zle),e(Zle,ZMo),e(Je,e4o),M(K_,Je,null),b(f,iPe,_),b(f,wi,_),e(wi,Z_),e(Z_,eie),M(bA,eie,null),e(wi,o4o),e(wi,oie),e(oie,r4o),b(f,dPe,_),b(f,ko,_),M(vA,ko,null),e(ko,t4o),e(ko,Ai),e(Ai,a4o),e(Ai,kN),e(kN,n4o),e(Ai,s4o),e(Ai,SN),e(SN,l4o),e(Ai,i4o),e(ko,d4o),e(ko,FA),e(FA,c4o),e(FA,rie),e(rie,f4o),e(FA,m4o),e(ko,g4o),e(ko,rt),M(TA,rt,null),e(rt,h4o),e(rt,tie),e(tie,p4o),e(rt,u4o),e(rt,yi),e(yi,_4o),e(yi,aie),e(aie,b4o),e(yi,v4o),e(yi,RN),e(RN,F4o),e(yi,T4o),e(rt,M4o),M(e1,rt,null),e(ko,E4o),e(ko,Ye),M(MA,Ye,null),e(Ye,C4o),e(Ye,nie),e(nie,w4o),e(Ye,A4o),e(Ye,Aa),e(Aa,y4o),e(Aa,sie),e(sie,L4o),e(Aa,x4o),e(Aa,lie),e(lie,$4o),e(Aa,k4o),e(Aa,iie),e(iie,S4o),e(Aa,R4o),e(Ye,B4o),e(Ye,Q),e(Q,o1),e(o1,die),e(die,P4o),e(o1,I4o),e(o1,BN),e(BN,q4o),e(o1,N4o),e(Q,j4o),e(Q,r1),e(r1,cie),e(cie,D4o),e(r1,G4o),e(r1,PN),e(PN,O4o),e(r1,V4o),e(Q,X4o),e(Q,t1),e(t1,fie),e(fie,z4o),e(t1,Q4o),e(t1,IN),e(IN,W4o),e(t1,H4o),e(Q,U4o),e(Q,a1),e(a1,mie),e(mie,J4o),e(a1,Y4o),e(a1,qN),e(qN,K4o),e(a1,Z4o),e(Q,eEo),e(Q,n1),e(n1,gie),e(gie,oEo),e(n1,rEo),e(n1,NN),e(NN,tEo),e(n1,aEo),e(Q,nEo),e(Q,s1),e(s1,hie),e(hie,sEo),e(s1,lEo),e(s1,jN),e(jN,iEo),e(s1,dEo),e(Q,cEo),e(Q,l1),e(l1,pie),e(pie,fEo),e(l1,mEo),e(l1,DN),e(DN,gEo),e(l1,hEo),e(Q,pEo),e(Q,i1),e(i1,uie),e(uie,uEo),e(i1,_Eo),e(i1,GN),e(GN,bEo),e(i1,vEo),e(Q,FEo),e(Q,d1),e(d1,_ie),e(_ie,TEo),e(d1,MEo),e(d1,ON),e(ON,EEo),e(d1,CEo),e(Q,wEo),e(Q,c1),e(c1,bie),e(bie,AEo),e(c1,yEo),e(c1,VN),e(VN,LEo),e(c1,xEo),e(Q,$Eo),e(Q,f1),e(f1,vie),e(vie,kEo),e(f1,SEo),e(f1,XN),e(XN,REo),e(f1,BEo),e(Q,PEo),e(Q,m1),e(m1,Fie),e(Fie,IEo),e(m1,qEo),e(m1,zN),e(zN,NEo),e(m1,jEo),e(Q,DEo),e(Q,g1),e(g1,Tie),e(Tie,GEo),e(g1,OEo),e(g1,QN),e(QN,VEo),e(g1,XEo),e(Q,zEo),e(Q,h1),e(h1,Mie),e(Mie,QEo),e(h1,WEo),e(h1,WN),e(WN,HEo),e(h1,UEo),e(Q,JEo),e(Q,p1),e(p1,Eie),e(Eie,YEo),e(p1,KEo),e(p1,HN),e(HN,ZEo),e(p1,e5o),e(Q,o5o),e(Q,u1),e(u1,Cie),e(Cie,r5o),e(u1,t5o),e(u1,UN),e(UN,a5o),e(u1,n5o),e(Q,s5o),e(Q,_1),e(_1,wie),e(wie,l5o),e(_1,i5o),e(_1,JN),e(JN,d5o),e(_1,c5o),e(Q,f5o),e(Q,b1),e(b1,Aie),e(Aie,m5o),e(b1,g5o),e(b1,YN),e(YN,h5o),e(b1,p5o),e(Q,u5o),e(Q,v1),e(v1,yie),e(yie,_5o),e(v1,b5o),e(v1,KN),e(KN,v5o),e(v1,F5o),e(Q,T5o),e(Q,F1),e(F1,Lie),e(Lie,M5o),e(F1,E5o),e(F1,ZN),e(ZN,C5o),e(F1,w5o),e(Q,A5o),e(Q,T1),e(T1,xie),e(xie,y5o),e(T1,L5o),e(T1,ej),e(ej,x5o),e(T1,$5o),e(Q,k5o),e(Q,M1),e(M1,$ie),e($ie,S5o),e(M1,R5o),e(M1,oj),e(oj,B5o),e(M1,P5o),e(Q,I5o),e(Q,E1),e(E1,kie),e(kie,q5o),e(E1,N5o),e(E1,rj),e(rj,j5o),e(E1,D5o),e(Q,G5o),e(Q,C1),e(C1,Sie),e(Sie,O5o),e(C1,V5o),e(C1,tj),e(tj,X5o),e(C1,z5o),e(Q,Q5o),e(Q,w1),e(w1,Rie),e(Rie,W5o),e(w1,H5o),e(w1,aj),e(aj,U5o),e(w1,J5o),e(Q,Y5o),e(Q,A1),e(A1,Bie),e(Bie,K5o),e(A1,Z5o),e(A1,nj),e(nj,eCo),e(A1,oCo),e(Q,rCo),e(Q,y1),e(y1,Pie),e(Pie,tCo),e(y1,aCo),e(y1,sj),e(sj,nCo),e(y1,sCo),e(Q,lCo),e(Q,L1),e(L1,Iie),e(Iie,iCo),e(L1,dCo),e(L1,lj),e(lj,cCo),e(L1,fCo),e(Q,mCo),e(Q,x1),e(x1,qie),e(qie,gCo),e(x1,hCo),e(x1,ij),e(ij,pCo),e(x1,uCo),e(Q,_Co),e(Q,$1),e($1,Nie),e(Nie,bCo),e($1,vCo),e($1,dj),e(dj,FCo),e($1,TCo),e(Q,MCo),e(Q,k1),e(k1,jie),e(jie,ECo),e(k1,CCo),e(k1,Die),e(Die,wCo),e(k1,ACo),e(Q,yCo),e(Q,S1),e(S1,Gie),e(Gie,LCo),e(S1,xCo),e(S1,cj),e(cj,$Co),e(S1,kCo),e(Q,SCo),e(Q,R1),e(R1,Oie),e(Oie,RCo),e(R1,BCo),e(R1,fj),e(fj,PCo),e(R1,ICo),e(Q,qCo),e(Q,B1),e(B1,Vie),e(Vie,NCo),e(B1,jCo),e(B1,mj),e(mj,DCo),e(B1,GCo),e(Q,OCo),e(Q,P1),e(P1,Xie),e(Xie,VCo),e(P1,XCo),e(P1,gj),e(gj,zCo),e(P1,QCo),e(Ye,WCo),e(Ye,I1),e(I1,HCo),e(I1,zie),e(zie,UCo),e(I1,JCo),e(I1,Qie),e(Qie,YCo),e(Ye,KCo),M(q1,Ye,null),b(f,cPe,_),b(f,Li,_),e(Li,N1),e(N1,Wie),M(EA,Wie,null),e(Li,ZCo),e(Li,Hie),e(Hie,e3o),b(f,fPe,_),b(f,So,_),M(CA,So,null),e(So,o3o),e(So,xi),e(xi,r3o),e(xi,hj),e(hj,t3o),e(xi,a3o),e(xi,pj),e(pj,n3o),e(xi,s3o),e(So,l3o),e(So,wA),e(wA,i3o),e(wA,Uie),e(Uie,d3o),e(wA,c3o),e(So,f3o),e(So,tt),M(AA,tt,null),e(tt,m3o),e(tt,Jie),e(Jie,g3o),e(tt,h3o),e(tt,$i),e($i,p3o),e($i,Yie),e(Yie,u3o),e($i,_3o),e($i,uj),e(uj,b3o),e($i,v3o),e(tt,F3o),M(j1,tt,null),e(So,T3o),e(So,Ke),M(yA,Ke,null),e(Ke,M3o),e(Ke,Kie),e(Kie,E3o),e(Ke,C3o),e(Ke,ya),e(ya,w3o),e(ya,Zie),e(Zie,A3o),e(ya,y3o),e(ya,ede),e(ede,L3o),e(ya,x3o),e(ya,ode),e(ode,$3o),e(ya,k3o),e(Ke,S3o),e(Ke,he),e(he,D1),e(D1,rde),e(rde,R3o),e(D1,B3o),e(D1,_j),e(_j,P3o),e(D1,I3o),e(he,q3o),e(he,G1),e(G1,tde),e(tde,N3o),e(G1,j3o),e(G1,bj),e(bj,D3o),e(G1,G3o),e(he,O3o),e(he,O1),e(O1,ade),e(ade,V3o),e(O1,X3o),e(O1,vj),e(vj,z3o),e(O1,Q3o),e(he,W3o),e(he,V1),e(V1,nde),e(nde,H3o),e(V1,U3o),e(V1,Fj),e(Fj,J3o),e(V1,Y3o),e(he,K3o),e(he,X1),e(X1,sde),e(sde,Z3o),e(X1,ewo),e(X1,Tj),e(Tj,owo),e(X1,rwo),e(he,two),e(he,z1),e(z1,lde),e(lde,awo),e(z1,nwo),e(z1,Mj),e(Mj,swo),e(z1,lwo),e(he,iwo),e(he,Q1),e(Q1,ide),e(ide,dwo),e(Q1,cwo),e(Q1,Ej),e(Ej,fwo),e(Q1,mwo),e(he,gwo),e(he,W1),e(W1,dde),e(dde,hwo),e(W1,pwo),e(W1,Cj),e(Cj,uwo),e(W1,_wo),e(he,bwo),e(he,H1),e(H1,cde),e(cde,vwo),e(H1,Fwo),e(H1,wj),e(wj,Two),e(H1,Mwo),e(he,Ewo),e(he,U1),e(U1,fde),e(fde,Cwo),e(U1,wwo),e(U1,Aj),e(Aj,Awo),e(U1,ywo),e(he,Lwo),e(he,J1),e(J1,mde),e(mde,xwo),e(J1,$wo),e(J1,yj),e(yj,kwo),e(J1,Swo),e(he,Rwo),e(he,Y1),e(Y1,gde),e(gde,Bwo),e(Y1,Pwo),e(Y1,Lj),e(Lj,Iwo),e(Y1,qwo),e(he,Nwo),e(he,K1),e(K1,hde),e(hde,jwo),e(K1,Dwo),e(K1,xj),e(xj,Gwo),e(K1,Owo),e(he,Vwo),e(he,Z1),e(Z1,pde),e(pde,Xwo),e(Z1,zwo),e(Z1,$j),e($j,Qwo),e(Z1,Wwo),e(he,Hwo),e(he,e8),e(e8,ude),e(ude,Uwo),e(e8,Jwo),e(e8,kj),e(kj,Ywo),e(e8,Kwo),e(he,Zwo),e(he,o8),e(o8,_de),e(_de,eAo),e(o8,oAo),e(o8,Sj),e(Sj,rAo),e(o8,tAo),e(he,aAo),e(he,r8),e(r8,bde),e(bde,nAo),e(r8,sAo),e(r8,Rj),e(Rj,lAo),e(r8,iAo),e(Ke,dAo),e(Ke,t8),e(t8,cAo),e(t8,vde),e(vde,fAo),e(t8,mAo),e(t8,Fde),e(Fde,gAo),e(Ke,hAo),M(a8,Ke,null),b(f,mPe,_),b(f,ki,_),e(ki,n8),e(n8,Tde),M(LA,Tde,null),e(ki,pAo),e(ki,Mde),e(Mde,uAo),b(f,gPe,_),b(f,Ro,_),M(xA,Ro,null),e(Ro,_Ao),e(Ro,Si),e(Si,bAo),e(Si,Bj),e(Bj,vAo),e(Si,FAo),e(Si,Pj),e(Pj,TAo),e(Si,MAo),e(Ro,EAo),e(Ro,$A),e($A,CAo),e($A,Ede),e(Ede,wAo),e($A,AAo),e(Ro,yAo),e(Ro,at),M(kA,at,null),e(at,LAo),e(at,Cde),e(Cde,xAo),e(at,$Ao),e(at,Ri),e(Ri,kAo),e(Ri,wde),e(wde,SAo),e(Ri,RAo),e(Ri,Ij),e(Ij,BAo),e(Ri,PAo),e(at,IAo),M(s8,at,null),e(Ro,qAo),e(Ro,Ze),M(SA,Ze,null),e(Ze,NAo),e(Ze,Ade),e(Ade,jAo),e(Ze,DAo),e(Ze,La),e(La,GAo),e(La,yde),e(yde,OAo),e(La,VAo),e(La,Lde),e(Lde,XAo),e(La,zAo),e(La,xde),e(xde,QAo),e(La,WAo),e(Ze,HAo),e(Ze,q),e(q,l8),e(l8,$de),e($de,UAo),e(l8,JAo),e(l8,qj),e(qj,YAo),e(l8,KAo),e(q,ZAo),e(q,i8),e(i8,kde),e(kde,e6o),e(i8,o6o),e(i8,Nj),e(Nj,r6o),e(i8,t6o),e(q,a6o),e(q,d8),e(d8,Sde),e(Sde,n6o),e(d8,s6o),e(d8,jj),e(jj,l6o),e(d8,i6o),e(q,d6o),e(q,c8),e(c8,Rde),e(Rde,c6o),e(c8,f6o),e(c8,Dj),e(Dj,m6o),e(c8,g6o),e(q,h6o),e(q,f8),e(f8,Bde),e(Bde,p6o),e(f8,u6o),e(f8,Gj),e(Gj,_6o),e(f8,b6o),e(q,v6o),e(q,m8),e(m8,Pde),e(Pde,F6o),e(m8,T6o),e(m8,Oj),e(Oj,M6o),e(m8,E6o),e(q,C6o),e(q,g8),e(g8,Ide),e(Ide,w6o),e(g8,A6o),e(g8,Vj),e(Vj,y6o),e(g8,L6o),e(q,x6o),e(q,h8),e(h8,qde),e(qde,$6o),e(h8,k6o),e(h8,Xj),e(Xj,S6o),e(h8,R6o),e(q,B6o),e(q,p8),e(p8,Nde),e(Nde,P6o),e(p8,I6o),e(p8,zj),e(zj,q6o),e(p8,N6o),e(q,j6o),e(q,u8),e(u8,jde),e(jde,D6o),e(u8,G6o),e(u8,Qj),e(Qj,O6o),e(u8,V6o),e(q,X6o),e(q,_8),e(_8,Dde),e(Dde,z6o),e(_8,Q6o),e(_8,Wj),e(Wj,W6o),e(_8,H6o),e(q,U6o),e(q,b8),e(b8,Gde),e(Gde,J6o),e(b8,Y6o),e(b8,Hj),e(Hj,K6o),e(b8,Z6o),e(q,eyo),e(q,v8),e(v8,Ode),e(Ode,oyo),e(v8,ryo),e(v8,Uj),e(Uj,tyo),e(v8,ayo),e(q,nyo),e(q,F8),e(F8,Vde),e(Vde,syo),e(F8,lyo),e(F8,Jj),e(Jj,iyo),e(F8,dyo),e(q,cyo),e(q,T8),e(T8,Xde),e(Xde,fyo),e(T8,myo),e(T8,Yj),e(Yj,gyo),e(T8,hyo),e(q,pyo),e(q,M8),e(M8,zde),e(zde,uyo),e(M8,_yo),e(M8,Kj),e(Kj,byo),e(M8,vyo),e(q,Fyo),e(q,E8),e(E8,Qde),e(Qde,Tyo),e(E8,Myo),e(E8,Zj),e(Zj,Eyo),e(E8,Cyo),e(q,wyo),e(q,C8),e(C8,Wde),e(Wde,Ayo),e(C8,yyo),e(C8,eD),e(eD,Lyo),e(C8,xyo),e(q,$yo),e(q,w8),e(w8,Hde),e(Hde,kyo),e(w8,Syo),e(w8,oD),e(oD,Ryo),e(w8,Byo),e(q,Pyo),e(q,A8),e(A8,Ude),e(Ude,Iyo),e(A8,qyo),e(A8,rD),e(rD,Nyo),e(A8,jyo),e(q,Dyo),e(q,y8),e(y8,Jde),e(Jde,Gyo),e(y8,Oyo),e(y8,tD),e(tD,Vyo),e(y8,Xyo),e(q,zyo),e(q,L8),e(L8,Yde),e(Yde,Qyo),e(L8,Wyo),e(L8,aD),e(aD,Hyo),e(L8,Uyo),e(q,Jyo),e(q,x8),e(x8,Kde),e(Kde,Yyo),e(x8,Kyo),e(x8,nD),e(nD,Zyo),e(x8,eLo),e(q,oLo),e(q,$8),e($8,Zde),e(Zde,rLo),e($8,tLo),e($8,sD),e(sD,aLo),e($8,nLo),e(q,sLo),e(q,k8),e(k8,ece),e(ece,lLo),e(k8,iLo),e(k8,lD),e(lD,dLo),e(k8,cLo),e(q,fLo),e(q,S8),e(S8,oce),e(oce,mLo),e(S8,gLo),e(S8,iD),e(iD,hLo),e(S8,pLo),e(q,uLo),e(q,R8),e(R8,rce),e(rce,_Lo),e(R8,bLo),e(R8,dD),e(dD,vLo),e(R8,FLo),e(q,TLo),e(q,B8),e(B8,tce),e(tce,MLo),e(B8,ELo),e(B8,cD),e(cD,CLo),e(B8,wLo),e(q,ALo),e(q,P8),e(P8,ace),e(ace,yLo),e(P8,LLo),e(P8,fD),e(fD,xLo),e(P8,$Lo),e(q,kLo),e(q,I8),e(I8,nce),e(nce,SLo),e(I8,RLo),e(I8,mD),e(mD,BLo),e(I8,PLo),e(q,ILo),e(q,q8),e(q8,sce),e(sce,qLo),e(q8,NLo),e(q8,gD),e(gD,jLo),e(q8,DLo),e(q,GLo),e(q,N8),e(N8,lce),e(lce,OLo),e(N8,VLo),e(N8,hD),e(hD,XLo),e(N8,zLo),e(q,QLo),e(q,j8),e(j8,ice),e(ice,WLo),e(j8,HLo),e(j8,pD),e(pD,ULo),e(j8,JLo),e(q,YLo),e(q,D8),e(D8,dce),e(dce,KLo),e(D8,ZLo),e(D8,uD),e(uD,exo),e(D8,oxo),e(q,rxo),e(q,G8),e(G8,cce),e(cce,txo),e(G8,axo),e(G8,_D),e(_D,nxo),e(G8,sxo),e(q,lxo),e(q,O8),e(O8,fce),e(fce,ixo),e(O8,dxo),e(O8,bD),e(bD,cxo),e(O8,fxo),e(q,mxo),e(q,V8),e(V8,mce),e(mce,gxo),e(V8,hxo),e(V8,vD),e(vD,pxo),e(V8,uxo),e(q,_xo),e(q,X8),e(X8,gce),e(gce,bxo),e(X8,vxo),e(X8,FD),e(FD,Fxo),e(X8,Txo),e(q,Mxo),e(q,z8),e(z8,hce),e(hce,Exo),e(z8,Cxo),e(z8,TD),e(TD,wxo),e(z8,Axo),e(q,yxo),e(q,Q8),e(Q8,pce),e(pce,Lxo),e(Q8,xxo),e(Q8,MD),e(MD,$xo),e(Q8,kxo),e(q,Sxo),e(q,W8),e(W8,uce),e(uce,Rxo),e(W8,Bxo),e(W8,ED),e(ED,Pxo),e(W8,Ixo),e(q,qxo),e(q,H8),e(H8,_ce),e(_ce,Nxo),e(H8,jxo),e(H8,CD),e(CD,Dxo),e(H8,Gxo),e(q,Oxo),e(q,U8),e(U8,bce),e(bce,Vxo),e(U8,Xxo),e(U8,wD),e(wD,zxo),e(U8,Qxo),e(q,Wxo),e(q,J8),e(J8,vce),e(vce,Hxo),e(J8,Uxo),e(J8,AD),e(AD,Jxo),e(J8,Yxo),e(q,Kxo),e(q,Y8),e(Y8,Fce),e(Fce,Zxo),e(Y8,e9o),e(Y8,yD),e(yD,o9o),e(Y8,r9o),e(q,t9o),e(q,K8),e(K8,Tce),e(Tce,a9o),e(K8,n9o),e(K8,LD),e(LD,s9o),e(K8,l9o),e(q,i9o),e(q,Z8),e(Z8,Mce),e(Mce,d9o),e(Z8,c9o),e(Z8,xD),e(xD,f9o),e(Z8,m9o),e(Ze,g9o),e(Ze,eb),e(eb,h9o),e(eb,Ece),e(Ece,p9o),e(eb,u9o),e(eb,Cce),e(Cce,_9o),e(Ze,b9o),M(ob,Ze,null),b(f,hPe,_),b(f,Bi,_),e(Bi,rb),e(rb,wce),M(RA,wce,null),e(Bi,v9o),e(Bi,Ace),e(Ace,F9o),b(f,pPe,_),b(f,Bo,_),M(BA,Bo,null),e(Bo,T9o),e(Bo,Pi),e(Pi,M9o),e(Pi,$D),e($D,E9o),e(Pi,C9o),e(Pi,kD),e(kD,w9o),e(Pi,A9o),e(Bo,y9o),e(Bo,PA),e(PA,L9o),e(PA,yce),e(yce,x9o),e(PA,$9o),e(Bo,k9o),e(Bo,nt),M(IA,nt,null),e(nt,S9o),e(nt,Lce),e(Lce,R9o),e(nt,B9o),e(nt,Ii),e(Ii,P9o),e(Ii,xce),e(xce,I9o),e(Ii,q9o),e(Ii,SD),e(SD,N9o),e(Ii,j9o),e(nt,D9o),M(tb,nt,null),e(Bo,G9o),e(Bo,eo),M(qA,eo,null),e(eo,O9o),e(eo,$ce),e($ce,V9o),e(eo,X9o),e(eo,xa),e(xa,z9o),e(xa,kce),e(kce,Q9o),e(xa,W9o),e(xa,Sce),e(Sce,H9o),e(xa,U9o),e(xa,Rce),e(Rce,J9o),e(xa,Y9o),e(eo,K9o),e(eo,Y),e(Y,ab),e(ab,Bce),e(Bce,Z9o),e(ab,e$o),e(ab,RD),e(RD,o$o),e(ab,r$o),e(Y,t$o),e(Y,nb),e(nb,Pce),e(Pce,a$o),e(nb,n$o),e(nb,BD),e(BD,s$o),e(nb,l$o),e(Y,i$o),e(Y,sb),e(sb,Ice),e(Ice,d$o),e(sb,c$o),e(sb,PD),e(PD,f$o),e(sb,m$o),e(Y,g$o),e(Y,lb),e(lb,qce),e(qce,h$o),e(lb,p$o),e(lb,ID),e(ID,u$o),e(lb,_$o),e(Y,b$o),e(Y,ib),e(ib,Nce),e(Nce,v$o),e(ib,F$o),e(ib,qD),e(qD,T$o),e(ib,M$o),e(Y,E$o),e(Y,db),e(db,jce),e(jce,C$o),e(db,w$o),e(db,ND),e(ND,A$o),e(db,y$o),e(Y,L$o),e(Y,cb),e(cb,Dce),e(Dce,x$o),e(cb,$$o),e(cb,jD),e(jD,k$o),e(cb,S$o),e(Y,R$o),e(Y,fb),e(fb,Gce),e(Gce,B$o),e(fb,P$o),e(fb,DD),e(DD,I$o),e(fb,q$o),e(Y,N$o),e(Y,mb),e(mb,Oce),e(Oce,j$o),e(mb,D$o),e(mb,GD),e(GD,G$o),e(mb,O$o),e(Y,V$o),e(Y,gb),e(gb,Vce),e(Vce,X$o),e(gb,z$o),e(gb,OD),e(OD,Q$o),e(gb,W$o),e(Y,H$o),e(Y,hb),e(hb,Xce),e(Xce,U$o),e(hb,J$o),e(hb,VD),e(VD,Y$o),e(hb,K$o),e(Y,Z$o),e(Y,pb),e(pb,zce),e(zce,eko),e(pb,oko),e(pb,XD),e(XD,rko),e(pb,tko),e(Y,ako),e(Y,ub),e(ub,Qce),e(Qce,nko),e(ub,sko),e(ub,zD),e(zD,lko),e(ub,iko),e(Y,dko),e(Y,_b),e(_b,Wce),e(Wce,cko),e(_b,fko),e(_b,QD),e(QD,mko),e(_b,gko),e(Y,hko),e(Y,bb),e(bb,Hce),e(Hce,pko),e(bb,uko),e(bb,WD),e(WD,_ko),e(bb,bko),e(Y,vko),e(Y,vb),e(vb,Uce),e(Uce,Fko),e(vb,Tko),e(vb,HD),e(HD,Mko),e(vb,Eko),e(Y,Cko),e(Y,Fb),e(Fb,Jce),e(Jce,wko),e(Fb,Ako),e(Fb,UD),e(UD,yko),e(Fb,Lko),e(Y,xko),e(Y,Tb),e(Tb,Yce),e(Yce,$ko),e(Tb,kko),e(Tb,JD),e(JD,Sko),e(Tb,Rko),e(Y,Bko),e(Y,Mb),e(Mb,Kce),e(Kce,Pko),e(Mb,Iko),e(Mb,YD),e(YD,qko),e(Mb,Nko),e(Y,jko),e(Y,Eb),e(Eb,Zce),e(Zce,Dko),e(Eb,Gko),e(Eb,KD),e(KD,Oko),e(Eb,Vko),e(Y,Xko),e(Y,Cb),e(Cb,efe),e(efe,zko),e(Cb,Qko),e(Cb,ZD),e(ZD,Wko),e(Cb,Hko),e(Y,Uko),e(Y,wb),e(wb,ofe),e(ofe,Jko),e(wb,Yko),e(wb,eG),e(eG,Kko),e(wb,Zko),e(Y,eSo),e(Y,Ab),e(Ab,rfe),e(rfe,oSo),e(Ab,rSo),e(Ab,oG),e(oG,tSo),e(Ab,aSo),e(Y,nSo),e(Y,yb),e(yb,tfe),e(tfe,sSo),e(yb,lSo),e(yb,rG),e(rG,iSo),e(yb,dSo),e(Y,cSo),e(Y,Lb),e(Lb,afe),e(afe,fSo),e(Lb,mSo),e(Lb,tG),e(tG,gSo),e(Lb,hSo),e(Y,pSo),e(Y,xb),e(xb,nfe),e(nfe,uSo),e(xb,_So),e(xb,aG),e(aG,bSo),e(xb,vSo),e(Y,FSo),e(Y,$b),e($b,sfe),e(sfe,TSo),e($b,MSo),e($b,nG),e(nG,ESo),e($b,CSo),e(Y,wSo),e(Y,kb),e(kb,lfe),e(lfe,ASo),e(kb,ySo),e(kb,sG),e(sG,LSo),e(kb,xSo),e(eo,$So),e(eo,Sb),e(Sb,kSo),e(Sb,ife),e(ife,SSo),e(Sb,RSo),e(Sb,dfe),e(dfe,BSo),e(eo,PSo),M(Rb,eo,null),b(f,uPe,_),b(f,qi,_),e(qi,Bb),e(Bb,cfe),M(NA,cfe,null),e(qi,ISo),e(qi,ffe),e(ffe,qSo),b(f,_Pe,_),b(f,Po,_),M(jA,Po,null),e(Po,NSo),e(Po,Ni),e(Ni,jSo),e(Ni,lG),e(lG,DSo),e(Ni,GSo),e(Ni,iG),e(iG,OSo),e(Ni,VSo),e(Po,XSo),e(Po,DA),e(DA,zSo),e(DA,mfe),e(mfe,QSo),e(DA,WSo),e(Po,HSo),e(Po,st),M(GA,st,null),e(st,USo),e(st,gfe),e(gfe,JSo),e(st,YSo),e(st,ji),e(ji,KSo),e(ji,hfe),e(hfe,ZSo),e(ji,eRo),e(ji,dG),e(dG,oRo),e(ji,rRo),e(st,tRo),M(Pb,st,null),e(Po,aRo),e(Po,oo),M(OA,oo,null),e(oo,nRo),e(oo,pfe),e(pfe,sRo),e(oo,lRo),e(oo,$a),e($a,iRo),e($a,ufe),e(ufe,dRo),e($a,cRo),e($a,_fe),e(_fe,fRo),e($a,mRo),e($a,bfe),e(bfe,gRo),e($a,hRo),e(oo,pRo),e(oo,Ur),e(Ur,Ib),e(Ib,vfe),e(vfe,uRo),e(Ib,_Ro),e(Ib,cG),e(cG,bRo),e(Ib,vRo),e(Ur,FRo),e(Ur,qb),e(qb,Ffe),e(Ffe,TRo),e(qb,MRo),e(qb,fG),e(fG,ERo),e(qb,CRo),e(Ur,wRo),e(Ur,Nb),e(Nb,Tfe),e(Tfe,ARo),e(Nb,yRo),e(Nb,mG),e(mG,LRo),e(Nb,xRo),e(Ur,$Ro),e(Ur,jb),e(jb,Mfe),e(Mfe,kRo),e(jb,SRo),e(jb,gG),e(gG,RRo),e(jb,BRo),e(Ur,PRo),e(Ur,Db),e(Db,Efe),e(Efe,IRo),e(Db,qRo),e(Db,hG),e(hG,NRo),e(Db,jRo),e(oo,DRo),e(oo,Gb),e(Gb,GRo),e(Gb,Cfe),e(Cfe,ORo),e(Gb,VRo),e(Gb,wfe),e(wfe,XRo),e(oo,zRo),M(Ob,oo,null),b(f,bPe,_),b(f,Di,_),e(Di,Vb),e(Vb,Afe),M(VA,Afe,null),e(Di,QRo),e(Di,yfe),e(yfe,WRo),b(f,vPe,_),b(f,Io,_),M(XA,Io,null),e(Io,HRo),e(Io,Gi),e(Gi,URo),e(Gi,pG),e(pG,JRo),e(Gi,YRo),e(Gi,uG),e(uG,KRo),e(Gi,ZRo),e(Io,eBo),e(Io,zA),e(zA,oBo),e(zA,Lfe),e(Lfe,rBo),e(zA,tBo),e(Io,aBo),e(Io,lt),M(QA,lt,null),e(lt,nBo),e(lt,xfe),e(xfe,sBo),e(lt,lBo),e(lt,Oi),e(Oi,iBo),e(Oi,$fe),e($fe,dBo),e(Oi,cBo),e(Oi,_G),e(_G,fBo),e(Oi,mBo),e(lt,gBo),M(Xb,lt,null),e(Io,hBo),e(Io,ro),M(WA,ro,null),e(ro,pBo),e(ro,kfe),e(kfe,uBo),e(ro,_Bo),e(ro,ka),e(ka,bBo),e(ka,Sfe),e(Sfe,vBo),e(ka,FBo),e(ka,Rfe),e(Rfe,TBo),e(ka,MBo),e(ka,Bfe),e(Bfe,EBo),e(ka,CBo),e(ro,wBo),e(ro,U),e(U,zb),e(zb,Pfe),e(Pfe,ABo),e(zb,yBo),e(zb,bG),e(bG,LBo),e(zb,xBo),e(U,$Bo),e(U,Qb),e(Qb,Ife),e(Ife,kBo),e(Qb,SBo),e(Qb,vG),e(vG,RBo),e(Qb,BBo),e(U,PBo),e(U,Wb),e(Wb,qfe),e(qfe,IBo),e(Wb,qBo),e(Wb,FG),e(FG,NBo),e(Wb,jBo),e(U,DBo),e(U,Hb),e(Hb,Nfe),e(Nfe,GBo),e(Hb,OBo),e(Hb,TG),e(TG,VBo),e(Hb,XBo),e(U,zBo),e(U,Ub),e(Ub,jfe),e(jfe,QBo),e(Ub,WBo),e(Ub,MG),e(MG,HBo),e(Ub,UBo),e(U,JBo),e(U,Jb),e(Jb,Dfe),e(Dfe,YBo),e(Jb,KBo),e(Jb,EG),e(EG,ZBo),e(Jb,ePo),e(U,oPo),e(U,Yb),e(Yb,Gfe),e(Gfe,rPo),e(Yb,tPo),e(Yb,CG),e(CG,aPo),e(Yb,nPo),e(U,sPo),e(U,Kb),e(Kb,Ofe),e(Ofe,lPo),e(Kb,iPo),e(Kb,wG),e(wG,dPo),e(Kb,cPo),e(U,fPo),e(U,Zb),e(Zb,Vfe),e(Vfe,mPo),e(Zb,gPo),e(Zb,AG),e(AG,hPo),e(Zb,pPo),e(U,uPo),e(U,e2),e(e2,Xfe),e(Xfe,_Po),e(e2,bPo),e(e2,yG),e(yG,vPo),e(e2,FPo),e(U,TPo),e(U,o2),e(o2,zfe),e(zfe,MPo),e(o2,EPo),e(o2,LG),e(LG,CPo),e(o2,wPo),e(U,APo),e(U,r2),e(r2,Qfe),e(Qfe,yPo),e(r2,LPo),e(r2,xG),e(xG,xPo),e(r2,$Po),e(U,kPo),e(U,t2),e(t2,Wfe),e(Wfe,SPo),e(t2,RPo),e(t2,$G),e($G,BPo),e(t2,PPo),e(U,IPo),e(U,a2),e(a2,Hfe),e(Hfe,qPo),e(a2,NPo),e(a2,kG),e(kG,jPo),e(a2,DPo),e(U,GPo),e(U,n2),e(n2,Ufe),e(Ufe,OPo),e(n2,VPo),e(n2,SG),e(SG,XPo),e(n2,zPo),e(U,QPo),e(U,s2),e(s2,Jfe),e(Jfe,WPo),e(s2,HPo),e(s2,RG),e(RG,UPo),e(s2,JPo),e(U,YPo),e(U,l2),e(l2,Yfe),e(Yfe,KPo),e(l2,ZPo),e(l2,BG),e(BG,eIo),e(l2,oIo),e(U,rIo),e(U,i2),e(i2,Kfe),e(Kfe,tIo),e(i2,aIo),e(i2,PG),e(PG,nIo),e(i2,sIo),e(U,lIo),e(U,d2),e(d2,Zfe),e(Zfe,iIo),e(d2,dIo),e(d2,IG),e(IG,cIo),e(d2,fIo),e(U,mIo),e(U,c2),e(c2,eme),e(eme,gIo),e(c2,hIo),e(c2,qG),e(qG,pIo),e(c2,uIo),e(U,_Io),e(U,f2),e(f2,ome),e(ome,bIo),e(f2,vIo),e(f2,NG),e(NG,FIo),e(f2,TIo),e(U,MIo),e(U,m2),e(m2,rme),e(rme,EIo),e(m2,CIo),e(m2,jG),e(jG,wIo),e(m2,AIo),e(U,yIo),e(U,g2),e(g2,tme),e(tme,LIo),e(g2,xIo),e(g2,DG),e(DG,$Io),e(g2,kIo),e(U,SIo),e(U,h2),e(h2,ame),e(ame,RIo),e(h2,BIo),e(h2,GG),e(GG,PIo),e(h2,IIo),e(U,qIo),e(U,p2),e(p2,nme),e(nme,NIo),e(p2,jIo),e(p2,OG),e(OG,DIo),e(p2,GIo),e(U,OIo),e(U,u2),e(u2,sme),e(sme,VIo),e(u2,XIo),e(u2,VG),e(VG,zIo),e(u2,QIo),e(U,WIo),e(U,_2),e(_2,lme),e(lme,HIo),e(_2,UIo),e(_2,XG),e(XG,JIo),e(_2,YIo),e(U,KIo),e(U,b2),e(b2,ime),e(ime,ZIo),e(b2,eqo),e(b2,zG),e(zG,oqo),e(b2,rqo),e(U,tqo),e(U,v2),e(v2,dme),e(dme,aqo),e(v2,nqo),e(v2,QG),e(QG,sqo),e(v2,lqo),e(U,iqo),e(U,F2),e(F2,cme),e(cme,dqo),e(F2,cqo),e(F2,WG),e(WG,fqo),e(F2,mqo),e(U,gqo),e(U,T2),e(T2,fme),e(fme,hqo),e(T2,pqo),e(T2,HG),e(HG,uqo),e(T2,_qo),e(U,bqo),e(U,M2),e(M2,mme),e(mme,vqo),e(M2,Fqo),e(M2,UG),e(UG,Tqo),e(M2,Mqo),e(U,Eqo),e(U,E2),e(E2,gme),e(gme,Cqo),e(E2,wqo),e(E2,JG),e(JG,Aqo),e(E2,yqo),e(ro,Lqo),e(ro,C2),e(C2,xqo),e(C2,hme),e(hme,$qo),e(C2,kqo),e(C2,pme),e(pme,Sqo),e(ro,Rqo),M(w2,ro,null),b(f,FPe,_),b(f,Vi,_),e(Vi,A2),e(A2,ume),M(HA,ume,null),e(Vi,Bqo),e(Vi,_me),e(_me,Pqo),b(f,TPe,_),b(f,qo,_),M(UA,qo,null),e(qo,Iqo),e(qo,Xi),e(Xi,qqo),e(Xi,YG),e(YG,Nqo),e(Xi,jqo),e(Xi,KG),e(KG,Dqo),e(Xi,Gqo),e(qo,Oqo),e(qo,JA),e(JA,Vqo),e(JA,bme),e(bme,Xqo),e(JA,zqo),e(qo,Qqo),e(qo,it),M(YA,it,null),e(it,Wqo),e(it,vme),e(vme,Hqo),e(it,Uqo),e(it,zi),e(zi,Jqo),e(zi,Fme),e(Fme,Yqo),e(zi,Kqo),e(zi,ZG),e(ZG,Zqo),e(zi,eNo),e(it,oNo),M(y2,it,null),e(qo,rNo),e(qo,to),M(KA,to,null),e(to,tNo),e(to,Tme),e(Tme,aNo),e(to,nNo),e(to,Sa),e(Sa,sNo),e(Sa,Mme),e(Mme,lNo),e(Sa,iNo),e(Sa,Eme),e(Eme,dNo),e(Sa,cNo),e(Sa,Cme),e(Cme,fNo),e(Sa,mNo),e(to,gNo),e(to,O),e(O,L2),e(L2,wme),e(wme,hNo),e(L2,pNo),e(L2,eO),e(eO,uNo),e(L2,_No),e(O,bNo),e(O,x2),e(x2,Ame),e(Ame,vNo),e(x2,FNo),e(x2,oO),e(oO,TNo),e(x2,MNo),e(O,ENo),e(O,$2),e($2,yme),e(yme,CNo),e($2,wNo),e($2,rO),e(rO,ANo),e($2,yNo),e(O,LNo),e(O,k2),e(k2,Lme),e(Lme,xNo),e(k2,$No),e(k2,tO),e(tO,kNo),e(k2,SNo),e(O,RNo),e(O,S2),e(S2,xme),e(xme,BNo),e(S2,PNo),e(S2,aO),e(aO,INo),e(S2,qNo),e(O,NNo),e(O,R2),e(R2,$me),e($me,jNo),e(R2,DNo),e(R2,nO),e(nO,GNo),e(R2,ONo),e(O,VNo),e(O,B2),e(B2,kme),e(kme,XNo),e(B2,zNo),e(B2,sO),e(sO,QNo),e(B2,WNo),e(O,HNo),e(O,P2),e(P2,Sme),e(Sme,UNo),e(P2,JNo),e(P2,lO),e(lO,YNo),e(P2,KNo),e(O,ZNo),e(O,I2),e(I2,Rme),e(Rme,ejo),e(I2,ojo),e(I2,iO),e(iO,rjo),e(I2,tjo),e(O,ajo),e(O,q2),e(q2,Bme),e(Bme,njo),e(q2,sjo),e(q2,dO),e(dO,ljo),e(q2,ijo),e(O,djo),e(O,N2),e(N2,Pme),e(Pme,cjo),e(N2,fjo),e(N2,cO),e(cO,mjo),e(N2,gjo),e(O,hjo),e(O,j2),e(j2,Ime),e(Ime,pjo),e(j2,ujo),e(j2,fO),e(fO,_jo),e(j2,bjo),e(O,vjo),e(O,D2),e(D2,qme),e(qme,Fjo),e(D2,Tjo),e(D2,mO),e(mO,Mjo),e(D2,Ejo),e(O,Cjo),e(O,G2),e(G2,Nme),e(Nme,wjo),e(G2,Ajo),e(G2,gO),e(gO,yjo),e(G2,Ljo),e(O,xjo),e(O,O2),e(O2,jme),e(jme,$jo),e(O2,kjo),e(O2,hO),e(hO,Sjo),e(O2,Rjo),e(O,Bjo),e(O,V2),e(V2,Dme),e(Dme,Pjo),e(V2,Ijo),e(V2,pO),e(pO,qjo),e(V2,Njo),e(O,jjo),e(O,X2),e(X2,Gme),e(Gme,Djo),e(X2,Gjo),e(X2,uO),e(uO,Ojo),e(X2,Vjo),e(O,Xjo),e(O,z2),e(z2,Ome),e(Ome,zjo),e(z2,Qjo),e(z2,_O),e(_O,Wjo),e(z2,Hjo),e(O,Ujo),e(O,Q2),e(Q2,Vme),e(Vme,Jjo),e(Q2,Yjo),e(Q2,bO),e(bO,Kjo),e(Q2,Zjo),e(O,eDo),e(O,W2),e(W2,Xme),e(Xme,oDo),e(W2,rDo),e(W2,vO),e(vO,tDo),e(W2,aDo),e(O,nDo),e(O,H2),e(H2,zme),e(zme,sDo),e(H2,lDo),e(H2,FO),e(FO,iDo),e(H2,dDo),e(O,cDo),e(O,U2),e(U2,Qme),e(Qme,fDo),e(U2,mDo),e(U2,TO),e(TO,gDo),e(U2,hDo),e(O,pDo),e(O,J2),e(J2,Wme),e(Wme,uDo),e(J2,_Do),e(J2,MO),e(MO,bDo),e(J2,vDo),e(O,FDo),e(O,Y2),e(Y2,Hme),e(Hme,TDo),e(Y2,MDo),e(Y2,EO),e(EO,EDo),e(Y2,CDo),e(O,wDo),e(O,K2),e(K2,Ume),e(Ume,ADo),e(K2,yDo),e(K2,CO),e(CO,LDo),e(K2,xDo),e(O,$Do),e(O,Z2),e(Z2,Jme),e(Jme,kDo),e(Z2,SDo),e(Z2,wO),e(wO,RDo),e(Z2,BDo),e(O,PDo),e(O,ev),e(ev,Yme),e(Yme,IDo),e(ev,qDo),e(ev,AO),e(AO,NDo),e(ev,jDo),e(O,DDo),e(O,ov),e(ov,Kme),e(Kme,GDo),e(ov,ODo),e(ov,yO),e(yO,VDo),e(ov,XDo),e(O,zDo),e(O,rv),e(rv,Zme),e(Zme,QDo),e(rv,WDo),e(rv,LO),e(LO,HDo),e(rv,UDo),e(O,JDo),e(O,tv),e(tv,ege),e(ege,YDo),e(tv,KDo),e(tv,xO),e(xO,ZDo),e(tv,eGo),e(O,oGo),e(O,av),e(av,oge),e(oge,rGo),e(av,tGo),e(av,$O),e($O,aGo),e(av,nGo),e(O,sGo),e(O,nv),e(nv,rge),e(rge,lGo),e(nv,iGo),e(nv,kO),e(kO,dGo),e(nv,cGo),e(O,fGo),e(O,sv),e(sv,tge),e(tge,mGo),e(sv,gGo),e(sv,SO),e(SO,hGo),e(sv,pGo),e(O,uGo),e(O,lv),e(lv,age),e(age,_Go),e(lv,bGo),e(lv,RO),e(RO,vGo),e(lv,FGo),e(O,TGo),e(O,iv),e(iv,nge),e(nge,MGo),e(iv,EGo),e(iv,BO),e(BO,CGo),e(iv,wGo),e(O,AGo),e(O,dv),e(dv,sge),e(sge,yGo),e(dv,LGo),e(dv,PO),e(PO,xGo),e(dv,$Go),e(O,kGo),e(O,cv),e(cv,lge),e(lge,SGo),e(cv,RGo),e(cv,IO),e(IO,BGo),e(cv,PGo),e(O,IGo),e(O,fv),e(fv,ige),e(ige,qGo),e(fv,NGo),e(fv,qO),e(qO,jGo),e(fv,DGo),e(O,GGo),e(O,mv),e(mv,dge),e(dge,OGo),e(mv,VGo),e(mv,NO),e(NO,XGo),e(mv,zGo),e(to,QGo),e(to,gv),e(gv,WGo),e(gv,cge),e(cge,HGo),e(gv,UGo),e(gv,fge),e(fge,JGo),e(to,YGo),M(hv,to,null),b(f,MPe,_),b(f,Qi,_),e(Qi,pv),e(pv,mge),M(ZA,mge,null),e(Qi,KGo),e(Qi,gge),e(gge,ZGo),b(f,EPe,_),b(f,No,_),M(e6,No,null),e(No,eOo),e(No,Wi),e(Wi,oOo),e(Wi,jO),e(jO,rOo),e(Wi,tOo),e(Wi,DO),e(DO,aOo),e(Wi,nOo),e(No,sOo),e(No,o6),e(o6,lOo),e(o6,hge),e(hge,iOo),e(o6,dOo),e(No,cOo),e(No,dt),M(r6,dt,null),e(dt,fOo),e(dt,pge),e(pge,mOo),e(dt,gOo),e(dt,Hi),e(Hi,hOo),e(Hi,uge),e(uge,pOo),e(Hi,uOo),e(Hi,GO),e(GO,_Oo),e(Hi,bOo),e(dt,vOo),M(uv,dt,null),e(No,FOo),e(No,ao),M(t6,ao,null),e(ao,TOo),e(ao,_ge),e(_ge,MOo),e(ao,EOo),e(ao,Ra),e(Ra,COo),e(Ra,bge),e(bge,wOo),e(Ra,AOo),e(Ra,vge),e(vge,yOo),e(Ra,LOo),e(Ra,Fge),e(Fge,xOo),e(Ra,$Oo),e(ao,kOo),e(ao,Tge),e(Tge,_v),e(_v,Mge),e(Mge,SOo),e(_v,ROo),e(_v,OO),e(OO,BOo),e(_v,POo),e(ao,IOo),e(ao,bv),e(bv,qOo),e(bv,Ege),e(Ege,NOo),e(bv,jOo),e(bv,Cge),e(Cge,DOo),e(ao,GOo),M(vv,ao,null),b(f,CPe,_),b(f,Ui,_),e(Ui,Fv),e(Fv,wge),M(a6,wge,null),e(Ui,OOo),e(Ui,Age),e(Age,VOo),b(f,wPe,_),b(f,jo,_),M(n6,jo,null),e(jo,XOo),e(jo,Ji),e(Ji,zOo),e(Ji,VO),e(VO,QOo),e(Ji,WOo),e(Ji,XO),e(XO,HOo),e(Ji,UOo),e(jo,JOo),e(jo,s6),e(s6,YOo),e(s6,yge),e(yge,KOo),e(s6,ZOo),e(jo,eVo),e(jo,ct),M(l6,ct,null),e(ct,oVo),e(ct,Lge),e(Lge,rVo),e(ct,tVo),e(ct,Yi),e(Yi,aVo),e(Yi,xge),e(xge,nVo),e(Yi,sVo),e(Yi,zO),e(zO,lVo),e(Yi,iVo),e(ct,dVo),M(Tv,ct,null),e(jo,cVo),e(jo,no),M(i6,no,null),e(no,fVo),e(no,$ge),e($ge,mVo),e(no,gVo),e(no,Ba),e(Ba,hVo),e(Ba,kge),e(kge,pVo),e(Ba,uVo),e(Ba,Sge),e(Sge,_Vo),e(Ba,bVo),e(Ba,Rge),e(Rge,vVo),e(Ba,FVo),e(no,TVo),e(no,ve),e(ve,Mv),e(Mv,Bge),e(Bge,MVo),e(Mv,EVo),e(Mv,QO),e(QO,CVo),e(Mv,wVo),e(ve,AVo),e(ve,Ev),e(Ev,Pge),e(Pge,yVo),e(Ev,LVo),e(Ev,WO),e(WO,xVo),e(Ev,$Vo),e(ve,kVo),e(ve,Cv),e(Cv,Ige),e(Ige,SVo),e(Cv,RVo),e(Cv,HO),e(HO,BVo),e(Cv,PVo),e(ve,IVo),e(ve,$s),e($s,qge),e(qge,qVo),e($s,NVo),e($s,UO),e(UO,jVo),e($s,DVo),e($s,JO),e(JO,GVo),e($s,OVo),e(ve,VVo),e(ve,wv),e(wv,Nge),e(Nge,XVo),e(wv,zVo),e(wv,YO),e(YO,QVo),e(wv,WVo),e(ve,HVo),e(ve,ft),e(ft,jge),e(jge,UVo),e(ft,JVo),e(ft,KO),e(KO,YVo),e(ft,KVo),e(ft,ZO),e(ZO,ZVo),e(ft,eXo),e(ft,eV),e(eV,oXo),e(ft,rXo),e(ve,tXo),e(ve,Av),e(Av,Dge),e(Dge,aXo),e(Av,nXo),e(Av,oV),e(oV,sXo),e(Av,lXo),e(ve,iXo),e(ve,yv),e(yv,Gge),e(Gge,dXo),e(yv,cXo),e(yv,rV),e(rV,fXo),e(yv,mXo),e(ve,gXo),e(ve,Lv),e(Lv,Oge),e(Oge,hXo),e(Lv,pXo),e(Lv,tV),e(tV,uXo),e(Lv,_Xo),e(ve,bXo),e(ve,xv),e(xv,Vge),e(Vge,vXo),e(xv,FXo),e(xv,aV),e(aV,TXo),e(xv,MXo),e(ve,EXo),e(ve,$v),e($v,Xge),e(Xge,CXo),e($v,wXo),e($v,nV),e(nV,AXo),e($v,yXo),e(ve,LXo),e(ve,kv),e(kv,zge),e(zge,xXo),e(kv,$Xo),e(kv,sV),e(sV,kXo),e(kv,SXo),e(ve,RXo),e(ve,Sv),e(Sv,Qge),e(Qge,BXo),e(Sv,PXo),e(Sv,lV),e(lV,IXo),e(Sv,qXo),e(no,NXo),e(no,Rv),e(Rv,jXo),e(Rv,Wge),e(Wge,DXo),e(Rv,GXo),e(Rv,Hge),e(Hge,OXo),e(no,VXo),M(Bv,no,null),b(f,APe,_),b(f,Ki,_),e(Ki,Pv),e(Pv,Uge),M(d6,Uge,null),e(Ki,XXo),e(Ki,Jge),e(Jge,zXo),b(f,yPe,_),b(f,Do,_),M(c6,Do,null),e(Do,QXo),e(Do,Zi),e(Zi,WXo),e(Zi,iV),e(iV,HXo),e(Zi,UXo),e(Zi,dV),e(dV,JXo),e(Zi,YXo),e(Do,KXo),e(Do,f6),e(f6,ZXo),e(f6,Yge),e(Yge,ezo),e(f6,ozo),e(Do,rzo),e(Do,mt),M(m6,mt,null),e(mt,tzo),e(mt,Kge),e(Kge,azo),e(mt,nzo),e(mt,ed),e(ed,szo),e(ed,Zge),e(Zge,lzo),e(ed,izo),e(ed,cV),e(cV,dzo),e(ed,czo),e(mt,fzo),M(Iv,mt,null),e(Do,mzo),e(Do,so),M(g6,so,null),e(so,gzo),e(so,ehe),e(ehe,hzo),e(so,pzo),e(so,Pa),e(Pa,uzo),e(Pa,ohe),e(ohe,_zo),e(Pa,bzo),e(Pa,rhe),e(rhe,vzo),e(Pa,Fzo),e(Pa,the),e(the,Tzo),e(Pa,Mzo),e(so,Ezo),e(so,ahe),e(ahe,qv),e(qv,nhe),e(nhe,Czo),e(qv,wzo),e(qv,fV),e(fV,Azo),e(qv,yzo),e(so,Lzo),e(so,Nv),e(Nv,xzo),e(Nv,she),e(she,$zo),e(Nv,kzo),e(Nv,lhe),e(lhe,Szo),e(so,Rzo),M(jv,so,null),b(f,LPe,_),b(f,od,_),e(od,Dv),e(Dv,ihe),M(h6,ihe,null),e(od,Bzo),e(od,dhe),e(dhe,Pzo),b(f,xPe,_),b(f,Go,_),M(p6,Go,null),e(Go,Izo),e(Go,rd),e(rd,qzo),e(rd,mV),e(mV,Nzo),e(rd,jzo),e(rd,gV),e(gV,Dzo),e(rd,Gzo),e(Go,Ozo),e(Go,u6),e(u6,Vzo),e(u6,che),e(che,Xzo),e(u6,zzo),e(Go,Qzo),e(Go,gt),M(_6,gt,null),e(gt,Wzo),e(gt,fhe),e(fhe,Hzo),e(gt,Uzo),e(gt,td),e(td,Jzo),e(td,mhe),e(mhe,Yzo),e(td,Kzo),e(td,hV),e(hV,Zzo),e(td,eQo),e(gt,oQo),M(Gv,gt,null),e(Go,rQo),e(Go,lo),M(b6,lo,null),e(lo,tQo),e(lo,ghe),e(ghe,aQo),e(lo,nQo),e(lo,Ia),e(Ia,sQo),e(Ia,hhe),e(hhe,lQo),e(Ia,iQo),e(Ia,phe),e(phe,dQo),e(Ia,cQo),e(Ia,uhe),e(uhe,fQo),e(Ia,mQo),e(lo,gQo),e(lo,je),e(je,Ov),e(Ov,_he),e(_he,hQo),e(Ov,pQo),e(Ov,pV),e(pV,uQo),e(Ov,_Qo),e(je,bQo),e(je,Vv),e(Vv,bhe),e(bhe,vQo),e(Vv,FQo),e(Vv,uV),e(uV,TQo),e(Vv,MQo),e(je,EQo),e(je,Xv),e(Xv,vhe),e(vhe,CQo),e(Xv,wQo),e(Xv,_V),e(_V,AQo),e(Xv,yQo),e(je,LQo),e(je,zv),e(zv,Fhe),e(Fhe,xQo),e(zv,$Qo),e(zv,bV),e(bV,kQo),e(zv,SQo),e(je,RQo),e(je,Qv),e(Qv,The),e(The,BQo),e(Qv,PQo),e(Qv,vV),e(vV,IQo),e(Qv,qQo),e(je,NQo),e(je,Wv),e(Wv,Mhe),e(Mhe,jQo),e(Wv,DQo),e(Wv,FV),e(FV,GQo),e(Wv,OQo),e(je,VQo),e(je,Hv),e(Hv,Ehe),e(Ehe,XQo),e(Hv,zQo),e(Hv,TV),e(TV,QQo),e(Hv,WQo),e(je,HQo),e(je,Uv),e(Uv,Che),e(Che,UQo),e(Uv,JQo),e(Uv,MV),e(MV,YQo),e(Uv,KQo),e(lo,ZQo),e(lo,Jv),e(Jv,eWo),e(Jv,whe),e(whe,oWo),e(Jv,rWo),e(Jv,Ahe),e(Ahe,tWo),e(lo,aWo),M(Yv,lo,null),b(f,$Pe,_),b(f,ad,_),e(ad,Kv),e(Kv,yhe),M(v6,yhe,null),e(ad,nWo),e(ad,Lhe),e(Lhe,sWo),b(f,kPe,_),b(f,Oo,_),M(F6,Oo,null),e(Oo,lWo),e(Oo,nd),e(nd,iWo),e(nd,EV),e(EV,dWo),e(nd,cWo),e(nd,CV),e(CV,fWo),e(nd,mWo),e(Oo,gWo),e(Oo,T6),e(T6,hWo),e(T6,xhe),e(xhe,pWo),e(T6,uWo),e(Oo,_Wo),e(Oo,ht),M(M6,ht,null),e(ht,bWo),e(ht,$he),e($he,vWo),e(ht,FWo),e(ht,sd),e(sd,TWo),e(sd,khe),e(khe,MWo),e(sd,EWo),e(sd,wV),e(wV,CWo),e(sd,wWo),e(ht,AWo),M(Zv,ht,null),e(Oo,yWo),e(Oo,io),M(E6,io,null),e(io,LWo),e(io,She),e(She,xWo),e(io,$Wo),e(io,qa),e(qa,kWo),e(qa,Rhe),e(Rhe,SWo),e(qa,RWo),e(qa,Bhe),e(Bhe,BWo),e(qa,PWo),e(qa,Phe),e(Phe,IWo),e(qa,qWo),e(io,NWo),e(io,Na),e(Na,eF),e(eF,Ihe),e(Ihe,jWo),e(eF,DWo),e(eF,AV),e(AV,GWo),e(eF,OWo),e(Na,VWo),e(Na,oF),e(oF,qhe),e(qhe,XWo),e(oF,zWo),e(oF,yV),e(yV,QWo),e(oF,WWo),e(Na,HWo),e(Na,rF),e(rF,Nhe),e(Nhe,UWo),e(rF,JWo),e(rF,LV),e(LV,YWo),e(rF,KWo),e(Na,ZWo),e(Na,tF),e(tF,jhe),e(jhe,eHo),e(tF,oHo),e(tF,xV),e(xV,rHo),e(tF,tHo),e(io,aHo),e(io,aF),e(aF,nHo),e(aF,Dhe),e(Dhe,sHo),e(aF,lHo),e(aF,Ghe),e(Ghe,iHo),e(io,dHo),M(nF,io,null),b(f,SPe,_),b(f,ld,_),e(ld,sF),e(sF,Ohe),M(C6,Ohe,null),e(ld,cHo),e(ld,Vhe),e(Vhe,fHo),b(f,RPe,_),b(f,Vo,_),M(w6,Vo,null),e(Vo,mHo),e(Vo,id),e(id,gHo),e(id,$V),e($V,hHo),e(id,pHo),e(id,kV),e(kV,uHo),e(id,_Ho),e(Vo,bHo),e(Vo,A6),e(A6,vHo),e(A6,Xhe),e(Xhe,FHo),e(A6,THo),e(Vo,MHo),e(Vo,pt),M(y6,pt,null),e(pt,EHo),e(pt,zhe),e(zhe,CHo),e(pt,wHo),e(pt,dd),e(dd,AHo),e(dd,Qhe),e(Qhe,yHo),e(dd,LHo),e(dd,SV),e(SV,xHo),e(dd,$Ho),e(pt,kHo),M(lF,pt,null),e(Vo,SHo),e(Vo,co),M(L6,co,null),e(co,RHo),e(co,Whe),e(Whe,BHo),e(co,PHo),e(co,ja),e(ja,IHo),e(ja,Hhe),e(Hhe,qHo),e(ja,NHo),e(ja,Uhe),e(Uhe,jHo),e(ja,DHo),e(ja,Jhe),e(Jhe,GHo),e(ja,OHo),e(co,VHo),e(co,De),e(De,iF),e(iF,Yhe),e(Yhe,XHo),e(iF,zHo),e(iF,RV),e(RV,QHo),e(iF,WHo),e(De,HHo),e(De,dF),e(dF,Khe),e(Khe,UHo),e(dF,JHo),e(dF,BV),e(BV,YHo),e(dF,KHo),e(De,ZHo),e(De,cF),e(cF,Zhe),e(Zhe,eUo),e(cF,oUo),e(cF,PV),e(PV,rUo),e(cF,tUo),e(De,aUo),e(De,fF),e(fF,epe),e(epe,nUo),e(fF,sUo),e(fF,IV),e(IV,lUo),e(fF,iUo),e(De,dUo),e(De,mF),e(mF,ope),e(ope,cUo),e(mF,fUo),e(mF,qV),e(qV,mUo),e(mF,gUo),e(De,hUo),e(De,gF),e(gF,rpe),e(rpe,pUo),e(gF,uUo),e(gF,NV),e(NV,_Uo),e(gF,bUo),e(De,vUo),e(De,hF),e(hF,tpe),e(tpe,FUo),e(hF,TUo),e(hF,jV),e(jV,MUo),e(hF,EUo),e(De,CUo),e(De,pF),e(pF,ape),e(ape,wUo),e(pF,AUo),e(pF,DV),e(DV,yUo),e(pF,LUo),e(co,xUo),e(co,uF),e(uF,$Uo),e(uF,npe),e(npe,kUo),e(uF,SUo),e(uF,spe),e(spe,RUo),e(co,BUo),M(_F,co,null),b(f,BPe,_),b(f,cd,_),e(cd,bF),e(bF,lpe),M(x6,lpe,null),e(cd,PUo),e(cd,ipe),e(ipe,IUo),b(f,PPe,_),b(f,Xo,_),M($6,Xo,null),e(Xo,qUo),e(Xo,fd),e(fd,NUo),e(fd,GV),e(GV,jUo),e(fd,DUo),e(fd,OV),e(OV,GUo),e(fd,OUo),e(Xo,VUo),e(Xo,k6),e(k6,XUo),e(k6,dpe),e(dpe,zUo),e(k6,QUo),e(Xo,WUo),e(Xo,ut),M(S6,ut,null),e(ut,HUo),e(ut,cpe),e(cpe,UUo),e(ut,JUo),e(ut,md),e(md,YUo),e(md,fpe),e(fpe,KUo),e(md,ZUo),e(md,VV),e(VV,eJo),e(md,oJo),e(ut,rJo),M(vF,ut,null),e(Xo,tJo),e(Xo,fo),M(R6,fo,null),e(fo,aJo),e(fo,mpe),e(mpe,nJo),e(fo,sJo),e(fo,Da),e(Da,lJo),e(Da,gpe),e(gpe,iJo),e(Da,dJo),e(Da,hpe),e(hpe,cJo),e(Da,fJo),e(Da,ppe),e(ppe,mJo),e(Da,gJo),e(fo,hJo),e(fo,B6),e(B6,FF),e(FF,upe),e(upe,pJo),e(FF,uJo),e(FF,XV),e(XV,_Jo),e(FF,bJo),e(B6,vJo),e(B6,TF),e(TF,_pe),e(_pe,FJo),e(TF,TJo),e(TF,zV),e(zV,MJo),e(TF,EJo),e(fo,CJo),e(fo,MF),e(MF,wJo),e(MF,bpe),e(bpe,AJo),e(MF,yJo),e(MF,vpe),e(vpe,LJo),e(fo,xJo),M(EF,fo,null),b(f,IPe,_),b(f,gd,_),e(gd,CF),e(CF,Fpe),M(P6,Fpe,null),e(gd,$Jo),e(gd,Tpe),e(Tpe,kJo),b(f,qPe,_),b(f,zo,_),M(I6,zo,null),e(zo,SJo),e(zo,hd),e(hd,RJo),e(hd,QV),e(QV,BJo),e(hd,PJo),e(hd,WV),e(WV,IJo),e(hd,qJo),e(zo,NJo),e(zo,q6),e(q6,jJo),e(q6,Mpe),e(Mpe,DJo),e(q6,GJo),e(zo,OJo),e(zo,_t),M(N6,_t,null),e(_t,VJo),e(_t,Epe),e(Epe,XJo),e(_t,zJo),e(_t,pd),e(pd,QJo),e(pd,Cpe),e(Cpe,WJo),e(pd,HJo),e(pd,HV),e(HV,UJo),e(pd,JJo),e(_t,YJo),M(wF,_t,null),e(zo,KJo),e(zo,mo),M(j6,mo,null),e(mo,ZJo),e(mo,wpe),e(wpe,eYo),e(mo,oYo),e(mo,Ga),e(Ga,rYo),e(Ga,Ape),e(Ape,tYo),e(Ga,aYo),e(Ga,ype),e(ype,nYo),e(Ga,sYo),e(Ga,Lpe),e(Lpe,lYo),e(Ga,iYo),e(mo,dYo),e(mo,Oa),e(Oa,AF),e(AF,xpe),e(xpe,cYo),e(AF,fYo),e(AF,UV),e(UV,mYo),e(AF,gYo),e(Oa,hYo),e(Oa,yF),e(yF,$pe),e($pe,pYo),e(yF,uYo),e(yF,JV),e(JV,_Yo),e(yF,bYo),e(Oa,vYo),e(Oa,LF),e(LF,kpe),e(kpe,FYo),e(LF,TYo),e(LF,YV),e(YV,MYo),e(LF,EYo),e(Oa,CYo),e(Oa,xF),e(xF,Spe),e(Spe,wYo),e(xF,AYo),e(xF,KV),e(KV,yYo),e(xF,LYo),e(mo,xYo),e(mo,$F),e($F,$Yo),e($F,Rpe),e(Rpe,kYo),e($F,SYo),e($F,Bpe),e(Bpe,RYo),e(mo,BYo),M(kF,mo,null),b(f,NPe,_),b(f,ud,_),e(ud,SF),e(SF,Ppe),M(D6,Ppe,null),e(ud,PYo),e(ud,Ipe),e(Ipe,IYo),b(f,jPe,_),b(f,Qo,_),M(G6,Qo,null),e(Qo,qYo),e(Qo,_d),e(_d,NYo),e(_d,ZV),e(ZV,jYo),e(_d,DYo),e(_d,eX),e(eX,GYo),e(_d,OYo),e(Qo,VYo),e(Qo,O6),e(O6,XYo),e(O6,qpe),e(qpe,zYo),e(O6,QYo),e(Qo,WYo),e(Qo,bt),M(V6,bt,null),e(bt,HYo),e(bt,Npe),e(Npe,UYo),e(bt,JYo),e(bt,bd),e(bd,YYo),e(bd,jpe),e(jpe,KYo),e(bd,ZYo),e(bd,oX),e(oX,eKo),e(bd,oKo),e(bt,rKo),M(RF,bt,null),e(Qo,tKo),e(Qo,go),M(X6,go,null),e(go,aKo),e(go,Dpe),e(Dpe,nKo),e(go,sKo),e(go,Va),e(Va,lKo),e(Va,Gpe),e(Gpe,iKo),e(Va,dKo),e(Va,Ope),e(Ope,cKo),e(Va,fKo),e(Va,Vpe),e(Vpe,mKo),e(Va,gKo),e(go,hKo),e(go,vd),e(vd,BF),e(BF,Xpe),e(Xpe,pKo),e(BF,uKo),e(BF,rX),e(rX,_Ko),e(BF,bKo),e(vd,vKo),e(vd,PF),e(PF,zpe),e(zpe,FKo),e(PF,TKo),e(PF,tX),e(tX,MKo),e(PF,EKo),e(vd,CKo),e(vd,IF),e(IF,Qpe),e(Qpe,wKo),e(IF,AKo),e(IF,aX),e(aX,yKo),e(IF,LKo),e(go,xKo),e(go,qF),e(qF,$Ko),e(qF,Wpe),e(Wpe,kKo),e(qF,SKo),e(qF,Hpe),e(Hpe,RKo),e(go,BKo),M(NF,go,null),b(f,DPe,_),b(f,Fd,_),e(Fd,jF),e(jF,Upe),M(z6,Upe,null),e(Fd,PKo),e(Fd,Jpe),e(Jpe,IKo),b(f,GPe,_),b(f,Wo,_),M(Q6,Wo,null),e(Wo,qKo),e(Wo,Td),e(Td,NKo),e(Td,nX),e(nX,jKo),e(Td,DKo),e(Td,sX),e(sX,GKo),e(Td,OKo),e(Wo,VKo),e(Wo,W6),e(W6,XKo),e(W6,Ype),e(Ype,zKo),e(W6,QKo),e(Wo,WKo),e(Wo,vt),M(H6,vt,null),e(vt,HKo),e(vt,Kpe),e(Kpe,UKo),e(vt,JKo),e(vt,Md),e(Md,YKo),e(Md,Zpe),e(Zpe,KKo),e(Md,ZKo),e(Md,lX),e(lX,eZo),e(Md,oZo),e(vt,rZo),M(DF,vt,null),e(Wo,tZo),e(Wo,ho),M(U6,ho,null),e(ho,aZo),e(ho,eue),e(eue,nZo),e(ho,sZo),e(ho,Xa),e(Xa,lZo),e(Xa,oue),e(oue,iZo),e(Xa,dZo),e(Xa,rue),e(rue,cZo),e(Xa,fZo),e(Xa,tue),e(tue,mZo),e(Xa,gZo),e(ho,hZo),e(ho,J6),e(J6,GF),e(GF,aue),e(aue,pZo),e(GF,uZo),e(GF,iX),e(iX,_Zo),e(GF,bZo),e(J6,vZo),e(J6,OF),e(OF,nue),e(nue,FZo),e(OF,TZo),e(OF,dX),e(dX,MZo),e(OF,EZo),e(ho,CZo),e(ho,VF),e(VF,wZo),e(VF,sue),e(sue,AZo),e(VF,yZo),e(VF,lue),e(lue,LZo),e(ho,xZo),M(XF,ho,null),b(f,OPe,_),b(f,Ed,_),e(Ed,zF),e(zF,iue),M(Y6,iue,null),e(Ed,$Zo),e(Ed,due),e(due,kZo),b(f,VPe,_),b(f,Ho,_),M(K6,Ho,null),e(Ho,SZo),e(Ho,Cd),e(Cd,RZo),e(Cd,cX),e(cX,BZo),e(Cd,PZo),e(Cd,fX),e(fX,IZo),e(Cd,qZo),e(Ho,NZo),e(Ho,Z6),e(Z6,jZo),e(Z6,cue),e(cue,DZo),e(Z6,GZo),e(Ho,OZo),e(Ho,Ft),M(ey,Ft,null),e(Ft,VZo),e(Ft,fue),e(fue,XZo),e(Ft,zZo),e(Ft,wd),e(wd,QZo),e(wd,mue),e(mue,WZo),e(wd,HZo),e(wd,mX),e(mX,UZo),e(wd,JZo),e(Ft,YZo),M(QF,Ft,null),e(Ho,KZo),e(Ho,po),M(oy,po,null),e(po,ZZo),e(po,gue),e(gue,eer),e(po,oer),e(po,za),e(za,rer),e(za,hue),e(hue,ter),e(za,aer),e(za,pue),e(pue,ner),e(za,ser),e(za,uue),e(uue,ler),e(za,ier),e(po,der),e(po,_ue),e(_ue,WF),e(WF,bue),e(bue,cer),e(WF,fer),e(WF,gX),e(gX,mer),e(WF,ger),e(po,her),e(po,HF),e(HF,per),e(HF,vue),e(vue,uer),e(HF,_er),e(HF,Fue),e(Fue,ber),e(po,ver),M(UF,po,null),b(f,XPe,_),b(f,Ad,_),e(Ad,JF),e(JF,Tue),M(ry,Tue,null),e(Ad,Fer),e(Ad,Mue),e(Mue,Ter),b(f,zPe,_),b(f,Uo,_),M(ty,Uo,null),e(Uo,Mer),e(Uo,yd),e(yd,Eer),e(yd,hX),e(hX,Cer),e(yd,wer),e(yd,pX),e(pX,Aer),e(yd,yer),e(Uo,Ler),e(Uo,ay),e(ay,xer),e(ay,Eue),e(Eue,$er),e(ay,ker),e(Uo,Ser),e(Uo,Tt),M(ny,Tt,null),e(Tt,Rer),e(Tt,Cue),e(Cue,Ber),e(Tt,Per),e(Tt,Ld),e(Ld,Ier),e(Ld,wue),e(wue,qer),e(Ld,Ner),e(Ld,uX),e(uX,jer),e(Ld,Der),e(Tt,Ger),M(YF,Tt,null),e(Uo,Oer),e(Uo,uo),M(sy,uo,null),e(uo,Ver),e(uo,Aue),e(Aue,Xer),e(uo,zer),e(uo,Qa),e(Qa,Qer),e(Qa,yue),e(yue,Wer),e(Qa,Her),e(Qa,Lue),e(Lue,Uer),e(Qa,Jer),e(Qa,xue),e(xue,Yer),e(Qa,Ker),e(uo,Zer),e(uo,Wa),e(Wa,KF),e(KF,$ue),e($ue,eor),e(KF,oor),e(KF,_X),e(_X,ror),e(KF,tor),e(Wa,aor),e(Wa,ZF),e(ZF,kue),e(kue,nor),e(ZF,sor),e(ZF,bX),e(bX,lor),e(ZF,ior),e(Wa,dor),e(Wa,e0),e(e0,Sue),e(Sue,cor),e(e0,mor),e(e0,vX),e(vX,gor),e(e0,hor),e(Wa,por),e(Wa,o0),e(o0,Rue),e(Rue,uor),e(o0,_or),e(o0,FX),e(FX,bor),e(o0,vor),e(uo,For),e(uo,r0),e(r0,Tor),e(r0,Bue),e(Bue,Mor),e(r0,Eor),e(r0,Pue),e(Pue,Cor),e(uo,wor),M(t0,uo,null),b(f,QPe,_),b(f,xd,_),e(xd,a0),e(a0,Iue),M(ly,Iue,null),e(xd,Aor),e(xd,que),e(que,yor),b(f,WPe,_),b(f,Jo,_),M(iy,Jo,null),e(Jo,Lor),e(Jo,$d),e($d,xor),e($d,TX),e(TX,$or),e($d,kor),e($d,MX),e(MX,Sor),e($d,Ror),e(Jo,Bor),e(Jo,dy),e(dy,Por),e(dy,Nue),e(Nue,Ior),e(dy,qor),e(Jo,Nor),e(Jo,Mt),M(cy,Mt,null),e(Mt,jor),e(Mt,jue),e(jue,Dor),e(Mt,Gor),e(Mt,kd),e(kd,Oor),e(kd,Due),e(Due,Vor),e(kd,Xor),e(kd,EX),e(EX,zor),e(kd,Qor),e(Mt,Wor),M(n0,Mt,null),e(Jo,Hor),e(Jo,_o),M(fy,_o,null),e(_o,Uor),e(_o,Gue),e(Gue,Jor),e(_o,Yor),e(_o,Ha),e(Ha,Kor),e(Ha,Oue),e(Oue,Zor),e(Ha,err),e(Ha,Vue),e(Vue,orr),e(Ha,rrr),e(Ha,Xue),e(Xue,trr),e(Ha,arr),e(_o,nrr),e(_o,zue),e(zue,s0),e(s0,Que),e(Que,srr),e(s0,lrr),e(s0,CX),e(CX,irr),e(s0,drr),e(_o,crr),e(_o,l0),e(l0,frr),e(l0,Wue),e(Wue,mrr),e(l0,grr),e(l0,Hue),e(Hue,hrr),e(_o,prr),M(i0,_o,null),b(f,HPe,_),b(f,Sd,_),e(Sd,d0),e(d0,Uue),M(my,Uue,null),e(Sd,urr),e(Sd,Jue),e(Jue,_rr),b(f,UPe,_),b(f,Yo,_),M(gy,Yo,null),e(Yo,brr),e(Yo,Rd),e(Rd,vrr),e(Rd,wX),e(wX,Frr),e(Rd,Trr),e(Rd,AX),e(AX,Mrr),e(Rd,Err),e(Yo,Crr),e(Yo,hy),e(hy,wrr),e(hy,Yue),e(Yue,Arr),e(hy,yrr),e(Yo,Lrr),e(Yo,Et),M(py,Et,null),e(Et,xrr),e(Et,Kue),e(Kue,$rr),e(Et,krr),e(Et,Bd),e(Bd,Srr),e(Bd,Zue),e(Zue,Rrr),e(Bd,Brr),e(Bd,yX),e(yX,Prr),e(Bd,Irr),e(Et,qrr),M(c0,Et,null),e(Yo,Nrr),e(Yo,Cr),M(uy,Cr,null),e(Cr,jrr),e(Cr,e_e),e(e_e,Drr),e(Cr,Grr),e(Cr,Ua),e(Ua,Orr),e(Ua,o_e),e(o_e,Vrr),e(Ua,Xrr),e(Ua,r_e),e(r_e,zrr),e(Ua,Qrr),e(Ua,t_e),e(t_e,Wrr),e(Ua,Hrr),e(Cr,Urr),e(Cr,N),e(N,f0),e(f0,a_e),e(a_e,Jrr),e(f0,Yrr),e(f0,LX),e(LX,Krr),e(f0,Zrr),e(N,etr),e(N,m0),e(m0,n_e),e(n_e,otr),e(m0,rtr),e(m0,xX),e(xX,ttr),e(m0,atr),e(N,ntr),e(N,g0),e(g0,s_e),e(s_e,str),e(g0,ltr),e(g0,$X),e($X,itr),e(g0,dtr),e(N,ctr),e(N,h0),e(h0,l_e),e(l_e,ftr),e(h0,mtr),e(h0,kX),e(kX,gtr),e(h0,htr),e(N,ptr),e(N,p0),e(p0,i_e),e(i_e,utr),e(p0,_tr),e(p0,SX),e(SX,btr),e(p0,vtr),e(N,Ftr),e(N,u0),e(u0,d_e),e(d_e,Ttr),e(u0,Mtr),e(u0,RX),e(RX,Etr),e(u0,Ctr),e(N,wtr),e(N,_0),e(_0,c_e),e(c_e,Atr),e(_0,ytr),e(_0,BX),e(BX,Ltr),e(_0,xtr),e(N,$tr),e(N,b0),e(b0,f_e),e(f_e,ktr),e(b0,Str),e(b0,PX),e(PX,Rtr),e(b0,Btr),e(N,Ptr),e(N,v0),e(v0,m_e),e(m_e,Itr),e(v0,qtr),e(v0,IX),e(IX,Ntr),e(v0,jtr),e(N,Dtr),e(N,F0),e(F0,g_e),e(g_e,Gtr),e(F0,Otr),e(F0,qX),e(qX,Vtr),e(F0,Xtr),e(N,ztr),e(N,T0),e(T0,h_e),e(h_e,Qtr),e(T0,Wtr),e(T0,NX),e(NX,Htr),e(T0,Utr),e(N,Jtr),e(N,M0),e(M0,p_e),e(p_e,Ytr),e(M0,Ktr),e(M0,jX),e(jX,Ztr),e(M0,ear),e(N,oar),e(N,E0),e(E0,u_e),e(u_e,rar),e(E0,tar),e(E0,DX),e(DX,aar),e(E0,nar),e(N,sar),e(N,C0),e(C0,__e),e(__e,lar),e(C0,iar),e(C0,GX),e(GX,dar),e(C0,car),e(N,far),e(N,w0),e(w0,b_e),e(b_e,mar),e(w0,gar),e(w0,OX),e(OX,har),e(w0,par),e(N,uar),e(N,A0),e(A0,v_e),e(v_e,_ar),e(A0,bar),e(A0,VX),e(VX,Far),e(A0,Tar),e(N,Mar),e(N,y0),e(y0,F_e),e(F_e,Ear),e(y0,Car),e(y0,XX),e(XX,war),e(y0,Aar),e(N,yar),e(N,ks),e(ks,T_e),e(T_e,Lar),e(ks,xar),e(ks,zX),e(zX,$ar),e(ks,kar),e(ks,QX),e(QX,Sar),e(ks,Rar),e(N,Bar),e(N,L0),e(L0,M_e),e(M_e,Par),e(L0,Iar),e(L0,WX),e(WX,qar),e(L0,Nar),e(N,jar),e(N,x0),e(x0,E_e),e(E_e,Dar),e(x0,Gar),e(x0,HX),e(HX,Oar),e(x0,Var),e(N,Xar),e(N,$0),e($0,C_e),e(C_e,zar),e($0,Qar),e($0,UX),e(UX,War),e($0,Har),e(N,Uar),e(N,k0),e(k0,w_e),e(w_e,Jar),e(k0,Yar),e(k0,JX),e(JX,Kar),e(k0,Zar),e(N,enr),e(N,S0),e(S0,A_e),e(A_e,onr),e(S0,rnr),e(S0,YX),e(YX,tnr),e(S0,anr),e(N,nnr),e(N,R0),e(R0,y_e),e(y_e,snr),e(R0,lnr),e(R0,KX),e(KX,inr),e(R0,dnr),e(N,cnr),e(N,B0),e(B0,L_e),e(L_e,fnr),e(B0,mnr),e(B0,ZX),e(ZX,gnr),e(B0,hnr),e(N,pnr),e(N,P0),e(P0,x_e),e(x_e,unr),e(P0,_nr),e(P0,ez),e(ez,bnr),e(P0,vnr),e(N,Fnr),e(N,I0),e(I0,$_e),e($_e,Tnr),e(I0,Mnr),e(I0,oz),e(oz,Enr),e(I0,Cnr),e(N,wnr),e(N,q0),e(q0,k_e),e(k_e,Anr),e(q0,ynr),e(q0,rz),e(rz,Lnr),e(q0,xnr),e(N,$nr),e(N,N0),e(N0,S_e),e(S_e,knr),e(N0,Snr),e(N0,tz),e(tz,Rnr),e(N0,Bnr),e(N,Pnr),e(N,j0),e(j0,R_e),e(R_e,Inr),e(j0,qnr),e(j0,az),e(az,Nnr),e(j0,jnr),e(N,Dnr),e(N,D0),e(D0,B_e),e(B_e,Gnr),e(D0,Onr),e(D0,nz),e(nz,Vnr),e(D0,Xnr),e(N,znr),e(N,G0),e(G0,P_e),e(P_e,Qnr),e(G0,Wnr),e(G0,sz),e(sz,Hnr),e(G0,Unr),e(N,Jnr),e(N,O0),e(O0,I_e),e(I_e,Ynr),e(O0,Knr),e(O0,lz),e(lz,Znr),e(O0,esr),e(N,osr),e(N,V0),e(V0,q_e),e(q_e,rsr),e(V0,tsr),e(V0,iz),e(iz,asr),e(V0,nsr),e(N,ssr),e(N,X0),e(X0,N_e),e(N_e,lsr),e(X0,isr),e(X0,dz),e(dz,dsr),e(X0,csr),e(N,fsr),e(N,z0),e(z0,j_e),e(j_e,msr),e(z0,gsr),e(z0,cz),e(cz,hsr),e(z0,psr),e(N,usr),e(N,Q0),e(Q0,D_e),e(D_e,_sr),e(Q0,bsr),e(Q0,fz),e(fz,vsr),e(Q0,Fsr),e(N,Tsr),e(N,W0),e(W0,G_e),e(G_e,Msr),e(W0,Esr),e(W0,mz),e(mz,Csr),e(W0,wsr),e(N,Asr),e(N,H0),e(H0,O_e),e(O_e,ysr),e(H0,Lsr),e(H0,gz),e(gz,xsr),e(H0,$sr),e(N,ksr),e(N,U0),e(U0,V_e),e(V_e,Ssr),e(U0,Rsr),e(U0,hz),e(hz,Bsr),e(U0,Psr),e(N,Isr),e(N,J0),e(J0,X_e),e(X_e,qsr),e(J0,Nsr),e(J0,pz),e(pz,jsr),e(J0,Dsr),e(N,Gsr),e(N,Y0),e(Y0,z_e),e(z_e,Osr),e(Y0,Vsr),e(Y0,uz),e(uz,Xsr),e(Y0,zsr),e(N,Qsr),e(N,K0),e(K0,Q_e),e(Q_e,Wsr),e(K0,Hsr),e(K0,_z),e(_z,Usr),e(K0,Jsr),e(N,Ysr),e(N,Z0),e(Z0,W_e),e(W_e,Ksr),e(Z0,Zsr),e(Z0,bz),e(bz,elr),e(Z0,olr),e(N,rlr),e(N,eT),e(eT,H_e),e(H_e,tlr),e(eT,alr),e(eT,vz),e(vz,nlr),e(eT,slr),e(N,llr),e(N,oT),e(oT,U_e),e(U_e,ilr),e(oT,dlr),e(oT,Fz),e(Fz,clr),e(oT,flr),e(Cr,mlr),M(rT,Cr,null),b(f,JPe,_),b(f,Pd,_),e(Pd,tT),e(tT,J_e),M(_y,J_e,null),e(Pd,glr),e(Pd,Y_e),e(Y_e,hlr),b(f,YPe,_),b(f,Ko,_),M(by,Ko,null),e(Ko,plr),e(Ko,Id),e(Id,ulr),e(Id,Tz),e(Tz,_lr),e(Id,blr),e(Id,Mz),e(Mz,vlr),e(Id,Flr),e(Ko,Tlr),e(Ko,vy),e(vy,Mlr),e(vy,K_e),e(K_e,Elr),e(vy,Clr),e(Ko,wlr),e(Ko,Ct),M(Fy,Ct,null),e(Ct,Alr),e(Ct,Z_e),e(Z_e,ylr),e(Ct,Llr),e(Ct,qd),e(qd,xlr),e(qd,e1e),e(e1e,$lr),e(qd,klr),e(qd,Ez),e(Ez,Slr),e(qd,Rlr),e(Ct,Blr),M(aT,Ct,null),e(Ko,Plr),e(Ko,wr),M(Ty,wr,null),e(wr,Ilr),e(wr,o1e),e(o1e,qlr),e(wr,Nlr),e(wr,Ja),e(Ja,jlr),e(Ja,r1e),e(r1e,Dlr),e(Ja,Glr),e(Ja,t1e),e(t1e,Olr),e(Ja,Vlr),e(Ja,a1e),e(a1e,Xlr),e(Ja,zlr),e(wr,Qlr),e(wr,ne),e(ne,nT),e(nT,n1e),e(n1e,Wlr),e(nT,Hlr),e(nT,Cz),e(Cz,Ulr),e(nT,Jlr),e(ne,Ylr),e(ne,sT),e(sT,s1e),e(s1e,Klr),e(sT,Zlr),e(sT,wz),e(wz,eir),e(sT,oir),e(ne,rir),e(ne,lT),e(lT,l1e),e(l1e,tir),e(lT,air),e(lT,Az),e(Az,nir),e(lT,sir),e(ne,lir),e(ne,iT),e(iT,i1e),e(i1e,iir),e(iT,dir),e(iT,yz),e(yz,cir),e(iT,fir),e(ne,mir),e(ne,dT),e(dT,d1e),e(d1e,gir),e(dT,hir),e(dT,Lz),e(Lz,pir),e(dT,uir),e(ne,_ir),e(ne,cT),e(cT,c1e),e(c1e,bir),e(cT,vir),e(cT,xz),e(xz,Fir),e(cT,Tir),e(ne,Mir),e(ne,fT),e(fT,f1e),e(f1e,Eir),e(fT,Cir),e(fT,$z),e($z,wir),e(fT,Air),e(ne,yir),e(ne,mT),e(mT,m1e),e(m1e,Lir),e(mT,xir),e(mT,kz),e(kz,$ir),e(mT,kir),e(ne,Sir),e(ne,gT),e(gT,g1e),e(g1e,Rir),e(gT,Bir),e(gT,Sz),e(Sz,Pir),e(gT,Iir),e(ne,qir),e(ne,hT),e(hT,h1e),e(h1e,Nir),e(hT,jir),e(hT,Rz),e(Rz,Dir),e(hT,Gir),e(ne,Oir),e(ne,pT),e(pT,p1e),e(p1e,Vir),e(pT,Xir),e(pT,Bz),e(Bz,zir),e(pT,Qir),e(ne,Wir),e(ne,uT),e(uT,u1e),e(u1e,Hir),e(uT,Uir),e(uT,Pz),e(Pz,Jir),e(uT,Yir),e(ne,Kir),e(ne,_T),e(_T,_1e),e(_1e,Zir),e(_T,edr),e(_T,Iz),e(Iz,odr),e(_T,rdr),e(ne,tdr),e(ne,bT),e(bT,b1e),e(b1e,adr),e(bT,ndr),e(bT,qz),e(qz,sdr),e(bT,ldr),e(ne,idr),e(ne,vT),e(vT,v1e),e(v1e,ddr),e(vT,cdr),e(vT,Nz),e(Nz,fdr),e(vT,mdr),e(ne,gdr),e(ne,FT),e(FT,F1e),e(F1e,hdr),e(FT,pdr),e(FT,jz),e(jz,udr),e(FT,_dr),e(ne,bdr),e(ne,TT),e(TT,T1e),e(T1e,vdr),e(TT,Fdr),e(TT,Dz),e(Dz,Tdr),e(TT,Mdr),e(ne,Edr),e(ne,MT),e(MT,M1e),e(M1e,Cdr),e(MT,wdr),e(MT,Gz),e(Gz,Adr),e(MT,ydr),e(ne,Ldr),e(ne,ET),e(ET,E1e),e(E1e,xdr),e(ET,$dr),e(ET,Oz),e(Oz,kdr),e(ET,Sdr),e(ne,Rdr),e(ne,CT),e(CT,C1e),e(C1e,Bdr),e(CT,Pdr),e(CT,Vz),e(Vz,Idr),e(CT,qdr),e(ne,Ndr),e(ne,wT),e(wT,w1e),e(w1e,jdr),e(wT,Ddr),e(wT,Xz),e(Xz,Gdr),e(wT,Odr),e(ne,Vdr),e(ne,AT),e(AT,A1e),e(A1e,Xdr),e(AT,zdr),e(AT,zz),e(zz,Qdr),e(AT,Wdr),e(ne,Hdr),e(ne,yT),e(yT,y1e),e(y1e,Udr),e(yT,Jdr),e(yT,Qz),e(Qz,Ydr),e(yT,Kdr),e(wr,Zdr),M(LT,wr,null),b(f,KPe,_),b(f,Nd,_),e(Nd,xT),e(xT,L1e),M(My,L1e,null),e(Nd,ecr),e(Nd,x1e),e(x1e,ocr),b(f,ZPe,_),b(f,Zo,_),M(Ey,Zo,null),e(Zo,rcr),e(Zo,jd),e(jd,tcr),e(jd,Wz),e(Wz,acr),e(jd,ncr),e(jd,Hz),e(Hz,scr),e(jd,lcr),e(Zo,icr),e(Zo,Cy),e(Cy,dcr),e(Cy,$1e),e($1e,ccr),e(Cy,fcr),e(Zo,mcr),e(Zo,wt),M(wy,wt,null),e(wt,gcr),e(wt,k1e),e(k1e,hcr),e(wt,pcr),e(wt,Dd),e(Dd,ucr),e(Dd,S1e),e(S1e,_cr),e(Dd,bcr),e(Dd,Uz),e(Uz,vcr),e(Dd,Fcr),e(wt,Tcr),M($T,wt,null),e(Zo,Mcr),e(Zo,Ar),M(Ay,Ar,null),e(Ar,Ecr),e(Ar,R1e),e(R1e,Ccr),e(Ar,wcr),e(Ar,Ya),e(Ya,Acr),e(Ya,B1e),e(B1e,ycr),e(Ya,Lcr),e(Ya,P1e),e(P1e,xcr),e(Ya,$cr),e(Ya,I1e),e(I1e,kcr),e(Ya,Scr),e(Ar,Rcr),e(Ar,Te),e(Te,kT),e(kT,q1e),e(q1e,Bcr),e(kT,Pcr),e(kT,Jz),e(Jz,Icr),e(kT,qcr),e(Te,Ncr),e(Te,ST),e(ST,N1e),e(N1e,jcr),e(ST,Dcr),e(ST,Yz),e(Yz,Gcr),e(ST,Ocr),e(Te,Vcr),e(Te,RT),e(RT,j1e),e(j1e,Xcr),e(RT,zcr),e(RT,Kz),e(Kz,Qcr),e(RT,Wcr),e(Te,Hcr),e(Te,BT),e(BT,D1e),e(D1e,Ucr),e(BT,Jcr),e(BT,Zz),e(Zz,Ycr),e(BT,Kcr),e(Te,Zcr),e(Te,PT),e(PT,G1e),e(G1e,efr),e(PT,ofr),e(PT,eQ),e(eQ,rfr),e(PT,tfr),e(Te,afr),e(Te,IT),e(IT,O1e),e(O1e,nfr),e(IT,sfr),e(IT,oQ),e(oQ,lfr),e(IT,ifr),e(Te,dfr),e(Te,qT),e(qT,V1e),e(V1e,cfr),e(qT,ffr),e(qT,rQ),e(rQ,mfr),e(qT,gfr),e(Te,hfr),e(Te,NT),e(NT,X1e),e(X1e,pfr),e(NT,ufr),e(NT,tQ),e(tQ,_fr),e(NT,bfr),e(Te,vfr),e(Te,jT),e(jT,z1e),e(z1e,Ffr),e(jT,Tfr),e(jT,aQ),e(aQ,Mfr),e(jT,Efr),e(Te,Cfr),e(Te,DT),e(DT,Q1e),e(Q1e,wfr),e(DT,Afr),e(DT,nQ),e(nQ,yfr),e(DT,Lfr),e(Te,xfr),e(Te,GT),e(GT,W1e),e(W1e,$fr),e(GT,kfr),e(GT,sQ),e(sQ,Sfr),e(GT,Rfr),e(Te,Bfr),e(Te,OT),e(OT,H1e),e(H1e,Pfr),e(OT,Ifr),e(OT,lQ),e(lQ,qfr),e(OT,Nfr),e(Ar,jfr),M(VT,Ar,null),b(f,eIe,_),b(f,Gd,_),e(Gd,XT),e(XT,U1e),M(yy,U1e,null),e(Gd,Dfr),e(Gd,J1e),e(J1e,Gfr),b(f,oIe,_),b(f,er,_),M(Ly,er,null),e(er,Ofr),e(er,Od),e(Od,Vfr),e(Od,iQ),e(iQ,Xfr),e(Od,zfr),e(Od,dQ),e(dQ,Qfr),e(Od,Wfr),e(er,Hfr),e(er,xy),e(xy,Ufr),e(xy,Y1e),e(Y1e,Jfr),e(xy,Yfr),e(er,Kfr),e(er,At),M($y,At,null),e(At,Zfr),e(At,K1e),e(K1e,emr),e(At,omr),e(At,Vd),e(Vd,rmr),e(Vd,Z1e),e(Z1e,tmr),e(Vd,amr),e(Vd,cQ),e(cQ,nmr),e(Vd,smr),e(At,lmr),M(zT,At,null),e(er,imr),e(er,yr),M(ky,yr,null),e(yr,dmr),e(yr,e8e),e(e8e,cmr),e(yr,fmr),e(yr,Ka),e(Ka,mmr),e(Ka,o8e),e(o8e,gmr),e(Ka,hmr),e(Ka,r8e),e(r8e,pmr),e(Ka,umr),e(Ka,t8e),e(t8e,_mr),e(Ka,bmr),e(yr,vmr),e(yr,Xd),e(Xd,QT),e(QT,a8e),e(a8e,Fmr),e(QT,Tmr),e(QT,fQ),e(fQ,Mmr),e(QT,Emr),e(Xd,Cmr),e(Xd,WT),e(WT,n8e),e(n8e,wmr),e(WT,Amr),e(WT,mQ),e(mQ,ymr),e(WT,Lmr),e(Xd,xmr),e(Xd,HT),e(HT,s8e),e(s8e,$mr),e(HT,kmr),e(HT,gQ),e(gQ,Smr),e(HT,Rmr),e(yr,Bmr),M(UT,yr,null),b(f,rIe,_),b(f,zd,_),e(zd,JT),e(JT,l8e),M(Sy,l8e,null),e(zd,Pmr),e(zd,i8e),e(i8e,Imr),b(f,tIe,_),b(f,or,_),M(Ry,or,null),e(or,qmr),e(or,Qd),e(Qd,Nmr),e(Qd,hQ),e(hQ,jmr),e(Qd,Dmr),e(Qd,pQ),e(pQ,Gmr),e(Qd,Omr),e(or,Vmr),e(or,By),e(By,Xmr),e(By,d8e),e(d8e,zmr),e(By,Qmr),e(or,Wmr),e(or,yt),M(Py,yt,null),e(yt,Hmr),e(yt,c8e),e(c8e,Umr),e(yt,Jmr),e(yt,Wd),e(Wd,Ymr),e(Wd,f8e),e(f8e,Kmr),e(Wd,Zmr),e(Wd,uQ),e(uQ,egr),e(Wd,ogr),e(yt,rgr),M(YT,yt,null),e(or,tgr),e(or,Lr),M(Iy,Lr,null),e(Lr,agr),e(Lr,m8e),e(m8e,ngr),e(Lr,sgr),e(Lr,Za),e(Za,lgr),e(Za,g8e),e(g8e,igr),e(Za,dgr),e(Za,h8e),e(h8e,cgr),e(Za,fgr),e(Za,p8e),e(p8e,mgr),e(Za,ggr),e(Lr,hgr),e(Lr,ie),e(ie,KT),e(KT,u8e),e(u8e,pgr),e(KT,ugr),e(KT,_Q),e(_Q,_gr),e(KT,bgr),e(ie,vgr),e(ie,ZT),e(ZT,_8e),e(_8e,Fgr),e(ZT,Tgr),e(ZT,bQ),e(bQ,Mgr),e(ZT,Egr),e(ie,Cgr),e(ie,e7),e(e7,b8e),e(b8e,wgr),e(e7,Agr),e(e7,vQ),e(vQ,ygr),e(e7,Lgr),e(ie,xgr),e(ie,o7),e(o7,v8e),e(v8e,$gr),e(o7,kgr),e(o7,FQ),e(FQ,Sgr),e(o7,Rgr),e(ie,Bgr),e(ie,r7),e(r7,F8e),e(F8e,Pgr),e(r7,Igr),e(r7,TQ),e(TQ,qgr),e(r7,Ngr),e(ie,jgr),e(ie,t7),e(t7,T8e),e(T8e,Dgr),e(t7,Ggr),e(t7,MQ),e(MQ,Ogr),e(t7,Vgr),e(ie,Xgr),e(ie,a7),e(a7,M8e),e(M8e,zgr),e(a7,Qgr),e(a7,EQ),e(EQ,Wgr),e(a7,Hgr),e(ie,Ugr),e(ie,n7),e(n7,E8e),e(E8e,Jgr),e(n7,Ygr),e(n7,CQ),e(CQ,Kgr),e(n7,Zgr),e(ie,ehr),e(ie,s7),e(s7,C8e),e(C8e,ohr),e(s7,rhr),e(s7,wQ),e(wQ,thr),e(s7,ahr),e(ie,nhr),e(ie,l7),e(l7,w8e),e(w8e,shr),e(l7,lhr),e(l7,AQ),e(AQ,ihr),e(l7,dhr),e(ie,chr),e(ie,i7),e(i7,A8e),e(A8e,fhr),e(i7,mhr),e(i7,yQ),e(yQ,ghr),e(i7,hhr),e(ie,phr),e(ie,d7),e(d7,y8e),e(y8e,uhr),e(d7,_hr),e(d7,LQ),e(LQ,bhr),e(d7,vhr),e(ie,Fhr),e(ie,c7),e(c7,L8e),e(L8e,Thr),e(c7,Mhr),e(c7,xQ),e(xQ,Ehr),e(c7,Chr),e(ie,whr),e(ie,f7),e(f7,x8e),e(x8e,Ahr),e(f7,yhr),e(f7,$Q),e($Q,Lhr),e(f7,xhr),e(ie,$hr),e(ie,m7),e(m7,$8e),e($8e,khr),e(m7,Shr),e(m7,kQ),e(kQ,Rhr),e(m7,Bhr),e(ie,Phr),e(ie,g7),e(g7,k8e),e(k8e,Ihr),e(g7,qhr),e(g7,SQ),e(SQ,Nhr),e(g7,jhr),e(ie,Dhr),e(ie,h7),e(h7,S8e),e(S8e,Ghr),e(h7,Ohr),e(h7,RQ),e(RQ,Vhr),e(h7,Xhr),e(ie,zhr),e(ie,p7),e(p7,R8e),e(R8e,Qhr),e(p7,Whr),e(p7,BQ),e(BQ,Hhr),e(p7,Uhr),e(ie,Jhr),e(ie,u7),e(u7,B8e),e(B8e,Yhr),e(u7,Khr),e(u7,PQ),e(PQ,Zhr),e(u7,epr),e(ie,opr),e(ie,_7),e(_7,P8e),e(P8e,rpr),e(_7,tpr),e(_7,IQ),e(IQ,apr),e(_7,npr),e(Lr,spr),M(b7,Lr,null),b(f,aIe,_),b(f,Hd,_),e(Hd,v7),e(v7,I8e),M(qy,I8e,null),e(Hd,lpr),e(Hd,q8e),e(q8e,ipr),b(f,nIe,_),b(f,rr,_),M(Ny,rr,null),e(rr,dpr),e(rr,Ud),e(Ud,cpr),e(Ud,qQ),e(qQ,fpr),e(Ud,mpr),e(Ud,NQ),e(NQ,gpr),e(Ud,hpr),e(rr,ppr),e(rr,jy),e(jy,upr),e(jy,N8e),e(N8e,_pr),e(jy,bpr),e(rr,vpr),e(rr,Lt),M(Dy,Lt,null),e(Lt,Fpr),e(Lt,j8e),e(j8e,Tpr),e(Lt,Mpr),e(Lt,Jd),e(Jd,Epr),e(Jd,D8e),e(D8e,Cpr),e(Jd,wpr),e(Jd,jQ),e(jQ,Apr),e(Jd,ypr),e(Lt,Lpr),M(F7,Lt,null),e(rr,xpr),e(rr,xr),M(Gy,xr,null),e(xr,$pr),e(xr,G8e),e(G8e,kpr),e(xr,Spr),e(xr,en),e(en,Rpr),e(en,O8e),e(O8e,Bpr),e(en,Ppr),e(en,V8e),e(V8e,Ipr),e(en,qpr),e(en,X8e),e(X8e,Npr),e(en,jpr),e(xr,Dpr),e(xr,ye),e(ye,T7),e(T7,z8e),e(z8e,Gpr),e(T7,Opr),e(T7,DQ),e(DQ,Vpr),e(T7,Xpr),e(ye,zpr),e(ye,M7),e(M7,Q8e),e(Q8e,Qpr),e(M7,Wpr),e(M7,GQ),e(GQ,Hpr),e(M7,Upr),e(ye,Jpr),e(ye,E7),e(E7,W8e),e(W8e,Ypr),e(E7,Kpr),e(E7,OQ),e(OQ,Zpr),e(E7,eur),e(ye,our),e(ye,C7),e(C7,H8e),e(H8e,rur),e(C7,tur),e(C7,VQ),e(VQ,aur),e(C7,nur),e(ye,sur),e(ye,w7),e(w7,U8e),e(U8e,lur),e(w7,iur),e(w7,XQ),e(XQ,dur),e(w7,cur),e(ye,fur),e(ye,A7),e(A7,J8e),e(J8e,mur),e(A7,gur),e(A7,zQ),e(zQ,hur),e(A7,pur),e(ye,uur),e(ye,y7),e(y7,Y8e),e(Y8e,_ur),e(y7,bur),e(y7,QQ),e(QQ,vur),e(y7,Fur),e(ye,Tur),e(ye,L7),e(L7,K8e),e(K8e,Mur),e(L7,Eur),e(L7,WQ),e(WQ,Cur),e(L7,wur),e(ye,Aur),e(ye,x7),e(x7,Z8e),e(Z8e,yur),e(x7,Lur),e(x7,HQ),e(HQ,xur),e(x7,$ur),e(ye,kur),e(ye,$7),e($7,ebe),e(ebe,Sur),e($7,Rur),e($7,UQ),e(UQ,Bur),e($7,Pur),e(xr,Iur),M(k7,xr,null),b(f,sIe,_),b(f,Yd,_),e(Yd,S7),e(S7,obe),M(Oy,obe,null),e(Yd,qur),e(Yd,rbe),e(rbe,Nur),b(f,lIe,_),b(f,tr,_),M(Vy,tr,null),e(tr,jur),e(tr,Kd),e(Kd,Dur),e(Kd,JQ),e(JQ,Gur),e(Kd,Our),e(Kd,YQ),e(YQ,Vur),e(Kd,Xur),e(tr,zur),e(tr,Xy),e(Xy,Qur),e(Xy,tbe),e(tbe,Wur),e(Xy,Hur),e(tr,Uur),e(tr,xt),M(zy,xt,null),e(xt,Jur),e(xt,abe),e(abe,Yur),e(xt,Kur),e(xt,Zd),e(Zd,Zur),e(Zd,nbe),e(nbe,e_r),e(Zd,o_r),e(Zd,KQ),e(KQ,r_r),e(Zd,t_r),e(xt,a_r),M(R7,xt,null),e(tr,n_r),e(tr,$r),M(Qy,$r,null),e($r,s_r),e($r,sbe),e(sbe,l_r),e($r,i_r),e($r,on),e(on,d_r),e(on,lbe),e(lbe,c_r),e(on,f_r),e(on,ibe),e(ibe,m_r),e(on,g_r),e(on,dbe),e(dbe,h_r),e(on,p_r),e($r,u_r),e($r,Z),e(Z,B7),e(B7,cbe),e(cbe,__r),e(B7,b_r),e(B7,ZQ),e(ZQ,v_r),e(B7,F_r),e(Z,T_r),e(Z,P7),e(P7,fbe),e(fbe,M_r),e(P7,E_r),e(P7,eW),e(eW,C_r),e(P7,w_r),e(Z,A_r),e(Z,I7),e(I7,mbe),e(mbe,y_r),e(I7,L_r),e(I7,oW),e(oW,x_r),e(I7,$_r),e(Z,k_r),e(Z,q7),e(q7,gbe),e(gbe,S_r),e(q7,R_r),e(q7,rW),e(rW,B_r),e(q7,P_r),e(Z,I_r),e(Z,N7),e(N7,hbe),e(hbe,q_r),e(N7,N_r),e(N7,tW),e(tW,j_r),e(N7,D_r),e(Z,G_r),e(Z,j7),e(j7,pbe),e(pbe,O_r),e(j7,V_r),e(j7,aW),e(aW,X_r),e(j7,z_r),e(Z,Q_r),e(Z,D7),e(D7,ube),e(ube,W_r),e(D7,H_r),e(D7,nW),e(nW,U_r),e(D7,J_r),e(Z,Y_r),e(Z,G7),e(G7,_be),e(_be,K_r),e(G7,Z_r),e(G7,sW),e(sW,e1r),e(G7,o1r),e(Z,r1r),e(Z,O7),e(O7,bbe),e(bbe,t1r),e(O7,a1r),e(O7,lW),e(lW,n1r),e(O7,s1r),e(Z,l1r),e(Z,V7),e(V7,vbe),e(vbe,i1r),e(V7,d1r),e(V7,iW),e(iW,c1r),e(V7,f1r),e(Z,m1r),e(Z,X7),e(X7,Fbe),e(Fbe,g1r),e(X7,h1r),e(X7,dW),e(dW,p1r),e(X7,u1r),e(Z,_1r),e(Z,z7),e(z7,Tbe),e(Tbe,b1r),e(z7,v1r),e(z7,cW),e(cW,F1r),e(z7,T1r),e(Z,M1r),e(Z,Q7),e(Q7,Mbe),e(Mbe,E1r),e(Q7,C1r),e(Q7,fW),e(fW,w1r),e(Q7,A1r),e(Z,y1r),e(Z,W7),e(W7,Ebe),e(Ebe,L1r),e(W7,x1r),e(W7,mW),e(mW,$1r),e(W7,k1r),e(Z,S1r),e(Z,H7),e(H7,Cbe),e(Cbe,R1r),e(H7,B1r),e(H7,gW),e(gW,P1r),e(H7,I1r),e(Z,q1r),e(Z,U7),e(U7,wbe),e(wbe,N1r),e(U7,j1r),e(U7,hW),e(hW,D1r),e(U7,G1r),e(Z,O1r),e(Z,J7),e(J7,Abe),e(Abe,V1r),e(J7,X1r),e(J7,pW),e(pW,z1r),e(J7,Q1r),e(Z,W1r),e(Z,Y7),e(Y7,ybe),e(ybe,H1r),e(Y7,U1r),e(Y7,uW),e(uW,J1r),e(Y7,Y1r),e(Z,K1r),e(Z,K7),e(K7,Lbe),e(Lbe,Z1r),e(K7,e8r),e(K7,_W),e(_W,o8r),e(K7,r8r),e(Z,t8r),e(Z,Z7),e(Z7,xbe),e(xbe,a8r),e(Z7,n8r),e(Z7,bW),e(bW,s8r),e(Z7,l8r),e(Z,i8r),e(Z,eM),e(eM,$be),e($be,d8r),e(eM,c8r),e(eM,vW),e(vW,f8r),e(eM,m8r),e(Z,g8r),e(Z,oM),e(oM,kbe),e(kbe,h8r),e(oM,p8r),e(oM,FW),e(FW,u8r),e(oM,_8r),e(Z,b8r),e(Z,rM),e(rM,Sbe),e(Sbe,v8r),e(rM,F8r),e(rM,TW),e(TW,T8r),e(rM,M8r),e(Z,E8r),e(Z,tM),e(tM,Rbe),e(Rbe,C8r),e(tM,w8r),e(tM,MW),e(MW,A8r),e(tM,y8r),e(Z,L8r),e(Z,aM),e(aM,Bbe),e(Bbe,x8r),e(aM,$8r),e(aM,EW),e(EW,k8r),e(aM,S8r),e(Z,R8r),e(Z,nM),e(nM,Pbe),e(Pbe,B8r),e(nM,P8r),e(nM,CW),e(CW,I8r),e(nM,q8r),e($r,N8r),M(sM,$r,null),b(f,iIe,_),b(f,ec,_),e(ec,lM),e(lM,Ibe),M(Wy,Ibe,null),e(ec,j8r),e(ec,qbe),e(qbe,D8r),b(f,dIe,_),b(f,ar,_),M(Hy,ar,null),e(ar,G8r),e(ar,oc),e(oc,O8r),e(oc,wW),e(wW,V8r),e(oc,X8r),e(oc,AW),e(AW,z8r),e(oc,Q8r),e(ar,W8r),e(ar,Uy),e(Uy,H8r),e(Uy,Nbe),e(Nbe,U8r),e(Uy,J8r),e(ar,Y8r),e(ar,$t),M(Jy,$t,null),e($t,K8r),e($t,jbe),e(jbe,Z8r),e($t,ebr),e($t,rc),e(rc,obr),e(rc,Dbe),e(Dbe,rbr),e(rc,tbr),e(rc,yW),e(yW,abr),e(rc,nbr),e($t,sbr),M(iM,$t,null),e(ar,lbr),e(ar,kr),M(Yy,kr,null),e(kr,ibr),e(kr,Gbe),e(Gbe,dbr),e(kr,cbr),e(kr,rn),e(rn,fbr),e(rn,Obe),e(Obe,mbr),e(rn,gbr),e(rn,Vbe),e(Vbe,hbr),e(rn,pbr),e(rn,Xbe),e(Xbe,ubr),e(rn,_br),e(kr,bbr),e(kr,pe),e(pe,dM),e(dM,zbe),e(zbe,vbr),e(dM,Fbr),e(dM,LW),e(LW,Tbr),e(dM,Mbr),e(pe,Ebr),e(pe,cM),e(cM,Qbe),e(Qbe,Cbr),e(cM,wbr),e(cM,xW),e(xW,Abr),e(cM,ybr),e(pe,Lbr),e(pe,fM),e(fM,Wbe),e(Wbe,xbr),e(fM,$br),e(fM,$W),e($W,kbr),e(fM,Sbr),e(pe,Rbr),e(pe,mM),e(mM,Hbe),e(Hbe,Bbr),e(mM,Pbr),e(mM,kW),e(kW,Ibr),e(mM,qbr),e(pe,Nbr),e(pe,gM),e(gM,Ube),e(Ube,jbr),e(gM,Dbr),e(gM,SW),e(SW,Gbr),e(gM,Obr),e(pe,Vbr),e(pe,hM),e(hM,Jbe),e(Jbe,Xbr),e(hM,zbr),e(hM,RW),e(RW,Qbr),e(hM,Wbr),e(pe,Hbr),e(pe,pM),e(pM,Ybe),e(Ybe,Ubr),e(pM,Jbr),e(pM,BW),e(BW,Ybr),e(pM,Kbr),e(pe,Zbr),e(pe,uM),e(uM,Kbe),e(Kbe,e2r),e(uM,o2r),e(uM,PW),e(PW,r2r),e(uM,t2r),e(pe,a2r),e(pe,_M),e(_M,Zbe),e(Zbe,n2r),e(_M,s2r),e(_M,IW),e(IW,l2r),e(_M,i2r),e(pe,d2r),e(pe,bM),e(bM,e2e),e(e2e,c2r),e(bM,f2r),e(bM,qW),e(qW,m2r),e(bM,g2r),e(pe,h2r),e(pe,vM),e(vM,o2e),e(o2e,p2r),e(vM,u2r),e(vM,NW),e(NW,_2r),e(vM,b2r),e(pe,v2r),e(pe,FM),e(FM,r2e),e(r2e,F2r),e(FM,T2r),e(FM,jW),e(jW,M2r),e(FM,E2r),e(pe,C2r),e(pe,TM),e(TM,t2e),e(t2e,w2r),e(TM,A2r),e(TM,DW),e(DW,y2r),e(TM,L2r),e(pe,x2r),e(pe,MM),e(MM,a2e),e(a2e,$2r),e(MM,k2r),e(MM,GW),e(GW,S2r),e(MM,R2r),e(pe,B2r),e(pe,EM),e(EM,n2e),e(n2e,P2r),e(EM,I2r),e(EM,OW),e(OW,q2r),e(EM,N2r),e(pe,j2r),e(pe,CM),e(CM,s2e),e(s2e,D2r),e(CM,G2r),e(CM,VW),e(VW,O2r),e(CM,V2r),e(pe,X2r),e(pe,wM),e(wM,l2e),e(l2e,z2r),e(wM,Q2r),e(wM,XW),e(XW,W2r),e(wM,H2r),e(kr,U2r),M(AM,kr,null),b(f,cIe,_),b(f,tc,_),e(tc,yM),e(yM,i2e),M(Ky,i2e,null),e(tc,J2r),e(tc,d2e),e(d2e,Y2r),b(f,fIe,_),b(f,nr,_),M(Zy,nr,null),e(nr,K2r),e(nr,ac),e(ac,Z2r),e(ac,zW),e(zW,evr),e(ac,ovr),e(ac,QW),e(QW,rvr),e(ac,tvr),e(nr,avr),e(nr,eL),e(eL,nvr),e(eL,c2e),e(c2e,svr),e(eL,lvr),e(nr,ivr),e(nr,kt),M(oL,kt,null),e(kt,dvr),e(kt,f2e),e(f2e,cvr),e(kt,fvr),e(kt,nc),e(nc,mvr),e(nc,m2e),e(m2e,gvr),e(nc,hvr),e(nc,WW),e(WW,pvr),e(nc,uvr),e(kt,_vr),M(LM,kt,null),e(nr,bvr),e(nr,Sr),M(rL,Sr,null),e(Sr,vvr),e(Sr,g2e),e(g2e,Fvr),e(Sr,Tvr),e(Sr,tn),e(tn,Mvr),e(tn,h2e),e(h2e,Evr),e(tn,Cvr),e(tn,p2e),e(p2e,wvr),e(tn,Avr),e(tn,u2e),e(u2e,yvr),e(tn,Lvr),e(Sr,xvr),e(Sr,_2e),e(_2e,xM),e(xM,b2e),e(b2e,$vr),e(xM,kvr),e(xM,HW),e(HW,Svr),e(xM,Rvr),e(Sr,Bvr),M($M,Sr,null),b(f,mIe,_),b(f,sc,_),e(sc,kM),e(kM,v2e),M(tL,v2e,null),e(sc,Pvr),e(sc,F2e),e(F2e,Ivr),b(f,gIe,_),b(f,sr,_),M(aL,sr,null),e(sr,qvr),e(sr,lc),e(lc,Nvr),e(lc,UW),e(UW,jvr),e(lc,Dvr),e(lc,JW),e(JW,Gvr),e(lc,Ovr),e(sr,Vvr),e(sr,nL),e(nL,Xvr),e(nL,T2e),e(T2e,zvr),e(nL,Qvr),e(sr,Wvr),e(sr,St),M(sL,St,null),e(St,Hvr),e(St,M2e),e(M2e,Uvr),e(St,Jvr),e(St,ic),e(ic,Yvr),e(ic,E2e),e(E2e,Kvr),e(ic,Zvr),e(ic,YW),e(YW,eFr),e(ic,oFr),e(St,rFr),M(SM,St,null),e(sr,tFr),e(sr,Rr),M(lL,Rr,null),e(Rr,aFr),e(Rr,C2e),e(C2e,nFr),e(Rr,sFr),e(Rr,an),e(an,lFr),e(an,w2e),e(w2e,iFr),e(an,dFr),e(an,A2e),e(A2e,cFr),e(an,fFr),e(an,y2e),e(y2e,mFr),e(an,gFr),e(Rr,hFr),e(Rr,de),e(de,RM),e(RM,L2e),e(L2e,pFr),e(RM,uFr),e(RM,KW),e(KW,_Fr),e(RM,bFr),e(de,vFr),e(de,BM),e(BM,x2e),e(x2e,FFr),e(BM,TFr),e(BM,ZW),e(ZW,MFr),e(BM,EFr),e(de,CFr),e(de,PM),e(PM,$2e),e($2e,wFr),e(PM,AFr),e(PM,eH),e(eH,yFr),e(PM,LFr),e(de,xFr),e(de,IM),e(IM,k2e),e(k2e,$Fr),e(IM,kFr),e(IM,oH),e(oH,SFr),e(IM,RFr),e(de,BFr),e(de,qM),e(qM,S2e),e(S2e,PFr),e(qM,IFr),e(qM,rH),e(rH,qFr),e(qM,NFr),e(de,jFr),e(de,NM),e(NM,R2e),e(R2e,DFr),e(NM,GFr),e(NM,tH),e(tH,OFr),e(NM,VFr),e(de,XFr),e(de,jM),e(jM,B2e),e(B2e,zFr),e(jM,QFr),e(jM,aH),e(aH,WFr),e(jM,HFr),e(de,UFr),e(de,DM),e(DM,P2e),e(P2e,JFr),e(DM,YFr),e(DM,nH),e(nH,KFr),e(DM,ZFr),e(de,e0r),e(de,GM),e(GM,I2e),e(I2e,o0r),e(GM,r0r),e(GM,sH),e(sH,t0r),e(GM,a0r),e(de,n0r),e(de,OM),e(OM,q2e),e(q2e,s0r),e(OM,l0r),e(OM,lH),e(lH,i0r),e(OM,d0r),e(de,c0r),e(de,VM),e(VM,N2e),e(N2e,f0r),e(VM,m0r),e(VM,iH),e(iH,g0r),e(VM,h0r),e(de,p0r),e(de,XM),e(XM,j2e),e(j2e,u0r),e(XM,_0r),e(XM,dH),e(dH,b0r),e(XM,v0r),e(de,F0r),e(de,zM),e(zM,D2e),e(D2e,T0r),e(zM,M0r),e(zM,cH),e(cH,E0r),e(zM,C0r),e(de,w0r),e(de,QM),e(QM,G2e),e(G2e,A0r),e(QM,y0r),e(QM,fH),e(fH,L0r),e(QM,x0r),e(de,$0r),e(de,WM),e(WM,O2e),e(O2e,k0r),e(WM,S0r),e(WM,mH),e(mH,R0r),e(WM,B0r),e(de,P0r),e(de,HM),e(HM,V2e),e(V2e,I0r),e(HM,q0r),e(HM,gH),e(gH,N0r),e(HM,j0r),e(de,D0r),e(de,UM),e(UM,X2e),e(X2e,G0r),e(UM,O0r),e(UM,hH),e(hH,V0r),e(UM,X0r),e(de,z0r),e(de,JM),e(JM,z2e),e(z2e,Q0r),e(JM,W0r),e(JM,pH),e(pH,H0r),e(JM,U0r),e(de,J0r),e(de,YM),e(YM,Q2e),e(Q2e,Y0r),e(YM,K0r),e(YM,uH),e(uH,Z0r),e(YM,eTr),e(de,oTr),e(de,KM),e(KM,W2e),e(W2e,rTr),e(KM,tTr),e(KM,_H),e(_H,aTr),e(KM,nTr),e(Rr,sTr),M(ZM,Rr,null),b(f,hIe,_),b(f,dc,_),e(dc,e4),e(e4,H2e),M(iL,H2e,null),e(dc,lTr),e(dc,U2e),e(U2e,iTr),b(f,pIe,_),b(f,lr,_),M(dL,lr,null),e(lr,dTr),e(lr,cc),e(cc,cTr),e(cc,bH),e(bH,fTr),e(cc,mTr),e(cc,vH),e(vH,gTr),e(cc,hTr),e(lr,pTr),e(lr,cL),e(cL,uTr),e(cL,J2e),e(J2e,_Tr),e(cL,bTr),e(lr,vTr),e(lr,Rt),M(fL,Rt,null),e(Rt,FTr),e(Rt,Y2e),e(Y2e,TTr),e(Rt,MTr),e(Rt,fc),e(fc,ETr),e(fc,K2e),e(K2e,CTr),e(fc,wTr),e(fc,FH),e(FH,ATr),e(fc,yTr),e(Rt,LTr),M(o4,Rt,null),e(lr,xTr),e(lr,Br),M(mL,Br,null),e(Br,$Tr),e(Br,Z2e),e(Z2e,kTr),e(Br,STr),e(Br,nn),e(nn,RTr),e(nn,eve),e(eve,BTr),e(nn,PTr),e(nn,ove),e(ove,ITr),e(nn,qTr),e(nn,rve),e(rve,NTr),e(nn,jTr),e(Br,DTr),e(Br,ce),e(ce,r4),e(r4,tve),e(tve,GTr),e(r4,OTr),e(r4,TH),e(TH,VTr),e(r4,XTr),e(ce,zTr),e(ce,t4),e(t4,ave),e(ave,QTr),e(t4,WTr),e(t4,MH),e(MH,HTr),e(t4,UTr),e(ce,JTr),e(ce,a4),e(a4,nve),e(nve,YTr),e(a4,KTr),e(a4,EH),e(EH,ZTr),e(a4,e7r),e(ce,o7r),e(ce,n4),e(n4,sve),e(sve,r7r),e(n4,t7r),e(n4,CH),e(CH,a7r),e(n4,n7r),e(ce,s7r),e(ce,s4),e(s4,lve),e(lve,l7r),e(s4,i7r),e(s4,wH),e(wH,d7r),e(s4,c7r),e(ce,f7r),e(ce,l4),e(l4,ive),e(ive,m7r),e(l4,g7r),e(l4,AH),e(AH,h7r),e(l4,p7r),e(ce,u7r),e(ce,i4),e(i4,dve),e(dve,_7r),e(i4,b7r),e(i4,yH),e(yH,v7r),e(i4,F7r),e(ce,T7r),e(ce,d4),e(d4,cve),e(cve,M7r),e(d4,E7r),e(d4,LH),e(LH,C7r),e(d4,w7r),e(ce,A7r),e(ce,c4),e(c4,fve),e(fve,y7r),e(c4,L7r),e(c4,xH),e(xH,x7r),e(c4,$7r),e(ce,k7r),e(ce,f4),e(f4,mve),e(mve,S7r),e(f4,R7r),e(f4,$H),e($H,B7r),e(f4,P7r),e(ce,I7r),e(ce,m4),e(m4,gve),e(gve,q7r),e(m4,N7r),e(m4,kH),e(kH,j7r),e(m4,D7r),e(ce,G7r),e(ce,g4),e(g4,hve),e(hve,O7r),e(g4,V7r),e(g4,SH),e(SH,X7r),e(g4,z7r),e(ce,Q7r),e(ce,h4),e(h4,pve),e(pve,W7r),e(h4,H7r),e(h4,RH),e(RH,U7r),e(h4,J7r),e(ce,Y7r),e(ce,p4),e(p4,uve),e(uve,K7r),e(p4,Z7r),e(p4,BH),e(BH,eMr),e(p4,oMr),e(ce,rMr),e(ce,u4),e(u4,_ve),e(_ve,tMr),e(u4,aMr),e(u4,PH),e(PH,nMr),e(u4,sMr),e(ce,lMr),e(ce,_4),e(_4,bve),e(bve,iMr),e(_4,dMr),e(_4,IH),e(IH,cMr),e(_4,fMr),e(ce,mMr),e(ce,b4),e(b4,vve),e(vve,gMr),e(b4,hMr),e(b4,qH),e(qH,pMr),e(b4,uMr),e(ce,_Mr),e(ce,v4),e(v4,Fve),e(Fve,bMr),e(v4,vMr),e(v4,NH),e(NH,FMr),e(v4,TMr),e(ce,MMr),e(ce,F4),e(F4,Tve),e(Tve,EMr),e(F4,CMr),e(F4,jH),e(jH,wMr),e(F4,AMr),e(ce,yMr),e(ce,T4),e(T4,Mve),e(Mve,LMr),e(T4,xMr),e(T4,DH),e(DH,$Mr),e(T4,kMr),e(Br,SMr),M(M4,Br,null),b(f,uIe,_),b(f,mc,_),e(mc,E4),e(E4,Eve),M(gL,Eve,null),e(mc,RMr),e(mc,Cve),e(Cve,BMr),b(f,_Ie,_),b(f,ir,_),M(hL,ir,null),e(ir,PMr),e(ir,gc),e(gc,IMr),e(gc,GH),e(GH,qMr),e(gc,NMr),e(gc,OH),e(OH,jMr),e(gc,DMr),e(ir,GMr),e(ir,pL),e(pL,OMr),e(pL,wve),e(wve,VMr),e(pL,XMr),e(ir,zMr),e(ir,Bt),M(uL,Bt,null),e(Bt,QMr),e(Bt,Ave),e(Ave,WMr),e(Bt,HMr),e(Bt,hc),e(hc,UMr),e(hc,yve),e(yve,JMr),e(hc,YMr),e(hc,VH),e(VH,KMr),e(hc,ZMr),e(Bt,e4r),M(C4,Bt,null),e(ir,o4r),e(ir,Pr),M(_L,Pr,null),e(Pr,r4r),e(Pr,Lve),e(Lve,t4r),e(Pr,a4r),e(Pr,sn),e(sn,n4r),e(sn,xve),e(xve,s4r),e(sn,l4r),e(sn,$ve),e($ve,i4r),e(sn,d4r),e(sn,kve),e(kve,c4r),e(sn,f4r),e(Pr,m4r),e(Pr,Sve),e(Sve,w4),e(w4,Rve),e(Rve,g4r),e(w4,h4r),e(w4,XH),e(XH,p4r),e(w4,u4r),e(Pr,_4r),M(A4,Pr,null),b(f,bIe,_),b(f,pc,_),e(pc,y4),e(y4,Bve),M(bL,Bve,null),e(pc,b4r),e(pc,Pve),e(Pve,v4r),b(f,vIe,_),b(f,dr,_),M(vL,dr,null),e(dr,F4r),e(dr,uc),e(uc,T4r),e(uc,zH),e(zH,M4r),e(uc,E4r),e(uc,QH),e(QH,C4r),e(uc,w4r),e(dr,A4r),e(dr,FL),e(FL,y4r),e(FL,Ive),e(Ive,L4r),e(FL,x4r),e(dr,$4r),e(dr,Pt),M(TL,Pt,null),e(Pt,k4r),e(Pt,qve),e(qve,S4r),e(Pt,R4r),e(Pt,_c),e(_c,B4r),e(_c,Nve),e(Nve,P4r),e(_c,I4r),e(_c,WH),e(WH,q4r),e(_c,N4r),e(Pt,j4r),M(L4,Pt,null),e(dr,D4r),e(dr,Ir),M(ML,Ir,null),e(Ir,G4r),e(Ir,jve),e(jve,O4r),e(Ir,V4r),e(Ir,ln),e(ln,X4r),e(ln,Dve),e(Dve,z4r),e(ln,Q4r),e(ln,Gve),e(Gve,W4r),e(ln,H4r),e(ln,Ove),e(Ove,U4r),e(ln,J4r),e(Ir,Y4r),e(Ir,Vve),e(Vve,x4),e(x4,Xve),e(Xve,K4r),e(x4,Z4r),e(x4,HH),e(HH,eEr),e(x4,oEr),e(Ir,rEr),M($4,Ir,null),b(f,FIe,_),b(f,bc,_),e(bc,k4),e(k4,zve),M(EL,zve,null),e(bc,tEr),e(bc,Qve),e(Qve,aEr),b(f,TIe,_),b(f,cr,_),M(CL,cr,null),e(cr,nEr),e(cr,vc),e(vc,sEr),e(vc,UH),e(UH,lEr),e(vc,iEr),e(vc,JH),e(JH,dEr),e(vc,cEr),e(cr,fEr),e(cr,wL),e(wL,mEr),e(wL,Wve),e(Wve,gEr),e(wL,hEr),e(cr,pEr),e(cr,It),M(AL,It,null),e(It,uEr),e(It,Hve),e(Hve,_Er),e(It,bEr),e(It,Fc),e(Fc,vEr),e(Fc,Uve),e(Uve,FEr),e(Fc,TEr),e(Fc,YH),e(YH,MEr),e(Fc,EEr),e(It,CEr),M(S4,It,null),e(cr,wEr),e(cr,qr),M(yL,qr,null),e(qr,AEr),e(qr,Jve),e(Jve,yEr),e(qr,LEr),e(qr,dn),e(dn,xEr),e(dn,Yve),e(Yve,$Er),e(dn,kEr),e(dn,Kve),e(Kve,SEr),e(dn,REr),e(dn,Zve),e(Zve,BEr),e(dn,PEr),e(qr,IEr),e(qr,ee),e(ee,R4),e(R4,eFe),e(eFe,qEr),e(R4,NEr),e(R4,KH),e(KH,jEr),e(R4,DEr),e(ee,GEr),e(ee,B4),e(B4,oFe),e(oFe,OEr),e(B4,VEr),e(B4,ZH),e(ZH,XEr),e(B4,zEr),e(ee,QEr),e(ee,P4),e(P4,rFe),e(rFe,WEr),e(P4,HEr),e(P4,eU),e(eU,UEr),e(P4,JEr),e(ee,YEr),e(ee,I4),e(I4,tFe),e(tFe,KEr),e(I4,ZEr),e(I4,oU),e(oU,e5r),e(I4,o5r),e(ee,r5r),e(ee,q4),e(q4,aFe),e(aFe,t5r),e(q4,a5r),e(q4,rU),e(rU,n5r),e(q4,s5r),e(ee,l5r),e(ee,N4),e(N4,nFe),e(nFe,i5r),e(N4,d5r),e(N4,tU),e(tU,c5r),e(N4,f5r),e(ee,m5r),e(ee,j4),e(j4,sFe),e(sFe,g5r),e(j4,h5r),e(j4,aU),e(aU,p5r),e(j4,u5r),e(ee,_5r),e(ee,D4),e(D4,lFe),e(lFe,b5r),e(D4,v5r),e(D4,nU),e(nU,F5r),e(D4,T5r),e(ee,M5r),e(ee,G4),e(G4,iFe),e(iFe,E5r),e(G4,C5r),e(G4,sU),e(sU,w5r),e(G4,A5r),e(ee,y5r),e(ee,O4),e(O4,dFe),e(dFe,L5r),e(O4,x5r),e(O4,lU),e(lU,$5r),e(O4,k5r),e(ee,S5r),e(ee,V4),e(V4,cFe),e(cFe,R5r),e(V4,B5r),e(V4,iU),e(iU,P5r),e(V4,I5r),e(ee,q5r),e(ee,X4),e(X4,fFe),e(fFe,N5r),e(X4,j5r),e(X4,dU),e(dU,D5r),e(X4,G5r),e(ee,O5r),e(ee,z4),e(z4,mFe),e(mFe,V5r),e(z4,X5r),e(z4,cU),e(cU,z5r),e(z4,Q5r),e(ee,W5r),e(ee,Q4),e(Q4,gFe),e(gFe,H5r),e(Q4,U5r),e(Q4,fU),e(fU,J5r),e(Q4,Y5r),e(ee,K5r),e(ee,W4),e(W4,hFe),e(hFe,Z5r),e(W4,eCr),e(W4,mU),e(mU,oCr),e(W4,rCr),e(ee,tCr),e(ee,H4),e(H4,pFe),e(pFe,aCr),e(H4,nCr),e(H4,gU),e(gU,sCr),e(H4,lCr),e(ee,iCr),e(ee,U4),e(U4,uFe),e(uFe,dCr),e(U4,cCr),e(U4,hU),e(hU,fCr),e(U4,mCr),e(ee,gCr),e(ee,J4),e(J4,_Fe),e(_Fe,hCr),e(J4,pCr),e(J4,pU),e(pU,uCr),e(J4,_Cr),e(ee,bCr),e(ee,Y4),e(Y4,bFe),e(bFe,vCr),e(Y4,FCr),e(Y4,uU),e(uU,TCr),e(Y4,MCr),e(ee,ECr),e(ee,K4),e(K4,vFe),e(vFe,CCr),e(K4,wCr),e(K4,_U),e(_U,ACr),e(K4,yCr),e(ee,LCr),e(ee,Z4),e(Z4,FFe),e(FFe,xCr),e(Z4,$Cr),e(Z4,bU),e(bU,kCr),e(Z4,SCr),e(ee,RCr),e(ee,eE),e(eE,TFe),e(TFe,BCr),e(eE,PCr),e(eE,vU),e(vU,ICr),e(eE,qCr),e(ee,NCr),e(ee,oE),e(oE,MFe),e(MFe,jCr),e(oE,DCr),e(oE,FU),e(FU,GCr),e(oE,OCr),e(ee,VCr),e(ee,rE),e(rE,EFe),e(EFe,XCr),e(rE,zCr),e(rE,TU),e(TU,QCr),e(rE,WCr),e(ee,HCr),e(ee,tE),e(tE,CFe),e(CFe,UCr),e(tE,JCr),e(tE,MU),e(MU,YCr),e(tE,KCr),e(ee,ZCr),e(ee,aE),e(aE,wFe),e(wFe,e3r),e(aE,o3r),e(aE,EU),e(EU,r3r),e(aE,t3r),e(qr,a3r),M(nE,qr,null),b(f,MIe,_),b(f,Tc,_),e(Tc,sE),e(sE,AFe),M(LL,AFe,null),e(Tc,n3r),e(Tc,yFe),e(yFe,s3r),b(f,EIe,_),b(f,fr,_),M(xL,fr,null),e(fr,l3r),e(fr,Mc),e(Mc,i3r),e(Mc,CU),e(CU,d3r),e(Mc,c3r),e(Mc,wU),e(wU,f3r),e(Mc,m3r),e(fr,g3r),e(fr,$L),e($L,h3r),e($L,LFe),e(LFe,p3r),e($L,u3r),e(fr,_3r),e(fr,qt),M(kL,qt,null),e(qt,b3r),e(qt,xFe),e(xFe,v3r),e(qt,F3r),e(qt,Ec),e(Ec,T3r),e(Ec,$Fe),e($Fe,M3r),e(Ec,E3r),e(Ec,AU),e(AU,C3r),e(Ec,w3r),e(qt,A3r),M(lE,qt,null),e(fr,y3r),e(fr,Nr),M(SL,Nr,null),e(Nr,L3r),e(Nr,kFe),e(kFe,x3r),e(Nr,$3r),e(Nr,cn),e(cn,k3r),e(cn,SFe),e(SFe,S3r),e(cn,R3r),e(cn,RFe),e(RFe,B3r),e(cn,P3r),e(cn,BFe),e(BFe,I3r),e(cn,q3r),e(Nr,N3r),e(Nr,Le),e(Le,iE),e(iE,PFe),e(PFe,j3r),e(iE,D3r),e(iE,yU),e(yU,G3r),e(iE,O3r),e(Le,V3r),e(Le,dE),e(dE,IFe),e(IFe,X3r),e(dE,z3r),e(dE,LU),e(LU,Q3r),e(dE,W3r),e(Le,H3r),e(Le,cE),e(cE,qFe),e(qFe,U3r),e(cE,J3r),e(cE,xU),e(xU,Y3r),e(cE,K3r),e(Le,Z3r),e(Le,fE),e(fE,NFe),e(NFe,ewr),e(fE,owr),e(fE,$U),e($U,rwr),e(fE,twr),e(Le,awr),e(Le,mE),e(mE,jFe),e(jFe,nwr),e(mE,swr),e(mE,kU),e(kU,lwr),e(mE,iwr),e(Le,dwr),e(Le,gE),e(gE,DFe),e(DFe,cwr),e(gE,fwr),e(gE,SU),e(SU,mwr),e(gE,gwr),e(Le,hwr),e(Le,hE),e(hE,GFe),e(GFe,pwr),e(hE,uwr),e(hE,RU),e(RU,_wr),e(hE,bwr),e(Le,vwr),e(Le,pE),e(pE,OFe),e(OFe,Fwr),e(pE,Twr),e(pE,BU),e(BU,Mwr),e(pE,Ewr),e(Le,Cwr),e(Le,uE),e(uE,VFe),e(VFe,wwr),e(uE,Awr),e(uE,PU),e(PU,ywr),e(uE,Lwr),e(Le,xwr),e(Le,_E),e(_E,XFe),e(XFe,$wr),e(_E,kwr),e(_E,IU),e(IU,Swr),e(_E,Rwr),e(Nr,Bwr),M(bE,Nr,null),b(f,CIe,_),b(f,Cc,_),e(Cc,vE),e(vE,zFe),M(RL,zFe,null),e(Cc,Pwr),e(Cc,QFe),e(QFe,Iwr),b(f,wIe,_),b(f,mr,_),M(BL,mr,null),e(mr,qwr),e(mr,wc),e(wc,Nwr),e(wc,qU),e(qU,jwr),e(wc,Dwr),e(wc,NU),e(NU,Gwr),e(wc,Owr),e(mr,Vwr),e(mr,PL),e(PL,Xwr),e(PL,WFe),e(WFe,zwr),e(PL,Qwr),e(mr,Wwr),e(mr,Nt),M(IL,Nt,null),e(Nt,Hwr),e(Nt,HFe),e(HFe,Uwr),e(Nt,Jwr),e(Nt,Ac),e(Ac,Ywr),e(Ac,UFe),e(UFe,Kwr),e(Ac,Zwr),e(Ac,jU),e(jU,eAr),e(Ac,oAr),e(Nt,rAr),M(FE,Nt,null),e(mr,tAr),e(mr,jr),M(qL,jr,null),e(jr,aAr),e(jr,JFe),e(JFe,nAr),e(jr,sAr),e(jr,fn),e(fn,lAr),e(fn,YFe),e(YFe,iAr),e(fn,dAr),e(fn,KFe),e(KFe,cAr),e(fn,fAr),e(fn,ZFe),e(ZFe,mAr),e(fn,gAr),e(jr,hAr),e(jr,Me),e(Me,TE),e(TE,e0e),e(e0e,pAr),e(TE,uAr),e(TE,DU),e(DU,_Ar),e(TE,bAr),e(Me,vAr),e(Me,ME),e(ME,o0e),e(o0e,FAr),e(ME,TAr),e(ME,GU),e(GU,MAr),e(ME,EAr),e(Me,CAr),e(Me,EE),e(EE,r0e),e(r0e,wAr),e(EE,AAr),e(EE,OU),e(OU,yAr),e(EE,LAr),e(Me,xAr),e(Me,CE),e(CE,t0e),e(t0e,$Ar),e(CE,kAr),e(CE,VU),e(VU,SAr),e(CE,RAr),e(Me,BAr),e(Me,wE),e(wE,a0e),e(a0e,PAr),e(wE,IAr),e(wE,XU),e(XU,qAr),e(wE,NAr),e(Me,jAr),e(Me,AE),e(AE,n0e),e(n0e,DAr),e(AE,GAr),e(AE,zU),e(zU,OAr),e(AE,VAr),e(Me,XAr),e(Me,yE),e(yE,s0e),e(s0e,zAr),e(yE,QAr),e(yE,QU),e(QU,WAr),e(yE,HAr),e(Me,UAr),e(Me,LE),e(LE,l0e),e(l0e,JAr),e(LE,YAr),e(LE,WU),e(WU,KAr),e(LE,ZAr),e(Me,e6r),e(Me,xE),e(xE,i0e),e(i0e,o6r),e(xE,r6r),e(xE,HU),e(HU,t6r),e(xE,a6r),e(Me,n6r),e(Me,$E),e($E,d0e),e(d0e,s6r),e($E,l6r),e($E,UU),e(UU,i6r),e($E,d6r),e(Me,c6r),e(Me,kE),e(kE,c0e),e(c0e,f6r),e(kE,m6r),e(kE,JU),e(JU,g6r),e(kE,h6r),e(Me,p6r),e(Me,SE),e(SE,f0e),e(f0e,u6r),e(SE,_6r),e(SE,YU),e(YU,b6r),e(SE,v6r),e(jr,F6r),M(RE,jr,null),b(f,AIe,_),b(f,yc,_),e(yc,BE),e(BE,m0e),M(NL,m0e,null),e(yc,T6r),e(yc,g0e),e(g0e,M6r),b(f,yIe,_),b(f,gr,_),M(jL,gr,null),e(gr,E6r),e(gr,Lc),e(Lc,C6r),e(Lc,KU),e(KU,w6r),e(Lc,A6r),e(Lc,ZU),e(ZU,y6r),e(Lc,L6r),e(gr,x6r),e(gr,DL),e(DL,$6r),e(DL,h0e),e(h0e,k6r),e(DL,S6r),e(gr,R6r),e(gr,jt),M(GL,jt,null),e(jt,B6r),e(jt,p0e),e(p0e,P6r),e(jt,I6r),e(jt,xc),e(xc,q6r),e(xc,u0e),e(u0e,N6r),e(xc,j6r),e(xc,eJ),e(eJ,D6r),e(xc,G6r),e(jt,O6r),M(PE,jt,null),e(gr,V6r),e(gr,Dr),M(OL,Dr,null),e(Dr,X6r),e(Dr,_0e),e(_0e,z6r),e(Dr,Q6r),e(Dr,mn),e(mn,W6r),e(mn,b0e),e(b0e,H6r),e(mn,U6r),e(mn,v0e),e(v0e,J6r),e(mn,Y6r),e(mn,F0e),e(F0e,K6r),e(mn,Z6r),e(Dr,eyr),e(Dr,xe),e(xe,IE),e(IE,T0e),e(T0e,oyr),e(IE,ryr),e(IE,oJ),e(oJ,tyr),e(IE,ayr),e(xe,nyr),e(xe,qE),e(qE,M0e),e(M0e,syr),e(qE,lyr),e(qE,rJ),e(rJ,iyr),e(qE,dyr),e(xe,cyr),e(xe,NE),e(NE,E0e),e(E0e,fyr),e(NE,myr),e(NE,tJ),e(tJ,gyr),e(NE,hyr),e(xe,pyr),e(xe,jE),e(jE,C0e),e(C0e,uyr),e(jE,_yr),e(jE,aJ),e(aJ,byr),e(jE,vyr),e(xe,Fyr),e(xe,DE),e(DE,w0e),e(w0e,Tyr),e(DE,Myr),e(DE,nJ),e(nJ,Eyr),e(DE,Cyr),e(xe,wyr),e(xe,GE),e(GE,A0e),e(A0e,Ayr),e(GE,yyr),e(GE,sJ),e(sJ,Lyr),e(GE,xyr),e(xe,$yr),e(xe,OE),e(OE,y0e),e(y0e,kyr),e(OE,Syr),e(OE,lJ),e(lJ,Ryr),e(OE,Byr),e(xe,Pyr),e(xe,VE),e(VE,L0e),e(L0e,Iyr),e(VE,qyr),e(VE,iJ),e(iJ,Nyr),e(VE,jyr),e(xe,Dyr),e(xe,XE),e(XE,x0e),e(x0e,Gyr),e(XE,Oyr),e(XE,dJ),e(dJ,Vyr),e(XE,Xyr),e(xe,zyr),e(xe,zE),e(zE,$0e),e($0e,Qyr),e(zE,Wyr),e(zE,cJ),e(cJ,Hyr),e(zE,Uyr),e(Dr,Jyr),M(QE,Dr,null),b(f,LIe,_),b(f,$c,_),e($c,WE),e(WE,k0e),M(VL,k0e,null),e($c,Yyr),e($c,S0e),e(S0e,Kyr),b(f,xIe,_),b(f,hr,_),M(XL,hr,null),e(hr,Zyr),e(hr,kc),e(kc,eLr),e(kc,fJ),e(fJ,oLr),e(kc,rLr),e(kc,mJ),e(mJ,tLr),e(kc,aLr),e(hr,nLr),e(hr,zL),e(zL,sLr),e(zL,R0e),e(R0e,lLr),e(zL,iLr),e(hr,dLr),e(hr,Dt),M(QL,Dt,null),e(Dt,cLr),e(Dt,B0e),e(B0e,fLr),e(Dt,mLr),e(Dt,Sc),e(Sc,gLr),e(Sc,P0e),e(P0e,hLr),e(Sc,pLr),e(Sc,gJ),e(gJ,uLr),e(Sc,_Lr),e(Dt,bLr),M(HE,Dt,null),e(hr,vLr),e(hr,Gr),M(WL,Gr,null),e(Gr,FLr),e(Gr,I0e),e(I0e,TLr),e(Gr,MLr),e(Gr,gn),e(gn,ELr),e(gn,q0e),e(q0e,CLr),e(gn,wLr),e(gn,N0e),e(N0e,ALr),e(gn,yLr),e(gn,j0e),e(j0e,LLr),e(gn,xLr),e(Gr,$Lr),e(Gr,Se),e(Se,UE),e(UE,D0e),e(D0e,kLr),e(UE,SLr),e(UE,hJ),e(hJ,RLr),e(UE,BLr),e(Se,PLr),e(Se,JE),e(JE,G0e),e(G0e,ILr),e(JE,qLr),e(JE,pJ),e(pJ,NLr),e(JE,jLr),e(Se,DLr),e(Se,YE),e(YE,O0e),e(O0e,GLr),e(YE,OLr),e(YE,uJ),e(uJ,VLr),e(YE,XLr),e(Se,zLr),e(Se,KE),e(KE,V0e),e(V0e,QLr),e(KE,WLr),e(KE,_J),e(_J,HLr),e(KE,ULr),e(Se,JLr),e(Se,ZE),e(ZE,X0e),e(X0e,YLr),e(ZE,KLr),e(ZE,bJ),e(bJ,ZLr),e(ZE,exr),e(Se,oxr),e(Se,e5),e(e5,z0e),e(z0e,rxr),e(e5,txr),e(e5,vJ),e(vJ,axr),e(e5,nxr),e(Se,sxr),e(Se,o5),e(o5,Q0e),e(Q0e,lxr),e(o5,ixr),e(o5,FJ),e(FJ,dxr),e(o5,cxr),e(Se,fxr),e(Se,r5),e(r5,W0e),e(W0e,mxr),e(r5,gxr),e(r5,TJ),e(TJ,hxr),e(r5,pxr),e(Se,uxr),e(Se,t5),e(t5,H0e),e(H0e,_xr),e(t5,bxr),e(t5,MJ),e(MJ,vxr),e(t5,Fxr),e(Gr,Txr),M(a5,Gr,null),b(f,$Ie,_),b(f,Rc,_),e(Rc,n5),e(n5,U0e),M(HL,U0e,null),e(Rc,Mxr),e(Rc,J0e),e(J0e,Exr),b(f,kIe,_),b(f,pr,_),M(UL,pr,null),e(pr,Cxr),e(pr,Bc),e(Bc,wxr),e(Bc,EJ),e(EJ,Axr),e(Bc,yxr),e(Bc,CJ),e(CJ,Lxr),e(Bc,xxr),e(pr,$xr),e(pr,JL),e(JL,kxr),e(JL,Y0e),e(Y0e,Sxr),e(JL,Rxr),e(pr,Bxr),e(pr,Gt),M(YL,Gt,null),e(Gt,Pxr),e(Gt,K0e),e(K0e,Ixr),e(Gt,qxr),e(Gt,Pc),e(Pc,Nxr),e(Pc,Z0e),e(Z0e,jxr),e(Pc,Dxr),e(Pc,wJ),e(wJ,Gxr),e(Pc,Oxr),e(Gt,Vxr),M(s5,Gt,null),e(pr,Xxr),e(pr,Or),M(KL,Or,null),e(Or,zxr),e(Or,eTe),e(eTe,Qxr),e(Or,Wxr),e(Or,hn),e(hn,Hxr),e(hn,oTe),e(oTe,Uxr),e(hn,Jxr),e(hn,rTe),e(rTe,Yxr),e(hn,Kxr),e(hn,tTe),e(tTe,Zxr),e(hn,e9r),e(Or,o9r),e(Or,$e),e($e,l5),e(l5,aTe),e(aTe,r9r),e(l5,t9r),e(l5,AJ),e(AJ,a9r),e(l5,n9r),e($e,s9r),e($e,i5),e(i5,nTe),e(nTe,l9r),e(i5,i9r),e(i5,yJ),e(yJ,d9r),e(i5,c9r),e($e,f9r),e($e,d5),e(d5,sTe),e(sTe,m9r),e(d5,g9r),e(d5,LJ),e(LJ,h9r),e(d5,p9r),e($e,u9r),e($e,c5),e(c5,lTe),e(lTe,_9r),e(c5,b9r),e(c5,xJ),e(xJ,v9r),e(c5,F9r),e($e,T9r),e($e,f5),e(f5,iTe),e(iTe,M9r),e(f5,E9r),e(f5,$J),e($J,C9r),e(f5,w9r),e($e,A9r),e($e,m5),e(m5,dTe),e(dTe,y9r),e(m5,L9r),e(m5,kJ),e(kJ,x9r),e(m5,$9r),e($e,k9r),e($e,g5),e(g5,cTe),e(cTe,S9r),e(g5,R9r),e(g5,SJ),e(SJ,B9r),e(g5,P9r),e($e,I9r),e($e,h5),e(h5,fTe),e(fTe,q9r),e(h5,N9r),e(h5,RJ),e(RJ,j9r),e(h5,D9r),e($e,G9r),e($e,p5),e(p5,mTe),e(mTe,O9r),e(p5,V9r),e(p5,BJ),e(BJ,X9r),e(p5,z9r),e($e,Q9r),e($e,u5),e(u5,gTe),e(gTe,W9r),e(u5,H9r),e(u5,PJ),e(PJ,U9r),e(u5,J9r),e(Or,Y9r),M(_5,Or,null),b(f,SIe,_),b(f,Ic,_),e(Ic,b5),e(b5,hTe),M(ZL,hTe,null),e(Ic,K9r),e(Ic,pTe),e(pTe,Z9r),b(f,RIe,_),b(f,ur,_),M(ex,ur,null),e(ur,e$r),e(ur,qc),e(qc,o$r),e(qc,IJ),e(IJ,r$r),e(qc,t$r),e(qc,qJ),e(qJ,a$r),e(qc,n$r),e(ur,s$r),e(ur,ox),e(ox,l$r),e(ox,uTe),e(uTe,i$r),e(ox,d$r),e(ur,c$r),e(ur,Ot),M(rx,Ot,null),e(Ot,f$r),e(Ot,_Te),e(_Te,m$r),e(Ot,g$r),e(Ot,Nc),e(Nc,h$r),e(Nc,bTe),e(bTe,p$r),e(Nc,u$r),e(Nc,NJ),e(NJ,_$r),e(Nc,b$r),e(Ot,v$r),M(v5,Ot,null),e(ur,F$r),e(ur,Vr),M(tx,Vr,null),e(Vr,T$r),e(Vr,vTe),e(vTe,M$r),e(Vr,E$r),e(Vr,pn),e(pn,C$r),e(pn,FTe),e(FTe,w$r),e(pn,A$r),e(pn,TTe),e(TTe,y$r),e(pn,L$r),e(pn,MTe),e(MTe,x$r),e(pn,$$r),e(Vr,k$r),e(Vr,ke),e(ke,F5),e(F5,ETe),e(ETe,S$r),e(F5,R$r),e(F5,jJ),e(jJ,B$r),e(F5,P$r),e(ke,I$r),e(ke,T5),e(T5,CTe),e(CTe,q$r),e(T5,N$r),e(T5,DJ),e(DJ,j$r),e(T5,D$r),e(ke,G$r),e(ke,M5),e(M5,wTe),e(wTe,O$r),e(M5,V$r),e(M5,GJ),e(GJ,X$r),e(M5,z$r),e(ke,Q$r),e(ke,E5),e(E5,ATe),e(ATe,W$r),e(E5,H$r),e(E5,OJ),e(OJ,U$r),e(E5,J$r),e(ke,Y$r),e(ke,C5),e(C5,yTe),e(yTe,K$r),e(C5,Z$r),e(C5,VJ),e(VJ,ekr),e(C5,okr),e(ke,rkr),e(ke,w5),e(w5,LTe),e(LTe,tkr),e(w5,akr),e(w5,XJ),e(XJ,nkr),e(w5,skr),e(ke,lkr),e(ke,A5),e(A5,xTe),e(xTe,ikr),e(A5,dkr),e(A5,zJ),e(zJ,ckr),e(A5,fkr),e(ke,mkr),e(ke,y5),e(y5,$Te),e($Te,gkr),e(y5,hkr),e(y5,QJ),e(QJ,pkr),e(y5,ukr),e(ke,_kr),e(ke,L5),e(L5,kTe),e(kTe,bkr),e(L5,vkr),e(L5,WJ),e(WJ,Fkr),e(L5,Tkr),e(ke,Mkr),e(ke,x5),e(x5,STe),e(STe,Ekr),e(x5,Ckr),e(x5,HJ),e(HJ,wkr),e(x5,Akr),e(Vr,ykr),M($5,Vr,null),b(f,BIe,_),b(f,jc,_),e(jc,k5),e(k5,RTe),M(ax,RTe,null),e(jc,Lkr),e(jc,BTe),e(BTe,xkr),b(f,PIe,_),b(f,_r,_),M(nx,_r,null),e(_r,$kr),e(_r,Dc),e(Dc,kkr),e(Dc,UJ),e(UJ,Skr),e(Dc,Rkr),e(Dc,JJ),e(JJ,Bkr),e(Dc,Pkr),e(_r,Ikr),e(_r,sx),e(sx,qkr),e(sx,PTe),e(PTe,Nkr),e(sx,jkr),e(_r,Dkr),e(_r,Vt),M(lx,Vt,null),e(Vt,Gkr),e(Vt,ITe),e(ITe,Okr),e(Vt,Vkr),e(Vt,Gc),e(Gc,Xkr),e(Gc,qTe),e(qTe,zkr),e(Gc,Qkr),e(Gc,YJ),e(YJ,Wkr),e(Gc,Hkr),e(Vt,Ukr),M(S5,Vt,null),e(_r,Jkr),e(_r,Xr),M(ix,Xr,null),e(Xr,Ykr),e(Xr,NTe),e(NTe,Kkr),e(Xr,Zkr),e(Xr,un),e(un,eSr),e(un,jTe),e(jTe,oSr),e(un,rSr),e(un,DTe),e(DTe,tSr),e(un,aSr),e(un,GTe),e(GTe,nSr),e(un,sSr),e(Xr,lSr),e(Xr,Ge),e(Ge,R5),e(R5,OTe),e(OTe,iSr),e(R5,dSr),e(R5,KJ),e(KJ,cSr),e(R5,fSr),e(Ge,mSr),e(Ge,B5),e(B5,VTe),e(VTe,gSr),e(B5,hSr),e(B5,ZJ),e(ZJ,pSr),e(B5,uSr),e(Ge,_Sr),e(Ge,P5),e(P5,XTe),e(XTe,bSr),e(P5,vSr),e(P5,eY),e(eY,FSr),e(P5,TSr),e(Ge,MSr),e(Ge,I5),e(I5,zTe),e(zTe,ESr),e(I5,CSr),e(I5,oY),e(oY,wSr),e(I5,ASr),e(Ge,ySr),e(Ge,q5),e(q5,QTe),e(QTe,LSr),e(q5,xSr),e(q5,rY),e(rY,$Sr),e(q5,kSr),e(Ge,SSr),e(Ge,N5),e(N5,WTe),e(WTe,RSr),e(N5,BSr),e(N5,tY),e(tY,PSr),e(N5,ISr),e(Ge,qSr),e(Ge,j5),e(j5,HTe),e(HTe,NSr),e(j5,jSr),e(j5,aY),e(aY,DSr),e(j5,GSr),e(Ge,OSr),e(Ge,D5),e(D5,UTe),e(UTe,VSr),e(D5,XSr),e(D5,nY),e(nY,zSr),e(D5,QSr),e(Xr,WSr),M(G5,Xr,null),b(f,IIe,_),b(f,Oc,_),e(Oc,O5),e(O5,JTe),M(dx,JTe,null),e(Oc,HSr),e(Oc,YTe),e(YTe,USr),b(f,qIe,_),b(f,br,_),M(cx,br,null),e(br,JSr),e(br,Vc),e(Vc,YSr),e(Vc,sY),e(sY,KSr),e(Vc,ZSr),e(Vc,lY),e(lY,eRr),e(Vc,oRr),e(br,rRr),e(br,fx),e(fx,tRr),e(fx,KTe),e(KTe,aRr),e(fx,nRr),e(br,sRr),e(br,Xt),M(mx,Xt,null),e(Xt,lRr),e(Xt,ZTe),e(ZTe,iRr),e(Xt,dRr),e(Xt,Xc),e(Xc,cRr),e(Xc,e7e),e(e7e,fRr),e(Xc,mRr),e(Xc,iY),e(iY,gRr),e(Xc,hRr),e(Xt,pRr),M(V5,Xt,null),e(br,uRr),e(br,zr),M(gx,zr,null),e(zr,_Rr),e(zr,o7e),e(o7e,bRr),e(zr,vRr),e(zr,_n),e(_n,FRr),e(_n,r7e),e(r7e,TRr),e(_n,MRr),e(_n,t7e),e(t7e,ERr),e(_n,CRr),e(_n,a7e),e(a7e,wRr),e(_n,ARr),e(zr,yRr),e(zr,Oe),e(Oe,X5),e(X5,n7e),e(n7e,LRr),e(X5,xRr),e(X5,dY),e(dY,$Rr),e(X5,kRr),e(Oe,SRr),e(Oe,z5),e(z5,s7e),e(s7e,RRr),e(z5,BRr),e(z5,cY),e(cY,PRr),e(z5,IRr),e(Oe,qRr),e(Oe,Q5),e(Q5,l7e),e(l7e,NRr),e(Q5,jRr),e(Q5,fY),e(fY,DRr),e(Q5,GRr),e(Oe,ORr),e(Oe,W5),e(W5,i7e),e(i7e,VRr),e(W5,XRr),e(W5,mY),e(mY,zRr),e(W5,QRr),e(Oe,WRr),e(Oe,H5),e(H5,d7e),e(d7e,HRr),e(H5,URr),e(H5,gY),e(gY,JRr),e(H5,YRr),e(Oe,KRr),e(Oe,U5),e(U5,c7e),e(c7e,ZRr),e(U5,eBr),e(U5,hY),e(hY,oBr),e(U5,rBr),e(Oe,tBr),e(Oe,J5),e(J5,f7e),e(f7e,aBr),e(J5,nBr),e(J5,pY),e(pY,sBr),e(J5,lBr),e(Oe,iBr),e(Oe,Y5),e(Y5,m7e),e(m7e,dBr),e(Y5,cBr),e(Y5,uY),e(uY,fBr),e(Y5,mBr),e(zr,gBr),M(K5,zr,null),b(f,NIe,_),b(f,zc,_),e(zc,Z5),e(Z5,g7e),M(hx,g7e,null),e(zc,hBr),e(zc,h7e),e(h7e,pBr),b(f,jIe,_),b(f,vr,_),M(px,vr,null),e(vr,uBr),e(vr,Qc),e(Qc,_Br),e(Qc,_Y),e(_Y,bBr),e(Qc,vBr),e(Qc,bY),e(bY,FBr),e(Qc,TBr),e(vr,MBr),e(vr,ux),e(ux,EBr),e(ux,p7e),e(p7e,CBr),e(ux,wBr),e(vr,ABr),e(vr,zt),M(_x,zt,null),e(zt,yBr),e(zt,u7e),e(u7e,LBr),e(zt,xBr),e(zt,Wc),e(Wc,$Br),e(Wc,_7e),e(_7e,kBr),e(Wc,SBr),e(Wc,vY),e(vY,RBr),e(Wc,BBr),e(zt,PBr),M(eC,zt,null),e(vr,IBr),e(vr,Qr),M(bx,Qr,null),e(Qr,qBr),e(Qr,b7e),e(b7e,NBr),e(Qr,jBr),e(Qr,bn),e(bn,DBr),e(bn,v7e),e(v7e,GBr),e(bn,OBr),e(bn,F7e),e(F7e,VBr),e(bn,XBr),e(bn,T7e),e(T7e,zBr),e(bn,QBr),e(Qr,WBr),e(Qr,M7e),e(M7e,oC),e(oC,E7e),e(E7e,HBr),e(oC,UBr),e(oC,FY),e(FY,JBr),e(oC,YBr),e(Qr,KBr),M(rC,Qr,null),b(f,DIe,_),b(f,Hc,_),e(Hc,tC),e(tC,C7e),M(vx,C7e,null),e(Hc,ZBr),e(Hc,w7e),e(w7e,ePr),b(f,GIe,_),b(f,Fr,_),M(Fx,Fr,null),e(Fr,oPr),e(Fr,Uc),e(Uc,rPr),e(Uc,TY),e(TY,tPr),e(Uc,aPr),e(Uc,MY),e(MY,nPr),e(Uc,sPr),e(Fr,lPr),e(Fr,Tx),e(Tx,iPr),e(Tx,A7e),e(A7e,dPr),e(Tx,cPr),e(Fr,fPr),e(Fr,Qt),M(Mx,Qt,null),e(Qt,mPr),e(Qt,y7e),e(y7e,gPr),e(Qt,hPr),e(Qt,Jc),e(Jc,pPr),e(Jc,L7e),e(L7e,uPr),e(Jc,_Pr),e(Jc,EY),e(EY,bPr),e(Jc,vPr),e(Qt,FPr),M(aC,Qt,null),e(Fr,TPr),e(Fr,Wr),M(Ex,Wr,null),e(Wr,MPr),e(Wr,x7e),e(x7e,EPr),e(Wr,CPr),e(Wr,vn),e(vn,wPr),e(vn,$7e),e($7e,APr),e(vn,yPr),e(vn,k7e),e(k7e,LPr),e(vn,xPr),e(vn,S7e),e(S7e,$Pr),e(vn,kPr),e(Wr,SPr),e(Wr,Cx),e(Cx,nC),e(nC,R7e),e(R7e,RPr),e(nC,BPr),e(nC,CY),e(CY,PPr),e(nC,IPr),e(Cx,qPr),e(Cx,sC),e(sC,B7e),e(B7e,NPr),e(sC,jPr),e(sC,wY),e(wY,DPr),e(sC,GPr),e(Wr,OPr),M(lC,Wr,null),b(f,OIe,_),b(f,Yc,_),e(Yc,iC),e(iC,P7e),M(wx,P7e,null),e(Yc,VPr),e(Yc,I7e),e(I7e,XPr),b(f,VIe,_),b(f,Tr,_),M(Ax,Tr,null),e(Tr,zPr),e(Tr,Kc),e(Kc,QPr),e(Kc,AY),e(AY,WPr),e(Kc,HPr),e(Kc,yY),e(yY,UPr),e(Kc,JPr),e(Tr,YPr),e(Tr,yx),e(yx,KPr),e(yx,q7e),e(q7e,ZPr),e(yx,eIr),e(Tr,oIr),e(Tr,Wt),M(Lx,Wt,null),e(Wt,rIr),e(Wt,N7e),e(N7e,tIr),e(Wt,aIr),e(Wt,Zc),e(Zc,nIr),e(Zc,j7e),e(j7e,sIr),e(Zc,lIr),e(Zc,LY),e(LY,iIr),e(Zc,dIr),e(Wt,cIr),M(dC,Wt,null),e(Tr,fIr),e(Tr,Hr),M(xx,Hr,null),e(Hr,mIr),e(Hr,D7e),e(D7e,gIr),e(Hr,hIr),e(Hr,Fn),e(Fn,pIr),e(Fn,G7e),e(G7e,uIr),e(Fn,_Ir),e(Fn,O7e),e(O7e,bIr),e(Fn,vIr),e(Fn,V7e),e(V7e,FIr),e(Fn,TIr),e(Hr,MIr),e(Hr,X7e),e(X7e,cC),e(cC,z7e),e(z7e,EIr),e(cC,CIr),e(cC,xY),e(xY,wIr),e(cC,AIr),e(Hr,yIr),M(fC,Hr,null),XIe=!0},p(f,[_]){const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),df.$set($x);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:f}),lg.$set(Q7e);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:f}),jg.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:f}),mh.$set(H7e);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),gh.$set(kx);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:f}),$h.$set(U7e);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),kh.$set(Tn);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:f}),Bh.$set(J7e);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:f}),Eu.$set(Y7e);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:f}),wu.$set(K7e);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),m_.$set(Sx);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:f}),h_.$set(Z7e);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),K_.$set(Rx);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),e1.$set(eMe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),q1.$set(Bx);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),j1.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),a8.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),s8.$set(tMe);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),ob.$set(ef);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),tb.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),Rb.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),Pb.$set(sMe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),Ob.$set(Px);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),Xb.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),w2.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),y2.$set(dMe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),hv.$set(Jr);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),uv.$set(Ix);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),vv.$set(cMe);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),Tv.$set(qx);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),Bv.$set(fMe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),Iv.$set(Yr);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),jv.$set(mMe);const of={};_&2&&(of.$$scope={dirty:_,ctx:f}),Gv.$set(of);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),Yv.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),Zv.$set(hMe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),nF.$set(y);const mC={};_&2&&(mC.$$scope={dirty:_,ctx:f}),lF.$set(mC);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),_F.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),vF.$set(uMe);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),EF.$set(gC);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),wF.$set(_Me);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),kF.$set(bMe);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),RF.$set(hC);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),NF.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),DF.$set(FMe);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),XF.$set(pC);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),QF.$set(TMe);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),UF.$set(MMe);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),YF.$set(uC);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),t0.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),n0.$set(CMe);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),i0.$set(_C);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),c0.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),rT.$set(AMe);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),aT.$set(bC);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),LT.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),$T.$set(LMe);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),VT.$set(vC);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),zT.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),UT.$set($Me);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),YT.$set(FC);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),b7.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),F7.$set(SMe);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),k7.$set(TC);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),R7.$set(RMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),sM.$set(BMe);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),iM.$set(MC);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),AM.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),LM.$set(IMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),$M.$set(EC);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),SM.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),ZM.$set(NMe);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),o4.$set(CC);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),M4.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),C4.$set(DMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),A4.$set(wC);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),L4.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),$4.$set(OMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),S4.$set(AC);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),nE.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),lE.$set(XMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),bE.$set(yC);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),FE.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),RE.$set(QMe);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),PE.$set(LC);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),QE.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),HE.$set(HMe);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),a5.$set(xC);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),s5.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),_5.$set(JMe);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),v5.$set($C);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),$5.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),S5.$set(KMe);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),G5.$set(kC);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),V5.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),K5.$set(e4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),eC.$set(SC);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),rC.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),aC.$set(r4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),lC.$set(RC);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),dC.$set(t4e);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),fC.$set(a4e)},i(f){XIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(kw.$$.fragment,f),E(Sw.$$.fragment,f),E(df.$$.fragment,f),E(Rw.$$.fragment,f),E(Bw.$$.fragment,f),E(qw.$$.fragment,f),E(lg.$$.fragment,f),E(Nw.$$.fragment,f),E(jw.$$.fragment,f),E(Dw.$$.fragment,f),E(Vw.$$.fragment,f),E(jg.$$.fragment,f),E(Xw.$$.fragment,f),E(zw.$$.fragment,f),E(Qw.$$.fragment,f),E(Uw.$$.fragment,f),E(mh.$$.fragment,f),E(gh.$$.fragment,f),E(Jw.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(oA.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(sA.$$.fragment,f),E(Bh.$$.fragment,f),E(lA.$$.fragment,f),E(Eu.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(fA.$$.fragment,f),E(wu.$$.fragment,f),E(mA.$$.fragment,f),E(m_.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(uA.$$.fragment,f),E(h_.$$.fragment,f),E(_A.$$.fragment,f),E(K_.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(TA.$$.fragment,f),E(e1.$$.fragment,f),E(MA.$$.fragment,f),E(q1.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(AA.$$.fragment,f),E(j1.$$.fragment,f),E(yA.$$.fragment,f),E(a8.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(kA.$$.fragment,f),E(s8.$$.fragment,f),E(SA.$$.fragment,f),E(ob.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(tb.$$.fragment,f),E(qA.$$.fragment,f),E(Rb.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(GA.$$.fragment,f),E(Pb.$$.fragment,f),E(OA.$$.fragment,f),E(Ob.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(Xb.$$.fragment,f),E(WA.$$.fragment,f),E(w2.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(y2.$$.fragment,f),E(KA.$$.fragment,f),E(hv.$$.fragment,f),E(ZA.$$.fragment,f),E(e6.$$.fragment,f),E(r6.$$.fragment,f),E(uv.$$.fragment,f),E(t6.$$.fragment,f),E(vv.$$.fragment,f),E(a6.$$.fragment,f),E(n6.$$.fragment,f),E(l6.$$.fragment,f),E(Tv.$$.fragment,f),E(i6.$$.fragment,f),E(Bv.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(m6.$$.fragment,f),E(Iv.$$.fragment,f),E(g6.$$.fragment,f),E(jv.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(Gv.$$.fragment,f),E(b6.$$.fragment,f),E(Yv.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(M6.$$.fragment,f),E(Zv.$$.fragment,f),E(E6.$$.fragment,f),E(nF.$$.fragment,f),E(C6.$$.fragment,f),E(w6.$$.fragment,f),E(y6.$$.fragment,f),E(lF.$$.fragment,f),E(L6.$$.fragment,f),E(_F.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(S6.$$.fragment,f),E(vF.$$.fragment,f),E(R6.$$.fragment,f),E(EF.$$.fragment,f),E(P6.$$.fragment,f),E(I6.$$.fragment,f),E(N6.$$.fragment,f),E(wF.$$.fragment,f),E(j6.$$.fragment,f),E(kF.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(V6.$$.fragment,f),E(RF.$$.fragment,f),E(X6.$$.fragment,f),E(NF.$$.fragment,f),E(z6.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(DF.$$.fragment,f),E(U6.$$.fragment,f),E(XF.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(ey.$$.fragment,f),E(QF.$$.fragment,f),E(oy.$$.fragment,f),E(UF.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(YF.$$.fragment,f),E(sy.$$.fragment,f),E(t0.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(n0.$$.fragment,f),E(fy.$$.fragment,f),E(i0.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(c0.$$.fragment,f),E(uy.$$.fragment,f),E(rT.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(aT.$$.fragment,f),E(Ty.$$.fragment,f),E(LT.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E($T.$$.fragment,f),E(Ay.$$.fragment,f),E(VT.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(zT.$$.fragment,f),E(ky.$$.fragment,f),E(UT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(YT.$$.fragment,f),E(Iy.$$.fragment,f),E(b7.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(F7.$$.fragment,f),E(Gy.$$.fragment,f),E(k7.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(R7.$$.fragment,f),E(Qy.$$.fragment,f),E(sM.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(iM.$$.fragment,f),E(Yy.$$.fragment,f),E(AM.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(LM.$$.fragment,f),E(rL.$$.fragment,f),E($M.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(SM.$$.fragment,f),E(lL.$$.fragment,f),E(ZM.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(o4.$$.fragment,f),E(mL.$$.fragment,f),E(M4.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(C4.$$.fragment,f),E(_L.$$.fragment,f),E(A4.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(L4.$$.fragment,f),E(ML.$$.fragment,f),E($4.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(S4.$$.fragment,f),E(yL.$$.fragment,f),E(nE.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(lE.$$.fragment,f),E(SL.$$.fragment,f),E(bE.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(FE.$$.fragment,f),E(qL.$$.fragment,f),E(RE.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(PE.$$.fragment,f),E(OL.$$.fragment,f),E(QE.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(HE.$$.fragment,f),E(WL.$$.fragment,f),E(a5.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(s5.$$.fragment,f),E(KL.$$.fragment,f),E(_5.$$.fragment,f),E(ZL.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(v5.$$.fragment,f),E(tx.$$.fragment,f),E($5.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(S5.$$.fragment,f),E(ix.$$.fragment,f),E(G5.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(V5.$$.fragment,f),E(gx.$$.fragment,f),E(K5.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(eC.$$.fragment,f),E(bx.$$.fragment,f),E(rC.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(aC.$$.fragment,f),E(Ex.$$.fragment,f),E(lC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(dC.$$.fragment,f),E(xx.$$.fragment,f),E(fC.$$.fragment,f),XIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(kw.$$.fragment,f),C(Sw.$$.fragment,f),C(df.$$.fragment,f),C(Rw.$$.fragment,f),C(Bw.$$.fragment,f),C(qw.$$.fragment,f),C(lg.$$.fragment,f),C(Nw.$$.fragment,f),C(jw.$$.fragment,f),C(Dw.$$.fragment,f),C(Vw.$$.fragment,f),C(jg.$$.fragment,f),C(Xw.$$.fragment,f),C(zw.$$.fragment,f),C(Qw.$$.fragment,f),C(Uw.$$.fragment,f),C(mh.$$.fragment,f),C(gh.$$.fragment,f),C(Jw.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(oA.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(sA.$$.fragment,f),C(Bh.$$.fragment,f),C(lA.$$.fragment,f),C(Eu.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(fA.$$.fragment,f),C(wu.$$.fragment,f),C(mA.$$.fragment,f),C(m_.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(uA.$$.fragment,f),C(h_.$$.fragment,f),C(_A.$$.fragment,f),C(K_.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(TA.$$.fragment,f),C(e1.$$.fragment,f),C(MA.$$.fragment,f),C(q1.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(AA.$$.fragment,f),C(j1.$$.fragment,f),C(yA.$$.fragment,f),C(a8.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(kA.$$.fragment,f),C(s8.$$.fragment,f),C(SA.$$.fragment,f),C(ob.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(tb.$$.fragment,f),C(qA.$$.fragment,f),C(Rb.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(GA.$$.fragment,f),C(Pb.$$.fragment,f),C(OA.$$.fragment,f),C(Ob.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(Xb.$$.fragment,f),C(WA.$$.fragment,f),C(w2.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(y2.$$.fragment,f),C(KA.$$.fragment,f),C(hv.$$.fragment,f),C(ZA.$$.fragment,f),C(e6.$$.fragment,f),C(r6.$$.fragment,f),C(uv.$$.fragment,f),C(t6.$$.fragment,f),C(vv.$$.fragment,f),C(a6.$$.fragment,f),C(n6.$$.fragment,f),C(l6.$$.fragment,f),C(Tv.$$.fragment,f),C(i6.$$.fragment,f),C(Bv.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(m6.$$.fragment,f),C(Iv.$$.fragment,f),C(g6.$$.fragment,f),C(jv.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(Gv.$$.fragment,f),C(b6.$$.fragment,f),C(Yv.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(M6.$$.fragment,f),C(Zv.$$.fragment,f),C(E6.$$.fragment,f),C(nF.$$.fragment,f),C(C6.$$.fragment,f),C(w6.$$.fragment,f),C(y6.$$.fragment,f),C(lF.$$.fragment,f),C(L6.$$.fragment,f),C(_F.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(S6.$$.fragment,f),C(vF.$$.fragment,f),C(R6.$$.fragment,f),C(EF.$$.fragment,f),C(P6.$$.fragment,f),C(I6.$$.fragment,f),C(N6.$$.fragment,f),C(wF.$$.fragment,f),C(j6.$$.fragment,f),C(kF.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(V6.$$.fragment,f),C(RF.$$.fragment,f),C(X6.$$.fragment,f),C(NF.$$.fragment,f),C(z6.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(DF.$$.fragment,f),C(U6.$$.fragment,f),C(XF.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(ey.$$.fragment,f),C(QF.$$.fragment,f),C(oy.$$.fragment,f),C(UF.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(YF.$$.fragment,f),C(sy.$$.fragment,f),C(t0.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(n0.$$.fragment,f),C(fy.$$.fragment,f),C(i0.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(c0.$$.fragment,f),C(uy.$$.fragment,f),C(rT.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(aT.$$.fragment,f),C(Ty.$$.fragment,f),C(LT.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C($T.$$.fragment,f),C(Ay.$$.fragment,f),C(VT.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(zT.$$.fragment,f),C(ky.$$.fragment,f),C(UT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(YT.$$.fragment,f),C(Iy.$$.fragment,f),C(b7.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(F7.$$.fragment,f),C(Gy.$$.fragment,f),C(k7.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(R7.$$.fragment,f),C(Qy.$$.fragment,f),C(sM.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(iM.$$.fragment,f),C(Yy.$$.fragment,f),C(AM.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(LM.$$.fragment,f),C(rL.$$.fragment,f),C($M.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(SM.$$.fragment,f),C(lL.$$.fragment,f),C(ZM.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(o4.$$.fragment,f),C(mL.$$.fragment,f),C(M4.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(C4.$$.fragment,f),C(_L.$$.fragment,f),C(A4.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(L4.$$.fragment,f),C(ML.$$.fragment,f),C($4.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(S4.$$.fragment,f),C(yL.$$.fragment,f),C(nE.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(lE.$$.fragment,f),C(SL.$$.fragment,f),C(bE.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(FE.$$.fragment,f),C(qL.$$.fragment,f),C(RE.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(PE.$$.fragment,f),C(OL.$$.fragment,f),C(QE.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(HE.$$.fragment,f),C(WL.$$.fragment,f),C(a5.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(s5.$$.fragment,f),C(KL.$$.fragment,f),C(_5.$$.fragment,f),C(ZL.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(v5.$$.fragment,f),C(tx.$$.fragment,f),C($5.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(S5.$$.fragment,f),C(ix.$$.fragment,f),C(G5.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(V5.$$.fragment,f),C(gx.$$.fragment,f),C(K5.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(eC.$$.fragment,f),C(bx.$$.fragment,f),C(rC.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(aC.$$.fragment,f),C(Ex.$$.fragment,f),C(lC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(dC.$$.fragment,f),C(xx.$$.fragment,f),C(fC.$$.fragment,f),XIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(tf),f&&t(Kr),f&&t(Ne),f&&t(Xe),f&&t(nf),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(VBe),f&&t(di),w(kw),f&&t(XBe),f&&t(An),f&&t(zBe),w(Sw,f),f&&t(QBe),f&&t(H9),f&&t(WBe),w(df,f),f&&t(HBe),f&&t(ci),w(Rw),f&&t(UBe),f&&t(Co),w(Bw),w(qw),w(lg),w(Nw),f&&t(JBe),f&&t(mi),w(jw),f&&t(YBe),f&&t(wo),w(Dw),w(Vw),w(jg),w(Xw),f&&t(KBe),f&&t(gi),w(zw),f&&t(ZBe),f&&t(Ao),w(Qw),w(Uw),w(mh),w(gh),w(Jw),f&&t(ePe),f&&t(hi),w(Yw),f&&t(oPe),f&&t(yo),w(Kw),w(oA),w($h),w(kh),w(rA),f&&t(rPe),f&&t(ui),w(tA),f&&t(tPe),f&&t(Lo),w(aA),w(sA),w(Bh),w(lA),w(Eu),f&&t(aPe),f&&t(vi),w(iA),f&&t(nPe),f&&t(xo),w(dA),w(fA),w(wu),w(mA),w(m_),f&&t(sPe),f&&t(Mi),w(gA),f&&t(lPe),f&&t($o),w(hA),w(uA),w(h_),w(_A),w(K_),f&&t(iPe),f&&t(wi),w(bA),f&&t(dPe),f&&t(ko),w(vA),w(TA),w(e1),w(MA),w(q1),f&&t(cPe),f&&t(Li),w(EA),f&&t(fPe),f&&t(So),w(CA),w(AA),w(j1),w(yA),w(a8),f&&t(mPe),f&&t(ki),w(LA),f&&t(gPe),f&&t(Ro),w(xA),w(kA),w(s8),w(SA),w(ob),f&&t(hPe),f&&t(Bi),w(RA),f&&t(pPe),f&&t(Bo),w(BA),w(IA),w(tb),w(qA),w(Rb),f&&t(uPe),f&&t(qi),w(NA),f&&t(_Pe),f&&t(Po),w(jA),w(GA),w(Pb),w(OA),w(Ob),f&&t(bPe),f&&t(Di),w(VA),f&&t(vPe),f&&t(Io),w(XA),w(QA),w(Xb),w(WA),w(w2),f&&t(FPe),f&&t(Vi),w(HA),f&&t(TPe),f&&t(qo),w(UA),w(YA),w(y2),w(KA),w(hv),f&&t(MPe),f&&t(Qi),w(ZA),f&&t(EPe),f&&t(No),w(e6),w(r6),w(uv),w(t6),w(vv),f&&t(CPe),f&&t(Ui),w(a6),f&&t(wPe),f&&t(jo),w(n6),w(l6),w(Tv),w(i6),w(Bv),f&&t(APe),f&&t(Ki),w(d6),f&&t(yPe),f&&t(Do),w(c6),w(m6),w(Iv),w(g6),w(jv),f&&t(LPe),f&&t(od),w(h6),f&&t(xPe),f&&t(Go),w(p6),w(_6),w(Gv),w(b6),w(Yv),f&&t($Pe),f&&t(ad),w(v6),f&&t(kPe),f&&t(Oo),w(F6),w(M6),w(Zv),w(E6),w(nF),f&&t(SPe),f&&t(ld),w(C6),f&&t(RPe),f&&t(Vo),w(w6),w(y6),w(lF),w(L6),w(_F),f&&t(BPe),f&&t(cd),w(x6),f&&t(PPe),f&&t(Xo),w($6),w(S6),w(vF),w(R6),w(EF),f&&t(IPe),f&&t(gd),w(P6),f&&t(qPe),f&&t(zo),w(I6),w(N6),w(wF),w(j6),w(kF),f&&t(NPe),f&&t(ud),w(D6),f&&t(jPe),f&&t(Qo),w(G6),w(V6),w(RF),w(X6),w(NF),f&&t(DPe),f&&t(Fd),w(z6),f&&t(GPe),f&&t(Wo),w(Q6),w(H6),w(DF),w(U6),w(XF),f&&t(OPe),f&&t(Ed),w(Y6),f&&t(VPe),f&&t(Ho),w(K6),w(ey),w(QF),w(oy),w(UF),f&&t(XPe),f&&t(Ad),w(ry),f&&t(zPe),f&&t(Uo),w(ty),w(ny),w(YF),w(sy),w(t0),f&&t(QPe),f&&t(xd),w(ly),f&&t(WPe),f&&t(Jo),w(iy),w(cy),w(n0),w(fy),w(i0),f&&t(HPe),f&&t(Sd),w(my),f&&t(UPe),f&&t(Yo),w(gy),w(py),w(c0),w(uy),w(rT),f&&t(JPe),f&&t(Pd),w(_y),f&&t(YPe),f&&t(Ko),w(by),w(Fy),w(aT),w(Ty),w(LT),f&&t(KPe),f&&t(Nd),w(My),f&&t(ZPe),f&&t(Zo),w(Ey),w(wy),w($T),w(Ay),w(VT),f&&t(eIe),f&&t(Gd),w(yy),f&&t(oIe),f&&t(er),w(Ly),w($y),w(zT),w(ky),w(UT),f&&t(rIe),f&&t(zd),w(Sy),f&&t(tIe),f&&t(or),w(Ry),w(Py),w(YT),w(Iy),w(b7),f&&t(aIe),f&&t(Hd),w(qy),f&&t(nIe),f&&t(rr),w(Ny),w(Dy),w(F7),w(Gy),w(k7),f&&t(sIe),f&&t(Yd),w(Oy),f&&t(lIe),f&&t(tr),w(Vy),w(zy),w(R7),w(Qy),w(sM),f&&t(iIe),f&&t(ec),w(Wy),f&&t(dIe),f&&t(ar),w(Hy),w(Jy),w(iM),w(Yy),w(AM),f&&t(cIe),f&&t(tc),w(Ky),f&&t(fIe),f&&t(nr),w(Zy),w(oL),w(LM),w(rL),w($M),f&&t(mIe),f&&t(sc),w(tL),f&&t(gIe),f&&t(sr),w(aL),w(sL),w(SM),w(lL),w(ZM),f&&t(hIe),f&&t(dc),w(iL),f&&t(pIe),f&&t(lr),w(dL),w(fL),w(o4),w(mL),w(M4),f&&t(uIe),f&&t(mc),w(gL),f&&t(_Ie),f&&t(ir),w(hL),w(uL),w(C4),w(_L),w(A4),f&&t(bIe),f&&t(pc),w(bL),f&&t(vIe),f&&t(dr),w(vL),w(TL),w(L4),w(ML),w($4),f&&t(FIe),f&&t(bc),w(EL),f&&t(TIe),f&&t(cr),w(CL),w(AL),w(S4),w(yL),w(nE),f&&t(MIe),f&&t(Tc),w(LL),f&&t(EIe),f&&t(fr),w(xL),w(kL),w(lE),w(SL),w(bE),f&&t(CIe),f&&t(Cc),w(RL),f&&t(wIe),f&&t(mr),w(BL),w(IL),w(FE),w(qL),w(RE),f&&t(AIe),f&&t(yc),w(NL),f&&t(yIe),f&&t(gr),w(jL),w(GL),w(PE),w(OL),w(QE),f&&t(LIe),f&&t($c),w(VL),f&&t(xIe),f&&t(hr),w(XL),w(QL),w(HE),w(WL),w(a5),f&&t($Ie),f&&t(Rc),w(HL),f&&t(kIe),f&&t(pr),w(UL),w(YL),w(s5),w(KL),w(_5),f&&t(SIe),f&&t(Ic),w(ZL),f&&t(RIe),f&&t(ur),w(ex),w(rx),w(v5),w(tx),w($5),f&&t(BIe),f&&t(jc),w(ax),f&&t(PIe),f&&t(_r),w(nx),w(lx),w(S5),w(ix),w(G5),f&&t(IIe),f&&t(Oc),w(dx),f&&t(qIe),f&&t(br),w(cx),w(mx),w(V5),w(gx),w(K5),f&&t(NIe),f&&t(zc),w(hx),f&&t(jIe),f&&t(vr),w(px),w(_x),w(eC),w(bx),w(rC),f&&t(DIe),f&&t(Hc),w(vx),f&&t(GIe),f&&t(Fr),w(Fx),w(Mx),w(aC),w(Ex),w(lC),f&&t(OIe),f&&t(Yc),w(wx),f&&t(VIe),f&&t(Tr),w(Ax),w(Lx),w(dC),w(xx),w(fC)}}}const Rwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Bwt(L){return ICt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gwt extends SCt{constructor(g){super();RCt(this,g,Bwt,Swt,BCt,{})}}export{Gwt as default,Rwt as metadata};
