import{S as cwt,i as fwt,s as mwt,e as a,k as l,w as F,t as o,M as gwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as hwt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as Hqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function pwt(A){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,Ow,hf,qe,Xe,fi,An,Vw,yn,Ln,Xw,mi,xn,zw,gi,pf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),gf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),Ow=o(")."),hf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),An=o("NewModel"),Vw=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Xw=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),zw=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),pf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var c$=s(p);m=r(c$,"NewModelConfig"),c$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var f$=s(ii);gf=r(f$,"model_type"),f$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var m$=s(di);ci=r(m$,'"new-model"'),m$.forEach(t),Ow=r(Ae,")."),Ae.forEach(t),hf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);An=r(Ea,"NewModel"),Ea.forEach(t),Vw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var g$=s(yn);Ln=r(g$,"PreTrainedModel"),g$.forEach(t),Xw=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var uf=s(mi);xn=r(uf,"config_class"),uf.forEach(t),zw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var h$=s(gi);pf=r(h$,"NewModelConfig"),h$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,gf),e(g,et),e(g,di),e(di,ci),e(g,Ow),b(ze,hf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,An),e(qe,Vw),e(qe,yn),e(yn,Ln),e(qe,Xw),e(qe,mi),e(mi,xn),e(qe,zw),e(qe,gi),e(gi,pf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(hf),ze&&t(qe)}}}function uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Twt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m6t(A){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,Ow,hf,qe,Xe,fi,An,Vw,yn,Ln,Xw,mi,xn,zw,gi,pf,Ma,ze,Ae,c$,hi,f$,m$,Eo,Ea,g$,uf,h$,Pje,CPe,pi,_f,WZ,Qw,Ije,HZ,qje,wPe,$n,Nje,UZ,jje,Dje,JZ,Gje,Oje,APe,Ww,yPe,p$,Vje,LPe,bf,xPe,ui,vf,YZ,Hw,Xje,KZ,zje,$Pe,Co,Uw,Qje,Jw,Wje,u$,Hje,Uje,Jje,Yw,Yje,ZZ,Kje,Zje,eDe,Er,Kw,oDe,eee,rDe,tDe,_i,aDe,oee,nDe,sDe,ree,lDe,iDe,dDe,y,Ff,tee,cDe,fDe,_$,mDe,gDe,hDe,Tf,aee,pDe,uDe,b$,_De,bDe,vDe,Mf,nee,FDe,TDe,v$,MDe,EDe,CDe,Ef,see,wDe,ADe,F$,yDe,LDe,xDe,Cf,lee,$De,kDe,T$,SDe,RDe,BDe,wf,iee,PDe,IDe,M$,qDe,NDe,jDe,Af,dee,DDe,GDe,E$,ODe,VDe,XDe,yf,cee,zDe,QDe,C$,WDe,HDe,UDe,Lf,fee,JDe,YDe,w$,KDe,ZDe,eGe,xf,mee,oGe,rGe,A$,tGe,aGe,nGe,$f,gee,sGe,lGe,y$,iGe,dGe,cGe,kf,hee,fGe,mGe,L$,gGe,hGe,pGe,Sf,pee,uGe,_Ge,x$,bGe,vGe,FGe,Rf,uee,TGe,MGe,$$,EGe,CGe,wGe,Bf,_ee,AGe,yGe,k$,LGe,xGe,$Ge,Pf,bee,kGe,SGe,S$,RGe,BGe,PGe,If,vee,IGe,qGe,R$,NGe,jGe,DGe,qf,Fee,GGe,OGe,B$,VGe,XGe,zGe,Nf,Tee,QGe,WGe,P$,HGe,UGe,JGe,jf,Mee,YGe,KGe,I$,ZGe,eOe,oOe,Df,Eee,rOe,tOe,q$,aOe,nOe,sOe,Gf,Cee,lOe,iOe,N$,dOe,cOe,fOe,Of,wee,mOe,gOe,j$,hOe,pOe,uOe,Vf,Aee,_Oe,bOe,D$,vOe,FOe,TOe,Xf,yee,MOe,EOe,G$,COe,wOe,AOe,zf,Lee,yOe,LOe,O$,xOe,$Oe,kOe,Qf,xee,SOe,ROe,V$,BOe,POe,IOe,Wf,$ee,qOe,NOe,X$,jOe,DOe,GOe,Hf,kee,OOe,VOe,z$,XOe,zOe,QOe,Uf,See,WOe,HOe,Q$,UOe,JOe,YOe,Jf,Ree,KOe,ZOe,W$,eVe,oVe,rVe,Yf,Bee,tVe,aVe,H$,nVe,sVe,lVe,Kf,Pee,iVe,dVe,U$,cVe,fVe,mVe,Zf,Iee,gVe,hVe,J$,pVe,uVe,_Ve,em,qee,bVe,vVe,Y$,FVe,TVe,MVe,om,Nee,EVe,CVe,K$,wVe,AVe,yVe,rm,jee,LVe,xVe,Z$,$Ve,kVe,SVe,tm,Dee,RVe,BVe,ek,PVe,IVe,qVe,am,Gee,NVe,jVe,ok,DVe,GVe,OVe,nm,Oee,VVe,XVe,rk,zVe,QVe,WVe,sm,Vee,HVe,UVe,tk,JVe,YVe,KVe,lm,Xee,ZVe,eXe,ak,oXe,rXe,tXe,im,zee,aXe,nXe,nk,sXe,lXe,iXe,dm,Qee,dXe,cXe,sk,fXe,mXe,gXe,cm,Wee,hXe,pXe,lk,uXe,_Xe,bXe,fm,Hee,vXe,FXe,ik,TXe,MXe,EXe,mm,Uee,CXe,wXe,dk,AXe,yXe,LXe,gm,Jee,xXe,$Xe,ck,kXe,SXe,RXe,hm,Yee,BXe,PXe,fk,IXe,qXe,NXe,pm,Kee,jXe,DXe,mk,GXe,OXe,VXe,um,Zee,XXe,zXe,gk,QXe,WXe,HXe,_m,eoe,UXe,JXe,hk,YXe,KXe,ZXe,bm,ooe,eze,oze,pk,rze,tze,aze,vm,roe,nze,sze,uk,lze,ize,dze,Fm,toe,cze,fze,_k,mze,gze,hze,Tm,aoe,pze,uze,bk,_ze,bze,vze,Mm,noe,Fze,Tze,vk,Mze,Eze,Cze,Em,soe,wze,Aze,Fk,yze,Lze,xze,Cm,loe,$ze,kze,Tk,Sze,Rze,Bze,wm,ioe,Pze,Ize,Mk,qze,Nze,jze,Am,doe,Dze,Gze,Ek,Oze,Vze,Xze,ym,coe,zze,Qze,Ck,Wze,Hze,Uze,Lm,foe,Jze,Yze,wk,Kze,Zze,eQe,xm,moe,oQe,rQe,Ak,tQe,aQe,nQe,$m,goe,sQe,lQe,yk,iQe,dQe,cQe,km,hoe,fQe,mQe,Lk,gQe,hQe,pQe,Sm,poe,uQe,_Qe,xk,bQe,vQe,FQe,Rm,uoe,TQe,MQe,$k,EQe,CQe,wQe,Bm,_oe,AQe,yQe,kk,LQe,xQe,$Qe,Pm,boe,kQe,SQe,Sk,RQe,BQe,PQe,Im,voe,IQe,qQe,Rk,NQe,jQe,DQe,qm,Foe,GQe,OQe,Bk,VQe,XQe,zQe,Nm,Toe,QQe,WQe,Pk,HQe,UQe,JQe,jm,Moe,YQe,KQe,Ik,ZQe,eWe,oWe,Dm,Eoe,rWe,tWe,qk,aWe,nWe,sWe,Gm,Coe,lWe,iWe,Nk,dWe,cWe,fWe,Om,woe,mWe,gWe,jk,hWe,pWe,uWe,Vm,Aoe,_We,bWe,Dk,vWe,FWe,TWe,Xm,yoe,MWe,EWe,Gk,CWe,wWe,AWe,zm,Loe,yWe,LWe,Ok,xWe,$We,kWe,Qm,xoe,SWe,RWe,Vk,BWe,PWe,IWe,Wm,$oe,qWe,NWe,Xk,jWe,DWe,GWe,Hm,koe,OWe,VWe,zk,XWe,zWe,QWe,Um,Soe,WWe,HWe,Qk,UWe,JWe,YWe,Jm,Roe,KWe,ZWe,Wk,eHe,oHe,rHe,Ym,Boe,tHe,aHe,Hk,nHe,sHe,lHe,Km,Poe,iHe,dHe,Uk,cHe,fHe,mHe,Zm,Ioe,gHe,hHe,Jk,pHe,uHe,_He,eg,qoe,bHe,vHe,Yk,FHe,THe,MHe,og,Noe,EHe,CHe,Kk,wHe,AHe,yHe,rg,joe,LHe,xHe,Zk,$He,kHe,SHe,tg,Doe,RHe,BHe,eS,PHe,IHe,qHe,ag,Goe,NHe,jHe,oS,DHe,GHe,OHe,ng,Ooe,VHe,XHe,rS,zHe,QHe,WHe,sg,Voe,HHe,UHe,tS,JHe,YHe,KHe,lg,Xoe,ZHe,eUe,aS,oUe,rUe,tUe,ig,zoe,aUe,nUe,nS,sUe,lUe,iUe,dg,Qoe,dUe,cUe,sS,fUe,mUe,gUe,cg,Woe,hUe,pUe,lS,uUe,_Ue,bUe,fg,Hoe,vUe,FUe,iS,TUe,MUe,EUe,mg,Uoe,CUe,wUe,dS,AUe,yUe,LUe,gg,Joe,xUe,$Ue,cS,kUe,SUe,RUe,hg,Yoe,BUe,PUe,fS,IUe,qUe,NUe,pg,Koe,jUe,DUe,mS,GUe,OUe,VUe,ug,XUe,_g,Zw,zUe,Zoe,QUe,kPe,bi,bg,ere,eA,WUe,ore,HUe,SPe,wo,oA,UUe,rA,JUe,gS,YUe,KUe,ZUe,tA,eJe,rre,oJe,rJe,tJe,Cr,aA,aJe,tre,nJe,sJe,Ca,lJe,are,iJe,dJe,nre,cJe,fJe,sre,mJe,gJe,hJe,k,kn,lre,pJe,uJe,hS,_Je,bJe,pS,vJe,FJe,TJe,Sn,ire,MJe,EJe,uS,CJe,wJe,_S,AJe,yJe,LJe,Rn,dre,xJe,$Je,bS,kJe,SJe,vS,RJe,BJe,PJe,vg,cre,IJe,qJe,FS,NJe,jJe,DJe,Bn,fre,GJe,OJe,TS,VJe,XJe,MS,zJe,QJe,WJe,Fg,mre,HJe,UJe,ES,JJe,YJe,KJe,Tg,gre,ZJe,eYe,CS,oYe,rYe,tYe,Mg,hre,aYe,nYe,wS,sYe,lYe,iYe,Pn,pre,dYe,cYe,AS,fYe,mYe,yS,gYe,hYe,pYe,In,ure,uYe,_Ye,LS,bYe,vYe,xS,FYe,TYe,MYe,qn,_re,EYe,CYe,$S,wYe,AYe,kS,yYe,LYe,xYe,Eg,bre,$Ye,kYe,SS,SYe,RYe,BYe,Cg,vre,PYe,IYe,RS,qYe,NYe,jYe,Nn,Fre,DYe,GYe,BS,OYe,VYe,PS,XYe,zYe,QYe,wg,Tre,WYe,HYe,IS,UYe,JYe,YYe,jn,Mre,KYe,ZYe,qS,eKe,oKe,NS,rKe,tKe,aKe,Dn,Ere,nKe,sKe,jS,lKe,iKe,DS,dKe,cKe,fKe,Gn,Cre,mKe,gKe,GS,hKe,pKe,OS,uKe,_Ke,bKe,Ag,wre,vKe,FKe,VS,TKe,MKe,EKe,On,Are,CKe,wKe,XS,AKe,yKe,zS,LKe,xKe,$Ke,Vn,yre,kKe,SKe,QS,RKe,BKe,WS,PKe,IKe,qKe,Xn,Lre,NKe,jKe,HS,DKe,GKe,US,OKe,VKe,XKe,zn,xre,zKe,QKe,JS,WKe,HKe,YS,UKe,JKe,YKe,Qn,$re,KKe,ZKe,KS,eZe,oZe,ZS,rZe,tZe,aZe,Wn,kre,nZe,sZe,eR,lZe,iZe,oR,dZe,cZe,fZe,yg,Sre,mZe,gZe,rR,hZe,pZe,uZe,Hn,Rre,_Ze,bZe,tR,vZe,FZe,aR,TZe,MZe,EZe,Lg,Bre,CZe,wZe,nR,AZe,yZe,LZe,Un,Pre,xZe,$Ze,sR,kZe,SZe,lR,RZe,BZe,PZe,Jn,Ire,IZe,qZe,iR,NZe,jZe,dR,DZe,GZe,OZe,Yn,qre,VZe,XZe,cR,zZe,QZe,fR,WZe,HZe,UZe,Kn,Nre,JZe,YZe,mR,KZe,ZZe,gR,eeo,oeo,reo,Zn,jre,teo,aeo,hR,neo,seo,pR,leo,ieo,deo,xg,Dre,ceo,feo,uR,meo,geo,heo,es,Gre,peo,ueo,_R,_eo,beo,bR,veo,Feo,Teo,os,Ore,Meo,Eeo,vR,Ceo,weo,FR,Aeo,yeo,Leo,rs,Vre,xeo,$eo,TR,keo,Seo,MR,Reo,Beo,Peo,ts,Xre,Ieo,qeo,ER,Neo,jeo,CR,Deo,Geo,Oeo,as,zre,Veo,Xeo,wR,zeo,Qeo,AR,Weo,Heo,Ueo,ns,Qre,Jeo,Yeo,yR,Keo,Zeo,LR,eoo,ooo,roo,$g,Wre,too,aoo,xR,noo,soo,loo,ss,Hre,ioo,doo,$R,coo,foo,kR,moo,goo,hoo,kg,Ure,poo,uoo,SR,_oo,boo,voo,Sg,Jre,Foo,Too,RR,Moo,Eoo,Coo,ls,Yre,woo,Aoo,BR,yoo,Loo,PR,xoo,$oo,koo,is,Kre,Soo,Roo,IR,Boo,Poo,qR,Ioo,qoo,Noo,ds,Zre,joo,Doo,NR,Goo,Ooo,jR,Voo,Xoo,zoo,Rg,ete,Qoo,Woo,DR,Hoo,Uoo,Joo,cs,ote,Yoo,Koo,GR,Zoo,ero,OR,oro,rro,tro,fs,rte,aro,nro,VR,sro,lro,XR,iro,dro,cro,ms,tte,fro,mro,zR,gro,hro,QR,pro,uro,_ro,gs,ate,bro,vro,WR,Fro,Tro,HR,Mro,Ero,Cro,hs,nte,wro,Aro,UR,yro,Lro,JR,xro,$ro,kro,ps,ste,Sro,Rro,YR,Bro,Pro,KR,Iro,qro,Nro,us,lte,jro,Dro,ZR,Gro,Oro,eB,Vro,Xro,zro,Bg,ite,Qro,Wro,oB,Hro,Uro,Jro,Pg,dte,Yro,Kro,rB,Zro,eto,oto,Ig,cte,rto,tto,tB,ato,nto,sto,qg,fte,lto,ito,aB,dto,cto,fto,_s,mte,mto,gto,nB,hto,pto,sB,uto,_to,bto,Ng,gte,vto,Fto,lB,Tto,Mto,Eto,bs,hte,Cto,wto,iB,Ato,yto,dB,Lto,xto,$to,vs,pte,kto,Sto,cB,Rto,Bto,fB,Pto,Ito,qto,Fs,ute,Nto,jto,mB,Dto,Gto,gB,Oto,Vto,Xto,Ts,_te,zto,Qto,hB,Wto,Hto,pB,Uto,Jto,Yto,Ms,bte,Kto,Zto,uB,eao,oao,_B,rao,tao,aao,Es,vte,nao,sao,bB,lao,iao,vB,dao,cao,fao,jg,Fte,mao,gao,FB,hao,pao,uao,Dg,Tte,_ao,bao,TB,vao,Fao,Tao,Cs,Mte,Mao,Eao,MB,Cao,wao,EB,Aao,yao,Lao,ws,Ete,xao,$ao,CB,kao,Sao,wB,Rao,Bao,Pao,As,Cte,Iao,qao,AB,Nao,jao,yB,Dao,Gao,Oao,Gg,wte,Vao,Xao,LB,zao,Qao,Wao,Og,Ate,Hao,Uao,xB,Jao,Yao,Kao,Vg,yte,Zao,eno,$B,ono,rno,tno,ys,Lte,ano,nno,kB,sno,lno,SB,ino,dno,cno,Xg,xte,fno,mno,RB,gno,hno,pno,zg,$te,uno,_no,BB,bno,vno,Fno,Ls,kte,Tno,Mno,PB,Eno,Cno,IB,wno,Ano,yno,Qg,Ste,Lno,xno,qB,$no,kno,Sno,Wg,Rte,Rno,Bno,NB,Pno,Ino,qno,xs,Bte,Nno,jno,jB,Dno,Gno,DB,Ono,Vno,Xno,$s,Pte,zno,Qno,GB,Wno,Hno,OB,Uno,Jno,Yno,ks,Ite,Kno,Zno,VB,eso,oso,XB,rso,tso,aso,Ss,qte,nso,sso,zB,lso,iso,QB,dso,cso,fso,Hg,mso,Ug,nA,gso,Nte,hso,RPe,vi,Jg,jte,sA,pso,Dte,uso,BPe,Ao,lA,_so,iA,bso,WB,vso,Fso,Tso,dA,Mso,Gte,Eso,Cso,wso,Qe,cA,Aso,Ote,yso,Lso,wa,xso,Vte,$so,kso,Xte,Sso,Rso,zte,Bso,Pso,Iso,te,Yg,Qte,qso,Nso,HB,jso,Dso,Gso,Kg,Wte,Oso,Vso,UB,Xso,zso,Qso,Zg,Hte,Wso,Hso,JB,Uso,Jso,Yso,eh,Ute,Kso,Zso,YB,elo,olo,rlo,oh,Jte,tlo,alo,KB,nlo,slo,llo,rh,Yte,ilo,dlo,ZB,clo,flo,mlo,th,Kte,glo,hlo,eP,plo,ulo,_lo,ah,Zte,blo,vlo,oP,Flo,Tlo,Mlo,nh,eae,Elo,Clo,rP,wlo,Alo,ylo,sh,oae,Llo,xlo,tP,$lo,klo,Slo,lh,rae,Rlo,Blo,aP,Plo,Ilo,qlo,ih,tae,Nlo,jlo,nP,Dlo,Glo,Olo,dh,aae,Vlo,Xlo,sP,zlo,Qlo,Wlo,ch,nae,Hlo,Ulo,lP,Jlo,Ylo,Klo,fh,sae,Zlo,eio,iP,oio,rio,tio,mh,lae,aio,nio,dP,sio,lio,iio,gh,iae,dio,cio,cP,fio,mio,gio,hh,dae,hio,pio,fP,uio,_io,bio,ph,cae,vio,Fio,mP,Tio,Mio,Eio,uh,fae,Cio,wio,gP,Aio,yio,Lio,_h,mae,xio,$io,hP,kio,Sio,Rio,bh,gae,Bio,Pio,pP,Iio,qio,Nio,vh,hae,jio,Dio,uP,Gio,Oio,Vio,Fh,pae,Xio,zio,_P,Qio,Wio,Hio,Th,Uio,Mh,Jio,Eh,fA,Yio,uae,Kio,PPe,Fi,Ch,_ae,mA,Zio,bae,edo,IPe,yo,gA,odo,hA,rdo,bP,tdo,ado,ndo,pA,sdo,vae,ldo,ido,ddo,We,uA,cdo,Fae,fdo,mdo,Ti,gdo,Tae,hdo,pdo,Mae,udo,_do,bdo,be,wh,Eae,vdo,Fdo,vP,Tdo,Mdo,Edo,Ah,Cae,Cdo,wdo,FP,Ado,ydo,Ldo,yh,wae,xdo,$do,TP,kdo,Sdo,Rdo,Lh,Aae,Bdo,Pdo,MP,Ido,qdo,Ndo,xh,yae,jdo,Ddo,EP,Gdo,Odo,Vdo,$h,Lae,Xdo,zdo,CP,Qdo,Wdo,Hdo,kh,xae,Udo,Jdo,wP,Ydo,Kdo,Zdo,Sh,$ae,eco,oco,AP,rco,tco,aco,Rh,kae,nco,sco,yP,lco,ico,dco,Bh,Sae,cco,fco,LP,mco,gco,hco,Ph,Rae,pco,uco,xP,_co,bco,vco,Ih,Bae,Fco,Tco,$P,Mco,Eco,Cco,qh,Pae,wco,Aco,kP,yco,Lco,xco,Nh,Iae,$co,kco,SP,Sco,Rco,Bco,jh,Pco,Dh,Ico,Gh,_A,qco,qae,Nco,qPe,Mi,Oh,Nae,bA,jco,jae,Dco,NPe,Lo,vA,Gco,Ei,Oco,RP,Vco,Xco,BP,zco,Qco,Wco,FA,Hco,Dae,Uco,Jco,Yco,ot,TA,Kco,Gae,Zco,efo,Ci,ofo,Oae,rfo,tfo,PP,afo,nfo,sfo,Vh,lfo,He,MA,ifo,Vae,dfo,cfo,Aa,ffo,Xae,mfo,gfo,zae,hfo,pfo,Qae,ufo,_fo,bfo,x,Xh,Wae,vfo,Ffo,IP,Tfo,Mfo,Efo,zh,Hae,Cfo,wfo,qP,Afo,yfo,Lfo,Qh,Uae,xfo,$fo,NP,kfo,Sfo,Rfo,Wh,Jae,Bfo,Pfo,jP,Ifo,qfo,Nfo,Hh,Yae,jfo,Dfo,DP,Gfo,Ofo,Vfo,Uh,Kae,Xfo,zfo,GP,Qfo,Wfo,Hfo,Jh,Zae,Ufo,Jfo,OP,Yfo,Kfo,Zfo,Yh,ene,emo,omo,VP,rmo,tmo,amo,Kh,one,nmo,smo,XP,lmo,imo,dmo,Zh,rne,cmo,fmo,zP,mmo,gmo,hmo,ep,tne,pmo,umo,QP,_mo,bmo,vmo,op,ane,Fmo,Tmo,WP,Mmo,Emo,Cmo,rp,nne,wmo,Amo,HP,ymo,Lmo,xmo,tp,sne,$mo,kmo,UP,Smo,Rmo,Bmo,ap,lne,Pmo,Imo,JP,qmo,Nmo,jmo,np,ine,Dmo,Gmo,YP,Omo,Vmo,Xmo,sp,dne,zmo,Qmo,KP,Wmo,Hmo,Umo,lp,cne,Jmo,Ymo,ZP,Kmo,Zmo,ego,ip,fne,ogo,rgo,eI,tgo,ago,ngo,dp,mne,sgo,lgo,oI,igo,dgo,cgo,cp,gne,fgo,mgo,rI,ggo,hgo,pgo,fp,hne,ugo,_go,tI,bgo,vgo,Fgo,mp,pne,Tgo,Mgo,aI,Ego,Cgo,wgo,gp,une,Ago,ygo,nI,Lgo,xgo,$go,hp,_ne,kgo,Sgo,sI,Rgo,Bgo,Pgo,pp,bne,Igo,qgo,lI,Ngo,jgo,Dgo,up,vne,Ggo,Ogo,iI,Vgo,Xgo,zgo,_p,Fne,Qgo,Wgo,dI,Hgo,Ugo,Jgo,bp,Tne,Ygo,Kgo,cI,Zgo,eho,oho,vp,Mne,rho,tho,fI,aho,nho,sho,Rs,Ene,lho,iho,mI,dho,cho,gI,fho,mho,gho,Fp,Cne,hho,pho,hI,uho,_ho,bho,Tp,wne,vho,Fho,pI,Tho,Mho,Eho,Mp,Ane,Cho,who,uI,Aho,yho,Lho,Ep,yne,xho,$ho,_I,kho,Sho,Rho,Cp,Lne,Bho,Pho,bI,Iho,qho,Nho,wp,xne,jho,Dho,vI,Gho,Oho,Vho,Ap,$ne,Xho,zho,FI,Qho,Who,Hho,yp,kne,Uho,Jho,TI,Yho,Kho,Zho,Lp,Sne,epo,opo,MI,rpo,tpo,apo,xp,Rne,npo,spo,EI,lpo,ipo,dpo,$p,Bne,cpo,fpo,CI,mpo,gpo,hpo,kp,Pne,ppo,upo,wI,_po,bpo,vpo,Sp,Ine,Fpo,Tpo,AI,Mpo,Epo,Cpo,Rp,qne,wpo,Apo,yI,ypo,Lpo,xpo,Bp,Nne,$po,kpo,LI,Spo,Rpo,Bpo,Pp,jne,Ppo,Ipo,xI,qpo,Npo,jpo,Ip,Dne,Dpo,Gpo,$I,Opo,Vpo,Xpo,qp,Gne,zpo,Qpo,kI,Wpo,Hpo,Upo,Np,One,Jpo,Ypo,SI,Kpo,Zpo,euo,jp,Vne,ouo,ruo,RI,tuo,auo,nuo,Dp,Xne,suo,luo,BI,iuo,duo,cuo,Gp,zne,fuo,muo,PI,guo,huo,puo,Op,Qne,uuo,_uo,II,buo,vuo,Fuo,Vp,Wne,Tuo,Muo,qI,Euo,Cuo,wuo,Xp,Hne,Auo,yuo,NI,Luo,xuo,$uo,zp,Une,kuo,Suo,jI,Ruo,Buo,Puo,Qp,Jne,Iuo,quo,DI,Nuo,juo,Duo,Wp,Yne,Guo,Ouo,GI,Vuo,Xuo,zuo,Hp,Kne,Quo,Wuo,OI,Huo,Uuo,Juo,Up,Zne,Yuo,Kuo,VI,Zuo,e_o,o_o,Jp,ese,r_o,t_o,XI,a_o,n_o,s_o,Yp,ose,l_o,i_o,zI,d_o,c_o,f_o,Kp,rse,m_o,g_o,QI,h_o,p_o,u_o,Zp,tse,__o,b_o,WI,v_o,F_o,T_o,eu,ase,M_o,E_o,HI,C_o,w_o,A_o,ou,nse,y_o,L_o,UI,x_o,$_o,k_o,ru,sse,S_o,R_o,JI,B_o,P_o,I_o,tu,lse,q_o,N_o,YI,j_o,D_o,G_o,au,ise,O_o,V_o,KI,X_o,z_o,Q_o,nu,dse,W_o,H_o,ZI,U_o,J_o,Y_o,su,cse,K_o,Z_o,eq,e1o,o1o,r1o,lu,fse,t1o,a1o,oq,n1o,s1o,l1o,iu,mse,i1o,d1o,rq,c1o,f1o,m1o,du,gse,g1o,h1o,tq,p1o,u1o,_1o,cu,hse,b1o,v1o,aq,F1o,T1o,M1o,fu,pse,E1o,C1o,nq,w1o,A1o,y1o,mu,use,L1o,x1o,sq,$1o,k1o,S1o,gu,_se,R1o,B1o,lq,P1o,I1o,q1o,hu,bse,N1o,j1o,iq,D1o,G1o,O1o,pu,vse,V1o,X1o,dq,z1o,Q1o,W1o,uu,Fse,H1o,U1o,cq,J1o,Y1o,K1o,_u,Tse,Z1o,e8o,fq,o8o,r8o,t8o,bu,Mse,a8o,n8o,mq,s8o,l8o,i8o,vu,Ese,d8o,c8o,gq,f8o,m8o,g8o,Fu,Cse,h8o,p8o,hq,u8o,_8o,b8o,Tu,wse,v8o,F8o,pq,T8o,M8o,E8o,Mu,Ase,C8o,w8o,uq,A8o,y8o,L8o,Eu,yse,x8o,$8o,_q,k8o,S8o,R8o,Cu,Lse,B8o,P8o,bq,I8o,q8o,N8o,wu,xse,j8o,D8o,vq,G8o,O8o,V8o,Au,$se,X8o,z8o,Fq,Q8o,W8o,H8o,yu,kse,U8o,J8o,Tq,Y8o,K8o,Z8o,Lu,Sse,ebo,obo,Mq,rbo,tbo,abo,xu,Rse,nbo,sbo,Eq,lbo,ibo,dbo,$u,Bse,cbo,fbo,Cq,mbo,gbo,hbo,ku,pbo,Pse,ubo,_bo,Ise,bbo,vbo,Su,jPe,wi,Ru,qse,EA,Fbo,Nse,Tbo,DPe,xo,CA,Mbo,Ai,Ebo,wq,Cbo,wbo,Aq,Abo,ybo,Lbo,wA,xbo,jse,$bo,kbo,Sbo,rt,AA,Rbo,Dse,Bbo,Pbo,yi,Ibo,Gse,qbo,Nbo,yq,jbo,Dbo,Gbo,Bu,Obo,Ue,yA,Vbo,Ose,Xbo,zbo,ya,Qbo,Vse,Wbo,Hbo,Xse,Ubo,Jbo,zse,Ybo,Kbo,Zbo,G,Pu,Qse,e2o,o2o,Lq,r2o,t2o,a2o,Iu,Wse,n2o,s2o,xq,l2o,i2o,d2o,qu,Hse,c2o,f2o,$q,m2o,g2o,h2o,Nu,Use,p2o,u2o,kq,_2o,b2o,v2o,ju,Jse,F2o,T2o,Sq,M2o,E2o,C2o,Du,Yse,w2o,A2o,Rq,y2o,L2o,x2o,Gu,Kse,$2o,k2o,Bq,S2o,R2o,B2o,Ou,Zse,P2o,I2o,Pq,q2o,N2o,j2o,Vu,ele,D2o,G2o,Iq,O2o,V2o,X2o,Xu,ole,z2o,Q2o,qq,W2o,H2o,U2o,zu,rle,J2o,Y2o,Nq,K2o,Z2o,evo,Qu,tle,ovo,rvo,jq,tvo,avo,nvo,Wu,ale,svo,lvo,Dq,ivo,dvo,cvo,Hu,nle,fvo,mvo,Gq,gvo,hvo,pvo,Uu,sle,uvo,_vo,Oq,bvo,vvo,Fvo,Ju,lle,Tvo,Mvo,Vq,Evo,Cvo,wvo,Yu,ile,Avo,yvo,Xq,Lvo,xvo,$vo,Ku,dle,kvo,Svo,zq,Rvo,Bvo,Pvo,Zu,cle,Ivo,qvo,Qq,Nvo,jvo,Dvo,e_,fle,Gvo,Ovo,Wq,Vvo,Xvo,zvo,o_,mle,Qvo,Wvo,Hq,Hvo,Uvo,Jvo,r_,gle,Yvo,Kvo,Uq,Zvo,eFo,oFo,t_,hle,rFo,tFo,Jq,aFo,nFo,sFo,a_,ple,lFo,iFo,Yq,dFo,cFo,fFo,n_,ule,mFo,gFo,Kq,hFo,pFo,uFo,s_,_le,_Fo,bFo,Zq,vFo,FFo,TFo,l_,ble,MFo,EFo,eN,CFo,wFo,AFo,i_,vle,yFo,LFo,oN,xFo,$Fo,kFo,d_,Fle,SFo,RFo,rN,BFo,PFo,IFo,c_,Tle,qFo,NFo,tN,jFo,DFo,GFo,f_,Mle,OFo,VFo,aN,XFo,zFo,QFo,m_,Ele,WFo,HFo,nN,UFo,JFo,YFo,g_,Cle,KFo,ZFo,sN,e0o,o0o,r0o,h_,wle,t0o,a0o,lN,n0o,s0o,l0o,p_,Ale,i0o,d0o,iN,c0o,f0o,m0o,u_,yle,g0o,h0o,dN,p0o,u0o,_0o,__,Lle,b0o,v0o,cN,F0o,T0o,M0o,b_,xle,E0o,C0o,fN,w0o,A0o,y0o,v_,$le,L0o,x0o,mN,$0o,k0o,S0o,F_,R0o,kle,B0o,P0o,Sle,I0o,q0o,T_,GPe,Li,M_,Rle,LA,N0o,Ble,j0o,OPe,$o,xA,D0o,xi,G0o,gN,O0o,V0o,hN,X0o,z0o,Q0o,$A,W0o,Ple,H0o,U0o,J0o,tt,kA,Y0o,Ile,K0o,Z0o,$i,eTo,qle,oTo,rTo,pN,tTo,aTo,nTo,E_,sTo,Je,SA,lTo,Nle,iTo,dTo,La,cTo,jle,fTo,mTo,Dle,gTo,hTo,Gle,pTo,uTo,_To,z,C_,Ole,bTo,vTo,uN,FTo,TTo,MTo,w_,Vle,ETo,CTo,_N,wTo,ATo,yTo,A_,Xle,LTo,xTo,bN,$To,kTo,STo,y_,zle,RTo,BTo,vN,PTo,ITo,qTo,L_,Qle,NTo,jTo,FN,DTo,GTo,OTo,x_,Wle,VTo,XTo,TN,zTo,QTo,WTo,$_,Hle,HTo,UTo,MN,JTo,YTo,KTo,k_,Ule,ZTo,e7o,EN,o7o,r7o,t7o,S_,Jle,a7o,n7o,CN,s7o,l7o,i7o,R_,Yle,d7o,c7o,wN,f7o,m7o,g7o,B_,Kle,h7o,p7o,AN,u7o,_7o,b7o,P_,Zle,v7o,F7o,yN,T7o,M7o,E7o,I_,eie,C7o,w7o,LN,A7o,y7o,L7o,q_,oie,x7o,$7o,xN,k7o,S7o,R7o,N_,rie,B7o,P7o,$N,I7o,q7o,N7o,j_,tie,j7o,D7o,kN,G7o,O7o,V7o,D_,aie,X7o,z7o,SN,Q7o,W7o,H7o,G_,nie,U7o,J7o,RN,Y7o,K7o,Z7o,O_,sie,eMo,oMo,BN,rMo,tMo,aMo,V_,lie,nMo,sMo,PN,lMo,iMo,dMo,X_,iie,cMo,fMo,IN,mMo,gMo,hMo,z_,die,pMo,uMo,qN,_Mo,bMo,vMo,Q_,cie,FMo,TMo,NN,MMo,EMo,CMo,W_,fie,wMo,AMo,jN,yMo,LMo,xMo,H_,mie,$Mo,kMo,DN,SMo,RMo,BMo,U_,gie,PMo,IMo,GN,qMo,NMo,jMo,J_,hie,DMo,GMo,ON,OMo,VMo,XMo,Y_,pie,zMo,QMo,VN,WMo,HMo,UMo,K_,uie,JMo,YMo,XN,KMo,ZMo,e4o,Z_,_ie,o4o,r4o,zN,t4o,a4o,n4o,e1,bie,s4o,l4o,QN,i4o,d4o,c4o,o1,vie,f4o,m4o,WN,g4o,h4o,p4o,r1,Fie,u4o,_4o,HN,b4o,v4o,F4o,t1,Tie,T4o,M4o,UN,E4o,C4o,w4o,a1,Mie,A4o,y4o,JN,L4o,x4o,$4o,n1,Eie,k4o,S4o,YN,R4o,B4o,P4o,s1,I4o,Cie,q4o,N4o,wie,j4o,D4o,l1,VPe,ki,i1,Aie,RA,G4o,yie,O4o,XPe,ko,BA,V4o,Si,X4o,KN,z4o,Q4o,ZN,W4o,H4o,U4o,PA,J4o,Lie,Y4o,K4o,Z4o,at,IA,eEo,xie,oEo,rEo,Ri,tEo,$ie,aEo,nEo,ej,sEo,lEo,iEo,d1,dEo,Ye,qA,cEo,kie,fEo,mEo,xa,gEo,Sie,hEo,pEo,Rie,uEo,_Eo,Bie,bEo,vEo,FEo,Q,c1,Pie,TEo,MEo,oj,EEo,CEo,wEo,f1,Iie,AEo,yEo,rj,LEo,xEo,$Eo,m1,qie,kEo,SEo,tj,REo,BEo,PEo,g1,Nie,IEo,qEo,aj,NEo,jEo,DEo,h1,jie,GEo,OEo,nj,VEo,XEo,zEo,p1,Die,QEo,WEo,sj,HEo,UEo,JEo,u1,Gie,YEo,KEo,lj,ZEo,e5o,o5o,_1,Oie,r5o,t5o,ij,a5o,n5o,s5o,b1,Vie,l5o,i5o,dj,d5o,c5o,f5o,v1,Xie,m5o,g5o,cj,h5o,p5o,u5o,F1,zie,_5o,b5o,fj,v5o,F5o,T5o,T1,Qie,M5o,E5o,mj,C5o,w5o,A5o,M1,Wie,y5o,L5o,gj,x5o,$5o,k5o,E1,Hie,S5o,R5o,hj,B5o,P5o,I5o,C1,Uie,q5o,N5o,pj,j5o,D5o,G5o,w1,Jie,O5o,V5o,uj,X5o,z5o,Q5o,A1,Yie,W5o,H5o,_j,U5o,J5o,Y5o,y1,Kie,K5o,Z5o,bj,eCo,oCo,rCo,L1,Zie,tCo,aCo,vj,nCo,sCo,lCo,x1,ede,iCo,dCo,Fj,cCo,fCo,mCo,$1,ode,gCo,hCo,Tj,pCo,uCo,_Co,k1,rde,bCo,vCo,Mj,FCo,TCo,MCo,S1,tde,ECo,CCo,Ej,wCo,ACo,yCo,R1,ade,LCo,xCo,Cj,$Co,kCo,SCo,B1,nde,RCo,BCo,wj,PCo,ICo,qCo,P1,sde,NCo,jCo,Aj,DCo,GCo,OCo,I1,lde,VCo,XCo,yj,zCo,QCo,WCo,q1,ide,HCo,UCo,Lj,JCo,YCo,KCo,N1,dde,ZCo,e3o,xj,o3o,r3o,t3o,j1,cde,a3o,n3o,$j,s3o,l3o,i3o,D1,fde,d3o,c3o,mde,f3o,m3o,g3o,G1,gde,h3o,p3o,kj,u3o,_3o,b3o,O1,hde,v3o,F3o,Sj,T3o,M3o,E3o,V1,pde,C3o,w3o,Rj,A3o,y3o,L3o,X1,ude,x3o,$3o,Bj,k3o,S3o,R3o,z1,B3o,_de,P3o,I3o,bde,q3o,N3o,Q1,zPe,Bi,W1,vde,NA,j3o,Fde,D3o,QPe,So,jA,G3o,Pi,O3o,Pj,V3o,X3o,Ij,z3o,Q3o,W3o,DA,H3o,Tde,U3o,J3o,Y3o,nt,GA,K3o,Mde,Z3o,ewo,Ii,owo,Ede,rwo,two,qj,awo,nwo,swo,H1,lwo,Ke,OA,iwo,Cde,dwo,cwo,$a,fwo,wde,mwo,gwo,Ade,hwo,pwo,yde,uwo,_wo,bwo,he,U1,Lde,vwo,Fwo,Nj,Two,Mwo,Ewo,J1,xde,Cwo,wwo,jj,Awo,ywo,Lwo,Y1,$de,xwo,$wo,Dj,kwo,Swo,Rwo,K1,kde,Bwo,Pwo,Gj,Iwo,qwo,Nwo,Z1,Sde,jwo,Dwo,Oj,Gwo,Owo,Vwo,e8,Rde,Xwo,zwo,Vj,Qwo,Wwo,Hwo,o8,Bde,Uwo,Jwo,Xj,Ywo,Kwo,Zwo,r8,Pde,eAo,oAo,zj,rAo,tAo,aAo,t8,Ide,nAo,sAo,Qj,lAo,iAo,dAo,a8,qde,cAo,fAo,Wj,mAo,gAo,hAo,n8,Nde,pAo,uAo,Hj,_Ao,bAo,vAo,s8,jde,FAo,TAo,Uj,MAo,EAo,CAo,l8,Dde,wAo,AAo,Jj,yAo,LAo,xAo,i8,Gde,$Ao,kAo,Yj,SAo,RAo,BAo,d8,Ode,PAo,IAo,Kj,qAo,NAo,jAo,c8,Vde,DAo,GAo,Zj,OAo,VAo,XAo,f8,Xde,zAo,QAo,eD,WAo,HAo,UAo,m8,JAo,zde,YAo,KAo,Qde,ZAo,e6o,g8,WPe,qi,h8,Wde,VA,o6o,Hde,r6o,HPe,Ro,XA,t6o,Ni,a6o,oD,n6o,s6o,rD,l6o,i6o,d6o,zA,c6o,Ude,f6o,m6o,g6o,st,QA,h6o,Jde,p6o,u6o,ji,_6o,Yde,b6o,v6o,tD,F6o,T6o,M6o,p8,E6o,Ze,WA,C6o,Kde,w6o,A6o,ka,y6o,Zde,L6o,x6o,ece,$6o,k6o,oce,S6o,R6o,B6o,q,u8,rce,P6o,I6o,aD,q6o,N6o,j6o,_8,tce,D6o,G6o,nD,O6o,V6o,X6o,b8,ace,z6o,Q6o,sD,W6o,H6o,U6o,v8,nce,J6o,Y6o,lD,K6o,Z6o,eyo,F8,sce,oyo,ryo,iD,tyo,ayo,nyo,T8,lce,syo,lyo,dD,iyo,dyo,cyo,M8,ice,fyo,myo,cD,gyo,hyo,pyo,E8,dce,uyo,_yo,fD,byo,vyo,Fyo,C8,cce,Tyo,Myo,mD,Eyo,Cyo,wyo,w8,fce,Ayo,yyo,gD,Lyo,xyo,$yo,A8,mce,kyo,Syo,hD,Ryo,Byo,Pyo,y8,gce,Iyo,qyo,pD,Nyo,jyo,Dyo,L8,hce,Gyo,Oyo,uD,Vyo,Xyo,zyo,x8,pce,Qyo,Wyo,_D,Hyo,Uyo,Jyo,$8,uce,Yyo,Kyo,bD,Zyo,eLo,oLo,k8,_ce,rLo,tLo,vD,aLo,nLo,sLo,S8,bce,lLo,iLo,FD,dLo,cLo,fLo,R8,vce,mLo,gLo,TD,hLo,pLo,uLo,B8,Fce,_Lo,bLo,MD,vLo,FLo,TLo,P8,Tce,MLo,ELo,ED,CLo,wLo,ALo,I8,Mce,yLo,LLo,CD,xLo,$Lo,kLo,q8,Ece,SLo,RLo,wD,BLo,PLo,ILo,N8,Cce,qLo,NLo,AD,jLo,DLo,GLo,j8,wce,OLo,VLo,yD,XLo,zLo,QLo,D8,Ace,WLo,HLo,LD,ULo,JLo,YLo,G8,yce,KLo,ZLo,xD,exo,oxo,rxo,O8,Lce,txo,axo,$D,nxo,sxo,lxo,V8,xce,ixo,dxo,kD,cxo,fxo,mxo,X8,$ce,gxo,hxo,SD,pxo,uxo,_xo,z8,kce,bxo,vxo,RD,Fxo,Txo,Mxo,Q8,Sce,Exo,Cxo,BD,wxo,Axo,yxo,W8,Rce,Lxo,xxo,PD,$xo,kxo,Sxo,H8,Bce,Rxo,Bxo,ID,Pxo,Ixo,qxo,U8,Pce,Nxo,jxo,qD,Dxo,Gxo,Oxo,J8,Ice,Vxo,Xxo,ND,zxo,Qxo,Wxo,Y8,qce,Hxo,Uxo,jD,Jxo,Yxo,Kxo,K8,Nce,Zxo,e9o,DD,o9o,r9o,t9o,Z8,jce,a9o,n9o,GD,s9o,l9o,i9o,eb,Dce,d9o,c9o,OD,f9o,m9o,g9o,ob,Gce,h9o,p9o,VD,u9o,_9o,b9o,rb,Oce,v9o,F9o,XD,T9o,M9o,E9o,tb,Vce,C9o,w9o,zD,A9o,y9o,L9o,ab,Xce,x9o,$9o,QD,k9o,S9o,R9o,nb,zce,B9o,P9o,WD,I9o,q9o,N9o,sb,Qce,j9o,D9o,HD,G9o,O9o,V9o,lb,Wce,X9o,z9o,UD,Q9o,W9o,H9o,ib,Hce,U9o,J9o,JD,Y9o,K9o,Z9o,db,e$o,Uce,o$o,r$o,Jce,t$o,a$o,cb,UPe,Di,fb,Yce,HA,n$o,Kce,s$o,JPe,Bo,UA,l$o,Gi,i$o,YD,d$o,c$o,KD,f$o,m$o,g$o,JA,h$o,Zce,p$o,u$o,_$o,lt,YA,b$o,efe,v$o,F$o,Oi,T$o,ofe,M$o,E$o,ZD,C$o,w$o,A$o,mb,y$o,eo,KA,L$o,rfe,x$o,$$o,Sa,k$o,tfe,S$o,R$o,afe,B$o,P$o,nfe,I$o,q$o,N$o,Y,gb,sfe,j$o,D$o,eG,G$o,O$o,V$o,hb,lfe,X$o,z$o,oG,Q$o,W$o,H$o,pb,ife,U$o,J$o,rG,Y$o,K$o,Z$o,ub,dfe,eko,oko,tG,rko,tko,ako,_b,cfe,nko,sko,aG,lko,iko,dko,bb,ffe,cko,fko,nG,mko,gko,hko,vb,mfe,pko,uko,sG,_ko,bko,vko,Fb,gfe,Fko,Tko,lG,Mko,Eko,Cko,Tb,hfe,wko,Ako,iG,yko,Lko,xko,Mb,pfe,$ko,kko,dG,Sko,Rko,Bko,Eb,ufe,Pko,Iko,cG,qko,Nko,jko,Cb,_fe,Dko,Gko,fG,Oko,Vko,Xko,wb,bfe,zko,Qko,mG,Wko,Hko,Uko,Ab,vfe,Jko,Yko,gG,Kko,Zko,eSo,yb,Ffe,oSo,rSo,hG,tSo,aSo,nSo,Lb,Tfe,sSo,lSo,pG,iSo,dSo,cSo,xb,Mfe,fSo,mSo,uG,gSo,hSo,pSo,$b,Efe,uSo,_So,_G,bSo,vSo,FSo,kb,Cfe,TSo,MSo,bG,ESo,CSo,wSo,Sb,wfe,ASo,ySo,vG,LSo,xSo,$So,Rb,Afe,kSo,SSo,FG,RSo,BSo,PSo,Bb,yfe,ISo,qSo,TG,NSo,jSo,DSo,Pb,Lfe,GSo,OSo,MG,VSo,XSo,zSo,Ib,xfe,QSo,WSo,EG,HSo,USo,JSo,qb,$fe,YSo,KSo,CG,ZSo,eRo,oRo,Nb,kfe,rRo,tRo,wG,aRo,nRo,sRo,jb,Sfe,lRo,iRo,AG,dRo,cRo,fRo,Db,Rfe,mRo,gRo,yG,hRo,pRo,uRo,Gb,Bfe,_Ro,bRo,LG,vRo,FRo,TRo,Ob,MRo,Pfe,ERo,CRo,Ife,wRo,ARo,Vb,YPe,Vi,Xb,qfe,ZA,yRo,Nfe,LRo,KPe,Po,e6,xRo,Xi,$Ro,xG,kRo,SRo,$G,RRo,BRo,PRo,o6,IRo,jfe,qRo,NRo,jRo,it,r6,DRo,Dfe,GRo,ORo,zi,VRo,Gfe,XRo,zRo,kG,QRo,WRo,HRo,zb,URo,oo,t6,JRo,Ofe,YRo,KRo,Ra,ZRo,Vfe,eBo,oBo,Xfe,rBo,tBo,zfe,aBo,nBo,sBo,Yr,Qb,Qfe,lBo,iBo,SG,dBo,cBo,fBo,Wb,Wfe,mBo,gBo,RG,hBo,pBo,uBo,Hb,Hfe,_Bo,bBo,BG,vBo,FBo,TBo,Ub,Ufe,MBo,EBo,PG,CBo,wBo,ABo,Jb,Jfe,yBo,LBo,IG,xBo,$Bo,kBo,Yb,SBo,Yfe,RBo,BBo,Kfe,PBo,IBo,Kb,ZPe,Qi,Zb,Zfe,a6,qBo,eme,NBo,eIe,Io,n6,jBo,Wi,DBo,qG,GBo,OBo,NG,VBo,XBo,zBo,s6,QBo,ome,WBo,HBo,UBo,dt,l6,JBo,rme,YBo,KBo,Hi,ZBo,tme,ePo,oPo,jG,rPo,tPo,aPo,e2,nPo,ro,i6,sPo,ame,lPo,iPo,Ba,dPo,nme,cPo,fPo,sme,mPo,gPo,lme,hPo,pPo,uPo,U,o2,ime,_Po,bPo,DG,vPo,FPo,TPo,r2,dme,MPo,EPo,GG,CPo,wPo,APo,t2,cme,yPo,LPo,OG,xPo,$Po,kPo,a2,fme,SPo,RPo,VG,BPo,PPo,IPo,n2,mme,qPo,NPo,XG,jPo,DPo,GPo,s2,gme,OPo,VPo,zG,XPo,zPo,QPo,l2,hme,WPo,HPo,QG,UPo,JPo,YPo,i2,pme,KPo,ZPo,WG,eIo,oIo,rIo,d2,ume,tIo,aIo,HG,nIo,sIo,lIo,c2,_me,iIo,dIo,UG,cIo,fIo,mIo,f2,bme,gIo,hIo,JG,pIo,uIo,_Io,m2,vme,bIo,vIo,YG,FIo,TIo,MIo,g2,Fme,EIo,CIo,KG,wIo,AIo,yIo,h2,Tme,LIo,xIo,ZG,$Io,kIo,SIo,p2,Mme,RIo,BIo,eO,PIo,IIo,qIo,u2,Eme,NIo,jIo,oO,DIo,GIo,OIo,_2,Cme,VIo,XIo,rO,zIo,QIo,WIo,b2,wme,HIo,UIo,tO,JIo,YIo,KIo,v2,Ame,ZIo,eqo,aO,oqo,rqo,tqo,F2,yme,aqo,nqo,nO,sqo,lqo,iqo,T2,Lme,dqo,cqo,sO,fqo,mqo,gqo,M2,xme,hqo,pqo,lO,uqo,_qo,bqo,E2,$me,vqo,Fqo,iO,Tqo,Mqo,Eqo,C2,kme,Cqo,wqo,dO,Aqo,yqo,Lqo,w2,Sme,xqo,$qo,cO,kqo,Sqo,Rqo,A2,Rme,Bqo,Pqo,fO,Iqo,qqo,Nqo,y2,Bme,jqo,Dqo,mO,Gqo,Oqo,Vqo,L2,Pme,Xqo,zqo,gO,Qqo,Wqo,Hqo,x2,Ime,Uqo,Jqo,hO,Yqo,Kqo,Zqo,$2,qme,eNo,oNo,pO,rNo,tNo,aNo,k2,Nme,nNo,sNo,uO,lNo,iNo,dNo,S2,jme,cNo,fNo,_O,mNo,gNo,hNo,R2,Dme,pNo,uNo,bO,_No,bNo,vNo,B2,FNo,Gme,TNo,MNo,Ome,ENo,CNo,P2,oIe,Ui,I2,Vme,d6,wNo,Xme,ANo,rIe,qo,c6,yNo,Ji,LNo,vO,xNo,$No,FO,kNo,SNo,RNo,f6,BNo,zme,PNo,INo,qNo,ct,m6,NNo,Qme,jNo,DNo,Yi,GNo,Wme,ONo,VNo,TO,XNo,zNo,QNo,q2,WNo,to,g6,HNo,Hme,UNo,JNo,Pa,YNo,Ume,KNo,ZNo,Jme,ejo,ojo,Yme,rjo,tjo,ajo,O,N2,Kme,njo,sjo,MO,ljo,ijo,djo,j2,Zme,cjo,fjo,EO,mjo,gjo,hjo,D2,ege,pjo,ujo,CO,_jo,bjo,vjo,G2,oge,Fjo,Tjo,wO,Mjo,Ejo,Cjo,O2,rge,wjo,Ajo,AO,yjo,Ljo,xjo,V2,tge,$jo,kjo,yO,Sjo,Rjo,Bjo,X2,age,Pjo,Ijo,LO,qjo,Njo,jjo,z2,nge,Djo,Gjo,xO,Ojo,Vjo,Xjo,Q2,sge,zjo,Qjo,$O,Wjo,Hjo,Ujo,W2,lge,Jjo,Yjo,kO,Kjo,Zjo,eDo,H2,ige,oDo,rDo,SO,tDo,aDo,nDo,U2,dge,sDo,lDo,RO,iDo,dDo,cDo,J2,cge,fDo,mDo,BO,gDo,hDo,pDo,Y2,fge,uDo,_Do,PO,bDo,vDo,FDo,K2,mge,TDo,MDo,IO,EDo,CDo,wDo,Z2,gge,ADo,yDo,qO,LDo,xDo,$Do,ev,hge,kDo,SDo,NO,RDo,BDo,PDo,ov,pge,IDo,qDo,jO,NDo,jDo,DDo,rv,uge,GDo,ODo,DO,VDo,XDo,zDo,tv,_ge,QDo,WDo,GO,HDo,UDo,JDo,av,bge,YDo,KDo,OO,ZDo,eGo,oGo,nv,vge,rGo,tGo,VO,aGo,nGo,sGo,sv,Fge,lGo,iGo,XO,dGo,cGo,fGo,lv,Tge,mGo,gGo,zO,hGo,pGo,uGo,iv,Mge,_Go,bGo,QO,vGo,FGo,TGo,dv,Ege,MGo,EGo,WO,CGo,wGo,AGo,cv,Cge,yGo,LGo,HO,xGo,$Go,kGo,fv,wge,SGo,RGo,UO,BGo,PGo,IGo,mv,Age,qGo,NGo,JO,jGo,DGo,GGo,gv,yge,OGo,VGo,YO,XGo,zGo,QGo,hv,Lge,WGo,HGo,KO,UGo,JGo,YGo,pv,xge,KGo,ZGo,ZO,eOo,oOo,rOo,uv,$ge,tOo,aOo,eV,nOo,sOo,lOo,_v,kge,iOo,dOo,oV,cOo,fOo,mOo,bv,Sge,gOo,hOo,rV,pOo,uOo,_Oo,vv,Rge,bOo,vOo,tV,FOo,TOo,MOo,Fv,Bge,EOo,COo,aV,wOo,AOo,yOo,Tv,Pge,LOo,xOo,nV,$Oo,kOo,SOo,Mv,Ige,ROo,BOo,sV,POo,IOo,qOo,Ev,NOo,qge,jOo,DOo,Nge,GOo,OOo,Cv,tIe,Ki,wv,jge,h6,VOo,Dge,XOo,aIe,No,p6,zOo,Zi,QOo,lV,WOo,HOo,iV,UOo,JOo,YOo,u6,KOo,Gge,ZOo,eVo,oVo,ft,_6,rVo,Oge,tVo,aVo,ed,nVo,Vge,sVo,lVo,dV,iVo,dVo,cVo,Av,fVo,ao,b6,mVo,Xge,gVo,hVo,Ia,pVo,zge,uVo,_Vo,Qge,bVo,vVo,Wge,FVo,TVo,MVo,Hge,yv,Uge,EVo,CVo,cV,wVo,AVo,yVo,Lv,LVo,Jge,xVo,$Vo,Yge,kVo,SVo,xv,nIe,od,$v,Kge,v6,RVo,Zge,BVo,sIe,jo,F6,PVo,rd,IVo,fV,qVo,NVo,mV,jVo,DVo,GVo,T6,OVo,ehe,VVo,XVo,zVo,mt,M6,QVo,ohe,WVo,HVo,td,UVo,rhe,JVo,YVo,gV,KVo,ZVo,eXo,kv,oXo,no,E6,rXo,the,tXo,aXo,qa,nXo,ahe,sXo,lXo,nhe,iXo,dXo,she,cXo,fXo,mXo,ve,Sv,lhe,gXo,hXo,hV,pXo,uXo,_Xo,Rv,ihe,bXo,vXo,pV,FXo,TXo,MXo,Bv,dhe,EXo,CXo,uV,wXo,AXo,yXo,Bs,che,LXo,xXo,_V,$Xo,kXo,bV,SXo,RXo,BXo,Pv,fhe,PXo,IXo,vV,qXo,NXo,jXo,gt,mhe,DXo,GXo,FV,OXo,VXo,TV,XXo,zXo,MV,QXo,WXo,HXo,Iv,ghe,UXo,JXo,EV,YXo,KXo,ZXo,qv,hhe,ezo,ozo,CV,rzo,tzo,azo,Nv,phe,nzo,szo,wV,lzo,izo,dzo,jv,uhe,czo,fzo,AV,mzo,gzo,hzo,Dv,_he,pzo,uzo,yV,_zo,bzo,vzo,Gv,bhe,Fzo,Tzo,LV,Mzo,Ezo,Czo,Ov,vhe,wzo,Azo,xV,yzo,Lzo,xzo,Vv,$zo,Fhe,kzo,Szo,The,Rzo,Bzo,Xv,lIe,ad,zv,Mhe,C6,Pzo,Ehe,Izo,iIe,Do,w6,qzo,nd,Nzo,$V,jzo,Dzo,kV,Gzo,Ozo,Vzo,A6,Xzo,Che,zzo,Qzo,Wzo,ht,y6,Hzo,whe,Uzo,Jzo,sd,Yzo,Ahe,Kzo,Zzo,SV,eQo,oQo,rQo,Qv,tQo,so,L6,aQo,yhe,nQo,sQo,Na,lQo,Lhe,iQo,dQo,xhe,cQo,fQo,$he,mQo,gQo,hQo,khe,Wv,She,pQo,uQo,RV,_Qo,bQo,vQo,Hv,FQo,Rhe,TQo,MQo,Bhe,EQo,CQo,Uv,dIe,ld,Jv,Phe,x6,wQo,Ihe,AQo,cIe,Go,$6,yQo,id,LQo,BV,xQo,$Qo,PV,kQo,SQo,RQo,k6,BQo,qhe,PQo,IQo,qQo,pt,S6,NQo,Nhe,jQo,DQo,dd,GQo,jhe,OQo,VQo,IV,XQo,zQo,QQo,Yv,WQo,lo,R6,HQo,Dhe,UQo,JQo,ja,YQo,Ghe,KQo,ZQo,Ohe,eWo,oWo,Vhe,rWo,tWo,aWo,Ne,Kv,Xhe,nWo,sWo,qV,lWo,iWo,dWo,Zv,zhe,cWo,fWo,NV,mWo,gWo,hWo,eF,Qhe,pWo,uWo,jV,_Wo,bWo,vWo,oF,Whe,FWo,TWo,DV,MWo,EWo,CWo,rF,Hhe,wWo,AWo,GV,yWo,LWo,xWo,tF,Uhe,$Wo,kWo,OV,SWo,RWo,BWo,aF,Jhe,PWo,IWo,VV,qWo,NWo,jWo,nF,Yhe,DWo,GWo,XV,OWo,VWo,XWo,sF,zWo,Khe,QWo,WWo,Zhe,HWo,UWo,lF,fIe,cd,iF,epe,B6,JWo,ope,YWo,mIe,Oo,P6,KWo,fd,ZWo,zV,eHo,oHo,QV,rHo,tHo,aHo,I6,nHo,rpe,sHo,lHo,iHo,ut,q6,dHo,tpe,cHo,fHo,md,mHo,ape,gHo,hHo,WV,pHo,uHo,_Ho,dF,bHo,io,N6,vHo,npe,FHo,THo,Da,MHo,spe,EHo,CHo,lpe,wHo,AHo,ipe,yHo,LHo,xHo,Ga,cF,dpe,$Ho,kHo,HV,SHo,RHo,BHo,fF,cpe,PHo,IHo,UV,qHo,NHo,jHo,mF,fpe,DHo,GHo,JV,OHo,VHo,XHo,gF,mpe,zHo,QHo,YV,WHo,HHo,UHo,hF,JHo,gpe,YHo,KHo,hpe,ZHo,eUo,pF,gIe,gd,uF,ppe,j6,oUo,upe,rUo,hIe,Vo,D6,tUo,hd,aUo,KV,nUo,sUo,ZV,lUo,iUo,dUo,G6,cUo,_pe,fUo,mUo,gUo,_t,O6,hUo,bpe,pUo,uUo,pd,_Uo,vpe,bUo,vUo,eX,FUo,TUo,MUo,_F,EUo,co,V6,CUo,Fpe,wUo,AUo,Oa,yUo,Tpe,LUo,xUo,Mpe,$Uo,kUo,Epe,SUo,RUo,BUo,je,bF,Cpe,PUo,IUo,oX,qUo,NUo,jUo,vF,wpe,DUo,GUo,rX,OUo,VUo,XUo,FF,Ape,zUo,QUo,tX,WUo,HUo,UUo,TF,ype,JUo,YUo,aX,KUo,ZUo,eJo,MF,Lpe,oJo,rJo,nX,tJo,aJo,nJo,EF,xpe,sJo,lJo,sX,iJo,dJo,cJo,CF,$pe,fJo,mJo,lX,gJo,hJo,pJo,wF,kpe,uJo,_Jo,iX,bJo,vJo,FJo,AF,TJo,Spe,MJo,EJo,Rpe,CJo,wJo,yF,pIe,ud,LF,Bpe,X6,AJo,Ppe,yJo,uIe,Xo,z6,LJo,_d,xJo,dX,$Jo,kJo,cX,SJo,RJo,BJo,Q6,PJo,Ipe,IJo,qJo,NJo,bt,W6,jJo,qpe,DJo,GJo,bd,OJo,Npe,VJo,XJo,fX,zJo,QJo,WJo,xF,HJo,fo,H6,UJo,jpe,JJo,YJo,Va,KJo,Dpe,ZJo,eYo,Gpe,oYo,rYo,Ope,tYo,aYo,nYo,U6,$F,Vpe,sYo,lYo,mX,iYo,dYo,cYo,kF,Xpe,fYo,mYo,gX,gYo,hYo,pYo,SF,uYo,zpe,_Yo,bYo,Qpe,vYo,FYo,RF,_Ie,vd,BF,Wpe,J6,TYo,Hpe,MYo,bIe,zo,Y6,EYo,Fd,CYo,hX,wYo,AYo,pX,yYo,LYo,xYo,K6,$Yo,Upe,kYo,SYo,RYo,vt,Z6,BYo,Jpe,PYo,IYo,Td,qYo,Ype,NYo,jYo,uX,DYo,GYo,OYo,PF,VYo,mo,ey,XYo,Kpe,zYo,QYo,Xa,WYo,Zpe,HYo,UYo,eue,JYo,YYo,oue,KYo,ZYo,eKo,za,IF,rue,oKo,rKo,_X,tKo,aKo,nKo,qF,tue,sKo,lKo,bX,iKo,dKo,cKo,NF,aue,fKo,mKo,vX,gKo,hKo,pKo,jF,nue,uKo,_Ko,FX,bKo,vKo,FKo,DF,TKo,sue,MKo,EKo,lue,CKo,wKo,GF,vIe,Md,OF,iue,oy,AKo,due,yKo,FIe,Qo,ry,LKo,Ed,xKo,TX,$Ko,kKo,MX,SKo,RKo,BKo,ty,PKo,cue,IKo,qKo,NKo,Ft,ay,jKo,fue,DKo,GKo,Cd,OKo,mue,VKo,XKo,EX,zKo,QKo,WKo,VF,HKo,go,ny,UKo,gue,JKo,YKo,Qa,KKo,hue,ZKo,eZo,pue,oZo,rZo,uue,tZo,aZo,nZo,wd,XF,_ue,sZo,lZo,CX,iZo,dZo,cZo,zF,bue,fZo,mZo,wX,gZo,hZo,pZo,QF,vue,uZo,_Zo,AX,bZo,vZo,FZo,WF,TZo,Fue,MZo,EZo,Tue,CZo,wZo,HF,TIe,Ad,UF,Mue,sy,AZo,Eue,yZo,MIe,Wo,ly,LZo,yd,xZo,yX,$Zo,kZo,LX,SZo,RZo,BZo,iy,PZo,Cue,IZo,qZo,NZo,Tt,dy,jZo,wue,DZo,GZo,Ld,OZo,Aue,VZo,XZo,xX,zZo,QZo,WZo,JF,HZo,ho,cy,UZo,yue,JZo,YZo,Wa,KZo,Lue,ZZo,eer,xue,oer,rer,$ue,ter,aer,ner,fy,YF,kue,ser,ler,$X,ier,der,cer,KF,Sue,fer,mer,kX,ger,her,per,ZF,uer,Rue,_er,ber,Bue,ver,Fer,e0,EIe,xd,o0,Pue,my,Ter,Iue,Mer,CIe,Ho,gy,Eer,$d,Cer,SX,wer,Aer,RX,yer,Ler,xer,hy,$er,que,ker,Ser,Rer,Mt,py,Ber,Nue,Per,Ier,kd,qer,jue,Ner,jer,BX,Der,Ger,Oer,r0,Ver,po,uy,Xer,Due,zer,Qer,Ha,Wer,Gue,Her,Uer,Oue,Jer,Yer,Vue,Ker,Zer,eor,Xue,t0,zue,oor,ror,PX,tor,aor,nor,a0,sor,Que,lor,ior,Wue,dor,cor,n0,wIe,Sd,s0,Hue,_y,mor,Uue,gor,AIe,Uo,by,hor,Rd,por,IX,uor,_or,qX,bor,vor,For,vy,Tor,Jue,Mor,Eor,Cor,Et,Fy,wor,Yue,Aor,yor,Bd,Lor,Kue,xor,$or,NX,kor,Sor,Ror,l0,Bor,uo,Ty,Por,Zue,Ior,qor,Ua,Nor,e_e,jor,Dor,o_e,Gor,Oor,r_e,Vor,Xor,zor,Ja,i0,t_e,Qor,Wor,jX,Hor,Uor,Jor,d0,a_e,Yor,Kor,DX,Zor,err,orr,c0,n_e,rrr,trr,GX,arr,nrr,srr,f0,s_e,lrr,irr,OX,drr,crr,frr,m0,mrr,l_e,grr,hrr,i_e,prr,urr,g0,yIe,Pd,h0,d_e,My,_rr,c_e,brr,LIe,Jo,Ey,vrr,Id,Frr,VX,Trr,Mrr,XX,Err,Crr,wrr,Cy,Arr,f_e,yrr,Lrr,xrr,Ct,wy,$rr,m_e,krr,Srr,qd,Rrr,g_e,Brr,Prr,zX,Irr,qrr,Nrr,p0,jrr,_o,Ay,Drr,h_e,Grr,Orr,Ya,Vrr,p_e,Xrr,zrr,u_e,Qrr,Wrr,__e,Hrr,Urr,Jrr,b_e,u0,v_e,Yrr,Krr,QX,Zrr,etr,otr,_0,rtr,F_e,ttr,atr,T_e,ntr,str,b0,xIe,Nd,v0,M_e,yy,ltr,E_e,itr,$Ie,Yo,Ly,dtr,jd,ctr,WX,ftr,mtr,HX,gtr,htr,ptr,xy,utr,C_e,_tr,btr,vtr,wt,$y,Ftr,w_e,Ttr,Mtr,Dd,Etr,A_e,Ctr,wtr,UX,Atr,ytr,Ltr,F0,xtr,wr,ky,$tr,y_e,ktr,Str,Ka,Rtr,L_e,Btr,Ptr,x_e,Itr,qtr,$_e,Ntr,jtr,Dtr,j,T0,k_e,Gtr,Otr,JX,Vtr,Xtr,ztr,M0,S_e,Qtr,Wtr,YX,Htr,Utr,Jtr,E0,R_e,Ytr,Ktr,KX,Ztr,ear,oar,C0,B_e,rar,tar,ZX,aar,nar,sar,w0,P_e,lar,iar,ez,dar,car,far,A0,I_e,mar,gar,oz,har,par,uar,y0,q_e,_ar,bar,rz,Far,Tar,Mar,L0,N_e,Ear,Car,tz,war,Aar,yar,x0,j_e,Lar,xar,az,$ar,kar,Sar,$0,D_e,Rar,Bar,nz,Par,Iar,qar,k0,G_e,Nar,jar,sz,Dar,Gar,Oar,S0,O_e,Var,Xar,lz,zar,Qar,War,R0,V_e,Har,Uar,iz,Jar,Yar,Kar,B0,X_e,Zar,enr,dz,onr,rnr,tnr,P0,z_e,anr,nnr,cz,snr,lnr,inr,I0,Q_e,dnr,cnr,fz,fnr,mnr,gnr,q0,W_e,hnr,pnr,mz,unr,_nr,bnr,Ps,H_e,vnr,Fnr,gz,Tnr,Mnr,hz,Enr,Cnr,wnr,N0,U_e,Anr,ynr,pz,Lnr,xnr,$nr,j0,J_e,knr,Snr,uz,Rnr,Bnr,Pnr,D0,Y_e,Inr,qnr,_z,Nnr,jnr,Dnr,G0,K_e,Gnr,Onr,bz,Vnr,Xnr,znr,O0,Z_e,Qnr,Wnr,vz,Hnr,Unr,Jnr,V0,e1e,Ynr,Knr,Fz,Znr,esr,osr,X0,o1e,rsr,tsr,Tz,asr,nsr,ssr,z0,r1e,lsr,isr,Mz,dsr,csr,fsr,Q0,t1e,msr,gsr,Ez,hsr,psr,usr,W0,a1e,_sr,bsr,Cz,vsr,Fsr,Tsr,H0,n1e,Msr,Esr,wz,Csr,wsr,Asr,U0,s1e,ysr,Lsr,Az,xsr,$sr,ksr,J0,l1e,Ssr,Rsr,yz,Bsr,Psr,Isr,Y0,i1e,qsr,Nsr,Lz,jsr,Dsr,Gsr,K0,d1e,Osr,Vsr,xz,Xsr,zsr,Qsr,Z0,c1e,Wsr,Hsr,$z,Usr,Jsr,Ysr,eT,f1e,Ksr,Zsr,kz,elr,olr,rlr,oT,m1e,tlr,alr,Sz,nlr,slr,llr,rT,g1e,ilr,dlr,Rz,clr,flr,mlr,tT,h1e,glr,hlr,Bz,plr,ulr,_lr,aT,p1e,blr,vlr,Pz,Flr,Tlr,Mlr,nT,u1e,Elr,Clr,Iz,wlr,Alr,ylr,sT,_1e,Llr,xlr,qz,$lr,klr,Slr,lT,b1e,Rlr,Blr,Nz,Plr,Ilr,qlr,iT,v1e,Nlr,jlr,jz,Dlr,Glr,Olr,dT,F1e,Vlr,Xlr,Dz,zlr,Qlr,Wlr,cT,T1e,Hlr,Ulr,Gz,Jlr,Ylr,Klr,fT,kIe,Gd,mT,M1e,Sy,Zlr,E1e,eir,SIe,Ko,Ry,oir,Od,rir,Oz,tir,air,Vz,nir,sir,lir,By,iir,C1e,dir,cir,fir,At,Py,mir,w1e,gir,hir,Vd,pir,A1e,uir,_ir,Xz,bir,vir,Fir,gT,Tir,Ar,Iy,Mir,y1e,Eir,Cir,Za,wir,L1e,Air,yir,x1e,Lir,xir,$1e,$ir,kir,Sir,ne,hT,k1e,Rir,Bir,zz,Pir,Iir,qir,pT,S1e,Nir,jir,Qz,Dir,Gir,Oir,uT,R1e,Vir,Xir,Wz,zir,Qir,Wir,_T,B1e,Hir,Uir,Hz,Jir,Yir,Kir,bT,P1e,Zir,edr,Uz,odr,rdr,tdr,vT,I1e,adr,ndr,Jz,sdr,ldr,idr,FT,q1e,ddr,cdr,Yz,fdr,mdr,gdr,TT,N1e,hdr,pdr,Kz,udr,_dr,bdr,MT,j1e,vdr,Fdr,Zz,Tdr,Mdr,Edr,ET,D1e,Cdr,wdr,eQ,Adr,ydr,Ldr,CT,G1e,xdr,$dr,oQ,kdr,Sdr,Rdr,wT,O1e,Bdr,Pdr,rQ,Idr,qdr,Ndr,AT,V1e,jdr,Ddr,tQ,Gdr,Odr,Vdr,yT,X1e,Xdr,zdr,aQ,Qdr,Wdr,Hdr,LT,z1e,Udr,Jdr,nQ,Ydr,Kdr,Zdr,xT,Q1e,ecr,ocr,sQ,rcr,tcr,acr,$T,W1e,ncr,scr,lQ,lcr,icr,dcr,kT,H1e,ccr,fcr,iQ,mcr,gcr,hcr,ST,U1e,pcr,ucr,dQ,_cr,bcr,vcr,RT,J1e,Fcr,Tcr,cQ,Mcr,Ecr,Ccr,BT,Y1e,wcr,Acr,fQ,ycr,Lcr,xcr,PT,K1e,$cr,kcr,mQ,Scr,Rcr,Bcr,IT,Z1e,Pcr,Icr,gQ,qcr,Ncr,jcr,qT,RIe,Xd,NT,e8e,qy,Dcr,o8e,Gcr,BIe,Zo,Ny,Ocr,zd,Vcr,hQ,Xcr,zcr,pQ,Qcr,Wcr,Hcr,jy,Ucr,r8e,Jcr,Ycr,Kcr,yt,Dy,Zcr,t8e,efr,ofr,Qd,rfr,a8e,tfr,afr,uQ,nfr,sfr,lfr,jT,ifr,yr,Gy,dfr,n8e,cfr,ffr,en,mfr,s8e,gfr,hfr,l8e,pfr,ufr,i8e,_fr,bfr,vfr,Te,DT,d8e,Ffr,Tfr,_Q,Mfr,Efr,Cfr,GT,c8e,wfr,Afr,bQ,yfr,Lfr,xfr,OT,f8e,$fr,kfr,vQ,Sfr,Rfr,Bfr,VT,m8e,Pfr,Ifr,FQ,qfr,Nfr,jfr,XT,g8e,Dfr,Gfr,TQ,Ofr,Vfr,Xfr,zT,h8e,zfr,Qfr,MQ,Wfr,Hfr,Ufr,QT,p8e,Jfr,Yfr,EQ,Kfr,Zfr,emr,WT,u8e,omr,rmr,CQ,tmr,amr,nmr,HT,_8e,smr,lmr,wQ,imr,dmr,cmr,UT,b8e,fmr,mmr,AQ,gmr,hmr,pmr,JT,v8e,umr,_mr,yQ,bmr,vmr,Fmr,YT,F8e,Tmr,Mmr,LQ,Emr,Cmr,wmr,KT,PIe,Wd,ZT,T8e,Oy,Amr,M8e,ymr,IIe,er,Vy,Lmr,Hd,xmr,xQ,$mr,kmr,$Q,Smr,Rmr,Bmr,Xy,Pmr,E8e,Imr,qmr,Nmr,Lt,zy,jmr,C8e,Dmr,Gmr,Ud,Omr,w8e,Vmr,Xmr,kQ,zmr,Qmr,Wmr,e7,Hmr,Lr,Qy,Umr,A8e,Jmr,Ymr,on,Kmr,y8e,Zmr,egr,L8e,ogr,rgr,x8e,tgr,agr,ngr,Jd,o7,$8e,sgr,lgr,SQ,igr,dgr,cgr,r7,k8e,fgr,mgr,RQ,ggr,hgr,pgr,t7,S8e,ugr,_gr,BQ,bgr,vgr,Fgr,a7,qIe,Yd,n7,R8e,Wy,Tgr,B8e,Mgr,NIe,or,Hy,Egr,Kd,Cgr,PQ,wgr,Agr,IQ,ygr,Lgr,xgr,Uy,$gr,P8e,kgr,Sgr,Rgr,xt,Jy,Bgr,I8e,Pgr,Igr,Zd,qgr,q8e,Ngr,jgr,qQ,Dgr,Ggr,Ogr,s7,Vgr,xr,Yy,Xgr,N8e,zgr,Qgr,rn,Wgr,j8e,Hgr,Ugr,D8e,Jgr,Ygr,G8e,Kgr,Zgr,ehr,ie,l7,O8e,ohr,rhr,NQ,thr,ahr,nhr,i7,V8e,shr,lhr,jQ,ihr,dhr,chr,d7,X8e,fhr,mhr,DQ,ghr,hhr,phr,c7,z8e,uhr,_hr,GQ,bhr,vhr,Fhr,f7,Q8e,Thr,Mhr,OQ,Ehr,Chr,whr,m7,W8e,Ahr,yhr,VQ,Lhr,xhr,$hr,g7,H8e,khr,Shr,XQ,Rhr,Bhr,Phr,h7,U8e,Ihr,qhr,zQ,Nhr,jhr,Dhr,p7,J8e,Ghr,Ohr,QQ,Vhr,Xhr,zhr,u7,Y8e,Qhr,Whr,WQ,Hhr,Uhr,Jhr,_7,K8e,Yhr,Khr,HQ,Zhr,epr,opr,b7,Z8e,rpr,tpr,UQ,apr,npr,spr,v7,ebe,lpr,ipr,JQ,dpr,cpr,fpr,F7,obe,mpr,gpr,YQ,hpr,ppr,upr,T7,rbe,_pr,bpr,KQ,vpr,Fpr,Tpr,M7,tbe,Mpr,Epr,ZQ,Cpr,wpr,Apr,E7,abe,ypr,Lpr,eW,xpr,$pr,kpr,C7,nbe,Spr,Rpr,oW,Bpr,Ppr,Ipr,w7,sbe,qpr,Npr,rW,jpr,Dpr,Gpr,A7,lbe,Opr,Vpr,tW,Xpr,zpr,Qpr,y7,jIe,ec,L7,ibe,Ky,Wpr,dbe,Hpr,DIe,rr,Zy,Upr,oc,Jpr,aW,Ypr,Kpr,nW,Zpr,eur,our,eL,rur,cbe,tur,aur,nur,$t,oL,sur,fbe,lur,iur,rc,dur,mbe,cur,fur,sW,mur,gur,hur,x7,pur,$r,rL,uur,gbe,_ur,bur,tn,vur,hbe,Fur,Tur,pbe,Mur,Eur,ube,Cur,wur,Aur,ye,$7,_be,yur,Lur,lW,xur,$ur,kur,k7,bbe,Sur,Rur,iW,Bur,Pur,Iur,S7,vbe,qur,Nur,dW,jur,Dur,Gur,R7,Fbe,Our,Vur,cW,Xur,zur,Qur,B7,Tbe,Wur,Hur,fW,Uur,Jur,Yur,P7,Mbe,Kur,Zur,mW,e_r,o_r,r_r,I7,Ebe,t_r,a_r,gW,n_r,s_r,l_r,q7,Cbe,i_r,d_r,hW,c_r,f_r,m_r,N7,wbe,g_r,h_r,pW,p_r,u_r,__r,j7,Abe,b_r,v_r,uW,F_r,T_r,M_r,D7,GIe,tc,G7,ybe,tL,E_r,Lbe,C_r,OIe,tr,aL,w_r,ac,A_r,_W,y_r,L_r,bW,x_r,$_r,k_r,nL,S_r,xbe,R_r,B_r,P_r,kt,sL,I_r,$be,q_r,N_r,nc,j_r,kbe,D_r,G_r,vW,O_r,V_r,X_r,O7,z_r,kr,lL,Q_r,Sbe,W_r,H_r,an,U_r,Rbe,J_r,Y_r,Bbe,K_r,Z_r,Pbe,e1r,o1r,r1r,Z,V7,Ibe,t1r,a1r,FW,n1r,s1r,l1r,X7,qbe,i1r,d1r,TW,c1r,f1r,m1r,z7,Nbe,g1r,h1r,MW,p1r,u1r,_1r,Q7,jbe,b1r,v1r,EW,F1r,T1r,M1r,W7,Dbe,E1r,C1r,CW,w1r,A1r,y1r,H7,Gbe,L1r,x1r,wW,$1r,k1r,S1r,U7,Obe,R1r,B1r,AW,P1r,I1r,q1r,J7,Vbe,N1r,j1r,yW,D1r,G1r,O1r,Y7,Xbe,V1r,X1r,LW,z1r,Q1r,W1r,K7,zbe,H1r,U1r,xW,J1r,Y1r,K1r,Z7,Qbe,Z1r,e8r,$W,o8r,r8r,t8r,eM,Wbe,a8r,n8r,kW,s8r,l8r,i8r,oM,Hbe,d8r,c8r,SW,f8r,m8r,g8r,rM,Ube,h8r,p8r,RW,u8r,_8r,b8r,tM,Jbe,v8r,F8r,BW,T8r,M8r,E8r,aM,Ybe,C8r,w8r,PW,A8r,y8r,L8r,nM,Kbe,x8r,$8r,IW,k8r,S8r,R8r,sM,Zbe,B8r,P8r,qW,I8r,q8r,N8r,lM,e2e,j8r,D8r,NW,G8r,O8r,V8r,iM,o2e,X8r,z8r,jW,Q8r,W8r,H8r,dM,r2e,U8r,J8r,DW,Y8r,K8r,Z8r,cM,t2e,ebr,obr,GW,rbr,tbr,abr,fM,a2e,nbr,sbr,OW,lbr,ibr,dbr,mM,n2e,cbr,fbr,VW,mbr,gbr,hbr,gM,s2e,pbr,ubr,XW,_br,bbr,vbr,hM,l2e,Fbr,Tbr,zW,Mbr,Ebr,Cbr,pM,VIe,sc,uM,i2e,iL,wbr,d2e,Abr,XIe,ar,dL,ybr,lc,Lbr,QW,xbr,$br,WW,kbr,Sbr,Rbr,cL,Bbr,c2e,Pbr,Ibr,qbr,St,fL,Nbr,f2e,jbr,Dbr,ic,Gbr,m2e,Obr,Vbr,HW,Xbr,zbr,Qbr,_M,Wbr,Sr,mL,Hbr,g2e,Ubr,Jbr,nn,Ybr,h2e,Kbr,Zbr,p2e,e2r,o2r,u2e,r2r,t2r,a2r,pe,bM,_2e,n2r,s2r,UW,l2r,i2r,d2r,vM,b2e,c2r,f2r,JW,m2r,g2r,h2r,FM,v2e,p2r,u2r,YW,_2r,b2r,v2r,TM,F2e,F2r,T2r,KW,M2r,E2r,C2r,MM,T2e,w2r,A2r,ZW,y2r,L2r,x2r,EM,M2e,$2r,k2r,eH,S2r,R2r,B2r,CM,E2e,P2r,I2r,oH,q2r,N2r,j2r,wM,C2e,D2r,G2r,rH,O2r,V2r,X2r,AM,w2e,z2r,Q2r,tH,W2r,H2r,U2r,yM,A2e,J2r,Y2r,aH,K2r,Z2r,evr,LM,y2e,ovr,rvr,nH,tvr,avr,nvr,xM,L2e,svr,lvr,sH,ivr,dvr,cvr,$M,x2e,fvr,mvr,lH,gvr,hvr,pvr,kM,$2e,uvr,_vr,iH,bvr,vvr,Fvr,SM,k2e,Tvr,Mvr,dH,Evr,Cvr,wvr,RM,S2e,Avr,yvr,cH,Lvr,xvr,$vr,BM,R2e,kvr,Svr,fH,Rvr,Bvr,Pvr,PM,zIe,dc,IM,B2e,gL,Ivr,P2e,qvr,QIe,nr,hL,Nvr,cc,jvr,mH,Dvr,Gvr,gH,Ovr,Vvr,Xvr,pL,zvr,I2e,Qvr,Wvr,Hvr,Rt,uL,Uvr,q2e,Jvr,Yvr,fc,Kvr,N2e,Zvr,eFr,hH,oFr,rFr,tFr,qM,aFr,Rr,_L,nFr,j2e,sFr,lFr,sn,iFr,D2e,dFr,cFr,G2e,fFr,mFr,O2e,gFr,hFr,pFr,bL,NM,V2e,uFr,_Fr,pH,bFr,vFr,FFr,jM,X2e,TFr,MFr,uH,EFr,CFr,wFr,DM,WIe,mc,GM,z2e,vL,AFr,Q2e,yFr,HIe,sr,FL,LFr,gc,xFr,_H,$Fr,kFr,bH,SFr,RFr,BFr,TL,PFr,W2e,IFr,qFr,NFr,Bt,ML,jFr,H2e,DFr,GFr,hc,OFr,U2e,VFr,XFr,vH,zFr,QFr,WFr,OM,HFr,Br,EL,UFr,J2e,JFr,YFr,ln,KFr,Y2e,ZFr,e0r,K2e,o0r,r0r,Z2e,t0r,a0r,n0r,eve,VM,ove,s0r,l0r,FH,i0r,d0r,c0r,XM,UIe,pc,zM,rve,CL,f0r,tve,m0r,JIe,lr,wL,g0r,uc,h0r,TH,p0r,u0r,MH,_0r,b0r,v0r,AL,F0r,ave,T0r,M0r,E0r,Pt,yL,C0r,nve,w0r,A0r,_c,y0r,sve,L0r,x0r,EH,$0r,k0r,S0r,QM,R0r,Pr,LL,B0r,lve,P0r,I0r,dn,q0r,ive,N0r,j0r,dve,D0r,G0r,cve,O0r,V0r,X0r,de,WM,fve,z0r,Q0r,CH,W0r,H0r,U0r,HM,mve,J0r,Y0r,wH,K0r,Z0r,eTr,UM,gve,oTr,rTr,AH,tTr,aTr,nTr,JM,hve,sTr,lTr,yH,iTr,dTr,cTr,YM,pve,fTr,mTr,LH,gTr,hTr,pTr,KM,uve,uTr,_Tr,xH,bTr,vTr,FTr,ZM,_ve,TTr,MTr,$H,ETr,CTr,wTr,e4,bve,ATr,yTr,kH,LTr,xTr,$Tr,o4,vve,kTr,STr,SH,RTr,BTr,PTr,r4,Fve,ITr,qTr,RH,NTr,jTr,DTr,t4,Tve,GTr,OTr,BH,VTr,XTr,zTr,a4,Mve,QTr,WTr,PH,HTr,UTr,JTr,n4,Eve,YTr,KTr,IH,ZTr,e7r,o7r,s4,Cve,r7r,t7r,qH,a7r,n7r,s7r,l4,wve,l7r,i7r,NH,d7r,c7r,f7r,i4,Ave,m7r,g7r,jH,h7r,p7r,u7r,d4,yve,_7r,b7r,DH,v7r,F7r,T7r,c4,Lve,M7r,E7r,GH,C7r,w7r,A7r,f4,xve,y7r,L7r,OH,x7r,$7r,k7r,m4,$ve,S7r,R7r,VH,B7r,P7r,I7r,g4,YIe,bc,h4,kve,xL,q7r,Sve,N7r,KIe,ir,$L,j7r,vc,D7r,XH,G7r,O7r,zH,V7r,X7r,z7r,kL,Q7r,Rve,W7r,H7r,U7r,It,SL,J7r,Bve,Y7r,K7r,Fc,Z7r,Pve,eMr,oMr,QH,rMr,tMr,aMr,p4,nMr,Ir,RL,sMr,Ive,lMr,iMr,cn,dMr,qve,cMr,fMr,Nve,mMr,gMr,jve,hMr,pMr,uMr,ce,u4,Dve,_Mr,bMr,WH,vMr,FMr,TMr,_4,Gve,MMr,EMr,HH,CMr,wMr,AMr,b4,Ove,yMr,LMr,UH,xMr,$Mr,kMr,v4,Vve,SMr,RMr,JH,BMr,PMr,IMr,F4,Xve,qMr,NMr,YH,jMr,DMr,GMr,T4,zve,OMr,VMr,KH,XMr,zMr,QMr,M4,Qve,WMr,HMr,ZH,UMr,JMr,YMr,E4,Wve,KMr,ZMr,eU,e4r,o4r,r4r,C4,Hve,t4r,a4r,oU,n4r,s4r,l4r,w4,Uve,i4r,d4r,rU,c4r,f4r,m4r,A4,Jve,g4r,h4r,tU,p4r,u4r,_4r,y4,Yve,b4r,v4r,aU,F4r,T4r,M4r,L4,Kve,E4r,C4r,nU,w4r,A4r,y4r,x4,Zve,L4r,x4r,sU,$4r,k4r,S4r,$4,eFe,R4r,B4r,lU,P4r,I4r,q4r,k4,oFe,N4r,j4r,iU,D4r,G4r,O4r,S4,rFe,V4r,X4r,dU,z4r,Q4r,W4r,R4,tFe,H4r,U4r,cU,J4r,Y4r,K4r,B4,aFe,Z4r,eEr,fU,oEr,rEr,tEr,P4,nFe,aEr,nEr,mU,sEr,lEr,iEr,I4,ZIe,Tc,q4,sFe,BL,dEr,lFe,cEr,eqe,dr,PL,fEr,Mc,mEr,gU,gEr,hEr,hU,pEr,uEr,_Er,IL,bEr,iFe,vEr,FEr,TEr,qt,qL,MEr,dFe,EEr,CEr,Ec,wEr,cFe,AEr,yEr,pU,LEr,xEr,$Er,N4,kEr,qr,NL,SEr,fFe,REr,BEr,fn,PEr,mFe,IEr,qEr,gFe,NEr,jEr,hFe,DEr,GEr,OEr,pFe,j4,uFe,VEr,XEr,uU,zEr,QEr,WEr,D4,oqe,Cc,G4,_Fe,jL,HEr,bFe,UEr,rqe,cr,DL,JEr,wc,YEr,_U,KEr,ZEr,bU,e5r,o5r,r5r,GL,t5r,vFe,a5r,n5r,s5r,Nt,OL,l5r,FFe,i5r,d5r,Ac,c5r,TFe,f5r,m5r,vU,g5r,h5r,p5r,O4,u5r,Nr,VL,_5r,MFe,b5r,v5r,mn,F5r,EFe,T5r,M5r,CFe,E5r,C5r,wFe,w5r,A5r,y5r,AFe,V4,yFe,L5r,x5r,FU,$5r,k5r,S5r,X4,tqe,yc,z4,LFe,XL,R5r,xFe,B5r,aqe,fr,zL,P5r,Lc,I5r,TU,q5r,N5r,MU,j5r,D5r,G5r,QL,O5r,$Fe,V5r,X5r,z5r,jt,WL,Q5r,kFe,W5r,H5r,xc,U5r,SFe,J5r,Y5r,EU,K5r,Z5r,eCr,Q4,oCr,jr,HL,rCr,RFe,tCr,aCr,gn,nCr,BFe,sCr,lCr,PFe,iCr,dCr,IFe,cCr,fCr,mCr,oe,W4,qFe,gCr,hCr,CU,pCr,uCr,_Cr,H4,NFe,bCr,vCr,wU,FCr,TCr,MCr,U4,jFe,ECr,CCr,AU,wCr,ACr,yCr,J4,DFe,LCr,xCr,yU,$Cr,kCr,SCr,Y4,GFe,RCr,BCr,LU,PCr,ICr,qCr,K4,OFe,NCr,jCr,xU,DCr,GCr,OCr,Z4,VFe,VCr,XCr,$U,zCr,QCr,WCr,eE,XFe,HCr,UCr,kU,JCr,YCr,KCr,oE,zFe,ZCr,e3r,SU,o3r,r3r,t3r,rE,QFe,a3r,n3r,RU,s3r,l3r,i3r,tE,WFe,d3r,c3r,BU,f3r,m3r,g3r,aE,HFe,h3r,p3r,PU,u3r,_3r,b3r,nE,UFe,v3r,F3r,IU,T3r,M3r,E3r,sE,JFe,C3r,w3r,qU,A3r,y3r,L3r,lE,YFe,x3r,$3r,NU,k3r,S3r,R3r,iE,KFe,B3r,P3r,jU,I3r,q3r,N3r,dE,ZFe,j3r,D3r,DU,G3r,O3r,V3r,cE,e0e,X3r,z3r,GU,Q3r,W3r,H3r,fE,o0e,U3r,J3r,OU,Y3r,K3r,Z3r,mE,r0e,ewr,owr,VU,rwr,twr,awr,gE,t0e,nwr,swr,XU,lwr,iwr,dwr,hE,a0e,cwr,fwr,zU,mwr,gwr,hwr,pE,n0e,pwr,uwr,QU,_wr,bwr,vwr,uE,s0e,Fwr,Twr,WU,Mwr,Ewr,Cwr,_E,l0e,wwr,Awr,HU,ywr,Lwr,xwr,bE,nqe,$c,vE,i0e,UL,$wr,d0e,kwr,sqe,mr,JL,Swr,kc,Rwr,UU,Bwr,Pwr,JU,Iwr,qwr,Nwr,YL,jwr,c0e,Dwr,Gwr,Owr,Dt,KL,Vwr,f0e,Xwr,zwr,Sc,Qwr,m0e,Wwr,Hwr,YU,Uwr,Jwr,Ywr,FE,Kwr,Dr,ZL,Zwr,g0e,eAr,oAr,hn,rAr,h0e,tAr,aAr,p0e,nAr,sAr,u0e,lAr,iAr,dAr,ke,TE,_0e,cAr,fAr,KU,mAr,gAr,hAr,ME,b0e,pAr,uAr,ZU,_Ar,bAr,vAr,EE,v0e,FAr,TAr,eJ,MAr,EAr,CAr,CE,F0e,wAr,AAr,oJ,yAr,LAr,xAr,wE,T0e,$Ar,kAr,rJ,SAr,RAr,BAr,AE,M0e,PAr,IAr,tJ,qAr,NAr,jAr,yE,E0e,DAr,GAr,aJ,OAr,VAr,XAr,LE,C0e,zAr,QAr,nJ,WAr,HAr,UAr,xE,w0e,JAr,YAr,sJ,KAr,ZAr,e6r,$E,lqe,Rc,kE,A0e,ex,o6r,y0e,r6r,iqe,gr,ox,t6r,Bc,a6r,lJ,n6r,s6r,iJ,l6r,i6r,d6r,rx,c6r,L0e,f6r,m6r,g6r,Gt,tx,h6r,x0e,p6r,u6r,Pc,_6r,$0e,b6r,v6r,dJ,F6r,T6r,M6r,SE,E6r,Gr,ax,C6r,k0e,w6r,A6r,pn,y6r,S0e,L6r,x6r,R0e,$6r,k6r,B0e,S6r,R6r,B6r,Me,RE,P0e,P6r,I6r,cJ,q6r,N6r,j6r,BE,I0e,D6r,G6r,fJ,O6r,V6r,X6r,PE,q0e,z6r,Q6r,mJ,W6r,H6r,U6r,IE,N0e,J6r,Y6r,gJ,K6r,Z6r,eyr,qE,j0e,oyr,ryr,hJ,tyr,ayr,nyr,NE,D0e,syr,lyr,pJ,iyr,dyr,cyr,jE,G0e,fyr,myr,uJ,gyr,hyr,pyr,DE,O0e,uyr,_yr,_J,byr,vyr,Fyr,GE,V0e,Tyr,Myr,bJ,Eyr,Cyr,wyr,OE,X0e,Ayr,yyr,vJ,Lyr,xyr,$yr,VE,z0e,kyr,Syr,FJ,Ryr,Byr,Pyr,XE,Q0e,Iyr,qyr,TJ,Nyr,jyr,Dyr,zE,dqe,Ic,QE,W0e,nx,Gyr,H0e,Oyr,cqe,hr,sx,Vyr,qc,Xyr,MJ,zyr,Qyr,EJ,Wyr,Hyr,Uyr,lx,Jyr,U0e,Yyr,Kyr,Zyr,Ot,ix,eLr,J0e,oLr,rLr,Nc,tLr,Y0e,aLr,nLr,CJ,sLr,lLr,iLr,WE,dLr,Or,dx,cLr,K0e,fLr,mLr,un,gLr,Z0e,hLr,pLr,eTe,uLr,_Lr,oTe,bLr,vLr,FLr,Le,HE,rTe,TLr,MLr,wJ,ELr,CLr,wLr,UE,tTe,ALr,yLr,AJ,LLr,xLr,$Lr,JE,aTe,kLr,SLr,yJ,RLr,BLr,PLr,YE,nTe,ILr,qLr,LJ,NLr,jLr,DLr,KE,sTe,GLr,OLr,xJ,VLr,XLr,zLr,ZE,lTe,QLr,WLr,$J,HLr,ULr,JLr,e5,iTe,YLr,KLr,kJ,ZLr,exr,oxr,o5,dTe,rxr,txr,SJ,axr,nxr,sxr,r5,cTe,lxr,ixr,RJ,dxr,cxr,fxr,t5,fTe,mxr,gxr,BJ,hxr,pxr,uxr,a5,fqe,jc,n5,mTe,cx,_xr,gTe,bxr,mqe,pr,fx,vxr,Dc,Fxr,PJ,Txr,Mxr,IJ,Exr,Cxr,wxr,mx,Axr,hTe,yxr,Lxr,xxr,Vt,gx,$xr,pTe,kxr,Sxr,Gc,Rxr,uTe,Bxr,Pxr,qJ,Ixr,qxr,Nxr,s5,jxr,Vr,hx,Dxr,_Te,Gxr,Oxr,_n,Vxr,bTe,Xxr,zxr,vTe,Qxr,Wxr,FTe,Hxr,Uxr,Jxr,Se,l5,TTe,Yxr,Kxr,NJ,Zxr,e9r,o9r,i5,MTe,r9r,t9r,jJ,a9r,n9r,s9r,d5,ETe,l9r,i9r,DJ,d9r,c9r,f9r,c5,CTe,m9r,g9r,GJ,h9r,p9r,u9r,f5,wTe,_9r,b9r,OJ,v9r,F9r,T9r,m5,ATe,M9r,E9r,VJ,C9r,w9r,A9r,g5,yTe,y9r,L9r,XJ,x9r,$9r,k9r,h5,LTe,S9r,R9r,zJ,B9r,P9r,I9r,p5,xTe,q9r,N9r,QJ,j9r,D9r,G9r,u5,gqe,Oc,_5,$Te,px,O9r,kTe,V9r,hqe,ur,ux,X9r,Vc,z9r,WJ,Q9r,W9r,HJ,H9r,U9r,J9r,_x,Y9r,STe,K9r,Z9r,e$r,Xt,bx,o$r,RTe,r$r,t$r,Xc,a$r,BTe,n$r,s$r,UJ,l$r,i$r,d$r,b5,c$r,Xr,vx,f$r,PTe,m$r,g$r,bn,h$r,ITe,p$r,u$r,qTe,_$r,b$r,NTe,v$r,F$r,T$r,xe,v5,jTe,M$r,E$r,JJ,C$r,w$r,A$r,F5,DTe,y$r,L$r,YJ,x$r,$$r,k$r,T5,GTe,S$r,R$r,KJ,B$r,P$r,I$r,M5,OTe,q$r,N$r,ZJ,j$r,D$r,G$r,E5,VTe,O$r,V$r,eY,X$r,z$r,Q$r,C5,XTe,W$r,H$r,oY,U$r,J$r,Y$r,w5,zTe,K$r,Z$r,rY,ekr,okr,rkr,A5,QTe,tkr,akr,tY,nkr,skr,lkr,y5,WTe,ikr,dkr,aY,ckr,fkr,mkr,L5,HTe,gkr,hkr,nY,pkr,ukr,_kr,x5,pqe,zc,$5,UTe,Fx,bkr,JTe,vkr,uqe,_r,Tx,Fkr,Qc,Tkr,sY,Mkr,Ekr,lY,Ckr,wkr,Akr,Mx,ykr,YTe,Lkr,xkr,$kr,zt,Ex,kkr,KTe,Skr,Rkr,Wc,Bkr,ZTe,Pkr,Ikr,iY,qkr,Nkr,jkr,k5,Dkr,zr,Cx,Gkr,e7e,Okr,Vkr,vn,Xkr,o7e,zkr,Qkr,r7e,Wkr,Hkr,t7e,Ukr,Jkr,Ykr,$e,S5,a7e,Kkr,Zkr,dY,eSr,oSr,rSr,R5,n7e,tSr,aSr,cY,nSr,sSr,lSr,B5,s7e,iSr,dSr,fY,cSr,fSr,mSr,P5,l7e,gSr,hSr,mY,pSr,uSr,_Sr,I5,i7e,bSr,vSr,gY,FSr,TSr,MSr,q5,d7e,ESr,CSr,hY,wSr,ASr,ySr,N5,c7e,LSr,xSr,pY,$Sr,kSr,SSr,j5,f7e,RSr,BSr,uY,PSr,ISr,qSr,D5,m7e,NSr,jSr,_Y,DSr,GSr,OSr,G5,g7e,VSr,XSr,bY,zSr,QSr,WSr,O5,_qe,Hc,V5,h7e,wx,HSr,p7e,USr,bqe,br,Ax,JSr,Uc,YSr,vY,KSr,ZSr,FY,eRr,oRr,rRr,yx,tRr,u7e,aRr,nRr,sRr,Qt,Lx,lRr,_7e,iRr,dRr,Jc,cRr,b7e,fRr,mRr,TY,gRr,hRr,pRr,X5,uRr,Qr,xx,_Rr,v7e,bRr,vRr,Fn,FRr,F7e,TRr,MRr,T7e,ERr,CRr,M7e,wRr,ARr,yRr,De,z5,E7e,LRr,xRr,MY,$Rr,kRr,SRr,Q5,C7e,RRr,BRr,EY,PRr,IRr,qRr,W5,w7e,NRr,jRr,CY,DRr,GRr,ORr,H5,A7e,VRr,XRr,wY,zRr,QRr,WRr,U5,y7e,HRr,URr,AY,JRr,YRr,KRr,J5,L7e,ZRr,eBr,yY,oBr,rBr,tBr,Y5,x7e,aBr,nBr,LY,sBr,lBr,iBr,K5,$7e,dBr,cBr,xY,fBr,mBr,gBr,Z5,vqe,Yc,eC,k7e,$x,hBr,S7e,pBr,Fqe,vr,kx,uBr,Kc,_Br,$Y,bBr,vBr,kY,FBr,TBr,MBr,Sx,EBr,R7e,CBr,wBr,ABr,Wt,Rx,yBr,B7e,LBr,xBr,Zc,$Br,P7e,kBr,SBr,SY,RBr,BBr,PBr,oC,IBr,Wr,Bx,qBr,I7e,NBr,jBr,Tn,DBr,q7e,GBr,OBr,N7e,VBr,XBr,j7e,zBr,QBr,WBr,Ge,rC,D7e,HBr,UBr,RY,JBr,YBr,KBr,tC,G7e,ZBr,ePr,BY,oPr,rPr,tPr,aC,O7e,aPr,nPr,PY,sPr,lPr,iPr,nC,V7e,dPr,cPr,IY,fPr,mPr,gPr,sC,X7e,hPr,pPr,qY,uPr,_Pr,bPr,lC,z7e,vPr,FPr,NY,TPr,MPr,EPr,iC,Q7e,CPr,wPr,jY,APr,yPr,LPr,dC,W7e,xPr,$Pr,DY,kPr,SPr,RPr,cC,Tqe,ef,fC,H7e,Px,BPr,U7e,PPr,Mqe,Fr,Ix,IPr,of,qPr,GY,NPr,jPr,OY,DPr,GPr,OPr,qx,VPr,J7e,XPr,zPr,QPr,Ht,Nx,WPr,Y7e,HPr,UPr,rf,JPr,K7e,YPr,KPr,VY,ZPr,eIr,oIr,mC,rIr,Hr,jx,tIr,Z7e,aIr,nIr,Mn,sIr,eMe,lIr,iIr,oMe,dIr,cIr,rMe,fIr,mIr,gIr,tMe,gC,aMe,hIr,pIr,XY,uIr,_Ir,bIr,hC,Eqe,tf,pC,nMe,Dx,vIr,sMe,FIr,Cqe,Tr,Gx,TIr,af,MIr,zY,EIr,CIr,QY,wIr,AIr,yIr,Ox,LIr,lMe,xIr,$Ir,kIr,Ut,Vx,SIr,iMe,RIr,BIr,nf,PIr,dMe,IIr,qIr,WY,NIr,jIr,DIr,uC,GIr,Ur,Xx,OIr,cMe,VIr,XIr,En,zIr,fMe,QIr,WIr,mMe,HIr,UIr,gMe,JIr,YIr,KIr,zx,_C,hMe,ZIr,eqr,HY,oqr,rqr,tqr,bC,pMe,aqr,nqr,UY,sqr,lqr,iqr,vC,wqe,sf,FC,uMe,Qx,dqr,_Me,cqr,Aqe,Mr,Wx,fqr,lf,mqr,JY,gqr,hqr,YY,pqr,uqr,_qr,Hx,bqr,bMe,vqr,Fqr,Tqr,Jt,Ux,Mqr,vMe,Eqr,Cqr,df,wqr,FMe,Aqr,yqr,KY,Lqr,xqr,$qr,TC,kqr,Jr,Jx,Sqr,TMe,Rqr,Bqr,Cn,Pqr,MMe,Iqr,qqr,EMe,Nqr,jqr,CMe,Dqr,Gqr,Oqr,wMe,MC,AMe,Vqr,Xqr,ZY,zqr,Qqr,Wqr,EC,yqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Qw=new ee({}),Ww=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bf=new Hqr({props:{warning:!0,$$slots:{default:[pwt]},$$scope:{ctx:A}}}),Hw=new ee({}),Uw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L566"}}),Kw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L589"}}),ug=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[uwt]},$$scope:{ctx:A}}}),Zw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/configuration_auto.py#L711"}}),eA=new ee({}),oA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L378"}}),aA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17088/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L392"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[_wt]},$$scope:{ctx:A}}}),nA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/tokenization_auto.py#L588"}}),sA=new ee({}),lA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),cA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17088/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),Th=new Hqr({props:{$$slots:{default:[bwt]},$$scope:{ctx:A}}}),Mh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[vwt]},$$scope:{ctx:A}}}),fA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),mA=new ee({}),gA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L76"}}),uA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L90"}}),jh=new Hqr({props:{$$slots:{default:[Fwt]},$$scope:{ctx:A}}}),Dh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Twt]},$$scope:{ctx:A}}}),_A=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/processing_auto.py#L243"}}),bA=new ee({}),vA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L719"}}),TA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Vh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Mwt]},$$scope:{ctx:A}}}),MA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Ewt]},$$scope:{ctx:A}}}),EA=new ee({}),CA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L726"}}),AA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Bu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Cwt]},$$scope:{ctx:A}}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),T_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[wwt]},$$scope:{ctx:A}}}),LA=new ee({}),xA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L741"}}),kA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),E_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Awt]},$$scope:{ctx:A}}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ywt]},$$scope:{ctx:A}}}),RA=new ee({}),BA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L748"}}),IA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Lwt]},$$scope:{ctx:A}}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[xwt]},$$scope:{ctx:A}}}),NA=new ee({}),jA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L755"}}),GA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$wt]},$$scope:{ctx:A}}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[kwt]},$$scope:{ctx:A}}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L764"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Swt]},$$scope:{ctx:A}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),cb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Rwt]},$$scope:{ctx:A}}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L798"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),mb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Bwt]},$$scope:{ctx:A}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Pwt]},$$scope:{ctx:A}}}),ZA=new ee({}),e6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L805"}}),r6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Iwt]},$$scope:{ctx:A}}}),t6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Kb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[qwt]},$$scope:{ctx:A}}}),a6=new ee({}),n6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L791"}}),l6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),e2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Nwt]},$$scope:{ctx:A}}}),i6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),P2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[jwt]},$$scope:{ctx:A}}}),d6=new ee({}),c6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L773"}}),m6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Dwt]},$$scope:{ctx:A}}}),g6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Gwt]},$$scope:{ctx:A}}}),h6=new ee({}),p6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L780"}}),_6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Owt]},$$scope:{ctx:A}}}),b6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Vwt]},$$scope:{ctx:A}}}),v6=new ee({}),F6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L814"}}),M6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Xwt]},$$scope:{ctx:A}}}),E6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[zwt]},$$scope:{ctx:A}}}),C6=new ee({}),w6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L853"}}),y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Qwt]},$$scope:{ctx:A}}}),L6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Wwt]},$$scope:{ctx:A}}}),x6=new ee({}),$6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L860"}}),S6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Hwt]},$$scope:{ctx:A}}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Uwt]},$$scope:{ctx:A}}}),B6=new ee({}),P6=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L883"}}),q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Jwt]},$$scope:{ctx:A}}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Ywt]},$$scope:{ctx:A}}}),j6=new ee({}),D6=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L867"}}),O6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Kwt]},$$scope:{ctx:A}}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Zwt]},$$scope:{ctx:A}}}),X6=new ee({}),z6=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L874"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[eAt]},$$scope:{ctx:A}}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),J6=new ee({}),Y6=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L892"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L899"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L846"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),my=new ee({}),gy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L821"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L828"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_auto.py#L837"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),$y=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),Py=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),Wy=new ee({}),Hy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),oL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),sL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),fL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),WL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),KL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),Dx=new ee({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),Qx=new ee({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17088/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17088/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17088/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),gf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),Ow=o("from_pretrained()"),hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),An=a("a"),Vw=o("AutoConfig"),yn=o(", "),Ln=a("a"),Xw=o("AutoModel"),mi=o(`, and
`),xn=a("a"),zw=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),pf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),c$=o("will create a model that is an instance of "),hi=a("a"),f$=o("BertModel"),m$=o("."),Eo=l(),Ea=a("p"),g$=o("There is one class of "),uf=a("code"),h$=o("AutoModel"),Pje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),CPe=l(),pi=a("h2"),_f=a("a"),WZ=a("span"),F(Qw.$$.fragment),Ije=l(),HZ=a("span"),qje=o("Extending the Auto Classes"),wPe=l(),$n=a("p"),Nje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),UZ=a("code"),jje=o("NewModel"),Dje=o(", make sure you have a "),JZ=a("code"),Gje=o("NewModelConfig"),Oje=o(` then you can add those to the auto
classes like this:`),APe=l(),F(Ww.$$.fragment),yPe=l(),p$=a("p"),Vje=o("You will then be able to use the auto classes like you would usually do!"),LPe=l(),F(bf.$$.fragment),xPe=l(),ui=a("h2"),vf=a("a"),YZ=a("span"),F(Hw.$$.fragment),Xje=l(),KZ=a("span"),zje=o("AutoConfig"),$Pe=l(),Co=a("div"),F(Uw.$$.fragment),Qje=l(),Jw=a("p"),Wje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),u$=a("a"),Hje=o("from_pretrained()"),Uje=o(" class method."),Jje=l(),Yw=a("p"),Yje=o("This class cannot be instantiated directly using "),ZZ=a("code"),Kje=o("__init__()"),Zje=o(" (throws an error)."),eDe=l(),Er=a("div"),F(Kw.$$.fragment),oDe=l(),eee=a("p"),rDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),tDe=l(),_i=a("p"),aDe=o("The configuration class to instantiate is selected based on the "),oee=a("code"),nDe=o("model_type"),sDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ree=a("code"),lDe=o("pretrained_model_name_or_path"),iDe=o(":"),dDe=l(),y=a("ul"),Ff=a("li"),tee=a("strong"),cDe=o("albert"),fDe=o(" \u2014 "),_$=a("a"),mDe=o("AlbertConfig"),gDe=o(" (ALBERT model)"),hDe=l(),Tf=a("li"),aee=a("strong"),pDe=o("bart"),uDe=o(" \u2014 "),b$=a("a"),_De=o("BartConfig"),bDe=o(" (BART model)"),vDe=l(),Mf=a("li"),nee=a("strong"),FDe=o("beit"),TDe=o(" \u2014 "),v$=a("a"),MDe=o("BeitConfig"),EDe=o(" (BEiT model)"),CDe=l(),Ef=a("li"),see=a("strong"),wDe=o("bert"),ADe=o(" \u2014 "),F$=a("a"),yDe=o("BertConfig"),LDe=o(" (BERT model)"),xDe=l(),Cf=a("li"),lee=a("strong"),$De=o("bert-generation"),kDe=o(" \u2014 "),T$=a("a"),SDe=o("BertGenerationConfig"),RDe=o(" (Bert Generation model)"),BDe=l(),wf=a("li"),iee=a("strong"),PDe=o("big_bird"),IDe=o(" \u2014 "),M$=a("a"),qDe=o("BigBirdConfig"),NDe=o(" (BigBird model)"),jDe=l(),Af=a("li"),dee=a("strong"),DDe=o("bigbird_pegasus"),GDe=o(" \u2014 "),E$=a("a"),ODe=o("BigBirdPegasusConfig"),VDe=o(" (BigBirdPegasus model)"),XDe=l(),yf=a("li"),cee=a("strong"),zDe=o("blenderbot"),QDe=o(" \u2014 "),C$=a("a"),WDe=o("BlenderbotConfig"),HDe=o(" (Blenderbot model)"),UDe=l(),Lf=a("li"),fee=a("strong"),JDe=o("blenderbot-small"),YDe=o(" \u2014 "),w$=a("a"),KDe=o("BlenderbotSmallConfig"),ZDe=o(" (BlenderbotSmall model)"),eGe=l(),xf=a("li"),mee=a("strong"),oGe=o("camembert"),rGe=o(" \u2014 "),A$=a("a"),tGe=o("CamembertConfig"),aGe=o(" (CamemBERT model)"),nGe=l(),$f=a("li"),gee=a("strong"),sGe=o("canine"),lGe=o(" \u2014 "),y$=a("a"),iGe=o("CanineConfig"),dGe=o(" (Canine model)"),cGe=l(),kf=a("li"),hee=a("strong"),fGe=o("clip"),mGe=o(" \u2014 "),L$=a("a"),gGe=o("CLIPConfig"),hGe=o(" (CLIP model)"),pGe=l(),Sf=a("li"),pee=a("strong"),uGe=o("convbert"),_Ge=o(" \u2014 "),x$=a("a"),bGe=o("ConvBertConfig"),vGe=o(" (ConvBERT model)"),FGe=l(),Rf=a("li"),uee=a("strong"),TGe=o("convnext"),MGe=o(" \u2014 "),$$=a("a"),EGe=o("ConvNextConfig"),CGe=o(" (ConvNext model)"),wGe=l(),Bf=a("li"),_ee=a("strong"),AGe=o("ctrl"),yGe=o(" \u2014 "),k$=a("a"),LGe=o("CTRLConfig"),xGe=o(" (CTRL model)"),$Ge=l(),Pf=a("li"),bee=a("strong"),kGe=o("data2vec-audio"),SGe=o(" \u2014 "),S$=a("a"),RGe=o("Data2VecAudioConfig"),BGe=o(" (Data2VecAudio model)"),PGe=l(),If=a("li"),vee=a("strong"),IGe=o("data2vec-text"),qGe=o(" \u2014 "),R$=a("a"),NGe=o("Data2VecTextConfig"),jGe=o(" (Data2VecText model)"),DGe=l(),qf=a("li"),Fee=a("strong"),GGe=o("data2vec-vision"),OGe=o(" \u2014 "),B$=a("a"),VGe=o("Data2VecVisionConfig"),XGe=o(" (Data2VecVision model)"),zGe=l(),Nf=a("li"),Tee=a("strong"),QGe=o("deberta"),WGe=o(" \u2014 "),P$=a("a"),HGe=o("DebertaConfig"),UGe=o(" (DeBERTa model)"),JGe=l(),jf=a("li"),Mee=a("strong"),YGe=o("deberta-v2"),KGe=o(" \u2014 "),I$=a("a"),ZGe=o("DebertaV2Config"),eOe=o(" (DeBERTa-v2 model)"),oOe=l(),Df=a("li"),Eee=a("strong"),rOe=o("decision_transformer"),tOe=o(" \u2014 "),q$=a("a"),aOe=o("DecisionTransformerConfig"),nOe=o(" (Decision Transformer model)"),sOe=l(),Gf=a("li"),Cee=a("strong"),lOe=o("deit"),iOe=o(" \u2014 "),N$=a("a"),dOe=o("DeiTConfig"),cOe=o(" (DeiT model)"),fOe=l(),Of=a("li"),wee=a("strong"),mOe=o("detr"),gOe=o(" \u2014 "),j$=a("a"),hOe=o("DetrConfig"),pOe=o(" (DETR model)"),uOe=l(),Vf=a("li"),Aee=a("strong"),_Oe=o("distilbert"),bOe=o(" \u2014 "),D$=a("a"),vOe=o("DistilBertConfig"),FOe=o(" (DistilBERT model)"),TOe=l(),Xf=a("li"),yee=a("strong"),MOe=o("dpr"),EOe=o(" \u2014 "),G$=a("a"),COe=o("DPRConfig"),wOe=o(" (DPR model)"),AOe=l(),zf=a("li"),Lee=a("strong"),yOe=o("dpt"),LOe=o(" \u2014 "),O$=a("a"),xOe=o("DPTConfig"),$Oe=o(" (DPT model)"),kOe=l(),Qf=a("li"),xee=a("strong"),SOe=o("electra"),ROe=o(" \u2014 "),V$=a("a"),BOe=o("ElectraConfig"),POe=o(" (ELECTRA model)"),IOe=l(),Wf=a("li"),$ee=a("strong"),qOe=o("encoder-decoder"),NOe=o(" \u2014 "),X$=a("a"),jOe=o("EncoderDecoderConfig"),DOe=o(" (Encoder decoder model)"),GOe=l(),Hf=a("li"),kee=a("strong"),OOe=o("flaubert"),VOe=o(" \u2014 "),z$=a("a"),XOe=o("FlaubertConfig"),zOe=o(" (FlauBERT model)"),QOe=l(),Uf=a("li"),See=a("strong"),WOe=o("fnet"),HOe=o(" \u2014 "),Q$=a("a"),UOe=o("FNetConfig"),JOe=o(" (FNet model)"),YOe=l(),Jf=a("li"),Ree=a("strong"),KOe=o("fsmt"),ZOe=o(" \u2014 "),W$=a("a"),eVe=o("FSMTConfig"),oVe=o(" (FairSeq Machine-Translation model)"),rVe=l(),Yf=a("li"),Bee=a("strong"),tVe=o("funnel"),aVe=o(" \u2014 "),H$=a("a"),nVe=o("FunnelConfig"),sVe=o(" (Funnel Transformer model)"),lVe=l(),Kf=a("li"),Pee=a("strong"),iVe=o("glpn"),dVe=o(" \u2014 "),U$=a("a"),cVe=o("GLPNConfig"),fVe=o(" (GLPN model)"),mVe=l(),Zf=a("li"),Iee=a("strong"),gVe=o("gpt2"),hVe=o(" \u2014 "),J$=a("a"),pVe=o("GPT2Config"),uVe=o(" (OpenAI GPT-2 model)"),_Ve=l(),em=a("li"),qee=a("strong"),bVe=o("gpt_neo"),vVe=o(" \u2014 "),Y$=a("a"),FVe=o("GPTNeoConfig"),TVe=o(" (GPT Neo model)"),MVe=l(),om=a("li"),Nee=a("strong"),EVe=o("gptj"),CVe=o(" \u2014 "),K$=a("a"),wVe=o("GPTJConfig"),AVe=o(" (GPT-J model)"),yVe=l(),rm=a("li"),jee=a("strong"),LVe=o("hubert"),xVe=o(" \u2014 "),Z$=a("a"),$Ve=o("HubertConfig"),kVe=o(" (Hubert model)"),SVe=l(),tm=a("li"),Dee=a("strong"),RVe=o("ibert"),BVe=o(" \u2014 "),ek=a("a"),PVe=o("IBertConfig"),IVe=o(" (I-BERT model)"),qVe=l(),am=a("li"),Gee=a("strong"),NVe=o("imagegpt"),jVe=o(" \u2014 "),ok=a("a"),DVe=o("ImageGPTConfig"),GVe=o(" (ImageGPT model)"),OVe=l(),nm=a("li"),Oee=a("strong"),VVe=o("layoutlm"),XVe=o(" \u2014 "),rk=a("a"),zVe=o("LayoutLMConfig"),QVe=o(" (LayoutLM model)"),WVe=l(),sm=a("li"),Vee=a("strong"),HVe=o("layoutlmv2"),UVe=o(" \u2014 "),tk=a("a"),JVe=o("LayoutLMv2Config"),YVe=o(" (LayoutLMv2 model)"),KVe=l(),lm=a("li"),Xee=a("strong"),ZVe=o("led"),eXe=o(" \u2014 "),ak=a("a"),oXe=o("LEDConfig"),rXe=o(" (LED model)"),tXe=l(),im=a("li"),zee=a("strong"),aXe=o("longformer"),nXe=o(" \u2014 "),nk=a("a"),sXe=o("LongformerConfig"),lXe=o(" (Longformer model)"),iXe=l(),dm=a("li"),Qee=a("strong"),dXe=o("luke"),cXe=o(" \u2014 "),sk=a("a"),fXe=o("LukeConfig"),mXe=o(" (LUKE model)"),gXe=l(),cm=a("li"),Wee=a("strong"),hXe=o("lxmert"),pXe=o(" \u2014 "),lk=a("a"),uXe=o("LxmertConfig"),_Xe=o(" (LXMERT model)"),bXe=l(),fm=a("li"),Hee=a("strong"),vXe=o("m2m_100"),FXe=o(" \u2014 "),ik=a("a"),TXe=o("M2M100Config"),MXe=o(" (M2M100 model)"),EXe=l(),mm=a("li"),Uee=a("strong"),CXe=o("marian"),wXe=o(" \u2014 "),dk=a("a"),AXe=o("MarianConfig"),yXe=o(" (Marian model)"),LXe=l(),gm=a("li"),Jee=a("strong"),xXe=o("maskformer"),$Xe=o(" \u2014 "),ck=a("a"),kXe=o("MaskFormerConfig"),SXe=o(" (MaskFormer model)"),RXe=l(),hm=a("li"),Yee=a("strong"),BXe=o("mbart"),PXe=o(" \u2014 "),fk=a("a"),IXe=o("MBartConfig"),qXe=o(" (mBART model)"),NXe=l(),pm=a("li"),Kee=a("strong"),jXe=o("megatron-bert"),DXe=o(" \u2014 "),mk=a("a"),GXe=o("MegatronBertConfig"),OXe=o(" (MegatronBert model)"),VXe=l(),um=a("li"),Zee=a("strong"),XXe=o("mobilebert"),zXe=o(" \u2014 "),gk=a("a"),QXe=o("MobileBertConfig"),WXe=o(" (MobileBERT model)"),HXe=l(),_m=a("li"),eoe=a("strong"),UXe=o("mpnet"),JXe=o(" \u2014 "),hk=a("a"),YXe=o("MPNetConfig"),KXe=o(" (MPNet model)"),ZXe=l(),bm=a("li"),ooe=a("strong"),eze=o("mt5"),oze=o(" \u2014 "),pk=a("a"),rze=o("MT5Config"),tze=o(" (mT5 model)"),aze=l(),vm=a("li"),roe=a("strong"),nze=o("nystromformer"),sze=o(" \u2014 "),uk=a("a"),lze=o("NystromformerConfig"),ize=o(" (Nystromformer model)"),dze=l(),Fm=a("li"),toe=a("strong"),cze=o("openai-gpt"),fze=o(" \u2014 "),_k=a("a"),mze=o("OpenAIGPTConfig"),gze=o(" (OpenAI GPT model)"),hze=l(),Tm=a("li"),aoe=a("strong"),pze=o("opt"),uze=o(" \u2014 "),bk=a("a"),_ze=o("OPTConfig"),bze=o(" (OPT model)"),vze=l(),Mm=a("li"),noe=a("strong"),Fze=o("pegasus"),Tze=o(" \u2014 "),vk=a("a"),Mze=o("PegasusConfig"),Eze=o(" (Pegasus model)"),Cze=l(),Em=a("li"),soe=a("strong"),wze=o("perceiver"),Aze=o(" \u2014 "),Fk=a("a"),yze=o("PerceiverConfig"),Lze=o(" (Perceiver model)"),xze=l(),Cm=a("li"),loe=a("strong"),$ze=o("plbart"),kze=o(" \u2014 "),Tk=a("a"),Sze=o("PLBartConfig"),Rze=o(" (PLBart model)"),Bze=l(),wm=a("li"),ioe=a("strong"),Pze=o("poolformer"),Ize=o(" \u2014 "),Mk=a("a"),qze=o("PoolFormerConfig"),Nze=o(" (PoolFormer model)"),jze=l(),Am=a("li"),doe=a("strong"),Dze=o("prophetnet"),Gze=o(" \u2014 "),Ek=a("a"),Oze=o("ProphetNetConfig"),Vze=o(" (ProphetNet model)"),Xze=l(),ym=a("li"),coe=a("strong"),zze=o("qdqbert"),Qze=o(" \u2014 "),Ck=a("a"),Wze=o("QDQBertConfig"),Hze=o(" (QDQBert model)"),Uze=l(),Lm=a("li"),foe=a("strong"),Jze=o("rag"),Yze=o(" \u2014 "),wk=a("a"),Kze=o("RagConfig"),Zze=o(" (RAG model)"),eQe=l(),xm=a("li"),moe=a("strong"),oQe=o("realm"),rQe=o(" \u2014 "),Ak=a("a"),tQe=o("RealmConfig"),aQe=o(" (Realm model)"),nQe=l(),$m=a("li"),goe=a("strong"),sQe=o("reformer"),lQe=o(" \u2014 "),yk=a("a"),iQe=o("ReformerConfig"),dQe=o(" (Reformer model)"),cQe=l(),km=a("li"),hoe=a("strong"),fQe=o("regnet"),mQe=o(" \u2014 "),Lk=a("a"),gQe=o("RegNetConfig"),hQe=o(" (RegNet model)"),pQe=l(),Sm=a("li"),poe=a("strong"),uQe=o("rembert"),_Qe=o(" \u2014 "),xk=a("a"),bQe=o("RemBertConfig"),vQe=o(" (RemBERT model)"),FQe=l(),Rm=a("li"),uoe=a("strong"),TQe=o("resnet"),MQe=o(" \u2014 "),$k=a("a"),EQe=o("ResNetConfig"),CQe=o(" (ResNet model)"),wQe=l(),Bm=a("li"),_oe=a("strong"),AQe=o("retribert"),yQe=o(" \u2014 "),kk=a("a"),LQe=o("RetriBertConfig"),xQe=o(" (RetriBERT model)"),$Qe=l(),Pm=a("li"),boe=a("strong"),kQe=o("roberta"),SQe=o(" \u2014 "),Sk=a("a"),RQe=o("RobertaConfig"),BQe=o(" (RoBERTa model)"),PQe=l(),Im=a("li"),voe=a("strong"),IQe=o("roformer"),qQe=o(" \u2014 "),Rk=a("a"),NQe=o("RoFormerConfig"),jQe=o(" (RoFormer model)"),DQe=l(),qm=a("li"),Foe=a("strong"),GQe=o("segformer"),OQe=o(" \u2014 "),Bk=a("a"),VQe=o("SegformerConfig"),XQe=o(" (SegFormer model)"),zQe=l(),Nm=a("li"),Toe=a("strong"),QQe=o("sew"),WQe=o(" \u2014 "),Pk=a("a"),HQe=o("SEWConfig"),UQe=o(" (SEW model)"),JQe=l(),jm=a("li"),Moe=a("strong"),YQe=o("sew-d"),KQe=o(" \u2014 "),Ik=a("a"),ZQe=o("SEWDConfig"),eWe=o(" (SEW-D model)"),oWe=l(),Dm=a("li"),Eoe=a("strong"),rWe=o("speech-encoder-decoder"),tWe=o(" \u2014 "),qk=a("a"),aWe=o("SpeechEncoderDecoderConfig"),nWe=o(" (Speech Encoder decoder model)"),sWe=l(),Gm=a("li"),Coe=a("strong"),lWe=o("speech_to_text"),iWe=o(" \u2014 "),Nk=a("a"),dWe=o("Speech2TextConfig"),cWe=o(" (Speech2Text model)"),fWe=l(),Om=a("li"),woe=a("strong"),mWe=o("speech_to_text_2"),gWe=o(" \u2014 "),jk=a("a"),hWe=o("Speech2Text2Config"),pWe=o(" (Speech2Text2 model)"),uWe=l(),Vm=a("li"),Aoe=a("strong"),_We=o("splinter"),bWe=o(" \u2014 "),Dk=a("a"),vWe=o("SplinterConfig"),FWe=o(" (Splinter model)"),TWe=l(),Xm=a("li"),yoe=a("strong"),MWe=o("squeezebert"),EWe=o(" \u2014 "),Gk=a("a"),CWe=o("SqueezeBertConfig"),wWe=o(" (SqueezeBERT model)"),AWe=l(),zm=a("li"),Loe=a("strong"),yWe=o("swin"),LWe=o(" \u2014 "),Ok=a("a"),xWe=o("SwinConfig"),$We=o(" (Swin model)"),kWe=l(),Qm=a("li"),xoe=a("strong"),SWe=o("t5"),RWe=o(" \u2014 "),Vk=a("a"),BWe=o("T5Config"),PWe=o(" (T5 model)"),IWe=l(),Wm=a("li"),$oe=a("strong"),qWe=o("tapas"),NWe=o(" \u2014 "),Xk=a("a"),jWe=o("TapasConfig"),DWe=o(" (TAPAS model)"),GWe=l(),Hm=a("li"),koe=a("strong"),OWe=o("tapex"),VWe=o(" \u2014 "),zk=a("a"),XWe=o("BartConfig"),zWe=o(" (TAPEX model)"),QWe=l(),Um=a("li"),Soe=a("strong"),WWe=o("transfo-xl"),HWe=o(" \u2014 "),Qk=a("a"),UWe=o("TransfoXLConfig"),JWe=o(" (Transformer-XL model)"),YWe=l(),Jm=a("li"),Roe=a("strong"),KWe=o("trocr"),ZWe=o(" \u2014 "),Wk=a("a"),eHe=o("TrOCRConfig"),oHe=o(" (TrOCR model)"),rHe=l(),Ym=a("li"),Boe=a("strong"),tHe=o("unispeech"),aHe=o(" \u2014 "),Hk=a("a"),nHe=o("UniSpeechConfig"),sHe=o(" (UniSpeech model)"),lHe=l(),Km=a("li"),Poe=a("strong"),iHe=o("unispeech-sat"),dHe=o(" \u2014 "),Uk=a("a"),cHe=o("UniSpeechSatConfig"),fHe=o(" (UniSpeechSat model)"),mHe=l(),Zm=a("li"),Ioe=a("strong"),gHe=o("van"),hHe=o(" \u2014 "),Jk=a("a"),pHe=o("VanConfig"),uHe=o(" (VAN model)"),_He=l(),eg=a("li"),qoe=a("strong"),bHe=o("vilt"),vHe=o(" \u2014 "),Yk=a("a"),FHe=o("ViltConfig"),THe=o(" (ViLT model)"),MHe=l(),og=a("li"),Noe=a("strong"),EHe=o("vision-encoder-decoder"),CHe=o(" \u2014 "),Kk=a("a"),wHe=o("VisionEncoderDecoderConfig"),AHe=o(" (Vision Encoder decoder model)"),yHe=l(),rg=a("li"),joe=a("strong"),LHe=o("vision-text-dual-encoder"),xHe=o(" \u2014 "),Zk=a("a"),$He=o("VisionTextDualEncoderConfig"),kHe=o(" (VisionTextDualEncoder model)"),SHe=l(),tg=a("li"),Doe=a("strong"),RHe=o("visual_bert"),BHe=o(" \u2014 "),eS=a("a"),PHe=o("VisualBertConfig"),IHe=o(" (VisualBert model)"),qHe=l(),ag=a("li"),Goe=a("strong"),NHe=o("vit"),jHe=o(" \u2014 "),oS=a("a"),DHe=o("ViTConfig"),GHe=o(" (ViT model)"),OHe=l(),ng=a("li"),Ooe=a("strong"),VHe=o("vit_mae"),XHe=o(" \u2014 "),rS=a("a"),zHe=o("ViTMAEConfig"),QHe=o(" (ViTMAE model)"),WHe=l(),sg=a("li"),Voe=a("strong"),HHe=o("wav2vec2"),UHe=o(" \u2014 "),tS=a("a"),JHe=o("Wav2Vec2Config"),YHe=o(" (Wav2Vec2 model)"),KHe=l(),lg=a("li"),Xoe=a("strong"),ZHe=o("wavlm"),eUe=o(" \u2014 "),aS=a("a"),oUe=o("WavLMConfig"),rUe=o(" (WavLM model)"),tUe=l(),ig=a("li"),zoe=a("strong"),aUe=o("xglm"),nUe=o(" \u2014 "),nS=a("a"),sUe=o("XGLMConfig"),lUe=o(" (XGLM model)"),iUe=l(),dg=a("li"),Qoe=a("strong"),dUe=o("xlm"),cUe=o(" \u2014 "),sS=a("a"),fUe=o("XLMConfig"),mUe=o(" (XLM model)"),gUe=l(),cg=a("li"),Woe=a("strong"),hUe=o("xlm-prophetnet"),pUe=o(" \u2014 "),lS=a("a"),uUe=o("XLMProphetNetConfig"),_Ue=o(" (XLMProphetNet model)"),bUe=l(),fg=a("li"),Hoe=a("strong"),vUe=o("xlm-roberta"),FUe=o(" \u2014 "),iS=a("a"),TUe=o("XLMRobertaConfig"),MUe=o(" (XLM-RoBERTa model)"),EUe=l(),mg=a("li"),Uoe=a("strong"),CUe=o("xlm-roberta-xl"),wUe=o(" \u2014 "),dS=a("a"),AUe=o("XLMRobertaXLConfig"),yUe=o(" (XLM-RoBERTa-XL model)"),LUe=l(),gg=a("li"),Joe=a("strong"),xUe=o("xlnet"),$Ue=o(" \u2014 "),cS=a("a"),kUe=o("XLNetConfig"),SUe=o(" (XLNet model)"),RUe=l(),hg=a("li"),Yoe=a("strong"),BUe=o("yolos"),PUe=o(" \u2014 "),fS=a("a"),IUe=o("YolosConfig"),qUe=o(" (YOLOS model)"),NUe=l(),pg=a("li"),Koe=a("strong"),jUe=o("yoso"),DUe=o(" \u2014 "),mS=a("a"),GUe=o("YosoConfig"),OUe=o(" (YOSO model)"),VUe=l(),F(ug.$$.fragment),XUe=l(),_g=a("div"),F(Zw.$$.fragment),zUe=l(),Zoe=a("p"),QUe=o("Register a new configuration for this class."),kPe=l(),bi=a("h2"),bg=a("a"),ere=a("span"),F(eA.$$.fragment),WUe=l(),ore=a("span"),HUe=o("AutoTokenizer"),SPe=l(),wo=a("div"),F(oA.$$.fragment),UUe=l(),rA=a("p"),JUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),gS=a("a"),YUe=o("AutoTokenizer.from_pretrained()"),KUe=o(" class method."),ZUe=l(),tA=a("p"),eJe=o("This class cannot be instantiated directly using "),rre=a("code"),oJe=o("__init__()"),rJe=o(" (throws an error)."),tJe=l(),Cr=a("div"),F(aA.$$.fragment),aJe=l(),tre=a("p"),nJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sJe=l(),Ca=a("p"),lJe=o("The tokenizer class to instantiate is selected based on the "),are=a("code"),iJe=o("model_type"),dJe=o(` property of the config object (either
passed as an argument or loaded from `),nre=a("code"),cJe=o("pretrained_model_name_or_path"),fJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sre=a("code"),mJe=o("pretrained_model_name_or_path"),gJe=o(":"),hJe=l(),k=a("ul"),kn=a("li"),lre=a("strong"),pJe=o("albert"),uJe=o(" \u2014 "),hS=a("a"),_Je=o("AlbertTokenizer"),bJe=o(" or "),pS=a("a"),vJe=o("AlbertTokenizerFast"),FJe=o(" (ALBERT model)"),TJe=l(),Sn=a("li"),ire=a("strong"),MJe=o("bart"),EJe=o(" \u2014 "),uS=a("a"),CJe=o("BartTokenizer"),wJe=o(" or "),_S=a("a"),AJe=o("BartTokenizerFast"),yJe=o(" (BART model)"),LJe=l(),Rn=a("li"),dre=a("strong"),xJe=o("barthez"),$Je=o(" \u2014 "),bS=a("a"),kJe=o("BarthezTokenizer"),SJe=o(" or "),vS=a("a"),RJe=o("BarthezTokenizerFast"),BJe=o(" (BARThez model)"),PJe=l(),vg=a("li"),cre=a("strong"),IJe=o("bartpho"),qJe=o(" \u2014 "),FS=a("a"),NJe=o("BartphoTokenizer"),jJe=o(" (BARTpho model)"),DJe=l(),Bn=a("li"),fre=a("strong"),GJe=o("bert"),OJe=o(" \u2014 "),TS=a("a"),VJe=o("BertTokenizer"),XJe=o(" or "),MS=a("a"),zJe=o("BertTokenizerFast"),QJe=o(" (BERT model)"),WJe=l(),Fg=a("li"),mre=a("strong"),HJe=o("bert-generation"),UJe=o(" \u2014 "),ES=a("a"),JJe=o("BertGenerationTokenizer"),YJe=o(" (Bert Generation model)"),KJe=l(),Tg=a("li"),gre=a("strong"),ZJe=o("bert-japanese"),eYe=o(" \u2014 "),CS=a("a"),oYe=o("BertJapaneseTokenizer"),rYe=o(" (BertJapanese model)"),tYe=l(),Mg=a("li"),hre=a("strong"),aYe=o("bertweet"),nYe=o(" \u2014 "),wS=a("a"),sYe=o("BertweetTokenizer"),lYe=o(" (Bertweet model)"),iYe=l(),Pn=a("li"),pre=a("strong"),dYe=o("big_bird"),cYe=o(" \u2014 "),AS=a("a"),fYe=o("BigBirdTokenizer"),mYe=o(" or "),yS=a("a"),gYe=o("BigBirdTokenizerFast"),hYe=o(" (BigBird model)"),pYe=l(),In=a("li"),ure=a("strong"),uYe=o("bigbird_pegasus"),_Ye=o(" \u2014 "),LS=a("a"),bYe=o("PegasusTokenizer"),vYe=o(" or "),xS=a("a"),FYe=o("PegasusTokenizerFast"),TYe=o(" (BigBirdPegasus model)"),MYe=l(),qn=a("li"),_re=a("strong"),EYe=o("blenderbot"),CYe=o(" \u2014 "),$S=a("a"),wYe=o("BlenderbotTokenizer"),AYe=o(" or "),kS=a("a"),yYe=o("BlenderbotTokenizerFast"),LYe=o(" (Blenderbot model)"),xYe=l(),Eg=a("li"),bre=a("strong"),$Ye=o("blenderbot-small"),kYe=o(" \u2014 "),SS=a("a"),SYe=o("BlenderbotSmallTokenizer"),RYe=o(" (BlenderbotSmall model)"),BYe=l(),Cg=a("li"),vre=a("strong"),PYe=o("byt5"),IYe=o(" \u2014 "),RS=a("a"),qYe=o("ByT5Tokenizer"),NYe=o(" (ByT5 model)"),jYe=l(),Nn=a("li"),Fre=a("strong"),DYe=o("camembert"),GYe=o(" \u2014 "),BS=a("a"),OYe=o("CamembertTokenizer"),VYe=o(" or "),PS=a("a"),XYe=o("CamembertTokenizerFast"),zYe=o(" (CamemBERT model)"),QYe=l(),wg=a("li"),Tre=a("strong"),WYe=o("canine"),HYe=o(" \u2014 "),IS=a("a"),UYe=o("CanineTokenizer"),JYe=o(" (Canine model)"),YYe=l(),jn=a("li"),Mre=a("strong"),KYe=o("clip"),ZYe=o(" \u2014 "),qS=a("a"),eKe=o("CLIPTokenizer"),oKe=o(" or "),NS=a("a"),rKe=o("CLIPTokenizerFast"),tKe=o(" (CLIP model)"),aKe=l(),Dn=a("li"),Ere=a("strong"),nKe=o("convbert"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("ConvBertTokenizer"),iKe=o(" or "),DS=a("a"),dKe=o("ConvBertTokenizerFast"),cKe=o(" (ConvBERT model)"),fKe=l(),Gn=a("li"),Cre=a("strong"),mKe=o("cpm"),gKe=o(" \u2014 "),GS=a("a"),hKe=o("CpmTokenizer"),pKe=o(" or "),OS=a("a"),uKe=o("CpmTokenizerFast"),_Ke=o(" (CPM model)"),bKe=l(),Ag=a("li"),wre=a("strong"),vKe=o("ctrl"),FKe=o(" \u2014 "),VS=a("a"),TKe=o("CTRLTokenizer"),MKe=o(" (CTRL model)"),EKe=l(),On=a("li"),Are=a("strong"),CKe=o("data2vec-text"),wKe=o(" \u2014 "),XS=a("a"),AKe=o("RobertaTokenizer"),yKe=o(" or "),zS=a("a"),LKe=o("RobertaTokenizerFast"),xKe=o(" (Data2VecText model)"),$Ke=l(),Vn=a("li"),yre=a("strong"),kKe=o("deberta"),SKe=o(" \u2014 "),QS=a("a"),RKe=o("DebertaTokenizer"),BKe=o(" or "),WS=a("a"),PKe=o("DebertaTokenizerFast"),IKe=o(" (DeBERTa model)"),qKe=l(),Xn=a("li"),Lre=a("strong"),NKe=o("deberta-v2"),jKe=o(" \u2014 "),HS=a("a"),DKe=o("DebertaV2Tokenizer"),GKe=o(" or "),US=a("a"),OKe=o("DebertaV2TokenizerFast"),VKe=o(" (DeBERTa-v2 model)"),XKe=l(),zn=a("li"),xre=a("strong"),zKe=o("distilbert"),QKe=o(" \u2014 "),JS=a("a"),WKe=o("DistilBertTokenizer"),HKe=o(" or "),YS=a("a"),UKe=o("DistilBertTokenizerFast"),JKe=o(" (DistilBERT model)"),YKe=l(),Qn=a("li"),$re=a("strong"),KKe=o("dpr"),ZKe=o(" \u2014 "),KS=a("a"),eZe=o("DPRQuestionEncoderTokenizer"),oZe=o(" or "),ZS=a("a"),rZe=o("DPRQuestionEncoderTokenizerFast"),tZe=o(" (DPR model)"),aZe=l(),Wn=a("li"),kre=a("strong"),nZe=o("electra"),sZe=o(" \u2014 "),eR=a("a"),lZe=o("ElectraTokenizer"),iZe=o(" or "),oR=a("a"),dZe=o("ElectraTokenizerFast"),cZe=o(" (ELECTRA model)"),fZe=l(),yg=a("li"),Sre=a("strong"),mZe=o("flaubert"),gZe=o(" \u2014 "),rR=a("a"),hZe=o("FlaubertTokenizer"),pZe=o(" (FlauBERT model)"),uZe=l(),Hn=a("li"),Rre=a("strong"),_Ze=o("fnet"),bZe=o(" \u2014 "),tR=a("a"),vZe=o("FNetTokenizer"),FZe=o(" or "),aR=a("a"),TZe=o("FNetTokenizerFast"),MZe=o(" (FNet model)"),EZe=l(),Lg=a("li"),Bre=a("strong"),CZe=o("fsmt"),wZe=o(" \u2014 "),nR=a("a"),AZe=o("FSMTTokenizer"),yZe=o(" (FairSeq Machine-Translation model)"),LZe=l(),Un=a("li"),Pre=a("strong"),xZe=o("funnel"),$Ze=o(" \u2014 "),sR=a("a"),kZe=o("FunnelTokenizer"),SZe=o(" or "),lR=a("a"),RZe=o("FunnelTokenizerFast"),BZe=o(" (Funnel Transformer model)"),PZe=l(),Jn=a("li"),Ire=a("strong"),IZe=o("gpt2"),qZe=o(" \u2014 "),iR=a("a"),NZe=o("GPT2Tokenizer"),jZe=o(" or "),dR=a("a"),DZe=o("GPT2TokenizerFast"),GZe=o(" (OpenAI GPT-2 model)"),OZe=l(),Yn=a("li"),qre=a("strong"),VZe=o("gpt_neo"),XZe=o(" \u2014 "),cR=a("a"),zZe=o("GPT2Tokenizer"),QZe=o(" or "),fR=a("a"),WZe=o("GPT2TokenizerFast"),HZe=o(" (GPT Neo model)"),UZe=l(),Kn=a("li"),Nre=a("strong"),JZe=o("gptj"),YZe=o(" \u2014 "),mR=a("a"),KZe=o("GPT2Tokenizer"),ZZe=o(" or "),gR=a("a"),eeo=o("GPT2TokenizerFast"),oeo=o(" (GPT-J model)"),reo=l(),Zn=a("li"),jre=a("strong"),teo=o("herbert"),aeo=o(" \u2014 "),hR=a("a"),neo=o("HerbertTokenizer"),seo=o(" or "),pR=a("a"),leo=o("HerbertTokenizerFast"),ieo=o(" (HerBERT model)"),deo=l(),xg=a("li"),Dre=a("strong"),ceo=o("hubert"),feo=o(" \u2014 "),uR=a("a"),meo=o("Wav2Vec2CTCTokenizer"),geo=o(" (Hubert model)"),heo=l(),es=a("li"),Gre=a("strong"),peo=o("ibert"),ueo=o(" \u2014 "),_R=a("a"),_eo=o("RobertaTokenizer"),beo=o(" or "),bR=a("a"),veo=o("RobertaTokenizerFast"),Feo=o(" (I-BERT model)"),Teo=l(),os=a("li"),Ore=a("strong"),Meo=o("layoutlm"),Eeo=o(" \u2014 "),vR=a("a"),Ceo=o("LayoutLMTokenizer"),weo=o(" or "),FR=a("a"),Aeo=o("LayoutLMTokenizerFast"),yeo=o(" (LayoutLM model)"),Leo=l(),rs=a("li"),Vre=a("strong"),xeo=o("layoutlmv2"),$eo=o(" \u2014 "),TR=a("a"),keo=o("LayoutLMv2Tokenizer"),Seo=o(" or "),MR=a("a"),Reo=o("LayoutLMv2TokenizerFast"),Beo=o(" (LayoutLMv2 model)"),Peo=l(),ts=a("li"),Xre=a("strong"),Ieo=o("layoutxlm"),qeo=o(" \u2014 "),ER=a("a"),Neo=o("LayoutXLMTokenizer"),jeo=o(" or "),CR=a("a"),Deo=o("LayoutXLMTokenizerFast"),Geo=o(" (LayoutXLM model)"),Oeo=l(),as=a("li"),zre=a("strong"),Veo=o("led"),Xeo=o(" \u2014 "),wR=a("a"),zeo=o("LEDTokenizer"),Qeo=o(" or "),AR=a("a"),Weo=o("LEDTokenizerFast"),Heo=o(" (LED model)"),Ueo=l(),ns=a("li"),Qre=a("strong"),Jeo=o("longformer"),Yeo=o(" \u2014 "),yR=a("a"),Keo=o("LongformerTokenizer"),Zeo=o(" or "),LR=a("a"),eoo=o("LongformerTokenizerFast"),ooo=o(" (Longformer model)"),roo=l(),$g=a("li"),Wre=a("strong"),too=o("luke"),aoo=o(" \u2014 "),xR=a("a"),noo=o("LukeTokenizer"),soo=o(" (LUKE model)"),loo=l(),ss=a("li"),Hre=a("strong"),ioo=o("lxmert"),doo=o(" \u2014 "),$R=a("a"),coo=o("LxmertTokenizer"),foo=o(" or "),kR=a("a"),moo=o("LxmertTokenizerFast"),goo=o(" (LXMERT model)"),hoo=l(),kg=a("li"),Ure=a("strong"),poo=o("m2m_100"),uoo=o(" \u2014 "),SR=a("a"),_oo=o("M2M100Tokenizer"),boo=o(" (M2M100 model)"),voo=l(),Sg=a("li"),Jre=a("strong"),Foo=o("marian"),Too=o(" \u2014 "),RR=a("a"),Moo=o("MarianTokenizer"),Eoo=o(" (Marian model)"),Coo=l(),ls=a("li"),Yre=a("strong"),woo=o("mbart"),Aoo=o(" \u2014 "),BR=a("a"),yoo=o("MBartTokenizer"),Loo=o(" or "),PR=a("a"),xoo=o("MBartTokenizerFast"),$oo=o(" (mBART model)"),koo=l(),is=a("li"),Kre=a("strong"),Soo=o("mbart50"),Roo=o(" \u2014 "),IR=a("a"),Boo=o("MBart50Tokenizer"),Poo=o(" or "),qR=a("a"),Ioo=o("MBart50TokenizerFast"),qoo=o(" (mBART-50 model)"),Noo=l(),ds=a("li"),Zre=a("strong"),joo=o("megatron-bert"),Doo=o(" \u2014 "),NR=a("a"),Goo=o("BertTokenizer"),Ooo=o(" or "),jR=a("a"),Voo=o("BertTokenizerFast"),Xoo=o(" (MegatronBert model)"),zoo=l(),Rg=a("li"),ete=a("strong"),Qoo=o("mluke"),Woo=o(" \u2014 "),DR=a("a"),Hoo=o("MLukeTokenizer"),Uoo=o(" (mLUKE model)"),Joo=l(),cs=a("li"),ote=a("strong"),Yoo=o("mobilebert"),Koo=o(" \u2014 "),GR=a("a"),Zoo=o("MobileBertTokenizer"),ero=o(" or "),OR=a("a"),oro=o("MobileBertTokenizerFast"),rro=o(" (MobileBERT model)"),tro=l(),fs=a("li"),rte=a("strong"),aro=o("mpnet"),nro=o(" \u2014 "),VR=a("a"),sro=o("MPNetTokenizer"),lro=o(" or "),XR=a("a"),iro=o("MPNetTokenizerFast"),dro=o(" (MPNet model)"),cro=l(),ms=a("li"),tte=a("strong"),fro=o("mt5"),mro=o(" \u2014 "),zR=a("a"),gro=o("MT5Tokenizer"),hro=o(" or "),QR=a("a"),pro=o("MT5TokenizerFast"),uro=o(" (mT5 model)"),_ro=l(),gs=a("li"),ate=a("strong"),bro=o("nystromformer"),vro=o(" \u2014 "),WR=a("a"),Fro=o("AlbertTokenizer"),Tro=o(" or "),HR=a("a"),Mro=o("AlbertTokenizerFast"),Ero=o(" (Nystromformer model)"),Cro=l(),hs=a("li"),nte=a("strong"),wro=o("openai-gpt"),Aro=o(" \u2014 "),UR=a("a"),yro=o("OpenAIGPTTokenizer"),Lro=o(" or "),JR=a("a"),xro=o("OpenAIGPTTokenizerFast"),$ro=o(" (OpenAI GPT model)"),kro=l(),ps=a("li"),ste=a("strong"),Sro=o("opt"),Rro=o(" \u2014 "),YR=a("a"),Bro=o("GPT2Tokenizer"),Pro=o(" or "),KR=a("a"),Iro=o("GPT2TokenizerFast"),qro=o(" (OPT model)"),Nro=l(),us=a("li"),lte=a("strong"),jro=o("pegasus"),Dro=o(" \u2014 "),ZR=a("a"),Gro=o("PegasusTokenizer"),Oro=o(" or "),eB=a("a"),Vro=o("PegasusTokenizerFast"),Xro=o(" (Pegasus model)"),zro=l(),Bg=a("li"),ite=a("strong"),Qro=o("perceiver"),Wro=o(" \u2014 "),oB=a("a"),Hro=o("PerceiverTokenizer"),Uro=o(" (Perceiver model)"),Jro=l(),Pg=a("li"),dte=a("strong"),Yro=o("phobert"),Kro=o(" \u2014 "),rB=a("a"),Zro=o("PhobertTokenizer"),eto=o(" (PhoBERT model)"),oto=l(),Ig=a("li"),cte=a("strong"),rto=o("plbart"),tto=o(" \u2014 "),tB=a("a"),ato=o("PLBartTokenizer"),nto=o(" (PLBart model)"),sto=l(),qg=a("li"),fte=a("strong"),lto=o("prophetnet"),ito=o(" \u2014 "),aB=a("a"),dto=o("ProphetNetTokenizer"),cto=o(" (ProphetNet model)"),fto=l(),_s=a("li"),mte=a("strong"),mto=o("qdqbert"),gto=o(" \u2014 "),nB=a("a"),hto=o("BertTokenizer"),pto=o(" or "),sB=a("a"),uto=o("BertTokenizerFast"),_to=o(" (QDQBert model)"),bto=l(),Ng=a("li"),gte=a("strong"),vto=o("rag"),Fto=o(" \u2014 "),lB=a("a"),Tto=o("RagTokenizer"),Mto=o(" (RAG model)"),Eto=l(),bs=a("li"),hte=a("strong"),Cto=o("realm"),wto=o(" \u2014 "),iB=a("a"),Ato=o("RealmTokenizer"),yto=o(" or "),dB=a("a"),Lto=o("RealmTokenizerFast"),xto=o(" (Realm model)"),$to=l(),vs=a("li"),pte=a("strong"),kto=o("reformer"),Sto=o(" \u2014 "),cB=a("a"),Rto=o("ReformerTokenizer"),Bto=o(" or "),fB=a("a"),Pto=o("ReformerTokenizerFast"),Ito=o(" (Reformer model)"),qto=l(),Fs=a("li"),ute=a("strong"),Nto=o("rembert"),jto=o(" \u2014 "),mB=a("a"),Dto=o("RemBertTokenizer"),Gto=o(" or "),gB=a("a"),Oto=o("RemBertTokenizerFast"),Vto=o(" (RemBERT model)"),Xto=l(),Ts=a("li"),_te=a("strong"),zto=o("retribert"),Qto=o(" \u2014 "),hB=a("a"),Wto=o("RetriBertTokenizer"),Hto=o(" or "),pB=a("a"),Uto=o("RetriBertTokenizerFast"),Jto=o(" (RetriBERT model)"),Yto=l(),Ms=a("li"),bte=a("strong"),Kto=o("roberta"),Zto=o(" \u2014 "),uB=a("a"),eao=o("RobertaTokenizer"),oao=o(" or "),_B=a("a"),rao=o("RobertaTokenizerFast"),tao=o(" (RoBERTa model)"),aao=l(),Es=a("li"),vte=a("strong"),nao=o("roformer"),sao=o(" \u2014 "),bB=a("a"),lao=o("RoFormerTokenizer"),iao=o(" or "),vB=a("a"),dao=o("RoFormerTokenizerFast"),cao=o(" (RoFormer model)"),fao=l(),jg=a("li"),Fte=a("strong"),mao=o("speech_to_text"),gao=o(" \u2014 "),FB=a("a"),hao=o("Speech2TextTokenizer"),pao=o(" (Speech2Text model)"),uao=l(),Dg=a("li"),Tte=a("strong"),_ao=o("speech_to_text_2"),bao=o(" \u2014 "),TB=a("a"),vao=o("Speech2Text2Tokenizer"),Fao=o(" (Speech2Text2 model)"),Tao=l(),Cs=a("li"),Mte=a("strong"),Mao=o("splinter"),Eao=o(" \u2014 "),MB=a("a"),Cao=o("SplinterTokenizer"),wao=o(" or "),EB=a("a"),Aao=o("SplinterTokenizerFast"),yao=o(" (Splinter model)"),Lao=l(),ws=a("li"),Ete=a("strong"),xao=o("squeezebert"),$ao=o(" \u2014 "),CB=a("a"),kao=o("SqueezeBertTokenizer"),Sao=o(" or "),wB=a("a"),Rao=o("SqueezeBertTokenizerFast"),Bao=o(" (SqueezeBERT model)"),Pao=l(),As=a("li"),Cte=a("strong"),Iao=o("t5"),qao=o(" \u2014 "),AB=a("a"),Nao=o("T5Tokenizer"),jao=o(" or "),yB=a("a"),Dao=o("T5TokenizerFast"),Gao=o(" (T5 model)"),Oao=l(),Gg=a("li"),wte=a("strong"),Vao=o("tapas"),Xao=o(" \u2014 "),LB=a("a"),zao=o("TapasTokenizer"),Qao=o(" (TAPAS model)"),Wao=l(),Og=a("li"),Ate=a("strong"),Hao=o("tapex"),Uao=o(" \u2014 "),xB=a("a"),Jao=o("TapexTokenizer"),Yao=o(" (TAPEX model)"),Kao=l(),Vg=a("li"),yte=a("strong"),Zao=o("transfo-xl"),eno=o(" \u2014 "),$B=a("a"),ono=o("TransfoXLTokenizer"),rno=o(" (Transformer-XL model)"),tno=l(),ys=a("li"),Lte=a("strong"),ano=o("visual_bert"),nno=o(" \u2014 "),kB=a("a"),sno=o("BertTokenizer"),lno=o(" or "),SB=a("a"),ino=o("BertTokenizerFast"),dno=o(" (VisualBert model)"),cno=l(),Xg=a("li"),xte=a("strong"),fno=o("wav2vec2"),mno=o(" \u2014 "),RB=a("a"),gno=o("Wav2Vec2CTCTokenizer"),hno=o(" (Wav2Vec2 model)"),pno=l(),zg=a("li"),$te=a("strong"),uno=o("wav2vec2_phoneme"),_no=o(" \u2014 "),BB=a("a"),bno=o("Wav2Vec2PhonemeCTCTokenizer"),vno=o(" (Wav2Vec2Phoneme model)"),Fno=l(),Ls=a("li"),kte=a("strong"),Tno=o("xglm"),Mno=o(" \u2014 "),PB=a("a"),Eno=o("XGLMTokenizer"),Cno=o(" or "),IB=a("a"),wno=o("XGLMTokenizerFast"),Ano=o(" (XGLM model)"),yno=l(),Qg=a("li"),Ste=a("strong"),Lno=o("xlm"),xno=o(" \u2014 "),qB=a("a"),$no=o("XLMTokenizer"),kno=o(" (XLM model)"),Sno=l(),Wg=a("li"),Rte=a("strong"),Rno=o("xlm-prophetnet"),Bno=o(" \u2014 "),NB=a("a"),Pno=o("XLMProphetNetTokenizer"),Ino=o(" (XLMProphetNet model)"),qno=l(),xs=a("li"),Bte=a("strong"),Nno=o("xlm-roberta"),jno=o(" \u2014 "),jB=a("a"),Dno=o("XLMRobertaTokenizer"),Gno=o(" or "),DB=a("a"),Ono=o("XLMRobertaTokenizerFast"),Vno=o(" (XLM-RoBERTa model)"),Xno=l(),$s=a("li"),Pte=a("strong"),zno=o("xlm-roberta-xl"),Qno=o(" \u2014 "),GB=a("a"),Wno=o("RobertaTokenizer"),Hno=o(" or "),OB=a("a"),Uno=o("RobertaTokenizerFast"),Jno=o(" (XLM-RoBERTa-XL model)"),Yno=l(),ks=a("li"),Ite=a("strong"),Kno=o("xlnet"),Zno=o(" \u2014 "),VB=a("a"),eso=o("XLNetTokenizer"),oso=o(" or "),XB=a("a"),rso=o("XLNetTokenizerFast"),tso=o(" (XLNet model)"),aso=l(),Ss=a("li"),qte=a("strong"),nso=o("yoso"),sso=o(" \u2014 "),zB=a("a"),lso=o("AlbertTokenizer"),iso=o(" or "),QB=a("a"),dso=o("AlbertTokenizerFast"),cso=o(" (YOSO model)"),fso=l(),F(Hg.$$.fragment),mso=l(),Ug=a("div"),F(nA.$$.fragment),gso=l(),Nte=a("p"),hso=o("Register a new tokenizer in this mapping."),RPe=l(),vi=a("h2"),Jg=a("a"),jte=a("span"),F(sA.$$.fragment),pso=l(),Dte=a("span"),uso=o("AutoFeatureExtractor"),BPe=l(),Ao=a("div"),F(lA.$$.fragment),_so=l(),iA=a("p"),bso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=a("a"),vso=o("AutoFeatureExtractor.from_pretrained()"),Fso=o(" class method."),Tso=l(),dA=a("p"),Mso=o("This class cannot be instantiated directly using "),Gte=a("code"),Eso=o("__init__()"),Cso=o(" (throws an error)."),wso=l(),Qe=a("div"),F(cA.$$.fragment),Aso=l(),Ote=a("p"),yso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lso=l(),wa=a("p"),xso=o("The feature extractor class to instantiate is selected based on the "),Vte=a("code"),$so=o("model_type"),kso=o(` property of the config object
(either passed as an argument or loaded from `),Xte=a("code"),Sso=o("pretrained_model_name_or_path"),Rso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zte=a("code"),Bso=o("pretrained_model_name_or_path"),Pso=o(":"),Iso=l(),te=a("ul"),Yg=a("li"),Qte=a("strong"),qso=o("beit"),Nso=o(" \u2014 "),HB=a("a"),jso=o("BeitFeatureExtractor"),Dso=o(" (BEiT model)"),Gso=l(),Kg=a("li"),Wte=a("strong"),Oso=o("clip"),Vso=o(" \u2014 "),UB=a("a"),Xso=o("CLIPFeatureExtractor"),zso=o(" (CLIP model)"),Qso=l(),Zg=a("li"),Hte=a("strong"),Wso=o("convnext"),Hso=o(" \u2014 "),JB=a("a"),Uso=o("ConvNextFeatureExtractor"),Jso=o(" (ConvNext model)"),Yso=l(),eh=a("li"),Ute=a("strong"),Kso=o("data2vec-audio"),Zso=o(" \u2014 "),YB=a("a"),elo=o("Wav2Vec2FeatureExtractor"),olo=o(" (Data2VecAudio model)"),rlo=l(),oh=a("li"),Jte=a("strong"),tlo=o("data2vec-vision"),alo=o(" \u2014 "),KB=a("a"),nlo=o("BeitFeatureExtractor"),slo=o(" (Data2VecVision model)"),llo=l(),rh=a("li"),Yte=a("strong"),ilo=o("deit"),dlo=o(" \u2014 "),ZB=a("a"),clo=o("DeiTFeatureExtractor"),flo=o(" (DeiT model)"),mlo=l(),th=a("li"),Kte=a("strong"),glo=o("detr"),hlo=o(" \u2014 "),eP=a("a"),plo=o("DetrFeatureExtractor"),ulo=o(" (DETR model)"),_lo=l(),ah=a("li"),Zte=a("strong"),blo=o("dpt"),vlo=o(" \u2014 "),oP=a("a"),Flo=o("DPTFeatureExtractor"),Tlo=o(" (DPT model)"),Mlo=l(),nh=a("li"),eae=a("strong"),Elo=o("glpn"),Clo=o(" \u2014 "),rP=a("a"),wlo=o("GLPNFeatureExtractor"),Alo=o(" (GLPN model)"),ylo=l(),sh=a("li"),oae=a("strong"),Llo=o("hubert"),xlo=o(" \u2014 "),tP=a("a"),$lo=o("Wav2Vec2FeatureExtractor"),klo=o(" (Hubert model)"),Slo=l(),lh=a("li"),rae=a("strong"),Rlo=o("layoutlmv2"),Blo=o(" \u2014 "),aP=a("a"),Plo=o("LayoutLMv2FeatureExtractor"),Ilo=o(" (LayoutLMv2 model)"),qlo=l(),ih=a("li"),tae=a("strong"),Nlo=o("maskformer"),jlo=o(" \u2014 "),nP=a("a"),Dlo=o("MaskFormerFeatureExtractor"),Glo=o(" (MaskFormer model)"),Olo=l(),dh=a("li"),aae=a("strong"),Vlo=o("perceiver"),Xlo=o(" \u2014 "),sP=a("a"),zlo=o("PerceiverFeatureExtractor"),Qlo=o(" (Perceiver model)"),Wlo=l(),ch=a("li"),nae=a("strong"),Hlo=o("poolformer"),Ulo=o(" \u2014 "),lP=a("a"),Jlo=o("PoolFormerFeatureExtractor"),Ylo=o(" (PoolFormer model)"),Klo=l(),fh=a("li"),sae=a("strong"),Zlo=o("regnet"),eio=o(" \u2014 "),iP=a("a"),oio=o("ConvNextFeatureExtractor"),rio=o(" (RegNet model)"),tio=l(),mh=a("li"),lae=a("strong"),aio=o("resnet"),nio=o(" \u2014 "),dP=a("a"),sio=o("ConvNextFeatureExtractor"),lio=o(" (ResNet model)"),iio=l(),gh=a("li"),iae=a("strong"),dio=o("segformer"),cio=o(" \u2014 "),cP=a("a"),fio=o("SegformerFeatureExtractor"),mio=o(" (SegFormer model)"),gio=l(),hh=a("li"),dae=a("strong"),hio=o("speech_to_text"),pio=o(" \u2014 "),fP=a("a"),uio=o("Speech2TextFeatureExtractor"),_io=o(" (Speech2Text model)"),bio=l(),ph=a("li"),cae=a("strong"),vio=o("swin"),Fio=o(" \u2014 "),mP=a("a"),Tio=o("ViTFeatureExtractor"),Mio=o(" (Swin model)"),Eio=l(),uh=a("li"),fae=a("strong"),Cio=o("van"),wio=o(" \u2014 "),gP=a("a"),Aio=o("ConvNextFeatureExtractor"),yio=o(" (VAN model)"),Lio=l(),_h=a("li"),mae=a("strong"),xio=o("vit"),$io=o(" \u2014 "),hP=a("a"),kio=o("ViTFeatureExtractor"),Sio=o(" (ViT model)"),Rio=l(),bh=a("li"),gae=a("strong"),Bio=o("vit_mae"),Pio=o(" \u2014 "),pP=a("a"),Iio=o("ViTFeatureExtractor"),qio=o(" (ViTMAE model)"),Nio=l(),vh=a("li"),hae=a("strong"),jio=o("wav2vec2"),Dio=o(" \u2014 "),uP=a("a"),Gio=o("Wav2Vec2FeatureExtractor"),Oio=o(" (Wav2Vec2 model)"),Vio=l(),Fh=a("li"),pae=a("strong"),Xio=o("yolos"),zio=o(" \u2014 "),_P=a("a"),Qio=o("YolosFeatureExtractor"),Wio=o(" (YOLOS model)"),Hio=l(),F(Th.$$.fragment),Uio=l(),F(Mh.$$.fragment),Jio=l(),Eh=a("div"),F(fA.$$.fragment),Yio=l(),uae=a("p"),Kio=o("Register a new feature extractor for this class."),PPe=l(),Fi=a("h2"),Ch=a("a"),_ae=a("span"),F(mA.$$.fragment),Zio=l(),bae=a("span"),edo=o("AutoProcessor"),IPe=l(),yo=a("div"),F(gA.$$.fragment),odo=l(),hA=a("p"),rdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bP=a("a"),tdo=o("AutoProcessor.from_pretrained()"),ado=o(" class method."),ndo=l(),pA=a("p"),sdo=o("This class cannot be instantiated directly using "),vae=a("code"),ldo=o("__init__()"),ido=o(" (throws an error)."),ddo=l(),We=a("div"),F(uA.$$.fragment),cdo=l(),Fae=a("p"),fdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mdo=l(),Ti=a("p"),gdo=o("The processor class to instantiate is selected based on the "),Tae=a("code"),hdo=o("model_type"),pdo=o(` property of the config object (either
passed as an argument or loaded from `),Mae=a("code"),udo=o("pretrained_model_name_or_path"),_do=o(" if possible):"),bdo=l(),be=a("ul"),wh=a("li"),Eae=a("strong"),vdo=o("clip"),Fdo=o(" \u2014 "),vP=a("a"),Tdo=o("CLIPProcessor"),Mdo=o(" (CLIP model)"),Edo=l(),Ah=a("li"),Cae=a("strong"),Cdo=o("layoutlmv2"),wdo=o(" \u2014 "),FP=a("a"),Ado=o("LayoutLMv2Processor"),ydo=o(" (LayoutLMv2 model)"),Ldo=l(),yh=a("li"),wae=a("strong"),xdo=o("layoutxlm"),$do=o(" \u2014 "),TP=a("a"),kdo=o("LayoutXLMProcessor"),Sdo=o(" (LayoutXLM model)"),Rdo=l(),Lh=a("li"),Aae=a("strong"),Bdo=o("sew"),Pdo=o(" \u2014 "),MP=a("a"),Ido=o("Wav2Vec2Processor"),qdo=o(" (SEW model)"),Ndo=l(),xh=a("li"),yae=a("strong"),jdo=o("sew-d"),Ddo=o(" \u2014 "),EP=a("a"),Gdo=o("Wav2Vec2Processor"),Odo=o(" (SEW-D model)"),Vdo=l(),$h=a("li"),Lae=a("strong"),Xdo=o("speech_to_text"),zdo=o(" \u2014 "),CP=a("a"),Qdo=o("Speech2TextProcessor"),Wdo=o(" (Speech2Text model)"),Hdo=l(),kh=a("li"),xae=a("strong"),Udo=o("speech_to_text_2"),Jdo=o(" \u2014 "),wP=a("a"),Ydo=o("Speech2Text2Processor"),Kdo=o(" (Speech2Text2 model)"),Zdo=l(),Sh=a("li"),$ae=a("strong"),eco=o("trocr"),oco=o(" \u2014 "),AP=a("a"),rco=o("TrOCRProcessor"),tco=o(" (TrOCR model)"),aco=l(),Rh=a("li"),kae=a("strong"),nco=o("unispeech"),sco=o(" \u2014 "),yP=a("a"),lco=o("Wav2Vec2Processor"),ico=o(" (UniSpeech model)"),dco=l(),Bh=a("li"),Sae=a("strong"),cco=o("unispeech-sat"),fco=o(" \u2014 "),LP=a("a"),mco=o("Wav2Vec2Processor"),gco=o(" (UniSpeechSat model)"),hco=l(),Ph=a("li"),Rae=a("strong"),pco=o("vilt"),uco=o(" \u2014 "),xP=a("a"),_co=o("ViltProcessor"),bco=o(" (ViLT model)"),vco=l(),Ih=a("li"),Bae=a("strong"),Fco=o("vision-text-dual-encoder"),Tco=o(" \u2014 "),$P=a("a"),Mco=o("VisionTextDualEncoderProcessor"),Eco=o(" (VisionTextDualEncoder model)"),Cco=l(),qh=a("li"),Pae=a("strong"),wco=o("wav2vec2"),Aco=o(" \u2014 "),kP=a("a"),yco=o("Wav2Vec2Processor"),Lco=o(" (Wav2Vec2 model)"),xco=l(),Nh=a("li"),Iae=a("strong"),$co=o("wavlm"),kco=o(" \u2014 "),SP=a("a"),Sco=o("Wav2Vec2Processor"),Rco=o(" (WavLM model)"),Bco=l(),F(jh.$$.fragment),Pco=l(),F(Dh.$$.fragment),Ico=l(),Gh=a("div"),F(_A.$$.fragment),qco=l(),qae=a("p"),Nco=o("Register a new processor for this class."),qPe=l(),Mi=a("h2"),Oh=a("a"),Nae=a("span"),F(bA.$$.fragment),jco=l(),jae=a("span"),Dco=o("AutoModel"),NPe=l(),Lo=a("div"),F(vA.$$.fragment),Gco=l(),Ei=a("p"),Oco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RP=a("a"),Vco=o("from_pretrained()"),Xco=o(" class method or the "),BP=a("a"),zco=o("from_config()"),Qco=o(` class
method.`),Wco=l(),FA=a("p"),Hco=o("This class cannot be instantiated directly using "),Dae=a("code"),Uco=o("__init__()"),Jco=o(" (throws an error)."),Yco=l(),ot=a("div"),F(TA.$$.fragment),Kco=l(),Gae=a("p"),Zco=o("Instantiates one of the base model classes of the library from a configuration."),efo=l(),Ci=a("p"),ofo=o(`Note:
Loading a model from its configuration file does `),Oae=a("strong"),rfo=o("not"),tfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PP=a("a"),afo=o("from_pretrained()"),nfo=o(" to load the model weights."),sfo=l(),F(Vh.$$.fragment),lfo=l(),He=a("div"),F(MA.$$.fragment),ifo=l(),Vae=a("p"),dfo=o("Instantiate one of the base model classes of the library from a pretrained model."),cfo=l(),Aa=a("p"),ffo=o("The model class to instantiate is selected based on the "),Xae=a("code"),mfo=o("model_type"),gfo=o(` property of the config object (either
passed as an argument or loaded from `),zae=a("code"),hfo=o("pretrained_model_name_or_path"),pfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qae=a("code"),ufo=o("pretrained_model_name_or_path"),_fo=o(":"),bfo=l(),x=a("ul"),Xh=a("li"),Wae=a("strong"),vfo=o("albert"),Ffo=o(" \u2014 "),IP=a("a"),Tfo=o("AlbertModel"),Mfo=o(" (ALBERT model)"),Efo=l(),zh=a("li"),Hae=a("strong"),Cfo=o("bart"),wfo=o(" \u2014 "),qP=a("a"),Afo=o("BartModel"),yfo=o(" (BART model)"),Lfo=l(),Qh=a("li"),Uae=a("strong"),xfo=o("beit"),$fo=o(" \u2014 "),NP=a("a"),kfo=o("BeitModel"),Sfo=o(" (BEiT model)"),Rfo=l(),Wh=a("li"),Jae=a("strong"),Bfo=o("bert"),Pfo=o(" \u2014 "),jP=a("a"),Ifo=o("BertModel"),qfo=o(" (BERT model)"),Nfo=l(),Hh=a("li"),Yae=a("strong"),jfo=o("bert-generation"),Dfo=o(" \u2014 "),DP=a("a"),Gfo=o("BertGenerationEncoder"),Ofo=o(" (Bert Generation model)"),Vfo=l(),Uh=a("li"),Kae=a("strong"),Xfo=o("big_bird"),zfo=o(" \u2014 "),GP=a("a"),Qfo=o("BigBirdModel"),Wfo=o(" (BigBird model)"),Hfo=l(),Jh=a("li"),Zae=a("strong"),Ufo=o("bigbird_pegasus"),Jfo=o(" \u2014 "),OP=a("a"),Yfo=o("BigBirdPegasusModel"),Kfo=o(" (BigBirdPegasus model)"),Zfo=l(),Yh=a("li"),ene=a("strong"),emo=o("blenderbot"),omo=o(" \u2014 "),VP=a("a"),rmo=o("BlenderbotModel"),tmo=o(" (Blenderbot model)"),amo=l(),Kh=a("li"),one=a("strong"),nmo=o("blenderbot-small"),smo=o(" \u2014 "),XP=a("a"),lmo=o("BlenderbotSmallModel"),imo=o(" (BlenderbotSmall model)"),dmo=l(),Zh=a("li"),rne=a("strong"),cmo=o("camembert"),fmo=o(" \u2014 "),zP=a("a"),mmo=o("CamembertModel"),gmo=o(" (CamemBERT model)"),hmo=l(),ep=a("li"),tne=a("strong"),pmo=o("canine"),umo=o(" \u2014 "),QP=a("a"),_mo=o("CanineModel"),bmo=o(" (Canine model)"),vmo=l(),op=a("li"),ane=a("strong"),Fmo=o("clip"),Tmo=o(" \u2014 "),WP=a("a"),Mmo=o("CLIPModel"),Emo=o(" (CLIP model)"),Cmo=l(),rp=a("li"),nne=a("strong"),wmo=o("convbert"),Amo=o(" \u2014 "),HP=a("a"),ymo=o("ConvBertModel"),Lmo=o(" (ConvBERT model)"),xmo=l(),tp=a("li"),sne=a("strong"),$mo=o("convnext"),kmo=o(" \u2014 "),UP=a("a"),Smo=o("ConvNextModel"),Rmo=o(" (ConvNext model)"),Bmo=l(),ap=a("li"),lne=a("strong"),Pmo=o("ctrl"),Imo=o(" \u2014 "),JP=a("a"),qmo=o("CTRLModel"),Nmo=o(" (CTRL model)"),jmo=l(),np=a("li"),ine=a("strong"),Dmo=o("data2vec-audio"),Gmo=o(" \u2014 "),YP=a("a"),Omo=o("Data2VecAudioModel"),Vmo=o(" (Data2VecAudio model)"),Xmo=l(),sp=a("li"),dne=a("strong"),zmo=o("data2vec-text"),Qmo=o(" \u2014 "),KP=a("a"),Wmo=o("Data2VecTextModel"),Hmo=o(" (Data2VecText model)"),Umo=l(),lp=a("li"),cne=a("strong"),Jmo=o("data2vec-vision"),Ymo=o(" \u2014 "),ZP=a("a"),Kmo=o("Data2VecVisionModel"),Zmo=o(" (Data2VecVision model)"),ego=l(),ip=a("li"),fne=a("strong"),ogo=o("deberta"),rgo=o(" \u2014 "),eI=a("a"),tgo=o("DebertaModel"),ago=o(" (DeBERTa model)"),ngo=l(),dp=a("li"),mne=a("strong"),sgo=o("deberta-v2"),lgo=o(" \u2014 "),oI=a("a"),igo=o("DebertaV2Model"),dgo=o(" (DeBERTa-v2 model)"),cgo=l(),cp=a("li"),gne=a("strong"),fgo=o("decision_transformer"),mgo=o(" \u2014 "),rI=a("a"),ggo=o("DecisionTransformerModel"),hgo=o(" (Decision Transformer model)"),pgo=l(),fp=a("li"),hne=a("strong"),ugo=o("deit"),_go=o(" \u2014 "),tI=a("a"),bgo=o("DeiTModel"),vgo=o(" (DeiT model)"),Fgo=l(),mp=a("li"),pne=a("strong"),Tgo=o("detr"),Mgo=o(" \u2014 "),aI=a("a"),Ego=o("DetrModel"),Cgo=o(" (DETR model)"),wgo=l(),gp=a("li"),une=a("strong"),Ago=o("distilbert"),ygo=o(" \u2014 "),nI=a("a"),Lgo=o("DistilBertModel"),xgo=o(" (DistilBERT model)"),$go=l(),hp=a("li"),_ne=a("strong"),kgo=o("dpr"),Sgo=o(" \u2014 "),sI=a("a"),Rgo=o("DPRQuestionEncoder"),Bgo=o(" (DPR model)"),Pgo=l(),pp=a("li"),bne=a("strong"),Igo=o("dpt"),qgo=o(" \u2014 "),lI=a("a"),Ngo=o("DPTModel"),jgo=o(" (DPT model)"),Dgo=l(),up=a("li"),vne=a("strong"),Ggo=o("electra"),Ogo=o(" \u2014 "),iI=a("a"),Vgo=o("ElectraModel"),Xgo=o(" (ELECTRA model)"),zgo=l(),_p=a("li"),Fne=a("strong"),Qgo=o("flaubert"),Wgo=o(" \u2014 "),dI=a("a"),Hgo=o("FlaubertModel"),Ugo=o(" (FlauBERT model)"),Jgo=l(),bp=a("li"),Tne=a("strong"),Ygo=o("fnet"),Kgo=o(" \u2014 "),cI=a("a"),Zgo=o("FNetModel"),eho=o(" (FNet model)"),oho=l(),vp=a("li"),Mne=a("strong"),rho=o("fsmt"),tho=o(" \u2014 "),fI=a("a"),aho=o("FSMTModel"),nho=o(" (FairSeq Machine-Translation model)"),sho=l(),Rs=a("li"),Ene=a("strong"),lho=o("funnel"),iho=o(" \u2014 "),mI=a("a"),dho=o("FunnelModel"),cho=o(" or "),gI=a("a"),fho=o("FunnelBaseModel"),mho=o(" (Funnel Transformer model)"),gho=l(),Fp=a("li"),Cne=a("strong"),hho=o("glpn"),pho=o(" \u2014 "),hI=a("a"),uho=o("GLPNModel"),_ho=o(" (GLPN model)"),bho=l(),Tp=a("li"),wne=a("strong"),vho=o("gpt2"),Fho=o(" \u2014 "),pI=a("a"),Tho=o("GPT2Model"),Mho=o(" (OpenAI GPT-2 model)"),Eho=l(),Mp=a("li"),Ane=a("strong"),Cho=o("gpt_neo"),who=o(" \u2014 "),uI=a("a"),Aho=o("GPTNeoModel"),yho=o(" (GPT Neo model)"),Lho=l(),Ep=a("li"),yne=a("strong"),xho=o("gptj"),$ho=o(" \u2014 "),_I=a("a"),kho=o("GPTJModel"),Sho=o(" (GPT-J model)"),Rho=l(),Cp=a("li"),Lne=a("strong"),Bho=o("hubert"),Pho=o(" \u2014 "),bI=a("a"),Iho=o("HubertModel"),qho=o(" (Hubert model)"),Nho=l(),wp=a("li"),xne=a("strong"),jho=o("ibert"),Dho=o(" \u2014 "),vI=a("a"),Gho=o("IBertModel"),Oho=o(" (I-BERT model)"),Vho=l(),Ap=a("li"),$ne=a("strong"),Xho=o("imagegpt"),zho=o(" \u2014 "),FI=a("a"),Qho=o("ImageGPTModel"),Who=o(" (ImageGPT model)"),Hho=l(),yp=a("li"),kne=a("strong"),Uho=o("layoutlm"),Jho=o(" \u2014 "),TI=a("a"),Yho=o("LayoutLMModel"),Kho=o(" (LayoutLM model)"),Zho=l(),Lp=a("li"),Sne=a("strong"),epo=o("layoutlmv2"),opo=o(" \u2014 "),MI=a("a"),rpo=o("LayoutLMv2Model"),tpo=o(" (LayoutLMv2 model)"),apo=l(),xp=a("li"),Rne=a("strong"),npo=o("led"),spo=o(" \u2014 "),EI=a("a"),lpo=o("LEDModel"),ipo=o(" (LED model)"),dpo=l(),$p=a("li"),Bne=a("strong"),cpo=o("longformer"),fpo=o(" \u2014 "),CI=a("a"),mpo=o("LongformerModel"),gpo=o(" (Longformer model)"),hpo=l(),kp=a("li"),Pne=a("strong"),ppo=o("luke"),upo=o(" \u2014 "),wI=a("a"),_po=o("LukeModel"),bpo=o(" (LUKE model)"),vpo=l(),Sp=a("li"),Ine=a("strong"),Fpo=o("lxmert"),Tpo=o(" \u2014 "),AI=a("a"),Mpo=o("LxmertModel"),Epo=o(" (LXMERT model)"),Cpo=l(),Rp=a("li"),qne=a("strong"),wpo=o("m2m_100"),Apo=o(" \u2014 "),yI=a("a"),ypo=o("M2M100Model"),Lpo=o(" (M2M100 model)"),xpo=l(),Bp=a("li"),Nne=a("strong"),$po=o("marian"),kpo=o(" \u2014 "),LI=a("a"),Spo=o("MarianModel"),Rpo=o(" (Marian model)"),Bpo=l(),Pp=a("li"),jne=a("strong"),Ppo=o("maskformer"),Ipo=o(" \u2014 "),xI=a("a"),qpo=o("MaskFormerModel"),Npo=o(" (MaskFormer model)"),jpo=l(),Ip=a("li"),Dne=a("strong"),Dpo=o("mbart"),Gpo=o(" \u2014 "),$I=a("a"),Opo=o("MBartModel"),Vpo=o(" (mBART model)"),Xpo=l(),qp=a("li"),Gne=a("strong"),zpo=o("megatron-bert"),Qpo=o(" \u2014 "),kI=a("a"),Wpo=o("MegatronBertModel"),Hpo=o(" (MegatronBert model)"),Upo=l(),Np=a("li"),One=a("strong"),Jpo=o("mobilebert"),Ypo=o(" \u2014 "),SI=a("a"),Kpo=o("MobileBertModel"),Zpo=o(" (MobileBERT model)"),euo=l(),jp=a("li"),Vne=a("strong"),ouo=o("mpnet"),ruo=o(" \u2014 "),RI=a("a"),tuo=o("MPNetModel"),auo=o(" (MPNet model)"),nuo=l(),Dp=a("li"),Xne=a("strong"),suo=o("mt5"),luo=o(" \u2014 "),BI=a("a"),iuo=o("MT5Model"),duo=o(" (mT5 model)"),cuo=l(),Gp=a("li"),zne=a("strong"),fuo=o("nystromformer"),muo=o(" \u2014 "),PI=a("a"),guo=o("NystromformerModel"),huo=o(" (Nystromformer model)"),puo=l(),Op=a("li"),Qne=a("strong"),uuo=o("openai-gpt"),_uo=o(" \u2014 "),II=a("a"),buo=o("OpenAIGPTModel"),vuo=o(" (OpenAI GPT model)"),Fuo=l(),Vp=a("li"),Wne=a("strong"),Tuo=o("opt"),Muo=o(" \u2014 "),qI=a("a"),Euo=o("OPTModel"),Cuo=o(" (OPT model)"),wuo=l(),Xp=a("li"),Hne=a("strong"),Auo=o("pegasus"),yuo=o(" \u2014 "),NI=a("a"),Luo=o("PegasusModel"),xuo=o(" (Pegasus model)"),$uo=l(),zp=a("li"),Une=a("strong"),kuo=o("perceiver"),Suo=o(" \u2014 "),jI=a("a"),Ruo=o("PerceiverModel"),Buo=o(" (Perceiver model)"),Puo=l(),Qp=a("li"),Jne=a("strong"),Iuo=o("plbart"),quo=o(" \u2014 "),DI=a("a"),Nuo=o("PLBartModel"),juo=o(" (PLBart model)"),Duo=l(),Wp=a("li"),Yne=a("strong"),Guo=o("poolformer"),Ouo=o(" \u2014 "),GI=a("a"),Vuo=o("PoolFormerModel"),Xuo=o(" (PoolFormer model)"),zuo=l(),Hp=a("li"),Kne=a("strong"),Quo=o("prophetnet"),Wuo=o(" \u2014 "),OI=a("a"),Huo=o("ProphetNetModel"),Uuo=o(" (ProphetNet model)"),Juo=l(),Up=a("li"),Zne=a("strong"),Yuo=o("qdqbert"),Kuo=o(" \u2014 "),VI=a("a"),Zuo=o("QDQBertModel"),e_o=o(" (QDQBert model)"),o_o=l(),Jp=a("li"),ese=a("strong"),r_o=o("reformer"),t_o=o(" \u2014 "),XI=a("a"),a_o=o("ReformerModel"),n_o=o(" (Reformer model)"),s_o=l(),Yp=a("li"),ose=a("strong"),l_o=o("regnet"),i_o=o(" \u2014 "),zI=a("a"),d_o=o("RegNetModel"),c_o=o(" (RegNet model)"),f_o=l(),Kp=a("li"),rse=a("strong"),m_o=o("rembert"),g_o=o(" \u2014 "),QI=a("a"),h_o=o("RemBertModel"),p_o=o(" (RemBERT model)"),u_o=l(),Zp=a("li"),tse=a("strong"),__o=o("resnet"),b_o=o(" \u2014 "),WI=a("a"),v_o=o("ResNetModel"),F_o=o(" (ResNet model)"),T_o=l(),eu=a("li"),ase=a("strong"),M_o=o("retribert"),E_o=o(" \u2014 "),HI=a("a"),C_o=o("RetriBertModel"),w_o=o(" (RetriBERT model)"),A_o=l(),ou=a("li"),nse=a("strong"),y_o=o("roberta"),L_o=o(" \u2014 "),UI=a("a"),x_o=o("RobertaModel"),$_o=o(" (RoBERTa model)"),k_o=l(),ru=a("li"),sse=a("strong"),S_o=o("roformer"),R_o=o(" \u2014 "),JI=a("a"),B_o=o("RoFormerModel"),P_o=o(" (RoFormer model)"),I_o=l(),tu=a("li"),lse=a("strong"),q_o=o("segformer"),N_o=o(" \u2014 "),YI=a("a"),j_o=o("SegformerModel"),D_o=o(" (SegFormer model)"),G_o=l(),au=a("li"),ise=a("strong"),O_o=o("sew"),V_o=o(" \u2014 "),KI=a("a"),X_o=o("SEWModel"),z_o=o(" (SEW model)"),Q_o=l(),nu=a("li"),dse=a("strong"),W_o=o("sew-d"),H_o=o(" \u2014 "),ZI=a("a"),U_o=o("SEWDModel"),J_o=o(" (SEW-D model)"),Y_o=l(),su=a("li"),cse=a("strong"),K_o=o("speech_to_text"),Z_o=o(" \u2014 "),eq=a("a"),e1o=o("Speech2TextModel"),o1o=o(" (Speech2Text model)"),r1o=l(),lu=a("li"),fse=a("strong"),t1o=o("splinter"),a1o=o(" \u2014 "),oq=a("a"),n1o=o("SplinterModel"),s1o=o(" (Splinter model)"),l1o=l(),iu=a("li"),mse=a("strong"),i1o=o("squeezebert"),d1o=o(" \u2014 "),rq=a("a"),c1o=o("SqueezeBertModel"),f1o=o(" (SqueezeBERT model)"),m1o=l(),du=a("li"),gse=a("strong"),g1o=o("swin"),h1o=o(" \u2014 "),tq=a("a"),p1o=o("SwinModel"),u1o=o(" (Swin model)"),_1o=l(),cu=a("li"),hse=a("strong"),b1o=o("t5"),v1o=o(" \u2014 "),aq=a("a"),F1o=o("T5Model"),T1o=o(" (T5 model)"),M1o=l(),fu=a("li"),pse=a("strong"),E1o=o("tapas"),C1o=o(" \u2014 "),nq=a("a"),w1o=o("TapasModel"),A1o=o(" (TAPAS model)"),y1o=l(),mu=a("li"),use=a("strong"),L1o=o("transfo-xl"),x1o=o(" \u2014 "),sq=a("a"),$1o=o("TransfoXLModel"),k1o=o(" (Transformer-XL model)"),S1o=l(),gu=a("li"),_se=a("strong"),R1o=o("unispeech"),B1o=o(" \u2014 "),lq=a("a"),P1o=o("UniSpeechModel"),I1o=o(" (UniSpeech model)"),q1o=l(),hu=a("li"),bse=a("strong"),N1o=o("unispeech-sat"),j1o=o(" \u2014 "),iq=a("a"),D1o=o("UniSpeechSatModel"),G1o=o(" (UniSpeechSat model)"),O1o=l(),pu=a("li"),vse=a("strong"),V1o=o("van"),X1o=o(" \u2014 "),dq=a("a"),z1o=o("VanModel"),Q1o=o(" (VAN model)"),W1o=l(),uu=a("li"),Fse=a("strong"),H1o=o("vilt"),U1o=o(" \u2014 "),cq=a("a"),J1o=o("ViltModel"),Y1o=o(" (ViLT model)"),K1o=l(),_u=a("li"),Tse=a("strong"),Z1o=o("vision-text-dual-encoder"),e8o=o(" \u2014 "),fq=a("a"),o8o=o("VisionTextDualEncoderModel"),r8o=o(" (VisionTextDualEncoder model)"),t8o=l(),bu=a("li"),Mse=a("strong"),a8o=o("visual_bert"),n8o=o(" \u2014 "),mq=a("a"),s8o=o("VisualBertModel"),l8o=o(" (VisualBert model)"),i8o=l(),vu=a("li"),Ese=a("strong"),d8o=o("vit"),c8o=o(" \u2014 "),gq=a("a"),f8o=o("ViTModel"),m8o=o(" (ViT model)"),g8o=l(),Fu=a("li"),Cse=a("strong"),h8o=o("vit_mae"),p8o=o(" \u2014 "),hq=a("a"),u8o=o("ViTMAEModel"),_8o=o(" (ViTMAE model)"),b8o=l(),Tu=a("li"),wse=a("strong"),v8o=o("wav2vec2"),F8o=o(" \u2014 "),pq=a("a"),T8o=o("Wav2Vec2Model"),M8o=o(" (Wav2Vec2 model)"),E8o=l(),Mu=a("li"),Ase=a("strong"),C8o=o("wavlm"),w8o=o(" \u2014 "),uq=a("a"),A8o=o("WavLMModel"),y8o=o(" (WavLM model)"),L8o=l(),Eu=a("li"),yse=a("strong"),x8o=o("xglm"),$8o=o(" \u2014 "),_q=a("a"),k8o=o("XGLMModel"),S8o=o(" (XGLM model)"),R8o=l(),Cu=a("li"),Lse=a("strong"),B8o=o("xlm"),P8o=o(" \u2014 "),bq=a("a"),I8o=o("XLMModel"),q8o=o(" (XLM model)"),N8o=l(),wu=a("li"),xse=a("strong"),j8o=o("xlm-prophetnet"),D8o=o(" \u2014 "),vq=a("a"),G8o=o("XLMProphetNetModel"),O8o=o(" (XLMProphetNet model)"),V8o=l(),Au=a("li"),$se=a("strong"),X8o=o("xlm-roberta"),z8o=o(" \u2014 "),Fq=a("a"),Q8o=o("XLMRobertaModel"),W8o=o(" (XLM-RoBERTa model)"),H8o=l(),yu=a("li"),kse=a("strong"),U8o=o("xlm-roberta-xl"),J8o=o(" \u2014 "),Tq=a("a"),Y8o=o("XLMRobertaXLModel"),K8o=o(" (XLM-RoBERTa-XL model)"),Z8o=l(),Lu=a("li"),Sse=a("strong"),ebo=o("xlnet"),obo=o(" \u2014 "),Mq=a("a"),rbo=o("XLNetModel"),tbo=o(" (XLNet model)"),abo=l(),xu=a("li"),Rse=a("strong"),nbo=o("yolos"),sbo=o(" \u2014 "),Eq=a("a"),lbo=o("YolosModel"),ibo=o(" (YOLOS model)"),dbo=l(),$u=a("li"),Bse=a("strong"),cbo=o("yoso"),fbo=o(" \u2014 "),Cq=a("a"),mbo=o("YosoModel"),gbo=o(" (YOSO model)"),hbo=l(),ku=a("p"),pbo=o("The model is set in evaluation mode by default using "),Pse=a("code"),ubo=o("model.eval()"),_bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ise=a("code"),bbo=o("model.train()"),vbo=l(),F(Su.$$.fragment),jPe=l(),wi=a("h2"),Ru=a("a"),qse=a("span"),F(EA.$$.fragment),Fbo=l(),Nse=a("span"),Tbo=o("AutoModelForPreTraining"),DPe=l(),xo=a("div"),F(CA.$$.fragment),Mbo=l(),Ai=a("p"),Ebo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wq=a("a"),Cbo=o("from_pretrained()"),wbo=o(" class method or the "),Aq=a("a"),Abo=o("from_config()"),ybo=o(` class
method.`),Lbo=l(),wA=a("p"),xbo=o("This class cannot be instantiated directly using "),jse=a("code"),$bo=o("__init__()"),kbo=o(" (throws an error)."),Sbo=l(),rt=a("div"),F(AA.$$.fragment),Rbo=l(),Dse=a("p"),Bbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pbo=l(),yi=a("p"),Ibo=o(`Note:
Loading a model from its configuration file does `),Gse=a("strong"),qbo=o("not"),Nbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yq=a("a"),jbo=o("from_pretrained()"),Dbo=o(" to load the model weights."),Gbo=l(),F(Bu.$$.fragment),Obo=l(),Ue=a("div"),F(yA.$$.fragment),Vbo=l(),Ose=a("p"),Xbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zbo=l(),ya=a("p"),Qbo=o("The model class to instantiate is selected based on the "),Vse=a("code"),Wbo=o("model_type"),Hbo=o(` property of the config object (either
passed as an argument or loaded from `),Xse=a("code"),Ubo=o("pretrained_model_name_or_path"),Jbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=a("code"),Ybo=o("pretrained_model_name_or_path"),Kbo=o(":"),Zbo=l(),G=a("ul"),Pu=a("li"),Qse=a("strong"),e2o=o("albert"),o2o=o(" \u2014 "),Lq=a("a"),r2o=o("AlbertForPreTraining"),t2o=o(" (ALBERT model)"),a2o=l(),Iu=a("li"),Wse=a("strong"),n2o=o("bart"),s2o=o(" \u2014 "),xq=a("a"),l2o=o("BartForConditionalGeneration"),i2o=o(" (BART model)"),d2o=l(),qu=a("li"),Hse=a("strong"),c2o=o("bert"),f2o=o(" \u2014 "),$q=a("a"),m2o=o("BertForPreTraining"),g2o=o(" (BERT model)"),h2o=l(),Nu=a("li"),Use=a("strong"),p2o=o("big_bird"),u2o=o(" \u2014 "),kq=a("a"),_2o=o("BigBirdForPreTraining"),b2o=o(" (BigBird model)"),v2o=l(),ju=a("li"),Jse=a("strong"),F2o=o("camembert"),T2o=o(" \u2014 "),Sq=a("a"),M2o=o("CamembertForMaskedLM"),E2o=o(" (CamemBERT model)"),C2o=l(),Du=a("li"),Yse=a("strong"),w2o=o("ctrl"),A2o=o(" \u2014 "),Rq=a("a"),y2o=o("CTRLLMHeadModel"),L2o=o(" (CTRL model)"),x2o=l(),Gu=a("li"),Kse=a("strong"),$2o=o("data2vec-text"),k2o=o(" \u2014 "),Bq=a("a"),S2o=o("Data2VecTextForMaskedLM"),R2o=o(" (Data2VecText model)"),B2o=l(),Ou=a("li"),Zse=a("strong"),P2o=o("deberta"),I2o=o(" \u2014 "),Pq=a("a"),q2o=o("DebertaForMaskedLM"),N2o=o(" (DeBERTa model)"),j2o=l(),Vu=a("li"),ele=a("strong"),D2o=o("deberta-v2"),G2o=o(" \u2014 "),Iq=a("a"),O2o=o("DebertaV2ForMaskedLM"),V2o=o(" (DeBERTa-v2 model)"),X2o=l(),Xu=a("li"),ole=a("strong"),z2o=o("distilbert"),Q2o=o(" \u2014 "),qq=a("a"),W2o=o("DistilBertForMaskedLM"),H2o=o(" (DistilBERT model)"),U2o=l(),zu=a("li"),rle=a("strong"),J2o=o("electra"),Y2o=o(" \u2014 "),Nq=a("a"),K2o=o("ElectraForPreTraining"),Z2o=o(" (ELECTRA model)"),evo=l(),Qu=a("li"),tle=a("strong"),ovo=o("flaubert"),rvo=o(" \u2014 "),jq=a("a"),tvo=o("FlaubertWithLMHeadModel"),avo=o(" (FlauBERT model)"),nvo=l(),Wu=a("li"),ale=a("strong"),svo=o("fnet"),lvo=o(" \u2014 "),Dq=a("a"),ivo=o("FNetForPreTraining"),dvo=o(" (FNet model)"),cvo=l(),Hu=a("li"),nle=a("strong"),fvo=o("fsmt"),mvo=o(" \u2014 "),Gq=a("a"),gvo=o("FSMTForConditionalGeneration"),hvo=o(" (FairSeq Machine-Translation model)"),pvo=l(),Uu=a("li"),sle=a("strong"),uvo=o("funnel"),_vo=o(" \u2014 "),Oq=a("a"),bvo=o("FunnelForPreTraining"),vvo=o(" (Funnel Transformer model)"),Fvo=l(),Ju=a("li"),lle=a("strong"),Tvo=o("gpt2"),Mvo=o(" \u2014 "),Vq=a("a"),Evo=o("GPT2LMHeadModel"),Cvo=o(" (OpenAI GPT-2 model)"),wvo=l(),Yu=a("li"),ile=a("strong"),Avo=o("ibert"),yvo=o(" \u2014 "),Xq=a("a"),Lvo=o("IBertForMaskedLM"),xvo=o(" (I-BERT model)"),$vo=l(),Ku=a("li"),dle=a("strong"),kvo=o("layoutlm"),Svo=o(" \u2014 "),zq=a("a"),Rvo=o("LayoutLMForMaskedLM"),Bvo=o(" (LayoutLM model)"),Pvo=l(),Zu=a("li"),cle=a("strong"),Ivo=o("longformer"),qvo=o(" \u2014 "),Qq=a("a"),Nvo=o("LongformerForMaskedLM"),jvo=o(" (Longformer model)"),Dvo=l(),e_=a("li"),fle=a("strong"),Gvo=o("lxmert"),Ovo=o(" \u2014 "),Wq=a("a"),Vvo=o("LxmertForPreTraining"),Xvo=o(" (LXMERT model)"),zvo=l(),o_=a("li"),mle=a("strong"),Qvo=o("megatron-bert"),Wvo=o(" \u2014 "),Hq=a("a"),Hvo=o("MegatronBertForPreTraining"),Uvo=o(" (MegatronBert model)"),Jvo=l(),r_=a("li"),gle=a("strong"),Yvo=o("mobilebert"),Kvo=o(" \u2014 "),Uq=a("a"),Zvo=o("MobileBertForPreTraining"),eFo=o(" (MobileBERT model)"),oFo=l(),t_=a("li"),hle=a("strong"),rFo=o("mpnet"),tFo=o(" \u2014 "),Jq=a("a"),aFo=o("MPNetForMaskedLM"),nFo=o(" (MPNet model)"),sFo=l(),a_=a("li"),ple=a("strong"),lFo=o("openai-gpt"),iFo=o(" \u2014 "),Yq=a("a"),dFo=o("OpenAIGPTLMHeadModel"),cFo=o(" (OpenAI GPT model)"),fFo=l(),n_=a("li"),ule=a("strong"),mFo=o("retribert"),gFo=o(" \u2014 "),Kq=a("a"),hFo=o("RetriBertModel"),pFo=o(" (RetriBERT model)"),uFo=l(),s_=a("li"),_le=a("strong"),_Fo=o("roberta"),bFo=o(" \u2014 "),Zq=a("a"),vFo=o("RobertaForMaskedLM"),FFo=o(" (RoBERTa model)"),TFo=l(),l_=a("li"),ble=a("strong"),MFo=o("squeezebert"),EFo=o(" \u2014 "),eN=a("a"),CFo=o("SqueezeBertForMaskedLM"),wFo=o(" (SqueezeBERT model)"),AFo=l(),i_=a("li"),vle=a("strong"),yFo=o("t5"),LFo=o(" \u2014 "),oN=a("a"),xFo=o("T5ForConditionalGeneration"),$Fo=o(" (T5 model)"),kFo=l(),d_=a("li"),Fle=a("strong"),SFo=o("tapas"),RFo=o(" \u2014 "),rN=a("a"),BFo=o("TapasForMaskedLM"),PFo=o(" (TAPAS model)"),IFo=l(),c_=a("li"),Tle=a("strong"),qFo=o("transfo-xl"),NFo=o(" \u2014 "),tN=a("a"),jFo=o("TransfoXLLMHeadModel"),DFo=o(" (Transformer-XL model)"),GFo=l(),f_=a("li"),Mle=a("strong"),OFo=o("unispeech"),VFo=o(" \u2014 "),aN=a("a"),XFo=o("UniSpeechForPreTraining"),zFo=o(" (UniSpeech model)"),QFo=l(),m_=a("li"),Ele=a("strong"),WFo=o("unispeech-sat"),HFo=o(" \u2014 "),nN=a("a"),UFo=o("UniSpeechSatForPreTraining"),JFo=o(" (UniSpeechSat model)"),YFo=l(),g_=a("li"),Cle=a("strong"),KFo=o("visual_bert"),ZFo=o(" \u2014 "),sN=a("a"),e0o=o("VisualBertForPreTraining"),o0o=o(" (VisualBert model)"),r0o=l(),h_=a("li"),wle=a("strong"),t0o=o("vit_mae"),a0o=o(" \u2014 "),lN=a("a"),n0o=o("ViTMAEForPreTraining"),s0o=o(" (ViTMAE model)"),l0o=l(),p_=a("li"),Ale=a("strong"),i0o=o("wav2vec2"),d0o=o(" \u2014 "),iN=a("a"),c0o=o("Wav2Vec2ForPreTraining"),f0o=o(" (Wav2Vec2 model)"),m0o=l(),u_=a("li"),yle=a("strong"),g0o=o("xlm"),h0o=o(" \u2014 "),dN=a("a"),p0o=o("XLMWithLMHeadModel"),u0o=o(" (XLM model)"),_0o=l(),__=a("li"),Lle=a("strong"),b0o=o("xlm-roberta"),v0o=o(" \u2014 "),cN=a("a"),F0o=o("XLMRobertaForMaskedLM"),T0o=o(" (XLM-RoBERTa model)"),M0o=l(),b_=a("li"),xle=a("strong"),E0o=o("xlm-roberta-xl"),C0o=o(" \u2014 "),fN=a("a"),w0o=o("XLMRobertaXLForMaskedLM"),A0o=o(" (XLM-RoBERTa-XL model)"),y0o=l(),v_=a("li"),$le=a("strong"),L0o=o("xlnet"),x0o=o(" \u2014 "),mN=a("a"),$0o=o("XLNetLMHeadModel"),k0o=o(" (XLNet model)"),S0o=l(),F_=a("p"),R0o=o("The model is set in evaluation mode by default using "),kle=a("code"),B0o=o("model.eval()"),P0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sle=a("code"),I0o=o("model.train()"),q0o=l(),F(T_.$$.fragment),GPe=l(),Li=a("h2"),M_=a("a"),Rle=a("span"),F(LA.$$.fragment),N0o=l(),Ble=a("span"),j0o=o("AutoModelForCausalLM"),OPe=l(),$o=a("div"),F(xA.$$.fragment),D0o=l(),xi=a("p"),G0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gN=a("a"),O0o=o("from_pretrained()"),V0o=o(" class method or the "),hN=a("a"),X0o=o("from_config()"),z0o=o(` class
method.`),Q0o=l(),$A=a("p"),W0o=o("This class cannot be instantiated directly using "),Ple=a("code"),H0o=o("__init__()"),U0o=o(" (throws an error)."),J0o=l(),tt=a("div"),F(kA.$$.fragment),Y0o=l(),Ile=a("p"),K0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z0o=l(),$i=a("p"),eTo=o(`Note:
Loading a model from its configuration file does `),qle=a("strong"),oTo=o("not"),rTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pN=a("a"),tTo=o("from_pretrained()"),aTo=o(" to load the model weights."),nTo=l(),F(E_.$$.fragment),sTo=l(),Je=a("div"),F(SA.$$.fragment),lTo=l(),Nle=a("p"),iTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dTo=l(),La=a("p"),cTo=o("The model class to instantiate is selected based on the "),jle=a("code"),fTo=o("model_type"),mTo=o(` property of the config object (either
passed as an argument or loaded from `),Dle=a("code"),gTo=o("pretrained_model_name_or_path"),hTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gle=a("code"),pTo=o("pretrained_model_name_or_path"),uTo=o(":"),_To=l(),z=a("ul"),C_=a("li"),Ole=a("strong"),bTo=o("bart"),vTo=o(" \u2014 "),uN=a("a"),FTo=o("BartForCausalLM"),TTo=o(" (BART model)"),MTo=l(),w_=a("li"),Vle=a("strong"),ETo=o("bert"),CTo=o(" \u2014 "),_N=a("a"),wTo=o("BertLMHeadModel"),ATo=o(" (BERT model)"),yTo=l(),A_=a("li"),Xle=a("strong"),LTo=o("bert-generation"),xTo=o(" \u2014 "),bN=a("a"),$To=o("BertGenerationDecoder"),kTo=o(" (Bert Generation model)"),STo=l(),y_=a("li"),zle=a("strong"),RTo=o("big_bird"),BTo=o(" \u2014 "),vN=a("a"),PTo=o("BigBirdForCausalLM"),ITo=o(" (BigBird model)"),qTo=l(),L_=a("li"),Qle=a("strong"),NTo=o("bigbird_pegasus"),jTo=o(" \u2014 "),FN=a("a"),DTo=o("BigBirdPegasusForCausalLM"),GTo=o(" (BigBirdPegasus model)"),OTo=l(),x_=a("li"),Wle=a("strong"),VTo=o("blenderbot"),XTo=o(" \u2014 "),TN=a("a"),zTo=o("BlenderbotForCausalLM"),QTo=o(" (Blenderbot model)"),WTo=l(),$_=a("li"),Hle=a("strong"),HTo=o("blenderbot-small"),UTo=o(" \u2014 "),MN=a("a"),JTo=o("BlenderbotSmallForCausalLM"),YTo=o(" (BlenderbotSmall model)"),KTo=l(),k_=a("li"),Ule=a("strong"),ZTo=o("camembert"),e7o=o(" \u2014 "),EN=a("a"),o7o=o("CamembertForCausalLM"),r7o=o(" (CamemBERT model)"),t7o=l(),S_=a("li"),Jle=a("strong"),a7o=o("ctrl"),n7o=o(" \u2014 "),CN=a("a"),s7o=o("CTRLLMHeadModel"),l7o=o(" (CTRL model)"),i7o=l(),R_=a("li"),Yle=a("strong"),d7o=o("data2vec-text"),c7o=o(" \u2014 "),wN=a("a"),f7o=o("Data2VecTextForCausalLM"),m7o=o(" (Data2VecText model)"),g7o=l(),B_=a("li"),Kle=a("strong"),h7o=o("electra"),p7o=o(" \u2014 "),AN=a("a"),u7o=o("ElectraForCausalLM"),_7o=o(" (ELECTRA model)"),b7o=l(),P_=a("li"),Zle=a("strong"),v7o=o("gpt2"),F7o=o(" \u2014 "),yN=a("a"),T7o=o("GPT2LMHeadModel"),M7o=o(" (OpenAI GPT-2 model)"),E7o=l(),I_=a("li"),eie=a("strong"),C7o=o("gpt_neo"),w7o=o(" \u2014 "),LN=a("a"),A7o=o("GPTNeoForCausalLM"),y7o=o(" (GPT Neo model)"),L7o=l(),q_=a("li"),oie=a("strong"),x7o=o("gptj"),$7o=o(" \u2014 "),xN=a("a"),k7o=o("GPTJForCausalLM"),S7o=o(" (GPT-J model)"),R7o=l(),N_=a("li"),rie=a("strong"),B7o=o("marian"),P7o=o(" \u2014 "),$N=a("a"),I7o=o("MarianForCausalLM"),q7o=o(" (Marian model)"),N7o=l(),j_=a("li"),tie=a("strong"),j7o=o("mbart"),D7o=o(" \u2014 "),kN=a("a"),G7o=o("MBartForCausalLM"),O7o=o(" (mBART model)"),V7o=l(),D_=a("li"),aie=a("strong"),X7o=o("megatron-bert"),z7o=o(" \u2014 "),SN=a("a"),Q7o=o("MegatronBertForCausalLM"),W7o=o(" (MegatronBert model)"),H7o=l(),G_=a("li"),nie=a("strong"),U7o=o("openai-gpt"),J7o=o(" \u2014 "),RN=a("a"),Y7o=o("OpenAIGPTLMHeadModel"),K7o=o(" (OpenAI GPT model)"),Z7o=l(),O_=a("li"),sie=a("strong"),eMo=o("opt"),oMo=o(" \u2014 "),BN=a("a"),rMo=o("OPTForCausalLM"),tMo=o(" (OPT model)"),aMo=l(),V_=a("li"),lie=a("strong"),nMo=o("pegasus"),sMo=o(" \u2014 "),PN=a("a"),lMo=o("PegasusForCausalLM"),iMo=o(" (Pegasus model)"),dMo=l(),X_=a("li"),iie=a("strong"),cMo=o("plbart"),fMo=o(" \u2014 "),IN=a("a"),mMo=o("PLBartForCausalLM"),gMo=o(" (PLBart model)"),hMo=l(),z_=a("li"),die=a("strong"),pMo=o("prophetnet"),uMo=o(" \u2014 "),qN=a("a"),_Mo=o("ProphetNetForCausalLM"),bMo=o(" (ProphetNet model)"),vMo=l(),Q_=a("li"),cie=a("strong"),FMo=o("qdqbert"),TMo=o(" \u2014 "),NN=a("a"),MMo=o("QDQBertLMHeadModel"),EMo=o(" (QDQBert model)"),CMo=l(),W_=a("li"),fie=a("strong"),wMo=o("reformer"),AMo=o(" \u2014 "),jN=a("a"),yMo=o("ReformerModelWithLMHead"),LMo=o(" (Reformer model)"),xMo=l(),H_=a("li"),mie=a("strong"),$Mo=o("rembert"),kMo=o(" \u2014 "),DN=a("a"),SMo=o("RemBertForCausalLM"),RMo=o(" (RemBERT model)"),BMo=l(),U_=a("li"),gie=a("strong"),PMo=o("roberta"),IMo=o(" \u2014 "),GN=a("a"),qMo=o("RobertaForCausalLM"),NMo=o(" (RoBERTa model)"),jMo=l(),J_=a("li"),hie=a("strong"),DMo=o("roformer"),GMo=o(" \u2014 "),ON=a("a"),OMo=o("RoFormerForCausalLM"),VMo=o(" (RoFormer model)"),XMo=l(),Y_=a("li"),pie=a("strong"),zMo=o("speech_to_text_2"),QMo=o(" \u2014 "),VN=a("a"),WMo=o("Speech2Text2ForCausalLM"),HMo=o(" (Speech2Text2 model)"),UMo=l(),K_=a("li"),uie=a("strong"),JMo=o("transfo-xl"),YMo=o(" \u2014 "),XN=a("a"),KMo=o("TransfoXLLMHeadModel"),ZMo=o(" (Transformer-XL model)"),e4o=l(),Z_=a("li"),_ie=a("strong"),o4o=o("trocr"),r4o=o(" \u2014 "),zN=a("a"),t4o=o("TrOCRForCausalLM"),a4o=o(" (TrOCR model)"),n4o=l(),e1=a("li"),bie=a("strong"),s4o=o("xglm"),l4o=o(" \u2014 "),QN=a("a"),i4o=o("XGLMForCausalLM"),d4o=o(" (XGLM model)"),c4o=l(),o1=a("li"),vie=a("strong"),f4o=o("xlm"),m4o=o(" \u2014 "),WN=a("a"),g4o=o("XLMWithLMHeadModel"),h4o=o(" (XLM model)"),p4o=l(),r1=a("li"),Fie=a("strong"),u4o=o("xlm-prophetnet"),_4o=o(" \u2014 "),HN=a("a"),b4o=o("XLMProphetNetForCausalLM"),v4o=o(" (XLMProphetNet model)"),F4o=l(),t1=a("li"),Tie=a("strong"),T4o=o("xlm-roberta"),M4o=o(" \u2014 "),UN=a("a"),E4o=o("XLMRobertaForCausalLM"),C4o=o(" (XLM-RoBERTa model)"),w4o=l(),a1=a("li"),Mie=a("strong"),A4o=o("xlm-roberta-xl"),y4o=o(" \u2014 "),JN=a("a"),L4o=o("XLMRobertaXLForCausalLM"),x4o=o(" (XLM-RoBERTa-XL model)"),$4o=l(),n1=a("li"),Eie=a("strong"),k4o=o("xlnet"),S4o=o(" \u2014 "),YN=a("a"),R4o=o("XLNetLMHeadModel"),B4o=o(" (XLNet model)"),P4o=l(),s1=a("p"),I4o=o("The model is set in evaluation mode by default using "),Cie=a("code"),q4o=o("model.eval()"),N4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),j4o=o("model.train()"),D4o=l(),F(l1.$$.fragment),VPe=l(),ki=a("h2"),i1=a("a"),Aie=a("span"),F(RA.$$.fragment),G4o=l(),yie=a("span"),O4o=o("AutoModelForMaskedLM"),XPe=l(),ko=a("div"),F(BA.$$.fragment),V4o=l(),Si=a("p"),X4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KN=a("a"),z4o=o("from_pretrained()"),Q4o=o(" class method or the "),ZN=a("a"),W4o=o("from_config()"),H4o=o(` class
method.`),U4o=l(),PA=a("p"),J4o=o("This class cannot be instantiated directly using "),Lie=a("code"),Y4o=o("__init__()"),K4o=o(" (throws an error)."),Z4o=l(),at=a("div"),F(IA.$$.fragment),eEo=l(),xie=a("p"),oEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rEo=l(),Ri=a("p"),tEo=o(`Note:
Loading a model from its configuration file does `),$ie=a("strong"),aEo=o("not"),nEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=a("a"),sEo=o("from_pretrained()"),lEo=o(" to load the model weights."),iEo=l(),F(d1.$$.fragment),dEo=l(),Ye=a("div"),F(qA.$$.fragment),cEo=l(),kie=a("p"),fEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mEo=l(),xa=a("p"),gEo=o("The model class to instantiate is selected based on the "),Sie=a("code"),hEo=o("model_type"),pEo=o(` property of the config object (either
passed as an argument or loaded from `),Rie=a("code"),uEo=o("pretrained_model_name_or_path"),_Eo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bie=a("code"),bEo=o("pretrained_model_name_or_path"),vEo=o(":"),FEo=l(),Q=a("ul"),c1=a("li"),Pie=a("strong"),TEo=o("albert"),MEo=o(" \u2014 "),oj=a("a"),EEo=o("AlbertForMaskedLM"),CEo=o(" (ALBERT model)"),wEo=l(),f1=a("li"),Iie=a("strong"),AEo=o("bart"),yEo=o(" \u2014 "),rj=a("a"),LEo=o("BartForConditionalGeneration"),xEo=o(" (BART model)"),$Eo=l(),m1=a("li"),qie=a("strong"),kEo=o("bert"),SEo=o(" \u2014 "),tj=a("a"),REo=o("BertForMaskedLM"),BEo=o(" (BERT model)"),PEo=l(),g1=a("li"),Nie=a("strong"),IEo=o("big_bird"),qEo=o(" \u2014 "),aj=a("a"),NEo=o("BigBirdForMaskedLM"),jEo=o(" (BigBird model)"),DEo=l(),h1=a("li"),jie=a("strong"),GEo=o("camembert"),OEo=o(" \u2014 "),nj=a("a"),VEo=o("CamembertForMaskedLM"),XEo=o(" (CamemBERT model)"),zEo=l(),p1=a("li"),Die=a("strong"),QEo=o("convbert"),WEo=o(" \u2014 "),sj=a("a"),HEo=o("ConvBertForMaskedLM"),UEo=o(" (ConvBERT model)"),JEo=l(),u1=a("li"),Gie=a("strong"),YEo=o("data2vec-text"),KEo=o(" \u2014 "),lj=a("a"),ZEo=o("Data2VecTextForMaskedLM"),e5o=o(" (Data2VecText model)"),o5o=l(),_1=a("li"),Oie=a("strong"),r5o=o("deberta"),t5o=o(" \u2014 "),ij=a("a"),a5o=o("DebertaForMaskedLM"),n5o=o(" (DeBERTa model)"),s5o=l(),b1=a("li"),Vie=a("strong"),l5o=o("deberta-v2"),i5o=o(" \u2014 "),dj=a("a"),d5o=o("DebertaV2ForMaskedLM"),c5o=o(" (DeBERTa-v2 model)"),f5o=l(),v1=a("li"),Xie=a("strong"),m5o=o("distilbert"),g5o=o(" \u2014 "),cj=a("a"),h5o=o("DistilBertForMaskedLM"),p5o=o(" (DistilBERT model)"),u5o=l(),F1=a("li"),zie=a("strong"),_5o=o("electra"),b5o=o(" \u2014 "),fj=a("a"),v5o=o("ElectraForMaskedLM"),F5o=o(" (ELECTRA model)"),T5o=l(),T1=a("li"),Qie=a("strong"),M5o=o("flaubert"),E5o=o(" \u2014 "),mj=a("a"),C5o=o("FlaubertWithLMHeadModel"),w5o=o(" (FlauBERT model)"),A5o=l(),M1=a("li"),Wie=a("strong"),y5o=o("fnet"),L5o=o(" \u2014 "),gj=a("a"),x5o=o("FNetForMaskedLM"),$5o=o(" (FNet model)"),k5o=l(),E1=a("li"),Hie=a("strong"),S5o=o("funnel"),R5o=o(" \u2014 "),hj=a("a"),B5o=o("FunnelForMaskedLM"),P5o=o(" (Funnel Transformer model)"),I5o=l(),C1=a("li"),Uie=a("strong"),q5o=o("ibert"),N5o=o(" \u2014 "),pj=a("a"),j5o=o("IBertForMaskedLM"),D5o=o(" (I-BERT model)"),G5o=l(),w1=a("li"),Jie=a("strong"),O5o=o("layoutlm"),V5o=o(" \u2014 "),uj=a("a"),X5o=o("LayoutLMForMaskedLM"),z5o=o(" (LayoutLM model)"),Q5o=l(),A1=a("li"),Yie=a("strong"),W5o=o("longformer"),H5o=o(" \u2014 "),_j=a("a"),U5o=o("LongformerForMaskedLM"),J5o=o(" (Longformer model)"),Y5o=l(),y1=a("li"),Kie=a("strong"),K5o=o("mbart"),Z5o=o(" \u2014 "),bj=a("a"),eCo=o("MBartForConditionalGeneration"),oCo=o(" (mBART model)"),rCo=l(),L1=a("li"),Zie=a("strong"),tCo=o("megatron-bert"),aCo=o(" \u2014 "),vj=a("a"),nCo=o("MegatronBertForMaskedLM"),sCo=o(" (MegatronBert model)"),lCo=l(),x1=a("li"),ede=a("strong"),iCo=o("mobilebert"),dCo=o(" \u2014 "),Fj=a("a"),cCo=o("MobileBertForMaskedLM"),fCo=o(" (MobileBERT model)"),mCo=l(),$1=a("li"),ode=a("strong"),gCo=o("mpnet"),hCo=o(" \u2014 "),Tj=a("a"),pCo=o("MPNetForMaskedLM"),uCo=o(" (MPNet model)"),_Co=l(),k1=a("li"),rde=a("strong"),bCo=o("nystromformer"),vCo=o(" \u2014 "),Mj=a("a"),FCo=o("NystromformerForMaskedLM"),TCo=o(" (Nystromformer model)"),MCo=l(),S1=a("li"),tde=a("strong"),ECo=o("perceiver"),CCo=o(" \u2014 "),Ej=a("a"),wCo=o("PerceiverForMaskedLM"),ACo=o(" (Perceiver model)"),yCo=l(),R1=a("li"),ade=a("strong"),LCo=o("qdqbert"),xCo=o(" \u2014 "),Cj=a("a"),$Co=o("QDQBertForMaskedLM"),kCo=o(" (QDQBert model)"),SCo=l(),B1=a("li"),nde=a("strong"),RCo=o("reformer"),BCo=o(" \u2014 "),wj=a("a"),PCo=o("ReformerForMaskedLM"),ICo=o(" (Reformer model)"),qCo=l(),P1=a("li"),sde=a("strong"),NCo=o("rembert"),jCo=o(" \u2014 "),Aj=a("a"),DCo=o("RemBertForMaskedLM"),GCo=o(" (RemBERT model)"),OCo=l(),I1=a("li"),lde=a("strong"),VCo=o("roberta"),XCo=o(" \u2014 "),yj=a("a"),zCo=o("RobertaForMaskedLM"),QCo=o(" (RoBERTa model)"),WCo=l(),q1=a("li"),ide=a("strong"),HCo=o("roformer"),UCo=o(" \u2014 "),Lj=a("a"),JCo=o("RoFormerForMaskedLM"),YCo=o(" (RoFormer model)"),KCo=l(),N1=a("li"),dde=a("strong"),ZCo=o("squeezebert"),e3o=o(" \u2014 "),xj=a("a"),o3o=o("SqueezeBertForMaskedLM"),r3o=o(" (SqueezeBERT model)"),t3o=l(),j1=a("li"),cde=a("strong"),a3o=o("tapas"),n3o=o(" \u2014 "),$j=a("a"),s3o=o("TapasForMaskedLM"),l3o=o(" (TAPAS model)"),i3o=l(),D1=a("li"),fde=a("strong"),d3o=o("wav2vec2"),c3o=o(" \u2014 "),mde=a("code"),f3o=o("Wav2Vec2ForMaskedLM"),m3o=o(" (Wav2Vec2 model)"),g3o=l(),G1=a("li"),gde=a("strong"),h3o=o("xlm"),p3o=o(" \u2014 "),kj=a("a"),u3o=o("XLMWithLMHeadModel"),_3o=o(" (XLM model)"),b3o=l(),O1=a("li"),hde=a("strong"),v3o=o("xlm-roberta"),F3o=o(" \u2014 "),Sj=a("a"),T3o=o("XLMRobertaForMaskedLM"),M3o=o(" (XLM-RoBERTa model)"),E3o=l(),V1=a("li"),pde=a("strong"),C3o=o("xlm-roberta-xl"),w3o=o(" \u2014 "),Rj=a("a"),A3o=o("XLMRobertaXLForMaskedLM"),y3o=o(" (XLM-RoBERTa-XL model)"),L3o=l(),X1=a("li"),ude=a("strong"),x3o=o("yoso"),$3o=o(" \u2014 "),Bj=a("a"),k3o=o("YosoForMaskedLM"),S3o=o(" (YOSO model)"),R3o=l(),z1=a("p"),B3o=o("The model is set in evaluation mode by default using "),_de=a("code"),P3o=o("model.eval()"),I3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=a("code"),q3o=o("model.train()"),N3o=l(),F(Q1.$$.fragment),zPe=l(),Bi=a("h2"),W1=a("a"),vde=a("span"),F(NA.$$.fragment),j3o=l(),Fde=a("span"),D3o=o("AutoModelForSeq2SeqLM"),QPe=l(),So=a("div"),F(jA.$$.fragment),G3o=l(),Pi=a("p"),O3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Pj=a("a"),V3o=o("from_pretrained()"),X3o=o(" class method or the "),Ij=a("a"),z3o=o("from_config()"),Q3o=o(` class
method.`),W3o=l(),DA=a("p"),H3o=o("This class cannot be instantiated directly using "),Tde=a("code"),U3o=o("__init__()"),J3o=o(" (throws an error)."),Y3o=l(),nt=a("div"),F(GA.$$.fragment),K3o=l(),Mde=a("p"),Z3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ewo=l(),Ii=a("p"),owo=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),rwo=o("not"),two=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qj=a("a"),awo=o("from_pretrained()"),nwo=o(" to load the model weights."),swo=l(),F(H1.$$.fragment),lwo=l(),Ke=a("div"),F(OA.$$.fragment),iwo=l(),Cde=a("p"),dwo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cwo=l(),$a=a("p"),fwo=o("The model class to instantiate is selected based on the "),wde=a("code"),mwo=o("model_type"),gwo=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),hwo=o("pretrained_model_name_or_path"),pwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),uwo=o("pretrained_model_name_or_path"),_wo=o(":"),bwo=l(),he=a("ul"),U1=a("li"),Lde=a("strong"),vwo=o("bart"),Fwo=o(" \u2014 "),Nj=a("a"),Two=o("BartForConditionalGeneration"),Mwo=o(" (BART model)"),Ewo=l(),J1=a("li"),xde=a("strong"),Cwo=o("bigbird_pegasus"),wwo=o(" \u2014 "),jj=a("a"),Awo=o("BigBirdPegasusForConditionalGeneration"),ywo=o(" (BigBirdPegasus model)"),Lwo=l(),Y1=a("li"),$de=a("strong"),xwo=o("blenderbot"),$wo=o(" \u2014 "),Dj=a("a"),kwo=o("BlenderbotForConditionalGeneration"),Swo=o(" (Blenderbot model)"),Rwo=l(),K1=a("li"),kde=a("strong"),Bwo=o("blenderbot-small"),Pwo=o(" \u2014 "),Gj=a("a"),Iwo=o("BlenderbotSmallForConditionalGeneration"),qwo=o(" (BlenderbotSmall model)"),Nwo=l(),Z1=a("li"),Sde=a("strong"),jwo=o("encoder-decoder"),Dwo=o(" \u2014 "),Oj=a("a"),Gwo=o("EncoderDecoderModel"),Owo=o(" (Encoder decoder model)"),Vwo=l(),e8=a("li"),Rde=a("strong"),Xwo=o("fsmt"),zwo=o(" \u2014 "),Vj=a("a"),Qwo=o("FSMTForConditionalGeneration"),Wwo=o(" (FairSeq Machine-Translation model)"),Hwo=l(),o8=a("li"),Bde=a("strong"),Uwo=o("led"),Jwo=o(" \u2014 "),Xj=a("a"),Ywo=o("LEDForConditionalGeneration"),Kwo=o(" (LED model)"),Zwo=l(),r8=a("li"),Pde=a("strong"),eAo=o("m2m_100"),oAo=o(" \u2014 "),zj=a("a"),rAo=o("M2M100ForConditionalGeneration"),tAo=o(" (M2M100 model)"),aAo=l(),t8=a("li"),Ide=a("strong"),nAo=o("marian"),sAo=o(" \u2014 "),Qj=a("a"),lAo=o("MarianMTModel"),iAo=o(" (Marian model)"),dAo=l(),a8=a("li"),qde=a("strong"),cAo=o("mbart"),fAo=o(" \u2014 "),Wj=a("a"),mAo=o("MBartForConditionalGeneration"),gAo=o(" (mBART model)"),hAo=l(),n8=a("li"),Nde=a("strong"),pAo=o("mt5"),uAo=o(" \u2014 "),Hj=a("a"),_Ao=o("MT5ForConditionalGeneration"),bAo=o(" (mT5 model)"),vAo=l(),s8=a("li"),jde=a("strong"),FAo=o("pegasus"),TAo=o(" \u2014 "),Uj=a("a"),MAo=o("PegasusForConditionalGeneration"),EAo=o(" (Pegasus model)"),CAo=l(),l8=a("li"),Dde=a("strong"),wAo=o("plbart"),AAo=o(" \u2014 "),Jj=a("a"),yAo=o("PLBartForConditionalGeneration"),LAo=o(" (PLBart model)"),xAo=l(),i8=a("li"),Gde=a("strong"),$Ao=o("prophetnet"),kAo=o(" \u2014 "),Yj=a("a"),SAo=o("ProphetNetForConditionalGeneration"),RAo=o(" (ProphetNet model)"),BAo=l(),d8=a("li"),Ode=a("strong"),PAo=o("t5"),IAo=o(" \u2014 "),Kj=a("a"),qAo=o("T5ForConditionalGeneration"),NAo=o(" (T5 model)"),jAo=l(),c8=a("li"),Vde=a("strong"),DAo=o("tapex"),GAo=o(" \u2014 "),Zj=a("a"),OAo=o("BartForConditionalGeneration"),VAo=o(" (TAPEX model)"),XAo=l(),f8=a("li"),Xde=a("strong"),zAo=o("xlm-prophetnet"),QAo=o(" \u2014 "),eD=a("a"),WAo=o("XLMProphetNetForConditionalGeneration"),HAo=o(" (XLMProphetNet model)"),UAo=l(),m8=a("p"),JAo=o("The model is set in evaluation mode by default using "),zde=a("code"),YAo=o("model.eval()"),KAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=a("code"),ZAo=o("model.train()"),e6o=l(),F(g8.$$.fragment),WPe=l(),qi=a("h2"),h8=a("a"),Wde=a("span"),F(VA.$$.fragment),o6o=l(),Hde=a("span"),r6o=o("AutoModelForSequenceClassification"),HPe=l(),Ro=a("div"),F(XA.$$.fragment),t6o=l(),Ni=a("p"),a6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oD=a("a"),n6o=o("from_pretrained()"),s6o=o(" class method or the "),rD=a("a"),l6o=o("from_config()"),i6o=o(` class
method.`),d6o=l(),zA=a("p"),c6o=o("This class cannot be instantiated directly using "),Ude=a("code"),f6o=o("__init__()"),m6o=o(" (throws an error)."),g6o=l(),st=a("div"),F(QA.$$.fragment),h6o=l(),Jde=a("p"),p6o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),u6o=l(),ji=a("p"),_6o=o(`Note:
Loading a model from its configuration file does `),Yde=a("strong"),b6o=o("not"),v6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tD=a("a"),F6o=o("from_pretrained()"),T6o=o(" to load the model weights."),M6o=l(),F(p8.$$.fragment),E6o=l(),Ze=a("div"),F(WA.$$.fragment),C6o=l(),Kde=a("p"),w6o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A6o=l(),ka=a("p"),y6o=o("The model class to instantiate is selected based on the "),Zde=a("code"),L6o=o("model_type"),x6o=o(` property of the config object (either
passed as an argument or loaded from `),ece=a("code"),$6o=o("pretrained_model_name_or_path"),k6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=a("code"),S6o=o("pretrained_model_name_or_path"),R6o=o(":"),B6o=l(),q=a("ul"),u8=a("li"),rce=a("strong"),P6o=o("albert"),I6o=o(" \u2014 "),aD=a("a"),q6o=o("AlbertForSequenceClassification"),N6o=o(" (ALBERT model)"),j6o=l(),_8=a("li"),tce=a("strong"),D6o=o("bart"),G6o=o(" \u2014 "),nD=a("a"),O6o=o("BartForSequenceClassification"),V6o=o(" (BART model)"),X6o=l(),b8=a("li"),ace=a("strong"),z6o=o("bert"),Q6o=o(" \u2014 "),sD=a("a"),W6o=o("BertForSequenceClassification"),H6o=o(" (BERT model)"),U6o=l(),v8=a("li"),nce=a("strong"),J6o=o("big_bird"),Y6o=o(" \u2014 "),lD=a("a"),K6o=o("BigBirdForSequenceClassification"),Z6o=o(" (BigBird model)"),eyo=l(),F8=a("li"),sce=a("strong"),oyo=o("bigbird_pegasus"),ryo=o(" \u2014 "),iD=a("a"),tyo=o("BigBirdPegasusForSequenceClassification"),ayo=o(" (BigBirdPegasus model)"),nyo=l(),T8=a("li"),lce=a("strong"),syo=o("camembert"),lyo=o(" \u2014 "),dD=a("a"),iyo=o("CamembertForSequenceClassification"),dyo=o(" (CamemBERT model)"),cyo=l(),M8=a("li"),ice=a("strong"),fyo=o("canine"),myo=o(" \u2014 "),cD=a("a"),gyo=o("CanineForSequenceClassification"),hyo=o(" (Canine model)"),pyo=l(),E8=a("li"),dce=a("strong"),uyo=o("convbert"),_yo=o(" \u2014 "),fD=a("a"),byo=o("ConvBertForSequenceClassification"),vyo=o(" (ConvBERT model)"),Fyo=l(),C8=a("li"),cce=a("strong"),Tyo=o("ctrl"),Myo=o(" \u2014 "),mD=a("a"),Eyo=o("CTRLForSequenceClassification"),Cyo=o(" (CTRL model)"),wyo=l(),w8=a("li"),fce=a("strong"),Ayo=o("data2vec-text"),yyo=o(" \u2014 "),gD=a("a"),Lyo=o("Data2VecTextForSequenceClassification"),xyo=o(" (Data2VecText model)"),$yo=l(),A8=a("li"),mce=a("strong"),kyo=o("deberta"),Syo=o(" \u2014 "),hD=a("a"),Ryo=o("DebertaForSequenceClassification"),Byo=o(" (DeBERTa model)"),Pyo=l(),y8=a("li"),gce=a("strong"),Iyo=o("deberta-v2"),qyo=o(" \u2014 "),pD=a("a"),Nyo=o("DebertaV2ForSequenceClassification"),jyo=o(" (DeBERTa-v2 model)"),Dyo=l(),L8=a("li"),hce=a("strong"),Gyo=o("distilbert"),Oyo=o(" \u2014 "),uD=a("a"),Vyo=o("DistilBertForSequenceClassification"),Xyo=o(" (DistilBERT model)"),zyo=l(),x8=a("li"),pce=a("strong"),Qyo=o("electra"),Wyo=o(" \u2014 "),_D=a("a"),Hyo=o("ElectraForSequenceClassification"),Uyo=o(" (ELECTRA model)"),Jyo=l(),$8=a("li"),uce=a("strong"),Yyo=o("flaubert"),Kyo=o(" \u2014 "),bD=a("a"),Zyo=o("FlaubertForSequenceClassification"),eLo=o(" (FlauBERT model)"),oLo=l(),k8=a("li"),_ce=a("strong"),rLo=o("fnet"),tLo=o(" \u2014 "),vD=a("a"),aLo=o("FNetForSequenceClassification"),nLo=o(" (FNet model)"),sLo=l(),S8=a("li"),bce=a("strong"),lLo=o("funnel"),iLo=o(" \u2014 "),FD=a("a"),dLo=o("FunnelForSequenceClassification"),cLo=o(" (Funnel Transformer model)"),fLo=l(),R8=a("li"),vce=a("strong"),mLo=o("gpt2"),gLo=o(" \u2014 "),TD=a("a"),hLo=o("GPT2ForSequenceClassification"),pLo=o(" (OpenAI GPT-2 model)"),uLo=l(),B8=a("li"),Fce=a("strong"),_Lo=o("gpt_neo"),bLo=o(" \u2014 "),MD=a("a"),vLo=o("GPTNeoForSequenceClassification"),FLo=o(" (GPT Neo model)"),TLo=l(),P8=a("li"),Tce=a("strong"),MLo=o("gptj"),ELo=o(" \u2014 "),ED=a("a"),CLo=o("GPTJForSequenceClassification"),wLo=o(" (GPT-J model)"),ALo=l(),I8=a("li"),Mce=a("strong"),yLo=o("ibert"),LLo=o(" \u2014 "),CD=a("a"),xLo=o("IBertForSequenceClassification"),$Lo=o(" (I-BERT model)"),kLo=l(),q8=a("li"),Ece=a("strong"),SLo=o("layoutlm"),RLo=o(" \u2014 "),wD=a("a"),BLo=o("LayoutLMForSequenceClassification"),PLo=o(" (LayoutLM model)"),ILo=l(),N8=a("li"),Cce=a("strong"),qLo=o("layoutlmv2"),NLo=o(" \u2014 "),AD=a("a"),jLo=o("LayoutLMv2ForSequenceClassification"),DLo=o(" (LayoutLMv2 model)"),GLo=l(),j8=a("li"),wce=a("strong"),OLo=o("led"),VLo=o(" \u2014 "),yD=a("a"),XLo=o("LEDForSequenceClassification"),zLo=o(" (LED model)"),QLo=l(),D8=a("li"),Ace=a("strong"),WLo=o("longformer"),HLo=o(" \u2014 "),LD=a("a"),ULo=o("LongformerForSequenceClassification"),JLo=o(" (Longformer model)"),YLo=l(),G8=a("li"),yce=a("strong"),KLo=o("mbart"),ZLo=o(" \u2014 "),xD=a("a"),exo=o("MBartForSequenceClassification"),oxo=o(" (mBART model)"),rxo=l(),O8=a("li"),Lce=a("strong"),txo=o("megatron-bert"),axo=o(" \u2014 "),$D=a("a"),nxo=o("MegatronBertForSequenceClassification"),sxo=o(" (MegatronBert model)"),lxo=l(),V8=a("li"),xce=a("strong"),ixo=o("mobilebert"),dxo=o(" \u2014 "),kD=a("a"),cxo=o("MobileBertForSequenceClassification"),fxo=o(" (MobileBERT model)"),mxo=l(),X8=a("li"),$ce=a("strong"),gxo=o("mpnet"),hxo=o(" \u2014 "),SD=a("a"),pxo=o("MPNetForSequenceClassification"),uxo=o(" (MPNet model)"),_xo=l(),z8=a("li"),kce=a("strong"),bxo=o("nystromformer"),vxo=o(" \u2014 "),RD=a("a"),Fxo=o("NystromformerForSequenceClassification"),Txo=o(" (Nystromformer model)"),Mxo=l(),Q8=a("li"),Sce=a("strong"),Exo=o("openai-gpt"),Cxo=o(" \u2014 "),BD=a("a"),wxo=o("OpenAIGPTForSequenceClassification"),Axo=o(" (OpenAI GPT model)"),yxo=l(),W8=a("li"),Rce=a("strong"),Lxo=o("perceiver"),xxo=o(" \u2014 "),PD=a("a"),$xo=o("PerceiverForSequenceClassification"),kxo=o(" (Perceiver model)"),Sxo=l(),H8=a("li"),Bce=a("strong"),Rxo=o("plbart"),Bxo=o(" \u2014 "),ID=a("a"),Pxo=o("PLBartForSequenceClassification"),Ixo=o(" (PLBart model)"),qxo=l(),U8=a("li"),Pce=a("strong"),Nxo=o("qdqbert"),jxo=o(" \u2014 "),qD=a("a"),Dxo=o("QDQBertForSequenceClassification"),Gxo=o(" (QDQBert model)"),Oxo=l(),J8=a("li"),Ice=a("strong"),Vxo=o("reformer"),Xxo=o(" \u2014 "),ND=a("a"),zxo=o("ReformerForSequenceClassification"),Qxo=o(" (Reformer model)"),Wxo=l(),Y8=a("li"),qce=a("strong"),Hxo=o("rembert"),Uxo=o(" \u2014 "),jD=a("a"),Jxo=o("RemBertForSequenceClassification"),Yxo=o(" (RemBERT model)"),Kxo=l(),K8=a("li"),Nce=a("strong"),Zxo=o("roberta"),e9o=o(" \u2014 "),DD=a("a"),o9o=o("RobertaForSequenceClassification"),r9o=o(" (RoBERTa model)"),t9o=l(),Z8=a("li"),jce=a("strong"),a9o=o("roformer"),n9o=o(" \u2014 "),GD=a("a"),s9o=o("RoFormerForSequenceClassification"),l9o=o(" (RoFormer model)"),i9o=l(),eb=a("li"),Dce=a("strong"),d9o=o("squeezebert"),c9o=o(" \u2014 "),OD=a("a"),f9o=o("SqueezeBertForSequenceClassification"),m9o=o(" (SqueezeBERT model)"),g9o=l(),ob=a("li"),Gce=a("strong"),h9o=o("tapas"),p9o=o(" \u2014 "),VD=a("a"),u9o=o("TapasForSequenceClassification"),_9o=o(" (TAPAS model)"),b9o=l(),rb=a("li"),Oce=a("strong"),v9o=o("tapex"),F9o=o(" \u2014 "),XD=a("a"),T9o=o("BartForSequenceClassification"),M9o=o(" (TAPEX model)"),E9o=l(),tb=a("li"),Vce=a("strong"),C9o=o("transfo-xl"),w9o=o(" \u2014 "),zD=a("a"),A9o=o("TransfoXLForSequenceClassification"),y9o=o(" (Transformer-XL model)"),L9o=l(),ab=a("li"),Xce=a("strong"),x9o=o("xlm"),$9o=o(" \u2014 "),QD=a("a"),k9o=o("XLMForSequenceClassification"),S9o=o(" (XLM model)"),R9o=l(),nb=a("li"),zce=a("strong"),B9o=o("xlm-roberta"),P9o=o(" \u2014 "),WD=a("a"),I9o=o("XLMRobertaForSequenceClassification"),q9o=o(" (XLM-RoBERTa model)"),N9o=l(),sb=a("li"),Qce=a("strong"),j9o=o("xlm-roberta-xl"),D9o=o(" \u2014 "),HD=a("a"),G9o=o("XLMRobertaXLForSequenceClassification"),O9o=o(" (XLM-RoBERTa-XL model)"),V9o=l(),lb=a("li"),Wce=a("strong"),X9o=o("xlnet"),z9o=o(" \u2014 "),UD=a("a"),Q9o=o("XLNetForSequenceClassification"),W9o=o(" (XLNet model)"),H9o=l(),ib=a("li"),Hce=a("strong"),U9o=o("yoso"),J9o=o(" \u2014 "),JD=a("a"),Y9o=o("YosoForSequenceClassification"),K9o=o(" (YOSO model)"),Z9o=l(),db=a("p"),e$o=o("The model is set in evaluation mode by default using "),Uce=a("code"),o$o=o("model.eval()"),r$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jce=a("code"),t$o=o("model.train()"),a$o=l(),F(cb.$$.fragment),UPe=l(),Di=a("h2"),fb=a("a"),Yce=a("span"),F(HA.$$.fragment),n$o=l(),Kce=a("span"),s$o=o("AutoModelForMultipleChoice"),JPe=l(),Bo=a("div"),F(UA.$$.fragment),l$o=l(),Gi=a("p"),i$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YD=a("a"),d$o=o("from_pretrained()"),c$o=o(" class method or the "),KD=a("a"),f$o=o("from_config()"),m$o=o(` class
method.`),g$o=l(),JA=a("p"),h$o=o("This class cannot be instantiated directly using "),Zce=a("code"),p$o=o("__init__()"),u$o=o(" (throws an error)."),_$o=l(),lt=a("div"),F(YA.$$.fragment),b$o=l(),efe=a("p"),v$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F$o=l(),Oi=a("p"),T$o=o(`Note:
Loading a model from its configuration file does `),ofe=a("strong"),M$o=o("not"),E$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),C$o=o("from_pretrained()"),w$o=o(" to load the model weights."),A$o=l(),F(mb.$$.fragment),y$o=l(),eo=a("div"),F(KA.$$.fragment),L$o=l(),rfe=a("p"),x$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$$o=l(),Sa=a("p"),k$o=o("The model class to instantiate is selected based on the "),tfe=a("code"),S$o=o("model_type"),R$o=o(` property of the config object (either
passed as an argument or loaded from `),afe=a("code"),B$o=o("pretrained_model_name_or_path"),P$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=a("code"),I$o=o("pretrained_model_name_or_path"),q$o=o(":"),N$o=l(),Y=a("ul"),gb=a("li"),sfe=a("strong"),j$o=o("albert"),D$o=o(" \u2014 "),eG=a("a"),G$o=o("AlbertForMultipleChoice"),O$o=o(" (ALBERT model)"),V$o=l(),hb=a("li"),lfe=a("strong"),X$o=o("bert"),z$o=o(" \u2014 "),oG=a("a"),Q$o=o("BertForMultipleChoice"),W$o=o(" (BERT model)"),H$o=l(),pb=a("li"),ife=a("strong"),U$o=o("big_bird"),J$o=o(" \u2014 "),rG=a("a"),Y$o=o("BigBirdForMultipleChoice"),K$o=o(" (BigBird model)"),Z$o=l(),ub=a("li"),dfe=a("strong"),eko=o("camembert"),oko=o(" \u2014 "),tG=a("a"),rko=o("CamembertForMultipleChoice"),tko=o(" (CamemBERT model)"),ako=l(),_b=a("li"),cfe=a("strong"),nko=o("canine"),sko=o(" \u2014 "),aG=a("a"),lko=o("CanineForMultipleChoice"),iko=o(" (Canine model)"),dko=l(),bb=a("li"),ffe=a("strong"),cko=o("convbert"),fko=o(" \u2014 "),nG=a("a"),mko=o("ConvBertForMultipleChoice"),gko=o(" (ConvBERT model)"),hko=l(),vb=a("li"),mfe=a("strong"),pko=o("data2vec-text"),uko=o(" \u2014 "),sG=a("a"),_ko=o("Data2VecTextForMultipleChoice"),bko=o(" (Data2VecText model)"),vko=l(),Fb=a("li"),gfe=a("strong"),Fko=o("deberta-v2"),Tko=o(" \u2014 "),lG=a("a"),Mko=o("DebertaV2ForMultipleChoice"),Eko=o(" (DeBERTa-v2 model)"),Cko=l(),Tb=a("li"),hfe=a("strong"),wko=o("distilbert"),Ako=o(" \u2014 "),iG=a("a"),yko=o("DistilBertForMultipleChoice"),Lko=o(" (DistilBERT model)"),xko=l(),Mb=a("li"),pfe=a("strong"),$ko=o("electra"),kko=o(" \u2014 "),dG=a("a"),Sko=o("ElectraForMultipleChoice"),Rko=o(" (ELECTRA model)"),Bko=l(),Eb=a("li"),ufe=a("strong"),Pko=o("flaubert"),Iko=o(" \u2014 "),cG=a("a"),qko=o("FlaubertForMultipleChoice"),Nko=o(" (FlauBERT model)"),jko=l(),Cb=a("li"),_fe=a("strong"),Dko=o("fnet"),Gko=o(" \u2014 "),fG=a("a"),Oko=o("FNetForMultipleChoice"),Vko=o(" (FNet model)"),Xko=l(),wb=a("li"),bfe=a("strong"),zko=o("funnel"),Qko=o(" \u2014 "),mG=a("a"),Wko=o("FunnelForMultipleChoice"),Hko=o(" (Funnel Transformer model)"),Uko=l(),Ab=a("li"),vfe=a("strong"),Jko=o("ibert"),Yko=o(" \u2014 "),gG=a("a"),Kko=o("IBertForMultipleChoice"),Zko=o(" (I-BERT model)"),eSo=l(),yb=a("li"),Ffe=a("strong"),oSo=o("longformer"),rSo=o(" \u2014 "),hG=a("a"),tSo=o("LongformerForMultipleChoice"),aSo=o(" (Longformer model)"),nSo=l(),Lb=a("li"),Tfe=a("strong"),sSo=o("megatron-bert"),lSo=o(" \u2014 "),pG=a("a"),iSo=o("MegatronBertForMultipleChoice"),dSo=o(" (MegatronBert model)"),cSo=l(),xb=a("li"),Mfe=a("strong"),fSo=o("mobilebert"),mSo=o(" \u2014 "),uG=a("a"),gSo=o("MobileBertForMultipleChoice"),hSo=o(" (MobileBERT model)"),pSo=l(),$b=a("li"),Efe=a("strong"),uSo=o("mpnet"),_So=o(" \u2014 "),_G=a("a"),bSo=o("MPNetForMultipleChoice"),vSo=o(" (MPNet model)"),FSo=l(),kb=a("li"),Cfe=a("strong"),TSo=o("nystromformer"),MSo=o(" \u2014 "),bG=a("a"),ESo=o("NystromformerForMultipleChoice"),CSo=o(" (Nystromformer model)"),wSo=l(),Sb=a("li"),wfe=a("strong"),ASo=o("qdqbert"),ySo=o(" \u2014 "),vG=a("a"),LSo=o("QDQBertForMultipleChoice"),xSo=o(" (QDQBert model)"),$So=l(),Rb=a("li"),Afe=a("strong"),kSo=o("rembert"),SSo=o(" \u2014 "),FG=a("a"),RSo=o("RemBertForMultipleChoice"),BSo=o(" (RemBERT model)"),PSo=l(),Bb=a("li"),yfe=a("strong"),ISo=o("roberta"),qSo=o(" \u2014 "),TG=a("a"),NSo=o("RobertaForMultipleChoice"),jSo=o(" (RoBERTa model)"),DSo=l(),Pb=a("li"),Lfe=a("strong"),GSo=o("roformer"),OSo=o(" \u2014 "),MG=a("a"),VSo=o("RoFormerForMultipleChoice"),XSo=o(" (RoFormer model)"),zSo=l(),Ib=a("li"),xfe=a("strong"),QSo=o("squeezebert"),WSo=o(" \u2014 "),EG=a("a"),HSo=o("SqueezeBertForMultipleChoice"),USo=o(" (SqueezeBERT model)"),JSo=l(),qb=a("li"),$fe=a("strong"),YSo=o("xlm"),KSo=o(" \u2014 "),CG=a("a"),ZSo=o("XLMForMultipleChoice"),eRo=o(" (XLM model)"),oRo=l(),Nb=a("li"),kfe=a("strong"),rRo=o("xlm-roberta"),tRo=o(" \u2014 "),wG=a("a"),aRo=o("XLMRobertaForMultipleChoice"),nRo=o(" (XLM-RoBERTa model)"),sRo=l(),jb=a("li"),Sfe=a("strong"),lRo=o("xlm-roberta-xl"),iRo=o(" \u2014 "),AG=a("a"),dRo=o("XLMRobertaXLForMultipleChoice"),cRo=o(" (XLM-RoBERTa-XL model)"),fRo=l(),Db=a("li"),Rfe=a("strong"),mRo=o("xlnet"),gRo=o(" \u2014 "),yG=a("a"),hRo=o("XLNetForMultipleChoice"),pRo=o(" (XLNet model)"),uRo=l(),Gb=a("li"),Bfe=a("strong"),_Ro=o("yoso"),bRo=o(" \u2014 "),LG=a("a"),vRo=o("YosoForMultipleChoice"),FRo=o(" (YOSO model)"),TRo=l(),Ob=a("p"),MRo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),ERo=o("model.eval()"),CRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),wRo=o("model.train()"),ARo=l(),F(Vb.$$.fragment),YPe=l(),Vi=a("h2"),Xb=a("a"),qfe=a("span"),F(ZA.$$.fragment),yRo=l(),Nfe=a("span"),LRo=o("AutoModelForNextSentencePrediction"),KPe=l(),Po=a("div"),F(e6.$$.fragment),xRo=l(),Xi=a("p"),$Ro=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xG=a("a"),kRo=o("from_pretrained()"),SRo=o(" class method or the "),$G=a("a"),RRo=o("from_config()"),BRo=o(` class
method.`),PRo=l(),o6=a("p"),IRo=o("This class cannot be instantiated directly using "),jfe=a("code"),qRo=o("__init__()"),NRo=o(" (throws an error)."),jRo=l(),it=a("div"),F(r6.$$.fragment),DRo=l(),Dfe=a("p"),GRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ORo=l(),zi=a("p"),VRo=o(`Note:
Loading a model from its configuration file does `),Gfe=a("strong"),XRo=o("not"),zRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=a("a"),QRo=o("from_pretrained()"),WRo=o(" to load the model weights."),HRo=l(),F(zb.$$.fragment),URo=l(),oo=a("div"),F(t6.$$.fragment),JRo=l(),Ofe=a("p"),YRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KRo=l(),Ra=a("p"),ZRo=o("The model class to instantiate is selected based on the "),Vfe=a("code"),eBo=o("model_type"),oBo=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),rBo=o("pretrained_model_name_or_path"),tBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),aBo=o("pretrained_model_name_or_path"),nBo=o(":"),sBo=l(),Yr=a("ul"),Qb=a("li"),Qfe=a("strong"),lBo=o("bert"),iBo=o(" \u2014 "),SG=a("a"),dBo=o("BertForNextSentencePrediction"),cBo=o(" (BERT model)"),fBo=l(),Wb=a("li"),Wfe=a("strong"),mBo=o("fnet"),gBo=o(" \u2014 "),RG=a("a"),hBo=o("FNetForNextSentencePrediction"),pBo=o(" (FNet model)"),uBo=l(),Hb=a("li"),Hfe=a("strong"),_Bo=o("megatron-bert"),bBo=o(" \u2014 "),BG=a("a"),vBo=o("MegatronBertForNextSentencePrediction"),FBo=o(" (MegatronBert model)"),TBo=l(),Ub=a("li"),Ufe=a("strong"),MBo=o("mobilebert"),EBo=o(" \u2014 "),PG=a("a"),CBo=o("MobileBertForNextSentencePrediction"),wBo=o(" (MobileBERT model)"),ABo=l(),Jb=a("li"),Jfe=a("strong"),yBo=o("qdqbert"),LBo=o(" \u2014 "),IG=a("a"),xBo=o("QDQBertForNextSentencePrediction"),$Bo=o(" (QDQBert model)"),kBo=l(),Yb=a("p"),SBo=o("The model is set in evaluation mode by default using "),Yfe=a("code"),RBo=o("model.eval()"),BBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=a("code"),PBo=o("model.train()"),IBo=l(),F(Kb.$$.fragment),ZPe=l(),Qi=a("h2"),Zb=a("a"),Zfe=a("span"),F(a6.$$.fragment),qBo=l(),eme=a("span"),NBo=o("AutoModelForTokenClassification"),eIe=l(),Io=a("div"),F(n6.$$.fragment),jBo=l(),Wi=a("p"),DBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qG=a("a"),GBo=o("from_pretrained()"),OBo=o(" class method or the "),NG=a("a"),VBo=o("from_config()"),XBo=o(` class
method.`),zBo=l(),s6=a("p"),QBo=o("This class cannot be instantiated directly using "),ome=a("code"),WBo=o("__init__()"),HBo=o(" (throws an error)."),UBo=l(),dt=a("div"),F(l6.$$.fragment),JBo=l(),rme=a("p"),YBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KBo=l(),Hi=a("p"),ZBo=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),ePo=o("not"),oPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),rPo=o("from_pretrained()"),tPo=o(" to load the model weights."),aPo=l(),F(e2.$$.fragment),nPo=l(),ro=a("div"),F(i6.$$.fragment),sPo=l(),ame=a("p"),lPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iPo=l(),Ba=a("p"),dPo=o("The model class to instantiate is selected based on the "),nme=a("code"),cPo=o("model_type"),fPo=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),mPo=o("pretrained_model_name_or_path"),gPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),hPo=o("pretrained_model_name_or_path"),pPo=o(":"),uPo=l(),U=a("ul"),o2=a("li"),ime=a("strong"),_Po=o("albert"),bPo=o(" \u2014 "),DG=a("a"),vPo=o("AlbertForTokenClassification"),FPo=o(" (ALBERT model)"),TPo=l(),r2=a("li"),dme=a("strong"),MPo=o("bert"),EPo=o(" \u2014 "),GG=a("a"),CPo=o("BertForTokenClassification"),wPo=o(" (BERT model)"),APo=l(),t2=a("li"),cme=a("strong"),yPo=o("big_bird"),LPo=o(" \u2014 "),OG=a("a"),xPo=o("BigBirdForTokenClassification"),$Po=o(" (BigBird model)"),kPo=l(),a2=a("li"),fme=a("strong"),SPo=o("camembert"),RPo=o(" \u2014 "),VG=a("a"),BPo=o("CamembertForTokenClassification"),PPo=o(" (CamemBERT model)"),IPo=l(),n2=a("li"),mme=a("strong"),qPo=o("canine"),NPo=o(" \u2014 "),XG=a("a"),jPo=o("CanineForTokenClassification"),DPo=o(" (Canine model)"),GPo=l(),s2=a("li"),gme=a("strong"),OPo=o("convbert"),VPo=o(" \u2014 "),zG=a("a"),XPo=o("ConvBertForTokenClassification"),zPo=o(" (ConvBERT model)"),QPo=l(),l2=a("li"),hme=a("strong"),WPo=o("data2vec-text"),HPo=o(" \u2014 "),QG=a("a"),UPo=o("Data2VecTextForTokenClassification"),JPo=o(" (Data2VecText model)"),YPo=l(),i2=a("li"),pme=a("strong"),KPo=o("deberta"),ZPo=o(" \u2014 "),WG=a("a"),eIo=o("DebertaForTokenClassification"),oIo=o(" (DeBERTa model)"),rIo=l(),d2=a("li"),ume=a("strong"),tIo=o("deberta-v2"),aIo=o(" \u2014 "),HG=a("a"),nIo=o("DebertaV2ForTokenClassification"),sIo=o(" (DeBERTa-v2 model)"),lIo=l(),c2=a("li"),_me=a("strong"),iIo=o("distilbert"),dIo=o(" \u2014 "),UG=a("a"),cIo=o("DistilBertForTokenClassification"),fIo=o(" (DistilBERT model)"),mIo=l(),f2=a("li"),bme=a("strong"),gIo=o("electra"),hIo=o(" \u2014 "),JG=a("a"),pIo=o("ElectraForTokenClassification"),uIo=o(" (ELECTRA model)"),_Io=l(),m2=a("li"),vme=a("strong"),bIo=o("flaubert"),vIo=o(" \u2014 "),YG=a("a"),FIo=o("FlaubertForTokenClassification"),TIo=o(" (FlauBERT model)"),MIo=l(),g2=a("li"),Fme=a("strong"),EIo=o("fnet"),CIo=o(" \u2014 "),KG=a("a"),wIo=o("FNetForTokenClassification"),AIo=o(" (FNet model)"),yIo=l(),h2=a("li"),Tme=a("strong"),LIo=o("funnel"),xIo=o(" \u2014 "),ZG=a("a"),$Io=o("FunnelForTokenClassification"),kIo=o(" (Funnel Transformer model)"),SIo=l(),p2=a("li"),Mme=a("strong"),RIo=o("gpt2"),BIo=o(" \u2014 "),eO=a("a"),PIo=o("GPT2ForTokenClassification"),IIo=o(" (OpenAI GPT-2 model)"),qIo=l(),u2=a("li"),Eme=a("strong"),NIo=o("ibert"),jIo=o(" \u2014 "),oO=a("a"),DIo=o("IBertForTokenClassification"),GIo=o(" (I-BERT model)"),OIo=l(),_2=a("li"),Cme=a("strong"),VIo=o("layoutlm"),XIo=o(" \u2014 "),rO=a("a"),zIo=o("LayoutLMForTokenClassification"),QIo=o(" (LayoutLM model)"),WIo=l(),b2=a("li"),wme=a("strong"),HIo=o("layoutlmv2"),UIo=o(" \u2014 "),tO=a("a"),JIo=o("LayoutLMv2ForTokenClassification"),YIo=o(" (LayoutLMv2 model)"),KIo=l(),v2=a("li"),Ame=a("strong"),ZIo=o("longformer"),eqo=o(" \u2014 "),aO=a("a"),oqo=o("LongformerForTokenClassification"),rqo=o(" (Longformer model)"),tqo=l(),F2=a("li"),yme=a("strong"),aqo=o("megatron-bert"),nqo=o(" \u2014 "),nO=a("a"),sqo=o("MegatronBertForTokenClassification"),lqo=o(" (MegatronBert model)"),iqo=l(),T2=a("li"),Lme=a("strong"),dqo=o("mobilebert"),cqo=o(" \u2014 "),sO=a("a"),fqo=o("MobileBertForTokenClassification"),mqo=o(" (MobileBERT model)"),gqo=l(),M2=a("li"),xme=a("strong"),hqo=o("mpnet"),pqo=o(" \u2014 "),lO=a("a"),uqo=o("MPNetForTokenClassification"),_qo=o(" (MPNet model)"),bqo=l(),E2=a("li"),$me=a("strong"),vqo=o("nystromformer"),Fqo=o(" \u2014 "),iO=a("a"),Tqo=o("NystromformerForTokenClassification"),Mqo=o(" (Nystromformer model)"),Eqo=l(),C2=a("li"),kme=a("strong"),Cqo=o("qdqbert"),wqo=o(" \u2014 "),dO=a("a"),Aqo=o("QDQBertForTokenClassification"),yqo=o(" (QDQBert model)"),Lqo=l(),w2=a("li"),Sme=a("strong"),xqo=o("rembert"),$qo=o(" \u2014 "),cO=a("a"),kqo=o("RemBertForTokenClassification"),Sqo=o(" (RemBERT model)"),Rqo=l(),A2=a("li"),Rme=a("strong"),Bqo=o("roberta"),Pqo=o(" \u2014 "),fO=a("a"),Iqo=o("RobertaForTokenClassification"),qqo=o(" (RoBERTa model)"),Nqo=l(),y2=a("li"),Bme=a("strong"),jqo=o("roformer"),Dqo=o(" \u2014 "),mO=a("a"),Gqo=o("RoFormerForTokenClassification"),Oqo=o(" (RoFormer model)"),Vqo=l(),L2=a("li"),Pme=a("strong"),Xqo=o("squeezebert"),zqo=o(" \u2014 "),gO=a("a"),Qqo=o("SqueezeBertForTokenClassification"),Wqo=o(" (SqueezeBERT model)"),Hqo=l(),x2=a("li"),Ime=a("strong"),Uqo=o("xlm"),Jqo=o(" \u2014 "),hO=a("a"),Yqo=o("XLMForTokenClassification"),Kqo=o(" (XLM model)"),Zqo=l(),$2=a("li"),qme=a("strong"),eNo=o("xlm-roberta"),oNo=o(" \u2014 "),pO=a("a"),rNo=o("XLMRobertaForTokenClassification"),tNo=o(" (XLM-RoBERTa model)"),aNo=l(),k2=a("li"),Nme=a("strong"),nNo=o("xlm-roberta-xl"),sNo=o(" \u2014 "),uO=a("a"),lNo=o("XLMRobertaXLForTokenClassification"),iNo=o(" (XLM-RoBERTa-XL model)"),dNo=l(),S2=a("li"),jme=a("strong"),cNo=o("xlnet"),fNo=o(" \u2014 "),_O=a("a"),mNo=o("XLNetForTokenClassification"),gNo=o(" (XLNet model)"),hNo=l(),R2=a("li"),Dme=a("strong"),pNo=o("yoso"),uNo=o(" \u2014 "),bO=a("a"),_No=o("YosoForTokenClassification"),bNo=o(" (YOSO model)"),vNo=l(),B2=a("p"),FNo=o("The model is set in evaluation mode by default using "),Gme=a("code"),TNo=o("model.eval()"),MNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),ENo=o("model.train()"),CNo=l(),F(P2.$$.fragment),oIe=l(),Ui=a("h2"),I2=a("a"),Vme=a("span"),F(d6.$$.fragment),wNo=l(),Xme=a("span"),ANo=o("AutoModelForQuestionAnswering"),rIe=l(),qo=a("div"),F(c6.$$.fragment),yNo=l(),Ji=a("p"),LNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vO=a("a"),xNo=o("from_pretrained()"),$No=o(" class method or the "),FO=a("a"),kNo=o("from_config()"),SNo=o(` class
method.`),RNo=l(),f6=a("p"),BNo=o("This class cannot be instantiated directly using "),zme=a("code"),PNo=o("__init__()"),INo=o(" (throws an error)."),qNo=l(),ct=a("div"),F(m6.$$.fragment),NNo=l(),Qme=a("p"),jNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DNo=l(),Yi=a("p"),GNo=o(`Note:
Loading a model from its configuration file does `),Wme=a("strong"),ONo=o("not"),VNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),XNo=o("from_pretrained()"),zNo=o(" to load the model weights."),QNo=l(),F(q2.$$.fragment),WNo=l(),to=a("div"),F(g6.$$.fragment),HNo=l(),Hme=a("p"),UNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JNo=l(),Pa=a("p"),YNo=o("The model class to instantiate is selected based on the "),Ume=a("code"),KNo=o("model_type"),ZNo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),ejo=o("pretrained_model_name_or_path"),ojo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),rjo=o("pretrained_model_name_or_path"),tjo=o(":"),ajo=l(),O=a("ul"),N2=a("li"),Kme=a("strong"),njo=o("albert"),sjo=o(" \u2014 "),MO=a("a"),ljo=o("AlbertForQuestionAnswering"),ijo=o(" (ALBERT model)"),djo=l(),j2=a("li"),Zme=a("strong"),cjo=o("bart"),fjo=o(" \u2014 "),EO=a("a"),mjo=o("BartForQuestionAnswering"),gjo=o(" (BART model)"),hjo=l(),D2=a("li"),ege=a("strong"),pjo=o("bert"),ujo=o(" \u2014 "),CO=a("a"),_jo=o("BertForQuestionAnswering"),bjo=o(" (BERT model)"),vjo=l(),G2=a("li"),oge=a("strong"),Fjo=o("big_bird"),Tjo=o(" \u2014 "),wO=a("a"),Mjo=o("BigBirdForQuestionAnswering"),Ejo=o(" (BigBird model)"),Cjo=l(),O2=a("li"),rge=a("strong"),wjo=o("bigbird_pegasus"),Ajo=o(" \u2014 "),AO=a("a"),yjo=o("BigBirdPegasusForQuestionAnswering"),Ljo=o(" (BigBirdPegasus model)"),xjo=l(),V2=a("li"),tge=a("strong"),$jo=o("camembert"),kjo=o(" \u2014 "),yO=a("a"),Sjo=o("CamembertForQuestionAnswering"),Rjo=o(" (CamemBERT model)"),Bjo=l(),X2=a("li"),age=a("strong"),Pjo=o("canine"),Ijo=o(" \u2014 "),LO=a("a"),qjo=o("CanineForQuestionAnswering"),Njo=o(" (Canine model)"),jjo=l(),z2=a("li"),nge=a("strong"),Djo=o("convbert"),Gjo=o(" \u2014 "),xO=a("a"),Ojo=o("ConvBertForQuestionAnswering"),Vjo=o(" (ConvBERT model)"),Xjo=l(),Q2=a("li"),sge=a("strong"),zjo=o("data2vec-text"),Qjo=o(" \u2014 "),$O=a("a"),Wjo=o("Data2VecTextForQuestionAnswering"),Hjo=o(" (Data2VecText model)"),Ujo=l(),W2=a("li"),lge=a("strong"),Jjo=o("deberta"),Yjo=o(" \u2014 "),kO=a("a"),Kjo=o("DebertaForQuestionAnswering"),Zjo=o(" (DeBERTa model)"),eDo=l(),H2=a("li"),ige=a("strong"),oDo=o("deberta-v2"),rDo=o(" \u2014 "),SO=a("a"),tDo=o("DebertaV2ForQuestionAnswering"),aDo=o(" (DeBERTa-v2 model)"),nDo=l(),U2=a("li"),dge=a("strong"),sDo=o("distilbert"),lDo=o(" \u2014 "),RO=a("a"),iDo=o("DistilBertForQuestionAnswering"),dDo=o(" (DistilBERT model)"),cDo=l(),J2=a("li"),cge=a("strong"),fDo=o("electra"),mDo=o(" \u2014 "),BO=a("a"),gDo=o("ElectraForQuestionAnswering"),hDo=o(" (ELECTRA model)"),pDo=l(),Y2=a("li"),fge=a("strong"),uDo=o("flaubert"),_Do=o(" \u2014 "),PO=a("a"),bDo=o("FlaubertForQuestionAnsweringSimple"),vDo=o(" (FlauBERT model)"),FDo=l(),K2=a("li"),mge=a("strong"),TDo=o("fnet"),MDo=o(" \u2014 "),IO=a("a"),EDo=o("FNetForQuestionAnswering"),CDo=o(" (FNet model)"),wDo=l(),Z2=a("li"),gge=a("strong"),ADo=o("funnel"),yDo=o(" \u2014 "),qO=a("a"),LDo=o("FunnelForQuestionAnswering"),xDo=o(" (Funnel Transformer model)"),$Do=l(),ev=a("li"),hge=a("strong"),kDo=o("gptj"),SDo=o(" \u2014 "),NO=a("a"),RDo=o("GPTJForQuestionAnswering"),BDo=o(" (GPT-J model)"),PDo=l(),ov=a("li"),pge=a("strong"),IDo=o("ibert"),qDo=o(" \u2014 "),jO=a("a"),NDo=o("IBertForQuestionAnswering"),jDo=o(" (I-BERT model)"),DDo=l(),rv=a("li"),uge=a("strong"),GDo=o("layoutlmv2"),ODo=o(" \u2014 "),DO=a("a"),VDo=o("LayoutLMv2ForQuestionAnswering"),XDo=o(" (LayoutLMv2 model)"),zDo=l(),tv=a("li"),_ge=a("strong"),QDo=o("led"),WDo=o(" \u2014 "),GO=a("a"),HDo=o("LEDForQuestionAnswering"),UDo=o(" (LED model)"),JDo=l(),av=a("li"),bge=a("strong"),YDo=o("longformer"),KDo=o(" \u2014 "),OO=a("a"),ZDo=o("LongformerForQuestionAnswering"),eGo=o(" (Longformer model)"),oGo=l(),nv=a("li"),vge=a("strong"),rGo=o("lxmert"),tGo=o(" \u2014 "),VO=a("a"),aGo=o("LxmertForQuestionAnswering"),nGo=o(" (LXMERT model)"),sGo=l(),sv=a("li"),Fge=a("strong"),lGo=o("mbart"),iGo=o(" \u2014 "),XO=a("a"),dGo=o("MBartForQuestionAnswering"),cGo=o(" (mBART model)"),fGo=l(),lv=a("li"),Tge=a("strong"),mGo=o("megatron-bert"),gGo=o(" \u2014 "),zO=a("a"),hGo=o("MegatronBertForQuestionAnswering"),pGo=o(" (MegatronBert model)"),uGo=l(),iv=a("li"),Mge=a("strong"),_Go=o("mobilebert"),bGo=o(" \u2014 "),QO=a("a"),vGo=o("MobileBertForQuestionAnswering"),FGo=o(" (MobileBERT model)"),TGo=l(),dv=a("li"),Ege=a("strong"),MGo=o("mpnet"),EGo=o(" \u2014 "),WO=a("a"),CGo=o("MPNetForQuestionAnswering"),wGo=o(" (MPNet model)"),AGo=l(),cv=a("li"),Cge=a("strong"),yGo=o("nystromformer"),LGo=o(" \u2014 "),HO=a("a"),xGo=o("NystromformerForQuestionAnswering"),$Go=o(" (Nystromformer model)"),kGo=l(),fv=a("li"),wge=a("strong"),SGo=o("qdqbert"),RGo=o(" \u2014 "),UO=a("a"),BGo=o("QDQBertForQuestionAnswering"),PGo=o(" (QDQBert model)"),IGo=l(),mv=a("li"),Age=a("strong"),qGo=o("reformer"),NGo=o(" \u2014 "),JO=a("a"),jGo=o("ReformerForQuestionAnswering"),DGo=o(" (Reformer model)"),GGo=l(),gv=a("li"),yge=a("strong"),OGo=o("rembert"),VGo=o(" \u2014 "),YO=a("a"),XGo=o("RemBertForQuestionAnswering"),zGo=o(" (RemBERT model)"),QGo=l(),hv=a("li"),Lge=a("strong"),WGo=o("roberta"),HGo=o(" \u2014 "),KO=a("a"),UGo=o("RobertaForQuestionAnswering"),JGo=o(" (RoBERTa model)"),YGo=l(),pv=a("li"),xge=a("strong"),KGo=o("roformer"),ZGo=o(" \u2014 "),ZO=a("a"),eOo=o("RoFormerForQuestionAnswering"),oOo=o(" (RoFormer model)"),rOo=l(),uv=a("li"),$ge=a("strong"),tOo=o("splinter"),aOo=o(" \u2014 "),eV=a("a"),nOo=o("SplinterForQuestionAnswering"),sOo=o(" (Splinter model)"),lOo=l(),_v=a("li"),kge=a("strong"),iOo=o("squeezebert"),dOo=o(" \u2014 "),oV=a("a"),cOo=o("SqueezeBertForQuestionAnswering"),fOo=o(" (SqueezeBERT model)"),mOo=l(),bv=a("li"),Sge=a("strong"),gOo=o("xlm"),hOo=o(" \u2014 "),rV=a("a"),pOo=o("XLMForQuestionAnsweringSimple"),uOo=o(" (XLM model)"),_Oo=l(),vv=a("li"),Rge=a("strong"),bOo=o("xlm-roberta"),vOo=o(" \u2014 "),tV=a("a"),FOo=o("XLMRobertaForQuestionAnswering"),TOo=o(" (XLM-RoBERTa model)"),MOo=l(),Fv=a("li"),Bge=a("strong"),EOo=o("xlm-roberta-xl"),COo=o(" \u2014 "),aV=a("a"),wOo=o("XLMRobertaXLForQuestionAnswering"),AOo=o(" (XLM-RoBERTa-XL model)"),yOo=l(),Tv=a("li"),Pge=a("strong"),LOo=o("xlnet"),xOo=o(" \u2014 "),nV=a("a"),$Oo=o("XLNetForQuestionAnsweringSimple"),kOo=o(" (XLNet model)"),SOo=l(),Mv=a("li"),Ige=a("strong"),ROo=o("yoso"),BOo=o(" \u2014 "),sV=a("a"),POo=o("YosoForQuestionAnswering"),IOo=o(" (YOSO model)"),qOo=l(),Ev=a("p"),NOo=o("The model is set in evaluation mode by default using "),qge=a("code"),jOo=o("model.eval()"),DOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),GOo=o("model.train()"),OOo=l(),F(Cv.$$.fragment),tIe=l(),Ki=a("h2"),wv=a("a"),jge=a("span"),F(h6.$$.fragment),VOo=l(),Dge=a("span"),XOo=o("AutoModelForTableQuestionAnswering"),aIe=l(),No=a("div"),F(p6.$$.fragment),zOo=l(),Zi=a("p"),QOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lV=a("a"),WOo=o("from_pretrained()"),HOo=o(" class method or the "),iV=a("a"),UOo=o("from_config()"),JOo=o(` class
method.`),YOo=l(),u6=a("p"),KOo=o("This class cannot be instantiated directly using "),Gge=a("code"),ZOo=o("__init__()"),eVo=o(" (throws an error)."),oVo=l(),ft=a("div"),F(_6.$$.fragment),rVo=l(),Oge=a("p"),tVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aVo=l(),ed=a("p"),nVo=o(`Note:
Loading a model from its configuration file does `),Vge=a("strong"),sVo=o("not"),lVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),iVo=o("from_pretrained()"),dVo=o(" to load the model weights."),cVo=l(),F(Av.$$.fragment),fVo=l(),ao=a("div"),F(b6.$$.fragment),mVo=l(),Xge=a("p"),gVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hVo=l(),Ia=a("p"),pVo=o("The model class to instantiate is selected based on the "),zge=a("code"),uVo=o("model_type"),_Vo=o(` property of the config object (either
passed as an argument or loaded from `),Qge=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),FVo=o("pretrained_model_name_or_path"),TVo=o(":"),MVo=l(),Hge=a("ul"),yv=a("li"),Uge=a("strong"),EVo=o("tapas"),CVo=o(" \u2014 "),cV=a("a"),wVo=o("TapasForQuestionAnswering"),AVo=o(" (TAPAS model)"),yVo=l(),Lv=a("p"),LVo=o("The model is set in evaluation mode by default using "),Jge=a("code"),xVo=o("model.eval()"),$Vo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=a("code"),kVo=o("model.train()"),SVo=l(),F(xv.$$.fragment),nIe=l(),od=a("h2"),$v=a("a"),Kge=a("span"),F(v6.$$.fragment),RVo=l(),Zge=a("span"),BVo=o("AutoModelForImageClassification"),sIe=l(),jo=a("div"),F(F6.$$.fragment),PVo=l(),rd=a("p"),IVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fV=a("a"),qVo=o("from_pretrained()"),NVo=o(" class method or the "),mV=a("a"),jVo=o("from_config()"),DVo=o(` class
method.`),GVo=l(),T6=a("p"),OVo=o("This class cannot be instantiated directly using "),ehe=a("code"),VVo=o("__init__()"),XVo=o(" (throws an error)."),zVo=l(),mt=a("div"),F(M6.$$.fragment),QVo=l(),ohe=a("p"),WVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HVo=l(),td=a("p"),UVo=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),JVo=o("not"),YVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),KVo=o("from_pretrained()"),ZVo=o(" to load the model weights."),eXo=l(),F(kv.$$.fragment),oXo=l(),no=a("div"),F(E6.$$.fragment),rXo=l(),the=a("p"),tXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aXo=l(),qa=a("p"),nXo=o("The model class to instantiate is selected based on the "),ahe=a("code"),sXo=o("model_type"),lXo=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),iXo=o("pretrained_model_name_or_path"),dXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),cXo=o("pretrained_model_name_or_path"),fXo=o(":"),mXo=l(),ve=a("ul"),Sv=a("li"),lhe=a("strong"),gXo=o("beit"),hXo=o(" \u2014 "),hV=a("a"),pXo=o("BeitForImageClassification"),uXo=o(" (BEiT model)"),_Xo=l(),Rv=a("li"),ihe=a("strong"),bXo=o("convnext"),vXo=o(" \u2014 "),pV=a("a"),FXo=o("ConvNextForImageClassification"),TXo=o(" (ConvNext model)"),MXo=l(),Bv=a("li"),dhe=a("strong"),EXo=o("data2vec-vision"),CXo=o(" \u2014 "),uV=a("a"),wXo=o("Data2VecVisionForImageClassification"),AXo=o(" (Data2VecVision model)"),yXo=l(),Bs=a("li"),che=a("strong"),LXo=o("deit"),xXo=o(" \u2014 "),_V=a("a"),$Xo=o("DeiTForImageClassification"),kXo=o(" or "),bV=a("a"),SXo=o("DeiTForImageClassificationWithTeacher"),RXo=o(" (DeiT model)"),BXo=l(),Pv=a("li"),fhe=a("strong"),PXo=o("imagegpt"),IXo=o(" \u2014 "),vV=a("a"),qXo=o("ImageGPTForImageClassification"),NXo=o(" (ImageGPT model)"),jXo=l(),gt=a("li"),mhe=a("strong"),DXo=o("perceiver"),GXo=o(" \u2014 "),FV=a("a"),OXo=o("PerceiverForImageClassificationLearned"),VXo=o(" or "),TV=a("a"),XXo=o("PerceiverForImageClassificationFourier"),zXo=o(" or "),MV=a("a"),QXo=o("PerceiverForImageClassificationConvProcessing"),WXo=o(" (Perceiver model)"),HXo=l(),Iv=a("li"),ghe=a("strong"),UXo=o("poolformer"),JXo=o(" \u2014 "),EV=a("a"),YXo=o("PoolFormerForImageClassification"),KXo=o(" (PoolFormer model)"),ZXo=l(),qv=a("li"),hhe=a("strong"),ezo=o("regnet"),ozo=o(" \u2014 "),CV=a("a"),rzo=o("RegNetForImageClassification"),tzo=o(" (RegNet model)"),azo=l(),Nv=a("li"),phe=a("strong"),nzo=o("resnet"),szo=o(" \u2014 "),wV=a("a"),lzo=o("ResNetForImageClassification"),izo=o(" (ResNet model)"),dzo=l(),jv=a("li"),uhe=a("strong"),czo=o("segformer"),fzo=o(" \u2014 "),AV=a("a"),mzo=o("SegformerForImageClassification"),gzo=o(" (SegFormer model)"),hzo=l(),Dv=a("li"),_he=a("strong"),pzo=o("swin"),uzo=o(" \u2014 "),yV=a("a"),_zo=o("SwinForImageClassification"),bzo=o(" (Swin model)"),vzo=l(),Gv=a("li"),bhe=a("strong"),Fzo=o("van"),Tzo=o(" \u2014 "),LV=a("a"),Mzo=o("VanForImageClassification"),Ezo=o(" (VAN model)"),Czo=l(),Ov=a("li"),vhe=a("strong"),wzo=o("vit"),Azo=o(" \u2014 "),xV=a("a"),yzo=o("ViTForImageClassification"),Lzo=o(" (ViT model)"),xzo=l(),Vv=a("p"),$zo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),kzo=o("model.eval()"),Szo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),Rzo=o("model.train()"),Bzo=l(),F(Xv.$$.fragment),lIe=l(),ad=a("h2"),zv=a("a"),Mhe=a("span"),F(C6.$$.fragment),Pzo=l(),Ehe=a("span"),Izo=o("AutoModelForVision2Seq"),iIe=l(),Do=a("div"),F(w6.$$.fragment),qzo=l(),nd=a("p"),Nzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$V=a("a"),jzo=o("from_pretrained()"),Dzo=o(" class method or the "),kV=a("a"),Gzo=o("from_config()"),Ozo=o(` class
method.`),Vzo=l(),A6=a("p"),Xzo=o("This class cannot be instantiated directly using "),Che=a("code"),zzo=o("__init__()"),Qzo=o(" (throws an error)."),Wzo=l(),ht=a("div"),F(y6.$$.fragment),Hzo=l(),whe=a("p"),Uzo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jzo=l(),sd=a("p"),Yzo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),Kzo=o("not"),Zzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),eQo=o("from_pretrained()"),oQo=o(" to load the model weights."),rQo=l(),F(Qv.$$.fragment),tQo=l(),so=a("div"),F(L6.$$.fragment),aQo=l(),yhe=a("p"),nQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sQo=l(),Na=a("p"),lQo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),iQo=o("model_type"),dQo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),cQo=o("pretrained_model_name_or_path"),fQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),mQo=o("pretrained_model_name_or_path"),gQo=o(":"),hQo=l(),khe=a("ul"),Wv=a("li"),She=a("strong"),pQo=o("vision-encoder-decoder"),uQo=o(" \u2014 "),RV=a("a"),_Qo=o("VisionEncoderDecoderModel"),bQo=o(" (Vision Encoder decoder model)"),vQo=l(),Hv=a("p"),FQo=o("The model is set in evaluation mode by default using "),Rhe=a("code"),TQo=o("model.eval()"),MQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=a("code"),EQo=o("model.train()"),CQo=l(),F(Uv.$$.fragment),dIe=l(),ld=a("h2"),Jv=a("a"),Phe=a("span"),F(x6.$$.fragment),wQo=l(),Ihe=a("span"),AQo=o("AutoModelForAudioClassification"),cIe=l(),Go=a("div"),F($6.$$.fragment),yQo=l(),id=a("p"),LQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BV=a("a"),xQo=o("from_pretrained()"),$Qo=o(" class method or the "),PV=a("a"),kQo=o("from_config()"),SQo=o(` class
method.`),RQo=l(),k6=a("p"),BQo=o("This class cannot be instantiated directly using "),qhe=a("code"),PQo=o("__init__()"),IQo=o(" (throws an error)."),qQo=l(),pt=a("div"),F(S6.$$.fragment),NQo=l(),Nhe=a("p"),jQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),DQo=l(),dd=a("p"),GQo=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),OQo=o("not"),VQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),XQo=o("from_pretrained()"),zQo=o(" to load the model weights."),QQo=l(),F(Yv.$$.fragment),WQo=l(),lo=a("div"),F(R6.$$.fragment),HQo=l(),Dhe=a("p"),UQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),JQo=l(),ja=a("p"),YQo=o("The model class to instantiate is selected based on the "),Ghe=a("code"),KQo=o("model_type"),ZQo=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(":"),aWo=l(),Ne=a("ul"),Kv=a("li"),Xhe=a("strong"),nWo=o("data2vec-audio"),sWo=o(" \u2014 "),qV=a("a"),lWo=o("Data2VecAudioForSequenceClassification"),iWo=o(" (Data2VecAudio model)"),dWo=l(),Zv=a("li"),zhe=a("strong"),cWo=o("hubert"),fWo=o(" \u2014 "),NV=a("a"),mWo=o("HubertForSequenceClassification"),gWo=o(" (Hubert model)"),hWo=l(),eF=a("li"),Qhe=a("strong"),pWo=o("sew"),uWo=o(" \u2014 "),jV=a("a"),_Wo=o("SEWForSequenceClassification"),bWo=o(" (SEW model)"),vWo=l(),oF=a("li"),Whe=a("strong"),FWo=o("sew-d"),TWo=o(" \u2014 "),DV=a("a"),MWo=o("SEWDForSequenceClassification"),EWo=o(" (SEW-D model)"),CWo=l(),rF=a("li"),Hhe=a("strong"),wWo=o("unispeech"),AWo=o(" \u2014 "),GV=a("a"),yWo=o("UniSpeechForSequenceClassification"),LWo=o(" (UniSpeech model)"),xWo=l(),tF=a("li"),Uhe=a("strong"),$Wo=o("unispeech-sat"),kWo=o(" \u2014 "),OV=a("a"),SWo=o("UniSpeechSatForSequenceClassification"),RWo=o(" (UniSpeechSat model)"),BWo=l(),aF=a("li"),Jhe=a("strong"),PWo=o("wav2vec2"),IWo=o(" \u2014 "),VV=a("a"),qWo=o("Wav2Vec2ForSequenceClassification"),NWo=o(" (Wav2Vec2 model)"),jWo=l(),nF=a("li"),Yhe=a("strong"),DWo=o("wavlm"),GWo=o(" \u2014 "),XV=a("a"),OWo=o("WavLMForSequenceClassification"),VWo=o(" (WavLM model)"),XWo=l(),sF=a("p"),zWo=o("The model is set in evaluation mode by default using "),Khe=a("code"),QWo=o("model.eval()"),WWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),HWo=o("model.train()"),UWo=l(),F(lF.$$.fragment),fIe=l(),cd=a("h2"),iF=a("a"),epe=a("span"),F(B6.$$.fragment),JWo=l(),ope=a("span"),YWo=o("AutoModelForAudioFrameClassification"),mIe=l(),Oo=a("div"),F(P6.$$.fragment),KWo=l(),fd=a("p"),ZWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zV=a("a"),eHo=o("from_pretrained()"),oHo=o(" class method or the "),QV=a("a"),rHo=o("from_config()"),tHo=o(` class
method.`),aHo=l(),I6=a("p"),nHo=o("This class cannot be instantiated directly using "),rpe=a("code"),sHo=o("__init__()"),lHo=o(" (throws an error)."),iHo=l(),ut=a("div"),F(q6.$$.fragment),dHo=l(),tpe=a("p"),cHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fHo=l(),md=a("p"),mHo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),gHo=o("not"),hHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),pHo=o("from_pretrained()"),uHo=o(" to load the model weights."),_Ho=l(),F(dF.$$.fragment),bHo=l(),io=a("div"),F(N6.$$.fragment),vHo=l(),npe=a("p"),FHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),THo=l(),Da=a("p"),MHo=o("The model class to instantiate is selected based on the "),spe=a("code"),EHo=o("model_type"),CHo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),wHo=o("pretrained_model_name_or_path"),AHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),yHo=o("pretrained_model_name_or_path"),LHo=o(":"),xHo=l(),Ga=a("ul"),cF=a("li"),dpe=a("strong"),$Ho=o("data2vec-audio"),kHo=o(" \u2014 "),HV=a("a"),SHo=o("Data2VecAudioForAudioFrameClassification"),RHo=o(" (Data2VecAudio model)"),BHo=l(),fF=a("li"),cpe=a("strong"),PHo=o("unispeech-sat"),IHo=o(" \u2014 "),UV=a("a"),qHo=o("UniSpeechSatForAudioFrameClassification"),NHo=o(" (UniSpeechSat model)"),jHo=l(),mF=a("li"),fpe=a("strong"),DHo=o("wav2vec2"),GHo=o(" \u2014 "),JV=a("a"),OHo=o("Wav2Vec2ForAudioFrameClassification"),VHo=o(" (Wav2Vec2 model)"),XHo=l(),gF=a("li"),mpe=a("strong"),zHo=o("wavlm"),QHo=o(" \u2014 "),YV=a("a"),WHo=o("WavLMForAudioFrameClassification"),HHo=o(" (WavLM model)"),UHo=l(),hF=a("p"),JHo=o("The model is set in evaluation mode by default using "),gpe=a("code"),YHo=o("model.eval()"),KHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),ZHo=o("model.train()"),eUo=l(),F(pF.$$.fragment),gIe=l(),gd=a("h2"),uF=a("a"),ppe=a("span"),F(j6.$$.fragment),oUo=l(),upe=a("span"),rUo=o("AutoModelForCTC"),hIe=l(),Vo=a("div"),F(D6.$$.fragment),tUo=l(),hd=a("p"),aUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),KV=a("a"),nUo=o("from_pretrained()"),sUo=o(" class method or the "),ZV=a("a"),lUo=o("from_config()"),iUo=o(` class
method.`),dUo=l(),G6=a("p"),cUo=o("This class cannot be instantiated directly using "),_pe=a("code"),fUo=o("__init__()"),mUo=o(" (throws an error)."),gUo=l(),_t=a("div"),F(O6.$$.fragment),hUo=l(),bpe=a("p"),pUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uUo=l(),pd=a("p"),_Uo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),bUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),FUo=o("from_pretrained()"),TUo=o(" to load the model weights."),MUo=l(),F(_F.$$.fragment),EUo=l(),co=a("div"),F(V6.$$.fragment),CUo=l(),Fpe=a("p"),wUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),AUo=l(),Oa=a("p"),yUo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),LUo=o("model_type"),xUo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),$Uo=o("pretrained_model_name_or_path"),kUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),SUo=o("pretrained_model_name_or_path"),RUo=o(":"),BUo=l(),je=a("ul"),bF=a("li"),Cpe=a("strong"),PUo=o("data2vec-audio"),IUo=o(" \u2014 "),oX=a("a"),qUo=o("Data2VecAudioForCTC"),NUo=o(" (Data2VecAudio model)"),jUo=l(),vF=a("li"),wpe=a("strong"),DUo=o("hubert"),GUo=o(" \u2014 "),rX=a("a"),OUo=o("HubertForCTC"),VUo=o(" (Hubert model)"),XUo=l(),FF=a("li"),Ape=a("strong"),zUo=o("sew"),QUo=o(" \u2014 "),tX=a("a"),WUo=o("SEWForCTC"),HUo=o(" (SEW model)"),UUo=l(),TF=a("li"),ype=a("strong"),JUo=o("sew-d"),YUo=o(" \u2014 "),aX=a("a"),KUo=o("SEWDForCTC"),ZUo=o(" (SEW-D model)"),eJo=l(),MF=a("li"),Lpe=a("strong"),oJo=o("unispeech"),rJo=o(" \u2014 "),nX=a("a"),tJo=o("UniSpeechForCTC"),aJo=o(" (UniSpeech model)"),nJo=l(),EF=a("li"),xpe=a("strong"),sJo=o("unispeech-sat"),lJo=o(" \u2014 "),sX=a("a"),iJo=o("UniSpeechSatForCTC"),dJo=o(" (UniSpeechSat model)"),cJo=l(),CF=a("li"),$pe=a("strong"),fJo=o("wav2vec2"),mJo=o(" \u2014 "),lX=a("a"),gJo=o("Wav2Vec2ForCTC"),hJo=o(" (Wav2Vec2 model)"),pJo=l(),wF=a("li"),kpe=a("strong"),uJo=o("wavlm"),_Jo=o(" \u2014 "),iX=a("a"),bJo=o("WavLMForCTC"),vJo=o(" (WavLM model)"),FJo=l(),AF=a("p"),TJo=o("The model is set in evaluation mode by default using "),Spe=a("code"),MJo=o("model.eval()"),EJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),CJo=o("model.train()"),wJo=l(),F(yF.$$.fragment),pIe=l(),ud=a("h2"),LF=a("a"),Bpe=a("span"),F(X6.$$.fragment),AJo=l(),Ppe=a("span"),yJo=o("AutoModelForSpeechSeq2Seq"),uIe=l(),Xo=a("div"),F(z6.$$.fragment),LJo=l(),_d=a("p"),xJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dX=a("a"),$Jo=o("from_pretrained()"),kJo=o(" class method or the "),cX=a("a"),SJo=o("from_config()"),RJo=o(` class
method.`),BJo=l(),Q6=a("p"),PJo=o("This class cannot be instantiated directly using "),Ipe=a("code"),IJo=o("__init__()"),qJo=o(" (throws an error)."),NJo=l(),bt=a("div"),F(W6.$$.fragment),jJo=l(),qpe=a("p"),DJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GJo=l(),bd=a("p"),OJo=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),VJo=o("not"),XJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),zJo=o("from_pretrained()"),QJo=o(" to load the model weights."),WJo=l(),F(xF.$$.fragment),HJo=l(),fo=a("div"),F(H6.$$.fragment),UJo=l(),jpe=a("p"),JJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YJo=l(),Va=a("p"),KJo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),U6=a("ul"),$F=a("li"),Vpe=a("strong"),sYo=o("speech-encoder-decoder"),lYo=o(" \u2014 "),mX=a("a"),iYo=o("SpeechEncoderDecoderModel"),dYo=o(" (Speech Encoder decoder model)"),cYo=l(),kF=a("li"),Xpe=a("strong"),fYo=o("speech_to_text"),mYo=o(" \u2014 "),gX=a("a"),gYo=o("Speech2TextForConditionalGeneration"),hYo=o(" (Speech2Text model)"),pYo=l(),SF=a("p"),uYo=o("The model is set in evaluation mode by default using "),zpe=a("code"),_Yo=o("model.eval()"),bYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=a("code"),vYo=o("model.train()"),FYo=l(),F(RF.$$.fragment),_Ie=l(),vd=a("h2"),BF=a("a"),Wpe=a("span"),F(J6.$$.fragment),TYo=l(),Hpe=a("span"),MYo=o("AutoModelForAudioXVector"),bIe=l(),zo=a("div"),F(Y6.$$.fragment),EYo=l(),Fd=a("p"),CYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hX=a("a"),wYo=o("from_pretrained()"),AYo=o(" class method or the "),pX=a("a"),yYo=o("from_config()"),LYo=o(` class
method.`),xYo=l(),K6=a("p"),$Yo=o("This class cannot be instantiated directly using "),Upe=a("code"),kYo=o("__init__()"),SYo=o(" (throws an error)."),RYo=l(),vt=a("div"),F(Z6.$$.fragment),BYo=l(),Jpe=a("p"),PYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),IYo=l(),Td=a("p"),qYo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),NYo=o("not"),jYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),DYo=o("from_pretrained()"),GYo=o(" to load the model weights."),OYo=l(),F(PF.$$.fragment),VYo=l(),mo=a("div"),F(ey.$$.fragment),XYo=l(),Kpe=a("p"),zYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),QYo=l(),Xa=a("p"),WYo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),HYo=o("model_type"),UYo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),JYo=o("pretrained_model_name_or_path"),YYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(":"),eKo=l(),za=a("ul"),IF=a("li"),rue=a("strong"),oKo=o("data2vec-audio"),rKo=o(" \u2014 "),_X=a("a"),tKo=o("Data2VecAudioForXVector"),aKo=o(" (Data2VecAudio model)"),nKo=l(),qF=a("li"),tue=a("strong"),sKo=o("unispeech-sat"),lKo=o(" \u2014 "),bX=a("a"),iKo=o("UniSpeechSatForXVector"),dKo=o(" (UniSpeechSat model)"),cKo=l(),NF=a("li"),aue=a("strong"),fKo=o("wav2vec2"),mKo=o(" \u2014 "),vX=a("a"),gKo=o("Wav2Vec2ForXVector"),hKo=o(" (Wav2Vec2 model)"),pKo=l(),jF=a("li"),nue=a("strong"),uKo=o("wavlm"),_Ko=o(" \u2014 "),FX=a("a"),bKo=o("WavLMForXVector"),vKo=o(" (WavLM model)"),FKo=l(),DF=a("p"),TKo=o("The model is set in evaluation mode by default using "),sue=a("code"),MKo=o("model.eval()"),EKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),CKo=o("model.train()"),wKo=l(),F(GF.$$.fragment),vIe=l(),Md=a("h2"),OF=a("a"),iue=a("span"),F(oy.$$.fragment),AKo=l(),due=a("span"),yKo=o("AutoModelForMaskedImageModeling"),FIe=l(),Qo=a("div"),F(ry.$$.fragment),LKo=l(),Ed=a("p"),xKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),TX=a("a"),$Ko=o("from_pretrained()"),kKo=o(" class method or the "),MX=a("a"),SKo=o("from_config()"),RKo=o(` class
method.`),BKo=l(),ty=a("p"),PKo=o("This class cannot be instantiated directly using "),cue=a("code"),IKo=o("__init__()"),qKo=o(" (throws an error)."),NKo=l(),Ft=a("div"),F(ay.$$.fragment),jKo=l(),fue=a("p"),DKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),GKo=l(),Cd=a("p"),OKo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),VKo=o("not"),XKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),zKo=o("from_pretrained()"),QKo=o(" to load the model weights."),WKo=l(),F(VF.$$.fragment),HKo=l(),go=a("div"),F(ny.$$.fragment),UKo=l(),gue=a("p"),JKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),YKo=l(),Qa=a("p"),KKo=o("The model class to instantiate is selected based on the "),hue=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),wd=a("ul"),XF=a("li"),_ue=a("strong"),sZo=o("deit"),lZo=o(" \u2014 "),CX=a("a"),iZo=o("DeiTForMaskedImageModeling"),dZo=o(" (DeiT model)"),cZo=l(),zF=a("li"),bue=a("strong"),fZo=o("swin"),mZo=o(" \u2014 "),wX=a("a"),gZo=o("SwinForMaskedImageModeling"),hZo=o(" (Swin model)"),pZo=l(),QF=a("li"),vue=a("strong"),uZo=o("vit"),_Zo=o(" \u2014 "),AX=a("a"),bZo=o("ViTForMaskedImageModeling"),vZo=o(" (ViT model)"),FZo=l(),WF=a("p"),TZo=o("The model is set in evaluation mode by default using "),Fue=a("code"),MZo=o("model.eval()"),EZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=a("code"),CZo=o("model.train()"),wZo=l(),F(HF.$$.fragment),TIe=l(),Ad=a("h2"),UF=a("a"),Mue=a("span"),F(sy.$$.fragment),AZo=l(),Eue=a("span"),yZo=o("AutoModelForObjectDetection"),MIe=l(),Wo=a("div"),F(ly.$$.fragment),LZo=l(),yd=a("p"),xZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),yX=a("a"),$Zo=o("from_pretrained()"),kZo=o(" class method or the "),LX=a("a"),SZo=o("from_config()"),RZo=o(` class
method.`),BZo=l(),iy=a("p"),PZo=o("This class cannot be instantiated directly using "),Cue=a("code"),IZo=o("__init__()"),qZo=o(" (throws an error)."),NZo=l(),Tt=a("div"),F(dy.$$.fragment),jZo=l(),wue=a("p"),DZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),GZo=l(),Ld=a("p"),OZo=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),VZo=o("not"),XZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),zZo=o("from_pretrained()"),QZo=o(" to load the model weights."),WZo=l(),F(JF.$$.fragment),HZo=l(),ho=a("div"),F(cy.$$.fragment),UZo=l(),yue=a("p"),JZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),YZo=l(),Wa=a("p"),KZo=o("The model class to instantiate is selected based on the "),Lue=a("code"),ZZo=o("model_type"),eer=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=a("code"),ter=o("pretrained_model_name_or_path"),aer=o(":"),ner=l(),fy=a("ul"),YF=a("li"),kue=a("strong"),ser=o("detr"),ler=o(" \u2014 "),$X=a("a"),ier=o("DetrForObjectDetection"),der=o(" (DETR model)"),cer=l(),KF=a("li"),Sue=a("strong"),fer=o("yolos"),mer=o(" \u2014 "),kX=a("a"),ger=o("YolosForObjectDetection"),her=o(" (YOLOS model)"),per=l(),ZF=a("p"),uer=o("The model is set in evaluation mode by default using "),Rue=a("code"),_er=o("model.eval()"),ber=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),ver=o("model.train()"),Fer=l(),F(e0.$$.fragment),EIe=l(),xd=a("h2"),o0=a("a"),Pue=a("span"),F(my.$$.fragment),Ter=l(),Iue=a("span"),Mer=o("AutoModelForImageSegmentation"),CIe=l(),Ho=a("div"),F(gy.$$.fragment),Eer=l(),$d=a("p"),Cer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),SX=a("a"),wer=o("from_pretrained()"),Aer=o(" class method or the "),RX=a("a"),yer=o("from_config()"),Ler=o(` class
method.`),xer=l(),hy=a("p"),$er=o("This class cannot be instantiated directly using "),que=a("code"),ker=o("__init__()"),Ser=o(" (throws an error)."),Rer=l(),Mt=a("div"),F(py.$$.fragment),Ber=l(),Nue=a("p"),Per=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ier=l(),kd=a("p"),qer=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),Ner=o("not"),jer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),Der=o("from_pretrained()"),Ger=o(" to load the model weights."),Oer=l(),F(r0.$$.fragment),Ver=l(),po=a("div"),F(uy.$$.fragment),Xer=l(),Due=a("p"),zer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qer=l(),Ha=a("p"),Wer=o("The model class to instantiate is selected based on the "),Gue=a("code"),Her=o("model_type"),Uer=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),Jer=o("pretrained_model_name_or_path"),Yer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),Ker=o("pretrained_model_name_or_path"),Zer=o(":"),eor=l(),Xue=a("ul"),t0=a("li"),zue=a("strong"),oor=o("detr"),ror=o(" \u2014 "),PX=a("a"),tor=o("DetrForSegmentation"),aor=o(" (DETR model)"),nor=l(),a0=a("p"),sor=o("The model is set in evaluation mode by default using "),Que=a("code"),lor=o("model.eval()"),ior=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),dor=o("model.train()"),cor=l(),F(n0.$$.fragment),wIe=l(),Sd=a("h2"),s0=a("a"),Hue=a("span"),F(_y.$$.fragment),mor=l(),Uue=a("span"),gor=o("AutoModelForSemanticSegmentation"),AIe=l(),Uo=a("div"),F(by.$$.fragment),hor=l(),Rd=a("p"),por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),IX=a("a"),uor=o("from_pretrained()"),_or=o(" class method or the "),qX=a("a"),bor=o("from_config()"),vor=o(` class
method.`),For=l(),vy=a("p"),Tor=o("This class cannot be instantiated directly using "),Jue=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),Cor=l(),Et=a("div"),F(Fy.$$.fragment),wor=l(),Yue=a("p"),Aor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),yor=l(),Bd=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),xor=o("not"),$or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),kor=o("from_pretrained()"),Sor=o(" to load the model weights."),Ror=l(),F(l0.$$.fragment),Bor=l(),uo=a("div"),F(Ty.$$.fragment),Por=l(),Zue=a("p"),Ior=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qor=l(),Ua=a("p"),Nor=o("The model class to instantiate is selected based on the "),e_e=a("code"),jor=o("model_type"),Dor=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(":"),zor=l(),Ja=a("ul"),i0=a("li"),t_e=a("strong"),Qor=o("beit"),Wor=o(" \u2014 "),jX=a("a"),Hor=o("BeitForSemanticSegmentation"),Uor=o(" (BEiT model)"),Jor=l(),d0=a("li"),a_e=a("strong"),Yor=o("data2vec-vision"),Kor=o(" \u2014 "),DX=a("a"),Zor=o("Data2VecVisionForSemanticSegmentation"),err=o(" (Data2VecVision model)"),orr=l(),c0=a("li"),n_e=a("strong"),rrr=o("dpt"),trr=o(" \u2014 "),GX=a("a"),arr=o("DPTForSemanticSegmentation"),nrr=o(" (DPT model)"),srr=l(),f0=a("li"),s_e=a("strong"),lrr=o("segformer"),irr=o(" \u2014 "),OX=a("a"),drr=o("SegformerForSemanticSegmentation"),crr=o(" (SegFormer model)"),frr=l(),m0=a("p"),mrr=o("The model is set in evaluation mode by default using "),l_e=a("code"),grr=o("model.eval()"),hrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),prr=o("model.train()"),urr=l(),F(g0.$$.fragment),yIe=l(),Pd=a("h2"),h0=a("a"),d_e=a("span"),F(My.$$.fragment),_rr=l(),c_e=a("span"),brr=o("AutoModelForInstanceSegmentation"),LIe=l(),Jo=a("div"),F(Ey.$$.fragment),vrr=l(),Id=a("p"),Frr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),VX=a("a"),Trr=o("from_pretrained()"),Mrr=o(" class method or the "),XX=a("a"),Err=o("from_config()"),Crr=o(` class
method.`),wrr=l(),Cy=a("p"),Arr=o("This class cannot be instantiated directly using "),f_e=a("code"),yrr=o("__init__()"),Lrr=o(" (throws an error)."),xrr=l(),Ct=a("div"),F(wy.$$.fragment),$rr=l(),m_e=a("p"),krr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Srr=l(),qd=a("p"),Rrr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),Brr=o("not"),Prr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),Irr=o("from_pretrained()"),qrr=o(" to load the model weights."),Nrr=l(),F(p0.$$.fragment),jrr=l(),_o=a("div"),F(Ay.$$.fragment),Drr=l(),h_e=a("p"),Grr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Orr=l(),Ya=a("p"),Vrr=o("The model class to instantiate is selected based on the "),p_e=a("code"),Xrr=o("model_type"),zrr=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),Qrr=o("pretrained_model_name_or_path"),Wrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),Hrr=o("pretrained_model_name_or_path"),Urr=o(":"),Jrr=l(),b_e=a("ul"),u0=a("li"),v_e=a("strong"),Yrr=o("maskformer"),Krr=o(" \u2014 "),QX=a("a"),Zrr=o("MaskFormerForInstanceSegmentation"),etr=o(" (MaskFormer model)"),otr=l(),_0=a("p"),rtr=o("The model is set in evaluation mode by default using "),F_e=a("code"),ttr=o("model.eval()"),atr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),ntr=o("model.train()"),str=l(),F(b0.$$.fragment),xIe=l(),Nd=a("h2"),v0=a("a"),M_e=a("span"),F(yy.$$.fragment),ltr=l(),E_e=a("span"),itr=o("TFAutoModel"),$Ie=l(),Yo=a("div"),F(Ly.$$.fragment),dtr=l(),jd=a("p"),ctr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WX=a("a"),ftr=o("from_pretrained()"),mtr=o(" class method or the "),HX=a("a"),gtr=o("from_config()"),htr=o(` class
method.`),ptr=l(),xy=a("p"),utr=o("This class cannot be instantiated directly using "),C_e=a("code"),_tr=o("__init__()"),btr=o(" (throws an error)."),vtr=l(),wt=a("div"),F($y.$$.fragment),Ftr=l(),w_e=a("p"),Ttr=o("Instantiates one of the base model classes of the library from a configuration."),Mtr=l(),Dd=a("p"),Etr=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),Ctr=o("not"),wtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),Atr=o("from_pretrained()"),ytr=o(" to load the model weights."),Ltr=l(),F(F0.$$.fragment),xtr=l(),wr=a("div"),F(ky.$$.fragment),$tr=l(),y_e=a("p"),ktr=o("Instantiate one of the base model classes of the library from a pretrained model."),Str=l(),Ka=a("p"),Rtr=o("The model class to instantiate is selected based on the "),L_e=a("code"),Btr=o("model_type"),Ptr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),Itr=o("pretrained_model_name_or_path"),qtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),Ntr=o("pretrained_model_name_or_path"),jtr=o(":"),Dtr=l(),j=a("ul"),T0=a("li"),k_e=a("strong"),Gtr=o("albert"),Otr=o(" \u2014 "),JX=a("a"),Vtr=o("TFAlbertModel"),Xtr=o(" (ALBERT model)"),ztr=l(),M0=a("li"),S_e=a("strong"),Qtr=o("bart"),Wtr=o(" \u2014 "),YX=a("a"),Htr=o("TFBartModel"),Utr=o(" (BART model)"),Jtr=l(),E0=a("li"),R_e=a("strong"),Ytr=o("bert"),Ktr=o(" \u2014 "),KX=a("a"),Ztr=o("TFBertModel"),ear=o(" (BERT model)"),oar=l(),C0=a("li"),B_e=a("strong"),rar=o("blenderbot"),tar=o(" \u2014 "),ZX=a("a"),aar=o("TFBlenderbotModel"),nar=o(" (Blenderbot model)"),sar=l(),w0=a("li"),P_e=a("strong"),lar=o("blenderbot-small"),iar=o(" \u2014 "),ez=a("a"),dar=o("TFBlenderbotSmallModel"),car=o(" (BlenderbotSmall model)"),far=l(),A0=a("li"),I_e=a("strong"),mar=o("camembert"),gar=o(" \u2014 "),oz=a("a"),har=o("TFCamembertModel"),par=o(" (CamemBERT model)"),uar=l(),y0=a("li"),q_e=a("strong"),_ar=o("clip"),bar=o(" \u2014 "),rz=a("a"),Far=o("TFCLIPModel"),Tar=o(" (CLIP model)"),Mar=l(),L0=a("li"),N_e=a("strong"),Ear=o("convbert"),Car=o(" \u2014 "),tz=a("a"),war=o("TFConvBertModel"),Aar=o(" (ConvBERT model)"),yar=l(),x0=a("li"),j_e=a("strong"),Lar=o("convnext"),xar=o(" \u2014 "),az=a("a"),$ar=o("TFConvNextModel"),kar=o(" (ConvNext model)"),Sar=l(),$0=a("li"),D_e=a("strong"),Rar=o("ctrl"),Bar=o(" \u2014 "),nz=a("a"),Par=o("TFCTRLModel"),Iar=o(" (CTRL model)"),qar=l(),k0=a("li"),G_e=a("strong"),Nar=o("data2vec-vision"),jar=o(" \u2014 "),sz=a("a"),Dar=o("TFData2VecVisionModel"),Gar=o(" (Data2VecVision model)"),Oar=l(),S0=a("li"),O_e=a("strong"),Var=o("deberta"),Xar=o(" \u2014 "),lz=a("a"),zar=o("TFDebertaModel"),Qar=o(" (DeBERTa model)"),War=l(),R0=a("li"),V_e=a("strong"),Har=o("deberta-v2"),Uar=o(" \u2014 "),iz=a("a"),Jar=o("TFDebertaV2Model"),Yar=o(" (DeBERTa-v2 model)"),Kar=l(),B0=a("li"),X_e=a("strong"),Zar=o("distilbert"),enr=o(" \u2014 "),dz=a("a"),onr=o("TFDistilBertModel"),rnr=o(" (DistilBERT model)"),tnr=l(),P0=a("li"),z_e=a("strong"),anr=o("dpr"),nnr=o(" \u2014 "),cz=a("a"),snr=o("TFDPRQuestionEncoder"),lnr=o(" (DPR model)"),inr=l(),I0=a("li"),Q_e=a("strong"),dnr=o("electra"),cnr=o(" \u2014 "),fz=a("a"),fnr=o("TFElectraModel"),mnr=o(" (ELECTRA model)"),gnr=l(),q0=a("li"),W_e=a("strong"),hnr=o("flaubert"),pnr=o(" \u2014 "),mz=a("a"),unr=o("TFFlaubertModel"),_nr=o(" (FlauBERT model)"),bnr=l(),Ps=a("li"),H_e=a("strong"),vnr=o("funnel"),Fnr=o(" \u2014 "),gz=a("a"),Tnr=o("TFFunnelModel"),Mnr=o(" or "),hz=a("a"),Enr=o("TFFunnelBaseModel"),Cnr=o(" (Funnel Transformer model)"),wnr=l(),N0=a("li"),U_e=a("strong"),Anr=o("gpt2"),ynr=o(" \u2014 "),pz=a("a"),Lnr=o("TFGPT2Model"),xnr=o(" (OpenAI GPT-2 model)"),$nr=l(),j0=a("li"),J_e=a("strong"),knr=o("gptj"),Snr=o(" \u2014 "),uz=a("a"),Rnr=o("TFGPTJModel"),Bnr=o(" (GPT-J model)"),Pnr=l(),D0=a("li"),Y_e=a("strong"),Inr=o("hubert"),qnr=o(" \u2014 "),_z=a("a"),Nnr=o("TFHubertModel"),jnr=o(" (Hubert model)"),Dnr=l(),G0=a("li"),K_e=a("strong"),Gnr=o("layoutlm"),Onr=o(" \u2014 "),bz=a("a"),Vnr=o("TFLayoutLMModel"),Xnr=o(" (LayoutLM model)"),znr=l(),O0=a("li"),Z_e=a("strong"),Qnr=o("led"),Wnr=o(" \u2014 "),vz=a("a"),Hnr=o("TFLEDModel"),Unr=o(" (LED model)"),Jnr=l(),V0=a("li"),e1e=a("strong"),Ynr=o("longformer"),Knr=o(" \u2014 "),Fz=a("a"),Znr=o("TFLongformerModel"),esr=o(" (Longformer model)"),osr=l(),X0=a("li"),o1e=a("strong"),rsr=o("lxmert"),tsr=o(" \u2014 "),Tz=a("a"),asr=o("TFLxmertModel"),nsr=o(" (LXMERT model)"),ssr=l(),z0=a("li"),r1e=a("strong"),lsr=o("marian"),isr=o(" \u2014 "),Mz=a("a"),dsr=o("TFMarianModel"),csr=o(" (Marian model)"),fsr=l(),Q0=a("li"),t1e=a("strong"),msr=o("mbart"),gsr=o(" \u2014 "),Ez=a("a"),hsr=o("TFMBartModel"),psr=o(" (mBART model)"),usr=l(),W0=a("li"),a1e=a("strong"),_sr=o("mobilebert"),bsr=o(" \u2014 "),Cz=a("a"),vsr=o("TFMobileBertModel"),Fsr=o(" (MobileBERT model)"),Tsr=l(),H0=a("li"),n1e=a("strong"),Msr=o("mpnet"),Esr=o(" \u2014 "),wz=a("a"),Csr=o("TFMPNetModel"),wsr=o(" (MPNet model)"),Asr=l(),U0=a("li"),s1e=a("strong"),ysr=o("mt5"),Lsr=o(" \u2014 "),Az=a("a"),xsr=o("TFMT5Model"),$sr=o(" (mT5 model)"),ksr=l(),J0=a("li"),l1e=a("strong"),Ssr=o("openai-gpt"),Rsr=o(" \u2014 "),yz=a("a"),Bsr=o("TFOpenAIGPTModel"),Psr=o(" (OpenAI GPT model)"),Isr=l(),Y0=a("li"),i1e=a("strong"),qsr=o("pegasus"),Nsr=o(" \u2014 "),Lz=a("a"),jsr=o("TFPegasusModel"),Dsr=o(" (Pegasus model)"),Gsr=l(),K0=a("li"),d1e=a("strong"),Osr=o("rembert"),Vsr=o(" \u2014 "),xz=a("a"),Xsr=o("TFRemBertModel"),zsr=o(" (RemBERT model)"),Qsr=l(),Z0=a("li"),c1e=a("strong"),Wsr=o("roberta"),Hsr=o(" \u2014 "),$z=a("a"),Usr=o("TFRobertaModel"),Jsr=o(" (RoBERTa model)"),Ysr=l(),eT=a("li"),f1e=a("strong"),Ksr=o("roformer"),Zsr=o(" \u2014 "),kz=a("a"),elr=o("TFRoFormerModel"),olr=o(" (RoFormer model)"),rlr=l(),oT=a("li"),m1e=a("strong"),tlr=o("speech_to_text"),alr=o(" \u2014 "),Sz=a("a"),nlr=o("TFSpeech2TextModel"),slr=o(" (Speech2Text model)"),llr=l(),rT=a("li"),g1e=a("strong"),ilr=o("t5"),dlr=o(" \u2014 "),Rz=a("a"),clr=o("TFT5Model"),flr=o(" (T5 model)"),mlr=l(),tT=a("li"),h1e=a("strong"),glr=o("tapas"),hlr=o(" \u2014 "),Bz=a("a"),plr=o("TFTapasModel"),ulr=o(" (TAPAS model)"),_lr=l(),aT=a("li"),p1e=a("strong"),blr=o("transfo-xl"),vlr=o(" \u2014 "),Pz=a("a"),Flr=o("TFTransfoXLModel"),Tlr=o(" (Transformer-XL model)"),Mlr=l(),nT=a("li"),u1e=a("strong"),Elr=o("vit"),Clr=o(" \u2014 "),Iz=a("a"),wlr=o("TFViTModel"),Alr=o(" (ViT model)"),ylr=l(),sT=a("li"),_1e=a("strong"),Llr=o("vit_mae"),xlr=o(" \u2014 "),qz=a("a"),$lr=o("TFViTMAEModel"),klr=o(" (ViTMAE model)"),Slr=l(),lT=a("li"),b1e=a("strong"),Rlr=o("wav2vec2"),Blr=o(" \u2014 "),Nz=a("a"),Plr=o("TFWav2Vec2Model"),Ilr=o(" (Wav2Vec2 model)"),qlr=l(),iT=a("li"),v1e=a("strong"),Nlr=o("xlm"),jlr=o(" \u2014 "),jz=a("a"),Dlr=o("TFXLMModel"),Glr=o(" (XLM model)"),Olr=l(),dT=a("li"),F1e=a("strong"),Vlr=o("xlm-roberta"),Xlr=o(" \u2014 "),Dz=a("a"),zlr=o("TFXLMRobertaModel"),Qlr=o(" (XLM-RoBERTa model)"),Wlr=l(),cT=a("li"),T1e=a("strong"),Hlr=o("xlnet"),Ulr=o(" \u2014 "),Gz=a("a"),Jlr=o("TFXLNetModel"),Ylr=o(" (XLNet model)"),Klr=l(),F(fT.$$.fragment),kIe=l(),Gd=a("h2"),mT=a("a"),M1e=a("span"),F(Sy.$$.fragment),Zlr=l(),E1e=a("span"),eir=o("TFAutoModelForPreTraining"),SIe=l(),Ko=a("div"),F(Ry.$$.fragment),oir=l(),Od=a("p"),rir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oz=a("a"),tir=o("from_pretrained()"),air=o(" class method or the "),Vz=a("a"),nir=o("from_config()"),sir=o(` class
method.`),lir=l(),By=a("p"),iir=o("This class cannot be instantiated directly using "),C1e=a("code"),dir=o("__init__()"),cir=o(" (throws an error)."),fir=l(),At=a("div"),F(Py.$$.fragment),mir=l(),w1e=a("p"),gir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hir=l(),Vd=a("p"),pir=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),uir=o("not"),_ir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),bir=o("from_pretrained()"),vir=o(" to load the model weights."),Fir=l(),F(gT.$$.fragment),Tir=l(),Ar=a("div"),F(Iy.$$.fragment),Mir=l(),y1e=a("p"),Eir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cir=l(),Za=a("p"),wir=o("The model class to instantiate is selected based on the "),L1e=a("code"),Air=o("model_type"),yir=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),Lir=o("pretrained_model_name_or_path"),xir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(":"),Sir=l(),ne=a("ul"),hT=a("li"),k1e=a("strong"),Rir=o("albert"),Bir=o(" \u2014 "),zz=a("a"),Pir=o("TFAlbertForPreTraining"),Iir=o(" (ALBERT model)"),qir=l(),pT=a("li"),S1e=a("strong"),Nir=o("bart"),jir=o(" \u2014 "),Qz=a("a"),Dir=o("TFBartForConditionalGeneration"),Gir=o(" (BART model)"),Oir=l(),uT=a("li"),R1e=a("strong"),Vir=o("bert"),Xir=o(" \u2014 "),Wz=a("a"),zir=o("TFBertForPreTraining"),Qir=o(" (BERT model)"),Wir=l(),_T=a("li"),B1e=a("strong"),Hir=o("camembert"),Uir=o(" \u2014 "),Hz=a("a"),Jir=o("TFCamembertForMaskedLM"),Yir=o(" (CamemBERT model)"),Kir=l(),bT=a("li"),P1e=a("strong"),Zir=o("ctrl"),edr=o(" \u2014 "),Uz=a("a"),odr=o("TFCTRLLMHeadModel"),rdr=o(" (CTRL model)"),tdr=l(),vT=a("li"),I1e=a("strong"),adr=o("distilbert"),ndr=o(" \u2014 "),Jz=a("a"),sdr=o("TFDistilBertForMaskedLM"),ldr=o(" (DistilBERT model)"),idr=l(),FT=a("li"),q1e=a("strong"),ddr=o("electra"),cdr=o(" \u2014 "),Yz=a("a"),fdr=o("TFElectraForPreTraining"),mdr=o(" (ELECTRA model)"),gdr=l(),TT=a("li"),N1e=a("strong"),hdr=o("flaubert"),pdr=o(" \u2014 "),Kz=a("a"),udr=o("TFFlaubertWithLMHeadModel"),_dr=o(" (FlauBERT model)"),bdr=l(),MT=a("li"),j1e=a("strong"),vdr=o("funnel"),Fdr=o(" \u2014 "),Zz=a("a"),Tdr=o("TFFunnelForPreTraining"),Mdr=o(" (Funnel Transformer model)"),Edr=l(),ET=a("li"),D1e=a("strong"),Cdr=o("gpt2"),wdr=o(" \u2014 "),eQ=a("a"),Adr=o("TFGPT2LMHeadModel"),ydr=o(" (OpenAI GPT-2 model)"),Ldr=l(),CT=a("li"),G1e=a("strong"),xdr=o("layoutlm"),$dr=o(" \u2014 "),oQ=a("a"),kdr=o("TFLayoutLMForMaskedLM"),Sdr=o(" (LayoutLM model)"),Rdr=l(),wT=a("li"),O1e=a("strong"),Bdr=o("lxmert"),Pdr=o(" \u2014 "),rQ=a("a"),Idr=o("TFLxmertForPreTraining"),qdr=o(" (LXMERT model)"),Ndr=l(),AT=a("li"),V1e=a("strong"),jdr=o("mobilebert"),Ddr=o(" \u2014 "),tQ=a("a"),Gdr=o("TFMobileBertForPreTraining"),Odr=o(" (MobileBERT model)"),Vdr=l(),yT=a("li"),X1e=a("strong"),Xdr=o("mpnet"),zdr=o(" \u2014 "),aQ=a("a"),Qdr=o("TFMPNetForMaskedLM"),Wdr=o(" (MPNet model)"),Hdr=l(),LT=a("li"),z1e=a("strong"),Udr=o("openai-gpt"),Jdr=o(" \u2014 "),nQ=a("a"),Ydr=o("TFOpenAIGPTLMHeadModel"),Kdr=o(" (OpenAI GPT model)"),Zdr=l(),xT=a("li"),Q1e=a("strong"),ecr=o("roberta"),ocr=o(" \u2014 "),sQ=a("a"),rcr=o("TFRobertaForMaskedLM"),tcr=o(" (RoBERTa model)"),acr=l(),$T=a("li"),W1e=a("strong"),ncr=o("t5"),scr=o(" \u2014 "),lQ=a("a"),lcr=o("TFT5ForConditionalGeneration"),icr=o(" (T5 model)"),dcr=l(),kT=a("li"),H1e=a("strong"),ccr=o("tapas"),fcr=o(" \u2014 "),iQ=a("a"),mcr=o("TFTapasForMaskedLM"),gcr=o(" (TAPAS model)"),hcr=l(),ST=a("li"),U1e=a("strong"),pcr=o("transfo-xl"),ucr=o(" \u2014 "),dQ=a("a"),_cr=o("TFTransfoXLLMHeadModel"),bcr=o(" (Transformer-XL model)"),vcr=l(),RT=a("li"),J1e=a("strong"),Fcr=o("vit_mae"),Tcr=o(" \u2014 "),cQ=a("a"),Mcr=o("TFViTMAEForPreTraining"),Ecr=o(" (ViTMAE model)"),Ccr=l(),BT=a("li"),Y1e=a("strong"),wcr=o("xlm"),Acr=o(" \u2014 "),fQ=a("a"),ycr=o("TFXLMWithLMHeadModel"),Lcr=o(" (XLM model)"),xcr=l(),PT=a("li"),K1e=a("strong"),$cr=o("xlm-roberta"),kcr=o(" \u2014 "),mQ=a("a"),Scr=o("TFXLMRobertaForMaskedLM"),Rcr=o(" (XLM-RoBERTa model)"),Bcr=l(),IT=a("li"),Z1e=a("strong"),Pcr=o("xlnet"),Icr=o(" \u2014 "),gQ=a("a"),qcr=o("TFXLNetLMHeadModel"),Ncr=o(" (XLNet model)"),jcr=l(),F(qT.$$.fragment),RIe=l(),Xd=a("h2"),NT=a("a"),e8e=a("span"),F(qy.$$.fragment),Dcr=l(),o8e=a("span"),Gcr=o("TFAutoModelForCausalLM"),BIe=l(),Zo=a("div"),F(Ny.$$.fragment),Ocr=l(),zd=a("p"),Vcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hQ=a("a"),Xcr=o("from_pretrained()"),zcr=o(" class method or the "),pQ=a("a"),Qcr=o("from_config()"),Wcr=o(` class
method.`),Hcr=l(),jy=a("p"),Ucr=o("This class cannot be instantiated directly using "),r8e=a("code"),Jcr=o("__init__()"),Ycr=o(" (throws an error)."),Kcr=l(),yt=a("div"),F(Dy.$$.fragment),Zcr=l(),t8e=a("p"),efr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ofr=l(),Qd=a("p"),rfr=o(`Note:
Loading a model from its configuration file does `),a8e=a("strong"),tfr=o("not"),afr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),nfr=o("from_pretrained()"),sfr=o(" to load the model weights."),lfr=l(),F(jT.$$.fragment),ifr=l(),yr=a("div"),F(Gy.$$.fragment),dfr=l(),n8e=a("p"),cfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ffr=l(),en=a("p"),mfr=o("The model class to instantiate is selected based on the "),s8e=a("code"),gfr=o("model_type"),hfr=o(` property of the config object (either
passed as an argument or loaded from `),l8e=a("code"),pfr=o("pretrained_model_name_or_path"),ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=a("code"),_fr=o("pretrained_model_name_or_path"),bfr=o(":"),vfr=l(),Te=a("ul"),DT=a("li"),d8e=a("strong"),Ffr=o("bert"),Tfr=o(" \u2014 "),_Q=a("a"),Mfr=o("TFBertLMHeadModel"),Efr=o(" (BERT model)"),Cfr=l(),GT=a("li"),c8e=a("strong"),wfr=o("camembert"),Afr=o(" \u2014 "),bQ=a("a"),yfr=o("TFCamembertForCausalLM"),Lfr=o(" (CamemBERT model)"),xfr=l(),OT=a("li"),f8e=a("strong"),$fr=o("ctrl"),kfr=o(" \u2014 "),vQ=a("a"),Sfr=o("TFCTRLLMHeadModel"),Rfr=o(" (CTRL model)"),Bfr=l(),VT=a("li"),m8e=a("strong"),Pfr=o("gpt2"),Ifr=o(" \u2014 "),FQ=a("a"),qfr=o("TFGPT2LMHeadModel"),Nfr=o(" (OpenAI GPT-2 model)"),jfr=l(),XT=a("li"),g8e=a("strong"),Dfr=o("gptj"),Gfr=o(" \u2014 "),TQ=a("a"),Ofr=o("TFGPTJForCausalLM"),Vfr=o(" (GPT-J model)"),Xfr=l(),zT=a("li"),h8e=a("strong"),zfr=o("openai-gpt"),Qfr=o(" \u2014 "),MQ=a("a"),Wfr=o("TFOpenAIGPTLMHeadModel"),Hfr=o(" (OpenAI GPT model)"),Ufr=l(),QT=a("li"),p8e=a("strong"),Jfr=o("rembert"),Yfr=o(" \u2014 "),EQ=a("a"),Kfr=o("TFRemBertForCausalLM"),Zfr=o(" (RemBERT model)"),emr=l(),WT=a("li"),u8e=a("strong"),omr=o("roberta"),rmr=o(" \u2014 "),CQ=a("a"),tmr=o("TFRobertaForCausalLM"),amr=o(" (RoBERTa model)"),nmr=l(),HT=a("li"),_8e=a("strong"),smr=o("roformer"),lmr=o(" \u2014 "),wQ=a("a"),imr=o("TFRoFormerForCausalLM"),dmr=o(" (RoFormer model)"),cmr=l(),UT=a("li"),b8e=a("strong"),fmr=o("transfo-xl"),mmr=o(" \u2014 "),AQ=a("a"),gmr=o("TFTransfoXLLMHeadModel"),hmr=o(" (Transformer-XL model)"),pmr=l(),JT=a("li"),v8e=a("strong"),umr=o("xlm"),_mr=o(" \u2014 "),yQ=a("a"),bmr=o("TFXLMWithLMHeadModel"),vmr=o(" (XLM model)"),Fmr=l(),YT=a("li"),F8e=a("strong"),Tmr=o("xlnet"),Mmr=o(" \u2014 "),LQ=a("a"),Emr=o("TFXLNetLMHeadModel"),Cmr=o(" (XLNet model)"),wmr=l(),F(KT.$$.fragment),PIe=l(),Wd=a("h2"),ZT=a("a"),T8e=a("span"),F(Oy.$$.fragment),Amr=l(),M8e=a("span"),ymr=o("TFAutoModelForImageClassification"),IIe=l(),er=a("div"),F(Vy.$$.fragment),Lmr=l(),Hd=a("p"),xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xQ=a("a"),$mr=o("from_pretrained()"),kmr=o(" class method or the "),$Q=a("a"),Smr=o("from_config()"),Rmr=o(` class
method.`),Bmr=l(),Xy=a("p"),Pmr=o("This class cannot be instantiated directly using "),E8e=a("code"),Imr=o("__init__()"),qmr=o(" (throws an error)."),Nmr=l(),Lt=a("div"),F(zy.$$.fragment),jmr=l(),C8e=a("p"),Dmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Gmr=l(),Ud=a("p"),Omr=o(`Note:
Loading a model from its configuration file does `),w8e=a("strong"),Vmr=o("not"),Xmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),zmr=o("from_pretrained()"),Qmr=o(" to load the model weights."),Wmr=l(),F(e7.$$.fragment),Hmr=l(),Lr=a("div"),F(Qy.$$.fragment),Umr=l(),A8e=a("p"),Jmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ymr=l(),on=a("p"),Kmr=o("The model class to instantiate is selected based on the "),y8e=a("code"),Zmr=o("model_type"),egr=o(` property of the config object (either
passed as an argument or loaded from `),L8e=a("code"),ogr=o("pretrained_model_name_or_path"),rgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=a("code"),tgr=o("pretrained_model_name_or_path"),agr=o(":"),ngr=l(),Jd=a("ul"),o7=a("li"),$8e=a("strong"),sgr=o("convnext"),lgr=o(" \u2014 "),SQ=a("a"),igr=o("TFConvNextForImageClassification"),dgr=o(" (ConvNext model)"),cgr=l(),r7=a("li"),k8e=a("strong"),fgr=o("data2vec-vision"),mgr=o(" \u2014 "),RQ=a("a"),ggr=o("TFData2VecVisionForImageClassification"),hgr=o(" (Data2VecVision model)"),pgr=l(),t7=a("li"),S8e=a("strong"),ugr=o("vit"),_gr=o(" \u2014 "),BQ=a("a"),bgr=o("TFViTForImageClassification"),vgr=o(" (ViT model)"),Fgr=l(),F(a7.$$.fragment),qIe=l(),Yd=a("h2"),n7=a("a"),R8e=a("span"),F(Wy.$$.fragment),Tgr=l(),B8e=a("span"),Mgr=o("TFAutoModelForMaskedLM"),NIe=l(),or=a("div"),F(Hy.$$.fragment),Egr=l(),Kd=a("p"),Cgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PQ=a("a"),wgr=o("from_pretrained()"),Agr=o(" class method or the "),IQ=a("a"),ygr=o("from_config()"),Lgr=o(` class
method.`),xgr=l(),Uy=a("p"),$gr=o("This class cannot be instantiated directly using "),P8e=a("code"),kgr=o("__init__()"),Sgr=o(" (throws an error)."),Rgr=l(),xt=a("div"),F(Jy.$$.fragment),Bgr=l(),I8e=a("p"),Pgr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Igr=l(),Zd=a("p"),qgr=o(`Note:
Loading a model from its configuration file does `),q8e=a("strong"),Ngr=o("not"),jgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),Dgr=o("from_pretrained()"),Ggr=o(" to load the model weights."),Ogr=l(),F(s7.$$.fragment),Vgr=l(),xr=a("div"),F(Yy.$$.fragment),Xgr=l(),N8e=a("p"),zgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qgr=l(),rn=a("p"),Wgr=o("The model class to instantiate is selected based on the "),j8e=a("code"),Hgr=o("model_type"),Ugr=o(` property of the config object (either
passed as an argument or loaded from `),D8e=a("code"),Jgr=o("pretrained_model_name_or_path"),Ygr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=a("code"),Kgr=o("pretrained_model_name_or_path"),Zgr=o(":"),ehr=l(),ie=a("ul"),l7=a("li"),O8e=a("strong"),ohr=o("albert"),rhr=o(" \u2014 "),NQ=a("a"),thr=o("TFAlbertForMaskedLM"),ahr=o(" (ALBERT model)"),nhr=l(),i7=a("li"),V8e=a("strong"),shr=o("bert"),lhr=o(" \u2014 "),jQ=a("a"),ihr=o("TFBertForMaskedLM"),dhr=o(" (BERT model)"),chr=l(),d7=a("li"),X8e=a("strong"),fhr=o("camembert"),mhr=o(" \u2014 "),DQ=a("a"),ghr=o("TFCamembertForMaskedLM"),hhr=o(" (CamemBERT model)"),phr=l(),c7=a("li"),z8e=a("strong"),uhr=o("convbert"),_hr=o(" \u2014 "),GQ=a("a"),bhr=o("TFConvBertForMaskedLM"),vhr=o(" (ConvBERT model)"),Fhr=l(),f7=a("li"),Q8e=a("strong"),Thr=o("deberta"),Mhr=o(" \u2014 "),OQ=a("a"),Ehr=o("TFDebertaForMaskedLM"),Chr=o(" (DeBERTa model)"),whr=l(),m7=a("li"),W8e=a("strong"),Ahr=o("deberta-v2"),yhr=o(" \u2014 "),VQ=a("a"),Lhr=o("TFDebertaV2ForMaskedLM"),xhr=o(" (DeBERTa-v2 model)"),$hr=l(),g7=a("li"),H8e=a("strong"),khr=o("distilbert"),Shr=o(" \u2014 "),XQ=a("a"),Rhr=o("TFDistilBertForMaskedLM"),Bhr=o(" (DistilBERT model)"),Phr=l(),h7=a("li"),U8e=a("strong"),Ihr=o("electra"),qhr=o(" \u2014 "),zQ=a("a"),Nhr=o("TFElectraForMaskedLM"),jhr=o(" (ELECTRA model)"),Dhr=l(),p7=a("li"),J8e=a("strong"),Ghr=o("flaubert"),Ohr=o(" \u2014 "),QQ=a("a"),Vhr=o("TFFlaubertWithLMHeadModel"),Xhr=o(" (FlauBERT model)"),zhr=l(),u7=a("li"),Y8e=a("strong"),Qhr=o("funnel"),Whr=o(" \u2014 "),WQ=a("a"),Hhr=o("TFFunnelForMaskedLM"),Uhr=o(" (Funnel Transformer model)"),Jhr=l(),_7=a("li"),K8e=a("strong"),Yhr=o("layoutlm"),Khr=o(" \u2014 "),HQ=a("a"),Zhr=o("TFLayoutLMForMaskedLM"),epr=o(" (LayoutLM model)"),opr=l(),b7=a("li"),Z8e=a("strong"),rpr=o("longformer"),tpr=o(" \u2014 "),UQ=a("a"),apr=o("TFLongformerForMaskedLM"),npr=o(" (Longformer model)"),spr=l(),v7=a("li"),ebe=a("strong"),lpr=o("mobilebert"),ipr=o(" \u2014 "),JQ=a("a"),dpr=o("TFMobileBertForMaskedLM"),cpr=o(" (MobileBERT model)"),fpr=l(),F7=a("li"),obe=a("strong"),mpr=o("mpnet"),gpr=o(" \u2014 "),YQ=a("a"),hpr=o("TFMPNetForMaskedLM"),ppr=o(" (MPNet model)"),upr=l(),T7=a("li"),rbe=a("strong"),_pr=o("rembert"),bpr=o(" \u2014 "),KQ=a("a"),vpr=o("TFRemBertForMaskedLM"),Fpr=o(" (RemBERT model)"),Tpr=l(),M7=a("li"),tbe=a("strong"),Mpr=o("roberta"),Epr=o(" \u2014 "),ZQ=a("a"),Cpr=o("TFRobertaForMaskedLM"),wpr=o(" (RoBERTa model)"),Apr=l(),E7=a("li"),abe=a("strong"),ypr=o("roformer"),Lpr=o(" \u2014 "),eW=a("a"),xpr=o("TFRoFormerForMaskedLM"),$pr=o(" (RoFormer model)"),kpr=l(),C7=a("li"),nbe=a("strong"),Spr=o("tapas"),Rpr=o(" \u2014 "),oW=a("a"),Bpr=o("TFTapasForMaskedLM"),Ppr=o(" (TAPAS model)"),Ipr=l(),w7=a("li"),sbe=a("strong"),qpr=o("xlm"),Npr=o(" \u2014 "),rW=a("a"),jpr=o("TFXLMWithLMHeadModel"),Dpr=o(" (XLM model)"),Gpr=l(),A7=a("li"),lbe=a("strong"),Opr=o("xlm-roberta"),Vpr=o(" \u2014 "),tW=a("a"),Xpr=o("TFXLMRobertaForMaskedLM"),zpr=o(" (XLM-RoBERTa model)"),Qpr=l(),F(y7.$$.fragment),jIe=l(),ec=a("h2"),L7=a("a"),ibe=a("span"),F(Ky.$$.fragment),Wpr=l(),dbe=a("span"),Hpr=o("TFAutoModelForSeq2SeqLM"),DIe=l(),rr=a("div"),F(Zy.$$.fragment),Upr=l(),oc=a("p"),Jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aW=a("a"),Ypr=o("from_pretrained()"),Kpr=o(" class method or the "),nW=a("a"),Zpr=o("from_config()"),eur=o(` class
method.`),our=l(),eL=a("p"),rur=o("This class cannot be instantiated directly using "),cbe=a("code"),tur=o("__init__()"),aur=o(" (throws an error)."),nur=l(),$t=a("div"),F(oL.$$.fragment),sur=l(),fbe=a("p"),lur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iur=l(),rc=a("p"),dur=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),cur=o("not"),fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),mur=o("from_pretrained()"),gur=o(" to load the model weights."),hur=l(),F(x7.$$.fragment),pur=l(),$r=a("div"),F(rL.$$.fragment),uur=l(),gbe=a("p"),_ur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bur=l(),tn=a("p"),vur=o("The model class to instantiate is selected based on the "),hbe=a("code"),Fur=o("model_type"),Tur=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),Mur=o("pretrained_model_name_or_path"),Eur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),Cur=o("pretrained_model_name_or_path"),wur=o(":"),Aur=l(),ye=a("ul"),$7=a("li"),_be=a("strong"),yur=o("bart"),Lur=o(" \u2014 "),lW=a("a"),xur=o("TFBartForConditionalGeneration"),$ur=o(" (BART model)"),kur=l(),k7=a("li"),bbe=a("strong"),Sur=o("blenderbot"),Rur=o(" \u2014 "),iW=a("a"),Bur=o("TFBlenderbotForConditionalGeneration"),Pur=o(" (Blenderbot model)"),Iur=l(),S7=a("li"),vbe=a("strong"),qur=o("blenderbot-small"),Nur=o(" \u2014 "),dW=a("a"),jur=o("TFBlenderbotSmallForConditionalGeneration"),Dur=o(" (BlenderbotSmall model)"),Gur=l(),R7=a("li"),Fbe=a("strong"),Our=o("encoder-decoder"),Vur=o(" \u2014 "),cW=a("a"),Xur=o("TFEncoderDecoderModel"),zur=o(" (Encoder decoder model)"),Qur=l(),B7=a("li"),Tbe=a("strong"),Wur=o("led"),Hur=o(" \u2014 "),fW=a("a"),Uur=o("TFLEDForConditionalGeneration"),Jur=o(" (LED model)"),Yur=l(),P7=a("li"),Mbe=a("strong"),Kur=o("marian"),Zur=o(" \u2014 "),mW=a("a"),e_r=o("TFMarianMTModel"),o_r=o(" (Marian model)"),r_r=l(),I7=a("li"),Ebe=a("strong"),t_r=o("mbart"),a_r=o(" \u2014 "),gW=a("a"),n_r=o("TFMBartForConditionalGeneration"),s_r=o(" (mBART model)"),l_r=l(),q7=a("li"),Cbe=a("strong"),i_r=o("mt5"),d_r=o(" \u2014 "),hW=a("a"),c_r=o("TFMT5ForConditionalGeneration"),f_r=o(" (mT5 model)"),m_r=l(),N7=a("li"),wbe=a("strong"),g_r=o("pegasus"),h_r=o(" \u2014 "),pW=a("a"),p_r=o("TFPegasusForConditionalGeneration"),u_r=o(" (Pegasus model)"),__r=l(),j7=a("li"),Abe=a("strong"),b_r=o("t5"),v_r=o(" \u2014 "),uW=a("a"),F_r=o("TFT5ForConditionalGeneration"),T_r=o(" (T5 model)"),M_r=l(),F(D7.$$.fragment),GIe=l(),tc=a("h2"),G7=a("a"),ybe=a("span"),F(tL.$$.fragment),E_r=l(),Lbe=a("span"),C_r=o("TFAutoModelForSequenceClassification"),OIe=l(),tr=a("div"),F(aL.$$.fragment),w_r=l(),ac=a("p"),A_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_W=a("a"),y_r=o("from_pretrained()"),L_r=o(" class method or the "),bW=a("a"),x_r=o("from_config()"),$_r=o(` class
method.`),k_r=l(),nL=a("p"),S_r=o("This class cannot be instantiated directly using "),xbe=a("code"),R_r=o("__init__()"),B_r=o(" (throws an error)."),P_r=l(),kt=a("div"),F(sL.$$.fragment),I_r=l(),$be=a("p"),q_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),N_r=l(),nc=a("p"),j_r=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),D_r=o("not"),G_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),O_r=o("from_pretrained()"),V_r=o(" to load the model weights."),X_r=l(),F(O7.$$.fragment),z_r=l(),kr=a("div"),F(lL.$$.fragment),Q_r=l(),Sbe=a("p"),W_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H_r=l(),an=a("p"),U_r=o("The model class to instantiate is selected based on the "),Rbe=a("code"),J_r=o("model_type"),Y_r=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),e1r=o("pretrained_model_name_or_path"),o1r=o(":"),r1r=l(),Z=a("ul"),V7=a("li"),Ibe=a("strong"),t1r=o("albert"),a1r=o(" \u2014 "),FW=a("a"),n1r=o("TFAlbertForSequenceClassification"),s1r=o(" (ALBERT model)"),l1r=l(),X7=a("li"),qbe=a("strong"),i1r=o("bert"),d1r=o(" \u2014 "),TW=a("a"),c1r=o("TFBertForSequenceClassification"),f1r=o(" (BERT model)"),m1r=l(),z7=a("li"),Nbe=a("strong"),g1r=o("camembert"),h1r=o(" \u2014 "),MW=a("a"),p1r=o("TFCamembertForSequenceClassification"),u1r=o(" (CamemBERT model)"),_1r=l(),Q7=a("li"),jbe=a("strong"),b1r=o("convbert"),v1r=o(" \u2014 "),EW=a("a"),F1r=o("TFConvBertForSequenceClassification"),T1r=o(" (ConvBERT model)"),M1r=l(),W7=a("li"),Dbe=a("strong"),E1r=o("ctrl"),C1r=o(" \u2014 "),CW=a("a"),w1r=o("TFCTRLForSequenceClassification"),A1r=o(" (CTRL model)"),y1r=l(),H7=a("li"),Gbe=a("strong"),L1r=o("deberta"),x1r=o(" \u2014 "),wW=a("a"),$1r=o("TFDebertaForSequenceClassification"),k1r=o(" (DeBERTa model)"),S1r=l(),U7=a("li"),Obe=a("strong"),R1r=o("deberta-v2"),B1r=o(" \u2014 "),AW=a("a"),P1r=o("TFDebertaV2ForSequenceClassification"),I1r=o(" (DeBERTa-v2 model)"),q1r=l(),J7=a("li"),Vbe=a("strong"),N1r=o("distilbert"),j1r=o(" \u2014 "),yW=a("a"),D1r=o("TFDistilBertForSequenceClassification"),G1r=o(" (DistilBERT model)"),O1r=l(),Y7=a("li"),Xbe=a("strong"),V1r=o("electra"),X1r=o(" \u2014 "),LW=a("a"),z1r=o("TFElectraForSequenceClassification"),Q1r=o(" (ELECTRA model)"),W1r=l(),K7=a("li"),zbe=a("strong"),H1r=o("flaubert"),U1r=o(" \u2014 "),xW=a("a"),J1r=o("TFFlaubertForSequenceClassification"),Y1r=o(" (FlauBERT model)"),K1r=l(),Z7=a("li"),Qbe=a("strong"),Z1r=o("funnel"),e8r=o(" \u2014 "),$W=a("a"),o8r=o("TFFunnelForSequenceClassification"),r8r=o(" (Funnel Transformer model)"),t8r=l(),eM=a("li"),Wbe=a("strong"),a8r=o("gpt2"),n8r=o(" \u2014 "),kW=a("a"),s8r=o("TFGPT2ForSequenceClassification"),l8r=o(" (OpenAI GPT-2 model)"),i8r=l(),oM=a("li"),Hbe=a("strong"),d8r=o("gptj"),c8r=o(" \u2014 "),SW=a("a"),f8r=o("TFGPTJForSequenceClassification"),m8r=o(" (GPT-J model)"),g8r=l(),rM=a("li"),Ube=a("strong"),h8r=o("layoutlm"),p8r=o(" \u2014 "),RW=a("a"),u8r=o("TFLayoutLMForSequenceClassification"),_8r=o(" (LayoutLM model)"),b8r=l(),tM=a("li"),Jbe=a("strong"),v8r=o("longformer"),F8r=o(" \u2014 "),BW=a("a"),T8r=o("TFLongformerForSequenceClassification"),M8r=o(" (Longformer model)"),E8r=l(),aM=a("li"),Ybe=a("strong"),C8r=o("mobilebert"),w8r=o(" \u2014 "),PW=a("a"),A8r=o("TFMobileBertForSequenceClassification"),y8r=o(" (MobileBERT model)"),L8r=l(),nM=a("li"),Kbe=a("strong"),x8r=o("mpnet"),$8r=o(" \u2014 "),IW=a("a"),k8r=o("TFMPNetForSequenceClassification"),S8r=o(" (MPNet model)"),R8r=l(),sM=a("li"),Zbe=a("strong"),B8r=o("openai-gpt"),P8r=o(" \u2014 "),qW=a("a"),I8r=o("TFOpenAIGPTForSequenceClassification"),q8r=o(" (OpenAI GPT model)"),N8r=l(),lM=a("li"),e2e=a("strong"),j8r=o("rembert"),D8r=o(" \u2014 "),NW=a("a"),G8r=o("TFRemBertForSequenceClassification"),O8r=o(" (RemBERT model)"),V8r=l(),iM=a("li"),o2e=a("strong"),X8r=o("roberta"),z8r=o(" \u2014 "),jW=a("a"),Q8r=o("TFRobertaForSequenceClassification"),W8r=o(" (RoBERTa model)"),H8r=l(),dM=a("li"),r2e=a("strong"),U8r=o("roformer"),J8r=o(" \u2014 "),DW=a("a"),Y8r=o("TFRoFormerForSequenceClassification"),K8r=o(" (RoFormer model)"),Z8r=l(),cM=a("li"),t2e=a("strong"),ebr=o("tapas"),obr=o(" \u2014 "),GW=a("a"),rbr=o("TFTapasForSequenceClassification"),tbr=o(" (TAPAS model)"),abr=l(),fM=a("li"),a2e=a("strong"),nbr=o("transfo-xl"),sbr=o(" \u2014 "),OW=a("a"),lbr=o("TFTransfoXLForSequenceClassification"),ibr=o(" (Transformer-XL model)"),dbr=l(),mM=a("li"),n2e=a("strong"),cbr=o("xlm"),fbr=o(" \u2014 "),VW=a("a"),mbr=o("TFXLMForSequenceClassification"),gbr=o(" (XLM model)"),hbr=l(),gM=a("li"),s2e=a("strong"),pbr=o("xlm-roberta"),ubr=o(" \u2014 "),XW=a("a"),_br=o("TFXLMRobertaForSequenceClassification"),bbr=o(" (XLM-RoBERTa model)"),vbr=l(),hM=a("li"),l2e=a("strong"),Fbr=o("xlnet"),Tbr=o(" \u2014 "),zW=a("a"),Mbr=o("TFXLNetForSequenceClassification"),Ebr=o(" (XLNet model)"),Cbr=l(),F(pM.$$.fragment),VIe=l(),sc=a("h2"),uM=a("a"),i2e=a("span"),F(iL.$$.fragment),wbr=l(),d2e=a("span"),Abr=o("TFAutoModelForMultipleChoice"),XIe=l(),ar=a("div"),F(dL.$$.fragment),ybr=l(),lc=a("p"),Lbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QW=a("a"),xbr=o("from_pretrained()"),$br=o(" class method or the "),WW=a("a"),kbr=o("from_config()"),Sbr=o(` class
method.`),Rbr=l(),cL=a("p"),Bbr=o("This class cannot be instantiated directly using "),c2e=a("code"),Pbr=o("__init__()"),Ibr=o(" (throws an error)."),qbr=l(),St=a("div"),F(fL.$$.fragment),Nbr=l(),f2e=a("p"),jbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dbr=l(),ic=a("p"),Gbr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),Obr=o("not"),Vbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Xbr=o("from_pretrained()"),zbr=o(" to load the model weights."),Qbr=l(),F(_M.$$.fragment),Wbr=l(),Sr=a("div"),F(mL.$$.fragment),Hbr=l(),g2e=a("p"),Ubr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jbr=l(),nn=a("p"),Ybr=o("The model class to instantiate is selected based on the "),h2e=a("code"),Kbr=o("model_type"),Zbr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),r2r=o("pretrained_model_name_or_path"),t2r=o(":"),a2r=l(),pe=a("ul"),bM=a("li"),_2e=a("strong"),n2r=o("albert"),s2r=o(" \u2014 "),UW=a("a"),l2r=o("TFAlbertForMultipleChoice"),i2r=o(" (ALBERT model)"),d2r=l(),vM=a("li"),b2e=a("strong"),c2r=o("bert"),f2r=o(" \u2014 "),JW=a("a"),m2r=o("TFBertForMultipleChoice"),g2r=o(" (BERT model)"),h2r=l(),FM=a("li"),v2e=a("strong"),p2r=o("camembert"),u2r=o(" \u2014 "),YW=a("a"),_2r=o("TFCamembertForMultipleChoice"),b2r=o(" (CamemBERT model)"),v2r=l(),TM=a("li"),F2e=a("strong"),F2r=o("convbert"),T2r=o(" \u2014 "),KW=a("a"),M2r=o("TFConvBertForMultipleChoice"),E2r=o(" (ConvBERT model)"),C2r=l(),MM=a("li"),T2e=a("strong"),w2r=o("distilbert"),A2r=o(" \u2014 "),ZW=a("a"),y2r=o("TFDistilBertForMultipleChoice"),L2r=o(" (DistilBERT model)"),x2r=l(),EM=a("li"),M2e=a("strong"),$2r=o("electra"),k2r=o(" \u2014 "),eH=a("a"),S2r=o("TFElectraForMultipleChoice"),R2r=o(" (ELECTRA model)"),B2r=l(),CM=a("li"),E2e=a("strong"),P2r=o("flaubert"),I2r=o(" \u2014 "),oH=a("a"),q2r=o("TFFlaubertForMultipleChoice"),N2r=o(" (FlauBERT model)"),j2r=l(),wM=a("li"),C2e=a("strong"),D2r=o("funnel"),G2r=o(" \u2014 "),rH=a("a"),O2r=o("TFFunnelForMultipleChoice"),V2r=o(" (Funnel Transformer model)"),X2r=l(),AM=a("li"),w2e=a("strong"),z2r=o("longformer"),Q2r=o(" \u2014 "),tH=a("a"),W2r=o("TFLongformerForMultipleChoice"),H2r=o(" (Longformer model)"),U2r=l(),yM=a("li"),A2e=a("strong"),J2r=o("mobilebert"),Y2r=o(" \u2014 "),aH=a("a"),K2r=o("TFMobileBertForMultipleChoice"),Z2r=o(" (MobileBERT model)"),evr=l(),LM=a("li"),y2e=a("strong"),ovr=o("mpnet"),rvr=o(" \u2014 "),nH=a("a"),tvr=o("TFMPNetForMultipleChoice"),avr=o(" (MPNet model)"),nvr=l(),xM=a("li"),L2e=a("strong"),svr=o("rembert"),lvr=o(" \u2014 "),sH=a("a"),ivr=o("TFRemBertForMultipleChoice"),dvr=o(" (RemBERT model)"),cvr=l(),$M=a("li"),x2e=a("strong"),fvr=o("roberta"),mvr=o(" \u2014 "),lH=a("a"),gvr=o("TFRobertaForMultipleChoice"),hvr=o(" (RoBERTa model)"),pvr=l(),kM=a("li"),$2e=a("strong"),uvr=o("roformer"),_vr=o(" \u2014 "),iH=a("a"),bvr=o("TFRoFormerForMultipleChoice"),vvr=o(" (RoFormer model)"),Fvr=l(),SM=a("li"),k2e=a("strong"),Tvr=o("xlm"),Mvr=o(" \u2014 "),dH=a("a"),Evr=o("TFXLMForMultipleChoice"),Cvr=o(" (XLM model)"),wvr=l(),RM=a("li"),S2e=a("strong"),Avr=o("xlm-roberta"),yvr=o(" \u2014 "),cH=a("a"),Lvr=o("TFXLMRobertaForMultipleChoice"),xvr=o(" (XLM-RoBERTa model)"),$vr=l(),BM=a("li"),R2e=a("strong"),kvr=o("xlnet"),Svr=o(" \u2014 "),fH=a("a"),Rvr=o("TFXLNetForMultipleChoice"),Bvr=o(" (XLNet model)"),Pvr=l(),F(PM.$$.fragment),zIe=l(),dc=a("h2"),IM=a("a"),B2e=a("span"),F(gL.$$.fragment),Ivr=l(),P2e=a("span"),qvr=o("TFAutoModelForNextSentencePrediction"),QIe=l(),nr=a("div"),F(hL.$$.fragment),Nvr=l(),cc=a("p"),jvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mH=a("a"),Dvr=o("from_pretrained()"),Gvr=o(" class method or the "),gH=a("a"),Ovr=o("from_config()"),Vvr=o(` class
method.`),Xvr=l(),pL=a("p"),zvr=o("This class cannot be instantiated directly using "),I2e=a("code"),Qvr=o("__init__()"),Wvr=o(" (throws an error)."),Hvr=l(),Rt=a("div"),F(uL.$$.fragment),Uvr=l(),q2e=a("p"),Jvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yvr=l(),fc=a("p"),Kvr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),Zvr=o("not"),eFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),oFr=o("from_pretrained()"),rFr=o(" to load the model weights."),tFr=l(),F(qM.$$.fragment),aFr=l(),Rr=a("div"),F(_L.$$.fragment),nFr=l(),j2e=a("p"),sFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lFr=l(),sn=a("p"),iFr=o("The model class to instantiate is selected based on the "),D2e=a("code"),dFr=o("model_type"),cFr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),fFr=o("pretrained_model_name_or_path"),mFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),gFr=o("pretrained_model_name_or_path"),hFr=o(":"),pFr=l(),bL=a("ul"),NM=a("li"),V2e=a("strong"),uFr=o("bert"),_Fr=o(" \u2014 "),pH=a("a"),bFr=o("TFBertForNextSentencePrediction"),vFr=o(" (BERT model)"),FFr=l(),jM=a("li"),X2e=a("strong"),TFr=o("mobilebert"),MFr=o(" \u2014 "),uH=a("a"),EFr=o("TFMobileBertForNextSentencePrediction"),CFr=o(" (MobileBERT model)"),wFr=l(),F(DM.$$.fragment),WIe=l(),mc=a("h2"),GM=a("a"),z2e=a("span"),F(vL.$$.fragment),AFr=l(),Q2e=a("span"),yFr=o("TFAutoModelForTableQuestionAnswering"),HIe=l(),sr=a("div"),F(FL.$$.fragment),LFr=l(),gc=a("p"),xFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_H=a("a"),$Fr=o("from_pretrained()"),kFr=o(" class method or the "),bH=a("a"),SFr=o("from_config()"),RFr=o(` class
method.`),BFr=l(),TL=a("p"),PFr=o("This class cannot be instantiated directly using "),W2e=a("code"),IFr=o("__init__()"),qFr=o(" (throws an error)."),NFr=l(),Bt=a("div"),F(ML.$$.fragment),jFr=l(),H2e=a("p"),DFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GFr=l(),hc=a("p"),OFr=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),VFr=o("not"),XFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),zFr=o("from_pretrained()"),QFr=o(" to load the model weights."),WFr=l(),F(OM.$$.fragment),HFr=l(),Br=a("div"),F(EL.$$.fragment),UFr=l(),J2e=a("p"),JFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YFr=l(),ln=a("p"),KFr=o("The model class to instantiate is selected based on the "),Y2e=a("code"),ZFr=o("model_type"),e0r=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),o0r=o("pretrained_model_name_or_path"),r0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(":"),n0r=l(),eve=a("ul"),VM=a("li"),ove=a("strong"),s0r=o("tapas"),l0r=o(" \u2014 "),FH=a("a"),i0r=o("TFTapasForQuestionAnswering"),d0r=o(" (TAPAS model)"),c0r=l(),F(XM.$$.fragment),UIe=l(),pc=a("h2"),zM=a("a"),rve=a("span"),F(CL.$$.fragment),f0r=l(),tve=a("span"),m0r=o("TFAutoModelForTokenClassification"),JIe=l(),lr=a("div"),F(wL.$$.fragment),g0r=l(),uc=a("p"),h0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TH=a("a"),p0r=o("from_pretrained()"),u0r=o(" class method or the "),MH=a("a"),_0r=o("from_config()"),b0r=o(` class
method.`),v0r=l(),AL=a("p"),F0r=o("This class cannot be instantiated directly using "),ave=a("code"),T0r=o("__init__()"),M0r=o(" (throws an error)."),E0r=l(),Pt=a("div"),F(yL.$$.fragment),C0r=l(),nve=a("p"),w0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A0r=l(),_c=a("p"),y0r=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),L0r=o("not"),x0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),$0r=o("from_pretrained()"),k0r=o(" to load the model weights."),S0r=l(),F(QM.$$.fragment),R0r=l(),Pr=a("div"),F(LL.$$.fragment),B0r=l(),lve=a("p"),P0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),I0r=l(),dn=a("p"),q0r=o("The model class to instantiate is selected based on the "),ive=a("code"),N0r=o("model_type"),j0r=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),O0r=o("pretrained_model_name_or_path"),V0r=o(":"),X0r=l(),de=a("ul"),WM=a("li"),fve=a("strong"),z0r=o("albert"),Q0r=o(" \u2014 "),CH=a("a"),W0r=o("TFAlbertForTokenClassification"),H0r=o(" (ALBERT model)"),U0r=l(),HM=a("li"),mve=a("strong"),J0r=o("bert"),Y0r=o(" \u2014 "),wH=a("a"),K0r=o("TFBertForTokenClassification"),Z0r=o(" (BERT model)"),eTr=l(),UM=a("li"),gve=a("strong"),oTr=o("camembert"),rTr=o(" \u2014 "),AH=a("a"),tTr=o("TFCamembertForTokenClassification"),aTr=o(" (CamemBERT model)"),nTr=l(),JM=a("li"),hve=a("strong"),sTr=o("convbert"),lTr=o(" \u2014 "),yH=a("a"),iTr=o("TFConvBertForTokenClassification"),dTr=o(" (ConvBERT model)"),cTr=l(),YM=a("li"),pve=a("strong"),fTr=o("deberta"),mTr=o(" \u2014 "),LH=a("a"),gTr=o("TFDebertaForTokenClassification"),hTr=o(" (DeBERTa model)"),pTr=l(),KM=a("li"),uve=a("strong"),uTr=o("deberta-v2"),_Tr=o(" \u2014 "),xH=a("a"),bTr=o("TFDebertaV2ForTokenClassification"),vTr=o(" (DeBERTa-v2 model)"),FTr=l(),ZM=a("li"),_ve=a("strong"),TTr=o("distilbert"),MTr=o(" \u2014 "),$H=a("a"),ETr=o("TFDistilBertForTokenClassification"),CTr=o(" (DistilBERT model)"),wTr=l(),e4=a("li"),bve=a("strong"),ATr=o("electra"),yTr=o(" \u2014 "),kH=a("a"),LTr=o("TFElectraForTokenClassification"),xTr=o(" (ELECTRA model)"),$Tr=l(),o4=a("li"),vve=a("strong"),kTr=o("flaubert"),STr=o(" \u2014 "),SH=a("a"),RTr=o("TFFlaubertForTokenClassification"),BTr=o(" (FlauBERT model)"),PTr=l(),r4=a("li"),Fve=a("strong"),ITr=o("funnel"),qTr=o(" \u2014 "),RH=a("a"),NTr=o("TFFunnelForTokenClassification"),jTr=o(" (Funnel Transformer model)"),DTr=l(),t4=a("li"),Tve=a("strong"),GTr=o("layoutlm"),OTr=o(" \u2014 "),BH=a("a"),VTr=o("TFLayoutLMForTokenClassification"),XTr=o(" (LayoutLM model)"),zTr=l(),a4=a("li"),Mve=a("strong"),QTr=o("longformer"),WTr=o(" \u2014 "),PH=a("a"),HTr=o("TFLongformerForTokenClassification"),UTr=o(" (Longformer model)"),JTr=l(),n4=a("li"),Eve=a("strong"),YTr=o("mobilebert"),KTr=o(" \u2014 "),IH=a("a"),ZTr=o("TFMobileBertForTokenClassification"),e7r=o(" (MobileBERT model)"),o7r=l(),s4=a("li"),Cve=a("strong"),r7r=o("mpnet"),t7r=o(" \u2014 "),qH=a("a"),a7r=o("TFMPNetForTokenClassification"),n7r=o(" (MPNet model)"),s7r=l(),l4=a("li"),wve=a("strong"),l7r=o("rembert"),i7r=o(" \u2014 "),NH=a("a"),d7r=o("TFRemBertForTokenClassification"),c7r=o(" (RemBERT model)"),f7r=l(),i4=a("li"),Ave=a("strong"),m7r=o("roberta"),g7r=o(" \u2014 "),jH=a("a"),h7r=o("TFRobertaForTokenClassification"),p7r=o(" (RoBERTa model)"),u7r=l(),d4=a("li"),yve=a("strong"),_7r=o("roformer"),b7r=o(" \u2014 "),DH=a("a"),v7r=o("TFRoFormerForTokenClassification"),F7r=o(" (RoFormer model)"),T7r=l(),c4=a("li"),Lve=a("strong"),M7r=o("xlm"),E7r=o(" \u2014 "),GH=a("a"),C7r=o("TFXLMForTokenClassification"),w7r=o(" (XLM model)"),A7r=l(),f4=a("li"),xve=a("strong"),y7r=o("xlm-roberta"),L7r=o(" \u2014 "),OH=a("a"),x7r=o("TFXLMRobertaForTokenClassification"),$7r=o(" (XLM-RoBERTa model)"),k7r=l(),m4=a("li"),$ve=a("strong"),S7r=o("xlnet"),R7r=o(" \u2014 "),VH=a("a"),B7r=o("TFXLNetForTokenClassification"),P7r=o(" (XLNet model)"),I7r=l(),F(g4.$$.fragment),YIe=l(),bc=a("h2"),h4=a("a"),kve=a("span"),F(xL.$$.fragment),q7r=l(),Sve=a("span"),N7r=o("TFAutoModelForQuestionAnswering"),KIe=l(),ir=a("div"),F($L.$$.fragment),j7r=l(),vc=a("p"),D7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XH=a("a"),G7r=o("from_pretrained()"),O7r=o(" class method or the "),zH=a("a"),V7r=o("from_config()"),X7r=o(` class
method.`),z7r=l(),kL=a("p"),Q7r=o("This class cannot be instantiated directly using "),Rve=a("code"),W7r=o("__init__()"),H7r=o(" (throws an error)."),U7r=l(),It=a("div"),F(SL.$$.fragment),J7r=l(),Bve=a("p"),Y7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K7r=l(),Fc=a("p"),Z7r=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),eMr=o("not"),oMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),rMr=o("from_pretrained()"),tMr=o(" to load the model weights."),aMr=l(),F(p4.$$.fragment),nMr=l(),Ir=a("div"),F(RL.$$.fragment),sMr=l(),Ive=a("p"),lMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iMr=l(),cn=a("p"),dMr=o("The model class to instantiate is selected based on the "),qve=a("code"),cMr=o("model_type"),fMr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),mMr=o("pretrained_model_name_or_path"),gMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),hMr=o("pretrained_model_name_or_path"),pMr=o(":"),uMr=l(),ce=a("ul"),u4=a("li"),Dve=a("strong"),_Mr=o("albert"),bMr=o(" \u2014 "),WH=a("a"),vMr=o("TFAlbertForQuestionAnswering"),FMr=o(" (ALBERT model)"),TMr=l(),_4=a("li"),Gve=a("strong"),MMr=o("bert"),EMr=o(" \u2014 "),HH=a("a"),CMr=o("TFBertForQuestionAnswering"),wMr=o(" (BERT model)"),AMr=l(),b4=a("li"),Ove=a("strong"),yMr=o("camembert"),LMr=o(" \u2014 "),UH=a("a"),xMr=o("TFCamembertForQuestionAnswering"),$Mr=o(" (CamemBERT model)"),kMr=l(),v4=a("li"),Vve=a("strong"),SMr=o("convbert"),RMr=o(" \u2014 "),JH=a("a"),BMr=o("TFConvBertForQuestionAnswering"),PMr=o(" (ConvBERT model)"),IMr=l(),F4=a("li"),Xve=a("strong"),qMr=o("deberta"),NMr=o(" \u2014 "),YH=a("a"),jMr=o("TFDebertaForQuestionAnswering"),DMr=o(" (DeBERTa model)"),GMr=l(),T4=a("li"),zve=a("strong"),OMr=o("deberta-v2"),VMr=o(" \u2014 "),KH=a("a"),XMr=o("TFDebertaV2ForQuestionAnswering"),zMr=o(" (DeBERTa-v2 model)"),QMr=l(),M4=a("li"),Qve=a("strong"),WMr=o("distilbert"),HMr=o(" \u2014 "),ZH=a("a"),UMr=o("TFDistilBertForQuestionAnswering"),JMr=o(" (DistilBERT model)"),YMr=l(),E4=a("li"),Wve=a("strong"),KMr=o("electra"),ZMr=o(" \u2014 "),eU=a("a"),e4r=o("TFElectraForQuestionAnswering"),o4r=o(" (ELECTRA model)"),r4r=l(),C4=a("li"),Hve=a("strong"),t4r=o("flaubert"),a4r=o(" \u2014 "),oU=a("a"),n4r=o("TFFlaubertForQuestionAnsweringSimple"),s4r=o(" (FlauBERT model)"),l4r=l(),w4=a("li"),Uve=a("strong"),i4r=o("funnel"),d4r=o(" \u2014 "),rU=a("a"),c4r=o("TFFunnelForQuestionAnswering"),f4r=o(" (Funnel Transformer model)"),m4r=l(),A4=a("li"),Jve=a("strong"),g4r=o("gptj"),h4r=o(" \u2014 "),tU=a("a"),p4r=o("TFGPTJForQuestionAnswering"),u4r=o(" (GPT-J model)"),_4r=l(),y4=a("li"),Yve=a("strong"),b4r=o("longformer"),v4r=o(" \u2014 "),aU=a("a"),F4r=o("TFLongformerForQuestionAnswering"),T4r=o(" (Longformer model)"),M4r=l(),L4=a("li"),Kve=a("strong"),E4r=o("mobilebert"),C4r=o(" \u2014 "),nU=a("a"),w4r=o("TFMobileBertForQuestionAnswering"),A4r=o(" (MobileBERT model)"),y4r=l(),x4=a("li"),Zve=a("strong"),L4r=o("mpnet"),x4r=o(" \u2014 "),sU=a("a"),$4r=o("TFMPNetForQuestionAnswering"),k4r=o(" (MPNet model)"),S4r=l(),$4=a("li"),eFe=a("strong"),R4r=o("rembert"),B4r=o(" \u2014 "),lU=a("a"),P4r=o("TFRemBertForQuestionAnswering"),I4r=o(" (RemBERT model)"),q4r=l(),k4=a("li"),oFe=a("strong"),N4r=o("roberta"),j4r=o(" \u2014 "),iU=a("a"),D4r=o("TFRobertaForQuestionAnswering"),G4r=o(" (RoBERTa model)"),O4r=l(),S4=a("li"),rFe=a("strong"),V4r=o("roformer"),X4r=o(" \u2014 "),dU=a("a"),z4r=o("TFRoFormerForQuestionAnswering"),Q4r=o(" (RoFormer model)"),W4r=l(),R4=a("li"),tFe=a("strong"),H4r=o("xlm"),U4r=o(" \u2014 "),cU=a("a"),J4r=o("TFXLMForQuestionAnsweringSimple"),Y4r=o(" (XLM model)"),K4r=l(),B4=a("li"),aFe=a("strong"),Z4r=o("xlm-roberta"),eEr=o(" \u2014 "),fU=a("a"),oEr=o("TFXLMRobertaForQuestionAnswering"),rEr=o(" (XLM-RoBERTa model)"),tEr=l(),P4=a("li"),nFe=a("strong"),aEr=o("xlnet"),nEr=o(" \u2014 "),mU=a("a"),sEr=o("TFXLNetForQuestionAnsweringSimple"),lEr=o(" (XLNet model)"),iEr=l(),F(I4.$$.fragment),ZIe=l(),Tc=a("h2"),q4=a("a"),sFe=a("span"),F(BL.$$.fragment),dEr=l(),lFe=a("span"),cEr=o("TFAutoModelForVision2Seq"),eqe=l(),dr=a("div"),F(PL.$$.fragment),fEr=l(),Mc=a("p"),mEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gU=a("a"),gEr=o("from_pretrained()"),hEr=o(" class method or the "),hU=a("a"),pEr=o("from_config()"),uEr=o(` class
method.`),_Er=l(),IL=a("p"),bEr=o("This class cannot be instantiated directly using "),iFe=a("code"),vEr=o("__init__()"),FEr=o(" (throws an error)."),TEr=l(),qt=a("div"),F(qL.$$.fragment),MEr=l(),dFe=a("p"),EEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CEr=l(),Ec=a("p"),wEr=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),AEr=o("not"),yEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),LEr=o("from_pretrained()"),xEr=o(" to load the model weights."),$Er=l(),F(N4.$$.fragment),kEr=l(),qr=a("div"),F(NL.$$.fragment),SEr=l(),fFe=a("p"),REr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BEr=l(),fn=a("p"),PEr=o("The model class to instantiate is selected based on the "),mFe=a("code"),IEr=o("model_type"),qEr=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),NEr=o("pretrained_model_name_or_path"),jEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),DEr=o("pretrained_model_name_or_path"),GEr=o(":"),OEr=l(),pFe=a("ul"),j4=a("li"),uFe=a("strong"),VEr=o("vision-encoder-decoder"),XEr=o(" \u2014 "),uU=a("a"),zEr=o("TFVisionEncoderDecoderModel"),QEr=o(" (Vision Encoder decoder model)"),WEr=l(),F(D4.$$.fragment),oqe=l(),Cc=a("h2"),G4=a("a"),_Fe=a("span"),F(jL.$$.fragment),HEr=l(),bFe=a("span"),UEr=o("TFAutoModelForSpeechSeq2Seq"),rqe=l(),cr=a("div"),F(DL.$$.fragment),JEr=l(),wc=a("p"),YEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_U=a("a"),KEr=o("from_pretrained()"),ZEr=o(" class method or the "),bU=a("a"),e5r=o("from_config()"),o5r=o(` class
method.`),r5r=l(),GL=a("p"),t5r=o("This class cannot be instantiated directly using "),vFe=a("code"),a5r=o("__init__()"),n5r=o(" (throws an error)."),s5r=l(),Nt=a("div"),F(OL.$$.fragment),l5r=l(),FFe=a("p"),i5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d5r=l(),Ac=a("p"),c5r=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),f5r=o("not"),m5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),g5r=o("from_pretrained()"),h5r=o(" to load the model weights."),p5r=l(),F(O4.$$.fragment),u5r=l(),Nr=a("div"),F(VL.$$.fragment),_5r=l(),MFe=a("p"),b5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),v5r=l(),mn=a("p"),F5r=o("The model class to instantiate is selected based on the "),EFe=a("code"),T5r=o("model_type"),M5r=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),E5r=o("pretrained_model_name_or_path"),C5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),w5r=o("pretrained_model_name_or_path"),A5r=o(":"),y5r=l(),AFe=a("ul"),V4=a("li"),yFe=a("strong"),L5r=o("speech_to_text"),x5r=o(" \u2014 "),FU=a("a"),$5r=o("TFSpeech2TextForConditionalGeneration"),k5r=o(" (Speech2Text model)"),S5r=l(),F(X4.$$.fragment),tqe=l(),yc=a("h2"),z4=a("a"),LFe=a("span"),F(XL.$$.fragment),R5r=l(),xFe=a("span"),B5r=o("FlaxAutoModel"),aqe=l(),fr=a("div"),F(zL.$$.fragment),P5r=l(),Lc=a("p"),I5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TU=a("a"),q5r=o("from_pretrained()"),N5r=o(" class method or the "),MU=a("a"),j5r=o("from_config()"),D5r=o(` class
method.`),G5r=l(),QL=a("p"),O5r=o("This class cannot be instantiated directly using "),$Fe=a("code"),V5r=o("__init__()"),X5r=o(" (throws an error)."),z5r=l(),jt=a("div"),F(WL.$$.fragment),Q5r=l(),kFe=a("p"),W5r=o("Instantiates one of the base model classes of the library from a configuration."),H5r=l(),xc=a("p"),U5r=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),J5r=o("not"),Y5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),K5r=o("from_pretrained()"),Z5r=o(" to load the model weights."),eCr=l(),F(Q4.$$.fragment),oCr=l(),jr=a("div"),F(HL.$$.fragment),rCr=l(),RFe=a("p"),tCr=o("Instantiate one of the base model classes of the library from a pretrained model."),aCr=l(),gn=a("p"),nCr=o("The model class to instantiate is selected based on the "),BFe=a("code"),sCr=o("model_type"),lCr=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),cCr=o("pretrained_model_name_or_path"),fCr=o(":"),mCr=l(),oe=a("ul"),W4=a("li"),qFe=a("strong"),gCr=o("albert"),hCr=o(" \u2014 "),CU=a("a"),pCr=o("FlaxAlbertModel"),uCr=o(" (ALBERT model)"),_Cr=l(),H4=a("li"),NFe=a("strong"),bCr=o("bart"),vCr=o(" \u2014 "),wU=a("a"),FCr=o("FlaxBartModel"),TCr=o(" (BART model)"),MCr=l(),U4=a("li"),jFe=a("strong"),ECr=o("beit"),CCr=o(" \u2014 "),AU=a("a"),wCr=o("FlaxBeitModel"),ACr=o(" (BEiT model)"),yCr=l(),J4=a("li"),DFe=a("strong"),LCr=o("bert"),xCr=o(" \u2014 "),yU=a("a"),$Cr=o("FlaxBertModel"),kCr=o(" (BERT model)"),SCr=l(),Y4=a("li"),GFe=a("strong"),RCr=o("big_bird"),BCr=o(" \u2014 "),LU=a("a"),PCr=o("FlaxBigBirdModel"),ICr=o(" (BigBird model)"),qCr=l(),K4=a("li"),OFe=a("strong"),NCr=o("blenderbot"),jCr=o(" \u2014 "),xU=a("a"),DCr=o("FlaxBlenderbotModel"),GCr=o(" (Blenderbot model)"),OCr=l(),Z4=a("li"),VFe=a("strong"),VCr=o("blenderbot-small"),XCr=o(" \u2014 "),$U=a("a"),zCr=o("FlaxBlenderbotSmallModel"),QCr=o(" (BlenderbotSmall model)"),WCr=l(),eE=a("li"),XFe=a("strong"),HCr=o("clip"),UCr=o(" \u2014 "),kU=a("a"),JCr=o("FlaxCLIPModel"),YCr=o(" (CLIP model)"),KCr=l(),oE=a("li"),zFe=a("strong"),ZCr=o("distilbert"),e3r=o(" \u2014 "),SU=a("a"),o3r=o("FlaxDistilBertModel"),r3r=o(" (DistilBERT model)"),t3r=l(),rE=a("li"),QFe=a("strong"),a3r=o("electra"),n3r=o(" \u2014 "),RU=a("a"),s3r=o("FlaxElectraModel"),l3r=o(" (ELECTRA model)"),i3r=l(),tE=a("li"),WFe=a("strong"),d3r=o("gpt2"),c3r=o(" \u2014 "),BU=a("a"),f3r=o("FlaxGPT2Model"),m3r=o(" (OpenAI GPT-2 model)"),g3r=l(),aE=a("li"),HFe=a("strong"),h3r=o("gpt_neo"),p3r=o(" \u2014 "),PU=a("a"),u3r=o("FlaxGPTNeoModel"),_3r=o(" (GPT Neo model)"),b3r=l(),nE=a("li"),UFe=a("strong"),v3r=o("gptj"),F3r=o(" \u2014 "),IU=a("a"),T3r=o("FlaxGPTJModel"),M3r=o(" (GPT-J model)"),E3r=l(),sE=a("li"),JFe=a("strong"),C3r=o("marian"),w3r=o(" \u2014 "),qU=a("a"),A3r=o("FlaxMarianModel"),y3r=o(" (Marian model)"),L3r=l(),lE=a("li"),YFe=a("strong"),x3r=o("mbart"),$3r=o(" \u2014 "),NU=a("a"),k3r=o("FlaxMBartModel"),S3r=o(" (mBART model)"),R3r=l(),iE=a("li"),KFe=a("strong"),B3r=o("mt5"),P3r=o(" \u2014 "),jU=a("a"),I3r=o("FlaxMT5Model"),q3r=o(" (mT5 model)"),N3r=l(),dE=a("li"),ZFe=a("strong"),j3r=o("pegasus"),D3r=o(" \u2014 "),DU=a("a"),G3r=o("FlaxPegasusModel"),O3r=o(" (Pegasus model)"),V3r=l(),cE=a("li"),e0e=a("strong"),X3r=o("roberta"),z3r=o(" \u2014 "),GU=a("a"),Q3r=o("FlaxRobertaModel"),W3r=o(" (RoBERTa model)"),H3r=l(),fE=a("li"),o0e=a("strong"),U3r=o("roformer"),J3r=o(" \u2014 "),OU=a("a"),Y3r=o("FlaxRoFormerModel"),K3r=o(" (RoFormer model)"),Z3r=l(),mE=a("li"),r0e=a("strong"),ewr=o("t5"),owr=o(" \u2014 "),VU=a("a"),rwr=o("FlaxT5Model"),twr=o(" (T5 model)"),awr=l(),gE=a("li"),t0e=a("strong"),nwr=o("vision-text-dual-encoder"),swr=o(" \u2014 "),XU=a("a"),lwr=o("FlaxVisionTextDualEncoderModel"),iwr=o(" (VisionTextDualEncoder model)"),dwr=l(),hE=a("li"),a0e=a("strong"),cwr=o("vit"),fwr=o(" \u2014 "),zU=a("a"),mwr=o("FlaxViTModel"),gwr=o(" (ViT model)"),hwr=l(),pE=a("li"),n0e=a("strong"),pwr=o("wav2vec2"),uwr=o(" \u2014 "),QU=a("a"),_wr=o("FlaxWav2Vec2Model"),bwr=o(" (Wav2Vec2 model)"),vwr=l(),uE=a("li"),s0e=a("strong"),Fwr=o("xglm"),Twr=o(" \u2014 "),WU=a("a"),Mwr=o("FlaxXGLMModel"),Ewr=o(" (XGLM model)"),Cwr=l(),_E=a("li"),l0e=a("strong"),wwr=o("xlm-roberta"),Awr=o(" \u2014 "),HU=a("a"),ywr=o("FlaxXLMRobertaModel"),Lwr=o(" (XLM-RoBERTa model)"),xwr=l(),F(bE.$$.fragment),nqe=l(),$c=a("h2"),vE=a("a"),i0e=a("span"),F(UL.$$.fragment),$wr=l(),d0e=a("span"),kwr=o("FlaxAutoModelForCausalLM"),sqe=l(),mr=a("div"),F(JL.$$.fragment),Swr=l(),kc=a("p"),Rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UU=a("a"),Bwr=o("from_pretrained()"),Pwr=o(" class method or the "),JU=a("a"),Iwr=o("from_config()"),qwr=o(` class
method.`),Nwr=l(),YL=a("p"),jwr=o("This class cannot be instantiated directly using "),c0e=a("code"),Dwr=o("__init__()"),Gwr=o(" (throws an error)."),Owr=l(),Dt=a("div"),F(KL.$$.fragment),Vwr=l(),f0e=a("p"),Xwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zwr=l(),Sc=a("p"),Qwr=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),Wwr=o("not"),Hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),Uwr=o("from_pretrained()"),Jwr=o(" to load the model weights."),Ywr=l(),F(FE.$$.fragment),Kwr=l(),Dr=a("div"),F(ZL.$$.fragment),Zwr=l(),g0e=a("p"),eAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oAr=l(),hn=a("p"),rAr=o("The model class to instantiate is selected based on the "),h0e=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),ke=a("ul"),TE=a("li"),_0e=a("strong"),cAr=o("bart"),fAr=o(" \u2014 "),KU=a("a"),mAr=o("FlaxBartForCausalLM"),gAr=o(" (BART model)"),hAr=l(),ME=a("li"),b0e=a("strong"),pAr=o("bert"),uAr=o(" \u2014 "),ZU=a("a"),_Ar=o("FlaxBertForCausalLM"),bAr=o(" (BERT model)"),vAr=l(),EE=a("li"),v0e=a("strong"),FAr=o("big_bird"),TAr=o(" \u2014 "),eJ=a("a"),MAr=o("FlaxBigBirdForCausalLM"),EAr=o(" (BigBird model)"),CAr=l(),CE=a("li"),F0e=a("strong"),wAr=o("electra"),AAr=o(" \u2014 "),oJ=a("a"),yAr=o("FlaxElectraForCausalLM"),LAr=o(" (ELECTRA model)"),xAr=l(),wE=a("li"),T0e=a("strong"),$Ar=o("gpt2"),kAr=o(" \u2014 "),rJ=a("a"),SAr=o("FlaxGPT2LMHeadModel"),RAr=o(" (OpenAI GPT-2 model)"),BAr=l(),AE=a("li"),M0e=a("strong"),PAr=o("gpt_neo"),IAr=o(" \u2014 "),tJ=a("a"),qAr=o("FlaxGPTNeoForCausalLM"),NAr=o(" (GPT Neo model)"),jAr=l(),yE=a("li"),E0e=a("strong"),DAr=o("gptj"),GAr=o(" \u2014 "),aJ=a("a"),OAr=o("FlaxGPTJForCausalLM"),VAr=o(" (GPT-J model)"),XAr=l(),LE=a("li"),C0e=a("strong"),zAr=o("roberta"),QAr=o(" \u2014 "),nJ=a("a"),WAr=o("FlaxRobertaForCausalLM"),HAr=o(" (RoBERTa model)"),UAr=l(),xE=a("li"),w0e=a("strong"),JAr=o("xglm"),YAr=o(" \u2014 "),sJ=a("a"),KAr=o("FlaxXGLMForCausalLM"),ZAr=o(" (XGLM model)"),e6r=l(),F($E.$$.fragment),lqe=l(),Rc=a("h2"),kE=a("a"),A0e=a("span"),F(ex.$$.fragment),o6r=l(),y0e=a("span"),r6r=o("FlaxAutoModelForPreTraining"),iqe=l(),gr=a("div"),F(ox.$$.fragment),t6r=l(),Bc=a("p"),a6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lJ=a("a"),n6r=o("from_pretrained()"),s6r=o(" class method or the "),iJ=a("a"),l6r=o("from_config()"),i6r=o(` class
method.`),d6r=l(),rx=a("p"),c6r=o("This class cannot be instantiated directly using "),L0e=a("code"),f6r=o("__init__()"),m6r=o(" (throws an error)."),g6r=l(),Gt=a("div"),F(tx.$$.fragment),h6r=l(),x0e=a("p"),p6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u6r=l(),Pc=a("p"),_6r=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),b6r=o("not"),v6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),F6r=o("from_pretrained()"),T6r=o(" to load the model weights."),M6r=l(),F(SE.$$.fragment),E6r=l(),Gr=a("div"),F(ax.$$.fragment),C6r=l(),k0e=a("p"),w6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A6r=l(),pn=a("p"),y6r=o("The model class to instantiate is selected based on the "),S0e=a("code"),L6r=o("model_type"),x6r=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),$6r=o("pretrained_model_name_or_path"),k6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),S6r=o("pretrained_model_name_or_path"),R6r=o(":"),B6r=l(),Me=a("ul"),RE=a("li"),P0e=a("strong"),P6r=o("albert"),I6r=o(" \u2014 "),cJ=a("a"),q6r=o("FlaxAlbertForPreTraining"),N6r=o(" (ALBERT model)"),j6r=l(),BE=a("li"),I0e=a("strong"),D6r=o("bart"),G6r=o(" \u2014 "),fJ=a("a"),O6r=o("FlaxBartForConditionalGeneration"),V6r=o(" (BART model)"),X6r=l(),PE=a("li"),q0e=a("strong"),z6r=o("bert"),Q6r=o(" \u2014 "),mJ=a("a"),W6r=o("FlaxBertForPreTraining"),H6r=o(" (BERT model)"),U6r=l(),IE=a("li"),N0e=a("strong"),J6r=o("big_bird"),Y6r=o(" \u2014 "),gJ=a("a"),K6r=o("FlaxBigBirdForPreTraining"),Z6r=o(" (BigBird model)"),eyr=l(),qE=a("li"),j0e=a("strong"),oyr=o("electra"),ryr=o(" \u2014 "),hJ=a("a"),tyr=o("FlaxElectraForPreTraining"),ayr=o(" (ELECTRA model)"),nyr=l(),NE=a("li"),D0e=a("strong"),syr=o("mbart"),lyr=o(" \u2014 "),pJ=a("a"),iyr=o("FlaxMBartForConditionalGeneration"),dyr=o(" (mBART model)"),cyr=l(),jE=a("li"),G0e=a("strong"),fyr=o("mt5"),myr=o(" \u2014 "),uJ=a("a"),gyr=o("FlaxMT5ForConditionalGeneration"),hyr=o(" (mT5 model)"),pyr=l(),DE=a("li"),O0e=a("strong"),uyr=o("roberta"),_yr=o(" \u2014 "),_J=a("a"),byr=o("FlaxRobertaForMaskedLM"),vyr=o(" (RoBERTa model)"),Fyr=l(),GE=a("li"),V0e=a("strong"),Tyr=o("roformer"),Myr=o(" \u2014 "),bJ=a("a"),Eyr=o("FlaxRoFormerForMaskedLM"),Cyr=o(" (RoFormer model)"),wyr=l(),OE=a("li"),X0e=a("strong"),Ayr=o("t5"),yyr=o(" \u2014 "),vJ=a("a"),Lyr=o("FlaxT5ForConditionalGeneration"),xyr=o(" (T5 model)"),$yr=l(),VE=a("li"),z0e=a("strong"),kyr=o("wav2vec2"),Syr=o(" \u2014 "),FJ=a("a"),Ryr=o("FlaxWav2Vec2ForPreTraining"),Byr=o(" (Wav2Vec2 model)"),Pyr=l(),XE=a("li"),Q0e=a("strong"),Iyr=o("xlm-roberta"),qyr=o(" \u2014 "),TJ=a("a"),Nyr=o("FlaxXLMRobertaForMaskedLM"),jyr=o(" (XLM-RoBERTa model)"),Dyr=l(),F(zE.$$.fragment),dqe=l(),Ic=a("h2"),QE=a("a"),W0e=a("span"),F(nx.$$.fragment),Gyr=l(),H0e=a("span"),Oyr=o("FlaxAutoModelForMaskedLM"),cqe=l(),hr=a("div"),F(sx.$$.fragment),Vyr=l(),qc=a("p"),Xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MJ=a("a"),zyr=o("from_pretrained()"),Qyr=o(" class method or the "),EJ=a("a"),Wyr=o("from_config()"),Hyr=o(` class
method.`),Uyr=l(),lx=a("p"),Jyr=o("This class cannot be instantiated directly using "),U0e=a("code"),Yyr=o("__init__()"),Kyr=o(" (throws an error)."),Zyr=l(),Ot=a("div"),F(ix.$$.fragment),eLr=l(),J0e=a("p"),oLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rLr=l(),Nc=a("p"),tLr=o(`Note:
Loading a model from its configuration file does `),Y0e=a("strong"),aLr=o("not"),nLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),sLr=o("from_pretrained()"),lLr=o(" to load the model weights."),iLr=l(),F(WE.$$.fragment),dLr=l(),Or=a("div"),F(dx.$$.fragment),cLr=l(),K0e=a("p"),fLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mLr=l(),un=a("p"),gLr=o("The model class to instantiate is selected based on the "),Z0e=a("code"),hLr=o("model_type"),pLr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),uLr=o("pretrained_model_name_or_path"),_Lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(":"),FLr=l(),Le=a("ul"),HE=a("li"),rTe=a("strong"),TLr=o("albert"),MLr=o(" \u2014 "),wJ=a("a"),ELr=o("FlaxAlbertForMaskedLM"),CLr=o(" (ALBERT model)"),wLr=l(),UE=a("li"),tTe=a("strong"),ALr=o("bart"),yLr=o(" \u2014 "),AJ=a("a"),LLr=o("FlaxBartForConditionalGeneration"),xLr=o(" (BART model)"),$Lr=l(),JE=a("li"),aTe=a("strong"),kLr=o("bert"),SLr=o(" \u2014 "),yJ=a("a"),RLr=o("FlaxBertForMaskedLM"),BLr=o(" (BERT model)"),PLr=l(),YE=a("li"),nTe=a("strong"),ILr=o("big_bird"),qLr=o(" \u2014 "),LJ=a("a"),NLr=o("FlaxBigBirdForMaskedLM"),jLr=o(" (BigBird model)"),DLr=l(),KE=a("li"),sTe=a("strong"),GLr=o("distilbert"),OLr=o(" \u2014 "),xJ=a("a"),VLr=o("FlaxDistilBertForMaskedLM"),XLr=o(" (DistilBERT model)"),zLr=l(),ZE=a("li"),lTe=a("strong"),QLr=o("electra"),WLr=o(" \u2014 "),$J=a("a"),HLr=o("FlaxElectraForMaskedLM"),ULr=o(" (ELECTRA model)"),JLr=l(),e5=a("li"),iTe=a("strong"),YLr=o("mbart"),KLr=o(" \u2014 "),kJ=a("a"),ZLr=o("FlaxMBartForConditionalGeneration"),exr=o(" (mBART model)"),oxr=l(),o5=a("li"),dTe=a("strong"),rxr=o("roberta"),txr=o(" \u2014 "),SJ=a("a"),axr=o("FlaxRobertaForMaskedLM"),nxr=o(" (RoBERTa model)"),sxr=l(),r5=a("li"),cTe=a("strong"),lxr=o("roformer"),ixr=o(" \u2014 "),RJ=a("a"),dxr=o("FlaxRoFormerForMaskedLM"),cxr=o(" (RoFormer model)"),fxr=l(),t5=a("li"),fTe=a("strong"),mxr=o("xlm-roberta"),gxr=o(" \u2014 "),BJ=a("a"),hxr=o("FlaxXLMRobertaForMaskedLM"),pxr=o(" (XLM-RoBERTa model)"),uxr=l(),F(a5.$$.fragment),fqe=l(),jc=a("h2"),n5=a("a"),mTe=a("span"),F(cx.$$.fragment),_xr=l(),gTe=a("span"),bxr=o("FlaxAutoModelForSeq2SeqLM"),mqe=l(),pr=a("div"),F(fx.$$.fragment),vxr=l(),Dc=a("p"),Fxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PJ=a("a"),Txr=o("from_pretrained()"),Mxr=o(" class method or the "),IJ=a("a"),Exr=o("from_config()"),Cxr=o(` class
method.`),wxr=l(),mx=a("p"),Axr=o("This class cannot be instantiated directly using "),hTe=a("code"),yxr=o("__init__()"),Lxr=o(" (throws an error)."),xxr=l(),Vt=a("div"),F(gx.$$.fragment),$xr=l(),pTe=a("p"),kxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sxr=l(),Gc=a("p"),Rxr=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),Bxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),Ixr=o("from_pretrained()"),qxr=o(" to load the model weights."),Nxr=l(),F(s5.$$.fragment),jxr=l(),Vr=a("div"),F(hx.$$.fragment),Dxr=l(),_Te=a("p"),Gxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Oxr=l(),_n=a("p"),Vxr=o("The model class to instantiate is selected based on the "),bTe=a("code"),Xxr=o("model_type"),zxr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),Qxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),Hxr=o("pretrained_model_name_or_path"),Uxr=o(":"),Jxr=l(),Se=a("ul"),l5=a("li"),TTe=a("strong"),Yxr=o("bart"),Kxr=o(" \u2014 "),NJ=a("a"),Zxr=o("FlaxBartForConditionalGeneration"),e9r=o(" (BART model)"),o9r=l(),i5=a("li"),MTe=a("strong"),r9r=o("blenderbot"),t9r=o(" \u2014 "),jJ=a("a"),a9r=o("FlaxBlenderbotForConditionalGeneration"),n9r=o(" (Blenderbot model)"),s9r=l(),d5=a("li"),ETe=a("strong"),l9r=o("blenderbot-small"),i9r=o(" \u2014 "),DJ=a("a"),d9r=o("FlaxBlenderbotSmallForConditionalGeneration"),c9r=o(" (BlenderbotSmall model)"),f9r=l(),c5=a("li"),CTe=a("strong"),m9r=o("encoder-decoder"),g9r=o(" \u2014 "),GJ=a("a"),h9r=o("FlaxEncoderDecoderModel"),p9r=o(" (Encoder decoder model)"),u9r=l(),f5=a("li"),wTe=a("strong"),_9r=o("marian"),b9r=o(" \u2014 "),OJ=a("a"),v9r=o("FlaxMarianMTModel"),F9r=o(" (Marian model)"),T9r=l(),m5=a("li"),ATe=a("strong"),M9r=o("mbart"),E9r=o(" \u2014 "),VJ=a("a"),C9r=o("FlaxMBartForConditionalGeneration"),w9r=o(" (mBART model)"),A9r=l(),g5=a("li"),yTe=a("strong"),y9r=o("mt5"),L9r=o(" \u2014 "),XJ=a("a"),x9r=o("FlaxMT5ForConditionalGeneration"),$9r=o(" (mT5 model)"),k9r=l(),h5=a("li"),LTe=a("strong"),S9r=o("pegasus"),R9r=o(" \u2014 "),zJ=a("a"),B9r=o("FlaxPegasusForConditionalGeneration"),P9r=o(" (Pegasus model)"),I9r=l(),p5=a("li"),xTe=a("strong"),q9r=o("t5"),N9r=o(" \u2014 "),QJ=a("a"),j9r=o("FlaxT5ForConditionalGeneration"),D9r=o(" (T5 model)"),G9r=l(),F(u5.$$.fragment),gqe=l(),Oc=a("h2"),_5=a("a"),$Te=a("span"),F(px.$$.fragment),O9r=l(),kTe=a("span"),V9r=o("FlaxAutoModelForSequenceClassification"),hqe=l(),ur=a("div"),F(ux.$$.fragment),X9r=l(),Vc=a("p"),z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WJ=a("a"),Q9r=o("from_pretrained()"),W9r=o(" class method or the "),HJ=a("a"),H9r=o("from_config()"),U9r=o(` class
method.`),J9r=l(),_x=a("p"),Y9r=o("This class cannot be instantiated directly using "),STe=a("code"),K9r=o("__init__()"),Z9r=o(" (throws an error)."),e$r=l(),Xt=a("div"),F(bx.$$.fragment),o$r=l(),RTe=a("p"),r$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),t$r=l(),Xc=a("p"),a$r=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),n$r=o("not"),s$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),l$r=o("from_pretrained()"),i$r=o(" to load the model weights."),d$r=l(),F(b5.$$.fragment),c$r=l(),Xr=a("div"),F(vx.$$.fragment),f$r=l(),PTe=a("p"),m$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g$r=l(),bn=a("p"),h$r=o("The model class to instantiate is selected based on the "),ITe=a("code"),p$r=o("model_type"),u$r=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),_$r=o("pretrained_model_name_or_path"),b$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),v$r=o("pretrained_model_name_or_path"),F$r=o(":"),T$r=l(),xe=a("ul"),v5=a("li"),jTe=a("strong"),M$r=o("albert"),E$r=o(" \u2014 "),JJ=a("a"),C$r=o("FlaxAlbertForSequenceClassification"),w$r=o(" (ALBERT model)"),A$r=l(),F5=a("li"),DTe=a("strong"),y$r=o("bart"),L$r=o(" \u2014 "),YJ=a("a"),x$r=o("FlaxBartForSequenceClassification"),$$r=o(" (BART model)"),k$r=l(),T5=a("li"),GTe=a("strong"),S$r=o("bert"),R$r=o(" \u2014 "),KJ=a("a"),B$r=o("FlaxBertForSequenceClassification"),P$r=o(" (BERT model)"),I$r=l(),M5=a("li"),OTe=a("strong"),q$r=o("big_bird"),N$r=o(" \u2014 "),ZJ=a("a"),j$r=o("FlaxBigBirdForSequenceClassification"),D$r=o(" (BigBird model)"),G$r=l(),E5=a("li"),VTe=a("strong"),O$r=o("distilbert"),V$r=o(" \u2014 "),eY=a("a"),X$r=o("FlaxDistilBertForSequenceClassification"),z$r=o(" (DistilBERT model)"),Q$r=l(),C5=a("li"),XTe=a("strong"),W$r=o("electra"),H$r=o(" \u2014 "),oY=a("a"),U$r=o("FlaxElectraForSequenceClassification"),J$r=o(" (ELECTRA model)"),Y$r=l(),w5=a("li"),zTe=a("strong"),K$r=o("mbart"),Z$r=o(" \u2014 "),rY=a("a"),ekr=o("FlaxMBartForSequenceClassification"),okr=o(" (mBART model)"),rkr=l(),A5=a("li"),QTe=a("strong"),tkr=o("roberta"),akr=o(" \u2014 "),tY=a("a"),nkr=o("FlaxRobertaForSequenceClassification"),skr=o(" (RoBERTa model)"),lkr=l(),y5=a("li"),WTe=a("strong"),ikr=o("roformer"),dkr=o(" \u2014 "),aY=a("a"),ckr=o("FlaxRoFormerForSequenceClassification"),fkr=o(" (RoFormer model)"),mkr=l(),L5=a("li"),HTe=a("strong"),gkr=o("xlm-roberta"),hkr=o(" \u2014 "),nY=a("a"),pkr=o("FlaxXLMRobertaForSequenceClassification"),ukr=o(" (XLM-RoBERTa model)"),_kr=l(),F(x5.$$.fragment),pqe=l(),zc=a("h2"),$5=a("a"),UTe=a("span"),F(Fx.$$.fragment),bkr=l(),JTe=a("span"),vkr=o("FlaxAutoModelForQuestionAnswering"),uqe=l(),_r=a("div"),F(Tx.$$.fragment),Fkr=l(),Qc=a("p"),Tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sY=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" class method or the "),lY=a("a"),Ckr=o("from_config()"),wkr=o(` class
method.`),Akr=l(),Mx=a("p"),ykr=o("This class cannot be instantiated directly using "),YTe=a("code"),Lkr=o("__init__()"),xkr=o(" (throws an error)."),$kr=l(),zt=a("div"),F(Ex.$$.fragment),kkr=l(),KTe=a("p"),Skr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rkr=l(),Wc=a("p"),Bkr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),Pkr=o("not"),Ikr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),qkr=o("from_pretrained()"),Nkr=o(" to load the model weights."),jkr=l(),F(k5.$$.fragment),Dkr=l(),zr=a("div"),F(Cx.$$.fragment),Gkr=l(),e7e=a("p"),Okr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vkr=l(),vn=a("p"),Xkr=o("The model class to instantiate is selected based on the "),o7e=a("code"),zkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),r7e=a("code"),Wkr=o("pretrained_model_name_or_path"),Hkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=a("code"),Ukr=o("pretrained_model_name_or_path"),Jkr=o(":"),Ykr=l(),$e=a("ul"),S5=a("li"),a7e=a("strong"),Kkr=o("albert"),Zkr=o(" \u2014 "),dY=a("a"),eSr=o("FlaxAlbertForQuestionAnswering"),oSr=o(" (ALBERT model)"),rSr=l(),R5=a("li"),n7e=a("strong"),tSr=o("bart"),aSr=o(" \u2014 "),cY=a("a"),nSr=o("FlaxBartForQuestionAnswering"),sSr=o(" (BART model)"),lSr=l(),B5=a("li"),s7e=a("strong"),iSr=o("bert"),dSr=o(" \u2014 "),fY=a("a"),cSr=o("FlaxBertForQuestionAnswering"),fSr=o(" (BERT model)"),mSr=l(),P5=a("li"),l7e=a("strong"),gSr=o("big_bird"),hSr=o(" \u2014 "),mY=a("a"),pSr=o("FlaxBigBirdForQuestionAnswering"),uSr=o(" (BigBird model)"),_Sr=l(),I5=a("li"),i7e=a("strong"),bSr=o("distilbert"),vSr=o(" \u2014 "),gY=a("a"),FSr=o("FlaxDistilBertForQuestionAnswering"),TSr=o(" (DistilBERT model)"),MSr=l(),q5=a("li"),d7e=a("strong"),ESr=o("electra"),CSr=o(" \u2014 "),hY=a("a"),wSr=o("FlaxElectraForQuestionAnswering"),ASr=o(" (ELECTRA model)"),ySr=l(),N5=a("li"),c7e=a("strong"),LSr=o("mbart"),xSr=o(" \u2014 "),pY=a("a"),$Sr=o("FlaxMBartForQuestionAnswering"),kSr=o(" (mBART model)"),SSr=l(),j5=a("li"),f7e=a("strong"),RSr=o("roberta"),BSr=o(" \u2014 "),uY=a("a"),PSr=o("FlaxRobertaForQuestionAnswering"),ISr=o(" (RoBERTa model)"),qSr=l(),D5=a("li"),m7e=a("strong"),NSr=o("roformer"),jSr=o(" \u2014 "),_Y=a("a"),DSr=o("FlaxRoFormerForQuestionAnswering"),GSr=o(" (RoFormer model)"),OSr=l(),G5=a("li"),g7e=a("strong"),VSr=o("xlm-roberta"),XSr=o(" \u2014 "),bY=a("a"),zSr=o("FlaxXLMRobertaForQuestionAnswering"),QSr=o(" (XLM-RoBERTa model)"),WSr=l(),F(O5.$$.fragment),_qe=l(),Hc=a("h2"),V5=a("a"),h7e=a("span"),F(wx.$$.fragment),HSr=l(),p7e=a("span"),USr=o("FlaxAutoModelForTokenClassification"),bqe=l(),br=a("div"),F(Ax.$$.fragment),JSr=l(),Uc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vY=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),FY=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),yx=a("p"),tRr=o("This class cannot be instantiated directly using "),u7e=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),Qt=a("div"),F(Lx.$$.fragment),lRr=l(),_7e=a("p"),iRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dRr=l(),Jc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(X5.$$.fragment),uRr=l(),Qr=a("div"),F(xx.$$.fragment),_Rr=l(),v7e=a("p"),bRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vRr=l(),Fn=a("p"),FRr=o("The model class to instantiate is selected based on the "),F7e=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),yRr=l(),De=a("ul"),z5=a("li"),E7e=a("strong"),LRr=o("albert"),xRr=o(" \u2014 "),MY=a("a"),$Rr=o("FlaxAlbertForTokenClassification"),kRr=o(" (ALBERT model)"),SRr=l(),Q5=a("li"),C7e=a("strong"),RRr=o("bert"),BRr=o(" \u2014 "),EY=a("a"),PRr=o("FlaxBertForTokenClassification"),IRr=o(" (BERT model)"),qRr=l(),W5=a("li"),w7e=a("strong"),NRr=o("big_bird"),jRr=o(" \u2014 "),CY=a("a"),DRr=o("FlaxBigBirdForTokenClassification"),GRr=o(" (BigBird model)"),ORr=l(),H5=a("li"),A7e=a("strong"),VRr=o("distilbert"),XRr=o(" \u2014 "),wY=a("a"),zRr=o("FlaxDistilBertForTokenClassification"),QRr=o(" (DistilBERT model)"),WRr=l(),U5=a("li"),y7e=a("strong"),HRr=o("electra"),URr=o(" \u2014 "),AY=a("a"),JRr=o("FlaxElectraForTokenClassification"),YRr=o(" (ELECTRA model)"),KRr=l(),J5=a("li"),L7e=a("strong"),ZRr=o("roberta"),eBr=o(" \u2014 "),yY=a("a"),oBr=o("FlaxRobertaForTokenClassification"),rBr=o(" (RoBERTa model)"),tBr=l(),Y5=a("li"),x7e=a("strong"),aBr=o("roformer"),nBr=o(" \u2014 "),LY=a("a"),sBr=o("FlaxRoFormerForTokenClassification"),lBr=o(" (RoFormer model)"),iBr=l(),K5=a("li"),$7e=a("strong"),dBr=o("xlm-roberta"),cBr=o(" \u2014 "),xY=a("a"),fBr=o("FlaxXLMRobertaForTokenClassification"),mBr=o(" (XLM-RoBERTa model)"),gBr=l(),F(Z5.$$.fragment),vqe=l(),Yc=a("h2"),eC=a("a"),k7e=a("span"),F($x.$$.fragment),hBr=l(),S7e=a("span"),pBr=o("FlaxAutoModelForMultipleChoice"),Fqe=l(),vr=a("div"),F(kx.$$.fragment),uBr=l(),Kc=a("p"),_Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$Y=a("a"),bBr=o("from_pretrained()"),vBr=o(" class method or the "),kY=a("a"),FBr=o("from_config()"),TBr=o(` class
method.`),MBr=l(),Sx=a("p"),EBr=o("This class cannot be instantiated directly using "),R7e=a("code"),CBr=o("__init__()"),wBr=o(" (throws an error)."),ABr=l(),Wt=a("div"),F(Rx.$$.fragment),yBr=l(),B7e=a("p"),LBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xBr=l(),Zc=a("p"),$Br=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),kBr=o("not"),SBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=a("a"),RBr=o("from_pretrained()"),BBr=o(" to load the model weights."),PBr=l(),F(oC.$$.fragment),IBr=l(),Wr=a("div"),F(Bx.$$.fragment),qBr=l(),I7e=a("p"),NBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jBr=l(),Tn=a("p"),DBr=o("The model class to instantiate is selected based on the "),q7e=a("code"),GBr=o("model_type"),OBr=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),VBr=o("pretrained_model_name_or_path"),XBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),zBr=o("pretrained_model_name_or_path"),QBr=o(":"),WBr=l(),Ge=a("ul"),rC=a("li"),D7e=a("strong"),HBr=o("albert"),UBr=o(" \u2014 "),RY=a("a"),JBr=o("FlaxAlbertForMultipleChoice"),YBr=o(" (ALBERT model)"),KBr=l(),tC=a("li"),G7e=a("strong"),ZBr=o("bert"),ePr=o(" \u2014 "),BY=a("a"),oPr=o("FlaxBertForMultipleChoice"),rPr=o(" (BERT model)"),tPr=l(),aC=a("li"),O7e=a("strong"),aPr=o("big_bird"),nPr=o(" \u2014 "),PY=a("a"),sPr=o("FlaxBigBirdForMultipleChoice"),lPr=o(" (BigBird model)"),iPr=l(),nC=a("li"),V7e=a("strong"),dPr=o("distilbert"),cPr=o(" \u2014 "),IY=a("a"),fPr=o("FlaxDistilBertForMultipleChoice"),mPr=o(" (DistilBERT model)"),gPr=l(),sC=a("li"),X7e=a("strong"),hPr=o("electra"),pPr=o(" \u2014 "),qY=a("a"),uPr=o("FlaxElectraForMultipleChoice"),_Pr=o(" (ELECTRA model)"),bPr=l(),lC=a("li"),z7e=a("strong"),vPr=o("roberta"),FPr=o(" \u2014 "),NY=a("a"),TPr=o("FlaxRobertaForMultipleChoice"),MPr=o(" (RoBERTa model)"),EPr=l(),iC=a("li"),Q7e=a("strong"),CPr=o("roformer"),wPr=o(" \u2014 "),jY=a("a"),APr=o("FlaxRoFormerForMultipleChoice"),yPr=o(" (RoFormer model)"),LPr=l(),dC=a("li"),W7e=a("strong"),xPr=o("xlm-roberta"),$Pr=o(" \u2014 "),DY=a("a"),kPr=o("FlaxXLMRobertaForMultipleChoice"),SPr=o(" (XLM-RoBERTa model)"),RPr=l(),F(cC.$$.fragment),Tqe=l(),ef=a("h2"),fC=a("a"),H7e=a("span"),F(Px.$$.fragment),BPr=l(),U7e=a("span"),PPr=o("FlaxAutoModelForNextSentencePrediction"),Mqe=l(),Fr=a("div"),F(Ix.$$.fragment),IPr=l(),of=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GY=a("a"),NPr=o("from_pretrained()"),jPr=o(" class method or the "),OY=a("a"),DPr=o("from_config()"),GPr=o(` class
method.`),OPr=l(),qx=a("p"),VPr=o("This class cannot be instantiated directly using "),J7e=a("code"),XPr=o("__init__()"),zPr=o(" (throws an error)."),QPr=l(),Ht=a("div"),F(Nx.$$.fragment),WPr=l(),Y7e=a("p"),HPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UPr=l(),rf=a("p"),JPr=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),YPr=o("not"),KPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),ZPr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),F(mC.$$.fragment),rIr=l(),Hr=a("div"),F(jx.$$.fragment),tIr=l(),Z7e=a("p"),aIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nIr=l(),Mn=a("p"),sIr=o("The model class to instantiate is selected based on the "),eMe=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(":"),gIr=l(),tMe=a("ul"),gC=a("li"),aMe=a("strong"),hIr=o("bert"),pIr=o(" \u2014 "),XY=a("a"),uIr=o("FlaxBertForNextSentencePrediction"),_Ir=o(" (BERT model)"),bIr=l(),F(hC.$$.fragment),Eqe=l(),tf=a("h2"),pC=a("a"),nMe=a("span"),F(Dx.$$.fragment),vIr=l(),sMe=a("span"),FIr=o("FlaxAutoModelForImageClassification"),Cqe=l(),Tr=a("div"),F(Gx.$$.fragment),TIr=l(),af=a("p"),MIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zY=a("a"),EIr=o("from_pretrained()"),CIr=o(" class method or the "),QY=a("a"),wIr=o("from_config()"),AIr=o(` class
method.`),yIr=l(),Ox=a("p"),LIr=o("This class cannot be instantiated directly using "),lMe=a("code"),xIr=o("__init__()"),$Ir=o(" (throws an error)."),kIr=l(),Ut=a("div"),F(Vx.$$.fragment),SIr=l(),iMe=a("p"),RIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BIr=l(),nf=a("p"),PIr=o(`Note:
Loading a model from its configuration file does `),dMe=a("strong"),IIr=o("not"),qIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),NIr=o("from_pretrained()"),jIr=o(" to load the model weights."),DIr=l(),F(uC.$$.fragment),GIr=l(),Ur=a("div"),F(Xx.$$.fragment),OIr=l(),cMe=a("p"),VIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XIr=l(),En=a("p"),zIr=o("The model class to instantiate is selected based on the "),fMe=a("code"),QIr=o("model_type"),WIr=o(` property of the config object (either
passed as an argument or loaded from `),mMe=a("code"),HIr=o("pretrained_model_name_or_path"),UIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),JIr=o("pretrained_model_name_or_path"),YIr=o(":"),KIr=l(),zx=a("ul"),_C=a("li"),hMe=a("strong"),ZIr=o("beit"),eqr=o(" \u2014 "),HY=a("a"),oqr=o("FlaxBeitForImageClassification"),rqr=o(" (BEiT model)"),tqr=l(),bC=a("li"),pMe=a("strong"),aqr=o("vit"),nqr=o(" \u2014 "),UY=a("a"),sqr=o("FlaxViTForImageClassification"),lqr=o(" (ViT model)"),iqr=l(),F(vC.$$.fragment),wqe=l(),sf=a("h2"),FC=a("a"),uMe=a("span"),F(Qx.$$.fragment),dqr=l(),_Me=a("span"),cqr=o("FlaxAutoModelForVision2Seq"),Aqe=l(),Mr=a("div"),F(Wx.$$.fragment),fqr=l(),lf=a("p"),mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JY=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),YY=a("a"),pqr=o("from_config()"),uqr=o(` class
method.`),_qr=l(),Hx=a("p"),bqr=o("This class cannot be instantiated directly using "),bMe=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),Jt=a("div"),F(Ux.$$.fragment),Mqr=l(),vMe=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cqr=l(),df=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),Aqr=o("not"),yqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),Lqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(TC.$$.fragment),kqr=l(),Jr=a("div"),F(Jx.$$.fragment),Sqr=l(),TMe=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bqr=l(),Cn=a("p"),Pqr=o("The model class to instantiate is selected based on the "),MMe=a("code"),Iqr=o("model_type"),qqr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),wMe=a("ul"),MC=a("li"),AMe=a("strong"),Vqr=o("vision-encoder-decoder"),Xqr=o(" \u2014 "),ZY=a("a"),zqr=o("FlaxVisionEncoderDecoderModel"),Qqr=o(" (Vision Encoder decoder model)"),Wqr=l(),F(EC.$$.fragment),this.h()},l(f){const _=gwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Yx=s(p);m=n(Yx,"A",{id:!0,class:!0,href:!0});var yMe=s(m);u=n(yMe,"SPAN",{});var LMe=s(u);T(d.$$.fragment,LMe),LMe.forEach(t),yMe.forEach(t),h=i(Yx),Mo=n(Yx,"SPAN",{});var xMe=s(Mo);ii=r(xMe,"Auto Classes"),xMe.forEach(t),Yx.forEach(t),gf=i(f),et=n(f,"P",{});var Kx=s(et);di=r(Kx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(Kx,"CODE",{});var $Me=s(ci);Ow=r($Me,"from_pretrained()"),$Me.forEach(t),hf=r(Kx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Kx.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);fi=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var kMe=s(An);Vw=r(kMe,"AutoConfig"),kMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var SMe=s(Ln);Xw=r(SMe,"AutoModel"),SMe.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var RMe=s(xn);zw=r(RMe,"AutoTokenizer"),RMe.forEach(t),gi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),pf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Zx=s(Ae);c$=r(Zx,"will create a model that is an instance of "),hi=n(Zx,"A",{href:!0});var BMe=s(hi);f$=r(BMe,"BertModel"),BMe.forEach(t),m$=r(Zx,"."),Zx.forEach(t),Eo=i(f),Ea=n(f,"P",{});var e9=s(Ea);g$=r(e9,"There is one class of "),uf=n(e9,"CODE",{});var PMe=s(uf);h$=r(PMe,"AutoModel"),PMe.forEach(t),Pje=r(e9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),e9.forEach(t),CPe=i(f),pi=n(f,"H2",{class:!0});var o9=s(pi);_f=n(o9,"A",{id:!0,class:!0,href:!0});var IMe=s(_f);WZ=n(IMe,"SPAN",{});var qMe=s(WZ);T(Qw.$$.fragment,qMe),qMe.forEach(t),IMe.forEach(t),Ije=i(o9),HZ=n(o9,"SPAN",{});var NMe=s(HZ);qje=r(NMe,"Extending the Auto Classes"),NMe.forEach(t),o9.forEach(t),wPe=i(f),$n=n(f,"P",{});var cf=s($n);Nje=r(cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),UZ=n(cf,"CODE",{});var jMe=s(UZ);jje=r(jMe,"NewModel"),jMe.forEach(t),Dje=r(cf,", make sure you have a "),JZ=n(cf,"CODE",{});var DMe=s(JZ);Gje=r(DMe,"NewModelConfig"),DMe.forEach(t),Oje=r(cf,` then you can add those to the auto
classes like this:`),cf.forEach(t),APe=i(f),T(Ww.$$.fragment,f),yPe=i(f),p$=n(f,"P",{});var GMe=s(p$);Vje=r(GMe,"You will then be able to use the auto classes like you would usually do!"),GMe.forEach(t),LPe=i(f),T(bf.$$.fragment,f),xPe=i(f),ui=n(f,"H2",{class:!0});var r9=s(ui);vf=n(r9,"A",{id:!0,class:!0,href:!0});var OMe=s(vf);YZ=n(OMe,"SPAN",{});var VMe=s(YZ);T(Hw.$$.fragment,VMe),VMe.forEach(t),OMe.forEach(t),Xje=i(r9),KZ=n(r9,"SPAN",{});var XMe=s(KZ);zje=r(XMe,"AutoConfig"),XMe.forEach(t),r9.forEach(t),$Pe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Uw.$$.fragment,Kr),Qje=i(Kr),Jw=n(Kr,"P",{});var t9=s(Jw);Wje=r(t9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),u$=n(t9,"A",{href:!0});var zMe=s(u$);Hje=r(zMe,"from_pretrained()"),zMe.forEach(t),Uje=r(t9," class method."),t9.forEach(t),Jje=i(Kr),Yw=n(Kr,"P",{});var a9=s(Yw);Yje=r(a9,"This class cannot be instantiated directly using "),ZZ=n(a9,"CODE",{});var QMe=s(ZZ);Kje=r(QMe,"__init__()"),QMe.forEach(t),Zje=r(a9," (throws an error)."),a9.forEach(t),eDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(Kw.$$.fragment,Zr),oDe=i(Zr),eee=n(Zr,"P",{});var WMe=s(eee);rDe=r(WMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),WMe.forEach(t),tDe=i(Zr),_i=n(Zr,"P",{});var ff=s(_i);aDe=r(ff,"The configuration class to instantiate is selected based on the "),oee=n(ff,"CODE",{});var HMe=s(oee);nDe=r(HMe,"model_type"),HMe.forEach(t),sDe=r(ff,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ree=n(ff,"CODE",{});var UMe=s(ree);lDe=r(UMe,"pretrained_model_name_or_path"),UMe.forEach(t),iDe=r(ff,":"),ff.forEach(t),dDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);Ff=n(L,"LI",{});var CC=s(Ff);tee=n(CC,"STRONG",{});var JMe=s(tee);cDe=r(JMe,"albert"),JMe.forEach(t),fDe=r(CC," \u2014 "),_$=n(CC,"A",{href:!0});var YMe=s(_$);mDe=r(YMe,"AlbertConfig"),YMe.forEach(t),gDe=r(CC," (ALBERT model)"),CC.forEach(t),hDe=i(L),Tf=n(L,"LI",{});var wC=s(Tf);aee=n(wC,"STRONG",{});var KMe=s(aee);pDe=r(KMe,"bart"),KMe.forEach(t),uDe=r(wC," \u2014 "),b$=n(wC,"A",{href:!0});var ZMe=s(b$);_De=r(ZMe,"BartConfig"),ZMe.forEach(t),bDe=r(wC," (BART model)"),wC.forEach(t),vDe=i(L),Mf=n(L,"LI",{});var AC=s(Mf);nee=n(AC,"STRONG",{});var e4e=s(nee);FDe=r(e4e,"beit"),e4e.forEach(t),TDe=r(AC," \u2014 "),v$=n(AC,"A",{href:!0});var o4e=s(v$);MDe=r(o4e,"BeitConfig"),o4e.forEach(t),EDe=r(AC," (BEiT model)"),AC.forEach(t),CDe=i(L),Ef=n(L,"LI",{});var yC=s(Ef);see=n(yC,"STRONG",{});var r4e=s(see);wDe=r(r4e,"bert"),r4e.forEach(t),ADe=r(yC," \u2014 "),F$=n(yC,"A",{href:!0});var t4e=s(F$);yDe=r(t4e,"BertConfig"),t4e.forEach(t),LDe=r(yC," (BERT model)"),yC.forEach(t),xDe=i(L),Cf=n(L,"LI",{});var LC=s(Cf);lee=n(LC,"STRONG",{});var a4e=s(lee);$De=r(a4e,"bert-generation"),a4e.forEach(t),kDe=r(LC," \u2014 "),T$=n(LC,"A",{href:!0});var n4e=s(T$);SDe=r(n4e,"BertGenerationConfig"),n4e.forEach(t),RDe=r(LC," (Bert Generation model)"),LC.forEach(t),BDe=i(L),wf=n(L,"LI",{});var xC=s(wf);iee=n(xC,"STRONG",{});var s4e=s(iee);PDe=r(s4e,"big_bird"),s4e.forEach(t),IDe=r(xC," \u2014 "),M$=n(xC,"A",{href:!0});var l4e=s(M$);qDe=r(l4e,"BigBirdConfig"),l4e.forEach(t),NDe=r(xC," (BigBird model)"),xC.forEach(t),jDe=i(L),Af=n(L,"LI",{});var $C=s(Af);dee=n($C,"STRONG",{});var i4e=s(dee);DDe=r(i4e,"bigbird_pegasus"),i4e.forEach(t),GDe=r($C," \u2014 "),E$=n($C,"A",{href:!0});var d4e=s(E$);ODe=r(d4e,"BigBirdPegasusConfig"),d4e.forEach(t),VDe=r($C," (BigBirdPegasus model)"),$C.forEach(t),XDe=i(L),yf=n(L,"LI",{});var kC=s(yf);cee=n(kC,"STRONG",{});var c4e=s(cee);zDe=r(c4e,"blenderbot"),c4e.forEach(t),QDe=r(kC," \u2014 "),C$=n(kC,"A",{href:!0});var f4e=s(C$);WDe=r(f4e,"BlenderbotConfig"),f4e.forEach(t),HDe=r(kC," (Blenderbot model)"),kC.forEach(t),UDe=i(L),Lf=n(L,"LI",{});var SC=s(Lf);fee=n(SC,"STRONG",{});var m4e=s(fee);JDe=r(m4e,"blenderbot-small"),m4e.forEach(t),YDe=r(SC," \u2014 "),w$=n(SC,"A",{href:!0});var g4e=s(w$);KDe=r(g4e,"BlenderbotSmallConfig"),g4e.forEach(t),ZDe=r(SC," (BlenderbotSmall model)"),SC.forEach(t),eGe=i(L),xf=n(L,"LI",{});var RC=s(xf);mee=n(RC,"STRONG",{});var h4e=s(mee);oGe=r(h4e,"camembert"),h4e.forEach(t),rGe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var p4e=s(A$);tGe=r(p4e,"CamembertConfig"),p4e.forEach(t),aGe=r(RC," (CamemBERT model)"),RC.forEach(t),nGe=i(L),$f=n(L,"LI",{});var BC=s($f);gee=n(BC,"STRONG",{});var u4e=s(gee);sGe=r(u4e,"canine"),u4e.forEach(t),lGe=r(BC," \u2014 "),y$=n(BC,"A",{href:!0});var _4e=s(y$);iGe=r(_4e,"CanineConfig"),_4e.forEach(t),dGe=r(BC," (Canine model)"),BC.forEach(t),cGe=i(L),kf=n(L,"LI",{});var PC=s(kf);hee=n(PC,"STRONG",{});var b4e=s(hee);fGe=r(b4e,"clip"),b4e.forEach(t),mGe=r(PC," \u2014 "),L$=n(PC,"A",{href:!0});var v4e=s(L$);gGe=r(v4e,"CLIPConfig"),v4e.forEach(t),hGe=r(PC," (CLIP model)"),PC.forEach(t),pGe=i(L),Sf=n(L,"LI",{});var IC=s(Sf);pee=n(IC,"STRONG",{});var F4e=s(pee);uGe=r(F4e,"convbert"),F4e.forEach(t),_Ge=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var T4e=s(x$);bGe=r(T4e,"ConvBertConfig"),T4e.forEach(t),vGe=r(IC," (ConvBERT model)"),IC.forEach(t),FGe=i(L),Rf=n(L,"LI",{});var qC=s(Rf);uee=n(qC,"STRONG",{});var M4e=s(uee);TGe=r(M4e,"convnext"),M4e.forEach(t),MGe=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var E4e=s($$);EGe=r(E4e,"ConvNextConfig"),E4e.forEach(t),CGe=r(qC," (ConvNext model)"),qC.forEach(t),wGe=i(L),Bf=n(L,"LI",{});var NC=s(Bf);_ee=n(NC,"STRONG",{});var C4e=s(_ee);AGe=r(C4e,"ctrl"),C4e.forEach(t),yGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var w4e=s(k$);LGe=r(w4e,"CTRLConfig"),w4e.forEach(t),xGe=r(NC," (CTRL model)"),NC.forEach(t),$Ge=i(L),Pf=n(L,"LI",{});var jC=s(Pf);bee=n(jC,"STRONG",{});var A4e=s(bee);kGe=r(A4e,"data2vec-audio"),A4e.forEach(t),SGe=r(jC," \u2014 "),S$=n(jC,"A",{href:!0});var y4e=s(S$);RGe=r(y4e,"Data2VecAudioConfig"),y4e.forEach(t),BGe=r(jC," (Data2VecAudio model)"),jC.forEach(t),PGe=i(L),If=n(L,"LI",{});var DC=s(If);vee=n(DC,"STRONG",{});var L4e=s(vee);IGe=r(L4e,"data2vec-text"),L4e.forEach(t),qGe=r(DC," \u2014 "),R$=n(DC,"A",{href:!0});var x4e=s(R$);NGe=r(x4e,"Data2VecTextConfig"),x4e.forEach(t),jGe=r(DC," (Data2VecText model)"),DC.forEach(t),DGe=i(L),qf=n(L,"LI",{});var GC=s(qf);Fee=n(GC,"STRONG",{});var $4e=s(Fee);GGe=r($4e,"data2vec-vision"),$4e.forEach(t),OGe=r(GC," \u2014 "),B$=n(GC,"A",{href:!0});var k4e=s(B$);VGe=r(k4e,"Data2VecVisionConfig"),k4e.forEach(t),XGe=r(GC," (Data2VecVision model)"),GC.forEach(t),zGe=i(L),Nf=n(L,"LI",{});var OC=s(Nf);Tee=n(OC,"STRONG",{});var S4e=s(Tee);QGe=r(S4e,"deberta"),S4e.forEach(t),WGe=r(OC," \u2014 "),P$=n(OC,"A",{href:!0});var R4e=s(P$);HGe=r(R4e,"DebertaConfig"),R4e.forEach(t),UGe=r(OC," (DeBERTa model)"),OC.forEach(t),JGe=i(L),jf=n(L,"LI",{});var VC=s(jf);Mee=n(VC,"STRONG",{});var B4e=s(Mee);YGe=r(B4e,"deberta-v2"),B4e.forEach(t),KGe=r(VC," \u2014 "),I$=n(VC,"A",{href:!0});var P4e=s(I$);ZGe=r(P4e,"DebertaV2Config"),P4e.forEach(t),eOe=r(VC," (DeBERTa-v2 model)"),VC.forEach(t),oOe=i(L),Df=n(L,"LI",{});var XC=s(Df);Eee=n(XC,"STRONG",{});var I4e=s(Eee);rOe=r(I4e,"decision_transformer"),I4e.forEach(t),tOe=r(XC," \u2014 "),q$=n(XC,"A",{href:!0});var q4e=s(q$);aOe=r(q4e,"DecisionTransformerConfig"),q4e.forEach(t),nOe=r(XC," (Decision Transformer model)"),XC.forEach(t),sOe=i(L),Gf=n(L,"LI",{});var zC=s(Gf);Cee=n(zC,"STRONG",{});var N4e=s(Cee);lOe=r(N4e,"deit"),N4e.forEach(t),iOe=r(zC," \u2014 "),N$=n(zC,"A",{href:!0});var j4e=s(N$);dOe=r(j4e,"DeiTConfig"),j4e.forEach(t),cOe=r(zC," (DeiT model)"),zC.forEach(t),fOe=i(L),Of=n(L,"LI",{});var QC=s(Of);wee=n(QC,"STRONG",{});var D4e=s(wee);mOe=r(D4e,"detr"),D4e.forEach(t),gOe=r(QC," \u2014 "),j$=n(QC,"A",{href:!0});var Uqr=s(j$);hOe=r(Uqr,"DetrConfig"),Uqr.forEach(t),pOe=r(QC," (DETR model)"),QC.forEach(t),uOe=i(L),Vf=n(L,"LI",{});var G4e=s(Vf);Aee=n(G4e,"STRONG",{});var Jqr=s(Aee);_Oe=r(Jqr,"distilbert"),Jqr.forEach(t),bOe=r(G4e," \u2014 "),D$=n(G4e,"A",{href:!0});var Yqr=s(D$);vOe=r(Yqr,"DistilBertConfig"),Yqr.forEach(t),FOe=r(G4e," (DistilBERT model)"),G4e.forEach(t),TOe=i(L),Xf=n(L,"LI",{});var O4e=s(Xf);yee=n(O4e,"STRONG",{});var Kqr=s(yee);MOe=r(Kqr,"dpr"),Kqr.forEach(t),EOe=r(O4e," \u2014 "),G$=n(O4e,"A",{href:!0});var Zqr=s(G$);COe=r(Zqr,"DPRConfig"),Zqr.forEach(t),wOe=r(O4e," (DPR model)"),O4e.forEach(t),AOe=i(L),zf=n(L,"LI",{});var V4e=s(zf);Lee=n(V4e,"STRONG",{});var eNr=s(Lee);yOe=r(eNr,"dpt"),eNr.forEach(t),LOe=r(V4e," \u2014 "),O$=n(V4e,"A",{href:!0});var oNr=s(O$);xOe=r(oNr,"DPTConfig"),oNr.forEach(t),$Oe=r(V4e," (DPT model)"),V4e.forEach(t),kOe=i(L),Qf=n(L,"LI",{});var X4e=s(Qf);xee=n(X4e,"STRONG",{});var rNr=s(xee);SOe=r(rNr,"electra"),rNr.forEach(t),ROe=r(X4e," \u2014 "),V$=n(X4e,"A",{href:!0});var tNr=s(V$);BOe=r(tNr,"ElectraConfig"),tNr.forEach(t),POe=r(X4e," (ELECTRA model)"),X4e.forEach(t),IOe=i(L),Wf=n(L,"LI",{});var z4e=s(Wf);$ee=n(z4e,"STRONG",{});var aNr=s($ee);qOe=r(aNr,"encoder-decoder"),aNr.forEach(t),NOe=r(z4e," \u2014 "),X$=n(z4e,"A",{href:!0});var nNr=s(X$);jOe=r(nNr,"EncoderDecoderConfig"),nNr.forEach(t),DOe=r(z4e," (Encoder decoder model)"),z4e.forEach(t),GOe=i(L),Hf=n(L,"LI",{});var Q4e=s(Hf);kee=n(Q4e,"STRONG",{});var sNr=s(kee);OOe=r(sNr,"flaubert"),sNr.forEach(t),VOe=r(Q4e," \u2014 "),z$=n(Q4e,"A",{href:!0});var lNr=s(z$);XOe=r(lNr,"FlaubertConfig"),lNr.forEach(t),zOe=r(Q4e," (FlauBERT model)"),Q4e.forEach(t),QOe=i(L),Uf=n(L,"LI",{});var W4e=s(Uf);See=n(W4e,"STRONG",{});var iNr=s(See);WOe=r(iNr,"fnet"),iNr.forEach(t),HOe=r(W4e," \u2014 "),Q$=n(W4e,"A",{href:!0});var dNr=s(Q$);UOe=r(dNr,"FNetConfig"),dNr.forEach(t),JOe=r(W4e," (FNet model)"),W4e.forEach(t),YOe=i(L),Jf=n(L,"LI",{});var H4e=s(Jf);Ree=n(H4e,"STRONG",{});var cNr=s(Ree);KOe=r(cNr,"fsmt"),cNr.forEach(t),ZOe=r(H4e," \u2014 "),W$=n(H4e,"A",{href:!0});var fNr=s(W$);eVe=r(fNr,"FSMTConfig"),fNr.forEach(t),oVe=r(H4e," (FairSeq Machine-Translation model)"),H4e.forEach(t),rVe=i(L),Yf=n(L,"LI",{});var U4e=s(Yf);Bee=n(U4e,"STRONG",{});var mNr=s(Bee);tVe=r(mNr,"funnel"),mNr.forEach(t),aVe=r(U4e," \u2014 "),H$=n(U4e,"A",{href:!0});var gNr=s(H$);nVe=r(gNr,"FunnelConfig"),gNr.forEach(t),sVe=r(U4e," (Funnel Transformer model)"),U4e.forEach(t),lVe=i(L),Kf=n(L,"LI",{});var J4e=s(Kf);Pee=n(J4e,"STRONG",{});var hNr=s(Pee);iVe=r(hNr,"glpn"),hNr.forEach(t),dVe=r(J4e," \u2014 "),U$=n(J4e,"A",{href:!0});var pNr=s(U$);cVe=r(pNr,"GLPNConfig"),pNr.forEach(t),fVe=r(J4e," (GLPN model)"),J4e.forEach(t),mVe=i(L),Zf=n(L,"LI",{});var Y4e=s(Zf);Iee=n(Y4e,"STRONG",{});var uNr=s(Iee);gVe=r(uNr,"gpt2"),uNr.forEach(t),hVe=r(Y4e," \u2014 "),J$=n(Y4e,"A",{href:!0});var _Nr=s(J$);pVe=r(_Nr,"GPT2Config"),_Nr.forEach(t),uVe=r(Y4e," (OpenAI GPT-2 model)"),Y4e.forEach(t),_Ve=i(L),em=n(L,"LI",{});var K4e=s(em);qee=n(K4e,"STRONG",{});var bNr=s(qee);bVe=r(bNr,"gpt_neo"),bNr.forEach(t),vVe=r(K4e," \u2014 "),Y$=n(K4e,"A",{href:!0});var vNr=s(Y$);FVe=r(vNr,"GPTNeoConfig"),vNr.forEach(t),TVe=r(K4e," (GPT Neo model)"),K4e.forEach(t),MVe=i(L),om=n(L,"LI",{});var Z4e=s(om);Nee=n(Z4e,"STRONG",{});var FNr=s(Nee);EVe=r(FNr,"gptj"),FNr.forEach(t),CVe=r(Z4e," \u2014 "),K$=n(Z4e,"A",{href:!0});var TNr=s(K$);wVe=r(TNr,"GPTJConfig"),TNr.forEach(t),AVe=r(Z4e," (GPT-J model)"),Z4e.forEach(t),yVe=i(L),rm=n(L,"LI",{});var eEe=s(rm);jee=n(eEe,"STRONG",{});var MNr=s(jee);LVe=r(MNr,"hubert"),MNr.forEach(t),xVe=r(eEe," \u2014 "),Z$=n(eEe,"A",{href:!0});var ENr=s(Z$);$Ve=r(ENr,"HubertConfig"),ENr.forEach(t),kVe=r(eEe," (Hubert model)"),eEe.forEach(t),SVe=i(L),tm=n(L,"LI",{});var oEe=s(tm);Dee=n(oEe,"STRONG",{});var CNr=s(Dee);RVe=r(CNr,"ibert"),CNr.forEach(t),BVe=r(oEe," \u2014 "),ek=n(oEe,"A",{href:!0});var wNr=s(ek);PVe=r(wNr,"IBertConfig"),wNr.forEach(t),IVe=r(oEe," (I-BERT model)"),oEe.forEach(t),qVe=i(L),am=n(L,"LI",{});var rEe=s(am);Gee=n(rEe,"STRONG",{});var ANr=s(Gee);NVe=r(ANr,"imagegpt"),ANr.forEach(t),jVe=r(rEe," \u2014 "),ok=n(rEe,"A",{href:!0});var yNr=s(ok);DVe=r(yNr,"ImageGPTConfig"),yNr.forEach(t),GVe=r(rEe," (ImageGPT model)"),rEe.forEach(t),OVe=i(L),nm=n(L,"LI",{});var tEe=s(nm);Oee=n(tEe,"STRONG",{});var LNr=s(Oee);VVe=r(LNr,"layoutlm"),LNr.forEach(t),XVe=r(tEe," \u2014 "),rk=n(tEe,"A",{href:!0});var xNr=s(rk);zVe=r(xNr,"LayoutLMConfig"),xNr.forEach(t),QVe=r(tEe," (LayoutLM model)"),tEe.forEach(t),WVe=i(L),sm=n(L,"LI",{});var aEe=s(sm);Vee=n(aEe,"STRONG",{});var $Nr=s(Vee);HVe=r($Nr,"layoutlmv2"),$Nr.forEach(t),UVe=r(aEe," \u2014 "),tk=n(aEe,"A",{href:!0});var kNr=s(tk);JVe=r(kNr,"LayoutLMv2Config"),kNr.forEach(t),YVe=r(aEe," (LayoutLMv2 model)"),aEe.forEach(t),KVe=i(L),lm=n(L,"LI",{});var nEe=s(lm);Xee=n(nEe,"STRONG",{});var SNr=s(Xee);ZVe=r(SNr,"led"),SNr.forEach(t),eXe=r(nEe," \u2014 "),ak=n(nEe,"A",{href:!0});var RNr=s(ak);oXe=r(RNr,"LEDConfig"),RNr.forEach(t),rXe=r(nEe," (LED model)"),nEe.forEach(t),tXe=i(L),im=n(L,"LI",{});var sEe=s(im);zee=n(sEe,"STRONG",{});var BNr=s(zee);aXe=r(BNr,"longformer"),BNr.forEach(t),nXe=r(sEe," \u2014 "),nk=n(sEe,"A",{href:!0});var PNr=s(nk);sXe=r(PNr,"LongformerConfig"),PNr.forEach(t),lXe=r(sEe," (Longformer model)"),sEe.forEach(t),iXe=i(L),dm=n(L,"LI",{});var lEe=s(dm);Qee=n(lEe,"STRONG",{});var INr=s(Qee);dXe=r(INr,"luke"),INr.forEach(t),cXe=r(lEe," \u2014 "),sk=n(lEe,"A",{href:!0});var qNr=s(sk);fXe=r(qNr,"LukeConfig"),qNr.forEach(t),mXe=r(lEe," (LUKE model)"),lEe.forEach(t),gXe=i(L),cm=n(L,"LI",{});var iEe=s(cm);Wee=n(iEe,"STRONG",{});var NNr=s(Wee);hXe=r(NNr,"lxmert"),NNr.forEach(t),pXe=r(iEe," \u2014 "),lk=n(iEe,"A",{href:!0});var jNr=s(lk);uXe=r(jNr,"LxmertConfig"),jNr.forEach(t),_Xe=r(iEe," (LXMERT model)"),iEe.forEach(t),bXe=i(L),fm=n(L,"LI",{});var dEe=s(fm);Hee=n(dEe,"STRONG",{});var DNr=s(Hee);vXe=r(DNr,"m2m_100"),DNr.forEach(t),FXe=r(dEe," \u2014 "),ik=n(dEe,"A",{href:!0});var GNr=s(ik);TXe=r(GNr,"M2M100Config"),GNr.forEach(t),MXe=r(dEe," (M2M100 model)"),dEe.forEach(t),EXe=i(L),mm=n(L,"LI",{});var cEe=s(mm);Uee=n(cEe,"STRONG",{});var ONr=s(Uee);CXe=r(ONr,"marian"),ONr.forEach(t),wXe=r(cEe," \u2014 "),dk=n(cEe,"A",{href:!0});var VNr=s(dk);AXe=r(VNr,"MarianConfig"),VNr.forEach(t),yXe=r(cEe," (Marian model)"),cEe.forEach(t),LXe=i(L),gm=n(L,"LI",{});var fEe=s(gm);Jee=n(fEe,"STRONG",{});var XNr=s(Jee);xXe=r(XNr,"maskformer"),XNr.forEach(t),$Xe=r(fEe," \u2014 "),ck=n(fEe,"A",{href:!0});var zNr=s(ck);kXe=r(zNr,"MaskFormerConfig"),zNr.forEach(t),SXe=r(fEe," (MaskFormer model)"),fEe.forEach(t),RXe=i(L),hm=n(L,"LI",{});var mEe=s(hm);Yee=n(mEe,"STRONG",{});var QNr=s(Yee);BXe=r(QNr,"mbart"),QNr.forEach(t),PXe=r(mEe," \u2014 "),fk=n(mEe,"A",{href:!0});var WNr=s(fk);IXe=r(WNr,"MBartConfig"),WNr.forEach(t),qXe=r(mEe," (mBART model)"),mEe.forEach(t),NXe=i(L),pm=n(L,"LI",{});var gEe=s(pm);Kee=n(gEe,"STRONG",{});var HNr=s(Kee);jXe=r(HNr,"megatron-bert"),HNr.forEach(t),DXe=r(gEe," \u2014 "),mk=n(gEe,"A",{href:!0});var UNr=s(mk);GXe=r(UNr,"MegatronBertConfig"),UNr.forEach(t),OXe=r(gEe," (MegatronBert model)"),gEe.forEach(t),VXe=i(L),um=n(L,"LI",{});var hEe=s(um);Zee=n(hEe,"STRONG",{});var JNr=s(Zee);XXe=r(JNr,"mobilebert"),JNr.forEach(t),zXe=r(hEe," \u2014 "),gk=n(hEe,"A",{href:!0});var YNr=s(gk);QXe=r(YNr,"MobileBertConfig"),YNr.forEach(t),WXe=r(hEe," (MobileBERT model)"),hEe.forEach(t),HXe=i(L),_m=n(L,"LI",{});var pEe=s(_m);eoe=n(pEe,"STRONG",{});var KNr=s(eoe);UXe=r(KNr,"mpnet"),KNr.forEach(t),JXe=r(pEe," \u2014 "),hk=n(pEe,"A",{href:!0});var ZNr=s(hk);YXe=r(ZNr,"MPNetConfig"),ZNr.forEach(t),KXe=r(pEe," (MPNet model)"),pEe.forEach(t),ZXe=i(L),bm=n(L,"LI",{});var uEe=s(bm);ooe=n(uEe,"STRONG",{});var ejr=s(ooe);eze=r(ejr,"mt5"),ejr.forEach(t),oze=r(uEe," \u2014 "),pk=n(uEe,"A",{href:!0});var ojr=s(pk);rze=r(ojr,"MT5Config"),ojr.forEach(t),tze=r(uEe," (mT5 model)"),uEe.forEach(t),aze=i(L),vm=n(L,"LI",{});var _Ee=s(vm);roe=n(_Ee,"STRONG",{});var rjr=s(roe);nze=r(rjr,"nystromformer"),rjr.forEach(t),sze=r(_Ee," \u2014 "),uk=n(_Ee,"A",{href:!0});var tjr=s(uk);lze=r(tjr,"NystromformerConfig"),tjr.forEach(t),ize=r(_Ee," (Nystromformer model)"),_Ee.forEach(t),dze=i(L),Fm=n(L,"LI",{});var bEe=s(Fm);toe=n(bEe,"STRONG",{});var ajr=s(toe);cze=r(ajr,"openai-gpt"),ajr.forEach(t),fze=r(bEe," \u2014 "),_k=n(bEe,"A",{href:!0});var njr=s(_k);mze=r(njr,"OpenAIGPTConfig"),njr.forEach(t),gze=r(bEe," (OpenAI GPT model)"),bEe.forEach(t),hze=i(L),Tm=n(L,"LI",{});var vEe=s(Tm);aoe=n(vEe,"STRONG",{});var sjr=s(aoe);pze=r(sjr,"opt"),sjr.forEach(t),uze=r(vEe," \u2014 "),bk=n(vEe,"A",{href:!0});var ljr=s(bk);_ze=r(ljr,"OPTConfig"),ljr.forEach(t),bze=r(vEe," (OPT model)"),vEe.forEach(t),vze=i(L),Mm=n(L,"LI",{});var FEe=s(Mm);noe=n(FEe,"STRONG",{});var ijr=s(noe);Fze=r(ijr,"pegasus"),ijr.forEach(t),Tze=r(FEe," \u2014 "),vk=n(FEe,"A",{href:!0});var djr=s(vk);Mze=r(djr,"PegasusConfig"),djr.forEach(t),Eze=r(FEe," (Pegasus model)"),FEe.forEach(t),Cze=i(L),Em=n(L,"LI",{});var TEe=s(Em);soe=n(TEe,"STRONG",{});var cjr=s(soe);wze=r(cjr,"perceiver"),cjr.forEach(t),Aze=r(TEe," \u2014 "),Fk=n(TEe,"A",{href:!0});var fjr=s(Fk);yze=r(fjr,"PerceiverConfig"),fjr.forEach(t),Lze=r(TEe," (Perceiver model)"),TEe.forEach(t),xze=i(L),Cm=n(L,"LI",{});var MEe=s(Cm);loe=n(MEe,"STRONG",{});var mjr=s(loe);$ze=r(mjr,"plbart"),mjr.forEach(t),kze=r(MEe," \u2014 "),Tk=n(MEe,"A",{href:!0});var gjr=s(Tk);Sze=r(gjr,"PLBartConfig"),gjr.forEach(t),Rze=r(MEe," (PLBart model)"),MEe.forEach(t),Bze=i(L),wm=n(L,"LI",{});var EEe=s(wm);ioe=n(EEe,"STRONG",{});var hjr=s(ioe);Pze=r(hjr,"poolformer"),hjr.forEach(t),Ize=r(EEe," \u2014 "),Mk=n(EEe,"A",{href:!0});var pjr=s(Mk);qze=r(pjr,"PoolFormerConfig"),pjr.forEach(t),Nze=r(EEe," (PoolFormer model)"),EEe.forEach(t),jze=i(L),Am=n(L,"LI",{});var CEe=s(Am);doe=n(CEe,"STRONG",{});var ujr=s(doe);Dze=r(ujr,"prophetnet"),ujr.forEach(t),Gze=r(CEe," \u2014 "),Ek=n(CEe,"A",{href:!0});var _jr=s(Ek);Oze=r(_jr,"ProphetNetConfig"),_jr.forEach(t),Vze=r(CEe," (ProphetNet model)"),CEe.forEach(t),Xze=i(L),ym=n(L,"LI",{});var wEe=s(ym);coe=n(wEe,"STRONG",{});var bjr=s(coe);zze=r(bjr,"qdqbert"),bjr.forEach(t),Qze=r(wEe," \u2014 "),Ck=n(wEe,"A",{href:!0});var vjr=s(Ck);Wze=r(vjr,"QDQBertConfig"),vjr.forEach(t),Hze=r(wEe," (QDQBert model)"),wEe.forEach(t),Uze=i(L),Lm=n(L,"LI",{});var AEe=s(Lm);foe=n(AEe,"STRONG",{});var Fjr=s(foe);Jze=r(Fjr,"rag"),Fjr.forEach(t),Yze=r(AEe," \u2014 "),wk=n(AEe,"A",{href:!0});var Tjr=s(wk);Kze=r(Tjr,"RagConfig"),Tjr.forEach(t),Zze=r(AEe," (RAG model)"),AEe.forEach(t),eQe=i(L),xm=n(L,"LI",{});var yEe=s(xm);moe=n(yEe,"STRONG",{});var Mjr=s(moe);oQe=r(Mjr,"realm"),Mjr.forEach(t),rQe=r(yEe," \u2014 "),Ak=n(yEe,"A",{href:!0});var Ejr=s(Ak);tQe=r(Ejr,"RealmConfig"),Ejr.forEach(t),aQe=r(yEe," (Realm model)"),yEe.forEach(t),nQe=i(L),$m=n(L,"LI",{});var LEe=s($m);goe=n(LEe,"STRONG",{});var Cjr=s(goe);sQe=r(Cjr,"reformer"),Cjr.forEach(t),lQe=r(LEe," \u2014 "),yk=n(LEe,"A",{href:!0});var wjr=s(yk);iQe=r(wjr,"ReformerConfig"),wjr.forEach(t),dQe=r(LEe," (Reformer model)"),LEe.forEach(t),cQe=i(L),km=n(L,"LI",{});var xEe=s(km);hoe=n(xEe,"STRONG",{});var Ajr=s(hoe);fQe=r(Ajr,"regnet"),Ajr.forEach(t),mQe=r(xEe," \u2014 "),Lk=n(xEe,"A",{href:!0});var yjr=s(Lk);gQe=r(yjr,"RegNetConfig"),yjr.forEach(t),hQe=r(xEe," (RegNet model)"),xEe.forEach(t),pQe=i(L),Sm=n(L,"LI",{});var $Ee=s(Sm);poe=n($Ee,"STRONG",{});var Ljr=s(poe);uQe=r(Ljr,"rembert"),Ljr.forEach(t),_Qe=r($Ee," \u2014 "),xk=n($Ee,"A",{href:!0});var xjr=s(xk);bQe=r(xjr,"RemBertConfig"),xjr.forEach(t),vQe=r($Ee," (RemBERT model)"),$Ee.forEach(t),FQe=i(L),Rm=n(L,"LI",{});var kEe=s(Rm);uoe=n(kEe,"STRONG",{});var $jr=s(uoe);TQe=r($jr,"resnet"),$jr.forEach(t),MQe=r(kEe," \u2014 "),$k=n(kEe,"A",{href:!0});var kjr=s($k);EQe=r(kjr,"ResNetConfig"),kjr.forEach(t),CQe=r(kEe," (ResNet model)"),kEe.forEach(t),wQe=i(L),Bm=n(L,"LI",{});var SEe=s(Bm);_oe=n(SEe,"STRONG",{});var Sjr=s(_oe);AQe=r(Sjr,"retribert"),Sjr.forEach(t),yQe=r(SEe," \u2014 "),kk=n(SEe,"A",{href:!0});var Rjr=s(kk);LQe=r(Rjr,"RetriBertConfig"),Rjr.forEach(t),xQe=r(SEe," (RetriBERT model)"),SEe.forEach(t),$Qe=i(L),Pm=n(L,"LI",{});var REe=s(Pm);boe=n(REe,"STRONG",{});var Bjr=s(boe);kQe=r(Bjr,"roberta"),Bjr.forEach(t),SQe=r(REe," \u2014 "),Sk=n(REe,"A",{href:!0});var Pjr=s(Sk);RQe=r(Pjr,"RobertaConfig"),Pjr.forEach(t),BQe=r(REe," (RoBERTa model)"),REe.forEach(t),PQe=i(L),Im=n(L,"LI",{});var BEe=s(Im);voe=n(BEe,"STRONG",{});var Ijr=s(voe);IQe=r(Ijr,"roformer"),Ijr.forEach(t),qQe=r(BEe," \u2014 "),Rk=n(BEe,"A",{href:!0});var qjr=s(Rk);NQe=r(qjr,"RoFormerConfig"),qjr.forEach(t),jQe=r(BEe," (RoFormer model)"),BEe.forEach(t),DQe=i(L),qm=n(L,"LI",{});var PEe=s(qm);Foe=n(PEe,"STRONG",{});var Njr=s(Foe);GQe=r(Njr,"segformer"),Njr.forEach(t),OQe=r(PEe," \u2014 "),Bk=n(PEe,"A",{href:!0});var jjr=s(Bk);VQe=r(jjr,"SegformerConfig"),jjr.forEach(t),XQe=r(PEe," (SegFormer model)"),PEe.forEach(t),zQe=i(L),Nm=n(L,"LI",{});var IEe=s(Nm);Toe=n(IEe,"STRONG",{});var Djr=s(Toe);QQe=r(Djr,"sew"),Djr.forEach(t),WQe=r(IEe," \u2014 "),Pk=n(IEe,"A",{href:!0});var Gjr=s(Pk);HQe=r(Gjr,"SEWConfig"),Gjr.forEach(t),UQe=r(IEe," (SEW model)"),IEe.forEach(t),JQe=i(L),jm=n(L,"LI",{});var qEe=s(jm);Moe=n(qEe,"STRONG",{});var Ojr=s(Moe);YQe=r(Ojr,"sew-d"),Ojr.forEach(t),KQe=r(qEe," \u2014 "),Ik=n(qEe,"A",{href:!0});var Vjr=s(Ik);ZQe=r(Vjr,"SEWDConfig"),Vjr.forEach(t),eWe=r(qEe," (SEW-D model)"),qEe.forEach(t),oWe=i(L),Dm=n(L,"LI",{});var NEe=s(Dm);Eoe=n(NEe,"STRONG",{});var Xjr=s(Eoe);rWe=r(Xjr,"speech-encoder-decoder"),Xjr.forEach(t),tWe=r(NEe," \u2014 "),qk=n(NEe,"A",{href:!0});var zjr=s(qk);aWe=r(zjr,"SpeechEncoderDecoderConfig"),zjr.forEach(t),nWe=r(NEe," (Speech Encoder decoder model)"),NEe.forEach(t),sWe=i(L),Gm=n(L,"LI",{});var jEe=s(Gm);Coe=n(jEe,"STRONG",{});var Qjr=s(Coe);lWe=r(Qjr,"speech_to_text"),Qjr.forEach(t),iWe=r(jEe," \u2014 "),Nk=n(jEe,"A",{href:!0});var Wjr=s(Nk);dWe=r(Wjr,"Speech2TextConfig"),Wjr.forEach(t),cWe=r(jEe," (Speech2Text model)"),jEe.forEach(t),fWe=i(L),Om=n(L,"LI",{});var DEe=s(Om);woe=n(DEe,"STRONG",{});var Hjr=s(woe);mWe=r(Hjr,"speech_to_text_2"),Hjr.forEach(t),gWe=r(DEe," \u2014 "),jk=n(DEe,"A",{href:!0});var Ujr=s(jk);hWe=r(Ujr,"Speech2Text2Config"),Ujr.forEach(t),pWe=r(DEe," (Speech2Text2 model)"),DEe.forEach(t),uWe=i(L),Vm=n(L,"LI",{});var GEe=s(Vm);Aoe=n(GEe,"STRONG",{});var Jjr=s(Aoe);_We=r(Jjr,"splinter"),Jjr.forEach(t),bWe=r(GEe," \u2014 "),Dk=n(GEe,"A",{href:!0});var Yjr=s(Dk);vWe=r(Yjr,"SplinterConfig"),Yjr.forEach(t),FWe=r(GEe," (Splinter model)"),GEe.forEach(t),TWe=i(L),Xm=n(L,"LI",{});var OEe=s(Xm);yoe=n(OEe,"STRONG",{});var Kjr=s(yoe);MWe=r(Kjr,"squeezebert"),Kjr.forEach(t),EWe=r(OEe," \u2014 "),Gk=n(OEe,"A",{href:!0});var Zjr=s(Gk);CWe=r(Zjr,"SqueezeBertConfig"),Zjr.forEach(t),wWe=r(OEe," (SqueezeBERT model)"),OEe.forEach(t),AWe=i(L),zm=n(L,"LI",{});var VEe=s(zm);Loe=n(VEe,"STRONG",{});var eDr=s(Loe);yWe=r(eDr,"swin"),eDr.forEach(t),LWe=r(VEe," \u2014 "),Ok=n(VEe,"A",{href:!0});var oDr=s(Ok);xWe=r(oDr,"SwinConfig"),oDr.forEach(t),$We=r(VEe," (Swin model)"),VEe.forEach(t),kWe=i(L),Qm=n(L,"LI",{});var XEe=s(Qm);xoe=n(XEe,"STRONG",{});var rDr=s(xoe);SWe=r(rDr,"t5"),rDr.forEach(t),RWe=r(XEe," \u2014 "),Vk=n(XEe,"A",{href:!0});var tDr=s(Vk);BWe=r(tDr,"T5Config"),tDr.forEach(t),PWe=r(XEe," (T5 model)"),XEe.forEach(t),IWe=i(L),Wm=n(L,"LI",{});var zEe=s(Wm);$oe=n(zEe,"STRONG",{});var aDr=s($oe);qWe=r(aDr,"tapas"),aDr.forEach(t),NWe=r(zEe," \u2014 "),Xk=n(zEe,"A",{href:!0});var nDr=s(Xk);jWe=r(nDr,"TapasConfig"),nDr.forEach(t),DWe=r(zEe," (TAPAS model)"),zEe.forEach(t),GWe=i(L),Hm=n(L,"LI",{});var QEe=s(Hm);koe=n(QEe,"STRONG",{});var sDr=s(koe);OWe=r(sDr,"tapex"),sDr.forEach(t),VWe=r(QEe," \u2014 "),zk=n(QEe,"A",{href:!0});var lDr=s(zk);XWe=r(lDr,"BartConfig"),lDr.forEach(t),zWe=r(QEe," (TAPEX model)"),QEe.forEach(t),QWe=i(L),Um=n(L,"LI",{});var WEe=s(Um);Soe=n(WEe,"STRONG",{});var iDr=s(Soe);WWe=r(iDr,"transfo-xl"),iDr.forEach(t),HWe=r(WEe," \u2014 "),Qk=n(WEe,"A",{href:!0});var dDr=s(Qk);UWe=r(dDr,"TransfoXLConfig"),dDr.forEach(t),JWe=r(WEe," (Transformer-XL model)"),WEe.forEach(t),YWe=i(L),Jm=n(L,"LI",{});var HEe=s(Jm);Roe=n(HEe,"STRONG",{});var cDr=s(Roe);KWe=r(cDr,"trocr"),cDr.forEach(t),ZWe=r(HEe," \u2014 "),Wk=n(HEe,"A",{href:!0});var fDr=s(Wk);eHe=r(fDr,"TrOCRConfig"),fDr.forEach(t),oHe=r(HEe," (TrOCR model)"),HEe.forEach(t),rHe=i(L),Ym=n(L,"LI",{});var UEe=s(Ym);Boe=n(UEe,"STRONG",{});var mDr=s(Boe);tHe=r(mDr,"unispeech"),mDr.forEach(t),aHe=r(UEe," \u2014 "),Hk=n(UEe,"A",{href:!0});var gDr=s(Hk);nHe=r(gDr,"UniSpeechConfig"),gDr.forEach(t),sHe=r(UEe," (UniSpeech model)"),UEe.forEach(t),lHe=i(L),Km=n(L,"LI",{});var JEe=s(Km);Poe=n(JEe,"STRONG",{});var hDr=s(Poe);iHe=r(hDr,"unispeech-sat"),hDr.forEach(t),dHe=r(JEe," \u2014 "),Uk=n(JEe,"A",{href:!0});var pDr=s(Uk);cHe=r(pDr,"UniSpeechSatConfig"),pDr.forEach(t),fHe=r(JEe," (UniSpeechSat model)"),JEe.forEach(t),mHe=i(L),Zm=n(L,"LI",{});var YEe=s(Zm);Ioe=n(YEe,"STRONG",{});var uDr=s(Ioe);gHe=r(uDr,"van"),uDr.forEach(t),hHe=r(YEe," \u2014 "),Jk=n(YEe,"A",{href:!0});var _Dr=s(Jk);pHe=r(_Dr,"VanConfig"),_Dr.forEach(t),uHe=r(YEe," (VAN model)"),YEe.forEach(t),_He=i(L),eg=n(L,"LI",{});var KEe=s(eg);qoe=n(KEe,"STRONG",{});var bDr=s(qoe);bHe=r(bDr,"vilt"),bDr.forEach(t),vHe=r(KEe," \u2014 "),Yk=n(KEe,"A",{href:!0});var vDr=s(Yk);FHe=r(vDr,"ViltConfig"),vDr.forEach(t),THe=r(KEe," (ViLT model)"),KEe.forEach(t),MHe=i(L),og=n(L,"LI",{});var ZEe=s(og);Noe=n(ZEe,"STRONG",{});var FDr=s(Noe);EHe=r(FDr,"vision-encoder-decoder"),FDr.forEach(t),CHe=r(ZEe," \u2014 "),Kk=n(ZEe,"A",{href:!0});var TDr=s(Kk);wHe=r(TDr,"VisionEncoderDecoderConfig"),TDr.forEach(t),AHe=r(ZEe," (Vision Encoder decoder model)"),ZEe.forEach(t),yHe=i(L),rg=n(L,"LI",{});var e5e=s(rg);joe=n(e5e,"STRONG",{});var MDr=s(joe);LHe=r(MDr,"vision-text-dual-encoder"),MDr.forEach(t),xHe=r(e5e," \u2014 "),Zk=n(e5e,"A",{href:!0});var EDr=s(Zk);$He=r(EDr,"VisionTextDualEncoderConfig"),EDr.forEach(t),kHe=r(e5e," (VisionTextDualEncoder model)"),e5e.forEach(t),SHe=i(L),tg=n(L,"LI",{});var o5e=s(tg);Doe=n(o5e,"STRONG",{});var CDr=s(Doe);RHe=r(CDr,"visual_bert"),CDr.forEach(t),BHe=r(o5e," \u2014 "),eS=n(o5e,"A",{href:!0});var wDr=s(eS);PHe=r(wDr,"VisualBertConfig"),wDr.forEach(t),IHe=r(o5e," (VisualBert model)"),o5e.forEach(t),qHe=i(L),ag=n(L,"LI",{});var r5e=s(ag);Goe=n(r5e,"STRONG",{});var ADr=s(Goe);NHe=r(ADr,"vit"),ADr.forEach(t),jHe=r(r5e," \u2014 "),oS=n(r5e,"A",{href:!0});var yDr=s(oS);DHe=r(yDr,"ViTConfig"),yDr.forEach(t),GHe=r(r5e," (ViT model)"),r5e.forEach(t),OHe=i(L),ng=n(L,"LI",{});var t5e=s(ng);Ooe=n(t5e,"STRONG",{});var LDr=s(Ooe);VHe=r(LDr,"vit_mae"),LDr.forEach(t),XHe=r(t5e," \u2014 "),rS=n(t5e,"A",{href:!0});var xDr=s(rS);zHe=r(xDr,"ViTMAEConfig"),xDr.forEach(t),QHe=r(t5e," (ViTMAE model)"),t5e.forEach(t),WHe=i(L),sg=n(L,"LI",{});var a5e=s(sg);Voe=n(a5e,"STRONG",{});var $Dr=s(Voe);HHe=r($Dr,"wav2vec2"),$Dr.forEach(t),UHe=r(a5e," \u2014 "),tS=n(a5e,"A",{href:!0});var kDr=s(tS);JHe=r(kDr,"Wav2Vec2Config"),kDr.forEach(t),YHe=r(a5e," (Wav2Vec2 model)"),a5e.forEach(t),KHe=i(L),lg=n(L,"LI",{});var n5e=s(lg);Xoe=n(n5e,"STRONG",{});var SDr=s(Xoe);ZHe=r(SDr,"wavlm"),SDr.forEach(t),eUe=r(n5e," \u2014 "),aS=n(n5e,"A",{href:!0});var RDr=s(aS);oUe=r(RDr,"WavLMConfig"),RDr.forEach(t),rUe=r(n5e," (WavLM model)"),n5e.forEach(t),tUe=i(L),ig=n(L,"LI",{});var s5e=s(ig);zoe=n(s5e,"STRONG",{});var BDr=s(zoe);aUe=r(BDr,"xglm"),BDr.forEach(t),nUe=r(s5e," \u2014 "),nS=n(s5e,"A",{href:!0});var PDr=s(nS);sUe=r(PDr,"XGLMConfig"),PDr.forEach(t),lUe=r(s5e," (XGLM model)"),s5e.forEach(t),iUe=i(L),dg=n(L,"LI",{});var l5e=s(dg);Qoe=n(l5e,"STRONG",{});var IDr=s(Qoe);dUe=r(IDr,"xlm"),IDr.forEach(t),cUe=r(l5e," \u2014 "),sS=n(l5e,"A",{href:!0});var qDr=s(sS);fUe=r(qDr,"XLMConfig"),qDr.forEach(t),mUe=r(l5e," (XLM model)"),l5e.forEach(t),gUe=i(L),cg=n(L,"LI",{});var i5e=s(cg);Woe=n(i5e,"STRONG",{});var NDr=s(Woe);hUe=r(NDr,"xlm-prophetnet"),NDr.forEach(t),pUe=r(i5e," \u2014 "),lS=n(i5e,"A",{href:!0});var jDr=s(lS);uUe=r(jDr,"XLMProphetNetConfig"),jDr.forEach(t),_Ue=r(i5e," (XLMProphetNet model)"),i5e.forEach(t),bUe=i(L),fg=n(L,"LI",{});var d5e=s(fg);Hoe=n(d5e,"STRONG",{});var DDr=s(Hoe);vUe=r(DDr,"xlm-roberta"),DDr.forEach(t),FUe=r(d5e," \u2014 "),iS=n(d5e,"A",{href:!0});var GDr=s(iS);TUe=r(GDr,"XLMRobertaConfig"),GDr.forEach(t),MUe=r(d5e," (XLM-RoBERTa model)"),d5e.forEach(t),EUe=i(L),mg=n(L,"LI",{});var c5e=s(mg);Uoe=n(c5e,"STRONG",{});var ODr=s(Uoe);CUe=r(ODr,"xlm-roberta-xl"),ODr.forEach(t),wUe=r(c5e," \u2014 "),dS=n(c5e,"A",{href:!0});var VDr=s(dS);AUe=r(VDr,"XLMRobertaXLConfig"),VDr.forEach(t),yUe=r(c5e," (XLM-RoBERTa-XL model)"),c5e.forEach(t),LUe=i(L),gg=n(L,"LI",{});var f5e=s(gg);Joe=n(f5e,"STRONG",{});var XDr=s(Joe);xUe=r(XDr,"xlnet"),XDr.forEach(t),$Ue=r(f5e," \u2014 "),cS=n(f5e,"A",{href:!0});var zDr=s(cS);kUe=r(zDr,"XLNetConfig"),zDr.forEach(t),SUe=r(f5e," (XLNet model)"),f5e.forEach(t),RUe=i(L),hg=n(L,"LI",{});var m5e=s(hg);Yoe=n(m5e,"STRONG",{});var QDr=s(Yoe);BUe=r(QDr,"yolos"),QDr.forEach(t),PUe=r(m5e," \u2014 "),fS=n(m5e,"A",{href:!0});var WDr=s(fS);IUe=r(WDr,"YolosConfig"),WDr.forEach(t),qUe=r(m5e," (YOLOS model)"),m5e.forEach(t),NUe=i(L),pg=n(L,"LI",{});var g5e=s(pg);Koe=n(g5e,"STRONG",{});var HDr=s(Koe);jUe=r(HDr,"yoso"),HDr.forEach(t),DUe=r(g5e," \u2014 "),mS=n(g5e,"A",{href:!0});var UDr=s(mS);GUe=r(UDr,"YosoConfig"),UDr.forEach(t),OUe=r(g5e," (YOSO model)"),g5e.forEach(t),L.forEach(t),VUe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),XUe=i(Kr),_g=n(Kr,"DIV",{class:!0});var Lqe=s(_g);T(Zw.$$.fragment,Lqe),zUe=i(Lqe),Zoe=n(Lqe,"P",{});var JDr=s(Zoe);QUe=r(JDr,"Register a new configuration for this class."),JDr.forEach(t),Lqe.forEach(t),Kr.forEach(t),kPe=i(f),bi=n(f,"H2",{class:!0});var xqe=s(bi);bg=n(xqe,"A",{id:!0,class:!0,href:!0});var YDr=s(bg);ere=n(YDr,"SPAN",{});var KDr=s(ere);T(eA.$$.fragment,KDr),KDr.forEach(t),YDr.forEach(t),WUe=i(xqe),ore=n(xqe,"SPAN",{});var ZDr=s(ore);HUe=r(ZDr,"AutoTokenizer"),ZDr.forEach(t),xqe.forEach(t),SPe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(oA.$$.fragment,Is),UUe=i(Is),rA=n(Is,"P",{});var $qe=s(rA);JUe=r($qe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),gS=n($qe,"A",{href:!0});var eGr=s(gS);YUe=r(eGr,"AutoTokenizer.from_pretrained()"),eGr.forEach(t),KUe=r($qe," class method."),$qe.forEach(t),ZUe=i(Is),tA=n(Is,"P",{});var kqe=s(tA);eJe=r(kqe,"This class cannot be instantiated directly using "),rre=n(kqe,"CODE",{});var oGr=s(rre);oJe=r(oGr,"__init__()"),oGr.forEach(t),rJe=r(kqe," (throws an error)."),kqe.forEach(t),tJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(aA.$$.fragment,qs),aJe=i(qs),tre=n(qs,"P",{});var rGr=s(tre);nJe=r(rGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),rGr.forEach(t),sJe=i(qs),Ca=n(qs,"P",{});var WC=s(Ca);lJe=r(WC,"The tokenizer class to instantiate is selected based on the "),are=n(WC,"CODE",{});var tGr=s(are);iJe=r(tGr,"model_type"),tGr.forEach(t),dJe=r(WC,` property of the config object (either
passed as an argument or loaded from `),nre=n(WC,"CODE",{});var aGr=s(nre);cJe=r(aGr,"pretrained_model_name_or_path"),aGr.forEach(t),fJe=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sre=n(WC,"CODE",{});var nGr=s(sre);mJe=r(nGr,"pretrained_model_name_or_path"),nGr.forEach(t),gJe=r(WC,":"),WC.forEach(t),hJe=i(qs),k=n(qs,"UL",{});var S=s(k);kn=n(S,"LI",{});var n9=s(kn);lre=n(n9,"STRONG",{});var sGr=s(lre);pJe=r(sGr,"albert"),sGr.forEach(t),uJe=r(n9," \u2014 "),hS=n(n9,"A",{href:!0});var lGr=s(hS);_Je=r(lGr,"AlbertTokenizer"),lGr.forEach(t),bJe=r(n9," or "),pS=n(n9,"A",{href:!0});var iGr=s(pS);vJe=r(iGr,"AlbertTokenizerFast"),iGr.forEach(t),FJe=r(n9," (ALBERT model)"),n9.forEach(t),TJe=i(S),Sn=n(S,"LI",{});var s9=s(Sn);ire=n(s9,"STRONG",{});var dGr=s(ire);MJe=r(dGr,"bart"),dGr.forEach(t),EJe=r(s9," \u2014 "),uS=n(s9,"A",{href:!0});var cGr=s(uS);CJe=r(cGr,"BartTokenizer"),cGr.forEach(t),wJe=r(s9," or "),_S=n(s9,"A",{href:!0});var fGr=s(_S);AJe=r(fGr,"BartTokenizerFast"),fGr.forEach(t),yJe=r(s9," (BART model)"),s9.forEach(t),LJe=i(S),Rn=n(S,"LI",{});var l9=s(Rn);dre=n(l9,"STRONG",{});var mGr=s(dre);xJe=r(mGr,"barthez"),mGr.forEach(t),$Je=r(l9," \u2014 "),bS=n(l9,"A",{href:!0});var gGr=s(bS);kJe=r(gGr,"BarthezTokenizer"),gGr.forEach(t),SJe=r(l9," or "),vS=n(l9,"A",{href:!0});var hGr=s(vS);RJe=r(hGr,"BarthezTokenizerFast"),hGr.forEach(t),BJe=r(l9," (BARThez model)"),l9.forEach(t),PJe=i(S),vg=n(S,"LI",{});var h5e=s(vg);cre=n(h5e,"STRONG",{});var pGr=s(cre);IJe=r(pGr,"bartpho"),pGr.forEach(t),qJe=r(h5e," \u2014 "),FS=n(h5e,"A",{href:!0});var uGr=s(FS);NJe=r(uGr,"BartphoTokenizer"),uGr.forEach(t),jJe=r(h5e," (BARTpho model)"),h5e.forEach(t),DJe=i(S),Bn=n(S,"LI",{});var i9=s(Bn);fre=n(i9,"STRONG",{});var _Gr=s(fre);GJe=r(_Gr,"bert"),_Gr.forEach(t),OJe=r(i9," \u2014 "),TS=n(i9,"A",{href:!0});var bGr=s(TS);VJe=r(bGr,"BertTokenizer"),bGr.forEach(t),XJe=r(i9," or "),MS=n(i9,"A",{href:!0});var vGr=s(MS);zJe=r(vGr,"BertTokenizerFast"),vGr.forEach(t),QJe=r(i9," (BERT model)"),i9.forEach(t),WJe=i(S),Fg=n(S,"LI",{});var p5e=s(Fg);mre=n(p5e,"STRONG",{});var FGr=s(mre);HJe=r(FGr,"bert-generation"),FGr.forEach(t),UJe=r(p5e," \u2014 "),ES=n(p5e,"A",{href:!0});var TGr=s(ES);JJe=r(TGr,"BertGenerationTokenizer"),TGr.forEach(t),YJe=r(p5e," (Bert Generation model)"),p5e.forEach(t),KJe=i(S),Tg=n(S,"LI",{});var u5e=s(Tg);gre=n(u5e,"STRONG",{});var MGr=s(gre);ZJe=r(MGr,"bert-japanese"),MGr.forEach(t),eYe=r(u5e," \u2014 "),CS=n(u5e,"A",{href:!0});var EGr=s(CS);oYe=r(EGr,"BertJapaneseTokenizer"),EGr.forEach(t),rYe=r(u5e," (BertJapanese model)"),u5e.forEach(t),tYe=i(S),Mg=n(S,"LI",{});var _5e=s(Mg);hre=n(_5e,"STRONG",{});var CGr=s(hre);aYe=r(CGr,"bertweet"),CGr.forEach(t),nYe=r(_5e," \u2014 "),wS=n(_5e,"A",{href:!0});var wGr=s(wS);sYe=r(wGr,"BertweetTokenizer"),wGr.forEach(t),lYe=r(_5e," (Bertweet model)"),_5e.forEach(t),iYe=i(S),Pn=n(S,"LI",{});var d9=s(Pn);pre=n(d9,"STRONG",{});var AGr=s(pre);dYe=r(AGr,"big_bird"),AGr.forEach(t),cYe=r(d9," \u2014 "),AS=n(d9,"A",{href:!0});var yGr=s(AS);fYe=r(yGr,"BigBirdTokenizer"),yGr.forEach(t),mYe=r(d9," or "),yS=n(d9,"A",{href:!0});var LGr=s(yS);gYe=r(LGr,"BigBirdTokenizerFast"),LGr.forEach(t),hYe=r(d9," (BigBird model)"),d9.forEach(t),pYe=i(S),In=n(S,"LI",{});var c9=s(In);ure=n(c9,"STRONG",{});var xGr=s(ure);uYe=r(xGr,"bigbird_pegasus"),xGr.forEach(t),_Ye=r(c9," \u2014 "),LS=n(c9,"A",{href:!0});var $Gr=s(LS);bYe=r($Gr,"PegasusTokenizer"),$Gr.forEach(t),vYe=r(c9," or "),xS=n(c9,"A",{href:!0});var kGr=s(xS);FYe=r(kGr,"PegasusTokenizerFast"),kGr.forEach(t),TYe=r(c9," (BigBirdPegasus model)"),c9.forEach(t),MYe=i(S),qn=n(S,"LI",{});var f9=s(qn);_re=n(f9,"STRONG",{});var SGr=s(_re);EYe=r(SGr,"blenderbot"),SGr.forEach(t),CYe=r(f9," \u2014 "),$S=n(f9,"A",{href:!0});var RGr=s($S);wYe=r(RGr,"BlenderbotTokenizer"),RGr.forEach(t),AYe=r(f9," or "),kS=n(f9,"A",{href:!0});var BGr=s(kS);yYe=r(BGr,"BlenderbotTokenizerFast"),BGr.forEach(t),LYe=r(f9," (Blenderbot model)"),f9.forEach(t),xYe=i(S),Eg=n(S,"LI",{});var b5e=s(Eg);bre=n(b5e,"STRONG",{});var PGr=s(bre);$Ye=r(PGr,"blenderbot-small"),PGr.forEach(t),kYe=r(b5e," \u2014 "),SS=n(b5e,"A",{href:!0});var IGr=s(SS);SYe=r(IGr,"BlenderbotSmallTokenizer"),IGr.forEach(t),RYe=r(b5e," (BlenderbotSmall model)"),b5e.forEach(t),BYe=i(S),Cg=n(S,"LI",{});var v5e=s(Cg);vre=n(v5e,"STRONG",{});var qGr=s(vre);PYe=r(qGr,"byt5"),qGr.forEach(t),IYe=r(v5e," \u2014 "),RS=n(v5e,"A",{href:!0});var NGr=s(RS);qYe=r(NGr,"ByT5Tokenizer"),NGr.forEach(t),NYe=r(v5e," (ByT5 model)"),v5e.forEach(t),jYe=i(S),Nn=n(S,"LI",{});var m9=s(Nn);Fre=n(m9,"STRONG",{});var jGr=s(Fre);DYe=r(jGr,"camembert"),jGr.forEach(t),GYe=r(m9," \u2014 "),BS=n(m9,"A",{href:!0});var DGr=s(BS);OYe=r(DGr,"CamembertTokenizer"),DGr.forEach(t),VYe=r(m9," or "),PS=n(m9,"A",{href:!0});var GGr=s(PS);XYe=r(GGr,"CamembertTokenizerFast"),GGr.forEach(t),zYe=r(m9," (CamemBERT model)"),m9.forEach(t),QYe=i(S),wg=n(S,"LI",{});var F5e=s(wg);Tre=n(F5e,"STRONG",{});var OGr=s(Tre);WYe=r(OGr,"canine"),OGr.forEach(t),HYe=r(F5e," \u2014 "),IS=n(F5e,"A",{href:!0});var VGr=s(IS);UYe=r(VGr,"CanineTokenizer"),VGr.forEach(t),JYe=r(F5e," (Canine model)"),F5e.forEach(t),YYe=i(S),jn=n(S,"LI",{});var g9=s(jn);Mre=n(g9,"STRONG",{});var XGr=s(Mre);KYe=r(XGr,"clip"),XGr.forEach(t),ZYe=r(g9," \u2014 "),qS=n(g9,"A",{href:!0});var zGr=s(qS);eKe=r(zGr,"CLIPTokenizer"),zGr.forEach(t),oKe=r(g9," or "),NS=n(g9,"A",{href:!0});var QGr=s(NS);rKe=r(QGr,"CLIPTokenizerFast"),QGr.forEach(t),tKe=r(g9," (CLIP model)"),g9.forEach(t),aKe=i(S),Dn=n(S,"LI",{});var h9=s(Dn);Ere=n(h9,"STRONG",{});var WGr=s(Ere);nKe=r(WGr,"convbert"),WGr.forEach(t),sKe=r(h9," \u2014 "),jS=n(h9,"A",{href:!0});var HGr=s(jS);lKe=r(HGr,"ConvBertTokenizer"),HGr.forEach(t),iKe=r(h9," or "),DS=n(h9,"A",{href:!0});var UGr=s(DS);dKe=r(UGr,"ConvBertTokenizerFast"),UGr.forEach(t),cKe=r(h9," (ConvBERT model)"),h9.forEach(t),fKe=i(S),Gn=n(S,"LI",{});var p9=s(Gn);Cre=n(p9,"STRONG",{});var JGr=s(Cre);mKe=r(JGr,"cpm"),JGr.forEach(t),gKe=r(p9," \u2014 "),GS=n(p9,"A",{href:!0});var YGr=s(GS);hKe=r(YGr,"CpmTokenizer"),YGr.forEach(t),pKe=r(p9," or "),OS=n(p9,"A",{href:!0});var KGr=s(OS);uKe=r(KGr,"CpmTokenizerFast"),KGr.forEach(t),_Ke=r(p9," (CPM model)"),p9.forEach(t),bKe=i(S),Ag=n(S,"LI",{});var T5e=s(Ag);wre=n(T5e,"STRONG",{});var ZGr=s(wre);vKe=r(ZGr,"ctrl"),ZGr.forEach(t),FKe=r(T5e," \u2014 "),VS=n(T5e,"A",{href:!0});var eOr=s(VS);TKe=r(eOr,"CTRLTokenizer"),eOr.forEach(t),MKe=r(T5e," (CTRL model)"),T5e.forEach(t),EKe=i(S),On=n(S,"LI",{});var u9=s(On);Are=n(u9,"STRONG",{});var oOr=s(Are);CKe=r(oOr,"data2vec-text"),oOr.forEach(t),wKe=r(u9," \u2014 "),XS=n(u9,"A",{href:!0});var rOr=s(XS);AKe=r(rOr,"RobertaTokenizer"),rOr.forEach(t),yKe=r(u9," or "),zS=n(u9,"A",{href:!0});var tOr=s(zS);LKe=r(tOr,"RobertaTokenizerFast"),tOr.forEach(t),xKe=r(u9," (Data2VecText model)"),u9.forEach(t),$Ke=i(S),Vn=n(S,"LI",{});var _9=s(Vn);yre=n(_9,"STRONG",{});var aOr=s(yre);kKe=r(aOr,"deberta"),aOr.forEach(t),SKe=r(_9," \u2014 "),QS=n(_9,"A",{href:!0});var nOr=s(QS);RKe=r(nOr,"DebertaTokenizer"),nOr.forEach(t),BKe=r(_9," or "),WS=n(_9,"A",{href:!0});var sOr=s(WS);PKe=r(sOr,"DebertaTokenizerFast"),sOr.forEach(t),IKe=r(_9," (DeBERTa model)"),_9.forEach(t),qKe=i(S),Xn=n(S,"LI",{});var b9=s(Xn);Lre=n(b9,"STRONG",{});var lOr=s(Lre);NKe=r(lOr,"deberta-v2"),lOr.forEach(t),jKe=r(b9," \u2014 "),HS=n(b9,"A",{href:!0});var iOr=s(HS);DKe=r(iOr,"DebertaV2Tokenizer"),iOr.forEach(t),GKe=r(b9," or "),US=n(b9,"A",{href:!0});var dOr=s(US);OKe=r(dOr,"DebertaV2TokenizerFast"),dOr.forEach(t),VKe=r(b9," (DeBERTa-v2 model)"),b9.forEach(t),XKe=i(S),zn=n(S,"LI",{});var v9=s(zn);xre=n(v9,"STRONG",{});var cOr=s(xre);zKe=r(cOr,"distilbert"),cOr.forEach(t),QKe=r(v9," \u2014 "),JS=n(v9,"A",{href:!0});var fOr=s(JS);WKe=r(fOr,"DistilBertTokenizer"),fOr.forEach(t),HKe=r(v9," or "),YS=n(v9,"A",{href:!0});var mOr=s(YS);UKe=r(mOr,"DistilBertTokenizerFast"),mOr.forEach(t),JKe=r(v9," (DistilBERT model)"),v9.forEach(t),YKe=i(S),Qn=n(S,"LI",{});var F9=s(Qn);$re=n(F9,"STRONG",{});var gOr=s($re);KKe=r(gOr,"dpr"),gOr.forEach(t),ZKe=r(F9," \u2014 "),KS=n(F9,"A",{href:!0});var hOr=s(KS);eZe=r(hOr,"DPRQuestionEncoderTokenizer"),hOr.forEach(t),oZe=r(F9," or "),ZS=n(F9,"A",{href:!0});var pOr=s(ZS);rZe=r(pOr,"DPRQuestionEncoderTokenizerFast"),pOr.forEach(t),tZe=r(F9," (DPR model)"),F9.forEach(t),aZe=i(S),Wn=n(S,"LI",{});var T9=s(Wn);kre=n(T9,"STRONG",{});var uOr=s(kre);nZe=r(uOr,"electra"),uOr.forEach(t),sZe=r(T9," \u2014 "),eR=n(T9,"A",{href:!0});var _Or=s(eR);lZe=r(_Or,"ElectraTokenizer"),_Or.forEach(t),iZe=r(T9," or "),oR=n(T9,"A",{href:!0});var bOr=s(oR);dZe=r(bOr,"ElectraTokenizerFast"),bOr.forEach(t),cZe=r(T9," (ELECTRA model)"),T9.forEach(t),fZe=i(S),yg=n(S,"LI",{});var M5e=s(yg);Sre=n(M5e,"STRONG",{});var vOr=s(Sre);mZe=r(vOr,"flaubert"),vOr.forEach(t),gZe=r(M5e," \u2014 "),rR=n(M5e,"A",{href:!0});var FOr=s(rR);hZe=r(FOr,"FlaubertTokenizer"),FOr.forEach(t),pZe=r(M5e," (FlauBERT model)"),M5e.forEach(t),uZe=i(S),Hn=n(S,"LI",{});var M9=s(Hn);Rre=n(M9,"STRONG",{});var TOr=s(Rre);_Ze=r(TOr,"fnet"),TOr.forEach(t),bZe=r(M9," \u2014 "),tR=n(M9,"A",{href:!0});var MOr=s(tR);vZe=r(MOr,"FNetTokenizer"),MOr.forEach(t),FZe=r(M9," or "),aR=n(M9,"A",{href:!0});var EOr=s(aR);TZe=r(EOr,"FNetTokenizerFast"),EOr.forEach(t),MZe=r(M9," (FNet model)"),M9.forEach(t),EZe=i(S),Lg=n(S,"LI",{});var E5e=s(Lg);Bre=n(E5e,"STRONG",{});var COr=s(Bre);CZe=r(COr,"fsmt"),COr.forEach(t),wZe=r(E5e," \u2014 "),nR=n(E5e,"A",{href:!0});var wOr=s(nR);AZe=r(wOr,"FSMTTokenizer"),wOr.forEach(t),yZe=r(E5e," (FairSeq Machine-Translation model)"),E5e.forEach(t),LZe=i(S),Un=n(S,"LI",{});var E9=s(Un);Pre=n(E9,"STRONG",{});var AOr=s(Pre);xZe=r(AOr,"funnel"),AOr.forEach(t),$Ze=r(E9," \u2014 "),sR=n(E9,"A",{href:!0});var yOr=s(sR);kZe=r(yOr,"FunnelTokenizer"),yOr.forEach(t),SZe=r(E9," or "),lR=n(E9,"A",{href:!0});var LOr=s(lR);RZe=r(LOr,"FunnelTokenizerFast"),LOr.forEach(t),BZe=r(E9," (Funnel Transformer model)"),E9.forEach(t),PZe=i(S),Jn=n(S,"LI",{});var C9=s(Jn);Ire=n(C9,"STRONG",{});var xOr=s(Ire);IZe=r(xOr,"gpt2"),xOr.forEach(t),qZe=r(C9," \u2014 "),iR=n(C9,"A",{href:!0});var $Or=s(iR);NZe=r($Or,"GPT2Tokenizer"),$Or.forEach(t),jZe=r(C9," or "),dR=n(C9,"A",{href:!0});var kOr=s(dR);DZe=r(kOr,"GPT2TokenizerFast"),kOr.forEach(t),GZe=r(C9," (OpenAI GPT-2 model)"),C9.forEach(t),OZe=i(S),Yn=n(S,"LI",{});var w9=s(Yn);qre=n(w9,"STRONG",{});var SOr=s(qre);VZe=r(SOr,"gpt_neo"),SOr.forEach(t),XZe=r(w9," \u2014 "),cR=n(w9,"A",{href:!0});var ROr=s(cR);zZe=r(ROr,"GPT2Tokenizer"),ROr.forEach(t),QZe=r(w9," or "),fR=n(w9,"A",{href:!0});var BOr=s(fR);WZe=r(BOr,"GPT2TokenizerFast"),BOr.forEach(t),HZe=r(w9," (GPT Neo model)"),w9.forEach(t),UZe=i(S),Kn=n(S,"LI",{});var A9=s(Kn);Nre=n(A9,"STRONG",{});var POr=s(Nre);JZe=r(POr,"gptj"),POr.forEach(t),YZe=r(A9," \u2014 "),mR=n(A9,"A",{href:!0});var IOr=s(mR);KZe=r(IOr,"GPT2Tokenizer"),IOr.forEach(t),ZZe=r(A9," or "),gR=n(A9,"A",{href:!0});var qOr=s(gR);eeo=r(qOr,"GPT2TokenizerFast"),qOr.forEach(t),oeo=r(A9," (GPT-J model)"),A9.forEach(t),reo=i(S),Zn=n(S,"LI",{});var y9=s(Zn);jre=n(y9,"STRONG",{});var NOr=s(jre);teo=r(NOr,"herbert"),NOr.forEach(t),aeo=r(y9," \u2014 "),hR=n(y9,"A",{href:!0});var jOr=s(hR);neo=r(jOr,"HerbertTokenizer"),jOr.forEach(t),seo=r(y9," or "),pR=n(y9,"A",{href:!0});var DOr=s(pR);leo=r(DOr,"HerbertTokenizerFast"),DOr.forEach(t),ieo=r(y9," (HerBERT model)"),y9.forEach(t),deo=i(S),xg=n(S,"LI",{});var C5e=s(xg);Dre=n(C5e,"STRONG",{});var GOr=s(Dre);ceo=r(GOr,"hubert"),GOr.forEach(t),feo=r(C5e," \u2014 "),uR=n(C5e,"A",{href:!0});var OOr=s(uR);meo=r(OOr,"Wav2Vec2CTCTokenizer"),OOr.forEach(t),geo=r(C5e," (Hubert model)"),C5e.forEach(t),heo=i(S),es=n(S,"LI",{});var L9=s(es);Gre=n(L9,"STRONG",{});var VOr=s(Gre);peo=r(VOr,"ibert"),VOr.forEach(t),ueo=r(L9," \u2014 "),_R=n(L9,"A",{href:!0});var XOr=s(_R);_eo=r(XOr,"RobertaTokenizer"),XOr.forEach(t),beo=r(L9," or "),bR=n(L9,"A",{href:!0});var zOr=s(bR);veo=r(zOr,"RobertaTokenizerFast"),zOr.forEach(t),Feo=r(L9," (I-BERT model)"),L9.forEach(t),Teo=i(S),os=n(S,"LI",{});var x9=s(os);Ore=n(x9,"STRONG",{});var QOr=s(Ore);Meo=r(QOr,"layoutlm"),QOr.forEach(t),Eeo=r(x9," \u2014 "),vR=n(x9,"A",{href:!0});var WOr=s(vR);Ceo=r(WOr,"LayoutLMTokenizer"),WOr.forEach(t),weo=r(x9," or "),FR=n(x9,"A",{href:!0});var HOr=s(FR);Aeo=r(HOr,"LayoutLMTokenizerFast"),HOr.forEach(t),yeo=r(x9," (LayoutLM model)"),x9.forEach(t),Leo=i(S),rs=n(S,"LI",{});var $9=s(rs);Vre=n($9,"STRONG",{});var UOr=s(Vre);xeo=r(UOr,"layoutlmv2"),UOr.forEach(t),$eo=r($9," \u2014 "),TR=n($9,"A",{href:!0});var JOr=s(TR);keo=r(JOr,"LayoutLMv2Tokenizer"),JOr.forEach(t),Seo=r($9," or "),MR=n($9,"A",{href:!0});var YOr=s(MR);Reo=r(YOr,"LayoutLMv2TokenizerFast"),YOr.forEach(t),Beo=r($9," (LayoutLMv2 model)"),$9.forEach(t),Peo=i(S),ts=n(S,"LI",{});var k9=s(ts);Xre=n(k9,"STRONG",{});var KOr=s(Xre);Ieo=r(KOr,"layoutxlm"),KOr.forEach(t),qeo=r(k9," \u2014 "),ER=n(k9,"A",{href:!0});var ZOr=s(ER);Neo=r(ZOr,"LayoutXLMTokenizer"),ZOr.forEach(t),jeo=r(k9," or "),CR=n(k9,"A",{href:!0});var eVr=s(CR);Deo=r(eVr,"LayoutXLMTokenizerFast"),eVr.forEach(t),Geo=r(k9," (LayoutXLM model)"),k9.forEach(t),Oeo=i(S),as=n(S,"LI",{});var S9=s(as);zre=n(S9,"STRONG",{});var oVr=s(zre);Veo=r(oVr,"led"),oVr.forEach(t),Xeo=r(S9," \u2014 "),wR=n(S9,"A",{href:!0});var rVr=s(wR);zeo=r(rVr,"LEDTokenizer"),rVr.forEach(t),Qeo=r(S9," or "),AR=n(S9,"A",{href:!0});var tVr=s(AR);Weo=r(tVr,"LEDTokenizerFast"),tVr.forEach(t),Heo=r(S9," (LED model)"),S9.forEach(t),Ueo=i(S),ns=n(S,"LI",{});var R9=s(ns);Qre=n(R9,"STRONG",{});var aVr=s(Qre);Jeo=r(aVr,"longformer"),aVr.forEach(t),Yeo=r(R9," \u2014 "),yR=n(R9,"A",{href:!0});var nVr=s(yR);Keo=r(nVr,"LongformerTokenizer"),nVr.forEach(t),Zeo=r(R9," or "),LR=n(R9,"A",{href:!0});var sVr=s(LR);eoo=r(sVr,"LongformerTokenizerFast"),sVr.forEach(t),ooo=r(R9," (Longformer model)"),R9.forEach(t),roo=i(S),$g=n(S,"LI",{});var w5e=s($g);Wre=n(w5e,"STRONG",{});var lVr=s(Wre);too=r(lVr,"luke"),lVr.forEach(t),aoo=r(w5e," \u2014 "),xR=n(w5e,"A",{href:!0});var iVr=s(xR);noo=r(iVr,"LukeTokenizer"),iVr.forEach(t),soo=r(w5e," (LUKE model)"),w5e.forEach(t),loo=i(S),ss=n(S,"LI",{});var B9=s(ss);Hre=n(B9,"STRONG",{});var dVr=s(Hre);ioo=r(dVr,"lxmert"),dVr.forEach(t),doo=r(B9," \u2014 "),$R=n(B9,"A",{href:!0});var cVr=s($R);coo=r(cVr,"LxmertTokenizer"),cVr.forEach(t),foo=r(B9," or "),kR=n(B9,"A",{href:!0});var fVr=s(kR);moo=r(fVr,"LxmertTokenizerFast"),fVr.forEach(t),goo=r(B9," (LXMERT model)"),B9.forEach(t),hoo=i(S),kg=n(S,"LI",{});var A5e=s(kg);Ure=n(A5e,"STRONG",{});var mVr=s(Ure);poo=r(mVr,"m2m_100"),mVr.forEach(t),uoo=r(A5e," \u2014 "),SR=n(A5e,"A",{href:!0});var gVr=s(SR);_oo=r(gVr,"M2M100Tokenizer"),gVr.forEach(t),boo=r(A5e," (M2M100 model)"),A5e.forEach(t),voo=i(S),Sg=n(S,"LI",{});var y5e=s(Sg);Jre=n(y5e,"STRONG",{});var hVr=s(Jre);Foo=r(hVr,"marian"),hVr.forEach(t),Too=r(y5e," \u2014 "),RR=n(y5e,"A",{href:!0});var pVr=s(RR);Moo=r(pVr,"MarianTokenizer"),pVr.forEach(t),Eoo=r(y5e," (Marian model)"),y5e.forEach(t),Coo=i(S),ls=n(S,"LI",{});var P9=s(ls);Yre=n(P9,"STRONG",{});var uVr=s(Yre);woo=r(uVr,"mbart"),uVr.forEach(t),Aoo=r(P9," \u2014 "),BR=n(P9,"A",{href:!0});var _Vr=s(BR);yoo=r(_Vr,"MBartTokenizer"),_Vr.forEach(t),Loo=r(P9," or "),PR=n(P9,"A",{href:!0});var bVr=s(PR);xoo=r(bVr,"MBartTokenizerFast"),bVr.forEach(t),$oo=r(P9," (mBART model)"),P9.forEach(t),koo=i(S),is=n(S,"LI",{});var I9=s(is);Kre=n(I9,"STRONG",{});var vVr=s(Kre);Soo=r(vVr,"mbart50"),vVr.forEach(t),Roo=r(I9," \u2014 "),IR=n(I9,"A",{href:!0});var FVr=s(IR);Boo=r(FVr,"MBart50Tokenizer"),FVr.forEach(t),Poo=r(I9," or "),qR=n(I9,"A",{href:!0});var TVr=s(qR);Ioo=r(TVr,"MBart50TokenizerFast"),TVr.forEach(t),qoo=r(I9," (mBART-50 model)"),I9.forEach(t),Noo=i(S),ds=n(S,"LI",{});var q9=s(ds);Zre=n(q9,"STRONG",{});var MVr=s(Zre);joo=r(MVr,"megatron-bert"),MVr.forEach(t),Doo=r(q9," \u2014 "),NR=n(q9,"A",{href:!0});var EVr=s(NR);Goo=r(EVr,"BertTokenizer"),EVr.forEach(t),Ooo=r(q9," or "),jR=n(q9,"A",{href:!0});var CVr=s(jR);Voo=r(CVr,"BertTokenizerFast"),CVr.forEach(t),Xoo=r(q9," (MegatronBert model)"),q9.forEach(t),zoo=i(S),Rg=n(S,"LI",{});var L5e=s(Rg);ete=n(L5e,"STRONG",{});var wVr=s(ete);Qoo=r(wVr,"mluke"),wVr.forEach(t),Woo=r(L5e," \u2014 "),DR=n(L5e,"A",{href:!0});var AVr=s(DR);Hoo=r(AVr,"MLukeTokenizer"),AVr.forEach(t),Uoo=r(L5e," (mLUKE model)"),L5e.forEach(t),Joo=i(S),cs=n(S,"LI",{});var N9=s(cs);ote=n(N9,"STRONG",{});var yVr=s(ote);Yoo=r(yVr,"mobilebert"),yVr.forEach(t),Koo=r(N9," \u2014 "),GR=n(N9,"A",{href:!0});var LVr=s(GR);Zoo=r(LVr,"MobileBertTokenizer"),LVr.forEach(t),ero=r(N9," or "),OR=n(N9,"A",{href:!0});var xVr=s(OR);oro=r(xVr,"MobileBertTokenizerFast"),xVr.forEach(t),rro=r(N9," (MobileBERT model)"),N9.forEach(t),tro=i(S),fs=n(S,"LI",{});var j9=s(fs);rte=n(j9,"STRONG",{});var $Vr=s(rte);aro=r($Vr,"mpnet"),$Vr.forEach(t),nro=r(j9," \u2014 "),VR=n(j9,"A",{href:!0});var kVr=s(VR);sro=r(kVr,"MPNetTokenizer"),kVr.forEach(t),lro=r(j9," or "),XR=n(j9,"A",{href:!0});var SVr=s(XR);iro=r(SVr,"MPNetTokenizerFast"),SVr.forEach(t),dro=r(j9," (MPNet model)"),j9.forEach(t),cro=i(S),ms=n(S,"LI",{});var D9=s(ms);tte=n(D9,"STRONG",{});var RVr=s(tte);fro=r(RVr,"mt5"),RVr.forEach(t),mro=r(D9," \u2014 "),zR=n(D9,"A",{href:!0});var BVr=s(zR);gro=r(BVr,"MT5Tokenizer"),BVr.forEach(t),hro=r(D9," or "),QR=n(D9,"A",{href:!0});var PVr=s(QR);pro=r(PVr,"MT5TokenizerFast"),PVr.forEach(t),uro=r(D9," (mT5 model)"),D9.forEach(t),_ro=i(S),gs=n(S,"LI",{});var G9=s(gs);ate=n(G9,"STRONG",{});var IVr=s(ate);bro=r(IVr,"nystromformer"),IVr.forEach(t),vro=r(G9," \u2014 "),WR=n(G9,"A",{href:!0});var qVr=s(WR);Fro=r(qVr,"AlbertTokenizer"),qVr.forEach(t),Tro=r(G9," or "),HR=n(G9,"A",{href:!0});var NVr=s(HR);Mro=r(NVr,"AlbertTokenizerFast"),NVr.forEach(t),Ero=r(G9," (Nystromformer model)"),G9.forEach(t),Cro=i(S),hs=n(S,"LI",{});var O9=s(hs);nte=n(O9,"STRONG",{});var jVr=s(nte);wro=r(jVr,"openai-gpt"),jVr.forEach(t),Aro=r(O9," \u2014 "),UR=n(O9,"A",{href:!0});var DVr=s(UR);yro=r(DVr,"OpenAIGPTTokenizer"),DVr.forEach(t),Lro=r(O9," or "),JR=n(O9,"A",{href:!0});var GVr=s(JR);xro=r(GVr,"OpenAIGPTTokenizerFast"),GVr.forEach(t),$ro=r(O9," (OpenAI GPT model)"),O9.forEach(t),kro=i(S),ps=n(S,"LI",{});var V9=s(ps);ste=n(V9,"STRONG",{});var OVr=s(ste);Sro=r(OVr,"opt"),OVr.forEach(t),Rro=r(V9," \u2014 "),YR=n(V9,"A",{href:!0});var VVr=s(YR);Bro=r(VVr,"GPT2Tokenizer"),VVr.forEach(t),Pro=r(V9," or "),KR=n(V9,"A",{href:!0});var XVr=s(KR);Iro=r(XVr,"GPT2TokenizerFast"),XVr.forEach(t),qro=r(V9," (OPT model)"),V9.forEach(t),Nro=i(S),us=n(S,"LI",{});var X9=s(us);lte=n(X9,"STRONG",{});var zVr=s(lte);jro=r(zVr,"pegasus"),zVr.forEach(t),Dro=r(X9," \u2014 "),ZR=n(X9,"A",{href:!0});var QVr=s(ZR);Gro=r(QVr,"PegasusTokenizer"),QVr.forEach(t),Oro=r(X9," or "),eB=n(X9,"A",{href:!0});var WVr=s(eB);Vro=r(WVr,"PegasusTokenizerFast"),WVr.forEach(t),Xro=r(X9," (Pegasus model)"),X9.forEach(t),zro=i(S),Bg=n(S,"LI",{});var x5e=s(Bg);ite=n(x5e,"STRONG",{});var HVr=s(ite);Qro=r(HVr,"perceiver"),HVr.forEach(t),Wro=r(x5e," \u2014 "),oB=n(x5e,"A",{href:!0});var UVr=s(oB);Hro=r(UVr,"PerceiverTokenizer"),UVr.forEach(t),Uro=r(x5e," (Perceiver model)"),x5e.forEach(t),Jro=i(S),Pg=n(S,"LI",{});var $5e=s(Pg);dte=n($5e,"STRONG",{});var JVr=s(dte);Yro=r(JVr,"phobert"),JVr.forEach(t),Kro=r($5e," \u2014 "),rB=n($5e,"A",{href:!0});var YVr=s(rB);Zro=r(YVr,"PhobertTokenizer"),YVr.forEach(t),eto=r($5e," (PhoBERT model)"),$5e.forEach(t),oto=i(S),Ig=n(S,"LI",{});var k5e=s(Ig);cte=n(k5e,"STRONG",{});var KVr=s(cte);rto=r(KVr,"plbart"),KVr.forEach(t),tto=r(k5e," \u2014 "),tB=n(k5e,"A",{href:!0});var ZVr=s(tB);ato=r(ZVr,"PLBartTokenizer"),ZVr.forEach(t),nto=r(k5e," (PLBart model)"),k5e.forEach(t),sto=i(S),qg=n(S,"LI",{});var S5e=s(qg);fte=n(S5e,"STRONG",{});var eXr=s(fte);lto=r(eXr,"prophetnet"),eXr.forEach(t),ito=r(S5e," \u2014 "),aB=n(S5e,"A",{href:!0});var oXr=s(aB);dto=r(oXr,"ProphetNetTokenizer"),oXr.forEach(t),cto=r(S5e," (ProphetNet model)"),S5e.forEach(t),fto=i(S),_s=n(S,"LI",{});var z9=s(_s);mte=n(z9,"STRONG",{});var rXr=s(mte);mto=r(rXr,"qdqbert"),rXr.forEach(t),gto=r(z9," \u2014 "),nB=n(z9,"A",{href:!0});var tXr=s(nB);hto=r(tXr,"BertTokenizer"),tXr.forEach(t),pto=r(z9," or "),sB=n(z9,"A",{href:!0});var aXr=s(sB);uto=r(aXr,"BertTokenizerFast"),aXr.forEach(t),_to=r(z9," (QDQBert model)"),z9.forEach(t),bto=i(S),Ng=n(S,"LI",{});var R5e=s(Ng);gte=n(R5e,"STRONG",{});var nXr=s(gte);vto=r(nXr,"rag"),nXr.forEach(t),Fto=r(R5e," \u2014 "),lB=n(R5e,"A",{href:!0});var sXr=s(lB);Tto=r(sXr,"RagTokenizer"),sXr.forEach(t),Mto=r(R5e," (RAG model)"),R5e.forEach(t),Eto=i(S),bs=n(S,"LI",{});var Q9=s(bs);hte=n(Q9,"STRONG",{});var lXr=s(hte);Cto=r(lXr,"realm"),lXr.forEach(t),wto=r(Q9," \u2014 "),iB=n(Q9,"A",{href:!0});var iXr=s(iB);Ato=r(iXr,"RealmTokenizer"),iXr.forEach(t),yto=r(Q9," or "),dB=n(Q9,"A",{href:!0});var dXr=s(dB);Lto=r(dXr,"RealmTokenizerFast"),dXr.forEach(t),xto=r(Q9," (Realm model)"),Q9.forEach(t),$to=i(S),vs=n(S,"LI",{});var W9=s(vs);pte=n(W9,"STRONG",{});var cXr=s(pte);kto=r(cXr,"reformer"),cXr.forEach(t),Sto=r(W9," \u2014 "),cB=n(W9,"A",{href:!0});var fXr=s(cB);Rto=r(fXr,"ReformerTokenizer"),fXr.forEach(t),Bto=r(W9," or "),fB=n(W9,"A",{href:!0});var mXr=s(fB);Pto=r(mXr,"ReformerTokenizerFast"),mXr.forEach(t),Ito=r(W9," (Reformer model)"),W9.forEach(t),qto=i(S),Fs=n(S,"LI",{});var H9=s(Fs);ute=n(H9,"STRONG",{});var gXr=s(ute);Nto=r(gXr,"rembert"),gXr.forEach(t),jto=r(H9," \u2014 "),mB=n(H9,"A",{href:!0});var hXr=s(mB);Dto=r(hXr,"RemBertTokenizer"),hXr.forEach(t),Gto=r(H9," or "),gB=n(H9,"A",{href:!0});var pXr=s(gB);Oto=r(pXr,"RemBertTokenizerFast"),pXr.forEach(t),Vto=r(H9," (RemBERT model)"),H9.forEach(t),Xto=i(S),Ts=n(S,"LI",{});var U9=s(Ts);_te=n(U9,"STRONG",{});var uXr=s(_te);zto=r(uXr,"retribert"),uXr.forEach(t),Qto=r(U9," \u2014 "),hB=n(U9,"A",{href:!0});var _Xr=s(hB);Wto=r(_Xr,"RetriBertTokenizer"),_Xr.forEach(t),Hto=r(U9," or "),pB=n(U9,"A",{href:!0});var bXr=s(pB);Uto=r(bXr,"RetriBertTokenizerFast"),bXr.forEach(t),Jto=r(U9," (RetriBERT model)"),U9.forEach(t),Yto=i(S),Ms=n(S,"LI",{});var J9=s(Ms);bte=n(J9,"STRONG",{});var vXr=s(bte);Kto=r(vXr,"roberta"),vXr.forEach(t),Zto=r(J9," \u2014 "),uB=n(J9,"A",{href:!0});var FXr=s(uB);eao=r(FXr,"RobertaTokenizer"),FXr.forEach(t),oao=r(J9," or "),_B=n(J9,"A",{href:!0});var TXr=s(_B);rao=r(TXr,"RobertaTokenizerFast"),TXr.forEach(t),tao=r(J9," (RoBERTa model)"),J9.forEach(t),aao=i(S),Es=n(S,"LI",{});var Y9=s(Es);vte=n(Y9,"STRONG",{});var MXr=s(vte);nao=r(MXr,"roformer"),MXr.forEach(t),sao=r(Y9," \u2014 "),bB=n(Y9,"A",{href:!0});var EXr=s(bB);lao=r(EXr,"RoFormerTokenizer"),EXr.forEach(t),iao=r(Y9," or "),vB=n(Y9,"A",{href:!0});var CXr=s(vB);dao=r(CXr,"RoFormerTokenizerFast"),CXr.forEach(t),cao=r(Y9," (RoFormer model)"),Y9.forEach(t),fao=i(S),jg=n(S,"LI",{});var B5e=s(jg);Fte=n(B5e,"STRONG",{});var wXr=s(Fte);mao=r(wXr,"speech_to_text"),wXr.forEach(t),gao=r(B5e," \u2014 "),FB=n(B5e,"A",{href:!0});var AXr=s(FB);hao=r(AXr,"Speech2TextTokenizer"),AXr.forEach(t),pao=r(B5e," (Speech2Text model)"),B5e.forEach(t),uao=i(S),Dg=n(S,"LI",{});var P5e=s(Dg);Tte=n(P5e,"STRONG",{});var yXr=s(Tte);_ao=r(yXr,"speech_to_text_2"),yXr.forEach(t),bao=r(P5e," \u2014 "),TB=n(P5e,"A",{href:!0});var LXr=s(TB);vao=r(LXr,"Speech2Text2Tokenizer"),LXr.forEach(t),Fao=r(P5e," (Speech2Text2 model)"),P5e.forEach(t),Tao=i(S),Cs=n(S,"LI",{});var K9=s(Cs);Mte=n(K9,"STRONG",{});var xXr=s(Mte);Mao=r(xXr,"splinter"),xXr.forEach(t),Eao=r(K9," \u2014 "),MB=n(K9,"A",{href:!0});var $Xr=s(MB);Cao=r($Xr,"SplinterTokenizer"),$Xr.forEach(t),wao=r(K9," or "),EB=n(K9,"A",{href:!0});var kXr=s(EB);Aao=r(kXr,"SplinterTokenizerFast"),kXr.forEach(t),yao=r(K9," (Splinter model)"),K9.forEach(t),Lao=i(S),ws=n(S,"LI",{});var Z9=s(ws);Ete=n(Z9,"STRONG",{});var SXr=s(Ete);xao=r(SXr,"squeezebert"),SXr.forEach(t),$ao=r(Z9," \u2014 "),CB=n(Z9,"A",{href:!0});var RXr=s(CB);kao=r(RXr,"SqueezeBertTokenizer"),RXr.forEach(t),Sao=r(Z9," or "),wB=n(Z9,"A",{href:!0});var BXr=s(wB);Rao=r(BXr,"SqueezeBertTokenizerFast"),BXr.forEach(t),Bao=r(Z9," (SqueezeBERT model)"),Z9.forEach(t),Pao=i(S),As=n(S,"LI",{});var e$=s(As);Cte=n(e$,"STRONG",{});var PXr=s(Cte);Iao=r(PXr,"t5"),PXr.forEach(t),qao=r(e$," \u2014 "),AB=n(e$,"A",{href:!0});var IXr=s(AB);Nao=r(IXr,"T5Tokenizer"),IXr.forEach(t),jao=r(e$," or "),yB=n(e$,"A",{href:!0});var qXr=s(yB);Dao=r(qXr,"T5TokenizerFast"),qXr.forEach(t),Gao=r(e$," (T5 model)"),e$.forEach(t),Oao=i(S),Gg=n(S,"LI",{});var I5e=s(Gg);wte=n(I5e,"STRONG",{});var NXr=s(wte);Vao=r(NXr,"tapas"),NXr.forEach(t),Xao=r(I5e," \u2014 "),LB=n(I5e,"A",{href:!0});var jXr=s(LB);zao=r(jXr,"TapasTokenizer"),jXr.forEach(t),Qao=r(I5e," (TAPAS model)"),I5e.forEach(t),Wao=i(S),Og=n(S,"LI",{});var q5e=s(Og);Ate=n(q5e,"STRONG",{});var DXr=s(Ate);Hao=r(DXr,"tapex"),DXr.forEach(t),Uao=r(q5e," \u2014 "),xB=n(q5e,"A",{href:!0});var GXr=s(xB);Jao=r(GXr,"TapexTokenizer"),GXr.forEach(t),Yao=r(q5e," (TAPEX model)"),q5e.forEach(t),Kao=i(S),Vg=n(S,"LI",{});var N5e=s(Vg);yte=n(N5e,"STRONG",{});var OXr=s(yte);Zao=r(OXr,"transfo-xl"),OXr.forEach(t),eno=r(N5e," \u2014 "),$B=n(N5e,"A",{href:!0});var VXr=s($B);ono=r(VXr,"TransfoXLTokenizer"),VXr.forEach(t),rno=r(N5e," (Transformer-XL model)"),N5e.forEach(t),tno=i(S),ys=n(S,"LI",{});var o$=s(ys);Lte=n(o$,"STRONG",{});var XXr=s(Lte);ano=r(XXr,"visual_bert"),XXr.forEach(t),nno=r(o$," \u2014 "),kB=n(o$,"A",{href:!0});var zXr=s(kB);sno=r(zXr,"BertTokenizer"),zXr.forEach(t),lno=r(o$," or "),SB=n(o$,"A",{href:!0});var QXr=s(SB);ino=r(QXr,"BertTokenizerFast"),QXr.forEach(t),dno=r(o$," (VisualBert model)"),o$.forEach(t),cno=i(S),Xg=n(S,"LI",{});var j5e=s(Xg);xte=n(j5e,"STRONG",{});var WXr=s(xte);fno=r(WXr,"wav2vec2"),WXr.forEach(t),mno=r(j5e," \u2014 "),RB=n(j5e,"A",{href:!0});var HXr=s(RB);gno=r(HXr,"Wav2Vec2CTCTokenizer"),HXr.forEach(t),hno=r(j5e," (Wav2Vec2 model)"),j5e.forEach(t),pno=i(S),zg=n(S,"LI",{});var D5e=s(zg);$te=n(D5e,"STRONG",{});var UXr=s($te);uno=r(UXr,"wav2vec2_phoneme"),UXr.forEach(t),_no=r(D5e," \u2014 "),BB=n(D5e,"A",{href:!0});var JXr=s(BB);bno=r(JXr,"Wav2Vec2PhonemeCTCTokenizer"),JXr.forEach(t),vno=r(D5e," (Wav2Vec2Phoneme model)"),D5e.forEach(t),Fno=i(S),Ls=n(S,"LI",{});var r$=s(Ls);kte=n(r$,"STRONG",{});var YXr=s(kte);Tno=r(YXr,"xglm"),YXr.forEach(t),Mno=r(r$," \u2014 "),PB=n(r$,"A",{href:!0});var KXr=s(PB);Eno=r(KXr,"XGLMTokenizer"),KXr.forEach(t),Cno=r(r$," or "),IB=n(r$,"A",{href:!0});var ZXr=s(IB);wno=r(ZXr,"XGLMTokenizerFast"),ZXr.forEach(t),Ano=r(r$," (XGLM model)"),r$.forEach(t),yno=i(S),Qg=n(S,"LI",{});var G5e=s(Qg);Ste=n(G5e,"STRONG",{});var ezr=s(Ste);Lno=r(ezr,"xlm"),ezr.forEach(t),xno=r(G5e," \u2014 "),qB=n(G5e,"A",{href:!0});var ozr=s(qB);$no=r(ozr,"XLMTokenizer"),ozr.forEach(t),kno=r(G5e," (XLM model)"),G5e.forEach(t),Sno=i(S),Wg=n(S,"LI",{});var O5e=s(Wg);Rte=n(O5e,"STRONG",{});var rzr=s(Rte);Rno=r(rzr,"xlm-prophetnet"),rzr.forEach(t),Bno=r(O5e," \u2014 "),NB=n(O5e,"A",{href:!0});var tzr=s(NB);Pno=r(tzr,"XLMProphetNetTokenizer"),tzr.forEach(t),Ino=r(O5e," (XLMProphetNet model)"),O5e.forEach(t),qno=i(S),xs=n(S,"LI",{});var t$=s(xs);Bte=n(t$,"STRONG",{});var azr=s(Bte);Nno=r(azr,"xlm-roberta"),azr.forEach(t),jno=r(t$," \u2014 "),jB=n(t$,"A",{href:!0});var nzr=s(jB);Dno=r(nzr,"XLMRobertaTokenizer"),nzr.forEach(t),Gno=r(t$," or "),DB=n(t$,"A",{href:!0});var szr=s(DB);Ono=r(szr,"XLMRobertaTokenizerFast"),szr.forEach(t),Vno=r(t$," (XLM-RoBERTa model)"),t$.forEach(t),Xno=i(S),$s=n(S,"LI",{});var a$=s($s);Pte=n(a$,"STRONG",{});var lzr=s(Pte);zno=r(lzr,"xlm-roberta-xl"),lzr.forEach(t),Qno=r(a$," \u2014 "),GB=n(a$,"A",{href:!0});var izr=s(GB);Wno=r(izr,"RobertaTokenizer"),izr.forEach(t),Hno=r(a$," or "),OB=n(a$,"A",{href:!0});var dzr=s(OB);Uno=r(dzr,"RobertaTokenizerFast"),dzr.forEach(t),Jno=r(a$," (XLM-RoBERTa-XL model)"),a$.forEach(t),Yno=i(S),ks=n(S,"LI",{});var n$=s(ks);Ite=n(n$,"STRONG",{});var czr=s(Ite);Kno=r(czr,"xlnet"),czr.forEach(t),Zno=r(n$," \u2014 "),VB=n(n$,"A",{href:!0});var fzr=s(VB);eso=r(fzr,"XLNetTokenizer"),fzr.forEach(t),oso=r(n$," or "),XB=n(n$,"A",{href:!0});var mzr=s(XB);rso=r(mzr,"XLNetTokenizerFast"),mzr.forEach(t),tso=r(n$," (XLNet model)"),n$.forEach(t),aso=i(S),Ss=n(S,"LI",{});var s$=s(Ss);qte=n(s$,"STRONG",{});var gzr=s(qte);nso=r(gzr,"yoso"),gzr.forEach(t),sso=r(s$," \u2014 "),zB=n(s$,"A",{href:!0});var hzr=s(zB);lso=r(hzr,"AlbertTokenizer"),hzr.forEach(t),iso=r(s$," or "),QB=n(s$,"A",{href:!0});var pzr=s(QB);dso=r(pzr,"AlbertTokenizerFast"),pzr.forEach(t),cso=r(s$," (YOSO model)"),s$.forEach(t),S.forEach(t),fso=i(qs),T(Hg.$$.fragment,qs),qs.forEach(t),mso=i(Is),Ug=n(Is,"DIV",{class:!0});var Sqe=s(Ug);T(nA.$$.fragment,Sqe),gso=i(Sqe),Nte=n(Sqe,"P",{});var uzr=s(Nte);hso=r(uzr,"Register a new tokenizer in this mapping."),uzr.forEach(t),Sqe.forEach(t),Is.forEach(t),RPe=i(f),vi=n(f,"H2",{class:!0});var Rqe=s(vi);Jg=n(Rqe,"A",{id:!0,class:!0,href:!0});var _zr=s(Jg);jte=n(_zr,"SPAN",{});var bzr=s(jte);T(sA.$$.fragment,bzr),bzr.forEach(t),_zr.forEach(t),pso=i(Rqe),Dte=n(Rqe,"SPAN",{});var vzr=s(Dte);uso=r(vzr,"AutoFeatureExtractor"),vzr.forEach(t),Rqe.forEach(t),BPe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(lA.$$.fragment,Ns),_so=i(Ns),iA=n(Ns,"P",{});var Bqe=s(iA);bso=r(Bqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WB=n(Bqe,"A",{href:!0});var Fzr=s(WB);vso=r(Fzr,"AutoFeatureExtractor.from_pretrained()"),Fzr.forEach(t),Fso=r(Bqe," class method."),Bqe.forEach(t),Tso=i(Ns),dA=n(Ns,"P",{});var Pqe=s(dA);Mso=r(Pqe,"This class cannot be instantiated directly using "),Gte=n(Pqe,"CODE",{});var Tzr=s(Gte);Eso=r(Tzr,"__init__()"),Tzr.forEach(t),Cso=r(Pqe," (throws an error)."),Pqe.forEach(t),wso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(cA.$$.fragment,Yt),Aso=i(Yt),Ote=n(Yt,"P",{});var Mzr=s(Ote);yso=r(Mzr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Mzr.forEach(t),Lso=i(Yt),wa=n(Yt,"P",{});var HC=s(wa);xso=r(HC,"The feature extractor class to instantiate is selected based on the "),Vte=n(HC,"CODE",{});var Ezr=s(Vte);$so=r(Ezr,"model_type"),Ezr.forEach(t),kso=r(HC,` property of the config object
(either passed as an argument or loaded from `),Xte=n(HC,"CODE",{});var Czr=s(Xte);Sso=r(Czr,"pretrained_model_name_or_path"),Czr.forEach(t),Rso=r(HC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zte=n(HC,"CODE",{});var wzr=s(zte);Bso=r(wzr,"pretrained_model_name_or_path"),wzr.forEach(t),Pso=r(HC,":"),HC.forEach(t),Iso=i(Yt),te=n(Yt,"UL",{});var se=s(te);Yg=n(se,"LI",{});var V5e=s(Yg);Qte=n(V5e,"STRONG",{});var Azr=s(Qte);qso=r(Azr,"beit"),Azr.forEach(t),Nso=r(V5e," \u2014 "),HB=n(V5e,"A",{href:!0});var yzr=s(HB);jso=r(yzr,"BeitFeatureExtractor"),yzr.forEach(t),Dso=r(V5e," (BEiT model)"),V5e.forEach(t),Gso=i(se),Kg=n(se,"LI",{});var X5e=s(Kg);Wte=n(X5e,"STRONG",{});var Lzr=s(Wte);Oso=r(Lzr,"clip"),Lzr.forEach(t),Vso=r(X5e," \u2014 "),UB=n(X5e,"A",{href:!0});var xzr=s(UB);Xso=r(xzr,"CLIPFeatureExtractor"),xzr.forEach(t),zso=r(X5e," (CLIP model)"),X5e.forEach(t),Qso=i(se),Zg=n(se,"LI",{});var z5e=s(Zg);Hte=n(z5e,"STRONG",{});var $zr=s(Hte);Wso=r($zr,"convnext"),$zr.forEach(t),Hso=r(z5e," \u2014 "),JB=n(z5e,"A",{href:!0});var kzr=s(JB);Uso=r(kzr,"ConvNextFeatureExtractor"),kzr.forEach(t),Jso=r(z5e," (ConvNext model)"),z5e.forEach(t),Yso=i(se),eh=n(se,"LI",{});var Q5e=s(eh);Ute=n(Q5e,"STRONG",{});var Szr=s(Ute);Kso=r(Szr,"data2vec-audio"),Szr.forEach(t),Zso=r(Q5e," \u2014 "),YB=n(Q5e,"A",{href:!0});var Rzr=s(YB);elo=r(Rzr,"Wav2Vec2FeatureExtractor"),Rzr.forEach(t),olo=r(Q5e," (Data2VecAudio model)"),Q5e.forEach(t),rlo=i(se),oh=n(se,"LI",{});var W5e=s(oh);Jte=n(W5e,"STRONG",{});var Bzr=s(Jte);tlo=r(Bzr,"data2vec-vision"),Bzr.forEach(t),alo=r(W5e," \u2014 "),KB=n(W5e,"A",{href:!0});var Pzr=s(KB);nlo=r(Pzr,"BeitFeatureExtractor"),Pzr.forEach(t),slo=r(W5e," (Data2VecVision model)"),W5e.forEach(t),llo=i(se),rh=n(se,"LI",{});var H5e=s(rh);Yte=n(H5e,"STRONG",{});var Izr=s(Yte);ilo=r(Izr,"deit"),Izr.forEach(t),dlo=r(H5e," \u2014 "),ZB=n(H5e,"A",{href:!0});var qzr=s(ZB);clo=r(qzr,"DeiTFeatureExtractor"),qzr.forEach(t),flo=r(H5e," (DeiT model)"),H5e.forEach(t),mlo=i(se),th=n(se,"LI",{});var U5e=s(th);Kte=n(U5e,"STRONG",{});var Nzr=s(Kte);glo=r(Nzr,"detr"),Nzr.forEach(t),hlo=r(U5e," \u2014 "),eP=n(U5e,"A",{href:!0});var jzr=s(eP);plo=r(jzr,"DetrFeatureExtractor"),jzr.forEach(t),ulo=r(U5e," (DETR model)"),U5e.forEach(t),_lo=i(se),ah=n(se,"LI",{});var J5e=s(ah);Zte=n(J5e,"STRONG",{});var Dzr=s(Zte);blo=r(Dzr,"dpt"),Dzr.forEach(t),vlo=r(J5e," \u2014 "),oP=n(J5e,"A",{href:!0});var Gzr=s(oP);Flo=r(Gzr,"DPTFeatureExtractor"),Gzr.forEach(t),Tlo=r(J5e," (DPT model)"),J5e.forEach(t),Mlo=i(se),nh=n(se,"LI",{});var Y5e=s(nh);eae=n(Y5e,"STRONG",{});var Ozr=s(eae);Elo=r(Ozr,"glpn"),Ozr.forEach(t),Clo=r(Y5e," \u2014 "),rP=n(Y5e,"A",{href:!0});var Vzr=s(rP);wlo=r(Vzr,"GLPNFeatureExtractor"),Vzr.forEach(t),Alo=r(Y5e," (GLPN model)"),Y5e.forEach(t),ylo=i(se),sh=n(se,"LI",{});var K5e=s(sh);oae=n(K5e,"STRONG",{});var Xzr=s(oae);Llo=r(Xzr,"hubert"),Xzr.forEach(t),xlo=r(K5e," \u2014 "),tP=n(K5e,"A",{href:!0});var zzr=s(tP);$lo=r(zzr,"Wav2Vec2FeatureExtractor"),zzr.forEach(t),klo=r(K5e," (Hubert model)"),K5e.forEach(t),Slo=i(se),lh=n(se,"LI",{});var Z5e=s(lh);rae=n(Z5e,"STRONG",{});var Qzr=s(rae);Rlo=r(Qzr,"layoutlmv2"),Qzr.forEach(t),Blo=r(Z5e," \u2014 "),aP=n(Z5e,"A",{href:!0});var Wzr=s(aP);Plo=r(Wzr,"LayoutLMv2FeatureExtractor"),Wzr.forEach(t),Ilo=r(Z5e," (LayoutLMv2 model)"),Z5e.forEach(t),qlo=i(se),ih=n(se,"LI",{});var eCe=s(ih);tae=n(eCe,"STRONG",{});var Hzr=s(tae);Nlo=r(Hzr,"maskformer"),Hzr.forEach(t),jlo=r(eCe," \u2014 "),nP=n(eCe,"A",{href:!0});var Uzr=s(nP);Dlo=r(Uzr,"MaskFormerFeatureExtractor"),Uzr.forEach(t),Glo=r(eCe," (MaskFormer model)"),eCe.forEach(t),Olo=i(se),dh=n(se,"LI",{});var oCe=s(dh);aae=n(oCe,"STRONG",{});var Jzr=s(aae);Vlo=r(Jzr,"perceiver"),Jzr.forEach(t),Xlo=r(oCe," \u2014 "),sP=n(oCe,"A",{href:!0});var Yzr=s(sP);zlo=r(Yzr,"PerceiverFeatureExtractor"),Yzr.forEach(t),Qlo=r(oCe," (Perceiver model)"),oCe.forEach(t),Wlo=i(se),ch=n(se,"LI",{});var rCe=s(ch);nae=n(rCe,"STRONG",{});var Kzr=s(nae);Hlo=r(Kzr,"poolformer"),Kzr.forEach(t),Ulo=r(rCe," \u2014 "),lP=n(rCe,"A",{href:!0});var Zzr=s(lP);Jlo=r(Zzr,"PoolFormerFeatureExtractor"),Zzr.forEach(t),Ylo=r(rCe," (PoolFormer model)"),rCe.forEach(t),Klo=i(se),fh=n(se,"LI",{});var tCe=s(fh);sae=n(tCe,"STRONG",{});var eQr=s(sae);Zlo=r(eQr,"regnet"),eQr.forEach(t),eio=r(tCe," \u2014 "),iP=n(tCe,"A",{href:!0});var oQr=s(iP);oio=r(oQr,"ConvNextFeatureExtractor"),oQr.forEach(t),rio=r(tCe," (RegNet model)"),tCe.forEach(t),tio=i(se),mh=n(se,"LI",{});var aCe=s(mh);lae=n(aCe,"STRONG",{});var rQr=s(lae);aio=r(rQr,"resnet"),rQr.forEach(t),nio=r(aCe," \u2014 "),dP=n(aCe,"A",{href:!0});var tQr=s(dP);sio=r(tQr,"ConvNextFeatureExtractor"),tQr.forEach(t),lio=r(aCe," (ResNet model)"),aCe.forEach(t),iio=i(se),gh=n(se,"LI",{});var nCe=s(gh);iae=n(nCe,"STRONG",{});var aQr=s(iae);dio=r(aQr,"segformer"),aQr.forEach(t),cio=r(nCe," \u2014 "),cP=n(nCe,"A",{href:!0});var nQr=s(cP);fio=r(nQr,"SegformerFeatureExtractor"),nQr.forEach(t),mio=r(nCe," (SegFormer model)"),nCe.forEach(t),gio=i(se),hh=n(se,"LI",{});var sCe=s(hh);dae=n(sCe,"STRONG",{});var sQr=s(dae);hio=r(sQr,"speech_to_text"),sQr.forEach(t),pio=r(sCe," \u2014 "),fP=n(sCe,"A",{href:!0});var lQr=s(fP);uio=r(lQr,"Speech2TextFeatureExtractor"),lQr.forEach(t),_io=r(sCe," (Speech2Text model)"),sCe.forEach(t),bio=i(se),ph=n(se,"LI",{});var lCe=s(ph);cae=n(lCe,"STRONG",{});var iQr=s(cae);vio=r(iQr,"swin"),iQr.forEach(t),Fio=r(lCe," \u2014 "),mP=n(lCe,"A",{href:!0});var dQr=s(mP);Tio=r(dQr,"ViTFeatureExtractor"),dQr.forEach(t),Mio=r(lCe," (Swin model)"),lCe.forEach(t),Eio=i(se),uh=n(se,"LI",{});var iCe=s(uh);fae=n(iCe,"STRONG",{});var cQr=s(fae);Cio=r(cQr,"van"),cQr.forEach(t),wio=r(iCe," \u2014 "),gP=n(iCe,"A",{href:!0});var fQr=s(gP);Aio=r(fQr,"ConvNextFeatureExtractor"),fQr.forEach(t),yio=r(iCe," (VAN model)"),iCe.forEach(t),Lio=i(se),_h=n(se,"LI",{});var dCe=s(_h);mae=n(dCe,"STRONG",{});var mQr=s(mae);xio=r(mQr,"vit"),mQr.forEach(t),$io=r(dCe," \u2014 "),hP=n(dCe,"A",{href:!0});var gQr=s(hP);kio=r(gQr,"ViTFeatureExtractor"),gQr.forEach(t),Sio=r(dCe," (ViT model)"),dCe.forEach(t),Rio=i(se),bh=n(se,"LI",{});var cCe=s(bh);gae=n(cCe,"STRONG",{});var hQr=s(gae);Bio=r(hQr,"vit_mae"),hQr.forEach(t),Pio=r(cCe," \u2014 "),pP=n(cCe,"A",{href:!0});var pQr=s(pP);Iio=r(pQr,"ViTFeatureExtractor"),pQr.forEach(t),qio=r(cCe," (ViTMAE model)"),cCe.forEach(t),Nio=i(se),vh=n(se,"LI",{});var fCe=s(vh);hae=n(fCe,"STRONG",{});var uQr=s(hae);jio=r(uQr,"wav2vec2"),uQr.forEach(t),Dio=r(fCe," \u2014 "),uP=n(fCe,"A",{href:!0});var _Qr=s(uP);Gio=r(_Qr,"Wav2Vec2FeatureExtractor"),_Qr.forEach(t),Oio=r(fCe," (Wav2Vec2 model)"),fCe.forEach(t),Vio=i(se),Fh=n(se,"LI",{});var mCe=s(Fh);pae=n(mCe,"STRONG",{});var bQr=s(pae);Xio=r(bQr,"yolos"),bQr.forEach(t),zio=r(mCe," \u2014 "),_P=n(mCe,"A",{href:!0});var vQr=s(_P);Qio=r(vQr,"YolosFeatureExtractor"),vQr.forEach(t),Wio=r(mCe," (YOLOS model)"),mCe.forEach(t),se.forEach(t),Hio=i(Yt),T(Th.$$.fragment,Yt),Uio=i(Yt),T(Mh.$$.fragment,Yt),Yt.forEach(t),Jio=i(Ns),Eh=n(Ns,"DIV",{class:!0});var Iqe=s(Eh);T(fA.$$.fragment,Iqe),Yio=i(Iqe),uae=n(Iqe,"P",{});var FQr=s(uae);Kio=r(FQr,"Register a new feature extractor for this class."),FQr.forEach(t),Iqe.forEach(t),Ns.forEach(t),PPe=i(f),Fi=n(f,"H2",{class:!0});var qqe=s(Fi);Ch=n(qqe,"A",{id:!0,class:!0,href:!0});var TQr=s(Ch);_ae=n(TQr,"SPAN",{});var MQr=s(_ae);T(mA.$$.fragment,MQr),MQr.forEach(t),TQr.forEach(t),Zio=i(qqe),bae=n(qqe,"SPAN",{});var EQr=s(bae);edo=r(EQr,"AutoProcessor"),EQr.forEach(t),qqe.forEach(t),IPe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(gA.$$.fragment,js),odo=i(js),hA=n(js,"P",{});var Nqe=s(hA);rdo=r(Nqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bP=n(Nqe,"A",{href:!0});var CQr=s(bP);tdo=r(CQr,"AutoProcessor.from_pretrained()"),CQr.forEach(t),ado=r(Nqe," class method."),Nqe.forEach(t),ndo=i(js),pA=n(js,"P",{});var jqe=s(pA);sdo=r(jqe,"This class cannot be instantiated directly using "),vae=n(jqe,"CODE",{});var wQr=s(vae);ldo=r(wQr,"__init__()"),wQr.forEach(t),ido=r(jqe," (throws an error)."),jqe.forEach(t),ddo=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(uA.$$.fragment,Kt),cdo=i(Kt),Fae=n(Kt,"P",{});var AQr=s(Fae);fdo=r(AQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),AQr.forEach(t),mdo=i(Kt),Ti=n(Kt,"P",{});var eK=s(Ti);gdo=r(eK,"The processor class to instantiate is selected based on the "),Tae=n(eK,"CODE",{});var yQr=s(Tae);hdo=r(yQr,"model_type"),yQr.forEach(t),pdo=r(eK,` property of the config object (either
passed as an argument or loaded from `),Mae=n(eK,"CODE",{});var LQr=s(Mae);udo=r(LQr,"pretrained_model_name_or_path"),LQr.forEach(t),_do=r(eK," if possible):"),eK.forEach(t),bdo=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);wh=n(Fe,"LI",{});var gCe=s(wh);Eae=n(gCe,"STRONG",{});var xQr=s(Eae);vdo=r(xQr,"clip"),xQr.forEach(t),Fdo=r(gCe," \u2014 "),vP=n(gCe,"A",{href:!0});var $Qr=s(vP);Tdo=r($Qr,"CLIPProcessor"),$Qr.forEach(t),Mdo=r(gCe," (CLIP model)"),gCe.forEach(t),Edo=i(Fe),Ah=n(Fe,"LI",{});var hCe=s(Ah);Cae=n(hCe,"STRONG",{});var kQr=s(Cae);Cdo=r(kQr,"layoutlmv2"),kQr.forEach(t),wdo=r(hCe," \u2014 "),FP=n(hCe,"A",{href:!0});var SQr=s(FP);Ado=r(SQr,"LayoutLMv2Processor"),SQr.forEach(t),ydo=r(hCe," (LayoutLMv2 model)"),hCe.forEach(t),Ldo=i(Fe),yh=n(Fe,"LI",{});var pCe=s(yh);wae=n(pCe,"STRONG",{});var RQr=s(wae);xdo=r(RQr,"layoutxlm"),RQr.forEach(t),$do=r(pCe," \u2014 "),TP=n(pCe,"A",{href:!0});var BQr=s(TP);kdo=r(BQr,"LayoutXLMProcessor"),BQr.forEach(t),Sdo=r(pCe," (LayoutXLM model)"),pCe.forEach(t),Rdo=i(Fe),Lh=n(Fe,"LI",{});var uCe=s(Lh);Aae=n(uCe,"STRONG",{});var PQr=s(Aae);Bdo=r(PQr,"sew"),PQr.forEach(t),Pdo=r(uCe," \u2014 "),MP=n(uCe,"A",{href:!0});var IQr=s(MP);Ido=r(IQr,"Wav2Vec2Processor"),IQr.forEach(t),qdo=r(uCe," (SEW model)"),uCe.forEach(t),Ndo=i(Fe),xh=n(Fe,"LI",{});var _Ce=s(xh);yae=n(_Ce,"STRONG",{});var qQr=s(yae);jdo=r(qQr,"sew-d"),qQr.forEach(t),Ddo=r(_Ce," \u2014 "),EP=n(_Ce,"A",{href:!0});var NQr=s(EP);Gdo=r(NQr,"Wav2Vec2Processor"),NQr.forEach(t),Odo=r(_Ce," (SEW-D model)"),_Ce.forEach(t),Vdo=i(Fe),$h=n(Fe,"LI",{});var bCe=s($h);Lae=n(bCe,"STRONG",{});var jQr=s(Lae);Xdo=r(jQr,"speech_to_text"),jQr.forEach(t),zdo=r(bCe," \u2014 "),CP=n(bCe,"A",{href:!0});var DQr=s(CP);Qdo=r(DQr,"Speech2TextProcessor"),DQr.forEach(t),Wdo=r(bCe," (Speech2Text model)"),bCe.forEach(t),Hdo=i(Fe),kh=n(Fe,"LI",{});var vCe=s(kh);xae=n(vCe,"STRONG",{});var GQr=s(xae);Udo=r(GQr,"speech_to_text_2"),GQr.forEach(t),Jdo=r(vCe," \u2014 "),wP=n(vCe,"A",{href:!0});var OQr=s(wP);Ydo=r(OQr,"Speech2Text2Processor"),OQr.forEach(t),Kdo=r(vCe," (Speech2Text2 model)"),vCe.forEach(t),Zdo=i(Fe),Sh=n(Fe,"LI",{});var FCe=s(Sh);$ae=n(FCe,"STRONG",{});var VQr=s($ae);eco=r(VQr,"trocr"),VQr.forEach(t),oco=r(FCe," \u2014 "),AP=n(FCe,"A",{href:!0});var XQr=s(AP);rco=r(XQr,"TrOCRProcessor"),XQr.forEach(t),tco=r(FCe," (TrOCR model)"),FCe.forEach(t),aco=i(Fe),Rh=n(Fe,"LI",{});var TCe=s(Rh);kae=n(TCe,"STRONG",{});var zQr=s(kae);nco=r(zQr,"unispeech"),zQr.forEach(t),sco=r(TCe," \u2014 "),yP=n(TCe,"A",{href:!0});var QQr=s(yP);lco=r(QQr,"Wav2Vec2Processor"),QQr.forEach(t),ico=r(TCe," (UniSpeech model)"),TCe.forEach(t),dco=i(Fe),Bh=n(Fe,"LI",{});var MCe=s(Bh);Sae=n(MCe,"STRONG",{});var WQr=s(Sae);cco=r(WQr,"unispeech-sat"),WQr.forEach(t),fco=r(MCe," \u2014 "),LP=n(MCe,"A",{href:!0});var HQr=s(LP);mco=r(HQr,"Wav2Vec2Processor"),HQr.forEach(t),gco=r(MCe," (UniSpeechSat model)"),MCe.forEach(t),hco=i(Fe),Ph=n(Fe,"LI",{});var ECe=s(Ph);Rae=n(ECe,"STRONG",{});var UQr=s(Rae);pco=r(UQr,"vilt"),UQr.forEach(t),uco=r(ECe," \u2014 "),xP=n(ECe,"A",{href:!0});var JQr=s(xP);_co=r(JQr,"ViltProcessor"),JQr.forEach(t),bco=r(ECe," (ViLT model)"),ECe.forEach(t),vco=i(Fe),Ih=n(Fe,"LI",{});var CCe=s(Ih);Bae=n(CCe,"STRONG",{});var YQr=s(Bae);Fco=r(YQr,"vision-text-dual-encoder"),YQr.forEach(t),Tco=r(CCe," \u2014 "),$P=n(CCe,"A",{href:!0});var KQr=s($P);Mco=r(KQr,"VisionTextDualEncoderProcessor"),KQr.forEach(t),Eco=r(CCe," (VisionTextDualEncoder model)"),CCe.forEach(t),Cco=i(Fe),qh=n(Fe,"LI",{});var wCe=s(qh);Pae=n(wCe,"STRONG",{});var ZQr=s(Pae);wco=r(ZQr,"wav2vec2"),ZQr.forEach(t),Aco=r(wCe," \u2014 "),kP=n(wCe,"A",{href:!0});var eWr=s(kP);yco=r(eWr,"Wav2Vec2Processor"),eWr.forEach(t),Lco=r(wCe," (Wav2Vec2 model)"),wCe.forEach(t),xco=i(Fe),Nh=n(Fe,"LI",{});var ACe=s(Nh);Iae=n(ACe,"STRONG",{});var oWr=s(Iae);$co=r(oWr,"wavlm"),oWr.forEach(t),kco=r(ACe," \u2014 "),SP=n(ACe,"A",{href:!0});var rWr=s(SP);Sco=r(rWr,"Wav2Vec2Processor"),rWr.forEach(t),Rco=r(ACe," (WavLM model)"),ACe.forEach(t),Fe.forEach(t),Bco=i(Kt),T(jh.$$.fragment,Kt),Pco=i(Kt),T(Dh.$$.fragment,Kt),Kt.forEach(t),Ico=i(js),Gh=n(js,"DIV",{class:!0});var Dqe=s(Gh);T(_A.$$.fragment,Dqe),qco=i(Dqe),qae=n(Dqe,"P",{});var tWr=s(qae);Nco=r(tWr,"Register a new processor for this class."),tWr.forEach(t),Dqe.forEach(t),js.forEach(t),qPe=i(f),Mi=n(f,"H2",{class:!0});var Gqe=s(Mi);Oh=n(Gqe,"A",{id:!0,class:!0,href:!0});var aWr=s(Oh);Nae=n(aWr,"SPAN",{});var nWr=s(Nae);T(bA.$$.fragment,nWr),nWr.forEach(t),aWr.forEach(t),jco=i(Gqe),jae=n(Gqe,"SPAN",{});var sWr=s(jae);Dco=r(sWr,"AutoModel"),sWr.forEach(t),Gqe.forEach(t),NPe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(vA.$$.fragment,Ds),Gco=i(Ds),Ei=n(Ds,"P",{});var oK=s(Ei);Oco=r(oK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RP=n(oK,"A",{href:!0});var lWr=s(RP);Vco=r(lWr,"from_pretrained()"),lWr.forEach(t),Xco=r(oK," class method or the "),BP=n(oK,"A",{href:!0});var iWr=s(BP);zco=r(iWr,"from_config()"),iWr.forEach(t),Qco=r(oK,` class
method.`),oK.forEach(t),Wco=i(Ds),FA=n(Ds,"P",{});var Oqe=s(FA);Hco=r(Oqe,"This class cannot be instantiated directly using "),Dae=n(Oqe,"CODE",{});var dWr=s(Dae);Uco=r(dWr,"__init__()"),dWr.forEach(t),Jco=r(Oqe," (throws an error)."),Oqe.forEach(t),Yco=i(Ds),ot=n(Ds,"DIV",{class:!0});var UC=s(ot);T(TA.$$.fragment,UC),Kco=i(UC),Gae=n(UC,"P",{});var cWr=s(Gae);Zco=r(cWr,"Instantiates one of the base model classes of the library from a configuration."),cWr.forEach(t),efo=i(UC),Ci=n(UC,"P",{});var rK=s(Ci);ofo=r(rK,`Note:
Loading a model from its configuration file does `),Oae=n(rK,"STRONG",{});var fWr=s(Oae);rfo=r(fWr,"not"),fWr.forEach(t),tfo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PP=n(rK,"A",{href:!0});var mWr=s(PP);afo=r(mWr,"from_pretrained()"),mWr.forEach(t),nfo=r(rK," to load the model weights."),rK.forEach(t),sfo=i(UC),T(Vh.$$.fragment,UC),UC.forEach(t),lfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(MA.$$.fragment,Zt),ifo=i(Zt),Vae=n(Zt,"P",{});var gWr=s(Vae);dfo=r(gWr,"Instantiate one of the base model classes of the library from a pretrained model."),gWr.forEach(t),cfo=i(Zt),Aa=n(Zt,"P",{});var JC=s(Aa);ffo=r(JC,"The model class to instantiate is selected based on the "),Xae=n(JC,"CODE",{});var hWr=s(Xae);mfo=r(hWr,"model_type"),hWr.forEach(t),gfo=r(JC,` property of the config object (either
passed as an argument or loaded from `),zae=n(JC,"CODE",{});var pWr=s(zae);hfo=r(pWr,"pretrained_model_name_or_path"),pWr.forEach(t),pfo=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qae=n(JC,"CODE",{});var uWr=s(Qae);ufo=r(uWr,"pretrained_model_name_or_path"),uWr.forEach(t),_fo=r(JC,":"),JC.forEach(t),bfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Xh=n($,"LI",{});var yCe=s(Xh);Wae=n(yCe,"STRONG",{});var _Wr=s(Wae);vfo=r(_Wr,"albert"),_Wr.forEach(t),Ffo=r(yCe," \u2014 "),IP=n(yCe,"A",{href:!0});var bWr=s(IP);Tfo=r(bWr,"AlbertModel"),bWr.forEach(t),Mfo=r(yCe," (ALBERT model)"),yCe.forEach(t),Efo=i($),zh=n($,"LI",{});var LCe=s(zh);Hae=n(LCe,"STRONG",{});var vWr=s(Hae);Cfo=r(vWr,"bart"),vWr.forEach(t),wfo=r(LCe," \u2014 "),qP=n(LCe,"A",{href:!0});var FWr=s(qP);Afo=r(FWr,"BartModel"),FWr.forEach(t),yfo=r(LCe," (BART model)"),LCe.forEach(t),Lfo=i($),Qh=n($,"LI",{});var xCe=s(Qh);Uae=n(xCe,"STRONG",{});var TWr=s(Uae);xfo=r(TWr,"beit"),TWr.forEach(t),$fo=r(xCe," \u2014 "),NP=n(xCe,"A",{href:!0});var MWr=s(NP);kfo=r(MWr,"BeitModel"),MWr.forEach(t),Sfo=r(xCe," (BEiT model)"),xCe.forEach(t),Rfo=i($),Wh=n($,"LI",{});var $Ce=s(Wh);Jae=n($Ce,"STRONG",{});var EWr=s(Jae);Bfo=r(EWr,"bert"),EWr.forEach(t),Pfo=r($Ce," \u2014 "),jP=n($Ce,"A",{href:!0});var CWr=s(jP);Ifo=r(CWr,"BertModel"),CWr.forEach(t),qfo=r($Ce," (BERT model)"),$Ce.forEach(t),Nfo=i($),Hh=n($,"LI",{});var kCe=s(Hh);Yae=n(kCe,"STRONG",{});var wWr=s(Yae);jfo=r(wWr,"bert-generation"),wWr.forEach(t),Dfo=r(kCe," \u2014 "),DP=n(kCe,"A",{href:!0});var AWr=s(DP);Gfo=r(AWr,"BertGenerationEncoder"),AWr.forEach(t),Ofo=r(kCe," (Bert Generation model)"),kCe.forEach(t),Vfo=i($),Uh=n($,"LI",{});var SCe=s(Uh);Kae=n(SCe,"STRONG",{});var yWr=s(Kae);Xfo=r(yWr,"big_bird"),yWr.forEach(t),zfo=r(SCe," \u2014 "),GP=n(SCe,"A",{href:!0});var LWr=s(GP);Qfo=r(LWr,"BigBirdModel"),LWr.forEach(t),Wfo=r(SCe," (BigBird model)"),SCe.forEach(t),Hfo=i($),Jh=n($,"LI",{});var RCe=s(Jh);Zae=n(RCe,"STRONG",{});var xWr=s(Zae);Ufo=r(xWr,"bigbird_pegasus"),xWr.forEach(t),Jfo=r(RCe," \u2014 "),OP=n(RCe,"A",{href:!0});var $Wr=s(OP);Yfo=r($Wr,"BigBirdPegasusModel"),$Wr.forEach(t),Kfo=r(RCe," (BigBirdPegasus model)"),RCe.forEach(t),Zfo=i($),Yh=n($,"LI",{});var BCe=s(Yh);ene=n(BCe,"STRONG",{});var kWr=s(ene);emo=r(kWr,"blenderbot"),kWr.forEach(t),omo=r(BCe," \u2014 "),VP=n(BCe,"A",{href:!0});var SWr=s(VP);rmo=r(SWr,"BlenderbotModel"),SWr.forEach(t),tmo=r(BCe," (Blenderbot model)"),BCe.forEach(t),amo=i($),Kh=n($,"LI",{});var PCe=s(Kh);one=n(PCe,"STRONG",{});var RWr=s(one);nmo=r(RWr,"blenderbot-small"),RWr.forEach(t),smo=r(PCe," \u2014 "),XP=n(PCe,"A",{href:!0});var BWr=s(XP);lmo=r(BWr,"BlenderbotSmallModel"),BWr.forEach(t),imo=r(PCe," (BlenderbotSmall model)"),PCe.forEach(t),dmo=i($),Zh=n($,"LI",{});var ICe=s(Zh);rne=n(ICe,"STRONG",{});var PWr=s(rne);cmo=r(PWr,"camembert"),PWr.forEach(t),fmo=r(ICe," \u2014 "),zP=n(ICe,"A",{href:!0});var IWr=s(zP);mmo=r(IWr,"CamembertModel"),IWr.forEach(t),gmo=r(ICe," (CamemBERT model)"),ICe.forEach(t),hmo=i($),ep=n($,"LI",{});var qCe=s(ep);tne=n(qCe,"STRONG",{});var qWr=s(tne);pmo=r(qWr,"canine"),qWr.forEach(t),umo=r(qCe," \u2014 "),QP=n(qCe,"A",{href:!0});var NWr=s(QP);_mo=r(NWr,"CanineModel"),NWr.forEach(t),bmo=r(qCe," (Canine model)"),qCe.forEach(t),vmo=i($),op=n($,"LI",{});var NCe=s(op);ane=n(NCe,"STRONG",{});var jWr=s(ane);Fmo=r(jWr,"clip"),jWr.forEach(t),Tmo=r(NCe," \u2014 "),WP=n(NCe,"A",{href:!0});var DWr=s(WP);Mmo=r(DWr,"CLIPModel"),DWr.forEach(t),Emo=r(NCe," (CLIP model)"),NCe.forEach(t),Cmo=i($),rp=n($,"LI",{});var jCe=s(rp);nne=n(jCe,"STRONG",{});var GWr=s(nne);wmo=r(GWr,"convbert"),GWr.forEach(t),Amo=r(jCe," \u2014 "),HP=n(jCe,"A",{href:!0});var OWr=s(HP);ymo=r(OWr,"ConvBertModel"),OWr.forEach(t),Lmo=r(jCe," (ConvBERT model)"),jCe.forEach(t),xmo=i($),tp=n($,"LI",{});var DCe=s(tp);sne=n(DCe,"STRONG",{});var VWr=s(sne);$mo=r(VWr,"convnext"),VWr.forEach(t),kmo=r(DCe," \u2014 "),UP=n(DCe,"A",{href:!0});var XWr=s(UP);Smo=r(XWr,"ConvNextModel"),XWr.forEach(t),Rmo=r(DCe," (ConvNext model)"),DCe.forEach(t),Bmo=i($),ap=n($,"LI",{});var GCe=s(ap);lne=n(GCe,"STRONG",{});var zWr=s(lne);Pmo=r(zWr,"ctrl"),zWr.forEach(t),Imo=r(GCe," \u2014 "),JP=n(GCe,"A",{href:!0});var QWr=s(JP);qmo=r(QWr,"CTRLModel"),QWr.forEach(t),Nmo=r(GCe," (CTRL model)"),GCe.forEach(t),jmo=i($),np=n($,"LI",{});var OCe=s(np);ine=n(OCe,"STRONG",{});var WWr=s(ine);Dmo=r(WWr,"data2vec-audio"),WWr.forEach(t),Gmo=r(OCe," \u2014 "),YP=n(OCe,"A",{href:!0});var HWr=s(YP);Omo=r(HWr,"Data2VecAudioModel"),HWr.forEach(t),Vmo=r(OCe," (Data2VecAudio model)"),OCe.forEach(t),Xmo=i($),sp=n($,"LI",{});var VCe=s(sp);dne=n(VCe,"STRONG",{});var UWr=s(dne);zmo=r(UWr,"data2vec-text"),UWr.forEach(t),Qmo=r(VCe," \u2014 "),KP=n(VCe,"A",{href:!0});var JWr=s(KP);Wmo=r(JWr,"Data2VecTextModel"),JWr.forEach(t),Hmo=r(VCe," (Data2VecText model)"),VCe.forEach(t),Umo=i($),lp=n($,"LI",{});var XCe=s(lp);cne=n(XCe,"STRONG",{});var YWr=s(cne);Jmo=r(YWr,"data2vec-vision"),YWr.forEach(t),Ymo=r(XCe," \u2014 "),ZP=n(XCe,"A",{href:!0});var KWr=s(ZP);Kmo=r(KWr,"Data2VecVisionModel"),KWr.forEach(t),Zmo=r(XCe," (Data2VecVision model)"),XCe.forEach(t),ego=i($),ip=n($,"LI",{});var zCe=s(ip);fne=n(zCe,"STRONG",{});var ZWr=s(fne);ogo=r(ZWr,"deberta"),ZWr.forEach(t),rgo=r(zCe," \u2014 "),eI=n(zCe,"A",{href:!0});var eHr=s(eI);tgo=r(eHr,"DebertaModel"),eHr.forEach(t),ago=r(zCe," (DeBERTa model)"),zCe.forEach(t),ngo=i($),dp=n($,"LI",{});var QCe=s(dp);mne=n(QCe,"STRONG",{});var oHr=s(mne);sgo=r(oHr,"deberta-v2"),oHr.forEach(t),lgo=r(QCe," \u2014 "),oI=n(QCe,"A",{href:!0});var rHr=s(oI);igo=r(rHr,"DebertaV2Model"),rHr.forEach(t),dgo=r(QCe," (DeBERTa-v2 model)"),QCe.forEach(t),cgo=i($),cp=n($,"LI",{});var WCe=s(cp);gne=n(WCe,"STRONG",{});var tHr=s(gne);fgo=r(tHr,"decision_transformer"),tHr.forEach(t),mgo=r(WCe," \u2014 "),rI=n(WCe,"A",{href:!0});var aHr=s(rI);ggo=r(aHr,"DecisionTransformerModel"),aHr.forEach(t),hgo=r(WCe," (Decision Transformer model)"),WCe.forEach(t),pgo=i($),fp=n($,"LI",{});var HCe=s(fp);hne=n(HCe,"STRONG",{});var nHr=s(hne);ugo=r(nHr,"deit"),nHr.forEach(t),_go=r(HCe," \u2014 "),tI=n(HCe,"A",{href:!0});var sHr=s(tI);bgo=r(sHr,"DeiTModel"),sHr.forEach(t),vgo=r(HCe," (DeiT model)"),HCe.forEach(t),Fgo=i($),mp=n($,"LI",{});var UCe=s(mp);pne=n(UCe,"STRONG",{});var lHr=s(pne);Tgo=r(lHr,"detr"),lHr.forEach(t),Mgo=r(UCe," \u2014 "),aI=n(UCe,"A",{href:!0});var iHr=s(aI);Ego=r(iHr,"DetrModel"),iHr.forEach(t),Cgo=r(UCe," (DETR model)"),UCe.forEach(t),wgo=i($),gp=n($,"LI",{});var JCe=s(gp);une=n(JCe,"STRONG",{});var dHr=s(une);Ago=r(dHr,"distilbert"),dHr.forEach(t),ygo=r(JCe," \u2014 "),nI=n(JCe,"A",{href:!0});var cHr=s(nI);Lgo=r(cHr,"DistilBertModel"),cHr.forEach(t),xgo=r(JCe," (DistilBERT model)"),JCe.forEach(t),$go=i($),hp=n($,"LI",{});var YCe=s(hp);_ne=n(YCe,"STRONG",{});var fHr=s(_ne);kgo=r(fHr,"dpr"),fHr.forEach(t),Sgo=r(YCe," \u2014 "),sI=n(YCe,"A",{href:!0});var mHr=s(sI);Rgo=r(mHr,"DPRQuestionEncoder"),mHr.forEach(t),Bgo=r(YCe," (DPR model)"),YCe.forEach(t),Pgo=i($),pp=n($,"LI",{});var KCe=s(pp);bne=n(KCe,"STRONG",{});var gHr=s(bne);Igo=r(gHr,"dpt"),gHr.forEach(t),qgo=r(KCe," \u2014 "),lI=n(KCe,"A",{href:!0});var hHr=s(lI);Ngo=r(hHr,"DPTModel"),hHr.forEach(t),jgo=r(KCe," (DPT model)"),KCe.forEach(t),Dgo=i($),up=n($,"LI",{});var ZCe=s(up);vne=n(ZCe,"STRONG",{});var pHr=s(vne);Ggo=r(pHr,"electra"),pHr.forEach(t),Ogo=r(ZCe," \u2014 "),iI=n(ZCe,"A",{href:!0});var uHr=s(iI);Vgo=r(uHr,"ElectraModel"),uHr.forEach(t),Xgo=r(ZCe," (ELECTRA model)"),ZCe.forEach(t),zgo=i($),_p=n($,"LI",{});var e3e=s(_p);Fne=n(e3e,"STRONG",{});var _Hr=s(Fne);Qgo=r(_Hr,"flaubert"),_Hr.forEach(t),Wgo=r(e3e," \u2014 "),dI=n(e3e,"A",{href:!0});var bHr=s(dI);Hgo=r(bHr,"FlaubertModel"),bHr.forEach(t),Ugo=r(e3e," (FlauBERT model)"),e3e.forEach(t),Jgo=i($),bp=n($,"LI",{});var o3e=s(bp);Tne=n(o3e,"STRONG",{});var vHr=s(Tne);Ygo=r(vHr,"fnet"),vHr.forEach(t),Kgo=r(o3e," \u2014 "),cI=n(o3e,"A",{href:!0});var FHr=s(cI);Zgo=r(FHr,"FNetModel"),FHr.forEach(t),eho=r(o3e," (FNet model)"),o3e.forEach(t),oho=i($),vp=n($,"LI",{});var r3e=s(vp);Mne=n(r3e,"STRONG",{});var THr=s(Mne);rho=r(THr,"fsmt"),THr.forEach(t),tho=r(r3e," \u2014 "),fI=n(r3e,"A",{href:!0});var MHr=s(fI);aho=r(MHr,"FSMTModel"),MHr.forEach(t),nho=r(r3e," (FairSeq Machine-Translation model)"),r3e.forEach(t),sho=i($),Rs=n($,"LI",{});var l$=s(Rs);Ene=n(l$,"STRONG",{});var EHr=s(Ene);lho=r(EHr,"funnel"),EHr.forEach(t),iho=r(l$," \u2014 "),mI=n(l$,"A",{href:!0});var CHr=s(mI);dho=r(CHr,"FunnelModel"),CHr.forEach(t),cho=r(l$," or "),gI=n(l$,"A",{href:!0});var wHr=s(gI);fho=r(wHr,"FunnelBaseModel"),wHr.forEach(t),mho=r(l$," (Funnel Transformer model)"),l$.forEach(t),gho=i($),Fp=n($,"LI",{});var t3e=s(Fp);Cne=n(t3e,"STRONG",{});var AHr=s(Cne);hho=r(AHr,"glpn"),AHr.forEach(t),pho=r(t3e," \u2014 "),hI=n(t3e,"A",{href:!0});var yHr=s(hI);uho=r(yHr,"GLPNModel"),yHr.forEach(t),_ho=r(t3e," (GLPN model)"),t3e.forEach(t),bho=i($),Tp=n($,"LI",{});var a3e=s(Tp);wne=n(a3e,"STRONG",{});var LHr=s(wne);vho=r(LHr,"gpt2"),LHr.forEach(t),Fho=r(a3e," \u2014 "),pI=n(a3e,"A",{href:!0});var xHr=s(pI);Tho=r(xHr,"GPT2Model"),xHr.forEach(t),Mho=r(a3e," (OpenAI GPT-2 model)"),a3e.forEach(t),Eho=i($),Mp=n($,"LI",{});var n3e=s(Mp);Ane=n(n3e,"STRONG",{});var $Hr=s(Ane);Cho=r($Hr,"gpt_neo"),$Hr.forEach(t),who=r(n3e," \u2014 "),uI=n(n3e,"A",{href:!0});var kHr=s(uI);Aho=r(kHr,"GPTNeoModel"),kHr.forEach(t),yho=r(n3e," (GPT Neo model)"),n3e.forEach(t),Lho=i($),Ep=n($,"LI",{});var s3e=s(Ep);yne=n(s3e,"STRONG",{});var SHr=s(yne);xho=r(SHr,"gptj"),SHr.forEach(t),$ho=r(s3e," \u2014 "),_I=n(s3e,"A",{href:!0});var RHr=s(_I);kho=r(RHr,"GPTJModel"),RHr.forEach(t),Sho=r(s3e," (GPT-J model)"),s3e.forEach(t),Rho=i($),Cp=n($,"LI",{});var l3e=s(Cp);Lne=n(l3e,"STRONG",{});var BHr=s(Lne);Bho=r(BHr,"hubert"),BHr.forEach(t),Pho=r(l3e," \u2014 "),bI=n(l3e,"A",{href:!0});var PHr=s(bI);Iho=r(PHr,"HubertModel"),PHr.forEach(t),qho=r(l3e," (Hubert model)"),l3e.forEach(t),Nho=i($),wp=n($,"LI",{});var i3e=s(wp);xne=n(i3e,"STRONG",{});var IHr=s(xne);jho=r(IHr,"ibert"),IHr.forEach(t),Dho=r(i3e," \u2014 "),vI=n(i3e,"A",{href:!0});var qHr=s(vI);Gho=r(qHr,"IBertModel"),qHr.forEach(t),Oho=r(i3e," (I-BERT model)"),i3e.forEach(t),Vho=i($),Ap=n($,"LI",{});var d3e=s(Ap);$ne=n(d3e,"STRONG",{});var NHr=s($ne);Xho=r(NHr,"imagegpt"),NHr.forEach(t),zho=r(d3e," \u2014 "),FI=n(d3e,"A",{href:!0});var jHr=s(FI);Qho=r(jHr,"ImageGPTModel"),jHr.forEach(t),Who=r(d3e," (ImageGPT model)"),d3e.forEach(t),Hho=i($),yp=n($,"LI",{});var c3e=s(yp);kne=n(c3e,"STRONG",{});var DHr=s(kne);Uho=r(DHr,"layoutlm"),DHr.forEach(t),Jho=r(c3e," \u2014 "),TI=n(c3e,"A",{href:!0});var GHr=s(TI);Yho=r(GHr,"LayoutLMModel"),GHr.forEach(t),Kho=r(c3e," (LayoutLM model)"),c3e.forEach(t),Zho=i($),Lp=n($,"LI",{});var f3e=s(Lp);Sne=n(f3e,"STRONG",{});var OHr=s(Sne);epo=r(OHr,"layoutlmv2"),OHr.forEach(t),opo=r(f3e," \u2014 "),MI=n(f3e,"A",{href:!0});var VHr=s(MI);rpo=r(VHr,"LayoutLMv2Model"),VHr.forEach(t),tpo=r(f3e," (LayoutLMv2 model)"),f3e.forEach(t),apo=i($),xp=n($,"LI",{});var m3e=s(xp);Rne=n(m3e,"STRONG",{});var XHr=s(Rne);npo=r(XHr,"led"),XHr.forEach(t),spo=r(m3e," \u2014 "),EI=n(m3e,"A",{href:!0});var zHr=s(EI);lpo=r(zHr,"LEDModel"),zHr.forEach(t),ipo=r(m3e," (LED model)"),m3e.forEach(t),dpo=i($),$p=n($,"LI",{});var g3e=s($p);Bne=n(g3e,"STRONG",{});var QHr=s(Bne);cpo=r(QHr,"longformer"),QHr.forEach(t),fpo=r(g3e," \u2014 "),CI=n(g3e,"A",{href:!0});var WHr=s(CI);mpo=r(WHr,"LongformerModel"),WHr.forEach(t),gpo=r(g3e," (Longformer model)"),g3e.forEach(t),hpo=i($),kp=n($,"LI",{});var h3e=s(kp);Pne=n(h3e,"STRONG",{});var HHr=s(Pne);ppo=r(HHr,"luke"),HHr.forEach(t),upo=r(h3e," \u2014 "),wI=n(h3e,"A",{href:!0});var UHr=s(wI);_po=r(UHr,"LukeModel"),UHr.forEach(t),bpo=r(h3e," (LUKE model)"),h3e.forEach(t),vpo=i($),Sp=n($,"LI",{});var p3e=s(Sp);Ine=n(p3e,"STRONG",{});var JHr=s(Ine);Fpo=r(JHr,"lxmert"),JHr.forEach(t),Tpo=r(p3e," \u2014 "),AI=n(p3e,"A",{href:!0});var YHr=s(AI);Mpo=r(YHr,"LxmertModel"),YHr.forEach(t),Epo=r(p3e," (LXMERT model)"),p3e.forEach(t),Cpo=i($),Rp=n($,"LI",{});var u3e=s(Rp);qne=n(u3e,"STRONG",{});var KHr=s(qne);wpo=r(KHr,"m2m_100"),KHr.forEach(t),Apo=r(u3e," \u2014 "),yI=n(u3e,"A",{href:!0});var ZHr=s(yI);ypo=r(ZHr,"M2M100Model"),ZHr.forEach(t),Lpo=r(u3e," (M2M100 model)"),u3e.forEach(t),xpo=i($),Bp=n($,"LI",{});var _3e=s(Bp);Nne=n(_3e,"STRONG",{});var eUr=s(Nne);$po=r(eUr,"marian"),eUr.forEach(t),kpo=r(_3e," \u2014 "),LI=n(_3e,"A",{href:!0});var oUr=s(LI);Spo=r(oUr,"MarianModel"),oUr.forEach(t),Rpo=r(_3e," (Marian model)"),_3e.forEach(t),Bpo=i($),Pp=n($,"LI",{});var b3e=s(Pp);jne=n(b3e,"STRONG",{});var rUr=s(jne);Ppo=r(rUr,"maskformer"),rUr.forEach(t),Ipo=r(b3e," \u2014 "),xI=n(b3e,"A",{href:!0});var tUr=s(xI);qpo=r(tUr,"MaskFormerModel"),tUr.forEach(t),Npo=r(b3e," (MaskFormer model)"),b3e.forEach(t),jpo=i($),Ip=n($,"LI",{});var v3e=s(Ip);Dne=n(v3e,"STRONG",{});var aUr=s(Dne);Dpo=r(aUr,"mbart"),aUr.forEach(t),Gpo=r(v3e," \u2014 "),$I=n(v3e,"A",{href:!0});var nUr=s($I);Opo=r(nUr,"MBartModel"),nUr.forEach(t),Vpo=r(v3e," (mBART model)"),v3e.forEach(t),Xpo=i($),qp=n($,"LI",{});var F3e=s(qp);Gne=n(F3e,"STRONG",{});var sUr=s(Gne);zpo=r(sUr,"megatron-bert"),sUr.forEach(t),Qpo=r(F3e," \u2014 "),kI=n(F3e,"A",{href:!0});var lUr=s(kI);Wpo=r(lUr,"MegatronBertModel"),lUr.forEach(t),Hpo=r(F3e," (MegatronBert model)"),F3e.forEach(t),Upo=i($),Np=n($,"LI",{});var T3e=s(Np);One=n(T3e,"STRONG",{});var iUr=s(One);Jpo=r(iUr,"mobilebert"),iUr.forEach(t),Ypo=r(T3e," \u2014 "),SI=n(T3e,"A",{href:!0});var dUr=s(SI);Kpo=r(dUr,"MobileBertModel"),dUr.forEach(t),Zpo=r(T3e," (MobileBERT model)"),T3e.forEach(t),euo=i($),jp=n($,"LI",{});var M3e=s(jp);Vne=n(M3e,"STRONG",{});var cUr=s(Vne);ouo=r(cUr,"mpnet"),cUr.forEach(t),ruo=r(M3e," \u2014 "),RI=n(M3e,"A",{href:!0});var fUr=s(RI);tuo=r(fUr,"MPNetModel"),fUr.forEach(t),auo=r(M3e," (MPNet model)"),M3e.forEach(t),nuo=i($),Dp=n($,"LI",{});var E3e=s(Dp);Xne=n(E3e,"STRONG",{});var mUr=s(Xne);suo=r(mUr,"mt5"),mUr.forEach(t),luo=r(E3e," \u2014 "),BI=n(E3e,"A",{href:!0});var gUr=s(BI);iuo=r(gUr,"MT5Model"),gUr.forEach(t),duo=r(E3e," (mT5 model)"),E3e.forEach(t),cuo=i($),Gp=n($,"LI",{});var C3e=s(Gp);zne=n(C3e,"STRONG",{});var hUr=s(zne);fuo=r(hUr,"nystromformer"),hUr.forEach(t),muo=r(C3e," \u2014 "),PI=n(C3e,"A",{href:!0});var pUr=s(PI);guo=r(pUr,"NystromformerModel"),pUr.forEach(t),huo=r(C3e," (Nystromformer model)"),C3e.forEach(t),puo=i($),Op=n($,"LI",{});var w3e=s(Op);Qne=n(w3e,"STRONG",{});var uUr=s(Qne);uuo=r(uUr,"openai-gpt"),uUr.forEach(t),_uo=r(w3e," \u2014 "),II=n(w3e,"A",{href:!0});var _Ur=s(II);buo=r(_Ur,"OpenAIGPTModel"),_Ur.forEach(t),vuo=r(w3e," (OpenAI GPT model)"),w3e.forEach(t),Fuo=i($),Vp=n($,"LI",{});var A3e=s(Vp);Wne=n(A3e,"STRONG",{});var bUr=s(Wne);Tuo=r(bUr,"opt"),bUr.forEach(t),Muo=r(A3e," \u2014 "),qI=n(A3e,"A",{href:!0});var vUr=s(qI);Euo=r(vUr,"OPTModel"),vUr.forEach(t),Cuo=r(A3e," (OPT model)"),A3e.forEach(t),wuo=i($),Xp=n($,"LI",{});var y3e=s(Xp);Hne=n(y3e,"STRONG",{});var FUr=s(Hne);Auo=r(FUr,"pegasus"),FUr.forEach(t),yuo=r(y3e," \u2014 "),NI=n(y3e,"A",{href:!0});var TUr=s(NI);Luo=r(TUr,"PegasusModel"),TUr.forEach(t),xuo=r(y3e," (Pegasus model)"),y3e.forEach(t),$uo=i($),zp=n($,"LI",{});var L3e=s(zp);Une=n(L3e,"STRONG",{});var MUr=s(Une);kuo=r(MUr,"perceiver"),MUr.forEach(t),Suo=r(L3e," \u2014 "),jI=n(L3e,"A",{href:!0});var EUr=s(jI);Ruo=r(EUr,"PerceiverModel"),EUr.forEach(t),Buo=r(L3e," (Perceiver model)"),L3e.forEach(t),Puo=i($),Qp=n($,"LI",{});var x3e=s(Qp);Jne=n(x3e,"STRONG",{});var CUr=s(Jne);Iuo=r(CUr,"plbart"),CUr.forEach(t),quo=r(x3e," \u2014 "),DI=n(x3e,"A",{href:!0});var wUr=s(DI);Nuo=r(wUr,"PLBartModel"),wUr.forEach(t),juo=r(x3e," (PLBart model)"),x3e.forEach(t),Duo=i($),Wp=n($,"LI",{});var $3e=s(Wp);Yne=n($3e,"STRONG",{});var AUr=s(Yne);Guo=r(AUr,"poolformer"),AUr.forEach(t),Ouo=r($3e," \u2014 "),GI=n($3e,"A",{href:!0});var yUr=s(GI);Vuo=r(yUr,"PoolFormerModel"),yUr.forEach(t),Xuo=r($3e," (PoolFormer model)"),$3e.forEach(t),zuo=i($),Hp=n($,"LI",{});var k3e=s(Hp);Kne=n(k3e,"STRONG",{});var LUr=s(Kne);Quo=r(LUr,"prophetnet"),LUr.forEach(t),Wuo=r(k3e," \u2014 "),OI=n(k3e,"A",{href:!0});var xUr=s(OI);Huo=r(xUr,"ProphetNetModel"),xUr.forEach(t),Uuo=r(k3e," (ProphetNet model)"),k3e.forEach(t),Juo=i($),Up=n($,"LI",{});var S3e=s(Up);Zne=n(S3e,"STRONG",{});var $Ur=s(Zne);Yuo=r($Ur,"qdqbert"),$Ur.forEach(t),Kuo=r(S3e," \u2014 "),VI=n(S3e,"A",{href:!0});var kUr=s(VI);Zuo=r(kUr,"QDQBertModel"),kUr.forEach(t),e_o=r(S3e," (QDQBert model)"),S3e.forEach(t),o_o=i($),Jp=n($,"LI",{});var R3e=s(Jp);ese=n(R3e,"STRONG",{});var SUr=s(ese);r_o=r(SUr,"reformer"),SUr.forEach(t),t_o=r(R3e," \u2014 "),XI=n(R3e,"A",{href:!0});var RUr=s(XI);a_o=r(RUr,"ReformerModel"),RUr.forEach(t),n_o=r(R3e," (Reformer model)"),R3e.forEach(t),s_o=i($),Yp=n($,"LI",{});var B3e=s(Yp);ose=n(B3e,"STRONG",{});var BUr=s(ose);l_o=r(BUr,"regnet"),BUr.forEach(t),i_o=r(B3e," \u2014 "),zI=n(B3e,"A",{href:!0});var PUr=s(zI);d_o=r(PUr,"RegNetModel"),PUr.forEach(t),c_o=r(B3e," (RegNet model)"),B3e.forEach(t),f_o=i($),Kp=n($,"LI",{});var P3e=s(Kp);rse=n(P3e,"STRONG",{});var IUr=s(rse);m_o=r(IUr,"rembert"),IUr.forEach(t),g_o=r(P3e," \u2014 "),QI=n(P3e,"A",{href:!0});var qUr=s(QI);h_o=r(qUr,"RemBertModel"),qUr.forEach(t),p_o=r(P3e," (RemBERT model)"),P3e.forEach(t),u_o=i($),Zp=n($,"LI",{});var I3e=s(Zp);tse=n(I3e,"STRONG",{});var NUr=s(tse);__o=r(NUr,"resnet"),NUr.forEach(t),b_o=r(I3e," \u2014 "),WI=n(I3e,"A",{href:!0});var jUr=s(WI);v_o=r(jUr,"ResNetModel"),jUr.forEach(t),F_o=r(I3e," (ResNet model)"),I3e.forEach(t),T_o=i($),eu=n($,"LI",{});var q3e=s(eu);ase=n(q3e,"STRONG",{});var DUr=s(ase);M_o=r(DUr,"retribert"),DUr.forEach(t),E_o=r(q3e," \u2014 "),HI=n(q3e,"A",{href:!0});var GUr=s(HI);C_o=r(GUr,"RetriBertModel"),GUr.forEach(t),w_o=r(q3e," (RetriBERT model)"),q3e.forEach(t),A_o=i($),ou=n($,"LI",{});var N3e=s(ou);nse=n(N3e,"STRONG",{});var OUr=s(nse);y_o=r(OUr,"roberta"),OUr.forEach(t),L_o=r(N3e," \u2014 "),UI=n(N3e,"A",{href:!0});var VUr=s(UI);x_o=r(VUr,"RobertaModel"),VUr.forEach(t),$_o=r(N3e," (RoBERTa model)"),N3e.forEach(t),k_o=i($),ru=n($,"LI",{});var j3e=s(ru);sse=n(j3e,"STRONG",{});var XUr=s(sse);S_o=r(XUr,"roformer"),XUr.forEach(t),R_o=r(j3e," \u2014 "),JI=n(j3e,"A",{href:!0});var zUr=s(JI);B_o=r(zUr,"RoFormerModel"),zUr.forEach(t),P_o=r(j3e," (RoFormer model)"),j3e.forEach(t),I_o=i($),tu=n($,"LI",{});var D3e=s(tu);lse=n(D3e,"STRONG",{});var QUr=s(lse);q_o=r(QUr,"segformer"),QUr.forEach(t),N_o=r(D3e," \u2014 "),YI=n(D3e,"A",{href:!0});var WUr=s(YI);j_o=r(WUr,"SegformerModel"),WUr.forEach(t),D_o=r(D3e," (SegFormer model)"),D3e.forEach(t),G_o=i($),au=n($,"LI",{});var G3e=s(au);ise=n(G3e,"STRONG",{});var HUr=s(ise);O_o=r(HUr,"sew"),HUr.forEach(t),V_o=r(G3e," \u2014 "),KI=n(G3e,"A",{href:!0});var UUr=s(KI);X_o=r(UUr,"SEWModel"),UUr.forEach(t),z_o=r(G3e," (SEW model)"),G3e.forEach(t),Q_o=i($),nu=n($,"LI",{});var O3e=s(nu);dse=n(O3e,"STRONG",{});var JUr=s(dse);W_o=r(JUr,"sew-d"),JUr.forEach(t),H_o=r(O3e," \u2014 "),ZI=n(O3e,"A",{href:!0});var YUr=s(ZI);U_o=r(YUr,"SEWDModel"),YUr.forEach(t),J_o=r(O3e," (SEW-D model)"),O3e.forEach(t),Y_o=i($),su=n($,"LI",{});var V3e=s(su);cse=n(V3e,"STRONG",{});var KUr=s(cse);K_o=r(KUr,"speech_to_text"),KUr.forEach(t),Z_o=r(V3e," \u2014 "),eq=n(V3e,"A",{href:!0});var ZUr=s(eq);e1o=r(ZUr,"Speech2TextModel"),ZUr.forEach(t),o1o=r(V3e," (Speech2Text model)"),V3e.forEach(t),r1o=i($),lu=n($,"LI",{});var X3e=s(lu);fse=n(X3e,"STRONG",{});var eJr=s(fse);t1o=r(eJr,"splinter"),eJr.forEach(t),a1o=r(X3e," \u2014 "),oq=n(X3e,"A",{href:!0});var oJr=s(oq);n1o=r(oJr,"SplinterModel"),oJr.forEach(t),s1o=r(X3e," (Splinter model)"),X3e.forEach(t),l1o=i($),iu=n($,"LI",{});var z3e=s(iu);mse=n(z3e,"STRONG",{});var rJr=s(mse);i1o=r(rJr,"squeezebert"),rJr.forEach(t),d1o=r(z3e," \u2014 "),rq=n(z3e,"A",{href:!0});var tJr=s(rq);c1o=r(tJr,"SqueezeBertModel"),tJr.forEach(t),f1o=r(z3e," (SqueezeBERT model)"),z3e.forEach(t),m1o=i($),du=n($,"LI",{});var Q3e=s(du);gse=n(Q3e,"STRONG",{});var aJr=s(gse);g1o=r(aJr,"swin"),aJr.forEach(t),h1o=r(Q3e," \u2014 "),tq=n(Q3e,"A",{href:!0});var nJr=s(tq);p1o=r(nJr,"SwinModel"),nJr.forEach(t),u1o=r(Q3e," (Swin model)"),Q3e.forEach(t),_1o=i($),cu=n($,"LI",{});var W3e=s(cu);hse=n(W3e,"STRONG",{});var sJr=s(hse);b1o=r(sJr,"t5"),sJr.forEach(t),v1o=r(W3e," \u2014 "),aq=n(W3e,"A",{href:!0});var lJr=s(aq);F1o=r(lJr,"T5Model"),lJr.forEach(t),T1o=r(W3e," (T5 model)"),W3e.forEach(t),M1o=i($),fu=n($,"LI",{});var H3e=s(fu);pse=n(H3e,"STRONG",{});var iJr=s(pse);E1o=r(iJr,"tapas"),iJr.forEach(t),C1o=r(H3e," \u2014 "),nq=n(H3e,"A",{href:!0});var dJr=s(nq);w1o=r(dJr,"TapasModel"),dJr.forEach(t),A1o=r(H3e," (TAPAS model)"),H3e.forEach(t),y1o=i($),mu=n($,"LI",{});var U3e=s(mu);use=n(U3e,"STRONG",{});var cJr=s(use);L1o=r(cJr,"transfo-xl"),cJr.forEach(t),x1o=r(U3e," \u2014 "),sq=n(U3e,"A",{href:!0});var fJr=s(sq);$1o=r(fJr,"TransfoXLModel"),fJr.forEach(t),k1o=r(U3e," (Transformer-XL model)"),U3e.forEach(t),S1o=i($),gu=n($,"LI",{});var J3e=s(gu);_se=n(J3e,"STRONG",{});var mJr=s(_se);R1o=r(mJr,"unispeech"),mJr.forEach(t),B1o=r(J3e," \u2014 "),lq=n(J3e,"A",{href:!0});var gJr=s(lq);P1o=r(gJr,"UniSpeechModel"),gJr.forEach(t),I1o=r(J3e," (UniSpeech model)"),J3e.forEach(t),q1o=i($),hu=n($,"LI",{});var Y3e=s(hu);bse=n(Y3e,"STRONG",{});var hJr=s(bse);N1o=r(hJr,"unispeech-sat"),hJr.forEach(t),j1o=r(Y3e," \u2014 "),iq=n(Y3e,"A",{href:!0});var pJr=s(iq);D1o=r(pJr,"UniSpeechSatModel"),pJr.forEach(t),G1o=r(Y3e," (UniSpeechSat model)"),Y3e.forEach(t),O1o=i($),pu=n($,"LI",{});var K3e=s(pu);vse=n(K3e,"STRONG",{});var uJr=s(vse);V1o=r(uJr,"van"),uJr.forEach(t),X1o=r(K3e," \u2014 "),dq=n(K3e,"A",{href:!0});var _Jr=s(dq);z1o=r(_Jr,"VanModel"),_Jr.forEach(t),Q1o=r(K3e," (VAN model)"),K3e.forEach(t),W1o=i($),uu=n($,"LI",{});var Z3e=s(uu);Fse=n(Z3e,"STRONG",{});var bJr=s(Fse);H1o=r(bJr,"vilt"),bJr.forEach(t),U1o=r(Z3e," \u2014 "),cq=n(Z3e,"A",{href:!0});var vJr=s(cq);J1o=r(vJr,"ViltModel"),vJr.forEach(t),Y1o=r(Z3e," (ViLT model)"),Z3e.forEach(t),K1o=i($),_u=n($,"LI",{});var ewe=s(_u);Tse=n(ewe,"STRONG",{});var FJr=s(Tse);Z1o=r(FJr,"vision-text-dual-encoder"),FJr.forEach(t),e8o=r(ewe," \u2014 "),fq=n(ewe,"A",{href:!0});var TJr=s(fq);o8o=r(TJr,"VisionTextDualEncoderModel"),TJr.forEach(t),r8o=r(ewe," (VisionTextDualEncoder model)"),ewe.forEach(t),t8o=i($),bu=n($,"LI",{});var owe=s(bu);Mse=n(owe,"STRONG",{});var MJr=s(Mse);a8o=r(MJr,"visual_bert"),MJr.forEach(t),n8o=r(owe," \u2014 "),mq=n(owe,"A",{href:!0});var EJr=s(mq);s8o=r(EJr,"VisualBertModel"),EJr.forEach(t),l8o=r(owe," (VisualBert model)"),owe.forEach(t),i8o=i($),vu=n($,"LI",{});var rwe=s(vu);Ese=n(rwe,"STRONG",{});var CJr=s(Ese);d8o=r(CJr,"vit"),CJr.forEach(t),c8o=r(rwe," \u2014 "),gq=n(rwe,"A",{href:!0});var wJr=s(gq);f8o=r(wJr,"ViTModel"),wJr.forEach(t),m8o=r(rwe," (ViT model)"),rwe.forEach(t),g8o=i($),Fu=n($,"LI",{});var twe=s(Fu);Cse=n(twe,"STRONG",{});var AJr=s(Cse);h8o=r(AJr,"vit_mae"),AJr.forEach(t),p8o=r(twe," \u2014 "),hq=n(twe,"A",{href:!0});var yJr=s(hq);u8o=r(yJr,"ViTMAEModel"),yJr.forEach(t),_8o=r(twe," (ViTMAE model)"),twe.forEach(t),b8o=i($),Tu=n($,"LI",{});var awe=s(Tu);wse=n(awe,"STRONG",{});var LJr=s(wse);v8o=r(LJr,"wav2vec2"),LJr.forEach(t),F8o=r(awe," \u2014 "),pq=n(awe,"A",{href:!0});var xJr=s(pq);T8o=r(xJr,"Wav2Vec2Model"),xJr.forEach(t),M8o=r(awe," (Wav2Vec2 model)"),awe.forEach(t),E8o=i($),Mu=n($,"LI",{});var nwe=s(Mu);Ase=n(nwe,"STRONG",{});var $Jr=s(Ase);C8o=r($Jr,"wavlm"),$Jr.forEach(t),w8o=r(nwe," \u2014 "),uq=n(nwe,"A",{href:!0});var kJr=s(uq);A8o=r(kJr,"WavLMModel"),kJr.forEach(t),y8o=r(nwe," (WavLM model)"),nwe.forEach(t),L8o=i($),Eu=n($,"LI",{});var swe=s(Eu);yse=n(swe,"STRONG",{});var SJr=s(yse);x8o=r(SJr,"xglm"),SJr.forEach(t),$8o=r(swe," \u2014 "),_q=n(swe,"A",{href:!0});var RJr=s(_q);k8o=r(RJr,"XGLMModel"),RJr.forEach(t),S8o=r(swe," (XGLM model)"),swe.forEach(t),R8o=i($),Cu=n($,"LI",{});var lwe=s(Cu);Lse=n(lwe,"STRONG",{});var BJr=s(Lse);B8o=r(BJr,"xlm"),BJr.forEach(t),P8o=r(lwe," \u2014 "),bq=n(lwe,"A",{href:!0});var PJr=s(bq);I8o=r(PJr,"XLMModel"),PJr.forEach(t),q8o=r(lwe," (XLM model)"),lwe.forEach(t),N8o=i($),wu=n($,"LI",{});var iwe=s(wu);xse=n(iwe,"STRONG",{});var IJr=s(xse);j8o=r(IJr,"xlm-prophetnet"),IJr.forEach(t),D8o=r(iwe," \u2014 "),vq=n(iwe,"A",{href:!0});var qJr=s(vq);G8o=r(qJr,"XLMProphetNetModel"),qJr.forEach(t),O8o=r(iwe," (XLMProphetNet model)"),iwe.forEach(t),V8o=i($),Au=n($,"LI",{});var dwe=s(Au);$se=n(dwe,"STRONG",{});var NJr=s($se);X8o=r(NJr,"xlm-roberta"),NJr.forEach(t),z8o=r(dwe," \u2014 "),Fq=n(dwe,"A",{href:!0});var jJr=s(Fq);Q8o=r(jJr,"XLMRobertaModel"),jJr.forEach(t),W8o=r(dwe," (XLM-RoBERTa model)"),dwe.forEach(t),H8o=i($),yu=n($,"LI",{});var cwe=s(yu);kse=n(cwe,"STRONG",{});var DJr=s(kse);U8o=r(DJr,"xlm-roberta-xl"),DJr.forEach(t),J8o=r(cwe," \u2014 "),Tq=n(cwe,"A",{href:!0});var GJr=s(Tq);Y8o=r(GJr,"XLMRobertaXLModel"),GJr.forEach(t),K8o=r(cwe," (XLM-RoBERTa-XL model)"),cwe.forEach(t),Z8o=i($),Lu=n($,"LI",{});var fwe=s(Lu);Sse=n(fwe,"STRONG",{});var OJr=s(Sse);ebo=r(OJr,"xlnet"),OJr.forEach(t),obo=r(fwe," \u2014 "),Mq=n(fwe,"A",{href:!0});var VJr=s(Mq);rbo=r(VJr,"XLNetModel"),VJr.forEach(t),tbo=r(fwe," (XLNet model)"),fwe.forEach(t),abo=i($),xu=n($,"LI",{});var mwe=s(xu);Rse=n(mwe,"STRONG",{});var XJr=s(Rse);nbo=r(XJr,"yolos"),XJr.forEach(t),sbo=r(mwe," \u2014 "),Eq=n(mwe,"A",{href:!0});var zJr=s(Eq);lbo=r(zJr,"YolosModel"),zJr.forEach(t),ibo=r(mwe," (YOLOS model)"),mwe.forEach(t),dbo=i($),$u=n($,"LI",{});var gwe=s($u);Bse=n(gwe,"STRONG",{});var QJr=s(Bse);cbo=r(QJr,"yoso"),QJr.forEach(t),fbo=r(gwe," \u2014 "),Cq=n(gwe,"A",{href:!0});var WJr=s(Cq);mbo=r(WJr,"YosoModel"),WJr.forEach(t),gbo=r(gwe," (YOSO model)"),gwe.forEach(t),$.forEach(t),hbo=i(Zt),ku=n(Zt,"P",{});var hwe=s(ku);pbo=r(hwe,"The model is set in evaluation mode by default using "),Pse=n(hwe,"CODE",{});var HJr=s(Pse);ubo=r(HJr,"model.eval()"),HJr.forEach(t),_bo=r(hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ise=n(hwe,"CODE",{});var UJr=s(Ise);bbo=r(UJr,"model.train()"),UJr.forEach(t),hwe.forEach(t),vbo=i(Zt),T(Su.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),jPe=i(f),wi=n(f,"H2",{class:!0});var Vqe=s(wi);Ru=n(Vqe,"A",{id:!0,class:!0,href:!0});var JJr=s(Ru);qse=n(JJr,"SPAN",{});var YJr=s(qse);T(EA.$$.fragment,YJr),YJr.forEach(t),JJr.forEach(t),Fbo=i(Vqe),Nse=n(Vqe,"SPAN",{});var KJr=s(Nse);Tbo=r(KJr,"AutoModelForPreTraining"),KJr.forEach(t),Vqe.forEach(t),DPe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(CA.$$.fragment,Gs),Mbo=i(Gs),Ai=n(Gs,"P",{});var tK=s(Ai);Ebo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wq=n(tK,"A",{href:!0});var ZJr=s(wq);Cbo=r(ZJr,"from_pretrained()"),ZJr.forEach(t),wbo=r(tK," class method or the "),Aq=n(tK,"A",{href:!0});var eYr=s(Aq);Abo=r(eYr,"from_config()"),eYr.forEach(t),ybo=r(tK,` class
method.`),tK.forEach(t),Lbo=i(Gs),wA=n(Gs,"P",{});var Xqe=s(wA);xbo=r(Xqe,"This class cannot be instantiated directly using "),jse=n(Xqe,"CODE",{});var oYr=s(jse);$bo=r(oYr,"__init__()"),oYr.forEach(t),kbo=r(Xqe," (throws an error)."),Xqe.forEach(t),Sbo=i(Gs),rt=n(Gs,"DIV",{class:!0});var YC=s(rt);T(AA.$$.fragment,YC),Rbo=i(YC),Dse=n(YC,"P",{});var rYr=s(Dse);Bbo=r(rYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rYr.forEach(t),Pbo=i(YC),yi=n(YC,"P",{});var aK=s(yi);Ibo=r(aK,`Note:
Loading a model from its configuration file does `),Gse=n(aK,"STRONG",{});var tYr=s(Gse);qbo=r(tYr,"not"),tYr.forEach(t),Nbo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yq=n(aK,"A",{href:!0});var aYr=s(yq);jbo=r(aYr,"from_pretrained()"),aYr.forEach(t),Dbo=r(aK," to load the model weights."),aK.forEach(t),Gbo=i(YC),T(Bu.$$.fragment,YC),YC.forEach(t),Obo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(yA.$$.fragment,ea),Vbo=i(ea),Ose=n(ea,"P",{});var nYr=s(Ose);Xbo=r(nYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nYr.forEach(t),zbo=i(ea),ya=n(ea,"P",{});var KC=s(ya);Qbo=r(KC,"The model class to instantiate is selected based on the "),Vse=n(KC,"CODE",{});var sYr=s(Vse);Wbo=r(sYr,"model_type"),sYr.forEach(t),Hbo=r(KC,` property of the config object (either
passed as an argument or loaded from `),Xse=n(KC,"CODE",{});var lYr=s(Xse);Ubo=r(lYr,"pretrained_model_name_or_path"),lYr.forEach(t),Jbo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=n(KC,"CODE",{});var iYr=s(zse);Ybo=r(iYr,"pretrained_model_name_or_path"),iYr.forEach(t),Kbo=r(KC,":"),KC.forEach(t),Zbo=i(ea),G=n(ea,"UL",{});var V=s(G);Pu=n(V,"LI",{});var pwe=s(Pu);Qse=n(pwe,"STRONG",{});var dYr=s(Qse);e2o=r(dYr,"albert"),dYr.forEach(t),o2o=r(pwe," \u2014 "),Lq=n(pwe,"A",{href:!0});var cYr=s(Lq);r2o=r(cYr,"AlbertForPreTraining"),cYr.forEach(t),t2o=r(pwe," (ALBERT model)"),pwe.forEach(t),a2o=i(V),Iu=n(V,"LI",{});var uwe=s(Iu);Wse=n(uwe,"STRONG",{});var fYr=s(Wse);n2o=r(fYr,"bart"),fYr.forEach(t),s2o=r(uwe," \u2014 "),xq=n(uwe,"A",{href:!0});var mYr=s(xq);l2o=r(mYr,"BartForConditionalGeneration"),mYr.forEach(t),i2o=r(uwe," (BART model)"),uwe.forEach(t),d2o=i(V),qu=n(V,"LI",{});var _we=s(qu);Hse=n(_we,"STRONG",{});var gYr=s(Hse);c2o=r(gYr,"bert"),gYr.forEach(t),f2o=r(_we," \u2014 "),$q=n(_we,"A",{href:!0});var hYr=s($q);m2o=r(hYr,"BertForPreTraining"),hYr.forEach(t),g2o=r(_we," (BERT model)"),_we.forEach(t),h2o=i(V),Nu=n(V,"LI",{});var bwe=s(Nu);Use=n(bwe,"STRONG",{});var pYr=s(Use);p2o=r(pYr,"big_bird"),pYr.forEach(t),u2o=r(bwe," \u2014 "),kq=n(bwe,"A",{href:!0});var uYr=s(kq);_2o=r(uYr,"BigBirdForPreTraining"),uYr.forEach(t),b2o=r(bwe," (BigBird model)"),bwe.forEach(t),v2o=i(V),ju=n(V,"LI",{});var vwe=s(ju);Jse=n(vwe,"STRONG",{});var _Yr=s(Jse);F2o=r(_Yr,"camembert"),_Yr.forEach(t),T2o=r(vwe," \u2014 "),Sq=n(vwe,"A",{href:!0});var bYr=s(Sq);M2o=r(bYr,"CamembertForMaskedLM"),bYr.forEach(t),E2o=r(vwe," (CamemBERT model)"),vwe.forEach(t),C2o=i(V),Du=n(V,"LI",{});var Fwe=s(Du);Yse=n(Fwe,"STRONG",{});var vYr=s(Yse);w2o=r(vYr,"ctrl"),vYr.forEach(t),A2o=r(Fwe," \u2014 "),Rq=n(Fwe,"A",{href:!0});var FYr=s(Rq);y2o=r(FYr,"CTRLLMHeadModel"),FYr.forEach(t),L2o=r(Fwe," (CTRL model)"),Fwe.forEach(t),x2o=i(V),Gu=n(V,"LI",{});var Twe=s(Gu);Kse=n(Twe,"STRONG",{});var TYr=s(Kse);$2o=r(TYr,"data2vec-text"),TYr.forEach(t),k2o=r(Twe," \u2014 "),Bq=n(Twe,"A",{href:!0});var MYr=s(Bq);S2o=r(MYr,"Data2VecTextForMaskedLM"),MYr.forEach(t),R2o=r(Twe," (Data2VecText model)"),Twe.forEach(t),B2o=i(V),Ou=n(V,"LI",{});var Mwe=s(Ou);Zse=n(Mwe,"STRONG",{});var EYr=s(Zse);P2o=r(EYr,"deberta"),EYr.forEach(t),I2o=r(Mwe," \u2014 "),Pq=n(Mwe,"A",{href:!0});var CYr=s(Pq);q2o=r(CYr,"DebertaForMaskedLM"),CYr.forEach(t),N2o=r(Mwe," (DeBERTa model)"),Mwe.forEach(t),j2o=i(V),Vu=n(V,"LI",{});var Ewe=s(Vu);ele=n(Ewe,"STRONG",{});var wYr=s(ele);D2o=r(wYr,"deberta-v2"),wYr.forEach(t),G2o=r(Ewe," \u2014 "),Iq=n(Ewe,"A",{href:!0});var AYr=s(Iq);O2o=r(AYr,"DebertaV2ForMaskedLM"),AYr.forEach(t),V2o=r(Ewe," (DeBERTa-v2 model)"),Ewe.forEach(t),X2o=i(V),Xu=n(V,"LI",{});var Cwe=s(Xu);ole=n(Cwe,"STRONG",{});var yYr=s(ole);z2o=r(yYr,"distilbert"),yYr.forEach(t),Q2o=r(Cwe," \u2014 "),qq=n(Cwe,"A",{href:!0});var LYr=s(qq);W2o=r(LYr,"DistilBertForMaskedLM"),LYr.forEach(t),H2o=r(Cwe," (DistilBERT model)"),Cwe.forEach(t),U2o=i(V),zu=n(V,"LI",{});var wwe=s(zu);rle=n(wwe,"STRONG",{});var xYr=s(rle);J2o=r(xYr,"electra"),xYr.forEach(t),Y2o=r(wwe," \u2014 "),Nq=n(wwe,"A",{href:!0});var $Yr=s(Nq);K2o=r($Yr,"ElectraForPreTraining"),$Yr.forEach(t),Z2o=r(wwe," (ELECTRA model)"),wwe.forEach(t),evo=i(V),Qu=n(V,"LI",{});var Awe=s(Qu);tle=n(Awe,"STRONG",{});var kYr=s(tle);ovo=r(kYr,"flaubert"),kYr.forEach(t),rvo=r(Awe," \u2014 "),jq=n(Awe,"A",{href:!0});var SYr=s(jq);tvo=r(SYr,"FlaubertWithLMHeadModel"),SYr.forEach(t),avo=r(Awe," (FlauBERT model)"),Awe.forEach(t),nvo=i(V),Wu=n(V,"LI",{});var ywe=s(Wu);ale=n(ywe,"STRONG",{});var RYr=s(ale);svo=r(RYr,"fnet"),RYr.forEach(t),lvo=r(ywe," \u2014 "),Dq=n(ywe,"A",{href:!0});var BYr=s(Dq);ivo=r(BYr,"FNetForPreTraining"),BYr.forEach(t),dvo=r(ywe," (FNet model)"),ywe.forEach(t),cvo=i(V),Hu=n(V,"LI",{});var Lwe=s(Hu);nle=n(Lwe,"STRONG",{});var PYr=s(nle);fvo=r(PYr,"fsmt"),PYr.forEach(t),mvo=r(Lwe," \u2014 "),Gq=n(Lwe,"A",{href:!0});var IYr=s(Gq);gvo=r(IYr,"FSMTForConditionalGeneration"),IYr.forEach(t),hvo=r(Lwe," (FairSeq Machine-Translation model)"),Lwe.forEach(t),pvo=i(V),Uu=n(V,"LI",{});var xwe=s(Uu);sle=n(xwe,"STRONG",{});var qYr=s(sle);uvo=r(qYr,"funnel"),qYr.forEach(t),_vo=r(xwe," \u2014 "),Oq=n(xwe,"A",{href:!0});var NYr=s(Oq);bvo=r(NYr,"FunnelForPreTraining"),NYr.forEach(t),vvo=r(xwe," (Funnel Transformer model)"),xwe.forEach(t),Fvo=i(V),Ju=n(V,"LI",{});var $we=s(Ju);lle=n($we,"STRONG",{});var jYr=s(lle);Tvo=r(jYr,"gpt2"),jYr.forEach(t),Mvo=r($we," \u2014 "),Vq=n($we,"A",{href:!0});var DYr=s(Vq);Evo=r(DYr,"GPT2LMHeadModel"),DYr.forEach(t),Cvo=r($we," (OpenAI GPT-2 model)"),$we.forEach(t),wvo=i(V),Yu=n(V,"LI",{});var kwe=s(Yu);ile=n(kwe,"STRONG",{});var GYr=s(ile);Avo=r(GYr,"ibert"),GYr.forEach(t),yvo=r(kwe," \u2014 "),Xq=n(kwe,"A",{href:!0});var OYr=s(Xq);Lvo=r(OYr,"IBertForMaskedLM"),OYr.forEach(t),xvo=r(kwe," (I-BERT model)"),kwe.forEach(t),$vo=i(V),Ku=n(V,"LI",{});var Swe=s(Ku);dle=n(Swe,"STRONG",{});var VYr=s(dle);kvo=r(VYr,"layoutlm"),VYr.forEach(t),Svo=r(Swe," \u2014 "),zq=n(Swe,"A",{href:!0});var XYr=s(zq);Rvo=r(XYr,"LayoutLMForMaskedLM"),XYr.forEach(t),Bvo=r(Swe," (LayoutLM model)"),Swe.forEach(t),Pvo=i(V),Zu=n(V,"LI",{});var Rwe=s(Zu);cle=n(Rwe,"STRONG",{});var zYr=s(cle);Ivo=r(zYr,"longformer"),zYr.forEach(t),qvo=r(Rwe," \u2014 "),Qq=n(Rwe,"A",{href:!0});var QYr=s(Qq);Nvo=r(QYr,"LongformerForMaskedLM"),QYr.forEach(t),jvo=r(Rwe," (Longformer model)"),Rwe.forEach(t),Dvo=i(V),e_=n(V,"LI",{});var Bwe=s(e_);fle=n(Bwe,"STRONG",{});var WYr=s(fle);Gvo=r(WYr,"lxmert"),WYr.forEach(t),Ovo=r(Bwe," \u2014 "),Wq=n(Bwe,"A",{href:!0});var HYr=s(Wq);Vvo=r(HYr,"LxmertForPreTraining"),HYr.forEach(t),Xvo=r(Bwe," (LXMERT model)"),Bwe.forEach(t),zvo=i(V),o_=n(V,"LI",{});var Pwe=s(o_);mle=n(Pwe,"STRONG",{});var UYr=s(mle);Qvo=r(UYr,"megatron-bert"),UYr.forEach(t),Wvo=r(Pwe," \u2014 "),Hq=n(Pwe,"A",{href:!0});var JYr=s(Hq);Hvo=r(JYr,"MegatronBertForPreTraining"),JYr.forEach(t),Uvo=r(Pwe," (MegatronBert model)"),Pwe.forEach(t),Jvo=i(V),r_=n(V,"LI",{});var Iwe=s(r_);gle=n(Iwe,"STRONG",{});var YYr=s(gle);Yvo=r(YYr,"mobilebert"),YYr.forEach(t),Kvo=r(Iwe," \u2014 "),Uq=n(Iwe,"A",{href:!0});var KYr=s(Uq);Zvo=r(KYr,"MobileBertForPreTraining"),KYr.forEach(t),eFo=r(Iwe," (MobileBERT model)"),Iwe.forEach(t),oFo=i(V),t_=n(V,"LI",{});var qwe=s(t_);hle=n(qwe,"STRONG",{});var ZYr=s(hle);rFo=r(ZYr,"mpnet"),ZYr.forEach(t),tFo=r(qwe," \u2014 "),Jq=n(qwe,"A",{href:!0});var eKr=s(Jq);aFo=r(eKr,"MPNetForMaskedLM"),eKr.forEach(t),nFo=r(qwe," (MPNet model)"),qwe.forEach(t),sFo=i(V),a_=n(V,"LI",{});var Nwe=s(a_);ple=n(Nwe,"STRONG",{});var oKr=s(ple);lFo=r(oKr,"openai-gpt"),oKr.forEach(t),iFo=r(Nwe," \u2014 "),Yq=n(Nwe,"A",{href:!0});var rKr=s(Yq);dFo=r(rKr,"OpenAIGPTLMHeadModel"),rKr.forEach(t),cFo=r(Nwe," (OpenAI GPT model)"),Nwe.forEach(t),fFo=i(V),n_=n(V,"LI",{});var jwe=s(n_);ule=n(jwe,"STRONG",{});var tKr=s(ule);mFo=r(tKr,"retribert"),tKr.forEach(t),gFo=r(jwe," \u2014 "),Kq=n(jwe,"A",{href:!0});var aKr=s(Kq);hFo=r(aKr,"RetriBertModel"),aKr.forEach(t),pFo=r(jwe," (RetriBERT model)"),jwe.forEach(t),uFo=i(V),s_=n(V,"LI",{});var Dwe=s(s_);_le=n(Dwe,"STRONG",{});var nKr=s(_le);_Fo=r(nKr,"roberta"),nKr.forEach(t),bFo=r(Dwe," \u2014 "),Zq=n(Dwe,"A",{href:!0});var sKr=s(Zq);vFo=r(sKr,"RobertaForMaskedLM"),sKr.forEach(t),FFo=r(Dwe," (RoBERTa model)"),Dwe.forEach(t),TFo=i(V),l_=n(V,"LI",{});var Gwe=s(l_);ble=n(Gwe,"STRONG",{});var lKr=s(ble);MFo=r(lKr,"squeezebert"),lKr.forEach(t),EFo=r(Gwe," \u2014 "),eN=n(Gwe,"A",{href:!0});var iKr=s(eN);CFo=r(iKr,"SqueezeBertForMaskedLM"),iKr.forEach(t),wFo=r(Gwe," (SqueezeBERT model)"),Gwe.forEach(t),AFo=i(V),i_=n(V,"LI",{});var Owe=s(i_);vle=n(Owe,"STRONG",{});var dKr=s(vle);yFo=r(dKr,"t5"),dKr.forEach(t),LFo=r(Owe," \u2014 "),oN=n(Owe,"A",{href:!0});var cKr=s(oN);xFo=r(cKr,"T5ForConditionalGeneration"),cKr.forEach(t),$Fo=r(Owe," (T5 model)"),Owe.forEach(t),kFo=i(V),d_=n(V,"LI",{});var Vwe=s(d_);Fle=n(Vwe,"STRONG",{});var fKr=s(Fle);SFo=r(fKr,"tapas"),fKr.forEach(t),RFo=r(Vwe," \u2014 "),rN=n(Vwe,"A",{href:!0});var mKr=s(rN);BFo=r(mKr,"TapasForMaskedLM"),mKr.forEach(t),PFo=r(Vwe," (TAPAS model)"),Vwe.forEach(t),IFo=i(V),c_=n(V,"LI",{});var Xwe=s(c_);Tle=n(Xwe,"STRONG",{});var gKr=s(Tle);qFo=r(gKr,"transfo-xl"),gKr.forEach(t),NFo=r(Xwe," \u2014 "),tN=n(Xwe,"A",{href:!0});var hKr=s(tN);jFo=r(hKr,"TransfoXLLMHeadModel"),hKr.forEach(t),DFo=r(Xwe," (Transformer-XL model)"),Xwe.forEach(t),GFo=i(V),f_=n(V,"LI",{});var zwe=s(f_);Mle=n(zwe,"STRONG",{});var pKr=s(Mle);OFo=r(pKr,"unispeech"),pKr.forEach(t),VFo=r(zwe," \u2014 "),aN=n(zwe,"A",{href:!0});var uKr=s(aN);XFo=r(uKr,"UniSpeechForPreTraining"),uKr.forEach(t),zFo=r(zwe," (UniSpeech model)"),zwe.forEach(t),QFo=i(V),m_=n(V,"LI",{});var Qwe=s(m_);Ele=n(Qwe,"STRONG",{});var _Kr=s(Ele);WFo=r(_Kr,"unispeech-sat"),_Kr.forEach(t),HFo=r(Qwe," \u2014 "),nN=n(Qwe,"A",{href:!0});var bKr=s(nN);UFo=r(bKr,"UniSpeechSatForPreTraining"),bKr.forEach(t),JFo=r(Qwe," (UniSpeechSat model)"),Qwe.forEach(t),YFo=i(V),g_=n(V,"LI",{});var Wwe=s(g_);Cle=n(Wwe,"STRONG",{});var vKr=s(Cle);KFo=r(vKr,"visual_bert"),vKr.forEach(t),ZFo=r(Wwe," \u2014 "),sN=n(Wwe,"A",{href:!0});var FKr=s(sN);e0o=r(FKr,"VisualBertForPreTraining"),FKr.forEach(t),o0o=r(Wwe," (VisualBert model)"),Wwe.forEach(t),r0o=i(V),h_=n(V,"LI",{});var Hwe=s(h_);wle=n(Hwe,"STRONG",{});var TKr=s(wle);t0o=r(TKr,"vit_mae"),TKr.forEach(t),a0o=r(Hwe," \u2014 "),lN=n(Hwe,"A",{href:!0});var MKr=s(lN);n0o=r(MKr,"ViTMAEForPreTraining"),MKr.forEach(t),s0o=r(Hwe," (ViTMAE model)"),Hwe.forEach(t),l0o=i(V),p_=n(V,"LI",{});var Uwe=s(p_);Ale=n(Uwe,"STRONG",{});var EKr=s(Ale);i0o=r(EKr,"wav2vec2"),EKr.forEach(t),d0o=r(Uwe," \u2014 "),iN=n(Uwe,"A",{href:!0});var CKr=s(iN);c0o=r(CKr,"Wav2Vec2ForPreTraining"),CKr.forEach(t),f0o=r(Uwe," (Wav2Vec2 model)"),Uwe.forEach(t),m0o=i(V),u_=n(V,"LI",{});var Jwe=s(u_);yle=n(Jwe,"STRONG",{});var wKr=s(yle);g0o=r(wKr,"xlm"),wKr.forEach(t),h0o=r(Jwe," \u2014 "),dN=n(Jwe,"A",{href:!0});var AKr=s(dN);p0o=r(AKr,"XLMWithLMHeadModel"),AKr.forEach(t),u0o=r(Jwe," (XLM model)"),Jwe.forEach(t),_0o=i(V),__=n(V,"LI",{});var Ywe=s(__);Lle=n(Ywe,"STRONG",{});var yKr=s(Lle);b0o=r(yKr,"xlm-roberta"),yKr.forEach(t),v0o=r(Ywe," \u2014 "),cN=n(Ywe,"A",{href:!0});var LKr=s(cN);F0o=r(LKr,"XLMRobertaForMaskedLM"),LKr.forEach(t),T0o=r(Ywe," (XLM-RoBERTa model)"),Ywe.forEach(t),M0o=i(V),b_=n(V,"LI",{});var Kwe=s(b_);xle=n(Kwe,"STRONG",{});var xKr=s(xle);E0o=r(xKr,"xlm-roberta-xl"),xKr.forEach(t),C0o=r(Kwe," \u2014 "),fN=n(Kwe,"A",{href:!0});var $Kr=s(fN);w0o=r($Kr,"XLMRobertaXLForMaskedLM"),$Kr.forEach(t),A0o=r(Kwe," (XLM-RoBERTa-XL model)"),Kwe.forEach(t),y0o=i(V),v_=n(V,"LI",{});var Zwe=s(v_);$le=n(Zwe,"STRONG",{});var kKr=s($le);L0o=r(kKr,"xlnet"),kKr.forEach(t),x0o=r(Zwe," \u2014 "),mN=n(Zwe,"A",{href:!0});var SKr=s(mN);$0o=r(SKr,"XLNetLMHeadModel"),SKr.forEach(t),k0o=r(Zwe," (XLNet model)"),Zwe.forEach(t),V.forEach(t),S0o=i(ea),F_=n(ea,"P",{});var eAe=s(F_);R0o=r(eAe,"The model is set in evaluation mode by default using "),kle=n(eAe,"CODE",{});var RKr=s(kle);B0o=r(RKr,"model.eval()"),RKr.forEach(t),P0o=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sle=n(eAe,"CODE",{});var BKr=s(Sle);I0o=r(BKr,"model.train()"),BKr.forEach(t),eAe.forEach(t),q0o=i(ea),T(T_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),GPe=i(f),Li=n(f,"H2",{class:!0});var zqe=s(Li);M_=n(zqe,"A",{id:!0,class:!0,href:!0});var PKr=s(M_);Rle=n(PKr,"SPAN",{});var IKr=s(Rle);T(LA.$$.fragment,IKr),IKr.forEach(t),PKr.forEach(t),N0o=i(zqe),Ble=n(zqe,"SPAN",{});var qKr=s(Ble);j0o=r(qKr,"AutoModelForCausalLM"),qKr.forEach(t),zqe.forEach(t),OPe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(xA.$$.fragment,Os),D0o=i(Os),xi=n(Os,"P",{});var nK=s(xi);G0o=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gN=n(nK,"A",{href:!0});var NKr=s(gN);O0o=r(NKr,"from_pretrained()"),NKr.forEach(t),V0o=r(nK," class method or the "),hN=n(nK,"A",{href:!0});var jKr=s(hN);X0o=r(jKr,"from_config()"),jKr.forEach(t),z0o=r(nK,` class
method.`),nK.forEach(t),Q0o=i(Os),$A=n(Os,"P",{});var Qqe=s($A);W0o=r(Qqe,"This class cannot be instantiated directly using "),Ple=n(Qqe,"CODE",{});var DKr=s(Ple);H0o=r(DKr,"__init__()"),DKr.forEach(t),U0o=r(Qqe," (throws an error)."),Qqe.forEach(t),J0o=i(Os),tt=n(Os,"DIV",{class:!0});var ZC=s(tt);T(kA.$$.fragment,ZC),Y0o=i(ZC),Ile=n(ZC,"P",{});var GKr=s(Ile);K0o=r(GKr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),GKr.forEach(t),Z0o=i(ZC),$i=n(ZC,"P",{});var sK=s($i);eTo=r(sK,`Note:
Loading a model from its configuration file does `),qle=n(sK,"STRONG",{});var OKr=s(qle);oTo=r(OKr,"not"),OKr.forEach(t),rTo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pN=n(sK,"A",{href:!0});var VKr=s(pN);tTo=r(VKr,"from_pretrained()"),VKr.forEach(t),aTo=r(sK," to load the model weights."),sK.forEach(t),nTo=i(ZC),T(E_.$$.fragment,ZC),ZC.forEach(t),sTo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(SA.$$.fragment,oa),lTo=i(oa),Nle=n(oa,"P",{});var XKr=s(Nle);iTo=r(XKr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XKr.forEach(t),dTo=i(oa),La=n(oa,"P",{});var e3=s(La);cTo=r(e3,"The model class to instantiate is selected based on the "),jle=n(e3,"CODE",{});var zKr=s(jle);fTo=r(zKr,"model_type"),zKr.forEach(t),mTo=r(e3,` property of the config object (either
passed as an argument or loaded from `),Dle=n(e3,"CODE",{});var QKr=s(Dle);gTo=r(QKr,"pretrained_model_name_or_path"),QKr.forEach(t),hTo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gle=n(e3,"CODE",{});var WKr=s(Gle);pTo=r(WKr,"pretrained_model_name_or_path"),WKr.forEach(t),uTo=r(e3,":"),e3.forEach(t),_To=i(oa),z=n(oa,"UL",{});var W=s(z);C_=n(W,"LI",{});var oAe=s(C_);Ole=n(oAe,"STRONG",{});var HKr=s(Ole);bTo=r(HKr,"bart"),HKr.forEach(t),vTo=r(oAe," \u2014 "),uN=n(oAe,"A",{href:!0});var UKr=s(uN);FTo=r(UKr,"BartForCausalLM"),UKr.forEach(t),TTo=r(oAe," (BART model)"),oAe.forEach(t),MTo=i(W),w_=n(W,"LI",{});var rAe=s(w_);Vle=n(rAe,"STRONG",{});var JKr=s(Vle);ETo=r(JKr,"bert"),JKr.forEach(t),CTo=r(rAe," \u2014 "),_N=n(rAe,"A",{href:!0});var YKr=s(_N);wTo=r(YKr,"BertLMHeadModel"),YKr.forEach(t),ATo=r(rAe," (BERT model)"),rAe.forEach(t),yTo=i(W),A_=n(W,"LI",{});var tAe=s(A_);Xle=n(tAe,"STRONG",{});var KKr=s(Xle);LTo=r(KKr,"bert-generation"),KKr.forEach(t),xTo=r(tAe," \u2014 "),bN=n(tAe,"A",{href:!0});var ZKr=s(bN);$To=r(ZKr,"BertGenerationDecoder"),ZKr.forEach(t),kTo=r(tAe," (Bert Generation model)"),tAe.forEach(t),STo=i(W),y_=n(W,"LI",{});var aAe=s(y_);zle=n(aAe,"STRONG",{});var eZr=s(zle);RTo=r(eZr,"big_bird"),eZr.forEach(t),BTo=r(aAe," \u2014 "),vN=n(aAe,"A",{href:!0});var oZr=s(vN);PTo=r(oZr,"BigBirdForCausalLM"),oZr.forEach(t),ITo=r(aAe," (BigBird model)"),aAe.forEach(t),qTo=i(W),L_=n(W,"LI",{});var nAe=s(L_);Qle=n(nAe,"STRONG",{});var rZr=s(Qle);NTo=r(rZr,"bigbird_pegasus"),rZr.forEach(t),jTo=r(nAe," \u2014 "),FN=n(nAe,"A",{href:!0});var tZr=s(FN);DTo=r(tZr,"BigBirdPegasusForCausalLM"),tZr.forEach(t),GTo=r(nAe," (BigBirdPegasus model)"),nAe.forEach(t),OTo=i(W),x_=n(W,"LI",{});var sAe=s(x_);Wle=n(sAe,"STRONG",{});var aZr=s(Wle);VTo=r(aZr,"blenderbot"),aZr.forEach(t),XTo=r(sAe," \u2014 "),TN=n(sAe,"A",{href:!0});var nZr=s(TN);zTo=r(nZr,"BlenderbotForCausalLM"),nZr.forEach(t),QTo=r(sAe," (Blenderbot model)"),sAe.forEach(t),WTo=i(W),$_=n(W,"LI",{});var lAe=s($_);Hle=n(lAe,"STRONG",{});var sZr=s(Hle);HTo=r(sZr,"blenderbot-small"),sZr.forEach(t),UTo=r(lAe," \u2014 "),MN=n(lAe,"A",{href:!0});var lZr=s(MN);JTo=r(lZr,"BlenderbotSmallForCausalLM"),lZr.forEach(t),YTo=r(lAe," (BlenderbotSmall model)"),lAe.forEach(t),KTo=i(W),k_=n(W,"LI",{});var iAe=s(k_);Ule=n(iAe,"STRONG",{});var iZr=s(Ule);ZTo=r(iZr,"camembert"),iZr.forEach(t),e7o=r(iAe," \u2014 "),EN=n(iAe,"A",{href:!0});var dZr=s(EN);o7o=r(dZr,"CamembertForCausalLM"),dZr.forEach(t),r7o=r(iAe," (CamemBERT model)"),iAe.forEach(t),t7o=i(W),S_=n(W,"LI",{});var dAe=s(S_);Jle=n(dAe,"STRONG",{});var cZr=s(Jle);a7o=r(cZr,"ctrl"),cZr.forEach(t),n7o=r(dAe," \u2014 "),CN=n(dAe,"A",{href:!0});var fZr=s(CN);s7o=r(fZr,"CTRLLMHeadModel"),fZr.forEach(t),l7o=r(dAe," (CTRL model)"),dAe.forEach(t),i7o=i(W),R_=n(W,"LI",{});var cAe=s(R_);Yle=n(cAe,"STRONG",{});var mZr=s(Yle);d7o=r(mZr,"data2vec-text"),mZr.forEach(t),c7o=r(cAe," \u2014 "),wN=n(cAe,"A",{href:!0});var gZr=s(wN);f7o=r(gZr,"Data2VecTextForCausalLM"),gZr.forEach(t),m7o=r(cAe," (Data2VecText model)"),cAe.forEach(t),g7o=i(W),B_=n(W,"LI",{});var fAe=s(B_);Kle=n(fAe,"STRONG",{});var hZr=s(Kle);h7o=r(hZr,"electra"),hZr.forEach(t),p7o=r(fAe," \u2014 "),AN=n(fAe,"A",{href:!0});var pZr=s(AN);u7o=r(pZr,"ElectraForCausalLM"),pZr.forEach(t),_7o=r(fAe," (ELECTRA model)"),fAe.forEach(t),b7o=i(W),P_=n(W,"LI",{});var mAe=s(P_);Zle=n(mAe,"STRONG",{});var uZr=s(Zle);v7o=r(uZr,"gpt2"),uZr.forEach(t),F7o=r(mAe," \u2014 "),yN=n(mAe,"A",{href:!0});var _Zr=s(yN);T7o=r(_Zr,"GPT2LMHeadModel"),_Zr.forEach(t),M7o=r(mAe," (OpenAI GPT-2 model)"),mAe.forEach(t),E7o=i(W),I_=n(W,"LI",{});var gAe=s(I_);eie=n(gAe,"STRONG",{});var bZr=s(eie);C7o=r(bZr,"gpt_neo"),bZr.forEach(t),w7o=r(gAe," \u2014 "),LN=n(gAe,"A",{href:!0});var vZr=s(LN);A7o=r(vZr,"GPTNeoForCausalLM"),vZr.forEach(t),y7o=r(gAe," (GPT Neo model)"),gAe.forEach(t),L7o=i(W),q_=n(W,"LI",{});var hAe=s(q_);oie=n(hAe,"STRONG",{});var FZr=s(oie);x7o=r(FZr,"gptj"),FZr.forEach(t),$7o=r(hAe," \u2014 "),xN=n(hAe,"A",{href:!0});var TZr=s(xN);k7o=r(TZr,"GPTJForCausalLM"),TZr.forEach(t),S7o=r(hAe," (GPT-J model)"),hAe.forEach(t),R7o=i(W),N_=n(W,"LI",{});var pAe=s(N_);rie=n(pAe,"STRONG",{});var MZr=s(rie);B7o=r(MZr,"marian"),MZr.forEach(t),P7o=r(pAe," \u2014 "),$N=n(pAe,"A",{href:!0});var EZr=s($N);I7o=r(EZr,"MarianForCausalLM"),EZr.forEach(t),q7o=r(pAe," (Marian model)"),pAe.forEach(t),N7o=i(W),j_=n(W,"LI",{});var uAe=s(j_);tie=n(uAe,"STRONG",{});var CZr=s(tie);j7o=r(CZr,"mbart"),CZr.forEach(t),D7o=r(uAe," \u2014 "),kN=n(uAe,"A",{href:!0});var wZr=s(kN);G7o=r(wZr,"MBartForCausalLM"),wZr.forEach(t),O7o=r(uAe," (mBART model)"),uAe.forEach(t),V7o=i(W),D_=n(W,"LI",{});var _Ae=s(D_);aie=n(_Ae,"STRONG",{});var AZr=s(aie);X7o=r(AZr,"megatron-bert"),AZr.forEach(t),z7o=r(_Ae," \u2014 "),SN=n(_Ae,"A",{href:!0});var yZr=s(SN);Q7o=r(yZr,"MegatronBertForCausalLM"),yZr.forEach(t),W7o=r(_Ae," (MegatronBert model)"),_Ae.forEach(t),H7o=i(W),G_=n(W,"LI",{});var bAe=s(G_);nie=n(bAe,"STRONG",{});var LZr=s(nie);U7o=r(LZr,"openai-gpt"),LZr.forEach(t),J7o=r(bAe," \u2014 "),RN=n(bAe,"A",{href:!0});var xZr=s(RN);Y7o=r(xZr,"OpenAIGPTLMHeadModel"),xZr.forEach(t),K7o=r(bAe," (OpenAI GPT model)"),bAe.forEach(t),Z7o=i(W),O_=n(W,"LI",{});var vAe=s(O_);sie=n(vAe,"STRONG",{});var $Zr=s(sie);eMo=r($Zr,"opt"),$Zr.forEach(t),oMo=r(vAe," \u2014 "),BN=n(vAe,"A",{href:!0});var kZr=s(BN);rMo=r(kZr,"OPTForCausalLM"),kZr.forEach(t),tMo=r(vAe," (OPT model)"),vAe.forEach(t),aMo=i(W),V_=n(W,"LI",{});var FAe=s(V_);lie=n(FAe,"STRONG",{});var SZr=s(lie);nMo=r(SZr,"pegasus"),SZr.forEach(t),sMo=r(FAe," \u2014 "),PN=n(FAe,"A",{href:!0});var RZr=s(PN);lMo=r(RZr,"PegasusForCausalLM"),RZr.forEach(t),iMo=r(FAe," (Pegasus model)"),FAe.forEach(t),dMo=i(W),X_=n(W,"LI",{});var TAe=s(X_);iie=n(TAe,"STRONG",{});var BZr=s(iie);cMo=r(BZr,"plbart"),BZr.forEach(t),fMo=r(TAe," \u2014 "),IN=n(TAe,"A",{href:!0});var PZr=s(IN);mMo=r(PZr,"PLBartForCausalLM"),PZr.forEach(t),gMo=r(TAe," (PLBart model)"),TAe.forEach(t),hMo=i(W),z_=n(W,"LI",{});var MAe=s(z_);die=n(MAe,"STRONG",{});var IZr=s(die);pMo=r(IZr,"prophetnet"),IZr.forEach(t),uMo=r(MAe," \u2014 "),qN=n(MAe,"A",{href:!0});var qZr=s(qN);_Mo=r(qZr,"ProphetNetForCausalLM"),qZr.forEach(t),bMo=r(MAe," (ProphetNet model)"),MAe.forEach(t),vMo=i(W),Q_=n(W,"LI",{});var EAe=s(Q_);cie=n(EAe,"STRONG",{});var NZr=s(cie);FMo=r(NZr,"qdqbert"),NZr.forEach(t),TMo=r(EAe," \u2014 "),NN=n(EAe,"A",{href:!0});var jZr=s(NN);MMo=r(jZr,"QDQBertLMHeadModel"),jZr.forEach(t),EMo=r(EAe," (QDQBert model)"),EAe.forEach(t),CMo=i(W),W_=n(W,"LI",{});var CAe=s(W_);fie=n(CAe,"STRONG",{});var DZr=s(fie);wMo=r(DZr,"reformer"),DZr.forEach(t),AMo=r(CAe," \u2014 "),jN=n(CAe,"A",{href:!0});var GZr=s(jN);yMo=r(GZr,"ReformerModelWithLMHead"),GZr.forEach(t),LMo=r(CAe," (Reformer model)"),CAe.forEach(t),xMo=i(W),H_=n(W,"LI",{});var wAe=s(H_);mie=n(wAe,"STRONG",{});var OZr=s(mie);$Mo=r(OZr,"rembert"),OZr.forEach(t),kMo=r(wAe," \u2014 "),DN=n(wAe,"A",{href:!0});var VZr=s(DN);SMo=r(VZr,"RemBertForCausalLM"),VZr.forEach(t),RMo=r(wAe," (RemBERT model)"),wAe.forEach(t),BMo=i(W),U_=n(W,"LI",{});var AAe=s(U_);gie=n(AAe,"STRONG",{});var XZr=s(gie);PMo=r(XZr,"roberta"),XZr.forEach(t),IMo=r(AAe," \u2014 "),GN=n(AAe,"A",{href:!0});var zZr=s(GN);qMo=r(zZr,"RobertaForCausalLM"),zZr.forEach(t),NMo=r(AAe," (RoBERTa model)"),AAe.forEach(t),jMo=i(W),J_=n(W,"LI",{});var yAe=s(J_);hie=n(yAe,"STRONG",{});var QZr=s(hie);DMo=r(QZr,"roformer"),QZr.forEach(t),GMo=r(yAe," \u2014 "),ON=n(yAe,"A",{href:!0});var WZr=s(ON);OMo=r(WZr,"RoFormerForCausalLM"),WZr.forEach(t),VMo=r(yAe," (RoFormer model)"),yAe.forEach(t),XMo=i(W),Y_=n(W,"LI",{});var LAe=s(Y_);pie=n(LAe,"STRONG",{});var HZr=s(pie);zMo=r(HZr,"speech_to_text_2"),HZr.forEach(t),QMo=r(LAe," \u2014 "),VN=n(LAe,"A",{href:!0});var UZr=s(VN);WMo=r(UZr,"Speech2Text2ForCausalLM"),UZr.forEach(t),HMo=r(LAe," (Speech2Text2 model)"),LAe.forEach(t),UMo=i(W),K_=n(W,"LI",{});var xAe=s(K_);uie=n(xAe,"STRONG",{});var JZr=s(uie);JMo=r(JZr,"transfo-xl"),JZr.forEach(t),YMo=r(xAe," \u2014 "),XN=n(xAe,"A",{href:!0});var YZr=s(XN);KMo=r(YZr,"TransfoXLLMHeadModel"),YZr.forEach(t),ZMo=r(xAe," (Transformer-XL model)"),xAe.forEach(t),e4o=i(W),Z_=n(W,"LI",{});var $Ae=s(Z_);_ie=n($Ae,"STRONG",{});var KZr=s(_ie);o4o=r(KZr,"trocr"),KZr.forEach(t),r4o=r($Ae," \u2014 "),zN=n($Ae,"A",{href:!0});var ZZr=s(zN);t4o=r(ZZr,"TrOCRForCausalLM"),ZZr.forEach(t),a4o=r($Ae," (TrOCR model)"),$Ae.forEach(t),n4o=i(W),e1=n(W,"LI",{});var kAe=s(e1);bie=n(kAe,"STRONG",{});var eet=s(bie);s4o=r(eet,"xglm"),eet.forEach(t),l4o=r(kAe," \u2014 "),QN=n(kAe,"A",{href:!0});var oet=s(QN);i4o=r(oet,"XGLMForCausalLM"),oet.forEach(t),d4o=r(kAe," (XGLM model)"),kAe.forEach(t),c4o=i(W),o1=n(W,"LI",{});var SAe=s(o1);vie=n(SAe,"STRONG",{});var ret=s(vie);f4o=r(ret,"xlm"),ret.forEach(t),m4o=r(SAe," \u2014 "),WN=n(SAe,"A",{href:!0});var tet=s(WN);g4o=r(tet,"XLMWithLMHeadModel"),tet.forEach(t),h4o=r(SAe," (XLM model)"),SAe.forEach(t),p4o=i(W),r1=n(W,"LI",{});var RAe=s(r1);Fie=n(RAe,"STRONG",{});var aet=s(Fie);u4o=r(aet,"xlm-prophetnet"),aet.forEach(t),_4o=r(RAe," \u2014 "),HN=n(RAe,"A",{href:!0});var net=s(HN);b4o=r(net,"XLMProphetNetForCausalLM"),net.forEach(t),v4o=r(RAe," (XLMProphetNet model)"),RAe.forEach(t),F4o=i(W),t1=n(W,"LI",{});var BAe=s(t1);Tie=n(BAe,"STRONG",{});var set=s(Tie);T4o=r(set,"xlm-roberta"),set.forEach(t),M4o=r(BAe," \u2014 "),UN=n(BAe,"A",{href:!0});var iet=s(UN);E4o=r(iet,"XLMRobertaForCausalLM"),iet.forEach(t),C4o=r(BAe," (XLM-RoBERTa model)"),BAe.forEach(t),w4o=i(W),a1=n(W,"LI",{});var PAe=s(a1);Mie=n(PAe,"STRONG",{});var det=s(Mie);A4o=r(det,"xlm-roberta-xl"),det.forEach(t),y4o=r(PAe," \u2014 "),JN=n(PAe,"A",{href:!0});var cet=s(JN);L4o=r(cet,"XLMRobertaXLForCausalLM"),cet.forEach(t),x4o=r(PAe," (XLM-RoBERTa-XL model)"),PAe.forEach(t),$4o=i(W),n1=n(W,"LI",{});var IAe=s(n1);Eie=n(IAe,"STRONG",{});var fet=s(Eie);k4o=r(fet,"xlnet"),fet.forEach(t),S4o=r(IAe," \u2014 "),YN=n(IAe,"A",{href:!0});var met=s(YN);R4o=r(met,"XLNetLMHeadModel"),met.forEach(t),B4o=r(IAe," (XLNet model)"),IAe.forEach(t),W.forEach(t),P4o=i(oa),s1=n(oa,"P",{});var qAe=s(s1);I4o=r(qAe,"The model is set in evaluation mode by default using "),Cie=n(qAe,"CODE",{});var get=s(Cie);q4o=r(get,"model.eval()"),get.forEach(t),N4o=r(qAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(qAe,"CODE",{});var het=s(wie);j4o=r(het,"model.train()"),het.forEach(t),qAe.forEach(t),D4o=i(oa),T(l1.$$.fragment,oa),oa.forEach(t),Os.forEach(t),VPe=i(f),ki=n(f,"H2",{class:!0});var Wqe=s(ki);i1=n(Wqe,"A",{id:!0,class:!0,href:!0});var pet=s(i1);Aie=n(pet,"SPAN",{});var uet=s(Aie);T(RA.$$.fragment,uet),uet.forEach(t),pet.forEach(t),G4o=i(Wqe),yie=n(Wqe,"SPAN",{});var _et=s(yie);O4o=r(_et,"AutoModelForMaskedLM"),_et.forEach(t),Wqe.forEach(t),XPe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(BA.$$.fragment,Vs),V4o=i(Vs),Si=n(Vs,"P",{});var lK=s(Si);X4o=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KN=n(lK,"A",{href:!0});var bet=s(KN);z4o=r(bet,"from_pretrained()"),bet.forEach(t),Q4o=r(lK," class method or the "),ZN=n(lK,"A",{href:!0});var vet=s(ZN);W4o=r(vet,"from_config()"),vet.forEach(t),H4o=r(lK,` class
method.`),lK.forEach(t),U4o=i(Vs),PA=n(Vs,"P",{});var Hqe=s(PA);J4o=r(Hqe,"This class cannot be instantiated directly using "),Lie=n(Hqe,"CODE",{});var Fet=s(Lie);Y4o=r(Fet,"__init__()"),Fet.forEach(t),K4o=r(Hqe," (throws an error)."),Hqe.forEach(t),Z4o=i(Vs),at=n(Vs,"DIV",{class:!0});var o3=s(at);T(IA.$$.fragment,o3),eEo=i(o3),xie=n(o3,"P",{});var Tet=s(xie);oEo=r(Tet,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tet.forEach(t),rEo=i(o3),Ri=n(o3,"P",{});var iK=s(Ri);tEo=r(iK,`Note:
Loading a model from its configuration file does `),$ie=n(iK,"STRONG",{});var Met=s($ie);aEo=r(Met,"not"),Met.forEach(t),nEo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=n(iK,"A",{href:!0});var Eet=s(ej);sEo=r(Eet,"from_pretrained()"),Eet.forEach(t),lEo=r(iK," to load the model weights."),iK.forEach(t),iEo=i(o3),T(d1.$$.fragment,o3),o3.forEach(t),dEo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(qA.$$.fragment,ra),cEo=i(ra),kie=n(ra,"P",{});var Cet=s(kie);fEo=r(Cet,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cet.forEach(t),mEo=i(ra),xa=n(ra,"P",{});var r3=s(xa);gEo=r(r3,"The model class to instantiate is selected based on the "),Sie=n(r3,"CODE",{});var wet=s(Sie);hEo=r(wet,"model_type"),wet.forEach(t),pEo=r(r3,` property of the config object (either
passed as an argument or loaded from `),Rie=n(r3,"CODE",{});var Aet=s(Rie);uEo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),_Eo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bie=n(r3,"CODE",{});var yet=s(Bie);bEo=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),vEo=r(r3,":"),r3.forEach(t),FEo=i(ra),Q=n(ra,"UL",{});var H=s(Q);c1=n(H,"LI",{});var NAe=s(c1);Pie=n(NAe,"STRONG",{});var Let=s(Pie);TEo=r(Let,"albert"),Let.forEach(t),MEo=r(NAe," \u2014 "),oj=n(NAe,"A",{href:!0});var xet=s(oj);EEo=r(xet,"AlbertForMaskedLM"),xet.forEach(t),CEo=r(NAe," (ALBERT model)"),NAe.forEach(t),wEo=i(H),f1=n(H,"LI",{});var jAe=s(f1);Iie=n(jAe,"STRONG",{});var $et=s(Iie);AEo=r($et,"bart"),$et.forEach(t),yEo=r(jAe," \u2014 "),rj=n(jAe,"A",{href:!0});var ket=s(rj);LEo=r(ket,"BartForConditionalGeneration"),ket.forEach(t),xEo=r(jAe," (BART model)"),jAe.forEach(t),$Eo=i(H),m1=n(H,"LI",{});var DAe=s(m1);qie=n(DAe,"STRONG",{});var Set=s(qie);kEo=r(Set,"bert"),Set.forEach(t),SEo=r(DAe," \u2014 "),tj=n(DAe,"A",{href:!0});var Ret=s(tj);REo=r(Ret,"BertForMaskedLM"),Ret.forEach(t),BEo=r(DAe," (BERT model)"),DAe.forEach(t),PEo=i(H),g1=n(H,"LI",{});var GAe=s(g1);Nie=n(GAe,"STRONG",{});var Bet=s(Nie);IEo=r(Bet,"big_bird"),Bet.forEach(t),qEo=r(GAe," \u2014 "),aj=n(GAe,"A",{href:!0});var Pet=s(aj);NEo=r(Pet,"BigBirdForMaskedLM"),Pet.forEach(t),jEo=r(GAe," (BigBird model)"),GAe.forEach(t),DEo=i(H),h1=n(H,"LI",{});var OAe=s(h1);jie=n(OAe,"STRONG",{});var Iet=s(jie);GEo=r(Iet,"camembert"),Iet.forEach(t),OEo=r(OAe," \u2014 "),nj=n(OAe,"A",{href:!0});var qet=s(nj);VEo=r(qet,"CamembertForMaskedLM"),qet.forEach(t),XEo=r(OAe," (CamemBERT model)"),OAe.forEach(t),zEo=i(H),p1=n(H,"LI",{});var VAe=s(p1);Die=n(VAe,"STRONG",{});var Net=s(Die);QEo=r(Net,"convbert"),Net.forEach(t),WEo=r(VAe," \u2014 "),sj=n(VAe,"A",{href:!0});var jet=s(sj);HEo=r(jet,"ConvBertForMaskedLM"),jet.forEach(t),UEo=r(VAe," (ConvBERT model)"),VAe.forEach(t),JEo=i(H),u1=n(H,"LI",{});var XAe=s(u1);Gie=n(XAe,"STRONG",{});var Det=s(Gie);YEo=r(Det,"data2vec-text"),Det.forEach(t),KEo=r(XAe," \u2014 "),lj=n(XAe,"A",{href:!0});var Get=s(lj);ZEo=r(Get,"Data2VecTextForMaskedLM"),Get.forEach(t),e5o=r(XAe," (Data2VecText model)"),XAe.forEach(t),o5o=i(H),_1=n(H,"LI",{});var zAe=s(_1);Oie=n(zAe,"STRONG",{});var Oet=s(Oie);r5o=r(Oet,"deberta"),Oet.forEach(t),t5o=r(zAe," \u2014 "),ij=n(zAe,"A",{href:!0});var Vet=s(ij);a5o=r(Vet,"DebertaForMaskedLM"),Vet.forEach(t),n5o=r(zAe," (DeBERTa model)"),zAe.forEach(t),s5o=i(H),b1=n(H,"LI",{});var QAe=s(b1);Vie=n(QAe,"STRONG",{});var Xet=s(Vie);l5o=r(Xet,"deberta-v2"),Xet.forEach(t),i5o=r(QAe," \u2014 "),dj=n(QAe,"A",{href:!0});var zet=s(dj);d5o=r(zet,"DebertaV2ForMaskedLM"),zet.forEach(t),c5o=r(QAe," (DeBERTa-v2 model)"),QAe.forEach(t),f5o=i(H),v1=n(H,"LI",{});var WAe=s(v1);Xie=n(WAe,"STRONG",{});var Qet=s(Xie);m5o=r(Qet,"distilbert"),Qet.forEach(t),g5o=r(WAe," \u2014 "),cj=n(WAe,"A",{href:!0});var Wet=s(cj);h5o=r(Wet,"DistilBertForMaskedLM"),Wet.forEach(t),p5o=r(WAe," (DistilBERT model)"),WAe.forEach(t),u5o=i(H),F1=n(H,"LI",{});var HAe=s(F1);zie=n(HAe,"STRONG",{});var Het=s(zie);_5o=r(Het,"electra"),Het.forEach(t),b5o=r(HAe," \u2014 "),fj=n(HAe,"A",{href:!0});var Uet=s(fj);v5o=r(Uet,"ElectraForMaskedLM"),Uet.forEach(t),F5o=r(HAe," (ELECTRA model)"),HAe.forEach(t),T5o=i(H),T1=n(H,"LI",{});var UAe=s(T1);Qie=n(UAe,"STRONG",{});var Jet=s(Qie);M5o=r(Jet,"flaubert"),Jet.forEach(t),E5o=r(UAe," \u2014 "),mj=n(UAe,"A",{href:!0});var Yet=s(mj);C5o=r(Yet,"FlaubertWithLMHeadModel"),Yet.forEach(t),w5o=r(UAe," (FlauBERT model)"),UAe.forEach(t),A5o=i(H),M1=n(H,"LI",{});var JAe=s(M1);Wie=n(JAe,"STRONG",{});var Ket=s(Wie);y5o=r(Ket,"fnet"),Ket.forEach(t),L5o=r(JAe," \u2014 "),gj=n(JAe,"A",{href:!0});var Zet=s(gj);x5o=r(Zet,"FNetForMaskedLM"),Zet.forEach(t),$5o=r(JAe," (FNet model)"),JAe.forEach(t),k5o=i(H),E1=n(H,"LI",{});var YAe=s(E1);Hie=n(YAe,"STRONG",{});var eot=s(Hie);S5o=r(eot,"funnel"),eot.forEach(t),R5o=r(YAe," \u2014 "),hj=n(YAe,"A",{href:!0});var oot=s(hj);B5o=r(oot,"FunnelForMaskedLM"),oot.forEach(t),P5o=r(YAe," (Funnel Transformer model)"),YAe.forEach(t),I5o=i(H),C1=n(H,"LI",{});var KAe=s(C1);Uie=n(KAe,"STRONG",{});var rot=s(Uie);q5o=r(rot,"ibert"),rot.forEach(t),N5o=r(KAe," \u2014 "),pj=n(KAe,"A",{href:!0});var tot=s(pj);j5o=r(tot,"IBertForMaskedLM"),tot.forEach(t),D5o=r(KAe," (I-BERT model)"),KAe.forEach(t),G5o=i(H),w1=n(H,"LI",{});var ZAe=s(w1);Jie=n(ZAe,"STRONG",{});var aot=s(Jie);O5o=r(aot,"layoutlm"),aot.forEach(t),V5o=r(ZAe," \u2014 "),uj=n(ZAe,"A",{href:!0});var not=s(uj);X5o=r(not,"LayoutLMForMaskedLM"),not.forEach(t),z5o=r(ZAe," (LayoutLM model)"),ZAe.forEach(t),Q5o=i(H),A1=n(H,"LI",{});var e6e=s(A1);Yie=n(e6e,"STRONG",{});var sot=s(Yie);W5o=r(sot,"longformer"),sot.forEach(t),H5o=r(e6e," \u2014 "),_j=n(e6e,"A",{href:!0});var lot=s(_j);U5o=r(lot,"LongformerForMaskedLM"),lot.forEach(t),J5o=r(e6e," (Longformer model)"),e6e.forEach(t),Y5o=i(H),y1=n(H,"LI",{});var o6e=s(y1);Kie=n(o6e,"STRONG",{});var iot=s(Kie);K5o=r(iot,"mbart"),iot.forEach(t),Z5o=r(o6e," \u2014 "),bj=n(o6e,"A",{href:!0});var dot=s(bj);eCo=r(dot,"MBartForConditionalGeneration"),dot.forEach(t),oCo=r(o6e," (mBART model)"),o6e.forEach(t),rCo=i(H),L1=n(H,"LI",{});var r6e=s(L1);Zie=n(r6e,"STRONG",{});var cot=s(Zie);tCo=r(cot,"megatron-bert"),cot.forEach(t),aCo=r(r6e," \u2014 "),vj=n(r6e,"A",{href:!0});var fot=s(vj);nCo=r(fot,"MegatronBertForMaskedLM"),fot.forEach(t),sCo=r(r6e," (MegatronBert model)"),r6e.forEach(t),lCo=i(H),x1=n(H,"LI",{});var t6e=s(x1);ede=n(t6e,"STRONG",{});var mot=s(ede);iCo=r(mot,"mobilebert"),mot.forEach(t),dCo=r(t6e," \u2014 "),Fj=n(t6e,"A",{href:!0});var got=s(Fj);cCo=r(got,"MobileBertForMaskedLM"),got.forEach(t),fCo=r(t6e," (MobileBERT model)"),t6e.forEach(t),mCo=i(H),$1=n(H,"LI",{});var a6e=s($1);ode=n(a6e,"STRONG",{});var hot=s(ode);gCo=r(hot,"mpnet"),hot.forEach(t),hCo=r(a6e," \u2014 "),Tj=n(a6e,"A",{href:!0});var pot=s(Tj);pCo=r(pot,"MPNetForMaskedLM"),pot.forEach(t),uCo=r(a6e," (MPNet model)"),a6e.forEach(t),_Co=i(H),k1=n(H,"LI",{});var n6e=s(k1);rde=n(n6e,"STRONG",{});var uot=s(rde);bCo=r(uot,"nystromformer"),uot.forEach(t),vCo=r(n6e," \u2014 "),Mj=n(n6e,"A",{href:!0});var _ot=s(Mj);FCo=r(_ot,"NystromformerForMaskedLM"),_ot.forEach(t),TCo=r(n6e," (Nystromformer model)"),n6e.forEach(t),MCo=i(H),S1=n(H,"LI",{});var s6e=s(S1);tde=n(s6e,"STRONG",{});var bot=s(tde);ECo=r(bot,"perceiver"),bot.forEach(t),CCo=r(s6e," \u2014 "),Ej=n(s6e,"A",{href:!0});var vot=s(Ej);wCo=r(vot,"PerceiverForMaskedLM"),vot.forEach(t),ACo=r(s6e," (Perceiver model)"),s6e.forEach(t),yCo=i(H),R1=n(H,"LI",{});var l6e=s(R1);ade=n(l6e,"STRONG",{});var Fot=s(ade);LCo=r(Fot,"qdqbert"),Fot.forEach(t),xCo=r(l6e," \u2014 "),Cj=n(l6e,"A",{href:!0});var Tot=s(Cj);$Co=r(Tot,"QDQBertForMaskedLM"),Tot.forEach(t),kCo=r(l6e," (QDQBert model)"),l6e.forEach(t),SCo=i(H),B1=n(H,"LI",{});var i6e=s(B1);nde=n(i6e,"STRONG",{});var Mot=s(nde);RCo=r(Mot,"reformer"),Mot.forEach(t),BCo=r(i6e," \u2014 "),wj=n(i6e,"A",{href:!0});var Eot=s(wj);PCo=r(Eot,"ReformerForMaskedLM"),Eot.forEach(t),ICo=r(i6e," (Reformer model)"),i6e.forEach(t),qCo=i(H),P1=n(H,"LI",{});var d6e=s(P1);sde=n(d6e,"STRONG",{});var Cot=s(sde);NCo=r(Cot,"rembert"),Cot.forEach(t),jCo=r(d6e," \u2014 "),Aj=n(d6e,"A",{href:!0});var wot=s(Aj);DCo=r(wot,"RemBertForMaskedLM"),wot.forEach(t),GCo=r(d6e," (RemBERT model)"),d6e.forEach(t),OCo=i(H),I1=n(H,"LI",{});var c6e=s(I1);lde=n(c6e,"STRONG",{});var Aot=s(lde);VCo=r(Aot,"roberta"),Aot.forEach(t),XCo=r(c6e," \u2014 "),yj=n(c6e,"A",{href:!0});var yot=s(yj);zCo=r(yot,"RobertaForMaskedLM"),yot.forEach(t),QCo=r(c6e," (RoBERTa model)"),c6e.forEach(t),WCo=i(H),q1=n(H,"LI",{});var f6e=s(q1);ide=n(f6e,"STRONG",{});var Lot=s(ide);HCo=r(Lot,"roformer"),Lot.forEach(t),UCo=r(f6e," \u2014 "),Lj=n(f6e,"A",{href:!0});var xot=s(Lj);JCo=r(xot,"RoFormerForMaskedLM"),xot.forEach(t),YCo=r(f6e," (RoFormer model)"),f6e.forEach(t),KCo=i(H),N1=n(H,"LI",{});var m6e=s(N1);dde=n(m6e,"STRONG",{});var $ot=s(dde);ZCo=r($ot,"squeezebert"),$ot.forEach(t),e3o=r(m6e," \u2014 "),xj=n(m6e,"A",{href:!0});var kot=s(xj);o3o=r(kot,"SqueezeBertForMaskedLM"),kot.forEach(t),r3o=r(m6e," (SqueezeBERT model)"),m6e.forEach(t),t3o=i(H),j1=n(H,"LI",{});var g6e=s(j1);cde=n(g6e,"STRONG",{});var Sot=s(cde);a3o=r(Sot,"tapas"),Sot.forEach(t),n3o=r(g6e," \u2014 "),$j=n(g6e,"A",{href:!0});var Rot=s($j);s3o=r(Rot,"TapasForMaskedLM"),Rot.forEach(t),l3o=r(g6e," (TAPAS model)"),g6e.forEach(t),i3o=i(H),D1=n(H,"LI",{});var h6e=s(D1);fde=n(h6e,"STRONG",{});var Bot=s(fde);d3o=r(Bot,"wav2vec2"),Bot.forEach(t),c3o=r(h6e," \u2014 "),mde=n(h6e,"CODE",{});var Pot=s(mde);f3o=r(Pot,"Wav2Vec2ForMaskedLM"),Pot.forEach(t),m3o=r(h6e," (Wav2Vec2 model)"),h6e.forEach(t),g3o=i(H),G1=n(H,"LI",{});var p6e=s(G1);gde=n(p6e,"STRONG",{});var Iot=s(gde);h3o=r(Iot,"xlm"),Iot.forEach(t),p3o=r(p6e," \u2014 "),kj=n(p6e,"A",{href:!0});var qot=s(kj);u3o=r(qot,"XLMWithLMHeadModel"),qot.forEach(t),_3o=r(p6e," (XLM model)"),p6e.forEach(t),b3o=i(H),O1=n(H,"LI",{});var u6e=s(O1);hde=n(u6e,"STRONG",{});var Not=s(hde);v3o=r(Not,"xlm-roberta"),Not.forEach(t),F3o=r(u6e," \u2014 "),Sj=n(u6e,"A",{href:!0});var jot=s(Sj);T3o=r(jot,"XLMRobertaForMaskedLM"),jot.forEach(t),M3o=r(u6e," (XLM-RoBERTa model)"),u6e.forEach(t),E3o=i(H),V1=n(H,"LI",{});var _6e=s(V1);pde=n(_6e,"STRONG",{});var Dot=s(pde);C3o=r(Dot,"xlm-roberta-xl"),Dot.forEach(t),w3o=r(_6e," \u2014 "),Rj=n(_6e,"A",{href:!0});var Got=s(Rj);A3o=r(Got,"XLMRobertaXLForMaskedLM"),Got.forEach(t),y3o=r(_6e," (XLM-RoBERTa-XL model)"),_6e.forEach(t),L3o=i(H),X1=n(H,"LI",{});var b6e=s(X1);ude=n(b6e,"STRONG",{});var Oot=s(ude);x3o=r(Oot,"yoso"),Oot.forEach(t),$3o=r(b6e," \u2014 "),Bj=n(b6e,"A",{href:!0});var Vot=s(Bj);k3o=r(Vot,"YosoForMaskedLM"),Vot.forEach(t),S3o=r(b6e," (YOSO model)"),b6e.forEach(t),H.forEach(t),R3o=i(ra),z1=n(ra,"P",{});var v6e=s(z1);B3o=r(v6e,"The model is set in evaluation mode by default using "),_de=n(v6e,"CODE",{});var Xot=s(_de);P3o=r(Xot,"model.eval()"),Xot.forEach(t),I3o=r(v6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=n(v6e,"CODE",{});var zot=s(bde);q3o=r(zot,"model.train()"),zot.forEach(t),v6e.forEach(t),N3o=i(ra),T(Q1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),zPe=i(f),Bi=n(f,"H2",{class:!0});var Uqe=s(Bi);W1=n(Uqe,"A",{id:!0,class:!0,href:!0});var Qot=s(W1);vde=n(Qot,"SPAN",{});var Wot=s(vde);T(NA.$$.fragment,Wot),Wot.forEach(t),Qot.forEach(t),j3o=i(Uqe),Fde=n(Uqe,"SPAN",{});var Hot=s(Fde);D3o=r(Hot,"AutoModelForSeq2SeqLM"),Hot.forEach(t),Uqe.forEach(t),QPe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(jA.$$.fragment,Xs),G3o=i(Xs),Pi=n(Xs,"P",{});var dK=s(Pi);O3o=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Pj=n(dK,"A",{href:!0});var Uot=s(Pj);V3o=r(Uot,"from_pretrained()"),Uot.forEach(t),X3o=r(dK," class method or the "),Ij=n(dK,"A",{href:!0});var Jot=s(Ij);z3o=r(Jot,"from_config()"),Jot.forEach(t),Q3o=r(dK,` class
method.`),dK.forEach(t),W3o=i(Xs),DA=n(Xs,"P",{});var Jqe=s(DA);H3o=r(Jqe,"This class cannot be instantiated directly using "),Tde=n(Jqe,"CODE",{});var Yot=s(Tde);U3o=r(Yot,"__init__()"),Yot.forEach(t),J3o=r(Jqe," (throws an error)."),Jqe.forEach(t),Y3o=i(Xs),nt=n(Xs,"DIV",{class:!0});var t3=s(nt);T(GA.$$.fragment,t3),K3o=i(t3),Mde=n(t3,"P",{});var Kot=s(Mde);Z3o=r(Kot,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kot.forEach(t),ewo=i(t3),Ii=n(t3,"P",{});var cK=s(Ii);owo=r(cK,`Note:
Loading a model from its configuration file does `),Ede=n(cK,"STRONG",{});var Zot=s(Ede);rwo=r(Zot,"not"),Zot.forEach(t),two=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qj=n(cK,"A",{href:!0});var ert=s(qj);awo=r(ert,"from_pretrained()"),ert.forEach(t),nwo=r(cK," to load the model weights."),cK.forEach(t),swo=i(t3),T(H1.$$.fragment,t3),t3.forEach(t),lwo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(OA.$$.fragment,ta),iwo=i(ta),Cde=n(ta,"P",{});var ort=s(Cde);dwo=r(ort,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ort.forEach(t),cwo=i(ta),$a=n(ta,"P",{});var a3=s($a);fwo=r(a3,"The model class to instantiate is selected based on the "),wde=n(a3,"CODE",{});var rrt=s(wde);mwo=r(rrt,"model_type"),rrt.forEach(t),gwo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Ade=n(a3,"CODE",{});var trt=s(Ade);hwo=r(trt,"pretrained_model_name_or_path"),trt.forEach(t),pwo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(a3,"CODE",{});var art=s(yde);uwo=r(art,"pretrained_model_name_or_path"),art.forEach(t),_wo=r(a3,":"),a3.forEach(t),bwo=i(ta),he=n(ta,"UL",{});var ue=s(he);U1=n(ue,"LI",{});var F6e=s(U1);Lde=n(F6e,"STRONG",{});var nrt=s(Lde);vwo=r(nrt,"bart"),nrt.forEach(t),Fwo=r(F6e," \u2014 "),Nj=n(F6e,"A",{href:!0});var srt=s(Nj);Two=r(srt,"BartForConditionalGeneration"),srt.forEach(t),Mwo=r(F6e," (BART model)"),F6e.forEach(t),Ewo=i(ue),J1=n(ue,"LI",{});var T6e=s(J1);xde=n(T6e,"STRONG",{});var lrt=s(xde);Cwo=r(lrt,"bigbird_pegasus"),lrt.forEach(t),wwo=r(T6e," \u2014 "),jj=n(T6e,"A",{href:!0});var irt=s(jj);Awo=r(irt,"BigBirdPegasusForConditionalGeneration"),irt.forEach(t),ywo=r(T6e," (BigBirdPegasus model)"),T6e.forEach(t),Lwo=i(ue),Y1=n(ue,"LI",{});var M6e=s(Y1);$de=n(M6e,"STRONG",{});var drt=s($de);xwo=r(drt,"blenderbot"),drt.forEach(t),$wo=r(M6e," \u2014 "),Dj=n(M6e,"A",{href:!0});var crt=s(Dj);kwo=r(crt,"BlenderbotForConditionalGeneration"),crt.forEach(t),Swo=r(M6e," (Blenderbot model)"),M6e.forEach(t),Rwo=i(ue),K1=n(ue,"LI",{});var E6e=s(K1);kde=n(E6e,"STRONG",{});var frt=s(kde);Bwo=r(frt,"blenderbot-small"),frt.forEach(t),Pwo=r(E6e," \u2014 "),Gj=n(E6e,"A",{href:!0});var mrt=s(Gj);Iwo=r(mrt,"BlenderbotSmallForConditionalGeneration"),mrt.forEach(t),qwo=r(E6e," (BlenderbotSmall model)"),E6e.forEach(t),Nwo=i(ue),Z1=n(ue,"LI",{});var C6e=s(Z1);Sde=n(C6e,"STRONG",{});var grt=s(Sde);jwo=r(grt,"encoder-decoder"),grt.forEach(t),Dwo=r(C6e," \u2014 "),Oj=n(C6e,"A",{href:!0});var hrt=s(Oj);Gwo=r(hrt,"EncoderDecoderModel"),hrt.forEach(t),Owo=r(C6e," (Encoder decoder model)"),C6e.forEach(t),Vwo=i(ue),e8=n(ue,"LI",{});var w6e=s(e8);Rde=n(w6e,"STRONG",{});var prt=s(Rde);Xwo=r(prt,"fsmt"),prt.forEach(t),zwo=r(w6e," \u2014 "),Vj=n(w6e,"A",{href:!0});var urt=s(Vj);Qwo=r(urt,"FSMTForConditionalGeneration"),urt.forEach(t),Wwo=r(w6e," (FairSeq Machine-Translation model)"),w6e.forEach(t),Hwo=i(ue),o8=n(ue,"LI",{});var A6e=s(o8);Bde=n(A6e,"STRONG",{});var _rt=s(Bde);Uwo=r(_rt,"led"),_rt.forEach(t),Jwo=r(A6e," \u2014 "),Xj=n(A6e,"A",{href:!0});var brt=s(Xj);Ywo=r(brt,"LEDForConditionalGeneration"),brt.forEach(t),Kwo=r(A6e," (LED model)"),A6e.forEach(t),Zwo=i(ue),r8=n(ue,"LI",{});var y6e=s(r8);Pde=n(y6e,"STRONG",{});var vrt=s(Pde);eAo=r(vrt,"m2m_100"),vrt.forEach(t),oAo=r(y6e," \u2014 "),zj=n(y6e,"A",{href:!0});var Frt=s(zj);rAo=r(Frt,"M2M100ForConditionalGeneration"),Frt.forEach(t),tAo=r(y6e," (M2M100 model)"),y6e.forEach(t),aAo=i(ue),t8=n(ue,"LI",{});var L6e=s(t8);Ide=n(L6e,"STRONG",{});var Trt=s(Ide);nAo=r(Trt,"marian"),Trt.forEach(t),sAo=r(L6e," \u2014 "),Qj=n(L6e,"A",{href:!0});var Mrt=s(Qj);lAo=r(Mrt,"MarianMTModel"),Mrt.forEach(t),iAo=r(L6e," (Marian model)"),L6e.forEach(t),dAo=i(ue),a8=n(ue,"LI",{});var x6e=s(a8);qde=n(x6e,"STRONG",{});var Ert=s(qde);cAo=r(Ert,"mbart"),Ert.forEach(t),fAo=r(x6e," \u2014 "),Wj=n(x6e,"A",{href:!0});var Crt=s(Wj);mAo=r(Crt,"MBartForConditionalGeneration"),Crt.forEach(t),gAo=r(x6e," (mBART model)"),x6e.forEach(t),hAo=i(ue),n8=n(ue,"LI",{});var $6e=s(n8);Nde=n($6e,"STRONG",{});var wrt=s(Nde);pAo=r(wrt,"mt5"),wrt.forEach(t),uAo=r($6e," \u2014 "),Hj=n($6e,"A",{href:!0});var Art=s(Hj);_Ao=r(Art,"MT5ForConditionalGeneration"),Art.forEach(t),bAo=r($6e," (mT5 model)"),$6e.forEach(t),vAo=i(ue),s8=n(ue,"LI",{});var k6e=s(s8);jde=n(k6e,"STRONG",{});var yrt=s(jde);FAo=r(yrt,"pegasus"),yrt.forEach(t),TAo=r(k6e," \u2014 "),Uj=n(k6e,"A",{href:!0});var Lrt=s(Uj);MAo=r(Lrt,"PegasusForConditionalGeneration"),Lrt.forEach(t),EAo=r(k6e," (Pegasus model)"),k6e.forEach(t),CAo=i(ue),l8=n(ue,"LI",{});var S6e=s(l8);Dde=n(S6e,"STRONG",{});var xrt=s(Dde);wAo=r(xrt,"plbart"),xrt.forEach(t),AAo=r(S6e," \u2014 "),Jj=n(S6e,"A",{href:!0});var $rt=s(Jj);yAo=r($rt,"PLBartForConditionalGeneration"),$rt.forEach(t),LAo=r(S6e," (PLBart model)"),S6e.forEach(t),xAo=i(ue),i8=n(ue,"LI",{});var R6e=s(i8);Gde=n(R6e,"STRONG",{});var krt=s(Gde);$Ao=r(krt,"prophetnet"),krt.forEach(t),kAo=r(R6e," \u2014 "),Yj=n(R6e,"A",{href:!0});var Srt=s(Yj);SAo=r(Srt,"ProphetNetForConditionalGeneration"),Srt.forEach(t),RAo=r(R6e," (ProphetNet model)"),R6e.forEach(t),BAo=i(ue),d8=n(ue,"LI",{});var B6e=s(d8);Ode=n(B6e,"STRONG",{});var Rrt=s(Ode);PAo=r(Rrt,"t5"),Rrt.forEach(t),IAo=r(B6e," \u2014 "),Kj=n(B6e,"A",{href:!0});var Brt=s(Kj);qAo=r(Brt,"T5ForConditionalGeneration"),Brt.forEach(t),NAo=r(B6e," (T5 model)"),B6e.forEach(t),jAo=i(ue),c8=n(ue,"LI",{});var P6e=s(c8);Vde=n(P6e,"STRONG",{});var Prt=s(Vde);DAo=r(Prt,"tapex"),Prt.forEach(t),GAo=r(P6e," \u2014 "),Zj=n(P6e,"A",{href:!0});var Irt=s(Zj);OAo=r(Irt,"BartForConditionalGeneration"),Irt.forEach(t),VAo=r(P6e," (TAPEX model)"),P6e.forEach(t),XAo=i(ue),f8=n(ue,"LI",{});var I6e=s(f8);Xde=n(I6e,"STRONG",{});var qrt=s(Xde);zAo=r(qrt,"xlm-prophetnet"),qrt.forEach(t),QAo=r(I6e," \u2014 "),eD=n(I6e,"A",{href:!0});var Nrt=s(eD);WAo=r(Nrt,"XLMProphetNetForConditionalGeneration"),Nrt.forEach(t),HAo=r(I6e," (XLMProphetNet model)"),I6e.forEach(t),ue.forEach(t),UAo=i(ta),m8=n(ta,"P",{});var q6e=s(m8);JAo=r(q6e,"The model is set in evaluation mode by default using "),zde=n(q6e,"CODE",{});var jrt=s(zde);YAo=r(jrt,"model.eval()"),jrt.forEach(t),KAo=r(q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=n(q6e,"CODE",{});var Drt=s(Qde);ZAo=r(Drt,"model.train()"),Drt.forEach(t),q6e.forEach(t),e6o=i(ta),T(g8.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),WPe=i(f),qi=n(f,"H2",{class:!0});var Yqe=s(qi);h8=n(Yqe,"A",{id:!0,class:!0,href:!0});var Grt=s(h8);Wde=n(Grt,"SPAN",{});var Ort=s(Wde);T(VA.$$.fragment,Ort),Ort.forEach(t),Grt.forEach(t),o6o=i(Yqe),Hde=n(Yqe,"SPAN",{});var Vrt=s(Hde);r6o=r(Vrt,"AutoModelForSequenceClassification"),Vrt.forEach(t),Yqe.forEach(t),HPe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(XA.$$.fragment,zs),t6o=i(zs),Ni=n(zs,"P",{});var fK=s(Ni);a6o=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oD=n(fK,"A",{href:!0});var Xrt=s(oD);n6o=r(Xrt,"from_pretrained()"),Xrt.forEach(t),s6o=r(fK," class method or the "),rD=n(fK,"A",{href:!0});var zrt=s(rD);l6o=r(zrt,"from_config()"),zrt.forEach(t),i6o=r(fK,` class
method.`),fK.forEach(t),d6o=i(zs),zA=n(zs,"P",{});var Kqe=s(zA);c6o=r(Kqe,"This class cannot be instantiated directly using "),Ude=n(Kqe,"CODE",{});var Qrt=s(Ude);f6o=r(Qrt,"__init__()"),Qrt.forEach(t),m6o=r(Kqe," (throws an error)."),Kqe.forEach(t),g6o=i(zs),st=n(zs,"DIV",{class:!0});var n3=s(st);T(QA.$$.fragment,n3),h6o=i(n3),Jde=n(n3,"P",{});var Wrt=s(Jde);p6o=r(Wrt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wrt.forEach(t),u6o=i(n3),ji=n(n3,"P",{});var mK=s(ji);_6o=r(mK,`Note:
Loading a model from its configuration file does `),Yde=n(mK,"STRONG",{});var Hrt=s(Yde);b6o=r(Hrt,"not"),Hrt.forEach(t),v6o=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tD=n(mK,"A",{href:!0});var Urt=s(tD);F6o=r(Urt,"from_pretrained()"),Urt.forEach(t),T6o=r(mK," to load the model weights."),mK.forEach(t),M6o=i(n3),T(p8.$$.fragment,n3),n3.forEach(t),E6o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(WA.$$.fragment,aa),C6o=i(aa),Kde=n(aa,"P",{});var Jrt=s(Kde);w6o=r(Jrt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jrt.forEach(t),A6o=i(aa),ka=n(aa,"P",{});var s3=s(ka);y6o=r(s3,"The model class to instantiate is selected based on the "),Zde=n(s3,"CODE",{});var Yrt=s(Zde);L6o=r(Yrt,"model_type"),Yrt.forEach(t),x6o=r(s3,` property of the config object (either
passed as an argument or loaded from `),ece=n(s3,"CODE",{});var Krt=s(ece);$6o=r(Krt,"pretrained_model_name_or_path"),Krt.forEach(t),k6o=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=n(s3,"CODE",{});var Zrt=s(oce);S6o=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),R6o=r(s3,":"),s3.forEach(t),B6o=i(aa),q=n(aa,"UL",{});var N=s(q);u8=n(N,"LI",{});var N6e=s(u8);rce=n(N6e,"STRONG",{});var ett=s(rce);P6o=r(ett,"albert"),ett.forEach(t),I6o=r(N6e," \u2014 "),aD=n(N6e,"A",{href:!0});var ott=s(aD);q6o=r(ott,"AlbertForSequenceClassification"),ott.forEach(t),N6o=r(N6e," (ALBERT model)"),N6e.forEach(t),j6o=i(N),_8=n(N,"LI",{});var j6e=s(_8);tce=n(j6e,"STRONG",{});var rtt=s(tce);D6o=r(rtt,"bart"),rtt.forEach(t),G6o=r(j6e," \u2014 "),nD=n(j6e,"A",{href:!0});var ttt=s(nD);O6o=r(ttt,"BartForSequenceClassification"),ttt.forEach(t),V6o=r(j6e," (BART model)"),j6e.forEach(t),X6o=i(N),b8=n(N,"LI",{});var D6e=s(b8);ace=n(D6e,"STRONG",{});var att=s(ace);z6o=r(att,"bert"),att.forEach(t),Q6o=r(D6e," \u2014 "),sD=n(D6e,"A",{href:!0});var ntt=s(sD);W6o=r(ntt,"BertForSequenceClassification"),ntt.forEach(t),H6o=r(D6e," (BERT model)"),D6e.forEach(t),U6o=i(N),v8=n(N,"LI",{});var G6e=s(v8);nce=n(G6e,"STRONG",{});var stt=s(nce);J6o=r(stt,"big_bird"),stt.forEach(t),Y6o=r(G6e," \u2014 "),lD=n(G6e,"A",{href:!0});var ltt=s(lD);K6o=r(ltt,"BigBirdForSequenceClassification"),ltt.forEach(t),Z6o=r(G6e," (BigBird model)"),G6e.forEach(t),eyo=i(N),F8=n(N,"LI",{});var O6e=s(F8);sce=n(O6e,"STRONG",{});var itt=s(sce);oyo=r(itt,"bigbird_pegasus"),itt.forEach(t),ryo=r(O6e," \u2014 "),iD=n(O6e,"A",{href:!0});var dtt=s(iD);tyo=r(dtt,"BigBirdPegasusForSequenceClassification"),dtt.forEach(t),ayo=r(O6e," (BigBirdPegasus model)"),O6e.forEach(t),nyo=i(N),T8=n(N,"LI",{});var V6e=s(T8);lce=n(V6e,"STRONG",{});var ctt=s(lce);syo=r(ctt,"camembert"),ctt.forEach(t),lyo=r(V6e," \u2014 "),dD=n(V6e,"A",{href:!0});var ftt=s(dD);iyo=r(ftt,"CamembertForSequenceClassification"),ftt.forEach(t),dyo=r(V6e," (CamemBERT model)"),V6e.forEach(t),cyo=i(N),M8=n(N,"LI",{});var X6e=s(M8);ice=n(X6e,"STRONG",{});var mtt=s(ice);fyo=r(mtt,"canine"),mtt.forEach(t),myo=r(X6e," \u2014 "),cD=n(X6e,"A",{href:!0});var gtt=s(cD);gyo=r(gtt,"CanineForSequenceClassification"),gtt.forEach(t),hyo=r(X6e," (Canine model)"),X6e.forEach(t),pyo=i(N),E8=n(N,"LI",{});var z6e=s(E8);dce=n(z6e,"STRONG",{});var htt=s(dce);uyo=r(htt,"convbert"),htt.forEach(t),_yo=r(z6e," \u2014 "),fD=n(z6e,"A",{href:!0});var ptt=s(fD);byo=r(ptt,"ConvBertForSequenceClassification"),ptt.forEach(t),vyo=r(z6e," (ConvBERT model)"),z6e.forEach(t),Fyo=i(N),C8=n(N,"LI",{});var Q6e=s(C8);cce=n(Q6e,"STRONG",{});var utt=s(cce);Tyo=r(utt,"ctrl"),utt.forEach(t),Myo=r(Q6e," \u2014 "),mD=n(Q6e,"A",{href:!0});var _tt=s(mD);Eyo=r(_tt,"CTRLForSequenceClassification"),_tt.forEach(t),Cyo=r(Q6e," (CTRL model)"),Q6e.forEach(t),wyo=i(N),w8=n(N,"LI",{});var W6e=s(w8);fce=n(W6e,"STRONG",{});var btt=s(fce);Ayo=r(btt,"data2vec-text"),btt.forEach(t),yyo=r(W6e," \u2014 "),gD=n(W6e,"A",{href:!0});var vtt=s(gD);Lyo=r(vtt,"Data2VecTextForSequenceClassification"),vtt.forEach(t),xyo=r(W6e," (Data2VecText model)"),W6e.forEach(t),$yo=i(N),A8=n(N,"LI",{});var H6e=s(A8);mce=n(H6e,"STRONG",{});var Ftt=s(mce);kyo=r(Ftt,"deberta"),Ftt.forEach(t),Syo=r(H6e," \u2014 "),hD=n(H6e,"A",{href:!0});var Ttt=s(hD);Ryo=r(Ttt,"DebertaForSequenceClassification"),Ttt.forEach(t),Byo=r(H6e," (DeBERTa model)"),H6e.forEach(t),Pyo=i(N),y8=n(N,"LI",{});var U6e=s(y8);gce=n(U6e,"STRONG",{});var Mtt=s(gce);Iyo=r(Mtt,"deberta-v2"),Mtt.forEach(t),qyo=r(U6e," \u2014 "),pD=n(U6e,"A",{href:!0});var Ett=s(pD);Nyo=r(Ett,"DebertaV2ForSequenceClassification"),Ett.forEach(t),jyo=r(U6e," (DeBERTa-v2 model)"),U6e.forEach(t),Dyo=i(N),L8=n(N,"LI",{});var J6e=s(L8);hce=n(J6e,"STRONG",{});var Ctt=s(hce);Gyo=r(Ctt,"distilbert"),Ctt.forEach(t),Oyo=r(J6e," \u2014 "),uD=n(J6e,"A",{href:!0});var wtt=s(uD);Vyo=r(wtt,"DistilBertForSequenceClassification"),wtt.forEach(t),Xyo=r(J6e," (DistilBERT model)"),J6e.forEach(t),zyo=i(N),x8=n(N,"LI",{});var Y6e=s(x8);pce=n(Y6e,"STRONG",{});var Att=s(pce);Qyo=r(Att,"electra"),Att.forEach(t),Wyo=r(Y6e," \u2014 "),_D=n(Y6e,"A",{href:!0});var ytt=s(_D);Hyo=r(ytt,"ElectraForSequenceClassification"),ytt.forEach(t),Uyo=r(Y6e," (ELECTRA model)"),Y6e.forEach(t),Jyo=i(N),$8=n(N,"LI",{});var K6e=s($8);uce=n(K6e,"STRONG",{});var Ltt=s(uce);Yyo=r(Ltt,"flaubert"),Ltt.forEach(t),Kyo=r(K6e," \u2014 "),bD=n(K6e,"A",{href:!0});var xtt=s(bD);Zyo=r(xtt,"FlaubertForSequenceClassification"),xtt.forEach(t),eLo=r(K6e," (FlauBERT model)"),K6e.forEach(t),oLo=i(N),k8=n(N,"LI",{});var Z6e=s(k8);_ce=n(Z6e,"STRONG",{});var $tt=s(_ce);rLo=r($tt,"fnet"),$tt.forEach(t),tLo=r(Z6e," \u2014 "),vD=n(Z6e,"A",{href:!0});var ktt=s(vD);aLo=r(ktt,"FNetForSequenceClassification"),ktt.forEach(t),nLo=r(Z6e," (FNet model)"),Z6e.forEach(t),sLo=i(N),S8=n(N,"LI",{});var eye=s(S8);bce=n(eye,"STRONG",{});var Stt=s(bce);lLo=r(Stt,"funnel"),Stt.forEach(t),iLo=r(eye," \u2014 "),FD=n(eye,"A",{href:!0});var Rtt=s(FD);dLo=r(Rtt,"FunnelForSequenceClassification"),Rtt.forEach(t),cLo=r(eye," (Funnel Transformer model)"),eye.forEach(t),fLo=i(N),R8=n(N,"LI",{});var oye=s(R8);vce=n(oye,"STRONG",{});var Btt=s(vce);mLo=r(Btt,"gpt2"),Btt.forEach(t),gLo=r(oye," \u2014 "),TD=n(oye,"A",{href:!0});var Ptt=s(TD);hLo=r(Ptt,"GPT2ForSequenceClassification"),Ptt.forEach(t),pLo=r(oye," (OpenAI GPT-2 model)"),oye.forEach(t),uLo=i(N),B8=n(N,"LI",{});var rye=s(B8);Fce=n(rye,"STRONG",{});var Itt=s(Fce);_Lo=r(Itt,"gpt_neo"),Itt.forEach(t),bLo=r(rye," \u2014 "),MD=n(rye,"A",{href:!0});var qtt=s(MD);vLo=r(qtt,"GPTNeoForSequenceClassification"),qtt.forEach(t),FLo=r(rye," (GPT Neo model)"),rye.forEach(t),TLo=i(N),P8=n(N,"LI",{});var tye=s(P8);Tce=n(tye,"STRONG",{});var Ntt=s(Tce);MLo=r(Ntt,"gptj"),Ntt.forEach(t),ELo=r(tye," \u2014 "),ED=n(tye,"A",{href:!0});var jtt=s(ED);CLo=r(jtt,"GPTJForSequenceClassification"),jtt.forEach(t),wLo=r(tye," (GPT-J model)"),tye.forEach(t),ALo=i(N),I8=n(N,"LI",{});var aye=s(I8);Mce=n(aye,"STRONG",{});var Dtt=s(Mce);yLo=r(Dtt,"ibert"),Dtt.forEach(t),LLo=r(aye," \u2014 "),CD=n(aye,"A",{href:!0});var Gtt=s(CD);xLo=r(Gtt,"IBertForSequenceClassification"),Gtt.forEach(t),$Lo=r(aye," (I-BERT model)"),aye.forEach(t),kLo=i(N),q8=n(N,"LI",{});var nye=s(q8);Ece=n(nye,"STRONG",{});var Ott=s(Ece);SLo=r(Ott,"layoutlm"),Ott.forEach(t),RLo=r(nye," \u2014 "),wD=n(nye,"A",{href:!0});var Vtt=s(wD);BLo=r(Vtt,"LayoutLMForSequenceClassification"),Vtt.forEach(t),PLo=r(nye," (LayoutLM model)"),nye.forEach(t),ILo=i(N),N8=n(N,"LI",{});var sye=s(N8);Cce=n(sye,"STRONG",{});var Xtt=s(Cce);qLo=r(Xtt,"layoutlmv2"),Xtt.forEach(t),NLo=r(sye," \u2014 "),AD=n(sye,"A",{href:!0});var ztt=s(AD);jLo=r(ztt,"LayoutLMv2ForSequenceClassification"),ztt.forEach(t),DLo=r(sye," (LayoutLMv2 model)"),sye.forEach(t),GLo=i(N),j8=n(N,"LI",{});var lye=s(j8);wce=n(lye,"STRONG",{});var Qtt=s(wce);OLo=r(Qtt,"led"),Qtt.forEach(t),VLo=r(lye," \u2014 "),yD=n(lye,"A",{href:!0});var Wtt=s(yD);XLo=r(Wtt,"LEDForSequenceClassification"),Wtt.forEach(t),zLo=r(lye," (LED model)"),lye.forEach(t),QLo=i(N),D8=n(N,"LI",{});var iye=s(D8);Ace=n(iye,"STRONG",{});var Htt=s(Ace);WLo=r(Htt,"longformer"),Htt.forEach(t),HLo=r(iye," \u2014 "),LD=n(iye,"A",{href:!0});var Utt=s(LD);ULo=r(Utt,"LongformerForSequenceClassification"),Utt.forEach(t),JLo=r(iye," (Longformer model)"),iye.forEach(t),YLo=i(N),G8=n(N,"LI",{});var dye=s(G8);yce=n(dye,"STRONG",{});var Jtt=s(yce);KLo=r(Jtt,"mbart"),Jtt.forEach(t),ZLo=r(dye," \u2014 "),xD=n(dye,"A",{href:!0});var Ytt=s(xD);exo=r(Ytt,"MBartForSequenceClassification"),Ytt.forEach(t),oxo=r(dye," (mBART model)"),dye.forEach(t),rxo=i(N),O8=n(N,"LI",{});var cye=s(O8);Lce=n(cye,"STRONG",{});var Ktt=s(Lce);txo=r(Ktt,"megatron-bert"),Ktt.forEach(t),axo=r(cye," \u2014 "),$D=n(cye,"A",{href:!0});var Ztt=s($D);nxo=r(Ztt,"MegatronBertForSequenceClassification"),Ztt.forEach(t),sxo=r(cye," (MegatronBert model)"),cye.forEach(t),lxo=i(N),V8=n(N,"LI",{});var fye=s(V8);xce=n(fye,"STRONG",{});var eat=s(xce);ixo=r(eat,"mobilebert"),eat.forEach(t),dxo=r(fye," \u2014 "),kD=n(fye,"A",{href:!0});var oat=s(kD);cxo=r(oat,"MobileBertForSequenceClassification"),oat.forEach(t),fxo=r(fye," (MobileBERT model)"),fye.forEach(t),mxo=i(N),X8=n(N,"LI",{});var mye=s(X8);$ce=n(mye,"STRONG",{});var rat=s($ce);gxo=r(rat,"mpnet"),rat.forEach(t),hxo=r(mye," \u2014 "),SD=n(mye,"A",{href:!0});var tat=s(SD);pxo=r(tat,"MPNetForSequenceClassification"),tat.forEach(t),uxo=r(mye," (MPNet model)"),mye.forEach(t),_xo=i(N),z8=n(N,"LI",{});var gye=s(z8);kce=n(gye,"STRONG",{});var aat=s(kce);bxo=r(aat,"nystromformer"),aat.forEach(t),vxo=r(gye," \u2014 "),RD=n(gye,"A",{href:!0});var nat=s(RD);Fxo=r(nat,"NystromformerForSequenceClassification"),nat.forEach(t),Txo=r(gye," (Nystromformer model)"),gye.forEach(t),Mxo=i(N),Q8=n(N,"LI",{});var hye=s(Q8);Sce=n(hye,"STRONG",{});var sat=s(Sce);Exo=r(sat,"openai-gpt"),sat.forEach(t),Cxo=r(hye," \u2014 "),BD=n(hye,"A",{href:!0});var lat=s(BD);wxo=r(lat,"OpenAIGPTForSequenceClassification"),lat.forEach(t),Axo=r(hye," (OpenAI GPT model)"),hye.forEach(t),yxo=i(N),W8=n(N,"LI",{});var pye=s(W8);Rce=n(pye,"STRONG",{});var iat=s(Rce);Lxo=r(iat,"perceiver"),iat.forEach(t),xxo=r(pye," \u2014 "),PD=n(pye,"A",{href:!0});var dat=s(PD);$xo=r(dat,"PerceiverForSequenceClassification"),dat.forEach(t),kxo=r(pye," (Perceiver model)"),pye.forEach(t),Sxo=i(N),H8=n(N,"LI",{});var uye=s(H8);Bce=n(uye,"STRONG",{});var cat=s(Bce);Rxo=r(cat,"plbart"),cat.forEach(t),Bxo=r(uye," \u2014 "),ID=n(uye,"A",{href:!0});var fat=s(ID);Pxo=r(fat,"PLBartForSequenceClassification"),fat.forEach(t),Ixo=r(uye," (PLBart model)"),uye.forEach(t),qxo=i(N),U8=n(N,"LI",{});var _ye=s(U8);Pce=n(_ye,"STRONG",{});var mat=s(Pce);Nxo=r(mat,"qdqbert"),mat.forEach(t),jxo=r(_ye," \u2014 "),qD=n(_ye,"A",{href:!0});var gat=s(qD);Dxo=r(gat,"QDQBertForSequenceClassification"),gat.forEach(t),Gxo=r(_ye," (QDQBert model)"),_ye.forEach(t),Oxo=i(N),J8=n(N,"LI",{});var bye=s(J8);Ice=n(bye,"STRONG",{});var hat=s(Ice);Vxo=r(hat,"reformer"),hat.forEach(t),Xxo=r(bye," \u2014 "),ND=n(bye,"A",{href:!0});var pat=s(ND);zxo=r(pat,"ReformerForSequenceClassification"),pat.forEach(t),Qxo=r(bye," (Reformer model)"),bye.forEach(t),Wxo=i(N),Y8=n(N,"LI",{});var vye=s(Y8);qce=n(vye,"STRONG",{});var uat=s(qce);Hxo=r(uat,"rembert"),uat.forEach(t),Uxo=r(vye," \u2014 "),jD=n(vye,"A",{href:!0});var _at=s(jD);Jxo=r(_at,"RemBertForSequenceClassification"),_at.forEach(t),Yxo=r(vye," (RemBERT model)"),vye.forEach(t),Kxo=i(N),K8=n(N,"LI",{});var Fye=s(K8);Nce=n(Fye,"STRONG",{});var bat=s(Nce);Zxo=r(bat,"roberta"),bat.forEach(t),e9o=r(Fye," \u2014 "),DD=n(Fye,"A",{href:!0});var vat=s(DD);o9o=r(vat,"RobertaForSequenceClassification"),vat.forEach(t),r9o=r(Fye," (RoBERTa model)"),Fye.forEach(t),t9o=i(N),Z8=n(N,"LI",{});var Tye=s(Z8);jce=n(Tye,"STRONG",{});var Fat=s(jce);a9o=r(Fat,"roformer"),Fat.forEach(t),n9o=r(Tye," \u2014 "),GD=n(Tye,"A",{href:!0});var Tat=s(GD);s9o=r(Tat,"RoFormerForSequenceClassification"),Tat.forEach(t),l9o=r(Tye," (RoFormer model)"),Tye.forEach(t),i9o=i(N),eb=n(N,"LI",{});var Mye=s(eb);Dce=n(Mye,"STRONG",{});var Mat=s(Dce);d9o=r(Mat,"squeezebert"),Mat.forEach(t),c9o=r(Mye," \u2014 "),OD=n(Mye,"A",{href:!0});var Eat=s(OD);f9o=r(Eat,"SqueezeBertForSequenceClassification"),Eat.forEach(t),m9o=r(Mye," (SqueezeBERT model)"),Mye.forEach(t),g9o=i(N),ob=n(N,"LI",{});var Eye=s(ob);Gce=n(Eye,"STRONG",{});var Cat=s(Gce);h9o=r(Cat,"tapas"),Cat.forEach(t),p9o=r(Eye," \u2014 "),VD=n(Eye,"A",{href:!0});var wat=s(VD);u9o=r(wat,"TapasForSequenceClassification"),wat.forEach(t),_9o=r(Eye," (TAPAS model)"),Eye.forEach(t),b9o=i(N),rb=n(N,"LI",{});var Cye=s(rb);Oce=n(Cye,"STRONG",{});var Aat=s(Oce);v9o=r(Aat,"tapex"),Aat.forEach(t),F9o=r(Cye," \u2014 "),XD=n(Cye,"A",{href:!0});var yat=s(XD);T9o=r(yat,"BartForSequenceClassification"),yat.forEach(t),M9o=r(Cye," (TAPEX model)"),Cye.forEach(t),E9o=i(N),tb=n(N,"LI",{});var wye=s(tb);Vce=n(wye,"STRONG",{});var Lat=s(Vce);C9o=r(Lat,"transfo-xl"),Lat.forEach(t),w9o=r(wye," \u2014 "),zD=n(wye,"A",{href:!0});var xat=s(zD);A9o=r(xat,"TransfoXLForSequenceClassification"),xat.forEach(t),y9o=r(wye," (Transformer-XL model)"),wye.forEach(t),L9o=i(N),ab=n(N,"LI",{});var Aye=s(ab);Xce=n(Aye,"STRONG",{});var $at=s(Xce);x9o=r($at,"xlm"),$at.forEach(t),$9o=r(Aye," \u2014 "),QD=n(Aye,"A",{href:!0});var kat=s(QD);k9o=r(kat,"XLMForSequenceClassification"),kat.forEach(t),S9o=r(Aye," (XLM model)"),Aye.forEach(t),R9o=i(N),nb=n(N,"LI",{});var yye=s(nb);zce=n(yye,"STRONG",{});var Sat=s(zce);B9o=r(Sat,"xlm-roberta"),Sat.forEach(t),P9o=r(yye," \u2014 "),WD=n(yye,"A",{href:!0});var Rat=s(WD);I9o=r(Rat,"XLMRobertaForSequenceClassification"),Rat.forEach(t),q9o=r(yye," (XLM-RoBERTa model)"),yye.forEach(t),N9o=i(N),sb=n(N,"LI",{});var Lye=s(sb);Qce=n(Lye,"STRONG",{});var Bat=s(Qce);j9o=r(Bat,"xlm-roberta-xl"),Bat.forEach(t),D9o=r(Lye," \u2014 "),HD=n(Lye,"A",{href:!0});var Pat=s(HD);G9o=r(Pat,"XLMRobertaXLForSequenceClassification"),Pat.forEach(t),O9o=r(Lye," (XLM-RoBERTa-XL model)"),Lye.forEach(t),V9o=i(N),lb=n(N,"LI",{});var xye=s(lb);Wce=n(xye,"STRONG",{});var Iat=s(Wce);X9o=r(Iat,"xlnet"),Iat.forEach(t),z9o=r(xye," \u2014 "),UD=n(xye,"A",{href:!0});var qat=s(UD);Q9o=r(qat,"XLNetForSequenceClassification"),qat.forEach(t),W9o=r(xye," (XLNet model)"),xye.forEach(t),H9o=i(N),ib=n(N,"LI",{});var $ye=s(ib);Hce=n($ye,"STRONG",{});var Nat=s(Hce);U9o=r(Nat,"yoso"),Nat.forEach(t),J9o=r($ye," \u2014 "),JD=n($ye,"A",{href:!0});var jat=s(JD);Y9o=r(jat,"YosoForSequenceClassification"),jat.forEach(t),K9o=r($ye," (YOSO model)"),$ye.forEach(t),N.forEach(t),Z9o=i(aa),db=n(aa,"P",{});var kye=s(db);e$o=r(kye,"The model is set in evaluation mode by default using "),Uce=n(kye,"CODE",{});var Dat=s(Uce);o$o=r(Dat,"model.eval()"),Dat.forEach(t),r$o=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jce=n(kye,"CODE",{});var Gat=s(Jce);t$o=r(Gat,"model.train()"),Gat.forEach(t),kye.forEach(t),a$o=i(aa),T(cb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),UPe=i(f),Di=n(f,"H2",{class:!0});var Zqe=s(Di);fb=n(Zqe,"A",{id:!0,class:!0,href:!0});var Oat=s(fb);Yce=n(Oat,"SPAN",{});var Vat=s(Yce);T(HA.$$.fragment,Vat),Vat.forEach(t),Oat.forEach(t),n$o=i(Zqe),Kce=n(Zqe,"SPAN",{});var Xat=s(Kce);s$o=r(Xat,"AutoModelForMultipleChoice"),Xat.forEach(t),Zqe.forEach(t),JPe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(UA.$$.fragment,Qs),l$o=i(Qs),Gi=n(Qs,"P",{});var gK=s(Gi);i$o=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YD=n(gK,"A",{href:!0});var zat=s(YD);d$o=r(zat,"from_pretrained()"),zat.forEach(t),c$o=r(gK," class method or the "),KD=n(gK,"A",{href:!0});var Qat=s(KD);f$o=r(Qat,"from_config()"),Qat.forEach(t),m$o=r(gK,` class
method.`),gK.forEach(t),g$o=i(Qs),JA=n(Qs,"P",{});var eNe=s(JA);h$o=r(eNe,"This class cannot be instantiated directly using "),Zce=n(eNe,"CODE",{});var Wat=s(Zce);p$o=r(Wat,"__init__()"),Wat.forEach(t),u$o=r(eNe," (throws an error)."),eNe.forEach(t),_$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var l3=s(lt);T(YA.$$.fragment,l3),b$o=i(l3),efe=n(l3,"P",{});var Hat=s(efe);v$o=r(Hat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hat.forEach(t),F$o=i(l3),Oi=n(l3,"P",{});var hK=s(Oi);T$o=r(hK,`Note:
Loading a model from its configuration file does `),ofe=n(hK,"STRONG",{});var Uat=s(ofe);M$o=r(Uat,"not"),Uat.forEach(t),E$o=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(hK,"A",{href:!0});var Jat=s(ZD);C$o=r(Jat,"from_pretrained()"),Jat.forEach(t),w$o=r(hK," to load the model weights."),hK.forEach(t),A$o=i(l3),T(mb.$$.fragment,l3),l3.forEach(t),y$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(KA.$$.fragment,na),L$o=i(na),rfe=n(na,"P",{});var Yat=s(rfe);x$o=r(Yat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Yat.forEach(t),$$o=i(na),Sa=n(na,"P",{});var i3=s(Sa);k$o=r(i3,"The model class to instantiate is selected based on the "),tfe=n(i3,"CODE",{});var Kat=s(tfe);S$o=r(Kat,"model_type"),Kat.forEach(t),R$o=r(i3,` property of the config object (either
passed as an argument or loaded from `),afe=n(i3,"CODE",{});var Zat=s(afe);B$o=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),P$o=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=n(i3,"CODE",{});var ent=s(nfe);I$o=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),q$o=r(i3,":"),i3.forEach(t),N$o=i(na),Y=n(na,"UL",{});var K=s(Y);gb=n(K,"LI",{});var Sye=s(gb);sfe=n(Sye,"STRONG",{});var ont=s(sfe);j$o=r(ont,"albert"),ont.forEach(t),D$o=r(Sye," \u2014 "),eG=n(Sye,"A",{href:!0});var rnt=s(eG);G$o=r(rnt,"AlbertForMultipleChoice"),rnt.forEach(t),O$o=r(Sye," (ALBERT model)"),Sye.forEach(t),V$o=i(K),hb=n(K,"LI",{});var Rye=s(hb);lfe=n(Rye,"STRONG",{});var tnt=s(lfe);X$o=r(tnt,"bert"),tnt.forEach(t),z$o=r(Rye," \u2014 "),oG=n(Rye,"A",{href:!0});var ant=s(oG);Q$o=r(ant,"BertForMultipleChoice"),ant.forEach(t),W$o=r(Rye," (BERT model)"),Rye.forEach(t),H$o=i(K),pb=n(K,"LI",{});var Bye=s(pb);ife=n(Bye,"STRONG",{});var nnt=s(ife);U$o=r(nnt,"big_bird"),nnt.forEach(t),J$o=r(Bye," \u2014 "),rG=n(Bye,"A",{href:!0});var snt=s(rG);Y$o=r(snt,"BigBirdForMultipleChoice"),snt.forEach(t),K$o=r(Bye," (BigBird model)"),Bye.forEach(t),Z$o=i(K),ub=n(K,"LI",{});var Pye=s(ub);dfe=n(Pye,"STRONG",{});var lnt=s(dfe);eko=r(lnt,"camembert"),lnt.forEach(t),oko=r(Pye," \u2014 "),tG=n(Pye,"A",{href:!0});var int=s(tG);rko=r(int,"CamembertForMultipleChoice"),int.forEach(t),tko=r(Pye," (CamemBERT model)"),Pye.forEach(t),ako=i(K),_b=n(K,"LI",{});var Iye=s(_b);cfe=n(Iye,"STRONG",{});var dnt=s(cfe);nko=r(dnt,"canine"),dnt.forEach(t),sko=r(Iye," \u2014 "),aG=n(Iye,"A",{href:!0});var cnt=s(aG);lko=r(cnt,"CanineForMultipleChoice"),cnt.forEach(t),iko=r(Iye," (Canine model)"),Iye.forEach(t),dko=i(K),bb=n(K,"LI",{});var qye=s(bb);ffe=n(qye,"STRONG",{});var fnt=s(ffe);cko=r(fnt,"convbert"),fnt.forEach(t),fko=r(qye," \u2014 "),nG=n(qye,"A",{href:!0});var mnt=s(nG);mko=r(mnt,"ConvBertForMultipleChoice"),mnt.forEach(t),gko=r(qye," (ConvBERT model)"),qye.forEach(t),hko=i(K),vb=n(K,"LI",{});var Nye=s(vb);mfe=n(Nye,"STRONG",{});var gnt=s(mfe);pko=r(gnt,"data2vec-text"),gnt.forEach(t),uko=r(Nye," \u2014 "),sG=n(Nye,"A",{href:!0});var hnt=s(sG);_ko=r(hnt,"Data2VecTextForMultipleChoice"),hnt.forEach(t),bko=r(Nye," (Data2VecText model)"),Nye.forEach(t),vko=i(K),Fb=n(K,"LI",{});var jye=s(Fb);gfe=n(jye,"STRONG",{});var pnt=s(gfe);Fko=r(pnt,"deberta-v2"),pnt.forEach(t),Tko=r(jye," \u2014 "),lG=n(jye,"A",{href:!0});var unt=s(lG);Mko=r(unt,"DebertaV2ForMultipleChoice"),unt.forEach(t),Eko=r(jye," (DeBERTa-v2 model)"),jye.forEach(t),Cko=i(K),Tb=n(K,"LI",{});var Dye=s(Tb);hfe=n(Dye,"STRONG",{});var _nt=s(hfe);wko=r(_nt,"distilbert"),_nt.forEach(t),Ako=r(Dye," \u2014 "),iG=n(Dye,"A",{href:!0});var bnt=s(iG);yko=r(bnt,"DistilBertForMultipleChoice"),bnt.forEach(t),Lko=r(Dye," (DistilBERT model)"),Dye.forEach(t),xko=i(K),Mb=n(K,"LI",{});var Gye=s(Mb);pfe=n(Gye,"STRONG",{});var vnt=s(pfe);$ko=r(vnt,"electra"),vnt.forEach(t),kko=r(Gye," \u2014 "),dG=n(Gye,"A",{href:!0});var Fnt=s(dG);Sko=r(Fnt,"ElectraForMultipleChoice"),Fnt.forEach(t),Rko=r(Gye," (ELECTRA model)"),Gye.forEach(t),Bko=i(K),Eb=n(K,"LI",{});var Oye=s(Eb);ufe=n(Oye,"STRONG",{});var Tnt=s(ufe);Pko=r(Tnt,"flaubert"),Tnt.forEach(t),Iko=r(Oye," \u2014 "),cG=n(Oye,"A",{href:!0});var Mnt=s(cG);qko=r(Mnt,"FlaubertForMultipleChoice"),Mnt.forEach(t),Nko=r(Oye," (FlauBERT model)"),Oye.forEach(t),jko=i(K),Cb=n(K,"LI",{});var Vye=s(Cb);_fe=n(Vye,"STRONG",{});var Ent=s(_fe);Dko=r(Ent,"fnet"),Ent.forEach(t),Gko=r(Vye," \u2014 "),fG=n(Vye,"A",{href:!0});var Cnt=s(fG);Oko=r(Cnt,"FNetForMultipleChoice"),Cnt.forEach(t),Vko=r(Vye," (FNet model)"),Vye.forEach(t),Xko=i(K),wb=n(K,"LI",{});var Xye=s(wb);bfe=n(Xye,"STRONG",{});var wnt=s(bfe);zko=r(wnt,"funnel"),wnt.forEach(t),Qko=r(Xye," \u2014 "),mG=n(Xye,"A",{href:!0});var Ant=s(mG);Wko=r(Ant,"FunnelForMultipleChoice"),Ant.forEach(t),Hko=r(Xye," (Funnel Transformer model)"),Xye.forEach(t),Uko=i(K),Ab=n(K,"LI",{});var zye=s(Ab);vfe=n(zye,"STRONG",{});var ynt=s(vfe);Jko=r(ynt,"ibert"),ynt.forEach(t),Yko=r(zye," \u2014 "),gG=n(zye,"A",{href:!0});var Lnt=s(gG);Kko=r(Lnt,"IBertForMultipleChoice"),Lnt.forEach(t),Zko=r(zye," (I-BERT model)"),zye.forEach(t),eSo=i(K),yb=n(K,"LI",{});var Qye=s(yb);Ffe=n(Qye,"STRONG",{});var xnt=s(Ffe);oSo=r(xnt,"longformer"),xnt.forEach(t),rSo=r(Qye," \u2014 "),hG=n(Qye,"A",{href:!0});var $nt=s(hG);tSo=r($nt,"LongformerForMultipleChoice"),$nt.forEach(t),aSo=r(Qye," (Longformer model)"),Qye.forEach(t),nSo=i(K),Lb=n(K,"LI",{});var Wye=s(Lb);Tfe=n(Wye,"STRONG",{});var knt=s(Tfe);sSo=r(knt,"megatron-bert"),knt.forEach(t),lSo=r(Wye," \u2014 "),pG=n(Wye,"A",{href:!0});var Snt=s(pG);iSo=r(Snt,"MegatronBertForMultipleChoice"),Snt.forEach(t),dSo=r(Wye," (MegatronBert model)"),Wye.forEach(t),cSo=i(K),xb=n(K,"LI",{});var Hye=s(xb);Mfe=n(Hye,"STRONG",{});var Rnt=s(Mfe);fSo=r(Rnt,"mobilebert"),Rnt.forEach(t),mSo=r(Hye," \u2014 "),uG=n(Hye,"A",{href:!0});var Bnt=s(uG);gSo=r(Bnt,"MobileBertForMultipleChoice"),Bnt.forEach(t),hSo=r(Hye," (MobileBERT model)"),Hye.forEach(t),pSo=i(K),$b=n(K,"LI",{});var Uye=s($b);Efe=n(Uye,"STRONG",{});var Pnt=s(Efe);uSo=r(Pnt,"mpnet"),Pnt.forEach(t),_So=r(Uye," \u2014 "),_G=n(Uye,"A",{href:!0});var Int=s(_G);bSo=r(Int,"MPNetForMultipleChoice"),Int.forEach(t),vSo=r(Uye," (MPNet model)"),Uye.forEach(t),FSo=i(K),kb=n(K,"LI",{});var Jye=s(kb);Cfe=n(Jye,"STRONG",{});var qnt=s(Cfe);TSo=r(qnt,"nystromformer"),qnt.forEach(t),MSo=r(Jye," \u2014 "),bG=n(Jye,"A",{href:!0});var Nnt=s(bG);ESo=r(Nnt,"NystromformerForMultipleChoice"),Nnt.forEach(t),CSo=r(Jye," (Nystromformer model)"),Jye.forEach(t),wSo=i(K),Sb=n(K,"LI",{});var Yye=s(Sb);wfe=n(Yye,"STRONG",{});var jnt=s(wfe);ASo=r(jnt,"qdqbert"),jnt.forEach(t),ySo=r(Yye," \u2014 "),vG=n(Yye,"A",{href:!0});var Dnt=s(vG);LSo=r(Dnt,"QDQBertForMultipleChoice"),Dnt.forEach(t),xSo=r(Yye," (QDQBert model)"),Yye.forEach(t),$So=i(K),Rb=n(K,"LI",{});var Kye=s(Rb);Afe=n(Kye,"STRONG",{});var Gnt=s(Afe);kSo=r(Gnt,"rembert"),Gnt.forEach(t),SSo=r(Kye," \u2014 "),FG=n(Kye,"A",{href:!0});var Ont=s(FG);RSo=r(Ont,"RemBertForMultipleChoice"),Ont.forEach(t),BSo=r(Kye," (RemBERT model)"),Kye.forEach(t),PSo=i(K),Bb=n(K,"LI",{});var Zye=s(Bb);yfe=n(Zye,"STRONG",{});var Vnt=s(yfe);ISo=r(Vnt,"roberta"),Vnt.forEach(t),qSo=r(Zye," \u2014 "),TG=n(Zye,"A",{href:!0});var Xnt=s(TG);NSo=r(Xnt,"RobertaForMultipleChoice"),Xnt.forEach(t),jSo=r(Zye," (RoBERTa model)"),Zye.forEach(t),DSo=i(K),Pb=n(K,"LI",{});var eLe=s(Pb);Lfe=n(eLe,"STRONG",{});var znt=s(Lfe);GSo=r(znt,"roformer"),znt.forEach(t),OSo=r(eLe," \u2014 "),MG=n(eLe,"A",{href:!0});var Qnt=s(MG);VSo=r(Qnt,"RoFormerForMultipleChoice"),Qnt.forEach(t),XSo=r(eLe," (RoFormer model)"),eLe.forEach(t),zSo=i(K),Ib=n(K,"LI",{});var oLe=s(Ib);xfe=n(oLe,"STRONG",{});var Wnt=s(xfe);QSo=r(Wnt,"squeezebert"),Wnt.forEach(t),WSo=r(oLe," \u2014 "),EG=n(oLe,"A",{href:!0});var Hnt=s(EG);HSo=r(Hnt,"SqueezeBertForMultipleChoice"),Hnt.forEach(t),USo=r(oLe," (SqueezeBERT model)"),oLe.forEach(t),JSo=i(K),qb=n(K,"LI",{});var rLe=s(qb);$fe=n(rLe,"STRONG",{});var Unt=s($fe);YSo=r(Unt,"xlm"),Unt.forEach(t),KSo=r(rLe," \u2014 "),CG=n(rLe,"A",{href:!0});var Jnt=s(CG);ZSo=r(Jnt,"XLMForMultipleChoice"),Jnt.forEach(t),eRo=r(rLe," (XLM model)"),rLe.forEach(t),oRo=i(K),Nb=n(K,"LI",{});var tLe=s(Nb);kfe=n(tLe,"STRONG",{});var Ynt=s(kfe);rRo=r(Ynt,"xlm-roberta"),Ynt.forEach(t),tRo=r(tLe," \u2014 "),wG=n(tLe,"A",{href:!0});var Knt=s(wG);aRo=r(Knt,"XLMRobertaForMultipleChoice"),Knt.forEach(t),nRo=r(tLe," (XLM-RoBERTa model)"),tLe.forEach(t),sRo=i(K),jb=n(K,"LI",{});var aLe=s(jb);Sfe=n(aLe,"STRONG",{});var Znt=s(Sfe);lRo=r(Znt,"xlm-roberta-xl"),Znt.forEach(t),iRo=r(aLe," \u2014 "),AG=n(aLe,"A",{href:!0});var est=s(AG);dRo=r(est,"XLMRobertaXLForMultipleChoice"),est.forEach(t),cRo=r(aLe," (XLM-RoBERTa-XL model)"),aLe.forEach(t),fRo=i(K),Db=n(K,"LI",{});var nLe=s(Db);Rfe=n(nLe,"STRONG",{});var ost=s(Rfe);mRo=r(ost,"xlnet"),ost.forEach(t),gRo=r(nLe," \u2014 "),yG=n(nLe,"A",{href:!0});var rst=s(yG);hRo=r(rst,"XLNetForMultipleChoice"),rst.forEach(t),pRo=r(nLe," (XLNet model)"),nLe.forEach(t),uRo=i(K),Gb=n(K,"LI",{});var sLe=s(Gb);Bfe=n(sLe,"STRONG",{});var tst=s(Bfe);_Ro=r(tst,"yoso"),tst.forEach(t),bRo=r(sLe," \u2014 "),LG=n(sLe,"A",{href:!0});var ast=s(LG);vRo=r(ast,"YosoForMultipleChoice"),ast.forEach(t),FRo=r(sLe," (YOSO model)"),sLe.forEach(t),K.forEach(t),TRo=i(na),Ob=n(na,"P",{});var lLe=s(Ob);MRo=r(lLe,"The model is set in evaluation mode by default using "),Pfe=n(lLe,"CODE",{});var nst=s(Pfe);ERo=r(nst,"model.eval()"),nst.forEach(t),CRo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(lLe,"CODE",{});var sst=s(Ife);wRo=r(sst,"model.train()"),sst.forEach(t),lLe.forEach(t),ARo=i(na),T(Vb.$$.fragment,na),na.forEach(t),Qs.forEach(t),YPe=i(f),Vi=n(f,"H2",{class:!0});var oNe=s(Vi);Xb=n(oNe,"A",{id:!0,class:!0,href:!0});var lst=s(Xb);qfe=n(lst,"SPAN",{});var ist=s(qfe);T(ZA.$$.fragment,ist),ist.forEach(t),lst.forEach(t),yRo=i(oNe),Nfe=n(oNe,"SPAN",{});var dst=s(Nfe);LRo=r(dst,"AutoModelForNextSentencePrediction"),dst.forEach(t),oNe.forEach(t),KPe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(e6.$$.fragment,Ws),xRo=i(Ws),Xi=n(Ws,"P",{});var pK=s(Xi);$Ro=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xG=n(pK,"A",{href:!0});var cst=s(xG);kRo=r(cst,"from_pretrained()"),cst.forEach(t),SRo=r(pK," class method or the "),$G=n(pK,"A",{href:!0});var fst=s($G);RRo=r(fst,"from_config()"),fst.forEach(t),BRo=r(pK,` class
method.`),pK.forEach(t),PRo=i(Ws),o6=n(Ws,"P",{});var rNe=s(o6);IRo=r(rNe,"This class cannot be instantiated directly using "),jfe=n(rNe,"CODE",{});var mst=s(jfe);qRo=r(mst,"__init__()"),mst.forEach(t),NRo=r(rNe," (throws an error)."),rNe.forEach(t),jRo=i(Ws),it=n(Ws,"DIV",{class:!0});var d3=s(it);T(r6.$$.fragment,d3),DRo=i(d3),Dfe=n(d3,"P",{});var gst=s(Dfe);GRo=r(gst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gst.forEach(t),ORo=i(d3),zi=n(d3,"P",{});var uK=s(zi);VRo=r(uK,`Note:
Loading a model from its configuration file does `),Gfe=n(uK,"STRONG",{});var hst=s(Gfe);XRo=r(hst,"not"),hst.forEach(t),zRo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=n(uK,"A",{href:!0});var pst=s(kG);QRo=r(pst,"from_pretrained()"),pst.forEach(t),WRo=r(uK," to load the model weights."),uK.forEach(t),HRo=i(d3),T(zb.$$.fragment,d3),d3.forEach(t),URo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(t6.$$.fragment,sa),JRo=i(sa),Ofe=n(sa,"P",{});var ust=s(Ofe);YRo=r(ust,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ust.forEach(t),KRo=i(sa),Ra=n(sa,"P",{});var c3=s(Ra);ZRo=r(c3,"The model class to instantiate is selected based on the "),Vfe=n(c3,"CODE",{});var _st=s(Vfe);eBo=r(_st,"model_type"),_st.forEach(t),oBo=r(c3,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(c3,"CODE",{});var bst=s(Xfe);rBo=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),tBo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(c3,"CODE",{});var vst=s(zfe);aBo=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),nBo=r(c3,":"),c3.forEach(t),sBo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Qb=n(Hs,"LI",{});var iLe=s(Qb);Qfe=n(iLe,"STRONG",{});var Fst=s(Qfe);lBo=r(Fst,"bert"),Fst.forEach(t),iBo=r(iLe," \u2014 "),SG=n(iLe,"A",{href:!0});var Tst=s(SG);dBo=r(Tst,"BertForNextSentencePrediction"),Tst.forEach(t),cBo=r(iLe," (BERT model)"),iLe.forEach(t),fBo=i(Hs),Wb=n(Hs,"LI",{});var dLe=s(Wb);Wfe=n(dLe,"STRONG",{});var Mst=s(Wfe);mBo=r(Mst,"fnet"),Mst.forEach(t),gBo=r(dLe," \u2014 "),RG=n(dLe,"A",{href:!0});var Est=s(RG);hBo=r(Est,"FNetForNextSentencePrediction"),Est.forEach(t),pBo=r(dLe," (FNet model)"),dLe.forEach(t),uBo=i(Hs),Hb=n(Hs,"LI",{});var cLe=s(Hb);Hfe=n(cLe,"STRONG",{});var Cst=s(Hfe);_Bo=r(Cst,"megatron-bert"),Cst.forEach(t),bBo=r(cLe," \u2014 "),BG=n(cLe,"A",{href:!0});var wst=s(BG);vBo=r(wst,"MegatronBertForNextSentencePrediction"),wst.forEach(t),FBo=r(cLe," (MegatronBert model)"),cLe.forEach(t),TBo=i(Hs),Ub=n(Hs,"LI",{});var fLe=s(Ub);Ufe=n(fLe,"STRONG",{});var Ast=s(Ufe);MBo=r(Ast,"mobilebert"),Ast.forEach(t),EBo=r(fLe," \u2014 "),PG=n(fLe,"A",{href:!0});var yst=s(PG);CBo=r(yst,"MobileBertForNextSentencePrediction"),yst.forEach(t),wBo=r(fLe," (MobileBERT model)"),fLe.forEach(t),ABo=i(Hs),Jb=n(Hs,"LI",{});var mLe=s(Jb);Jfe=n(mLe,"STRONG",{});var Lst=s(Jfe);yBo=r(Lst,"qdqbert"),Lst.forEach(t),LBo=r(mLe," \u2014 "),IG=n(mLe,"A",{href:!0});var xst=s(IG);xBo=r(xst,"QDQBertForNextSentencePrediction"),xst.forEach(t),$Bo=r(mLe," (QDQBert model)"),mLe.forEach(t),Hs.forEach(t),kBo=i(sa),Yb=n(sa,"P",{});var gLe=s(Yb);SBo=r(gLe,"The model is set in evaluation mode by default using "),Yfe=n(gLe,"CODE",{});var $st=s(Yfe);RBo=r($st,"model.eval()"),$st.forEach(t),BBo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=n(gLe,"CODE",{});var kst=s(Kfe);PBo=r(kst,"model.train()"),kst.forEach(t),gLe.forEach(t),IBo=i(sa),T(Kb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),ZPe=i(f),Qi=n(f,"H2",{class:!0});var tNe=s(Qi);Zb=n(tNe,"A",{id:!0,class:!0,href:!0});var Sst=s(Zb);Zfe=n(Sst,"SPAN",{});var Rst=s(Zfe);T(a6.$$.fragment,Rst),Rst.forEach(t),Sst.forEach(t),qBo=i(tNe),eme=n(tNe,"SPAN",{});var Bst=s(eme);NBo=r(Bst,"AutoModelForTokenClassification"),Bst.forEach(t),tNe.forEach(t),eIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(n6.$$.fragment,Us),jBo=i(Us),Wi=n(Us,"P",{});var _K=s(Wi);DBo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qG=n(_K,"A",{href:!0});var Pst=s(qG);GBo=r(Pst,"from_pretrained()"),Pst.forEach(t),OBo=r(_K," class method or the "),NG=n(_K,"A",{href:!0});var Ist=s(NG);VBo=r(Ist,"from_config()"),Ist.forEach(t),XBo=r(_K,` class
method.`),_K.forEach(t),zBo=i(Us),s6=n(Us,"P",{});var aNe=s(s6);QBo=r(aNe,"This class cannot be instantiated directly using "),ome=n(aNe,"CODE",{});var qst=s(ome);WBo=r(qst,"__init__()"),qst.forEach(t),HBo=r(aNe," (throws an error)."),aNe.forEach(t),UBo=i(Us),dt=n(Us,"DIV",{class:!0});var f3=s(dt);T(l6.$$.fragment,f3),JBo=i(f3),rme=n(f3,"P",{});var Nst=s(rme);YBo=r(Nst,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nst.forEach(t),KBo=i(f3),Hi=n(f3,"P",{});var bK=s(Hi);ZBo=r(bK,`Note:
Loading a model from its configuration file does `),tme=n(bK,"STRONG",{});var jst=s(tme);ePo=r(jst,"not"),jst.forEach(t),oPo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(bK,"A",{href:!0});var Dst=s(jG);rPo=r(Dst,"from_pretrained()"),Dst.forEach(t),tPo=r(bK," to load the model weights."),bK.forEach(t),aPo=i(f3),T(e2.$$.fragment,f3),f3.forEach(t),nPo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(i6.$$.fragment,la),sPo=i(la),ame=n(la,"P",{});var Gst=s(ame);lPo=r(Gst,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Gst.forEach(t),iPo=i(la),Ba=n(la,"P",{});var m3=s(Ba);dPo=r(m3,"The model class to instantiate is selected based on the "),nme=n(m3,"CODE",{});var Ost=s(nme);cPo=r(Ost,"model_type"),Ost.forEach(t),fPo=r(m3,` property of the config object (either
passed as an argument or loaded from `),sme=n(m3,"CODE",{});var Vst=s(sme);mPo=r(Vst,"pretrained_model_name_or_path"),Vst.forEach(t),gPo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n(m3,"CODE",{});var Xst=s(lme);hPo=r(Xst,"pretrained_model_name_or_path"),Xst.forEach(t),pPo=r(m3,":"),m3.forEach(t),uPo=i(la),U=n(la,"UL",{});var J=s(U);o2=n(J,"LI",{});var hLe=s(o2);ime=n(hLe,"STRONG",{});var zst=s(ime);_Po=r(zst,"albert"),zst.forEach(t),bPo=r(hLe," \u2014 "),DG=n(hLe,"A",{href:!0});var Qst=s(DG);vPo=r(Qst,"AlbertForTokenClassification"),Qst.forEach(t),FPo=r(hLe," (ALBERT model)"),hLe.forEach(t),TPo=i(J),r2=n(J,"LI",{});var pLe=s(r2);dme=n(pLe,"STRONG",{});var Wst=s(dme);MPo=r(Wst,"bert"),Wst.forEach(t),EPo=r(pLe," \u2014 "),GG=n(pLe,"A",{href:!0});var Hst=s(GG);CPo=r(Hst,"BertForTokenClassification"),Hst.forEach(t),wPo=r(pLe," (BERT model)"),pLe.forEach(t),APo=i(J),t2=n(J,"LI",{});var uLe=s(t2);cme=n(uLe,"STRONG",{});var Ust=s(cme);yPo=r(Ust,"big_bird"),Ust.forEach(t),LPo=r(uLe," \u2014 "),OG=n(uLe,"A",{href:!0});var Jst=s(OG);xPo=r(Jst,"BigBirdForTokenClassification"),Jst.forEach(t),$Po=r(uLe," (BigBird model)"),uLe.forEach(t),kPo=i(J),a2=n(J,"LI",{});var _Le=s(a2);fme=n(_Le,"STRONG",{});var Yst=s(fme);SPo=r(Yst,"camembert"),Yst.forEach(t),RPo=r(_Le," \u2014 "),VG=n(_Le,"A",{href:!0});var Kst=s(VG);BPo=r(Kst,"CamembertForTokenClassification"),Kst.forEach(t),PPo=r(_Le," (CamemBERT model)"),_Le.forEach(t),IPo=i(J),n2=n(J,"LI",{});var bLe=s(n2);mme=n(bLe,"STRONG",{});var Zst=s(mme);qPo=r(Zst,"canine"),Zst.forEach(t),NPo=r(bLe," \u2014 "),XG=n(bLe,"A",{href:!0});var elt=s(XG);jPo=r(elt,"CanineForTokenClassification"),elt.forEach(t),DPo=r(bLe," (Canine model)"),bLe.forEach(t),GPo=i(J),s2=n(J,"LI",{});var vLe=s(s2);gme=n(vLe,"STRONG",{});var olt=s(gme);OPo=r(olt,"convbert"),olt.forEach(t),VPo=r(vLe," \u2014 "),zG=n(vLe,"A",{href:!0});var rlt=s(zG);XPo=r(rlt,"ConvBertForTokenClassification"),rlt.forEach(t),zPo=r(vLe," (ConvBERT model)"),vLe.forEach(t),QPo=i(J),l2=n(J,"LI",{});var FLe=s(l2);hme=n(FLe,"STRONG",{});var tlt=s(hme);WPo=r(tlt,"data2vec-text"),tlt.forEach(t),HPo=r(FLe," \u2014 "),QG=n(FLe,"A",{href:!0});var alt=s(QG);UPo=r(alt,"Data2VecTextForTokenClassification"),alt.forEach(t),JPo=r(FLe," (Data2VecText model)"),FLe.forEach(t),YPo=i(J),i2=n(J,"LI",{});var TLe=s(i2);pme=n(TLe,"STRONG",{});var nlt=s(pme);KPo=r(nlt,"deberta"),nlt.forEach(t),ZPo=r(TLe," \u2014 "),WG=n(TLe,"A",{href:!0});var slt=s(WG);eIo=r(slt,"DebertaForTokenClassification"),slt.forEach(t),oIo=r(TLe," (DeBERTa model)"),TLe.forEach(t),rIo=i(J),d2=n(J,"LI",{});var MLe=s(d2);ume=n(MLe,"STRONG",{});var llt=s(ume);tIo=r(llt,"deberta-v2"),llt.forEach(t),aIo=r(MLe," \u2014 "),HG=n(MLe,"A",{href:!0});var ilt=s(HG);nIo=r(ilt,"DebertaV2ForTokenClassification"),ilt.forEach(t),sIo=r(MLe," (DeBERTa-v2 model)"),MLe.forEach(t),lIo=i(J),c2=n(J,"LI",{});var ELe=s(c2);_me=n(ELe,"STRONG",{});var dlt=s(_me);iIo=r(dlt,"distilbert"),dlt.forEach(t),dIo=r(ELe," \u2014 "),UG=n(ELe,"A",{href:!0});var clt=s(UG);cIo=r(clt,"DistilBertForTokenClassification"),clt.forEach(t),fIo=r(ELe," (DistilBERT model)"),ELe.forEach(t),mIo=i(J),f2=n(J,"LI",{});var CLe=s(f2);bme=n(CLe,"STRONG",{});var flt=s(bme);gIo=r(flt,"electra"),flt.forEach(t),hIo=r(CLe," \u2014 "),JG=n(CLe,"A",{href:!0});var mlt=s(JG);pIo=r(mlt,"ElectraForTokenClassification"),mlt.forEach(t),uIo=r(CLe," (ELECTRA model)"),CLe.forEach(t),_Io=i(J),m2=n(J,"LI",{});var wLe=s(m2);vme=n(wLe,"STRONG",{});var glt=s(vme);bIo=r(glt,"flaubert"),glt.forEach(t),vIo=r(wLe," \u2014 "),YG=n(wLe,"A",{href:!0});var hlt=s(YG);FIo=r(hlt,"FlaubertForTokenClassification"),hlt.forEach(t),TIo=r(wLe," (FlauBERT model)"),wLe.forEach(t),MIo=i(J),g2=n(J,"LI",{});var ALe=s(g2);Fme=n(ALe,"STRONG",{});var plt=s(Fme);EIo=r(plt,"fnet"),plt.forEach(t),CIo=r(ALe," \u2014 "),KG=n(ALe,"A",{href:!0});var ult=s(KG);wIo=r(ult,"FNetForTokenClassification"),ult.forEach(t),AIo=r(ALe," (FNet model)"),ALe.forEach(t),yIo=i(J),h2=n(J,"LI",{});var yLe=s(h2);Tme=n(yLe,"STRONG",{});var _lt=s(Tme);LIo=r(_lt,"funnel"),_lt.forEach(t),xIo=r(yLe," \u2014 "),ZG=n(yLe,"A",{href:!0});var blt=s(ZG);$Io=r(blt,"FunnelForTokenClassification"),blt.forEach(t),kIo=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),SIo=i(J),p2=n(J,"LI",{});var LLe=s(p2);Mme=n(LLe,"STRONG",{});var vlt=s(Mme);RIo=r(vlt,"gpt2"),vlt.forEach(t),BIo=r(LLe," \u2014 "),eO=n(LLe,"A",{href:!0});var Flt=s(eO);PIo=r(Flt,"GPT2ForTokenClassification"),Flt.forEach(t),IIo=r(LLe," (OpenAI GPT-2 model)"),LLe.forEach(t),qIo=i(J),u2=n(J,"LI",{});var xLe=s(u2);Eme=n(xLe,"STRONG",{});var Tlt=s(Eme);NIo=r(Tlt,"ibert"),Tlt.forEach(t),jIo=r(xLe," \u2014 "),oO=n(xLe,"A",{href:!0});var Mlt=s(oO);DIo=r(Mlt,"IBertForTokenClassification"),Mlt.forEach(t),GIo=r(xLe," (I-BERT model)"),xLe.forEach(t),OIo=i(J),_2=n(J,"LI",{});var $Le=s(_2);Cme=n($Le,"STRONG",{});var Elt=s(Cme);VIo=r(Elt,"layoutlm"),Elt.forEach(t),XIo=r($Le," \u2014 "),rO=n($Le,"A",{href:!0});var Clt=s(rO);zIo=r(Clt,"LayoutLMForTokenClassification"),Clt.forEach(t),QIo=r($Le," (LayoutLM model)"),$Le.forEach(t),WIo=i(J),b2=n(J,"LI",{});var kLe=s(b2);wme=n(kLe,"STRONG",{});var wlt=s(wme);HIo=r(wlt,"layoutlmv2"),wlt.forEach(t),UIo=r(kLe," \u2014 "),tO=n(kLe,"A",{href:!0});var Alt=s(tO);JIo=r(Alt,"LayoutLMv2ForTokenClassification"),Alt.forEach(t),YIo=r(kLe," (LayoutLMv2 model)"),kLe.forEach(t),KIo=i(J),v2=n(J,"LI",{});var SLe=s(v2);Ame=n(SLe,"STRONG",{});var ylt=s(Ame);ZIo=r(ylt,"longformer"),ylt.forEach(t),eqo=r(SLe," \u2014 "),aO=n(SLe,"A",{href:!0});var Llt=s(aO);oqo=r(Llt,"LongformerForTokenClassification"),Llt.forEach(t),rqo=r(SLe," (Longformer model)"),SLe.forEach(t),tqo=i(J),F2=n(J,"LI",{});var RLe=s(F2);yme=n(RLe,"STRONG",{});var xlt=s(yme);aqo=r(xlt,"megatron-bert"),xlt.forEach(t),nqo=r(RLe," \u2014 "),nO=n(RLe,"A",{href:!0});var $lt=s(nO);sqo=r($lt,"MegatronBertForTokenClassification"),$lt.forEach(t),lqo=r(RLe," (MegatronBert model)"),RLe.forEach(t),iqo=i(J),T2=n(J,"LI",{});var BLe=s(T2);Lme=n(BLe,"STRONG",{});var klt=s(Lme);dqo=r(klt,"mobilebert"),klt.forEach(t),cqo=r(BLe," \u2014 "),sO=n(BLe,"A",{href:!0});var Slt=s(sO);fqo=r(Slt,"MobileBertForTokenClassification"),Slt.forEach(t),mqo=r(BLe," (MobileBERT model)"),BLe.forEach(t),gqo=i(J),M2=n(J,"LI",{});var PLe=s(M2);xme=n(PLe,"STRONG",{});var Rlt=s(xme);hqo=r(Rlt,"mpnet"),Rlt.forEach(t),pqo=r(PLe," \u2014 "),lO=n(PLe,"A",{href:!0});var Blt=s(lO);uqo=r(Blt,"MPNetForTokenClassification"),Blt.forEach(t),_qo=r(PLe," (MPNet model)"),PLe.forEach(t),bqo=i(J),E2=n(J,"LI",{});var ILe=s(E2);$me=n(ILe,"STRONG",{});var Plt=s($me);vqo=r(Plt,"nystromformer"),Plt.forEach(t),Fqo=r(ILe," \u2014 "),iO=n(ILe,"A",{href:!0});var Ilt=s(iO);Tqo=r(Ilt,"NystromformerForTokenClassification"),Ilt.forEach(t),Mqo=r(ILe," (Nystromformer model)"),ILe.forEach(t),Eqo=i(J),C2=n(J,"LI",{});var qLe=s(C2);kme=n(qLe,"STRONG",{});var qlt=s(kme);Cqo=r(qlt,"qdqbert"),qlt.forEach(t),wqo=r(qLe," \u2014 "),dO=n(qLe,"A",{href:!0});var Nlt=s(dO);Aqo=r(Nlt,"QDQBertForTokenClassification"),Nlt.forEach(t),yqo=r(qLe," (QDQBert model)"),qLe.forEach(t),Lqo=i(J),w2=n(J,"LI",{});var NLe=s(w2);Sme=n(NLe,"STRONG",{});var jlt=s(Sme);xqo=r(jlt,"rembert"),jlt.forEach(t),$qo=r(NLe," \u2014 "),cO=n(NLe,"A",{href:!0});var Dlt=s(cO);kqo=r(Dlt,"RemBertForTokenClassification"),Dlt.forEach(t),Sqo=r(NLe," (RemBERT model)"),NLe.forEach(t),Rqo=i(J),A2=n(J,"LI",{});var jLe=s(A2);Rme=n(jLe,"STRONG",{});var Glt=s(Rme);Bqo=r(Glt,"roberta"),Glt.forEach(t),Pqo=r(jLe," \u2014 "),fO=n(jLe,"A",{href:!0});var Olt=s(fO);Iqo=r(Olt,"RobertaForTokenClassification"),Olt.forEach(t),qqo=r(jLe," (RoBERTa model)"),jLe.forEach(t),Nqo=i(J),y2=n(J,"LI",{});var DLe=s(y2);Bme=n(DLe,"STRONG",{});var Vlt=s(Bme);jqo=r(Vlt,"roformer"),Vlt.forEach(t),Dqo=r(DLe," \u2014 "),mO=n(DLe,"A",{href:!0});var Xlt=s(mO);Gqo=r(Xlt,"RoFormerForTokenClassification"),Xlt.forEach(t),Oqo=r(DLe," (RoFormer model)"),DLe.forEach(t),Vqo=i(J),L2=n(J,"LI",{});var GLe=s(L2);Pme=n(GLe,"STRONG",{});var zlt=s(Pme);Xqo=r(zlt,"squeezebert"),zlt.forEach(t),zqo=r(GLe," \u2014 "),gO=n(GLe,"A",{href:!0});var Qlt=s(gO);Qqo=r(Qlt,"SqueezeBertForTokenClassification"),Qlt.forEach(t),Wqo=r(GLe," (SqueezeBERT model)"),GLe.forEach(t),Hqo=i(J),x2=n(J,"LI",{});var OLe=s(x2);Ime=n(OLe,"STRONG",{});var Wlt=s(Ime);Uqo=r(Wlt,"xlm"),Wlt.forEach(t),Jqo=r(OLe," \u2014 "),hO=n(OLe,"A",{href:!0});var Hlt=s(hO);Yqo=r(Hlt,"XLMForTokenClassification"),Hlt.forEach(t),Kqo=r(OLe," (XLM model)"),OLe.forEach(t),Zqo=i(J),$2=n(J,"LI",{});var VLe=s($2);qme=n(VLe,"STRONG",{});var Ult=s(qme);eNo=r(Ult,"xlm-roberta"),Ult.forEach(t),oNo=r(VLe," \u2014 "),pO=n(VLe,"A",{href:!0});var Jlt=s(pO);rNo=r(Jlt,"XLMRobertaForTokenClassification"),Jlt.forEach(t),tNo=r(VLe," (XLM-RoBERTa model)"),VLe.forEach(t),aNo=i(J),k2=n(J,"LI",{});var XLe=s(k2);Nme=n(XLe,"STRONG",{});var Ylt=s(Nme);nNo=r(Ylt,"xlm-roberta-xl"),Ylt.forEach(t),sNo=r(XLe," \u2014 "),uO=n(XLe,"A",{href:!0});var Klt=s(uO);lNo=r(Klt,"XLMRobertaXLForTokenClassification"),Klt.forEach(t),iNo=r(XLe," (XLM-RoBERTa-XL model)"),XLe.forEach(t),dNo=i(J),S2=n(J,"LI",{});var zLe=s(S2);jme=n(zLe,"STRONG",{});var Zlt=s(jme);cNo=r(Zlt,"xlnet"),Zlt.forEach(t),fNo=r(zLe," \u2014 "),_O=n(zLe,"A",{href:!0});var eit=s(_O);mNo=r(eit,"XLNetForTokenClassification"),eit.forEach(t),gNo=r(zLe," (XLNet model)"),zLe.forEach(t),hNo=i(J),R2=n(J,"LI",{});var QLe=s(R2);Dme=n(QLe,"STRONG",{});var oit=s(Dme);pNo=r(oit,"yoso"),oit.forEach(t),uNo=r(QLe," \u2014 "),bO=n(QLe,"A",{href:!0});var rit=s(bO);_No=r(rit,"YosoForTokenClassification"),rit.forEach(t),bNo=r(QLe," (YOSO model)"),QLe.forEach(t),J.forEach(t),vNo=i(la),B2=n(la,"P",{});var WLe=s(B2);FNo=r(WLe,"The model is set in evaluation mode by default using "),Gme=n(WLe,"CODE",{});var tit=s(Gme);TNo=r(tit,"model.eval()"),tit.forEach(t),MNo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(WLe,"CODE",{});var ait=s(Ome);ENo=r(ait,"model.train()"),ait.forEach(t),WLe.forEach(t),CNo=i(la),T(P2.$$.fragment,la),la.forEach(t),Us.forEach(t),oIe=i(f),Ui=n(f,"H2",{class:!0});var nNe=s(Ui);I2=n(nNe,"A",{id:!0,class:!0,href:!0});var nit=s(I2);Vme=n(nit,"SPAN",{});var sit=s(Vme);T(d6.$$.fragment,sit),sit.forEach(t),nit.forEach(t),wNo=i(nNe),Xme=n(nNe,"SPAN",{});var lit=s(Xme);ANo=r(lit,"AutoModelForQuestionAnswering"),lit.forEach(t),nNe.forEach(t),rIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(c6.$$.fragment,Js),yNo=i(Js),Ji=n(Js,"P",{});var vK=s(Ji);LNo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vO=n(vK,"A",{href:!0});var iit=s(vO);xNo=r(iit,"from_pretrained()"),iit.forEach(t),$No=r(vK," class method or the "),FO=n(vK,"A",{href:!0});var dit=s(FO);kNo=r(dit,"from_config()"),dit.forEach(t),SNo=r(vK,` class
method.`),vK.forEach(t),RNo=i(Js),f6=n(Js,"P",{});var sNe=s(f6);BNo=r(sNe,"This class cannot be instantiated directly using "),zme=n(sNe,"CODE",{});var cit=s(zme);PNo=r(cit,"__init__()"),cit.forEach(t),INo=r(sNe," (throws an error)."),sNe.forEach(t),qNo=i(Js),ct=n(Js,"DIV",{class:!0});var g3=s(ct);T(m6.$$.fragment,g3),NNo=i(g3),Qme=n(g3,"P",{});var fit=s(Qme);jNo=r(fit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fit.forEach(t),DNo=i(g3),Yi=n(g3,"P",{});var FK=s(Yi);GNo=r(FK,`Note:
Loading a model from its configuration file does `),Wme=n(FK,"STRONG",{});var mit=s(Wme);ONo=r(mit,"not"),mit.forEach(t),VNo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(FK,"A",{href:!0});var git=s(TO);XNo=r(git,"from_pretrained()"),git.forEach(t),zNo=r(FK," to load the model weights."),FK.forEach(t),QNo=i(g3),T(q2.$$.fragment,g3),g3.forEach(t),WNo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(g6.$$.fragment,ia),HNo=i(ia),Hme=n(ia,"P",{});var hit=s(Hme);UNo=r(hit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hit.forEach(t),JNo=i(ia),Pa=n(ia,"P",{});var h3=s(Pa);YNo=r(h3,"The model class to instantiate is selected based on the "),Ume=n(h3,"CODE",{});var pit=s(Ume);KNo=r(pit,"model_type"),pit.forEach(t),ZNo=r(h3,` property of the config object (either
passed as an argument or loaded from `),Jme=n(h3,"CODE",{});var uit=s(Jme);ejo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),ojo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(h3,"CODE",{});var _it=s(Yme);rjo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),tjo=r(h3,":"),h3.forEach(t),ajo=i(ia),O=n(ia,"UL",{});var X=s(O);N2=n(X,"LI",{});var HLe=s(N2);Kme=n(HLe,"STRONG",{});var bit=s(Kme);njo=r(bit,"albert"),bit.forEach(t),sjo=r(HLe," \u2014 "),MO=n(HLe,"A",{href:!0});var vit=s(MO);ljo=r(vit,"AlbertForQuestionAnswering"),vit.forEach(t),ijo=r(HLe," (ALBERT model)"),HLe.forEach(t),djo=i(X),j2=n(X,"LI",{});var ULe=s(j2);Zme=n(ULe,"STRONG",{});var Fit=s(Zme);cjo=r(Fit,"bart"),Fit.forEach(t),fjo=r(ULe," \u2014 "),EO=n(ULe,"A",{href:!0});var Tit=s(EO);mjo=r(Tit,"BartForQuestionAnswering"),Tit.forEach(t),gjo=r(ULe," (BART model)"),ULe.forEach(t),hjo=i(X),D2=n(X,"LI",{});var JLe=s(D2);ege=n(JLe,"STRONG",{});var Mit=s(ege);pjo=r(Mit,"bert"),Mit.forEach(t),ujo=r(JLe," \u2014 "),CO=n(JLe,"A",{href:!0});var Eit=s(CO);_jo=r(Eit,"BertForQuestionAnswering"),Eit.forEach(t),bjo=r(JLe," (BERT model)"),JLe.forEach(t),vjo=i(X),G2=n(X,"LI",{});var YLe=s(G2);oge=n(YLe,"STRONG",{});var Cit=s(oge);Fjo=r(Cit,"big_bird"),Cit.forEach(t),Tjo=r(YLe," \u2014 "),wO=n(YLe,"A",{href:!0});var wit=s(wO);Mjo=r(wit,"BigBirdForQuestionAnswering"),wit.forEach(t),Ejo=r(YLe," (BigBird model)"),YLe.forEach(t),Cjo=i(X),O2=n(X,"LI",{});var KLe=s(O2);rge=n(KLe,"STRONG",{});var Ait=s(rge);wjo=r(Ait,"bigbird_pegasus"),Ait.forEach(t),Ajo=r(KLe," \u2014 "),AO=n(KLe,"A",{href:!0});var yit=s(AO);yjo=r(yit,"BigBirdPegasusForQuestionAnswering"),yit.forEach(t),Ljo=r(KLe," (BigBirdPegasus model)"),KLe.forEach(t),xjo=i(X),V2=n(X,"LI",{});var ZLe=s(V2);tge=n(ZLe,"STRONG",{});var Lit=s(tge);$jo=r(Lit,"camembert"),Lit.forEach(t),kjo=r(ZLe," \u2014 "),yO=n(ZLe,"A",{href:!0});var xit=s(yO);Sjo=r(xit,"CamembertForQuestionAnswering"),xit.forEach(t),Rjo=r(ZLe," (CamemBERT model)"),ZLe.forEach(t),Bjo=i(X),X2=n(X,"LI",{});var exe=s(X2);age=n(exe,"STRONG",{});var $it=s(age);Pjo=r($it,"canine"),$it.forEach(t),Ijo=r(exe," \u2014 "),LO=n(exe,"A",{href:!0});var kit=s(LO);qjo=r(kit,"CanineForQuestionAnswering"),kit.forEach(t),Njo=r(exe," (Canine model)"),exe.forEach(t),jjo=i(X),z2=n(X,"LI",{});var oxe=s(z2);nge=n(oxe,"STRONG",{});var Sit=s(nge);Djo=r(Sit,"convbert"),Sit.forEach(t),Gjo=r(oxe," \u2014 "),xO=n(oxe,"A",{href:!0});var Rit=s(xO);Ojo=r(Rit,"ConvBertForQuestionAnswering"),Rit.forEach(t),Vjo=r(oxe," (ConvBERT model)"),oxe.forEach(t),Xjo=i(X),Q2=n(X,"LI",{});var rxe=s(Q2);sge=n(rxe,"STRONG",{});var Bit=s(sge);zjo=r(Bit,"data2vec-text"),Bit.forEach(t),Qjo=r(rxe," \u2014 "),$O=n(rxe,"A",{href:!0});var Pit=s($O);Wjo=r(Pit,"Data2VecTextForQuestionAnswering"),Pit.forEach(t),Hjo=r(rxe," (Data2VecText model)"),rxe.forEach(t),Ujo=i(X),W2=n(X,"LI",{});var txe=s(W2);lge=n(txe,"STRONG",{});var Iit=s(lge);Jjo=r(Iit,"deberta"),Iit.forEach(t),Yjo=r(txe," \u2014 "),kO=n(txe,"A",{href:!0});var qit=s(kO);Kjo=r(qit,"DebertaForQuestionAnswering"),qit.forEach(t),Zjo=r(txe," (DeBERTa model)"),txe.forEach(t),eDo=i(X),H2=n(X,"LI",{});var axe=s(H2);ige=n(axe,"STRONG",{});var Nit=s(ige);oDo=r(Nit,"deberta-v2"),Nit.forEach(t),rDo=r(axe," \u2014 "),SO=n(axe,"A",{href:!0});var jit=s(SO);tDo=r(jit,"DebertaV2ForQuestionAnswering"),jit.forEach(t),aDo=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),nDo=i(X),U2=n(X,"LI",{});var nxe=s(U2);dge=n(nxe,"STRONG",{});var Dit=s(dge);sDo=r(Dit,"distilbert"),Dit.forEach(t),lDo=r(nxe," \u2014 "),RO=n(nxe,"A",{href:!0});var Git=s(RO);iDo=r(Git,"DistilBertForQuestionAnswering"),Git.forEach(t),dDo=r(nxe," (DistilBERT model)"),nxe.forEach(t),cDo=i(X),J2=n(X,"LI",{});var sxe=s(J2);cge=n(sxe,"STRONG",{});var Oit=s(cge);fDo=r(Oit,"electra"),Oit.forEach(t),mDo=r(sxe," \u2014 "),BO=n(sxe,"A",{href:!0});var Vit=s(BO);gDo=r(Vit,"ElectraForQuestionAnswering"),Vit.forEach(t),hDo=r(sxe," (ELECTRA model)"),sxe.forEach(t),pDo=i(X),Y2=n(X,"LI",{});var lxe=s(Y2);fge=n(lxe,"STRONG",{});var Xit=s(fge);uDo=r(Xit,"flaubert"),Xit.forEach(t),_Do=r(lxe," \u2014 "),PO=n(lxe,"A",{href:!0});var zit=s(PO);bDo=r(zit,"FlaubertForQuestionAnsweringSimple"),zit.forEach(t),vDo=r(lxe," (FlauBERT model)"),lxe.forEach(t),FDo=i(X),K2=n(X,"LI",{});var ixe=s(K2);mge=n(ixe,"STRONG",{});var Qit=s(mge);TDo=r(Qit,"fnet"),Qit.forEach(t),MDo=r(ixe," \u2014 "),IO=n(ixe,"A",{href:!0});var Wit=s(IO);EDo=r(Wit,"FNetForQuestionAnswering"),Wit.forEach(t),CDo=r(ixe," (FNet model)"),ixe.forEach(t),wDo=i(X),Z2=n(X,"LI",{});var dxe=s(Z2);gge=n(dxe,"STRONG",{});var Hit=s(gge);ADo=r(Hit,"funnel"),Hit.forEach(t),yDo=r(dxe," \u2014 "),qO=n(dxe,"A",{href:!0});var Uit=s(qO);LDo=r(Uit,"FunnelForQuestionAnswering"),Uit.forEach(t),xDo=r(dxe," (Funnel Transformer model)"),dxe.forEach(t),$Do=i(X),ev=n(X,"LI",{});var cxe=s(ev);hge=n(cxe,"STRONG",{});var Jit=s(hge);kDo=r(Jit,"gptj"),Jit.forEach(t),SDo=r(cxe," \u2014 "),NO=n(cxe,"A",{href:!0});var Yit=s(NO);RDo=r(Yit,"GPTJForQuestionAnswering"),Yit.forEach(t),BDo=r(cxe," (GPT-J model)"),cxe.forEach(t),PDo=i(X),ov=n(X,"LI",{});var fxe=s(ov);pge=n(fxe,"STRONG",{});var Kit=s(pge);IDo=r(Kit,"ibert"),Kit.forEach(t),qDo=r(fxe," \u2014 "),jO=n(fxe,"A",{href:!0});var Zit=s(jO);NDo=r(Zit,"IBertForQuestionAnswering"),Zit.forEach(t),jDo=r(fxe," (I-BERT model)"),fxe.forEach(t),DDo=i(X),rv=n(X,"LI",{});var mxe=s(rv);uge=n(mxe,"STRONG",{});var edt=s(uge);GDo=r(edt,"layoutlmv2"),edt.forEach(t),ODo=r(mxe," \u2014 "),DO=n(mxe,"A",{href:!0});var odt=s(DO);VDo=r(odt,"LayoutLMv2ForQuestionAnswering"),odt.forEach(t),XDo=r(mxe," (LayoutLMv2 model)"),mxe.forEach(t),zDo=i(X),tv=n(X,"LI",{});var gxe=s(tv);_ge=n(gxe,"STRONG",{});var rdt=s(_ge);QDo=r(rdt,"led"),rdt.forEach(t),WDo=r(gxe," \u2014 "),GO=n(gxe,"A",{href:!0});var tdt=s(GO);HDo=r(tdt,"LEDForQuestionAnswering"),tdt.forEach(t),UDo=r(gxe," (LED model)"),gxe.forEach(t),JDo=i(X),av=n(X,"LI",{});var hxe=s(av);bge=n(hxe,"STRONG",{});var adt=s(bge);YDo=r(adt,"longformer"),adt.forEach(t),KDo=r(hxe," \u2014 "),OO=n(hxe,"A",{href:!0});var ndt=s(OO);ZDo=r(ndt,"LongformerForQuestionAnswering"),ndt.forEach(t),eGo=r(hxe," (Longformer model)"),hxe.forEach(t),oGo=i(X),nv=n(X,"LI",{});var pxe=s(nv);vge=n(pxe,"STRONG",{});var sdt=s(vge);rGo=r(sdt,"lxmert"),sdt.forEach(t),tGo=r(pxe," \u2014 "),VO=n(pxe,"A",{href:!0});var ldt=s(VO);aGo=r(ldt,"LxmertForQuestionAnswering"),ldt.forEach(t),nGo=r(pxe," (LXMERT model)"),pxe.forEach(t),sGo=i(X),sv=n(X,"LI",{});var uxe=s(sv);Fge=n(uxe,"STRONG",{});var idt=s(Fge);lGo=r(idt,"mbart"),idt.forEach(t),iGo=r(uxe," \u2014 "),XO=n(uxe,"A",{href:!0});var ddt=s(XO);dGo=r(ddt,"MBartForQuestionAnswering"),ddt.forEach(t),cGo=r(uxe," (mBART model)"),uxe.forEach(t),fGo=i(X),lv=n(X,"LI",{});var _xe=s(lv);Tge=n(_xe,"STRONG",{});var cdt=s(Tge);mGo=r(cdt,"megatron-bert"),cdt.forEach(t),gGo=r(_xe," \u2014 "),zO=n(_xe,"A",{href:!0});var fdt=s(zO);hGo=r(fdt,"MegatronBertForQuestionAnswering"),fdt.forEach(t),pGo=r(_xe," (MegatronBert model)"),_xe.forEach(t),uGo=i(X),iv=n(X,"LI",{});var bxe=s(iv);Mge=n(bxe,"STRONG",{});var mdt=s(Mge);_Go=r(mdt,"mobilebert"),mdt.forEach(t),bGo=r(bxe," \u2014 "),QO=n(bxe,"A",{href:!0});var gdt=s(QO);vGo=r(gdt,"MobileBertForQuestionAnswering"),gdt.forEach(t),FGo=r(bxe," (MobileBERT model)"),bxe.forEach(t),TGo=i(X),dv=n(X,"LI",{});var vxe=s(dv);Ege=n(vxe,"STRONG",{});var hdt=s(Ege);MGo=r(hdt,"mpnet"),hdt.forEach(t),EGo=r(vxe," \u2014 "),WO=n(vxe,"A",{href:!0});var pdt=s(WO);CGo=r(pdt,"MPNetForQuestionAnswering"),pdt.forEach(t),wGo=r(vxe," (MPNet model)"),vxe.forEach(t),AGo=i(X),cv=n(X,"LI",{});var Fxe=s(cv);Cge=n(Fxe,"STRONG",{});var udt=s(Cge);yGo=r(udt,"nystromformer"),udt.forEach(t),LGo=r(Fxe," \u2014 "),HO=n(Fxe,"A",{href:!0});var _dt=s(HO);xGo=r(_dt,"NystromformerForQuestionAnswering"),_dt.forEach(t),$Go=r(Fxe," (Nystromformer model)"),Fxe.forEach(t),kGo=i(X),fv=n(X,"LI",{});var Txe=s(fv);wge=n(Txe,"STRONG",{});var bdt=s(wge);SGo=r(bdt,"qdqbert"),bdt.forEach(t),RGo=r(Txe," \u2014 "),UO=n(Txe,"A",{href:!0});var vdt=s(UO);BGo=r(vdt,"QDQBertForQuestionAnswering"),vdt.forEach(t),PGo=r(Txe," (QDQBert model)"),Txe.forEach(t),IGo=i(X),mv=n(X,"LI",{});var Mxe=s(mv);Age=n(Mxe,"STRONG",{});var Fdt=s(Age);qGo=r(Fdt,"reformer"),Fdt.forEach(t),NGo=r(Mxe," \u2014 "),JO=n(Mxe,"A",{href:!0});var Tdt=s(JO);jGo=r(Tdt,"ReformerForQuestionAnswering"),Tdt.forEach(t),DGo=r(Mxe," (Reformer model)"),Mxe.forEach(t),GGo=i(X),gv=n(X,"LI",{});var Exe=s(gv);yge=n(Exe,"STRONG",{});var Mdt=s(yge);OGo=r(Mdt,"rembert"),Mdt.forEach(t),VGo=r(Exe," \u2014 "),YO=n(Exe,"A",{href:!0});var Edt=s(YO);XGo=r(Edt,"RemBertForQuestionAnswering"),Edt.forEach(t),zGo=r(Exe," (RemBERT model)"),Exe.forEach(t),QGo=i(X),hv=n(X,"LI",{});var Cxe=s(hv);Lge=n(Cxe,"STRONG",{});var Cdt=s(Lge);WGo=r(Cdt,"roberta"),Cdt.forEach(t),HGo=r(Cxe," \u2014 "),KO=n(Cxe,"A",{href:!0});var wdt=s(KO);UGo=r(wdt,"RobertaForQuestionAnswering"),wdt.forEach(t),JGo=r(Cxe," (RoBERTa model)"),Cxe.forEach(t),YGo=i(X),pv=n(X,"LI",{});var wxe=s(pv);xge=n(wxe,"STRONG",{});var Adt=s(xge);KGo=r(Adt,"roformer"),Adt.forEach(t),ZGo=r(wxe," \u2014 "),ZO=n(wxe,"A",{href:!0});var ydt=s(ZO);eOo=r(ydt,"RoFormerForQuestionAnswering"),ydt.forEach(t),oOo=r(wxe," (RoFormer model)"),wxe.forEach(t),rOo=i(X),uv=n(X,"LI",{});var Axe=s(uv);$ge=n(Axe,"STRONG",{});var Ldt=s($ge);tOo=r(Ldt,"splinter"),Ldt.forEach(t),aOo=r(Axe," \u2014 "),eV=n(Axe,"A",{href:!0});var xdt=s(eV);nOo=r(xdt,"SplinterForQuestionAnswering"),xdt.forEach(t),sOo=r(Axe," (Splinter model)"),Axe.forEach(t),lOo=i(X),_v=n(X,"LI",{});var yxe=s(_v);kge=n(yxe,"STRONG",{});var $dt=s(kge);iOo=r($dt,"squeezebert"),$dt.forEach(t),dOo=r(yxe," \u2014 "),oV=n(yxe,"A",{href:!0});var kdt=s(oV);cOo=r(kdt,"SqueezeBertForQuestionAnswering"),kdt.forEach(t),fOo=r(yxe," (SqueezeBERT model)"),yxe.forEach(t),mOo=i(X),bv=n(X,"LI",{});var Lxe=s(bv);Sge=n(Lxe,"STRONG",{});var Sdt=s(Sge);gOo=r(Sdt,"xlm"),Sdt.forEach(t),hOo=r(Lxe," \u2014 "),rV=n(Lxe,"A",{href:!0});var Rdt=s(rV);pOo=r(Rdt,"XLMForQuestionAnsweringSimple"),Rdt.forEach(t),uOo=r(Lxe," (XLM model)"),Lxe.forEach(t),_Oo=i(X),vv=n(X,"LI",{});var xxe=s(vv);Rge=n(xxe,"STRONG",{});var Bdt=s(Rge);bOo=r(Bdt,"xlm-roberta"),Bdt.forEach(t),vOo=r(xxe," \u2014 "),tV=n(xxe,"A",{href:!0});var Pdt=s(tV);FOo=r(Pdt,"XLMRobertaForQuestionAnswering"),Pdt.forEach(t),TOo=r(xxe," (XLM-RoBERTa model)"),xxe.forEach(t),MOo=i(X),Fv=n(X,"LI",{});var $xe=s(Fv);Bge=n($xe,"STRONG",{});var Idt=s(Bge);EOo=r(Idt,"xlm-roberta-xl"),Idt.forEach(t),COo=r($xe," \u2014 "),aV=n($xe,"A",{href:!0});var qdt=s(aV);wOo=r(qdt,"XLMRobertaXLForQuestionAnswering"),qdt.forEach(t),AOo=r($xe," (XLM-RoBERTa-XL model)"),$xe.forEach(t),yOo=i(X),Tv=n(X,"LI",{});var kxe=s(Tv);Pge=n(kxe,"STRONG",{});var Ndt=s(Pge);LOo=r(Ndt,"xlnet"),Ndt.forEach(t),xOo=r(kxe," \u2014 "),nV=n(kxe,"A",{href:!0});var jdt=s(nV);$Oo=r(jdt,"XLNetForQuestionAnsweringSimple"),jdt.forEach(t),kOo=r(kxe," (XLNet model)"),kxe.forEach(t),SOo=i(X),Mv=n(X,"LI",{});var Sxe=s(Mv);Ige=n(Sxe,"STRONG",{});var Ddt=s(Ige);ROo=r(Ddt,"yoso"),Ddt.forEach(t),BOo=r(Sxe," \u2014 "),sV=n(Sxe,"A",{href:!0});var Gdt=s(sV);POo=r(Gdt,"YosoForQuestionAnswering"),Gdt.forEach(t),IOo=r(Sxe," (YOSO model)"),Sxe.forEach(t),X.forEach(t),qOo=i(ia),Ev=n(ia,"P",{});var Rxe=s(Ev);NOo=r(Rxe,"The model is set in evaluation mode by default using "),qge=n(Rxe,"CODE",{});var Odt=s(qge);jOo=r(Odt,"model.eval()"),Odt.forEach(t),DOo=r(Rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(Rxe,"CODE",{});var Vdt=s(Nge);GOo=r(Vdt,"model.train()"),Vdt.forEach(t),Rxe.forEach(t),OOo=i(ia),T(Cv.$$.fragment,ia),ia.forEach(t),Js.forEach(t),tIe=i(f),Ki=n(f,"H2",{class:!0});var lNe=s(Ki);wv=n(lNe,"A",{id:!0,class:!0,href:!0});var Xdt=s(wv);jge=n(Xdt,"SPAN",{});var zdt=s(jge);T(h6.$$.fragment,zdt),zdt.forEach(t),Xdt.forEach(t),VOo=i(lNe),Dge=n(lNe,"SPAN",{});var Qdt=s(Dge);XOo=r(Qdt,"AutoModelForTableQuestionAnswering"),Qdt.forEach(t),lNe.forEach(t),aIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(p6.$$.fragment,Ys),zOo=i(Ys),Zi=n(Ys,"P",{});var TK=s(Zi);QOo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lV=n(TK,"A",{href:!0});var Wdt=s(lV);WOo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),HOo=r(TK," class method or the "),iV=n(TK,"A",{href:!0});var Hdt=s(iV);UOo=r(Hdt,"from_config()"),Hdt.forEach(t),JOo=r(TK,` class
method.`),TK.forEach(t),YOo=i(Ys),u6=n(Ys,"P",{});var iNe=s(u6);KOo=r(iNe,"This class cannot be instantiated directly using "),Gge=n(iNe,"CODE",{});var Udt=s(Gge);ZOo=r(Udt,"__init__()"),Udt.forEach(t),eVo=r(iNe," (throws an error)."),iNe.forEach(t),oVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var p3=s(ft);T(_6.$$.fragment,p3),rVo=i(p3),Oge=n(p3,"P",{});var Jdt=s(Oge);tVo=r(Jdt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jdt.forEach(t),aVo=i(p3),ed=n(p3,"P",{});var MK=s(ed);nVo=r(MK,`Note:
Loading a model from its configuration file does `),Vge=n(MK,"STRONG",{});var Ydt=s(Vge);sVo=r(Ydt,"not"),Ydt.forEach(t),lVo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(MK,"A",{href:!0});var Kdt=s(dV);iVo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),dVo=r(MK," to load the model weights."),MK.forEach(t),cVo=i(p3),T(Av.$$.fragment,p3),p3.forEach(t),fVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(b6.$$.fragment,da),mVo=i(da),Xge=n(da,"P",{});var Zdt=s(Xge);gVo=r(Zdt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Zdt.forEach(t),hVo=i(da),Ia=n(da,"P",{});var u3=s(Ia);pVo=r(u3,"The model class to instantiate is selected based on the "),zge=n(u3,"CODE",{});var ect=s(zge);uVo=r(ect,"model_type"),ect.forEach(t),_Vo=r(u3,` property of the config object (either
passed as an argument or loaded from `),Qge=n(u3,"CODE",{});var oct=s(Qge);bVo=r(oct,"pretrained_model_name_or_path"),oct.forEach(t),vVo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(u3,"CODE",{});var rct=s(Wge);FVo=r(rct,"pretrained_model_name_or_path"),rct.forEach(t),TVo=r(u3,":"),u3.forEach(t),MVo=i(da),Hge=n(da,"UL",{});var tct=s(Hge);yv=n(tct,"LI",{});var Bxe=s(yv);Uge=n(Bxe,"STRONG",{});var act=s(Uge);EVo=r(act,"tapas"),act.forEach(t),CVo=r(Bxe," \u2014 "),cV=n(Bxe,"A",{href:!0});var nct=s(cV);wVo=r(nct,"TapasForQuestionAnswering"),nct.forEach(t),AVo=r(Bxe," (TAPAS model)"),Bxe.forEach(t),tct.forEach(t),yVo=i(da),Lv=n(da,"P",{});var Pxe=s(Lv);LVo=r(Pxe,"The model is set in evaluation mode by default using "),Jge=n(Pxe,"CODE",{});var sct=s(Jge);xVo=r(sct,"model.eval()"),sct.forEach(t),$Vo=r(Pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=n(Pxe,"CODE",{});var lct=s(Yge);kVo=r(lct,"model.train()"),lct.forEach(t),Pxe.forEach(t),SVo=i(da),T(xv.$$.fragment,da),da.forEach(t),Ys.forEach(t),nIe=i(f),od=n(f,"H2",{class:!0});var dNe=s(od);$v=n(dNe,"A",{id:!0,class:!0,href:!0});var ict=s($v);Kge=n(ict,"SPAN",{});var dct=s(Kge);T(v6.$$.fragment,dct),dct.forEach(t),ict.forEach(t),RVo=i(dNe),Zge=n(dNe,"SPAN",{});var cct=s(Zge);BVo=r(cct,"AutoModelForImageClassification"),cct.forEach(t),dNe.forEach(t),sIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(F6.$$.fragment,Ks),PVo=i(Ks),rd=n(Ks,"P",{});var EK=s(rd);IVo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fV=n(EK,"A",{href:!0});var fct=s(fV);qVo=r(fct,"from_pretrained()"),fct.forEach(t),NVo=r(EK," class method or the "),mV=n(EK,"A",{href:!0});var mct=s(mV);jVo=r(mct,"from_config()"),mct.forEach(t),DVo=r(EK,` class
method.`),EK.forEach(t),GVo=i(Ks),T6=n(Ks,"P",{});var cNe=s(T6);OVo=r(cNe,"This class cannot be instantiated directly using "),ehe=n(cNe,"CODE",{});var gct=s(ehe);VVo=r(gct,"__init__()"),gct.forEach(t),XVo=r(cNe," (throws an error)."),cNe.forEach(t),zVo=i(Ks),mt=n(Ks,"DIV",{class:!0});var _3=s(mt);T(M6.$$.fragment,_3),QVo=i(_3),ohe=n(_3,"P",{});var hct=s(ohe);WVo=r(hct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hct.forEach(t),HVo=i(_3),td=n(_3,"P",{});var CK=s(td);UVo=r(CK,`Note:
Loading a model from its configuration file does `),rhe=n(CK,"STRONG",{});var pct=s(rhe);JVo=r(pct,"not"),pct.forEach(t),YVo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(CK,"A",{href:!0});var uct=s(gV);KVo=r(uct,"from_pretrained()"),uct.forEach(t),ZVo=r(CK," to load the model weights."),CK.forEach(t),eXo=i(_3),T(kv.$$.fragment,_3),_3.forEach(t),oXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(E6.$$.fragment,ca),rXo=i(ca),the=n(ca,"P",{});var _ct=s(the);tXo=r(_ct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_ct.forEach(t),aXo=i(ca),qa=n(ca,"P",{});var b3=s(qa);nXo=r(b3,"The model class to instantiate is selected based on the "),ahe=n(b3,"CODE",{});var bct=s(ahe);sXo=r(bct,"model_type"),bct.forEach(t),lXo=r(b3,` property of the config object (either
passed as an argument or loaded from `),nhe=n(b3,"CODE",{});var vct=s(nhe);iXo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),dXo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(b3,"CODE",{});var Fct=s(she);cXo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),fXo=r(b3,":"),b3.forEach(t),mXo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);Sv=n(Ee,"LI",{});var Ixe=s(Sv);lhe=n(Ixe,"STRONG",{});var Tct=s(lhe);gXo=r(Tct,"beit"),Tct.forEach(t),hXo=r(Ixe," \u2014 "),hV=n(Ixe,"A",{href:!0});var Mct=s(hV);pXo=r(Mct,"BeitForImageClassification"),Mct.forEach(t),uXo=r(Ixe," (BEiT model)"),Ixe.forEach(t),_Xo=i(Ee),Rv=n(Ee,"LI",{});var qxe=s(Rv);ihe=n(qxe,"STRONG",{});var Ect=s(ihe);bXo=r(Ect,"convnext"),Ect.forEach(t),vXo=r(qxe," \u2014 "),pV=n(qxe,"A",{href:!0});var Cct=s(pV);FXo=r(Cct,"ConvNextForImageClassification"),Cct.forEach(t),TXo=r(qxe," (ConvNext model)"),qxe.forEach(t),MXo=i(Ee),Bv=n(Ee,"LI",{});var Nxe=s(Bv);dhe=n(Nxe,"STRONG",{});var wct=s(dhe);EXo=r(wct,"data2vec-vision"),wct.forEach(t),CXo=r(Nxe," \u2014 "),uV=n(Nxe,"A",{href:!0});var Act=s(uV);wXo=r(Act,"Data2VecVisionForImageClassification"),Act.forEach(t),AXo=r(Nxe," (Data2VecVision model)"),Nxe.forEach(t),yXo=i(Ee),Bs=n(Ee,"LI",{});var i$=s(Bs);che=n(i$,"STRONG",{});var yct=s(che);LXo=r(yct,"deit"),yct.forEach(t),xXo=r(i$," \u2014 "),_V=n(i$,"A",{href:!0});var Lct=s(_V);$Xo=r(Lct,"DeiTForImageClassification"),Lct.forEach(t),kXo=r(i$," or "),bV=n(i$,"A",{href:!0});var xct=s(bV);SXo=r(xct,"DeiTForImageClassificationWithTeacher"),xct.forEach(t),RXo=r(i$," (DeiT model)"),i$.forEach(t),BXo=i(Ee),Pv=n(Ee,"LI",{});var jxe=s(Pv);fhe=n(jxe,"STRONG",{});var $ct=s(fhe);PXo=r($ct,"imagegpt"),$ct.forEach(t),IXo=r(jxe," \u2014 "),vV=n(jxe,"A",{href:!0});var kct=s(vV);qXo=r(kct,"ImageGPTForImageClassification"),kct.forEach(t),NXo=r(jxe," (ImageGPT model)"),jxe.forEach(t),jXo=i(Ee),gt=n(Ee,"LI",{});var mf=s(gt);mhe=n(mf,"STRONG",{});var Sct=s(mhe);DXo=r(Sct,"perceiver"),Sct.forEach(t),GXo=r(mf," \u2014 "),FV=n(mf,"A",{href:!0});var Rct=s(FV);OXo=r(Rct,"PerceiverForImageClassificationLearned"),Rct.forEach(t),VXo=r(mf," or "),TV=n(mf,"A",{href:!0});var Bct=s(TV);XXo=r(Bct,"PerceiverForImageClassificationFourier"),Bct.forEach(t),zXo=r(mf," or "),MV=n(mf,"A",{href:!0});var Pct=s(MV);QXo=r(Pct,"PerceiverForImageClassificationConvProcessing"),Pct.forEach(t),WXo=r(mf," (Perceiver model)"),mf.forEach(t),HXo=i(Ee),Iv=n(Ee,"LI",{});var Dxe=s(Iv);ghe=n(Dxe,"STRONG",{});var Ict=s(ghe);UXo=r(Ict,"poolformer"),Ict.forEach(t),JXo=r(Dxe," \u2014 "),EV=n(Dxe,"A",{href:!0});var qct=s(EV);YXo=r(qct,"PoolFormerForImageClassification"),qct.forEach(t),KXo=r(Dxe," (PoolFormer model)"),Dxe.forEach(t),ZXo=i(Ee),qv=n(Ee,"LI",{});var Gxe=s(qv);hhe=n(Gxe,"STRONG",{});var Nct=s(hhe);ezo=r(Nct,"regnet"),Nct.forEach(t),ozo=r(Gxe," \u2014 "),CV=n(Gxe,"A",{href:!0});var jct=s(CV);rzo=r(jct,"RegNetForImageClassification"),jct.forEach(t),tzo=r(Gxe," (RegNet model)"),Gxe.forEach(t),azo=i(Ee),Nv=n(Ee,"LI",{});var Oxe=s(Nv);phe=n(Oxe,"STRONG",{});var Dct=s(phe);nzo=r(Dct,"resnet"),Dct.forEach(t),szo=r(Oxe," \u2014 "),wV=n(Oxe,"A",{href:!0});var Gct=s(wV);lzo=r(Gct,"ResNetForImageClassification"),Gct.forEach(t),izo=r(Oxe," (ResNet model)"),Oxe.forEach(t),dzo=i(Ee),jv=n(Ee,"LI",{});var Vxe=s(jv);uhe=n(Vxe,"STRONG",{});var Oct=s(uhe);czo=r(Oct,"segformer"),Oct.forEach(t),fzo=r(Vxe," \u2014 "),AV=n(Vxe,"A",{href:!0});var Vct=s(AV);mzo=r(Vct,"SegformerForImageClassification"),Vct.forEach(t),gzo=r(Vxe," (SegFormer model)"),Vxe.forEach(t),hzo=i(Ee),Dv=n(Ee,"LI",{});var Xxe=s(Dv);_he=n(Xxe,"STRONG",{});var Xct=s(_he);pzo=r(Xct,"swin"),Xct.forEach(t),uzo=r(Xxe," \u2014 "),yV=n(Xxe,"A",{href:!0});var zct=s(yV);_zo=r(zct,"SwinForImageClassification"),zct.forEach(t),bzo=r(Xxe," (Swin model)"),Xxe.forEach(t),vzo=i(Ee),Gv=n(Ee,"LI",{});var zxe=s(Gv);bhe=n(zxe,"STRONG",{});var Qct=s(bhe);Fzo=r(Qct,"van"),Qct.forEach(t),Tzo=r(zxe," \u2014 "),LV=n(zxe,"A",{href:!0});var Wct=s(LV);Mzo=r(Wct,"VanForImageClassification"),Wct.forEach(t),Ezo=r(zxe," (VAN model)"),zxe.forEach(t),Czo=i(Ee),Ov=n(Ee,"LI",{});var Qxe=s(Ov);vhe=n(Qxe,"STRONG",{});var Hct=s(vhe);wzo=r(Hct,"vit"),Hct.forEach(t),Azo=r(Qxe," \u2014 "),xV=n(Qxe,"A",{href:!0});var Uct=s(xV);yzo=r(Uct,"ViTForImageClassification"),Uct.forEach(t),Lzo=r(Qxe," (ViT model)"),Qxe.forEach(t),Ee.forEach(t),xzo=i(ca),Vv=n(ca,"P",{});var Wxe=s(Vv);$zo=r(Wxe,"The model is set in evaluation mode by default using "),Fhe=n(Wxe,"CODE",{});var Jct=s(Fhe);kzo=r(Jct,"model.eval()"),Jct.forEach(t),Szo=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(Wxe,"CODE",{});var Yct=s(The);Rzo=r(Yct,"model.train()"),Yct.forEach(t),Wxe.forEach(t),Bzo=i(ca),T(Xv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),lIe=i(f),ad=n(f,"H2",{class:!0});var fNe=s(ad);zv=n(fNe,"A",{id:!0,class:!0,href:!0});var Kct=s(zv);Mhe=n(Kct,"SPAN",{});var Zct=s(Mhe);T(C6.$$.fragment,Zct),Zct.forEach(t),Kct.forEach(t),Pzo=i(fNe),Ehe=n(fNe,"SPAN",{});var eft=s(Ehe);Izo=r(eft,"AutoModelForVision2Seq"),eft.forEach(t),fNe.forEach(t),iIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(w6.$$.fragment,Zs),qzo=i(Zs),nd=n(Zs,"P",{});var wK=s(nd);Nzo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$V=n(wK,"A",{href:!0});var oft=s($V);jzo=r(oft,"from_pretrained()"),oft.forEach(t),Dzo=r(wK," class method or the "),kV=n(wK,"A",{href:!0});var rft=s(kV);Gzo=r(rft,"from_config()"),rft.forEach(t),Ozo=r(wK,` class
method.`),wK.forEach(t),Vzo=i(Zs),A6=n(Zs,"P",{});var mNe=s(A6);Xzo=r(mNe,"This class cannot be instantiated directly using "),Che=n(mNe,"CODE",{});var tft=s(Che);zzo=r(tft,"__init__()"),tft.forEach(t),Qzo=r(mNe," (throws an error)."),mNe.forEach(t),Wzo=i(Zs),ht=n(Zs,"DIV",{class:!0});var v3=s(ht);T(y6.$$.fragment,v3),Hzo=i(v3),whe=n(v3,"P",{});var aft=s(whe);Uzo=r(aft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aft.forEach(t),Jzo=i(v3),sd=n(v3,"P",{});var AK=s(sd);Yzo=r(AK,`Note:
Loading a model from its configuration file does `),Ahe=n(AK,"STRONG",{});var nft=s(Ahe);Kzo=r(nft,"not"),nft.forEach(t),Zzo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(AK,"A",{href:!0});var sft=s(SV);eQo=r(sft,"from_pretrained()"),sft.forEach(t),oQo=r(AK," to load the model weights."),AK.forEach(t),rQo=i(v3),T(Qv.$$.fragment,v3),v3.forEach(t),tQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(L6.$$.fragment,fa),aQo=i(fa),yhe=n(fa,"P",{});var lft=s(yhe);nQo=r(lft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lft.forEach(t),sQo=i(fa),Na=n(fa,"P",{});var F3=s(Na);lQo=r(F3,"The model class to instantiate is selected based on the "),Lhe=n(F3,"CODE",{});var ift=s(Lhe);iQo=r(ift,"model_type"),ift.forEach(t),dQo=r(F3,` property of the config object (either
passed as an argument or loaded from `),xhe=n(F3,"CODE",{});var dft=s(xhe);cQo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),fQo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(F3,"CODE",{});var cft=s($he);mQo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),gQo=r(F3,":"),F3.forEach(t),hQo=i(fa),khe=n(fa,"UL",{});var fft=s(khe);Wv=n(fft,"LI",{});var Hxe=s(Wv);She=n(Hxe,"STRONG",{});var mft=s(She);pQo=r(mft,"vision-encoder-decoder"),mft.forEach(t),uQo=r(Hxe," \u2014 "),RV=n(Hxe,"A",{href:!0});var gft=s(RV);_Qo=r(gft,"VisionEncoderDecoderModel"),gft.forEach(t),bQo=r(Hxe," (Vision Encoder decoder model)"),Hxe.forEach(t),fft.forEach(t),vQo=i(fa),Hv=n(fa,"P",{});var Uxe=s(Hv);FQo=r(Uxe,"The model is set in evaluation mode by default using "),Rhe=n(Uxe,"CODE",{});var hft=s(Rhe);TQo=r(hft,"model.eval()"),hft.forEach(t),MQo=r(Uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=n(Uxe,"CODE",{});var pft=s(Bhe);EQo=r(pft,"model.train()"),pft.forEach(t),Uxe.forEach(t),CQo=i(fa),T(Uv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),dIe=i(f),ld=n(f,"H2",{class:!0});var gNe=s(ld);Jv=n(gNe,"A",{id:!0,class:!0,href:!0});var uft=s(Jv);Phe=n(uft,"SPAN",{});var _ft=s(Phe);T(x6.$$.fragment,_ft),_ft.forEach(t),uft.forEach(t),wQo=i(gNe),Ihe=n(gNe,"SPAN",{});var bft=s(Ihe);AQo=r(bft,"AutoModelForAudioClassification"),bft.forEach(t),gNe.forEach(t),cIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T($6.$$.fragment,el),yQo=i(el),id=n(el,"P",{});var yK=s(id);LQo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BV=n(yK,"A",{href:!0});var vft=s(BV);xQo=r(vft,"from_pretrained()"),vft.forEach(t),$Qo=r(yK," class method or the "),PV=n(yK,"A",{href:!0});var Fft=s(PV);kQo=r(Fft,"from_config()"),Fft.forEach(t),SQo=r(yK,` class
method.`),yK.forEach(t),RQo=i(el),k6=n(el,"P",{});var hNe=s(k6);BQo=r(hNe,"This class cannot be instantiated directly using "),qhe=n(hNe,"CODE",{});var Tft=s(qhe);PQo=r(Tft,"__init__()"),Tft.forEach(t),IQo=r(hNe," (throws an error)."),hNe.forEach(t),qQo=i(el),pt=n(el,"DIV",{class:!0});var T3=s(pt);T(S6.$$.fragment,T3),NQo=i(T3),Nhe=n(T3,"P",{});var Mft=s(Nhe);jQo=r(Mft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mft.forEach(t),DQo=i(T3),dd=n(T3,"P",{});var LK=s(dd);GQo=r(LK,`Note:
Loading a model from its configuration file does `),jhe=n(LK,"STRONG",{});var Eft=s(jhe);OQo=r(Eft,"not"),Eft.forEach(t),VQo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(LK,"A",{href:!0});var Cft=s(IV);XQo=r(Cft,"from_pretrained()"),Cft.forEach(t),zQo=r(LK," to load the model weights."),LK.forEach(t),QQo=i(T3),T(Yv.$$.fragment,T3),T3.forEach(t),WQo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(R6.$$.fragment,ma),HQo=i(ma),Dhe=n(ma,"P",{});var wft=s(Dhe);UQo=r(wft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wft.forEach(t),JQo=i(ma),ja=n(ma,"P",{});var M3=s(ja);YQo=r(M3,"The model class to instantiate is selected based on the "),Ghe=n(M3,"CODE",{});var Aft=s(Ghe);KQo=r(Aft,"model_type"),Aft.forEach(t),ZQo=r(M3,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(M3,"CODE",{});var yft=s(Ohe);eWo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),oWo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(M3,"CODE",{});var Lft=s(Vhe);rWo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),tWo=r(M3,":"),M3.forEach(t),aWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);Kv=n(bo,"LI",{});var Jxe=s(Kv);Xhe=n(Jxe,"STRONG",{});var xft=s(Xhe);nWo=r(xft,"data2vec-audio"),xft.forEach(t),sWo=r(Jxe," \u2014 "),qV=n(Jxe,"A",{href:!0});var $ft=s(qV);lWo=r($ft,"Data2VecAudioForSequenceClassification"),$ft.forEach(t),iWo=r(Jxe," (Data2VecAudio model)"),Jxe.forEach(t),dWo=i(bo),Zv=n(bo,"LI",{});var Yxe=s(Zv);zhe=n(Yxe,"STRONG",{});var kft=s(zhe);cWo=r(kft,"hubert"),kft.forEach(t),fWo=r(Yxe," \u2014 "),NV=n(Yxe,"A",{href:!0});var Sft=s(NV);mWo=r(Sft,"HubertForSequenceClassification"),Sft.forEach(t),gWo=r(Yxe," (Hubert model)"),Yxe.forEach(t),hWo=i(bo),eF=n(bo,"LI",{});var Kxe=s(eF);Qhe=n(Kxe,"STRONG",{});var Rft=s(Qhe);pWo=r(Rft,"sew"),Rft.forEach(t),uWo=r(Kxe," \u2014 "),jV=n(Kxe,"A",{href:!0});var Bft=s(jV);_Wo=r(Bft,"SEWForSequenceClassification"),Bft.forEach(t),bWo=r(Kxe," (SEW model)"),Kxe.forEach(t),vWo=i(bo),oF=n(bo,"LI",{});var Zxe=s(oF);Whe=n(Zxe,"STRONG",{});var Pft=s(Whe);FWo=r(Pft,"sew-d"),Pft.forEach(t),TWo=r(Zxe," \u2014 "),DV=n(Zxe,"A",{href:!0});var Ift=s(DV);MWo=r(Ift,"SEWDForSequenceClassification"),Ift.forEach(t),EWo=r(Zxe," (SEW-D model)"),Zxe.forEach(t),CWo=i(bo),rF=n(bo,"LI",{});var e9e=s(rF);Hhe=n(e9e,"STRONG",{});var qft=s(Hhe);wWo=r(qft,"unispeech"),qft.forEach(t),AWo=r(e9e," \u2014 "),GV=n(e9e,"A",{href:!0});var Nft=s(GV);yWo=r(Nft,"UniSpeechForSequenceClassification"),Nft.forEach(t),LWo=r(e9e," (UniSpeech model)"),e9e.forEach(t),xWo=i(bo),tF=n(bo,"LI",{});var o9e=s(tF);Uhe=n(o9e,"STRONG",{});var jft=s(Uhe);$Wo=r(jft,"unispeech-sat"),jft.forEach(t),kWo=r(o9e," \u2014 "),OV=n(o9e,"A",{href:!0});var Dft=s(OV);SWo=r(Dft,"UniSpeechSatForSequenceClassification"),Dft.forEach(t),RWo=r(o9e," (UniSpeechSat model)"),o9e.forEach(t),BWo=i(bo),aF=n(bo,"LI",{});var r9e=s(aF);Jhe=n(r9e,"STRONG",{});var Gft=s(Jhe);PWo=r(Gft,"wav2vec2"),Gft.forEach(t),IWo=r(r9e," \u2014 "),VV=n(r9e,"A",{href:!0});var Oft=s(VV);qWo=r(Oft,"Wav2Vec2ForSequenceClassification"),Oft.forEach(t),NWo=r(r9e," (Wav2Vec2 model)"),r9e.forEach(t),jWo=i(bo),nF=n(bo,"LI",{});var t9e=s(nF);Yhe=n(t9e,"STRONG",{});var Vft=s(Yhe);DWo=r(Vft,"wavlm"),Vft.forEach(t),GWo=r(t9e," \u2014 "),XV=n(t9e,"A",{href:!0});var Xft=s(XV);OWo=r(Xft,"WavLMForSequenceClassification"),Xft.forEach(t),VWo=r(t9e," (WavLM model)"),t9e.forEach(t),bo.forEach(t),XWo=i(ma),sF=n(ma,"P",{});var a9e=s(sF);zWo=r(a9e,"The model is set in evaluation mode by default using "),Khe=n(a9e,"CODE",{});var zft=s(Khe);QWo=r(zft,"model.eval()"),zft.forEach(t),WWo=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(a9e,"CODE",{});var Qft=s(Zhe);HWo=r(Qft,"model.train()"),Qft.forEach(t),a9e.forEach(t),UWo=i(ma),T(lF.$$.fragment,ma),ma.forEach(t),el.forEach(t),fIe=i(f),cd=n(f,"H2",{class:!0});var pNe=s(cd);iF=n(pNe,"A",{id:!0,class:!0,href:!0});var Wft=s(iF);epe=n(Wft,"SPAN",{});var Hft=s(epe);T(B6.$$.fragment,Hft),Hft.forEach(t),Wft.forEach(t),JWo=i(pNe),ope=n(pNe,"SPAN",{});var Uft=s(ope);YWo=r(Uft,"AutoModelForAudioFrameClassification"),Uft.forEach(t),pNe.forEach(t),mIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(P6.$$.fragment,ol),KWo=i(ol),fd=n(ol,"P",{});var xK=s(fd);ZWo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zV=n(xK,"A",{href:!0});var Jft=s(zV);eHo=r(Jft,"from_pretrained()"),Jft.forEach(t),oHo=r(xK," class method or the "),QV=n(xK,"A",{href:!0});var Yft=s(QV);rHo=r(Yft,"from_config()"),Yft.forEach(t),tHo=r(xK,` class
method.`),xK.forEach(t),aHo=i(ol),I6=n(ol,"P",{});var uNe=s(I6);nHo=r(uNe,"This class cannot be instantiated directly using "),rpe=n(uNe,"CODE",{});var Kft=s(rpe);sHo=r(Kft,"__init__()"),Kft.forEach(t),lHo=r(uNe," (throws an error)."),uNe.forEach(t),iHo=i(ol),ut=n(ol,"DIV",{class:!0});var E3=s(ut);T(q6.$$.fragment,E3),dHo=i(E3),tpe=n(E3,"P",{});var Zft=s(tpe);cHo=r(Zft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Zft.forEach(t),fHo=i(E3),md=n(E3,"P",{});var $K=s(md);mHo=r($K,`Note:
Loading a model from its configuration file does `),ape=n($K,"STRONG",{});var emt=s(ape);gHo=r(emt,"not"),emt.forEach(t),hHo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n($K,"A",{href:!0});var omt=s(WV);pHo=r(omt,"from_pretrained()"),omt.forEach(t),uHo=r($K," to load the model weights."),$K.forEach(t),_Ho=i(E3),T(dF.$$.fragment,E3),E3.forEach(t),bHo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(N6.$$.fragment,ga),vHo=i(ga),npe=n(ga,"P",{});var rmt=s(npe);FHo=r(rmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rmt.forEach(t),THo=i(ga),Da=n(ga,"P",{});var C3=s(Da);MHo=r(C3,"The model class to instantiate is selected based on the "),spe=n(C3,"CODE",{});var tmt=s(spe);EHo=r(tmt,"model_type"),tmt.forEach(t),CHo=r(C3,` property of the config object (either
passed as an argument or loaded from `),lpe=n(C3,"CODE",{});var amt=s(lpe);wHo=r(amt,"pretrained_model_name_or_path"),amt.forEach(t),AHo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(C3,"CODE",{});var nmt=s(ipe);yHo=r(nmt,"pretrained_model_name_or_path"),nmt.forEach(t),LHo=r(C3,":"),C3.forEach(t),xHo=i(ga),Ga=n(ga,"UL",{});var w3=s(Ga);cF=n(w3,"LI",{});var n9e=s(cF);dpe=n(n9e,"STRONG",{});var smt=s(dpe);$Ho=r(smt,"data2vec-audio"),smt.forEach(t),kHo=r(n9e," \u2014 "),HV=n(n9e,"A",{href:!0});var lmt=s(HV);SHo=r(lmt,"Data2VecAudioForAudioFrameClassification"),lmt.forEach(t),RHo=r(n9e," (Data2VecAudio model)"),n9e.forEach(t),BHo=i(w3),fF=n(w3,"LI",{});var s9e=s(fF);cpe=n(s9e,"STRONG",{});var imt=s(cpe);PHo=r(imt,"unispeech-sat"),imt.forEach(t),IHo=r(s9e," \u2014 "),UV=n(s9e,"A",{href:!0});var dmt=s(UV);qHo=r(dmt,"UniSpeechSatForAudioFrameClassification"),dmt.forEach(t),NHo=r(s9e," (UniSpeechSat model)"),s9e.forEach(t),jHo=i(w3),mF=n(w3,"LI",{});var l9e=s(mF);fpe=n(l9e,"STRONG",{});var cmt=s(fpe);DHo=r(cmt,"wav2vec2"),cmt.forEach(t),GHo=r(l9e," \u2014 "),JV=n(l9e,"A",{href:!0});var fmt=s(JV);OHo=r(fmt,"Wav2Vec2ForAudioFrameClassification"),fmt.forEach(t),VHo=r(l9e," (Wav2Vec2 model)"),l9e.forEach(t),XHo=i(w3),gF=n(w3,"LI",{});var i9e=s(gF);mpe=n(i9e,"STRONG",{});var mmt=s(mpe);zHo=r(mmt,"wavlm"),mmt.forEach(t),QHo=r(i9e," \u2014 "),YV=n(i9e,"A",{href:!0});var gmt=s(YV);WHo=r(gmt,"WavLMForAudioFrameClassification"),gmt.forEach(t),HHo=r(i9e," (WavLM model)"),i9e.forEach(t),w3.forEach(t),UHo=i(ga),hF=n(ga,"P",{});var d9e=s(hF);JHo=r(d9e,"The model is set in evaluation mode by default using "),gpe=n(d9e,"CODE",{});var hmt=s(gpe);YHo=r(hmt,"model.eval()"),hmt.forEach(t),KHo=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(d9e,"CODE",{});var pmt=s(hpe);ZHo=r(pmt,"model.train()"),pmt.forEach(t),d9e.forEach(t),eUo=i(ga),T(pF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),gIe=i(f),gd=n(f,"H2",{class:!0});var _Ne=s(gd);uF=n(_Ne,"A",{id:!0,class:!0,href:!0});var umt=s(uF);ppe=n(umt,"SPAN",{});var _mt=s(ppe);T(j6.$$.fragment,_mt),_mt.forEach(t),umt.forEach(t),oUo=i(_Ne),upe=n(_Ne,"SPAN",{});var bmt=s(upe);rUo=r(bmt,"AutoModelForCTC"),bmt.forEach(t),_Ne.forEach(t),hIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(D6.$$.fragment,rl),tUo=i(rl),hd=n(rl,"P",{});var kK=s(hd);aUo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),KV=n(kK,"A",{href:!0});var vmt=s(KV);nUo=r(vmt,"from_pretrained()"),vmt.forEach(t),sUo=r(kK," class method or the "),ZV=n(kK,"A",{href:!0});var Fmt=s(ZV);lUo=r(Fmt,"from_config()"),Fmt.forEach(t),iUo=r(kK,` class
method.`),kK.forEach(t),dUo=i(rl),G6=n(rl,"P",{});var bNe=s(G6);cUo=r(bNe,"This class cannot be instantiated directly using "),_pe=n(bNe,"CODE",{});var Tmt=s(_pe);fUo=r(Tmt,"__init__()"),Tmt.forEach(t),mUo=r(bNe," (throws an error)."),bNe.forEach(t),gUo=i(rl),_t=n(rl,"DIV",{class:!0});var A3=s(_t);T(O6.$$.fragment,A3),hUo=i(A3),bpe=n(A3,"P",{});var Mmt=s(bpe);pUo=r(Mmt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Mmt.forEach(t),uUo=i(A3),pd=n(A3,"P",{});var SK=s(pd);_Uo=r(SK,`Note:
Loading a model from its configuration file does `),vpe=n(SK,"STRONG",{});var Emt=s(vpe);bUo=r(Emt,"not"),Emt.forEach(t),vUo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(SK,"A",{href:!0});var Cmt=s(eX);FUo=r(Cmt,"from_pretrained()"),Cmt.forEach(t),TUo=r(SK," to load the model weights."),SK.forEach(t),MUo=i(A3),T(_F.$$.fragment,A3),A3.forEach(t),EUo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(V6.$$.fragment,ha),CUo=i(ha),Fpe=n(ha,"P",{});var wmt=s(Fpe);wUo=r(wmt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),wmt.forEach(t),AUo=i(ha),Oa=n(ha,"P",{});var y3=s(Oa);yUo=r(y3,"The model class to instantiate is selected based on the "),Tpe=n(y3,"CODE",{});var Amt=s(Tpe);LUo=r(Amt,"model_type"),Amt.forEach(t),xUo=r(y3,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(y3,"CODE",{});var ymt=s(Mpe);$Uo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),kUo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(y3,"CODE",{});var Lmt=s(Epe);SUo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),RUo=r(y3,":"),y3.forEach(t),BUo=i(ha),je=n(ha,"UL",{});var vo=s(je);bF=n(vo,"LI",{});var c9e=s(bF);Cpe=n(c9e,"STRONG",{});var xmt=s(Cpe);PUo=r(xmt,"data2vec-audio"),xmt.forEach(t),IUo=r(c9e," \u2014 "),oX=n(c9e,"A",{href:!0});var $mt=s(oX);qUo=r($mt,"Data2VecAudioForCTC"),$mt.forEach(t),NUo=r(c9e," (Data2VecAudio model)"),c9e.forEach(t),jUo=i(vo),vF=n(vo,"LI",{});var f9e=s(vF);wpe=n(f9e,"STRONG",{});var kmt=s(wpe);DUo=r(kmt,"hubert"),kmt.forEach(t),GUo=r(f9e," \u2014 "),rX=n(f9e,"A",{href:!0});var Smt=s(rX);OUo=r(Smt,"HubertForCTC"),Smt.forEach(t),VUo=r(f9e," (Hubert model)"),f9e.forEach(t),XUo=i(vo),FF=n(vo,"LI",{});var m9e=s(FF);Ape=n(m9e,"STRONG",{});var Rmt=s(Ape);zUo=r(Rmt,"sew"),Rmt.forEach(t),QUo=r(m9e," \u2014 "),tX=n(m9e,"A",{href:!0});var Bmt=s(tX);WUo=r(Bmt,"SEWForCTC"),Bmt.forEach(t),HUo=r(m9e," (SEW model)"),m9e.forEach(t),UUo=i(vo),TF=n(vo,"LI",{});var g9e=s(TF);ype=n(g9e,"STRONG",{});var Pmt=s(ype);JUo=r(Pmt,"sew-d"),Pmt.forEach(t),YUo=r(g9e," \u2014 "),aX=n(g9e,"A",{href:!0});var Imt=s(aX);KUo=r(Imt,"SEWDForCTC"),Imt.forEach(t),ZUo=r(g9e," (SEW-D model)"),g9e.forEach(t),eJo=i(vo),MF=n(vo,"LI",{});var h9e=s(MF);Lpe=n(h9e,"STRONG",{});var qmt=s(Lpe);oJo=r(qmt,"unispeech"),qmt.forEach(t),rJo=r(h9e," \u2014 "),nX=n(h9e,"A",{href:!0});var Nmt=s(nX);tJo=r(Nmt,"UniSpeechForCTC"),Nmt.forEach(t),aJo=r(h9e," (UniSpeech model)"),h9e.forEach(t),nJo=i(vo),EF=n(vo,"LI",{});var p9e=s(EF);xpe=n(p9e,"STRONG",{});var jmt=s(xpe);sJo=r(jmt,"unispeech-sat"),jmt.forEach(t),lJo=r(p9e," \u2014 "),sX=n(p9e,"A",{href:!0});var Dmt=s(sX);iJo=r(Dmt,"UniSpeechSatForCTC"),Dmt.forEach(t),dJo=r(p9e," (UniSpeechSat model)"),p9e.forEach(t),cJo=i(vo),CF=n(vo,"LI",{});var u9e=s(CF);$pe=n(u9e,"STRONG",{});var Gmt=s($pe);fJo=r(Gmt,"wav2vec2"),Gmt.forEach(t),mJo=r(u9e," \u2014 "),lX=n(u9e,"A",{href:!0});var Omt=s(lX);gJo=r(Omt,"Wav2Vec2ForCTC"),Omt.forEach(t),hJo=r(u9e," (Wav2Vec2 model)"),u9e.forEach(t),pJo=i(vo),wF=n(vo,"LI",{});var _9e=s(wF);kpe=n(_9e,"STRONG",{});var Vmt=s(kpe);uJo=r(Vmt,"wavlm"),Vmt.forEach(t),_Jo=r(_9e," \u2014 "),iX=n(_9e,"A",{href:!0});var Xmt=s(iX);bJo=r(Xmt,"WavLMForCTC"),Xmt.forEach(t),vJo=r(_9e," (WavLM model)"),_9e.forEach(t),vo.forEach(t),FJo=i(ha),AF=n(ha,"P",{});var b9e=s(AF);TJo=r(b9e,"The model is set in evaluation mode by default using "),Spe=n(b9e,"CODE",{});var zmt=s(Spe);MJo=r(zmt,"model.eval()"),zmt.forEach(t),EJo=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(b9e,"CODE",{});var Qmt=s(Rpe);CJo=r(Qmt,"model.train()"),Qmt.forEach(t),b9e.forEach(t),wJo=i(ha),T(yF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),pIe=i(f),ud=n(f,"H2",{class:!0});var vNe=s(ud);LF=n(vNe,"A",{id:!0,class:!0,href:!0});var Wmt=s(LF);Bpe=n(Wmt,"SPAN",{});var Hmt=s(Bpe);T(X6.$$.fragment,Hmt),Hmt.forEach(t),Wmt.forEach(t),AJo=i(vNe),Ppe=n(vNe,"SPAN",{});var Umt=s(Ppe);yJo=r(Umt,"AutoModelForSpeechSeq2Seq"),Umt.forEach(t),vNe.forEach(t),uIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(z6.$$.fragment,tl),LJo=i(tl),_d=n(tl,"P",{});var RK=s(_d);xJo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dX=n(RK,"A",{href:!0});var Jmt=s(dX);$Jo=r(Jmt,"from_pretrained()"),Jmt.forEach(t),kJo=r(RK," class method or the "),cX=n(RK,"A",{href:!0});var Ymt=s(cX);SJo=r(Ymt,"from_config()"),Ymt.forEach(t),RJo=r(RK,` class
method.`),RK.forEach(t),BJo=i(tl),Q6=n(tl,"P",{});var FNe=s(Q6);PJo=r(FNe,"This class cannot be instantiated directly using "),Ipe=n(FNe,"CODE",{});var Kmt=s(Ipe);IJo=r(Kmt,"__init__()"),Kmt.forEach(t),qJo=r(FNe," (throws an error)."),FNe.forEach(t),NJo=i(tl),bt=n(tl,"DIV",{class:!0});var L3=s(bt);T(W6.$$.fragment,L3),jJo=i(L3),qpe=n(L3,"P",{});var Zmt=s(qpe);DJo=r(Zmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zmt.forEach(t),GJo=i(L3),bd=n(L3,"P",{});var BK=s(bd);OJo=r(BK,`Note:
Loading a model from its configuration file does `),Npe=n(BK,"STRONG",{});var egt=s(Npe);VJo=r(egt,"not"),egt.forEach(t),XJo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(BK,"A",{href:!0});var ogt=s(fX);zJo=r(ogt,"from_pretrained()"),ogt.forEach(t),QJo=r(BK," to load the model weights."),BK.forEach(t),WJo=i(L3),T(xF.$$.fragment,L3),L3.forEach(t),HJo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(H6.$$.fragment,pa),UJo=i(pa),jpe=n(pa,"P",{});var rgt=s(jpe);JJo=r(rgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rgt.forEach(t),YJo=i(pa),Va=n(pa,"P",{});var x3=s(Va);KJo=r(x3,"The model class to instantiate is selected based on the "),Dpe=n(x3,"CODE",{});var tgt=s(Dpe);ZJo=r(tgt,"model_type"),tgt.forEach(t),eYo=r(x3,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(x3,"CODE",{});var agt=s(Gpe);oYo=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),rYo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(x3,"CODE",{});var ngt=s(Ope);tYo=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),aYo=r(x3,":"),x3.forEach(t),nYo=i(pa),U6=n(pa,"UL",{});var TNe=s(U6);$F=n(TNe,"LI",{});var v9e=s($F);Vpe=n(v9e,"STRONG",{});var sgt=s(Vpe);sYo=r(sgt,"speech-encoder-decoder"),sgt.forEach(t),lYo=r(v9e," \u2014 "),mX=n(v9e,"A",{href:!0});var lgt=s(mX);iYo=r(lgt,"SpeechEncoderDecoderModel"),lgt.forEach(t),dYo=r(v9e," (Speech Encoder decoder model)"),v9e.forEach(t),cYo=i(TNe),kF=n(TNe,"LI",{});var F9e=s(kF);Xpe=n(F9e,"STRONG",{});var igt=s(Xpe);fYo=r(igt,"speech_to_text"),igt.forEach(t),mYo=r(F9e," \u2014 "),gX=n(F9e,"A",{href:!0});var dgt=s(gX);gYo=r(dgt,"Speech2TextForConditionalGeneration"),dgt.forEach(t),hYo=r(F9e," (Speech2Text model)"),F9e.forEach(t),TNe.forEach(t),pYo=i(pa),SF=n(pa,"P",{});var T9e=s(SF);uYo=r(T9e,"The model is set in evaluation mode by default using "),zpe=n(T9e,"CODE",{});var cgt=s(zpe);_Yo=r(cgt,"model.eval()"),cgt.forEach(t),bYo=r(T9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=n(T9e,"CODE",{});var fgt=s(Qpe);vYo=r(fgt,"model.train()"),fgt.forEach(t),T9e.forEach(t),FYo=i(pa),T(RF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),_Ie=i(f),vd=n(f,"H2",{class:!0});var MNe=s(vd);BF=n(MNe,"A",{id:!0,class:!0,href:!0});var mgt=s(BF);Wpe=n(mgt,"SPAN",{});var ggt=s(Wpe);T(J6.$$.fragment,ggt),ggt.forEach(t),mgt.forEach(t),TYo=i(MNe),Hpe=n(MNe,"SPAN",{});var hgt=s(Hpe);MYo=r(hgt,"AutoModelForAudioXVector"),hgt.forEach(t),MNe.forEach(t),bIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(Y6.$$.fragment,al),EYo=i(al),Fd=n(al,"P",{});var PK=s(Fd);CYo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hX=n(PK,"A",{href:!0});var pgt=s(hX);wYo=r(pgt,"from_pretrained()"),pgt.forEach(t),AYo=r(PK," class method or the "),pX=n(PK,"A",{href:!0});var ugt=s(pX);yYo=r(ugt,"from_config()"),ugt.forEach(t),LYo=r(PK,` class
method.`),PK.forEach(t),xYo=i(al),K6=n(al,"P",{});var ENe=s(K6);$Yo=r(ENe,"This class cannot be instantiated directly using "),Upe=n(ENe,"CODE",{});var _gt=s(Upe);kYo=r(_gt,"__init__()"),_gt.forEach(t),SYo=r(ENe," (throws an error)."),ENe.forEach(t),RYo=i(al),vt=n(al,"DIV",{class:!0});var $3=s(vt);T(Z6.$$.fragment,$3),BYo=i($3),Jpe=n($3,"P",{});var bgt=s(Jpe);PYo=r(bgt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bgt.forEach(t),IYo=i($3),Td=n($3,"P",{});var IK=s(Td);qYo=r(IK,`Note:
Loading a model from its configuration file does `),Ype=n(IK,"STRONG",{});var vgt=s(Ype);NYo=r(vgt,"not"),vgt.forEach(t),jYo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(IK,"A",{href:!0});var Fgt=s(uX);DYo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),GYo=r(IK," to load the model weights."),IK.forEach(t),OYo=i($3),T(PF.$$.fragment,$3),$3.forEach(t),VYo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(ey.$$.fragment,ua),XYo=i(ua),Kpe=n(ua,"P",{});var Tgt=s(Kpe);zYo=r(Tgt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Tgt.forEach(t),QYo=i(ua),Xa=n(ua,"P",{});var k3=s(Xa);WYo=r(k3,"The model class to instantiate is selected based on the "),Zpe=n(k3,"CODE",{});var Mgt=s(Zpe);HYo=r(Mgt,"model_type"),Mgt.forEach(t),UYo=r(k3,` property of the config object (either
passed as an argument or loaded from `),eue=n(k3,"CODE",{});var Egt=s(eue);JYo=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),YYo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(k3,"CODE",{});var Cgt=s(oue);KYo=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),ZYo=r(k3,":"),k3.forEach(t),eKo=i(ua),za=n(ua,"UL",{});var S3=s(za);IF=n(S3,"LI",{});var M9e=s(IF);rue=n(M9e,"STRONG",{});var wgt=s(rue);oKo=r(wgt,"data2vec-audio"),wgt.forEach(t),rKo=r(M9e," \u2014 "),_X=n(M9e,"A",{href:!0});var Agt=s(_X);tKo=r(Agt,"Data2VecAudioForXVector"),Agt.forEach(t),aKo=r(M9e," (Data2VecAudio model)"),M9e.forEach(t),nKo=i(S3),qF=n(S3,"LI",{});var E9e=s(qF);tue=n(E9e,"STRONG",{});var ygt=s(tue);sKo=r(ygt,"unispeech-sat"),ygt.forEach(t),lKo=r(E9e," \u2014 "),bX=n(E9e,"A",{href:!0});var Lgt=s(bX);iKo=r(Lgt,"UniSpeechSatForXVector"),Lgt.forEach(t),dKo=r(E9e," (UniSpeechSat model)"),E9e.forEach(t),cKo=i(S3),NF=n(S3,"LI",{});var C9e=s(NF);aue=n(C9e,"STRONG",{});var xgt=s(aue);fKo=r(xgt,"wav2vec2"),xgt.forEach(t),mKo=r(C9e," \u2014 "),vX=n(C9e,"A",{href:!0});var $gt=s(vX);gKo=r($gt,"Wav2Vec2ForXVector"),$gt.forEach(t),hKo=r(C9e," (Wav2Vec2 model)"),C9e.forEach(t),pKo=i(S3),jF=n(S3,"LI",{});var w9e=s(jF);nue=n(w9e,"STRONG",{});var kgt=s(nue);uKo=r(kgt,"wavlm"),kgt.forEach(t),_Ko=r(w9e," \u2014 "),FX=n(w9e,"A",{href:!0});var Sgt=s(FX);bKo=r(Sgt,"WavLMForXVector"),Sgt.forEach(t),vKo=r(w9e," (WavLM model)"),w9e.forEach(t),S3.forEach(t),FKo=i(ua),DF=n(ua,"P",{});var A9e=s(DF);TKo=r(A9e,"The model is set in evaluation mode by default using "),sue=n(A9e,"CODE",{});var Rgt=s(sue);MKo=r(Rgt,"model.eval()"),Rgt.forEach(t),EKo=r(A9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(A9e,"CODE",{});var Bgt=s(lue);CKo=r(Bgt,"model.train()"),Bgt.forEach(t),A9e.forEach(t),wKo=i(ua),T(GF.$$.fragment,ua),ua.forEach(t),al.forEach(t),vIe=i(f),Md=n(f,"H2",{class:!0});var CNe=s(Md);OF=n(CNe,"A",{id:!0,class:!0,href:!0});var Pgt=s(OF);iue=n(Pgt,"SPAN",{});var Igt=s(iue);T(oy.$$.fragment,Igt),Igt.forEach(t),Pgt.forEach(t),AKo=i(CNe),due=n(CNe,"SPAN",{});var qgt=s(due);yKo=r(qgt,"AutoModelForMaskedImageModeling"),qgt.forEach(t),CNe.forEach(t),FIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(ry.$$.fragment,nl),LKo=i(nl),Ed=n(nl,"P",{});var qK=s(Ed);xKo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),TX=n(qK,"A",{href:!0});var Ngt=s(TX);$Ko=r(Ngt,"from_pretrained()"),Ngt.forEach(t),kKo=r(qK," class method or the "),MX=n(qK,"A",{href:!0});var jgt=s(MX);SKo=r(jgt,"from_config()"),jgt.forEach(t),RKo=r(qK,` class
method.`),qK.forEach(t),BKo=i(nl),ty=n(nl,"P",{});var wNe=s(ty);PKo=r(wNe,"This class cannot be instantiated directly using "),cue=n(wNe,"CODE",{});var Dgt=s(cue);IKo=r(Dgt,"__init__()"),Dgt.forEach(t),qKo=r(wNe," (throws an error)."),wNe.forEach(t),NKo=i(nl),Ft=n(nl,"DIV",{class:!0});var R3=s(Ft);T(ay.$$.fragment,R3),jKo=i(R3),fue=n(R3,"P",{});var Ggt=s(fue);DKo=r(Ggt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ggt.forEach(t),GKo=i(R3),Cd=n(R3,"P",{});var NK=s(Cd);OKo=r(NK,`Note:
Loading a model from its configuration file does `),mue=n(NK,"STRONG",{});var Ogt=s(mue);VKo=r(Ogt,"not"),Ogt.forEach(t),XKo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(NK,"A",{href:!0});var Vgt=s(EX);zKo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),QKo=r(NK," to load the model weights."),NK.forEach(t),WKo=i(R3),T(VF.$$.fragment,R3),R3.forEach(t),HKo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(ny.$$.fragment,_a),UKo=i(_a),gue=n(_a,"P",{});var Xgt=s(gue);JKo=r(Xgt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Xgt.forEach(t),YKo=i(_a),Qa=n(_a,"P",{});var B3=s(Qa);KKo=r(B3,"The model class to instantiate is selected based on the "),hue=n(B3,"CODE",{});var zgt=s(hue);ZKo=r(zgt,"model_type"),zgt.forEach(t),eZo=r(B3,` property of the config object (either
passed as an argument or loaded from `),pue=n(B3,"CODE",{});var Qgt=s(pue);oZo=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),rZo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(B3,"CODE",{});var Wgt=s(uue);tZo=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),aZo=r(B3,":"),B3.forEach(t),nZo=i(_a),wd=n(_a,"UL",{});var jK=s(wd);XF=n(jK,"LI",{});var y9e=s(XF);_ue=n(y9e,"STRONG",{});var Hgt=s(_ue);sZo=r(Hgt,"deit"),Hgt.forEach(t),lZo=r(y9e," \u2014 "),CX=n(y9e,"A",{href:!0});var Ugt=s(CX);iZo=r(Ugt,"DeiTForMaskedImageModeling"),Ugt.forEach(t),dZo=r(y9e," (DeiT model)"),y9e.forEach(t),cZo=i(jK),zF=n(jK,"LI",{});var L9e=s(zF);bue=n(L9e,"STRONG",{});var Jgt=s(bue);fZo=r(Jgt,"swin"),Jgt.forEach(t),mZo=r(L9e," \u2014 "),wX=n(L9e,"A",{href:!0});var Ygt=s(wX);gZo=r(Ygt,"SwinForMaskedImageModeling"),Ygt.forEach(t),hZo=r(L9e," (Swin model)"),L9e.forEach(t),pZo=i(jK),QF=n(jK,"LI",{});var x9e=s(QF);vue=n(x9e,"STRONG",{});var Kgt=s(vue);uZo=r(Kgt,"vit"),Kgt.forEach(t),_Zo=r(x9e," \u2014 "),AX=n(x9e,"A",{href:!0});var Zgt=s(AX);bZo=r(Zgt,"ViTForMaskedImageModeling"),Zgt.forEach(t),vZo=r(x9e," (ViT model)"),x9e.forEach(t),jK.forEach(t),FZo=i(_a),WF=n(_a,"P",{});var $9e=s(WF);TZo=r($9e,"The model is set in evaluation mode by default using "),Fue=n($9e,"CODE",{});var eht=s(Fue);MZo=r(eht,"model.eval()"),eht.forEach(t),EZo=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=n($9e,"CODE",{});var oht=s(Tue);CZo=r(oht,"model.train()"),oht.forEach(t),$9e.forEach(t),wZo=i(_a),T(HF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),TIe=i(f),Ad=n(f,"H2",{class:!0});var ANe=s(Ad);UF=n(ANe,"A",{id:!0,class:!0,href:!0});var rht=s(UF);Mue=n(rht,"SPAN",{});var tht=s(Mue);T(sy.$$.fragment,tht),tht.forEach(t),rht.forEach(t),AZo=i(ANe),Eue=n(ANe,"SPAN",{});var aht=s(Eue);yZo=r(aht,"AutoModelForObjectDetection"),aht.forEach(t),ANe.forEach(t),MIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(ly.$$.fragment,sl),LZo=i(sl),yd=n(sl,"P",{});var DK=s(yd);xZo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),yX=n(DK,"A",{href:!0});var nht=s(yX);$Zo=r(nht,"from_pretrained()"),nht.forEach(t),kZo=r(DK," class method or the "),LX=n(DK,"A",{href:!0});var sht=s(LX);SZo=r(sht,"from_config()"),sht.forEach(t),RZo=r(DK,` class
method.`),DK.forEach(t),BZo=i(sl),iy=n(sl,"P",{});var yNe=s(iy);PZo=r(yNe,"This class cannot be instantiated directly using "),Cue=n(yNe,"CODE",{});var lht=s(Cue);IZo=r(lht,"__init__()"),lht.forEach(t),qZo=r(yNe," (throws an error)."),yNe.forEach(t),NZo=i(sl),Tt=n(sl,"DIV",{class:!0});var P3=s(Tt);T(dy.$$.fragment,P3),jZo=i(P3),wue=n(P3,"P",{});var iht=s(wue);DZo=r(iht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iht.forEach(t),GZo=i(P3),Ld=n(P3,"P",{});var GK=s(Ld);OZo=r(GK,`Note:
Loading a model from its configuration file does `),Aue=n(GK,"STRONG",{});var dht=s(Aue);VZo=r(dht,"not"),dht.forEach(t),XZo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(GK,"A",{href:!0});var cht=s(xX);zZo=r(cht,"from_pretrained()"),cht.forEach(t),QZo=r(GK," to load the model weights."),GK.forEach(t),WZo=i(P3),T(JF.$$.fragment,P3),P3.forEach(t),HZo=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(cy.$$.fragment,ba),UZo=i(ba),yue=n(ba,"P",{});var fht=s(yue);JZo=r(fht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fht.forEach(t),YZo=i(ba),Wa=n(ba,"P",{});var I3=s(Wa);KZo=r(I3,"The model class to instantiate is selected based on the "),Lue=n(I3,"CODE",{});var mht=s(Lue);ZZo=r(mht,"model_type"),mht.forEach(t),eer=r(I3,` property of the config object (either
passed as an argument or loaded from `),xue=n(I3,"CODE",{});var ght=s(xue);oer=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),rer=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=n(I3,"CODE",{});var hht=s($ue);ter=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),aer=r(I3,":"),I3.forEach(t),ner=i(ba),fy=n(ba,"UL",{});var LNe=s(fy);YF=n(LNe,"LI",{});var k9e=s(YF);kue=n(k9e,"STRONG",{});var pht=s(kue);ser=r(pht,"detr"),pht.forEach(t),ler=r(k9e," \u2014 "),$X=n(k9e,"A",{href:!0});var uht=s($X);ier=r(uht,"DetrForObjectDetection"),uht.forEach(t),der=r(k9e," (DETR model)"),k9e.forEach(t),cer=i(LNe),KF=n(LNe,"LI",{});var S9e=s(KF);Sue=n(S9e,"STRONG",{});var _ht=s(Sue);fer=r(_ht,"yolos"),_ht.forEach(t),mer=r(S9e," \u2014 "),kX=n(S9e,"A",{href:!0});var bht=s(kX);ger=r(bht,"YolosForObjectDetection"),bht.forEach(t),her=r(S9e," (YOLOS model)"),S9e.forEach(t),LNe.forEach(t),per=i(ba),ZF=n(ba,"P",{});var R9e=s(ZF);uer=r(R9e,"The model is set in evaluation mode by default using "),Rue=n(R9e,"CODE",{});var vht=s(Rue);_er=r(vht,"model.eval()"),vht.forEach(t),ber=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(R9e,"CODE",{});var Fht=s(Bue);ver=r(Fht,"model.train()"),Fht.forEach(t),R9e.forEach(t),Fer=i(ba),T(e0.$$.fragment,ba),ba.forEach(t),sl.forEach(t),EIe=i(f),xd=n(f,"H2",{class:!0});var xNe=s(xd);o0=n(xNe,"A",{id:!0,class:!0,href:!0});var Tht=s(o0);Pue=n(Tht,"SPAN",{});var Mht=s(Pue);T(my.$$.fragment,Mht),Mht.forEach(t),Tht.forEach(t),Ter=i(xNe),Iue=n(xNe,"SPAN",{});var Eht=s(Iue);Mer=r(Eht,"AutoModelForImageSegmentation"),Eht.forEach(t),xNe.forEach(t),CIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(gy.$$.fragment,ll),Eer=i(ll),$d=n(ll,"P",{});var OK=s($d);Cer=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),SX=n(OK,"A",{href:!0});var Cht=s(SX);wer=r(Cht,"from_pretrained()"),Cht.forEach(t),Aer=r(OK," class method or the "),RX=n(OK,"A",{href:!0});var wht=s(RX);yer=r(wht,"from_config()"),wht.forEach(t),Ler=r(OK,` class
method.`),OK.forEach(t),xer=i(ll),hy=n(ll,"P",{});var $Ne=s(hy);$er=r($Ne,"This class cannot be instantiated directly using "),que=n($Ne,"CODE",{});var Aht=s(que);ker=r(Aht,"__init__()"),Aht.forEach(t),Ser=r($Ne," (throws an error)."),$Ne.forEach(t),Rer=i(ll),Mt=n(ll,"DIV",{class:!0});var q3=s(Mt);T(py.$$.fragment,q3),Ber=i(q3),Nue=n(q3,"P",{});var yht=s(Nue);Per=r(yht,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),yht.forEach(t),Ier=i(q3),kd=n(q3,"P",{});var VK=s(kd);qer=r(VK,`Note:
Loading a model from its configuration file does `),jue=n(VK,"STRONG",{});var Lht=s(jue);Ner=r(Lht,"not"),Lht.forEach(t),jer=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(VK,"A",{href:!0});var xht=s(BX);Der=r(xht,"from_pretrained()"),xht.forEach(t),Ger=r(VK," to load the model weights."),VK.forEach(t),Oer=i(q3),T(r0.$$.fragment,q3),q3.forEach(t),Ver=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(uy.$$.fragment,va),Xer=i(va),Due=n(va,"P",{});var $ht=s(Due);zer=r($ht,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$ht.forEach(t),Qer=i(va),Ha=n(va,"P",{});var N3=s(Ha);Wer=r(N3,"The model class to instantiate is selected based on the "),Gue=n(N3,"CODE",{});var kht=s(Gue);Her=r(kht,"model_type"),kht.forEach(t),Uer=r(N3,` property of the config object (either
passed as an argument or loaded from `),Oue=n(N3,"CODE",{});var Sht=s(Oue);Jer=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),Yer=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(N3,"CODE",{});var Rht=s(Vue);Ker=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),Zer=r(N3,":"),N3.forEach(t),eor=i(va),Xue=n(va,"UL",{});var Bht=s(Xue);t0=n(Bht,"LI",{});var B9e=s(t0);zue=n(B9e,"STRONG",{});var Pht=s(zue);oor=r(Pht,"detr"),Pht.forEach(t),ror=r(B9e," \u2014 "),PX=n(B9e,"A",{href:!0});var Iht=s(PX);tor=r(Iht,"DetrForSegmentation"),Iht.forEach(t),aor=r(B9e," (DETR model)"),B9e.forEach(t),Bht.forEach(t),nor=i(va),a0=n(va,"P",{});var P9e=s(a0);sor=r(P9e,"The model is set in evaluation mode by default using "),Que=n(P9e,"CODE",{});var qht=s(Que);lor=r(qht,"model.eval()"),qht.forEach(t),ior=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(P9e,"CODE",{});var Nht=s(Wue);dor=r(Nht,"model.train()"),Nht.forEach(t),P9e.forEach(t),cor=i(va),T(n0.$$.fragment,va),va.forEach(t),ll.forEach(t),wIe=i(f),Sd=n(f,"H2",{class:!0});var kNe=s(Sd);s0=n(kNe,"A",{id:!0,class:!0,href:!0});var jht=s(s0);Hue=n(jht,"SPAN",{});var Dht=s(Hue);T(_y.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),mor=i(kNe),Uue=n(kNe,"SPAN",{});var Ght=s(Uue);gor=r(Ght,"AutoModelForSemanticSegmentation"),Ght.forEach(t),kNe.forEach(t),AIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(by.$$.fragment,il),hor=i(il),Rd=n(il,"P",{});var XK=s(Rd);por=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),IX=n(XK,"A",{href:!0});var Oht=s(IX);uor=r(Oht,"from_pretrained()"),Oht.forEach(t),_or=r(XK," class method or the "),qX=n(XK,"A",{href:!0});var Vht=s(qX);bor=r(Vht,"from_config()"),Vht.forEach(t),vor=r(XK,` class
method.`),XK.forEach(t),For=i(il),vy=n(il,"P",{});var SNe=s(vy);Tor=r(SNe,"This class cannot be instantiated directly using "),Jue=n(SNe,"CODE",{});var Xht=s(Jue);Mor=r(Xht,"__init__()"),Xht.forEach(t),Eor=r(SNe," (throws an error)."),SNe.forEach(t),Cor=i(il),Et=n(il,"DIV",{class:!0});var j3=s(Et);T(Fy.$$.fragment,j3),wor=i(j3),Yue=n(j3,"P",{});var zht=s(Yue);Aor=r(zht,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zht.forEach(t),yor=i(j3),Bd=n(j3,"P",{});var zK=s(Bd);Lor=r(zK,`Note:
Loading a model from its configuration file does `),Kue=n(zK,"STRONG",{});var Qht=s(Kue);xor=r(Qht,"not"),Qht.forEach(t),$or=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(zK,"A",{href:!0});var Wht=s(NX);kor=r(Wht,"from_pretrained()"),Wht.forEach(t),Sor=r(zK," to load the model weights."),zK.forEach(t),Ror=i(j3),T(l0.$$.fragment,j3),j3.forEach(t),Bor=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(Ty.$$.fragment,Fa),Por=i(Fa),Zue=n(Fa,"P",{});var Hht=s(Zue);Ior=r(Hht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hht.forEach(t),qor=i(Fa),Ua=n(Fa,"P",{});var D3=s(Ua);Nor=r(D3,"The model class to instantiate is selected based on the "),e_e=n(D3,"CODE",{});var Uht=s(e_e);jor=r(Uht,"model_type"),Uht.forEach(t),Dor=r(D3,` property of the config object (either
passed as an argument or loaded from `),o_e=n(D3,"CODE",{});var Jht=s(o_e);Gor=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),Oor=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(D3,"CODE",{});var Yht=s(r_e);Vor=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),Xor=r(D3,":"),D3.forEach(t),zor=i(Fa),Ja=n(Fa,"UL",{});var G3=s(Ja);i0=n(G3,"LI",{});var I9e=s(i0);t_e=n(I9e,"STRONG",{});var Kht=s(t_e);Qor=r(Kht,"beit"),Kht.forEach(t),Wor=r(I9e," \u2014 "),jX=n(I9e,"A",{href:!0});var Zht=s(jX);Hor=r(Zht,"BeitForSemanticSegmentation"),Zht.forEach(t),Uor=r(I9e," (BEiT model)"),I9e.forEach(t),Jor=i(G3),d0=n(G3,"LI",{});var q9e=s(d0);a_e=n(q9e,"STRONG",{});var ept=s(a_e);Yor=r(ept,"data2vec-vision"),ept.forEach(t),Kor=r(q9e," \u2014 "),DX=n(q9e,"A",{href:!0});var opt=s(DX);Zor=r(opt,"Data2VecVisionForSemanticSegmentation"),opt.forEach(t),err=r(q9e," (Data2VecVision model)"),q9e.forEach(t),orr=i(G3),c0=n(G3,"LI",{});var N9e=s(c0);n_e=n(N9e,"STRONG",{});var rpt=s(n_e);rrr=r(rpt,"dpt"),rpt.forEach(t),trr=r(N9e," \u2014 "),GX=n(N9e,"A",{href:!0});var tpt=s(GX);arr=r(tpt,"DPTForSemanticSegmentation"),tpt.forEach(t),nrr=r(N9e," (DPT model)"),N9e.forEach(t),srr=i(G3),f0=n(G3,"LI",{});var j9e=s(f0);s_e=n(j9e,"STRONG",{});var apt=s(s_e);lrr=r(apt,"segformer"),apt.forEach(t),irr=r(j9e," \u2014 "),OX=n(j9e,"A",{href:!0});var npt=s(OX);drr=r(npt,"SegformerForSemanticSegmentation"),npt.forEach(t),crr=r(j9e," (SegFormer model)"),j9e.forEach(t),G3.forEach(t),frr=i(Fa),m0=n(Fa,"P",{});var D9e=s(m0);mrr=r(D9e,"The model is set in evaluation mode by default using "),l_e=n(D9e,"CODE",{});var spt=s(l_e);grr=r(spt,"model.eval()"),spt.forEach(t),hrr=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(D9e,"CODE",{});var lpt=s(i_e);prr=r(lpt,"model.train()"),lpt.forEach(t),D9e.forEach(t),urr=i(Fa),T(g0.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),yIe=i(f),Pd=n(f,"H2",{class:!0});var RNe=s(Pd);h0=n(RNe,"A",{id:!0,class:!0,href:!0});var ipt=s(h0);d_e=n(ipt,"SPAN",{});var dpt=s(d_e);T(My.$$.fragment,dpt),dpt.forEach(t),ipt.forEach(t),_rr=i(RNe),c_e=n(RNe,"SPAN",{});var cpt=s(c_e);brr=r(cpt,"AutoModelForInstanceSegmentation"),cpt.forEach(t),RNe.forEach(t),LIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(Ey.$$.fragment,dl),vrr=i(dl),Id=n(dl,"P",{});var QK=s(Id);Frr=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),VX=n(QK,"A",{href:!0});var fpt=s(VX);Trr=r(fpt,"from_pretrained()"),fpt.forEach(t),Mrr=r(QK," class method or the "),XX=n(QK,"A",{href:!0});var mpt=s(XX);Err=r(mpt,"from_config()"),mpt.forEach(t),Crr=r(QK,` class
method.`),QK.forEach(t),wrr=i(dl),Cy=n(dl,"P",{});var BNe=s(Cy);Arr=r(BNe,"This class cannot be instantiated directly using "),f_e=n(BNe,"CODE",{});var gpt=s(f_e);yrr=r(gpt,"__init__()"),gpt.forEach(t),Lrr=r(BNe," (throws an error)."),BNe.forEach(t),xrr=i(dl),Ct=n(dl,"DIV",{class:!0});var O3=s(Ct);T(wy.$$.fragment,O3),$rr=i(O3),m_e=n(O3,"P",{});var hpt=s(m_e);krr=r(hpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hpt.forEach(t),Srr=i(O3),qd=n(O3,"P",{});var WK=s(qd);Rrr=r(WK,`Note:
Loading a model from its configuration file does `),g_e=n(WK,"STRONG",{});var ppt=s(g_e);Brr=r(ppt,"not"),ppt.forEach(t),Prr=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(WK,"A",{href:!0});var upt=s(zX);Irr=r(upt,"from_pretrained()"),upt.forEach(t),qrr=r(WK," to load the model weights."),WK.forEach(t),Nrr=i(O3),T(p0.$$.fragment,O3),O3.forEach(t),jrr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(Ay.$$.fragment,Ta),Drr=i(Ta),h_e=n(Ta,"P",{});var _pt=s(h_e);Grr=r(_pt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_pt.forEach(t),Orr=i(Ta),Ya=n(Ta,"P",{});var V3=s(Ya);Vrr=r(V3,"The model class to instantiate is selected based on the "),p_e=n(V3,"CODE",{});var bpt=s(p_e);Xrr=r(bpt,"model_type"),bpt.forEach(t),zrr=r(V3,` property of the config object (either
passed as an argument or loaded from `),u_e=n(V3,"CODE",{});var vpt=s(u_e);Qrr=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),Wrr=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(V3,"CODE",{});var Fpt=s(__e);Hrr=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),Urr=r(V3,":"),V3.forEach(t),Jrr=i(Ta),b_e=n(Ta,"UL",{});var Tpt=s(b_e);u0=n(Tpt,"LI",{});var G9e=s(u0);v_e=n(G9e,"STRONG",{});var Mpt=s(v_e);Yrr=r(Mpt,"maskformer"),Mpt.forEach(t),Krr=r(G9e," \u2014 "),QX=n(G9e,"A",{href:!0});var Ept=s(QX);Zrr=r(Ept,"MaskFormerForInstanceSegmentation"),Ept.forEach(t),etr=r(G9e," (MaskFormer model)"),G9e.forEach(t),Tpt.forEach(t),otr=i(Ta),_0=n(Ta,"P",{});var O9e=s(_0);rtr=r(O9e,"The model is set in evaluation mode by default using "),F_e=n(O9e,"CODE",{});var Cpt=s(F_e);ttr=r(Cpt,"model.eval()"),Cpt.forEach(t),atr=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(O9e,"CODE",{});var wpt=s(T_e);ntr=r(wpt,"model.train()"),wpt.forEach(t),O9e.forEach(t),str=i(Ta),T(b0.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),xIe=i(f),Nd=n(f,"H2",{class:!0});var PNe=s(Nd);v0=n(PNe,"A",{id:!0,class:!0,href:!0});var Apt=s(v0);M_e=n(Apt,"SPAN",{});var ypt=s(M_e);T(yy.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),ltr=i(PNe),E_e=n(PNe,"SPAN",{});var Lpt=s(E_e);itr=r(Lpt,"TFAutoModel"),Lpt.forEach(t),PNe.forEach(t),$Ie=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(Ly.$$.fragment,cl),dtr=i(cl),jd=n(cl,"P",{});var HK=s(jd);ctr=r(HK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WX=n(HK,"A",{href:!0});var xpt=s(WX);ftr=r(xpt,"from_pretrained()"),xpt.forEach(t),mtr=r(HK," class method or the "),HX=n(HK,"A",{href:!0});var $pt=s(HX);gtr=r($pt,"from_config()"),$pt.forEach(t),htr=r(HK,` class
method.`),HK.forEach(t),ptr=i(cl),xy=n(cl,"P",{});var INe=s(xy);utr=r(INe,"This class cannot be instantiated directly using "),C_e=n(INe,"CODE",{});var kpt=s(C_e);_tr=r(kpt,"__init__()"),kpt.forEach(t),btr=r(INe," (throws an error)."),INe.forEach(t),vtr=i(cl),wt=n(cl,"DIV",{class:!0});var X3=s(wt);T($y.$$.fragment,X3),Ftr=i(X3),w_e=n(X3,"P",{});var Spt=s(w_e);Ttr=r(Spt,"Instantiates one of the base model classes of the library from a configuration."),Spt.forEach(t),Mtr=i(X3),Dd=n(X3,"P",{});var UK=s(Dd);Etr=r(UK,`Note:
Loading a model from its configuration file does `),A_e=n(UK,"STRONG",{});var Rpt=s(A_e);Ctr=r(Rpt,"not"),Rpt.forEach(t),wtr=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(UK,"A",{href:!0});var Bpt=s(UX);Atr=r(Bpt,"from_pretrained()"),Bpt.forEach(t),ytr=r(UK," to load the model weights."),UK.forEach(t),Ltr=i(X3),T(F0.$$.fragment,X3),X3.forEach(t),xtr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(ky.$$.fragment,fl),$tr=i(fl),y_e=n(fl,"P",{});var Ppt=s(y_e);ktr=r(Ppt,"Instantiate one of the base model classes of the library from a pretrained model."),Ppt.forEach(t),Str=i(fl),Ka=n(fl,"P",{});var z3=s(Ka);Rtr=r(z3,"The model class to instantiate is selected based on the "),L_e=n(z3,"CODE",{});var Ipt=s(L_e);Btr=r(Ipt,"model_type"),Ipt.forEach(t),Ptr=r(z3,` property of the config object (either
passed as an argument or loaded from `),x_e=n(z3,"CODE",{});var qpt=s(x_e);Itr=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),qtr=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(z3,"CODE",{});var Npt=s($_e);Ntr=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),jtr=r(z3,":"),z3.forEach(t),Dtr=i(fl),j=n(fl,"UL",{});var D=s(j);T0=n(D,"LI",{});var V9e=s(T0);k_e=n(V9e,"STRONG",{});var jpt=s(k_e);Gtr=r(jpt,"albert"),jpt.forEach(t),Otr=r(V9e," \u2014 "),JX=n(V9e,"A",{href:!0});var Dpt=s(JX);Vtr=r(Dpt,"TFAlbertModel"),Dpt.forEach(t),Xtr=r(V9e," (ALBERT model)"),V9e.forEach(t),ztr=i(D),M0=n(D,"LI",{});var X9e=s(M0);S_e=n(X9e,"STRONG",{});var Gpt=s(S_e);Qtr=r(Gpt,"bart"),Gpt.forEach(t),Wtr=r(X9e," \u2014 "),YX=n(X9e,"A",{href:!0});var Opt=s(YX);Htr=r(Opt,"TFBartModel"),Opt.forEach(t),Utr=r(X9e," (BART model)"),X9e.forEach(t),Jtr=i(D),E0=n(D,"LI",{});var z9e=s(E0);R_e=n(z9e,"STRONG",{});var Vpt=s(R_e);Ytr=r(Vpt,"bert"),Vpt.forEach(t),Ktr=r(z9e," \u2014 "),KX=n(z9e,"A",{href:!0});var Xpt=s(KX);Ztr=r(Xpt,"TFBertModel"),Xpt.forEach(t),ear=r(z9e," (BERT model)"),z9e.forEach(t),oar=i(D),C0=n(D,"LI",{});var Q9e=s(C0);B_e=n(Q9e,"STRONG",{});var zpt=s(B_e);rar=r(zpt,"blenderbot"),zpt.forEach(t),tar=r(Q9e," \u2014 "),ZX=n(Q9e,"A",{href:!0});var Qpt=s(ZX);aar=r(Qpt,"TFBlenderbotModel"),Qpt.forEach(t),nar=r(Q9e," (Blenderbot model)"),Q9e.forEach(t),sar=i(D),w0=n(D,"LI",{});var W9e=s(w0);P_e=n(W9e,"STRONG",{});var Wpt=s(P_e);lar=r(Wpt,"blenderbot-small"),Wpt.forEach(t),iar=r(W9e," \u2014 "),ez=n(W9e,"A",{href:!0});var Hpt=s(ez);dar=r(Hpt,"TFBlenderbotSmallModel"),Hpt.forEach(t),car=r(W9e," (BlenderbotSmall model)"),W9e.forEach(t),far=i(D),A0=n(D,"LI",{});var H9e=s(A0);I_e=n(H9e,"STRONG",{});var Upt=s(I_e);mar=r(Upt,"camembert"),Upt.forEach(t),gar=r(H9e," \u2014 "),oz=n(H9e,"A",{href:!0});var Jpt=s(oz);har=r(Jpt,"TFCamembertModel"),Jpt.forEach(t),par=r(H9e," (CamemBERT model)"),H9e.forEach(t),uar=i(D),y0=n(D,"LI",{});var U9e=s(y0);q_e=n(U9e,"STRONG",{});var Ypt=s(q_e);_ar=r(Ypt,"clip"),Ypt.forEach(t),bar=r(U9e," \u2014 "),rz=n(U9e,"A",{href:!0});var Kpt=s(rz);Far=r(Kpt,"TFCLIPModel"),Kpt.forEach(t),Tar=r(U9e," (CLIP model)"),U9e.forEach(t),Mar=i(D),L0=n(D,"LI",{});var J9e=s(L0);N_e=n(J9e,"STRONG",{});var Zpt=s(N_e);Ear=r(Zpt,"convbert"),Zpt.forEach(t),Car=r(J9e," \u2014 "),tz=n(J9e,"A",{href:!0});var eut=s(tz);war=r(eut,"TFConvBertModel"),eut.forEach(t),Aar=r(J9e," (ConvBERT model)"),J9e.forEach(t),yar=i(D),x0=n(D,"LI",{});var Y9e=s(x0);j_e=n(Y9e,"STRONG",{});var out=s(j_e);Lar=r(out,"convnext"),out.forEach(t),xar=r(Y9e," \u2014 "),az=n(Y9e,"A",{href:!0});var rut=s(az);$ar=r(rut,"TFConvNextModel"),rut.forEach(t),kar=r(Y9e," (ConvNext model)"),Y9e.forEach(t),Sar=i(D),$0=n(D,"LI",{});var K9e=s($0);D_e=n(K9e,"STRONG",{});var tut=s(D_e);Rar=r(tut,"ctrl"),tut.forEach(t),Bar=r(K9e," \u2014 "),nz=n(K9e,"A",{href:!0});var aut=s(nz);Par=r(aut,"TFCTRLModel"),aut.forEach(t),Iar=r(K9e," (CTRL model)"),K9e.forEach(t),qar=i(D),k0=n(D,"LI",{});var Z9e=s(k0);G_e=n(Z9e,"STRONG",{});var nut=s(G_e);Nar=r(nut,"data2vec-vision"),nut.forEach(t),jar=r(Z9e," \u2014 "),sz=n(Z9e,"A",{href:!0});var sut=s(sz);Dar=r(sut,"TFData2VecVisionModel"),sut.forEach(t),Gar=r(Z9e," (Data2VecVision model)"),Z9e.forEach(t),Oar=i(D),S0=n(D,"LI",{});var e$e=s(S0);O_e=n(e$e,"STRONG",{});var lut=s(O_e);Var=r(lut,"deberta"),lut.forEach(t),Xar=r(e$e," \u2014 "),lz=n(e$e,"A",{href:!0});var iut=s(lz);zar=r(iut,"TFDebertaModel"),iut.forEach(t),Qar=r(e$e," (DeBERTa model)"),e$e.forEach(t),War=i(D),R0=n(D,"LI",{});var o$e=s(R0);V_e=n(o$e,"STRONG",{});var dut=s(V_e);Har=r(dut,"deberta-v2"),dut.forEach(t),Uar=r(o$e," \u2014 "),iz=n(o$e,"A",{href:!0});var cut=s(iz);Jar=r(cut,"TFDebertaV2Model"),cut.forEach(t),Yar=r(o$e," (DeBERTa-v2 model)"),o$e.forEach(t),Kar=i(D),B0=n(D,"LI",{});var r$e=s(B0);X_e=n(r$e,"STRONG",{});var fut=s(X_e);Zar=r(fut,"distilbert"),fut.forEach(t),enr=r(r$e," \u2014 "),dz=n(r$e,"A",{href:!0});var mut=s(dz);onr=r(mut,"TFDistilBertModel"),mut.forEach(t),rnr=r(r$e," (DistilBERT model)"),r$e.forEach(t),tnr=i(D),P0=n(D,"LI",{});var t$e=s(P0);z_e=n(t$e,"STRONG",{});var gut=s(z_e);anr=r(gut,"dpr"),gut.forEach(t),nnr=r(t$e," \u2014 "),cz=n(t$e,"A",{href:!0});var hut=s(cz);snr=r(hut,"TFDPRQuestionEncoder"),hut.forEach(t),lnr=r(t$e," (DPR model)"),t$e.forEach(t),inr=i(D),I0=n(D,"LI",{});var a$e=s(I0);Q_e=n(a$e,"STRONG",{});var put=s(Q_e);dnr=r(put,"electra"),put.forEach(t),cnr=r(a$e," \u2014 "),fz=n(a$e,"A",{href:!0});var uut=s(fz);fnr=r(uut,"TFElectraModel"),uut.forEach(t),mnr=r(a$e," (ELECTRA model)"),a$e.forEach(t),gnr=i(D),q0=n(D,"LI",{});var n$e=s(q0);W_e=n(n$e,"STRONG",{});var _ut=s(W_e);hnr=r(_ut,"flaubert"),_ut.forEach(t),pnr=r(n$e," \u2014 "),mz=n(n$e,"A",{href:!0});var but=s(mz);unr=r(but,"TFFlaubertModel"),but.forEach(t),_nr=r(n$e," (FlauBERT model)"),n$e.forEach(t),bnr=i(D),Ps=n(D,"LI",{});var d$=s(Ps);H_e=n(d$,"STRONG",{});var vut=s(H_e);vnr=r(vut,"funnel"),vut.forEach(t),Fnr=r(d$," \u2014 "),gz=n(d$,"A",{href:!0});var Fut=s(gz);Tnr=r(Fut,"TFFunnelModel"),Fut.forEach(t),Mnr=r(d$," or "),hz=n(d$,"A",{href:!0});var Tut=s(hz);Enr=r(Tut,"TFFunnelBaseModel"),Tut.forEach(t),Cnr=r(d$," (Funnel Transformer model)"),d$.forEach(t),wnr=i(D),N0=n(D,"LI",{});var s$e=s(N0);U_e=n(s$e,"STRONG",{});var Mut=s(U_e);Anr=r(Mut,"gpt2"),Mut.forEach(t),ynr=r(s$e," \u2014 "),pz=n(s$e,"A",{href:!0});var Eut=s(pz);Lnr=r(Eut,"TFGPT2Model"),Eut.forEach(t),xnr=r(s$e," (OpenAI GPT-2 model)"),s$e.forEach(t),$nr=i(D),j0=n(D,"LI",{});var l$e=s(j0);J_e=n(l$e,"STRONG",{});var Cut=s(J_e);knr=r(Cut,"gptj"),Cut.forEach(t),Snr=r(l$e," \u2014 "),uz=n(l$e,"A",{href:!0});var wut=s(uz);Rnr=r(wut,"TFGPTJModel"),wut.forEach(t),Bnr=r(l$e," (GPT-J model)"),l$e.forEach(t),Pnr=i(D),D0=n(D,"LI",{});var i$e=s(D0);Y_e=n(i$e,"STRONG",{});var Aut=s(Y_e);Inr=r(Aut,"hubert"),Aut.forEach(t),qnr=r(i$e," \u2014 "),_z=n(i$e,"A",{href:!0});var yut=s(_z);Nnr=r(yut,"TFHubertModel"),yut.forEach(t),jnr=r(i$e," (Hubert model)"),i$e.forEach(t),Dnr=i(D),G0=n(D,"LI",{});var d$e=s(G0);K_e=n(d$e,"STRONG",{});var Lut=s(K_e);Gnr=r(Lut,"layoutlm"),Lut.forEach(t),Onr=r(d$e," \u2014 "),bz=n(d$e,"A",{href:!0});var xut=s(bz);Vnr=r(xut,"TFLayoutLMModel"),xut.forEach(t),Xnr=r(d$e," (LayoutLM model)"),d$e.forEach(t),znr=i(D),O0=n(D,"LI",{});var c$e=s(O0);Z_e=n(c$e,"STRONG",{});var $ut=s(Z_e);Qnr=r($ut,"led"),$ut.forEach(t),Wnr=r(c$e," \u2014 "),vz=n(c$e,"A",{href:!0});var kut=s(vz);Hnr=r(kut,"TFLEDModel"),kut.forEach(t),Unr=r(c$e," (LED model)"),c$e.forEach(t),Jnr=i(D),V0=n(D,"LI",{});var f$e=s(V0);e1e=n(f$e,"STRONG",{});var Sut=s(e1e);Ynr=r(Sut,"longformer"),Sut.forEach(t),Knr=r(f$e," \u2014 "),Fz=n(f$e,"A",{href:!0});var Rut=s(Fz);Znr=r(Rut,"TFLongformerModel"),Rut.forEach(t),esr=r(f$e," (Longformer model)"),f$e.forEach(t),osr=i(D),X0=n(D,"LI",{});var m$e=s(X0);o1e=n(m$e,"STRONG",{});var But=s(o1e);rsr=r(But,"lxmert"),But.forEach(t),tsr=r(m$e," \u2014 "),Tz=n(m$e,"A",{href:!0});var Put=s(Tz);asr=r(Put,"TFLxmertModel"),Put.forEach(t),nsr=r(m$e," (LXMERT model)"),m$e.forEach(t),ssr=i(D),z0=n(D,"LI",{});var g$e=s(z0);r1e=n(g$e,"STRONG",{});var Iut=s(r1e);lsr=r(Iut,"marian"),Iut.forEach(t),isr=r(g$e," \u2014 "),Mz=n(g$e,"A",{href:!0});var qut=s(Mz);dsr=r(qut,"TFMarianModel"),qut.forEach(t),csr=r(g$e," (Marian model)"),g$e.forEach(t),fsr=i(D),Q0=n(D,"LI",{});var h$e=s(Q0);t1e=n(h$e,"STRONG",{});var Nut=s(t1e);msr=r(Nut,"mbart"),Nut.forEach(t),gsr=r(h$e," \u2014 "),Ez=n(h$e,"A",{href:!0});var jut=s(Ez);hsr=r(jut,"TFMBartModel"),jut.forEach(t),psr=r(h$e," (mBART model)"),h$e.forEach(t),usr=i(D),W0=n(D,"LI",{});var p$e=s(W0);a1e=n(p$e,"STRONG",{});var Dut=s(a1e);_sr=r(Dut,"mobilebert"),Dut.forEach(t),bsr=r(p$e," \u2014 "),Cz=n(p$e,"A",{href:!0});var Gut=s(Cz);vsr=r(Gut,"TFMobileBertModel"),Gut.forEach(t),Fsr=r(p$e," (MobileBERT model)"),p$e.forEach(t),Tsr=i(D),H0=n(D,"LI",{});var u$e=s(H0);n1e=n(u$e,"STRONG",{});var Out=s(n1e);Msr=r(Out,"mpnet"),Out.forEach(t),Esr=r(u$e," \u2014 "),wz=n(u$e,"A",{href:!0});var Vut=s(wz);Csr=r(Vut,"TFMPNetModel"),Vut.forEach(t),wsr=r(u$e," (MPNet model)"),u$e.forEach(t),Asr=i(D),U0=n(D,"LI",{});var _$e=s(U0);s1e=n(_$e,"STRONG",{});var Xut=s(s1e);ysr=r(Xut,"mt5"),Xut.forEach(t),Lsr=r(_$e," \u2014 "),Az=n(_$e,"A",{href:!0});var zut=s(Az);xsr=r(zut,"TFMT5Model"),zut.forEach(t),$sr=r(_$e," (mT5 model)"),_$e.forEach(t),ksr=i(D),J0=n(D,"LI",{});var b$e=s(J0);l1e=n(b$e,"STRONG",{});var Qut=s(l1e);Ssr=r(Qut,"openai-gpt"),Qut.forEach(t),Rsr=r(b$e," \u2014 "),yz=n(b$e,"A",{href:!0});var Wut=s(yz);Bsr=r(Wut,"TFOpenAIGPTModel"),Wut.forEach(t),Psr=r(b$e," (OpenAI GPT model)"),b$e.forEach(t),Isr=i(D),Y0=n(D,"LI",{});var v$e=s(Y0);i1e=n(v$e,"STRONG",{});var Hut=s(i1e);qsr=r(Hut,"pegasus"),Hut.forEach(t),Nsr=r(v$e," \u2014 "),Lz=n(v$e,"A",{href:!0});var Uut=s(Lz);jsr=r(Uut,"TFPegasusModel"),Uut.forEach(t),Dsr=r(v$e," (Pegasus model)"),v$e.forEach(t),Gsr=i(D),K0=n(D,"LI",{});var F$e=s(K0);d1e=n(F$e,"STRONG",{});var Jut=s(d1e);Osr=r(Jut,"rembert"),Jut.forEach(t),Vsr=r(F$e," \u2014 "),xz=n(F$e,"A",{href:!0});var Yut=s(xz);Xsr=r(Yut,"TFRemBertModel"),Yut.forEach(t),zsr=r(F$e," (RemBERT model)"),F$e.forEach(t),Qsr=i(D),Z0=n(D,"LI",{});var T$e=s(Z0);c1e=n(T$e,"STRONG",{});var Kut=s(c1e);Wsr=r(Kut,"roberta"),Kut.forEach(t),Hsr=r(T$e," \u2014 "),$z=n(T$e,"A",{href:!0});var Zut=s($z);Usr=r(Zut,"TFRobertaModel"),Zut.forEach(t),Jsr=r(T$e," (RoBERTa model)"),T$e.forEach(t),Ysr=i(D),eT=n(D,"LI",{});var M$e=s(eT);f1e=n(M$e,"STRONG",{});var e_t=s(f1e);Ksr=r(e_t,"roformer"),e_t.forEach(t),Zsr=r(M$e," \u2014 "),kz=n(M$e,"A",{href:!0});var o_t=s(kz);elr=r(o_t,"TFRoFormerModel"),o_t.forEach(t),olr=r(M$e," (RoFormer model)"),M$e.forEach(t),rlr=i(D),oT=n(D,"LI",{});var E$e=s(oT);m1e=n(E$e,"STRONG",{});var r_t=s(m1e);tlr=r(r_t,"speech_to_text"),r_t.forEach(t),alr=r(E$e," \u2014 "),Sz=n(E$e,"A",{href:!0});var t_t=s(Sz);nlr=r(t_t,"TFSpeech2TextModel"),t_t.forEach(t),slr=r(E$e," (Speech2Text model)"),E$e.forEach(t),llr=i(D),rT=n(D,"LI",{});var C$e=s(rT);g1e=n(C$e,"STRONG",{});var a_t=s(g1e);ilr=r(a_t,"t5"),a_t.forEach(t),dlr=r(C$e," \u2014 "),Rz=n(C$e,"A",{href:!0});var n_t=s(Rz);clr=r(n_t,"TFT5Model"),n_t.forEach(t),flr=r(C$e," (T5 model)"),C$e.forEach(t),mlr=i(D),tT=n(D,"LI",{});var w$e=s(tT);h1e=n(w$e,"STRONG",{});var s_t=s(h1e);glr=r(s_t,"tapas"),s_t.forEach(t),hlr=r(w$e," \u2014 "),Bz=n(w$e,"A",{href:!0});var l_t=s(Bz);plr=r(l_t,"TFTapasModel"),l_t.forEach(t),ulr=r(w$e," (TAPAS model)"),w$e.forEach(t),_lr=i(D),aT=n(D,"LI",{});var A$e=s(aT);p1e=n(A$e,"STRONG",{});var i_t=s(p1e);blr=r(i_t,"transfo-xl"),i_t.forEach(t),vlr=r(A$e," \u2014 "),Pz=n(A$e,"A",{href:!0});var d_t=s(Pz);Flr=r(d_t,"TFTransfoXLModel"),d_t.forEach(t),Tlr=r(A$e," (Transformer-XL model)"),A$e.forEach(t),Mlr=i(D),nT=n(D,"LI",{});var y$e=s(nT);u1e=n(y$e,"STRONG",{});var c_t=s(u1e);Elr=r(c_t,"vit"),c_t.forEach(t),Clr=r(y$e," \u2014 "),Iz=n(y$e,"A",{href:!0});var f_t=s(Iz);wlr=r(f_t,"TFViTModel"),f_t.forEach(t),Alr=r(y$e," (ViT model)"),y$e.forEach(t),ylr=i(D),sT=n(D,"LI",{});var L$e=s(sT);_1e=n(L$e,"STRONG",{});var m_t=s(_1e);Llr=r(m_t,"vit_mae"),m_t.forEach(t),xlr=r(L$e," \u2014 "),qz=n(L$e,"A",{href:!0});var g_t=s(qz);$lr=r(g_t,"TFViTMAEModel"),g_t.forEach(t),klr=r(L$e," (ViTMAE model)"),L$e.forEach(t),Slr=i(D),lT=n(D,"LI",{});var x$e=s(lT);b1e=n(x$e,"STRONG",{});var h_t=s(b1e);Rlr=r(h_t,"wav2vec2"),h_t.forEach(t),Blr=r(x$e," \u2014 "),Nz=n(x$e,"A",{href:!0});var p_t=s(Nz);Plr=r(p_t,"TFWav2Vec2Model"),p_t.forEach(t),Ilr=r(x$e," (Wav2Vec2 model)"),x$e.forEach(t),qlr=i(D),iT=n(D,"LI",{});var $$e=s(iT);v1e=n($$e,"STRONG",{});var u_t=s(v1e);Nlr=r(u_t,"xlm"),u_t.forEach(t),jlr=r($$e," \u2014 "),jz=n($$e,"A",{href:!0});var __t=s(jz);Dlr=r(__t,"TFXLMModel"),__t.forEach(t),Glr=r($$e," (XLM model)"),$$e.forEach(t),Olr=i(D),dT=n(D,"LI",{});var k$e=s(dT);F1e=n(k$e,"STRONG",{});var b_t=s(F1e);Vlr=r(b_t,"xlm-roberta"),b_t.forEach(t),Xlr=r(k$e," \u2014 "),Dz=n(k$e,"A",{href:!0});var v_t=s(Dz);zlr=r(v_t,"TFXLMRobertaModel"),v_t.forEach(t),Qlr=r(k$e," (XLM-RoBERTa model)"),k$e.forEach(t),Wlr=i(D),cT=n(D,"LI",{});var S$e=s(cT);T1e=n(S$e,"STRONG",{});var F_t=s(T1e);Hlr=r(F_t,"xlnet"),F_t.forEach(t),Ulr=r(S$e," \u2014 "),Gz=n(S$e,"A",{href:!0});var T_t=s(Gz);Jlr=r(T_t,"TFXLNetModel"),T_t.forEach(t),Ylr=r(S$e," (XLNet model)"),S$e.forEach(t),D.forEach(t),Klr=i(fl),T(fT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),kIe=i(f),Gd=n(f,"H2",{class:!0});var qNe=s(Gd);mT=n(qNe,"A",{id:!0,class:!0,href:!0});var M_t=s(mT);M1e=n(M_t,"SPAN",{});var E_t=s(M1e);T(Sy.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),Zlr=i(qNe),E1e=n(qNe,"SPAN",{});var C_t=s(E1e);eir=r(C_t,"TFAutoModelForPreTraining"),C_t.forEach(t),qNe.forEach(t),SIe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(Ry.$$.fragment,ml),oir=i(ml),Od=n(ml,"P",{});var JK=s(Od);rir=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oz=n(JK,"A",{href:!0});var w_t=s(Oz);tir=r(w_t,"from_pretrained()"),w_t.forEach(t),air=r(JK," class method or the "),Vz=n(JK,"A",{href:!0});var A_t=s(Vz);nir=r(A_t,"from_config()"),A_t.forEach(t),sir=r(JK,` class
method.`),JK.forEach(t),lir=i(ml),By=n(ml,"P",{});var NNe=s(By);iir=r(NNe,"This class cannot be instantiated directly using "),C1e=n(NNe,"CODE",{});var y_t=s(C1e);dir=r(y_t,"__init__()"),y_t.forEach(t),cir=r(NNe," (throws an error)."),NNe.forEach(t),fir=i(ml),At=n(ml,"DIV",{class:!0});var Q3=s(At);T(Py.$$.fragment,Q3),mir=i(Q3),w1e=n(Q3,"P",{});var L_t=s(w1e);gir=r(L_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L_t.forEach(t),hir=i(Q3),Vd=n(Q3,"P",{});var YK=s(Vd);pir=r(YK,`Note:
Loading a model from its configuration file does `),A1e=n(YK,"STRONG",{});var x_t=s(A1e);uir=r(x_t,"not"),x_t.forEach(t),_ir=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(YK,"A",{href:!0});var $_t=s(Xz);bir=r($_t,"from_pretrained()"),$_t.forEach(t),vir=r(YK," to load the model weights."),YK.forEach(t),Fir=i(Q3),T(gT.$$.fragment,Q3),Q3.forEach(t),Tir=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(Iy.$$.fragment,gl),Mir=i(gl),y1e=n(gl,"P",{});var k_t=s(y1e);Eir=r(k_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),k_t.forEach(t),Cir=i(gl),Za=n(gl,"P",{});var W3=s(Za);wir=r(W3,"The model class to instantiate is selected based on the "),L1e=n(W3,"CODE",{});var S_t=s(L1e);Air=r(S_t,"model_type"),S_t.forEach(t),yir=r(W3,` property of the config object (either
passed as an argument or loaded from `),x1e=n(W3,"CODE",{});var R_t=s(x1e);Lir=r(R_t,"pretrained_model_name_or_path"),R_t.forEach(t),xir=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(W3,"CODE",{});var B_t=s($1e);$ir=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),kir=r(W3,":"),W3.forEach(t),Sir=i(gl),ne=n(gl,"UL",{});var le=s(ne);hT=n(le,"LI",{});var R$e=s(hT);k1e=n(R$e,"STRONG",{});var P_t=s(k1e);Rir=r(P_t,"albert"),P_t.forEach(t),Bir=r(R$e," \u2014 "),zz=n(R$e,"A",{href:!0});var I_t=s(zz);Pir=r(I_t,"TFAlbertForPreTraining"),I_t.forEach(t),Iir=r(R$e," (ALBERT model)"),R$e.forEach(t),qir=i(le),pT=n(le,"LI",{});var B$e=s(pT);S1e=n(B$e,"STRONG",{});var q_t=s(S1e);Nir=r(q_t,"bart"),q_t.forEach(t),jir=r(B$e," \u2014 "),Qz=n(B$e,"A",{href:!0});var N_t=s(Qz);Dir=r(N_t,"TFBartForConditionalGeneration"),N_t.forEach(t),Gir=r(B$e," (BART model)"),B$e.forEach(t),Oir=i(le),uT=n(le,"LI",{});var P$e=s(uT);R1e=n(P$e,"STRONG",{});var j_t=s(R1e);Vir=r(j_t,"bert"),j_t.forEach(t),Xir=r(P$e," \u2014 "),Wz=n(P$e,"A",{href:!0});var D_t=s(Wz);zir=r(D_t,"TFBertForPreTraining"),D_t.forEach(t),Qir=r(P$e," (BERT model)"),P$e.forEach(t),Wir=i(le),_T=n(le,"LI",{});var I$e=s(_T);B1e=n(I$e,"STRONG",{});var G_t=s(B1e);Hir=r(G_t,"camembert"),G_t.forEach(t),Uir=r(I$e," \u2014 "),Hz=n(I$e,"A",{href:!0});var O_t=s(Hz);Jir=r(O_t,"TFCamembertForMaskedLM"),O_t.forEach(t),Yir=r(I$e," (CamemBERT model)"),I$e.forEach(t),Kir=i(le),bT=n(le,"LI",{});var q$e=s(bT);P1e=n(q$e,"STRONG",{});var V_t=s(P1e);Zir=r(V_t,"ctrl"),V_t.forEach(t),edr=r(q$e," \u2014 "),Uz=n(q$e,"A",{href:!0});var X_t=s(Uz);odr=r(X_t,"TFCTRLLMHeadModel"),X_t.forEach(t),rdr=r(q$e," (CTRL model)"),q$e.forEach(t),tdr=i(le),vT=n(le,"LI",{});var N$e=s(vT);I1e=n(N$e,"STRONG",{});var z_t=s(I1e);adr=r(z_t,"distilbert"),z_t.forEach(t),ndr=r(N$e," \u2014 "),Jz=n(N$e,"A",{href:!0});var Q_t=s(Jz);sdr=r(Q_t,"TFDistilBertForMaskedLM"),Q_t.forEach(t),ldr=r(N$e," (DistilBERT model)"),N$e.forEach(t),idr=i(le),FT=n(le,"LI",{});var j$e=s(FT);q1e=n(j$e,"STRONG",{});var W_t=s(q1e);ddr=r(W_t,"electra"),W_t.forEach(t),cdr=r(j$e," \u2014 "),Yz=n(j$e,"A",{href:!0});var H_t=s(Yz);fdr=r(H_t,"TFElectraForPreTraining"),H_t.forEach(t),mdr=r(j$e," (ELECTRA model)"),j$e.forEach(t),gdr=i(le),TT=n(le,"LI",{});var D$e=s(TT);N1e=n(D$e,"STRONG",{});var U_t=s(N1e);hdr=r(U_t,"flaubert"),U_t.forEach(t),pdr=r(D$e," \u2014 "),Kz=n(D$e,"A",{href:!0});var J_t=s(Kz);udr=r(J_t,"TFFlaubertWithLMHeadModel"),J_t.forEach(t),_dr=r(D$e," (FlauBERT model)"),D$e.forEach(t),bdr=i(le),MT=n(le,"LI",{});var G$e=s(MT);j1e=n(G$e,"STRONG",{});var Y_t=s(j1e);vdr=r(Y_t,"funnel"),Y_t.forEach(t),Fdr=r(G$e," \u2014 "),Zz=n(G$e,"A",{href:!0});var K_t=s(Zz);Tdr=r(K_t,"TFFunnelForPreTraining"),K_t.forEach(t),Mdr=r(G$e," (Funnel Transformer model)"),G$e.forEach(t),Edr=i(le),ET=n(le,"LI",{});var O$e=s(ET);D1e=n(O$e,"STRONG",{});var Z_t=s(D1e);Cdr=r(Z_t,"gpt2"),Z_t.forEach(t),wdr=r(O$e," \u2014 "),eQ=n(O$e,"A",{href:!0});var e1t=s(eQ);Adr=r(e1t,"TFGPT2LMHeadModel"),e1t.forEach(t),ydr=r(O$e," (OpenAI GPT-2 model)"),O$e.forEach(t),Ldr=i(le),CT=n(le,"LI",{});var V$e=s(CT);G1e=n(V$e,"STRONG",{});var o1t=s(G1e);xdr=r(o1t,"layoutlm"),o1t.forEach(t),$dr=r(V$e," \u2014 "),oQ=n(V$e,"A",{href:!0});var r1t=s(oQ);kdr=r(r1t,"TFLayoutLMForMaskedLM"),r1t.forEach(t),Sdr=r(V$e," (LayoutLM model)"),V$e.forEach(t),Rdr=i(le),wT=n(le,"LI",{});var X$e=s(wT);O1e=n(X$e,"STRONG",{});var t1t=s(O1e);Bdr=r(t1t,"lxmert"),t1t.forEach(t),Pdr=r(X$e," \u2014 "),rQ=n(X$e,"A",{href:!0});var a1t=s(rQ);Idr=r(a1t,"TFLxmertForPreTraining"),a1t.forEach(t),qdr=r(X$e," (LXMERT model)"),X$e.forEach(t),Ndr=i(le),AT=n(le,"LI",{});var z$e=s(AT);V1e=n(z$e,"STRONG",{});var n1t=s(V1e);jdr=r(n1t,"mobilebert"),n1t.forEach(t),Ddr=r(z$e," \u2014 "),tQ=n(z$e,"A",{href:!0});var s1t=s(tQ);Gdr=r(s1t,"TFMobileBertForPreTraining"),s1t.forEach(t),Odr=r(z$e," (MobileBERT model)"),z$e.forEach(t),Vdr=i(le),yT=n(le,"LI",{});var Q$e=s(yT);X1e=n(Q$e,"STRONG",{});var l1t=s(X1e);Xdr=r(l1t,"mpnet"),l1t.forEach(t),zdr=r(Q$e," \u2014 "),aQ=n(Q$e,"A",{href:!0});var i1t=s(aQ);Qdr=r(i1t,"TFMPNetForMaskedLM"),i1t.forEach(t),Wdr=r(Q$e," (MPNet model)"),Q$e.forEach(t),Hdr=i(le),LT=n(le,"LI",{});var W$e=s(LT);z1e=n(W$e,"STRONG",{});var d1t=s(z1e);Udr=r(d1t,"openai-gpt"),d1t.forEach(t),Jdr=r(W$e," \u2014 "),nQ=n(W$e,"A",{href:!0});var c1t=s(nQ);Ydr=r(c1t,"TFOpenAIGPTLMHeadModel"),c1t.forEach(t),Kdr=r(W$e," (OpenAI GPT model)"),W$e.forEach(t),Zdr=i(le),xT=n(le,"LI",{});var H$e=s(xT);Q1e=n(H$e,"STRONG",{});var f1t=s(Q1e);ecr=r(f1t,"roberta"),f1t.forEach(t),ocr=r(H$e," \u2014 "),sQ=n(H$e,"A",{href:!0});var m1t=s(sQ);rcr=r(m1t,"TFRobertaForMaskedLM"),m1t.forEach(t),tcr=r(H$e," (RoBERTa model)"),H$e.forEach(t),acr=i(le),$T=n(le,"LI",{});var U$e=s($T);W1e=n(U$e,"STRONG",{});var g1t=s(W1e);ncr=r(g1t,"t5"),g1t.forEach(t),scr=r(U$e," \u2014 "),lQ=n(U$e,"A",{href:!0});var h1t=s(lQ);lcr=r(h1t,"TFT5ForConditionalGeneration"),h1t.forEach(t),icr=r(U$e," (T5 model)"),U$e.forEach(t),dcr=i(le),kT=n(le,"LI",{});var J$e=s(kT);H1e=n(J$e,"STRONG",{});var p1t=s(H1e);ccr=r(p1t,"tapas"),p1t.forEach(t),fcr=r(J$e," \u2014 "),iQ=n(J$e,"A",{href:!0});var u1t=s(iQ);mcr=r(u1t,"TFTapasForMaskedLM"),u1t.forEach(t),gcr=r(J$e," (TAPAS model)"),J$e.forEach(t),hcr=i(le),ST=n(le,"LI",{});var Y$e=s(ST);U1e=n(Y$e,"STRONG",{});var _1t=s(U1e);pcr=r(_1t,"transfo-xl"),_1t.forEach(t),ucr=r(Y$e," \u2014 "),dQ=n(Y$e,"A",{href:!0});var b1t=s(dQ);_cr=r(b1t,"TFTransfoXLLMHeadModel"),b1t.forEach(t),bcr=r(Y$e," (Transformer-XL model)"),Y$e.forEach(t),vcr=i(le),RT=n(le,"LI",{});var K$e=s(RT);J1e=n(K$e,"STRONG",{});var v1t=s(J1e);Fcr=r(v1t,"vit_mae"),v1t.forEach(t),Tcr=r(K$e," \u2014 "),cQ=n(K$e,"A",{href:!0});var F1t=s(cQ);Mcr=r(F1t,"TFViTMAEForPreTraining"),F1t.forEach(t),Ecr=r(K$e," (ViTMAE model)"),K$e.forEach(t),Ccr=i(le),BT=n(le,"LI",{});var Z$e=s(BT);Y1e=n(Z$e,"STRONG",{});var T1t=s(Y1e);wcr=r(T1t,"xlm"),T1t.forEach(t),Acr=r(Z$e," \u2014 "),fQ=n(Z$e,"A",{href:!0});var M1t=s(fQ);ycr=r(M1t,"TFXLMWithLMHeadModel"),M1t.forEach(t),Lcr=r(Z$e," (XLM model)"),Z$e.forEach(t),xcr=i(le),PT=n(le,"LI",{});var eke=s(PT);K1e=n(eke,"STRONG",{});var E1t=s(K1e);$cr=r(E1t,"xlm-roberta"),E1t.forEach(t),kcr=r(eke," \u2014 "),mQ=n(eke,"A",{href:!0});var C1t=s(mQ);Scr=r(C1t,"TFXLMRobertaForMaskedLM"),C1t.forEach(t),Rcr=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),Bcr=i(le),IT=n(le,"LI",{});var oke=s(IT);Z1e=n(oke,"STRONG",{});var w1t=s(Z1e);Pcr=r(w1t,"xlnet"),w1t.forEach(t),Icr=r(oke," \u2014 "),gQ=n(oke,"A",{href:!0});var A1t=s(gQ);qcr=r(A1t,"TFXLNetLMHeadModel"),A1t.forEach(t),Ncr=r(oke," (XLNet model)"),oke.forEach(t),le.forEach(t),jcr=i(gl),T(qT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),RIe=i(f),Xd=n(f,"H2",{class:!0});var jNe=s(Xd);NT=n(jNe,"A",{id:!0,class:!0,href:!0});var y1t=s(NT);e8e=n(y1t,"SPAN",{});var L1t=s(e8e);T(qy.$$.fragment,L1t),L1t.forEach(t),y1t.forEach(t),Dcr=i(jNe),o8e=n(jNe,"SPAN",{});var x1t=s(o8e);Gcr=r(x1t,"TFAutoModelForCausalLM"),x1t.forEach(t),jNe.forEach(t),BIe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(Ny.$$.fragment,hl),Ocr=i(hl),zd=n(hl,"P",{});var KK=s(zd);Vcr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hQ=n(KK,"A",{href:!0});var $1t=s(hQ);Xcr=r($1t,"from_pretrained()"),$1t.forEach(t),zcr=r(KK," class method or the "),pQ=n(KK,"A",{href:!0});var k1t=s(pQ);Qcr=r(k1t,"from_config()"),k1t.forEach(t),Wcr=r(KK,` class
method.`),KK.forEach(t),Hcr=i(hl),jy=n(hl,"P",{});var DNe=s(jy);Ucr=r(DNe,"This class cannot be instantiated directly using "),r8e=n(DNe,"CODE",{});var S1t=s(r8e);Jcr=r(S1t,"__init__()"),S1t.forEach(t),Ycr=r(DNe," (throws an error)."),DNe.forEach(t),Kcr=i(hl),yt=n(hl,"DIV",{class:!0});var H3=s(yt);T(Dy.$$.fragment,H3),Zcr=i(H3),t8e=n(H3,"P",{});var R1t=s(t8e);efr=r(R1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R1t.forEach(t),ofr=i(H3),Qd=n(H3,"P",{});var ZK=s(Qd);rfr=r(ZK,`Note:
Loading a model from its configuration file does `),a8e=n(ZK,"STRONG",{});var B1t=s(a8e);tfr=r(B1t,"not"),B1t.forEach(t),afr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(ZK,"A",{href:!0});var P1t=s(uQ);nfr=r(P1t,"from_pretrained()"),P1t.forEach(t),sfr=r(ZK," to load the model weights."),ZK.forEach(t),lfr=i(H3),T(jT.$$.fragment,H3),H3.forEach(t),ifr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(Gy.$$.fragment,pl),dfr=i(pl),n8e=n(pl,"P",{});var I1t=s(n8e);cfr=r(I1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),I1t.forEach(t),ffr=i(pl),en=n(pl,"P",{});var U3=s(en);mfr=r(U3,"The model class to instantiate is selected based on the "),s8e=n(U3,"CODE",{});var q1t=s(s8e);gfr=r(q1t,"model_type"),q1t.forEach(t),hfr=r(U3,` property of the config object (either
passed as an argument or loaded from `),l8e=n(U3,"CODE",{});var N1t=s(l8e);pfr=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),ufr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=n(U3,"CODE",{});var j1t=s(i8e);_fr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),bfr=r(U3,":"),U3.forEach(t),vfr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);DT=n(Ce,"LI",{});var rke=s(DT);d8e=n(rke,"STRONG",{});var D1t=s(d8e);Ffr=r(D1t,"bert"),D1t.forEach(t),Tfr=r(rke," \u2014 "),_Q=n(rke,"A",{href:!0});var G1t=s(_Q);Mfr=r(G1t,"TFBertLMHeadModel"),G1t.forEach(t),Efr=r(rke," (BERT model)"),rke.forEach(t),Cfr=i(Ce),GT=n(Ce,"LI",{});var tke=s(GT);c8e=n(tke,"STRONG",{});var O1t=s(c8e);wfr=r(O1t,"camembert"),O1t.forEach(t),Afr=r(tke," \u2014 "),bQ=n(tke,"A",{href:!0});var V1t=s(bQ);yfr=r(V1t,"TFCamembertForCausalLM"),V1t.forEach(t),Lfr=r(tke," (CamemBERT model)"),tke.forEach(t),xfr=i(Ce),OT=n(Ce,"LI",{});var ake=s(OT);f8e=n(ake,"STRONG",{});var X1t=s(f8e);$fr=r(X1t,"ctrl"),X1t.forEach(t),kfr=r(ake," \u2014 "),vQ=n(ake,"A",{href:!0});var z1t=s(vQ);Sfr=r(z1t,"TFCTRLLMHeadModel"),z1t.forEach(t),Rfr=r(ake," (CTRL model)"),ake.forEach(t),Bfr=i(Ce),VT=n(Ce,"LI",{});var nke=s(VT);m8e=n(nke,"STRONG",{});var Q1t=s(m8e);Pfr=r(Q1t,"gpt2"),Q1t.forEach(t),Ifr=r(nke," \u2014 "),FQ=n(nke,"A",{href:!0});var W1t=s(FQ);qfr=r(W1t,"TFGPT2LMHeadModel"),W1t.forEach(t),Nfr=r(nke," (OpenAI GPT-2 model)"),nke.forEach(t),jfr=i(Ce),XT=n(Ce,"LI",{});var ske=s(XT);g8e=n(ske,"STRONG",{});var H1t=s(g8e);Dfr=r(H1t,"gptj"),H1t.forEach(t),Gfr=r(ske," \u2014 "),TQ=n(ske,"A",{href:!0});var U1t=s(TQ);Ofr=r(U1t,"TFGPTJForCausalLM"),U1t.forEach(t),Vfr=r(ske," (GPT-J model)"),ske.forEach(t),Xfr=i(Ce),zT=n(Ce,"LI",{});var lke=s(zT);h8e=n(lke,"STRONG",{});var J1t=s(h8e);zfr=r(J1t,"openai-gpt"),J1t.forEach(t),Qfr=r(lke," \u2014 "),MQ=n(lke,"A",{href:!0});var Y1t=s(MQ);Wfr=r(Y1t,"TFOpenAIGPTLMHeadModel"),Y1t.forEach(t),Hfr=r(lke," (OpenAI GPT model)"),lke.forEach(t),Ufr=i(Ce),QT=n(Ce,"LI",{});var ike=s(QT);p8e=n(ike,"STRONG",{});var K1t=s(p8e);Jfr=r(K1t,"rembert"),K1t.forEach(t),Yfr=r(ike," \u2014 "),EQ=n(ike,"A",{href:!0});var Z1t=s(EQ);Kfr=r(Z1t,"TFRemBertForCausalLM"),Z1t.forEach(t),Zfr=r(ike," (RemBERT model)"),ike.forEach(t),emr=i(Ce),WT=n(Ce,"LI",{});var dke=s(WT);u8e=n(dke,"STRONG",{});var e8t=s(u8e);omr=r(e8t,"roberta"),e8t.forEach(t),rmr=r(dke," \u2014 "),CQ=n(dke,"A",{href:!0});var o8t=s(CQ);tmr=r(o8t,"TFRobertaForCausalLM"),o8t.forEach(t),amr=r(dke," (RoBERTa model)"),dke.forEach(t),nmr=i(Ce),HT=n(Ce,"LI",{});var cke=s(HT);_8e=n(cke,"STRONG",{});var r8t=s(_8e);smr=r(r8t,"roformer"),r8t.forEach(t),lmr=r(cke," \u2014 "),wQ=n(cke,"A",{href:!0});var t8t=s(wQ);imr=r(t8t,"TFRoFormerForCausalLM"),t8t.forEach(t),dmr=r(cke," (RoFormer model)"),cke.forEach(t),cmr=i(Ce),UT=n(Ce,"LI",{});var fke=s(UT);b8e=n(fke,"STRONG",{});var a8t=s(b8e);fmr=r(a8t,"transfo-xl"),a8t.forEach(t),mmr=r(fke," \u2014 "),AQ=n(fke,"A",{href:!0});var n8t=s(AQ);gmr=r(n8t,"TFTransfoXLLMHeadModel"),n8t.forEach(t),hmr=r(fke," (Transformer-XL model)"),fke.forEach(t),pmr=i(Ce),JT=n(Ce,"LI",{});var mke=s(JT);v8e=n(mke,"STRONG",{});var s8t=s(v8e);umr=r(s8t,"xlm"),s8t.forEach(t),_mr=r(mke," \u2014 "),yQ=n(mke,"A",{href:!0});var l8t=s(yQ);bmr=r(l8t,"TFXLMWithLMHeadModel"),l8t.forEach(t),vmr=r(mke," (XLM model)"),mke.forEach(t),Fmr=i(Ce),YT=n(Ce,"LI",{});var gke=s(YT);F8e=n(gke,"STRONG",{});var i8t=s(F8e);Tmr=r(i8t,"xlnet"),i8t.forEach(t),Mmr=r(gke," \u2014 "),LQ=n(gke,"A",{href:!0});var d8t=s(LQ);Emr=r(d8t,"TFXLNetLMHeadModel"),d8t.forEach(t),Cmr=r(gke," (XLNet model)"),gke.forEach(t),Ce.forEach(t),wmr=i(pl),T(KT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),PIe=i(f),Wd=n(f,"H2",{class:!0});var GNe=s(Wd);ZT=n(GNe,"A",{id:!0,class:!0,href:!0});var c8t=s(ZT);T8e=n(c8t,"SPAN",{});var f8t=s(T8e);T(Oy.$$.fragment,f8t),f8t.forEach(t),c8t.forEach(t),Amr=i(GNe),M8e=n(GNe,"SPAN",{});var m8t=s(M8e);ymr=r(m8t,"TFAutoModelForImageClassification"),m8t.forEach(t),GNe.forEach(t),IIe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(Vy.$$.fragment,ul),Lmr=i(ul),Hd=n(ul,"P",{});var eZ=s(Hd);xmr=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xQ=n(eZ,"A",{href:!0});var g8t=s(xQ);$mr=r(g8t,"from_pretrained()"),g8t.forEach(t),kmr=r(eZ," class method or the "),$Q=n(eZ,"A",{href:!0});var h8t=s($Q);Smr=r(h8t,"from_config()"),h8t.forEach(t),Rmr=r(eZ,` class
method.`),eZ.forEach(t),Bmr=i(ul),Xy=n(ul,"P",{});var ONe=s(Xy);Pmr=r(ONe,"This class cannot be instantiated directly using "),E8e=n(ONe,"CODE",{});var p8t=s(E8e);Imr=r(p8t,"__init__()"),p8t.forEach(t),qmr=r(ONe," (throws an error)."),ONe.forEach(t),Nmr=i(ul),Lt=n(ul,"DIV",{class:!0});var J3=s(Lt);T(zy.$$.fragment,J3),jmr=i(J3),C8e=n(J3,"P",{});var u8t=s(C8e);Dmr=r(u8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),u8t.forEach(t),Gmr=i(J3),Ud=n(J3,"P",{});var oZ=s(Ud);Omr=r(oZ,`Note:
Loading a model from its configuration file does `),w8e=n(oZ,"STRONG",{});var _8t=s(w8e);Vmr=r(_8t,"not"),_8t.forEach(t),Xmr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(oZ,"A",{href:!0});var b8t=s(kQ);zmr=r(b8t,"from_pretrained()"),b8t.forEach(t),Qmr=r(oZ," to load the model weights."),oZ.forEach(t),Wmr=i(J3),T(e7.$$.fragment,J3),J3.forEach(t),Hmr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(Qy.$$.fragment,_l),Umr=i(_l),A8e=n(_l,"P",{});var v8t=s(A8e);Jmr=r(v8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),v8t.forEach(t),Ymr=i(_l),on=n(_l,"P",{});var Y3=s(on);Kmr=r(Y3,"The model class to instantiate is selected based on the "),y8e=n(Y3,"CODE",{});var F8t=s(y8e);Zmr=r(F8t,"model_type"),F8t.forEach(t),egr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),L8e=n(Y3,"CODE",{});var T8t=s(L8e);ogr=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),rgr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=n(Y3,"CODE",{});var M8t=s(x8e);tgr=r(M8t,"pretrained_model_name_or_path"),M8t.forEach(t),agr=r(Y3,":"),Y3.forEach(t),ngr=i(_l),Jd=n(_l,"UL",{});var rZ=s(Jd);o7=n(rZ,"LI",{});var hke=s(o7);$8e=n(hke,"STRONG",{});var E8t=s($8e);sgr=r(E8t,"convnext"),E8t.forEach(t),lgr=r(hke," \u2014 "),SQ=n(hke,"A",{href:!0});var C8t=s(SQ);igr=r(C8t,"TFConvNextForImageClassification"),C8t.forEach(t),dgr=r(hke," (ConvNext model)"),hke.forEach(t),cgr=i(rZ),r7=n(rZ,"LI",{});var pke=s(r7);k8e=n(pke,"STRONG",{});var w8t=s(k8e);fgr=r(w8t,"data2vec-vision"),w8t.forEach(t),mgr=r(pke," \u2014 "),RQ=n(pke,"A",{href:!0});var A8t=s(RQ);ggr=r(A8t,"TFData2VecVisionForImageClassification"),A8t.forEach(t),hgr=r(pke," (Data2VecVision model)"),pke.forEach(t),pgr=i(rZ),t7=n(rZ,"LI",{});var uke=s(t7);S8e=n(uke,"STRONG",{});var y8t=s(S8e);ugr=r(y8t,"vit"),y8t.forEach(t),_gr=r(uke," \u2014 "),BQ=n(uke,"A",{href:!0});var L8t=s(BQ);bgr=r(L8t,"TFViTForImageClassification"),L8t.forEach(t),vgr=r(uke," (ViT model)"),uke.forEach(t),rZ.forEach(t),Fgr=i(_l),T(a7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),qIe=i(f),Yd=n(f,"H2",{class:!0});var VNe=s(Yd);n7=n(VNe,"A",{id:!0,class:!0,href:!0});var x8t=s(n7);R8e=n(x8t,"SPAN",{});var $8t=s(R8e);T(Wy.$$.fragment,$8t),$8t.forEach(t),x8t.forEach(t),Tgr=i(VNe),B8e=n(VNe,"SPAN",{});var k8t=s(B8e);Mgr=r(k8t,"TFAutoModelForMaskedLM"),k8t.forEach(t),VNe.forEach(t),NIe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(Hy.$$.fragment,bl),Egr=i(bl),Kd=n(bl,"P",{});var tZ=s(Kd);Cgr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PQ=n(tZ,"A",{href:!0});var S8t=s(PQ);wgr=r(S8t,"from_pretrained()"),S8t.forEach(t),Agr=r(tZ," class method or the "),IQ=n(tZ,"A",{href:!0});var R8t=s(IQ);ygr=r(R8t,"from_config()"),R8t.forEach(t),Lgr=r(tZ,` class
method.`),tZ.forEach(t),xgr=i(bl),Uy=n(bl,"P",{});var XNe=s(Uy);$gr=r(XNe,"This class cannot be instantiated directly using "),P8e=n(XNe,"CODE",{});var B8t=s(P8e);kgr=r(B8t,"__init__()"),B8t.forEach(t),Sgr=r(XNe," (throws an error)."),XNe.forEach(t),Rgr=i(bl),xt=n(bl,"DIV",{class:!0});var K3=s(xt);T(Jy.$$.fragment,K3),Bgr=i(K3),I8e=n(K3,"P",{});var P8t=s(I8e);Pgr=r(P8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P8t.forEach(t),Igr=i(K3),Zd=n(K3,"P",{});var aZ=s(Zd);qgr=r(aZ,`Note:
Loading a model from its configuration file does `),q8e=n(aZ,"STRONG",{});var I8t=s(q8e);Ngr=r(I8t,"not"),I8t.forEach(t),jgr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(aZ,"A",{href:!0});var q8t=s(qQ);Dgr=r(q8t,"from_pretrained()"),q8t.forEach(t),Ggr=r(aZ," to load the model weights."),aZ.forEach(t),Ogr=i(K3),T(s7.$$.fragment,K3),K3.forEach(t),Vgr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(Yy.$$.fragment,vl),Xgr=i(vl),N8e=n(vl,"P",{});var N8t=s(N8e);zgr=r(N8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N8t.forEach(t),Qgr=i(vl),rn=n(vl,"P",{});var Z3=s(rn);Wgr=r(Z3,"The model class to instantiate is selected based on the "),j8e=n(Z3,"CODE",{});var j8t=s(j8e);Hgr=r(j8t,"model_type"),j8t.forEach(t),Ugr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),D8e=n(Z3,"CODE",{});var D8t=s(D8e);Jgr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),Ygr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=n(Z3,"CODE",{});var G8t=s(G8e);Kgr=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),Zgr=r(Z3,":"),Z3.forEach(t),ehr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);l7=n(fe,"LI",{});var _ke=s(l7);O8e=n(_ke,"STRONG",{});var O8t=s(O8e);ohr=r(O8t,"albert"),O8t.forEach(t),rhr=r(_ke," \u2014 "),NQ=n(_ke,"A",{href:!0});var V8t=s(NQ);thr=r(V8t,"TFAlbertForMaskedLM"),V8t.forEach(t),ahr=r(_ke," (ALBERT model)"),_ke.forEach(t),nhr=i(fe),i7=n(fe,"LI",{});var bke=s(i7);V8e=n(bke,"STRONG",{});var X8t=s(V8e);shr=r(X8t,"bert"),X8t.forEach(t),lhr=r(bke," \u2014 "),jQ=n(bke,"A",{href:!0});var z8t=s(jQ);ihr=r(z8t,"TFBertForMaskedLM"),z8t.forEach(t),dhr=r(bke," (BERT model)"),bke.forEach(t),chr=i(fe),d7=n(fe,"LI",{});var vke=s(d7);X8e=n(vke,"STRONG",{});var Q8t=s(X8e);fhr=r(Q8t,"camembert"),Q8t.forEach(t),mhr=r(vke," \u2014 "),DQ=n(vke,"A",{href:!0});var W8t=s(DQ);ghr=r(W8t,"TFCamembertForMaskedLM"),W8t.forEach(t),hhr=r(vke," (CamemBERT model)"),vke.forEach(t),phr=i(fe),c7=n(fe,"LI",{});var Fke=s(c7);z8e=n(Fke,"STRONG",{});var H8t=s(z8e);uhr=r(H8t,"convbert"),H8t.forEach(t),_hr=r(Fke," \u2014 "),GQ=n(Fke,"A",{href:!0});var U8t=s(GQ);bhr=r(U8t,"TFConvBertForMaskedLM"),U8t.forEach(t),vhr=r(Fke," (ConvBERT model)"),Fke.forEach(t),Fhr=i(fe),f7=n(fe,"LI",{});var Tke=s(f7);Q8e=n(Tke,"STRONG",{});var J8t=s(Q8e);Thr=r(J8t,"deberta"),J8t.forEach(t),Mhr=r(Tke," \u2014 "),OQ=n(Tke,"A",{href:!0});var Y8t=s(OQ);Ehr=r(Y8t,"TFDebertaForMaskedLM"),Y8t.forEach(t),Chr=r(Tke," (DeBERTa model)"),Tke.forEach(t),whr=i(fe),m7=n(fe,"LI",{});var Mke=s(m7);W8e=n(Mke,"STRONG",{});var K8t=s(W8e);Ahr=r(K8t,"deberta-v2"),K8t.forEach(t),yhr=r(Mke," \u2014 "),VQ=n(Mke,"A",{href:!0});var Z8t=s(VQ);Lhr=r(Z8t,"TFDebertaV2ForMaskedLM"),Z8t.forEach(t),xhr=r(Mke," (DeBERTa-v2 model)"),Mke.forEach(t),$hr=i(fe),g7=n(fe,"LI",{});var Eke=s(g7);H8e=n(Eke,"STRONG",{});var ebt=s(H8e);khr=r(ebt,"distilbert"),ebt.forEach(t),Shr=r(Eke," \u2014 "),XQ=n(Eke,"A",{href:!0});var obt=s(XQ);Rhr=r(obt,"TFDistilBertForMaskedLM"),obt.forEach(t),Bhr=r(Eke," (DistilBERT model)"),Eke.forEach(t),Phr=i(fe),h7=n(fe,"LI",{});var Cke=s(h7);U8e=n(Cke,"STRONG",{});var rbt=s(U8e);Ihr=r(rbt,"electra"),rbt.forEach(t),qhr=r(Cke," \u2014 "),zQ=n(Cke,"A",{href:!0});var tbt=s(zQ);Nhr=r(tbt,"TFElectraForMaskedLM"),tbt.forEach(t),jhr=r(Cke," (ELECTRA model)"),Cke.forEach(t),Dhr=i(fe),p7=n(fe,"LI",{});var wke=s(p7);J8e=n(wke,"STRONG",{});var abt=s(J8e);Ghr=r(abt,"flaubert"),abt.forEach(t),Ohr=r(wke," \u2014 "),QQ=n(wke,"A",{href:!0});var nbt=s(QQ);Vhr=r(nbt,"TFFlaubertWithLMHeadModel"),nbt.forEach(t),Xhr=r(wke," (FlauBERT model)"),wke.forEach(t),zhr=i(fe),u7=n(fe,"LI",{});var Ake=s(u7);Y8e=n(Ake,"STRONG",{});var sbt=s(Y8e);Qhr=r(sbt,"funnel"),sbt.forEach(t),Whr=r(Ake," \u2014 "),WQ=n(Ake,"A",{href:!0});var lbt=s(WQ);Hhr=r(lbt,"TFFunnelForMaskedLM"),lbt.forEach(t),Uhr=r(Ake," (Funnel Transformer model)"),Ake.forEach(t),Jhr=i(fe),_7=n(fe,"LI",{});var yke=s(_7);K8e=n(yke,"STRONG",{});var ibt=s(K8e);Yhr=r(ibt,"layoutlm"),ibt.forEach(t),Khr=r(yke," \u2014 "),HQ=n(yke,"A",{href:!0});var dbt=s(HQ);Zhr=r(dbt,"TFLayoutLMForMaskedLM"),dbt.forEach(t),epr=r(yke," (LayoutLM model)"),yke.forEach(t),opr=i(fe),b7=n(fe,"LI",{});var Lke=s(b7);Z8e=n(Lke,"STRONG",{});var cbt=s(Z8e);rpr=r(cbt,"longformer"),cbt.forEach(t),tpr=r(Lke," \u2014 "),UQ=n(Lke,"A",{href:!0});var fbt=s(UQ);apr=r(fbt,"TFLongformerForMaskedLM"),fbt.forEach(t),npr=r(Lke," (Longformer model)"),Lke.forEach(t),spr=i(fe),v7=n(fe,"LI",{});var xke=s(v7);ebe=n(xke,"STRONG",{});var mbt=s(ebe);lpr=r(mbt,"mobilebert"),mbt.forEach(t),ipr=r(xke," \u2014 "),JQ=n(xke,"A",{href:!0});var gbt=s(JQ);dpr=r(gbt,"TFMobileBertForMaskedLM"),gbt.forEach(t),cpr=r(xke," (MobileBERT model)"),xke.forEach(t),fpr=i(fe),F7=n(fe,"LI",{});var $ke=s(F7);obe=n($ke,"STRONG",{});var hbt=s(obe);mpr=r(hbt,"mpnet"),hbt.forEach(t),gpr=r($ke," \u2014 "),YQ=n($ke,"A",{href:!0});var pbt=s(YQ);hpr=r(pbt,"TFMPNetForMaskedLM"),pbt.forEach(t),ppr=r($ke," (MPNet model)"),$ke.forEach(t),upr=i(fe),T7=n(fe,"LI",{});var kke=s(T7);rbe=n(kke,"STRONG",{});var ubt=s(rbe);_pr=r(ubt,"rembert"),ubt.forEach(t),bpr=r(kke," \u2014 "),KQ=n(kke,"A",{href:!0});var _bt=s(KQ);vpr=r(_bt,"TFRemBertForMaskedLM"),_bt.forEach(t),Fpr=r(kke," (RemBERT model)"),kke.forEach(t),Tpr=i(fe),M7=n(fe,"LI",{});var Ske=s(M7);tbe=n(Ske,"STRONG",{});var bbt=s(tbe);Mpr=r(bbt,"roberta"),bbt.forEach(t),Epr=r(Ske," \u2014 "),ZQ=n(Ske,"A",{href:!0});var vbt=s(ZQ);Cpr=r(vbt,"TFRobertaForMaskedLM"),vbt.forEach(t),wpr=r(Ske," (RoBERTa model)"),Ske.forEach(t),Apr=i(fe),E7=n(fe,"LI",{});var Rke=s(E7);abe=n(Rke,"STRONG",{});var Fbt=s(abe);ypr=r(Fbt,"roformer"),Fbt.forEach(t),Lpr=r(Rke," \u2014 "),eW=n(Rke,"A",{href:!0});var Tbt=s(eW);xpr=r(Tbt,"TFRoFormerForMaskedLM"),Tbt.forEach(t),$pr=r(Rke," (RoFormer model)"),Rke.forEach(t),kpr=i(fe),C7=n(fe,"LI",{});var Bke=s(C7);nbe=n(Bke,"STRONG",{});var Mbt=s(nbe);Spr=r(Mbt,"tapas"),Mbt.forEach(t),Rpr=r(Bke," \u2014 "),oW=n(Bke,"A",{href:!0});var Ebt=s(oW);Bpr=r(Ebt,"TFTapasForMaskedLM"),Ebt.forEach(t),Ppr=r(Bke," (TAPAS model)"),Bke.forEach(t),Ipr=i(fe),w7=n(fe,"LI",{});var Pke=s(w7);sbe=n(Pke,"STRONG",{});var Cbt=s(sbe);qpr=r(Cbt,"xlm"),Cbt.forEach(t),Npr=r(Pke," \u2014 "),rW=n(Pke,"A",{href:!0});var wbt=s(rW);jpr=r(wbt,"TFXLMWithLMHeadModel"),wbt.forEach(t),Dpr=r(Pke," (XLM model)"),Pke.forEach(t),Gpr=i(fe),A7=n(fe,"LI",{});var Ike=s(A7);lbe=n(Ike,"STRONG",{});var Abt=s(lbe);Opr=r(Abt,"xlm-roberta"),Abt.forEach(t),Vpr=r(Ike," \u2014 "),tW=n(Ike,"A",{href:!0});var ybt=s(tW);Xpr=r(ybt,"TFXLMRobertaForMaskedLM"),ybt.forEach(t),zpr=r(Ike," (XLM-RoBERTa model)"),Ike.forEach(t),fe.forEach(t),Qpr=i(vl),T(y7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),jIe=i(f),ec=n(f,"H2",{class:!0});var zNe=s(ec);L7=n(zNe,"A",{id:!0,class:!0,href:!0});var Lbt=s(L7);ibe=n(Lbt,"SPAN",{});var xbt=s(ibe);T(Ky.$$.fragment,xbt),xbt.forEach(t),Lbt.forEach(t),Wpr=i(zNe),dbe=n(zNe,"SPAN",{});var $bt=s(dbe);Hpr=r($bt,"TFAutoModelForSeq2SeqLM"),$bt.forEach(t),zNe.forEach(t),DIe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(Zy.$$.fragment,Fl),Upr=i(Fl),oc=n(Fl,"P",{});var nZ=s(oc);Jpr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aW=n(nZ,"A",{href:!0});var kbt=s(aW);Ypr=r(kbt,"from_pretrained()"),kbt.forEach(t),Kpr=r(nZ," class method or the "),nW=n(nZ,"A",{href:!0});var Sbt=s(nW);Zpr=r(Sbt,"from_config()"),Sbt.forEach(t),eur=r(nZ,` class
method.`),nZ.forEach(t),our=i(Fl),eL=n(Fl,"P",{});var QNe=s(eL);rur=r(QNe,"This class cannot be instantiated directly using "),cbe=n(QNe,"CODE",{});var Rbt=s(cbe);tur=r(Rbt,"__init__()"),Rbt.forEach(t),aur=r(QNe," (throws an error)."),QNe.forEach(t),nur=i(Fl),$t=n(Fl,"DIV",{class:!0});var ew=s($t);T(oL.$$.fragment,ew),sur=i(ew),fbe=n(ew,"P",{});var Bbt=s(fbe);lur=r(Bbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bbt.forEach(t),iur=i(ew),rc=n(ew,"P",{});var sZ=s(rc);dur=r(sZ,`Note:
Loading a model from its configuration file does `),mbe=n(sZ,"STRONG",{});var Pbt=s(mbe);cur=r(Pbt,"not"),Pbt.forEach(t),fur=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(sZ,"A",{href:!0});var Ibt=s(sW);mur=r(Ibt,"from_pretrained()"),Ibt.forEach(t),gur=r(sZ," to load the model weights."),sZ.forEach(t),hur=i(ew),T(x7.$$.fragment,ew),ew.forEach(t),pur=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(rL.$$.fragment,Tl),uur=i(Tl),gbe=n(Tl,"P",{});var qbt=s(gbe);_ur=r(qbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qbt.forEach(t),bur=i(Tl),tn=n(Tl,"P",{});var ow=s(tn);vur=r(ow,"The model class to instantiate is selected based on the "),hbe=n(ow,"CODE",{});var Nbt=s(hbe);Fur=r(Nbt,"model_type"),Nbt.forEach(t),Tur=r(ow,` property of the config object (either
passed as an argument or loaded from `),pbe=n(ow,"CODE",{});var jbt=s(pbe);Mur=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),Eur=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(ow,"CODE",{});var Dbt=s(ube);Cur=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),wur=r(ow,":"),ow.forEach(t),Aur=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);$7=n(Re,"LI",{});var qke=s($7);_be=n(qke,"STRONG",{});var Gbt=s(_be);yur=r(Gbt,"bart"),Gbt.forEach(t),Lur=r(qke," \u2014 "),lW=n(qke,"A",{href:!0});var Obt=s(lW);xur=r(Obt,"TFBartForConditionalGeneration"),Obt.forEach(t),$ur=r(qke," (BART model)"),qke.forEach(t),kur=i(Re),k7=n(Re,"LI",{});var Nke=s(k7);bbe=n(Nke,"STRONG",{});var Vbt=s(bbe);Sur=r(Vbt,"blenderbot"),Vbt.forEach(t),Rur=r(Nke," \u2014 "),iW=n(Nke,"A",{href:!0});var Xbt=s(iW);Bur=r(Xbt,"TFBlenderbotForConditionalGeneration"),Xbt.forEach(t),Pur=r(Nke," (Blenderbot model)"),Nke.forEach(t),Iur=i(Re),S7=n(Re,"LI",{});var jke=s(S7);vbe=n(jke,"STRONG",{});var zbt=s(vbe);qur=r(zbt,"blenderbot-small"),zbt.forEach(t),Nur=r(jke," \u2014 "),dW=n(jke,"A",{href:!0});var Qbt=s(dW);jur=r(Qbt,"TFBlenderbotSmallForConditionalGeneration"),Qbt.forEach(t),Dur=r(jke," (BlenderbotSmall model)"),jke.forEach(t),Gur=i(Re),R7=n(Re,"LI",{});var Dke=s(R7);Fbe=n(Dke,"STRONG",{});var Wbt=s(Fbe);Our=r(Wbt,"encoder-decoder"),Wbt.forEach(t),Vur=r(Dke," \u2014 "),cW=n(Dke,"A",{href:!0});var Hbt=s(cW);Xur=r(Hbt,"TFEncoderDecoderModel"),Hbt.forEach(t),zur=r(Dke," (Encoder decoder model)"),Dke.forEach(t),Qur=i(Re),B7=n(Re,"LI",{});var Gke=s(B7);Tbe=n(Gke,"STRONG",{});var Ubt=s(Tbe);Wur=r(Ubt,"led"),Ubt.forEach(t),Hur=r(Gke," \u2014 "),fW=n(Gke,"A",{href:!0});var Jbt=s(fW);Uur=r(Jbt,"TFLEDForConditionalGeneration"),Jbt.forEach(t),Jur=r(Gke," (LED model)"),Gke.forEach(t),Yur=i(Re),P7=n(Re,"LI",{});var Oke=s(P7);Mbe=n(Oke,"STRONG",{});var Ybt=s(Mbe);Kur=r(Ybt,"marian"),Ybt.forEach(t),Zur=r(Oke," \u2014 "),mW=n(Oke,"A",{href:!0});var Kbt=s(mW);e_r=r(Kbt,"TFMarianMTModel"),Kbt.forEach(t),o_r=r(Oke," (Marian model)"),Oke.forEach(t),r_r=i(Re),I7=n(Re,"LI",{});var Vke=s(I7);Ebe=n(Vke,"STRONG",{});var Zbt=s(Ebe);t_r=r(Zbt,"mbart"),Zbt.forEach(t),a_r=r(Vke," \u2014 "),gW=n(Vke,"A",{href:!0});var e2t=s(gW);n_r=r(e2t,"TFMBartForConditionalGeneration"),e2t.forEach(t),s_r=r(Vke," (mBART model)"),Vke.forEach(t),l_r=i(Re),q7=n(Re,"LI",{});var Xke=s(q7);Cbe=n(Xke,"STRONG",{});var o2t=s(Cbe);i_r=r(o2t,"mt5"),o2t.forEach(t),d_r=r(Xke," \u2014 "),hW=n(Xke,"A",{href:!0});var r2t=s(hW);c_r=r(r2t,"TFMT5ForConditionalGeneration"),r2t.forEach(t),f_r=r(Xke," (mT5 model)"),Xke.forEach(t),m_r=i(Re),N7=n(Re,"LI",{});var zke=s(N7);wbe=n(zke,"STRONG",{});var t2t=s(wbe);g_r=r(t2t,"pegasus"),t2t.forEach(t),h_r=r(zke," \u2014 "),pW=n(zke,"A",{href:!0});var a2t=s(pW);p_r=r(a2t,"TFPegasusForConditionalGeneration"),a2t.forEach(t),u_r=r(zke," (Pegasus model)"),zke.forEach(t),__r=i(Re),j7=n(Re,"LI",{});var Qke=s(j7);Abe=n(Qke,"STRONG",{});var n2t=s(Abe);b_r=r(n2t,"t5"),n2t.forEach(t),v_r=r(Qke," \u2014 "),uW=n(Qke,"A",{href:!0});var s2t=s(uW);F_r=r(s2t,"TFT5ForConditionalGeneration"),s2t.forEach(t),T_r=r(Qke," (T5 model)"),Qke.forEach(t),Re.forEach(t),M_r=i(Tl),T(D7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),GIe=i(f),tc=n(f,"H2",{class:!0});var WNe=s(tc);G7=n(WNe,"A",{id:!0,class:!0,href:!0});var l2t=s(G7);ybe=n(l2t,"SPAN",{});var i2t=s(ybe);T(tL.$$.fragment,i2t),i2t.forEach(t),l2t.forEach(t),E_r=i(WNe),Lbe=n(WNe,"SPAN",{});var d2t=s(Lbe);C_r=r(d2t,"TFAutoModelForSequenceClassification"),d2t.forEach(t),WNe.forEach(t),OIe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(aL.$$.fragment,Ml),w_r=i(Ml),ac=n(Ml,"P",{});var lZ=s(ac);A_r=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_W=n(lZ,"A",{href:!0});var c2t=s(_W);y_r=r(c2t,"from_pretrained()"),c2t.forEach(t),L_r=r(lZ," class method or the "),bW=n(lZ,"A",{href:!0});var f2t=s(bW);x_r=r(f2t,"from_config()"),f2t.forEach(t),$_r=r(lZ,` class
method.`),lZ.forEach(t),k_r=i(Ml),nL=n(Ml,"P",{});var HNe=s(nL);S_r=r(HNe,"This class cannot be instantiated directly using "),xbe=n(HNe,"CODE",{});var m2t=s(xbe);R_r=r(m2t,"__init__()"),m2t.forEach(t),B_r=r(HNe," (throws an error)."),HNe.forEach(t),P_r=i(Ml),kt=n(Ml,"DIV",{class:!0});var rw=s(kt);T(sL.$$.fragment,rw),I_r=i(rw),$be=n(rw,"P",{});var g2t=s($be);q_r=r(g2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),g2t.forEach(t),N_r=i(rw),nc=n(rw,"P",{});var iZ=s(nc);j_r=r(iZ,`Note:
Loading a model from its configuration file does `),kbe=n(iZ,"STRONG",{});var h2t=s(kbe);D_r=r(h2t,"not"),h2t.forEach(t),G_r=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(iZ,"A",{href:!0});var p2t=s(vW);O_r=r(p2t,"from_pretrained()"),p2t.forEach(t),V_r=r(iZ," to load the model weights."),iZ.forEach(t),X_r=i(rw),T(O7.$$.fragment,rw),rw.forEach(t),z_r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(lL.$$.fragment,El),Q_r=i(El),Sbe=n(El,"P",{});var u2t=s(Sbe);W_r=r(u2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u2t.forEach(t),H_r=i(El),an=n(El,"P",{});var tw=s(an);U_r=r(tw,"The model class to instantiate is selected based on the "),Rbe=n(tw,"CODE",{});var _2t=s(Rbe);J_r=r(_2t,"model_type"),_2t.forEach(t),Y_r=r(tw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(tw,"CODE",{});var b2t=s(Bbe);K_r=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),Z_r=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(tw,"CODE",{});var v2t=s(Pbe);e1r=r(v2t,"pretrained_model_name_or_path"),v2t.forEach(t),o1r=r(tw,":"),tw.forEach(t),r1r=i(El),Z=n(El,"UL",{});var re=s(Z);V7=n(re,"LI",{});var Wke=s(V7);Ibe=n(Wke,"STRONG",{});var F2t=s(Ibe);t1r=r(F2t,"albert"),F2t.forEach(t),a1r=r(Wke," \u2014 "),FW=n(Wke,"A",{href:!0});var T2t=s(FW);n1r=r(T2t,"TFAlbertForSequenceClassification"),T2t.forEach(t),s1r=r(Wke," (ALBERT model)"),Wke.forEach(t),l1r=i(re),X7=n(re,"LI",{});var Hke=s(X7);qbe=n(Hke,"STRONG",{});var M2t=s(qbe);i1r=r(M2t,"bert"),M2t.forEach(t),d1r=r(Hke," \u2014 "),TW=n(Hke,"A",{href:!0});var E2t=s(TW);c1r=r(E2t,"TFBertForSequenceClassification"),E2t.forEach(t),f1r=r(Hke," (BERT model)"),Hke.forEach(t),m1r=i(re),z7=n(re,"LI",{});var Uke=s(z7);Nbe=n(Uke,"STRONG",{});var C2t=s(Nbe);g1r=r(C2t,"camembert"),C2t.forEach(t),h1r=r(Uke," \u2014 "),MW=n(Uke,"A",{href:!0});var w2t=s(MW);p1r=r(w2t,"TFCamembertForSequenceClassification"),w2t.forEach(t),u1r=r(Uke," (CamemBERT model)"),Uke.forEach(t),_1r=i(re),Q7=n(re,"LI",{});var Jke=s(Q7);jbe=n(Jke,"STRONG",{});var A2t=s(jbe);b1r=r(A2t,"convbert"),A2t.forEach(t),v1r=r(Jke," \u2014 "),EW=n(Jke,"A",{href:!0});var y2t=s(EW);F1r=r(y2t,"TFConvBertForSequenceClassification"),y2t.forEach(t),T1r=r(Jke," (ConvBERT model)"),Jke.forEach(t),M1r=i(re),W7=n(re,"LI",{});var Yke=s(W7);Dbe=n(Yke,"STRONG",{});var L2t=s(Dbe);E1r=r(L2t,"ctrl"),L2t.forEach(t),C1r=r(Yke," \u2014 "),CW=n(Yke,"A",{href:!0});var x2t=s(CW);w1r=r(x2t,"TFCTRLForSequenceClassification"),x2t.forEach(t),A1r=r(Yke," (CTRL model)"),Yke.forEach(t),y1r=i(re),H7=n(re,"LI",{});var Kke=s(H7);Gbe=n(Kke,"STRONG",{});var $2t=s(Gbe);L1r=r($2t,"deberta"),$2t.forEach(t),x1r=r(Kke," \u2014 "),wW=n(Kke,"A",{href:!0});var k2t=s(wW);$1r=r(k2t,"TFDebertaForSequenceClassification"),k2t.forEach(t),k1r=r(Kke," (DeBERTa model)"),Kke.forEach(t),S1r=i(re),U7=n(re,"LI",{});var Zke=s(U7);Obe=n(Zke,"STRONG",{});var S2t=s(Obe);R1r=r(S2t,"deberta-v2"),S2t.forEach(t),B1r=r(Zke," \u2014 "),AW=n(Zke,"A",{href:!0});var R2t=s(AW);P1r=r(R2t,"TFDebertaV2ForSequenceClassification"),R2t.forEach(t),I1r=r(Zke," (DeBERTa-v2 model)"),Zke.forEach(t),q1r=i(re),J7=n(re,"LI",{});var eSe=s(J7);Vbe=n(eSe,"STRONG",{});var B2t=s(Vbe);N1r=r(B2t,"distilbert"),B2t.forEach(t),j1r=r(eSe," \u2014 "),yW=n(eSe,"A",{href:!0});var P2t=s(yW);D1r=r(P2t,"TFDistilBertForSequenceClassification"),P2t.forEach(t),G1r=r(eSe," (DistilBERT model)"),eSe.forEach(t),O1r=i(re),Y7=n(re,"LI",{});var oSe=s(Y7);Xbe=n(oSe,"STRONG",{});var I2t=s(Xbe);V1r=r(I2t,"electra"),I2t.forEach(t),X1r=r(oSe," \u2014 "),LW=n(oSe,"A",{href:!0});var q2t=s(LW);z1r=r(q2t,"TFElectraForSequenceClassification"),q2t.forEach(t),Q1r=r(oSe," (ELECTRA model)"),oSe.forEach(t),W1r=i(re),K7=n(re,"LI",{});var rSe=s(K7);zbe=n(rSe,"STRONG",{});var N2t=s(zbe);H1r=r(N2t,"flaubert"),N2t.forEach(t),U1r=r(rSe," \u2014 "),xW=n(rSe,"A",{href:!0});var j2t=s(xW);J1r=r(j2t,"TFFlaubertForSequenceClassification"),j2t.forEach(t),Y1r=r(rSe," (FlauBERT model)"),rSe.forEach(t),K1r=i(re),Z7=n(re,"LI",{});var tSe=s(Z7);Qbe=n(tSe,"STRONG",{});var D2t=s(Qbe);Z1r=r(D2t,"funnel"),D2t.forEach(t),e8r=r(tSe," \u2014 "),$W=n(tSe,"A",{href:!0});var G2t=s($W);o8r=r(G2t,"TFFunnelForSequenceClassification"),G2t.forEach(t),r8r=r(tSe," (Funnel Transformer model)"),tSe.forEach(t),t8r=i(re),eM=n(re,"LI",{});var aSe=s(eM);Wbe=n(aSe,"STRONG",{});var O2t=s(Wbe);a8r=r(O2t,"gpt2"),O2t.forEach(t),n8r=r(aSe," \u2014 "),kW=n(aSe,"A",{href:!0});var V2t=s(kW);s8r=r(V2t,"TFGPT2ForSequenceClassification"),V2t.forEach(t),l8r=r(aSe," (OpenAI GPT-2 model)"),aSe.forEach(t),i8r=i(re),oM=n(re,"LI",{});var nSe=s(oM);Hbe=n(nSe,"STRONG",{});var X2t=s(Hbe);d8r=r(X2t,"gptj"),X2t.forEach(t),c8r=r(nSe," \u2014 "),SW=n(nSe,"A",{href:!0});var z2t=s(SW);f8r=r(z2t,"TFGPTJForSequenceClassification"),z2t.forEach(t),m8r=r(nSe," (GPT-J model)"),nSe.forEach(t),g8r=i(re),rM=n(re,"LI",{});var sSe=s(rM);Ube=n(sSe,"STRONG",{});var Q2t=s(Ube);h8r=r(Q2t,"layoutlm"),Q2t.forEach(t),p8r=r(sSe," \u2014 "),RW=n(sSe,"A",{href:!0});var W2t=s(RW);u8r=r(W2t,"TFLayoutLMForSequenceClassification"),W2t.forEach(t),_8r=r(sSe," (LayoutLM model)"),sSe.forEach(t),b8r=i(re),tM=n(re,"LI",{});var lSe=s(tM);Jbe=n(lSe,"STRONG",{});var H2t=s(Jbe);v8r=r(H2t,"longformer"),H2t.forEach(t),F8r=r(lSe," \u2014 "),BW=n(lSe,"A",{href:!0});var U2t=s(BW);T8r=r(U2t,"TFLongformerForSequenceClassification"),U2t.forEach(t),M8r=r(lSe," (Longformer model)"),lSe.forEach(t),E8r=i(re),aM=n(re,"LI",{});var iSe=s(aM);Ybe=n(iSe,"STRONG",{});var J2t=s(Ybe);C8r=r(J2t,"mobilebert"),J2t.forEach(t),w8r=r(iSe," \u2014 "),PW=n(iSe,"A",{href:!0});var Y2t=s(PW);A8r=r(Y2t,"TFMobileBertForSequenceClassification"),Y2t.forEach(t),y8r=r(iSe," (MobileBERT model)"),iSe.forEach(t),L8r=i(re),nM=n(re,"LI",{});var dSe=s(nM);Kbe=n(dSe,"STRONG",{});var K2t=s(Kbe);x8r=r(K2t,"mpnet"),K2t.forEach(t),$8r=r(dSe," \u2014 "),IW=n(dSe,"A",{href:!0});var Z2t=s(IW);k8r=r(Z2t,"TFMPNetForSequenceClassification"),Z2t.forEach(t),S8r=r(dSe," (MPNet model)"),dSe.forEach(t),R8r=i(re),sM=n(re,"LI",{});var cSe=s(sM);Zbe=n(cSe,"STRONG",{});var evt=s(Zbe);B8r=r(evt,"openai-gpt"),evt.forEach(t),P8r=r(cSe," \u2014 "),qW=n(cSe,"A",{href:!0});var ovt=s(qW);I8r=r(ovt,"TFOpenAIGPTForSequenceClassification"),ovt.forEach(t),q8r=r(cSe," (OpenAI GPT model)"),cSe.forEach(t),N8r=i(re),lM=n(re,"LI",{});var fSe=s(lM);e2e=n(fSe,"STRONG",{});var rvt=s(e2e);j8r=r(rvt,"rembert"),rvt.forEach(t),D8r=r(fSe," \u2014 "),NW=n(fSe,"A",{href:!0});var tvt=s(NW);G8r=r(tvt,"TFRemBertForSequenceClassification"),tvt.forEach(t),O8r=r(fSe," (RemBERT model)"),fSe.forEach(t),V8r=i(re),iM=n(re,"LI",{});var mSe=s(iM);o2e=n(mSe,"STRONG",{});var avt=s(o2e);X8r=r(avt,"roberta"),avt.forEach(t),z8r=r(mSe," \u2014 "),jW=n(mSe,"A",{href:!0});var nvt=s(jW);Q8r=r(nvt,"TFRobertaForSequenceClassification"),nvt.forEach(t),W8r=r(mSe," (RoBERTa model)"),mSe.forEach(t),H8r=i(re),dM=n(re,"LI",{});var gSe=s(dM);r2e=n(gSe,"STRONG",{});var svt=s(r2e);U8r=r(svt,"roformer"),svt.forEach(t),J8r=r(gSe," \u2014 "),DW=n(gSe,"A",{href:!0});var lvt=s(DW);Y8r=r(lvt,"TFRoFormerForSequenceClassification"),lvt.forEach(t),K8r=r(gSe," (RoFormer model)"),gSe.forEach(t),Z8r=i(re),cM=n(re,"LI",{});var hSe=s(cM);t2e=n(hSe,"STRONG",{});var ivt=s(t2e);ebr=r(ivt,"tapas"),ivt.forEach(t),obr=r(hSe," \u2014 "),GW=n(hSe,"A",{href:!0});var dvt=s(GW);rbr=r(dvt,"TFTapasForSequenceClassification"),dvt.forEach(t),tbr=r(hSe," (TAPAS model)"),hSe.forEach(t),abr=i(re),fM=n(re,"LI",{});var pSe=s(fM);a2e=n(pSe,"STRONG",{});var cvt=s(a2e);nbr=r(cvt,"transfo-xl"),cvt.forEach(t),sbr=r(pSe," \u2014 "),OW=n(pSe,"A",{href:!0});var fvt=s(OW);lbr=r(fvt,"TFTransfoXLForSequenceClassification"),fvt.forEach(t),ibr=r(pSe," (Transformer-XL model)"),pSe.forEach(t),dbr=i(re),mM=n(re,"LI",{});var uSe=s(mM);n2e=n(uSe,"STRONG",{});var mvt=s(n2e);cbr=r(mvt,"xlm"),mvt.forEach(t),fbr=r(uSe," \u2014 "),VW=n(uSe,"A",{href:!0});var gvt=s(VW);mbr=r(gvt,"TFXLMForSequenceClassification"),gvt.forEach(t),gbr=r(uSe," (XLM model)"),uSe.forEach(t),hbr=i(re),gM=n(re,"LI",{});var _Se=s(gM);s2e=n(_Se,"STRONG",{});var hvt=s(s2e);pbr=r(hvt,"xlm-roberta"),hvt.forEach(t),ubr=r(_Se," \u2014 "),XW=n(_Se,"A",{href:!0});var pvt=s(XW);_br=r(pvt,"TFXLMRobertaForSequenceClassification"),pvt.forEach(t),bbr=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),vbr=i(re),hM=n(re,"LI",{});var bSe=s(hM);l2e=n(bSe,"STRONG",{});var uvt=s(l2e);Fbr=r(uvt,"xlnet"),uvt.forEach(t),Tbr=r(bSe," \u2014 "),zW=n(bSe,"A",{href:!0});var _vt=s(zW);Mbr=r(_vt,"TFXLNetForSequenceClassification"),_vt.forEach(t),Ebr=r(bSe," (XLNet model)"),bSe.forEach(t),re.forEach(t),Cbr=i(El),T(pM.$$.fragment,El),El.forEach(t),Ml.forEach(t),VIe=i(f),sc=n(f,"H2",{class:!0});var UNe=s(sc);uM=n(UNe,"A",{id:!0,class:!0,href:!0});var bvt=s(uM);i2e=n(bvt,"SPAN",{});var vvt=s(i2e);T(iL.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),wbr=i(UNe),d2e=n(UNe,"SPAN",{});var Fvt=s(d2e);Abr=r(Fvt,"TFAutoModelForMultipleChoice"),Fvt.forEach(t),UNe.forEach(t),XIe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(dL.$$.fragment,Cl),ybr=i(Cl),lc=n(Cl,"P",{});var dZ=s(lc);Lbr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QW=n(dZ,"A",{href:!0});var Tvt=s(QW);xbr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),$br=r(dZ," class method or the "),WW=n(dZ,"A",{href:!0});var Mvt=s(WW);kbr=r(Mvt,"from_config()"),Mvt.forEach(t),Sbr=r(dZ,` class
method.`),dZ.forEach(t),Rbr=i(Cl),cL=n(Cl,"P",{});var JNe=s(cL);Bbr=r(JNe,"This class cannot be instantiated directly using "),c2e=n(JNe,"CODE",{});var Evt=s(c2e);Pbr=r(Evt,"__init__()"),Evt.forEach(t),Ibr=r(JNe," (throws an error)."),JNe.forEach(t),qbr=i(Cl),St=n(Cl,"DIV",{class:!0});var aw=s(St);T(fL.$$.fragment,aw),Nbr=i(aw),f2e=n(aw,"P",{});var Cvt=s(f2e);jbr=r(Cvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Cvt.forEach(t),Dbr=i(aw),ic=n(aw,"P",{});var cZ=s(ic);Gbr=r(cZ,`Note:
Loading a model from its configuration file does `),m2e=n(cZ,"STRONG",{});var wvt=s(m2e);Obr=r(wvt,"not"),wvt.forEach(t),Vbr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(cZ,"A",{href:!0});var Avt=s(HW);Xbr=r(Avt,"from_pretrained()"),Avt.forEach(t),zbr=r(cZ," to load the model weights."),cZ.forEach(t),Qbr=i(aw),T(_M.$$.fragment,aw),aw.forEach(t),Wbr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(mL.$$.fragment,wl),Hbr=i(wl),g2e=n(wl,"P",{});var yvt=s(g2e);Ubr=r(yvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yvt.forEach(t),Jbr=i(wl),nn=n(wl,"P",{});var nw=s(nn);Ybr=r(nw,"The model class to instantiate is selected based on the "),h2e=n(nw,"CODE",{});var Lvt=s(h2e);Kbr=r(Lvt,"model_type"),Lvt.forEach(t),Zbr=r(nw,` property of the config object (either
passed as an argument or loaded from `),p2e=n(nw,"CODE",{});var xvt=s(p2e);e2r=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),o2r=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(nw,"CODE",{});var $vt=s(u2e);r2r=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),t2r=r(nw,":"),nw.forEach(t),a2r=i(wl),pe=n(wl,"UL",{});var _e=s(pe);bM=n(_e,"LI",{});var vSe=s(bM);_2e=n(vSe,"STRONG",{});var kvt=s(_2e);n2r=r(kvt,"albert"),kvt.forEach(t),s2r=r(vSe," \u2014 "),UW=n(vSe,"A",{href:!0});var Svt=s(UW);l2r=r(Svt,"TFAlbertForMultipleChoice"),Svt.forEach(t),i2r=r(vSe," (ALBERT model)"),vSe.forEach(t),d2r=i(_e),vM=n(_e,"LI",{});var FSe=s(vM);b2e=n(FSe,"STRONG",{});var Rvt=s(b2e);c2r=r(Rvt,"bert"),Rvt.forEach(t),f2r=r(FSe," \u2014 "),JW=n(FSe,"A",{href:!0});var Bvt=s(JW);m2r=r(Bvt,"TFBertForMultipleChoice"),Bvt.forEach(t),g2r=r(FSe," (BERT model)"),FSe.forEach(t),h2r=i(_e),FM=n(_e,"LI",{});var TSe=s(FM);v2e=n(TSe,"STRONG",{});var Pvt=s(v2e);p2r=r(Pvt,"camembert"),Pvt.forEach(t),u2r=r(TSe," \u2014 "),YW=n(TSe,"A",{href:!0});var Ivt=s(YW);_2r=r(Ivt,"TFCamembertForMultipleChoice"),Ivt.forEach(t),b2r=r(TSe," (CamemBERT model)"),TSe.forEach(t),v2r=i(_e),TM=n(_e,"LI",{});var MSe=s(TM);F2e=n(MSe,"STRONG",{});var qvt=s(F2e);F2r=r(qvt,"convbert"),qvt.forEach(t),T2r=r(MSe," \u2014 "),KW=n(MSe,"A",{href:!0});var Nvt=s(KW);M2r=r(Nvt,"TFConvBertForMultipleChoice"),Nvt.forEach(t),E2r=r(MSe," (ConvBERT model)"),MSe.forEach(t),C2r=i(_e),MM=n(_e,"LI",{});var ESe=s(MM);T2e=n(ESe,"STRONG",{});var jvt=s(T2e);w2r=r(jvt,"distilbert"),jvt.forEach(t),A2r=r(ESe," \u2014 "),ZW=n(ESe,"A",{href:!0});var Dvt=s(ZW);y2r=r(Dvt,"TFDistilBertForMultipleChoice"),Dvt.forEach(t),L2r=r(ESe," (DistilBERT model)"),ESe.forEach(t),x2r=i(_e),EM=n(_e,"LI",{});var CSe=s(EM);M2e=n(CSe,"STRONG",{});var Gvt=s(M2e);$2r=r(Gvt,"electra"),Gvt.forEach(t),k2r=r(CSe," \u2014 "),eH=n(CSe,"A",{href:!0});var Ovt=s(eH);S2r=r(Ovt,"TFElectraForMultipleChoice"),Ovt.forEach(t),R2r=r(CSe," (ELECTRA model)"),CSe.forEach(t),B2r=i(_e),CM=n(_e,"LI",{});var wSe=s(CM);E2e=n(wSe,"STRONG",{});var Vvt=s(E2e);P2r=r(Vvt,"flaubert"),Vvt.forEach(t),I2r=r(wSe," \u2014 "),oH=n(wSe,"A",{href:!0});var Xvt=s(oH);q2r=r(Xvt,"TFFlaubertForMultipleChoice"),Xvt.forEach(t),N2r=r(wSe," (FlauBERT model)"),wSe.forEach(t),j2r=i(_e),wM=n(_e,"LI",{});var ASe=s(wM);C2e=n(ASe,"STRONG",{});var zvt=s(C2e);D2r=r(zvt,"funnel"),zvt.forEach(t),G2r=r(ASe," \u2014 "),rH=n(ASe,"A",{href:!0});var Qvt=s(rH);O2r=r(Qvt,"TFFunnelForMultipleChoice"),Qvt.forEach(t),V2r=r(ASe," (Funnel Transformer model)"),ASe.forEach(t),X2r=i(_e),AM=n(_e,"LI",{});var ySe=s(AM);w2e=n(ySe,"STRONG",{});var Wvt=s(w2e);z2r=r(Wvt,"longformer"),Wvt.forEach(t),Q2r=r(ySe," \u2014 "),tH=n(ySe,"A",{href:!0});var Hvt=s(tH);W2r=r(Hvt,"TFLongformerForMultipleChoice"),Hvt.forEach(t),H2r=r(ySe," (Longformer model)"),ySe.forEach(t),U2r=i(_e),yM=n(_e,"LI",{});var LSe=s(yM);A2e=n(LSe,"STRONG",{});var Uvt=s(A2e);J2r=r(Uvt,"mobilebert"),Uvt.forEach(t),Y2r=r(LSe," \u2014 "),aH=n(LSe,"A",{href:!0});var Jvt=s(aH);K2r=r(Jvt,"TFMobileBertForMultipleChoice"),Jvt.forEach(t),Z2r=r(LSe," (MobileBERT model)"),LSe.forEach(t),evr=i(_e),LM=n(_e,"LI",{});var xSe=s(LM);y2e=n(xSe,"STRONG",{});var Yvt=s(y2e);ovr=r(Yvt,"mpnet"),Yvt.forEach(t),rvr=r(xSe," \u2014 "),nH=n(xSe,"A",{href:!0});var Kvt=s(nH);tvr=r(Kvt,"TFMPNetForMultipleChoice"),Kvt.forEach(t),avr=r(xSe," (MPNet model)"),xSe.forEach(t),nvr=i(_e),xM=n(_e,"LI",{});var $Se=s(xM);L2e=n($Se,"STRONG",{});var Zvt=s(L2e);svr=r(Zvt,"rembert"),Zvt.forEach(t),lvr=r($Se," \u2014 "),sH=n($Se,"A",{href:!0});var eFt=s(sH);ivr=r(eFt,"TFRemBertForMultipleChoice"),eFt.forEach(t),dvr=r($Se," (RemBERT model)"),$Se.forEach(t),cvr=i(_e),$M=n(_e,"LI",{});var kSe=s($M);x2e=n(kSe,"STRONG",{});var oFt=s(x2e);fvr=r(oFt,"roberta"),oFt.forEach(t),mvr=r(kSe," \u2014 "),lH=n(kSe,"A",{href:!0});var rFt=s(lH);gvr=r(rFt,"TFRobertaForMultipleChoice"),rFt.forEach(t),hvr=r(kSe," (RoBERTa model)"),kSe.forEach(t),pvr=i(_e),kM=n(_e,"LI",{});var SSe=s(kM);$2e=n(SSe,"STRONG",{});var tFt=s($2e);uvr=r(tFt,"roformer"),tFt.forEach(t),_vr=r(SSe," \u2014 "),iH=n(SSe,"A",{href:!0});var aFt=s(iH);bvr=r(aFt,"TFRoFormerForMultipleChoice"),aFt.forEach(t),vvr=r(SSe," (RoFormer model)"),SSe.forEach(t),Fvr=i(_e),SM=n(_e,"LI",{});var RSe=s(SM);k2e=n(RSe,"STRONG",{});var nFt=s(k2e);Tvr=r(nFt,"xlm"),nFt.forEach(t),Mvr=r(RSe," \u2014 "),dH=n(RSe,"A",{href:!0});var sFt=s(dH);Evr=r(sFt,"TFXLMForMultipleChoice"),sFt.forEach(t),Cvr=r(RSe," (XLM model)"),RSe.forEach(t),wvr=i(_e),RM=n(_e,"LI",{});var BSe=s(RM);S2e=n(BSe,"STRONG",{});var lFt=s(S2e);Avr=r(lFt,"xlm-roberta"),lFt.forEach(t),yvr=r(BSe," \u2014 "),cH=n(BSe,"A",{href:!0});var iFt=s(cH);Lvr=r(iFt,"TFXLMRobertaForMultipleChoice"),iFt.forEach(t),xvr=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),$vr=i(_e),BM=n(_e,"LI",{});var PSe=s(BM);R2e=n(PSe,"STRONG",{});var dFt=s(R2e);kvr=r(dFt,"xlnet"),dFt.forEach(t),Svr=r(PSe," \u2014 "),fH=n(PSe,"A",{href:!0});var cFt=s(fH);Rvr=r(cFt,"TFXLNetForMultipleChoice"),cFt.forEach(t),Bvr=r(PSe," (XLNet model)"),PSe.forEach(t),_e.forEach(t),Pvr=i(wl),T(PM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),zIe=i(f),dc=n(f,"H2",{class:!0});var YNe=s(dc);IM=n(YNe,"A",{id:!0,class:!0,href:!0});var fFt=s(IM);B2e=n(fFt,"SPAN",{});var mFt=s(B2e);T(gL.$$.fragment,mFt),mFt.forEach(t),fFt.forEach(t),Ivr=i(YNe),P2e=n(YNe,"SPAN",{});var gFt=s(P2e);qvr=r(gFt,"TFAutoModelForNextSentencePrediction"),gFt.forEach(t),YNe.forEach(t),QIe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(hL.$$.fragment,Al),Nvr=i(Al),cc=n(Al,"P",{});var fZ=s(cc);jvr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mH=n(fZ,"A",{href:!0});var hFt=s(mH);Dvr=r(hFt,"from_pretrained()"),hFt.forEach(t),Gvr=r(fZ," class method or the "),gH=n(fZ,"A",{href:!0});var pFt=s(gH);Ovr=r(pFt,"from_config()"),pFt.forEach(t),Vvr=r(fZ,` class
method.`),fZ.forEach(t),Xvr=i(Al),pL=n(Al,"P",{});var KNe=s(pL);zvr=r(KNe,"This class cannot be instantiated directly using "),I2e=n(KNe,"CODE",{});var uFt=s(I2e);Qvr=r(uFt,"__init__()"),uFt.forEach(t),Wvr=r(KNe," (throws an error)."),KNe.forEach(t),Hvr=i(Al),Rt=n(Al,"DIV",{class:!0});var sw=s(Rt);T(uL.$$.fragment,sw),Uvr=i(sw),q2e=n(sw,"P",{});var _Ft=s(q2e);Jvr=r(_Ft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Ft.forEach(t),Yvr=i(sw),fc=n(sw,"P",{});var mZ=s(fc);Kvr=r(mZ,`Note:
Loading a model from its configuration file does `),N2e=n(mZ,"STRONG",{});var bFt=s(N2e);Zvr=r(bFt,"not"),bFt.forEach(t),eFr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(mZ,"A",{href:!0});var vFt=s(hH);oFr=r(vFt,"from_pretrained()"),vFt.forEach(t),rFr=r(mZ," to load the model weights."),mZ.forEach(t),tFr=i(sw),T(qM.$$.fragment,sw),sw.forEach(t),aFr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(_L.$$.fragment,yl),nFr=i(yl),j2e=n(yl,"P",{});var FFt=s(j2e);sFr=r(FFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FFt.forEach(t),lFr=i(yl),sn=n(yl,"P",{});var lw=s(sn);iFr=r(lw,"The model class to instantiate is selected based on the "),D2e=n(lw,"CODE",{});var TFt=s(D2e);dFr=r(TFt,"model_type"),TFt.forEach(t),cFr=r(lw,` property of the config object (either
passed as an argument or loaded from `),G2e=n(lw,"CODE",{});var MFt=s(G2e);fFr=r(MFt,"pretrained_model_name_or_path"),MFt.forEach(t),mFr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(lw,"CODE",{});var EFt=s(O2e);gFr=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),hFr=r(lw,":"),lw.forEach(t),pFr=i(yl),bL=n(yl,"UL",{});var ZNe=s(bL);NM=n(ZNe,"LI",{});var ISe=s(NM);V2e=n(ISe,"STRONG",{});var CFt=s(V2e);uFr=r(CFt,"bert"),CFt.forEach(t),_Fr=r(ISe," \u2014 "),pH=n(ISe,"A",{href:!0});var wFt=s(pH);bFr=r(wFt,"TFBertForNextSentencePrediction"),wFt.forEach(t),vFr=r(ISe," (BERT model)"),ISe.forEach(t),FFr=i(ZNe),jM=n(ZNe,"LI",{});var qSe=s(jM);X2e=n(qSe,"STRONG",{});var AFt=s(X2e);TFr=r(AFt,"mobilebert"),AFt.forEach(t),MFr=r(qSe," \u2014 "),uH=n(qSe,"A",{href:!0});var yFt=s(uH);EFr=r(yFt,"TFMobileBertForNextSentencePrediction"),yFt.forEach(t),CFr=r(qSe," (MobileBERT model)"),qSe.forEach(t),ZNe.forEach(t),wFr=i(yl),T(DM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),WIe=i(f),mc=n(f,"H2",{class:!0});var eje=s(mc);GM=n(eje,"A",{id:!0,class:!0,href:!0});var LFt=s(GM);z2e=n(LFt,"SPAN",{});var xFt=s(z2e);T(vL.$$.fragment,xFt),xFt.forEach(t),LFt.forEach(t),AFr=i(eje),Q2e=n(eje,"SPAN",{});var $Ft=s(Q2e);yFr=r($Ft,"TFAutoModelForTableQuestionAnswering"),$Ft.forEach(t),eje.forEach(t),HIe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(FL.$$.fragment,Ll),LFr=i(Ll),gc=n(Ll,"P",{});var gZ=s(gc);xFr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_H=n(gZ,"A",{href:!0});var kFt=s(_H);$Fr=r(kFt,"from_pretrained()"),kFt.forEach(t),kFr=r(gZ," class method or the "),bH=n(gZ,"A",{href:!0});var SFt=s(bH);SFr=r(SFt,"from_config()"),SFt.forEach(t),RFr=r(gZ,` class
method.`),gZ.forEach(t),BFr=i(Ll),TL=n(Ll,"P",{});var oje=s(TL);PFr=r(oje,"This class cannot be instantiated directly using "),W2e=n(oje,"CODE",{});var RFt=s(W2e);IFr=r(RFt,"__init__()"),RFt.forEach(t),qFr=r(oje," (throws an error)."),oje.forEach(t),NFr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var iw=s(Bt);T(ML.$$.fragment,iw),jFr=i(iw),H2e=n(iw,"P",{});var BFt=s(H2e);DFr=r(BFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BFt.forEach(t),GFr=i(iw),hc=n(iw,"P",{});var hZ=s(hc);OFr=r(hZ,`Note:
Loading a model from its configuration file does `),U2e=n(hZ,"STRONG",{});var PFt=s(U2e);VFr=r(PFt,"not"),PFt.forEach(t),XFr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(hZ,"A",{href:!0});var IFt=s(vH);zFr=r(IFt,"from_pretrained()"),IFt.forEach(t),QFr=r(hZ," to load the model weights."),hZ.forEach(t),WFr=i(iw),T(OM.$$.fragment,iw),iw.forEach(t),HFr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(EL.$$.fragment,xl),UFr=i(xl),J2e=n(xl,"P",{});var qFt=s(J2e);JFr=r(qFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qFt.forEach(t),YFr=i(xl),ln=n(xl,"P",{});var dw=s(ln);KFr=r(dw,"The model class to instantiate is selected based on the "),Y2e=n(dw,"CODE",{});var NFt=s(Y2e);ZFr=r(NFt,"model_type"),NFt.forEach(t),e0r=r(dw,` property of the config object (either
passed as an argument or loaded from `),K2e=n(dw,"CODE",{});var jFt=s(K2e);o0r=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),r0r=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(dw,"CODE",{});var DFt=s(Z2e);t0r=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),a0r=r(dw,":"),dw.forEach(t),n0r=i(xl),eve=n(xl,"UL",{});var GFt=s(eve);VM=n(GFt,"LI",{});var NSe=s(VM);ove=n(NSe,"STRONG",{});var OFt=s(ove);s0r=r(OFt,"tapas"),OFt.forEach(t),l0r=r(NSe," \u2014 "),FH=n(NSe,"A",{href:!0});var VFt=s(FH);i0r=r(VFt,"TFTapasForQuestionAnswering"),VFt.forEach(t),d0r=r(NSe," (TAPAS model)"),NSe.forEach(t),GFt.forEach(t),c0r=i(xl),T(XM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),UIe=i(f),pc=n(f,"H2",{class:!0});var rje=s(pc);zM=n(rje,"A",{id:!0,class:!0,href:!0});var XFt=s(zM);rve=n(XFt,"SPAN",{});var zFt=s(rve);T(CL.$$.fragment,zFt),zFt.forEach(t),XFt.forEach(t),f0r=i(rje),tve=n(rje,"SPAN",{});var QFt=s(tve);m0r=r(QFt,"TFAutoModelForTokenClassification"),QFt.forEach(t),rje.forEach(t),JIe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(wL.$$.fragment,$l),g0r=i($l),uc=n($l,"P",{});var pZ=s(uc);h0r=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TH=n(pZ,"A",{href:!0});var WFt=s(TH);p0r=r(WFt,"from_pretrained()"),WFt.forEach(t),u0r=r(pZ," class method or the "),MH=n(pZ,"A",{href:!0});var HFt=s(MH);_0r=r(HFt,"from_config()"),HFt.forEach(t),b0r=r(pZ,` class
method.`),pZ.forEach(t),v0r=i($l),AL=n($l,"P",{});var tje=s(AL);F0r=r(tje,"This class cannot be instantiated directly using "),ave=n(tje,"CODE",{});var UFt=s(ave);T0r=r(UFt,"__init__()"),UFt.forEach(t),M0r=r(tje," (throws an error)."),tje.forEach(t),E0r=i($l),Pt=n($l,"DIV",{class:!0});var cw=s(Pt);T(yL.$$.fragment,cw),C0r=i(cw),nve=n(cw,"P",{});var JFt=s(nve);w0r=r(JFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JFt.forEach(t),A0r=i(cw),_c=n(cw,"P",{});var uZ=s(_c);y0r=r(uZ,`Note:
Loading a model from its configuration file does `),sve=n(uZ,"STRONG",{});var YFt=s(sve);L0r=r(YFt,"not"),YFt.forEach(t),x0r=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(uZ,"A",{href:!0});var KFt=s(EH);$0r=r(KFt,"from_pretrained()"),KFt.forEach(t),k0r=r(uZ," to load the model weights."),uZ.forEach(t),S0r=i(cw),T(QM.$$.fragment,cw),cw.forEach(t),R0r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(LL.$$.fragment,kl),B0r=i(kl),lve=n(kl,"P",{});var ZFt=s(lve);P0r=r(ZFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZFt.forEach(t),I0r=i(kl),dn=n(kl,"P",{});var fw=s(dn);q0r=r(fw,"The model class to instantiate is selected based on the "),ive=n(fw,"CODE",{});var e0t=s(ive);N0r=r(e0t,"model_type"),e0t.forEach(t),j0r=r(fw,` property of the config object (either
passed as an argument or loaded from `),dve=n(fw,"CODE",{});var o0t=s(dve);D0r=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),G0r=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=n(fw,"CODE",{});var r0t=s(cve);O0r=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),V0r=r(fw,":"),fw.forEach(t),X0r=i(kl),de=n(kl,"UL",{});var me=s(de);WM=n(me,"LI",{});var jSe=s(WM);fve=n(jSe,"STRONG",{});var t0t=s(fve);z0r=r(t0t,"albert"),t0t.forEach(t),Q0r=r(jSe," \u2014 "),CH=n(jSe,"A",{href:!0});var a0t=s(CH);W0r=r(a0t,"TFAlbertForTokenClassification"),a0t.forEach(t),H0r=r(jSe," (ALBERT model)"),jSe.forEach(t),U0r=i(me),HM=n(me,"LI",{});var DSe=s(HM);mve=n(DSe,"STRONG",{});var n0t=s(mve);J0r=r(n0t,"bert"),n0t.forEach(t),Y0r=r(DSe," \u2014 "),wH=n(DSe,"A",{href:!0});var s0t=s(wH);K0r=r(s0t,"TFBertForTokenClassification"),s0t.forEach(t),Z0r=r(DSe," (BERT model)"),DSe.forEach(t),eTr=i(me),UM=n(me,"LI",{});var GSe=s(UM);gve=n(GSe,"STRONG",{});var l0t=s(gve);oTr=r(l0t,"camembert"),l0t.forEach(t),rTr=r(GSe," \u2014 "),AH=n(GSe,"A",{href:!0});var i0t=s(AH);tTr=r(i0t,"TFCamembertForTokenClassification"),i0t.forEach(t),aTr=r(GSe," (CamemBERT model)"),GSe.forEach(t),nTr=i(me),JM=n(me,"LI",{});var OSe=s(JM);hve=n(OSe,"STRONG",{});var d0t=s(hve);sTr=r(d0t,"convbert"),d0t.forEach(t),lTr=r(OSe," \u2014 "),yH=n(OSe,"A",{href:!0});var c0t=s(yH);iTr=r(c0t,"TFConvBertForTokenClassification"),c0t.forEach(t),dTr=r(OSe," (ConvBERT model)"),OSe.forEach(t),cTr=i(me),YM=n(me,"LI",{});var VSe=s(YM);pve=n(VSe,"STRONG",{});var f0t=s(pve);fTr=r(f0t,"deberta"),f0t.forEach(t),mTr=r(VSe," \u2014 "),LH=n(VSe,"A",{href:!0});var m0t=s(LH);gTr=r(m0t,"TFDebertaForTokenClassification"),m0t.forEach(t),hTr=r(VSe," (DeBERTa model)"),VSe.forEach(t),pTr=i(me),KM=n(me,"LI",{});var XSe=s(KM);uve=n(XSe,"STRONG",{});var g0t=s(uve);uTr=r(g0t,"deberta-v2"),g0t.forEach(t),_Tr=r(XSe," \u2014 "),xH=n(XSe,"A",{href:!0});var h0t=s(xH);bTr=r(h0t,"TFDebertaV2ForTokenClassification"),h0t.forEach(t),vTr=r(XSe," (DeBERTa-v2 model)"),XSe.forEach(t),FTr=i(me),ZM=n(me,"LI",{});var zSe=s(ZM);_ve=n(zSe,"STRONG",{});var p0t=s(_ve);TTr=r(p0t,"distilbert"),p0t.forEach(t),MTr=r(zSe," \u2014 "),$H=n(zSe,"A",{href:!0});var u0t=s($H);ETr=r(u0t,"TFDistilBertForTokenClassification"),u0t.forEach(t),CTr=r(zSe," (DistilBERT model)"),zSe.forEach(t),wTr=i(me),e4=n(me,"LI",{});var QSe=s(e4);bve=n(QSe,"STRONG",{});var _0t=s(bve);ATr=r(_0t,"electra"),_0t.forEach(t),yTr=r(QSe," \u2014 "),kH=n(QSe,"A",{href:!0});var b0t=s(kH);LTr=r(b0t,"TFElectraForTokenClassification"),b0t.forEach(t),xTr=r(QSe," (ELECTRA model)"),QSe.forEach(t),$Tr=i(me),o4=n(me,"LI",{});var WSe=s(o4);vve=n(WSe,"STRONG",{});var v0t=s(vve);kTr=r(v0t,"flaubert"),v0t.forEach(t),STr=r(WSe," \u2014 "),SH=n(WSe,"A",{href:!0});var F0t=s(SH);RTr=r(F0t,"TFFlaubertForTokenClassification"),F0t.forEach(t),BTr=r(WSe," (FlauBERT model)"),WSe.forEach(t),PTr=i(me),r4=n(me,"LI",{});var HSe=s(r4);Fve=n(HSe,"STRONG",{});var T0t=s(Fve);ITr=r(T0t,"funnel"),T0t.forEach(t),qTr=r(HSe," \u2014 "),RH=n(HSe,"A",{href:!0});var M0t=s(RH);NTr=r(M0t,"TFFunnelForTokenClassification"),M0t.forEach(t),jTr=r(HSe," (Funnel Transformer model)"),HSe.forEach(t),DTr=i(me),t4=n(me,"LI",{});var USe=s(t4);Tve=n(USe,"STRONG",{});var E0t=s(Tve);GTr=r(E0t,"layoutlm"),E0t.forEach(t),OTr=r(USe," \u2014 "),BH=n(USe,"A",{href:!0});var C0t=s(BH);VTr=r(C0t,"TFLayoutLMForTokenClassification"),C0t.forEach(t),XTr=r(USe," (LayoutLM model)"),USe.forEach(t),zTr=i(me),a4=n(me,"LI",{});var JSe=s(a4);Mve=n(JSe,"STRONG",{});var w0t=s(Mve);QTr=r(w0t,"longformer"),w0t.forEach(t),WTr=r(JSe," \u2014 "),PH=n(JSe,"A",{href:!0});var A0t=s(PH);HTr=r(A0t,"TFLongformerForTokenClassification"),A0t.forEach(t),UTr=r(JSe," (Longformer model)"),JSe.forEach(t),JTr=i(me),n4=n(me,"LI",{});var YSe=s(n4);Eve=n(YSe,"STRONG",{});var y0t=s(Eve);YTr=r(y0t,"mobilebert"),y0t.forEach(t),KTr=r(YSe," \u2014 "),IH=n(YSe,"A",{href:!0});var L0t=s(IH);ZTr=r(L0t,"TFMobileBertForTokenClassification"),L0t.forEach(t),e7r=r(YSe," (MobileBERT model)"),YSe.forEach(t),o7r=i(me),s4=n(me,"LI",{});var KSe=s(s4);Cve=n(KSe,"STRONG",{});var x0t=s(Cve);r7r=r(x0t,"mpnet"),x0t.forEach(t),t7r=r(KSe," \u2014 "),qH=n(KSe,"A",{href:!0});var $0t=s(qH);a7r=r($0t,"TFMPNetForTokenClassification"),$0t.forEach(t),n7r=r(KSe," (MPNet model)"),KSe.forEach(t),s7r=i(me),l4=n(me,"LI",{});var ZSe=s(l4);wve=n(ZSe,"STRONG",{});var k0t=s(wve);l7r=r(k0t,"rembert"),k0t.forEach(t),i7r=r(ZSe," \u2014 "),NH=n(ZSe,"A",{href:!0});var S0t=s(NH);d7r=r(S0t,"TFRemBertForTokenClassification"),S0t.forEach(t),c7r=r(ZSe," (RemBERT model)"),ZSe.forEach(t),f7r=i(me),i4=n(me,"LI",{});var eRe=s(i4);Ave=n(eRe,"STRONG",{});var R0t=s(Ave);m7r=r(R0t,"roberta"),R0t.forEach(t),g7r=r(eRe," \u2014 "),jH=n(eRe,"A",{href:!0});var B0t=s(jH);h7r=r(B0t,"TFRobertaForTokenClassification"),B0t.forEach(t),p7r=r(eRe," (RoBERTa model)"),eRe.forEach(t),u7r=i(me),d4=n(me,"LI",{});var oRe=s(d4);yve=n(oRe,"STRONG",{});var P0t=s(yve);_7r=r(P0t,"roformer"),P0t.forEach(t),b7r=r(oRe," \u2014 "),DH=n(oRe,"A",{href:!0});var I0t=s(DH);v7r=r(I0t,"TFRoFormerForTokenClassification"),I0t.forEach(t),F7r=r(oRe," (RoFormer model)"),oRe.forEach(t),T7r=i(me),c4=n(me,"LI",{});var rRe=s(c4);Lve=n(rRe,"STRONG",{});var q0t=s(Lve);M7r=r(q0t,"xlm"),q0t.forEach(t),E7r=r(rRe," \u2014 "),GH=n(rRe,"A",{href:!0});var N0t=s(GH);C7r=r(N0t,"TFXLMForTokenClassification"),N0t.forEach(t),w7r=r(rRe," (XLM model)"),rRe.forEach(t),A7r=i(me),f4=n(me,"LI",{});var tRe=s(f4);xve=n(tRe,"STRONG",{});var j0t=s(xve);y7r=r(j0t,"xlm-roberta"),j0t.forEach(t),L7r=r(tRe," \u2014 "),OH=n(tRe,"A",{href:!0});var D0t=s(OH);x7r=r(D0t,"TFXLMRobertaForTokenClassification"),D0t.forEach(t),$7r=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),k7r=i(me),m4=n(me,"LI",{});var aRe=s(m4);$ve=n(aRe,"STRONG",{});var G0t=s($ve);S7r=r(G0t,"xlnet"),G0t.forEach(t),R7r=r(aRe," \u2014 "),VH=n(aRe,"A",{href:!0});var O0t=s(VH);B7r=r(O0t,"TFXLNetForTokenClassification"),O0t.forEach(t),P7r=r(aRe," (XLNet model)"),aRe.forEach(t),me.forEach(t),I7r=i(kl),T(g4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),YIe=i(f),bc=n(f,"H2",{class:!0});var aje=s(bc);h4=n(aje,"A",{id:!0,class:!0,href:!0});var V0t=s(h4);kve=n(V0t,"SPAN",{});var X0t=s(kve);T(xL.$$.fragment,X0t),X0t.forEach(t),V0t.forEach(t),q7r=i(aje),Sve=n(aje,"SPAN",{});var z0t=s(Sve);N7r=r(z0t,"TFAutoModelForQuestionAnswering"),z0t.forEach(t),aje.forEach(t),KIe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T($L.$$.fragment,Sl),j7r=i(Sl),vc=n(Sl,"P",{});var _Z=s(vc);D7r=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XH=n(_Z,"A",{href:!0});var Q0t=s(XH);G7r=r(Q0t,"from_pretrained()"),Q0t.forEach(t),O7r=r(_Z," class method or the "),zH=n(_Z,"A",{href:!0});var W0t=s(zH);V7r=r(W0t,"from_config()"),W0t.forEach(t),X7r=r(_Z,` class
method.`),_Z.forEach(t),z7r=i(Sl),kL=n(Sl,"P",{});var nje=s(kL);Q7r=r(nje,"This class cannot be instantiated directly using "),Rve=n(nje,"CODE",{});var H0t=s(Rve);W7r=r(H0t,"__init__()"),H0t.forEach(t),H7r=r(nje," (throws an error)."),nje.forEach(t),U7r=i(Sl),It=n(Sl,"DIV",{class:!0});var mw=s(It);T(SL.$$.fragment,mw),J7r=i(mw),Bve=n(mw,"P",{});var U0t=s(Bve);Y7r=r(U0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),U0t.forEach(t),K7r=i(mw),Fc=n(mw,"P",{});var bZ=s(Fc);Z7r=r(bZ,`Note:
Loading a model from its configuration file does `),Pve=n(bZ,"STRONG",{});var J0t=s(Pve);eMr=r(J0t,"not"),J0t.forEach(t),oMr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(bZ,"A",{href:!0});var Y0t=s(QH);rMr=r(Y0t,"from_pretrained()"),Y0t.forEach(t),tMr=r(bZ," to load the model weights."),bZ.forEach(t),aMr=i(mw),T(p4.$$.fragment,mw),mw.forEach(t),nMr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(RL.$$.fragment,Rl),sMr=i(Rl),Ive=n(Rl,"P",{});var K0t=s(Ive);lMr=r(K0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),K0t.forEach(t),iMr=i(Rl),cn=n(Rl,"P",{});var gw=s(cn);dMr=r(gw,"The model class to instantiate is selected based on the "),qve=n(gw,"CODE",{});var Z0t=s(qve);cMr=r(Z0t,"model_type"),Z0t.forEach(t),fMr=r(gw,` property of the config object (either
passed as an argument or loaded from `),Nve=n(gw,"CODE",{});var eTt=s(Nve);mMr=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),gMr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(gw,"CODE",{});var oTt=s(jve);hMr=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),pMr=r(gw,":"),gw.forEach(t),uMr=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);u4=n(ge,"LI",{});var nRe=s(u4);Dve=n(nRe,"STRONG",{});var rTt=s(Dve);_Mr=r(rTt,"albert"),rTt.forEach(t),bMr=r(nRe," \u2014 "),WH=n(nRe,"A",{href:!0});var tTt=s(WH);vMr=r(tTt,"TFAlbertForQuestionAnswering"),tTt.forEach(t),FMr=r(nRe," (ALBERT model)"),nRe.forEach(t),TMr=i(ge),_4=n(ge,"LI",{});var sRe=s(_4);Gve=n(sRe,"STRONG",{});var aTt=s(Gve);MMr=r(aTt,"bert"),aTt.forEach(t),EMr=r(sRe," \u2014 "),HH=n(sRe,"A",{href:!0});var nTt=s(HH);CMr=r(nTt,"TFBertForQuestionAnswering"),nTt.forEach(t),wMr=r(sRe," (BERT model)"),sRe.forEach(t),AMr=i(ge),b4=n(ge,"LI",{});var lRe=s(b4);Ove=n(lRe,"STRONG",{});var sTt=s(Ove);yMr=r(sTt,"camembert"),sTt.forEach(t),LMr=r(lRe," \u2014 "),UH=n(lRe,"A",{href:!0});var lTt=s(UH);xMr=r(lTt,"TFCamembertForQuestionAnswering"),lTt.forEach(t),$Mr=r(lRe," (CamemBERT model)"),lRe.forEach(t),kMr=i(ge),v4=n(ge,"LI",{});var iRe=s(v4);Vve=n(iRe,"STRONG",{});var iTt=s(Vve);SMr=r(iTt,"convbert"),iTt.forEach(t),RMr=r(iRe," \u2014 "),JH=n(iRe,"A",{href:!0});var dTt=s(JH);BMr=r(dTt,"TFConvBertForQuestionAnswering"),dTt.forEach(t),PMr=r(iRe," (ConvBERT model)"),iRe.forEach(t),IMr=i(ge),F4=n(ge,"LI",{});var dRe=s(F4);Xve=n(dRe,"STRONG",{});var cTt=s(Xve);qMr=r(cTt,"deberta"),cTt.forEach(t),NMr=r(dRe," \u2014 "),YH=n(dRe,"A",{href:!0});var fTt=s(YH);jMr=r(fTt,"TFDebertaForQuestionAnswering"),fTt.forEach(t),DMr=r(dRe," (DeBERTa model)"),dRe.forEach(t),GMr=i(ge),T4=n(ge,"LI",{});var cRe=s(T4);zve=n(cRe,"STRONG",{});var mTt=s(zve);OMr=r(mTt,"deberta-v2"),mTt.forEach(t),VMr=r(cRe," \u2014 "),KH=n(cRe,"A",{href:!0});var gTt=s(KH);XMr=r(gTt,"TFDebertaV2ForQuestionAnswering"),gTt.forEach(t),zMr=r(cRe," (DeBERTa-v2 model)"),cRe.forEach(t),QMr=i(ge),M4=n(ge,"LI",{});var fRe=s(M4);Qve=n(fRe,"STRONG",{});var hTt=s(Qve);WMr=r(hTt,"distilbert"),hTt.forEach(t),HMr=r(fRe," \u2014 "),ZH=n(fRe,"A",{href:!0});var pTt=s(ZH);UMr=r(pTt,"TFDistilBertForQuestionAnswering"),pTt.forEach(t),JMr=r(fRe," (DistilBERT model)"),fRe.forEach(t),YMr=i(ge),E4=n(ge,"LI",{});var mRe=s(E4);Wve=n(mRe,"STRONG",{});var uTt=s(Wve);KMr=r(uTt,"electra"),uTt.forEach(t),ZMr=r(mRe," \u2014 "),eU=n(mRe,"A",{href:!0});var _Tt=s(eU);e4r=r(_Tt,"TFElectraForQuestionAnswering"),_Tt.forEach(t),o4r=r(mRe," (ELECTRA model)"),mRe.forEach(t),r4r=i(ge),C4=n(ge,"LI",{});var gRe=s(C4);Hve=n(gRe,"STRONG",{});var bTt=s(Hve);t4r=r(bTt,"flaubert"),bTt.forEach(t),a4r=r(gRe," \u2014 "),oU=n(gRe,"A",{href:!0});var vTt=s(oU);n4r=r(vTt,"TFFlaubertForQuestionAnsweringSimple"),vTt.forEach(t),s4r=r(gRe," (FlauBERT model)"),gRe.forEach(t),l4r=i(ge),w4=n(ge,"LI",{});var hRe=s(w4);Uve=n(hRe,"STRONG",{});var FTt=s(Uve);i4r=r(FTt,"funnel"),FTt.forEach(t),d4r=r(hRe," \u2014 "),rU=n(hRe,"A",{href:!0});var TTt=s(rU);c4r=r(TTt,"TFFunnelForQuestionAnswering"),TTt.forEach(t),f4r=r(hRe," (Funnel Transformer model)"),hRe.forEach(t),m4r=i(ge),A4=n(ge,"LI",{});var pRe=s(A4);Jve=n(pRe,"STRONG",{});var MTt=s(Jve);g4r=r(MTt,"gptj"),MTt.forEach(t),h4r=r(pRe," \u2014 "),tU=n(pRe,"A",{href:!0});var ETt=s(tU);p4r=r(ETt,"TFGPTJForQuestionAnswering"),ETt.forEach(t),u4r=r(pRe," (GPT-J model)"),pRe.forEach(t),_4r=i(ge),y4=n(ge,"LI",{});var uRe=s(y4);Yve=n(uRe,"STRONG",{});var CTt=s(Yve);b4r=r(CTt,"longformer"),CTt.forEach(t),v4r=r(uRe," \u2014 "),aU=n(uRe,"A",{href:!0});var wTt=s(aU);F4r=r(wTt,"TFLongformerForQuestionAnswering"),wTt.forEach(t),T4r=r(uRe," (Longformer model)"),uRe.forEach(t),M4r=i(ge),L4=n(ge,"LI",{});var _Re=s(L4);Kve=n(_Re,"STRONG",{});var ATt=s(Kve);E4r=r(ATt,"mobilebert"),ATt.forEach(t),C4r=r(_Re," \u2014 "),nU=n(_Re,"A",{href:!0});var yTt=s(nU);w4r=r(yTt,"TFMobileBertForQuestionAnswering"),yTt.forEach(t),A4r=r(_Re," (MobileBERT model)"),_Re.forEach(t),y4r=i(ge),x4=n(ge,"LI",{});var bRe=s(x4);Zve=n(bRe,"STRONG",{});var LTt=s(Zve);L4r=r(LTt,"mpnet"),LTt.forEach(t),x4r=r(bRe," \u2014 "),sU=n(bRe,"A",{href:!0});var xTt=s(sU);$4r=r(xTt,"TFMPNetForQuestionAnswering"),xTt.forEach(t),k4r=r(bRe," (MPNet model)"),bRe.forEach(t),S4r=i(ge),$4=n(ge,"LI",{});var vRe=s($4);eFe=n(vRe,"STRONG",{});var $Tt=s(eFe);R4r=r($Tt,"rembert"),$Tt.forEach(t),B4r=r(vRe," \u2014 "),lU=n(vRe,"A",{href:!0});var kTt=s(lU);P4r=r(kTt,"TFRemBertForQuestionAnswering"),kTt.forEach(t),I4r=r(vRe," (RemBERT model)"),vRe.forEach(t),q4r=i(ge),k4=n(ge,"LI",{});var FRe=s(k4);oFe=n(FRe,"STRONG",{});var STt=s(oFe);N4r=r(STt,"roberta"),STt.forEach(t),j4r=r(FRe," \u2014 "),iU=n(FRe,"A",{href:!0});var RTt=s(iU);D4r=r(RTt,"TFRobertaForQuestionAnswering"),RTt.forEach(t),G4r=r(FRe," (RoBERTa model)"),FRe.forEach(t),O4r=i(ge),S4=n(ge,"LI",{});var TRe=s(S4);rFe=n(TRe,"STRONG",{});var BTt=s(rFe);V4r=r(BTt,"roformer"),BTt.forEach(t),X4r=r(TRe," \u2014 "),dU=n(TRe,"A",{href:!0});var PTt=s(dU);z4r=r(PTt,"TFRoFormerForQuestionAnswering"),PTt.forEach(t),Q4r=r(TRe," (RoFormer model)"),TRe.forEach(t),W4r=i(ge),R4=n(ge,"LI",{});var MRe=s(R4);tFe=n(MRe,"STRONG",{});var ITt=s(tFe);H4r=r(ITt,"xlm"),ITt.forEach(t),U4r=r(MRe," \u2014 "),cU=n(MRe,"A",{href:!0});var qTt=s(cU);J4r=r(qTt,"TFXLMForQuestionAnsweringSimple"),qTt.forEach(t),Y4r=r(MRe," (XLM model)"),MRe.forEach(t),K4r=i(ge),B4=n(ge,"LI",{});var ERe=s(B4);aFe=n(ERe,"STRONG",{});var NTt=s(aFe);Z4r=r(NTt,"xlm-roberta"),NTt.forEach(t),eEr=r(ERe," \u2014 "),fU=n(ERe,"A",{href:!0});var jTt=s(fU);oEr=r(jTt,"TFXLMRobertaForQuestionAnswering"),jTt.forEach(t),rEr=r(ERe," (XLM-RoBERTa model)"),ERe.forEach(t),tEr=i(ge),P4=n(ge,"LI",{});var CRe=s(P4);nFe=n(CRe,"STRONG",{});var DTt=s(nFe);aEr=r(DTt,"xlnet"),DTt.forEach(t),nEr=r(CRe," \u2014 "),mU=n(CRe,"A",{href:!0});var GTt=s(mU);sEr=r(GTt,"TFXLNetForQuestionAnsweringSimple"),GTt.forEach(t),lEr=r(CRe," (XLNet model)"),CRe.forEach(t),ge.forEach(t),iEr=i(Rl),T(I4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ZIe=i(f),Tc=n(f,"H2",{class:!0});var sje=s(Tc);q4=n(sje,"A",{id:!0,class:!0,href:!0});var OTt=s(q4);sFe=n(OTt,"SPAN",{});var VTt=s(sFe);T(BL.$$.fragment,VTt),VTt.forEach(t),OTt.forEach(t),dEr=i(sje),lFe=n(sje,"SPAN",{});var XTt=s(lFe);cEr=r(XTt,"TFAutoModelForVision2Seq"),XTt.forEach(t),sje.forEach(t),eqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(PL.$$.fragment,Bl),fEr=i(Bl),Mc=n(Bl,"P",{});var vZ=s(Mc);mEr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gU=n(vZ,"A",{href:!0});var zTt=s(gU);gEr=r(zTt,"from_pretrained()"),zTt.forEach(t),hEr=r(vZ," class method or the "),hU=n(vZ,"A",{href:!0});var QTt=s(hU);pEr=r(QTt,"from_config()"),QTt.forEach(t),uEr=r(vZ,` class
method.`),vZ.forEach(t),_Er=i(Bl),IL=n(Bl,"P",{});var lje=s(IL);bEr=r(lje,"This class cannot be instantiated directly using "),iFe=n(lje,"CODE",{});var WTt=s(iFe);vEr=r(WTt,"__init__()"),WTt.forEach(t),FEr=r(lje," (throws an error)."),lje.forEach(t),TEr=i(Bl),qt=n(Bl,"DIV",{class:!0});var hw=s(qt);T(qL.$$.fragment,hw),MEr=i(hw),dFe=n(hw,"P",{});var HTt=s(dFe);EEr=r(HTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HTt.forEach(t),CEr=i(hw),Ec=n(hw,"P",{});var FZ=s(Ec);wEr=r(FZ,`Note:
Loading a model from its configuration file does `),cFe=n(FZ,"STRONG",{});var UTt=s(cFe);AEr=r(UTt,"not"),UTt.forEach(t),yEr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(FZ,"A",{href:!0});var JTt=s(pU);LEr=r(JTt,"from_pretrained()"),JTt.forEach(t),xEr=r(FZ," to load the model weights."),FZ.forEach(t),$Er=i(hw),T(N4.$$.fragment,hw),hw.forEach(t),kEr=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(NL.$$.fragment,Pl),SEr=i(Pl),fFe=n(Pl,"P",{});var YTt=s(fFe);REr=r(YTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YTt.forEach(t),BEr=i(Pl),fn=n(Pl,"P",{});var pw=s(fn);PEr=r(pw,"The model class to instantiate is selected based on the "),mFe=n(pw,"CODE",{});var KTt=s(mFe);IEr=r(KTt,"model_type"),KTt.forEach(t),qEr=r(pw,` property of the config object (either
passed as an argument or loaded from `),gFe=n(pw,"CODE",{});var ZTt=s(gFe);NEr=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),jEr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(pw,"CODE",{});var e7t=s(hFe);DEr=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),GEr=r(pw,":"),pw.forEach(t),OEr=i(Pl),pFe=n(Pl,"UL",{});var o7t=s(pFe);j4=n(o7t,"LI",{});var wRe=s(j4);uFe=n(wRe,"STRONG",{});var r7t=s(uFe);VEr=r(r7t,"vision-encoder-decoder"),r7t.forEach(t),XEr=r(wRe," \u2014 "),uU=n(wRe,"A",{href:!0});var t7t=s(uU);zEr=r(t7t,"TFVisionEncoderDecoderModel"),t7t.forEach(t),QEr=r(wRe," (Vision Encoder decoder model)"),wRe.forEach(t),o7t.forEach(t),WEr=i(Pl),T(D4.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),oqe=i(f),Cc=n(f,"H2",{class:!0});var ije=s(Cc);G4=n(ije,"A",{id:!0,class:!0,href:!0});var a7t=s(G4);_Fe=n(a7t,"SPAN",{});var n7t=s(_Fe);T(jL.$$.fragment,n7t),n7t.forEach(t),a7t.forEach(t),HEr=i(ije),bFe=n(ije,"SPAN",{});var s7t=s(bFe);UEr=r(s7t,"TFAutoModelForSpeechSeq2Seq"),s7t.forEach(t),ije.forEach(t),rqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(DL.$$.fragment,Il),JEr=i(Il),wc=n(Il,"P",{});var TZ=s(wc);YEr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_U=n(TZ,"A",{href:!0});var l7t=s(_U);KEr=r(l7t,"from_pretrained()"),l7t.forEach(t),ZEr=r(TZ," class method or the "),bU=n(TZ,"A",{href:!0});var i7t=s(bU);e5r=r(i7t,"from_config()"),i7t.forEach(t),o5r=r(TZ,` class
method.`),TZ.forEach(t),r5r=i(Il),GL=n(Il,"P",{});var dje=s(GL);t5r=r(dje,"This class cannot be instantiated directly using "),vFe=n(dje,"CODE",{});var d7t=s(vFe);a5r=r(d7t,"__init__()"),d7t.forEach(t),n5r=r(dje," (throws an error)."),dje.forEach(t),s5r=i(Il),Nt=n(Il,"DIV",{class:!0});var uw=s(Nt);T(OL.$$.fragment,uw),l5r=i(uw),FFe=n(uw,"P",{});var c7t=s(FFe);i5r=r(c7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),c7t.forEach(t),d5r=i(uw),Ac=n(uw,"P",{});var MZ=s(Ac);c5r=r(MZ,`Note:
Loading a model from its configuration file does `),TFe=n(MZ,"STRONG",{});var f7t=s(TFe);f5r=r(f7t,"not"),f7t.forEach(t),m5r=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(MZ,"A",{href:!0});var m7t=s(vU);g5r=r(m7t,"from_pretrained()"),m7t.forEach(t),h5r=r(MZ," to load the model weights."),MZ.forEach(t),p5r=i(uw),T(O4.$$.fragment,uw),uw.forEach(t),u5r=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(VL.$$.fragment,ql),_5r=i(ql),MFe=n(ql,"P",{});var g7t=s(MFe);b5r=r(g7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),g7t.forEach(t),v5r=i(ql),mn=n(ql,"P",{});var _w=s(mn);F5r=r(_w,"The model class to instantiate is selected based on the "),EFe=n(_w,"CODE",{});var h7t=s(EFe);T5r=r(h7t,"model_type"),h7t.forEach(t),M5r=r(_w,` property of the config object (either
passed as an argument or loaded from `),CFe=n(_w,"CODE",{});var p7t=s(CFe);E5r=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),C5r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(_w,"CODE",{});var u7t=s(wFe);w5r=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),A5r=r(_w,":"),_w.forEach(t),y5r=i(ql),AFe=n(ql,"UL",{});var _7t=s(AFe);V4=n(_7t,"LI",{});var ARe=s(V4);yFe=n(ARe,"STRONG",{});var b7t=s(yFe);L5r=r(b7t,"speech_to_text"),b7t.forEach(t),x5r=r(ARe," \u2014 "),FU=n(ARe,"A",{href:!0});var v7t=s(FU);$5r=r(v7t,"TFSpeech2TextForConditionalGeneration"),v7t.forEach(t),k5r=r(ARe," (Speech2Text model)"),ARe.forEach(t),_7t.forEach(t),S5r=i(ql),T(X4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),tqe=i(f),yc=n(f,"H2",{class:!0});var cje=s(yc);z4=n(cje,"A",{id:!0,class:!0,href:!0});var F7t=s(z4);LFe=n(F7t,"SPAN",{});var T7t=s(LFe);T(XL.$$.fragment,T7t),T7t.forEach(t),F7t.forEach(t),R5r=i(cje),xFe=n(cje,"SPAN",{});var M7t=s(xFe);B5r=r(M7t,"FlaxAutoModel"),M7t.forEach(t),cje.forEach(t),aqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(zL.$$.fragment,Nl),P5r=i(Nl),Lc=n(Nl,"P",{});var EZ=s(Lc);I5r=r(EZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TU=n(EZ,"A",{href:!0});var E7t=s(TU);q5r=r(E7t,"from_pretrained()"),E7t.forEach(t),N5r=r(EZ," class method or the "),MU=n(EZ,"A",{href:!0});var C7t=s(MU);j5r=r(C7t,"from_config()"),C7t.forEach(t),D5r=r(EZ,` class
method.`),EZ.forEach(t),G5r=i(Nl),QL=n(Nl,"P",{});var fje=s(QL);O5r=r(fje,"This class cannot be instantiated directly using "),$Fe=n(fje,"CODE",{});var w7t=s($Fe);V5r=r(w7t,"__init__()"),w7t.forEach(t),X5r=r(fje," (throws an error)."),fje.forEach(t),z5r=i(Nl),jt=n(Nl,"DIV",{class:!0});var bw=s(jt);T(WL.$$.fragment,bw),Q5r=i(bw),kFe=n(bw,"P",{});var A7t=s(kFe);W5r=r(A7t,"Instantiates one of the base model classes of the library from a configuration."),A7t.forEach(t),H5r=i(bw),xc=n(bw,"P",{});var CZ=s(xc);U5r=r(CZ,`Note:
Loading a model from its configuration file does `),SFe=n(CZ,"STRONG",{});var y7t=s(SFe);J5r=r(y7t,"not"),y7t.forEach(t),Y5r=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(CZ,"A",{href:!0});var L7t=s(EU);K5r=r(L7t,"from_pretrained()"),L7t.forEach(t),Z5r=r(CZ," to load the model weights."),CZ.forEach(t),eCr=i(bw),T(Q4.$$.fragment,bw),bw.forEach(t),oCr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(HL.$$.fragment,jl),rCr=i(jl),RFe=n(jl,"P",{});var x7t=s(RFe);tCr=r(x7t,"Instantiate one of the base model classes of the library from a pretrained model."),x7t.forEach(t),aCr=i(jl),gn=n(jl,"P",{});var vw=s(gn);nCr=r(vw,"The model class to instantiate is selected based on the "),BFe=n(vw,"CODE",{});var $7t=s(BFe);sCr=r($7t,"model_type"),$7t.forEach(t),lCr=r(vw,` property of the config object (either
passed as an argument or loaded from `),PFe=n(vw,"CODE",{});var k7t=s(PFe);iCr=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),dCr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(vw,"CODE",{});var S7t=s(IFe);cCr=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),fCr=r(vw,":"),vw.forEach(t),mCr=i(jl),oe=n(jl,"UL",{});var ae=s(oe);W4=n(ae,"LI",{});var yRe=s(W4);qFe=n(yRe,"STRONG",{});var R7t=s(qFe);gCr=r(R7t,"albert"),R7t.forEach(t),hCr=r(yRe," \u2014 "),CU=n(yRe,"A",{href:!0});var B7t=s(CU);pCr=r(B7t,"FlaxAlbertModel"),B7t.forEach(t),uCr=r(yRe," (ALBERT model)"),yRe.forEach(t),_Cr=i(ae),H4=n(ae,"LI",{});var LRe=s(H4);NFe=n(LRe,"STRONG",{});var P7t=s(NFe);bCr=r(P7t,"bart"),P7t.forEach(t),vCr=r(LRe," \u2014 "),wU=n(LRe,"A",{href:!0});var I7t=s(wU);FCr=r(I7t,"FlaxBartModel"),I7t.forEach(t),TCr=r(LRe," (BART model)"),LRe.forEach(t),MCr=i(ae),U4=n(ae,"LI",{});var xRe=s(U4);jFe=n(xRe,"STRONG",{});var q7t=s(jFe);ECr=r(q7t,"beit"),q7t.forEach(t),CCr=r(xRe," \u2014 "),AU=n(xRe,"A",{href:!0});var N7t=s(AU);wCr=r(N7t,"FlaxBeitModel"),N7t.forEach(t),ACr=r(xRe," (BEiT model)"),xRe.forEach(t),yCr=i(ae),J4=n(ae,"LI",{});var $Re=s(J4);DFe=n($Re,"STRONG",{});var j7t=s(DFe);LCr=r(j7t,"bert"),j7t.forEach(t),xCr=r($Re," \u2014 "),yU=n($Re,"A",{href:!0});var D7t=s(yU);$Cr=r(D7t,"FlaxBertModel"),D7t.forEach(t),kCr=r($Re," (BERT model)"),$Re.forEach(t),SCr=i(ae),Y4=n(ae,"LI",{});var kRe=s(Y4);GFe=n(kRe,"STRONG",{});var G7t=s(GFe);RCr=r(G7t,"big_bird"),G7t.forEach(t),BCr=r(kRe," \u2014 "),LU=n(kRe,"A",{href:!0});var O7t=s(LU);PCr=r(O7t,"FlaxBigBirdModel"),O7t.forEach(t),ICr=r(kRe," (BigBird model)"),kRe.forEach(t),qCr=i(ae),K4=n(ae,"LI",{});var SRe=s(K4);OFe=n(SRe,"STRONG",{});var V7t=s(OFe);NCr=r(V7t,"blenderbot"),V7t.forEach(t),jCr=r(SRe," \u2014 "),xU=n(SRe,"A",{href:!0});var X7t=s(xU);DCr=r(X7t,"FlaxBlenderbotModel"),X7t.forEach(t),GCr=r(SRe," (Blenderbot model)"),SRe.forEach(t),OCr=i(ae),Z4=n(ae,"LI",{});var RRe=s(Z4);VFe=n(RRe,"STRONG",{});var z7t=s(VFe);VCr=r(z7t,"blenderbot-small"),z7t.forEach(t),XCr=r(RRe," \u2014 "),$U=n(RRe,"A",{href:!0});var Q7t=s($U);zCr=r(Q7t,"FlaxBlenderbotSmallModel"),Q7t.forEach(t),QCr=r(RRe," (BlenderbotSmall model)"),RRe.forEach(t),WCr=i(ae),eE=n(ae,"LI",{});var BRe=s(eE);XFe=n(BRe,"STRONG",{});var W7t=s(XFe);HCr=r(W7t,"clip"),W7t.forEach(t),UCr=r(BRe," \u2014 "),kU=n(BRe,"A",{href:!0});var H7t=s(kU);JCr=r(H7t,"FlaxCLIPModel"),H7t.forEach(t),YCr=r(BRe," (CLIP model)"),BRe.forEach(t),KCr=i(ae),oE=n(ae,"LI",{});var PRe=s(oE);zFe=n(PRe,"STRONG",{});var U7t=s(zFe);ZCr=r(U7t,"distilbert"),U7t.forEach(t),e3r=r(PRe," \u2014 "),SU=n(PRe,"A",{href:!0});var J7t=s(SU);o3r=r(J7t,"FlaxDistilBertModel"),J7t.forEach(t),r3r=r(PRe," (DistilBERT model)"),PRe.forEach(t),t3r=i(ae),rE=n(ae,"LI",{});var IRe=s(rE);QFe=n(IRe,"STRONG",{});var Y7t=s(QFe);a3r=r(Y7t,"electra"),Y7t.forEach(t),n3r=r(IRe," \u2014 "),RU=n(IRe,"A",{href:!0});var K7t=s(RU);s3r=r(K7t,"FlaxElectraModel"),K7t.forEach(t),l3r=r(IRe," (ELECTRA model)"),IRe.forEach(t),i3r=i(ae),tE=n(ae,"LI",{});var qRe=s(tE);WFe=n(qRe,"STRONG",{});var Z7t=s(WFe);d3r=r(Z7t,"gpt2"),Z7t.forEach(t),c3r=r(qRe," \u2014 "),BU=n(qRe,"A",{href:!0});var eMt=s(BU);f3r=r(eMt,"FlaxGPT2Model"),eMt.forEach(t),m3r=r(qRe," (OpenAI GPT-2 model)"),qRe.forEach(t),g3r=i(ae),aE=n(ae,"LI",{});var NRe=s(aE);HFe=n(NRe,"STRONG",{});var oMt=s(HFe);h3r=r(oMt,"gpt_neo"),oMt.forEach(t),p3r=r(NRe," \u2014 "),PU=n(NRe,"A",{href:!0});var rMt=s(PU);u3r=r(rMt,"FlaxGPTNeoModel"),rMt.forEach(t),_3r=r(NRe," (GPT Neo model)"),NRe.forEach(t),b3r=i(ae),nE=n(ae,"LI",{});var jRe=s(nE);UFe=n(jRe,"STRONG",{});var tMt=s(UFe);v3r=r(tMt,"gptj"),tMt.forEach(t),F3r=r(jRe," \u2014 "),IU=n(jRe,"A",{href:!0});var aMt=s(IU);T3r=r(aMt,"FlaxGPTJModel"),aMt.forEach(t),M3r=r(jRe," (GPT-J model)"),jRe.forEach(t),E3r=i(ae),sE=n(ae,"LI",{});var DRe=s(sE);JFe=n(DRe,"STRONG",{});var nMt=s(JFe);C3r=r(nMt,"marian"),nMt.forEach(t),w3r=r(DRe," \u2014 "),qU=n(DRe,"A",{href:!0});var sMt=s(qU);A3r=r(sMt,"FlaxMarianModel"),sMt.forEach(t),y3r=r(DRe," (Marian model)"),DRe.forEach(t),L3r=i(ae),lE=n(ae,"LI",{});var GRe=s(lE);YFe=n(GRe,"STRONG",{});var lMt=s(YFe);x3r=r(lMt,"mbart"),lMt.forEach(t),$3r=r(GRe," \u2014 "),NU=n(GRe,"A",{href:!0});var iMt=s(NU);k3r=r(iMt,"FlaxMBartModel"),iMt.forEach(t),S3r=r(GRe," (mBART model)"),GRe.forEach(t),R3r=i(ae),iE=n(ae,"LI",{});var ORe=s(iE);KFe=n(ORe,"STRONG",{});var dMt=s(KFe);B3r=r(dMt,"mt5"),dMt.forEach(t),P3r=r(ORe," \u2014 "),jU=n(ORe,"A",{href:!0});var cMt=s(jU);I3r=r(cMt,"FlaxMT5Model"),cMt.forEach(t),q3r=r(ORe," (mT5 model)"),ORe.forEach(t),N3r=i(ae),dE=n(ae,"LI",{});var VRe=s(dE);ZFe=n(VRe,"STRONG",{});var fMt=s(ZFe);j3r=r(fMt,"pegasus"),fMt.forEach(t),D3r=r(VRe," \u2014 "),DU=n(VRe,"A",{href:!0});var mMt=s(DU);G3r=r(mMt,"FlaxPegasusModel"),mMt.forEach(t),O3r=r(VRe," (Pegasus model)"),VRe.forEach(t),V3r=i(ae),cE=n(ae,"LI",{});var XRe=s(cE);e0e=n(XRe,"STRONG",{});var gMt=s(e0e);X3r=r(gMt,"roberta"),gMt.forEach(t),z3r=r(XRe," \u2014 "),GU=n(XRe,"A",{href:!0});var hMt=s(GU);Q3r=r(hMt,"FlaxRobertaModel"),hMt.forEach(t),W3r=r(XRe," (RoBERTa model)"),XRe.forEach(t),H3r=i(ae),fE=n(ae,"LI",{});var zRe=s(fE);o0e=n(zRe,"STRONG",{});var pMt=s(o0e);U3r=r(pMt,"roformer"),pMt.forEach(t),J3r=r(zRe," \u2014 "),OU=n(zRe,"A",{href:!0});var uMt=s(OU);Y3r=r(uMt,"FlaxRoFormerModel"),uMt.forEach(t),K3r=r(zRe," (RoFormer model)"),zRe.forEach(t),Z3r=i(ae),mE=n(ae,"LI",{});var QRe=s(mE);r0e=n(QRe,"STRONG",{});var _Mt=s(r0e);ewr=r(_Mt,"t5"),_Mt.forEach(t),owr=r(QRe," \u2014 "),VU=n(QRe,"A",{href:!0});var bMt=s(VU);rwr=r(bMt,"FlaxT5Model"),bMt.forEach(t),twr=r(QRe," (T5 model)"),QRe.forEach(t),awr=i(ae),gE=n(ae,"LI",{});var WRe=s(gE);t0e=n(WRe,"STRONG",{});var vMt=s(t0e);nwr=r(vMt,"vision-text-dual-encoder"),vMt.forEach(t),swr=r(WRe," \u2014 "),XU=n(WRe,"A",{href:!0});var FMt=s(XU);lwr=r(FMt,"FlaxVisionTextDualEncoderModel"),FMt.forEach(t),iwr=r(WRe," (VisionTextDualEncoder model)"),WRe.forEach(t),dwr=i(ae),hE=n(ae,"LI",{});var HRe=s(hE);a0e=n(HRe,"STRONG",{});var TMt=s(a0e);cwr=r(TMt,"vit"),TMt.forEach(t),fwr=r(HRe," \u2014 "),zU=n(HRe,"A",{href:!0});var MMt=s(zU);mwr=r(MMt,"FlaxViTModel"),MMt.forEach(t),gwr=r(HRe," (ViT model)"),HRe.forEach(t),hwr=i(ae),pE=n(ae,"LI",{});var URe=s(pE);n0e=n(URe,"STRONG",{});var EMt=s(n0e);pwr=r(EMt,"wav2vec2"),EMt.forEach(t),uwr=r(URe," \u2014 "),QU=n(URe,"A",{href:!0});var CMt=s(QU);_wr=r(CMt,"FlaxWav2Vec2Model"),CMt.forEach(t),bwr=r(URe," (Wav2Vec2 model)"),URe.forEach(t),vwr=i(ae),uE=n(ae,"LI",{});var JRe=s(uE);s0e=n(JRe,"STRONG",{});var wMt=s(s0e);Fwr=r(wMt,"xglm"),wMt.forEach(t),Twr=r(JRe," \u2014 "),WU=n(JRe,"A",{href:!0});var AMt=s(WU);Mwr=r(AMt,"FlaxXGLMModel"),AMt.forEach(t),Ewr=r(JRe," (XGLM model)"),JRe.forEach(t),Cwr=i(ae),_E=n(ae,"LI",{});var YRe=s(_E);l0e=n(YRe,"STRONG",{});var yMt=s(l0e);wwr=r(yMt,"xlm-roberta"),yMt.forEach(t),Awr=r(YRe," \u2014 "),HU=n(YRe,"A",{href:!0});var LMt=s(HU);ywr=r(LMt,"FlaxXLMRobertaModel"),LMt.forEach(t),Lwr=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),ae.forEach(t),xwr=i(jl),T(bE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),nqe=i(f),$c=n(f,"H2",{class:!0});var mje=s($c);vE=n(mje,"A",{id:!0,class:!0,href:!0});var xMt=s(vE);i0e=n(xMt,"SPAN",{});var $Mt=s(i0e);T(UL.$$.fragment,$Mt),$Mt.forEach(t),xMt.forEach(t),$wr=i(mje),d0e=n(mje,"SPAN",{});var kMt=s(d0e);kwr=r(kMt,"FlaxAutoModelForCausalLM"),kMt.forEach(t),mje.forEach(t),sqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(JL.$$.fragment,Dl),Swr=i(Dl),kc=n(Dl,"P",{});var wZ=s(kc);Rwr=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UU=n(wZ,"A",{href:!0});var SMt=s(UU);Bwr=r(SMt,"from_pretrained()"),SMt.forEach(t),Pwr=r(wZ," class method or the "),JU=n(wZ,"A",{href:!0});var RMt=s(JU);Iwr=r(RMt,"from_config()"),RMt.forEach(t),qwr=r(wZ,` class
method.`),wZ.forEach(t),Nwr=i(Dl),YL=n(Dl,"P",{});var gje=s(YL);jwr=r(gje,"This class cannot be instantiated directly using "),c0e=n(gje,"CODE",{});var BMt=s(c0e);Dwr=r(BMt,"__init__()"),BMt.forEach(t),Gwr=r(gje," (throws an error)."),gje.forEach(t),Owr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var Fw=s(Dt);T(KL.$$.fragment,Fw),Vwr=i(Fw),f0e=n(Fw,"P",{});var PMt=s(f0e);Xwr=r(PMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PMt.forEach(t),zwr=i(Fw),Sc=n(Fw,"P",{});var AZ=s(Sc);Qwr=r(AZ,`Note:
Loading a model from its configuration file does `),m0e=n(AZ,"STRONG",{});var IMt=s(m0e);Wwr=r(IMt,"not"),IMt.forEach(t),Hwr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(AZ,"A",{href:!0});var qMt=s(YU);Uwr=r(qMt,"from_pretrained()"),qMt.forEach(t),Jwr=r(AZ," to load the model weights."),AZ.forEach(t),Ywr=i(Fw),T(FE.$$.fragment,Fw),Fw.forEach(t),Kwr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(ZL.$$.fragment,Gl),Zwr=i(Gl),g0e=n(Gl,"P",{});var NMt=s(g0e);eAr=r(NMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NMt.forEach(t),oAr=i(Gl),hn=n(Gl,"P",{});var Tw=s(hn);rAr=r(Tw,"The model class to instantiate is selected based on the "),h0e=n(Tw,"CODE",{});var jMt=s(h0e);tAr=r(jMt,"model_type"),jMt.forEach(t),aAr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),p0e=n(Tw,"CODE",{});var DMt=s(p0e);nAr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),sAr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=n(Tw,"CODE",{});var GMt=s(u0e);lAr=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),iAr=r(Tw,":"),Tw.forEach(t),dAr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);TE=n(Oe,"LI",{});var KRe=s(TE);_0e=n(KRe,"STRONG",{});var OMt=s(_0e);cAr=r(OMt,"bart"),OMt.forEach(t),fAr=r(KRe," \u2014 "),KU=n(KRe,"A",{href:!0});var VMt=s(KU);mAr=r(VMt,"FlaxBartForCausalLM"),VMt.forEach(t),gAr=r(KRe," (BART model)"),KRe.forEach(t),hAr=i(Oe),ME=n(Oe,"LI",{});var ZRe=s(ME);b0e=n(ZRe,"STRONG",{});var XMt=s(b0e);pAr=r(XMt,"bert"),XMt.forEach(t),uAr=r(ZRe," \u2014 "),ZU=n(ZRe,"A",{href:!0});var zMt=s(ZU);_Ar=r(zMt,"FlaxBertForCausalLM"),zMt.forEach(t),bAr=r(ZRe," (BERT model)"),ZRe.forEach(t),vAr=i(Oe),EE=n(Oe,"LI",{});var eBe=s(EE);v0e=n(eBe,"STRONG",{});var QMt=s(v0e);FAr=r(QMt,"big_bird"),QMt.forEach(t),TAr=r(eBe," \u2014 "),eJ=n(eBe,"A",{href:!0});var WMt=s(eJ);MAr=r(WMt,"FlaxBigBirdForCausalLM"),WMt.forEach(t),EAr=r(eBe," (BigBird model)"),eBe.forEach(t),CAr=i(Oe),CE=n(Oe,"LI",{});var oBe=s(CE);F0e=n(oBe,"STRONG",{});var HMt=s(F0e);wAr=r(HMt,"electra"),HMt.forEach(t),AAr=r(oBe," \u2014 "),oJ=n(oBe,"A",{href:!0});var UMt=s(oJ);yAr=r(UMt,"FlaxElectraForCausalLM"),UMt.forEach(t),LAr=r(oBe," (ELECTRA model)"),oBe.forEach(t),xAr=i(Oe),wE=n(Oe,"LI",{});var rBe=s(wE);T0e=n(rBe,"STRONG",{});var JMt=s(T0e);$Ar=r(JMt,"gpt2"),JMt.forEach(t),kAr=r(rBe," \u2014 "),rJ=n(rBe,"A",{href:!0});var YMt=s(rJ);SAr=r(YMt,"FlaxGPT2LMHeadModel"),YMt.forEach(t),RAr=r(rBe," (OpenAI GPT-2 model)"),rBe.forEach(t),BAr=i(Oe),AE=n(Oe,"LI",{});var tBe=s(AE);M0e=n(tBe,"STRONG",{});var KMt=s(M0e);PAr=r(KMt,"gpt_neo"),KMt.forEach(t),IAr=r(tBe," \u2014 "),tJ=n(tBe,"A",{href:!0});var ZMt=s(tJ);qAr=r(ZMt,"FlaxGPTNeoForCausalLM"),ZMt.forEach(t),NAr=r(tBe," (GPT Neo model)"),tBe.forEach(t),jAr=i(Oe),yE=n(Oe,"LI",{});var aBe=s(yE);E0e=n(aBe,"STRONG",{});var e4t=s(E0e);DAr=r(e4t,"gptj"),e4t.forEach(t),GAr=r(aBe," \u2014 "),aJ=n(aBe,"A",{href:!0});var o4t=s(aJ);OAr=r(o4t,"FlaxGPTJForCausalLM"),o4t.forEach(t),VAr=r(aBe," (GPT-J model)"),aBe.forEach(t),XAr=i(Oe),LE=n(Oe,"LI",{});var nBe=s(LE);C0e=n(nBe,"STRONG",{});var r4t=s(C0e);zAr=r(r4t,"roberta"),r4t.forEach(t),QAr=r(nBe," \u2014 "),nJ=n(nBe,"A",{href:!0});var t4t=s(nJ);WAr=r(t4t,"FlaxRobertaForCausalLM"),t4t.forEach(t),HAr=r(nBe," (RoBERTa model)"),nBe.forEach(t),UAr=i(Oe),xE=n(Oe,"LI",{});var sBe=s(xE);w0e=n(sBe,"STRONG",{});var a4t=s(w0e);JAr=r(a4t,"xglm"),a4t.forEach(t),YAr=r(sBe," \u2014 "),sJ=n(sBe,"A",{href:!0});var n4t=s(sJ);KAr=r(n4t,"FlaxXGLMForCausalLM"),n4t.forEach(t),ZAr=r(sBe," (XGLM model)"),sBe.forEach(t),Oe.forEach(t),e6r=i(Gl),T($E.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),lqe=i(f),Rc=n(f,"H2",{class:!0});var hje=s(Rc);kE=n(hje,"A",{id:!0,class:!0,href:!0});var s4t=s(kE);A0e=n(s4t,"SPAN",{});var l4t=s(A0e);T(ex.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),o6r=i(hje),y0e=n(hje,"SPAN",{});var i4t=s(y0e);r6r=r(i4t,"FlaxAutoModelForPreTraining"),i4t.forEach(t),hje.forEach(t),iqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(ox.$$.fragment,Ol),t6r=i(Ol),Bc=n(Ol,"P",{});var yZ=s(Bc);a6r=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lJ=n(yZ,"A",{href:!0});var d4t=s(lJ);n6r=r(d4t,"from_pretrained()"),d4t.forEach(t),s6r=r(yZ," class method or the "),iJ=n(yZ,"A",{href:!0});var c4t=s(iJ);l6r=r(c4t,"from_config()"),c4t.forEach(t),i6r=r(yZ,` class
method.`),yZ.forEach(t),d6r=i(Ol),rx=n(Ol,"P",{});var pje=s(rx);c6r=r(pje,"This class cannot be instantiated directly using "),L0e=n(pje,"CODE",{});var f4t=s(L0e);f6r=r(f4t,"__init__()"),f4t.forEach(t),m6r=r(pje," (throws an error)."),pje.forEach(t),g6r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var Mw=s(Gt);T(tx.$$.fragment,Mw),h6r=i(Mw),x0e=n(Mw,"P",{});var m4t=s(x0e);p6r=r(m4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m4t.forEach(t),u6r=i(Mw),Pc=n(Mw,"P",{});var LZ=s(Pc);_6r=r(LZ,`Note:
Loading a model from its configuration file does `),$0e=n(LZ,"STRONG",{});var g4t=s($0e);b6r=r(g4t,"not"),g4t.forEach(t),v6r=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(LZ,"A",{href:!0});var h4t=s(dJ);F6r=r(h4t,"from_pretrained()"),h4t.forEach(t),T6r=r(LZ," to load the model weights."),LZ.forEach(t),M6r=i(Mw),T(SE.$$.fragment,Mw),Mw.forEach(t),E6r=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(ax.$$.fragment,Vl),C6r=i(Vl),k0e=n(Vl,"P",{});var p4t=s(k0e);w6r=r(p4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p4t.forEach(t),A6r=i(Vl),pn=n(Vl,"P",{});var Ew=s(pn);y6r=r(Ew,"The model class to instantiate is selected based on the "),S0e=n(Ew,"CODE",{});var u4t=s(S0e);L6r=r(u4t,"model_type"),u4t.forEach(t),x6r=r(Ew,` property of the config object (either
passed as an argument or loaded from `),R0e=n(Ew,"CODE",{});var _4t=s(R0e);$6r=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),k6r=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(Ew,"CODE",{});var b4t=s(B0e);S6r=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),R6r=r(Ew,":"),Ew.forEach(t),B6r=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);RE=n(we,"LI",{});var lBe=s(RE);P0e=n(lBe,"STRONG",{});var v4t=s(P0e);P6r=r(v4t,"albert"),v4t.forEach(t),I6r=r(lBe," \u2014 "),cJ=n(lBe,"A",{href:!0});var F4t=s(cJ);q6r=r(F4t,"FlaxAlbertForPreTraining"),F4t.forEach(t),N6r=r(lBe," (ALBERT model)"),lBe.forEach(t),j6r=i(we),BE=n(we,"LI",{});var iBe=s(BE);I0e=n(iBe,"STRONG",{});var T4t=s(I0e);D6r=r(T4t,"bart"),T4t.forEach(t),G6r=r(iBe," \u2014 "),fJ=n(iBe,"A",{href:!0});var M4t=s(fJ);O6r=r(M4t,"FlaxBartForConditionalGeneration"),M4t.forEach(t),V6r=r(iBe," (BART model)"),iBe.forEach(t),X6r=i(we),PE=n(we,"LI",{});var dBe=s(PE);q0e=n(dBe,"STRONG",{});var E4t=s(q0e);z6r=r(E4t,"bert"),E4t.forEach(t),Q6r=r(dBe," \u2014 "),mJ=n(dBe,"A",{href:!0});var C4t=s(mJ);W6r=r(C4t,"FlaxBertForPreTraining"),C4t.forEach(t),H6r=r(dBe," (BERT model)"),dBe.forEach(t),U6r=i(we),IE=n(we,"LI",{});var cBe=s(IE);N0e=n(cBe,"STRONG",{});var w4t=s(N0e);J6r=r(w4t,"big_bird"),w4t.forEach(t),Y6r=r(cBe," \u2014 "),gJ=n(cBe,"A",{href:!0});var A4t=s(gJ);K6r=r(A4t,"FlaxBigBirdForPreTraining"),A4t.forEach(t),Z6r=r(cBe," (BigBird model)"),cBe.forEach(t),eyr=i(we),qE=n(we,"LI",{});var fBe=s(qE);j0e=n(fBe,"STRONG",{});var y4t=s(j0e);oyr=r(y4t,"electra"),y4t.forEach(t),ryr=r(fBe," \u2014 "),hJ=n(fBe,"A",{href:!0});var L4t=s(hJ);tyr=r(L4t,"FlaxElectraForPreTraining"),L4t.forEach(t),ayr=r(fBe," (ELECTRA model)"),fBe.forEach(t),nyr=i(we),NE=n(we,"LI",{});var mBe=s(NE);D0e=n(mBe,"STRONG",{});var x4t=s(D0e);syr=r(x4t,"mbart"),x4t.forEach(t),lyr=r(mBe," \u2014 "),pJ=n(mBe,"A",{href:!0});var $4t=s(pJ);iyr=r($4t,"FlaxMBartForConditionalGeneration"),$4t.forEach(t),dyr=r(mBe," (mBART model)"),mBe.forEach(t),cyr=i(we),jE=n(we,"LI",{});var gBe=s(jE);G0e=n(gBe,"STRONG",{});var k4t=s(G0e);fyr=r(k4t,"mt5"),k4t.forEach(t),myr=r(gBe," \u2014 "),uJ=n(gBe,"A",{href:!0});var S4t=s(uJ);gyr=r(S4t,"FlaxMT5ForConditionalGeneration"),S4t.forEach(t),hyr=r(gBe," (mT5 model)"),gBe.forEach(t),pyr=i(we),DE=n(we,"LI",{});var hBe=s(DE);O0e=n(hBe,"STRONG",{});var R4t=s(O0e);uyr=r(R4t,"roberta"),R4t.forEach(t),_yr=r(hBe," \u2014 "),_J=n(hBe,"A",{href:!0});var B4t=s(_J);byr=r(B4t,"FlaxRobertaForMaskedLM"),B4t.forEach(t),vyr=r(hBe," (RoBERTa model)"),hBe.forEach(t),Fyr=i(we),GE=n(we,"LI",{});var pBe=s(GE);V0e=n(pBe,"STRONG",{});var P4t=s(V0e);Tyr=r(P4t,"roformer"),P4t.forEach(t),Myr=r(pBe," \u2014 "),bJ=n(pBe,"A",{href:!0});var I4t=s(bJ);Eyr=r(I4t,"FlaxRoFormerForMaskedLM"),I4t.forEach(t),Cyr=r(pBe," (RoFormer model)"),pBe.forEach(t),wyr=i(we),OE=n(we,"LI",{});var uBe=s(OE);X0e=n(uBe,"STRONG",{});var q4t=s(X0e);Ayr=r(q4t,"t5"),q4t.forEach(t),yyr=r(uBe," \u2014 "),vJ=n(uBe,"A",{href:!0});var N4t=s(vJ);Lyr=r(N4t,"FlaxT5ForConditionalGeneration"),N4t.forEach(t),xyr=r(uBe," (T5 model)"),uBe.forEach(t),$yr=i(we),VE=n(we,"LI",{});var _Be=s(VE);z0e=n(_Be,"STRONG",{});var j4t=s(z0e);kyr=r(j4t,"wav2vec2"),j4t.forEach(t),Syr=r(_Be," \u2014 "),FJ=n(_Be,"A",{href:!0});var D4t=s(FJ);Ryr=r(D4t,"FlaxWav2Vec2ForPreTraining"),D4t.forEach(t),Byr=r(_Be," (Wav2Vec2 model)"),_Be.forEach(t),Pyr=i(we),XE=n(we,"LI",{});var bBe=s(XE);Q0e=n(bBe,"STRONG",{});var G4t=s(Q0e);Iyr=r(G4t,"xlm-roberta"),G4t.forEach(t),qyr=r(bBe," \u2014 "),TJ=n(bBe,"A",{href:!0});var O4t=s(TJ);Nyr=r(O4t,"FlaxXLMRobertaForMaskedLM"),O4t.forEach(t),jyr=r(bBe," (XLM-RoBERTa model)"),bBe.forEach(t),we.forEach(t),Dyr=i(Vl),T(zE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),dqe=i(f),Ic=n(f,"H2",{class:!0});var uje=s(Ic);QE=n(uje,"A",{id:!0,class:!0,href:!0});var V4t=s(QE);W0e=n(V4t,"SPAN",{});var X4t=s(W0e);T(nx.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),Gyr=i(uje),H0e=n(uje,"SPAN",{});var z4t=s(H0e);Oyr=r(z4t,"FlaxAutoModelForMaskedLM"),z4t.forEach(t),uje.forEach(t),cqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(sx.$$.fragment,Xl),Vyr=i(Xl),qc=n(Xl,"P",{});var xZ=s(qc);Xyr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MJ=n(xZ,"A",{href:!0});var Q4t=s(MJ);zyr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),Qyr=r(xZ," class method or the "),EJ=n(xZ,"A",{href:!0});var W4t=s(EJ);Wyr=r(W4t,"from_config()"),W4t.forEach(t),Hyr=r(xZ,` class
method.`),xZ.forEach(t),Uyr=i(Xl),lx=n(Xl,"P",{});var _je=s(lx);Jyr=r(_je,"This class cannot be instantiated directly using "),U0e=n(_je,"CODE",{});var H4t=s(U0e);Yyr=r(H4t,"__init__()"),H4t.forEach(t),Kyr=r(_je," (throws an error)."),_je.forEach(t),Zyr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var Cw=s(Ot);T(ix.$$.fragment,Cw),eLr=i(Cw),J0e=n(Cw,"P",{});var U4t=s(J0e);oLr=r(U4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),U4t.forEach(t),rLr=i(Cw),Nc=n(Cw,"P",{});var $Z=s(Nc);tLr=r($Z,`Note:
Loading a model from its configuration file does `),Y0e=n($Z,"STRONG",{});var J4t=s(Y0e);aLr=r(J4t,"not"),J4t.forEach(t),nLr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n($Z,"A",{href:!0});var Y4t=s(CJ);sLr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),lLr=r($Z," to load the model weights."),$Z.forEach(t),iLr=i(Cw),T(WE.$$.fragment,Cw),Cw.forEach(t),dLr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(dx.$$.fragment,zl),cLr=i(zl),K0e=n(zl,"P",{});var K4t=s(K0e);fLr=r(K4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K4t.forEach(t),mLr=i(zl),un=n(zl,"P",{});var ww=s(un);gLr=r(ww,"The model class to instantiate is selected based on the "),Z0e=n(ww,"CODE",{});var Z4t=s(Z0e);hLr=r(Z4t,"model_type"),Z4t.forEach(t),pLr=r(ww,` property of the config object (either
passed as an argument or loaded from `),eTe=n(ww,"CODE",{});var eEt=s(eTe);uLr=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),_Lr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(ww,"CODE",{});var oEt=s(oTe);bLr=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),vLr=r(ww,":"),ww.forEach(t),FLr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);HE=n(Be,"LI",{});var vBe=s(HE);rTe=n(vBe,"STRONG",{});var rEt=s(rTe);TLr=r(rEt,"albert"),rEt.forEach(t),MLr=r(vBe," \u2014 "),wJ=n(vBe,"A",{href:!0});var tEt=s(wJ);ELr=r(tEt,"FlaxAlbertForMaskedLM"),tEt.forEach(t),CLr=r(vBe," (ALBERT model)"),vBe.forEach(t),wLr=i(Be),UE=n(Be,"LI",{});var FBe=s(UE);tTe=n(FBe,"STRONG",{});var aEt=s(tTe);ALr=r(aEt,"bart"),aEt.forEach(t),yLr=r(FBe," \u2014 "),AJ=n(FBe,"A",{href:!0});var nEt=s(AJ);LLr=r(nEt,"FlaxBartForConditionalGeneration"),nEt.forEach(t),xLr=r(FBe," (BART model)"),FBe.forEach(t),$Lr=i(Be),JE=n(Be,"LI",{});var TBe=s(JE);aTe=n(TBe,"STRONG",{});var sEt=s(aTe);kLr=r(sEt,"bert"),sEt.forEach(t),SLr=r(TBe," \u2014 "),yJ=n(TBe,"A",{href:!0});var lEt=s(yJ);RLr=r(lEt,"FlaxBertForMaskedLM"),lEt.forEach(t),BLr=r(TBe," (BERT model)"),TBe.forEach(t),PLr=i(Be),YE=n(Be,"LI",{});var MBe=s(YE);nTe=n(MBe,"STRONG",{});var iEt=s(nTe);ILr=r(iEt,"big_bird"),iEt.forEach(t),qLr=r(MBe," \u2014 "),LJ=n(MBe,"A",{href:!0});var dEt=s(LJ);NLr=r(dEt,"FlaxBigBirdForMaskedLM"),dEt.forEach(t),jLr=r(MBe," (BigBird model)"),MBe.forEach(t),DLr=i(Be),KE=n(Be,"LI",{});var EBe=s(KE);sTe=n(EBe,"STRONG",{});var cEt=s(sTe);GLr=r(cEt,"distilbert"),cEt.forEach(t),OLr=r(EBe," \u2014 "),xJ=n(EBe,"A",{href:!0});var fEt=s(xJ);VLr=r(fEt,"FlaxDistilBertForMaskedLM"),fEt.forEach(t),XLr=r(EBe," (DistilBERT model)"),EBe.forEach(t),zLr=i(Be),ZE=n(Be,"LI",{});var CBe=s(ZE);lTe=n(CBe,"STRONG",{});var mEt=s(lTe);QLr=r(mEt,"electra"),mEt.forEach(t),WLr=r(CBe," \u2014 "),$J=n(CBe,"A",{href:!0});var gEt=s($J);HLr=r(gEt,"FlaxElectraForMaskedLM"),gEt.forEach(t),ULr=r(CBe," (ELECTRA model)"),CBe.forEach(t),JLr=i(Be),e5=n(Be,"LI",{});var wBe=s(e5);iTe=n(wBe,"STRONG",{});var hEt=s(iTe);YLr=r(hEt,"mbart"),hEt.forEach(t),KLr=r(wBe," \u2014 "),kJ=n(wBe,"A",{href:!0});var pEt=s(kJ);ZLr=r(pEt,"FlaxMBartForConditionalGeneration"),pEt.forEach(t),exr=r(wBe," (mBART model)"),wBe.forEach(t),oxr=i(Be),o5=n(Be,"LI",{});var ABe=s(o5);dTe=n(ABe,"STRONG",{});var uEt=s(dTe);rxr=r(uEt,"roberta"),uEt.forEach(t),txr=r(ABe," \u2014 "),SJ=n(ABe,"A",{href:!0});var _Et=s(SJ);axr=r(_Et,"FlaxRobertaForMaskedLM"),_Et.forEach(t),nxr=r(ABe," (RoBERTa model)"),ABe.forEach(t),sxr=i(Be),r5=n(Be,"LI",{});var yBe=s(r5);cTe=n(yBe,"STRONG",{});var bEt=s(cTe);lxr=r(bEt,"roformer"),bEt.forEach(t),ixr=r(yBe," \u2014 "),RJ=n(yBe,"A",{href:!0});var vEt=s(RJ);dxr=r(vEt,"FlaxRoFormerForMaskedLM"),vEt.forEach(t),cxr=r(yBe," (RoFormer model)"),yBe.forEach(t),fxr=i(Be),t5=n(Be,"LI",{});var LBe=s(t5);fTe=n(LBe,"STRONG",{});var FEt=s(fTe);mxr=r(FEt,"xlm-roberta"),FEt.forEach(t),gxr=r(LBe," \u2014 "),BJ=n(LBe,"A",{href:!0});var TEt=s(BJ);hxr=r(TEt,"FlaxXLMRobertaForMaskedLM"),TEt.forEach(t),pxr=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),Be.forEach(t),uxr=i(zl),T(a5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),fqe=i(f),jc=n(f,"H2",{class:!0});var bje=s(jc);n5=n(bje,"A",{id:!0,class:!0,href:!0});var MEt=s(n5);mTe=n(MEt,"SPAN",{});var EEt=s(mTe);T(cx.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),_xr=i(bje),gTe=n(bje,"SPAN",{});var CEt=s(gTe);bxr=r(CEt,"FlaxAutoModelForSeq2SeqLM"),CEt.forEach(t),bje.forEach(t),mqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(fx.$$.fragment,Ql),vxr=i(Ql),Dc=n(Ql,"P",{});var kZ=s(Dc);Fxr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PJ=n(kZ,"A",{href:!0});var wEt=s(PJ);Txr=r(wEt,"from_pretrained()"),wEt.forEach(t),Mxr=r(kZ," class method or the "),IJ=n(kZ,"A",{href:!0});var AEt=s(IJ);Exr=r(AEt,"from_config()"),AEt.forEach(t),Cxr=r(kZ,` class
method.`),kZ.forEach(t),wxr=i(Ql),mx=n(Ql,"P",{});var vje=s(mx);Axr=r(vje,"This class cannot be instantiated directly using "),hTe=n(vje,"CODE",{});var yEt=s(hTe);yxr=r(yEt,"__init__()"),yEt.forEach(t),Lxr=r(vje," (throws an error)."),vje.forEach(t),xxr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var Aw=s(Vt);T(gx.$$.fragment,Aw),$xr=i(Aw),pTe=n(Aw,"P",{});var LEt=s(pTe);kxr=r(LEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LEt.forEach(t),Sxr=i(Aw),Gc=n(Aw,"P",{});var SZ=s(Gc);Rxr=r(SZ,`Note:
Loading a model from its configuration file does `),uTe=n(SZ,"STRONG",{});var xEt=s(uTe);Bxr=r(xEt,"not"),xEt.forEach(t),Pxr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(SZ,"A",{href:!0});var $Et=s(qJ);Ixr=r($Et,"from_pretrained()"),$Et.forEach(t),qxr=r(SZ," to load the model weights."),SZ.forEach(t),Nxr=i(Aw),T(s5.$$.fragment,Aw),Aw.forEach(t),jxr=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(hx.$$.fragment,Wl),Dxr=i(Wl),_Te=n(Wl,"P",{});var kEt=s(_Te);Gxr=r(kEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kEt.forEach(t),Oxr=i(Wl),_n=n(Wl,"P",{});var yw=s(_n);Vxr=r(yw,"The model class to instantiate is selected based on the "),bTe=n(yw,"CODE",{});var SEt=s(bTe);Xxr=r(SEt,"model_type"),SEt.forEach(t),zxr=r(yw,` property of the config object (either
passed as an argument or loaded from `),vTe=n(yw,"CODE",{});var REt=s(vTe);Qxr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),Wxr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(yw,"CODE",{});var BEt=s(FTe);Hxr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),Uxr=r(yw,":"),yw.forEach(t),Jxr=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);l5=n(Ve,"LI",{});var xBe=s(l5);TTe=n(xBe,"STRONG",{});var PEt=s(TTe);Yxr=r(PEt,"bart"),PEt.forEach(t),Kxr=r(xBe," \u2014 "),NJ=n(xBe,"A",{href:!0});var IEt=s(NJ);Zxr=r(IEt,"FlaxBartForConditionalGeneration"),IEt.forEach(t),e9r=r(xBe," (BART model)"),xBe.forEach(t),o9r=i(Ve),i5=n(Ve,"LI",{});var $Be=s(i5);MTe=n($Be,"STRONG",{});var qEt=s(MTe);r9r=r(qEt,"blenderbot"),qEt.forEach(t),t9r=r($Be," \u2014 "),jJ=n($Be,"A",{href:!0});var NEt=s(jJ);a9r=r(NEt,"FlaxBlenderbotForConditionalGeneration"),NEt.forEach(t),n9r=r($Be," (Blenderbot model)"),$Be.forEach(t),s9r=i(Ve),d5=n(Ve,"LI",{});var kBe=s(d5);ETe=n(kBe,"STRONG",{});var jEt=s(ETe);l9r=r(jEt,"blenderbot-small"),jEt.forEach(t),i9r=r(kBe," \u2014 "),DJ=n(kBe,"A",{href:!0});var DEt=s(DJ);d9r=r(DEt,"FlaxBlenderbotSmallForConditionalGeneration"),DEt.forEach(t),c9r=r(kBe," (BlenderbotSmall model)"),kBe.forEach(t),f9r=i(Ve),c5=n(Ve,"LI",{});var SBe=s(c5);CTe=n(SBe,"STRONG",{});var GEt=s(CTe);m9r=r(GEt,"encoder-decoder"),GEt.forEach(t),g9r=r(SBe," \u2014 "),GJ=n(SBe,"A",{href:!0});var OEt=s(GJ);h9r=r(OEt,"FlaxEncoderDecoderModel"),OEt.forEach(t),p9r=r(SBe," (Encoder decoder model)"),SBe.forEach(t),u9r=i(Ve),f5=n(Ve,"LI",{});var RBe=s(f5);wTe=n(RBe,"STRONG",{});var VEt=s(wTe);_9r=r(VEt,"marian"),VEt.forEach(t),b9r=r(RBe," \u2014 "),OJ=n(RBe,"A",{href:!0});var XEt=s(OJ);v9r=r(XEt,"FlaxMarianMTModel"),XEt.forEach(t),F9r=r(RBe," (Marian model)"),RBe.forEach(t),T9r=i(Ve),m5=n(Ve,"LI",{});var BBe=s(m5);ATe=n(BBe,"STRONG",{});var zEt=s(ATe);M9r=r(zEt,"mbart"),zEt.forEach(t),E9r=r(BBe," \u2014 "),VJ=n(BBe,"A",{href:!0});var QEt=s(VJ);C9r=r(QEt,"FlaxMBartForConditionalGeneration"),QEt.forEach(t),w9r=r(BBe," (mBART model)"),BBe.forEach(t),A9r=i(Ve),g5=n(Ve,"LI",{});var PBe=s(g5);yTe=n(PBe,"STRONG",{});var WEt=s(yTe);y9r=r(WEt,"mt5"),WEt.forEach(t),L9r=r(PBe," \u2014 "),XJ=n(PBe,"A",{href:!0});var HEt=s(XJ);x9r=r(HEt,"FlaxMT5ForConditionalGeneration"),HEt.forEach(t),$9r=r(PBe," (mT5 model)"),PBe.forEach(t),k9r=i(Ve),h5=n(Ve,"LI",{});var IBe=s(h5);LTe=n(IBe,"STRONG",{});var UEt=s(LTe);S9r=r(UEt,"pegasus"),UEt.forEach(t),R9r=r(IBe," \u2014 "),zJ=n(IBe,"A",{href:!0});var JEt=s(zJ);B9r=r(JEt,"FlaxPegasusForConditionalGeneration"),JEt.forEach(t),P9r=r(IBe," (Pegasus model)"),IBe.forEach(t),I9r=i(Ve),p5=n(Ve,"LI",{});var qBe=s(p5);xTe=n(qBe,"STRONG",{});var YEt=s(xTe);q9r=r(YEt,"t5"),YEt.forEach(t),N9r=r(qBe," \u2014 "),QJ=n(qBe,"A",{href:!0});var KEt=s(QJ);j9r=r(KEt,"FlaxT5ForConditionalGeneration"),KEt.forEach(t),D9r=r(qBe," (T5 model)"),qBe.forEach(t),Ve.forEach(t),G9r=i(Wl),T(u5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),gqe=i(f),Oc=n(f,"H2",{class:!0});var Fje=s(Oc);_5=n(Fje,"A",{id:!0,class:!0,href:!0});var ZEt=s(_5);$Te=n(ZEt,"SPAN",{});var e5t=s($Te);T(px.$$.fragment,e5t),e5t.forEach(t),ZEt.forEach(t),O9r=i(Fje),kTe=n(Fje,"SPAN",{});var o5t=s(kTe);V9r=r(o5t,"FlaxAutoModelForSequenceClassification"),o5t.forEach(t),Fje.forEach(t),hqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(ux.$$.fragment,Hl),X9r=i(Hl),Vc=n(Hl,"P",{});var RZ=s(Vc);z9r=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WJ=n(RZ,"A",{href:!0});var r5t=s(WJ);Q9r=r(r5t,"from_pretrained()"),r5t.forEach(t),W9r=r(RZ," class method or the "),HJ=n(RZ,"A",{href:!0});var t5t=s(HJ);H9r=r(t5t,"from_config()"),t5t.forEach(t),U9r=r(RZ,` class
method.`),RZ.forEach(t),J9r=i(Hl),_x=n(Hl,"P",{});var Tje=s(_x);Y9r=r(Tje,"This class cannot be instantiated directly using "),STe=n(Tje,"CODE",{});var a5t=s(STe);K9r=r(a5t,"__init__()"),a5t.forEach(t),Z9r=r(Tje," (throws an error)."),Tje.forEach(t),e$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var Lw=s(Xt);T(bx.$$.fragment,Lw),o$r=i(Lw),RTe=n(Lw,"P",{});var n5t=s(RTe);r$r=r(n5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n5t.forEach(t),t$r=i(Lw),Xc=n(Lw,"P",{});var BZ=s(Xc);a$r=r(BZ,`Note:
Loading a model from its configuration file does `),BTe=n(BZ,"STRONG",{});var s5t=s(BTe);n$r=r(s5t,"not"),s5t.forEach(t),s$r=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(BZ,"A",{href:!0});var l5t=s(UJ);l$r=r(l5t,"from_pretrained()"),l5t.forEach(t),i$r=r(BZ," to load the model weights."),BZ.forEach(t),d$r=i(Lw),T(b5.$$.fragment,Lw),Lw.forEach(t),c$r=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(vx.$$.fragment,Ul),f$r=i(Ul),PTe=n(Ul,"P",{});var i5t=s(PTe);m$r=r(i5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),i5t.forEach(t),g$r=i(Ul),bn=n(Ul,"P",{});var xw=s(bn);h$r=r(xw,"The model class to instantiate is selected based on the "),ITe=n(xw,"CODE",{});var d5t=s(ITe);p$r=r(d5t,"model_type"),d5t.forEach(t),u$r=r(xw,` property of the config object (either
passed as an argument or loaded from `),qTe=n(xw,"CODE",{});var c5t=s(qTe);_$r=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),b$r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(xw,"CODE",{});var f5t=s(NTe);v$r=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),F$r=r(xw,":"),xw.forEach(t),T$r=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);v5=n(Pe,"LI",{});var NBe=s(v5);jTe=n(NBe,"STRONG",{});var m5t=s(jTe);M$r=r(m5t,"albert"),m5t.forEach(t),E$r=r(NBe," \u2014 "),JJ=n(NBe,"A",{href:!0});var g5t=s(JJ);C$r=r(g5t,"FlaxAlbertForSequenceClassification"),g5t.forEach(t),w$r=r(NBe," (ALBERT model)"),NBe.forEach(t),A$r=i(Pe),F5=n(Pe,"LI",{});var jBe=s(F5);DTe=n(jBe,"STRONG",{});var h5t=s(DTe);y$r=r(h5t,"bart"),h5t.forEach(t),L$r=r(jBe," \u2014 "),YJ=n(jBe,"A",{href:!0});var p5t=s(YJ);x$r=r(p5t,"FlaxBartForSequenceClassification"),p5t.forEach(t),$$r=r(jBe," (BART model)"),jBe.forEach(t),k$r=i(Pe),T5=n(Pe,"LI",{});var DBe=s(T5);GTe=n(DBe,"STRONG",{});var u5t=s(GTe);S$r=r(u5t,"bert"),u5t.forEach(t),R$r=r(DBe," \u2014 "),KJ=n(DBe,"A",{href:!0});var _5t=s(KJ);B$r=r(_5t,"FlaxBertForSequenceClassification"),_5t.forEach(t),P$r=r(DBe," (BERT model)"),DBe.forEach(t),I$r=i(Pe),M5=n(Pe,"LI",{});var GBe=s(M5);OTe=n(GBe,"STRONG",{});var b5t=s(OTe);q$r=r(b5t,"big_bird"),b5t.forEach(t),N$r=r(GBe," \u2014 "),ZJ=n(GBe,"A",{href:!0});var v5t=s(ZJ);j$r=r(v5t,"FlaxBigBirdForSequenceClassification"),v5t.forEach(t),D$r=r(GBe," (BigBird model)"),GBe.forEach(t),G$r=i(Pe),E5=n(Pe,"LI",{});var OBe=s(E5);VTe=n(OBe,"STRONG",{});var F5t=s(VTe);O$r=r(F5t,"distilbert"),F5t.forEach(t),V$r=r(OBe," \u2014 "),eY=n(OBe,"A",{href:!0});var T5t=s(eY);X$r=r(T5t,"FlaxDistilBertForSequenceClassification"),T5t.forEach(t),z$r=r(OBe," (DistilBERT model)"),OBe.forEach(t),Q$r=i(Pe),C5=n(Pe,"LI",{});var VBe=s(C5);XTe=n(VBe,"STRONG",{});var M5t=s(XTe);W$r=r(M5t,"electra"),M5t.forEach(t),H$r=r(VBe," \u2014 "),oY=n(VBe,"A",{href:!0});var E5t=s(oY);U$r=r(E5t,"FlaxElectraForSequenceClassification"),E5t.forEach(t),J$r=r(VBe," (ELECTRA model)"),VBe.forEach(t),Y$r=i(Pe),w5=n(Pe,"LI",{});var XBe=s(w5);zTe=n(XBe,"STRONG",{});var C5t=s(zTe);K$r=r(C5t,"mbart"),C5t.forEach(t),Z$r=r(XBe," \u2014 "),rY=n(XBe,"A",{href:!0});var w5t=s(rY);ekr=r(w5t,"FlaxMBartForSequenceClassification"),w5t.forEach(t),okr=r(XBe," (mBART model)"),XBe.forEach(t),rkr=i(Pe),A5=n(Pe,"LI",{});var zBe=s(A5);QTe=n(zBe,"STRONG",{});var A5t=s(QTe);tkr=r(A5t,"roberta"),A5t.forEach(t),akr=r(zBe," \u2014 "),tY=n(zBe,"A",{href:!0});var y5t=s(tY);nkr=r(y5t,"FlaxRobertaForSequenceClassification"),y5t.forEach(t),skr=r(zBe," (RoBERTa model)"),zBe.forEach(t),lkr=i(Pe),y5=n(Pe,"LI",{});var QBe=s(y5);WTe=n(QBe,"STRONG",{});var L5t=s(WTe);ikr=r(L5t,"roformer"),L5t.forEach(t),dkr=r(QBe," \u2014 "),aY=n(QBe,"A",{href:!0});var x5t=s(aY);ckr=r(x5t,"FlaxRoFormerForSequenceClassification"),x5t.forEach(t),fkr=r(QBe," (RoFormer model)"),QBe.forEach(t),mkr=i(Pe),L5=n(Pe,"LI",{});var WBe=s(L5);HTe=n(WBe,"STRONG",{});var $5t=s(HTe);gkr=r($5t,"xlm-roberta"),$5t.forEach(t),hkr=r(WBe," \u2014 "),nY=n(WBe,"A",{href:!0});var k5t=s(nY);pkr=r(k5t,"FlaxXLMRobertaForSequenceClassification"),k5t.forEach(t),ukr=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),Pe.forEach(t),_kr=i(Ul),T(x5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),pqe=i(f),zc=n(f,"H2",{class:!0});var Mje=s(zc);$5=n(Mje,"A",{id:!0,class:!0,href:!0});var S5t=s($5);UTe=n(S5t,"SPAN",{});var R5t=s(UTe);T(Fx.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),bkr=i(Mje),JTe=n(Mje,"SPAN",{});var B5t=s(JTe);vkr=r(B5t,"FlaxAutoModelForQuestionAnswering"),B5t.forEach(t),Mje.forEach(t),uqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(Tx.$$.fragment,Jl),Fkr=i(Jl),Qc=n(Jl,"P",{});var PZ=s(Qc);Tkr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sY=n(PZ,"A",{href:!0});var P5t=s(sY);Mkr=r(P5t,"from_pretrained()"),P5t.forEach(t),Ekr=r(PZ," class method or the "),lY=n(PZ,"A",{href:!0});var I5t=s(lY);Ckr=r(I5t,"from_config()"),I5t.forEach(t),wkr=r(PZ,` class
method.`),PZ.forEach(t),Akr=i(Jl),Mx=n(Jl,"P",{});var Eje=s(Mx);ykr=r(Eje,"This class cannot be instantiated directly using "),YTe=n(Eje,"CODE",{});var q5t=s(YTe);Lkr=r(q5t,"__init__()"),q5t.forEach(t),xkr=r(Eje," (throws an error)."),Eje.forEach(t),$kr=i(Jl),zt=n(Jl,"DIV",{class:!0});var $w=s(zt);T(Ex.$$.fragment,$w),kkr=i($w),KTe=n($w,"P",{});var N5t=s(KTe);Skr=r(N5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N5t.forEach(t),Rkr=i($w),Wc=n($w,"P",{});var IZ=s(Wc);Bkr=r(IZ,`Note:
Loading a model from its configuration file does `),ZTe=n(IZ,"STRONG",{});var j5t=s(ZTe);Pkr=r(j5t,"not"),j5t.forEach(t),Ikr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(IZ,"A",{href:!0});var D5t=s(iY);qkr=r(D5t,"from_pretrained()"),D5t.forEach(t),Nkr=r(IZ," to load the model weights."),IZ.forEach(t),jkr=i($w),T(k5.$$.fragment,$w),$w.forEach(t),Dkr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(Cx.$$.fragment,Yl),Gkr=i(Yl),e7e=n(Yl,"P",{});var G5t=s(e7e);Okr=r(G5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G5t.forEach(t),Vkr=i(Yl),vn=n(Yl,"P",{});var kw=s(vn);Xkr=r(kw,"The model class to instantiate is selected based on the "),o7e=n(kw,"CODE",{});var O5t=s(o7e);zkr=r(O5t,"model_type"),O5t.forEach(t),Qkr=r(kw,` property of the config object (either
passed as an argument or loaded from `),r7e=n(kw,"CODE",{});var V5t=s(r7e);Wkr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),Hkr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=n(kw,"CODE",{});var X5t=s(t7e);Ukr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),Jkr=r(kw,":"),kw.forEach(t),Ykr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);S5=n(Ie,"LI",{});var HBe=s(S5);a7e=n(HBe,"STRONG",{});var z5t=s(a7e);Kkr=r(z5t,"albert"),z5t.forEach(t),Zkr=r(HBe," \u2014 "),dY=n(HBe,"A",{href:!0});var Q5t=s(dY);eSr=r(Q5t,"FlaxAlbertForQuestionAnswering"),Q5t.forEach(t),oSr=r(HBe," (ALBERT model)"),HBe.forEach(t),rSr=i(Ie),R5=n(Ie,"LI",{});var UBe=s(R5);n7e=n(UBe,"STRONG",{});var W5t=s(n7e);tSr=r(W5t,"bart"),W5t.forEach(t),aSr=r(UBe," \u2014 "),cY=n(UBe,"A",{href:!0});var H5t=s(cY);nSr=r(H5t,"FlaxBartForQuestionAnswering"),H5t.forEach(t),sSr=r(UBe," (BART model)"),UBe.forEach(t),lSr=i(Ie),B5=n(Ie,"LI",{});var JBe=s(B5);s7e=n(JBe,"STRONG",{});var U5t=s(s7e);iSr=r(U5t,"bert"),U5t.forEach(t),dSr=r(JBe," \u2014 "),fY=n(JBe,"A",{href:!0});var J5t=s(fY);cSr=r(J5t,"FlaxBertForQuestionAnswering"),J5t.forEach(t),fSr=r(JBe," (BERT model)"),JBe.forEach(t),mSr=i(Ie),P5=n(Ie,"LI",{});var YBe=s(P5);l7e=n(YBe,"STRONG",{});var Y5t=s(l7e);gSr=r(Y5t,"big_bird"),Y5t.forEach(t),hSr=r(YBe," \u2014 "),mY=n(YBe,"A",{href:!0});var K5t=s(mY);pSr=r(K5t,"FlaxBigBirdForQuestionAnswering"),K5t.forEach(t),uSr=r(YBe," (BigBird model)"),YBe.forEach(t),_Sr=i(Ie),I5=n(Ie,"LI",{});var KBe=s(I5);i7e=n(KBe,"STRONG",{});var Z5t=s(i7e);bSr=r(Z5t,"distilbert"),Z5t.forEach(t),vSr=r(KBe," \u2014 "),gY=n(KBe,"A",{href:!0});var eCt=s(gY);FSr=r(eCt,"FlaxDistilBertForQuestionAnswering"),eCt.forEach(t),TSr=r(KBe," (DistilBERT model)"),KBe.forEach(t),MSr=i(Ie),q5=n(Ie,"LI",{});var ZBe=s(q5);d7e=n(ZBe,"STRONG",{});var oCt=s(d7e);ESr=r(oCt,"electra"),oCt.forEach(t),CSr=r(ZBe," \u2014 "),hY=n(ZBe,"A",{href:!0});var rCt=s(hY);wSr=r(rCt,"FlaxElectraForQuestionAnswering"),rCt.forEach(t),ASr=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),ySr=i(Ie),N5=n(Ie,"LI",{});var ePe=s(N5);c7e=n(ePe,"STRONG",{});var tCt=s(c7e);LSr=r(tCt,"mbart"),tCt.forEach(t),xSr=r(ePe," \u2014 "),pY=n(ePe,"A",{href:!0});var aCt=s(pY);$Sr=r(aCt,"FlaxMBartForQuestionAnswering"),aCt.forEach(t),kSr=r(ePe," (mBART model)"),ePe.forEach(t),SSr=i(Ie),j5=n(Ie,"LI",{});var oPe=s(j5);f7e=n(oPe,"STRONG",{});var nCt=s(f7e);RSr=r(nCt,"roberta"),nCt.forEach(t),BSr=r(oPe," \u2014 "),uY=n(oPe,"A",{href:!0});var sCt=s(uY);PSr=r(sCt,"FlaxRobertaForQuestionAnswering"),sCt.forEach(t),ISr=r(oPe," (RoBERTa model)"),oPe.forEach(t),qSr=i(Ie),D5=n(Ie,"LI",{});var rPe=s(D5);m7e=n(rPe,"STRONG",{});var lCt=s(m7e);NSr=r(lCt,"roformer"),lCt.forEach(t),jSr=r(rPe," \u2014 "),_Y=n(rPe,"A",{href:!0});var iCt=s(_Y);DSr=r(iCt,"FlaxRoFormerForQuestionAnswering"),iCt.forEach(t),GSr=r(rPe," (RoFormer model)"),rPe.forEach(t),OSr=i(Ie),G5=n(Ie,"LI",{});var tPe=s(G5);g7e=n(tPe,"STRONG",{});var dCt=s(g7e);VSr=r(dCt,"xlm-roberta"),dCt.forEach(t),XSr=r(tPe," \u2014 "),bY=n(tPe,"A",{href:!0});var cCt=s(bY);zSr=r(cCt,"FlaxXLMRobertaForQuestionAnswering"),cCt.forEach(t),QSr=r(tPe," (XLM-RoBERTa model)"),tPe.forEach(t),Ie.forEach(t),WSr=i(Yl),T(O5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),_qe=i(f),Hc=n(f,"H2",{class:!0});var Cje=s(Hc);V5=n(Cje,"A",{id:!0,class:!0,href:!0});var fCt=s(V5);h7e=n(fCt,"SPAN",{});var mCt=s(h7e);T(wx.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),HSr=i(Cje),p7e=n(Cje,"SPAN",{});var gCt=s(p7e);USr=r(gCt,"FlaxAutoModelForTokenClassification"),gCt.forEach(t),Cje.forEach(t),bqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(Ax.$$.fragment,Kl),JSr=i(Kl),Uc=n(Kl,"P",{});var qZ=s(Uc);YSr=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vY=n(qZ,"A",{href:!0});var hCt=s(vY);KSr=r(hCt,"from_pretrained()"),hCt.forEach(t),ZSr=r(qZ," class method or the "),FY=n(qZ,"A",{href:!0});var pCt=s(FY);eRr=r(pCt,"from_config()"),pCt.forEach(t),oRr=r(qZ,` class
method.`),qZ.forEach(t),rRr=i(Kl),yx=n(Kl,"P",{});var wje=s(yx);tRr=r(wje,"This class cannot be instantiated directly using "),u7e=n(wje,"CODE",{});var uCt=s(u7e);aRr=r(uCt,"__init__()"),uCt.forEach(t),nRr=r(wje," (throws an error)."),wje.forEach(t),sRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Sw=s(Qt);T(Lx.$$.fragment,Sw),lRr=i(Sw),_7e=n(Sw,"P",{});var _Ct=s(_7e);iRr=r(_Ct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Ct.forEach(t),dRr=i(Sw),Jc=n(Sw,"P",{});var NZ=s(Jc);cRr=r(NZ,`Note:
Loading a model from its configuration file does `),b7e=n(NZ,"STRONG",{});var bCt=s(b7e);fRr=r(bCt,"not"),bCt.forEach(t),mRr=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(NZ,"A",{href:!0});var vCt=s(TY);gRr=r(vCt,"from_pretrained()"),vCt.forEach(t),hRr=r(NZ," to load the model weights."),NZ.forEach(t),pRr=i(Sw),T(X5.$$.fragment,Sw),Sw.forEach(t),uRr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(xx.$$.fragment,Zl),_Rr=i(Zl),v7e=n(Zl,"P",{});var FCt=s(v7e);bRr=r(FCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FCt.forEach(t),vRr=i(Zl),Fn=n(Zl,"P",{});var Rw=s(Fn);FRr=r(Rw,"The model class to instantiate is selected based on the "),F7e=n(Rw,"CODE",{});var TCt=s(F7e);TRr=r(TCt,"model_type"),TCt.forEach(t),MRr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),T7e=n(Rw,"CODE",{});var MCt=s(T7e);ERr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),CRr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(Rw,"CODE",{});var ECt=s(M7e);wRr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),ARr=r(Rw,":"),Rw.forEach(t),yRr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);z5=n(Fo,"LI",{});var aPe=s(z5);E7e=n(aPe,"STRONG",{});var CCt=s(E7e);LRr=r(CCt,"albert"),CCt.forEach(t),xRr=r(aPe," \u2014 "),MY=n(aPe,"A",{href:!0});var wCt=s(MY);$Rr=r(wCt,"FlaxAlbertForTokenClassification"),wCt.forEach(t),kRr=r(aPe," (ALBERT model)"),aPe.forEach(t),SRr=i(Fo),Q5=n(Fo,"LI",{});var nPe=s(Q5);C7e=n(nPe,"STRONG",{});var ACt=s(C7e);RRr=r(ACt,"bert"),ACt.forEach(t),BRr=r(nPe," \u2014 "),EY=n(nPe,"A",{href:!0});var yCt=s(EY);PRr=r(yCt,"FlaxBertForTokenClassification"),yCt.forEach(t),IRr=r(nPe," (BERT model)"),nPe.forEach(t),qRr=i(Fo),W5=n(Fo,"LI",{});var sPe=s(W5);w7e=n(sPe,"STRONG",{});var LCt=s(w7e);NRr=r(LCt,"big_bird"),LCt.forEach(t),jRr=r(sPe," \u2014 "),CY=n(sPe,"A",{href:!0});var xCt=s(CY);DRr=r(xCt,"FlaxBigBirdForTokenClassification"),xCt.forEach(t),GRr=r(sPe," (BigBird model)"),sPe.forEach(t),ORr=i(Fo),H5=n(Fo,"LI",{});var lPe=s(H5);A7e=n(lPe,"STRONG",{});var $Ct=s(A7e);VRr=r($Ct,"distilbert"),$Ct.forEach(t),XRr=r(lPe," \u2014 "),wY=n(lPe,"A",{href:!0});var kCt=s(wY);zRr=r(kCt,"FlaxDistilBertForTokenClassification"),kCt.forEach(t),QRr=r(lPe," (DistilBERT model)"),lPe.forEach(t),WRr=i(Fo),U5=n(Fo,"LI",{});var iPe=s(U5);y7e=n(iPe,"STRONG",{});var SCt=s(y7e);HRr=r(SCt,"electra"),SCt.forEach(t),URr=r(iPe," \u2014 "),AY=n(iPe,"A",{href:!0});var RCt=s(AY);JRr=r(RCt,"FlaxElectraForTokenClassification"),RCt.forEach(t),YRr=r(iPe," (ELECTRA model)"),iPe.forEach(t),KRr=i(Fo),J5=n(Fo,"LI",{});var dPe=s(J5);L7e=n(dPe,"STRONG",{});var BCt=s(L7e);ZRr=r(BCt,"roberta"),BCt.forEach(t),eBr=r(dPe," \u2014 "),yY=n(dPe,"A",{href:!0});var PCt=s(yY);oBr=r(PCt,"FlaxRobertaForTokenClassification"),PCt.forEach(t),rBr=r(dPe," (RoBERTa model)"),dPe.forEach(t),tBr=i(Fo),Y5=n(Fo,"LI",{});var cPe=s(Y5);x7e=n(cPe,"STRONG",{});var ICt=s(x7e);aBr=r(ICt,"roformer"),ICt.forEach(t),nBr=r(cPe," \u2014 "),LY=n(cPe,"A",{href:!0});var qCt=s(LY);sBr=r(qCt,"FlaxRoFormerForTokenClassification"),qCt.forEach(t),lBr=r(cPe," (RoFormer model)"),cPe.forEach(t),iBr=i(Fo),K5=n(Fo,"LI",{});var fPe=s(K5);$7e=n(fPe,"STRONG",{});var NCt=s($7e);dBr=r(NCt,"xlm-roberta"),NCt.forEach(t),cBr=r(fPe," \u2014 "),xY=n(fPe,"A",{href:!0});var jCt=s(xY);fBr=r(jCt,"FlaxXLMRobertaForTokenClassification"),jCt.forEach(t),mBr=r(fPe," (XLM-RoBERTa model)"),fPe.forEach(t),Fo.forEach(t),gBr=i(Zl),T(Z5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),vqe=i(f),Yc=n(f,"H2",{class:!0});var Aje=s(Yc);eC=n(Aje,"A",{id:!0,class:!0,href:!0});var DCt=s(eC);k7e=n(DCt,"SPAN",{});var GCt=s(k7e);T($x.$$.fragment,GCt),GCt.forEach(t),DCt.forEach(t),hBr=i(Aje),S7e=n(Aje,"SPAN",{});var OCt=s(S7e);pBr=r(OCt,"FlaxAutoModelForMultipleChoice"),OCt.forEach(t),Aje.forEach(t),Fqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(kx.$$.fragment,ei),uBr=i(ei),Kc=n(ei,"P",{});var jZ=s(Kc);_Br=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$Y=n(jZ,"A",{href:!0});var VCt=s($Y);bBr=r(VCt,"from_pretrained()"),VCt.forEach(t),vBr=r(jZ," class method or the "),kY=n(jZ,"A",{href:!0});var XCt=s(kY);FBr=r(XCt,"from_config()"),XCt.forEach(t),TBr=r(jZ,` class
method.`),jZ.forEach(t),MBr=i(ei),Sx=n(ei,"P",{});var yje=s(Sx);EBr=r(yje,"This class cannot be instantiated directly using "),R7e=n(yje,"CODE",{});var zCt=s(R7e);CBr=r(zCt,"__init__()"),zCt.forEach(t),wBr=r(yje," (throws an error)."),yje.forEach(t),ABr=i(ei),Wt=n(ei,"DIV",{class:!0});var Bw=s(Wt);T(Rx.$$.fragment,Bw),yBr=i(Bw),B7e=n(Bw,"P",{});var QCt=s(B7e);LBr=r(QCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QCt.forEach(t),xBr=i(Bw),Zc=n(Bw,"P",{});var DZ=s(Zc);$Br=r(DZ,`Note:
Loading a model from its configuration file does `),P7e=n(DZ,"STRONG",{});var WCt=s(P7e);kBr=r(WCt,"not"),WCt.forEach(t),SBr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=n(DZ,"A",{href:!0});var HCt=s(SY);RBr=r(HCt,"from_pretrained()"),HCt.forEach(t),BBr=r(DZ," to load the model weights."),DZ.forEach(t),PBr=i(Bw),T(oC.$$.fragment,Bw),Bw.forEach(t),IBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Bx.$$.fragment,oi),qBr=i(oi),I7e=n(oi,"P",{});var UCt=s(I7e);NBr=r(UCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UCt.forEach(t),jBr=i(oi),Tn=n(oi,"P",{});var Pw=s(Tn);DBr=r(Pw,"The model class to instantiate is selected based on the "),q7e=n(Pw,"CODE",{});var JCt=s(q7e);GBr=r(JCt,"model_type"),JCt.forEach(t),OBr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),N7e=n(Pw,"CODE",{});var YCt=s(N7e);VBr=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),XBr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(Pw,"CODE",{});var KCt=s(j7e);zBr=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),QBr=r(Pw,":"),Pw.forEach(t),WBr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);rC=n(To,"LI",{});var mPe=s(rC);D7e=n(mPe,"STRONG",{});var ZCt=s(D7e);HBr=r(ZCt,"albert"),ZCt.forEach(t),UBr=r(mPe," \u2014 "),RY=n(mPe,"A",{href:!0});var e3t=s(RY);JBr=r(e3t,"FlaxAlbertForMultipleChoice"),e3t.forEach(t),YBr=r(mPe," (ALBERT model)"),mPe.forEach(t),KBr=i(To),tC=n(To,"LI",{});var gPe=s(tC);G7e=n(gPe,"STRONG",{});var o3t=s(G7e);ZBr=r(o3t,"bert"),o3t.forEach(t),ePr=r(gPe," \u2014 "),BY=n(gPe,"A",{href:!0});var r3t=s(BY);oPr=r(r3t,"FlaxBertForMultipleChoice"),r3t.forEach(t),rPr=r(gPe," (BERT model)"),gPe.forEach(t),tPr=i(To),aC=n(To,"LI",{});var hPe=s(aC);O7e=n(hPe,"STRONG",{});var t3t=s(O7e);aPr=r(t3t,"big_bird"),t3t.forEach(t),nPr=r(hPe," \u2014 "),PY=n(hPe,"A",{href:!0});var a3t=s(PY);sPr=r(a3t,"FlaxBigBirdForMultipleChoice"),a3t.forEach(t),lPr=r(hPe," (BigBird model)"),hPe.forEach(t),iPr=i(To),nC=n(To,"LI",{});var pPe=s(nC);V7e=n(pPe,"STRONG",{});var n3t=s(V7e);dPr=r(n3t,"distilbert"),n3t.forEach(t),cPr=r(pPe," \u2014 "),IY=n(pPe,"A",{href:!0});var s3t=s(IY);fPr=r(s3t,"FlaxDistilBertForMultipleChoice"),s3t.forEach(t),mPr=r(pPe," (DistilBERT model)"),pPe.forEach(t),gPr=i(To),sC=n(To,"LI",{});var uPe=s(sC);X7e=n(uPe,"STRONG",{});var l3t=s(X7e);hPr=r(l3t,"electra"),l3t.forEach(t),pPr=r(uPe," \u2014 "),qY=n(uPe,"A",{href:!0});var i3t=s(qY);uPr=r(i3t,"FlaxElectraForMultipleChoice"),i3t.forEach(t),_Pr=r(uPe," (ELECTRA model)"),uPe.forEach(t),bPr=i(To),lC=n(To,"LI",{});var _Pe=s(lC);z7e=n(_Pe,"STRONG",{});var d3t=s(z7e);vPr=r(d3t,"roberta"),d3t.forEach(t),FPr=r(_Pe," \u2014 "),NY=n(_Pe,"A",{href:!0});var c3t=s(NY);TPr=r(c3t,"FlaxRobertaForMultipleChoice"),c3t.forEach(t),MPr=r(_Pe," (RoBERTa model)"),_Pe.forEach(t),EPr=i(To),iC=n(To,"LI",{});var bPe=s(iC);Q7e=n(bPe,"STRONG",{});var f3t=s(Q7e);CPr=r(f3t,"roformer"),f3t.forEach(t),wPr=r(bPe," \u2014 "),jY=n(bPe,"A",{href:!0});var m3t=s(jY);APr=r(m3t,"FlaxRoFormerForMultipleChoice"),m3t.forEach(t),yPr=r(bPe," (RoFormer model)"),bPe.forEach(t),LPr=i(To),dC=n(To,"LI",{});var vPe=s(dC);W7e=n(vPe,"STRONG",{});var g3t=s(W7e);xPr=r(g3t,"xlm-roberta"),g3t.forEach(t),$Pr=r(vPe," \u2014 "),DY=n(vPe,"A",{href:!0});var h3t=s(DY);kPr=r(h3t,"FlaxXLMRobertaForMultipleChoice"),h3t.forEach(t),SPr=r(vPe," (XLM-RoBERTa model)"),vPe.forEach(t),To.forEach(t),RPr=i(oi),T(cC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Tqe=i(f),ef=n(f,"H2",{class:!0});var Lje=s(ef);fC=n(Lje,"A",{id:!0,class:!0,href:!0});var p3t=s(fC);H7e=n(p3t,"SPAN",{});var u3t=s(H7e);T(Px.$$.fragment,u3t),u3t.forEach(t),p3t.forEach(t),BPr=i(Lje),U7e=n(Lje,"SPAN",{});var _3t=s(U7e);PPr=r(_3t,"FlaxAutoModelForNextSentencePrediction"),_3t.forEach(t),Lje.forEach(t),Mqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(Ix.$$.fragment,ri),IPr=i(ri),of=n(ri,"P",{});var GZ=s(of);qPr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GY=n(GZ,"A",{href:!0});var b3t=s(GY);NPr=r(b3t,"from_pretrained()"),b3t.forEach(t),jPr=r(GZ," class method or the "),OY=n(GZ,"A",{href:!0});var v3t=s(OY);DPr=r(v3t,"from_config()"),v3t.forEach(t),GPr=r(GZ,` class
method.`),GZ.forEach(t),OPr=i(ri),qx=n(ri,"P",{});var xje=s(qx);VPr=r(xje,"This class cannot be instantiated directly using "),J7e=n(xje,"CODE",{});var F3t=s(J7e);XPr=r(F3t,"__init__()"),F3t.forEach(t),zPr=r(xje," (throws an error)."),xje.forEach(t),QPr=i(ri),Ht=n(ri,"DIV",{class:!0});var Iw=s(Ht);T(Nx.$$.fragment,Iw),WPr=i(Iw),Y7e=n(Iw,"P",{});var T3t=s(Y7e);HPr=r(T3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),T3t.forEach(t),UPr=i(Iw),rf=n(Iw,"P",{});var OZ=s(rf);JPr=r(OZ,`Note:
Loading a model from its configuration file does `),K7e=n(OZ,"STRONG",{});var M3t=s(K7e);YPr=r(M3t,"not"),M3t.forEach(t),KPr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(OZ,"A",{href:!0});var E3t=s(VY);ZPr=r(E3t,"from_pretrained()"),E3t.forEach(t),eIr=r(OZ," to load the model weights."),OZ.forEach(t),oIr=i(Iw),T(mC.$$.fragment,Iw),Iw.forEach(t),rIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(jx.$$.fragment,ti),tIr=i(ti),Z7e=n(ti,"P",{});var C3t=s(Z7e);aIr=r(C3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),C3t.forEach(t),nIr=i(ti),Mn=n(ti,"P",{});var qw=s(Mn);sIr=r(qw,"The model class to instantiate is selected based on the "),eMe=n(qw,"CODE",{});var w3t=s(eMe);lIr=r(w3t,"model_type"),w3t.forEach(t),iIr=r(qw,` property of the config object (either
passed as an argument or loaded from `),oMe=n(qw,"CODE",{});var A3t=s(oMe);dIr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),cIr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(qw,"CODE",{});var y3t=s(rMe);fIr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),mIr=r(qw,":"),qw.forEach(t),gIr=i(ti),tMe=n(ti,"UL",{});var L3t=s(tMe);gC=n(L3t,"LI",{});var FPe=s(gC);aMe=n(FPe,"STRONG",{});var x3t=s(aMe);hIr=r(x3t,"bert"),x3t.forEach(t),pIr=r(FPe," \u2014 "),XY=n(FPe,"A",{href:!0});var $3t=s(XY);uIr=r($3t,"FlaxBertForNextSentencePrediction"),$3t.forEach(t),_Ir=r(FPe," (BERT model)"),FPe.forEach(t),L3t.forEach(t),bIr=i(ti),T(hC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Eqe=i(f),tf=n(f,"H2",{class:!0});var $je=s(tf);pC=n($je,"A",{id:!0,class:!0,href:!0});var k3t=s(pC);nMe=n(k3t,"SPAN",{});var S3t=s(nMe);T(Dx.$$.fragment,S3t),S3t.forEach(t),k3t.forEach(t),vIr=i($je),sMe=n($je,"SPAN",{});var R3t=s(sMe);FIr=r(R3t,"FlaxAutoModelForImageClassification"),R3t.forEach(t),$je.forEach(t),Cqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Gx.$$.fragment,ai),TIr=i(ai),af=n(ai,"P",{});var VZ=s(af);MIr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zY=n(VZ,"A",{href:!0});var B3t=s(zY);EIr=r(B3t,"from_pretrained()"),B3t.forEach(t),CIr=r(VZ," class method or the "),QY=n(VZ,"A",{href:!0});var P3t=s(QY);wIr=r(P3t,"from_config()"),P3t.forEach(t),AIr=r(VZ,` class
method.`),VZ.forEach(t),yIr=i(ai),Ox=n(ai,"P",{});var kje=s(Ox);LIr=r(kje,"This class cannot be instantiated directly using "),lMe=n(kje,"CODE",{});var I3t=s(lMe);xIr=r(I3t,"__init__()"),I3t.forEach(t),$Ir=r(kje," (throws an error)."),kje.forEach(t),kIr=i(ai),Ut=n(ai,"DIV",{class:!0});var Nw=s(Ut);T(Vx.$$.fragment,Nw),SIr=i(Nw),iMe=n(Nw,"P",{});var q3t=s(iMe);RIr=r(q3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q3t.forEach(t),BIr=i(Nw),nf=n(Nw,"P",{});var XZ=s(nf);PIr=r(XZ,`Note:
Loading a model from its configuration file does `),dMe=n(XZ,"STRONG",{});var N3t=s(dMe);IIr=r(N3t,"not"),N3t.forEach(t),qIr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(XZ,"A",{href:!0});var j3t=s(WY);NIr=r(j3t,"from_pretrained()"),j3t.forEach(t),jIr=r(XZ," to load the model weights."),XZ.forEach(t),DIr=i(Nw),T(uC.$$.fragment,Nw),Nw.forEach(t),GIr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Xx.$$.fragment,ni),OIr=i(ni),cMe=n(ni,"P",{});var D3t=s(cMe);VIr=r(D3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),D3t.forEach(t),XIr=i(ni),En=n(ni,"P",{});var jw=s(En);zIr=r(jw,"The model class to instantiate is selected based on the "),fMe=n(jw,"CODE",{});var G3t=s(fMe);QIr=r(G3t,"model_type"),G3t.forEach(t),WIr=r(jw,` property of the config object (either
passed as an argument or loaded from `),mMe=n(jw,"CODE",{});var O3t=s(mMe);HIr=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),UIr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(jw,"CODE",{});var V3t=s(gMe);JIr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),YIr=r(jw,":"),jw.forEach(t),KIr=i(ni),zx=n(ni,"UL",{});var Sje=s(zx);_C=n(Sje,"LI",{});var TPe=s(_C);hMe=n(TPe,"STRONG",{});var X3t=s(hMe);ZIr=r(X3t,"beit"),X3t.forEach(t),eqr=r(TPe," \u2014 "),HY=n(TPe,"A",{href:!0});var z3t=s(HY);oqr=r(z3t,"FlaxBeitForImageClassification"),z3t.forEach(t),rqr=r(TPe," (BEiT model)"),TPe.forEach(t),tqr=i(Sje),bC=n(Sje,"LI",{});var MPe=s(bC);pMe=n(MPe,"STRONG",{});var Q3t=s(pMe);aqr=r(Q3t,"vit"),Q3t.forEach(t),nqr=r(MPe," \u2014 "),UY=n(MPe,"A",{href:!0});var W3t=s(UY);sqr=r(W3t,"FlaxViTForImageClassification"),W3t.forEach(t),lqr=r(MPe," (ViT model)"),MPe.forEach(t),Sje.forEach(t),iqr=i(ni),T(vC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),wqe=i(f),sf=n(f,"H2",{class:!0});var Rje=s(sf);FC=n(Rje,"A",{id:!0,class:!0,href:!0});var H3t=s(FC);uMe=n(H3t,"SPAN",{});var U3t=s(uMe);T(Qx.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),dqr=i(Rje),_Me=n(Rje,"SPAN",{});var J3t=s(_Me);cqr=r(J3t,"FlaxAutoModelForVision2Seq"),J3t.forEach(t),Rje.forEach(t),Aqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(Wx.$$.fragment,si),fqr=i(si),lf=n(si,"P",{});var zZ=s(lf);mqr=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JY=n(zZ,"A",{href:!0});var Y3t=s(JY);gqr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),hqr=r(zZ," class method or the "),YY=n(zZ,"A",{href:!0});var K3t=s(YY);pqr=r(K3t,"from_config()"),K3t.forEach(t),uqr=r(zZ,` class
method.`),zZ.forEach(t),_qr=i(si),Hx=n(si,"P",{});var Bje=s(Hx);bqr=r(Bje,"This class cannot be instantiated directly using "),bMe=n(Bje,"CODE",{});var Z3t=s(bMe);vqr=r(Z3t,"__init__()"),Z3t.forEach(t),Fqr=r(Bje," (throws an error)."),Bje.forEach(t),Tqr=i(si),Jt=n(si,"DIV",{class:!0});var Dw=s(Jt);T(Ux.$$.fragment,Dw),Mqr=i(Dw),vMe=n(Dw,"P",{});var ewt=s(vMe);Eqr=r(ewt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ewt.forEach(t),Cqr=i(Dw),df=n(Dw,"P",{});var QZ=s(df);wqr=r(QZ,`Note:
Loading a model from its configuration file does `),FMe=n(QZ,"STRONG",{});var owt=s(FMe);Aqr=r(owt,"not"),owt.forEach(t),yqr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(QZ,"A",{href:!0});var rwt=s(KY);Lqr=r(rwt,"from_pretrained()"),rwt.forEach(t),xqr=r(QZ," to load the model weights."),QZ.forEach(t),$qr=i(Dw),T(TC.$$.fragment,Dw),Dw.forEach(t),kqr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(Jx.$$.fragment,li),Sqr=i(li),TMe=n(li,"P",{});var twt=s(TMe);Rqr=r(twt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),twt.forEach(t),Bqr=i(li),Cn=n(li,"P",{});var Gw=s(Cn);Pqr=r(Gw,"The model class to instantiate is selected based on the "),MMe=n(Gw,"CODE",{});var awt=s(MMe);Iqr=r(awt,"model_type"),awt.forEach(t),qqr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),EMe=n(Gw,"CODE",{});var nwt=s(EMe);Nqr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),jqr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(Gw,"CODE",{});var swt=s(CMe);Dqr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),Gqr=r(Gw,":"),Gw.forEach(t),Oqr=i(li),wMe=n(li,"UL",{});var lwt=s(wMe);MC=n(lwt,"LI",{});var EPe=s(MC);AMe=n(EPe,"STRONG",{});var iwt=s(AMe);Vqr=r(iwt,"vision-encoder-decoder"),iwt.forEach(t),Xqr=r(EPe," \u2014 "),ZY=n(EPe,"A",{href:!0});var dwt=s(ZY);zqr=r(dwt,"FlaxVisionEncoderDecoderModel"),dwt.forEach(t),Qqr=r(EPe," (Vision Encoder decoder model)"),EPe.forEach(t),lwt.forEach(t),Wqr=i(li),T(EC.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(g6t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(vf,"id","transformers.AutoConfig"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(u$,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(_$,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertConfig"),c(b$,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(v$,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitConfig"),c(F$,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertConfig"),c(T$,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(M$,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdConfig"),c(E$,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(C$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(w$,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(A$,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertConfig"),c(y$,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineConfig"),c(L$,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPConfig"),c(x$,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertConfig"),c($$,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextConfig"),c(k$,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLConfig"),c(S$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(R$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(B$,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(P$,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaConfig"),c(I$,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(q$,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(N$,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTConfig"),c(j$,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrConfig"),c(D$,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertConfig"),c(G$,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRConfig"),c(O$,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTConfig"),c(V$,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraConfig"),c(X$,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(z$,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Q$,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetConfig"),c(W$,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTConfig"),c(H$,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelConfig"),c(U$,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNConfig"),c(J$,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Config"),c(Y$,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(K$,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJConfig"),c(Z$,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertConfig"),c(ek,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertConfig"),c(ok,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(rk,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(tk,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ak,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDConfig"),c(nk,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerConfig"),c(sk,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeConfig"),c(lk,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertConfig"),c(ik,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Config"),c(dk,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianConfig"),c(ck,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(fk,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartConfig"),c(mk,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(gk,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(hk,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetConfig"),c(pk,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Config"),c(uk,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(_k,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(bk,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTConfig"),c(vk,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusConfig"),c(Fk,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Tk,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartConfig"),c(Mk,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Ek,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ck,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(wk,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagConfig"),c(Ak,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmConfig"),c(yk,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerConfig"),c(Lk,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetConfig"),c(xk,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertConfig"),c($k,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetConfig"),c(kk,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertConfig"),c(Sk,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaConfig"),c(Rk,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerConfig"),c(Bk,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerConfig"),c(Pk,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWConfig"),c(Ik,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDConfig"),c(qk,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Nk,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(jk,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Dk,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterConfig"),c(Gk,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Ok,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinConfig"),c(Vk,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Config"),c(Xk,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasConfig"),c(zk,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartConfig"),c(Qk,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Wk,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRConfig"),c(Hk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Uk,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Jk,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanConfig"),c(Yk,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltConfig"),c(Kk,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Zk,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(eS,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(oS,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTConfig"),c(rS,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(tS,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(aS,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMConfig"),c(nS,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMConfig"),c(sS,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMConfig"),c(lS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(iS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(dS,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(cS,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetConfig"),c(fS,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosConfig"),c(mS,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"id","transformers.AutoTokenizer"),c(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bg,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(gS,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(hS,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(pS,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(uS,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizer"),c(_S,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartTokenizerFast"),c(bS,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizer"),c(vS,"href","/docs/transformers/pr_17088/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(FS,"href","/docs/transformers/pr_17088/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(TS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(MS,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(ES,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(CS,"href","/docs/transformers/pr_17088/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(wS,"href","/docs/transformers/pr_17088/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(AS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(yS,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(LS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(xS,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c($S,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(kS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(SS,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(RS,"href","/docs/transformers/pr_17088/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(BS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizer"),c(PS,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(IS,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineTokenizer"),c(qS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizer"),c(NS,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(jS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(DS,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(GS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizer"),c(OS,"href","/docs/transformers/pr_17088/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(VS,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(XS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zS,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QS,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizer"),c(WS,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(HS,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(US,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(JS,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(YS,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(KS,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ZS,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(eR,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizer"),c(oR,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(rR,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(tR,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizer"),c(aR,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(nR,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(sR,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizer"),c(lR,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(iR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizer"),c(pR,"href","/docs/transformers/pr_17088/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(uR,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_R,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bR,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(FR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(TR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(MR,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(ER,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CR,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizer"),c(AR,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDTokenizerFast"),c(yR,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LR,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xR,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeTokenizer"),c($R,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kR,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RR,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianTokenizer"),c(BR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizer"),c(PR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qR,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(NR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(jR,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17088/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(OR,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XR,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(QR,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(WR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(HR,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JR,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KR,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZR,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eB,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oB,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rB,"href","/docs/transformers/pr_17088/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tB,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aB,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17088/en/model_doc/rag#transformers.RagTokenizer"),c(iB,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizer"),c(dB,"href","/docs/transformers/pr_17088/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cB,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fB,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mB,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gB,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pB,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bB,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vB,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TB,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MB,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EB,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CB,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wB,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5Tokenizer"),c(yB,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.T5TokenizerFast"),c(LB,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasTokenizer"),c(xB,"href","/docs/transformers/pr_17088/en/model_doc/tapex#transformers.TapexTokenizer"),c($B,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizer"),c(SB,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(PB,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IB,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qB,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMTokenizer"),c(NB,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jB,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XB,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizer"),c(QB,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(WB,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aP,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(nP,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_P,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoProcessor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(bP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(vP,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPProcessor"),c(FP,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(TP,"href","/docs/transformers/pr_17088/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(MP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(wP,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(AP,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRProcessor"),c(yP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xP,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltProcessor"),c($P,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(kP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SP,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoModel"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(RP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PP,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IP,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertModel"),c(qP,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartModel"),c(NP,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitModel"),c(jP,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertModel"),c(DP,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(GP,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdModel"),c(OP,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(VP,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(XP,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(zP,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertModel"),c(QP,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineModel"),c(WP,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.CLIPModel"),c(HP,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertModel"),c(UP,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextModel"),c(JP,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLModel"),c(YP,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(KP,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(ZP,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(eI,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaModel"),c(oI,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(rI,"href","/docs/transformers/pr_17088/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(tI,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTModel"),c(aI,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrModel"),c(nI,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertModel"),c(sI,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(lI,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTModel"),c(iI,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraModel"),c(dI,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertModel"),c(cI,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetModel"),c(fI,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTModel"),c(mI,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelModel"),c(gI,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelBaseModel"),c(hI,"href","/docs/transformers/pr_17088/en/model_doc/glpn#transformers.GLPNModel"),c(pI,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2Model"),c(uI,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(_I,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJModel"),c(bI,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertModel"),c(vI,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertModel"),c(FI,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(TI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(MI,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(EI,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDModel"),c(CI,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerModel"),c(wI,"href","/docs/transformers/pr_17088/en/model_doc/luke#transformers.LukeModel"),c(AI,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertModel"),c(yI,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100Model"),c(LI,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianModel"),c(xI,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerModel"),c($I,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartModel"),c(kI,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(SI,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertModel"),c(RI,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetModel"),c(BI,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5Model"),c(PI,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerModel"),c(II,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(qI,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTModel"),c(NI,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusModel"),c(jI,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverModel"),c(DI,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartModel"),c(GI,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerModel"),c(OI,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(VI,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertModel"),c(XI,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModel"),c(zI,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetModel"),c(QI,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertModel"),c(WI,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetModel"),c(HI,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(UI,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaModel"),c(JI,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerModel"),c(YI,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerModel"),c(KI,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWModel"),c(ZI,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDModel"),c(eq,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oq,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterModel"),c(rq,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tq,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinModel"),c(aq,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5Model"),c(nq,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasModel"),c(sq,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(lq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechModel"),c(iq,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(dq,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanModel"),c(cq,"href","/docs/transformers/pr_17088/en/model_doc/vilt#transformers.ViltModel"),c(fq,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(mq,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertModel"),c(gq,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTModel"),c(hq,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(pq,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(uq,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMModel"),c(_q,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMModel"),c(bq,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMModel"),c(vq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Fq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Tq,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Mq,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetModel"),c(Eq,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosModel"),c(Cq,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForPreTraining"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(wq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yq,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lq,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForPreTraining"),c(xq,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($q,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForPreTraining"),c(kq,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Sq,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Rq,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Bq,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Pq,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Iq,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(qq,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForPreTraining"),c(jq,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Gq,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Oq,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Vq,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Xq,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zq,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Hq,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Uq,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Jq,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Kq,"href","/docs/transformers/pr_17088/en/model_doc/retribert#transformers.RetriBertModel"),c(Zq,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(eN,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(oN,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(rN,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(tN,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(aN,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(nN,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(sN,"href","/docs/transformers/pr_17088/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(lN,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(iN,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(dN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mN,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M_,"id","transformers.AutoModelForCausalLM"),c(M_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(gN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uN,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForCausalLM"),c(_N,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertLMHeadModel"),c(bN,"href","/docs/transformers/pr_17088/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(vN,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(FN,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(TN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(MN,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(EN,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(CN,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(wN,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(AN,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForCausalLM"),c(yN,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(LN,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(xN,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForCausalLM"),c($N,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianForCausalLM"),c(kN,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForCausalLM"),c(SN,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(RN,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(BN,"href","/docs/transformers/pr_17088/en/model_doc/opt#transformers.OPTForCausalLM"),c(PN,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(IN,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(qN,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(NN,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(jN,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(DN,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(GN,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(ON,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(VN,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(XN,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(zN,"href","/docs/transformers/pr_17088/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(QN,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(WN,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(HN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(UN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(JN,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(YN,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForMaskedLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(KN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZN,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ej,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oj,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(rj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMaskedLM"),c(aj,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(nj,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ij,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dj,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cj,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(mj,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gj,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(hj,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(pj,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_j,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(yj,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(xj,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kj,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSeq2SeqLM"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(Pj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ij,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qj,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Vj,"href","/docs/transformers/pr_17088/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_17088/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.MarianMTModel"),c(Wj,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17088/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForSequenceClassification"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(oD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aD,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c($D,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17088/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fb,"id","transformers.AutoModelForMultipleChoice"),c(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(YD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZD,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eG,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForNextSentencePrediction"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(xG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($G,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(RG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(BG,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(PG,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(IG,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zb,"id","transformers.AutoModelForTokenClassification"),c(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zb,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(qG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jG,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DG,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(GG,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForTokenClassification"),c(OG,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(VG,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(XG,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForTokenClassification"),c(zG,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(QG,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(WG,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(HG,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(UG,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(JG,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(YG,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(KG,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(eO,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(oO,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(rO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(tO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(aO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(nO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(sO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(iO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(dO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(mO,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(gO,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(pO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(uO,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(_O,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(bO,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForQuestionAnswering"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(vO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TO,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MO,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17088/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17088/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(IO,"href","/docs/transformers/pr_17088/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17088/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17088/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17088/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17088/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17088/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17088/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17088/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17088/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(tV,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(sV,"href","/docs/transformers/pr_17088/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForTableQuestionAnswering"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(lV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForImageClassification"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(fV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForImageClassification"),c(pV,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(uV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(_V,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassification"),c(bV,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vV,"href","/docs/transformers/pr_17088/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(FV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(TV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(MV,"href","/docs/transformers/pr_17088/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(EV,"href","/docs/transformers/pr_17088/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(CV,"href","/docs/transformers/pr_17088/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(wV,"href","/docs/transformers/pr_17088/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(AV,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(yV,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForImageClassification"),c(LV,"href","/docs/transformers/pr_17088/en/model_doc/van#transformers.VanForImageClassification"),c(xV,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForVision2Seq"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c($V,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForAudioClassification"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(BV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForAudioFrameClassification"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(zV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(UV,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(JV,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(YV,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForCTC"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(KV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(rX,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.HubertForCTC"),c(tX,"href","/docs/transformers/pr_17088/en/model_doc/sew#transformers.SEWForCTC"),c(aX,"href","/docs/transformers/pr_17088/en/model_doc/sew-d#transformers.SEWDForCTC"),c(nX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(sX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(lX,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(iX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(dX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17088/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(gX,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForAudioXVector"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(hX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(bX,"href","/docs/transformers/pr_17088/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(vX,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(FX,"href","/docs/transformers/pr_17088/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForMaskedImageModeling"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(TX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CX,"href","/docs/transformers/pr_17088/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(wX,"href","/docs/transformers/pr_17088/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(AX,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForObjectDetection"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(yX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForObjectDetection"),c(kX,"href","/docs/transformers/pr_17088/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.AutoModelForImageSegmentation"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PX,"href","/docs/transformers/pr_17088/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.AutoModelForSemanticSegmentation"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(IX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(DX,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(GX,"href","/docs/transformers/pr_17088/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(OX,"href","/docs/transformers/pr_17088/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.AutoModelForInstanceSegmentation"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(VX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17088/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.TFAutoModel"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(WX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertModel"),c(YX,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartModel"),c(KX,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertModel"),c(ZX,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(ez,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(oz,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertModel"),c(rz,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.TFCLIPModel"),c(tz,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertModel"),c(az,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextModel"),c(nz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLModel"),c(sz,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(lz,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaModel"),c(iz,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(dz,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(cz,"href","/docs/transformers/pr_17088/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(fz,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraModel"),c(mz,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(gz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelModel"),c(hz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(pz,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2Model"),c(uz,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJModel"),c(_z,"href","/docs/transformers/pr_17088/en/model_doc/hubert#transformers.TFHubertModel"),c(bz,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(vz,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDModel"),c(Fz,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerModel"),c(Tz,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Mz,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianModel"),c(Ez,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartModel"),c(Cz,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(wz,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Az,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5Model"),c(yz,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Lz,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusModel"),c(xz,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertModel"),c($z,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaModel"),c(kz,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Sz,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Rz,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5Model"),c(Bz,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasModel"),c(Pz,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Iz,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTModel"),c(qz,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Nz,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(jz,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMModel"),c(Dz,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Gz,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.TFAutoModelForPreTraining"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Oz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xz,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zz,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Qz,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Wz,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Hz,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Uz,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Jz,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Yz,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Kz,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Zz,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(eQ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(oQ,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17088/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(tQ,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(aQ,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(sQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(iQ,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(dQ,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17088/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(fQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModelForCausalLM"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(hQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(vQ,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(FQ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(TQ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(MQ,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(CQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(wQ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(AQ,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForImageClassification"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(xQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_17088/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(RQ,"href","/docs/transformers/pr_17088/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(BQ,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.TFAutoModelForMaskedLM"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.TFAutoModelForMaskedLM"),c(Yd,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qQ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(eW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(oW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(rW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ec,"class","relative group"),c(aW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iW,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(dW,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(cW,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(fW,"href","/docs/transformers/pr_17088/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(mW,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.TFMarianMTModel"),c(gW,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(uW,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.TFAutoModelForSequenceClassification"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.TFAutoModelForSequenceClassification"),c(tc,"class","relative group"),c(_W,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17088/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c($W,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17088/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17088/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModelForMultipleChoice"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModelForMultipleChoice"),c(sc,"class","relative group"),c(QW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(eH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(dc,"class","relative group"),c(mH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(uH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(_H,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_17088/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForTokenClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(TH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(wH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(AH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(LH,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(xH,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c($H,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(kH,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(SH,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(RH,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(BH,"href","/docs/transformers/pr_17088/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(PH,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(IH,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(qH,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(NH,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jH,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(DH,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(GH,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(OH,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(VH,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForQuestionAnswering"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(bc,"class","relative group"),c(XH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_17088/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_17088/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_17088/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_17088/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17088/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(rU,"href","/docs/transformers/pr_17088/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17088/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17088/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17088/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17088/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17088/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(fU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17088/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForVision2Seq"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForVision2Seq"),c(Tc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Cc,"class","relative group"),c(_U,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17088/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.FlaxAutoModel"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.FlaxAutoModel"),c(yc,"class","relative group"),c(TU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertModel"),c(wU,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartModel"),c(AU,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitModel"),c(yU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertModel"),c(LU,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(xU,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c($U,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(kU,"href","/docs/transformers/pr_17088/en/model_doc/clip#transformers.FlaxCLIPModel"),c(SU,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(RU,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraModel"),c(BU,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(PU,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(IU,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(qU,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianModel"),c(NU,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartModel"),c(jU,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5Model"),c(DU,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(GU,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(OU,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(VU,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5Model"),c(XU,"href","/docs/transformers/pr_17088/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(zU,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTModel"),c(QU,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(WU,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(HU,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.FlaxAutoModelForCausalLM"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.FlaxAutoModelForCausalLM"),c($c,"class","relative group"),c(UU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(ZU,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(eJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(oJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(rJ,"href","/docs/transformers/pr_17088/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(tJ,"href","/docs/transformers/pr_17088/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(aJ,"href","/docs/transformers/pr_17088/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(nJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(sJ,"href","/docs/transformers/pr_17088/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.FlaxAutoModelForPreTraining"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Rc,"class","relative group"),c(lJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(gJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(hJ,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17088/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(TJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.FlaxAutoModelForMaskedLM"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ic,"class","relative group"),c(MJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c($J,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(jc,"class","relative group"),c(PJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17088/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17088/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(OJ,"href","/docs/transformers/pr_17088/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VJ,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17088/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17088/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17088/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Oc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(zc,"class","relative group"),c(sY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_17088/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_17088/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForTokenClassification"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Hc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(EY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(wY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(AY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(yY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(LY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Yc,"class","relative group"),c($Y,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RY,"href","/docs/transformers/pr_17088/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17088/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17088/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17088/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17088/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17088/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17088/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ef,"class","relative group"),c(GY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17088/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForImageClassification"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForImageClassification"),c(tf,"class","relative group"),c(zY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17088/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(UY,"href","/docs/transformers/pr_17088/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.FlaxAutoModelForVision2Seq"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(sf,"class","relative group"),c(JY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17088/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17088/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,gf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,Ow),e(et,hf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,An),e(An,Vw),e(Xe,yn),e(Xe,Ln),e(Ln,Xw),e(Xe,mi),e(Xe,xn),e(xn,zw),e(Xe,gi),b(f,pf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,c$),e(Ae,hi),e(hi,f$),e(Ae,m$),b(f,Eo,_),b(f,Ea,_),e(Ea,g$),e(Ea,uf),e(uf,h$),e(Ea,Pje),b(f,CPe,_),b(f,pi,_),e(pi,_f),e(_f,WZ),M(Qw,WZ,null),e(pi,Ije),e(pi,HZ),e(HZ,qje),b(f,wPe,_),b(f,$n,_),e($n,Nje),e($n,UZ),e(UZ,jje),e($n,Dje),e($n,JZ),e(JZ,Gje),e($n,Oje),b(f,APe,_),M(Ww,f,_),b(f,yPe,_),b(f,p$,_),e(p$,Vje),b(f,LPe,_),M(bf,f,_),b(f,xPe,_),b(f,ui,_),e(ui,vf),e(vf,YZ),M(Hw,YZ,null),e(ui,Xje),e(ui,KZ),e(KZ,zje),b(f,$Pe,_),b(f,Co,_),M(Uw,Co,null),e(Co,Qje),e(Co,Jw),e(Jw,Wje),e(Jw,u$),e(u$,Hje),e(Jw,Uje),e(Co,Jje),e(Co,Yw),e(Yw,Yje),e(Yw,ZZ),e(ZZ,Kje),e(Yw,Zje),e(Co,eDe),e(Co,Er),M(Kw,Er,null),e(Er,oDe),e(Er,eee),e(eee,rDe),e(Er,tDe),e(Er,_i),e(_i,aDe),e(_i,oee),e(oee,nDe),e(_i,sDe),e(_i,ree),e(ree,lDe),e(_i,iDe),e(Er,dDe),e(Er,y),e(y,Ff),e(Ff,tee),e(tee,cDe),e(Ff,fDe),e(Ff,_$),e(_$,mDe),e(Ff,gDe),e(y,hDe),e(y,Tf),e(Tf,aee),e(aee,pDe),e(Tf,uDe),e(Tf,b$),e(b$,_De),e(Tf,bDe),e(y,vDe),e(y,Mf),e(Mf,nee),e(nee,FDe),e(Mf,TDe),e(Mf,v$),e(v$,MDe),e(Mf,EDe),e(y,CDe),e(y,Ef),e(Ef,see),e(see,wDe),e(Ef,ADe),e(Ef,F$),e(F$,yDe),e(Ef,LDe),e(y,xDe),e(y,Cf),e(Cf,lee),e(lee,$De),e(Cf,kDe),e(Cf,T$),e(T$,SDe),e(Cf,RDe),e(y,BDe),e(y,wf),e(wf,iee),e(iee,PDe),e(wf,IDe),e(wf,M$),e(M$,qDe),e(wf,NDe),e(y,jDe),e(y,Af),e(Af,dee),e(dee,DDe),e(Af,GDe),e(Af,E$),e(E$,ODe),e(Af,VDe),e(y,XDe),e(y,yf),e(yf,cee),e(cee,zDe),e(yf,QDe),e(yf,C$),e(C$,WDe),e(yf,HDe),e(y,UDe),e(y,Lf),e(Lf,fee),e(fee,JDe),e(Lf,YDe),e(Lf,w$),e(w$,KDe),e(Lf,ZDe),e(y,eGe),e(y,xf),e(xf,mee),e(mee,oGe),e(xf,rGe),e(xf,A$),e(A$,tGe),e(xf,aGe),e(y,nGe),e(y,$f),e($f,gee),e(gee,sGe),e($f,lGe),e($f,y$),e(y$,iGe),e($f,dGe),e(y,cGe),e(y,kf),e(kf,hee),e(hee,fGe),e(kf,mGe),e(kf,L$),e(L$,gGe),e(kf,hGe),e(y,pGe),e(y,Sf),e(Sf,pee),e(pee,uGe),e(Sf,_Ge),e(Sf,x$),e(x$,bGe),e(Sf,vGe),e(y,FGe),e(y,Rf),e(Rf,uee),e(uee,TGe),e(Rf,MGe),e(Rf,$$),e($$,EGe),e(Rf,CGe),e(y,wGe),e(y,Bf),e(Bf,_ee),e(_ee,AGe),e(Bf,yGe),e(Bf,k$),e(k$,LGe),e(Bf,xGe),e(y,$Ge),e(y,Pf),e(Pf,bee),e(bee,kGe),e(Pf,SGe),e(Pf,S$),e(S$,RGe),e(Pf,BGe),e(y,PGe),e(y,If),e(If,vee),e(vee,IGe),e(If,qGe),e(If,R$),e(R$,NGe),e(If,jGe),e(y,DGe),e(y,qf),e(qf,Fee),e(Fee,GGe),e(qf,OGe),e(qf,B$),e(B$,VGe),e(qf,XGe),e(y,zGe),e(y,Nf),e(Nf,Tee),e(Tee,QGe),e(Nf,WGe),e(Nf,P$),e(P$,HGe),e(Nf,UGe),e(y,JGe),e(y,jf),e(jf,Mee),e(Mee,YGe),e(jf,KGe),e(jf,I$),e(I$,ZGe),e(jf,eOe),e(y,oOe),e(y,Df),e(Df,Eee),e(Eee,rOe),e(Df,tOe),e(Df,q$),e(q$,aOe),e(Df,nOe),e(y,sOe),e(y,Gf),e(Gf,Cee),e(Cee,lOe),e(Gf,iOe),e(Gf,N$),e(N$,dOe),e(Gf,cOe),e(y,fOe),e(y,Of),e(Of,wee),e(wee,mOe),e(Of,gOe),e(Of,j$),e(j$,hOe),e(Of,pOe),e(y,uOe),e(y,Vf),e(Vf,Aee),e(Aee,_Oe),e(Vf,bOe),e(Vf,D$),e(D$,vOe),e(Vf,FOe),e(y,TOe),e(y,Xf),e(Xf,yee),e(yee,MOe),e(Xf,EOe),e(Xf,G$),e(G$,COe),e(Xf,wOe),e(y,AOe),e(y,zf),e(zf,Lee),e(Lee,yOe),e(zf,LOe),e(zf,O$),e(O$,xOe),e(zf,$Oe),e(y,kOe),e(y,Qf),e(Qf,xee),e(xee,SOe),e(Qf,ROe),e(Qf,V$),e(V$,BOe),e(Qf,POe),e(y,IOe),e(y,Wf),e(Wf,$ee),e($ee,qOe),e(Wf,NOe),e(Wf,X$),e(X$,jOe),e(Wf,DOe),e(y,GOe),e(y,Hf),e(Hf,kee),e(kee,OOe),e(Hf,VOe),e(Hf,z$),e(z$,XOe),e(Hf,zOe),e(y,QOe),e(y,Uf),e(Uf,See),e(See,WOe),e(Uf,HOe),e(Uf,Q$),e(Q$,UOe),e(Uf,JOe),e(y,YOe),e(y,Jf),e(Jf,Ree),e(Ree,KOe),e(Jf,ZOe),e(Jf,W$),e(W$,eVe),e(Jf,oVe),e(y,rVe),e(y,Yf),e(Yf,Bee),e(Bee,tVe),e(Yf,aVe),e(Yf,H$),e(H$,nVe),e(Yf,sVe),e(y,lVe),e(y,Kf),e(Kf,Pee),e(Pee,iVe),e(Kf,dVe),e(Kf,U$),e(U$,cVe),e(Kf,fVe),e(y,mVe),e(y,Zf),e(Zf,Iee),e(Iee,gVe),e(Zf,hVe),e(Zf,J$),e(J$,pVe),e(Zf,uVe),e(y,_Ve),e(y,em),e(em,qee),e(qee,bVe),e(em,vVe),e(em,Y$),e(Y$,FVe),e(em,TVe),e(y,MVe),e(y,om),e(om,Nee),e(Nee,EVe),e(om,CVe),e(om,K$),e(K$,wVe),e(om,AVe),e(y,yVe),e(y,rm),e(rm,jee),e(jee,LVe),e(rm,xVe),e(rm,Z$),e(Z$,$Ve),e(rm,kVe),e(y,SVe),e(y,tm),e(tm,Dee),e(Dee,RVe),e(tm,BVe),e(tm,ek),e(ek,PVe),e(tm,IVe),e(y,qVe),e(y,am),e(am,Gee),e(Gee,NVe),e(am,jVe),e(am,ok),e(ok,DVe),e(am,GVe),e(y,OVe),e(y,nm),e(nm,Oee),e(Oee,VVe),e(nm,XVe),e(nm,rk),e(rk,zVe),e(nm,QVe),e(y,WVe),e(y,sm),e(sm,Vee),e(Vee,HVe),e(sm,UVe),e(sm,tk),e(tk,JVe),e(sm,YVe),e(y,KVe),e(y,lm),e(lm,Xee),e(Xee,ZVe),e(lm,eXe),e(lm,ak),e(ak,oXe),e(lm,rXe),e(y,tXe),e(y,im),e(im,zee),e(zee,aXe),e(im,nXe),e(im,nk),e(nk,sXe),e(im,lXe),e(y,iXe),e(y,dm),e(dm,Qee),e(Qee,dXe),e(dm,cXe),e(dm,sk),e(sk,fXe),e(dm,mXe),e(y,gXe),e(y,cm),e(cm,Wee),e(Wee,hXe),e(cm,pXe),e(cm,lk),e(lk,uXe),e(cm,_Xe),e(y,bXe),e(y,fm),e(fm,Hee),e(Hee,vXe),e(fm,FXe),e(fm,ik),e(ik,TXe),e(fm,MXe),e(y,EXe),e(y,mm),e(mm,Uee),e(Uee,CXe),e(mm,wXe),e(mm,dk),e(dk,AXe),e(mm,yXe),e(y,LXe),e(y,gm),e(gm,Jee),e(Jee,xXe),e(gm,$Xe),e(gm,ck),e(ck,kXe),e(gm,SXe),e(y,RXe),e(y,hm),e(hm,Yee),e(Yee,BXe),e(hm,PXe),e(hm,fk),e(fk,IXe),e(hm,qXe),e(y,NXe),e(y,pm),e(pm,Kee),e(Kee,jXe),e(pm,DXe),e(pm,mk),e(mk,GXe),e(pm,OXe),e(y,VXe),e(y,um),e(um,Zee),e(Zee,XXe),e(um,zXe),e(um,gk),e(gk,QXe),e(um,WXe),e(y,HXe),e(y,_m),e(_m,eoe),e(eoe,UXe),e(_m,JXe),e(_m,hk),e(hk,YXe),e(_m,KXe),e(y,ZXe),e(y,bm),e(bm,ooe),e(ooe,eze),e(bm,oze),e(bm,pk),e(pk,rze),e(bm,tze),e(y,aze),e(y,vm),e(vm,roe),e(roe,nze),e(vm,sze),e(vm,uk),e(uk,lze),e(vm,ize),e(y,dze),e(y,Fm),e(Fm,toe),e(toe,cze),e(Fm,fze),e(Fm,_k),e(_k,mze),e(Fm,gze),e(y,hze),e(y,Tm),e(Tm,aoe),e(aoe,pze),e(Tm,uze),e(Tm,bk),e(bk,_ze),e(Tm,bze),e(y,vze),e(y,Mm),e(Mm,noe),e(noe,Fze),e(Mm,Tze),e(Mm,vk),e(vk,Mze),e(Mm,Eze),e(y,Cze),e(y,Em),e(Em,soe),e(soe,wze),e(Em,Aze),e(Em,Fk),e(Fk,yze),e(Em,Lze),e(y,xze),e(y,Cm),e(Cm,loe),e(loe,$ze),e(Cm,kze),e(Cm,Tk),e(Tk,Sze),e(Cm,Rze),e(y,Bze),e(y,wm),e(wm,ioe),e(ioe,Pze),e(wm,Ize),e(wm,Mk),e(Mk,qze),e(wm,Nze),e(y,jze),e(y,Am),e(Am,doe),e(doe,Dze),e(Am,Gze),e(Am,Ek),e(Ek,Oze),e(Am,Vze),e(y,Xze),e(y,ym),e(ym,coe),e(coe,zze),e(ym,Qze),e(ym,Ck),e(Ck,Wze),e(ym,Hze),e(y,Uze),e(y,Lm),e(Lm,foe),e(foe,Jze),e(Lm,Yze),e(Lm,wk),e(wk,Kze),e(Lm,Zze),e(y,eQe),e(y,xm),e(xm,moe),e(moe,oQe),e(xm,rQe),e(xm,Ak),e(Ak,tQe),e(xm,aQe),e(y,nQe),e(y,$m),e($m,goe),e(goe,sQe),e($m,lQe),e($m,yk),e(yk,iQe),e($m,dQe),e(y,cQe),e(y,km),e(km,hoe),e(hoe,fQe),e(km,mQe),e(km,Lk),e(Lk,gQe),e(km,hQe),e(y,pQe),e(y,Sm),e(Sm,poe),e(poe,uQe),e(Sm,_Qe),e(Sm,xk),e(xk,bQe),e(Sm,vQe),e(y,FQe),e(y,Rm),e(Rm,uoe),e(uoe,TQe),e(Rm,MQe),e(Rm,$k),e($k,EQe),e(Rm,CQe),e(y,wQe),e(y,Bm),e(Bm,_oe),e(_oe,AQe),e(Bm,yQe),e(Bm,kk),e(kk,LQe),e(Bm,xQe),e(y,$Qe),e(y,Pm),e(Pm,boe),e(boe,kQe),e(Pm,SQe),e(Pm,Sk),e(Sk,RQe),e(Pm,BQe),e(y,PQe),e(y,Im),e(Im,voe),e(voe,IQe),e(Im,qQe),e(Im,Rk),e(Rk,NQe),e(Im,jQe),e(y,DQe),e(y,qm),e(qm,Foe),e(Foe,GQe),e(qm,OQe),e(qm,Bk),e(Bk,VQe),e(qm,XQe),e(y,zQe),e(y,Nm),e(Nm,Toe),e(Toe,QQe),e(Nm,WQe),e(Nm,Pk),e(Pk,HQe),e(Nm,UQe),e(y,JQe),e(y,jm),e(jm,Moe),e(Moe,YQe),e(jm,KQe),e(jm,Ik),e(Ik,ZQe),e(jm,eWe),e(y,oWe),e(y,Dm),e(Dm,Eoe),e(Eoe,rWe),e(Dm,tWe),e(Dm,qk),e(qk,aWe),e(Dm,nWe),e(y,sWe),e(y,Gm),e(Gm,Coe),e(Coe,lWe),e(Gm,iWe),e(Gm,Nk),e(Nk,dWe),e(Gm,cWe),e(y,fWe),e(y,Om),e(Om,woe),e(woe,mWe),e(Om,gWe),e(Om,jk),e(jk,hWe),e(Om,pWe),e(y,uWe),e(y,Vm),e(Vm,Aoe),e(Aoe,_We),e(Vm,bWe),e(Vm,Dk),e(Dk,vWe),e(Vm,FWe),e(y,TWe),e(y,Xm),e(Xm,yoe),e(yoe,MWe),e(Xm,EWe),e(Xm,Gk),e(Gk,CWe),e(Xm,wWe),e(y,AWe),e(y,zm),e(zm,Loe),e(Loe,yWe),e(zm,LWe),e(zm,Ok),e(Ok,xWe),e(zm,$We),e(y,kWe),e(y,Qm),e(Qm,xoe),e(xoe,SWe),e(Qm,RWe),e(Qm,Vk),e(Vk,BWe),e(Qm,PWe),e(y,IWe),e(y,Wm),e(Wm,$oe),e($oe,qWe),e(Wm,NWe),e(Wm,Xk),e(Xk,jWe),e(Wm,DWe),e(y,GWe),e(y,Hm),e(Hm,koe),e(koe,OWe),e(Hm,VWe),e(Hm,zk),e(zk,XWe),e(Hm,zWe),e(y,QWe),e(y,Um),e(Um,Soe),e(Soe,WWe),e(Um,HWe),e(Um,Qk),e(Qk,UWe),e(Um,JWe),e(y,YWe),e(y,Jm),e(Jm,Roe),e(Roe,KWe),e(Jm,ZWe),e(Jm,Wk),e(Wk,eHe),e(Jm,oHe),e(y,rHe),e(y,Ym),e(Ym,Boe),e(Boe,tHe),e(Ym,aHe),e(Ym,Hk),e(Hk,nHe),e(Ym,sHe),e(y,lHe),e(y,Km),e(Km,Poe),e(Poe,iHe),e(Km,dHe),e(Km,Uk),e(Uk,cHe),e(Km,fHe),e(y,mHe),e(y,Zm),e(Zm,Ioe),e(Ioe,gHe),e(Zm,hHe),e(Zm,Jk),e(Jk,pHe),e(Zm,uHe),e(y,_He),e(y,eg),e(eg,qoe),e(qoe,bHe),e(eg,vHe),e(eg,Yk),e(Yk,FHe),e(eg,THe),e(y,MHe),e(y,og),e(og,Noe),e(Noe,EHe),e(og,CHe),e(og,Kk),e(Kk,wHe),e(og,AHe),e(y,yHe),e(y,rg),e(rg,joe),e(joe,LHe),e(rg,xHe),e(rg,Zk),e(Zk,$He),e(rg,kHe),e(y,SHe),e(y,tg),e(tg,Doe),e(Doe,RHe),e(tg,BHe),e(tg,eS),e(eS,PHe),e(tg,IHe),e(y,qHe),e(y,ag),e(ag,Goe),e(Goe,NHe),e(ag,jHe),e(ag,oS),e(oS,DHe),e(ag,GHe),e(y,OHe),e(y,ng),e(ng,Ooe),e(Ooe,VHe),e(ng,XHe),e(ng,rS),e(rS,zHe),e(ng,QHe),e(y,WHe),e(y,sg),e(sg,Voe),e(Voe,HHe),e(sg,UHe),e(sg,tS),e(tS,JHe),e(sg,YHe),e(y,KHe),e(y,lg),e(lg,Xoe),e(Xoe,ZHe),e(lg,eUe),e(lg,aS),e(aS,oUe),e(lg,rUe),e(y,tUe),e(y,ig),e(ig,zoe),e(zoe,aUe),e(ig,nUe),e(ig,nS),e(nS,sUe),e(ig,lUe),e(y,iUe),e(y,dg),e(dg,Qoe),e(Qoe,dUe),e(dg,cUe),e(dg,sS),e(sS,fUe),e(dg,mUe),e(y,gUe),e(y,cg),e(cg,Woe),e(Woe,hUe),e(cg,pUe),e(cg,lS),e(lS,uUe),e(cg,_Ue),e(y,bUe),e(y,fg),e(fg,Hoe),e(Hoe,vUe),e(fg,FUe),e(fg,iS),e(iS,TUe),e(fg,MUe),e(y,EUe),e(y,mg),e(mg,Uoe),e(Uoe,CUe),e(mg,wUe),e(mg,dS),e(dS,AUe),e(mg,yUe),e(y,LUe),e(y,gg),e(gg,Joe),e(Joe,xUe),e(gg,$Ue),e(gg,cS),e(cS,kUe),e(gg,SUe),e(y,RUe),e(y,hg),e(hg,Yoe),e(Yoe,BUe),e(hg,PUe),e(hg,fS),e(fS,IUe),e(hg,qUe),e(y,NUe),e(y,pg),e(pg,Koe),e(Koe,jUe),e(pg,DUe),e(pg,mS),e(mS,GUe),e(pg,OUe),e(Er,VUe),M(ug,Er,null),e(Co,XUe),e(Co,_g),M(Zw,_g,null),e(_g,zUe),e(_g,Zoe),e(Zoe,QUe),b(f,kPe,_),b(f,bi,_),e(bi,bg),e(bg,ere),M(eA,ere,null),e(bi,WUe),e(bi,ore),e(ore,HUe),b(f,SPe,_),b(f,wo,_),M(oA,wo,null),e(wo,UUe),e(wo,rA),e(rA,JUe),e(rA,gS),e(gS,YUe),e(rA,KUe),e(wo,ZUe),e(wo,tA),e(tA,eJe),e(tA,rre),e(rre,oJe),e(tA,rJe),e(wo,tJe),e(wo,Cr),M(aA,Cr,null),e(Cr,aJe),e(Cr,tre),e(tre,nJe),e(Cr,sJe),e(Cr,Ca),e(Ca,lJe),e(Ca,are),e(are,iJe),e(Ca,dJe),e(Ca,nre),e(nre,cJe),e(Ca,fJe),e(Ca,sre),e(sre,mJe),e(Ca,gJe),e(Cr,hJe),e(Cr,k),e(k,kn),e(kn,lre),e(lre,pJe),e(kn,uJe),e(kn,hS),e(hS,_Je),e(kn,bJe),e(kn,pS),e(pS,vJe),e(kn,FJe),e(k,TJe),e(k,Sn),e(Sn,ire),e(ire,MJe),e(Sn,EJe),e(Sn,uS),e(uS,CJe),e(Sn,wJe),e(Sn,_S),e(_S,AJe),e(Sn,yJe),e(k,LJe),e(k,Rn),e(Rn,dre),e(dre,xJe),e(Rn,$Je),e(Rn,bS),e(bS,kJe),e(Rn,SJe),e(Rn,vS),e(vS,RJe),e(Rn,BJe),e(k,PJe),e(k,vg),e(vg,cre),e(cre,IJe),e(vg,qJe),e(vg,FS),e(FS,NJe),e(vg,jJe),e(k,DJe),e(k,Bn),e(Bn,fre),e(fre,GJe),e(Bn,OJe),e(Bn,TS),e(TS,VJe),e(Bn,XJe),e(Bn,MS),e(MS,zJe),e(Bn,QJe),e(k,WJe),e(k,Fg),e(Fg,mre),e(mre,HJe),e(Fg,UJe),e(Fg,ES),e(ES,JJe),e(Fg,YJe),e(k,KJe),e(k,Tg),e(Tg,gre),e(gre,ZJe),e(Tg,eYe),e(Tg,CS),e(CS,oYe),e(Tg,rYe),e(k,tYe),e(k,Mg),e(Mg,hre),e(hre,aYe),e(Mg,nYe),e(Mg,wS),e(wS,sYe),e(Mg,lYe),e(k,iYe),e(k,Pn),e(Pn,pre),e(pre,dYe),e(Pn,cYe),e(Pn,AS),e(AS,fYe),e(Pn,mYe),e(Pn,yS),e(yS,gYe),e(Pn,hYe),e(k,pYe),e(k,In),e(In,ure),e(ure,uYe),e(In,_Ye),e(In,LS),e(LS,bYe),e(In,vYe),e(In,xS),e(xS,FYe),e(In,TYe),e(k,MYe),e(k,qn),e(qn,_re),e(_re,EYe),e(qn,CYe),e(qn,$S),e($S,wYe),e(qn,AYe),e(qn,kS),e(kS,yYe),e(qn,LYe),e(k,xYe),e(k,Eg),e(Eg,bre),e(bre,$Ye),e(Eg,kYe),e(Eg,SS),e(SS,SYe),e(Eg,RYe),e(k,BYe),e(k,Cg),e(Cg,vre),e(vre,PYe),e(Cg,IYe),e(Cg,RS),e(RS,qYe),e(Cg,NYe),e(k,jYe),e(k,Nn),e(Nn,Fre),e(Fre,DYe),e(Nn,GYe),e(Nn,BS),e(BS,OYe),e(Nn,VYe),e(Nn,PS),e(PS,XYe),e(Nn,zYe),e(k,QYe),e(k,wg),e(wg,Tre),e(Tre,WYe),e(wg,HYe),e(wg,IS),e(IS,UYe),e(wg,JYe),e(k,YYe),e(k,jn),e(jn,Mre),e(Mre,KYe),e(jn,ZYe),e(jn,qS),e(qS,eKe),e(jn,oKe),e(jn,NS),e(NS,rKe),e(jn,tKe),e(k,aKe),e(k,Dn),e(Dn,Ere),e(Ere,nKe),e(Dn,sKe),e(Dn,jS),e(jS,lKe),e(Dn,iKe),e(Dn,DS),e(DS,dKe),e(Dn,cKe),e(k,fKe),e(k,Gn),e(Gn,Cre),e(Cre,mKe),e(Gn,gKe),e(Gn,GS),e(GS,hKe),e(Gn,pKe),e(Gn,OS),e(OS,uKe),e(Gn,_Ke),e(k,bKe),e(k,Ag),e(Ag,wre),e(wre,vKe),e(Ag,FKe),e(Ag,VS),e(VS,TKe),e(Ag,MKe),e(k,EKe),e(k,On),e(On,Are),e(Are,CKe),e(On,wKe),e(On,XS),e(XS,AKe),e(On,yKe),e(On,zS),e(zS,LKe),e(On,xKe),e(k,$Ke),e(k,Vn),e(Vn,yre),e(yre,kKe),e(Vn,SKe),e(Vn,QS),e(QS,RKe),e(Vn,BKe),e(Vn,WS),e(WS,PKe),e(Vn,IKe),e(k,qKe),e(k,Xn),e(Xn,Lre),e(Lre,NKe),e(Xn,jKe),e(Xn,HS),e(HS,DKe),e(Xn,GKe),e(Xn,US),e(US,OKe),e(Xn,VKe),e(k,XKe),e(k,zn),e(zn,xre),e(xre,zKe),e(zn,QKe),e(zn,JS),e(JS,WKe),e(zn,HKe),e(zn,YS),e(YS,UKe),e(zn,JKe),e(k,YKe),e(k,Qn),e(Qn,$re),e($re,KKe),e(Qn,ZKe),e(Qn,KS),e(KS,eZe),e(Qn,oZe),e(Qn,ZS),e(ZS,rZe),e(Qn,tZe),e(k,aZe),e(k,Wn),e(Wn,kre),e(kre,nZe),e(Wn,sZe),e(Wn,eR),e(eR,lZe),e(Wn,iZe),e(Wn,oR),e(oR,dZe),e(Wn,cZe),e(k,fZe),e(k,yg),e(yg,Sre),e(Sre,mZe),e(yg,gZe),e(yg,rR),e(rR,hZe),e(yg,pZe),e(k,uZe),e(k,Hn),e(Hn,Rre),e(Rre,_Ze),e(Hn,bZe),e(Hn,tR),e(tR,vZe),e(Hn,FZe),e(Hn,aR),e(aR,TZe),e(Hn,MZe),e(k,EZe),e(k,Lg),e(Lg,Bre),e(Bre,CZe),e(Lg,wZe),e(Lg,nR),e(nR,AZe),e(Lg,yZe),e(k,LZe),e(k,Un),e(Un,Pre),e(Pre,xZe),e(Un,$Ze),e(Un,sR),e(sR,kZe),e(Un,SZe),e(Un,lR),e(lR,RZe),e(Un,BZe),e(k,PZe),e(k,Jn),e(Jn,Ire),e(Ire,IZe),e(Jn,qZe),e(Jn,iR),e(iR,NZe),e(Jn,jZe),e(Jn,dR),e(dR,DZe),e(Jn,GZe),e(k,OZe),e(k,Yn),e(Yn,qre),e(qre,VZe),e(Yn,XZe),e(Yn,cR),e(cR,zZe),e(Yn,QZe),e(Yn,fR),e(fR,WZe),e(Yn,HZe),e(k,UZe),e(k,Kn),e(Kn,Nre),e(Nre,JZe),e(Kn,YZe),e(Kn,mR),e(mR,KZe),e(Kn,ZZe),e(Kn,gR),e(gR,eeo),e(Kn,oeo),e(k,reo),e(k,Zn),e(Zn,jre),e(jre,teo),e(Zn,aeo),e(Zn,hR),e(hR,neo),e(Zn,seo),e(Zn,pR),e(pR,leo),e(Zn,ieo),e(k,deo),e(k,xg),e(xg,Dre),e(Dre,ceo),e(xg,feo),e(xg,uR),e(uR,meo),e(xg,geo),e(k,heo),e(k,es),e(es,Gre),e(Gre,peo),e(es,ueo),e(es,_R),e(_R,_eo),e(es,beo),e(es,bR),e(bR,veo),e(es,Feo),e(k,Teo),e(k,os),e(os,Ore),e(Ore,Meo),e(os,Eeo),e(os,vR),e(vR,Ceo),e(os,weo),e(os,FR),e(FR,Aeo),e(os,yeo),e(k,Leo),e(k,rs),e(rs,Vre),e(Vre,xeo),e(rs,$eo),e(rs,TR),e(TR,keo),e(rs,Seo),e(rs,MR),e(MR,Reo),e(rs,Beo),e(k,Peo),e(k,ts),e(ts,Xre),e(Xre,Ieo),e(ts,qeo),e(ts,ER),e(ER,Neo),e(ts,jeo),e(ts,CR),e(CR,Deo),e(ts,Geo),e(k,Oeo),e(k,as),e(as,zre),e(zre,Veo),e(as,Xeo),e(as,wR),e(wR,zeo),e(as,Qeo),e(as,AR),e(AR,Weo),e(as,Heo),e(k,Ueo),e(k,ns),e(ns,Qre),e(Qre,Jeo),e(ns,Yeo),e(ns,yR),e(yR,Keo),e(ns,Zeo),e(ns,LR),e(LR,eoo),e(ns,ooo),e(k,roo),e(k,$g),e($g,Wre),e(Wre,too),e($g,aoo),e($g,xR),e(xR,noo),e($g,soo),e(k,loo),e(k,ss),e(ss,Hre),e(Hre,ioo),e(ss,doo),e(ss,$R),e($R,coo),e(ss,foo),e(ss,kR),e(kR,moo),e(ss,goo),e(k,hoo),e(k,kg),e(kg,Ure),e(Ure,poo),e(kg,uoo),e(kg,SR),e(SR,_oo),e(kg,boo),e(k,voo),e(k,Sg),e(Sg,Jre),e(Jre,Foo),e(Sg,Too),e(Sg,RR),e(RR,Moo),e(Sg,Eoo),e(k,Coo),e(k,ls),e(ls,Yre),e(Yre,woo),e(ls,Aoo),e(ls,BR),e(BR,yoo),e(ls,Loo),e(ls,PR),e(PR,xoo),e(ls,$oo),e(k,koo),e(k,is),e(is,Kre),e(Kre,Soo),e(is,Roo),e(is,IR),e(IR,Boo),e(is,Poo),e(is,qR),e(qR,Ioo),e(is,qoo),e(k,Noo),e(k,ds),e(ds,Zre),e(Zre,joo),e(ds,Doo),e(ds,NR),e(NR,Goo),e(ds,Ooo),e(ds,jR),e(jR,Voo),e(ds,Xoo),e(k,zoo),e(k,Rg),e(Rg,ete),e(ete,Qoo),e(Rg,Woo),e(Rg,DR),e(DR,Hoo),e(Rg,Uoo),e(k,Joo),e(k,cs),e(cs,ote),e(ote,Yoo),e(cs,Koo),e(cs,GR),e(GR,Zoo),e(cs,ero),e(cs,OR),e(OR,oro),e(cs,rro),e(k,tro),e(k,fs),e(fs,rte),e(rte,aro),e(fs,nro),e(fs,VR),e(VR,sro),e(fs,lro),e(fs,XR),e(XR,iro),e(fs,dro),e(k,cro),e(k,ms),e(ms,tte),e(tte,fro),e(ms,mro),e(ms,zR),e(zR,gro),e(ms,hro),e(ms,QR),e(QR,pro),e(ms,uro),e(k,_ro),e(k,gs),e(gs,ate),e(ate,bro),e(gs,vro),e(gs,WR),e(WR,Fro),e(gs,Tro),e(gs,HR),e(HR,Mro),e(gs,Ero),e(k,Cro),e(k,hs),e(hs,nte),e(nte,wro),e(hs,Aro),e(hs,UR),e(UR,yro),e(hs,Lro),e(hs,JR),e(JR,xro),e(hs,$ro),e(k,kro),e(k,ps),e(ps,ste),e(ste,Sro),e(ps,Rro),e(ps,YR),e(YR,Bro),e(ps,Pro),e(ps,KR),e(KR,Iro),e(ps,qro),e(k,Nro),e(k,us),e(us,lte),e(lte,jro),e(us,Dro),e(us,ZR),e(ZR,Gro),e(us,Oro),e(us,eB),e(eB,Vro),e(us,Xro),e(k,zro),e(k,Bg),e(Bg,ite),e(ite,Qro),e(Bg,Wro),e(Bg,oB),e(oB,Hro),e(Bg,Uro),e(k,Jro),e(k,Pg),e(Pg,dte),e(dte,Yro),e(Pg,Kro),e(Pg,rB),e(rB,Zro),e(Pg,eto),e(k,oto),e(k,Ig),e(Ig,cte),e(cte,rto),e(Ig,tto),e(Ig,tB),e(tB,ato),e(Ig,nto),e(k,sto),e(k,qg),e(qg,fte),e(fte,lto),e(qg,ito),e(qg,aB),e(aB,dto),e(qg,cto),e(k,fto),e(k,_s),e(_s,mte),e(mte,mto),e(_s,gto),e(_s,nB),e(nB,hto),e(_s,pto),e(_s,sB),e(sB,uto),e(_s,_to),e(k,bto),e(k,Ng),e(Ng,gte),e(gte,vto),e(Ng,Fto),e(Ng,lB),e(lB,Tto),e(Ng,Mto),e(k,Eto),e(k,bs),e(bs,hte),e(hte,Cto),e(bs,wto),e(bs,iB),e(iB,Ato),e(bs,yto),e(bs,dB),e(dB,Lto),e(bs,xto),e(k,$to),e(k,vs),e(vs,pte),e(pte,kto),e(vs,Sto),e(vs,cB),e(cB,Rto),e(vs,Bto),e(vs,fB),e(fB,Pto),e(vs,Ito),e(k,qto),e(k,Fs),e(Fs,ute),e(ute,Nto),e(Fs,jto),e(Fs,mB),e(mB,Dto),e(Fs,Gto),e(Fs,gB),e(gB,Oto),e(Fs,Vto),e(k,Xto),e(k,Ts),e(Ts,_te),e(_te,zto),e(Ts,Qto),e(Ts,hB),e(hB,Wto),e(Ts,Hto),e(Ts,pB),e(pB,Uto),e(Ts,Jto),e(k,Yto),e(k,Ms),e(Ms,bte),e(bte,Kto),e(Ms,Zto),e(Ms,uB),e(uB,eao),e(Ms,oao),e(Ms,_B),e(_B,rao),e(Ms,tao),e(k,aao),e(k,Es),e(Es,vte),e(vte,nao),e(Es,sao),e(Es,bB),e(bB,lao),e(Es,iao),e(Es,vB),e(vB,dao),e(Es,cao),e(k,fao),e(k,jg),e(jg,Fte),e(Fte,mao),e(jg,gao),e(jg,FB),e(FB,hao),e(jg,pao),e(k,uao),e(k,Dg),e(Dg,Tte),e(Tte,_ao),e(Dg,bao),e(Dg,TB),e(TB,vao),e(Dg,Fao),e(k,Tao),e(k,Cs),e(Cs,Mte),e(Mte,Mao),e(Cs,Eao),e(Cs,MB),e(MB,Cao),e(Cs,wao),e(Cs,EB),e(EB,Aao),e(Cs,yao),e(k,Lao),e(k,ws),e(ws,Ete),e(Ete,xao),e(ws,$ao),e(ws,CB),e(CB,kao),e(ws,Sao),e(ws,wB),e(wB,Rao),e(ws,Bao),e(k,Pao),e(k,As),e(As,Cte),e(Cte,Iao),e(As,qao),e(As,AB),e(AB,Nao),e(As,jao),e(As,yB),e(yB,Dao),e(As,Gao),e(k,Oao),e(k,Gg),e(Gg,wte),e(wte,Vao),e(Gg,Xao),e(Gg,LB),e(LB,zao),e(Gg,Qao),e(k,Wao),e(k,Og),e(Og,Ate),e(Ate,Hao),e(Og,Uao),e(Og,xB),e(xB,Jao),e(Og,Yao),e(k,Kao),e(k,Vg),e(Vg,yte),e(yte,Zao),e(Vg,eno),e(Vg,$B),e($B,ono),e(Vg,rno),e(k,tno),e(k,ys),e(ys,Lte),e(Lte,ano),e(ys,nno),e(ys,kB),e(kB,sno),e(ys,lno),e(ys,SB),e(SB,ino),e(ys,dno),e(k,cno),e(k,Xg),e(Xg,xte),e(xte,fno),e(Xg,mno),e(Xg,RB),e(RB,gno),e(Xg,hno),e(k,pno),e(k,zg),e(zg,$te),e($te,uno),e(zg,_no),e(zg,BB),e(BB,bno),e(zg,vno),e(k,Fno),e(k,Ls),e(Ls,kte),e(kte,Tno),e(Ls,Mno),e(Ls,PB),e(PB,Eno),e(Ls,Cno),e(Ls,IB),e(IB,wno),e(Ls,Ano),e(k,yno),e(k,Qg),e(Qg,Ste),e(Ste,Lno),e(Qg,xno),e(Qg,qB),e(qB,$no),e(Qg,kno),e(k,Sno),e(k,Wg),e(Wg,Rte),e(Rte,Rno),e(Wg,Bno),e(Wg,NB),e(NB,Pno),e(Wg,Ino),e(k,qno),e(k,xs),e(xs,Bte),e(Bte,Nno),e(xs,jno),e(xs,jB),e(jB,Dno),e(xs,Gno),e(xs,DB),e(DB,Ono),e(xs,Vno),e(k,Xno),e(k,$s),e($s,Pte),e(Pte,zno),e($s,Qno),e($s,GB),e(GB,Wno),e($s,Hno),e($s,OB),e(OB,Uno),e($s,Jno),e(k,Yno),e(k,ks),e(ks,Ite),e(Ite,Kno),e(ks,Zno),e(ks,VB),e(VB,eso),e(ks,oso),e(ks,XB),e(XB,rso),e(ks,tso),e(k,aso),e(k,Ss),e(Ss,qte),e(qte,nso),e(Ss,sso),e(Ss,zB),e(zB,lso),e(Ss,iso),e(Ss,QB),e(QB,dso),e(Ss,cso),e(Cr,fso),M(Hg,Cr,null),e(wo,mso),e(wo,Ug),M(nA,Ug,null),e(Ug,gso),e(Ug,Nte),e(Nte,hso),b(f,RPe,_),b(f,vi,_),e(vi,Jg),e(Jg,jte),M(sA,jte,null),e(vi,pso),e(vi,Dte),e(Dte,uso),b(f,BPe,_),b(f,Ao,_),M(lA,Ao,null),e(Ao,_so),e(Ao,iA),e(iA,bso),e(iA,WB),e(WB,vso),e(iA,Fso),e(Ao,Tso),e(Ao,dA),e(dA,Mso),e(dA,Gte),e(Gte,Eso),e(dA,Cso),e(Ao,wso),e(Ao,Qe),M(cA,Qe,null),e(Qe,Aso),e(Qe,Ote),e(Ote,yso),e(Qe,Lso),e(Qe,wa),e(wa,xso),e(wa,Vte),e(Vte,$so),e(wa,kso),e(wa,Xte),e(Xte,Sso),e(wa,Rso),e(wa,zte),e(zte,Bso),e(wa,Pso),e(Qe,Iso),e(Qe,te),e(te,Yg),e(Yg,Qte),e(Qte,qso),e(Yg,Nso),e(Yg,HB),e(HB,jso),e(Yg,Dso),e(te,Gso),e(te,Kg),e(Kg,Wte),e(Wte,Oso),e(Kg,Vso),e(Kg,UB),e(UB,Xso),e(Kg,zso),e(te,Qso),e(te,Zg),e(Zg,Hte),e(Hte,Wso),e(Zg,Hso),e(Zg,JB),e(JB,Uso),e(Zg,Jso),e(te,Yso),e(te,eh),e(eh,Ute),e(Ute,Kso),e(eh,Zso),e(eh,YB),e(YB,elo),e(eh,olo),e(te,rlo),e(te,oh),e(oh,Jte),e(Jte,tlo),e(oh,alo),e(oh,KB),e(KB,nlo),e(oh,slo),e(te,llo),e(te,rh),e(rh,Yte),e(Yte,ilo),e(rh,dlo),e(rh,ZB),e(ZB,clo),e(rh,flo),e(te,mlo),e(te,th),e(th,Kte),e(Kte,glo),e(th,hlo),e(th,eP),e(eP,plo),e(th,ulo),e(te,_lo),e(te,ah),e(ah,Zte),e(Zte,blo),e(ah,vlo),e(ah,oP),e(oP,Flo),e(ah,Tlo),e(te,Mlo),e(te,nh),e(nh,eae),e(eae,Elo),e(nh,Clo),e(nh,rP),e(rP,wlo),e(nh,Alo),e(te,ylo),e(te,sh),e(sh,oae),e(oae,Llo),e(sh,xlo),e(sh,tP),e(tP,$lo),e(sh,klo),e(te,Slo),e(te,lh),e(lh,rae),e(rae,Rlo),e(lh,Blo),e(lh,aP),e(aP,Plo),e(lh,Ilo),e(te,qlo),e(te,ih),e(ih,tae),e(tae,Nlo),e(ih,jlo),e(ih,nP),e(nP,Dlo),e(ih,Glo),e(te,Olo),e(te,dh),e(dh,aae),e(aae,Vlo),e(dh,Xlo),e(dh,sP),e(sP,zlo),e(dh,Qlo),e(te,Wlo),e(te,ch),e(ch,nae),e(nae,Hlo),e(ch,Ulo),e(ch,lP),e(lP,Jlo),e(ch,Ylo),e(te,Klo),e(te,fh),e(fh,sae),e(sae,Zlo),e(fh,eio),e(fh,iP),e(iP,oio),e(fh,rio),e(te,tio),e(te,mh),e(mh,lae),e(lae,aio),e(mh,nio),e(mh,dP),e(dP,sio),e(mh,lio),e(te,iio),e(te,gh),e(gh,iae),e(iae,dio),e(gh,cio),e(gh,cP),e(cP,fio),e(gh,mio),e(te,gio),e(te,hh),e(hh,dae),e(dae,hio),e(hh,pio),e(hh,fP),e(fP,uio),e(hh,_io),e(te,bio),e(te,ph),e(ph,cae),e(cae,vio),e(ph,Fio),e(ph,mP),e(mP,Tio),e(ph,Mio),e(te,Eio),e(te,uh),e(uh,fae),e(fae,Cio),e(uh,wio),e(uh,gP),e(gP,Aio),e(uh,yio),e(te,Lio),e(te,_h),e(_h,mae),e(mae,xio),e(_h,$io),e(_h,hP),e(hP,kio),e(_h,Sio),e(te,Rio),e(te,bh),e(bh,gae),e(gae,Bio),e(bh,Pio),e(bh,pP),e(pP,Iio),e(bh,qio),e(te,Nio),e(te,vh),e(vh,hae),e(hae,jio),e(vh,Dio),e(vh,uP),e(uP,Gio),e(vh,Oio),e(te,Vio),e(te,Fh),e(Fh,pae),e(pae,Xio),e(Fh,zio),e(Fh,_P),e(_P,Qio),e(Fh,Wio),e(Qe,Hio),M(Th,Qe,null),e(Qe,Uio),M(Mh,Qe,null),e(Ao,Jio),e(Ao,Eh),M(fA,Eh,null),e(Eh,Yio),e(Eh,uae),e(uae,Kio),b(f,PPe,_),b(f,Fi,_),e(Fi,Ch),e(Ch,_ae),M(mA,_ae,null),e(Fi,Zio),e(Fi,bae),e(bae,edo),b(f,IPe,_),b(f,yo,_),M(gA,yo,null),e(yo,odo),e(yo,hA),e(hA,rdo),e(hA,bP),e(bP,tdo),e(hA,ado),e(yo,ndo),e(yo,pA),e(pA,sdo),e(pA,vae),e(vae,ldo),e(pA,ido),e(yo,ddo),e(yo,We),M(uA,We,null),e(We,cdo),e(We,Fae),e(Fae,fdo),e(We,mdo),e(We,Ti),e(Ti,gdo),e(Ti,Tae),e(Tae,hdo),e(Ti,pdo),e(Ti,Mae),e(Mae,udo),e(Ti,_do),e(We,bdo),e(We,be),e(be,wh),e(wh,Eae),e(Eae,vdo),e(wh,Fdo),e(wh,vP),e(vP,Tdo),e(wh,Mdo),e(be,Edo),e(be,Ah),e(Ah,Cae),e(Cae,Cdo),e(Ah,wdo),e(Ah,FP),e(FP,Ado),e(Ah,ydo),e(be,Ldo),e(be,yh),e(yh,wae),e(wae,xdo),e(yh,$do),e(yh,TP),e(TP,kdo),e(yh,Sdo),e(be,Rdo),e(be,Lh),e(Lh,Aae),e(Aae,Bdo),e(Lh,Pdo),e(Lh,MP),e(MP,Ido),e(Lh,qdo),e(be,Ndo),e(be,xh),e(xh,yae),e(yae,jdo),e(xh,Ddo),e(xh,EP),e(EP,Gdo),e(xh,Odo),e(be,Vdo),e(be,$h),e($h,Lae),e(Lae,Xdo),e($h,zdo),e($h,CP),e(CP,Qdo),e($h,Wdo),e(be,Hdo),e(be,kh),e(kh,xae),e(xae,Udo),e(kh,Jdo),e(kh,wP),e(wP,Ydo),e(kh,Kdo),e(be,Zdo),e(be,Sh),e(Sh,$ae),e($ae,eco),e(Sh,oco),e(Sh,AP),e(AP,rco),e(Sh,tco),e(be,aco),e(be,Rh),e(Rh,kae),e(kae,nco),e(Rh,sco),e(Rh,yP),e(yP,lco),e(Rh,ico),e(be,dco),e(be,Bh),e(Bh,Sae),e(Sae,cco),e(Bh,fco),e(Bh,LP),e(LP,mco),e(Bh,gco),e(be,hco),e(be,Ph),e(Ph,Rae),e(Rae,pco),e(Ph,uco),e(Ph,xP),e(xP,_co),e(Ph,bco),e(be,vco),e(be,Ih),e(Ih,Bae),e(Bae,Fco),e(Ih,Tco),e(Ih,$P),e($P,Mco),e(Ih,Eco),e(be,Cco),e(be,qh),e(qh,Pae),e(Pae,wco),e(qh,Aco),e(qh,kP),e(kP,yco),e(qh,Lco),e(be,xco),e(be,Nh),e(Nh,Iae),e(Iae,$co),e(Nh,kco),e(Nh,SP),e(SP,Sco),e(Nh,Rco),e(We,Bco),M(jh,We,null),e(We,Pco),M(Dh,We,null),e(yo,Ico),e(yo,Gh),M(_A,Gh,null),e(Gh,qco),e(Gh,qae),e(qae,Nco),b(f,qPe,_),b(f,Mi,_),e(Mi,Oh),e(Oh,Nae),M(bA,Nae,null),e(Mi,jco),e(Mi,jae),e(jae,Dco),b(f,NPe,_),b(f,Lo,_),M(vA,Lo,null),e(Lo,Gco),e(Lo,Ei),e(Ei,Oco),e(Ei,RP),e(RP,Vco),e(Ei,Xco),e(Ei,BP),e(BP,zco),e(Ei,Qco),e(Lo,Wco),e(Lo,FA),e(FA,Hco),e(FA,Dae),e(Dae,Uco),e(FA,Jco),e(Lo,Yco),e(Lo,ot),M(TA,ot,null),e(ot,Kco),e(ot,Gae),e(Gae,Zco),e(ot,efo),e(ot,Ci),e(Ci,ofo),e(Ci,Oae),e(Oae,rfo),e(Ci,tfo),e(Ci,PP),e(PP,afo),e(Ci,nfo),e(ot,sfo),M(Vh,ot,null),e(Lo,lfo),e(Lo,He),M(MA,He,null),e(He,ifo),e(He,Vae),e(Vae,dfo),e(He,cfo),e(He,Aa),e(Aa,ffo),e(Aa,Xae),e(Xae,mfo),e(Aa,gfo),e(Aa,zae),e(zae,hfo),e(Aa,pfo),e(Aa,Qae),e(Qae,ufo),e(Aa,_fo),e(He,bfo),e(He,x),e(x,Xh),e(Xh,Wae),e(Wae,vfo),e(Xh,Ffo),e(Xh,IP),e(IP,Tfo),e(Xh,Mfo),e(x,Efo),e(x,zh),e(zh,Hae),e(Hae,Cfo),e(zh,wfo),e(zh,qP),e(qP,Afo),e(zh,yfo),e(x,Lfo),e(x,Qh),e(Qh,Uae),e(Uae,xfo),e(Qh,$fo),e(Qh,NP),e(NP,kfo),e(Qh,Sfo),e(x,Rfo),e(x,Wh),e(Wh,Jae),e(Jae,Bfo),e(Wh,Pfo),e(Wh,jP),e(jP,Ifo),e(Wh,qfo),e(x,Nfo),e(x,Hh),e(Hh,Yae),e(Yae,jfo),e(Hh,Dfo),e(Hh,DP),e(DP,Gfo),e(Hh,Ofo),e(x,Vfo),e(x,Uh),e(Uh,Kae),e(Kae,Xfo),e(Uh,zfo),e(Uh,GP),e(GP,Qfo),e(Uh,Wfo),e(x,Hfo),e(x,Jh),e(Jh,Zae),e(Zae,Ufo),e(Jh,Jfo),e(Jh,OP),e(OP,Yfo),e(Jh,Kfo),e(x,Zfo),e(x,Yh),e(Yh,ene),e(ene,emo),e(Yh,omo),e(Yh,VP),e(VP,rmo),e(Yh,tmo),e(x,amo),e(x,Kh),e(Kh,one),e(one,nmo),e(Kh,smo),e(Kh,XP),e(XP,lmo),e(Kh,imo),e(x,dmo),e(x,Zh),e(Zh,rne),e(rne,cmo),e(Zh,fmo),e(Zh,zP),e(zP,mmo),e(Zh,gmo),e(x,hmo),e(x,ep),e(ep,tne),e(tne,pmo),e(ep,umo),e(ep,QP),e(QP,_mo),e(ep,bmo),e(x,vmo),e(x,op),e(op,ane),e(ane,Fmo),e(op,Tmo),e(op,WP),e(WP,Mmo),e(op,Emo),e(x,Cmo),e(x,rp),e(rp,nne),e(nne,wmo),e(rp,Amo),e(rp,HP),e(HP,ymo),e(rp,Lmo),e(x,xmo),e(x,tp),e(tp,sne),e(sne,$mo),e(tp,kmo),e(tp,UP),e(UP,Smo),e(tp,Rmo),e(x,Bmo),e(x,ap),e(ap,lne),e(lne,Pmo),e(ap,Imo),e(ap,JP),e(JP,qmo),e(ap,Nmo),e(x,jmo),e(x,np),e(np,ine),e(ine,Dmo),e(np,Gmo),e(np,YP),e(YP,Omo),e(np,Vmo),e(x,Xmo),e(x,sp),e(sp,dne),e(dne,zmo),e(sp,Qmo),e(sp,KP),e(KP,Wmo),e(sp,Hmo),e(x,Umo),e(x,lp),e(lp,cne),e(cne,Jmo),e(lp,Ymo),e(lp,ZP),e(ZP,Kmo),e(lp,Zmo),e(x,ego),e(x,ip),e(ip,fne),e(fne,ogo),e(ip,rgo),e(ip,eI),e(eI,tgo),e(ip,ago),e(x,ngo),e(x,dp),e(dp,mne),e(mne,sgo),e(dp,lgo),e(dp,oI),e(oI,igo),e(dp,dgo),e(x,cgo),e(x,cp),e(cp,gne),e(gne,fgo),e(cp,mgo),e(cp,rI),e(rI,ggo),e(cp,hgo),e(x,pgo),e(x,fp),e(fp,hne),e(hne,ugo),e(fp,_go),e(fp,tI),e(tI,bgo),e(fp,vgo),e(x,Fgo),e(x,mp),e(mp,pne),e(pne,Tgo),e(mp,Mgo),e(mp,aI),e(aI,Ego),e(mp,Cgo),e(x,wgo),e(x,gp),e(gp,une),e(une,Ago),e(gp,ygo),e(gp,nI),e(nI,Lgo),e(gp,xgo),e(x,$go),e(x,hp),e(hp,_ne),e(_ne,kgo),e(hp,Sgo),e(hp,sI),e(sI,Rgo),e(hp,Bgo),e(x,Pgo),e(x,pp),e(pp,bne),e(bne,Igo),e(pp,qgo),e(pp,lI),e(lI,Ngo),e(pp,jgo),e(x,Dgo),e(x,up),e(up,vne),e(vne,Ggo),e(up,Ogo),e(up,iI),e(iI,Vgo),e(up,Xgo),e(x,zgo),e(x,_p),e(_p,Fne),e(Fne,Qgo),e(_p,Wgo),e(_p,dI),e(dI,Hgo),e(_p,Ugo),e(x,Jgo),e(x,bp),e(bp,Tne),e(Tne,Ygo),e(bp,Kgo),e(bp,cI),e(cI,Zgo),e(bp,eho),e(x,oho),e(x,vp),e(vp,Mne),e(Mne,rho),e(vp,tho),e(vp,fI),e(fI,aho),e(vp,nho),e(x,sho),e(x,Rs),e(Rs,Ene),e(Ene,lho),e(Rs,iho),e(Rs,mI),e(mI,dho),e(Rs,cho),e(Rs,gI),e(gI,fho),e(Rs,mho),e(x,gho),e(x,Fp),e(Fp,Cne),e(Cne,hho),e(Fp,pho),e(Fp,hI),e(hI,uho),e(Fp,_ho),e(x,bho),e(x,Tp),e(Tp,wne),e(wne,vho),e(Tp,Fho),e(Tp,pI),e(pI,Tho),e(Tp,Mho),e(x,Eho),e(x,Mp),e(Mp,Ane),e(Ane,Cho),e(Mp,who),e(Mp,uI),e(uI,Aho),e(Mp,yho),e(x,Lho),e(x,Ep),e(Ep,yne),e(yne,xho),e(Ep,$ho),e(Ep,_I),e(_I,kho),e(Ep,Sho),e(x,Rho),e(x,Cp),e(Cp,Lne),e(Lne,Bho),e(Cp,Pho),e(Cp,bI),e(bI,Iho),e(Cp,qho),e(x,Nho),e(x,wp),e(wp,xne),e(xne,jho),e(wp,Dho),e(wp,vI),e(vI,Gho),e(wp,Oho),e(x,Vho),e(x,Ap),e(Ap,$ne),e($ne,Xho),e(Ap,zho),e(Ap,FI),e(FI,Qho),e(Ap,Who),e(x,Hho),e(x,yp),e(yp,kne),e(kne,Uho),e(yp,Jho),e(yp,TI),e(TI,Yho),e(yp,Kho),e(x,Zho),e(x,Lp),e(Lp,Sne),e(Sne,epo),e(Lp,opo),e(Lp,MI),e(MI,rpo),e(Lp,tpo),e(x,apo),e(x,xp),e(xp,Rne),e(Rne,npo),e(xp,spo),e(xp,EI),e(EI,lpo),e(xp,ipo),e(x,dpo),e(x,$p),e($p,Bne),e(Bne,cpo),e($p,fpo),e($p,CI),e(CI,mpo),e($p,gpo),e(x,hpo),e(x,kp),e(kp,Pne),e(Pne,ppo),e(kp,upo),e(kp,wI),e(wI,_po),e(kp,bpo),e(x,vpo),e(x,Sp),e(Sp,Ine),e(Ine,Fpo),e(Sp,Tpo),e(Sp,AI),e(AI,Mpo),e(Sp,Epo),e(x,Cpo),e(x,Rp),e(Rp,qne),e(qne,wpo),e(Rp,Apo),e(Rp,yI),e(yI,ypo),e(Rp,Lpo),e(x,xpo),e(x,Bp),e(Bp,Nne),e(Nne,$po),e(Bp,kpo),e(Bp,LI),e(LI,Spo),e(Bp,Rpo),e(x,Bpo),e(x,Pp),e(Pp,jne),e(jne,Ppo),e(Pp,Ipo),e(Pp,xI),e(xI,qpo),e(Pp,Npo),e(x,jpo),e(x,Ip),e(Ip,Dne),e(Dne,Dpo),e(Ip,Gpo),e(Ip,$I),e($I,Opo),e(Ip,Vpo),e(x,Xpo),e(x,qp),e(qp,Gne),e(Gne,zpo),e(qp,Qpo),e(qp,kI),e(kI,Wpo),e(qp,Hpo),e(x,Upo),e(x,Np),e(Np,One),e(One,Jpo),e(Np,Ypo),e(Np,SI),e(SI,Kpo),e(Np,Zpo),e(x,euo),e(x,jp),e(jp,Vne),e(Vne,ouo),e(jp,ruo),e(jp,RI),e(RI,tuo),e(jp,auo),e(x,nuo),e(x,Dp),e(Dp,Xne),e(Xne,suo),e(Dp,luo),e(Dp,BI),e(BI,iuo),e(Dp,duo),e(x,cuo),e(x,Gp),e(Gp,zne),e(zne,fuo),e(Gp,muo),e(Gp,PI),e(PI,guo),e(Gp,huo),e(x,puo),e(x,Op),e(Op,Qne),e(Qne,uuo),e(Op,_uo),e(Op,II),e(II,buo),e(Op,vuo),e(x,Fuo),e(x,Vp),e(Vp,Wne),e(Wne,Tuo),e(Vp,Muo),e(Vp,qI),e(qI,Euo),e(Vp,Cuo),e(x,wuo),e(x,Xp),e(Xp,Hne),e(Hne,Auo),e(Xp,yuo),e(Xp,NI),e(NI,Luo),e(Xp,xuo),e(x,$uo),e(x,zp),e(zp,Une),e(Une,kuo),e(zp,Suo),e(zp,jI),e(jI,Ruo),e(zp,Buo),e(x,Puo),e(x,Qp),e(Qp,Jne),e(Jne,Iuo),e(Qp,quo),e(Qp,DI),e(DI,Nuo),e(Qp,juo),e(x,Duo),e(x,Wp),e(Wp,Yne),e(Yne,Guo),e(Wp,Ouo),e(Wp,GI),e(GI,Vuo),e(Wp,Xuo),e(x,zuo),e(x,Hp),e(Hp,Kne),e(Kne,Quo),e(Hp,Wuo),e(Hp,OI),e(OI,Huo),e(Hp,Uuo),e(x,Juo),e(x,Up),e(Up,Zne),e(Zne,Yuo),e(Up,Kuo),e(Up,VI),e(VI,Zuo),e(Up,e_o),e(x,o_o),e(x,Jp),e(Jp,ese),e(ese,r_o),e(Jp,t_o),e(Jp,XI),e(XI,a_o),e(Jp,n_o),e(x,s_o),e(x,Yp),e(Yp,ose),e(ose,l_o),e(Yp,i_o),e(Yp,zI),e(zI,d_o),e(Yp,c_o),e(x,f_o),e(x,Kp),e(Kp,rse),e(rse,m_o),e(Kp,g_o),e(Kp,QI),e(QI,h_o),e(Kp,p_o),e(x,u_o),e(x,Zp),e(Zp,tse),e(tse,__o),e(Zp,b_o),e(Zp,WI),e(WI,v_o),e(Zp,F_o),e(x,T_o),e(x,eu),e(eu,ase),e(ase,M_o),e(eu,E_o),e(eu,HI),e(HI,C_o),e(eu,w_o),e(x,A_o),e(x,ou),e(ou,nse),e(nse,y_o),e(ou,L_o),e(ou,UI),e(UI,x_o),e(ou,$_o),e(x,k_o),e(x,ru),e(ru,sse),e(sse,S_o),e(ru,R_o),e(ru,JI),e(JI,B_o),e(ru,P_o),e(x,I_o),e(x,tu),e(tu,lse),e(lse,q_o),e(tu,N_o),e(tu,YI),e(YI,j_o),e(tu,D_o),e(x,G_o),e(x,au),e(au,ise),e(ise,O_o),e(au,V_o),e(au,KI),e(KI,X_o),e(au,z_o),e(x,Q_o),e(x,nu),e(nu,dse),e(dse,W_o),e(nu,H_o),e(nu,ZI),e(ZI,U_o),e(nu,J_o),e(x,Y_o),e(x,su),e(su,cse),e(cse,K_o),e(su,Z_o),e(su,eq),e(eq,e1o),e(su,o1o),e(x,r1o),e(x,lu),e(lu,fse),e(fse,t1o),e(lu,a1o),e(lu,oq),e(oq,n1o),e(lu,s1o),e(x,l1o),e(x,iu),e(iu,mse),e(mse,i1o),e(iu,d1o),e(iu,rq),e(rq,c1o),e(iu,f1o),e(x,m1o),e(x,du),e(du,gse),e(gse,g1o),e(du,h1o),e(du,tq),e(tq,p1o),e(du,u1o),e(x,_1o),e(x,cu),e(cu,hse),e(hse,b1o),e(cu,v1o),e(cu,aq),e(aq,F1o),e(cu,T1o),e(x,M1o),e(x,fu),e(fu,pse),e(pse,E1o),e(fu,C1o),e(fu,nq),e(nq,w1o),e(fu,A1o),e(x,y1o),e(x,mu),e(mu,use),e(use,L1o),e(mu,x1o),e(mu,sq),e(sq,$1o),e(mu,k1o),e(x,S1o),e(x,gu),e(gu,_se),e(_se,R1o),e(gu,B1o),e(gu,lq),e(lq,P1o),e(gu,I1o),e(x,q1o),e(x,hu),e(hu,bse),e(bse,N1o),e(hu,j1o),e(hu,iq),e(iq,D1o),e(hu,G1o),e(x,O1o),e(x,pu),e(pu,vse),e(vse,V1o),e(pu,X1o),e(pu,dq),e(dq,z1o),e(pu,Q1o),e(x,W1o),e(x,uu),e(uu,Fse),e(Fse,H1o),e(uu,U1o),e(uu,cq),e(cq,J1o),e(uu,Y1o),e(x,K1o),e(x,_u),e(_u,Tse),e(Tse,Z1o),e(_u,e8o),e(_u,fq),e(fq,o8o),e(_u,r8o),e(x,t8o),e(x,bu),e(bu,Mse),e(Mse,a8o),e(bu,n8o),e(bu,mq),e(mq,s8o),e(bu,l8o),e(x,i8o),e(x,vu),e(vu,Ese),e(Ese,d8o),e(vu,c8o),e(vu,gq),e(gq,f8o),e(vu,m8o),e(x,g8o),e(x,Fu),e(Fu,Cse),e(Cse,h8o),e(Fu,p8o),e(Fu,hq),e(hq,u8o),e(Fu,_8o),e(x,b8o),e(x,Tu),e(Tu,wse),e(wse,v8o),e(Tu,F8o),e(Tu,pq),e(pq,T8o),e(Tu,M8o),e(x,E8o),e(x,Mu),e(Mu,Ase),e(Ase,C8o),e(Mu,w8o),e(Mu,uq),e(uq,A8o),e(Mu,y8o),e(x,L8o),e(x,Eu),e(Eu,yse),e(yse,x8o),e(Eu,$8o),e(Eu,_q),e(_q,k8o),e(Eu,S8o),e(x,R8o),e(x,Cu),e(Cu,Lse),e(Lse,B8o),e(Cu,P8o),e(Cu,bq),e(bq,I8o),e(Cu,q8o),e(x,N8o),e(x,wu),e(wu,xse),e(xse,j8o),e(wu,D8o),e(wu,vq),e(vq,G8o),e(wu,O8o),e(x,V8o),e(x,Au),e(Au,$se),e($se,X8o),e(Au,z8o),e(Au,Fq),e(Fq,Q8o),e(Au,W8o),e(x,H8o),e(x,yu),e(yu,kse),e(kse,U8o),e(yu,J8o),e(yu,Tq),e(Tq,Y8o),e(yu,K8o),e(x,Z8o),e(x,Lu),e(Lu,Sse),e(Sse,ebo),e(Lu,obo),e(Lu,Mq),e(Mq,rbo),e(Lu,tbo),e(x,abo),e(x,xu),e(xu,Rse),e(Rse,nbo),e(xu,sbo),e(xu,Eq),e(Eq,lbo),e(xu,ibo),e(x,dbo),e(x,$u),e($u,Bse),e(Bse,cbo),e($u,fbo),e($u,Cq),e(Cq,mbo),e($u,gbo),e(He,hbo),e(He,ku),e(ku,pbo),e(ku,Pse),e(Pse,ubo),e(ku,_bo),e(ku,Ise),e(Ise,bbo),e(He,vbo),M(Su,He,null),b(f,jPe,_),b(f,wi,_),e(wi,Ru),e(Ru,qse),M(EA,qse,null),e(wi,Fbo),e(wi,Nse),e(Nse,Tbo),b(f,DPe,_),b(f,xo,_),M(CA,xo,null),e(xo,Mbo),e(xo,Ai),e(Ai,Ebo),e(Ai,wq),e(wq,Cbo),e(Ai,wbo),e(Ai,Aq),e(Aq,Abo),e(Ai,ybo),e(xo,Lbo),e(xo,wA),e(wA,xbo),e(wA,jse),e(jse,$bo),e(wA,kbo),e(xo,Sbo),e(xo,rt),M(AA,rt,null),e(rt,Rbo),e(rt,Dse),e(Dse,Bbo),e(rt,Pbo),e(rt,yi),e(yi,Ibo),e(yi,Gse),e(Gse,qbo),e(yi,Nbo),e(yi,yq),e(yq,jbo),e(yi,Dbo),e(rt,Gbo),M(Bu,rt,null),e(xo,Obo),e(xo,Ue),M(yA,Ue,null),e(Ue,Vbo),e(Ue,Ose),e(Ose,Xbo),e(Ue,zbo),e(Ue,ya),e(ya,Qbo),e(ya,Vse),e(Vse,Wbo),e(ya,Hbo),e(ya,Xse),e(Xse,Ubo),e(ya,Jbo),e(ya,zse),e(zse,Ybo),e(ya,Kbo),e(Ue,Zbo),e(Ue,G),e(G,Pu),e(Pu,Qse),e(Qse,e2o),e(Pu,o2o),e(Pu,Lq),e(Lq,r2o),e(Pu,t2o),e(G,a2o),e(G,Iu),e(Iu,Wse),e(Wse,n2o),e(Iu,s2o),e(Iu,xq),e(xq,l2o),e(Iu,i2o),e(G,d2o),e(G,qu),e(qu,Hse),e(Hse,c2o),e(qu,f2o),e(qu,$q),e($q,m2o),e(qu,g2o),e(G,h2o),e(G,Nu),e(Nu,Use),e(Use,p2o),e(Nu,u2o),e(Nu,kq),e(kq,_2o),e(Nu,b2o),e(G,v2o),e(G,ju),e(ju,Jse),e(Jse,F2o),e(ju,T2o),e(ju,Sq),e(Sq,M2o),e(ju,E2o),e(G,C2o),e(G,Du),e(Du,Yse),e(Yse,w2o),e(Du,A2o),e(Du,Rq),e(Rq,y2o),e(Du,L2o),e(G,x2o),e(G,Gu),e(Gu,Kse),e(Kse,$2o),e(Gu,k2o),e(Gu,Bq),e(Bq,S2o),e(Gu,R2o),e(G,B2o),e(G,Ou),e(Ou,Zse),e(Zse,P2o),e(Ou,I2o),e(Ou,Pq),e(Pq,q2o),e(Ou,N2o),e(G,j2o),e(G,Vu),e(Vu,ele),e(ele,D2o),e(Vu,G2o),e(Vu,Iq),e(Iq,O2o),e(Vu,V2o),e(G,X2o),e(G,Xu),e(Xu,ole),e(ole,z2o),e(Xu,Q2o),e(Xu,qq),e(qq,W2o),e(Xu,H2o),e(G,U2o),e(G,zu),e(zu,rle),e(rle,J2o),e(zu,Y2o),e(zu,Nq),e(Nq,K2o),e(zu,Z2o),e(G,evo),e(G,Qu),e(Qu,tle),e(tle,ovo),e(Qu,rvo),e(Qu,jq),e(jq,tvo),e(Qu,avo),e(G,nvo),e(G,Wu),e(Wu,ale),e(ale,svo),e(Wu,lvo),e(Wu,Dq),e(Dq,ivo),e(Wu,dvo),e(G,cvo),e(G,Hu),e(Hu,nle),e(nle,fvo),e(Hu,mvo),e(Hu,Gq),e(Gq,gvo),e(Hu,hvo),e(G,pvo),e(G,Uu),e(Uu,sle),e(sle,uvo),e(Uu,_vo),e(Uu,Oq),e(Oq,bvo),e(Uu,vvo),e(G,Fvo),e(G,Ju),e(Ju,lle),e(lle,Tvo),e(Ju,Mvo),e(Ju,Vq),e(Vq,Evo),e(Ju,Cvo),e(G,wvo),e(G,Yu),e(Yu,ile),e(ile,Avo),e(Yu,yvo),e(Yu,Xq),e(Xq,Lvo),e(Yu,xvo),e(G,$vo),e(G,Ku),e(Ku,dle),e(dle,kvo),e(Ku,Svo),e(Ku,zq),e(zq,Rvo),e(Ku,Bvo),e(G,Pvo),e(G,Zu),e(Zu,cle),e(cle,Ivo),e(Zu,qvo),e(Zu,Qq),e(Qq,Nvo),e(Zu,jvo),e(G,Dvo),e(G,e_),e(e_,fle),e(fle,Gvo),e(e_,Ovo),e(e_,Wq),e(Wq,Vvo),e(e_,Xvo),e(G,zvo),e(G,o_),e(o_,mle),e(mle,Qvo),e(o_,Wvo),e(o_,Hq),e(Hq,Hvo),e(o_,Uvo),e(G,Jvo),e(G,r_),e(r_,gle),e(gle,Yvo),e(r_,Kvo),e(r_,Uq),e(Uq,Zvo),e(r_,eFo),e(G,oFo),e(G,t_),e(t_,hle),e(hle,rFo),e(t_,tFo),e(t_,Jq),e(Jq,aFo),e(t_,nFo),e(G,sFo),e(G,a_),e(a_,ple),e(ple,lFo),e(a_,iFo),e(a_,Yq),e(Yq,dFo),e(a_,cFo),e(G,fFo),e(G,n_),e(n_,ule),e(ule,mFo),e(n_,gFo),e(n_,Kq),e(Kq,hFo),e(n_,pFo),e(G,uFo),e(G,s_),e(s_,_le),e(_le,_Fo),e(s_,bFo),e(s_,Zq),e(Zq,vFo),e(s_,FFo),e(G,TFo),e(G,l_),e(l_,ble),e(ble,MFo),e(l_,EFo),e(l_,eN),e(eN,CFo),e(l_,wFo),e(G,AFo),e(G,i_),e(i_,vle),e(vle,yFo),e(i_,LFo),e(i_,oN),e(oN,xFo),e(i_,$Fo),e(G,kFo),e(G,d_),e(d_,Fle),e(Fle,SFo),e(d_,RFo),e(d_,rN),e(rN,BFo),e(d_,PFo),e(G,IFo),e(G,c_),e(c_,Tle),e(Tle,qFo),e(c_,NFo),e(c_,tN),e(tN,jFo),e(c_,DFo),e(G,GFo),e(G,f_),e(f_,Mle),e(Mle,OFo),e(f_,VFo),e(f_,aN),e(aN,XFo),e(f_,zFo),e(G,QFo),e(G,m_),e(m_,Ele),e(Ele,WFo),e(m_,HFo),e(m_,nN),e(nN,UFo),e(m_,JFo),e(G,YFo),e(G,g_),e(g_,Cle),e(Cle,KFo),e(g_,ZFo),e(g_,sN),e(sN,e0o),e(g_,o0o),e(G,r0o),e(G,h_),e(h_,wle),e(wle,t0o),e(h_,a0o),e(h_,lN),e(lN,n0o),e(h_,s0o),e(G,l0o),e(G,p_),e(p_,Ale),e(Ale,i0o),e(p_,d0o),e(p_,iN),e(iN,c0o),e(p_,f0o),e(G,m0o),e(G,u_),e(u_,yle),e(yle,g0o),e(u_,h0o),e(u_,dN),e(dN,p0o),e(u_,u0o),e(G,_0o),e(G,__),e(__,Lle),e(Lle,b0o),e(__,v0o),e(__,cN),e(cN,F0o),e(__,T0o),e(G,M0o),e(G,b_),e(b_,xle),e(xle,E0o),e(b_,C0o),e(b_,fN),e(fN,w0o),e(b_,A0o),e(G,y0o),e(G,v_),e(v_,$le),e($le,L0o),e(v_,x0o),e(v_,mN),e(mN,$0o),e(v_,k0o),e(Ue,S0o),e(Ue,F_),e(F_,R0o),e(F_,kle),e(kle,B0o),e(F_,P0o),e(F_,Sle),e(Sle,I0o),e(Ue,q0o),M(T_,Ue,null),b(f,GPe,_),b(f,Li,_),e(Li,M_),e(M_,Rle),M(LA,Rle,null),e(Li,N0o),e(Li,Ble),e(Ble,j0o),b(f,OPe,_),b(f,$o,_),M(xA,$o,null),e($o,D0o),e($o,xi),e(xi,G0o),e(xi,gN),e(gN,O0o),e(xi,V0o),e(xi,hN),e(hN,X0o),e(xi,z0o),e($o,Q0o),e($o,$A),e($A,W0o),e($A,Ple),e(Ple,H0o),e($A,U0o),e($o,J0o),e($o,tt),M(kA,tt,null),e(tt,Y0o),e(tt,Ile),e(Ile,K0o),e(tt,Z0o),e(tt,$i),e($i,eTo),e($i,qle),e(qle,oTo),e($i,rTo),e($i,pN),e(pN,tTo),e($i,aTo),e(tt,nTo),M(E_,tt,null),e($o,sTo),e($o,Je),M(SA,Je,null),e(Je,lTo),e(Je,Nle),e(Nle,iTo),e(Je,dTo),e(Je,La),e(La,cTo),e(La,jle),e(jle,fTo),e(La,mTo),e(La,Dle),e(Dle,gTo),e(La,hTo),e(La,Gle),e(Gle,pTo),e(La,uTo),e(Je,_To),e(Je,z),e(z,C_),e(C_,Ole),e(Ole,bTo),e(C_,vTo),e(C_,uN),e(uN,FTo),e(C_,TTo),e(z,MTo),e(z,w_),e(w_,Vle),e(Vle,ETo),e(w_,CTo),e(w_,_N),e(_N,wTo),e(w_,ATo),e(z,yTo),e(z,A_),e(A_,Xle),e(Xle,LTo),e(A_,xTo),e(A_,bN),e(bN,$To),e(A_,kTo),e(z,STo),e(z,y_),e(y_,zle),e(zle,RTo),e(y_,BTo),e(y_,vN),e(vN,PTo),e(y_,ITo),e(z,qTo),e(z,L_),e(L_,Qle),e(Qle,NTo),e(L_,jTo),e(L_,FN),e(FN,DTo),e(L_,GTo),e(z,OTo),e(z,x_),e(x_,Wle),e(Wle,VTo),e(x_,XTo),e(x_,TN),e(TN,zTo),e(x_,QTo),e(z,WTo),e(z,$_),e($_,Hle),e(Hle,HTo),e($_,UTo),e($_,MN),e(MN,JTo),e($_,YTo),e(z,KTo),e(z,k_),e(k_,Ule),e(Ule,ZTo),e(k_,e7o),e(k_,EN),e(EN,o7o),e(k_,r7o),e(z,t7o),e(z,S_),e(S_,Jle),e(Jle,a7o),e(S_,n7o),e(S_,CN),e(CN,s7o),e(S_,l7o),e(z,i7o),e(z,R_),e(R_,Yle),e(Yle,d7o),e(R_,c7o),e(R_,wN),e(wN,f7o),e(R_,m7o),e(z,g7o),e(z,B_),e(B_,Kle),e(Kle,h7o),e(B_,p7o),e(B_,AN),e(AN,u7o),e(B_,_7o),e(z,b7o),e(z,P_),e(P_,Zle),e(Zle,v7o),e(P_,F7o),e(P_,yN),e(yN,T7o),e(P_,M7o),e(z,E7o),e(z,I_),e(I_,eie),e(eie,C7o),e(I_,w7o),e(I_,LN),e(LN,A7o),e(I_,y7o),e(z,L7o),e(z,q_),e(q_,oie),e(oie,x7o),e(q_,$7o),e(q_,xN),e(xN,k7o),e(q_,S7o),e(z,R7o),e(z,N_),e(N_,rie),e(rie,B7o),e(N_,P7o),e(N_,$N),e($N,I7o),e(N_,q7o),e(z,N7o),e(z,j_),e(j_,tie),e(tie,j7o),e(j_,D7o),e(j_,kN),e(kN,G7o),e(j_,O7o),e(z,V7o),e(z,D_),e(D_,aie),e(aie,X7o),e(D_,z7o),e(D_,SN),e(SN,Q7o),e(D_,W7o),e(z,H7o),e(z,G_),e(G_,nie),e(nie,U7o),e(G_,J7o),e(G_,RN),e(RN,Y7o),e(G_,K7o),e(z,Z7o),e(z,O_),e(O_,sie),e(sie,eMo),e(O_,oMo),e(O_,BN),e(BN,rMo),e(O_,tMo),e(z,aMo),e(z,V_),e(V_,lie),e(lie,nMo),e(V_,sMo),e(V_,PN),e(PN,lMo),e(V_,iMo),e(z,dMo),e(z,X_),e(X_,iie),e(iie,cMo),e(X_,fMo),e(X_,IN),e(IN,mMo),e(X_,gMo),e(z,hMo),e(z,z_),e(z_,die),e(die,pMo),e(z_,uMo),e(z_,qN),e(qN,_Mo),e(z_,bMo),e(z,vMo),e(z,Q_),e(Q_,cie),e(cie,FMo),e(Q_,TMo),e(Q_,NN),e(NN,MMo),e(Q_,EMo),e(z,CMo),e(z,W_),e(W_,fie),e(fie,wMo),e(W_,AMo),e(W_,jN),e(jN,yMo),e(W_,LMo),e(z,xMo),e(z,H_),e(H_,mie),e(mie,$Mo),e(H_,kMo),e(H_,DN),e(DN,SMo),e(H_,RMo),e(z,BMo),e(z,U_),e(U_,gie),e(gie,PMo),e(U_,IMo),e(U_,GN),e(GN,qMo),e(U_,NMo),e(z,jMo),e(z,J_),e(J_,hie),e(hie,DMo),e(J_,GMo),e(J_,ON),e(ON,OMo),e(J_,VMo),e(z,XMo),e(z,Y_),e(Y_,pie),e(pie,zMo),e(Y_,QMo),e(Y_,VN),e(VN,WMo),e(Y_,HMo),e(z,UMo),e(z,K_),e(K_,uie),e(uie,JMo),e(K_,YMo),e(K_,XN),e(XN,KMo),e(K_,ZMo),e(z,e4o),e(z,Z_),e(Z_,_ie),e(_ie,o4o),e(Z_,r4o),e(Z_,zN),e(zN,t4o),e(Z_,a4o),e(z,n4o),e(z,e1),e(e1,bie),e(bie,s4o),e(e1,l4o),e(e1,QN),e(QN,i4o),e(e1,d4o),e(z,c4o),e(z,o1),e(o1,vie),e(vie,f4o),e(o1,m4o),e(o1,WN),e(WN,g4o),e(o1,h4o),e(z,p4o),e(z,r1),e(r1,Fie),e(Fie,u4o),e(r1,_4o),e(r1,HN),e(HN,b4o),e(r1,v4o),e(z,F4o),e(z,t1),e(t1,Tie),e(Tie,T4o),e(t1,M4o),e(t1,UN),e(UN,E4o),e(t1,C4o),e(z,w4o),e(z,a1),e(a1,Mie),e(Mie,A4o),e(a1,y4o),e(a1,JN),e(JN,L4o),e(a1,x4o),e(z,$4o),e(z,n1),e(n1,Eie),e(Eie,k4o),e(n1,S4o),e(n1,YN),e(YN,R4o),e(n1,B4o),e(Je,P4o),e(Je,s1),e(s1,I4o),e(s1,Cie),e(Cie,q4o),e(s1,N4o),e(s1,wie),e(wie,j4o),e(Je,D4o),M(l1,Je,null),b(f,VPe,_),b(f,ki,_),e(ki,i1),e(i1,Aie),M(RA,Aie,null),e(ki,G4o),e(ki,yie),e(yie,O4o),b(f,XPe,_),b(f,ko,_),M(BA,ko,null),e(ko,V4o),e(ko,Si),e(Si,X4o),e(Si,KN),e(KN,z4o),e(Si,Q4o),e(Si,ZN),e(ZN,W4o),e(Si,H4o),e(ko,U4o),e(ko,PA),e(PA,J4o),e(PA,Lie),e(Lie,Y4o),e(PA,K4o),e(ko,Z4o),e(ko,at),M(IA,at,null),e(at,eEo),e(at,xie),e(xie,oEo),e(at,rEo),e(at,Ri),e(Ri,tEo),e(Ri,$ie),e($ie,aEo),e(Ri,nEo),e(Ri,ej),e(ej,sEo),e(Ri,lEo),e(at,iEo),M(d1,at,null),e(ko,dEo),e(ko,Ye),M(qA,Ye,null),e(Ye,cEo),e(Ye,kie),e(kie,fEo),e(Ye,mEo),e(Ye,xa),e(xa,gEo),e(xa,Sie),e(Sie,hEo),e(xa,pEo),e(xa,Rie),e(Rie,uEo),e(xa,_Eo),e(xa,Bie),e(Bie,bEo),e(xa,vEo),e(Ye,FEo),e(Ye,Q),e(Q,c1),e(c1,Pie),e(Pie,TEo),e(c1,MEo),e(c1,oj),e(oj,EEo),e(c1,CEo),e(Q,wEo),e(Q,f1),e(f1,Iie),e(Iie,AEo),e(f1,yEo),e(f1,rj),e(rj,LEo),e(f1,xEo),e(Q,$Eo),e(Q,m1),e(m1,qie),e(qie,kEo),e(m1,SEo),e(m1,tj),e(tj,REo),e(m1,BEo),e(Q,PEo),e(Q,g1),e(g1,Nie),e(Nie,IEo),e(g1,qEo),e(g1,aj),e(aj,NEo),e(g1,jEo),e(Q,DEo),e(Q,h1),e(h1,jie),e(jie,GEo),e(h1,OEo),e(h1,nj),e(nj,VEo),e(h1,XEo),e(Q,zEo),e(Q,p1),e(p1,Die),e(Die,QEo),e(p1,WEo),e(p1,sj),e(sj,HEo),e(p1,UEo),e(Q,JEo),e(Q,u1),e(u1,Gie),e(Gie,YEo),e(u1,KEo),e(u1,lj),e(lj,ZEo),e(u1,e5o),e(Q,o5o),e(Q,_1),e(_1,Oie),e(Oie,r5o),e(_1,t5o),e(_1,ij),e(ij,a5o),e(_1,n5o),e(Q,s5o),e(Q,b1),e(b1,Vie),e(Vie,l5o),e(b1,i5o),e(b1,dj),e(dj,d5o),e(b1,c5o),e(Q,f5o),e(Q,v1),e(v1,Xie),e(Xie,m5o),e(v1,g5o),e(v1,cj),e(cj,h5o),e(v1,p5o),e(Q,u5o),e(Q,F1),e(F1,zie),e(zie,_5o),e(F1,b5o),e(F1,fj),e(fj,v5o),e(F1,F5o),e(Q,T5o),e(Q,T1),e(T1,Qie),e(Qie,M5o),e(T1,E5o),e(T1,mj),e(mj,C5o),e(T1,w5o),e(Q,A5o),e(Q,M1),e(M1,Wie),e(Wie,y5o),e(M1,L5o),e(M1,gj),e(gj,x5o),e(M1,$5o),e(Q,k5o),e(Q,E1),e(E1,Hie),e(Hie,S5o),e(E1,R5o),e(E1,hj),e(hj,B5o),e(E1,P5o),e(Q,I5o),e(Q,C1),e(C1,Uie),e(Uie,q5o),e(C1,N5o),e(C1,pj),e(pj,j5o),e(C1,D5o),e(Q,G5o),e(Q,w1),e(w1,Jie),e(Jie,O5o),e(w1,V5o),e(w1,uj),e(uj,X5o),e(w1,z5o),e(Q,Q5o),e(Q,A1),e(A1,Yie),e(Yie,W5o),e(A1,H5o),e(A1,_j),e(_j,U5o),e(A1,J5o),e(Q,Y5o),e(Q,y1),e(y1,Kie),e(Kie,K5o),e(y1,Z5o),e(y1,bj),e(bj,eCo),e(y1,oCo),e(Q,rCo),e(Q,L1),e(L1,Zie),e(Zie,tCo),e(L1,aCo),e(L1,vj),e(vj,nCo),e(L1,sCo),e(Q,lCo),e(Q,x1),e(x1,ede),e(ede,iCo),e(x1,dCo),e(x1,Fj),e(Fj,cCo),e(x1,fCo),e(Q,mCo),e(Q,$1),e($1,ode),e(ode,gCo),e($1,hCo),e($1,Tj),e(Tj,pCo),e($1,uCo),e(Q,_Co),e(Q,k1),e(k1,rde),e(rde,bCo),e(k1,vCo),e(k1,Mj),e(Mj,FCo),e(k1,TCo),e(Q,MCo),e(Q,S1),e(S1,tde),e(tde,ECo),e(S1,CCo),e(S1,Ej),e(Ej,wCo),e(S1,ACo),e(Q,yCo),e(Q,R1),e(R1,ade),e(ade,LCo),e(R1,xCo),e(R1,Cj),e(Cj,$Co),e(R1,kCo),e(Q,SCo),e(Q,B1),e(B1,nde),e(nde,RCo),e(B1,BCo),e(B1,wj),e(wj,PCo),e(B1,ICo),e(Q,qCo),e(Q,P1),e(P1,sde),e(sde,NCo),e(P1,jCo),e(P1,Aj),e(Aj,DCo),e(P1,GCo),e(Q,OCo),e(Q,I1),e(I1,lde),e(lde,VCo),e(I1,XCo),e(I1,yj),e(yj,zCo),e(I1,QCo),e(Q,WCo),e(Q,q1),e(q1,ide),e(ide,HCo),e(q1,UCo),e(q1,Lj),e(Lj,JCo),e(q1,YCo),e(Q,KCo),e(Q,N1),e(N1,dde),e(dde,ZCo),e(N1,e3o),e(N1,xj),e(xj,o3o),e(N1,r3o),e(Q,t3o),e(Q,j1),e(j1,cde),e(cde,a3o),e(j1,n3o),e(j1,$j),e($j,s3o),e(j1,l3o),e(Q,i3o),e(Q,D1),e(D1,fde),e(fde,d3o),e(D1,c3o),e(D1,mde),e(mde,f3o),e(D1,m3o),e(Q,g3o),e(Q,G1),e(G1,gde),e(gde,h3o),e(G1,p3o),e(G1,kj),e(kj,u3o),e(G1,_3o),e(Q,b3o),e(Q,O1),e(O1,hde),e(hde,v3o),e(O1,F3o),e(O1,Sj),e(Sj,T3o),e(O1,M3o),e(Q,E3o),e(Q,V1),e(V1,pde),e(pde,C3o),e(V1,w3o),e(V1,Rj),e(Rj,A3o),e(V1,y3o),e(Q,L3o),e(Q,X1),e(X1,ude),e(ude,x3o),e(X1,$3o),e(X1,Bj),e(Bj,k3o),e(X1,S3o),e(Ye,R3o),e(Ye,z1),e(z1,B3o),e(z1,_de),e(_de,P3o),e(z1,I3o),e(z1,bde),e(bde,q3o),e(Ye,N3o),M(Q1,Ye,null),b(f,zPe,_),b(f,Bi,_),e(Bi,W1),e(W1,vde),M(NA,vde,null),e(Bi,j3o),e(Bi,Fde),e(Fde,D3o),b(f,QPe,_),b(f,So,_),M(jA,So,null),e(So,G3o),e(So,Pi),e(Pi,O3o),e(Pi,Pj),e(Pj,V3o),e(Pi,X3o),e(Pi,Ij),e(Ij,z3o),e(Pi,Q3o),e(So,W3o),e(So,DA),e(DA,H3o),e(DA,Tde),e(Tde,U3o),e(DA,J3o),e(So,Y3o),e(So,nt),M(GA,nt,null),e(nt,K3o),e(nt,Mde),e(Mde,Z3o),e(nt,ewo),e(nt,Ii),e(Ii,owo),e(Ii,Ede),e(Ede,rwo),e(Ii,two),e(Ii,qj),e(qj,awo),e(Ii,nwo),e(nt,swo),M(H1,nt,null),e(So,lwo),e(So,Ke),M(OA,Ke,null),e(Ke,iwo),e(Ke,Cde),e(Cde,dwo),e(Ke,cwo),e(Ke,$a),e($a,fwo),e($a,wde),e(wde,mwo),e($a,gwo),e($a,Ade),e(Ade,hwo),e($a,pwo),e($a,yde),e(yde,uwo),e($a,_wo),e(Ke,bwo),e(Ke,he),e(he,U1),e(U1,Lde),e(Lde,vwo),e(U1,Fwo),e(U1,Nj),e(Nj,Two),e(U1,Mwo),e(he,Ewo),e(he,J1),e(J1,xde),e(xde,Cwo),e(J1,wwo),e(J1,jj),e(jj,Awo),e(J1,ywo),e(he,Lwo),e(he,Y1),e(Y1,$de),e($de,xwo),e(Y1,$wo),e(Y1,Dj),e(Dj,kwo),e(Y1,Swo),e(he,Rwo),e(he,K1),e(K1,kde),e(kde,Bwo),e(K1,Pwo),e(K1,Gj),e(Gj,Iwo),e(K1,qwo),e(he,Nwo),e(he,Z1),e(Z1,Sde),e(Sde,jwo),e(Z1,Dwo),e(Z1,Oj),e(Oj,Gwo),e(Z1,Owo),e(he,Vwo),e(he,e8),e(e8,Rde),e(Rde,Xwo),e(e8,zwo),e(e8,Vj),e(Vj,Qwo),e(e8,Wwo),e(he,Hwo),e(he,o8),e(o8,Bde),e(Bde,Uwo),e(o8,Jwo),e(o8,Xj),e(Xj,Ywo),e(o8,Kwo),e(he,Zwo),e(he,r8),e(r8,Pde),e(Pde,eAo),e(r8,oAo),e(r8,zj),e(zj,rAo),e(r8,tAo),e(he,aAo),e(he,t8),e(t8,Ide),e(Ide,nAo),e(t8,sAo),e(t8,Qj),e(Qj,lAo),e(t8,iAo),e(he,dAo),e(he,a8),e(a8,qde),e(qde,cAo),e(a8,fAo),e(a8,Wj),e(Wj,mAo),e(a8,gAo),e(he,hAo),e(he,n8),e(n8,Nde),e(Nde,pAo),e(n8,uAo),e(n8,Hj),e(Hj,_Ao),e(n8,bAo),e(he,vAo),e(he,s8),e(s8,jde),e(jde,FAo),e(s8,TAo),e(s8,Uj),e(Uj,MAo),e(s8,EAo),e(he,CAo),e(he,l8),e(l8,Dde),e(Dde,wAo),e(l8,AAo),e(l8,Jj),e(Jj,yAo),e(l8,LAo),e(he,xAo),e(he,i8),e(i8,Gde),e(Gde,$Ao),e(i8,kAo),e(i8,Yj),e(Yj,SAo),e(i8,RAo),e(he,BAo),e(he,d8),e(d8,Ode),e(Ode,PAo),e(d8,IAo),e(d8,Kj),e(Kj,qAo),e(d8,NAo),e(he,jAo),e(he,c8),e(c8,Vde),e(Vde,DAo),e(c8,GAo),e(c8,Zj),e(Zj,OAo),e(c8,VAo),e(he,XAo),e(he,f8),e(f8,Xde),e(Xde,zAo),e(f8,QAo),e(f8,eD),e(eD,WAo),e(f8,HAo),e(Ke,UAo),e(Ke,m8),e(m8,JAo),e(m8,zde),e(zde,YAo),e(m8,KAo),e(m8,Qde),e(Qde,ZAo),e(Ke,e6o),M(g8,Ke,null),b(f,WPe,_),b(f,qi,_),e(qi,h8),e(h8,Wde),M(VA,Wde,null),e(qi,o6o),e(qi,Hde),e(Hde,r6o),b(f,HPe,_),b(f,Ro,_),M(XA,Ro,null),e(Ro,t6o),e(Ro,Ni),e(Ni,a6o),e(Ni,oD),e(oD,n6o),e(Ni,s6o),e(Ni,rD),e(rD,l6o),e(Ni,i6o),e(Ro,d6o),e(Ro,zA),e(zA,c6o),e(zA,Ude),e(Ude,f6o),e(zA,m6o),e(Ro,g6o),e(Ro,st),M(QA,st,null),e(st,h6o),e(st,Jde),e(Jde,p6o),e(st,u6o),e(st,ji),e(ji,_6o),e(ji,Yde),e(Yde,b6o),e(ji,v6o),e(ji,tD),e(tD,F6o),e(ji,T6o),e(st,M6o),M(p8,st,null),e(Ro,E6o),e(Ro,Ze),M(WA,Ze,null),e(Ze,C6o),e(Ze,Kde),e(Kde,w6o),e(Ze,A6o),e(Ze,ka),e(ka,y6o),e(ka,Zde),e(Zde,L6o),e(ka,x6o),e(ka,ece),e(ece,$6o),e(ka,k6o),e(ka,oce),e(oce,S6o),e(ka,R6o),e(Ze,B6o),e(Ze,q),e(q,u8),e(u8,rce),e(rce,P6o),e(u8,I6o),e(u8,aD),e(aD,q6o),e(u8,N6o),e(q,j6o),e(q,_8),e(_8,tce),e(tce,D6o),e(_8,G6o),e(_8,nD),e(nD,O6o),e(_8,V6o),e(q,X6o),e(q,b8),e(b8,ace),e(ace,z6o),e(b8,Q6o),e(b8,sD),e(sD,W6o),e(b8,H6o),e(q,U6o),e(q,v8),e(v8,nce),e(nce,J6o),e(v8,Y6o),e(v8,lD),e(lD,K6o),e(v8,Z6o),e(q,eyo),e(q,F8),e(F8,sce),e(sce,oyo),e(F8,ryo),e(F8,iD),e(iD,tyo),e(F8,ayo),e(q,nyo),e(q,T8),e(T8,lce),e(lce,syo),e(T8,lyo),e(T8,dD),e(dD,iyo),e(T8,dyo),e(q,cyo),e(q,M8),e(M8,ice),e(ice,fyo),e(M8,myo),e(M8,cD),e(cD,gyo),e(M8,hyo),e(q,pyo),e(q,E8),e(E8,dce),e(dce,uyo),e(E8,_yo),e(E8,fD),e(fD,byo),e(E8,vyo),e(q,Fyo),e(q,C8),e(C8,cce),e(cce,Tyo),e(C8,Myo),e(C8,mD),e(mD,Eyo),e(C8,Cyo),e(q,wyo),e(q,w8),e(w8,fce),e(fce,Ayo),e(w8,yyo),e(w8,gD),e(gD,Lyo),e(w8,xyo),e(q,$yo),e(q,A8),e(A8,mce),e(mce,kyo),e(A8,Syo),e(A8,hD),e(hD,Ryo),e(A8,Byo),e(q,Pyo),e(q,y8),e(y8,gce),e(gce,Iyo),e(y8,qyo),e(y8,pD),e(pD,Nyo),e(y8,jyo),e(q,Dyo),e(q,L8),e(L8,hce),e(hce,Gyo),e(L8,Oyo),e(L8,uD),e(uD,Vyo),e(L8,Xyo),e(q,zyo),e(q,x8),e(x8,pce),e(pce,Qyo),e(x8,Wyo),e(x8,_D),e(_D,Hyo),e(x8,Uyo),e(q,Jyo),e(q,$8),e($8,uce),e(uce,Yyo),e($8,Kyo),e($8,bD),e(bD,Zyo),e($8,eLo),e(q,oLo),e(q,k8),e(k8,_ce),e(_ce,rLo),e(k8,tLo),e(k8,vD),e(vD,aLo),e(k8,nLo),e(q,sLo),e(q,S8),e(S8,bce),e(bce,lLo),e(S8,iLo),e(S8,FD),e(FD,dLo),e(S8,cLo),e(q,fLo),e(q,R8),e(R8,vce),e(vce,mLo),e(R8,gLo),e(R8,TD),e(TD,hLo),e(R8,pLo),e(q,uLo),e(q,B8),e(B8,Fce),e(Fce,_Lo),e(B8,bLo),e(B8,MD),e(MD,vLo),e(B8,FLo),e(q,TLo),e(q,P8),e(P8,Tce),e(Tce,MLo),e(P8,ELo),e(P8,ED),e(ED,CLo),e(P8,wLo),e(q,ALo),e(q,I8),e(I8,Mce),e(Mce,yLo),e(I8,LLo),e(I8,CD),e(CD,xLo),e(I8,$Lo),e(q,kLo),e(q,q8),e(q8,Ece),e(Ece,SLo),e(q8,RLo),e(q8,wD),e(wD,BLo),e(q8,PLo),e(q,ILo),e(q,N8),e(N8,Cce),e(Cce,qLo),e(N8,NLo),e(N8,AD),e(AD,jLo),e(N8,DLo),e(q,GLo),e(q,j8),e(j8,wce),e(wce,OLo),e(j8,VLo),e(j8,yD),e(yD,XLo),e(j8,zLo),e(q,QLo),e(q,D8),e(D8,Ace),e(Ace,WLo),e(D8,HLo),e(D8,LD),e(LD,ULo),e(D8,JLo),e(q,YLo),e(q,G8),e(G8,yce),e(yce,KLo),e(G8,ZLo),e(G8,xD),e(xD,exo),e(G8,oxo),e(q,rxo),e(q,O8),e(O8,Lce),e(Lce,txo),e(O8,axo),e(O8,$D),e($D,nxo),e(O8,sxo),e(q,lxo),e(q,V8),e(V8,xce),e(xce,ixo),e(V8,dxo),e(V8,kD),e(kD,cxo),e(V8,fxo),e(q,mxo),e(q,X8),e(X8,$ce),e($ce,gxo),e(X8,hxo),e(X8,SD),e(SD,pxo),e(X8,uxo),e(q,_xo),e(q,z8),e(z8,kce),e(kce,bxo),e(z8,vxo),e(z8,RD),e(RD,Fxo),e(z8,Txo),e(q,Mxo),e(q,Q8),e(Q8,Sce),e(Sce,Exo),e(Q8,Cxo),e(Q8,BD),e(BD,wxo),e(Q8,Axo),e(q,yxo),e(q,W8),e(W8,Rce),e(Rce,Lxo),e(W8,xxo),e(W8,PD),e(PD,$xo),e(W8,kxo),e(q,Sxo),e(q,H8),e(H8,Bce),e(Bce,Rxo),e(H8,Bxo),e(H8,ID),e(ID,Pxo),e(H8,Ixo),e(q,qxo),e(q,U8),e(U8,Pce),e(Pce,Nxo),e(U8,jxo),e(U8,qD),e(qD,Dxo),e(U8,Gxo),e(q,Oxo),e(q,J8),e(J8,Ice),e(Ice,Vxo),e(J8,Xxo),e(J8,ND),e(ND,zxo),e(J8,Qxo),e(q,Wxo),e(q,Y8),e(Y8,qce),e(qce,Hxo),e(Y8,Uxo),e(Y8,jD),e(jD,Jxo),e(Y8,Yxo),e(q,Kxo),e(q,K8),e(K8,Nce),e(Nce,Zxo),e(K8,e9o),e(K8,DD),e(DD,o9o),e(K8,r9o),e(q,t9o),e(q,Z8),e(Z8,jce),e(jce,a9o),e(Z8,n9o),e(Z8,GD),e(GD,s9o),e(Z8,l9o),e(q,i9o),e(q,eb),e(eb,Dce),e(Dce,d9o),e(eb,c9o),e(eb,OD),e(OD,f9o),e(eb,m9o),e(q,g9o),e(q,ob),e(ob,Gce),e(Gce,h9o),e(ob,p9o),e(ob,VD),e(VD,u9o),e(ob,_9o),e(q,b9o),e(q,rb),e(rb,Oce),e(Oce,v9o),e(rb,F9o),e(rb,XD),e(XD,T9o),e(rb,M9o),e(q,E9o),e(q,tb),e(tb,Vce),e(Vce,C9o),e(tb,w9o),e(tb,zD),e(zD,A9o),e(tb,y9o),e(q,L9o),e(q,ab),e(ab,Xce),e(Xce,x9o),e(ab,$9o),e(ab,QD),e(QD,k9o),e(ab,S9o),e(q,R9o),e(q,nb),e(nb,zce),e(zce,B9o),e(nb,P9o),e(nb,WD),e(WD,I9o),e(nb,q9o),e(q,N9o),e(q,sb),e(sb,Qce),e(Qce,j9o),e(sb,D9o),e(sb,HD),e(HD,G9o),e(sb,O9o),e(q,V9o),e(q,lb),e(lb,Wce),e(Wce,X9o),e(lb,z9o),e(lb,UD),e(UD,Q9o),e(lb,W9o),e(q,H9o),e(q,ib),e(ib,Hce),e(Hce,U9o),e(ib,J9o),e(ib,JD),e(JD,Y9o),e(ib,K9o),e(Ze,Z9o),e(Ze,db),e(db,e$o),e(db,Uce),e(Uce,o$o),e(db,r$o),e(db,Jce),e(Jce,t$o),e(Ze,a$o),M(cb,Ze,null),b(f,UPe,_),b(f,Di,_),e(Di,fb),e(fb,Yce),M(HA,Yce,null),e(Di,n$o),e(Di,Kce),e(Kce,s$o),b(f,JPe,_),b(f,Bo,_),M(UA,Bo,null),e(Bo,l$o),e(Bo,Gi),e(Gi,i$o),e(Gi,YD),e(YD,d$o),e(Gi,c$o),e(Gi,KD),e(KD,f$o),e(Gi,m$o),e(Bo,g$o),e(Bo,JA),e(JA,h$o),e(JA,Zce),e(Zce,p$o),e(JA,u$o),e(Bo,_$o),e(Bo,lt),M(YA,lt,null),e(lt,b$o),e(lt,efe),e(efe,v$o),e(lt,F$o),e(lt,Oi),e(Oi,T$o),e(Oi,ofe),e(ofe,M$o),e(Oi,E$o),e(Oi,ZD),e(ZD,C$o),e(Oi,w$o),e(lt,A$o),M(mb,lt,null),e(Bo,y$o),e(Bo,eo),M(KA,eo,null),e(eo,L$o),e(eo,rfe),e(rfe,x$o),e(eo,$$o),e(eo,Sa),e(Sa,k$o),e(Sa,tfe),e(tfe,S$o),e(Sa,R$o),e(Sa,afe),e(afe,B$o),e(Sa,P$o),e(Sa,nfe),e(nfe,I$o),e(Sa,q$o),e(eo,N$o),e(eo,Y),e(Y,gb),e(gb,sfe),e(sfe,j$o),e(gb,D$o),e(gb,eG),e(eG,G$o),e(gb,O$o),e(Y,V$o),e(Y,hb),e(hb,lfe),e(lfe,X$o),e(hb,z$o),e(hb,oG),e(oG,Q$o),e(hb,W$o),e(Y,H$o),e(Y,pb),e(pb,ife),e(ife,U$o),e(pb,J$o),e(pb,rG),e(rG,Y$o),e(pb,K$o),e(Y,Z$o),e(Y,ub),e(ub,dfe),e(dfe,eko),e(ub,oko),e(ub,tG),e(tG,rko),e(ub,tko),e(Y,ako),e(Y,_b),e(_b,cfe),e(cfe,nko),e(_b,sko),e(_b,aG),e(aG,lko),e(_b,iko),e(Y,dko),e(Y,bb),e(bb,ffe),e(ffe,cko),e(bb,fko),e(bb,nG),e(nG,mko),e(bb,gko),e(Y,hko),e(Y,vb),e(vb,mfe),e(mfe,pko),e(vb,uko),e(vb,sG),e(sG,_ko),e(vb,bko),e(Y,vko),e(Y,Fb),e(Fb,gfe),e(gfe,Fko),e(Fb,Tko),e(Fb,lG),e(lG,Mko),e(Fb,Eko),e(Y,Cko),e(Y,Tb),e(Tb,hfe),e(hfe,wko),e(Tb,Ako),e(Tb,iG),e(iG,yko),e(Tb,Lko),e(Y,xko),e(Y,Mb),e(Mb,pfe),e(pfe,$ko),e(Mb,kko),e(Mb,dG),e(dG,Sko),e(Mb,Rko),e(Y,Bko),e(Y,Eb),e(Eb,ufe),e(ufe,Pko),e(Eb,Iko),e(Eb,cG),e(cG,qko),e(Eb,Nko),e(Y,jko),e(Y,Cb),e(Cb,_fe),e(_fe,Dko),e(Cb,Gko),e(Cb,fG),e(fG,Oko),e(Cb,Vko),e(Y,Xko),e(Y,wb),e(wb,bfe),e(bfe,zko),e(wb,Qko),e(wb,mG),e(mG,Wko),e(wb,Hko),e(Y,Uko),e(Y,Ab),e(Ab,vfe),e(vfe,Jko),e(Ab,Yko),e(Ab,gG),e(gG,Kko),e(Ab,Zko),e(Y,eSo),e(Y,yb),e(yb,Ffe),e(Ffe,oSo),e(yb,rSo),e(yb,hG),e(hG,tSo),e(yb,aSo),e(Y,nSo),e(Y,Lb),e(Lb,Tfe),e(Tfe,sSo),e(Lb,lSo),e(Lb,pG),e(pG,iSo),e(Lb,dSo),e(Y,cSo),e(Y,xb),e(xb,Mfe),e(Mfe,fSo),e(xb,mSo),e(xb,uG),e(uG,gSo),e(xb,hSo),e(Y,pSo),e(Y,$b),e($b,Efe),e(Efe,uSo),e($b,_So),e($b,_G),e(_G,bSo),e($b,vSo),e(Y,FSo),e(Y,kb),e(kb,Cfe),e(Cfe,TSo),e(kb,MSo),e(kb,bG),e(bG,ESo),e(kb,CSo),e(Y,wSo),e(Y,Sb),e(Sb,wfe),e(wfe,ASo),e(Sb,ySo),e(Sb,vG),e(vG,LSo),e(Sb,xSo),e(Y,$So),e(Y,Rb),e(Rb,Afe),e(Afe,kSo),e(Rb,SSo),e(Rb,FG),e(FG,RSo),e(Rb,BSo),e(Y,PSo),e(Y,Bb),e(Bb,yfe),e(yfe,ISo),e(Bb,qSo),e(Bb,TG),e(TG,NSo),e(Bb,jSo),e(Y,DSo),e(Y,Pb),e(Pb,Lfe),e(Lfe,GSo),e(Pb,OSo),e(Pb,MG),e(MG,VSo),e(Pb,XSo),e(Y,zSo),e(Y,Ib),e(Ib,xfe),e(xfe,QSo),e(Ib,WSo),e(Ib,EG),e(EG,HSo),e(Ib,USo),e(Y,JSo),e(Y,qb),e(qb,$fe),e($fe,YSo),e(qb,KSo),e(qb,CG),e(CG,ZSo),e(qb,eRo),e(Y,oRo),e(Y,Nb),e(Nb,kfe),e(kfe,rRo),e(Nb,tRo),e(Nb,wG),e(wG,aRo),e(Nb,nRo),e(Y,sRo),e(Y,jb),e(jb,Sfe),e(Sfe,lRo),e(jb,iRo),e(jb,AG),e(AG,dRo),e(jb,cRo),e(Y,fRo),e(Y,Db),e(Db,Rfe),e(Rfe,mRo),e(Db,gRo),e(Db,yG),e(yG,hRo),e(Db,pRo),e(Y,uRo),e(Y,Gb),e(Gb,Bfe),e(Bfe,_Ro),e(Gb,bRo),e(Gb,LG),e(LG,vRo),e(Gb,FRo),e(eo,TRo),e(eo,Ob),e(Ob,MRo),e(Ob,Pfe),e(Pfe,ERo),e(Ob,CRo),e(Ob,Ife),e(Ife,wRo),e(eo,ARo),M(Vb,eo,null),b(f,YPe,_),b(f,Vi,_),e(Vi,Xb),e(Xb,qfe),M(ZA,qfe,null),e(Vi,yRo),e(Vi,Nfe),e(Nfe,LRo),b(f,KPe,_),b(f,Po,_),M(e6,Po,null),e(Po,xRo),e(Po,Xi),e(Xi,$Ro),e(Xi,xG),e(xG,kRo),e(Xi,SRo),e(Xi,$G),e($G,RRo),e(Xi,BRo),e(Po,PRo),e(Po,o6),e(o6,IRo),e(o6,jfe),e(jfe,qRo),e(o6,NRo),e(Po,jRo),e(Po,it),M(r6,it,null),e(it,DRo),e(it,Dfe),e(Dfe,GRo),e(it,ORo),e(it,zi),e(zi,VRo),e(zi,Gfe),e(Gfe,XRo),e(zi,zRo),e(zi,kG),e(kG,QRo),e(zi,WRo),e(it,HRo),M(zb,it,null),e(Po,URo),e(Po,oo),M(t6,oo,null),e(oo,JRo),e(oo,Ofe),e(Ofe,YRo),e(oo,KRo),e(oo,Ra),e(Ra,ZRo),e(Ra,Vfe),e(Vfe,eBo),e(Ra,oBo),e(Ra,Xfe),e(Xfe,rBo),e(Ra,tBo),e(Ra,zfe),e(zfe,aBo),e(Ra,nBo),e(oo,sBo),e(oo,Yr),e(Yr,Qb),e(Qb,Qfe),e(Qfe,lBo),e(Qb,iBo),e(Qb,SG),e(SG,dBo),e(Qb,cBo),e(Yr,fBo),e(Yr,Wb),e(Wb,Wfe),e(Wfe,mBo),e(Wb,gBo),e(Wb,RG),e(RG,hBo),e(Wb,pBo),e(Yr,uBo),e(Yr,Hb),e(Hb,Hfe),e(Hfe,_Bo),e(Hb,bBo),e(Hb,BG),e(BG,vBo),e(Hb,FBo),e(Yr,TBo),e(Yr,Ub),e(Ub,Ufe),e(Ufe,MBo),e(Ub,EBo),e(Ub,PG),e(PG,CBo),e(Ub,wBo),e(Yr,ABo),e(Yr,Jb),e(Jb,Jfe),e(Jfe,yBo),e(Jb,LBo),e(Jb,IG),e(IG,xBo),e(Jb,$Bo),e(oo,kBo),e(oo,Yb),e(Yb,SBo),e(Yb,Yfe),e(Yfe,RBo),e(Yb,BBo),e(Yb,Kfe),e(Kfe,PBo),e(oo,IBo),M(Kb,oo,null),b(f,ZPe,_),b(f,Qi,_),e(Qi,Zb),e(Zb,Zfe),M(a6,Zfe,null),e(Qi,qBo),e(Qi,eme),e(eme,NBo),b(f,eIe,_),b(f,Io,_),M(n6,Io,null),e(Io,jBo),e(Io,Wi),e(Wi,DBo),e(Wi,qG),e(qG,GBo),e(Wi,OBo),e(Wi,NG),e(NG,VBo),e(Wi,XBo),e(Io,zBo),e(Io,s6),e(s6,QBo),e(s6,ome),e(ome,WBo),e(s6,HBo),e(Io,UBo),e(Io,dt),M(l6,dt,null),e(dt,JBo),e(dt,rme),e(rme,YBo),e(dt,KBo),e(dt,Hi),e(Hi,ZBo),e(Hi,tme),e(tme,ePo),e(Hi,oPo),e(Hi,jG),e(jG,rPo),e(Hi,tPo),e(dt,aPo),M(e2,dt,null),e(Io,nPo),e(Io,ro),M(i6,ro,null),e(ro,sPo),e(ro,ame),e(ame,lPo),e(ro,iPo),e(ro,Ba),e(Ba,dPo),e(Ba,nme),e(nme,cPo),e(Ba,fPo),e(Ba,sme),e(sme,mPo),e(Ba,gPo),e(Ba,lme),e(lme,hPo),e(Ba,pPo),e(ro,uPo),e(ro,U),e(U,o2),e(o2,ime),e(ime,_Po),e(o2,bPo),e(o2,DG),e(DG,vPo),e(o2,FPo),e(U,TPo),e(U,r2),e(r2,dme),e(dme,MPo),e(r2,EPo),e(r2,GG),e(GG,CPo),e(r2,wPo),e(U,APo),e(U,t2),e(t2,cme),e(cme,yPo),e(t2,LPo),e(t2,OG),e(OG,xPo),e(t2,$Po),e(U,kPo),e(U,a2),e(a2,fme),e(fme,SPo),e(a2,RPo),e(a2,VG),e(VG,BPo),e(a2,PPo),e(U,IPo),e(U,n2),e(n2,mme),e(mme,qPo),e(n2,NPo),e(n2,XG),e(XG,jPo),e(n2,DPo),e(U,GPo),e(U,s2),e(s2,gme),e(gme,OPo),e(s2,VPo),e(s2,zG),e(zG,XPo),e(s2,zPo),e(U,QPo),e(U,l2),e(l2,hme),e(hme,WPo),e(l2,HPo),e(l2,QG),e(QG,UPo),e(l2,JPo),e(U,YPo),e(U,i2),e(i2,pme),e(pme,KPo),e(i2,ZPo),e(i2,WG),e(WG,eIo),e(i2,oIo),e(U,rIo),e(U,d2),e(d2,ume),e(ume,tIo),e(d2,aIo),e(d2,HG),e(HG,nIo),e(d2,sIo),e(U,lIo),e(U,c2),e(c2,_me),e(_me,iIo),e(c2,dIo),e(c2,UG),e(UG,cIo),e(c2,fIo),e(U,mIo),e(U,f2),e(f2,bme),e(bme,gIo),e(f2,hIo),e(f2,JG),e(JG,pIo),e(f2,uIo),e(U,_Io),e(U,m2),e(m2,vme),e(vme,bIo),e(m2,vIo),e(m2,YG),e(YG,FIo),e(m2,TIo),e(U,MIo),e(U,g2),e(g2,Fme),e(Fme,EIo),e(g2,CIo),e(g2,KG),e(KG,wIo),e(g2,AIo),e(U,yIo),e(U,h2),e(h2,Tme),e(Tme,LIo),e(h2,xIo),e(h2,ZG),e(ZG,$Io),e(h2,kIo),e(U,SIo),e(U,p2),e(p2,Mme),e(Mme,RIo),e(p2,BIo),e(p2,eO),e(eO,PIo),e(p2,IIo),e(U,qIo),e(U,u2),e(u2,Eme),e(Eme,NIo),e(u2,jIo),e(u2,oO),e(oO,DIo),e(u2,GIo),e(U,OIo),e(U,_2),e(_2,Cme),e(Cme,VIo),e(_2,XIo),e(_2,rO),e(rO,zIo),e(_2,QIo),e(U,WIo),e(U,b2),e(b2,wme),e(wme,HIo),e(b2,UIo),e(b2,tO),e(tO,JIo),e(b2,YIo),e(U,KIo),e(U,v2),e(v2,Ame),e(Ame,ZIo),e(v2,eqo),e(v2,aO),e(aO,oqo),e(v2,rqo),e(U,tqo),e(U,F2),e(F2,yme),e(yme,aqo),e(F2,nqo),e(F2,nO),e(nO,sqo),e(F2,lqo),e(U,iqo),e(U,T2),e(T2,Lme),e(Lme,dqo),e(T2,cqo),e(T2,sO),e(sO,fqo),e(T2,mqo),e(U,gqo),e(U,M2),e(M2,xme),e(xme,hqo),e(M2,pqo),e(M2,lO),e(lO,uqo),e(M2,_qo),e(U,bqo),e(U,E2),e(E2,$me),e($me,vqo),e(E2,Fqo),e(E2,iO),e(iO,Tqo),e(E2,Mqo),e(U,Eqo),e(U,C2),e(C2,kme),e(kme,Cqo),e(C2,wqo),e(C2,dO),e(dO,Aqo),e(C2,yqo),e(U,Lqo),e(U,w2),e(w2,Sme),e(Sme,xqo),e(w2,$qo),e(w2,cO),e(cO,kqo),e(w2,Sqo),e(U,Rqo),e(U,A2),e(A2,Rme),e(Rme,Bqo),e(A2,Pqo),e(A2,fO),e(fO,Iqo),e(A2,qqo),e(U,Nqo),e(U,y2),e(y2,Bme),e(Bme,jqo),e(y2,Dqo),e(y2,mO),e(mO,Gqo),e(y2,Oqo),e(U,Vqo),e(U,L2),e(L2,Pme),e(Pme,Xqo),e(L2,zqo),e(L2,gO),e(gO,Qqo),e(L2,Wqo),e(U,Hqo),e(U,x2),e(x2,Ime),e(Ime,Uqo),e(x2,Jqo),e(x2,hO),e(hO,Yqo),e(x2,Kqo),e(U,Zqo),e(U,$2),e($2,qme),e(qme,eNo),e($2,oNo),e($2,pO),e(pO,rNo),e($2,tNo),e(U,aNo),e(U,k2),e(k2,Nme),e(Nme,nNo),e(k2,sNo),e(k2,uO),e(uO,lNo),e(k2,iNo),e(U,dNo),e(U,S2),e(S2,jme),e(jme,cNo),e(S2,fNo),e(S2,_O),e(_O,mNo),e(S2,gNo),e(U,hNo),e(U,R2),e(R2,Dme),e(Dme,pNo),e(R2,uNo),e(R2,bO),e(bO,_No),e(R2,bNo),e(ro,vNo),e(ro,B2),e(B2,FNo),e(B2,Gme),e(Gme,TNo),e(B2,MNo),e(B2,Ome),e(Ome,ENo),e(ro,CNo),M(P2,ro,null),b(f,oIe,_),b(f,Ui,_),e(Ui,I2),e(I2,Vme),M(d6,Vme,null),e(Ui,wNo),e(Ui,Xme),e(Xme,ANo),b(f,rIe,_),b(f,qo,_),M(c6,qo,null),e(qo,yNo),e(qo,Ji),e(Ji,LNo),e(Ji,vO),e(vO,xNo),e(Ji,$No),e(Ji,FO),e(FO,kNo),e(Ji,SNo),e(qo,RNo),e(qo,f6),e(f6,BNo),e(f6,zme),e(zme,PNo),e(f6,INo),e(qo,qNo),e(qo,ct),M(m6,ct,null),e(ct,NNo),e(ct,Qme),e(Qme,jNo),e(ct,DNo),e(ct,Yi),e(Yi,GNo),e(Yi,Wme),e(Wme,ONo),e(Yi,VNo),e(Yi,TO),e(TO,XNo),e(Yi,zNo),e(ct,QNo),M(q2,ct,null),e(qo,WNo),e(qo,to),M(g6,to,null),e(to,HNo),e(to,Hme),e(Hme,UNo),e(to,JNo),e(to,Pa),e(Pa,YNo),e(Pa,Ume),e(Ume,KNo),e(Pa,ZNo),e(Pa,Jme),e(Jme,ejo),e(Pa,ojo),e(Pa,Yme),e(Yme,rjo),e(Pa,tjo),e(to,ajo),e(to,O),e(O,N2),e(N2,Kme),e(Kme,njo),e(N2,sjo),e(N2,MO),e(MO,ljo),e(N2,ijo),e(O,djo),e(O,j2),e(j2,Zme),e(Zme,cjo),e(j2,fjo),e(j2,EO),e(EO,mjo),e(j2,gjo),e(O,hjo),e(O,D2),e(D2,ege),e(ege,pjo),e(D2,ujo),e(D2,CO),e(CO,_jo),e(D2,bjo),e(O,vjo),e(O,G2),e(G2,oge),e(oge,Fjo),e(G2,Tjo),e(G2,wO),e(wO,Mjo),e(G2,Ejo),e(O,Cjo),e(O,O2),e(O2,rge),e(rge,wjo),e(O2,Ajo),e(O2,AO),e(AO,yjo),e(O2,Ljo),e(O,xjo),e(O,V2),e(V2,tge),e(tge,$jo),e(V2,kjo),e(V2,yO),e(yO,Sjo),e(V2,Rjo),e(O,Bjo),e(O,X2),e(X2,age),e(age,Pjo),e(X2,Ijo),e(X2,LO),e(LO,qjo),e(X2,Njo),e(O,jjo),e(O,z2),e(z2,nge),e(nge,Djo),e(z2,Gjo),e(z2,xO),e(xO,Ojo),e(z2,Vjo),e(O,Xjo),e(O,Q2),e(Q2,sge),e(sge,zjo),e(Q2,Qjo),e(Q2,$O),e($O,Wjo),e(Q2,Hjo),e(O,Ujo),e(O,W2),e(W2,lge),e(lge,Jjo),e(W2,Yjo),e(W2,kO),e(kO,Kjo),e(W2,Zjo),e(O,eDo),e(O,H2),e(H2,ige),e(ige,oDo),e(H2,rDo),e(H2,SO),e(SO,tDo),e(H2,aDo),e(O,nDo),e(O,U2),e(U2,dge),e(dge,sDo),e(U2,lDo),e(U2,RO),e(RO,iDo),e(U2,dDo),e(O,cDo),e(O,J2),e(J2,cge),e(cge,fDo),e(J2,mDo),e(J2,BO),e(BO,gDo),e(J2,hDo),e(O,pDo),e(O,Y2),e(Y2,fge),e(fge,uDo),e(Y2,_Do),e(Y2,PO),e(PO,bDo),e(Y2,vDo),e(O,FDo),e(O,K2),e(K2,mge),e(mge,TDo),e(K2,MDo),e(K2,IO),e(IO,EDo),e(K2,CDo),e(O,wDo),e(O,Z2),e(Z2,gge),e(gge,ADo),e(Z2,yDo),e(Z2,qO),e(qO,LDo),e(Z2,xDo),e(O,$Do),e(O,ev),e(ev,hge),e(hge,kDo),e(ev,SDo),e(ev,NO),e(NO,RDo),e(ev,BDo),e(O,PDo),e(O,ov),e(ov,pge),e(pge,IDo),e(ov,qDo),e(ov,jO),e(jO,NDo),e(ov,jDo),e(O,DDo),e(O,rv),e(rv,uge),e(uge,GDo),e(rv,ODo),e(rv,DO),e(DO,VDo),e(rv,XDo),e(O,zDo),e(O,tv),e(tv,_ge),e(_ge,QDo),e(tv,WDo),e(tv,GO),e(GO,HDo),e(tv,UDo),e(O,JDo),e(O,av),e(av,bge),e(bge,YDo),e(av,KDo),e(av,OO),e(OO,ZDo),e(av,eGo),e(O,oGo),e(O,nv),e(nv,vge),e(vge,rGo),e(nv,tGo),e(nv,VO),e(VO,aGo),e(nv,nGo),e(O,sGo),e(O,sv),e(sv,Fge),e(Fge,lGo),e(sv,iGo),e(sv,XO),e(XO,dGo),e(sv,cGo),e(O,fGo),e(O,lv),e(lv,Tge),e(Tge,mGo),e(lv,gGo),e(lv,zO),e(zO,hGo),e(lv,pGo),e(O,uGo),e(O,iv),e(iv,Mge),e(Mge,_Go),e(iv,bGo),e(iv,QO),e(QO,vGo),e(iv,FGo),e(O,TGo),e(O,dv),e(dv,Ege),e(Ege,MGo),e(dv,EGo),e(dv,WO),e(WO,CGo),e(dv,wGo),e(O,AGo),e(O,cv),e(cv,Cge),e(Cge,yGo),e(cv,LGo),e(cv,HO),e(HO,xGo),e(cv,$Go),e(O,kGo),e(O,fv),e(fv,wge),e(wge,SGo),e(fv,RGo),e(fv,UO),e(UO,BGo),e(fv,PGo),e(O,IGo),e(O,mv),e(mv,Age),e(Age,qGo),e(mv,NGo),e(mv,JO),e(JO,jGo),e(mv,DGo),e(O,GGo),e(O,gv),e(gv,yge),e(yge,OGo),e(gv,VGo),e(gv,YO),e(YO,XGo),e(gv,zGo),e(O,QGo),e(O,hv),e(hv,Lge),e(Lge,WGo),e(hv,HGo),e(hv,KO),e(KO,UGo),e(hv,JGo),e(O,YGo),e(O,pv),e(pv,xge),e(xge,KGo),e(pv,ZGo),e(pv,ZO),e(ZO,eOo),e(pv,oOo),e(O,rOo),e(O,uv),e(uv,$ge),e($ge,tOo),e(uv,aOo),e(uv,eV),e(eV,nOo),e(uv,sOo),e(O,lOo),e(O,_v),e(_v,kge),e(kge,iOo),e(_v,dOo),e(_v,oV),e(oV,cOo),e(_v,fOo),e(O,mOo),e(O,bv),e(bv,Sge),e(Sge,gOo),e(bv,hOo),e(bv,rV),e(rV,pOo),e(bv,uOo),e(O,_Oo),e(O,vv),e(vv,Rge),e(Rge,bOo),e(vv,vOo),e(vv,tV),e(tV,FOo),e(vv,TOo),e(O,MOo),e(O,Fv),e(Fv,Bge),e(Bge,EOo),e(Fv,COo),e(Fv,aV),e(aV,wOo),e(Fv,AOo),e(O,yOo),e(O,Tv),e(Tv,Pge),e(Pge,LOo),e(Tv,xOo),e(Tv,nV),e(nV,$Oo),e(Tv,kOo),e(O,SOo),e(O,Mv),e(Mv,Ige),e(Ige,ROo),e(Mv,BOo),e(Mv,sV),e(sV,POo),e(Mv,IOo),e(to,qOo),e(to,Ev),e(Ev,NOo),e(Ev,qge),e(qge,jOo),e(Ev,DOo),e(Ev,Nge),e(Nge,GOo),e(to,OOo),M(Cv,to,null),b(f,tIe,_),b(f,Ki,_),e(Ki,wv),e(wv,jge),M(h6,jge,null),e(Ki,VOo),e(Ki,Dge),e(Dge,XOo),b(f,aIe,_),b(f,No,_),M(p6,No,null),e(No,zOo),e(No,Zi),e(Zi,QOo),e(Zi,lV),e(lV,WOo),e(Zi,HOo),e(Zi,iV),e(iV,UOo),e(Zi,JOo),e(No,YOo),e(No,u6),e(u6,KOo),e(u6,Gge),e(Gge,ZOo),e(u6,eVo),e(No,oVo),e(No,ft),M(_6,ft,null),e(ft,rVo),e(ft,Oge),e(Oge,tVo),e(ft,aVo),e(ft,ed),e(ed,nVo),e(ed,Vge),e(Vge,sVo),e(ed,lVo),e(ed,dV),e(dV,iVo),e(ed,dVo),e(ft,cVo),M(Av,ft,null),e(No,fVo),e(No,ao),M(b6,ao,null),e(ao,mVo),e(ao,Xge),e(Xge,gVo),e(ao,hVo),e(ao,Ia),e(Ia,pVo),e(Ia,zge),e(zge,uVo),e(Ia,_Vo),e(Ia,Qge),e(Qge,bVo),e(Ia,vVo),e(Ia,Wge),e(Wge,FVo),e(Ia,TVo),e(ao,MVo),e(ao,Hge),e(Hge,yv),e(yv,Uge),e(Uge,EVo),e(yv,CVo),e(yv,cV),e(cV,wVo),e(yv,AVo),e(ao,yVo),e(ao,Lv),e(Lv,LVo),e(Lv,Jge),e(Jge,xVo),e(Lv,$Vo),e(Lv,Yge),e(Yge,kVo),e(ao,SVo),M(xv,ao,null),b(f,nIe,_),b(f,od,_),e(od,$v),e($v,Kge),M(v6,Kge,null),e(od,RVo),e(od,Zge),e(Zge,BVo),b(f,sIe,_),b(f,jo,_),M(F6,jo,null),e(jo,PVo),e(jo,rd),e(rd,IVo),e(rd,fV),e(fV,qVo),e(rd,NVo),e(rd,mV),e(mV,jVo),e(rd,DVo),e(jo,GVo),e(jo,T6),e(T6,OVo),e(T6,ehe),e(ehe,VVo),e(T6,XVo),e(jo,zVo),e(jo,mt),M(M6,mt,null),e(mt,QVo),e(mt,ohe),e(ohe,WVo),e(mt,HVo),e(mt,td),e(td,UVo),e(td,rhe),e(rhe,JVo),e(td,YVo),e(td,gV),e(gV,KVo),e(td,ZVo),e(mt,eXo),M(kv,mt,null),e(jo,oXo),e(jo,no),M(E6,no,null),e(no,rXo),e(no,the),e(the,tXo),e(no,aXo),e(no,qa),e(qa,nXo),e(qa,ahe),e(ahe,sXo),e(qa,lXo),e(qa,nhe),e(nhe,iXo),e(qa,dXo),e(qa,she),e(she,cXo),e(qa,fXo),e(no,mXo),e(no,ve),e(ve,Sv),e(Sv,lhe),e(lhe,gXo),e(Sv,hXo),e(Sv,hV),e(hV,pXo),e(Sv,uXo),e(ve,_Xo),e(ve,Rv),e(Rv,ihe),e(ihe,bXo),e(Rv,vXo),e(Rv,pV),e(pV,FXo),e(Rv,TXo),e(ve,MXo),e(ve,Bv),e(Bv,dhe),e(dhe,EXo),e(Bv,CXo),e(Bv,uV),e(uV,wXo),e(Bv,AXo),e(ve,yXo),e(ve,Bs),e(Bs,che),e(che,LXo),e(Bs,xXo),e(Bs,_V),e(_V,$Xo),e(Bs,kXo),e(Bs,bV),e(bV,SXo),e(Bs,RXo),e(ve,BXo),e(ve,Pv),e(Pv,fhe),e(fhe,PXo),e(Pv,IXo),e(Pv,vV),e(vV,qXo),e(Pv,NXo),e(ve,jXo),e(ve,gt),e(gt,mhe),e(mhe,DXo),e(gt,GXo),e(gt,FV),e(FV,OXo),e(gt,VXo),e(gt,TV),e(TV,XXo),e(gt,zXo),e(gt,MV),e(MV,QXo),e(gt,WXo),e(ve,HXo),e(ve,Iv),e(Iv,ghe),e(ghe,UXo),e(Iv,JXo),e(Iv,EV),e(EV,YXo),e(Iv,KXo),e(ve,ZXo),e(ve,qv),e(qv,hhe),e(hhe,ezo),e(qv,ozo),e(qv,CV),e(CV,rzo),e(qv,tzo),e(ve,azo),e(ve,Nv),e(Nv,phe),e(phe,nzo),e(Nv,szo),e(Nv,wV),e(wV,lzo),e(Nv,izo),e(ve,dzo),e(ve,jv),e(jv,uhe),e(uhe,czo),e(jv,fzo),e(jv,AV),e(AV,mzo),e(jv,gzo),e(ve,hzo),e(ve,Dv),e(Dv,_he),e(_he,pzo),e(Dv,uzo),e(Dv,yV),e(yV,_zo),e(Dv,bzo),e(ve,vzo),e(ve,Gv),e(Gv,bhe),e(bhe,Fzo),e(Gv,Tzo),e(Gv,LV),e(LV,Mzo),e(Gv,Ezo),e(ve,Czo),e(ve,Ov),e(Ov,vhe),e(vhe,wzo),e(Ov,Azo),e(Ov,xV),e(xV,yzo),e(Ov,Lzo),e(no,xzo),e(no,Vv),e(Vv,$zo),e(Vv,Fhe),e(Fhe,kzo),e(Vv,Szo),e(Vv,The),e(The,Rzo),e(no,Bzo),M(Xv,no,null),b(f,lIe,_),b(f,ad,_),e(ad,zv),e(zv,Mhe),M(C6,Mhe,null),e(ad,Pzo),e(ad,Ehe),e(Ehe,Izo),b(f,iIe,_),b(f,Do,_),M(w6,Do,null),e(Do,qzo),e(Do,nd),e(nd,Nzo),e(nd,$V),e($V,jzo),e(nd,Dzo),e(nd,kV),e(kV,Gzo),e(nd,Ozo),e(Do,Vzo),e(Do,A6),e(A6,Xzo),e(A6,Che),e(Che,zzo),e(A6,Qzo),e(Do,Wzo),e(Do,ht),M(y6,ht,null),e(ht,Hzo),e(ht,whe),e(whe,Uzo),e(ht,Jzo),e(ht,sd),e(sd,Yzo),e(sd,Ahe),e(Ahe,Kzo),e(sd,Zzo),e(sd,SV),e(SV,eQo),e(sd,oQo),e(ht,rQo),M(Qv,ht,null),e(Do,tQo),e(Do,so),M(L6,so,null),e(so,aQo),e(so,yhe),e(yhe,nQo),e(so,sQo),e(so,Na),e(Na,lQo),e(Na,Lhe),e(Lhe,iQo),e(Na,dQo),e(Na,xhe),e(xhe,cQo),e(Na,fQo),e(Na,$he),e($he,mQo),e(Na,gQo),e(so,hQo),e(so,khe),e(khe,Wv),e(Wv,She),e(She,pQo),e(Wv,uQo),e(Wv,RV),e(RV,_Qo),e(Wv,bQo),e(so,vQo),e(so,Hv),e(Hv,FQo),e(Hv,Rhe),e(Rhe,TQo),e(Hv,MQo),e(Hv,Bhe),e(Bhe,EQo),e(so,CQo),M(Uv,so,null),b(f,dIe,_),b(f,ld,_),e(ld,Jv),e(Jv,Phe),M(x6,Phe,null),e(ld,wQo),e(ld,Ihe),e(Ihe,AQo),b(f,cIe,_),b(f,Go,_),M($6,Go,null),e(Go,yQo),e(Go,id),e(id,LQo),e(id,BV),e(BV,xQo),e(id,$Qo),e(id,PV),e(PV,kQo),e(id,SQo),e(Go,RQo),e(Go,k6),e(k6,BQo),e(k6,qhe),e(qhe,PQo),e(k6,IQo),e(Go,qQo),e(Go,pt),M(S6,pt,null),e(pt,NQo),e(pt,Nhe),e(Nhe,jQo),e(pt,DQo),e(pt,dd),e(dd,GQo),e(dd,jhe),e(jhe,OQo),e(dd,VQo),e(dd,IV),e(IV,XQo),e(dd,zQo),e(pt,QQo),M(Yv,pt,null),e(Go,WQo),e(Go,lo),M(R6,lo,null),e(lo,HQo),e(lo,Dhe),e(Dhe,UQo),e(lo,JQo),e(lo,ja),e(ja,YQo),e(ja,Ghe),e(Ghe,KQo),e(ja,ZQo),e(ja,Ohe),e(Ohe,eWo),e(ja,oWo),e(ja,Vhe),e(Vhe,rWo),e(ja,tWo),e(lo,aWo),e(lo,Ne),e(Ne,Kv),e(Kv,Xhe),e(Xhe,nWo),e(Kv,sWo),e(Kv,qV),e(qV,lWo),e(Kv,iWo),e(Ne,dWo),e(Ne,Zv),e(Zv,zhe),e(zhe,cWo),e(Zv,fWo),e(Zv,NV),e(NV,mWo),e(Zv,gWo),e(Ne,hWo),e(Ne,eF),e(eF,Qhe),e(Qhe,pWo),e(eF,uWo),e(eF,jV),e(jV,_Wo),e(eF,bWo),e(Ne,vWo),e(Ne,oF),e(oF,Whe),e(Whe,FWo),e(oF,TWo),e(oF,DV),e(DV,MWo),e(oF,EWo),e(Ne,CWo),e(Ne,rF),e(rF,Hhe),e(Hhe,wWo),e(rF,AWo),e(rF,GV),e(GV,yWo),e(rF,LWo),e(Ne,xWo),e(Ne,tF),e(tF,Uhe),e(Uhe,$Wo),e(tF,kWo),e(tF,OV),e(OV,SWo),e(tF,RWo),e(Ne,BWo),e(Ne,aF),e(aF,Jhe),e(Jhe,PWo),e(aF,IWo),e(aF,VV),e(VV,qWo),e(aF,NWo),e(Ne,jWo),e(Ne,nF),e(nF,Yhe),e(Yhe,DWo),e(nF,GWo),e(nF,XV),e(XV,OWo),e(nF,VWo),e(lo,XWo),e(lo,sF),e(sF,zWo),e(sF,Khe),e(Khe,QWo),e(sF,WWo),e(sF,Zhe),e(Zhe,HWo),e(lo,UWo),M(lF,lo,null),b(f,fIe,_),b(f,cd,_),e(cd,iF),e(iF,epe),M(B6,epe,null),e(cd,JWo),e(cd,ope),e(ope,YWo),b(f,mIe,_),b(f,Oo,_),M(P6,Oo,null),e(Oo,KWo),e(Oo,fd),e(fd,ZWo),e(fd,zV),e(zV,eHo),e(fd,oHo),e(fd,QV),e(QV,rHo),e(fd,tHo),e(Oo,aHo),e(Oo,I6),e(I6,nHo),e(I6,rpe),e(rpe,sHo),e(I6,lHo),e(Oo,iHo),e(Oo,ut),M(q6,ut,null),e(ut,dHo),e(ut,tpe),e(tpe,cHo),e(ut,fHo),e(ut,md),e(md,mHo),e(md,ape),e(ape,gHo),e(md,hHo),e(md,WV),e(WV,pHo),e(md,uHo),e(ut,_Ho),M(dF,ut,null),e(Oo,bHo),e(Oo,io),M(N6,io,null),e(io,vHo),e(io,npe),e(npe,FHo),e(io,THo),e(io,Da),e(Da,MHo),e(Da,spe),e(spe,EHo),e(Da,CHo),e(Da,lpe),e(lpe,wHo),e(Da,AHo),e(Da,ipe),e(ipe,yHo),e(Da,LHo),e(io,xHo),e(io,Ga),e(Ga,cF),e(cF,dpe),e(dpe,$Ho),e(cF,kHo),e(cF,HV),e(HV,SHo),e(cF,RHo),e(Ga,BHo),e(Ga,fF),e(fF,cpe),e(cpe,PHo),e(fF,IHo),e(fF,UV),e(UV,qHo),e(fF,NHo),e(Ga,jHo),e(Ga,mF),e(mF,fpe),e(fpe,DHo),e(mF,GHo),e(mF,JV),e(JV,OHo),e(mF,VHo),e(Ga,XHo),e(Ga,gF),e(gF,mpe),e(mpe,zHo),e(gF,QHo),e(gF,YV),e(YV,WHo),e(gF,HHo),e(io,UHo),e(io,hF),e(hF,JHo),e(hF,gpe),e(gpe,YHo),e(hF,KHo),e(hF,hpe),e(hpe,ZHo),e(io,eUo),M(pF,io,null),b(f,gIe,_),b(f,gd,_),e(gd,uF),e(uF,ppe),M(j6,ppe,null),e(gd,oUo),e(gd,upe),e(upe,rUo),b(f,hIe,_),b(f,Vo,_),M(D6,Vo,null),e(Vo,tUo),e(Vo,hd),e(hd,aUo),e(hd,KV),e(KV,nUo),e(hd,sUo),e(hd,ZV),e(ZV,lUo),e(hd,iUo),e(Vo,dUo),e(Vo,G6),e(G6,cUo),e(G6,_pe),e(_pe,fUo),e(G6,mUo),e(Vo,gUo),e(Vo,_t),M(O6,_t,null),e(_t,hUo),e(_t,bpe),e(bpe,pUo),e(_t,uUo),e(_t,pd),e(pd,_Uo),e(pd,vpe),e(vpe,bUo),e(pd,vUo),e(pd,eX),e(eX,FUo),e(pd,TUo),e(_t,MUo),M(_F,_t,null),e(Vo,EUo),e(Vo,co),M(V6,co,null),e(co,CUo),e(co,Fpe),e(Fpe,wUo),e(co,AUo),e(co,Oa),e(Oa,yUo),e(Oa,Tpe),e(Tpe,LUo),e(Oa,xUo),e(Oa,Mpe),e(Mpe,$Uo),e(Oa,kUo),e(Oa,Epe),e(Epe,SUo),e(Oa,RUo),e(co,BUo),e(co,je),e(je,bF),e(bF,Cpe),e(Cpe,PUo),e(bF,IUo),e(bF,oX),e(oX,qUo),e(bF,NUo),e(je,jUo),e(je,vF),e(vF,wpe),e(wpe,DUo),e(vF,GUo),e(vF,rX),e(rX,OUo),e(vF,VUo),e(je,XUo),e(je,FF),e(FF,Ape),e(Ape,zUo),e(FF,QUo),e(FF,tX),e(tX,WUo),e(FF,HUo),e(je,UUo),e(je,TF),e(TF,ype),e(ype,JUo),e(TF,YUo),e(TF,aX),e(aX,KUo),e(TF,ZUo),e(je,eJo),e(je,MF),e(MF,Lpe),e(Lpe,oJo),e(MF,rJo),e(MF,nX),e(nX,tJo),e(MF,aJo),e(je,nJo),e(je,EF),e(EF,xpe),e(xpe,sJo),e(EF,lJo),e(EF,sX),e(sX,iJo),e(EF,dJo),e(je,cJo),e(je,CF),e(CF,$pe),e($pe,fJo),e(CF,mJo),e(CF,lX),e(lX,gJo),e(CF,hJo),e(je,pJo),e(je,wF),e(wF,kpe),e(kpe,uJo),e(wF,_Jo),e(wF,iX),e(iX,bJo),e(wF,vJo),e(co,FJo),e(co,AF),e(AF,TJo),e(AF,Spe),e(Spe,MJo),e(AF,EJo),e(AF,Rpe),e(Rpe,CJo),e(co,wJo),M(yF,co,null),b(f,pIe,_),b(f,ud,_),e(ud,LF),e(LF,Bpe),M(X6,Bpe,null),e(ud,AJo),e(ud,Ppe),e(Ppe,yJo),b(f,uIe,_),b(f,Xo,_),M(z6,Xo,null),e(Xo,LJo),e(Xo,_d),e(_d,xJo),e(_d,dX),e(dX,$Jo),e(_d,kJo),e(_d,cX),e(cX,SJo),e(_d,RJo),e(Xo,BJo),e(Xo,Q6),e(Q6,PJo),e(Q6,Ipe),e(Ipe,IJo),e(Q6,qJo),e(Xo,NJo),e(Xo,bt),M(W6,bt,null),e(bt,jJo),e(bt,qpe),e(qpe,DJo),e(bt,GJo),e(bt,bd),e(bd,OJo),e(bd,Npe),e(Npe,VJo),e(bd,XJo),e(bd,fX),e(fX,zJo),e(bd,QJo),e(bt,WJo),M(xF,bt,null),e(Xo,HJo),e(Xo,fo),M(H6,fo,null),e(fo,UJo),e(fo,jpe),e(jpe,JJo),e(fo,YJo),e(fo,Va),e(Va,KJo),e(Va,Dpe),e(Dpe,ZJo),e(Va,eYo),e(Va,Gpe),e(Gpe,oYo),e(Va,rYo),e(Va,Ope),e(Ope,tYo),e(Va,aYo),e(fo,nYo),e(fo,U6),e(U6,$F),e($F,Vpe),e(Vpe,sYo),e($F,lYo),e($F,mX),e(mX,iYo),e($F,dYo),e(U6,cYo),e(U6,kF),e(kF,Xpe),e(Xpe,fYo),e(kF,mYo),e(kF,gX),e(gX,gYo),e(kF,hYo),e(fo,pYo),e(fo,SF),e(SF,uYo),e(SF,zpe),e(zpe,_Yo),e(SF,bYo),e(SF,Qpe),e(Qpe,vYo),e(fo,FYo),M(RF,fo,null),b(f,_Ie,_),b(f,vd,_),e(vd,BF),e(BF,Wpe),M(J6,Wpe,null),e(vd,TYo),e(vd,Hpe),e(Hpe,MYo),b(f,bIe,_),b(f,zo,_),M(Y6,zo,null),e(zo,EYo),e(zo,Fd),e(Fd,CYo),e(Fd,hX),e(hX,wYo),e(Fd,AYo),e(Fd,pX),e(pX,yYo),e(Fd,LYo),e(zo,xYo),e(zo,K6),e(K6,$Yo),e(K6,Upe),e(Upe,kYo),e(K6,SYo),e(zo,RYo),e(zo,vt),M(Z6,vt,null),e(vt,BYo),e(vt,Jpe),e(Jpe,PYo),e(vt,IYo),e(vt,Td),e(Td,qYo),e(Td,Ype),e(Ype,NYo),e(Td,jYo),e(Td,uX),e(uX,DYo),e(Td,GYo),e(vt,OYo),M(PF,vt,null),e(zo,VYo),e(zo,mo),M(ey,mo,null),e(mo,XYo),e(mo,Kpe),e(Kpe,zYo),e(mo,QYo),e(mo,Xa),e(Xa,WYo),e(Xa,Zpe),e(Zpe,HYo),e(Xa,UYo),e(Xa,eue),e(eue,JYo),e(Xa,YYo),e(Xa,oue),e(oue,KYo),e(Xa,ZYo),e(mo,eKo),e(mo,za),e(za,IF),e(IF,rue),e(rue,oKo),e(IF,rKo),e(IF,_X),e(_X,tKo),e(IF,aKo),e(za,nKo),e(za,qF),e(qF,tue),e(tue,sKo),e(qF,lKo),e(qF,bX),e(bX,iKo),e(qF,dKo),e(za,cKo),e(za,NF),e(NF,aue),e(aue,fKo),e(NF,mKo),e(NF,vX),e(vX,gKo),e(NF,hKo),e(za,pKo),e(za,jF),e(jF,nue),e(nue,uKo),e(jF,_Ko),e(jF,FX),e(FX,bKo),e(jF,vKo),e(mo,FKo),e(mo,DF),e(DF,TKo),e(DF,sue),e(sue,MKo),e(DF,EKo),e(DF,lue),e(lue,CKo),e(mo,wKo),M(GF,mo,null),b(f,vIe,_),b(f,Md,_),e(Md,OF),e(OF,iue),M(oy,iue,null),e(Md,AKo),e(Md,due),e(due,yKo),b(f,FIe,_),b(f,Qo,_),M(ry,Qo,null),e(Qo,LKo),e(Qo,Ed),e(Ed,xKo),e(Ed,TX),e(TX,$Ko),e(Ed,kKo),e(Ed,MX),e(MX,SKo),e(Ed,RKo),e(Qo,BKo),e(Qo,ty),e(ty,PKo),e(ty,cue),e(cue,IKo),e(ty,qKo),e(Qo,NKo),e(Qo,Ft),M(ay,Ft,null),e(Ft,jKo),e(Ft,fue),e(fue,DKo),e(Ft,GKo),e(Ft,Cd),e(Cd,OKo),e(Cd,mue),e(mue,VKo),e(Cd,XKo),e(Cd,EX),e(EX,zKo),e(Cd,QKo),e(Ft,WKo),M(VF,Ft,null),e(Qo,HKo),e(Qo,go),M(ny,go,null),e(go,UKo),e(go,gue),e(gue,JKo),e(go,YKo),e(go,Qa),e(Qa,KKo),e(Qa,hue),e(hue,ZKo),e(Qa,eZo),e(Qa,pue),e(pue,oZo),e(Qa,rZo),e(Qa,uue),e(uue,tZo),e(Qa,aZo),e(go,nZo),e(go,wd),e(wd,XF),e(XF,_ue),e(_ue,sZo),e(XF,lZo),e(XF,CX),e(CX,iZo),e(XF,dZo),e(wd,cZo),e(wd,zF),e(zF,bue),e(bue,fZo),e(zF,mZo),e(zF,wX),e(wX,gZo),e(zF,hZo),e(wd,pZo),e(wd,QF),e(QF,vue),e(vue,uZo),e(QF,_Zo),e(QF,AX),e(AX,bZo),e(QF,vZo),e(go,FZo),e(go,WF),e(WF,TZo),e(WF,Fue),e(Fue,MZo),e(WF,EZo),e(WF,Tue),e(Tue,CZo),e(go,wZo),M(HF,go,null),b(f,TIe,_),b(f,Ad,_),e(Ad,UF),e(UF,Mue),M(sy,Mue,null),e(Ad,AZo),e(Ad,Eue),e(Eue,yZo),b(f,MIe,_),b(f,Wo,_),M(ly,Wo,null),e(Wo,LZo),e(Wo,yd),e(yd,xZo),e(yd,yX),e(yX,$Zo),e(yd,kZo),e(yd,LX),e(LX,SZo),e(yd,RZo),e(Wo,BZo),e(Wo,iy),e(iy,PZo),e(iy,Cue),e(Cue,IZo),e(iy,qZo),e(Wo,NZo),e(Wo,Tt),M(dy,Tt,null),e(Tt,jZo),e(Tt,wue),e(wue,DZo),e(Tt,GZo),e(Tt,Ld),e(Ld,OZo),e(Ld,Aue),e(Aue,VZo),e(Ld,XZo),e(Ld,xX),e(xX,zZo),e(Ld,QZo),e(Tt,WZo),M(JF,Tt,null),e(Wo,HZo),e(Wo,ho),M(cy,ho,null),e(ho,UZo),e(ho,yue),e(yue,JZo),e(ho,YZo),e(ho,Wa),e(Wa,KZo),e(Wa,Lue),e(Lue,ZZo),e(Wa,eer),e(Wa,xue),e(xue,oer),e(Wa,rer),e(Wa,$ue),e($ue,ter),e(Wa,aer),e(ho,ner),e(ho,fy),e(fy,YF),e(YF,kue),e(kue,ser),e(YF,ler),e(YF,$X),e($X,ier),e(YF,der),e(fy,cer),e(fy,KF),e(KF,Sue),e(Sue,fer),e(KF,mer),e(KF,kX),e(kX,ger),e(KF,her),e(ho,per),e(ho,ZF),e(ZF,uer),e(ZF,Rue),e(Rue,_er),e(ZF,ber),e(ZF,Bue),e(Bue,ver),e(ho,Fer),M(e0,ho,null),b(f,EIe,_),b(f,xd,_),e(xd,o0),e(o0,Pue),M(my,Pue,null),e(xd,Ter),e(xd,Iue),e(Iue,Mer),b(f,CIe,_),b(f,Ho,_),M(gy,Ho,null),e(Ho,Eer),e(Ho,$d),e($d,Cer),e($d,SX),e(SX,wer),e($d,Aer),e($d,RX),e(RX,yer),e($d,Ler),e(Ho,xer),e(Ho,hy),e(hy,$er),e(hy,que),e(que,ker),e(hy,Ser),e(Ho,Rer),e(Ho,Mt),M(py,Mt,null),e(Mt,Ber),e(Mt,Nue),e(Nue,Per),e(Mt,Ier),e(Mt,kd),e(kd,qer),e(kd,jue),e(jue,Ner),e(kd,jer),e(kd,BX),e(BX,Der),e(kd,Ger),e(Mt,Oer),M(r0,Mt,null),e(Ho,Ver),e(Ho,po),M(uy,po,null),e(po,Xer),e(po,Due),e(Due,zer),e(po,Qer),e(po,Ha),e(Ha,Wer),e(Ha,Gue),e(Gue,Her),e(Ha,Uer),e(Ha,Oue),e(Oue,Jer),e(Ha,Yer),e(Ha,Vue),e(Vue,Ker),e(Ha,Zer),e(po,eor),e(po,Xue),e(Xue,t0),e(t0,zue),e(zue,oor),e(t0,ror),e(t0,PX),e(PX,tor),e(t0,aor),e(po,nor),e(po,a0),e(a0,sor),e(a0,Que),e(Que,lor),e(a0,ior),e(a0,Wue),e(Wue,dor),e(po,cor),M(n0,po,null),b(f,wIe,_),b(f,Sd,_),e(Sd,s0),e(s0,Hue),M(_y,Hue,null),e(Sd,mor),e(Sd,Uue),e(Uue,gor),b(f,AIe,_),b(f,Uo,_),M(by,Uo,null),e(Uo,hor),e(Uo,Rd),e(Rd,por),e(Rd,IX),e(IX,uor),e(Rd,_or),e(Rd,qX),e(qX,bor),e(Rd,vor),e(Uo,For),e(Uo,vy),e(vy,Tor),e(vy,Jue),e(Jue,Mor),e(vy,Eor),e(Uo,Cor),e(Uo,Et),M(Fy,Et,null),e(Et,wor),e(Et,Yue),e(Yue,Aor),e(Et,yor),e(Et,Bd),e(Bd,Lor),e(Bd,Kue),e(Kue,xor),e(Bd,$or),e(Bd,NX),e(NX,kor),e(Bd,Sor),e(Et,Ror),M(l0,Et,null),e(Uo,Bor),e(Uo,uo),M(Ty,uo,null),e(uo,Por),e(uo,Zue),e(Zue,Ior),e(uo,qor),e(uo,Ua),e(Ua,Nor),e(Ua,e_e),e(e_e,jor),e(Ua,Dor),e(Ua,o_e),e(o_e,Gor),e(Ua,Oor),e(Ua,r_e),e(r_e,Vor),e(Ua,Xor),e(uo,zor),e(uo,Ja),e(Ja,i0),e(i0,t_e),e(t_e,Qor),e(i0,Wor),e(i0,jX),e(jX,Hor),e(i0,Uor),e(Ja,Jor),e(Ja,d0),e(d0,a_e),e(a_e,Yor),e(d0,Kor),e(d0,DX),e(DX,Zor),e(d0,err),e(Ja,orr),e(Ja,c0),e(c0,n_e),e(n_e,rrr),e(c0,trr),e(c0,GX),e(GX,arr),e(c0,nrr),e(Ja,srr),e(Ja,f0),e(f0,s_e),e(s_e,lrr),e(f0,irr),e(f0,OX),e(OX,drr),e(f0,crr),e(uo,frr),e(uo,m0),e(m0,mrr),e(m0,l_e),e(l_e,grr),e(m0,hrr),e(m0,i_e),e(i_e,prr),e(uo,urr),M(g0,uo,null),b(f,yIe,_),b(f,Pd,_),e(Pd,h0),e(h0,d_e),M(My,d_e,null),e(Pd,_rr),e(Pd,c_e),e(c_e,brr),b(f,LIe,_),b(f,Jo,_),M(Ey,Jo,null),e(Jo,vrr),e(Jo,Id),e(Id,Frr),e(Id,VX),e(VX,Trr),e(Id,Mrr),e(Id,XX),e(XX,Err),e(Id,Crr),e(Jo,wrr),e(Jo,Cy),e(Cy,Arr),e(Cy,f_e),e(f_e,yrr),e(Cy,Lrr),e(Jo,xrr),e(Jo,Ct),M(wy,Ct,null),e(Ct,$rr),e(Ct,m_e),e(m_e,krr),e(Ct,Srr),e(Ct,qd),e(qd,Rrr),e(qd,g_e),e(g_e,Brr),e(qd,Prr),e(qd,zX),e(zX,Irr),e(qd,qrr),e(Ct,Nrr),M(p0,Ct,null),e(Jo,jrr),e(Jo,_o),M(Ay,_o,null),e(_o,Drr),e(_o,h_e),e(h_e,Grr),e(_o,Orr),e(_o,Ya),e(Ya,Vrr),e(Ya,p_e),e(p_e,Xrr),e(Ya,zrr),e(Ya,u_e),e(u_e,Qrr),e(Ya,Wrr),e(Ya,__e),e(__e,Hrr),e(Ya,Urr),e(_o,Jrr),e(_o,b_e),e(b_e,u0),e(u0,v_e),e(v_e,Yrr),e(u0,Krr),e(u0,QX),e(QX,Zrr),e(u0,etr),e(_o,otr),e(_o,_0),e(_0,rtr),e(_0,F_e),e(F_e,ttr),e(_0,atr),e(_0,T_e),e(T_e,ntr),e(_o,str),M(b0,_o,null),b(f,xIe,_),b(f,Nd,_),e(Nd,v0),e(v0,M_e),M(yy,M_e,null),e(Nd,ltr),e(Nd,E_e),e(E_e,itr),b(f,$Ie,_),b(f,Yo,_),M(Ly,Yo,null),e(Yo,dtr),e(Yo,jd),e(jd,ctr),e(jd,WX),e(WX,ftr),e(jd,mtr),e(jd,HX),e(HX,gtr),e(jd,htr),e(Yo,ptr),e(Yo,xy),e(xy,utr),e(xy,C_e),e(C_e,_tr),e(xy,btr),e(Yo,vtr),e(Yo,wt),M($y,wt,null),e(wt,Ftr),e(wt,w_e),e(w_e,Ttr),e(wt,Mtr),e(wt,Dd),e(Dd,Etr),e(Dd,A_e),e(A_e,Ctr),e(Dd,wtr),e(Dd,UX),e(UX,Atr),e(Dd,ytr),e(wt,Ltr),M(F0,wt,null),e(Yo,xtr),e(Yo,wr),M(ky,wr,null),e(wr,$tr),e(wr,y_e),e(y_e,ktr),e(wr,Str),e(wr,Ka),e(Ka,Rtr),e(Ka,L_e),e(L_e,Btr),e(Ka,Ptr),e(Ka,x_e),e(x_e,Itr),e(Ka,qtr),e(Ka,$_e),e($_e,Ntr),e(Ka,jtr),e(wr,Dtr),e(wr,j),e(j,T0),e(T0,k_e),e(k_e,Gtr),e(T0,Otr),e(T0,JX),e(JX,Vtr),e(T0,Xtr),e(j,ztr),e(j,M0),e(M0,S_e),e(S_e,Qtr),e(M0,Wtr),e(M0,YX),e(YX,Htr),e(M0,Utr),e(j,Jtr),e(j,E0),e(E0,R_e),e(R_e,Ytr),e(E0,Ktr),e(E0,KX),e(KX,Ztr),e(E0,ear),e(j,oar),e(j,C0),e(C0,B_e),e(B_e,rar),e(C0,tar),e(C0,ZX),e(ZX,aar),e(C0,nar),e(j,sar),e(j,w0),e(w0,P_e),e(P_e,lar),e(w0,iar),e(w0,ez),e(ez,dar),e(w0,car),e(j,far),e(j,A0),e(A0,I_e),e(I_e,mar),e(A0,gar),e(A0,oz),e(oz,har),e(A0,par),e(j,uar),e(j,y0),e(y0,q_e),e(q_e,_ar),e(y0,bar),e(y0,rz),e(rz,Far),e(y0,Tar),e(j,Mar),e(j,L0),e(L0,N_e),e(N_e,Ear),e(L0,Car),e(L0,tz),e(tz,war),e(L0,Aar),e(j,yar),e(j,x0),e(x0,j_e),e(j_e,Lar),e(x0,xar),e(x0,az),e(az,$ar),e(x0,kar),e(j,Sar),e(j,$0),e($0,D_e),e(D_e,Rar),e($0,Bar),e($0,nz),e(nz,Par),e($0,Iar),e(j,qar),e(j,k0),e(k0,G_e),e(G_e,Nar),e(k0,jar),e(k0,sz),e(sz,Dar),e(k0,Gar),e(j,Oar),e(j,S0),e(S0,O_e),e(O_e,Var),e(S0,Xar),e(S0,lz),e(lz,zar),e(S0,Qar),e(j,War),e(j,R0),e(R0,V_e),e(V_e,Har),e(R0,Uar),e(R0,iz),e(iz,Jar),e(R0,Yar),e(j,Kar),e(j,B0),e(B0,X_e),e(X_e,Zar),e(B0,enr),e(B0,dz),e(dz,onr),e(B0,rnr),e(j,tnr),e(j,P0),e(P0,z_e),e(z_e,anr),e(P0,nnr),e(P0,cz),e(cz,snr),e(P0,lnr),e(j,inr),e(j,I0),e(I0,Q_e),e(Q_e,dnr),e(I0,cnr),e(I0,fz),e(fz,fnr),e(I0,mnr),e(j,gnr),e(j,q0),e(q0,W_e),e(W_e,hnr),e(q0,pnr),e(q0,mz),e(mz,unr),e(q0,_nr),e(j,bnr),e(j,Ps),e(Ps,H_e),e(H_e,vnr),e(Ps,Fnr),e(Ps,gz),e(gz,Tnr),e(Ps,Mnr),e(Ps,hz),e(hz,Enr),e(Ps,Cnr),e(j,wnr),e(j,N0),e(N0,U_e),e(U_e,Anr),e(N0,ynr),e(N0,pz),e(pz,Lnr),e(N0,xnr),e(j,$nr),e(j,j0),e(j0,J_e),e(J_e,knr),e(j0,Snr),e(j0,uz),e(uz,Rnr),e(j0,Bnr),e(j,Pnr),e(j,D0),e(D0,Y_e),e(Y_e,Inr),e(D0,qnr),e(D0,_z),e(_z,Nnr),e(D0,jnr),e(j,Dnr),e(j,G0),e(G0,K_e),e(K_e,Gnr),e(G0,Onr),e(G0,bz),e(bz,Vnr),e(G0,Xnr),e(j,znr),e(j,O0),e(O0,Z_e),e(Z_e,Qnr),e(O0,Wnr),e(O0,vz),e(vz,Hnr),e(O0,Unr),e(j,Jnr),e(j,V0),e(V0,e1e),e(e1e,Ynr),e(V0,Knr),e(V0,Fz),e(Fz,Znr),e(V0,esr),e(j,osr),e(j,X0),e(X0,o1e),e(o1e,rsr),e(X0,tsr),e(X0,Tz),e(Tz,asr),e(X0,nsr),e(j,ssr),e(j,z0),e(z0,r1e),e(r1e,lsr),e(z0,isr),e(z0,Mz),e(Mz,dsr),e(z0,csr),e(j,fsr),e(j,Q0),e(Q0,t1e),e(t1e,msr),e(Q0,gsr),e(Q0,Ez),e(Ez,hsr),e(Q0,psr),e(j,usr),e(j,W0),e(W0,a1e),e(a1e,_sr),e(W0,bsr),e(W0,Cz),e(Cz,vsr),e(W0,Fsr),e(j,Tsr),e(j,H0),e(H0,n1e),e(n1e,Msr),e(H0,Esr),e(H0,wz),e(wz,Csr),e(H0,wsr),e(j,Asr),e(j,U0),e(U0,s1e),e(s1e,ysr),e(U0,Lsr),e(U0,Az),e(Az,xsr),e(U0,$sr),e(j,ksr),e(j,J0),e(J0,l1e),e(l1e,Ssr),e(J0,Rsr),e(J0,yz),e(yz,Bsr),e(J0,Psr),e(j,Isr),e(j,Y0),e(Y0,i1e),e(i1e,qsr),e(Y0,Nsr),e(Y0,Lz),e(Lz,jsr),e(Y0,Dsr),e(j,Gsr),e(j,K0),e(K0,d1e),e(d1e,Osr),e(K0,Vsr),e(K0,xz),e(xz,Xsr),e(K0,zsr),e(j,Qsr),e(j,Z0),e(Z0,c1e),e(c1e,Wsr),e(Z0,Hsr),e(Z0,$z),e($z,Usr),e(Z0,Jsr),e(j,Ysr),e(j,eT),e(eT,f1e),e(f1e,Ksr),e(eT,Zsr),e(eT,kz),e(kz,elr),e(eT,olr),e(j,rlr),e(j,oT),e(oT,m1e),e(m1e,tlr),e(oT,alr),e(oT,Sz),e(Sz,nlr),e(oT,slr),e(j,llr),e(j,rT),e(rT,g1e),e(g1e,ilr),e(rT,dlr),e(rT,Rz),e(Rz,clr),e(rT,flr),e(j,mlr),e(j,tT),e(tT,h1e),e(h1e,glr),e(tT,hlr),e(tT,Bz),e(Bz,plr),e(tT,ulr),e(j,_lr),e(j,aT),e(aT,p1e),e(p1e,blr),e(aT,vlr),e(aT,Pz),e(Pz,Flr),e(aT,Tlr),e(j,Mlr),e(j,nT),e(nT,u1e),e(u1e,Elr),e(nT,Clr),e(nT,Iz),e(Iz,wlr),e(nT,Alr),e(j,ylr),e(j,sT),e(sT,_1e),e(_1e,Llr),e(sT,xlr),e(sT,qz),e(qz,$lr),e(sT,klr),e(j,Slr),e(j,lT),e(lT,b1e),e(b1e,Rlr),e(lT,Blr),e(lT,Nz),e(Nz,Plr),e(lT,Ilr),e(j,qlr),e(j,iT),e(iT,v1e),e(v1e,Nlr),e(iT,jlr),e(iT,jz),e(jz,Dlr),e(iT,Glr),e(j,Olr),e(j,dT),e(dT,F1e),e(F1e,Vlr),e(dT,Xlr),e(dT,Dz),e(Dz,zlr),e(dT,Qlr),e(j,Wlr),e(j,cT),e(cT,T1e),e(T1e,Hlr),e(cT,Ulr),e(cT,Gz),e(Gz,Jlr),e(cT,Ylr),e(wr,Klr),M(fT,wr,null),b(f,kIe,_),b(f,Gd,_),e(Gd,mT),e(mT,M1e),M(Sy,M1e,null),e(Gd,Zlr),e(Gd,E1e),e(E1e,eir),b(f,SIe,_),b(f,Ko,_),M(Ry,Ko,null),e(Ko,oir),e(Ko,Od),e(Od,rir),e(Od,Oz),e(Oz,tir),e(Od,air),e(Od,Vz),e(Vz,nir),e(Od,sir),e(Ko,lir),e(Ko,By),e(By,iir),e(By,C1e),e(C1e,dir),e(By,cir),e(Ko,fir),e(Ko,At),M(Py,At,null),e(At,mir),e(At,w1e),e(w1e,gir),e(At,hir),e(At,Vd),e(Vd,pir),e(Vd,A1e),e(A1e,uir),e(Vd,_ir),e(Vd,Xz),e(Xz,bir),e(Vd,vir),e(At,Fir),M(gT,At,null),e(Ko,Tir),e(Ko,Ar),M(Iy,Ar,null),e(Ar,Mir),e(Ar,y1e),e(y1e,Eir),e(Ar,Cir),e(Ar,Za),e(Za,wir),e(Za,L1e),e(L1e,Air),e(Za,yir),e(Za,x1e),e(x1e,Lir),e(Za,xir),e(Za,$1e),e($1e,$ir),e(Za,kir),e(Ar,Sir),e(Ar,ne),e(ne,hT),e(hT,k1e),e(k1e,Rir),e(hT,Bir),e(hT,zz),e(zz,Pir),e(hT,Iir),e(ne,qir),e(ne,pT),e(pT,S1e),e(S1e,Nir),e(pT,jir),e(pT,Qz),e(Qz,Dir),e(pT,Gir),e(ne,Oir),e(ne,uT),e(uT,R1e),e(R1e,Vir),e(uT,Xir),e(uT,Wz),e(Wz,zir),e(uT,Qir),e(ne,Wir),e(ne,_T),e(_T,B1e),e(B1e,Hir),e(_T,Uir),e(_T,Hz),e(Hz,Jir),e(_T,Yir),e(ne,Kir),e(ne,bT),e(bT,P1e),e(P1e,Zir),e(bT,edr),e(bT,Uz),e(Uz,odr),e(bT,rdr),e(ne,tdr),e(ne,vT),e(vT,I1e),e(I1e,adr),e(vT,ndr),e(vT,Jz),e(Jz,sdr),e(vT,ldr),e(ne,idr),e(ne,FT),e(FT,q1e),e(q1e,ddr),e(FT,cdr),e(FT,Yz),e(Yz,fdr),e(FT,mdr),e(ne,gdr),e(ne,TT),e(TT,N1e),e(N1e,hdr),e(TT,pdr),e(TT,Kz),e(Kz,udr),e(TT,_dr),e(ne,bdr),e(ne,MT),e(MT,j1e),e(j1e,vdr),e(MT,Fdr),e(MT,Zz),e(Zz,Tdr),e(MT,Mdr),e(ne,Edr),e(ne,ET),e(ET,D1e),e(D1e,Cdr),e(ET,wdr),e(ET,eQ),e(eQ,Adr),e(ET,ydr),e(ne,Ldr),e(ne,CT),e(CT,G1e),e(G1e,xdr),e(CT,$dr),e(CT,oQ),e(oQ,kdr),e(CT,Sdr),e(ne,Rdr),e(ne,wT),e(wT,O1e),e(O1e,Bdr),e(wT,Pdr),e(wT,rQ),e(rQ,Idr),e(wT,qdr),e(ne,Ndr),e(ne,AT),e(AT,V1e),e(V1e,jdr),e(AT,Ddr),e(AT,tQ),e(tQ,Gdr),e(AT,Odr),e(ne,Vdr),e(ne,yT),e(yT,X1e),e(X1e,Xdr),e(yT,zdr),e(yT,aQ),e(aQ,Qdr),e(yT,Wdr),e(ne,Hdr),e(ne,LT),e(LT,z1e),e(z1e,Udr),e(LT,Jdr),e(LT,nQ),e(nQ,Ydr),e(LT,Kdr),e(ne,Zdr),e(ne,xT),e(xT,Q1e),e(Q1e,ecr),e(xT,ocr),e(xT,sQ),e(sQ,rcr),e(xT,tcr),e(ne,acr),e(ne,$T),e($T,W1e),e(W1e,ncr),e($T,scr),e($T,lQ),e(lQ,lcr),e($T,icr),e(ne,dcr),e(ne,kT),e(kT,H1e),e(H1e,ccr),e(kT,fcr),e(kT,iQ),e(iQ,mcr),e(kT,gcr),e(ne,hcr),e(ne,ST),e(ST,U1e),e(U1e,pcr),e(ST,ucr),e(ST,dQ),e(dQ,_cr),e(ST,bcr),e(ne,vcr),e(ne,RT),e(RT,J1e),e(J1e,Fcr),e(RT,Tcr),e(RT,cQ),e(cQ,Mcr),e(RT,Ecr),e(ne,Ccr),e(ne,BT),e(BT,Y1e),e(Y1e,wcr),e(BT,Acr),e(BT,fQ),e(fQ,ycr),e(BT,Lcr),e(ne,xcr),e(ne,PT),e(PT,K1e),e(K1e,$cr),e(PT,kcr),e(PT,mQ),e(mQ,Scr),e(PT,Rcr),e(ne,Bcr),e(ne,IT),e(IT,Z1e),e(Z1e,Pcr),e(IT,Icr),e(IT,gQ),e(gQ,qcr),e(IT,Ncr),e(Ar,jcr),M(qT,Ar,null),b(f,RIe,_),b(f,Xd,_),e(Xd,NT),e(NT,e8e),M(qy,e8e,null),e(Xd,Dcr),e(Xd,o8e),e(o8e,Gcr),b(f,BIe,_),b(f,Zo,_),M(Ny,Zo,null),e(Zo,Ocr),e(Zo,zd),e(zd,Vcr),e(zd,hQ),e(hQ,Xcr),e(zd,zcr),e(zd,pQ),e(pQ,Qcr),e(zd,Wcr),e(Zo,Hcr),e(Zo,jy),e(jy,Ucr),e(jy,r8e),e(r8e,Jcr),e(jy,Ycr),e(Zo,Kcr),e(Zo,yt),M(Dy,yt,null),e(yt,Zcr),e(yt,t8e),e(t8e,efr),e(yt,ofr),e(yt,Qd),e(Qd,rfr),e(Qd,a8e),e(a8e,tfr),e(Qd,afr),e(Qd,uQ),e(uQ,nfr),e(Qd,sfr),e(yt,lfr),M(jT,yt,null),e(Zo,ifr),e(Zo,yr),M(Gy,yr,null),e(yr,dfr),e(yr,n8e),e(n8e,cfr),e(yr,ffr),e(yr,en),e(en,mfr),e(en,s8e),e(s8e,gfr),e(en,hfr),e(en,l8e),e(l8e,pfr),e(en,ufr),e(en,i8e),e(i8e,_fr),e(en,bfr),e(yr,vfr),e(yr,Te),e(Te,DT),e(DT,d8e),e(d8e,Ffr),e(DT,Tfr),e(DT,_Q),e(_Q,Mfr),e(DT,Efr),e(Te,Cfr),e(Te,GT),e(GT,c8e),e(c8e,wfr),e(GT,Afr),e(GT,bQ),e(bQ,yfr),e(GT,Lfr),e(Te,xfr),e(Te,OT),e(OT,f8e),e(f8e,$fr),e(OT,kfr),e(OT,vQ),e(vQ,Sfr),e(OT,Rfr),e(Te,Bfr),e(Te,VT),e(VT,m8e),e(m8e,Pfr),e(VT,Ifr),e(VT,FQ),e(FQ,qfr),e(VT,Nfr),e(Te,jfr),e(Te,XT),e(XT,g8e),e(g8e,Dfr),e(XT,Gfr),e(XT,TQ),e(TQ,Ofr),e(XT,Vfr),e(Te,Xfr),e(Te,zT),e(zT,h8e),e(h8e,zfr),e(zT,Qfr),e(zT,MQ),e(MQ,Wfr),e(zT,Hfr),e(Te,Ufr),e(Te,QT),e(QT,p8e),e(p8e,Jfr),e(QT,Yfr),e(QT,EQ),e(EQ,Kfr),e(QT,Zfr),e(Te,emr),e(Te,WT),e(WT,u8e),e(u8e,omr),e(WT,rmr),e(WT,CQ),e(CQ,tmr),e(WT,amr),e(Te,nmr),e(Te,HT),e(HT,_8e),e(_8e,smr),e(HT,lmr),e(HT,wQ),e(wQ,imr),e(HT,dmr),e(Te,cmr),e(Te,UT),e(UT,b8e),e(b8e,fmr),e(UT,mmr),e(UT,AQ),e(AQ,gmr),e(UT,hmr),e(Te,pmr),e(Te,JT),e(JT,v8e),e(v8e,umr),e(JT,_mr),e(JT,yQ),e(yQ,bmr),e(JT,vmr),e(Te,Fmr),e(Te,YT),e(YT,F8e),e(F8e,Tmr),e(YT,Mmr),e(YT,LQ),e(LQ,Emr),e(YT,Cmr),e(yr,wmr),M(KT,yr,null),b(f,PIe,_),b(f,Wd,_),e(Wd,ZT),e(ZT,T8e),M(Oy,T8e,null),e(Wd,Amr),e(Wd,M8e),e(M8e,ymr),b(f,IIe,_),b(f,er,_),M(Vy,er,null),e(er,Lmr),e(er,Hd),e(Hd,xmr),e(Hd,xQ),e(xQ,$mr),e(Hd,kmr),e(Hd,$Q),e($Q,Smr),e(Hd,Rmr),e(er,Bmr),e(er,Xy),e(Xy,Pmr),e(Xy,E8e),e(E8e,Imr),e(Xy,qmr),e(er,Nmr),e(er,Lt),M(zy,Lt,null),e(Lt,jmr),e(Lt,C8e),e(C8e,Dmr),e(Lt,Gmr),e(Lt,Ud),e(Ud,Omr),e(Ud,w8e),e(w8e,Vmr),e(Ud,Xmr),e(Ud,kQ),e(kQ,zmr),e(Ud,Qmr),e(Lt,Wmr),M(e7,Lt,null),e(er,Hmr),e(er,Lr),M(Qy,Lr,null),e(Lr,Umr),e(Lr,A8e),e(A8e,Jmr),e(Lr,Ymr),e(Lr,on),e(on,Kmr),e(on,y8e),e(y8e,Zmr),e(on,egr),e(on,L8e),e(L8e,ogr),e(on,rgr),e(on,x8e),e(x8e,tgr),e(on,agr),e(Lr,ngr),e(Lr,Jd),e(Jd,o7),e(o7,$8e),e($8e,sgr),e(o7,lgr),e(o7,SQ),e(SQ,igr),e(o7,dgr),e(Jd,cgr),e(Jd,r7),e(r7,k8e),e(k8e,fgr),e(r7,mgr),e(r7,RQ),e(RQ,ggr),e(r7,hgr),e(Jd,pgr),e(Jd,t7),e(t7,S8e),e(S8e,ugr),e(t7,_gr),e(t7,BQ),e(BQ,bgr),e(t7,vgr),e(Lr,Fgr),M(a7,Lr,null),b(f,qIe,_),b(f,Yd,_),e(Yd,n7),e(n7,R8e),M(Wy,R8e,null),e(Yd,Tgr),e(Yd,B8e),e(B8e,Mgr),b(f,NIe,_),b(f,or,_),M(Hy,or,null),e(or,Egr),e(or,Kd),e(Kd,Cgr),e(Kd,PQ),e(PQ,wgr),e(Kd,Agr),e(Kd,IQ),e(IQ,ygr),e(Kd,Lgr),e(or,xgr),e(or,Uy),e(Uy,$gr),e(Uy,P8e),e(P8e,kgr),e(Uy,Sgr),e(or,Rgr),e(or,xt),M(Jy,xt,null),e(xt,Bgr),e(xt,I8e),e(I8e,Pgr),e(xt,Igr),e(xt,Zd),e(Zd,qgr),e(Zd,q8e),e(q8e,Ngr),e(Zd,jgr),e(Zd,qQ),e(qQ,Dgr),e(Zd,Ggr),e(xt,Ogr),M(s7,xt,null),e(or,Vgr),e(or,xr),M(Yy,xr,null),e(xr,Xgr),e(xr,N8e),e(N8e,zgr),e(xr,Qgr),e(xr,rn),e(rn,Wgr),e(rn,j8e),e(j8e,Hgr),e(rn,Ugr),e(rn,D8e),e(D8e,Jgr),e(rn,Ygr),e(rn,G8e),e(G8e,Kgr),e(rn,Zgr),e(xr,ehr),e(xr,ie),e(ie,l7),e(l7,O8e),e(O8e,ohr),e(l7,rhr),e(l7,NQ),e(NQ,thr),e(l7,ahr),e(ie,nhr),e(ie,i7),e(i7,V8e),e(V8e,shr),e(i7,lhr),e(i7,jQ),e(jQ,ihr),e(i7,dhr),e(ie,chr),e(ie,d7),e(d7,X8e),e(X8e,fhr),e(d7,mhr),e(d7,DQ),e(DQ,ghr),e(d7,hhr),e(ie,phr),e(ie,c7),e(c7,z8e),e(z8e,uhr),e(c7,_hr),e(c7,GQ),e(GQ,bhr),e(c7,vhr),e(ie,Fhr),e(ie,f7),e(f7,Q8e),e(Q8e,Thr),e(f7,Mhr),e(f7,OQ),e(OQ,Ehr),e(f7,Chr),e(ie,whr),e(ie,m7),e(m7,W8e),e(W8e,Ahr),e(m7,yhr),e(m7,VQ),e(VQ,Lhr),e(m7,xhr),e(ie,$hr),e(ie,g7),e(g7,H8e),e(H8e,khr),e(g7,Shr),e(g7,XQ),e(XQ,Rhr),e(g7,Bhr),e(ie,Phr),e(ie,h7),e(h7,U8e),e(U8e,Ihr),e(h7,qhr),e(h7,zQ),e(zQ,Nhr),e(h7,jhr),e(ie,Dhr),e(ie,p7),e(p7,J8e),e(J8e,Ghr),e(p7,Ohr),e(p7,QQ),e(QQ,Vhr),e(p7,Xhr),e(ie,zhr),e(ie,u7),e(u7,Y8e),e(Y8e,Qhr),e(u7,Whr),e(u7,WQ),e(WQ,Hhr),e(u7,Uhr),e(ie,Jhr),e(ie,_7),e(_7,K8e),e(K8e,Yhr),e(_7,Khr),e(_7,HQ),e(HQ,Zhr),e(_7,epr),e(ie,opr),e(ie,b7),e(b7,Z8e),e(Z8e,rpr),e(b7,tpr),e(b7,UQ),e(UQ,apr),e(b7,npr),e(ie,spr),e(ie,v7),e(v7,ebe),e(ebe,lpr),e(v7,ipr),e(v7,JQ),e(JQ,dpr),e(v7,cpr),e(ie,fpr),e(ie,F7),e(F7,obe),e(obe,mpr),e(F7,gpr),e(F7,YQ),e(YQ,hpr),e(F7,ppr),e(ie,upr),e(ie,T7),e(T7,rbe),e(rbe,_pr),e(T7,bpr),e(T7,KQ),e(KQ,vpr),e(T7,Fpr),e(ie,Tpr),e(ie,M7),e(M7,tbe),e(tbe,Mpr),e(M7,Epr),e(M7,ZQ),e(ZQ,Cpr),e(M7,wpr),e(ie,Apr),e(ie,E7),e(E7,abe),e(abe,ypr),e(E7,Lpr),e(E7,eW),e(eW,xpr),e(E7,$pr),e(ie,kpr),e(ie,C7),e(C7,nbe),e(nbe,Spr),e(C7,Rpr),e(C7,oW),e(oW,Bpr),e(C7,Ppr),e(ie,Ipr),e(ie,w7),e(w7,sbe),e(sbe,qpr),e(w7,Npr),e(w7,rW),e(rW,jpr),e(w7,Dpr),e(ie,Gpr),e(ie,A7),e(A7,lbe),e(lbe,Opr),e(A7,Vpr),e(A7,tW),e(tW,Xpr),e(A7,zpr),e(xr,Qpr),M(y7,xr,null),b(f,jIe,_),b(f,ec,_),e(ec,L7),e(L7,ibe),M(Ky,ibe,null),e(ec,Wpr),e(ec,dbe),e(dbe,Hpr),b(f,DIe,_),b(f,rr,_),M(Zy,rr,null),e(rr,Upr),e(rr,oc),e(oc,Jpr),e(oc,aW),e(aW,Ypr),e(oc,Kpr),e(oc,nW),e(nW,Zpr),e(oc,eur),e(rr,our),e(rr,eL),e(eL,rur),e(eL,cbe),e(cbe,tur),e(eL,aur),e(rr,nur),e(rr,$t),M(oL,$t,null),e($t,sur),e($t,fbe),e(fbe,lur),e($t,iur),e($t,rc),e(rc,dur),e(rc,mbe),e(mbe,cur),e(rc,fur),e(rc,sW),e(sW,mur),e(rc,gur),e($t,hur),M(x7,$t,null),e(rr,pur),e(rr,$r),M(rL,$r,null),e($r,uur),e($r,gbe),e(gbe,_ur),e($r,bur),e($r,tn),e(tn,vur),e(tn,hbe),e(hbe,Fur),e(tn,Tur),e(tn,pbe),e(pbe,Mur),e(tn,Eur),e(tn,ube),e(ube,Cur),e(tn,wur),e($r,Aur),e($r,ye),e(ye,$7),e($7,_be),e(_be,yur),e($7,Lur),e($7,lW),e(lW,xur),e($7,$ur),e(ye,kur),e(ye,k7),e(k7,bbe),e(bbe,Sur),e(k7,Rur),e(k7,iW),e(iW,Bur),e(k7,Pur),e(ye,Iur),e(ye,S7),e(S7,vbe),e(vbe,qur),e(S7,Nur),e(S7,dW),e(dW,jur),e(S7,Dur),e(ye,Gur),e(ye,R7),e(R7,Fbe),e(Fbe,Our),e(R7,Vur),e(R7,cW),e(cW,Xur),e(R7,zur),e(ye,Qur),e(ye,B7),e(B7,Tbe),e(Tbe,Wur),e(B7,Hur),e(B7,fW),e(fW,Uur),e(B7,Jur),e(ye,Yur),e(ye,P7),e(P7,Mbe),e(Mbe,Kur),e(P7,Zur),e(P7,mW),e(mW,e_r),e(P7,o_r),e(ye,r_r),e(ye,I7),e(I7,Ebe),e(Ebe,t_r),e(I7,a_r),e(I7,gW),e(gW,n_r),e(I7,s_r),e(ye,l_r),e(ye,q7),e(q7,Cbe),e(Cbe,i_r),e(q7,d_r),e(q7,hW),e(hW,c_r),e(q7,f_r),e(ye,m_r),e(ye,N7),e(N7,wbe),e(wbe,g_r),e(N7,h_r),e(N7,pW),e(pW,p_r),e(N7,u_r),e(ye,__r),e(ye,j7),e(j7,Abe),e(Abe,b_r),e(j7,v_r),e(j7,uW),e(uW,F_r),e(j7,T_r),e($r,M_r),M(D7,$r,null),b(f,GIe,_),b(f,tc,_),e(tc,G7),e(G7,ybe),M(tL,ybe,null),e(tc,E_r),e(tc,Lbe),e(Lbe,C_r),b(f,OIe,_),b(f,tr,_),M(aL,tr,null),e(tr,w_r),e(tr,ac),e(ac,A_r),e(ac,_W),e(_W,y_r),e(ac,L_r),e(ac,bW),e(bW,x_r),e(ac,$_r),e(tr,k_r),e(tr,nL),e(nL,S_r),e(nL,xbe),e(xbe,R_r),e(nL,B_r),e(tr,P_r),e(tr,kt),M(sL,kt,null),e(kt,I_r),e(kt,$be),e($be,q_r),e(kt,N_r),e(kt,nc),e(nc,j_r),e(nc,kbe),e(kbe,D_r),e(nc,G_r),e(nc,vW),e(vW,O_r),e(nc,V_r),e(kt,X_r),M(O7,kt,null),e(tr,z_r),e(tr,kr),M(lL,kr,null),e(kr,Q_r),e(kr,Sbe),e(Sbe,W_r),e(kr,H_r),e(kr,an),e(an,U_r),e(an,Rbe),e(Rbe,J_r),e(an,Y_r),e(an,Bbe),e(Bbe,K_r),e(an,Z_r),e(an,Pbe),e(Pbe,e1r),e(an,o1r),e(kr,r1r),e(kr,Z),e(Z,V7),e(V7,Ibe),e(Ibe,t1r),e(V7,a1r),e(V7,FW),e(FW,n1r),e(V7,s1r),e(Z,l1r),e(Z,X7),e(X7,qbe),e(qbe,i1r),e(X7,d1r),e(X7,TW),e(TW,c1r),e(X7,f1r),e(Z,m1r),e(Z,z7),e(z7,Nbe),e(Nbe,g1r),e(z7,h1r),e(z7,MW),e(MW,p1r),e(z7,u1r),e(Z,_1r),e(Z,Q7),e(Q7,jbe),e(jbe,b1r),e(Q7,v1r),e(Q7,EW),e(EW,F1r),e(Q7,T1r),e(Z,M1r),e(Z,W7),e(W7,Dbe),e(Dbe,E1r),e(W7,C1r),e(W7,CW),e(CW,w1r),e(W7,A1r),e(Z,y1r),e(Z,H7),e(H7,Gbe),e(Gbe,L1r),e(H7,x1r),e(H7,wW),e(wW,$1r),e(H7,k1r),e(Z,S1r),e(Z,U7),e(U7,Obe),e(Obe,R1r),e(U7,B1r),e(U7,AW),e(AW,P1r),e(U7,I1r),e(Z,q1r),e(Z,J7),e(J7,Vbe),e(Vbe,N1r),e(J7,j1r),e(J7,yW),e(yW,D1r),e(J7,G1r),e(Z,O1r),e(Z,Y7),e(Y7,Xbe),e(Xbe,V1r),e(Y7,X1r),e(Y7,LW),e(LW,z1r),e(Y7,Q1r),e(Z,W1r),e(Z,K7),e(K7,zbe),e(zbe,H1r),e(K7,U1r),e(K7,xW),e(xW,J1r),e(K7,Y1r),e(Z,K1r),e(Z,Z7),e(Z7,Qbe),e(Qbe,Z1r),e(Z7,e8r),e(Z7,$W),e($W,o8r),e(Z7,r8r),e(Z,t8r),e(Z,eM),e(eM,Wbe),e(Wbe,a8r),e(eM,n8r),e(eM,kW),e(kW,s8r),e(eM,l8r),e(Z,i8r),e(Z,oM),e(oM,Hbe),e(Hbe,d8r),e(oM,c8r),e(oM,SW),e(SW,f8r),e(oM,m8r),e(Z,g8r),e(Z,rM),e(rM,Ube),e(Ube,h8r),e(rM,p8r),e(rM,RW),e(RW,u8r),e(rM,_8r),e(Z,b8r),e(Z,tM),e(tM,Jbe),e(Jbe,v8r),e(tM,F8r),e(tM,BW),e(BW,T8r),e(tM,M8r),e(Z,E8r),e(Z,aM),e(aM,Ybe),e(Ybe,C8r),e(aM,w8r),e(aM,PW),e(PW,A8r),e(aM,y8r),e(Z,L8r),e(Z,nM),e(nM,Kbe),e(Kbe,x8r),e(nM,$8r),e(nM,IW),e(IW,k8r),e(nM,S8r),e(Z,R8r),e(Z,sM),e(sM,Zbe),e(Zbe,B8r),e(sM,P8r),e(sM,qW),e(qW,I8r),e(sM,q8r),e(Z,N8r),e(Z,lM),e(lM,e2e),e(e2e,j8r),e(lM,D8r),e(lM,NW),e(NW,G8r),e(lM,O8r),e(Z,V8r),e(Z,iM),e(iM,o2e),e(o2e,X8r),e(iM,z8r),e(iM,jW),e(jW,Q8r),e(iM,W8r),e(Z,H8r),e(Z,dM),e(dM,r2e),e(r2e,U8r),e(dM,J8r),e(dM,DW),e(DW,Y8r),e(dM,K8r),e(Z,Z8r),e(Z,cM),e(cM,t2e),e(t2e,ebr),e(cM,obr),e(cM,GW),e(GW,rbr),e(cM,tbr),e(Z,abr),e(Z,fM),e(fM,a2e),e(a2e,nbr),e(fM,sbr),e(fM,OW),e(OW,lbr),e(fM,ibr),e(Z,dbr),e(Z,mM),e(mM,n2e),e(n2e,cbr),e(mM,fbr),e(mM,VW),e(VW,mbr),e(mM,gbr),e(Z,hbr),e(Z,gM),e(gM,s2e),e(s2e,pbr),e(gM,ubr),e(gM,XW),e(XW,_br),e(gM,bbr),e(Z,vbr),e(Z,hM),e(hM,l2e),e(l2e,Fbr),e(hM,Tbr),e(hM,zW),e(zW,Mbr),e(hM,Ebr),e(kr,Cbr),M(pM,kr,null),b(f,VIe,_),b(f,sc,_),e(sc,uM),e(uM,i2e),M(iL,i2e,null),e(sc,wbr),e(sc,d2e),e(d2e,Abr),b(f,XIe,_),b(f,ar,_),M(dL,ar,null),e(ar,ybr),e(ar,lc),e(lc,Lbr),e(lc,QW),e(QW,xbr),e(lc,$br),e(lc,WW),e(WW,kbr),e(lc,Sbr),e(ar,Rbr),e(ar,cL),e(cL,Bbr),e(cL,c2e),e(c2e,Pbr),e(cL,Ibr),e(ar,qbr),e(ar,St),M(fL,St,null),e(St,Nbr),e(St,f2e),e(f2e,jbr),e(St,Dbr),e(St,ic),e(ic,Gbr),e(ic,m2e),e(m2e,Obr),e(ic,Vbr),e(ic,HW),e(HW,Xbr),e(ic,zbr),e(St,Qbr),M(_M,St,null),e(ar,Wbr),e(ar,Sr),M(mL,Sr,null),e(Sr,Hbr),e(Sr,g2e),e(g2e,Ubr),e(Sr,Jbr),e(Sr,nn),e(nn,Ybr),e(nn,h2e),e(h2e,Kbr),e(nn,Zbr),e(nn,p2e),e(p2e,e2r),e(nn,o2r),e(nn,u2e),e(u2e,r2r),e(nn,t2r),e(Sr,a2r),e(Sr,pe),e(pe,bM),e(bM,_2e),e(_2e,n2r),e(bM,s2r),e(bM,UW),e(UW,l2r),e(bM,i2r),e(pe,d2r),e(pe,vM),e(vM,b2e),e(b2e,c2r),e(vM,f2r),e(vM,JW),e(JW,m2r),e(vM,g2r),e(pe,h2r),e(pe,FM),e(FM,v2e),e(v2e,p2r),e(FM,u2r),e(FM,YW),e(YW,_2r),e(FM,b2r),e(pe,v2r),e(pe,TM),e(TM,F2e),e(F2e,F2r),e(TM,T2r),e(TM,KW),e(KW,M2r),e(TM,E2r),e(pe,C2r),e(pe,MM),e(MM,T2e),e(T2e,w2r),e(MM,A2r),e(MM,ZW),e(ZW,y2r),e(MM,L2r),e(pe,x2r),e(pe,EM),e(EM,M2e),e(M2e,$2r),e(EM,k2r),e(EM,eH),e(eH,S2r),e(EM,R2r),e(pe,B2r),e(pe,CM),e(CM,E2e),e(E2e,P2r),e(CM,I2r),e(CM,oH),e(oH,q2r),e(CM,N2r),e(pe,j2r),e(pe,wM),e(wM,C2e),e(C2e,D2r),e(wM,G2r),e(wM,rH),e(rH,O2r),e(wM,V2r),e(pe,X2r),e(pe,AM),e(AM,w2e),e(w2e,z2r),e(AM,Q2r),e(AM,tH),e(tH,W2r),e(AM,H2r),e(pe,U2r),e(pe,yM),e(yM,A2e),e(A2e,J2r),e(yM,Y2r),e(yM,aH),e(aH,K2r),e(yM,Z2r),e(pe,evr),e(pe,LM),e(LM,y2e),e(y2e,ovr),e(LM,rvr),e(LM,nH),e(nH,tvr),e(LM,avr),e(pe,nvr),e(pe,xM),e(xM,L2e),e(L2e,svr),e(xM,lvr),e(xM,sH),e(sH,ivr),e(xM,dvr),e(pe,cvr),e(pe,$M),e($M,x2e),e(x2e,fvr),e($M,mvr),e($M,lH),e(lH,gvr),e($M,hvr),e(pe,pvr),e(pe,kM),e(kM,$2e),e($2e,uvr),e(kM,_vr),e(kM,iH),e(iH,bvr),e(kM,vvr),e(pe,Fvr),e(pe,SM),e(SM,k2e),e(k2e,Tvr),e(SM,Mvr),e(SM,dH),e(dH,Evr),e(SM,Cvr),e(pe,wvr),e(pe,RM),e(RM,S2e),e(S2e,Avr),e(RM,yvr),e(RM,cH),e(cH,Lvr),e(RM,xvr),e(pe,$vr),e(pe,BM),e(BM,R2e),e(R2e,kvr),e(BM,Svr),e(BM,fH),e(fH,Rvr),e(BM,Bvr),e(Sr,Pvr),M(PM,Sr,null),b(f,zIe,_),b(f,dc,_),e(dc,IM),e(IM,B2e),M(gL,B2e,null),e(dc,Ivr),e(dc,P2e),e(P2e,qvr),b(f,QIe,_),b(f,nr,_),M(hL,nr,null),e(nr,Nvr),e(nr,cc),e(cc,jvr),e(cc,mH),e(mH,Dvr),e(cc,Gvr),e(cc,gH),e(gH,Ovr),e(cc,Vvr),e(nr,Xvr),e(nr,pL),e(pL,zvr),e(pL,I2e),e(I2e,Qvr),e(pL,Wvr),e(nr,Hvr),e(nr,Rt),M(uL,Rt,null),e(Rt,Uvr),e(Rt,q2e),e(q2e,Jvr),e(Rt,Yvr),e(Rt,fc),e(fc,Kvr),e(fc,N2e),e(N2e,Zvr),e(fc,eFr),e(fc,hH),e(hH,oFr),e(fc,rFr),e(Rt,tFr),M(qM,Rt,null),e(nr,aFr),e(nr,Rr),M(_L,Rr,null),e(Rr,nFr),e(Rr,j2e),e(j2e,sFr),e(Rr,lFr),e(Rr,sn),e(sn,iFr),e(sn,D2e),e(D2e,dFr),e(sn,cFr),e(sn,G2e),e(G2e,fFr),e(sn,mFr),e(sn,O2e),e(O2e,gFr),e(sn,hFr),e(Rr,pFr),e(Rr,bL),e(bL,NM),e(NM,V2e),e(V2e,uFr),e(NM,_Fr),e(NM,pH),e(pH,bFr),e(NM,vFr),e(bL,FFr),e(bL,jM),e(jM,X2e),e(X2e,TFr),e(jM,MFr),e(jM,uH),e(uH,EFr),e(jM,CFr),e(Rr,wFr),M(DM,Rr,null),b(f,WIe,_),b(f,mc,_),e(mc,GM),e(GM,z2e),M(vL,z2e,null),e(mc,AFr),e(mc,Q2e),e(Q2e,yFr),b(f,HIe,_),b(f,sr,_),M(FL,sr,null),e(sr,LFr),e(sr,gc),e(gc,xFr),e(gc,_H),e(_H,$Fr),e(gc,kFr),e(gc,bH),e(bH,SFr),e(gc,RFr),e(sr,BFr),e(sr,TL),e(TL,PFr),e(TL,W2e),e(W2e,IFr),e(TL,qFr),e(sr,NFr),e(sr,Bt),M(ML,Bt,null),e(Bt,jFr),e(Bt,H2e),e(H2e,DFr),e(Bt,GFr),e(Bt,hc),e(hc,OFr),e(hc,U2e),e(U2e,VFr),e(hc,XFr),e(hc,vH),e(vH,zFr),e(hc,QFr),e(Bt,WFr),M(OM,Bt,null),e(sr,HFr),e(sr,Br),M(EL,Br,null),e(Br,UFr),e(Br,J2e),e(J2e,JFr),e(Br,YFr),e(Br,ln),e(ln,KFr),e(ln,Y2e),e(Y2e,ZFr),e(ln,e0r),e(ln,K2e),e(K2e,o0r),e(ln,r0r),e(ln,Z2e),e(Z2e,t0r),e(ln,a0r),e(Br,n0r),e(Br,eve),e(eve,VM),e(VM,ove),e(ove,s0r),e(VM,l0r),e(VM,FH),e(FH,i0r),e(VM,d0r),e(Br,c0r),M(XM,Br,null),b(f,UIe,_),b(f,pc,_),e(pc,zM),e(zM,rve),M(CL,rve,null),e(pc,f0r),e(pc,tve),e(tve,m0r),b(f,JIe,_),b(f,lr,_),M(wL,lr,null),e(lr,g0r),e(lr,uc),e(uc,h0r),e(uc,TH),e(TH,p0r),e(uc,u0r),e(uc,MH),e(MH,_0r),e(uc,b0r),e(lr,v0r),e(lr,AL),e(AL,F0r),e(AL,ave),e(ave,T0r),e(AL,M0r),e(lr,E0r),e(lr,Pt),M(yL,Pt,null),e(Pt,C0r),e(Pt,nve),e(nve,w0r),e(Pt,A0r),e(Pt,_c),e(_c,y0r),e(_c,sve),e(sve,L0r),e(_c,x0r),e(_c,EH),e(EH,$0r),e(_c,k0r),e(Pt,S0r),M(QM,Pt,null),e(lr,R0r),e(lr,Pr),M(LL,Pr,null),e(Pr,B0r),e(Pr,lve),e(lve,P0r),e(Pr,I0r),e(Pr,dn),e(dn,q0r),e(dn,ive),e(ive,N0r),e(dn,j0r),e(dn,dve),e(dve,D0r),e(dn,G0r),e(dn,cve),e(cve,O0r),e(dn,V0r),e(Pr,X0r),e(Pr,de),e(de,WM),e(WM,fve),e(fve,z0r),e(WM,Q0r),e(WM,CH),e(CH,W0r),e(WM,H0r),e(de,U0r),e(de,HM),e(HM,mve),e(mve,J0r),e(HM,Y0r),e(HM,wH),e(wH,K0r),e(HM,Z0r),e(de,eTr),e(de,UM),e(UM,gve),e(gve,oTr),e(UM,rTr),e(UM,AH),e(AH,tTr),e(UM,aTr),e(de,nTr),e(de,JM),e(JM,hve),e(hve,sTr),e(JM,lTr),e(JM,yH),e(yH,iTr),e(JM,dTr),e(de,cTr),e(de,YM),e(YM,pve),e(pve,fTr),e(YM,mTr),e(YM,LH),e(LH,gTr),e(YM,hTr),e(de,pTr),e(de,KM),e(KM,uve),e(uve,uTr),e(KM,_Tr),e(KM,xH),e(xH,bTr),e(KM,vTr),e(de,FTr),e(de,ZM),e(ZM,_ve),e(_ve,TTr),e(ZM,MTr),e(ZM,$H),e($H,ETr),e(ZM,CTr),e(de,wTr),e(de,e4),e(e4,bve),e(bve,ATr),e(e4,yTr),e(e4,kH),e(kH,LTr),e(e4,xTr),e(de,$Tr),e(de,o4),e(o4,vve),e(vve,kTr),e(o4,STr),e(o4,SH),e(SH,RTr),e(o4,BTr),e(de,PTr),e(de,r4),e(r4,Fve),e(Fve,ITr),e(r4,qTr),e(r4,RH),e(RH,NTr),e(r4,jTr),e(de,DTr),e(de,t4),e(t4,Tve),e(Tve,GTr),e(t4,OTr),e(t4,BH),e(BH,VTr),e(t4,XTr),e(de,zTr),e(de,a4),e(a4,Mve),e(Mve,QTr),e(a4,WTr),e(a4,PH),e(PH,HTr),e(a4,UTr),e(de,JTr),e(de,n4),e(n4,Eve),e(Eve,YTr),e(n4,KTr),e(n4,IH),e(IH,ZTr),e(n4,e7r),e(de,o7r),e(de,s4),e(s4,Cve),e(Cve,r7r),e(s4,t7r),e(s4,qH),e(qH,a7r),e(s4,n7r),e(de,s7r),e(de,l4),e(l4,wve),e(wve,l7r),e(l4,i7r),e(l4,NH),e(NH,d7r),e(l4,c7r),e(de,f7r),e(de,i4),e(i4,Ave),e(Ave,m7r),e(i4,g7r),e(i4,jH),e(jH,h7r),e(i4,p7r),e(de,u7r),e(de,d4),e(d4,yve),e(yve,_7r),e(d4,b7r),e(d4,DH),e(DH,v7r),e(d4,F7r),e(de,T7r),e(de,c4),e(c4,Lve),e(Lve,M7r),e(c4,E7r),e(c4,GH),e(GH,C7r),e(c4,w7r),e(de,A7r),e(de,f4),e(f4,xve),e(xve,y7r),e(f4,L7r),e(f4,OH),e(OH,x7r),e(f4,$7r),e(de,k7r),e(de,m4),e(m4,$ve),e($ve,S7r),e(m4,R7r),e(m4,VH),e(VH,B7r),e(m4,P7r),e(Pr,I7r),M(g4,Pr,null),b(f,YIe,_),b(f,bc,_),e(bc,h4),e(h4,kve),M(xL,kve,null),e(bc,q7r),e(bc,Sve),e(Sve,N7r),b(f,KIe,_),b(f,ir,_),M($L,ir,null),e(ir,j7r),e(ir,vc),e(vc,D7r),e(vc,XH),e(XH,G7r),e(vc,O7r),e(vc,zH),e(zH,V7r),e(vc,X7r),e(ir,z7r),e(ir,kL),e(kL,Q7r),e(kL,Rve),e(Rve,W7r),e(kL,H7r),e(ir,U7r),e(ir,It),M(SL,It,null),e(It,J7r),e(It,Bve),e(Bve,Y7r),e(It,K7r),e(It,Fc),e(Fc,Z7r),e(Fc,Pve),e(Pve,eMr),e(Fc,oMr),e(Fc,QH),e(QH,rMr),e(Fc,tMr),e(It,aMr),M(p4,It,null),e(ir,nMr),e(ir,Ir),M(RL,Ir,null),e(Ir,sMr),e(Ir,Ive),e(Ive,lMr),e(Ir,iMr),e(Ir,cn),e(cn,dMr),e(cn,qve),e(qve,cMr),e(cn,fMr),e(cn,Nve),e(Nve,mMr),e(cn,gMr),e(cn,jve),e(jve,hMr),e(cn,pMr),e(Ir,uMr),e(Ir,ce),e(ce,u4),e(u4,Dve),e(Dve,_Mr),e(u4,bMr),e(u4,WH),e(WH,vMr),e(u4,FMr),e(ce,TMr),e(ce,_4),e(_4,Gve),e(Gve,MMr),e(_4,EMr),e(_4,HH),e(HH,CMr),e(_4,wMr),e(ce,AMr),e(ce,b4),e(b4,Ove),e(Ove,yMr),e(b4,LMr),e(b4,UH),e(UH,xMr),e(b4,$Mr),e(ce,kMr),e(ce,v4),e(v4,Vve),e(Vve,SMr),e(v4,RMr),e(v4,JH),e(JH,BMr),e(v4,PMr),e(ce,IMr),e(ce,F4),e(F4,Xve),e(Xve,qMr),e(F4,NMr),e(F4,YH),e(YH,jMr),e(F4,DMr),e(ce,GMr),e(ce,T4),e(T4,zve),e(zve,OMr),e(T4,VMr),e(T4,KH),e(KH,XMr),e(T4,zMr),e(ce,QMr),e(ce,M4),e(M4,Qve),e(Qve,WMr),e(M4,HMr),e(M4,ZH),e(ZH,UMr),e(M4,JMr),e(ce,YMr),e(ce,E4),e(E4,Wve),e(Wve,KMr),e(E4,ZMr),e(E4,eU),e(eU,e4r),e(E4,o4r),e(ce,r4r),e(ce,C4),e(C4,Hve),e(Hve,t4r),e(C4,a4r),e(C4,oU),e(oU,n4r),e(C4,s4r),e(ce,l4r),e(ce,w4),e(w4,Uve),e(Uve,i4r),e(w4,d4r),e(w4,rU),e(rU,c4r),e(w4,f4r),e(ce,m4r),e(ce,A4),e(A4,Jve),e(Jve,g4r),e(A4,h4r),e(A4,tU),e(tU,p4r),e(A4,u4r),e(ce,_4r),e(ce,y4),e(y4,Yve),e(Yve,b4r),e(y4,v4r),e(y4,aU),e(aU,F4r),e(y4,T4r),e(ce,M4r),e(ce,L4),e(L4,Kve),e(Kve,E4r),e(L4,C4r),e(L4,nU),e(nU,w4r),e(L4,A4r),e(ce,y4r),e(ce,x4),e(x4,Zve),e(Zve,L4r),e(x4,x4r),e(x4,sU),e(sU,$4r),e(x4,k4r),e(ce,S4r),e(ce,$4),e($4,eFe),e(eFe,R4r),e($4,B4r),e($4,lU),e(lU,P4r),e($4,I4r),e(ce,q4r),e(ce,k4),e(k4,oFe),e(oFe,N4r),e(k4,j4r),e(k4,iU),e(iU,D4r),e(k4,G4r),e(ce,O4r),e(ce,S4),e(S4,rFe),e(rFe,V4r),e(S4,X4r),e(S4,dU),e(dU,z4r),e(S4,Q4r),e(ce,W4r),e(ce,R4),e(R4,tFe),e(tFe,H4r),e(R4,U4r),e(R4,cU),e(cU,J4r),e(R4,Y4r),e(ce,K4r),e(ce,B4),e(B4,aFe),e(aFe,Z4r),e(B4,eEr),e(B4,fU),e(fU,oEr),e(B4,rEr),e(ce,tEr),e(ce,P4),e(P4,nFe),e(nFe,aEr),e(P4,nEr),e(P4,mU),e(mU,sEr),e(P4,lEr),e(Ir,iEr),M(I4,Ir,null),b(f,ZIe,_),b(f,Tc,_),e(Tc,q4),e(q4,sFe),M(BL,sFe,null),e(Tc,dEr),e(Tc,lFe),e(lFe,cEr),b(f,eqe,_),b(f,dr,_),M(PL,dr,null),e(dr,fEr),e(dr,Mc),e(Mc,mEr),e(Mc,gU),e(gU,gEr),e(Mc,hEr),e(Mc,hU),e(hU,pEr),e(Mc,uEr),e(dr,_Er),e(dr,IL),e(IL,bEr),e(IL,iFe),e(iFe,vEr),e(IL,FEr),e(dr,TEr),e(dr,qt),M(qL,qt,null),e(qt,MEr),e(qt,dFe),e(dFe,EEr),e(qt,CEr),e(qt,Ec),e(Ec,wEr),e(Ec,cFe),e(cFe,AEr),e(Ec,yEr),e(Ec,pU),e(pU,LEr),e(Ec,xEr),e(qt,$Er),M(N4,qt,null),e(dr,kEr),e(dr,qr),M(NL,qr,null),e(qr,SEr),e(qr,fFe),e(fFe,REr),e(qr,BEr),e(qr,fn),e(fn,PEr),e(fn,mFe),e(mFe,IEr),e(fn,qEr),e(fn,gFe),e(gFe,NEr),e(fn,jEr),e(fn,hFe),e(hFe,DEr),e(fn,GEr),e(qr,OEr),e(qr,pFe),e(pFe,j4),e(j4,uFe),e(uFe,VEr),e(j4,XEr),e(j4,uU),e(uU,zEr),e(j4,QEr),e(qr,WEr),M(D4,qr,null),b(f,oqe,_),b(f,Cc,_),e(Cc,G4),e(G4,_Fe),M(jL,_Fe,null),e(Cc,HEr),e(Cc,bFe),e(bFe,UEr),b(f,rqe,_),b(f,cr,_),M(DL,cr,null),e(cr,JEr),e(cr,wc),e(wc,YEr),e(wc,_U),e(_U,KEr),e(wc,ZEr),e(wc,bU),e(bU,e5r),e(wc,o5r),e(cr,r5r),e(cr,GL),e(GL,t5r),e(GL,vFe),e(vFe,a5r),e(GL,n5r),e(cr,s5r),e(cr,Nt),M(OL,Nt,null),e(Nt,l5r),e(Nt,FFe),e(FFe,i5r),e(Nt,d5r),e(Nt,Ac),e(Ac,c5r),e(Ac,TFe),e(TFe,f5r),e(Ac,m5r),e(Ac,vU),e(vU,g5r),e(Ac,h5r),e(Nt,p5r),M(O4,Nt,null),e(cr,u5r),e(cr,Nr),M(VL,Nr,null),e(Nr,_5r),e(Nr,MFe),e(MFe,b5r),e(Nr,v5r),e(Nr,mn),e(mn,F5r),e(mn,EFe),e(EFe,T5r),e(mn,M5r),e(mn,CFe),e(CFe,E5r),e(mn,C5r),e(mn,wFe),e(wFe,w5r),e(mn,A5r),e(Nr,y5r),e(Nr,AFe),e(AFe,V4),e(V4,yFe),e(yFe,L5r),e(V4,x5r),e(V4,FU),e(FU,$5r),e(V4,k5r),e(Nr,S5r),M(X4,Nr,null),b(f,tqe,_),b(f,yc,_),e(yc,z4),e(z4,LFe),M(XL,LFe,null),e(yc,R5r),e(yc,xFe),e(xFe,B5r),b(f,aqe,_),b(f,fr,_),M(zL,fr,null),e(fr,P5r),e(fr,Lc),e(Lc,I5r),e(Lc,TU),e(TU,q5r),e(Lc,N5r),e(Lc,MU),e(MU,j5r),e(Lc,D5r),e(fr,G5r),e(fr,QL),e(QL,O5r),e(QL,$Fe),e($Fe,V5r),e(QL,X5r),e(fr,z5r),e(fr,jt),M(WL,jt,null),e(jt,Q5r),e(jt,kFe),e(kFe,W5r),e(jt,H5r),e(jt,xc),e(xc,U5r),e(xc,SFe),e(SFe,J5r),e(xc,Y5r),e(xc,EU),e(EU,K5r),e(xc,Z5r),e(jt,eCr),M(Q4,jt,null),e(fr,oCr),e(fr,jr),M(HL,jr,null),e(jr,rCr),e(jr,RFe),e(RFe,tCr),e(jr,aCr),e(jr,gn),e(gn,nCr),e(gn,BFe),e(BFe,sCr),e(gn,lCr),e(gn,PFe),e(PFe,iCr),e(gn,dCr),e(gn,IFe),e(IFe,cCr),e(gn,fCr),e(jr,mCr),e(jr,oe),e(oe,W4),e(W4,qFe),e(qFe,gCr),e(W4,hCr),e(W4,CU),e(CU,pCr),e(W4,uCr),e(oe,_Cr),e(oe,H4),e(H4,NFe),e(NFe,bCr),e(H4,vCr),e(H4,wU),e(wU,FCr),e(H4,TCr),e(oe,MCr),e(oe,U4),e(U4,jFe),e(jFe,ECr),e(U4,CCr),e(U4,AU),e(AU,wCr),e(U4,ACr),e(oe,yCr),e(oe,J4),e(J4,DFe),e(DFe,LCr),e(J4,xCr),e(J4,yU),e(yU,$Cr),e(J4,kCr),e(oe,SCr),e(oe,Y4),e(Y4,GFe),e(GFe,RCr),e(Y4,BCr),e(Y4,LU),e(LU,PCr),e(Y4,ICr),e(oe,qCr),e(oe,K4),e(K4,OFe),e(OFe,NCr),e(K4,jCr),e(K4,xU),e(xU,DCr),e(K4,GCr),e(oe,OCr),e(oe,Z4),e(Z4,VFe),e(VFe,VCr),e(Z4,XCr),e(Z4,$U),e($U,zCr),e(Z4,QCr),e(oe,WCr),e(oe,eE),e(eE,XFe),e(XFe,HCr),e(eE,UCr),e(eE,kU),e(kU,JCr),e(eE,YCr),e(oe,KCr),e(oe,oE),e(oE,zFe),e(zFe,ZCr),e(oE,e3r),e(oE,SU),e(SU,o3r),e(oE,r3r),e(oe,t3r),e(oe,rE),e(rE,QFe),e(QFe,a3r),e(rE,n3r),e(rE,RU),e(RU,s3r),e(rE,l3r),e(oe,i3r),e(oe,tE),e(tE,WFe),e(WFe,d3r),e(tE,c3r),e(tE,BU),e(BU,f3r),e(tE,m3r),e(oe,g3r),e(oe,aE),e(aE,HFe),e(HFe,h3r),e(aE,p3r),e(aE,PU),e(PU,u3r),e(aE,_3r),e(oe,b3r),e(oe,nE),e(nE,UFe),e(UFe,v3r),e(nE,F3r),e(nE,IU),e(IU,T3r),e(nE,M3r),e(oe,E3r),e(oe,sE),e(sE,JFe),e(JFe,C3r),e(sE,w3r),e(sE,qU),e(qU,A3r),e(sE,y3r),e(oe,L3r),e(oe,lE),e(lE,YFe),e(YFe,x3r),e(lE,$3r),e(lE,NU),e(NU,k3r),e(lE,S3r),e(oe,R3r),e(oe,iE),e(iE,KFe),e(KFe,B3r),e(iE,P3r),e(iE,jU),e(jU,I3r),e(iE,q3r),e(oe,N3r),e(oe,dE),e(dE,ZFe),e(ZFe,j3r),e(dE,D3r),e(dE,DU),e(DU,G3r),e(dE,O3r),e(oe,V3r),e(oe,cE),e(cE,e0e),e(e0e,X3r),e(cE,z3r),e(cE,GU),e(GU,Q3r),e(cE,W3r),e(oe,H3r),e(oe,fE),e(fE,o0e),e(o0e,U3r),e(fE,J3r),e(fE,OU),e(OU,Y3r),e(fE,K3r),e(oe,Z3r),e(oe,mE),e(mE,r0e),e(r0e,ewr),e(mE,owr),e(mE,VU),e(VU,rwr),e(mE,twr),e(oe,awr),e(oe,gE),e(gE,t0e),e(t0e,nwr),e(gE,swr),e(gE,XU),e(XU,lwr),e(gE,iwr),e(oe,dwr),e(oe,hE),e(hE,a0e),e(a0e,cwr),e(hE,fwr),e(hE,zU),e(zU,mwr),e(hE,gwr),e(oe,hwr),e(oe,pE),e(pE,n0e),e(n0e,pwr),e(pE,uwr),e(pE,QU),e(QU,_wr),e(pE,bwr),e(oe,vwr),e(oe,uE),e(uE,s0e),e(s0e,Fwr),e(uE,Twr),e(uE,WU),e(WU,Mwr),e(uE,Ewr),e(oe,Cwr),e(oe,_E),e(_E,l0e),e(l0e,wwr),e(_E,Awr),e(_E,HU),e(HU,ywr),e(_E,Lwr),e(jr,xwr),M(bE,jr,null),b(f,nqe,_),b(f,$c,_),e($c,vE),e(vE,i0e),M(UL,i0e,null),e($c,$wr),e($c,d0e),e(d0e,kwr),b(f,sqe,_),b(f,mr,_),M(JL,mr,null),e(mr,Swr),e(mr,kc),e(kc,Rwr),e(kc,UU),e(UU,Bwr),e(kc,Pwr),e(kc,JU),e(JU,Iwr),e(kc,qwr),e(mr,Nwr),e(mr,YL),e(YL,jwr),e(YL,c0e),e(c0e,Dwr),e(YL,Gwr),e(mr,Owr),e(mr,Dt),M(KL,Dt,null),e(Dt,Vwr),e(Dt,f0e),e(f0e,Xwr),e(Dt,zwr),e(Dt,Sc),e(Sc,Qwr),e(Sc,m0e),e(m0e,Wwr),e(Sc,Hwr),e(Sc,YU),e(YU,Uwr),e(Sc,Jwr),e(Dt,Ywr),M(FE,Dt,null),e(mr,Kwr),e(mr,Dr),M(ZL,Dr,null),e(Dr,Zwr),e(Dr,g0e),e(g0e,eAr),e(Dr,oAr),e(Dr,hn),e(hn,rAr),e(hn,h0e),e(h0e,tAr),e(hn,aAr),e(hn,p0e),e(p0e,nAr),e(hn,sAr),e(hn,u0e),e(u0e,lAr),e(hn,iAr),e(Dr,dAr),e(Dr,ke),e(ke,TE),e(TE,_0e),e(_0e,cAr),e(TE,fAr),e(TE,KU),e(KU,mAr),e(TE,gAr),e(ke,hAr),e(ke,ME),e(ME,b0e),e(b0e,pAr),e(ME,uAr),e(ME,ZU),e(ZU,_Ar),e(ME,bAr),e(ke,vAr),e(ke,EE),e(EE,v0e),e(v0e,FAr),e(EE,TAr),e(EE,eJ),e(eJ,MAr),e(EE,EAr),e(ke,CAr),e(ke,CE),e(CE,F0e),e(F0e,wAr),e(CE,AAr),e(CE,oJ),e(oJ,yAr),e(CE,LAr),e(ke,xAr),e(ke,wE),e(wE,T0e),e(T0e,$Ar),e(wE,kAr),e(wE,rJ),e(rJ,SAr),e(wE,RAr),e(ke,BAr),e(ke,AE),e(AE,M0e),e(M0e,PAr),e(AE,IAr),e(AE,tJ),e(tJ,qAr),e(AE,NAr),e(ke,jAr),e(ke,yE),e(yE,E0e),e(E0e,DAr),e(yE,GAr),e(yE,aJ),e(aJ,OAr),e(yE,VAr),e(ke,XAr),e(ke,LE),e(LE,C0e),e(C0e,zAr),e(LE,QAr),e(LE,nJ),e(nJ,WAr),e(LE,HAr),e(ke,UAr),e(ke,xE),e(xE,w0e),e(w0e,JAr),e(xE,YAr),e(xE,sJ),e(sJ,KAr),e(xE,ZAr),e(Dr,e6r),M($E,Dr,null),b(f,lqe,_),b(f,Rc,_),e(Rc,kE),e(kE,A0e),M(ex,A0e,null),e(Rc,o6r),e(Rc,y0e),e(y0e,r6r),b(f,iqe,_),b(f,gr,_),M(ox,gr,null),e(gr,t6r),e(gr,Bc),e(Bc,a6r),e(Bc,lJ),e(lJ,n6r),e(Bc,s6r),e(Bc,iJ),e(iJ,l6r),e(Bc,i6r),e(gr,d6r),e(gr,rx),e(rx,c6r),e(rx,L0e),e(L0e,f6r),e(rx,m6r),e(gr,g6r),e(gr,Gt),M(tx,Gt,null),e(Gt,h6r),e(Gt,x0e),e(x0e,p6r),e(Gt,u6r),e(Gt,Pc),e(Pc,_6r),e(Pc,$0e),e($0e,b6r),e(Pc,v6r),e(Pc,dJ),e(dJ,F6r),e(Pc,T6r),e(Gt,M6r),M(SE,Gt,null),e(gr,E6r),e(gr,Gr),M(ax,Gr,null),e(Gr,C6r),e(Gr,k0e),e(k0e,w6r),e(Gr,A6r),e(Gr,pn),e(pn,y6r),e(pn,S0e),e(S0e,L6r),e(pn,x6r),e(pn,R0e),e(R0e,$6r),e(pn,k6r),e(pn,B0e),e(B0e,S6r),e(pn,R6r),e(Gr,B6r),e(Gr,Me),e(Me,RE),e(RE,P0e),e(P0e,P6r),e(RE,I6r),e(RE,cJ),e(cJ,q6r),e(RE,N6r),e(Me,j6r),e(Me,BE),e(BE,I0e),e(I0e,D6r),e(BE,G6r),e(BE,fJ),e(fJ,O6r),e(BE,V6r),e(Me,X6r),e(Me,PE),e(PE,q0e),e(q0e,z6r),e(PE,Q6r),e(PE,mJ),e(mJ,W6r),e(PE,H6r),e(Me,U6r),e(Me,IE),e(IE,N0e),e(N0e,J6r),e(IE,Y6r),e(IE,gJ),e(gJ,K6r),e(IE,Z6r),e(Me,eyr),e(Me,qE),e(qE,j0e),e(j0e,oyr),e(qE,ryr),e(qE,hJ),e(hJ,tyr),e(qE,ayr),e(Me,nyr),e(Me,NE),e(NE,D0e),e(D0e,syr),e(NE,lyr),e(NE,pJ),e(pJ,iyr),e(NE,dyr),e(Me,cyr),e(Me,jE),e(jE,G0e),e(G0e,fyr),e(jE,myr),e(jE,uJ),e(uJ,gyr),e(jE,hyr),e(Me,pyr),e(Me,DE),e(DE,O0e),e(O0e,uyr),e(DE,_yr),e(DE,_J),e(_J,byr),e(DE,vyr),e(Me,Fyr),e(Me,GE),e(GE,V0e),e(V0e,Tyr),e(GE,Myr),e(GE,bJ),e(bJ,Eyr),e(GE,Cyr),e(Me,wyr),e(Me,OE),e(OE,X0e),e(X0e,Ayr),e(OE,yyr),e(OE,vJ),e(vJ,Lyr),e(OE,xyr),e(Me,$yr),e(Me,VE),e(VE,z0e),e(z0e,kyr),e(VE,Syr),e(VE,FJ),e(FJ,Ryr),e(VE,Byr),e(Me,Pyr),e(Me,XE),e(XE,Q0e),e(Q0e,Iyr),e(XE,qyr),e(XE,TJ),e(TJ,Nyr),e(XE,jyr),e(Gr,Dyr),M(zE,Gr,null),b(f,dqe,_),b(f,Ic,_),e(Ic,QE),e(QE,W0e),M(nx,W0e,null),e(Ic,Gyr),e(Ic,H0e),e(H0e,Oyr),b(f,cqe,_),b(f,hr,_),M(sx,hr,null),e(hr,Vyr),e(hr,qc),e(qc,Xyr),e(qc,MJ),e(MJ,zyr),e(qc,Qyr),e(qc,EJ),e(EJ,Wyr),e(qc,Hyr),e(hr,Uyr),e(hr,lx),e(lx,Jyr),e(lx,U0e),e(U0e,Yyr),e(lx,Kyr),e(hr,Zyr),e(hr,Ot),M(ix,Ot,null),e(Ot,eLr),e(Ot,J0e),e(J0e,oLr),e(Ot,rLr),e(Ot,Nc),e(Nc,tLr),e(Nc,Y0e),e(Y0e,aLr),e(Nc,nLr),e(Nc,CJ),e(CJ,sLr),e(Nc,lLr),e(Ot,iLr),M(WE,Ot,null),e(hr,dLr),e(hr,Or),M(dx,Or,null),e(Or,cLr),e(Or,K0e),e(K0e,fLr),e(Or,mLr),e(Or,un),e(un,gLr),e(un,Z0e),e(Z0e,hLr),e(un,pLr),e(un,eTe),e(eTe,uLr),e(un,_Lr),e(un,oTe),e(oTe,bLr),e(un,vLr),e(Or,FLr),e(Or,Le),e(Le,HE),e(HE,rTe),e(rTe,TLr),e(HE,MLr),e(HE,wJ),e(wJ,ELr),e(HE,CLr),e(Le,wLr),e(Le,UE),e(UE,tTe),e(tTe,ALr),e(UE,yLr),e(UE,AJ),e(AJ,LLr),e(UE,xLr),e(Le,$Lr),e(Le,JE),e(JE,aTe),e(aTe,kLr),e(JE,SLr),e(JE,yJ),e(yJ,RLr),e(JE,BLr),e(Le,PLr),e(Le,YE),e(YE,nTe),e(nTe,ILr),e(YE,qLr),e(YE,LJ),e(LJ,NLr),e(YE,jLr),e(Le,DLr),e(Le,KE),e(KE,sTe),e(sTe,GLr),e(KE,OLr),e(KE,xJ),e(xJ,VLr),e(KE,XLr),e(Le,zLr),e(Le,ZE),e(ZE,lTe),e(lTe,QLr),e(ZE,WLr),e(ZE,$J),e($J,HLr),e(ZE,ULr),e(Le,JLr),e(Le,e5),e(e5,iTe),e(iTe,YLr),e(e5,KLr),e(e5,kJ),e(kJ,ZLr),e(e5,exr),e(Le,oxr),e(Le,o5),e(o5,dTe),e(dTe,rxr),e(o5,txr),e(o5,SJ),e(SJ,axr),e(o5,nxr),e(Le,sxr),e(Le,r5),e(r5,cTe),e(cTe,lxr),e(r5,ixr),e(r5,RJ),e(RJ,dxr),e(r5,cxr),e(Le,fxr),e(Le,t5),e(t5,fTe),e(fTe,mxr),e(t5,gxr),e(t5,BJ),e(BJ,hxr),e(t5,pxr),e(Or,uxr),M(a5,Or,null),b(f,fqe,_),b(f,jc,_),e(jc,n5),e(n5,mTe),M(cx,mTe,null),e(jc,_xr),e(jc,gTe),e(gTe,bxr),b(f,mqe,_),b(f,pr,_),M(fx,pr,null),e(pr,vxr),e(pr,Dc),e(Dc,Fxr),e(Dc,PJ),e(PJ,Txr),e(Dc,Mxr),e(Dc,IJ),e(IJ,Exr),e(Dc,Cxr),e(pr,wxr),e(pr,mx),e(mx,Axr),e(mx,hTe),e(hTe,yxr),e(mx,Lxr),e(pr,xxr),e(pr,Vt),M(gx,Vt,null),e(Vt,$xr),e(Vt,pTe),e(pTe,kxr),e(Vt,Sxr),e(Vt,Gc),e(Gc,Rxr),e(Gc,uTe),e(uTe,Bxr),e(Gc,Pxr),e(Gc,qJ),e(qJ,Ixr),e(Gc,qxr),e(Vt,Nxr),M(s5,Vt,null),e(pr,jxr),e(pr,Vr),M(hx,Vr,null),e(Vr,Dxr),e(Vr,_Te),e(_Te,Gxr),e(Vr,Oxr),e(Vr,_n),e(_n,Vxr),e(_n,bTe),e(bTe,Xxr),e(_n,zxr),e(_n,vTe),e(vTe,Qxr),e(_n,Wxr),e(_n,FTe),e(FTe,Hxr),e(_n,Uxr),e(Vr,Jxr),e(Vr,Se),e(Se,l5),e(l5,TTe),e(TTe,Yxr),e(l5,Kxr),e(l5,NJ),e(NJ,Zxr),e(l5,e9r),e(Se,o9r),e(Se,i5),e(i5,MTe),e(MTe,r9r),e(i5,t9r),e(i5,jJ),e(jJ,a9r),e(i5,n9r),e(Se,s9r),e(Se,d5),e(d5,ETe),e(ETe,l9r),e(d5,i9r),e(d5,DJ),e(DJ,d9r),e(d5,c9r),e(Se,f9r),e(Se,c5),e(c5,CTe),e(CTe,m9r),e(c5,g9r),e(c5,GJ),e(GJ,h9r),e(c5,p9r),e(Se,u9r),e(Se,f5),e(f5,wTe),e(wTe,_9r),e(f5,b9r),e(f5,OJ),e(OJ,v9r),e(f5,F9r),e(Se,T9r),e(Se,m5),e(m5,ATe),e(ATe,M9r),e(m5,E9r),e(m5,VJ),e(VJ,C9r),e(m5,w9r),e(Se,A9r),e(Se,g5),e(g5,yTe),e(yTe,y9r),e(g5,L9r),e(g5,XJ),e(XJ,x9r),e(g5,$9r),e(Se,k9r),e(Se,h5),e(h5,LTe),e(LTe,S9r),e(h5,R9r),e(h5,zJ),e(zJ,B9r),e(h5,P9r),e(Se,I9r),e(Se,p5),e(p5,xTe),e(xTe,q9r),e(p5,N9r),e(p5,QJ),e(QJ,j9r),e(p5,D9r),e(Vr,G9r),M(u5,Vr,null),b(f,gqe,_),b(f,Oc,_),e(Oc,_5),e(_5,$Te),M(px,$Te,null),e(Oc,O9r),e(Oc,kTe),e(kTe,V9r),b(f,hqe,_),b(f,ur,_),M(ux,ur,null),e(ur,X9r),e(ur,Vc),e(Vc,z9r),e(Vc,WJ),e(WJ,Q9r),e(Vc,W9r),e(Vc,HJ),e(HJ,H9r),e(Vc,U9r),e(ur,J9r),e(ur,_x),e(_x,Y9r),e(_x,STe),e(STe,K9r),e(_x,Z9r),e(ur,e$r),e(ur,Xt),M(bx,Xt,null),e(Xt,o$r),e(Xt,RTe),e(RTe,r$r),e(Xt,t$r),e(Xt,Xc),e(Xc,a$r),e(Xc,BTe),e(BTe,n$r),e(Xc,s$r),e(Xc,UJ),e(UJ,l$r),e(Xc,i$r),e(Xt,d$r),M(b5,Xt,null),e(ur,c$r),e(ur,Xr),M(vx,Xr,null),e(Xr,f$r),e(Xr,PTe),e(PTe,m$r),e(Xr,g$r),e(Xr,bn),e(bn,h$r),e(bn,ITe),e(ITe,p$r),e(bn,u$r),e(bn,qTe),e(qTe,_$r),e(bn,b$r),e(bn,NTe),e(NTe,v$r),e(bn,F$r),e(Xr,T$r),e(Xr,xe),e(xe,v5),e(v5,jTe),e(jTe,M$r),e(v5,E$r),e(v5,JJ),e(JJ,C$r),e(v5,w$r),e(xe,A$r),e(xe,F5),e(F5,DTe),e(DTe,y$r),e(F5,L$r),e(F5,YJ),e(YJ,x$r),e(F5,$$r),e(xe,k$r),e(xe,T5),e(T5,GTe),e(GTe,S$r),e(T5,R$r),e(T5,KJ),e(KJ,B$r),e(T5,P$r),e(xe,I$r),e(xe,M5),e(M5,OTe),e(OTe,q$r),e(M5,N$r),e(M5,ZJ),e(ZJ,j$r),e(M5,D$r),e(xe,G$r),e(xe,E5),e(E5,VTe),e(VTe,O$r),e(E5,V$r),e(E5,eY),e(eY,X$r),e(E5,z$r),e(xe,Q$r),e(xe,C5),e(C5,XTe),e(XTe,W$r),e(C5,H$r),e(C5,oY),e(oY,U$r),e(C5,J$r),e(xe,Y$r),e(xe,w5),e(w5,zTe),e(zTe,K$r),e(w5,Z$r),e(w5,rY),e(rY,ekr),e(w5,okr),e(xe,rkr),e(xe,A5),e(A5,QTe),e(QTe,tkr),e(A5,akr),e(A5,tY),e(tY,nkr),e(A5,skr),e(xe,lkr),e(xe,y5),e(y5,WTe),e(WTe,ikr),e(y5,dkr),e(y5,aY),e(aY,ckr),e(y5,fkr),e(xe,mkr),e(xe,L5),e(L5,HTe),e(HTe,gkr),e(L5,hkr),e(L5,nY),e(nY,pkr),e(L5,ukr),e(Xr,_kr),M(x5,Xr,null),b(f,pqe,_),b(f,zc,_),e(zc,$5),e($5,UTe),M(Fx,UTe,null),e(zc,bkr),e(zc,JTe),e(JTe,vkr),b(f,uqe,_),b(f,_r,_),M(Tx,_r,null),e(_r,Fkr),e(_r,Qc),e(Qc,Tkr),e(Qc,sY),e(sY,Mkr),e(Qc,Ekr),e(Qc,lY),e(lY,Ckr),e(Qc,wkr),e(_r,Akr),e(_r,Mx),e(Mx,ykr),e(Mx,YTe),e(YTe,Lkr),e(Mx,xkr),e(_r,$kr),e(_r,zt),M(Ex,zt,null),e(zt,kkr),e(zt,KTe),e(KTe,Skr),e(zt,Rkr),e(zt,Wc),e(Wc,Bkr),e(Wc,ZTe),e(ZTe,Pkr),e(Wc,Ikr),e(Wc,iY),e(iY,qkr),e(Wc,Nkr),e(zt,jkr),M(k5,zt,null),e(_r,Dkr),e(_r,zr),M(Cx,zr,null),e(zr,Gkr),e(zr,e7e),e(e7e,Okr),e(zr,Vkr),e(zr,vn),e(vn,Xkr),e(vn,o7e),e(o7e,zkr),e(vn,Qkr),e(vn,r7e),e(r7e,Wkr),e(vn,Hkr),e(vn,t7e),e(t7e,Ukr),e(vn,Jkr),e(zr,Ykr),e(zr,$e),e($e,S5),e(S5,a7e),e(a7e,Kkr),e(S5,Zkr),e(S5,dY),e(dY,eSr),e(S5,oSr),e($e,rSr),e($e,R5),e(R5,n7e),e(n7e,tSr),e(R5,aSr),e(R5,cY),e(cY,nSr),e(R5,sSr),e($e,lSr),e($e,B5),e(B5,s7e),e(s7e,iSr),e(B5,dSr),e(B5,fY),e(fY,cSr),e(B5,fSr),e($e,mSr),e($e,P5),e(P5,l7e),e(l7e,gSr),e(P5,hSr),e(P5,mY),e(mY,pSr),e(P5,uSr),e($e,_Sr),e($e,I5),e(I5,i7e),e(i7e,bSr),e(I5,vSr),e(I5,gY),e(gY,FSr),e(I5,TSr),e($e,MSr),e($e,q5),e(q5,d7e),e(d7e,ESr),e(q5,CSr),e(q5,hY),e(hY,wSr),e(q5,ASr),e($e,ySr),e($e,N5),e(N5,c7e),e(c7e,LSr),e(N5,xSr),e(N5,pY),e(pY,$Sr),e(N5,kSr),e($e,SSr),e($e,j5),e(j5,f7e),e(f7e,RSr),e(j5,BSr),e(j5,uY),e(uY,PSr),e(j5,ISr),e($e,qSr),e($e,D5),e(D5,m7e),e(m7e,NSr),e(D5,jSr),e(D5,_Y),e(_Y,DSr),e(D5,GSr),e($e,OSr),e($e,G5),e(G5,g7e),e(g7e,VSr),e(G5,XSr),e(G5,bY),e(bY,zSr),e(G5,QSr),e(zr,WSr),M(O5,zr,null),b(f,_qe,_),b(f,Hc,_),e(Hc,V5),e(V5,h7e),M(wx,h7e,null),e(Hc,HSr),e(Hc,p7e),e(p7e,USr),b(f,bqe,_),b(f,br,_),M(Ax,br,null),e(br,JSr),e(br,Uc),e(Uc,YSr),e(Uc,vY),e(vY,KSr),e(Uc,ZSr),e(Uc,FY),e(FY,eRr),e(Uc,oRr),e(br,rRr),e(br,yx),e(yx,tRr),e(yx,u7e),e(u7e,aRr),e(yx,nRr),e(br,sRr),e(br,Qt),M(Lx,Qt,null),e(Qt,lRr),e(Qt,_7e),e(_7e,iRr),e(Qt,dRr),e(Qt,Jc),e(Jc,cRr),e(Jc,b7e),e(b7e,fRr),e(Jc,mRr),e(Jc,TY),e(TY,gRr),e(Jc,hRr),e(Qt,pRr),M(X5,Qt,null),e(br,uRr),e(br,Qr),M(xx,Qr,null),e(Qr,_Rr),e(Qr,v7e),e(v7e,bRr),e(Qr,vRr),e(Qr,Fn),e(Fn,FRr),e(Fn,F7e),e(F7e,TRr),e(Fn,MRr),e(Fn,T7e),e(T7e,ERr),e(Fn,CRr),e(Fn,M7e),e(M7e,wRr),e(Fn,ARr),e(Qr,yRr),e(Qr,De),e(De,z5),e(z5,E7e),e(E7e,LRr),e(z5,xRr),e(z5,MY),e(MY,$Rr),e(z5,kRr),e(De,SRr),e(De,Q5),e(Q5,C7e),e(C7e,RRr),e(Q5,BRr),e(Q5,EY),e(EY,PRr),e(Q5,IRr),e(De,qRr),e(De,W5),e(W5,w7e),e(w7e,NRr),e(W5,jRr),e(W5,CY),e(CY,DRr),e(W5,GRr),e(De,ORr),e(De,H5),e(H5,A7e),e(A7e,VRr),e(H5,XRr),e(H5,wY),e(wY,zRr),e(H5,QRr),e(De,WRr),e(De,U5),e(U5,y7e),e(y7e,HRr),e(U5,URr),e(U5,AY),e(AY,JRr),e(U5,YRr),e(De,KRr),e(De,J5),e(J5,L7e),e(L7e,ZRr),e(J5,eBr),e(J5,yY),e(yY,oBr),e(J5,rBr),e(De,tBr),e(De,Y5),e(Y5,x7e),e(x7e,aBr),e(Y5,nBr),e(Y5,LY),e(LY,sBr),e(Y5,lBr),e(De,iBr),e(De,K5),e(K5,$7e),e($7e,dBr),e(K5,cBr),e(K5,xY),e(xY,fBr),e(K5,mBr),e(Qr,gBr),M(Z5,Qr,null),b(f,vqe,_),b(f,Yc,_),e(Yc,eC),e(eC,k7e),M($x,k7e,null),e(Yc,hBr),e(Yc,S7e),e(S7e,pBr),b(f,Fqe,_),b(f,vr,_),M(kx,vr,null),e(vr,uBr),e(vr,Kc),e(Kc,_Br),e(Kc,$Y),e($Y,bBr),e(Kc,vBr),e(Kc,kY),e(kY,FBr),e(Kc,TBr),e(vr,MBr),e(vr,Sx),e(Sx,EBr),e(Sx,R7e),e(R7e,CBr),e(Sx,wBr),e(vr,ABr),e(vr,Wt),M(Rx,Wt,null),e(Wt,yBr),e(Wt,B7e),e(B7e,LBr),e(Wt,xBr),e(Wt,Zc),e(Zc,$Br),e(Zc,P7e),e(P7e,kBr),e(Zc,SBr),e(Zc,SY),e(SY,RBr),e(Zc,BBr),e(Wt,PBr),M(oC,Wt,null),e(vr,IBr),e(vr,Wr),M(Bx,Wr,null),e(Wr,qBr),e(Wr,I7e),e(I7e,NBr),e(Wr,jBr),e(Wr,Tn),e(Tn,DBr),e(Tn,q7e),e(q7e,GBr),e(Tn,OBr),e(Tn,N7e),e(N7e,VBr),e(Tn,XBr),e(Tn,j7e),e(j7e,zBr),e(Tn,QBr),e(Wr,WBr),e(Wr,Ge),e(Ge,rC),e(rC,D7e),e(D7e,HBr),e(rC,UBr),e(rC,RY),e(RY,JBr),e(rC,YBr),e(Ge,KBr),e(Ge,tC),e(tC,G7e),e(G7e,ZBr),e(tC,ePr),e(tC,BY),e(BY,oPr),e(tC,rPr),e(Ge,tPr),e(Ge,aC),e(aC,O7e),e(O7e,aPr),e(aC,nPr),e(aC,PY),e(PY,sPr),e(aC,lPr),e(Ge,iPr),e(Ge,nC),e(nC,V7e),e(V7e,dPr),e(nC,cPr),e(nC,IY),e(IY,fPr),e(nC,mPr),e(Ge,gPr),e(Ge,sC),e(sC,X7e),e(X7e,hPr),e(sC,pPr),e(sC,qY),e(qY,uPr),e(sC,_Pr),e(Ge,bPr),e(Ge,lC),e(lC,z7e),e(z7e,vPr),e(lC,FPr),e(lC,NY),e(NY,TPr),e(lC,MPr),e(Ge,EPr),e(Ge,iC),e(iC,Q7e),e(Q7e,CPr),e(iC,wPr),e(iC,jY),e(jY,APr),e(iC,yPr),e(Ge,LPr),e(Ge,dC),e(dC,W7e),e(W7e,xPr),e(dC,$Pr),e(dC,DY),e(DY,kPr),e(dC,SPr),e(Wr,RPr),M(cC,Wr,null),b(f,Tqe,_),b(f,ef,_),e(ef,fC),e(fC,H7e),M(Px,H7e,null),e(ef,BPr),e(ef,U7e),e(U7e,PPr),b(f,Mqe,_),b(f,Fr,_),M(Ix,Fr,null),e(Fr,IPr),e(Fr,of),e(of,qPr),e(of,GY),e(GY,NPr),e(of,jPr),e(of,OY),e(OY,DPr),e(of,GPr),e(Fr,OPr),e(Fr,qx),e(qx,VPr),e(qx,J7e),e(J7e,XPr),e(qx,zPr),e(Fr,QPr),e(Fr,Ht),M(Nx,Ht,null),e(Ht,WPr),e(Ht,Y7e),e(Y7e,HPr),e(Ht,UPr),e(Ht,rf),e(rf,JPr),e(rf,K7e),e(K7e,YPr),e(rf,KPr),e(rf,VY),e(VY,ZPr),e(rf,eIr),e(Ht,oIr),M(mC,Ht,null),e(Fr,rIr),e(Fr,Hr),M(jx,Hr,null),e(Hr,tIr),e(Hr,Z7e),e(Z7e,aIr),e(Hr,nIr),e(Hr,Mn),e(Mn,sIr),e(Mn,eMe),e(eMe,lIr),e(Mn,iIr),e(Mn,oMe),e(oMe,dIr),e(Mn,cIr),e(Mn,rMe),e(rMe,fIr),e(Mn,mIr),e(Hr,gIr),e(Hr,tMe),e(tMe,gC),e(gC,aMe),e(aMe,hIr),e(gC,pIr),e(gC,XY),e(XY,uIr),e(gC,_Ir),e(Hr,bIr),M(hC,Hr,null),b(f,Eqe,_),b(f,tf,_),e(tf,pC),e(pC,nMe),M(Dx,nMe,null),e(tf,vIr),e(tf,sMe),e(sMe,FIr),b(f,Cqe,_),b(f,Tr,_),M(Gx,Tr,null),e(Tr,TIr),e(Tr,af),e(af,MIr),e(af,zY),e(zY,EIr),e(af,CIr),e(af,QY),e(QY,wIr),e(af,AIr),e(Tr,yIr),e(Tr,Ox),e(Ox,LIr),e(Ox,lMe),e(lMe,xIr),e(Ox,$Ir),e(Tr,kIr),e(Tr,Ut),M(Vx,Ut,null),e(Ut,SIr),e(Ut,iMe),e(iMe,RIr),e(Ut,BIr),e(Ut,nf),e(nf,PIr),e(nf,dMe),e(dMe,IIr),e(nf,qIr),e(nf,WY),e(WY,NIr),e(nf,jIr),e(Ut,DIr),M(uC,Ut,null),e(Tr,GIr),e(Tr,Ur),M(Xx,Ur,null),e(Ur,OIr),e(Ur,cMe),e(cMe,VIr),e(Ur,XIr),e(Ur,En),e(En,zIr),e(En,fMe),e(fMe,QIr),e(En,WIr),e(En,mMe),e(mMe,HIr),e(En,UIr),e(En,gMe),e(gMe,JIr),e(En,YIr),e(Ur,KIr),e(Ur,zx),e(zx,_C),e(_C,hMe),e(hMe,ZIr),e(_C,eqr),e(_C,HY),e(HY,oqr),e(_C,rqr),e(zx,tqr),e(zx,bC),e(bC,pMe),e(pMe,aqr),e(bC,nqr),e(bC,UY),e(UY,sqr),e(bC,lqr),e(Ur,iqr),M(vC,Ur,null),b(f,wqe,_),b(f,sf,_),e(sf,FC),e(FC,uMe),M(Qx,uMe,null),e(sf,dqr),e(sf,_Me),e(_Me,cqr),b(f,Aqe,_),b(f,Mr,_),M(Wx,Mr,null),e(Mr,fqr),e(Mr,lf),e(lf,mqr),e(lf,JY),e(JY,gqr),e(lf,hqr),e(lf,YY),e(YY,pqr),e(lf,uqr),e(Mr,_qr),e(Mr,Hx),e(Hx,bqr),e(Hx,bMe),e(bMe,vqr),e(Hx,Fqr),e(Mr,Tqr),e(Mr,Jt),M(Ux,Jt,null),e(Jt,Mqr),e(Jt,vMe),e(vMe,Eqr),e(Jt,Cqr),e(Jt,df),e(df,wqr),e(df,FMe),e(FMe,Aqr),e(df,yqr),e(df,KY),e(KY,Lqr),e(df,xqr),e(Jt,$qr),M(TC,Jt,null),e(Mr,kqr),e(Mr,Jr),M(Jx,Jr,null),e(Jr,Sqr),e(Jr,TMe),e(TMe,Rqr),e(Jr,Bqr),e(Jr,Cn),e(Cn,Pqr),e(Cn,MMe),e(MMe,Iqr),e(Cn,qqr),e(Cn,EMe),e(EMe,Nqr),e(Cn,jqr),e(Cn,CMe),e(CMe,Dqr),e(Cn,Gqr),e(Jr,Oqr),e(Jr,wMe),e(wMe,MC),e(MC,AMe),e(AMe,Vqr),e(MC,Xqr),e(MC,ZY),e(ZY,zqr),e(MC,Qqr),e(Jr,Wqr),M(EC,Jr,null),yqe=!0},p(f,[_]){const Yx={};_&2&&(Yx.$$scope={dirty:_,ctx:f}),bf.$set(Yx);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),ug.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),Hg.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),Th.$set(xMe);const Kx={};_&2&&(Kx.$$scope={dirty:_,ctx:f}),Mh.$set(Kx);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),jh.$set($Me);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Dh.$set(wn);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),Vh.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),Su.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),Bu.$set(RMe);const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:f}),T_.$set(Zx);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),E_.$set(BMe);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),l1.$set(e9);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),d1.$set(PMe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),Q1.$set(o9);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),H1.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),g8.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),p8.$set(NMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),cb.$set(cf);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),mb.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),Vb.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),zb.$set(GMe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),Kb.$set(r9);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),e2.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),P2.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),q2.$set(XMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Cv.$set(Kr);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),Av.$set(t9);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),xv.$set(zMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),kv.$set(a9);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),Xv.$set(QMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Qv.$set(Zr);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),Uv.$set(WMe);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),Yv.$set(ff);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),lF.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),dF.$set(UMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),pF.$set(L);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),_F.$set(CC);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),yF.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),xF.$set(YMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),RF.$set(wC);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),PF.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),GF.$set(ZMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),VF.$set(AC);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),HF.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),JF.$set(o4e);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),e0.$set(yC);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),r0.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),n0.$set(t4e);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),l0.$set(LC);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),g0.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),p0.$set(n4e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),b0.$set(xC);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),F0.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),fT.$set(l4e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),gT.$set($C);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),qT.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),jT.$set(d4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),KT.$set(kC);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),e7.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),a7.$set(f4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),s7.$set(SC);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),y7.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),x7.$set(g4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),D7.$set(RC);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),O7.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),pM.$set(p4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),_M.$set(BC);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),PM.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),qM.$set(_4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),DM.$set(PC);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),OM.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),XM.$set(v4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),QM.$set(IC);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),g4.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),p4.$set(T4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),I4.$set(qC);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),N4.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),D4.$set(E4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),O4.$set(NC);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),X4.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),Q4.$set(w4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),bE.$set(jC);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),FE.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),$E.$set(y4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),SE.$set(DC);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),zE.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),WE.$set(x4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),a5.$set(GC);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),s5.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),u5.$set(k4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),b5.$set(OC);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),x5.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),k5.$set(R4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),O5.$set(VC);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),X5.$set(B4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),Z5.$set(P4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),oC.$set(XC);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),cC.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),mC.$set(q4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),hC.$set(zC);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),uC.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),vC.$set(j4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),TC.$set(QC);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),EC.$set(D4e)},i(f){yqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(bf.$$.fragment,f),E(Hw.$$.fragment,f),E(Uw.$$.fragment,f),E(Kw.$$.fragment,f),E(ug.$$.fragment,f),E(Zw.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(aA.$$.fragment,f),E(Hg.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(lA.$$.fragment,f),E(cA.$$.fragment,f),E(Th.$$.fragment,f),E(Mh.$$.fragment,f),E(fA.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(uA.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(TA.$$.fragment,f),E(Vh.$$.fragment,f),E(MA.$$.fragment,f),E(Su.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(AA.$$.fragment,f),E(Bu.$$.fragment,f),E(yA.$$.fragment,f),E(T_.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(kA.$$.fragment,f),E(E_.$$.fragment,f),E(SA.$$.fragment,f),E(l1.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(d1.$$.fragment,f),E(qA.$$.fragment,f),E(Q1.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(GA.$$.fragment,f),E(H1.$$.fragment,f),E(OA.$$.fragment,f),E(g8.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(p8.$$.fragment,f),E(WA.$$.fragment,f),E(cb.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(mb.$$.fragment,f),E(KA.$$.fragment,f),E(Vb.$$.fragment,f),E(ZA.$$.fragment,f),E(e6.$$.fragment,f),E(r6.$$.fragment,f),E(zb.$$.fragment,f),E(t6.$$.fragment,f),E(Kb.$$.fragment,f),E(a6.$$.fragment,f),E(n6.$$.fragment,f),E(l6.$$.fragment,f),E(e2.$$.fragment,f),E(i6.$$.fragment,f),E(P2.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(m6.$$.fragment,f),E(q2.$$.fragment,f),E(g6.$$.fragment,f),E(Cv.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(Av.$$.fragment,f),E(b6.$$.fragment,f),E(xv.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(M6.$$.fragment,f),E(kv.$$.fragment,f),E(E6.$$.fragment,f),E(Xv.$$.fragment,f),E(C6.$$.fragment,f),E(w6.$$.fragment,f),E(y6.$$.fragment,f),E(Qv.$$.fragment,f),E(L6.$$.fragment,f),E(Uv.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(S6.$$.fragment,f),E(Yv.$$.fragment,f),E(R6.$$.fragment,f),E(lF.$$.fragment,f),E(B6.$$.fragment,f),E(P6.$$.fragment,f),E(q6.$$.fragment,f),E(dF.$$.fragment,f),E(N6.$$.fragment,f),E(pF.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(O6.$$.fragment,f),E(_F.$$.fragment,f),E(V6.$$.fragment,f),E(yF.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(xF.$$.fragment,f),E(H6.$$.fragment,f),E(RF.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(PF.$$.fragment,f),E(ey.$$.fragment,f),E(GF.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(VF.$$.fragment,f),E(ny.$$.fragment,f),E(HF.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(JF.$$.fragment,f),E(cy.$$.fragment,f),E(e0.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(r0.$$.fragment,f),E(uy.$$.fragment,f),E(n0.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(l0.$$.fragment,f),E(Ty.$$.fragment,f),E(g0.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(p0.$$.fragment,f),E(Ay.$$.fragment,f),E(b0.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(F0.$$.fragment,f),E(ky.$$.fragment,f),E(fT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(gT.$$.fragment,f),E(Iy.$$.fragment,f),E(qT.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(jT.$$.fragment,f),E(Gy.$$.fragment,f),E(KT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(e7.$$.fragment,f),E(Qy.$$.fragment,f),E(a7.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(s7.$$.fragment,f),E(Yy.$$.fragment,f),E(y7.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(x7.$$.fragment,f),E(rL.$$.fragment,f),E(D7.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(O7.$$.fragment,f),E(lL.$$.fragment,f),E(pM.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(_M.$$.fragment,f),E(mL.$$.fragment,f),E(PM.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(qM.$$.fragment,f),E(_L.$$.fragment,f),E(DM.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(OM.$$.fragment,f),E(EL.$$.fragment,f),E(XM.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(QM.$$.fragment,f),E(LL.$$.fragment,f),E(g4.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(p4.$$.fragment,f),E(RL.$$.fragment,f),E(I4.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(N4.$$.fragment,f),E(NL.$$.fragment,f),E(D4.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(O4.$$.fragment,f),E(VL.$$.fragment,f),E(X4.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(Q4.$$.fragment,f),E(HL.$$.fragment,f),E(bE.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(FE.$$.fragment,f),E(ZL.$$.fragment,f),E($E.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(SE.$$.fragment,f),E(ax.$$.fragment,f),E(zE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(WE.$$.fragment,f),E(dx.$$.fragment,f),E(a5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(s5.$$.fragment,f),E(hx.$$.fragment,f),E(u5.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(b5.$$.fragment,f),E(vx.$$.fragment,f),E(x5.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(k5.$$.fragment,f),E(Cx.$$.fragment,f),E(O5.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(X5.$$.fragment,f),E(xx.$$.fragment,f),E(Z5.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(oC.$$.fragment,f),E(Bx.$$.fragment,f),E(cC.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(mC.$$.fragment,f),E(jx.$$.fragment,f),E(hC.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(uC.$$.fragment,f),E(Xx.$$.fragment,f),E(vC.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(TC.$$.fragment,f),E(Jx.$$.fragment,f),E(EC.$$.fragment,f),yqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(bf.$$.fragment,f),C(Hw.$$.fragment,f),C(Uw.$$.fragment,f),C(Kw.$$.fragment,f),C(ug.$$.fragment,f),C(Zw.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(aA.$$.fragment,f),C(Hg.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(lA.$$.fragment,f),C(cA.$$.fragment,f),C(Th.$$.fragment,f),C(Mh.$$.fragment,f),C(fA.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(uA.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(TA.$$.fragment,f),C(Vh.$$.fragment,f),C(MA.$$.fragment,f),C(Su.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(AA.$$.fragment,f),C(Bu.$$.fragment,f),C(yA.$$.fragment,f),C(T_.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(kA.$$.fragment,f),C(E_.$$.fragment,f),C(SA.$$.fragment,f),C(l1.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(d1.$$.fragment,f),C(qA.$$.fragment,f),C(Q1.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(GA.$$.fragment,f),C(H1.$$.fragment,f),C(OA.$$.fragment,f),C(g8.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(p8.$$.fragment,f),C(WA.$$.fragment,f),C(cb.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(mb.$$.fragment,f),C(KA.$$.fragment,f),C(Vb.$$.fragment,f),C(ZA.$$.fragment,f),C(e6.$$.fragment,f),C(r6.$$.fragment,f),C(zb.$$.fragment,f),C(t6.$$.fragment,f),C(Kb.$$.fragment,f),C(a6.$$.fragment,f),C(n6.$$.fragment,f),C(l6.$$.fragment,f),C(e2.$$.fragment,f),C(i6.$$.fragment,f),C(P2.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(m6.$$.fragment,f),C(q2.$$.fragment,f),C(g6.$$.fragment,f),C(Cv.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(Av.$$.fragment,f),C(b6.$$.fragment,f),C(xv.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(M6.$$.fragment,f),C(kv.$$.fragment,f),C(E6.$$.fragment,f),C(Xv.$$.fragment,f),C(C6.$$.fragment,f),C(w6.$$.fragment,f),C(y6.$$.fragment,f),C(Qv.$$.fragment,f),C(L6.$$.fragment,f),C(Uv.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(S6.$$.fragment,f),C(Yv.$$.fragment,f),C(R6.$$.fragment,f),C(lF.$$.fragment,f),C(B6.$$.fragment,f),C(P6.$$.fragment,f),C(q6.$$.fragment,f),C(dF.$$.fragment,f),C(N6.$$.fragment,f),C(pF.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(O6.$$.fragment,f),C(_F.$$.fragment,f),C(V6.$$.fragment,f),C(yF.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(xF.$$.fragment,f),C(H6.$$.fragment,f),C(RF.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(PF.$$.fragment,f),C(ey.$$.fragment,f),C(GF.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(VF.$$.fragment,f),C(ny.$$.fragment,f),C(HF.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(JF.$$.fragment,f),C(cy.$$.fragment,f),C(e0.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(r0.$$.fragment,f),C(uy.$$.fragment,f),C(n0.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(l0.$$.fragment,f),C(Ty.$$.fragment,f),C(g0.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(p0.$$.fragment,f),C(Ay.$$.fragment,f),C(b0.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(F0.$$.fragment,f),C(ky.$$.fragment,f),C(fT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(gT.$$.fragment,f),C(Iy.$$.fragment,f),C(qT.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(jT.$$.fragment,f),C(Gy.$$.fragment,f),C(KT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(e7.$$.fragment,f),C(Qy.$$.fragment,f),C(a7.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(s7.$$.fragment,f),C(Yy.$$.fragment,f),C(y7.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(x7.$$.fragment,f),C(rL.$$.fragment,f),C(D7.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(O7.$$.fragment,f),C(lL.$$.fragment,f),C(pM.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(_M.$$.fragment,f),C(mL.$$.fragment,f),C(PM.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(qM.$$.fragment,f),C(_L.$$.fragment,f),C(DM.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(OM.$$.fragment,f),C(EL.$$.fragment,f),C(XM.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(QM.$$.fragment,f),C(LL.$$.fragment,f),C(g4.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(p4.$$.fragment,f),C(RL.$$.fragment,f),C(I4.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(N4.$$.fragment,f),C(NL.$$.fragment,f),C(D4.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(O4.$$.fragment,f),C(VL.$$.fragment,f),C(X4.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(Q4.$$.fragment,f),C(HL.$$.fragment,f),C(bE.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(FE.$$.fragment,f),C(ZL.$$.fragment,f),C($E.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(SE.$$.fragment,f),C(ax.$$.fragment,f),C(zE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(WE.$$.fragment,f),C(dx.$$.fragment,f),C(a5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(s5.$$.fragment,f),C(hx.$$.fragment,f),C(u5.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(b5.$$.fragment,f),C(vx.$$.fragment,f),C(x5.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(k5.$$.fragment,f),C(Cx.$$.fragment,f),C(O5.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(X5.$$.fragment,f),C(xx.$$.fragment,f),C(Z5.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(oC.$$.fragment,f),C(Bx.$$.fragment,f),C(cC.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(mC.$$.fragment,f),C(jx.$$.fragment,f),C(hC.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(uC.$$.fragment,f),C(Xx.$$.fragment,f),C(vC.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(TC.$$.fragment,f),C(Jx.$$.fragment,f),C(EC.$$.fragment,f),yqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(gf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(pf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(CPe),f&&t(pi),w(Qw),f&&t(wPe),f&&t($n),f&&t(APe),w(Ww,f),f&&t(yPe),f&&t(p$),f&&t(LPe),w(bf,f),f&&t(xPe),f&&t(ui),w(Hw),f&&t($Pe),f&&t(Co),w(Uw),w(Kw),w(ug),w(Zw),f&&t(kPe),f&&t(bi),w(eA),f&&t(SPe),f&&t(wo),w(oA),w(aA),w(Hg),w(nA),f&&t(RPe),f&&t(vi),w(sA),f&&t(BPe),f&&t(Ao),w(lA),w(cA),w(Th),w(Mh),w(fA),f&&t(PPe),f&&t(Fi),w(mA),f&&t(IPe),f&&t(yo),w(gA),w(uA),w(jh),w(Dh),w(_A),f&&t(qPe),f&&t(Mi),w(bA),f&&t(NPe),f&&t(Lo),w(vA),w(TA),w(Vh),w(MA),w(Su),f&&t(jPe),f&&t(wi),w(EA),f&&t(DPe),f&&t(xo),w(CA),w(AA),w(Bu),w(yA),w(T_),f&&t(GPe),f&&t(Li),w(LA),f&&t(OPe),f&&t($o),w(xA),w(kA),w(E_),w(SA),w(l1),f&&t(VPe),f&&t(ki),w(RA),f&&t(XPe),f&&t(ko),w(BA),w(IA),w(d1),w(qA),w(Q1),f&&t(zPe),f&&t(Bi),w(NA),f&&t(QPe),f&&t(So),w(jA),w(GA),w(H1),w(OA),w(g8),f&&t(WPe),f&&t(qi),w(VA),f&&t(HPe),f&&t(Ro),w(XA),w(QA),w(p8),w(WA),w(cb),f&&t(UPe),f&&t(Di),w(HA),f&&t(JPe),f&&t(Bo),w(UA),w(YA),w(mb),w(KA),w(Vb),f&&t(YPe),f&&t(Vi),w(ZA),f&&t(KPe),f&&t(Po),w(e6),w(r6),w(zb),w(t6),w(Kb),f&&t(ZPe),f&&t(Qi),w(a6),f&&t(eIe),f&&t(Io),w(n6),w(l6),w(e2),w(i6),w(P2),f&&t(oIe),f&&t(Ui),w(d6),f&&t(rIe),f&&t(qo),w(c6),w(m6),w(q2),w(g6),w(Cv),f&&t(tIe),f&&t(Ki),w(h6),f&&t(aIe),f&&t(No),w(p6),w(_6),w(Av),w(b6),w(xv),f&&t(nIe),f&&t(od),w(v6),f&&t(sIe),f&&t(jo),w(F6),w(M6),w(kv),w(E6),w(Xv),f&&t(lIe),f&&t(ad),w(C6),f&&t(iIe),f&&t(Do),w(w6),w(y6),w(Qv),w(L6),w(Uv),f&&t(dIe),f&&t(ld),w(x6),f&&t(cIe),f&&t(Go),w($6),w(S6),w(Yv),w(R6),w(lF),f&&t(fIe),f&&t(cd),w(B6),f&&t(mIe),f&&t(Oo),w(P6),w(q6),w(dF),w(N6),w(pF),f&&t(gIe),f&&t(gd),w(j6),f&&t(hIe),f&&t(Vo),w(D6),w(O6),w(_F),w(V6),w(yF),f&&t(pIe),f&&t(ud),w(X6),f&&t(uIe),f&&t(Xo),w(z6),w(W6),w(xF),w(H6),w(RF),f&&t(_Ie),f&&t(vd),w(J6),f&&t(bIe),f&&t(zo),w(Y6),w(Z6),w(PF),w(ey),w(GF),f&&t(vIe),f&&t(Md),w(oy),f&&t(FIe),f&&t(Qo),w(ry),w(ay),w(VF),w(ny),w(HF),f&&t(TIe),f&&t(Ad),w(sy),f&&t(MIe),f&&t(Wo),w(ly),w(dy),w(JF),w(cy),w(e0),f&&t(EIe),f&&t(xd),w(my),f&&t(CIe),f&&t(Ho),w(gy),w(py),w(r0),w(uy),w(n0),f&&t(wIe),f&&t(Sd),w(_y),f&&t(AIe),f&&t(Uo),w(by),w(Fy),w(l0),w(Ty),w(g0),f&&t(yIe),f&&t(Pd),w(My),f&&t(LIe),f&&t(Jo),w(Ey),w(wy),w(p0),w(Ay),w(b0),f&&t(xIe),f&&t(Nd),w(yy),f&&t($Ie),f&&t(Yo),w(Ly),w($y),w(F0),w(ky),w(fT),f&&t(kIe),f&&t(Gd),w(Sy),f&&t(SIe),f&&t(Ko),w(Ry),w(Py),w(gT),w(Iy),w(qT),f&&t(RIe),f&&t(Xd),w(qy),f&&t(BIe),f&&t(Zo),w(Ny),w(Dy),w(jT),w(Gy),w(KT),f&&t(PIe),f&&t(Wd),w(Oy),f&&t(IIe),f&&t(er),w(Vy),w(zy),w(e7),w(Qy),w(a7),f&&t(qIe),f&&t(Yd),w(Wy),f&&t(NIe),f&&t(or),w(Hy),w(Jy),w(s7),w(Yy),w(y7),f&&t(jIe),f&&t(ec),w(Ky),f&&t(DIe),f&&t(rr),w(Zy),w(oL),w(x7),w(rL),w(D7),f&&t(GIe),f&&t(tc),w(tL),f&&t(OIe),f&&t(tr),w(aL),w(sL),w(O7),w(lL),w(pM),f&&t(VIe),f&&t(sc),w(iL),f&&t(XIe),f&&t(ar),w(dL),w(fL),w(_M),w(mL),w(PM),f&&t(zIe),f&&t(dc),w(gL),f&&t(QIe),f&&t(nr),w(hL),w(uL),w(qM),w(_L),w(DM),f&&t(WIe),f&&t(mc),w(vL),f&&t(HIe),f&&t(sr),w(FL),w(ML),w(OM),w(EL),w(XM),f&&t(UIe),f&&t(pc),w(CL),f&&t(JIe),f&&t(lr),w(wL),w(yL),w(QM),w(LL),w(g4),f&&t(YIe),f&&t(bc),w(xL),f&&t(KIe),f&&t(ir),w($L),w(SL),w(p4),w(RL),w(I4),f&&t(ZIe),f&&t(Tc),w(BL),f&&t(eqe),f&&t(dr),w(PL),w(qL),w(N4),w(NL),w(D4),f&&t(oqe),f&&t(Cc),w(jL),f&&t(rqe),f&&t(cr),w(DL),w(OL),w(O4),w(VL),w(X4),f&&t(tqe),f&&t(yc),w(XL),f&&t(aqe),f&&t(fr),w(zL),w(WL),w(Q4),w(HL),w(bE),f&&t(nqe),f&&t($c),w(UL),f&&t(sqe),f&&t(mr),w(JL),w(KL),w(FE),w(ZL),w($E),f&&t(lqe),f&&t(Rc),w(ex),f&&t(iqe),f&&t(gr),w(ox),w(tx),w(SE),w(ax),w(zE),f&&t(dqe),f&&t(Ic),w(nx),f&&t(cqe),f&&t(hr),w(sx),w(ix),w(WE),w(dx),w(a5),f&&t(fqe),f&&t(jc),w(cx),f&&t(mqe),f&&t(pr),w(fx),w(gx),w(s5),w(hx),w(u5),f&&t(gqe),f&&t(Oc),w(px),f&&t(hqe),f&&t(ur),w(ux),w(bx),w(b5),w(vx),w(x5),f&&t(pqe),f&&t(zc),w(Fx),f&&t(uqe),f&&t(_r),w(Tx),w(Ex),w(k5),w(Cx),w(O5),f&&t(_qe),f&&t(Hc),w(wx),f&&t(bqe),f&&t(br),w(Ax),w(Lx),w(X5),w(xx),w(Z5),f&&t(vqe),f&&t(Yc),w($x),f&&t(Fqe),f&&t(vr),w(kx),w(Rx),w(oC),w(Bx),w(cC),f&&t(Tqe),f&&t(ef),w(Px),f&&t(Mqe),f&&t(Fr),w(Ix),w(Nx),w(mC),w(jx),w(hC),f&&t(Eqe),f&&t(tf),w(Dx),f&&t(Cqe),f&&t(Tr),w(Gx),w(Vx),w(uC),w(Xx),w(vC),f&&t(wqe),f&&t(sf),w(Qx),f&&t(Aqe),f&&t(Mr),w(Wx),w(Ux),w(TC),w(Jx),w(EC)}}}const g6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function h6t(A){return hwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class T6t extends cwt{constructor(g){super();fwt(this,g,h6t,m6t,mwt,{})}}export{T6t as default,g6t as metadata};
